1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.compendium.cm;
1:f13c6ac: 
1:f13c6ac: import java.lang.reflect.InvocationTargetException;
1:f13c6ac: import java.lang.reflect.Method;
1:f13c6ac: import java.lang.reflect.Modifier;
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Arrays;
1:f13c6ac: import java.util.Dictionary;
1:f13c6ac: import java.util.Enumeration;
1:f13c6ac: import java.util.HashMap;
1:f13c6ac: import java.util.HashSet;
1:f13c6ac: import java.util.LinkedHashSet;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: import java.util.Properties;
1:f13c6ac: import java.util.Set;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.BeanProcessor;
1:09a7647: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:6414875: import org.apache.aries.blueprint.utils.ReflectionUtils;
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: import org.osgi.framework.Constants;
1:f13c6ac: import org.osgi.service.blueprint.container.ReifiedType;
1:aa58216: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:f13c6ac: import org.osgi.service.cm.Configuration;
1:f13c6ac: import org.osgi.service.cm.ConfigurationAdmin;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * TODO
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class CmManagedProperties implements ManagedObject, BeanProcessor {
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(CmManagedProperties.class);
1:f13c6ac: 
1:f13c6ac:     private ExtendedBlueprintContainer blueprintContainer;
1:f13c6ac:     private ConfigurationAdmin configAdmin;
1:f13c6ac:     private ManagedObjectManager managedObjectManager;
1:f13c6ac:     private String persistentId;
1:f13c6ac:     private String updateStrategy;
1:f13c6ac:     private String updateMethod;
1:f13c6ac:     private String beanName;
1:f13c6ac: 
1:f13c6ac:     private final Object lock = new Object();
1:f13c6ac:     private final Set<Object> beans = new HashSet<Object>();
1:f13c6ac:     private Dictionary<String,Object> properties;
1:1591a51:     private boolean initialized;
1:f13c6ac: 
1:f13c6ac:     public ExtendedBlueprintContainer getBlueprintContainer() {
1:f13c6ac:         return blueprintContainer;
3:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
1:f13c6ac:         this.blueprintContainer = blueprintContainer;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public ConfigurationAdmin getConfigAdmin() {
1:f13c6ac:         return configAdmin;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setConfigAdmin(ConfigurationAdmin configAdmin) {
1:f13c6ac:         this.configAdmin = configAdmin;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setManagedObjectManager(ManagedObjectManager managedObjectManager) {
1:f13c6ac:         this.managedObjectManager = managedObjectManager;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public ManagedObjectManager getManagedObjectManager() {
1:f13c6ac:         return managedObjectManager;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public Bundle getBundle() {
1:f13c6ac:         return blueprintContainer.getBundleContext().getBundle();
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public String getPersistentId() {
1:f13c6ac:         return persistentId;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setPersistentId(String persistentId) {
1:f13c6ac:         this.persistentId = persistentId;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getUpdateStrategy() {
1:f13c6ac:         return updateStrategy;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setUpdateStrategy(String updateStrategy) {
1:f13c6ac:         this.updateStrategy = updateStrategy;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getUpdateMethod() {
1:f13c6ac:         return updateMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setUpdateMethod(String updateMethod) {
1:f13c6ac:         this.updateMethod = updateMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getBeanName() {
1:f13c6ac:         return beanName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setBeanName(String beanName) {
1:f13c6ac:         this.beanName = beanName;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void init() throws Exception {
1:f13c6ac:         LOGGER.debug("Initializing CmManagedProperties for bean={} / pid={}", beanName, persistentId);
1:f13c6ac:         
1:f13c6ac:         Properties props = new Properties();
1:f13c6ac:         props.put(Constants.SERVICE_PID, persistentId);
1:f13c6ac:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:f13c6ac:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:f13c6ac:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:f13c6ac:                 
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             managedObjectManager.register(this, props);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void destroy() {
1:f13c6ac:         managedObjectManager.unregister(this);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void updated(final Dictionary props) {
1:1591a51:         if (!initialized) {
1:1591a51:             properties = props;
1:1591a51:             initialized = true;
1:1591a51:             return;
1:1591a51:         }
1:f13c6ac:         LOGGER.debug("Configuration updated for bean={} / pid={}", beanName, persistentId);
1:fc74a12:         synchronized (lock) {
1:fc74a12:             properties = props;
1:fc74a12:             for (Object bean : beans) {
1:2a76796:                 updated(bean, properties);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:14d26b7: 
1:422ba76:     public void updated(Object bean, final Dictionary props) {
1:422ba76:         LOGGER.debug("Configuration updated for bean={} / pid={}", beanName, persistentId);
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             properties = props;
1:422ba76:             if (bean != null) {
1:fc74a12:                 inject(bean, false);
1:fc74a12:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:aa58216:     public Object beforeInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:f13c6ac:         if (beanName != null && beanName.equals(this.beanName)) {
1:f13c6ac:             LOGGER.debug("Adding bean for bean={} / pid={}", beanName, persistentId);
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 beans.add(bean);
1:f13c6ac:                 inject(bean, true);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return bean;
1:f13c6ac:     }
1:f13c6ac: 
1:aa58216:     public Object afterInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:f13c6ac:         return bean;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void beforeDestroy(Object bean, String beanName) {
1:f13c6ac:         if (beanName.equals(this.beanName)) {
1:f13c6ac:             LOGGER.debug("Removing bean for bean={} / pid={}", beanName, persistentId);
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 beans.remove(bean);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void afterDestroy(Object bean, String beanName) {
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private void inject(Object bean, boolean initial) {
1:f13c6ac:         LOGGER.debug("Injecting bean for bean={} / pid={}", beanName, persistentId);
1:f13c6ac:         LOGGER.debug("Configuration: {}", properties);
1:f13c6ac:         if (initial || "container-managed".equals(updateStrategy)) {
1:f13c6ac:             if (properties != null) {
1:f13c6ac:                 for (Enumeration<String> e = properties.keys(); e.hasMoreElements();) {
1:f13c6ac:                     String key = e.nextElement();
1:f13c6ac:                     Object val = properties.get(key);
1:f13c6ac:                     String setterName = "set" + Character.toUpperCase(key.charAt(0));
1:f13c6ac:                     if (key.length() > 0) {
1:f13c6ac:                         setterName += key.substring(1);
1:f13c6ac:                     }
1:f13c6ac:                     Set<Method> validSetters = new LinkedHashSet<Method>();
1:f13c6ac:                     List<Method> methods = new ArrayList<Method>(Arrays.asList(bean.getClass().getMethods()));
1:f13c6ac:                     methods.addAll(Arrays.asList(bean.getClass().getDeclaredMethods()));
1:f13c6ac:                     for (Method method : methods) {
1:f13c6ac:                         if (method.getName().equals(setterName)) {
1:14d26b7:                             if (shouldSkip(method)) {
6:f13c6ac:                                 continue;
1:f13c6ac:                             }
1:f13c6ac:                             Class methodParameterType = method.getParameterTypes()[0];
1:f13c6ac:                             Object propertyValue;
1:f13c6ac:                             try {
1:f13c6ac:                                 propertyValue = blueprintContainer.getConverter().convert(val, new ReifiedType(methodParameterType));
1:f13c6ac:                             } catch (Throwable t) {
1:f13c6ac:                                 LOGGER.debug("Unable to convert value for setter: " + method, t);
1:f13c6ac:                                 continue;
1:f13c6ac:                             }
1:f13c6ac:                             if (methodParameterType.isPrimitive() && propertyValue == null) {
1:f13c6ac:                                 LOGGER.debug("Null can not be assigned to {}: {}", methodParameterType.getName(), method);
1:f13c6ac:                                 continue;
1:f13c6ac:                             }
1:f13c6ac:                             if (validSetters.add(method)) {
1:f13c6ac:                                 try {
1:f13c6ac:                                     method.invoke(bean, propertyValue);
1:f13c6ac:                                 } catch (Exception t) {
1:f13c6ac:                                     LOGGER.debug("Setter can not be invoked: " + method, getRealCause(t));
1:f13c6ac:                                 }
1:f13c6ac:                             }
1:f13c6ac:                         }
1:f13c6ac:                     }
1:f13c6ac:                     if (validSetters.isEmpty()) {
1:f13c6ac:                         LOGGER.debug("Unable to find a valid setter method for property {} and value {}", key, val);
1:f13c6ac:                     }
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         } else if ("component-managed".equals(updateStrategy) && updateMethod != null) {
1:f13c6ac:             List<Method> methods = ReflectionUtils.findCompatibleMethods(bean.getClass(), updateMethod, new Class[] { Map.class });
1:f13c6ac:             Map map = null;
1:f13c6ac:             if (properties != null) {
1:f13c6ac:                 map = new HashMap();
1:f13c6ac:                 for (Enumeration<String> e = properties.keys(); e.hasMoreElements();) {
1:f13c6ac:                     String key = e.nextElement();
1:f13c6ac:                     Object val = properties.get(key);
1:f13c6ac:                     map.put(key, val);
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:             for (Method method : methods) {
1:f13c6ac:                 try {
1:f13c6ac:                     method.invoke(bean, map);
1:f13c6ac:                 } catch (Throwable t) {
1:f13c6ac:                     LOGGER.warn("Unable to call method " + method + " on bean " + beanName, getRealCause(t));
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:422ba76: 
1:14d26b7:     private boolean shouldSkip(Method method) {
1:14d26b7:         String msg = null;
1:f13c6ac:         if (method.getParameterTypes().length == 0) {
1:14d26b7:             msg = "takes no parameters";
1:14d26b7:         } else if (method.getParameterTypes().length > 1) {
1:14d26b7:             msg = "takes more than one parameter";
1:14d26b7:         } else if (method.getReturnType() != Void.TYPE) {
1:14d26b7:             msg = "returns a value";
1:14d26b7:         } else if (Modifier.isAbstract(method.getModifiers())) {
1:14d26b7:             msg = "is abstract";
1:14d26b7:         } else if (!Modifier.isPublic(method.getModifiers())) {
1:14d26b7:             msg = "is not public";
1:14d26b7:         } else if (Modifier.isStatic(method.getModifiers())) {
1:14d26b7:             msg = "is static";
1:f13c6ac:         }
1:14d26b7:         if (msg != null) {
1:14d26b7:             LOGGER.debug("Skipping setter {} because it " + msg, method);
1:14d26b7:             return true;
1:14d26b7:         } else {
1:14d26b7:             return false;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private static Throwable getRealCause(Throwable t) {
1:f13c6ac:         if (t instanceof InvocationTargetException && t.getCause() != null) {
1:f13c6ac:             return t.getCause();
1:f13c6ac:         }
1:f13c6ac:         return t;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1591a51
/////////////////////////////////////////////////////////////////////////
1:     private boolean initialized;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!initialized) {
1:             properties = props;
1:             initialized = true;
1:             return;
1:         }
commit:fc74a12
/////////////////////////////////////////////////////////////////////////
1:         synchronized (lock) {
1:             properties = props;
1:             for (Object bean : beans) {
1:                 inject(bean, false);
1:         }
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.compendium.cm;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Modifier;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.LinkedHashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.Set;
1: 
0: import org.apache.geronimo.blueprint.BeanProcessor;
0: import org.apache.geronimo.blueprint.ExtendedBlueprintContainer;
0: import org.apache.geronimo.blueprint.utils.ReflectionUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.blueprint.container.ReifiedType;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * TODO
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 766508 $, $Date: 2009-04-19 22:09:27 +0200 (Sun, 19 Apr 2009) $
1:  */
1: public class CmManagedProperties implements ManagedObject, BeanProcessor {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(CmManagedProperties.class);
1: 
1:     private ExtendedBlueprintContainer blueprintContainer;
1:     private ConfigurationAdmin configAdmin;
1:     private ManagedObjectManager managedObjectManager;
1:     private String persistentId;
1:     private String updateStrategy;
1:     private String updateMethod;
1:     private String beanName;
1: 
1:     private final Object lock = new Object();
1:     private final Set<Object> beans = new HashSet<Object>();
1:     private Dictionary<String,Object> properties;
1: 
1:     public ExtendedBlueprintContainer getBlueprintContainer() {
1:         return blueprintContainer;
1:     }
1: 
1:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
1:         this.blueprintContainer = blueprintContainer;
1:     }
1: 
1:     public ConfigurationAdmin getConfigAdmin() {
1:         return configAdmin;
1:     }
1: 
1:     public void setConfigAdmin(ConfigurationAdmin configAdmin) {
1:         this.configAdmin = configAdmin;
1:     }
1: 
1:     public void setManagedObjectManager(ManagedObjectManager managedObjectManager) {
1:         this.managedObjectManager = managedObjectManager;
1:     }
1:     
1:     public ManagedObjectManager getManagedObjectManager() {
1:         return managedObjectManager;
1:     }
1:     
1:     public Bundle getBundle() {
1:         return blueprintContainer.getBundleContext().getBundle();
1:     }
1:     
1:     public String getPersistentId() {
1:         return persistentId;
1:     }
1: 
1:     public void setPersistentId(String persistentId) {
1:         this.persistentId = persistentId;
1:     }
1: 
1:     public String getUpdateStrategy() {
1:         return updateStrategy;
1:     }
1: 
1:     public void setUpdateStrategy(String updateStrategy) {
1:         this.updateStrategy = updateStrategy;
1:     }
1: 
1:     public String getUpdateMethod() {
1:         return updateMethod;
1:     }
1: 
1:     public void setUpdateMethod(String updateMethod) {
1:         this.updateMethod = updateMethod;
1:     }
1: 
1:     public String getBeanName() {
1:         return beanName;
1:     }
1: 
1:     public void setBeanName(String beanName) {
1:         this.beanName = beanName;
1:     }
1:     
1:     public void init() throws Exception {
1:         LOGGER.debug("Initializing CmManagedProperties for bean={} / pid={}", beanName, persistentId);
1:         
1:         Properties props = new Properties();
1:         props.put(Constants.SERVICE_PID, persistentId);
1:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:                 
1:         synchronized (lock) {
1:             managedObjectManager.register(this, props);
0:             Configuration config = CmUtils.getConfiguration(configAdmin, persistentId);
0:             if (config != null) {
0:                 properties = config.getProperties();
1:             }
1:         }
1:     }
1: 
1:     public void destroy() {
1:         managedObjectManager.unregister(this);
1:     }
1: 
1:     public void updated(final Dictionary props) {
1:         LOGGER.debug("Configuration updated for bean={} / pid={}", beanName, persistentId);
0:         // Run in a separate thread to avoid re-entrance
0:         new Thread() {
0:             public void run() {
1:                 synchronized (lock) {
1:                     properties = props;
0:                     for (Object bean : beans) {
0:                         inject(bean, false);
1:                     }
1:                 }
1:             }
0:         }.start();
1:     }
1: 
0:     public Object beforeInit(Object bean, String beanName) {
1:         if (beanName != null && beanName.equals(this.beanName)) {
1:             LOGGER.debug("Adding bean for bean={} / pid={}", beanName, persistentId);
1:             synchronized (lock) {
1:                 beans.add(bean);
1:                 inject(bean, true);
1:             }
1:         }
1:         return bean;
1:     }
1: 
0:     public Object afterInit(Object bean, String beanName) {
1:         return bean;
1:     }
1: 
1:     public void beforeDestroy(Object bean, String beanName) {
1:         if (beanName.equals(this.beanName)) {
1:             LOGGER.debug("Removing bean for bean={} / pid={}", beanName, persistentId);
1:             synchronized (lock) {
1:                 beans.remove(bean);
1:             }
1:         }
1:     }
1: 
1:     public void afterDestroy(Object bean, String beanName) {
1:     }
1: 
1:     private void inject(Object bean, boolean initial) {
1:         LOGGER.debug("Injecting bean for bean={} / pid={}", beanName, persistentId);
1:         LOGGER.debug("Configuration: {}", properties);
1:         if (initial || "container-managed".equals(updateStrategy)) {
1:             if (properties != null) {
1:                 for (Enumeration<String> e = properties.keys(); e.hasMoreElements();) {
1:                     String key = e.nextElement();
1:                     Object val = properties.get(key);
1:                     String setterName = "set" + Character.toUpperCase(key.charAt(0));
1:                     if (key.length() > 0) {
1:                         setterName += key.substring(1);
1:                     }
1:                     Set<Method> validSetters = new LinkedHashSet<Method>();
1:                     List<Method> methods = new ArrayList<Method>(Arrays.asList(bean.getClass().getMethods()));
1:                     methods.addAll(Arrays.asList(bean.getClass().getDeclaredMethods()));
1:                     for (Method method : methods) {
1:                         if (method.getName().equals(setterName)) {
1:                             if (method.getParameterTypes().length == 0) {
0:                                 LOGGER.debug("Setter takes no parameters: {}", method);
1:                                 continue;
1:                             }
0:                             if (method.getParameterTypes().length > 1) {
0:                                 LOGGER.debug("Setter takes more than one parameter: {}", method);
1:                                 continue;
1:                             }
0:                             if (method.getReturnType() != Void.TYPE) {
0:                                 LOGGER.debug("Setter returns a value: {}", method);
1:                                 continue;
1:                             }
0:                             if (Modifier.isAbstract(method.getModifiers())) {
0:                                 LOGGER.debug("Setter is abstract: {}", method);
1:                                 continue;
1:                             }
0:                             if (!Modifier.isPublic(method.getModifiers())) {
0:                                 LOGGER.debug("Setter is not public: {}", method);
1:                                 continue;
1:                             }
0:                             if (Modifier.isStatic(method.getModifiers())) {
0:                                 LOGGER.debug("Setter is static: {}", method);
1:                                 continue;
1:                             }
1:                             Class methodParameterType = method.getParameterTypes()[0];
1:                             Object propertyValue;
1:                             try {
1:                                 propertyValue = blueprintContainer.getConverter().convert(val, new ReifiedType(methodParameterType));
1:                             } catch (Throwable t) {
1:                                 LOGGER.debug("Unable to convert value for setter: " + method, t);
1:                                 continue;
1:                             }
1:                             if (methodParameterType.isPrimitive() && propertyValue == null) {
1:                                 LOGGER.debug("Null can not be assigned to {}: {}", methodParameterType.getName(), method);
1:                                 continue;
1:                             }
1:                             if (validSetters.add(method)) {
1:                                 try {
1:                                     method.invoke(bean, propertyValue);
1:                                 } catch (Exception t) {
1:                                     LOGGER.debug("Setter can not be invoked: " + method, getRealCause(t));
1:                                 }
1:                             }
1:                         }
1:                     }
1:                     if (validSetters.isEmpty()) {
1:                         LOGGER.debug("Unable to find a valid setter method for property {} and value {}", key, val);
1:                     }
1:                 }
1:             }
1:         } else if ("component-managed".equals(updateStrategy) && updateMethod != null) {
1:             List<Method> methods = ReflectionUtils.findCompatibleMethods(bean.getClass(), updateMethod, new Class[] { Map.class });
1:             Map map = null;
1:             if (properties != null) {
1:                 map = new HashMap();
1:                 for (Enumeration<String> e = properties.keys(); e.hasMoreElements();) {
1:                     String key = e.nextElement();
1:                     Object val = properties.get(key);
1:                     map.put(key, val);
1:                 }
1:             }
1:             for (Method method : methods) {
1:                 try {
1:                     method.invoke(bean, map);
1:                 } catch (Throwable t) {
1:                     LOGGER.warn("Unable to call method " + method + " on bean " + beanName, getRealCause(t));
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private static Throwable getRealCause(Throwable t) {
1:         if (t instanceof InvocationTargetException && t.getCause() != null) {
1:             return t.getCause();
1:         }
1:         return t;
1:     }
1: 
1: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:14d26b7
/////////////////////////////////////////////////////////////////////////
1:                             if (shouldSkip(method)) {
/////////////////////////////////////////////////////////////////////////
1:     private boolean shouldSkip(Method method) {
1:         String msg = null;
0:         if (method.getParameterTypes().length == 0) {
1:             msg = "takes no parameters";
1:         } else if (method.getParameterTypes().length > 1) {
1:             msg = "takes more than one parameter";
1:         } else if (method.getReturnType() != Void.TYPE) {
1:             msg = "returns a value";
1:         } else if (Modifier.isAbstract(method.getModifiers())) {
1:             msg = "is abstract";
1:         } else if (!Modifier.isPublic(method.getModifiers())) {
1:             msg = "is not public";
1:         } else if (Modifier.isStatic(method.getModifiers())) {
1:             msg = "is static";
0:         }
1:         if (msg != null) {
1:             LOGGER.debug("Skipping setter {} because it " + msg, method);
1:             return true;
1:         } else {
1:             return false;
0:         }
0:     }
1: 
commit:ac0e5c7
/////////////////////////////////////////////////////////////////////////
0:             updated(properties);
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:2a76796
/////////////////////////////////////////////////////////////////////////
0:             for (Object bean : beans) {
1:                 updated(bean, properties);
0:             }
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:422ba76
/////////////////////////////////////////////////////////////////////////
0:         }
0:     }
1: 
1:     public void updated(Object bean, final Dictionary props) {
1:         LOGGER.debug("Configuration updated for bean={} / pid={}", beanName, persistentId);
0:         synchronized (lock) {
0:             properties = props;
1:             if (bean != null) {
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.compendium.cm;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.BeanProcessor;
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
1: import org.apache.aries.blueprint.utils.ReflectionUtils;
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:aa58216
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.blueprint.container.ReifiedType;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
/////////////////////////////////////////////////////////////////////////
1:     public Object beforeInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
/////////////////////////////////////////////////////////////////////////
1:     public Object afterInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
============================================================================