1:c84d925: /*
1:c84d925:  * Licensed under the Apache License, Version 2.0 (the "License");
1:c84d925:  * you may not use this file except in compliance with the License.
1:c84d925:  * You may obtain a copy of the License at
1:c84d925:  *
1:c84d925:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c84d925:  *
1:c84d925:  * Unless required by applicable law or agreed to in writing, software
1:c84d925:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c84d925:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c84d925:  * See the License for the specific language governing permissions and
1:c84d925:  * limitations under the License.
1:c84d925:  */
1:c84d925: package org.apache.aries.subsystem.install.internal;
1:c84d925: 
1:c84d925: import java.io.File;
1:c84d925: import java.io.IOException;
1:5d0a8e8: import java.net.MalformedURLException;
1:c84d925: import java.util.jar.Attributes;
1:c84d925: import java.util.jar.JarFile;
1:c84d925: import java.util.jar.Manifest;
1:c84d925: 
1:5d0a8e8: import org.apache.aries.subsystem.Subsystem;
1:c84d925: import org.apache.aries.subsystem.SubsystemConstants;
1:c84d925: import org.apache.felix.fileinstall.ArtifactInstaller;
1:c84d925: 
1:c84d925: public class SubsystemInstaller implements ArtifactInstaller {
1:c84d925: 
1:6f4b079:     private Subsystem root;
1:c84d925: 
1:6f4b079:     public Subsystem getRootSubsystem() {
1:6f4b079:         return root;
2:c84d925:     }
1:c84d925: 
1:6f4b079:     public void setRootSubsystem(Subsystem subsystem) {
1:6f4b079:         this.root = subsystem;
1:c84d925:     }
1:c84d925: 
1:c84d925:     public void install(File file) throws Exception {
1:6f4b079:         root.install(getLocation(file));
1:c84d925:     }
1:c84d925: 
1:c84d925:     public void update(File file) throws Exception {
1:6f4b079:     	String location = getLocation(file);
1:6f4b079:         getSubsystem(location).update();
1:c84d925:     }
1:c84d925: 
1:c84d925:     public void uninstall(File file) throws Exception {
1:6f4b079:         getSubsystem(getLocation(file)).uninstall();
1:5d0a8e8:     }
1:5d0a8e8: 
1:5d0a8e8:     protected Subsystem getSubsystem(String location) {
1:6f4b079:         for (Subsystem s : root.getChildren()) {
1:5d0a8e8:             if (s.getLocation().equals(location)) {
1:5d0a8e8:                 return s;
1:5d0a8e8:             }
1:5d0a8e8:         }
1:5d0a8e8:         return null;
1:5d0a8e8:     }
1:5d0a8e8: 
1:5d0a8e8:     protected String getLocation(File file) throws MalformedURLException {
1:5d0a8e8:         if (file.isDirectory()) {
1:5d0a8e8:             return "jardir:" + file.getPath();
1:5d0a8e8:         } else {
1:5d0a8e8:             return file.toURI().toURL().toExternalForm();
1:5d0a8e8:         }
1:c84d925:     }
1:c84d925: 
1:c84d925:     public boolean canHandle(File artifact)
1:c84d925:     {
1:c84d925:         JarFile jar = null;
1:c84d925:         try
1:c84d925:         {
1:c84d925:             // Handle OSGi bundles with the default deployer
1:c84d925:             String name = artifact.getName();
1:c84d925:             if (!artifact.canRead()
1:c84d925:                 || name.endsWith(".txt") || name.endsWith(".xml")
1:c84d925:                 || name.endsWith(".properties") || name.endsWith(".cfg"))
1:c84d925:             {
1:c84d925:                 // that's file type which is not supported as bundle and avoid
1:c84d925:                 // exception in the log
1:c84d925:                 return false;
1:c84d925:             }
1:c84d925:             jar = new JarFile(artifact);
1:c84d925:             Manifest m = jar.getManifest();
1:c84d925:             if (m.getMainAttributes().getValue(new Attributes.Name(SubsystemConstants.SUBSYSTEM_MANIFESTVERSION)) != null
1:c84d925:                 && m.getMainAttributes().getValue(new Attributes.Name(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME)) != null
1:c84d925:                 && m.getMainAttributes().getValue(new Attributes.Name(SubsystemConstants.SUBSYSTEM_VERSION)) != null)
1:c84d925:             {
1:c84d925:                 return true;
1:c84d925:             }
1:c84d925:         }
1:c84d925:         catch (Exception e)
1:c84d925:         {
1:c84d925:             // Ignore
1:c84d925:         }
1:c84d925:         finally
1:c84d925:         {
1:c84d925:             if (jar != null)
1:c84d925:             {
1:c84d925:                 try
1:c84d925:                 {
1:c84d925:                     jar.close();
1:c84d925:                 }
1:c84d925:                 catch (IOException e)
1:c84d925:                 {
1:c84d925:                     // Ignore
1:c84d925:                 }
1:c84d925:             }
1:c84d925:         }
1:c84d925:         return false;
1:c84d925:     }
1:c84d925: 
1:c84d925: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1:     private Subsystem root;
1:     public Subsystem getRootSubsystem() {
1:         return root;
1:     public void setRootSubsystem(Subsystem subsystem) {
1:         this.root = subsystem;
1:         root.install(getLocation(file));
1:     	String location = getLocation(file);
1:         getSubsystem(location).update();
1:         getSubsystem(getLocation(file)).uninstall();
1:         for (Subsystem s : root.getChildren()) {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5d0a8e8
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
1: import org.apache.aries.subsystem.Subsystem;
/////////////////////////////////////////////////////////////////////////
0:         subsystemAdmin.install(getLocation(file));
0:         subsystemAdmin.update(getSubsystem(getLocation(file)));
0:         subsystemAdmin.uninstall(getSubsystem(getLocation(file)));
1:     }
1: 
1:     protected Subsystem getSubsystem(String location) {
0:         for (Subsystem s : subsystemAdmin.getSubsystems()) {
1:             if (s.getLocation().equals(location)) {
1:                 return s;
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     protected String getLocation(File file) throws MalformedURLException {
1:         if (file.isDirectory()) {
1:             return "jardir:" + file.getPath();
1:         } else {
1:             return file.toURI().toURL().toExternalForm();
1:         }
commit:c84d925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.install.internal;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarFile;
1: import java.util.jar.Manifest;
1: 
0: import org.apache.aries.subsystem.SubsystemAdmin;
1: import org.apache.aries.subsystem.SubsystemConstants;
1: import org.apache.felix.fileinstall.ArtifactInstaller;
1: 
1: public class SubsystemInstaller implements ArtifactInstaller {
1: 
0:     private SubsystemAdmin subsystemAdmin;
1: 
0:     public SubsystemAdmin getSubsystemAdmin() {
0:         return subsystemAdmin;
1:     }
1: 
0:     public void setSubsystemAdmin(SubsystemAdmin subsystemAdmin) {
0:         this.subsystemAdmin = subsystemAdmin;
1:     }
1: 
1:     public void install(File file) throws Exception {
0:         if (file.isDirectory()) {
0:             subsystemAdmin.install("jardir:" + file.getPath());
0:         } else {
0:             subsystemAdmin.install(file.toURI().toURL().toExternalForm());
1:         }
1:     }
1: 
1:     public void update(File file) throws Exception {
0:         //To change body of implemented methods use File | Settings | File Templates.
1:     }
1: 
1:     public void uninstall(File file) throws Exception {
0:         //To change body of implemented methods use File | Settings | File Templates.
1:     }
1: 
1:     public boolean canHandle(File artifact)
1:     {
1:         JarFile jar = null;
1:         try
1:         {
1:             // Handle OSGi bundles with the default deployer
1:             String name = artifact.getName();
1:             if (!artifact.canRead()
1:                 || name.endsWith(".txt") || name.endsWith(".xml")
1:                 || name.endsWith(".properties") || name.endsWith(".cfg"))
1:             {
1:                 // that's file type which is not supported as bundle and avoid
1:                 // exception in the log
1:                 return false;
1:             }
1:             jar = new JarFile(artifact);
1:             Manifest m = jar.getManifest();
1:             if (m.getMainAttributes().getValue(new Attributes.Name(SubsystemConstants.SUBSYSTEM_MANIFESTVERSION)) != null
1:                 && m.getMainAttributes().getValue(new Attributes.Name(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME)) != null
1:                 && m.getMainAttributes().getValue(new Attributes.Name(SubsystemConstants.SUBSYSTEM_VERSION)) != null)
1:             {
1:                 return true;
1:             }
1:         }
1:         catch (Exception e)
1:         {
1:             // Ignore
1:         }
1:         finally
1:         {
1:             if (jar != null)
1:             {
1:                 try
1:                 {
1:                     jar.close();
1:                 }
1:                 catch (IOException e)
1:                 {
1:                     // Ignore
1:                 }
1:             }
1:         }
1:         return false;
1:     }
1: 
1: }
============================================================================