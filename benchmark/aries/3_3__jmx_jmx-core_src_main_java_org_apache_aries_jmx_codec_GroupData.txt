1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
5:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import java.util.ArrayList;
1:0356de4: import java.util.Dictionary;
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1:fdf3952: import org.osgi.service.useradmin.Group;
1:fdf3952: import org.osgi.service.useradmin.Role;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>GroupData</tt> represents Group Type @see {@link UserAdminMBean#GROUP_TYPE}.It is a codec
1:fdf3952:  * for the <code>CompositeData</code> representing a Group.
1:fdf3952:  * </p>
1:fdf3952:  * </p>
1:0356de4:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class GroupData extends UserData {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see UserAdminMBean#MEMBERS_ITEM
1:fdf3952:      * @see UserAdminMBean#MEMBERS
1:fdf3952:      */
1:fdf3952:     private String[] members;
1:fdf3952:     /**
1:fdf3952:      * @see UserAdminMBean#REQUIRED_MEMBERS
1:fdf3952:      * @see UserAdminMBean#REQUIRED_MEMBERS_ITEM
1:fdf3952:      */
1:fdf3952:     private String[] requiredMembers;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new GroupData from Group object.
1:fdf3952:      * @param group {@link Group} instance.
1:fdf3952:      */
1:fdf3952:     public GroupData(Group group) {
1:32a99b9:         super(group.getName(), Role.GROUP, group.getProperties(), group.getCredentials());
1:fdf3952:         this.members = toArray(group.getMembers());
1:fdf3952:         this.requiredMembers = toArray(group.getRequiredMembers());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new GroupData.
1:0356de4:      *
1:fdf3952:      * @param name group name.
1:a7846d3:      * @param members basic members.
1:a7846d3:      * @param requiredMembers required members.
1:a7846d3:      */
1:a7846d3:     public GroupData(String name, String[] members, String[] requiredMembers) {
1:a7846d3:         this(name, null, null, members, requiredMembers);
1:a7846d3:     }
1:a7846d3:     
1:a7846d3:     /**
1:a7846d3:      * Constructs new GroupData.
1:a7846d3:      *
1:a7846d3:      * @param name group name.
1:0356de4:      * @param properties group properties.
1:a7846d3:      * @param credentials group credentials.
1:fdf3952:      * @param members basic members.
1:fdf3952:      * @param requiredMembers required members.
1:fdf3952:      */
1:0a8778f:     @SuppressWarnings("rawtypes")
1:0a8778f: 	public GroupData(String name, Dictionary properties, Dictionary credentials, String[] members, String[] requiredMembers) {
1:32a99b9:         super(name, Role.GROUP, properties, credentials);
1:fdf3952:         this.members = (members == null) ? new String[0] : members;
1:fdf3952:         this.requiredMembers = (requiredMembers == null) ? new String[0] : requiredMembers;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Translates GroupData to CompositeData represented by compositeType {@link UserAdminMBean#GROUP_TYPE}.
1:0356de4:      *
1:fdf3952:      * @return translated GroupData to compositeData.
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         try {
1:fdf3952:             Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:             items.put(UserAdminMBean.NAME, name);
1:fdf3952:             items.put(UserAdminMBean.TYPE, type);
1:540df86:             // items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
1:540df86:             // items.put(UserAdminMBean.CREDENTIALS, getCredentialsTable());
1:fdf3952:             items.put(UserAdminMBean.MEMBERS, members);
1:fdf3952:             items.put(UserAdminMBean.REQUIRED_MEMBERS, requiredMembers);
1:fdf3952:             return new CompositeDataSupport(UserAdminMBean.GROUP_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Can't create CompositeData" + e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method to create GroupData from CompositeData object.
1:0356de4:      *
1:fdf3952:      * @param data
1:fdf3952:      *            {@link CompositeData} instance.
1:fdf3952:      * @return GroupData instance.
1:fdf3952:      */
1:fdf3952:     public static GroupData from(CompositeData data) {
1:fdf3952:         if (data == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         String name = (String) data.get(UserAdminMBean.NAME);
1:540df86:         // Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1:540df86:         // Dictionary<String, Object> credentials = propertiesFrom((TabularData) data.get(UserAdminMBean.CREDENTIALS));
1:0356de4: 
1:fdf3952:         String[] members = (String[]) data.get(UserAdminMBean.MEMBERS);
1:fdf3952:         String[] requiredMembers = (String[]) data.get(UserAdminMBean.REQUIRED_MEMBERS);
1:540df86:         return new GroupData(name, null, null,/* props, credentials, */ members, requiredMembers);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the members
1:fdf3952:      */
1:fdf3952:     public String[] getMembers() {
1:fdf3952:         return members;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the requiredMembers
1:fdf3952:      */
1:fdf3952:     public String[] getRequiredMembers() {
1:fdf3952:         return requiredMembers;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private static String[] toArray(Role[] roles) {
1:fdf3952:         List<String> members = new ArrayList<String>();
1:fdf3952:         if (roles != null) {
1:fdf3952:             for (Role role : roles) {
1:fdf3952:                 members.add(role.getName());
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return members.toArray(new String[members.size()]);
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1: 	public GroupData(String name, Dictionary properties, Dictionary credentials, String[] members, String[] requiredMembers) {
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:a7846d3
/////////////////////////////////////////////////////////////////////////
1:      * @param members basic members.
1:      * @param requiredMembers required members.
1:      */
1:     public GroupData(String name, String[] members, String[] requiredMembers) {
1:         this(name, null, null, members, requiredMembers);
1:     }
1:     
1:     /**
1:      * Constructs new GroupData.
1:      *
1:      * @param name group name.
1:      * @param credentials group credentials.
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:540df86
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             // items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
1:             // items.put(UserAdminMBean.CREDENTIALS, getCredentialsTable());
/////////////////////////////////////////////////////////////////////////
1:         // Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1:         // Dictionary<String, Object> credentials = propertiesFrom((TabularData) data.get(UserAdminMBean.CREDENTIALS));
1:         return new GroupData(name, null, null,/* props, credentials, */ members, requiredMembers);
commit:32a99b9
/////////////////////////////////////////////////////////////////////////
1:         super(group.getName(), Role.GROUP, group.getProperties(), group.getCredentials());
/////////////////////////////////////////////////////////////////////////
0:     public GroupData(String name, Dictionary properties, Dictionary credentials, String[] members, String[] requiredMembers) {
1:         super(name, Role.GROUP, properties, credentials);
/////////////////////////////////////////////////////////////////////////
0:             items.put(UserAdminMBean.CREDENTIALS, getCredentialsTable());
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, Object> credentials = propertiesFrom((TabularData) data.get(UserAdminMBean.CREDENTIALS));
0:         return new GroupData(name, props, credentials, members, requiredMembers);
commit:0356de4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
0: import javax.management.openmbean.TabularData;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
0:         super(group.getName(), Role.GROUP, group.getProperties());
1:      *
1:      * @param properties group properties.
0:     public GroupData(String name, Dictionary properties, String[] members, String[] requiredMembers) {
0:         super(name, Role.GROUP, properties);
1:      *
/////////////////////////////////////////////////////////////////////////
0:             items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1: 
0:         return new GroupData(name, props, members, requiredMembers);
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1: import org.osgi.service.useradmin.Group;
1: import org.osgi.service.useradmin.Role;
1: 
1: /**
1:  * <p>
1:  * <tt>GroupData</tt> represents Group Type @see {@link UserAdminMBean#GROUP_TYPE}.It is a codec
1:  * for the <code>CompositeData</code> representing a Group.
1:  * </p>
1:  * </p>
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class GroupData extends UserData {
1: 
1:     /**
1:      * @see UserAdminMBean#MEMBERS_ITEM
1:      * @see UserAdminMBean#MEMBERS
1:      */
1:     private String[] members;
1:     /**
1:      * @see UserAdminMBean#REQUIRED_MEMBERS
1:      * @see UserAdminMBean#REQUIRED_MEMBERS_ITEM
1:      */
1:     private String[] requiredMembers;
1: 
1:     /**
1:      * Constructs new GroupData from Group object.
1:      * @param group {@link Group} instance.
1:      */
1:     public GroupData(Group group) {
0:         super(group.getName(), Role.GROUP);
1:         this.members = toArray(group.getMembers());
1:         this.requiredMembers = toArray(group.getRequiredMembers());
1:     }
1: 
1:     /**
1:      * Constructs new GroupData.
1:      * 
1:      * @param name group name.
1:      * @param members basic members.
1:      * @param requiredMembers required members.
1:      */
0:     public GroupData(String name, String[] members, String[] requiredMembers) {
0:         super(name, Role.GROUP);
1:         this.members = (members == null) ? new String[0] : members;
1:         this.requiredMembers = (requiredMembers == null) ? new String[0] : requiredMembers;
1:     }
1: 
1:     /**
1:      * Translates GroupData to CompositeData represented by compositeType {@link UserAdminMBean#GROUP_TYPE}.
1:      * 
1:      * @return translated GroupData to compositeData.
1:      */
1:     public CompositeData toCompositeData() {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(UserAdminMBean.NAME, name);
1:             items.put(UserAdminMBean.TYPE, type);
1:             items.put(UserAdminMBean.MEMBERS, members);
1:             items.put(UserAdminMBean.REQUIRED_MEMBERS, requiredMembers);
1:             return new CompositeDataSupport(UserAdminMBean.GROUP_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData" + e);
1:         }
1:     }
1: 
1:     /**
1:      * Static factory method to create GroupData from CompositeData object.
1:      * 
1:      * @param data
1:      *            {@link CompositeData} instance.
1:      * @return GroupData instance.
1:      */
1:     public static GroupData from(CompositeData data) {
1:         if (data == null) {
1:             return null;
1:         }
1:         String name = (String) data.get(UserAdminMBean.NAME);
1:         String[] members = (String[]) data.get(UserAdminMBean.MEMBERS);
1:         String[] requiredMembers = (String[]) data.get(UserAdminMBean.REQUIRED_MEMBERS);
0:         return new GroupData(name, members, requiredMembers);
1:     }
1: 
1:     /**
1:      * @return the members
1:      */
1:     public String[] getMembers() {
1:         return members;
1:     }
1: 
1:     /**
1:      * @return the requiredMembers
1:      */
1:     public String[] getRequiredMembers() {
1:         return requiredMembers;
1:     }
1: 
1:     private static String[] toArray(Role[] roles) {
1:         List<String> members = new ArrayList<String>();
1:         if (roles != null) {
1:             for (Role role : roles) {
1:                 members.add(role.getName());
1:             }
1:         }
1:         return members.toArray(new String[members.size()]);
1:     }
1: }
============================================================================