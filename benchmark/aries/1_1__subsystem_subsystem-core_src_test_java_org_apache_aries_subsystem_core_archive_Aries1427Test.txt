1:b70cf95: /*
1:b70cf95:  * Licensed under the Apache License, Version 2.0 (the "License");
1:b70cf95:  * you may not use this file except in compliance with the License.
1:b70cf95:  * You may obtain a copy of the License at
1:b70cf95:  *
1:b70cf95:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b70cf95:  *
1:b70cf95:  * Unless required by applicable law or agreed to in writing, software
1:b70cf95:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b70cf95:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b70cf95:  * See the License for the specific language governing permissions and
1:b70cf95:  * limitations under the License.
1:b70cf95:  */
1:b70cf95: package org.apache.aries.subsystem.core.archive;
1:b70cf95: 
1:b70cf95: import static org.junit.Assert.assertEquals;
1:b70cf95: 
1:b70cf95: import java.util.Collections;
1:b70cf95: import java.util.List;
1:b70cf95: 
1:b70cf95: import org.apache.aries.subsystem.core.internal.BasicRequirement;
1:b70cf95: import org.junit.Test;
1:b70cf95: import org.osgi.framework.VersionRange;
1:b70cf95: import org.osgi.framework.namespace.PackageNamespace;
1:b70cf95: import org.osgi.resource.Capability;
1:b70cf95: import org.osgi.resource.Requirement;
1:b70cf95: import org.osgi.resource.Resource;
1:b70cf95: 
1:b70cf95: /*
1:b70cf95:  * https://issues.apache.org/jira/browse/ARIES-1427
1:b70cf95:  * 
1:b70cf95:  * org.osgi.service.subsystem.SubsystemException: 
1:b70cf95:  * java.lang.IllegalArgumentException: Invalid filter: (version=*)
1:b70cf95:  */
1:b70cf95: public class Aries1427Test {
1:b70cf95: 	@Test
1:b70cf95: 	public void testRequirementConversionWithVersionPresence() {
1:b70cf95: 		VersionRange range = VersionRange.valueOf("(1.0,2.0)");
1:b70cf95: 		String filter = new StringBuilder()
1:b70cf95: 				.append("(&(")
1:b70cf95: 				.append(PackageNamespace.PACKAGE_NAMESPACE)
1:b70cf95: 				.append("=com.acme.tnt")
1:b70cf95: 				.append(')')
1:b70cf95: 				.append(range.toFilterString(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE))
1:b70cf95: 				.append(')')
1:b70cf95: 				.toString();
1:b70cf95: 		Requirement requirement = new BasicRequirement.Builder()
1:b70cf95: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b70cf95: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, filter)
1:b70cf95: 				.resource(new Resource() {
1:b70cf95: 					@Override
1:b70cf95: 					public List<Capability> getCapabilities(String namespace) {
1:b70cf95: 						return Collections.emptyList();
1:b70cf95: 					}
1:b70cf95: 
1:b70cf95: 					@Override
1:b70cf95: 					public List<Requirement> getRequirements(String namespace) {
1:b70cf95: 						return Collections.emptyList();
1:b70cf95: 					}
1:b70cf95: 				})
1:b70cf95: 				.build();
1:b70cf95: 		ImportPackageHeader.Clause expected = new ImportPackageHeader.Clause(
1:b70cf95: 				"com.acme.tnt;version=\"(1.0,2.0)\"");
1:b70cf95: 		ImportPackageHeader.Clause actual = ImportPackageHeader.Clause.valueOf(requirement);
1:b70cf95: 		assertEquals("Wrong clause", expected, actual);
1:b70cf95: 	}
1:b70cf95: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:b70cf95
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.aries.subsystem.core.internal.BasicRequirement;
1: import org.junit.Test;
1: import org.osgi.framework.VersionRange;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1427
1:  * 
1:  * org.osgi.service.subsystem.SubsystemException: 
1:  * java.lang.IllegalArgumentException: Invalid filter: (version=*)
1:  */
1: public class Aries1427Test {
1: 	@Test
1: 	public void testRequirementConversionWithVersionPresence() {
1: 		VersionRange range = VersionRange.valueOf("(1.0,2.0)");
1: 		String filter = new StringBuilder()
1: 				.append("(&(")
1: 				.append(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.append("=com.acme.tnt")
1: 				.append(')')
1: 				.append(range.toFilterString(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE))
1: 				.append(')')
1: 				.toString();
1: 		Requirement requirement = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, filter)
1: 				.resource(new Resource() {
1: 					@Override
1: 					public List<Capability> getCapabilities(String namespace) {
1: 						return Collections.emptyList();
1: 					}
1: 
1: 					@Override
1: 					public List<Requirement> getRequirements(String namespace) {
1: 						return Collections.emptyList();
1: 					}
1: 				})
1: 				.build();
1: 		ImportPackageHeader.Clause expected = new ImportPackageHeader.Clause(
1: 				"com.acme.tnt;version=\"(1.0,2.0)\"");
1: 		ImportPackageHeader.Clause actual = ImportPackageHeader.Clause.valueOf(requirement);
1: 		assertEquals("Wrong clause", expected, actual);
1: 	}
1: }
============================================================================