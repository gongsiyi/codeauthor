1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.Metadata;
1:fdf3952: 
1:fdf3952: public class BPCollectionMetadata implements BPNonNullMetadata {
1:fdf3952:     private String collectionClass;
1:fdf3952: 
1:fdf3952:     private String valueType;
1:fdf3952: 
1:fdf3952:     private BPMetadata[] values;
1:fdf3952: 
1:fdf3952:     public BPCollectionMetadata(CompositeData collection) {
1:fdf3952:         collectionClass = (String) collection.get(BlueprintMetadataMBean.COLLECTION_CLASS);
1:fdf3952:         valueType = (String) collection.get(BlueprintMetadataMBean.VALUE_TYPE);
1:fdf3952: 
1:fdf3952:         Byte[][] arrays = (Byte[][]) collection.get(BlueprintMetadataMBean.VALUES);
1:fdf3952:         values = new BPMetadata[arrays.length];
1:fdf3952:         for (int i = 0; i < values.length; i++) {
1:fdf3952:             values[i] = Util.boxedBinary2BPMetadata((Byte[]) arrays[i]);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPCollectionMetadata(CollectionMetadata collection) {
1:fdf3952:         collectionClass = collection.getCollectionClass().getCanonicalName();
1:fdf3952:         valueType = collection.getValueType();
1:fdf3952: 
1:fdf3952:         values = new BPMetadata[collection.getValues().size()];
1:fdf3952:         int i = 0;
1:fdf3952:         for (Object value : collection.getValues()) {
1:fdf3952:             values[i++] = Util.metadata2BPMetadata((Metadata) value);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public CompositeData asCompositeData() {
1:fdf3952:         HashMap<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(BlueprintMetadataMBean.COLLECTION_CLASS, collectionClass);
1:fdf3952:         items.put(BlueprintMetadataMBean.VALUE_TYPE, valueType);
1:fdf3952: 
1:fdf3952:         Byte[][] arrays = new Byte[values.length][];
1:fdf3952:         for (int i = 0; i < arrays.length; i++) {
1:fdf3952:             arrays[i] = Util.bpMetadata2BoxedBinary(values[i]);
1:fdf3952:         }
1:fdf3952:         items.put(BlueprintMetadataMBean.VALUES, arrays);
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             return new CompositeDataSupport(BlueprintMetadataMBean.COLLECTION_METADATA_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getCollectionClass() {
1:fdf3952:         return collectionClass;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getValueType() {
1:fdf3952:         return valueType;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPMetadata[] getValues() {
1:fdf3952:         return values;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.HashMap;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: 
1: public class BPCollectionMetadata implements BPNonNullMetadata {
1:     private String collectionClass;
1: 
1:     private String valueType;
1: 
1:     private BPMetadata[] values;
1: 
1:     public BPCollectionMetadata(CompositeData collection) {
1:         collectionClass = (String) collection.get(BlueprintMetadataMBean.COLLECTION_CLASS);
1:         valueType = (String) collection.get(BlueprintMetadataMBean.VALUE_TYPE);
1: 
1:         Byte[][] arrays = (Byte[][]) collection.get(BlueprintMetadataMBean.VALUES);
1:         values = new BPMetadata[arrays.length];
1:         for (int i = 0; i < values.length; i++) {
1:             values[i] = Util.boxedBinary2BPMetadata((Byte[]) arrays[i]);
1:         }
1:     }
1: 
1:     public BPCollectionMetadata(CollectionMetadata collection) {
1:         collectionClass = collection.getCollectionClass().getCanonicalName();
1:         valueType = collection.getValueType();
1: 
1:         values = new BPMetadata[collection.getValues().size()];
1:         int i = 0;
1:         for (Object value : collection.getValues()) {
1:             values[i++] = Util.metadata2BPMetadata((Metadata) value);
1:         }
1:     }
1: 
1:     public CompositeData asCompositeData() {
1:         HashMap<String, Object> items = new HashMap<String, Object>();
1:         items.put(BlueprintMetadataMBean.COLLECTION_CLASS, collectionClass);
1:         items.put(BlueprintMetadataMBean.VALUE_TYPE, valueType);
1: 
1:         Byte[][] arrays = new Byte[values.length][];
1:         for (int i = 0; i < arrays.length; i++) {
1:             arrays[i] = Util.bpMetadata2BoxedBinary(values[i]);
1:         }
1:         items.put(BlueprintMetadataMBean.VALUES, arrays);
1: 
1:         try {
1:             return new CompositeDataSupport(BlueprintMetadataMBean.COLLECTION_METADATA_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public String getCollectionClass() {
1:         return collectionClass;
1:     }
1: 
1:     public String getValueType() {
1:         return valueType;
1:     }
1: 
1:     public BPMetadata[] getValues() {
1:         return values;
1:     }
1: }
============================================================================