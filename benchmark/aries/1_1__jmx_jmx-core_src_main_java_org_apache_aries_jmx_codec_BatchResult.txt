1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.framework.FrameworkMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>BatchResult</tt> represents abstract class for BatchResults.
1:fdf3952:  * It contains common data structure of batch result:
1:fdf3952:  * <ul>
1:fdf3952:  * <li>completed containing the list of bundles completing the batch operation.</li>
1:fdf3952:  * <li>error containing the error message of the batch operation.</li>
1:fdf3952:  * <li>success indicates if this operation was successful.</li>
1:fdf3952:  * </ul>
1:fdf3952:  * </p>
1:fdf3952:  * 
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public abstract class BatchResult {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see FrameworkMBean#COMPLETED_ITEM
1:fdf3952:      * @see FrameworkMBean#COMPLETED
1:fdf3952:      */
1:fdf3952:     protected long[] completed;
1:fdf3952:     /**
1:fdf3952:      * @see FrameworkMBean#ERROR_ITEM
1:fdf3952:      * @see FrameworkMBean#ERROR
1:fdf3952:      */
1:fdf3952:     protected String error;
1:fdf3952:     /**
1:fdf3952:      * @see FrameworkMBean#SUCCESS_ITEM
1:fdf3952:      * @see FrameworkMBean#SUCCESS
1:fdf3952:      */
1:fdf3952:     protected boolean success;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Gets completed item id's.
1:fdf3952:      * @return completed items id's.
1:fdf3952:      */
1:fdf3952:     public long[] getCompleted() {
1:fdf3952:         return completed;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Gets error message.
1:fdf3952:      * @return error message.
1:fdf3952:      */
1:fdf3952:     public String getError() {
1:fdf3952:         return error;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Gets success value.
1:fdf3952:      * @return true if success false if not.
1:fdf3952:      */
1:fdf3952:     public boolean isSuccess() {
1:fdf3952:         return success;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Converts primitive array of strings to Long array.
1:fdf3952:      * 
1:fdf3952:      * @param primitiveArray primitive long array.
1:fdf3952:      * @return Long array.
1:fdf3952:      */
1:fdf3952:     protected Long[] toLongArray(long[] primitiveArray) {
1:fdf3952:         if (primitiveArray == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         Long[] converted = new Long[primitiveArray.length];
1:fdf3952:         for (int i = 0; i < primitiveArray.length; i++) {
1:fdf3952:             converted[i] = primitiveArray[i];
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return converted;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Converts Long array to primitive array of long.
1:fdf3952:      * 
1:fdf3952:      * @param wrapperArray Long array.
1:fdf3952:      * @return primitive long array.
1:fdf3952:      */
1:fdf3952:     protected static long[] toLongPrimitiveArray(Long[] wrapperArray) {
1:fdf3952:         if (wrapperArray == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         long[] converted = new long[wrapperArray.length];
1:fdf3952:         for (int i = 0; i < wrapperArray.length; i++) {
1:fdf3952:             converted[i] = wrapperArray[i];
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return converted;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import org.osgi.jmx.framework.FrameworkMBean;
1: 
1: /**
1:  * <p>
1:  * <tt>BatchResult</tt> represents abstract class for BatchResults.
1:  * It contains common data structure of batch result:
1:  * <ul>
1:  * <li>completed containing the list of bundles completing the batch operation.</li>
1:  * <li>error containing the error message of the batch operation.</li>
1:  * <li>success indicates if this operation was successful.</li>
1:  * </ul>
1:  * </p>
1:  * 
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public abstract class BatchResult {
1: 
1:     /**
1:      * @see FrameworkMBean#COMPLETED_ITEM
1:      * @see FrameworkMBean#COMPLETED
1:      */
1:     protected long[] completed;
1:     /**
1:      * @see FrameworkMBean#ERROR_ITEM
1:      * @see FrameworkMBean#ERROR
1:      */
1:     protected String error;
1:     /**
1:      * @see FrameworkMBean#SUCCESS_ITEM
1:      * @see FrameworkMBean#SUCCESS
1:      */
1:     protected boolean success;
1: 
1:     /**
1:      * Gets completed item id's.
1:      * @return completed items id's.
1:      */
1:     public long[] getCompleted() {
1:         return completed;
1:     }
1: 
1:     /**
1:      * Gets error message.
1:      * @return error message.
1:      */
1:     public String getError() {
1:         return error;
1:     }
1: 
1:     /**
1:      * Gets success value.
1:      * @return true if success false if not.
1:      */
1:     public boolean isSuccess() {
1:         return success;
1:     }
1:     
1:     /**
1:      * Converts primitive array of strings to Long array.
1:      * 
1:      * @param primitiveArray primitive long array.
1:      * @return Long array.
1:      */
1:     protected Long[] toLongArray(long[] primitiveArray) {
1:         if (primitiveArray == null) {
1:             return null;
1:         }
1:         Long[] converted = new Long[primitiveArray.length];
1:         for (int i = 0; i < primitiveArray.length; i++) {
1:             converted[i] = primitiveArray[i];
1:         }
1: 
1:         return converted;
1:     }
1: 
1:     /**
1:      * Converts Long array to primitive array of long.
1:      * 
1:      * @param wrapperArray Long array.
1:      * @return primitive long array.
1:      */
1:     protected static long[] toLongPrimitiveArray(Long[] wrapperArray) {
1:         if (wrapperArray == null) {
1:             return null;
1:         }
1:         long[] converted = new long[wrapperArray.length];
1:         for (int i = 0; i < wrapperArray.length; i++) {
1:             converted[i] = wrapperArray[i];
1:         }
1: 
1:         return converted;
1:     }
1: 
1: }
============================================================================