1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.impl;
1:2cfdf52: 
1:2cfdf52: import static org.mockito.Mockito.atLeastOnce;
1:2cfdf52: import static org.mockito.Mockito.mock;
1:2cfdf52: import static org.mockito.Mockito.verify;
1:2cfdf52: import static org.mockito.Mockito.when;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.container.impl.DataSourceTracker;
1:2cfdf52: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1:2cfdf52: import org.junit.Test;
1:2cfdf52: import org.mockito.Mockito;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.InvalidSyntaxException;
1:2cfdf52: 
1:2cfdf52: public class DataSourceTrackerTest {
1:2cfdf52:     
1:2cfdf52:     @Test
1:2cfdf52:     public void testCreateFilterFull() throws InvalidSyntaxException {
1:2cfdf52:         PersistenceUnit punit = mock(PersistenceUnit.class);
1:2cfdf52:         when(punit.getJtaDataSourceName()).thenReturn("osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=tasklist)");
1:2cfdf52:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:2cfdf52:         BundleContext context = mock(BundleContext.class);
1:2cfdf52:         
1:2cfdf52:         DataSourceTracker.createFilter(context, punit);
1:2cfdf52: 
1:2cfdf52:         verify(context, atLeastOnce()).createFilter(Mockito.eq("(&(objectClass=javax.sql.DataSource)(osgi.jndi.service.name=tasklist))"));
1:2cfdf52:     }
1:2cfdf52:     
1:2cfdf52:     @Test
1:2cfdf52:     public void testCreateFilterSimple() throws InvalidSyntaxException {
1:2cfdf52:         PersistenceUnit punit = mock(PersistenceUnit.class);
1:2cfdf52:         when(punit.getJtaDataSourceName()).thenReturn("tasklist");
1:2cfdf52:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:2cfdf52:         BundleContext context = mock(BundleContext.class);
1:2cfdf52:         
1:2cfdf52:         DataSourceTracker.createFilter(context, punit);
1:2cfdf52: 
1:2cfdf52:         verify(context, atLeastOnce()).createFilter(Mockito.eq("(&(objectClass=javax.sql.DataSource)(osgi.jndi.service.name=tasklist))"));
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.impl;
1: 
1: import static org.mockito.Mockito.atLeastOnce;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: 
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
1: import org.apache.aries.jpa.container.impl.DataSourceTracker;
1: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1: import org.junit.Test;
1: import org.mockito.Mockito;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: 
1: public class DataSourceTrackerTest {
1:     
1:     @Test
1:     public void testCreateFilterFull() throws InvalidSyntaxException {
1:         PersistenceUnit punit = mock(PersistenceUnit.class);
1:         when(punit.getJtaDataSourceName()).thenReturn("osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=tasklist)");
1:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:         BundleContext context = mock(BundleContext.class);
1:         
1:         DataSourceTracker.createFilter(context, punit);
1: 
1:         verify(context, atLeastOnce()).createFilter(Mockito.eq("(&(objectClass=javax.sql.DataSource)(osgi.jndi.service.name=tasklist))"));
1:     }
1:     
1:     @Test
1:     public void testCreateFilterSimple() throws InvalidSyntaxException {
1:         PersistenceUnit punit = mock(PersistenceUnit.class);
1:         when(punit.getJtaDataSourceName()).thenReturn("tasklist");
1:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:         BundleContext context = mock(BundleContext.class);
1:         
1:         DataSourceTracker.createFilter(context, punit);
1: 
1:         verify(context, atLeastOnce()).createFilter(Mockito.eq("(&(objectClass=javax.sql.DataSource)(osgi.jndi.service.name=tasklist))"));
1:     }
1: }
============================================================================