1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:779cf6b: package org.apache.aries.jpa.container.impl;
1:779cf6b: 
1:2cfdf52: import java.util.Dictionary;
1:2cfdf52: import java.util.Hashtable;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistry;
1:2cfdf52: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistrySingleton;
1:2cfdf52: import org.osgi.framework.Bundle;
1:779cf6b: import org.osgi.framework.BundleActivator;
1:779cf6b: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.Constants;
1:2cfdf52: import org.osgi.framework.hooks.weaving.WeavingHook;
1:2cfdf52: import org.osgi.util.tracker.BundleTracker;
1:779cf6b: 
1:779cf6b: public class Activator implements BundleActivator {
1:779cf6b: 
1:2cfdf52:     private BundleTracker<Bundle> persistenceBundleManager;
1:2cfdf52: 
1:2cfdf52:     @Override
1:779cf6b:     public void start(BundleContext context) throws Exception {
1:2cfdf52:         registerWeavingHook(context, TransformerRegistrySingleton.get());
1:2cfdf52: 
1:d669541:         PersistenceBundleTracker customizer = new PersistenceBundleTracker();
1:e809e9c:         persistenceBundleManager = new BundleTracker<Bundle>(context, Bundle.STARTING | Bundle.ACTIVE, customizer);
1:2cfdf52:         persistenceBundleManager.open();
1:779cf6b:     }
1:779cf6b: 
1:2cfdf52:     /**
1:2cfdf52:      * ARIES-1019: Register with the highest possible service ranking to
1:2cfdf52:      * avoid ClassNotFoundException caused by interfaces added by earlier
1:2cfdf52:      * weaving hooks that are not yet visible to the bundle class loader.
1:2cfdf52:      */
1:2cfdf52:     private void registerWeavingHook(BundleContext context, TransformerRegistry tr) {
1:ec3ea65:         Dictionary<String, Object> props = new Hashtable<String, Object>(1); // NOSONAR
1:2cfdf52:         props.put(Constants.SERVICE_RANKING, Integer.MAX_VALUE);
1:2cfdf52:         context.registerService(WeavingHook.class.getName(), tr, props);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:779cf6b:     public void stop(BundleContext context) throws Exception {
1:2cfdf52:         persistenceBundleManager.close();
1:779cf6b:     }
1:779cf6b: 
1:779cf6b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:d669541
/////////////////////////////////////////////////////////////////////////
1:         PersistenceBundleTracker customizer = new PersistenceBundleTracker();
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, Object> props = new Hashtable<String, Object>(1); // NOSONAR
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
1:         persistenceBundleManager = new BundleTracker<Bundle>(context, Bundle.STARTING | Bundle.ACTIVE, customizer);
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistry;
1: import org.apache.aries.jpa.container.weaving.impl.TransformerRegistrySingleton;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.hooks.weaving.WeavingHook;
1: import org.osgi.util.tracker.BundleTracker;
1:     private BundleTracker<Bundle> persistenceBundleManager;
1: 
1:     @Override
1:         registerWeavingHook(context, TransformerRegistrySingleton.get());
1: 
0:         PersistenceBundleTracker customizer = new PersistenceBundleTracker(context);
0:         persistenceBundleManager = new BundleTracker<>(context, Bundle.STARTING | Bundle.ACTIVE, customizer);
1:         persistenceBundleManager.open();
1:     /**
1:      * ARIES-1019: Register with the highest possible service ranking to
1:      * avoid ClassNotFoundException caused by interfaces added by earlier
1:      * weaving hooks that are not yet visible to the bundle class loader.
1:      */
1:     private void registerWeavingHook(BundleContext context, TransformerRegistry tr) {
0:         Dictionary<String, Object> props = new Hashtable<String, Object>(1);
1:         props.put(Constants.SERVICE_RANKING, Integer.MAX_VALUE);
1:         context.registerService(WeavingHook.class.getName(), tr, props);
1:     }
1: 
1:     @Override
1:         persistenceBundleManager.close();
commit:779cf6b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.impl;
1: 
0: import org.apache.aries.jpa.container.parsing.PersistenceDescriptorParser;
0: import org.apache.aries.jpa.container.parsing.impl.PersistenceDescriptorParserImpl;
0: import org.apache.aries.jpa.container.tx.impl.OSGiTransactionManager;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: 
1: public class Activator implements BundleActivator {
0:     private PersistenceBundleManager pbm;
1: 
1:     public void start(BundleContext context) throws Exception {
0:         PersistenceDescriptorParser parser = new PersistenceDescriptorParserImpl();
0:         context.registerService(PersistenceDescriptorParser.class.getName(), parser, null);
0:         pbm = new PersistenceBundleManager(context, parser);
0:         pbm.open();
1:     }
1: 
1:     public void stop(BundleContext context) throws Exception {
0:         pbm.close();
0:         OSGiTransactionManager otm = OSGiTransactionManager.get();
0:         if (otm != null)
0:             otm.destroy();
1:     }
1: 
1: }
============================================================================