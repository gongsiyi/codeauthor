1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.utils;
1:f13c6ac: 
1:f13c6ac: import java.util.Iterator;
1:f13c6ac: 
1:f13c6ac: import junit.framework.TestCase;
1:f13c6ac: 
1:f13c6ac: public class DynamicCollectionTest extends TestCase {
1:f13c6ac: 
1:f13c6ac:     protected static final Object O0 = new Object();
1:f13c6ac:     protected static final Object O1 = new Object();
1:f13c6ac:     protected static final Object O2 = new Object();
1:f13c6ac:     protected static final Object O3 = new Object();
1:f13c6ac: 
1:f13c6ac:     protected DynamicCollection<Object> collection;
1:f13c6ac: 
1:f13c6ac:     protected void setUp() {
1:f13c6ac:         collection = new DynamicCollection<Object>();
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testAddRemove() throws Exception {
1:f13c6ac:         assertEquals(0, collection.size());
1:f13c6ac:         assertTrue(collection.isEmpty());
1:f13c6ac:         collection.add(O0);
1:f13c6ac:         assertEquals(1, collection.size());
1:f13c6ac:         assertFalse(collection.isEmpty());
1:f13c6ac:         assertTrue(collection.contains(O0));
1:f13c6ac:         assertFalse(collection.contains(O1));
1:f13c6ac:         collection.clear();
1:f13c6ac:         assertEquals(0, collection.size());
1:f13c6ac:         collection.add(O0);
1:f13c6ac:         collection.add(O0);
1:f13c6ac:         assertEquals(2, collection.size());
1:f13c6ac:         assertTrue(collection.remove(O0));
1:f13c6ac:         assertEquals(1, collection.size());
1:f13c6ac:         assertTrue(collection.remove(O0));
1:f13c6ac:         assertEquals(0, collection.size());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testSimpleIterator() throws Exception {
1:f13c6ac:         collection.add(O0);
1:f13c6ac: 
1:f13c6ac:         Iterator iterator = collection.iterator();
1:f13c6ac:         assertTrue(iterator.hasNext());
1:f13c6ac:         assertEquals(O0, iterator.next());
1:f13c6ac:         assertFalse(iterator.hasNext());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testAddWhileIterating() throws Exception {
1:f13c6ac:         Iterator iterator = collection.iterator();
1:f13c6ac:         assertFalse(iterator.hasNext());
1:f13c6ac: 
1:f13c6ac:         collection.add(O0);
1:f13c6ac:         assertTrue(iterator.hasNext());
1:f13c6ac:         assertEquals(O0, iterator.next());
1:f13c6ac:         assertFalse(iterator.hasNext());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testRemoveElementWhileIterating() throws Exception {
1:f13c6ac:         collection.add(O0);
1:f13c6ac:         collection.add(O1);
1:f13c6ac: 
1:f13c6ac:         Iterator iterator = collection.iterator();
1:f13c6ac:         assertTrue(iterator.hasNext());
1:f13c6ac:         collection.remove(O0);
1:f13c6ac:         assertEquals(O0, iterator.next());
1:f13c6ac:         assertTrue(iterator.hasNext());
1:f13c6ac:         assertEquals(O1, iterator.next());
1:f13c6ac:         assertFalse(iterator.hasNext());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testRemoveElementAfterWhileIterating() throws Exception {
1:f13c6ac:         collection.add(O0);
1:f13c6ac:         collection.add(O1);
1:f13c6ac: 
1:f13c6ac:         Iterator iterator = collection.iterator();
1:f13c6ac:         assertTrue(iterator.hasNext());
1:f13c6ac:         assertEquals(O0, iterator.next());
1:f13c6ac:         collection.remove(O1);
1:f13c6ac:         assertFalse(iterator.hasNext());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testRemoveElementBeforeWhileIterating() throws Exception {
1:f13c6ac:         collection.add(O0);
1:f13c6ac:         collection.add(O1);
1:f13c6ac: 
1:f13c6ac:         Iterator iterator = collection.iterator();
1:f13c6ac:         assertTrue(iterator.hasNext());
1:f13c6ac:         assertEquals(O0, iterator.next());
1:f13c6ac:         collection.remove(O0);
1:f13c6ac:         assertTrue(iterator.hasNext());
1:f13c6ac:         assertEquals(O1, iterator.next());
1:f13c6ac:         assertFalse(iterator.hasNext());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.utils;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.utils;
1: 
1: import java.util.Iterator;
1: 
1: import junit.framework.TestCase;
1: 
1: public class DynamicCollectionTest extends TestCase {
1: 
1:     protected static final Object O0 = new Object();
1:     protected static final Object O1 = new Object();
1:     protected static final Object O2 = new Object();
1:     protected static final Object O3 = new Object();
1: 
1:     protected DynamicCollection<Object> collection;
1: 
1:     protected void setUp() {
1:         collection = new DynamicCollection<Object>();
1:     }
1: 
1:     public void testAddRemove() throws Exception {
1:         assertEquals(0, collection.size());
1:         assertTrue(collection.isEmpty());
1:         collection.add(O0);
1:         assertEquals(1, collection.size());
1:         assertFalse(collection.isEmpty());
1:         assertTrue(collection.contains(O0));
1:         assertFalse(collection.contains(O1));
1:         collection.clear();
1:         assertEquals(0, collection.size());
1:         collection.add(O0);
1:         collection.add(O0);
1:         assertEquals(2, collection.size());
1:         assertTrue(collection.remove(O0));
1:         assertEquals(1, collection.size());
1:         assertTrue(collection.remove(O0));
1:         assertEquals(0, collection.size());
1:     }
1: 
1:     public void testSimpleIterator() throws Exception {
1:         collection.add(O0);
1: 
1:         Iterator iterator = collection.iterator();
1:         assertTrue(iterator.hasNext());
1:         assertEquals(O0, iterator.next());
1:         assertFalse(iterator.hasNext());
1:     }
1: 
1:     public void testAddWhileIterating() throws Exception {
1:         Iterator iterator = collection.iterator();
1:         assertFalse(iterator.hasNext());
1: 
1:         collection.add(O0);
1:         assertTrue(iterator.hasNext());
1:         assertEquals(O0, iterator.next());
1:         assertFalse(iterator.hasNext());
1:     }
1: 
1:     public void testRemoveElementWhileIterating() throws Exception {
1:         collection.add(O0);
1:         collection.add(O1);
1: 
1:         Iterator iterator = collection.iterator();
1:         assertTrue(iterator.hasNext());
1:         collection.remove(O0);
1:         assertEquals(O0, iterator.next());
1:         assertTrue(iterator.hasNext());
1:         assertEquals(O1, iterator.next());
1:         assertFalse(iterator.hasNext());
1:     }
1: 
1:     public void testRemoveElementAfterWhileIterating() throws Exception {
1:         collection.add(O0);
1:         collection.add(O1);
1: 
1:         Iterator iterator = collection.iterator();
1:         assertTrue(iterator.hasNext());
1:         assertEquals(O0, iterator.next());
1:         collection.remove(O1);
1:         assertFalse(iterator.hasNext());
1:     }
1: 
1:     public void testRemoveElementBeforeWhileIterating() throws Exception {
1:         collection.add(O0);
1:         collection.add(O1);
1: 
1:         Iterator iterator = collection.iterator();
1:         assertTrue(iterator.hasNext());
1:         assertEquals(O0, iterator.next());
1:         collection.remove(O0);
1:         assertTrue(iterator.hasNext());
1:         assertEquals(O1, iterator.next());
1:         assertFalse(iterator.hasNext());
1:     }
1: 
1: }
============================================================================