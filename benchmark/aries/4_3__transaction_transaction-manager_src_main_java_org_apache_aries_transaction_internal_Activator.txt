1:97c9f45: /*
1:97c9f45:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:97c9f45:  * contributor license agreements.  See the NOTICE file distributed with
1:97c9f45:  * this work for additional information regarding copyright ownership.
1:97c9f45:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:97c9f45:  * (the "License"); you may not use this file except in compliance with
1:97c9f45:  * the License.  You may obtain a copy of the License at
1:97c9f45:  *
1:97c9f45:  *      http://www.apache.org/licenses/LICENSE-2.0
1:97c9f45:  *
1:97c9f45:  * Unless required by applicable law or agreed to in writing, software
1:97c9f45:  * distributed under the License is distributed on an "AS IS" BASIS,
1:97c9f45:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:97c9f45:  * See the License for the specific language governing permissions and
1:97c9f45:  * limitations under the License.
1:97c9f45:  */
1:6d5ae4f: package org.apache.aries.transaction.internal;
3:97c9f45: 
1:97c9f45: import java.util.Dictionary;
1:480457d: import java.util.Enumeration;
1:97c9f45: import java.util.Hashtable;
1:97c9f45: 
1:97c9f45: import org.osgi.framework.BundleActivator;
1:97c9f45: import org.osgi.framework.BundleContext;
1:97c9f45: import org.osgi.framework.Constants;
1:480457d: import org.osgi.framework.ServiceReference;
1:480457d: import org.osgi.service.cm.Configuration;
1:480457d: import org.osgi.service.cm.ConfigurationAdmin;
1:97c9f45: import org.osgi.service.cm.ConfigurationException;
1:13e8e0f: import org.osgi.service.cm.ManagedService;
1:97c9f45: import org.slf4j.Logger;
1:97c9f45: import org.slf4j.LoggerFactory;
1:97c9f45: 
1:97c9f45: /**
1:97c9f45:  */
1:13e8e0f: public class Activator implements BundleActivator, ManagedService {
1:97c9f45: 
1:13e8e0f:     public static final String PID = "org.apache.aries.transaction";
1:13e8e0f: 
1:13e8e0f:     private static final Logger log = LoggerFactory.getLogger(PID);
1:97c9f45: 
1:97c9f45:     private BundleContext bundleContext;
1:13e8e0f:     private TransactionManagerService manager;
1:480457d:     private Dictionary properties;
1:97c9f45: 
1:97c9f45:     public void start(BundleContext bundleContext) throws Exception {
1:97c9f45:         this.bundleContext = bundleContext;
1:60e8f74:         // Make sure TransactionManager comes up even if no config admin is installed
1:480457d:         Dictionary properties = getInitialConfig();
1:480457d:         updated(properties);
1:60e8f74:         bundleContext.registerService(ManagedService.class.getName(), this, getProps());
5:97c9f45:     }
1:97c9f45: 
1:480457d:     private Dictionary<String, Object> getInitialConfig() {
1:480457d:         try {
1:480457d:             ServiceReference<ConfigurationAdmin> ref = bundleContext.getServiceReference(ConfigurationAdmin.class);
1:480457d:             if (ref != null) {
1:480457d:                 ConfigurationAdmin configurationAdmin = bundleContext.getService(ref);
1:480457d:                 if (configurationAdmin != null) {
1:480457d:                     try {
1:480457d:                         Configuration config = configurationAdmin.getConfiguration(PID);
1:480457d:                         return config.getProperties();
1:480457d:                     } finally {
1:480457d:                         bundleContext.ungetService(ref);
1:480457d:                     }
1:480457d:                 }
1:480457d:             }
1:480457d:         } catch (Exception e) {
1:480457d:             // Ignore
1:480457d:         }
1:480457d:         return null;
1:480457d:     }
1:480457d: 
1:60e8f74:     private Dictionary<String, Object> getProps() {
1:60e8f74:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:13e8e0f:         props.put(Constants.SERVICE_PID, PID);
1:60e8f74:         return props;
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     public void stop(BundleContext context) throws Exception {
2:13e8e0f:         deleted();
1:97c9f45:     }
1:97c9f45: 
1:60e8f74:     public synchronized void updated(@SuppressWarnings("rawtypes") Dictionary properties) throws ConfigurationException {
1:60e8f74:         if (properties == null) {
1:60e8f74:             properties = getProps();
1:97c9f45:         }
1:480457d:         if (!equals(this.properties, properties)) {
1:480457d:             deleted();
1:480457d:             this.properties = properties;
1:480457d:             manager = new TransactionManagerService(PID, properties, bundleContext);
1:480457d:             try {
1:480457d:                 manager.start();
1:480457d:             } catch (Exception e) {
1:480457d:                 log.error(NLS.MESSAGES.getMessage("exception.tx.manager.start"), e);
1:480457d:             }
1:480457d:         }
1:480457d:     }
1:480457d: 
1:480457d:     private boolean equals(Dictionary<String, Object> d1, Dictionary<String, Object> d2) {
1:480457d:         if (d1 == d2) {
1:480457d:             return true;
1:480457d:         } else if (d1 == null ^ d2 == null) {
1:480457d:             return false;
1:480457d:         } else if (d1.size() != d2.size()) {
1:480457d:             return false;
1:480457d:         } else {
1:480457d:             for (Enumeration<String> e1 = d1.keys(); e1.hasMoreElements();) {
1:480457d:                 String key = e1.nextElement();
1:480457d:                 Object v1 = d1.get(key);
1:480457d:                 Object v2 = d2.get(key);
1:480457d:                 if (v1 != v2 && (v2 == null || !v2.equals(v1))) {
1:480457d:                     return false;
1:480457d:                 }
1:480457d:             }
1:480457d:             return true;
1:97c9f45:         }
1:97c9f45:     }
1:97c9f45: 
1:13e8e0f:     public synchronized void deleted() {
1:13e8e0f:         if (manager != null) {
3:97c9f45:             try {
1:13e8e0f:                 manager.close();
3:97c9f45:             } catch (Exception e) {
1:cde0cb1:                 log.error(NLS.MESSAGES.getMessage("exception.tx.manager.stop"), e);
1:13e8e0f:             } finally {
1:13e8e0f:                 manager = null;
1:97c9f45:             }
1:97c9f45:         }
1:97c9f45:     }
1:97c9f45: 
1:97c9f45: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:480457d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Enumeration;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
/////////////////////////////////////////////////////////////////////////
1:     private Dictionary properties;
1:         Dictionary properties = getInitialConfig();
1:         updated(properties);
1:     private Dictionary<String, Object> getInitialConfig() {
1:         try {
1:             ServiceReference<ConfigurationAdmin> ref = bundleContext.getServiceReference(ConfigurationAdmin.class);
1:             if (ref != null) {
1:                 ConfigurationAdmin configurationAdmin = bundleContext.getService(ref);
1:                 if (configurationAdmin != null) {
1:                     try {
1:                         Configuration config = configurationAdmin.getConfiguration(PID);
1:                         return config.getProperties();
1:                     } finally {
1:                         bundleContext.ungetService(ref);
1:                     }
1:                 }
1:             }
1:         } catch (Exception e) {
1:             // Ignore
1:         }
1:         return null;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (!equals(this.properties, properties)) {
1:             deleted();
1:             this.properties = properties;
1:             manager = new TransactionManagerService(PID, properties, bundleContext);
1:             try {
1:                 manager.start();
1:             } catch (Exception e) {
1:                 log.error(NLS.MESSAGES.getMessage("exception.tx.manager.start"), e);
1:             }
1:         }
1:     }
1: 
1:     private boolean equals(Dictionary<String, Object> d1, Dictionary<String, Object> d2) {
1:         if (d1 == d2) {
1:             return true;
1:         } else if (d1 == null ^ d2 == null) {
1:             return false;
1:         } else if (d1.size() != d2.size()) {
1:             return false;
1:         } else {
1:             for (Enumeration<String> e1 = d1.keys(); e1.hasMoreElements();) {
1:                 String key = e1.nextElement();
1:                 Object v1 = d1.get(key);
1:                 Object v2 = d2.get(key);
1:                 if (v1 != v2 && (v2 == null || !v2.equals(v1))) {
1:                     return false;
1:                 }
1:             }
1:             return true;
commit:6d5ae4f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction.internal;
0: import org.apache.aries.transaction.internal.NLS;
0: import org.apache.aries.transaction.internal.TransactionManagerService;
commit:f035f52
/////////////////////////////////////////////////////////////////////////
0:         bundleContext.registerService(ManagedService.class.getName(), this, props);
commit:13e8e0f
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.cm.ManagedService;
1: public class Activator implements BundleActivator, ManagedService {
1:     public static final String PID = "org.apache.aries.transaction";
1: 
1:     private static final Logger log = LoggerFactory.getLogger(PID);
1:     private TransactionManagerService manager;
1:         props.put(Constants.SERVICE_PID, PID);
0:         bundleContext.registerService(ManagedService.class.getName(), this, props);
0:         updated(props);
1:         deleted();
0:     public synchronized void updated(Dictionary properties) throws ConfigurationException {
1:         deleted();
0:         manager = new TransactionManagerService(PID, properties, bundleContext);
0:             manager.start();
1:     public synchronized void deleted() {
1:         if (manager != null) {
1:                 manager.close();
1:             } finally {
1:                 manager = null;
commit:3fbf745
commit:b33bc22
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.transaction;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger log = LoggerFactory.getLogger("org.apache.aries.transaction");
/////////////////////////////////////////////////////////////////////////
0:         return "org.apache.aries.transaction";
commit:97c9f45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.servicemix.transaction;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
0: import java.util.Map;
0: import java.util.Iterator;
0: import java.util.HashMap;
1: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
0: import org.osgi.service.cm.ManagedServiceFactory;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  */
0: public class Activator implements BundleActivator, ManagedServiceFactory {
1: 
0:     private static final Logger log = LoggerFactory.getLogger("org.apache.felix.transaction");
1: 
1:     private BundleContext bundleContext;
0:     private Map managers = new HashMap<String, TransactionManagerService>();
1: 
1:     public void start(BundleContext bundleContext) throws Exception {
1:         this.bundleContext = bundleContext;
0:         Hashtable props = new Hashtable();
0:         props.put(Constants.SERVICE_PID, getName());
0:         bundleContext.registerService(ManagedServiceFactory.class.getName(), this, props);
1: 
0:         Hashtable ht = new Hashtable();
0:         updated("initial", ht);
1:     }
1: 
0:     private void set(Hashtable ht, String key) {
0:         String o = bundleContext.getProperty(key);
0:         if (o == null) {
0:             o = System.getenv(key.toUpperCase().replaceAll(".", "_"));
0:             if (o == null) {
0:                 return;
1:             }
1:         }
0:         ht.put(key, o);
1:     }
1: 
1:     public void stop(BundleContext context) throws Exception {
0:         for (Iterator w = managers.values().iterator(); w.hasNext();) {
1:             try {
0:                 TransactionManagerService mgr = (TransactionManagerService) w.next();
0:                 w.remove();
0:                 mgr.close();
1:             } catch (Exception e) {
0:                 // Ignore
1:             }
1:         }
1:     }
1: 
0:     public String getName() {
0:         return "org.apache.felix.transaction";
1:     }
1: 
0:     public void updated(String pid, Dictionary properties) throws ConfigurationException {
0:         deleted(pid);
0:         TransactionManagerService mgr = new TransactionManagerService(pid, properties, bundleContext);
0:         managers.put(pid, mgr);
1:         try {
0:             mgr.start();
1:         } catch (Exception e) {
0:             log.error("Error starting transaction manager", e);
1:         }
1:     }
1: 
0:     public void deleted(String pid) {
0:         TransactionManagerService mgr = (TransactionManagerService) managers.remove(pid);
0:         if (mgr != null) {
1:             try {
0:                 mgr.close();
1:             } catch (Exception e) {
0:                 log.error("Error stopping transaction manager", e);
1:             }
1:         }
1:     }
1: 
1: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:60e8f74
/////////////////////////////////////////////////////////////////////////
1:         // Make sure TransactionManager comes up even if no config admin is installed
0:         updated(null);
1:         bundleContext.registerService(ManagedService.class.getName(), this, getProps());
0:     }
0: 
1:     private Dictionary<String, Object> getProps() {
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         return props;
1:     public synchronized void updated(@SuppressWarnings("rawtypes") Dictionary properties) throws ConfigurationException {
1:         if (properties == null) {
1:             properties = getProps();
0:         }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:5879175
/////////////////////////////////////////////////////////////////////////
0:     	if (properties == null)
0:     	{
0:     		// Use defaults if there's no configuration for us
0:     		properties = new Hashtable();
0:     		properties.put(Constants.SERVICE_PID, PID);
0:     	}
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:cde0cb1
/////////////////////////////////////////////////////////////////////////
0:             log.error(NLS.MESSAGES.getMessage("exception.tx.manager.start"), e);
/////////////////////////////////////////////////////////////////////////
1:                 log.error(NLS.MESSAGES.getMessage("exception.tx.manager.stop"), e);
============================================================================