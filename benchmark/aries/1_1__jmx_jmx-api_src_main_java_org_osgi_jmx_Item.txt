1:fdf3952: /*
1:fdf3952:  * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
1:e4f0347:  *
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
12:fdf3952:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.osgi.jmx;
1:fdf3952: 
1:fdf3952: import java.util.Collections;
1:fdf3952: import java.util.LinkedHashSet;
1:fdf3952: import java.util.Set;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.ArrayType;
1:fdf3952: import javax.management.openmbean.CompositeType;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: import javax.management.openmbean.OpenType;
1:fdf3952: import javax.management.openmbean.TabularType;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * The item class enables the definition of open types in the appropriate
1:fdf3952:  * interfaces.
1:e4f0347:  *
1:fdf3952:  * This class contains a number of methods that make it possible to create open
1:fdf3952:  * types for {@link CompositeType}, {@link TabularType}, and {@link ArrayType}.
1:fdf3952:  * The normal creation throws a checked exception, making it impossible to use
1:fdf3952:  * them in a static initializer. They constructors are also not very suitable
1:fdf3952:  * for static construction.
1:e4f0347:  *
1:e4f0347:  *
1:fdf3952:  * An Item instance describes an item in a Composite Type. It groups the triplet
1:fdf3952:  * of name, description, and Open Type. These Item instances allows the
1:fdf3952:  * definitions of an item to stay together.
1:e4f0347:  *
1:fdf3952:  * @version $Rev$
1:fdf3952:  * @Immutable
1:fdf3952:  */
1:fdf3952: public class Item {
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The name of this item.
1:fdf3952: 	 */
1:fdf3952: 	private final String name;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The description of this item.
1:fdf3952: 	 */
1:fdf3952: 	private final String description;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The type of this item.
1:fdf3952: 	 */
1:fdf3952: 	private final OpenType type;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Create a triple of name, description, and type. This triplet is used in
1:fdf3952: 	 * the creation of a Composite Type.
1:e4f0347: 	 *
1:fdf3952: 	 * @param name
1:fdf3952: 	 *            The name of the item.
1:fdf3952: 	 * @param description
1:fdf3952: 	 *            The description of the item.
1:fdf3952: 	 * @param type
1:fdf3952: 	 *            The Open Type of this item.
1:fdf3952: 	 * @param restrictions
1:fdf3952: 	 *            Ignored, contains list of restrictions
1:fdf3952: 	 */
1:fdf3952: 	public Item(String name, String description, OpenType type,
1:fdf3952: 			String... restrictions) {
1:fdf3952: 		this.name = name;
1:fdf3952: 		this.description = description;
1:fdf3952: 		this.type = type;
3:fdf3952: 	}
1:fdf3952: 
1:fdf3952: 	/**
1:e4f0347: 	 *
1:fdf3952: 	 */
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Create a Tabular Type.
1:e4f0347: 	 *
1:fdf3952: 	 * @param name
1:fdf3952: 	 *            The name of the Tabular Type.
1:fdf3952: 	 * @param description
1:fdf3952: 	 *            The description of the Tabular Type.
1:fdf3952: 	 * @param rowType
1:fdf3952: 	 *            The Open Type for a row
1:fdf3952: 	 * @param index
1:fdf3952: 	 *            The names of the items that form the index .
1:fdf3952: 	 * @return A new Tabular Type composed from the parameters.
1:fdf3952: 	 * @throws RuntimeException
1:fdf3952: 	 *             when the Tabular Type throws an OpenDataException
1:fdf3952: 	 */
1:fdf3952: 	static public TabularType tabularType(String name, String description,
1:fdf3952: 			CompositeType rowType, String... index) {
2:fdf3952: 		try {
1:fdf3952: 			return new TabularType(name, description, rowType, index);
2:fdf3952: 		} catch (OpenDataException e) {
2:fdf3952: 			throw new RuntimeException(e);
1:fdf3952: 		}
1:fdf3952: 	}
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Create a Composite Type
1:e4f0347: 	 *
1:fdf3952: 	 * @param name
1:fdf3952: 	 *            The name of the Tabular Type.
1:fdf3952: 	 * @param description
1:fdf3952: 	 *            The description of the Tabular Type.
1:fdf3952: 	 * @param items
1:fdf3952: 	 *            The items that describe the composite type.
1:fdf3952: 	 * @return a new Composite Type
1:fdf3952: 	 * @throws RuntimeException
1:fdf3952: 	 *             when the Tabular Type throws an OpenDataException
1:fdf3952: 	 */
1:fdf3952: 	static public CompositeType compositeType(String name, String description,
1:fdf3952: 			Item... items) {
1:fdf3952: 		return extend(null, name, description, items);
1:fdf3952: 	}
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Return a new Array Type.
1:e4f0347: 	 *
1:fdf3952: 	 * @param dim
1:fdf3952: 	 *            The dimension
1:fdf3952: 	 * @param elementType
1:fdf3952: 	 *            The element type
1:fdf3952: 	 * @return A new Array Type
1:fdf3952: 	 */
1:8624fd8: 	public static <T> ArrayType<T> arrayType(int dim, OpenType<T> elementType) {
1:8624fd8: 	    try {
1:8624fd8: 	        return new ArrayType<T>(dim, elementType);
1:8624fd8: 	    } catch (OpenDataException e) {
1:8624fd8: 	        throw new RuntimeException(e);
1:8624fd8: 	    }
1:8624fd8: 	 }
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Extend a Composite Type by adding new items. Items can override items in
1:fdf3952: 	 * the parent type.
1:e4f0347: 	 *
1:fdf3952: 	 * @param parent
1:fdf3952: 	 *            The parent type, can be <code>null</code>
1:fdf3952: 	 * @param name
1:fdf3952: 	 *            The name of the type
1:fdf3952: 	 * @param description
1:fdf3952: 	 *            The description of the type
1:fdf3952: 	 * @param items
1:fdf3952: 	 *            The items that should be added/override to the parent type
1:fdf3952: 	 * @return A new Composite Type that extends the parent type
1:fdf3952: 	 * @throws RuntimeException
1:fdf3952: 	 *             when an OpenDataException is thrown
1:fdf3952: 	 */
1:fdf3952: 	public static CompositeType extend(CompositeType parent, String name,
1:fdf3952: 			String description, Item... items) {
1:fdf3952: 		Set<Item> all = new LinkedHashSet<Item>();
1:fdf3952: 
1:fdf3952: 		if (parent != null) {
1:fdf3952: 			for (Object nm : parent.keySet()) {
1:fdf3952: 				String key = (String) nm;
1:fdf3952: 				all.add(new Item(key, parent.getDescription(key),
1:fdf3952: 						parent.getType(key)));
1:fdf3952: 			}
1:fdf3952: 		}
1:fdf3952: 
1:fdf3952: 		Collections.addAll(all, items);
1:fdf3952: 
1:fdf3952: 		int size = all.size();
1:fdf3952: 		String names[] = new String[size];
1:fdf3952: 		String descriptions[] = new String[size];
1:fdf3952: 		OpenType types[] = new OpenType[size];
1:fdf3952: 
1:fdf3952: 		int m = 0;
1:fdf3952: 		for (Item item : all) {
1:fdf3952: 			names[m] = item.name;
1:fdf3952: 			descriptions[m] = item.description;
1:fdf3952: 			types[m] = item.type;
1:fdf3952: 			m++;
1:fdf3952: 		}
1:fdf3952: 
1:fdf3952: 		try {
1:fdf3952: 			return new CompositeType(name, description, names, descriptions,
1:fdf3952: 					types);
1:fdf3952: 		} catch (OpenDataException e) {
1:fdf3952: 			throw new RuntimeException(e);
1:fdf3952: 		}
1:fdf3952: 	}
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:8624fd8
/////////////////////////////////////////////////////////////////////////
1: 	public static <T> ArrayType<T> arrayType(int dim, OpenType<T> elementType) {
1: 	    try {
1: 	        return new ArrayType<T>(dim, elementType);
1: 	    } catch (OpenDataException e) {
1: 	        throw new RuntimeException(e);
1: 	    }
1: 	 }
commit:e4f0347
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	 *
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	 *
0: 	public static <T extends OpenType<?>> ArrayType<T> arrayType(int dim, T elementType) {
0: 			return new ArrayType<T>(dim, elementType);
/////////////////////////////////////////////////////////////////////////
1: 	 *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.jmx;
1: 
1: import java.util.Collections;
1: import java.util.LinkedHashSet;
1: import java.util.Set;
1: 
1: import javax.management.openmbean.ArrayType;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.OpenType;
1: import javax.management.openmbean.TabularType;
1: 
1: /**
1:  * The item class enables the definition of open types in the appropriate
1:  * interfaces.
1:  * 
1:  * This class contains a number of methods that make it possible to create open
1:  * types for {@link CompositeType}, {@link TabularType}, and {@link ArrayType}.
1:  * The normal creation throws a checked exception, making it impossible to use
1:  * them in a static initializer. They constructors are also not very suitable
1:  * for static construction.
1:  * 
1:  * 
1:  * An Item instance describes an item in a Composite Type. It groups the triplet
1:  * of name, description, and Open Type. These Item instances allows the
1:  * definitions of an item to stay together.
1:  * 
1:  * @version $Rev$
1:  * @Immutable
1:  */
1: public class Item {
1: 
1: 	/**
1: 	 * The name of this item.
1: 	 */
1: 	private final String name;
1: 
1: 	/**
1: 	 * The description of this item.
1: 	 */
1: 	private final String description;
1: 
1: 	/**
1: 	 * The type of this item.
1: 	 */
1: 	private final OpenType type;
1: 
1: 	/**
1: 	 * Create a triple of name, description, and type. This triplet is used in
1: 	 * the creation of a Composite Type.
1: 	 * 
1: 	 * @param name
1: 	 *            The name of the item.
1: 	 * @param description
1: 	 *            The description of the item.
1: 	 * @param type
1: 	 *            The Open Type of this item.
1: 	 * @param restrictions
1: 	 *            Ignored, contains list of restrictions
1: 	 */
1: 	public Item(String name, String description, OpenType type,
1: 			String... restrictions) {
1: 		this.name = name;
1: 		this.description = description;
1: 		this.type = type;
1: 	}
1: 
1: 	/**
1: 	 * 
1: 	 */
1: 
1: 	/**
1: 	 * Create a Tabular Type.
1: 	 * 
1: 	 * @param name
1: 	 *            The name of the Tabular Type.
1: 	 * @param description
1: 	 *            The description of the Tabular Type.
1: 	 * @param rowType
1: 	 *            The Open Type for a row
1: 	 * @param index
1: 	 *            The names of the items that form the index .
1: 	 * @return A new Tabular Type composed from the parameters.
1: 	 * @throws RuntimeException
1: 	 *             when the Tabular Type throws an OpenDataException
1: 	 */
1: 	static public TabularType tabularType(String name, String description,
1: 			CompositeType rowType, String... index) {
1: 		try {
1: 			return new TabularType(name, description, rowType, index);
1: 		} catch (OpenDataException e) {
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Create a Composite Type
1: 	 * 
1: 	 * @param name
1: 	 *            The name of the Tabular Type.
1: 	 * @param description
1: 	 *            The description of the Tabular Type.
1: 	 * @param items
1: 	 *            The items that describe the composite type.
1: 	 * @return a new Composite Type
1: 	 * @throws RuntimeException
1: 	 *             when the Tabular Type throws an OpenDataException
1: 	 */
1: 	static public CompositeType compositeType(String name, String description,
1: 			Item... items) {
1: 		return extend(null, name, description, items);
1: 	}
1: 
1: 	/**
1: 	 * Return a new Array Type.
1: 	 * 
1: 	 * @param dim
1: 	 *            The dimension
1: 	 * @param elementType
1: 	 *            The element type
1: 	 * @return A new Array Type
1: 	 */
0: 	public static ArrayType arrayType(int dim, OpenType elementType) {
1: 		try {
0: 			return new ArrayType(dim, elementType);
1: 		} catch (OpenDataException e) {
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Extend a Composite Type by adding new items. Items can override items in
1: 	 * the parent type.
1: 	 * 
1: 	 * @param parent
1: 	 *            The parent type, can be <code>null</code>
1: 	 * @param name
1: 	 *            The name of the type
1: 	 * @param description
1: 	 *            The description of the type
1: 	 * @param items
1: 	 *            The items that should be added/override to the parent type
1: 	 * @return A new Composite Type that extends the parent type
1: 	 * @throws RuntimeException
1: 	 *             when an OpenDataException is thrown
1: 	 */
1: 	public static CompositeType extend(CompositeType parent, String name,
1: 			String description, Item... items) {
1: 		Set<Item> all = new LinkedHashSet<Item>();
1: 
1: 		if (parent != null) {
1: 			for (Object nm : parent.keySet()) {
1: 				String key = (String) nm;
1: 				all.add(new Item(key, parent.getDescription(key),
1: 						parent.getType(key)));
1: 			}
1: 		}
1: 
1: 		Collections.addAll(all, items);
1: 
1: 		int size = all.size();
1: 		String names[] = new String[size];
1: 		String descriptions[] = new String[size];
1: 		OpenType types[] = new OpenType[size];
1: 
1: 		int m = 0;
1: 		for (Item item : all) {
1: 			names[m] = item.name;
1: 			descriptions[m] = item.description;
1: 			types[m] = item.type;
1: 			m++;
1: 		}
1: 
1: 		try {
1: 			return new CompositeType(name, description, names, descriptions,
1: 					types);
1: 		} catch (OpenDataException e) {
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1: 
1: }
============================================================================