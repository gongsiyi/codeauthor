1:72345ab: /*
1:72345ab:  * Licensed to the Apache Software Foundation (ASF) under one
1:72345ab:  * or more contributor license agreements.  See the NOTICE file
1:72345ab:  * distributed with this work for additional information
1:72345ab:  * regarding copyright ownership.  The ASF licenses this file
1:72345ab:  * to you under the Apache License, Version 2.0 (the
1:72345ab:  * "License"); you may not use this file except in compliance
1:72345ab:  * with the License.  You may obtain a copy of the License at
1:72345ab:  *
1:72345ab:  *   http://www.apache.org/licenses/LICENSE-2.0
1:72345ab:  *
1:72345ab:  * Unless required by applicable law or agreed to in writing,
1:72345ab:  * software distributed under the License is distributed on an
1:72345ab:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:72345ab:  * KIND, either express or implied.  See the License for the
1:72345ab:  * specific language governing permissions and limitations
1:72345ab:  * under the License.
1:72345ab:  */
1:910fec0: package org.apache.aries.util.filesystem.impl;
3:f2492f7: 
1:f2492f7: import java.io.IOException;
1:f2492f7: import java.io.InputStream;
1:f2492f7: import java.net.MalformedURLException;
1:f2492f7: import java.net.URL;
1:f2492f7: import java.util.zip.ZipEntry;
1:72345ab: import java.util.zip.ZipFile;
1:f2492f7: import java.util.zip.ZipInputStream;
1:f2492f7: 
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:f2492f7: 
1:f2492f7: public class NestedZipFile implements IFile {
1:f2492f7: 	private final String name;
1:f2492f7: 	private final long size;
1:f2492f7: 	private final long lastModified;
1:f2492f7: 	private final IDirectory parent;
1:f2492f7: 	protected final IFile archive;
1:f2492f7: 	private final String nameInZip;
1:72345ab: 	protected final NestedCloseableDirectory cache;
1:f2492f7: 	
1:f2492f7: 	/**
1:f2492f7: 	 * Construct a nested zip file
1:f2492f7: 	 * @param archive
1:f2492f7: 	 * @param entry
1:f2492f7: 	 * @param parent
1:f2492f7: 	 */
1:72345ab: 	public NestedZipFile(IFile archive, ZipEntry entry, NestedZipDirectory parent, NestedCloseableDirectory cache) {
1:f2492f7: 		this.archive = archive;
1:f2492f7: 		this.parent = parent;
1:f2492f7: 		this.nameInZip = entry.getName();
1:f2492f7: 
1:f2492f7: 		name = archive.getName() + "/" + (nameInZip.endsWith("/") ? nameInZip.substring(0, nameInZip.length()-1) : nameInZip);
1:f2492f7: 		size = entry.getSize();
1:f2492f7: 		lastModified = entry.getTime();
1:72345ab: 		this.cache = cache;
2:f2492f7: 	}
1:f2492f7: 	
1:72345ab: 	public NestedZipFile(IFile archive, String pathInZip, NestedZipDirectory parent, NestedCloseableDirectory cache) {
1:f2492f7: 		this.archive = archive;
1:f2492f7: 		this.parent = parent;
1:f2492f7: 		this.nameInZip = pathInZip;
1:f2492f7: 
1:f2492f7: 		name = archive.getName() + "/" + (nameInZip.endsWith("/") ? nameInZip.substring(0, nameInZip.length()-1) : nameInZip);
1:f2492f7: 		size = -1;
1:f2492f7: 		lastModified = -1;
1:72345ab: 		this.cache = cache;
1:f2492f7: 	}
1:f2492f7: 	
1:f2492f7: 	
1:f2492f7: 	public NestedZipFile(IFile archive) {
1:f2492f7: 		this.archive = archive;
1:f2492f7: 		this.parent = archive.getParent();
1:f2492f7: 		this.nameInZip = "";
1:f2492f7: 
1:f2492f7: 		name = archive.getName();
1:f2492f7: 		lastModified = archive.getLastModified();
1:f2492f7: 		size = archive.getSize();
1:72345ab: 		cache = null;
1:72345ab: 	}
1:72345ab: 	
1:72345ab: 	public NestedZipFile(NestedZipFile other, NestedCloseableDirectory cache) {
1:72345ab: 		name = other.name;
1:72345ab: 		size = other.size;
1:72345ab: 		lastModified = other.lastModified;
1:72345ab: 		parent = other.parent;
1:72345ab: 		archive = other.archive;
1:72345ab: 		nameInZip = other.nameInZip;
1:72345ab: 		
1:72345ab: 		this.cache = cache;
1:f2492f7: 	}
1:f2492f7: 	
1:f2492f7: 	public String getNameInZip() {
1:f2492f7: 		return nameInZip;
1:f2492f7: 	}
1:f2492f7: 	
1:f2492f7: 	public String getName() {
1:f2492f7: 		return name;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public boolean isDirectory() {
1:f2492f7: 		return false;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public boolean isFile() {
1:f2492f7: 		return true;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public long getLastModified() {
1:f2492f7: 		return lastModified;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public long getSize() {
1:f2492f7: 		return size;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public IDirectory convert() {
2:f2492f7: 		return null;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public IDirectory convertNested() {
1:f2492f7: 		if (isDirectory()) return convert();
1:f2492f7: 		else if (FileSystemImpl.isValidZip(this)) return new NestedZipDirectory(this);
1:f2492f7: 		else return null;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public IDirectory getParent() {
1:f2492f7: 		return parent;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public InputStream open() throws IOException, UnsupportedOperationException {
1:72345ab: 		if (cache != null && !!!cache.isClosed()) {
1:72345ab: 			ZipFile zip = cache.getZipFile();
1:72345ab: 			ZipEntry ze = zip.getEntry(nameInZip);
1:72345ab: 			
1:72345ab: 			if (ze != null) return zip.getInputStream(ze);
1:72345ab: 			else return null;
1:f2492f7: 		} else {
1:72345ab: 			final ZipInputStream zis = new ZipInputStream(archive.open());
1:72345ab: 			
1:72345ab: 			ZipEntry entry = zis.getNextEntry();
1:72345ab: 			while (entry != null && !!!entry.getName().equals(nameInZip)) {
1:72345ab: 				entry = zis.getNextEntry();
1:72345ab: 			}
1:72345ab: 			
1:72345ab: 			if (entry != null) {
1:72345ab: 				return zis;
1:72345ab: 			} else {
1:72345ab: 				zis.close();
1:72345ab: 				return null;
1:f2492f7: 			}
1:f2492f7: 		}
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public IDirectory getRoot() {
1:f2492f7: 		return archive.getRoot();
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	public URL toURL() throws MalformedURLException
1:f2492f7: 	{
1:a0ebbc7: 		if (nameInZip.length() == 0) return archive.toURL();
1:f2492f7: 		else {
1:f2492f7: 			String entryURL = "jar:" + archive.toURL() + "!/" + nameInZip;
1:f2492f7: 			return new URL(entryURL);
1:f2492f7: 		}
1:f2492f7: 	}
1:f2492f7: 
12:f2492f7: 	@Override
1:f2492f7: 	public boolean equals(Object obj)
1:f2492f7: 	{
1:f2492f7: 		if (obj == null) return false;
1:f2492f7: 		if (obj == this) return true;
1:f2492f7: 
1:f2492f7: 		if (obj.getClass() == getClass()) {
1:f2492f7: 			return toString().equals(obj.toString());
1:72345ab: 		}
1:f2492f7: 
1:f2492f7: 		return false;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	@Override
1:f2492f7: 	public int hashCode()
1:f2492f7: 	{
1:f2492f7: 		return toString().hashCode();
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: 	@Override
1:f2492f7: 	public String toString()
1:f2492f7: 	{
1:a0ebbc7: 		if (nameInZip.length() == 0) return archive.toString();
1:f2492f7: 		return archive.toString() + "/" + nameInZip;
1:f2492f7: 	}
1:f2492f7: 
1:f2492f7: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a0ebbc7
/////////////////////////////////////////////////////////////////////////
1: 		if (nameInZip.length() == 0) return archive.toURL();
/////////////////////////////////////////////////////////////////////////
1: 		if (nameInZip.length() == 0) return archive.toString();
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
commit:72345ab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.ZipFile;
/////////////////////////////////////////////////////////////////////////
1: 	protected final NestedCloseableDirectory cache;
/////////////////////////////////////////////////////////////////////////
1: 	public NestedZipFile(IFile archive, ZipEntry entry, NestedZipDirectory parent, NestedCloseableDirectory cache) {
/////////////////////////////////////////////////////////////////////////
1: 		this.cache = cache;
1: 	public NestedZipFile(IFile archive, String pathInZip, NestedZipDirectory parent, NestedCloseableDirectory cache) {
/////////////////////////////////////////////////////////////////////////
1: 		this.cache = cache;
/////////////////////////////////////////////////////////////////////////
1: 		cache = null;
1: 	}
1: 	
1: 	public NestedZipFile(NestedZipFile other, NestedCloseableDirectory cache) {
1: 		name = other.name;
1: 		size = other.size;
1: 		lastModified = other.lastModified;
1: 		parent = other.parent;
1: 		archive = other.archive;
1: 		nameInZip = other.nameInZip;
1: 		
1: 		this.cache = cache;
/////////////////////////////////////////////////////////////////////////
1: 		if (cache != null && !!!cache.isClosed()) {
1: 			ZipFile zip = cache.getZipFile();
1: 			ZipEntry ze = zip.getEntry(nameInZip);
1: 			
1: 			if (ze != null) return zip.getInputStream(ze);
1: 			else return null;
1: 			final ZipInputStream zis = new ZipInputStream(archive.open());
1: 			
1: 			ZipEntry entry = zis.getNextEntry();
1: 			while (entry != null && !!!entry.getName().equals(nameInZip)) {
1: 				entry = zis.getNextEntry();
1: 			}
1: 			
1: 			if (entry != null) {
1: 				return zis;
1: 			} else {
1: 				zis.close();
1: 				return null;
1: 			}
commit:f2492f7
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem.impl;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipInputStream;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
1: 
1: public class NestedZipFile implements IFile {
1: 	private final String name;
1: 	private final long size;
1: 	private final long lastModified;
1: 	private final IDirectory parent;
1: 	protected final IFile archive;
1: 	private final String nameInZip;
1: 	
1: 	/**
1: 	 * Construct a nested zip file
1: 	 * @param archive
1: 	 * @param entry
1: 	 * @param parent
1: 	 */
0: 	public NestedZipFile(IFile archive, ZipEntry entry, NestedZipDirectory parent) {
1: 		this.archive = archive;
1: 		this.parent = parent;
1: 		this.nameInZip = entry.getName();
1: 
1: 		name = archive.getName() + "/" + (nameInZip.endsWith("/") ? nameInZip.substring(0, nameInZip.length()-1) : nameInZip);
1: 		size = entry.getSize();
1: 		lastModified = entry.getTime();
1: 	}
1: 	
0: 	public NestedZipFile(IFile archive, String pathInZip, NestedZipDirectory parent) {
1: 		this.archive = archive;
1: 		this.parent = parent;
1: 		this.nameInZip = pathInZip;
1: 
1: 		name = archive.getName() + "/" + (nameInZip.endsWith("/") ? nameInZip.substring(0, nameInZip.length()-1) : nameInZip);
1: 		size = -1;
1: 		lastModified = -1;
1: 	}
1: 	
1: 	
1: 	public NestedZipFile(IFile archive) {
1: 		this.archive = archive;
1: 		this.parent = archive.getParent();
1: 		this.nameInZip = "";
1: 
1: 		name = archive.getName();
1: 		lastModified = archive.getLastModified();
1: 		size = archive.getSize();
1: 	}
1: 	
1: 	public String getNameInZip() {
1: 		return nameInZip;
1: 	}
1: 	
1: 	@Override
1: 	public String getName() {
1: 		return name;
1: 	}
1: 
1: 	@Override
1: 	public boolean isDirectory() {
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	public boolean isFile() {
1: 		return true;
1: 	}
1: 
1: 	@Override
1: 	public long getLastModified() {
1: 		return lastModified;
1: 	}
1: 
1: 	@Override
1: 	public long getSize() {
1: 		return size;
1: 	}
1: 
1: 	@Override
1: 	public IDirectory convert() {
1: 		return null;
1: 	}
1: 
1: 	@Override
1: 	public IDirectory convertNested() {
1: 		if (isDirectory()) return convert();
1: 		else if (FileSystemImpl.isValidZip(this)) return new NestedZipDirectory(this);
1: 		else return null;
1: 	}
1: 
1: 	@Override
1: 	public IDirectory getParent() {
1: 		return parent;
1: 	}
1: 
1: 	@Override
1: 	public InputStream open() throws IOException, UnsupportedOperationException {
0: 		final ZipInputStream zis = new ZipInputStream(archive.open());
1: 		
0: 		ZipEntry entry = zis.getNextEntry();
0: 		while (entry != null && !!!entry.getName().equals(nameInZip)) {
0: 			entry = zis.getNextEntry();
1: 		}
1: 		
0: 		if (entry != null) {
0: 			return zis;
1: 		} else {
0: 			zis.close();
1: 			return null;
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public IDirectory getRoot() {
1: 		return archive.getRoot();
1: 	}
1: 
1: 	@Override
1: 	public URL toURL() throws MalformedURLException
1: 	{
0: 		if (nameInZip.isEmpty()) return archive.toURL();
1: 		else {
1: 			String entryURL = "jar:" + archive.toURL() + "!/" + nameInZip;
1: 			return new URL(entryURL);
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public boolean equals(Object obj)
1: 	{
1: 		if (obj == null) return false;
1: 		if (obj == this) return true;
1: 
1: 		if (obj.getClass() == getClass()) {
1: 			return toString().equals(obj.toString());
1: 		}
1: 
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	public int hashCode()
1: 	{
1: 		return toString().hashCode();
1: 	}
1: 
1: 	@Override
1: 	public String toString()
1: 	{
0: 		if (nameInZip.isEmpty()) return archive.toString();
1: 		return archive.toString() + "/" + nameInZip;
1: 	}
1: 
1: }
============================================================================