1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:4bdcda3: package org.apache.aries.blueprint.utils;
1:f13c6ac: 
1:f13c6ac: import java.io.IOException;
1:f13c6ac: import java.net.URL;
1:4bdcda3: import java.security.AccessController;
1:4bdcda3: import java.security.PrivilegedAction;
1:4bdcda3: import java.security.PrivilegedActionException;
1:4bdcda3: import java.security.PrivilegedExceptionAction;
1:4bdcda3: import java.util.ArrayList;
1:4bdcda3: import java.util.Collections;
1:f13c6ac: import java.util.Enumeration;
1:f13c6ac: 
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * A ClassLoader delegating to a given OSGi bundle.
1:f13c6ac:  *
1:4bdcda3:  * @version $Rev$, $Date$
1:4bdcda3:  * @deprecated - will be removed in a future version of Aries Blueprint
1:4bdcda3:  *           Use AriesFrameworkUtil#getClassLoader(Bundle) and
1:4bdcda3:  *           or AriesFrameworkUtil#getClassLoaderForced(Bundle) instead     
1:f13c6ac:  */
1:4bdcda3: @Deprecated
1:f13c6ac: public class BundleDelegatingClassLoader extends ClassLoader {
1:f13c6ac: 
1:f13c6ac:     private final Bundle bundle;
1:f13c6ac:     private final ClassLoader classLoader;
1:f13c6ac: 
1:f13c6ac:     public BundleDelegatingClassLoader(Bundle bundle) {
1:f13c6ac:         this(bundle, null);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public BundleDelegatingClassLoader(Bundle bundle, ClassLoader classLoader) {
1:f13c6ac:         this.bundle = bundle;
1:f13c6ac:         this.classLoader = classLoader;
1:f13c6ac:     }
1:f13c6ac: 
1:4bdcda3:     protected Class<?> findClass(final String name) throws ClassNotFoundException {
3:4bdcda3:         try {
1:4bdcda3:             return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
1:4bdcda3:                 public Class<?> run() throws ClassNotFoundException 
1:4bdcda3:                 {
1:f13c6ac:                     return bundle.loadClass(name);
1:f13c6ac:                 }
1:f13c6ac:             
1:4bdcda3:             });
1:4bdcda3:         } catch (PrivilegedActionException e) {
1:4bdcda3:             Exception cause = e.getException();
12:4bdcda3:           
1:4bdcda3:             if (cause instanceof ClassNotFoundException) throw (ClassNotFoundException)cause;
1:4bdcda3:             else throw (RuntimeException)cause;
15:4bdcda3:         }    
1:4bdcda3:     }
1:4bdcda3: 
1:4bdcda3:     protected URL findResource(final String name) {
1:4bdcda3:         URL resource = AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:4bdcda3:             public URL run()
1:4bdcda3:             {
1:4bdcda3:                 return bundle.getResource(name);
1:4bdcda3:             }
1:4bdcda3:         });        
1:f13c6ac:         if (classLoader != null && resource == null) {
1:f13c6ac:             resource = classLoader.getResource(name);
1:f13c6ac:         }
1:f13c6ac:         return resource;
1:f13c6ac:     }
1:f13c6ac: 
1:4bdcda3:     protected Enumeration<URL> findResources(final String name) throws IOException {
1:4bdcda3:         Enumeration<URL> urls;
1:4bdcda3:         try {
1:4bdcda3:             urls =  AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
1:4bdcda3:                 @SuppressWarnings("unchecked")
1:4bdcda3:                 public Enumeration<URL> run() throws IOException
1:4bdcda3:                 {
1:4bdcda3:                     return (Enumeration<URL>)bundle.getResources(name);
1:f13c6ac:                 }
1:f13c6ac:           
1:4bdcda3:             });
1:4bdcda3:         } catch (PrivilegedActionException e) {
1:4bdcda3:             Exception cause = e.getException();
1:4bdcda3:         
1:4bdcda3:             if (cause instanceof IOException) throw (IOException)cause;
1:4bdcda3:             else throw (RuntimeException)cause;
1:4bdcda3:         }
1:4bdcda3:       
1:4bdcda3:         if (urls == null) {
1:4bdcda3:             urls = Collections.enumeration(new ArrayList<URL>());
1:4bdcda3:         }
1:4bdcda3:       
1:4bdcda3:         return urls;    
1:4bdcda3:     }
1:4bdcda3: 
1:4bdcda3:     protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
1:f13c6ac:         Class clazz;
1:f13c6ac:         try {
1:f13c6ac:             clazz = findClass(name);
1:f13c6ac:         }
1:f13c6ac:         catch (ClassNotFoundException cnfe) {
1:f13c6ac:             if (classLoader != null) {
1:f13c6ac:                 try {
1:f13c6ac:                     clazz = classLoader.loadClass(name);
1:f13c6ac:                 } catch (ClassNotFoundException e) {
1:db4243b:                     throw new ClassNotFoundException(name + " from bundle " + bundle.getSymbolicName() + "/" + bundle.getVersion(), cnfe);
1:f13c6ac:                 }
1:f13c6ac:             } else {
1:db4243b:                 throw new ClassNotFoundException(name + " from bundle " + bundle.getSymbolicName() + "/" + bundle.getVersion(), cnfe);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         if (resolve) {
1:f13c6ac:             resolveClass(clazz);
1:f13c6ac:         }
1:f13c6ac:         return clazz;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Bundle getBundle() {
1:f13c6ac:         return bundle;
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:db4243b
/////////////////////////////////////////////////////////////////////////
1:                     throw new ClassNotFoundException(name + " from bundle " + bundle.getSymbolicName() + "/" + bundle.getVersion(), cnfe);
1:                 throw new ClassNotFoundException(name + " from bundle " + bundle.getSymbolicName() + "/" + bundle.getVersion(), cnfe);
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.utils;
1: 
1: import java.io.IOException;
1: import java.net.URL;
1: import java.util.Enumeration;
1: 
1: import org.osgi.framework.Bundle;
1: 
1: /**
1:  * A ClassLoader delegating to a given OSGi bundle.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
1:  */
1: public class BundleDelegatingClassLoader extends ClassLoader {
1: 
1:     private final Bundle bundle;
1:     private final ClassLoader classLoader;
1: 
1:     public BundleDelegatingClassLoader(Bundle bundle) {
1:         this(bundle, null);
1:     }
1: 
1:     public BundleDelegatingClassLoader(Bundle bundle, ClassLoader classLoader) {
1:         this.bundle = bundle;
1:         this.classLoader = classLoader;
1:     }
1: 
0:     protected Class findClass(String name) throws ClassNotFoundException {
1:         return bundle.loadClass(name);
1:     }
1: 
0:     protected URL findResource(String name) {
0:         URL resource = bundle.getResource(name);
1:         if (classLoader != null && resource == null) {
1:             resource = classLoader.getResource(name);
1:         }
1:         return resource;
1:     }
1: 
0:     protected Enumeration findResources(String name) throws IOException {
0:         return bundle.getResources(name);
1:     }
1: 
0:     protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException {
1:         Class clazz;
1:         try {
1:             clazz = findClass(name);
1:         }
1:         catch (ClassNotFoundException cnfe) {
1:             if (classLoader != null) {
1:                 try {
1:                     clazz = classLoader.loadClass(name);
1:                 } catch (ClassNotFoundException e) {
0:                     throw new ClassNotFoundException(name + " from bundle " + bundle.getBundleId() + " (" + bundle.getSymbolicName() + ")", cnfe);
1:                 }
1:             } else {
0:                 throw new ClassNotFoundException(name + " from bundle " + bundle.getBundleId() + " (" + bundle.getSymbolicName() + ")", cnfe);
1:             }
1:         }
1:         if (resolve) {
1:             resolveClass(clazz);
1:         }
1:         return clazz;
1:     }
1: 
1:     public Bundle getBundle() {
1:         return bundle;
1:     }
1: }
author:J. Daniel Kulp
-------------------------------------------------------------------------------
commit:4bdcda3
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: package org.apache.aries.blueprint.utils;
1: 
0: import java.io.IOException;
0: import java.net.URL;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: import java.util.ArrayList;
1: import java.util.Collections;
0: import java.util.Enumeration;
1: 
0: import org.osgi.framework.Bundle;
1: 
0: /**
0:  * A ClassLoader delegating to a given OSGi bundle.
0:  *
1:  * @version $Rev$, $Date$
1:  * @deprecated - will be removed in a future version of Aries Blueprint
1:  *           Use AriesFrameworkUtil#getClassLoader(Bundle) and
1:  *           or AriesFrameworkUtil#getClassLoaderForced(Bundle) instead     
0:  */
1: @Deprecated
0: public class BundleDelegatingClassLoader extends ClassLoader {
1: 
0:     private final Bundle bundle;
0:     private final ClassLoader classLoader;
1: 
0:     public BundleDelegatingClassLoader(Bundle bundle) {
0:         this(bundle, null);
1:     }
1: 
0:     public BundleDelegatingClassLoader(Bundle bundle, ClassLoader classLoader) {
0:         this.bundle = bundle;
0:         this.classLoader = classLoader;
1:     }
1: 
1:     protected Class<?> findClass(final String name) throws ClassNotFoundException {
1:         try {
1:             return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
1:                 public Class<?> run() throws ClassNotFoundException 
1:                 {
0:                     return bundle.loadClass(name);
1:                 }
1:             
1:             });
1:         } catch (PrivilegedActionException e) {
1:             Exception cause = e.getException();
1:           
1:             if (cause instanceof ClassNotFoundException) throw (ClassNotFoundException)cause;
1:             else throw (RuntimeException)cause;
1:         }    
1:     }
1: 
1:     protected URL findResource(final String name) {
1:         URL resource = AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:             public URL run()
1:             {
1:                 return bundle.getResource(name);
1:             }
1:         });        
0:         if (classLoader != null && resource == null) {
0:             resource = classLoader.getResource(name);
1:         }
0:         return resource;
1:     }
1: 
1:     protected Enumeration<URL> findResources(final String name) throws IOException {
1:         Enumeration<URL> urls;
1:         try {
1:             urls =  AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
1:                 @SuppressWarnings("unchecked")
1:                 public Enumeration<URL> run() throws IOException
1:                 {
1:                     return (Enumeration<URL>)bundle.getResources(name);
1:                 }
1:           
1:             });
1:         } catch (PrivilegedActionException e) {
1:             Exception cause = e.getException();
1:         
1:             if (cause instanceof IOException) throw (IOException)cause;
1:             else throw (RuntimeException)cause;
1:         }
1:       
1:         if (urls == null) {
1:             urls = Collections.enumeration(new ArrayList<URL>());
1:         }
1:       
1:         return urls;    
1:     }
1: 
1:     protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
0:         Class clazz;
1:         try {
0:             clazz = findClass(name);
1:         }
0:         catch (ClassNotFoundException cnfe) {
0:             if (classLoader != null) {
1:                 try {
0:                     clazz = classLoader.loadClass(name);
0:                 } catch (ClassNotFoundException e) {
0:                     throw new ClassNotFoundException(name + " from bundle " + bundle.getBundleId() + " (" + bundle.getSymbolicName() + ")", cnfe);
1:                 }
0:             } else {
0:                 throw new ClassNotFoundException(name + " from bundle " + bundle.getBundleId() + " (" + bundle.getSymbolicName() + ")", cnfe);
1:             }
1:         }
0:         if (resolve) {
0:             resolveClass(clazz);
1:         }
0:         return clazz;
1:     }
1: 
0:     public Bundle getBundle() {
0:         return bundle;
1:     }
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:d4c2b25
/////////////////////////////////////////////////////////////////////////
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:1a56ba3
/////////////////////////////////////////////////////////////////////////
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
0: import java.security.PrivilegedActionException;
0: import java.security.PrivilegedExceptionAction;
0: import java.util.ArrayList;
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
0:     protected Class findClass(final String name) throws ClassNotFoundException {
0:         try {
0:             return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {
0:                 public Class<?> run() throws ClassNotFoundException 
0:                 {
0:                     return bundle.loadClass(name);
0:                 }
0:             
0:             });
0:         } catch (PrivilegedActionException e) {
0:             Exception cause = e.getException();
0:           
0:             if (cause instanceof ClassNotFoundException) throw (ClassNotFoundException)cause;
0:             else throw (RuntimeException)cause;
0:         }    
0:     protected URL findResource(final String name) {
0:         URL resource = AccessController.doPrivileged(new PrivilegedAction<URL>() {
0:             public URL run()
0:             {
0:                 return bundle.getResource(name);
0:             }
0:         });        
0:     protected Enumeration findResources(final String name) throws IOException {
0:         Enumeration<URL> urls;
0:         try {
0:             urls =  AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
0:                 @SuppressWarnings("unchecked")
0:                 public Enumeration<URL> run() throws IOException
0:                 {
0:                     return (Enumeration<URL>)bundle.getResources(name);
0:                 }
0:           
0:             });
0:         } catch (PrivilegedActionException e) {
0:             Exception cause = e.getException();
0:         
0:             if (cause instanceof IOException) throw (IOException)cause;
0:             else throw (RuntimeException)cause;
0:         }
0:       
0:         if (urls == null) {
0:             urls = Collections.enumeration(new ArrayList<URL>());
0:         }
0:       
0:         return urls;    
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
0:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.utils;
============================================================================