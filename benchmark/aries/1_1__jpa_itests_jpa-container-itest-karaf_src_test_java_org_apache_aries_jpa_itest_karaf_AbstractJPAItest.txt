1:9ce39d6: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:9ce39d6:  *  contributor license agreements.  See the NOTICE file distributed with
1:9ce39d6:  *  this work for additional information regarding copyright ownership.
1:9ce39d6:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:9ce39d6:  *  (the "License"); you may not use this file except in compliance with
1:9ce39d6:  *  the License.  You may obtain a copy of the License at
1:9ce39d6:  *
1:9ce39d6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9ce39d6:  *
1:9ce39d6:  *  Unless required by applicable law or agreed to in writing, software
1:9ce39d6:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:9ce39d6:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ce39d6:  *  See the License for the specific language governing permissions and
1:9ce39d6:  *  limitations under the License.
1:9ce39d6:  */
1:9ce39d6: package org.apache.aries.jpa.itest.karaf;
1:9ce39d6: 
1:9ce39d6: import static org.ops4j.pax.exam.CoreOptions.maven;
1:9ce39d6: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:9ce39d6: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:9ce39d6: import static org.ops4j.pax.exam.CoreOptions.when;
1:9ce39d6: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.configureSecurity;
1:9ce39d6: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
1:9ce39d6: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.karafDistributionConfiguration;
1:9ce39d6: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.keepRuntimeFolder;
1:9ce39d6: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.logLevel;
1:9ce39d6: 
1:9ce39d6: import java.io.File;
1:9ce39d6: import java.io.IOException;
1:9ce39d6: import java.util.Dictionary;
1:9ce39d6: import java.util.Hashtable;
1:9ce39d6: 
1:9ce39d6: import javax.inject.Inject;
1:9ce39d6: 
1:9ce39d6: import org.junit.Before;
1:9ce39d6: import org.junit.runner.RunWith;
1:9ce39d6: import org.ops4j.pax.exam.CoreOptions;
1:9ce39d6: import org.ops4j.pax.exam.Option;
1:9ce39d6: import org.ops4j.pax.exam.junit.PaxExam;
1:9ce39d6: import org.ops4j.pax.exam.karaf.options.LogLevelOption.LogLevel;
1:9ce39d6: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1:9ce39d6: import org.ops4j.pax.exam.options.UrlReference;
1:9ce39d6: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:9ce39d6: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:9ce39d6: import org.osgi.framework.Bundle;
1:9ce39d6: import org.osgi.framework.BundleContext;
1:9ce39d6: import org.osgi.framework.BundleException;
1:9ce39d6: import org.osgi.framework.Constants;
1:9ce39d6: import org.osgi.framework.Filter;
1:9ce39d6: import org.osgi.framework.FrameworkUtil;
1:9ce39d6: import org.osgi.framework.InvalidSyntaxException;
1:9ce39d6: import org.osgi.service.cm.Configuration;
1:9ce39d6: import org.osgi.service.cm.ConfigurationAdmin;
1:9ce39d6: import org.osgi.service.jdbc.DataSourceFactory;
1:9ce39d6: import org.osgi.util.tracker.ServiceTracker;
1:9ce39d6: import org.slf4j.Logger;
1:9ce39d6: import org.slf4j.LoggerFactory;
1:9ce39d6: 
1:9ce39d6: @RunWith(PaxExam.class)
1:9ce39d6: @ExamReactorStrategy(PerClass.class)
1:9ce39d6: public abstract class AbstractJPAItest {
1:9ce39d6:     private static Logger LOG = LoggerFactory.getLogger(AbstractJPAItest.class);
1:9ce39d6: 
1:9ce39d6:     /*
1:9ce39d6:      *  The @Inject annotations below currently do not work as the transaction-api/1.2 feature installs an atinject bundle that 
1:9ce39d6:      *  confuses pax exam. As a workaround the services are set below in the @Before method
1:9ce39d6:      */
1:9ce39d6:     
1:9ce39d6:     @Inject
1:9ce39d6:     BundleContext bundleContext;
1:9ce39d6:     
1:9ce39d6:     @Inject
1:9ce39d6:     ConfigurationAdmin configAdmin;
1:9ce39d6:     
1:9ce39d6:     private static Configuration config;
1:9ce39d6:     
1:9ce39d6:     /**
1:9ce39d6:      * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1:9ce39d6:      * 
1:9ce39d6:      * @throws BundleException
1:9ce39d6:      */
1:9ce39d6:     public void resolveBundles() throws BundleException {
1:9ce39d6:         Bundle[] bundles = bundleContext.getBundles();
1:9ce39d6:         for (Bundle bundle : bundles) {
1:9ce39d6:             if (bundle.getState() == Bundle.INSTALLED) {
1:9ce39d6:                 System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":"
1:9ce39d6:                     + bundle.getSymbolicName() + ":" + bundle.getVersion());
1:9ce39d6:                 bundle.start();
1:9ce39d6:             }
1:9ce39d6:         }
1:9ce39d6:     }
1:9ce39d6: 
1:9ce39d6:     public Bundle getBundleByName(String symbolicName) {
1:9ce39d6:         for (Bundle b : bundleContext.getBundles()) {
1:9ce39d6:             if (b.getSymbolicName().equals(symbolicName)) {
1:9ce39d6:                 return b;
1:9ce39d6:             }
1:9ce39d6:         }
1:9ce39d6:         return null;
1:9ce39d6:     }
1:9ce39d6:     
1:9ce39d6:     public <T> T getService(Class<T> type, String filter) {
1:9ce39d6:         return getService(type, filter, 10000);
1:9ce39d6:     }
1:9ce39d6: 
1:9ce39d6:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:9ce39d6:     public <T> T getService(Class<T> type, String filter, int timeout) {
1:9ce39d6:         ServiceTracker tracker = null;
1:9ce39d6:         try {
1:9ce39d6:             String objClassFilter = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:9ce39d6:             String flt = filter != null ? "(&" + objClassFilter + sanitizeFilter(filter) + ")" : objClassFilter;
1:9ce39d6:             Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:9ce39d6:             tracker = new ServiceTracker(bundleContext, osgiFilter, null);
1:9ce39d6:             tracker.open();
1:9ce39d6: 
1:9ce39d6:             Object svc = type.cast(tracker.waitForService(timeout));
1:9ce39d6:             if (svc == null) {
1:9ce39d6:                 throw new IllegalStateException("Gave up waiting for service " + flt);
1:9ce39d6:             }
1:9ce39d6:             return type.cast(svc);
1:9ce39d6:         } catch (InvalidSyntaxException e) {
1:9ce39d6:             throw new IllegalArgumentException("Invalid filter", e);
1:9ce39d6:         } catch (InterruptedException e) {
1:9ce39d6:             throw new RuntimeException(e);
1:9ce39d6:         } finally {
1:9ce39d6:             //tracker.close();
1:9ce39d6:         }
1:9ce39d6:     }
1:9ce39d6: 
1:9ce39d6:     public String sanitizeFilter(String filter) {
1:9ce39d6:         return filter.startsWith("(") ? filter : "(" + filter + ")";
1:9ce39d6:     }
1:9ce39d6: 
1:9ce39d6:     protected Option baseOptions() {
1:9ce39d6:         String localRepo = System.getProperty("maven.repo.local");
1:9ce39d6: 
1:9ce39d6:         if (localRepo == null) {
1:9ce39d6:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:9ce39d6:         }
1:9ce39d6:         MavenArtifactUrlReference karafUrl = maven().groupId("org.apache.karaf").artifactId("apache-karaf").version("4.0.1").type("tar.gz");
1:9ce39d6:         UrlReference enterpriseFeatureUrl = maven().groupId("org.apache.karaf.features").artifactId("enterprise").versionAsInProject().type("xml").classifier("features");
1:9ce39d6:         UrlReference jpaFeatureUrl = maven().groupId("org.apache.aries.jpa").artifactId("jpa-features").versionAsInProject().type("xml").classifier("features");
1:9ce39d6:         UrlReference paxJdbcFeatureUrl = maven().groupId("org.ops4j.pax.jdbc").artifactId("pax-jdbc-features").version("0.7.0").type("xml").classifier("features");
1:9ce39d6:         return CoreOptions.composite(
1:9ce39d6:             //KarafDistributionOption.debugConfiguration("8000", true),
1:9ce39d6:             karafDistributionConfiguration().frameworkUrl(karafUrl).name("Apache Karaf").unpackDirectory(new File("target/exam")).useDeployFolder(false),
1:9ce39d6:             configureSecurity().disableKarafMBeanServerBuilder(),
1:9ce39d6:             keepRuntimeFolder(),
1:9ce39d6:             logLevel(LogLevel.INFO),
1:9ce39d6:             when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:9ce39d6:             features(paxJdbcFeatureUrl, "pax-jdbc-config", "pax-jdbc-h2", "pax-jdbc-pool-dbcp2"),
1:9ce39d6:             features(enterpriseFeatureUrl, "transaction", "http-whiteboard", "hibernate/4.3.6.Final", "scr"),
1:0756e4e:             features(jpaFeatureUrl, "jpa"),
1:9ce39d6:             mavenBundle("org.apache.aries.jpa.example", "org.apache.aries.jpa.example.tasklist.model").versionAsInProject()
1:9ce39d6: //            replaceConfigurationFile("etc/org.ops4j.pax.logging.cfg", getConfigFile("/etc/org.ops4j.pax.logging.cfg")),
1:9ce39d6:         );
1:9ce39d6: 
1:9ce39d6:     }
1:9ce39d6: 
1:9ce39d6:     @Before
1:9ce39d6:     public void createConfigs() throws Exception {
1:9ce39d6:         if (config == null) {
1:9ce39d6:             bundleContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
1:9ce39d6:             configAdmin = getService(ConfigurationAdmin.class, null);
1:9ce39d6:             createConfigForLogging();
1:9ce39d6:             createConfigForDS();
1:9ce39d6: 
1:9ce39d6:         }
1:9ce39d6:     }
1:9ce39d6: 
1:9ce39d6:     private void createConfigForDS() throws IOException {
1:9ce39d6:         config = configAdmin.createFactoryConfiguration("org.ops4j.datasource", null);
1:9ce39d6:         Dictionary<String, String> props = new Hashtable<String, String>();
1:9ce39d6:         props.put(DataSourceFactory.OSGI_JDBC_DRIVER_NAME, "H2-pool-xa");
1:9ce39d6:         props.put(DataSourceFactory.JDBC_DATABASE_NAME, "tasklist;create=true");
1:9ce39d6:         props.put(DataSourceFactory.JDBC_DATASOURCE_NAME, "tasklist");
1:9ce39d6:         config.update(props);
1:9ce39d6:         LOG.info("Created DataSource config tasklist");
1:9ce39d6:     }
1:9ce39d6:     
1:9ce39d6:     private void createConfigForLogging() throws IOException {
1:9ce39d6:         Configuration logConfig = configAdmin.getConfiguration("org.ops4j.pax.logging", null);
1:9ce39d6:         Dictionary<String, String> props = new Hashtable<String, String>();
1:9ce39d6:         props.put("log4j.rootLogger", "INFO, stdout");
1:9ce39d6:         props.put("log4j.logger.org.apache.aries.transaction", "DEBUG");
1:9ce39d6:         props.put("log4j.logger.org.apache.aries.transaction.parsing", "DEBUG");
1:9ce39d6:         props.put("log4j.logger.org.apache.aries.jpa.blueprint.impl", "DEBUG");
1:9ce39d6:         props.put("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender");
1:9ce39d6:         props.put("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout");
1:9ce39d6:         props.put("log4j.appender.stdout.layout.ConversionPattern", "%d{ISO8601} | %-5.5p | %-16.16t | %c | %m%n");
1:9ce39d6:         logConfig.update(props);
1:9ce39d6:     }
1:9ce39d6: 
1:9ce39d6: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0756e4e
/////////////////////////////////////////////////////////////////////////
1:             features(jpaFeatureUrl, "jpa"),
commit:9ce39d6
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jpa.itest.karaf;
1: 
1: import static org.ops4j.pax.exam.CoreOptions.maven;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.configureSecurity;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.karafDistributionConfiguration;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.keepRuntimeFolder;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.logLevel;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.inject.Inject;
1: 
1: import org.junit.Before;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.karaf.options.LogLevelOption.LogLevel;
1: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1: import org.ops4j.pax.exam.options.UrlReference;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public abstract class AbstractJPAItest {
1:     private static Logger LOG = LoggerFactory.getLogger(AbstractJPAItest.class);
1: 
1:     /*
1:      *  The @Inject annotations below currently do not work as the transaction-api/1.2 feature installs an atinject bundle that 
1:      *  confuses pax exam. As a workaround the services are set below in the @Before method
1:      */
1:     
1:     @Inject
1:     BundleContext bundleContext;
1:     
1:     @Inject
1:     ConfigurationAdmin configAdmin;
1:     
1:     private static Configuration config;
1:     
1:     /**
1:      * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1:      * 
1:      * @throws BundleException
1:      */
1:     public void resolveBundles() throws BundleException {
1:         Bundle[] bundles = bundleContext.getBundles();
1:         for (Bundle bundle : bundles) {
1:             if (bundle.getState() == Bundle.INSTALLED) {
1:                 System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":"
1:                     + bundle.getSymbolicName() + ":" + bundle.getVersion());
1:                 bundle.start();
1:             }
1:         }
1:     }
1: 
1:     public Bundle getBundleByName(String symbolicName) {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if (b.getSymbolicName().equals(symbolicName)) {
1:                 return b;
1:             }
1:         }
1:         return null;
1:     }
1:     
1:     public <T> T getService(Class<T> type, String filter) {
1:         return getService(type, filter, 10000);
1:     }
1: 
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:     public <T> T getService(Class<T> type, String filter, int timeout) {
1:         ServiceTracker tracker = null;
1:         try {
1:             String objClassFilter = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:             String flt = filter != null ? "(&" + objClassFilter + sanitizeFilter(filter) + ")" : objClassFilter;
1:             Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:             tracker = new ServiceTracker(bundleContext, osgiFilter, null);
1:             tracker.open();
1: 
1:             Object svc = type.cast(tracker.waitForService(timeout));
1:             if (svc == null) {
1:                 throw new IllegalStateException("Gave up waiting for service " + flt);
1:             }
1:             return type.cast(svc);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IllegalArgumentException("Invalid filter", e);
1:         } catch (InterruptedException e) {
1:             throw new RuntimeException(e);
1:         } finally {
1:             //tracker.close();
1:         }
1:     }
1: 
1:     public String sanitizeFilter(String filter) {
1:         return filter.startsWith("(") ? filter : "(" + filter + ")";
1:     }
1: 
1:     protected Option baseOptions() {
1:         String localRepo = System.getProperty("maven.repo.local");
1: 
1:         if (localRepo == null) {
1:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:         }
1:         MavenArtifactUrlReference karafUrl = maven().groupId("org.apache.karaf").artifactId("apache-karaf").version("4.0.1").type("tar.gz");
1:         UrlReference enterpriseFeatureUrl = maven().groupId("org.apache.karaf.features").artifactId("enterprise").versionAsInProject().type("xml").classifier("features");
1:         UrlReference jpaFeatureUrl = maven().groupId("org.apache.aries.jpa").artifactId("jpa-features").versionAsInProject().type("xml").classifier("features");
1:         UrlReference paxJdbcFeatureUrl = maven().groupId("org.ops4j.pax.jdbc").artifactId("pax-jdbc-features").version("0.7.0").type("xml").classifier("features");
1:         return CoreOptions.composite(
1:             //KarafDistributionOption.debugConfiguration("8000", true),
1:             karafDistributionConfiguration().frameworkUrl(karafUrl).name("Apache Karaf").unpackDirectory(new File("target/exam")).useDeployFolder(false),
1:             configureSecurity().disableKarafMBeanServerBuilder(),
1:             keepRuntimeFolder(),
1:             logLevel(LogLevel.INFO),
1:             when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:             features(paxJdbcFeatureUrl, "pax-jdbc-config", "pax-jdbc-h2", "pax-jdbc-pool-dbcp2"),
1:             features(enterpriseFeatureUrl, "transaction", "http-whiteboard", "hibernate/4.3.6.Final", "scr"),
0:             features(jpaFeatureUrl, "jpa/2.2.0-SNAPSHOT"),
1:             mavenBundle("org.apache.aries.jpa.example", "org.apache.aries.jpa.example.tasklist.model").versionAsInProject()
1: //            replaceConfigurationFile("etc/org.ops4j.pax.logging.cfg", getConfigFile("/etc/org.ops4j.pax.logging.cfg")),
1:         );
1: 
1:     }
1: 
1:     @Before
1:     public void createConfigs() throws Exception {
1:         if (config == null) {
1:             bundleContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
1:             configAdmin = getService(ConfigurationAdmin.class, null);
1:             createConfigForLogging();
1:             createConfigForDS();
1: 
1:         }
1:     }
1: 
1:     private void createConfigForDS() throws IOException {
1:         config = configAdmin.createFactoryConfiguration("org.ops4j.datasource", null);
1:         Dictionary<String, String> props = new Hashtable<String, String>();
1:         props.put(DataSourceFactory.OSGI_JDBC_DRIVER_NAME, "H2-pool-xa");
1:         props.put(DataSourceFactory.JDBC_DATABASE_NAME, "tasklist;create=true");
1:         props.put(DataSourceFactory.JDBC_DATASOURCE_NAME, "tasklist");
1:         config.update(props);
1:         LOG.info("Created DataSource config tasklist");
1:     }
1:     
1:     private void createConfigForLogging() throws IOException {
1:         Configuration logConfig = configAdmin.getConfiguration("org.ops4j.pax.logging", null);
1:         Dictionary<String, String> props = new Hashtable<String, String>();
1:         props.put("log4j.rootLogger", "INFO, stdout");
1:         props.put("log4j.logger.org.apache.aries.transaction", "DEBUG");
1:         props.put("log4j.logger.org.apache.aries.transaction.parsing", "DEBUG");
1:         props.put("log4j.logger.org.apache.aries.jpa.blueprint.impl", "DEBUG");
1:         props.put("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender");
1:         props.put("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout");
1:         props.put("log4j.appender.stdout.layout.ConversionPattern", "%d{ISO8601} | %-5.5p | %-16.16t | %c | %m%n");
1:         logConfig.update(props);
1:     }
1: 
1: }
============================================================================