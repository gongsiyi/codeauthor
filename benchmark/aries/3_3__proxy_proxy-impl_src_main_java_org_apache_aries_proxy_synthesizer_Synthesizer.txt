1:c23df57: /*
1:c23df57:  * Licensed to the Apache Software Foundation (ASF) under one
1:c23df57:  * or more contributor license agreements.  See the NOTICE file
1:c23df57:  * distributed with this work for additional information
1:c23df57:  * regarding copyright ownership.  The ASF licenses this file
1:c23df57:  * to you under the Apache License, Version 2.0 (the
1:c23df57:  * "License"); you may not use this file except in compliance
1:c23df57:  * with the License.  You may obtain a copy of the License at
1:c23df57:  *
1:c23df57:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c23df57:  *
1:c23df57:  * Unless required by applicable law or agreed to in writing,
1:c23df57:  * software distributed under the License is distributed on an
1:c23df57:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c23df57:  * KIND, either express or implied.  See the License for the
1:c23df57:  * specific language governing permissions and limitations
1:c23df57:  * under the License.
1:c23df57:  */
1:e6518d7: 
1:c23df57: package org.apache.aries.proxy.synthesizer;
1:e6518d7: 
1:c23df57: import java.io.FileInputStream;
1:c23df57: import java.io.FileOutputStream;
1:6562995: 
1:c23df57: import org.objectweb.asm.ClassReader;
1:e6518d7: import org.objectweb.asm.ClassVisitor;
1:c23df57: import org.objectweb.asm.ClassWriter;
1:c23df57: import org.objectweb.asm.Opcodes;
3:c23df57: 
1:c23df57: /**
1:c23df57:  * The Synthesizer class can be run from a java command with arguments
1:c23df57:  * of paths to class files that should be modified to have the synthetic
1:c23df57:  * attribute added.
1:c23df57:  *
1:c23df57:  */
1:c23df57: public class Synthesizer
1:e6518d7: {
1:c23df57:   /**
1:c23df57:    * This is the main method for running the Synthesizer
1:c23df57:    * 
1:c23df57:    * @param args - String[] of file paths to class files
1:c23df57:    * @throws Exception 
1:c23df57:    */
1:c23df57:   public static void main(String[] args) throws Exception
3:c23df57:   {
1:c23df57:     //add the synthetic modifier for each of the supplied args
1:c23df57:     for (String arg : args) {
1:c23df57:       FileInputStream classInStream = null;
1:c23df57:       ClassWriter writer = null;
1:e6518d7:      
1:c23df57:       try {
1:c23df57:         //read in the class
1:c23df57:         classInStream = new FileInputStream(arg);
1:c23df57:         ClassReader reader = new ClassReader(classInStream);
1:c23df57:         //make a ClassWriter constructed with the reader for speed
1:c23df57:         //since we are mostly just copying
1:c23df57:         //we just need to override the visit method so we can add
1:c23df57:         //the synthetic modifier, otherwise we use the methods in
1:c23df57:         //a standard writer
1:e6518d7:         writer =   new ClassWriter(reader, 0) ;
1:e6518d7:         ClassVisitor cv = new CustomClassVisitor((ClassVisitor)writer);
1:c23df57:         //call accept on the reader to start the visits
1:c23df57:         //using the writer we created as the visitor
1:e6518d7:         reader.accept(cv, 0);
1:c23df57:       } finally {
1:c23df57:         //close the InputStream if it is hanging around
1:c23df57:         if (classInStream != null) classInStream.close();
3:c23df57:       }
1:c23df57:       FileOutputStream classOutStream = null;
1:c23df57:       try {
1:c23df57:         //write out the new bytes of the class file
1:c23df57:         classOutStream = new FileOutputStream(arg);
1:c23df57:         if (writer != null) classOutStream.write(writer.toByteArray());
1:c23df57:       } finally {
1:c23df57:         //close the OutputStream if it is still around
1:c23df57:         if (classOutStream != null) classOutStream.close();
1:e6518d7:       }
1:c23df57:     }
1:c23df57:   }
1:e6518d7:   
1:e6518d7:   public static class CustomClassVisitor extends ClassVisitor
1:e6518d7:   {
1:9a9631e: 
1:9a9631e:     public CustomClassVisitor( ClassVisitor cv)
1:9a9631e:     {
1:9a9631e:       super(Opcodes.ASM5, cv);
1:9a9631e:       
1:9a9631e:     }
1:9a9631e:     @Override
1:e6518d7:     public void visit(int version, int access, String name, String signature,
1:e6518d7:         String superName, String[] interfaces)
1:e6518d7:     {
1:e6518d7:       cv.visit(version, access | Opcodes.ACC_SYNTHETIC, name, signature, superName,
1:e6518d7:           interfaces);
1:e6518d7:     }
1:e6518d7: 
1:e6518d7:   }
1:c23df57: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1: 
1:     public CustomClassVisitor( ClassVisitor cv)
1:     {
1:       super(Opcodes.ASM5, cv);
1:       
1:     }
1:     @Override
author:Emily Jiang
-------------------------------------------------------------------------------
commit:322f373
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       super(Opcodes.ASM4, cv);
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.proxy.impl.gen.Constants;
1: import org.objectweb.asm.ClassVisitor;
/////////////////////////////////////////////////////////////////////////
1:      
/////////////////////////////////////////////////////////////////////////
1:         writer =   new ClassWriter(reader, 0) ;
1:         ClassVisitor cv = new CustomClassVisitor((ClassVisitor)writer);
1:         reader.accept(cv, 0);
/////////////////////////////////////////////////////////////////////////
1:   
1:   public static class CustomClassVisitor extends ClassVisitor
1:   {
1: 
0:     public CustomClassVisitor( ClassVisitor cv)
1:     {
0:       super(Constants.ASM4, cv);
1:       
1:     }
0:     @Override
1:     public void visit(int version, int access, String name, String signature,
1:         String superName, String[] interfaces)
1:     {
1:       cv.visit(version, access | Opcodes.ACC_SYNTHETIC, name, signature, superName,
1:           interfaces);
1:     }
1: 
1:   }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:6562995
/////////////////////////////////////////////////////////////////////////
1: 
commit:c23df57
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.proxy.synthesizer;
1: 
0: import java.io.ByteArrayInputStream;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import org.objectweb.asm.ClassReader;
1: import org.objectweb.asm.ClassWriter;
1: import org.objectweb.asm.Opcodes;
1: 
1: /**
1:  * The Synthesizer class can be run from a java command with arguments
1:  * of paths to class files that should be modified to have the synthetic
1:  * attribute added.
1:  *
1:  */
1: public class Synthesizer
1: {
1:   /**
1:    * This is the main method for running the Synthesizer
1:    * 
1:    * @param args - String[] of file paths to class files
1:    * @throws Exception 
1:    */
1:   public static void main(String[] args) throws Exception
1:   {
1:     //add the synthetic modifier for each of the supplied args
1:     for (String arg : args) {
1:       FileInputStream classInStream = null;
1:       ClassWriter writer = null;
1:       try {
1:         //read in the class
1:         classInStream = new FileInputStream(arg);
1:         ClassReader reader = new ClassReader(classInStream);
1:         //make a ClassWriter constructed with the reader for speed
1:         //since we are mostly just copying
1:         //we just need to override the visit method so we can add
1:         //the synthetic modifier, otherwise we use the methods in
1:         //a standard writer
0:         writer = new ClassWriter(reader, 0) {
0:           @Override
0:           public void visit(int version, int access, String name, String signature,
0:               String superName, String[] interfaces)
1:           {
0:             super.visit(version, access | Opcodes.ACC_SYNTHETIC, name, signature, superName,
0:                 interfaces);
1:           }
0:         };
1:         //call accept on the reader to start the visits
1:         //using the writer we created as the visitor
0:         reader.accept(writer, 0);
1:       } finally {
1:         //close the InputStream if it is hanging around
1:         if (classInStream != null) classInStream.close();
1:       }
1:       FileOutputStream classOutStream = null;
1:       try {
1:         //write out the new bytes of the class file
1:         classOutStream = new FileOutputStream(arg);
1:         if (writer != null) classOutStream.write(writer.toByteArray());
1:       } finally {
1:         //close the OutputStream if it is still around
1:         if (classOutStream != null) classOutStream.close();
1:       }
1:     }
1:   }
1: }
============================================================================