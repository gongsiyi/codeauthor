1:9df8274: /*
1:9df8274:  * Licensed to the Apache Software Foundation (ASF) under one
1:9df8274:  * or more contributor license agreements.  See the NOTICE file
1:9df8274:  * distributed with this work for additional information
1:9df8274:  * regarding copyright ownership.  The ASF licenses this file
1:9df8274:  * to you under the Apache License, Version 2.0 (the
1:9df8274:  * "License"); you may not use this file except in compliance
1:9df8274:  * with the License.  You may obtain a copy of the License at
1:9df8274:  *
1:9df8274:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9df8274:  *
1:9df8274:  * Unless required by applicable law or agreed to in writing,
1:9df8274:  * software distributed under the License is distributed on an
1:9df8274:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9df8274:  * KIND, either express or implied.  See the License for the
1:9df8274:  * specific language governing permissions and limitations
1:9df8274:  * under the License.
1:9df8274:  */
1:9df8274: package org.apache.aries.subsystem.core.capabilityset;
1:9df8274: 
1:9df8274: import java.util.Comparator;
1:9df8274: 
1:9df8274: public class StringComparator implements Comparator<String>
1:9df8274: {
1:9df8274: 
1:9df8274:     public static final StringComparator COMPARATOR = new StringComparator();
1:9df8274: 
1:9df8274:     public int compare(String s1, String s2)
1:9df8274:     {
1:9df8274:         int n1 = s1.length();
1:9df8274:         int n2 = s2.length();
1:9df8274:         int min = n1 < n2 ? n1 : n2;
1:9df8274:         for ( int i = 0; i < min; i++ )
1:9df8274:         {
1:9df8274:             char c1 = s1.charAt( i );
1:9df8274:             char c2 = s2.charAt( i );
1:9df8274:             if ( c1 != c2 )
1:9df8274:             {
1:9df8274:                 // Fast check for simple ascii codes
1:9df8274:                 if ( c1 <= 128 && c2 <= 128 )
1:9df8274:                 {
1:9df8274:                     c1 = toLowerCaseFast(c1);
1:9df8274:                     c2 = toLowerCaseFast(c2);
1:9df8274:                     if ( c1 != c2 )
1:9df8274:                     {
1:9df8274:                         return c1 - c2;
1:9df8274:                     }
1:9df8274:                 }
1:9df8274:                 else
1:9df8274:                 {
1:9df8274:                     c1 = Character.toUpperCase( c1 );
1:9df8274:                     c2 = Character.toUpperCase( c2 );
1:9df8274:                     if ( c1 != c2 )
1:9df8274:                     {
1:9df8274:                         c1 = Character.toLowerCase( c1 );
1:9df8274:                         c2 = Character.toLowerCase( c2 );
1:9df8274:                         if ( c1 != c2 )
1:9df8274:                         {
1:9df8274:                             // No overflow because of numeric promotion
1:9df8274:                             return c1 - c2;
1:9df8274:                         }
1:9df8274:                     }
1:9df8274:                 }
1:9df8274:             }
1:9df8274:         }
1:9df8274:         return n1 - n2;
1:9df8274:     }
1:9df8274: 
1:9df8274:     private static char toLowerCaseFast( char ch )
1:9df8274:     {
1:9df8274:         return ( ch >= 'A' && ch <= 'Z' ) ? ( char ) ( ch + 'a' - 'A' ) : ch;
1:9df8274:     }
1:9df8274: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9df8274
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.core.capabilityset;
1: 
1: import java.util.Comparator;
1: 
1: public class StringComparator implements Comparator<String>
1: {
1: 
1:     public static final StringComparator COMPARATOR = new StringComparator();
1: 
1:     public int compare(String s1, String s2)
1:     {
1:         int n1 = s1.length();
1:         int n2 = s2.length();
1:         int min = n1 < n2 ? n1 : n2;
1:         for ( int i = 0; i < min; i++ )
1:         {
1:             char c1 = s1.charAt( i );
1:             char c2 = s2.charAt( i );
1:             if ( c1 != c2 )
1:             {
1:                 // Fast check for simple ascii codes
1:                 if ( c1 <= 128 && c2 <= 128 )
1:                 {
1:                     c1 = toLowerCaseFast(c1);
1:                     c2 = toLowerCaseFast(c2);
1:                     if ( c1 != c2 )
1:                     {
1:                         return c1 - c2;
1:                     }
1:                 }
1:                 else
1:                 {
1:                     c1 = Character.toUpperCase( c1 );
1:                     c2 = Character.toUpperCase( c2 );
1:                     if ( c1 != c2 )
1:                     {
1:                         c1 = Character.toLowerCase( c1 );
1:                         c2 = Character.toLowerCase( c2 );
1:                         if ( c1 != c2 )
1:                         {
1:                             // No overflow because of numeric promotion
1:                             return c1 - c2;
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:         return n1 - n2;
1:     }
1: 
1:     private static char toLowerCaseFast( char ch )
1:     {
1:         return ( ch >= 'A' && ch <= 'Z' ) ? ( char ) ( ch + 'a' - 'A' ) : ch;
1:     }
1: }
============================================================================