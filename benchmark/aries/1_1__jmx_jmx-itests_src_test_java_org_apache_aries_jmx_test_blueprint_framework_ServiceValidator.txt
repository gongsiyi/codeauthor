1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.test.blueprint.framework;
1:fdf3952: 
1:fdf3952: import static junit.framework.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.fail;
1:fdf3952: 
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.List;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: 
1:fdf3952: public class ServiceValidator extends AbstractCompositeDataValidator implements NonNullObjectValueValidator {
1:fdf3952:     // a TargetValidator can be one of BeanValidator, ReferenceValidator, RefValidator
1:fdf3952:     TargetValidator serviceComponentValidator = null;
1:fdf3952:     
1:fdf3952:     List<MapEntryValidator> servicePropertyValidators = new ArrayList<MapEntryValidator>();
1:fdf3952:     List<RegistrationListenerValidator> registrationListenerValidators = new ArrayList<RegistrationListenerValidator>();
1:fdf3952:     
1:fdf3952:     public ServiceValidator(int autoExport){
1:fdf3952:         super(BlueprintMetadataMBean.SERVICE_METADATA_TYPE);
1:fdf3952:         this.setExpectValue(BlueprintMetadataMBean.AUTO_EXPORT, autoExport);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public void setServiceComponentValidator(TargetValidator targetValidator){
1:fdf3952:         this.serviceComponentValidator = targetValidator;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public void addMapEntryValidator(MapEntryValidator... validators){
1:fdf3952:         for (MapEntryValidator validator : validators)
1:fdf3952:             this.servicePropertyValidators.add(validator);
1:fdf3952:     }
1:fdf3952:         
1:fdf3952:     public void addRegistrationListenerValidator(RegistrationListenerValidator... validators){
1:fdf3952:         for (RegistrationListenerValidator validator : validators)
1:fdf3952:             this.registrationListenerValidators.add(validator);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public void validate(CompositeData target){
1:fdf3952:         super.validate(target);
1:fdf3952:         assertNotNull("ServiceValidator must have a TargetValidator for service component", serviceComponentValidator);
1:fdf3952:         serviceComponentValidator.validate(Util.decode((Byte[])target.get(BlueprintMetadataMBean.SERVICE_COMPONENT)));
1:fdf3952:         
1:fdf3952:         if (servicePropertyValidators.size()!=0){
1:fdf3952:             CompositeData[] serviceProperties = (CompositeData[])target.get(BlueprintMetadataMBean.SERVICE_PROPERTIES);
1:fdf3952:             if ( servicePropertyValidators.size() != serviceProperties.length )
1:fdf3952:                 fail("The quantity of the service properties is not the same, expect " +servicePropertyValidators.size()+" but got "+ serviceProperties.length);
1:fdf3952:             for (int i=0; i<servicePropertyValidators.size(); i++)
1:fdf3952:                 servicePropertyValidators.get(i).validate(serviceProperties[i]);
1:fdf3952:         }
1:fdf3952:         
1:fdf3952:         if (registrationListenerValidators.size() != 0){
1:fdf3952:             CompositeData[] registrationListeners = (CompositeData[])target.get(BlueprintMetadataMBean.REGISTRATION_LISTENERS);
1:fdf3952:             if ( registrationListenerValidators.size() != registrationListeners.length )
1:fdf3952:                 fail("The quantity of the registration listeners is not the same, expect " +registrationListenerValidators.size()+" but got "+ registrationListeners.length);
1:fdf3952:             for (int i=0; i<registrationListenerValidators.size(); i++)
1:fdf3952:                 registrationListenerValidators.get(i).validate(registrationListeners[i]);
1:fdf3952:         }
1:fdf3952:         
1:fdf3952:     }
1:fdf3952:     
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.test.blueprint.framework;
1: 
1: import static junit.framework.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: 
1: public class ServiceValidator extends AbstractCompositeDataValidator implements NonNullObjectValueValidator {
1:     // a TargetValidator can be one of BeanValidator, ReferenceValidator, RefValidator
1:     TargetValidator serviceComponentValidator = null;
1:     
1:     List<MapEntryValidator> servicePropertyValidators = new ArrayList<MapEntryValidator>();
1:     List<RegistrationListenerValidator> registrationListenerValidators = new ArrayList<RegistrationListenerValidator>();
1:     
1:     public ServiceValidator(int autoExport){
1:         super(BlueprintMetadataMBean.SERVICE_METADATA_TYPE);
1:         this.setExpectValue(BlueprintMetadataMBean.AUTO_EXPORT, autoExport);
1:     }
1:     
1:     public void setServiceComponentValidator(TargetValidator targetValidator){
1:         this.serviceComponentValidator = targetValidator;
1:     }
1:     
1:     public void addMapEntryValidator(MapEntryValidator... validators){
1:         for (MapEntryValidator validator : validators)
1:             this.servicePropertyValidators.add(validator);
1:     }
1:         
1:     public void addRegistrationListenerValidator(RegistrationListenerValidator... validators){
1:         for (RegistrationListenerValidator validator : validators)
1:             this.registrationListenerValidators.add(validator);
1:     }
1:     
1:     public void validate(CompositeData target){
1:         super.validate(target);
1:         assertNotNull("ServiceValidator must have a TargetValidator for service component", serviceComponentValidator);
1:         serviceComponentValidator.validate(Util.decode((Byte[])target.get(BlueprintMetadataMBean.SERVICE_COMPONENT)));
1:         
1:         if (servicePropertyValidators.size()!=0){
1:             CompositeData[] serviceProperties = (CompositeData[])target.get(BlueprintMetadataMBean.SERVICE_PROPERTIES);
1:             if ( servicePropertyValidators.size() != serviceProperties.length )
1:                 fail("The quantity of the service properties is not the same, expect " +servicePropertyValidators.size()+" but got "+ serviceProperties.length);
1:             for (int i=0; i<servicePropertyValidators.size(); i++)
1:                 servicePropertyValidators.get(i).validate(serviceProperties[i]);
1:         }
1:         
1:         if (registrationListenerValidators.size() != 0){
1:             CompositeData[] registrationListeners = (CompositeData[])target.get(BlueprintMetadataMBean.REGISTRATION_LISTENERS);
1:             if ( registrationListenerValidators.size() != registrationListeners.length )
1:                 fail("The quantity of the registration listeners is not the same, expect " +registrationListenerValidators.size()+" but got "+ registrationListeners.length);
1:             for (int i=0; i<registrationListenerValidators.size(); i++)
1:                 registrationListenerValidators.get(i).validate(registrationListeners[i]);
1:         }
1:         
1:     }
1:     
1: }
============================================================================