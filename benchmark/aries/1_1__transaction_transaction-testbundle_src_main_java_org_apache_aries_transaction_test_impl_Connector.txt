1:a44e725: /*
1:a44e725:  * Licensed to the Apache Software Foundation (ASF) under one
1:a44e725:  * or more contributor license agreements.  See the NOTICE file
1:a44e725:  * distributed with this work for additional information
1:a44e725:  * regarding copyright ownership.  The ASF licenses this file
1:a44e725:  * to you under the Apache License, Version 2.0 (the
1:a44e725:  * "License"); you may not use this file except in compliance
1:a44e725:  * with the License.  You may obtain a copy of the License at
1:a44e725:  *
1:a44e725:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a44e725:  *
1:a44e725:  * Unless required by applicable law or agreed to in writing,
1:a44e725:  * software distributed under the License is distributed on an
1:a44e725:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a44e725:  * KIND, either express or implied.  See the License for the
1:a44e725:  * specific language governing permissions and limitations
1:a44e725:  * under the License.
1:a44e725:  */
1:a44e725: package org.apache.aries.transaction.test.impl;
4:a44e725: 
1:a44e725: import java.sql.Connection;
1:bd98451: import java.sql.DatabaseMetaData;
1:bd98451: import java.sql.PreparedStatement;
1:bd98451: import java.sql.ResultSet;
1:a44e725: import java.sql.SQLException;
1:a44e725: import java.sql.Statement;
1:a44e725: 
1:a44e725: import javax.sql.DataSource;
1:a44e725: 
1:bd98451: import org.apache.aries.transaction.test.Counter;
1:bd98451: 
1:bd98451: public class Connector implements Counter {
1:a44e725:     private DataSource xads;
1:a44e725:     private String user;
1:a44e725:     private String password;
1:bd98451:     private Connection conn;
1:a44e725: 
1:a44e725:     public void setXads(DataSource xads) {
1:a44e725:         this.xads = xads;
7:a44e725:     }
1:bd98451: 
1:a44e725:     public void setUser(String user) {
1:a44e725:         this.user = user;
1:a44e725:     }
1:bd98451: 
1:a44e725:     public void setPassword(String password) {
1:a44e725:         this.password = password;
1:a44e725:     }
1:bd98451: 
1:bd98451:     private Connection connect() throws SQLException {
1:a44e725:         return xads.getConnection(user, password);
1:a44e725:     }
1:a44e725:     
1:bd98451:     public Connection getConn() {
1:bd98451:         return conn;
1:bd98451:     }
1:bd98451: 
1:bd98451:     public void initialize() throws SQLException {
1:bd98451:         conn = connect();
1:bd98451:         DatabaseMetaData dbmd = conn.getMetaData();
1:bd98451:         ResultSet rs = dbmd.getTables(null, "", "TESTTABLE", null);
1:bd98451:         if (!rs.next()) {
1:bd98451:             executeUpdate("CREATE TABLE TESTTABLE (NAME VARCHAR(64), VALUE INTEGER, PRIMARY KEY(NAME, VALUE))");
1:bd98451:         }
1:bd98451:     }
1:bd98451:     
1:bd98451:     public void executeUpdate(String sql) {
1:a44e725:         Statement stmt = null;
4:a44e725:         try {
2:a44e725:             stmt = conn.createStatement();
1:bd98451:             stmt.executeUpdate(sql);
1:bd98451:             conn.commit();
1:bd98451:         } catch (Exception e) {
1:2ad9527:             throw new RuntimeException(e.getMessage(), e); // NOSONAR
1:bd98451:         } finally {
1:bd98451:             safeClose(stmt);
1:bd98451:         }
1:bd98451:     }
1:bd98451:     
1:2ad9527:     @Override
1:bd98451:     public int countRows() {
1:bd98451:         PreparedStatement stmt = null;
1:bd98451:         ResultSet rs = null;
1:bd98451:         int count = -1;
1:bd98451:         try {
1:bd98451:             stmt = conn.prepareStatement("SELECT * FROM TESTTABLE", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
1:bd98451:             rs = stmt.executeQuery();
1:bd98451:             rs.last();
1:bd98451:             count = rs.getRow();
1:bd98451:         } catch (Exception e) {
1:2ad9527:             throw new RuntimeException(e.getMessage(), e); // NOSONAR
1:bd98451:         }
1:bd98451:         finally {
1:bd98451:             safeClose(rs);
1:bd98451:             safeClose(stmt);
1:bd98451:         }
1:bd98451: 
1:bd98451:         return count;
1:bd98451:     }
1:bd98451: 
1:bd98451:     
1:bd98451:     public void insertRow(String name, int value) throws SQLException {
1:bd98451:         PreparedStatement stmt = null;
1:bd98451:         Connection con2 = null;
1:bd98451:         try {
1:bd98451:             // Need to create a new connection to participate in transaction
1:bd98451:             con2 = connect();
1:bd98451:             stmt = con2.prepareStatement("INSERT INTO TESTTABLE VALUES (?, ?)");
1:bd98451:             stmt.setString(1, name);
1:bd98451:             stmt.setInt(2, value);
1:bd98451:             stmt.executeUpdate();
1:a44e725:         }
2:a44e725:         finally {
2:a44e725:             safeClose(stmt);
1:bd98451:             safeClose(con2);
1:bd98451:         }
1:a44e725:     }
1:bd98451:     
1:bd98451:     public void close() {
1:bd98451:         safeClose(conn);
1:a44e725:     }
1:a44e725: 
1:2ad9527:     private static void safeClose(Connection conn) {
1:bd98451:         if (conn != null) {
1:bd98451:             try {
1:bd98451:                 conn.close();
1:bd98451:             } catch (SQLException e) {
1:2ad9527:                 throw new IllegalStateException(e);
1:bd98451:             }
1:a44e725:         }
1:a44e725:     }
1:a44e725: 
1:2ad9527:     private static void safeClose(Statement stmt) {
1:bd98451:         if (stmt != null) {
1:bd98451:             try {
1:bd98451:                 stmt.close();
1:bd98451:             } catch (SQLException e) {
1:2ad9527:                 throw new IllegalStateException(e);
1:bd98451:             }
1:bd98451:         }
1:a44e725:     }
1:bd98451:     
1:bd98451: 
1:2ad9527:     private static void safeClose(ResultSet rs) {
1:bd98451:         if (rs != null) {
1:bd98451:             try {
1:bd98451:                 rs.close();
1:bd98451:             } catch (SQLException e) {
1:2ad9527:                 throw new IllegalStateException(e);
1:bd98451:             }
1:a44e725:         }
1:a44e725:     }
1:a44e725: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2ad9527
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException(e.getMessage(), e); // NOSONAR
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException(e.getMessage(), e); // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:     private static void safeClose(Connection conn) {
1:                 throw new IllegalStateException(e);
1:     private static void safeClose(Statement stmt) {
1:                 throw new IllegalStateException(e);
1:     private static void safeClose(ResultSet rs) {
1:                 throw new IllegalStateException(e);
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: import java.sql.DatabaseMetaData;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import org.apache.aries.transaction.test.Counter;
1: 
1: public class Connector implements Counter {
1:     private Connection conn;
1: 
1: 
1: 
1:     private Connection connect() throws SQLException {
1:     public Connection getConn() {
1:         return conn;
1:     }
1: 
1:     public void initialize() throws SQLException {
1:         conn = connect();
1:         DatabaseMetaData dbmd = conn.getMetaData();
1:         ResultSet rs = dbmd.getTables(null, "", "TESTTABLE", null);
1:         if (!rs.next()) {
1:             executeUpdate("CREATE TABLE TESTTABLE (NAME VARCHAR(64), VALUE INTEGER, PRIMARY KEY(NAME, VALUE))");
1:         }
1:     }
1:     
1:     public void executeUpdate(String sql) {
1:             stmt.executeUpdate(sql);
1:             conn.commit();
1:         } catch (Exception e) {
1:         } finally {
1:             safeClose(stmt);
1:         }
1:     }
1:     
1:     public int countRows() {
1:         PreparedStatement stmt = null;
1:         ResultSet rs = null;
1:         int count = -1;
1:         try {
1:             stmt = conn.prepareStatement("SELECT * FROM TESTTABLE", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
1:             rs = stmt.executeQuery();
1:             rs.last();
1:             count = rs.getRow();
1:         } catch (Exception e) {
0:             throw new RuntimeException(e.getMessage(), e);
1:         }
1:         finally {
1:             safeClose(rs);
1:             safeClose(stmt);
1:         }
1: 
1:         return count;
1:     }
1: 
1:     
1:     public void insertRow(String name, int value) throws SQLException {
1:         PreparedStatement stmt = null;
1:         Connection con2 = null;
1:         try {
1:             // Need to create a new connection to participate in transaction
1:             con2 = connect();
1:             stmt = con2.prepareStatement("INSERT INTO TESTTABLE VALUES (?, ?)");
1:             stmt.setString(1, name);
1:             stmt.setInt(2, value);
1:             stmt.executeUpdate();
1:             safeClose(con2);
1:     }
1:     
1:     public void close() {
1:         safeClose(conn);
1:         if (conn != null) {
1:             try {
1:                 conn.close();
1:             } catch (SQLException e) {
0:                 // Ignore
1:             }
1:         if (stmt != null) {
1:             try {
1:                 stmt.close();
1:             } catch (SQLException e) {
0:                 // Ignore
1:             }
1:     }
1:     
1: 
0:     private void safeClose(ResultSet rs) {
1:         if (rs != null) {
1:             try {
1:                 rs.close();
1:             } catch (SQLException e) {
0:                 // Ignore
1:             }
commit:658d767
/////////////////////////////////////////////////////////////////////////
commit:a44e725
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.test.impl;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: 
1: import javax.sql.DataSource;
1: 
0: public class Connector {
1:     private DataSource xads;
0:     private DataSource ds;
1:     private String user;
1:     private String password;
1: 
1:     public void setXads(DataSource xads) {
1:         this.xads = xads;
1:     }
0:     public void setDs(DataSource ds) {
0:         this.ds = ds;
1:     }
1:     public void setUser(String user) {
1:         this.user = user;
1:     }
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1:     
0:     public Connection connect() throws SQLException {
1:         return xads.getConnection(user, password);
1:     }
1:     
0:     public void initialize() {
0:         Connection conn = null;
1:         Statement stmt = null;
1: 
1:         try {
0:             conn = connect();
0:             conn.setAutoCommit(true);
1:             stmt = conn.createStatement();
0:             stmt.executeUpdate("DROP TABLE TESTTABLE");
1:         }
0:         catch (Exception e) {
0:             // Ignore
1:         }
1:         finally {
1:             safeClose(stmt);
0:             safeClose(conn);
1:         }
1: 
1:         try {
0:             conn = connect();
0:             conn.setAutoCommit(true);
1:             stmt = conn.createStatement();
0:             stmt.executeUpdate("CREATE TABLE TESTTABLE (NAME VARCHAR(64), VALUE INTEGER, PRIMARY KEY(NAME, VALUE))");
1:         }
0:         catch (Exception e) {
0:             // Ignore
1:         }
1:         finally {
1:             safeClose(stmt);
0:             safeClose(conn);
1:         }
1:     }
1: 
0:     public void safeClose(Connection conn) {
0:         if (conn == null) {
0:             return;
1:         }
1:         try {
0:             conn.close();
0:         } catch (SQLException e) {
0:             // Ignore
1:         }
1:     }
1: 
0:     public void safeClose(Statement stmt) {
0:         if (stmt == null) {
0:             return;
1:         }
1:         try {
0:             stmt.close();
0:         } catch (SQLException e) {
0:             // Ignore
1:         }
1:     }
1: }
============================================================================