1:24455ce: /*
1:24455ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:24455ce:  * or more contributor license agreements.  See the NOTICE file
1:24455ce:  * distributed with this work for additional information
1:24455ce:  * regarding copyright ownership.  The ASF licenses this file
1:24455ce:  * to you under the Apache License, Version 2.0 (the
1:24455ce:  * "License"); you may not use this file except in compliance
1:24455ce:  * with the License.  You may obtain a copy of the License at
1:24455ce:  *
1:24455ce:  *   http://www.apache.org/licenses/LICENSE-2.0
1:24455ce:  *
1:24455ce:  * Unless required by applicable law or agreed to in writing,
1:24455ce:  * software distributed under the License is distributed on an
1:24455ce:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:24455ce:  * KIND, either express or implied.  See the License for the
1:24455ce:  * specific language governing permissions and limitations
1:24455ce:  * under the License.
1:24455ce:  */
1:24455ce: package org.apache.aries.proxy.impl;
1:24455ce: 
1:24455ce: import java.lang.reflect.InvocationHandler;
1:24455ce: import java.lang.reflect.Proxy;
1:24455ce: import java.util.Collection;
1:96d4e06: import java.util.concurrent.Callable;
1:24455ce: 
1:96d4e06: import org.apache.aries.proxy.InvocationListener;
1:24455ce: import org.apache.aries.proxy.ProxyManager;
1:6726c3e: import org.apache.aries.proxy.UnableToProxyException;
1:24455ce: import org.osgi.framework.Bundle;
1:24455ce: 
1:24455ce: public final class JdkProxyManager extends AbstractProxyManager implements ProxyManager
1:24455ce: {
1:96d4e06:   public Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes, 
1:6726c3e:       Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException 
1:24455ce:   {
1:96d4e06:     return Proxy.newProxyInstance(getClassLoader(clientBundle, classes), getInterfaces(classes), new ProxyHandler(this, dispatcher, listener));
1:24455ce:   }
1:24455ce: 
1:6726c3e:   private static final Class<?>[] getInterfaces(Collection<Class<?>> classes) throws UnableToProxyException
1:24455ce:   {
1:24455ce:     for (Class<?> clazz : classes) {
1:24455ce:         if (!!!clazz.isInterface()) {
1:6726c3e:           throw new UnableToProxyException(clazz, NLS.MESSAGES.getMessage("class.is.class", clazz.getName()));
1:24455ce:         } 
1:24455ce:     }
1:24455ce:     return (Class[]) classes.toArray(new Class[classes.size()]);
1:24455ce:   }
1:24455ce: 
1:24455ce:   @Override
1:24455ce:   protected boolean isProxyClass(Class<?> clazz) 
1:24455ce:   {
1:24455ce:     return Proxy.isProxyClass(clazz);
1:24455ce:   }
1:24455ce: 
1:24455ce:   @Override
1:24455ce:   protected InvocationHandler getInvocationHandler(Object proxy) 
1:24455ce:   {
1:24455ce:     Class<?> clazz = proxy.getClass();
1:24455ce:     if (isProxyClass(clazz)) {
1:24455ce:       return Proxy.getInvocationHandler(proxy);
1:24455ce:     }
1:24455ce:     return null;
1:24455ce:   }
1:24455ce: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:6726c3e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.UnableToProxyException;
1:       Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException 
1:   private static final Class<?>[] getInterfaces(Collection<Class<?>> classes) throws UnableToProxyException
1:           throw new UnableToProxyException(clazz, NLS.MESSAGES.getMessage("class.is.class", clazz.getName()));
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Callable;
1: import org.apache.aries.proxy.InvocationListener;
1:   public Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes, 
0:       Callable<Object> dispatcher, InvocationListener listener) 
1:     return Proxy.newProxyInstance(getClassLoader(clientBundle, classes), getInterfaces(classes), new ProxyHandler(this, dispatcher, listener));
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:52dc3b5
/////////////////////////////////////////////////////////////////////////
0:           throw new IllegalArgumentException(NLS.MESSAGES.getMessage("class.is.class", clazz.getName()));
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Proxy;
1: import java.util.Collection;
1: 
1: import org.apache.aries.proxy.ProxyManager;
1: import org.osgi.framework.Bundle;
1: 
1: public final class JdkProxyManager extends AbstractProxyManager implements ProxyManager
1: {
0:   public Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes, InvocationHandler handler) 
1:   {
0:     return Proxy.newProxyInstance(getClassLoader(clientBundle, classes), getInterfaces(classes), handler);
1:   }
1: 
0:   private static final Class<?>[] getInterfaces(Collection<Class<?>> classes)
1:   {
1:     for (Class<?> clazz : classes) {
1:         if (!!!clazz.isInterface()) {
0:           throw new IllegalArgumentException("ARGH " + clazz + " is not an interface and I can't deal with that");
1:         } 
1:     }
1:     return (Class[]) classes.toArray(new Class[classes.size()]);
1:   }
1: 
1:   @Override
1:   protected boolean isProxyClass(Class<?> clazz) 
1:   {
1:     return Proxy.isProxyClass(clazz);
1:   }
1: 
1:   @Override
1:   protected InvocationHandler getInvocationHandler(Object proxy) 
1:   {
1:     Class<?> clazz = proxy.getClass();
1:     if (isProxyClass(clazz)) {
1:       return Proxy.getInvocationHandler(proxy);
1:     }
1:     return null;
1:   }
1: }
============================================================================