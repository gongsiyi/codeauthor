1:8ea3042: /*
1:8ea3042:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ea3042:  * or more contributor license agreements.  See the NOTICE file
1:8ea3042:  * distributed with this work for additional information
1:8ea3042:  * regarding copyright ownership.  The ASF licenses this file
1:8ea3042:  * to you under the Apache License, Version 2.0 (the
1:8ea3042:  * "License"); you may not use this file except in compliance
1:8ea3042:  * with the License.  You may obtain a copy of the License at
1:8ea3042:  *
1:8ea3042:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ea3042:  *
1:8ea3042:  * Unless required by applicable law or agreed to in writing,
1:8ea3042:  * software distributed under the License is distributed on an
1:8ea3042:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8ea3042:  * KIND, either express or implied.  See the License for the
1:8ea3042:  * specific language governing permissions and limitations
1:8ea3042:  * under the License.
1:8ea3042:  */
1:8ea3042: package org.apache.aries.jpa.container.weaving.impl;
17:8ea3042: 
1:8ea3042: import java.lang.instrument.IllegalClassFormatException;
1:8ea3042: import java.security.ProtectionDomain;
1:8ea3042: import java.util.Collection;
1:8ea3042: import java.util.HashSet;
1:2cfdf52: 
1:8ea3042: import javax.persistence.spi.ClassTransformer;
1:2cfdf52: 
1:8ea3042: import org.osgi.framework.Bundle;
1:8ea3042: import org.osgi.framework.Constants;
1:8ea3042: import org.osgi.framework.ServiceReference;
1:8ea3042: import org.osgi.framework.wiring.BundleCapability;
1:8ea3042: import org.osgi.framework.wiring.BundleRevision;
1:8ea3042: import org.osgi.framework.wiring.BundleWiring;
1:2cfdf52: 
1:8ea3042: class WrappingTransformer implements ClassTransformer {
1:2cfdf52:     private final ClassTransformer delegate;
1:2cfdf52:     private final Collection<String> packageImportsToAdd = new HashSet<String>();
1:ec3ea65:     
1:ec3ea65:     public WrappingTransformer(ClassTransformer transformer) {
1:ec3ea65:         delegate = transformer;
1:ec3ea65:     }
1:2cfdf52: 
1:2cfdf52:     public WrappingTransformer(ClassTransformer delegate, ServiceReference<?> persistenceProvider) {
1:6514385:         validate(delegate, persistenceProvider);
1:2cfdf52:         this.delegate = delegate;
1:2cfdf52: 
1:2cfdf52:         Object packages = persistenceProvider.getProperty("org.apache.aries.jpa.container.weaving.packages");
1:2cfdf52:         if (packages instanceof String[]) {
1:2cfdf52:             for (String s : (String[])packages) {
1:2cfdf52:                 packageImportsToAdd.add(s);
1:2cfdf52:             }
1:2cfdf52:         } else {
1:2cfdf52:             Bundle provider = persistenceProvider.getBundle();
1:2cfdf52:             String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" + provider.getSymbolicName()
1:2cfdf52:                             + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE + "=" + provider.getVersion();
1:2cfdf52: 
1:2cfdf52:             BundleRevision br = provider.adapt(BundleWiring.class).getRevision();
1:2cfdf52:             for (BundleCapability bc : br.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE)) {
1:2cfdf52:                 packageImportsToAdd.add(bc.getAttributes().get(BundleRevision.PACKAGE_NAMESPACE) + suffix);
1:2cfdf52:             }
1:2cfdf52:         }
1:2cfdf52:     }
1:2411714: 
1:ec3ea65:     private static void validate(ClassTransformer delegate, ServiceReference<?> persistenceProvider) {
1:6514385:         if (delegate == null) {
1:6514385:             throw new NullPointerException("Transformer delegate may not be null");
1:6514385:         }
1:6514385:         if (persistenceProvider == null) {
1:6514385:             throw new NullPointerException("PersistenceProvider may not be null");
1:6514385:         }
1:6514385:     }
1:6514385: 
1:6514385:  
1:ec3ea65:     @Override
1:6514385:     public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer)
1:2cfdf52:         throws IllegalClassFormatException {
1:6514385:         return delegate.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);
1:2cfdf52:     }
1:8ea3042: 
1:2cfdf52:     public Collection<String> getPackagesToAdd() {
1:2cfdf52:         return packageImportsToAdd;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public int hashCode() {
1:2cfdf52:         return delegate.hashCode();
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public boolean equals(Object o) {
1:6514385:         if (o instanceof WrappingTransformer) {
1:2cfdf52:             return delegate == ((WrappingTransformer)o).delegate;
1:6514385:         }
1:2cfdf52:         return false;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public String toString() {
1:2cfdf52:         return "Transformer: " + delegate.toString() + " Packages to add: " + packageImportsToAdd;
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     
1:     public WrappingTransformer(ClassTransformer transformer) {
1:         delegate = transformer;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     private static void validate(ClassTransformer delegate, ServiceReference<?> persistenceProvider) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:6514385
/////////////////////////////////////////////////////////////////////////
1:         validate(delegate, persistenceProvider);
/////////////////////////////////////////////////////////////////////////
0:     private void validate(ClassTransformer delegate, ServiceReference<?> persistenceProvider) {
1:         if (delegate == null) {
1:             throw new NullPointerException("Transformer delegate may not be null");
1:         }
1:         if (persistenceProvider == null) {
1:             throw new NullPointerException("PersistenceProvider may not be null");
1:         }
1:     }
1: 
1:  
1:     public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer)
1:         return delegate.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);
/////////////////////////////////////////////////////////////////////////
1:         if (o instanceof WrappingTransformer) {
1:         }
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ClassTransformer delegate;
1:     private final Collection<String> packageImportsToAdd = new HashSet<String>();
1:     public WrappingTransformer(ClassTransformer delegate, ServiceReference<?> persistenceProvider) {
1: 
0:         if (delegate == null)
0:             throw new NullPointerException("Transformer delegate may not be null");
1: 
0:         if (persistenceProvider == null) {
0:             throw new NullPointerException("PersistenceProvider may not be null");
1:         }
1: 
1:         this.delegate = delegate;
1: 
1:         Object packages = persistenceProvider.getProperty("org.apache.aries.jpa.container.weaving.packages");
1: 
1:         if (packages instanceof String[]) {
1:             for (String s : (String[])packages) {
1:                 packageImportsToAdd.add(s);
1:             }
1:         } else {
1:             Bundle provider = persistenceProvider.getBundle();
1:             String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" + provider.getSymbolicName()
1:                             + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE + "=" + provider.getVersion();
1: 
1:             BundleRevision br = provider.adapt(BundleWiring.class).getRevision();
1:             for (BundleCapability bc : br.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE)) {
1:                 packageImportsToAdd.add(bc.getAttributes().get(BundleRevision.PACKAGE_NAMESPACE) + suffix);
1:             }
1:         }
0:     public WrappingTransformer(ClassTransformer transformer) {
0:         delegate = transformer;
0:     public byte[] transform(ClassLoader arg0, String arg1, Class<?> arg2, ProtectionDomain arg3, byte[] arg4)
1:         throws IllegalClassFormatException {
0:         return delegate.transform(arg0, arg1, arg2, arg3, arg4);
1:     }
1:     public Collection<String> getPackagesToAdd() {
1:         return packageImportsToAdd;
1:     }
1:     public int hashCode() {
1:         return delegate.hashCode();
1:     }
1: 
1:     public boolean equals(Object o) {
0:         if (o instanceof WrappingTransformer)
1:             return delegate == ((WrappingTransformer)o).delegate;
1: 
1:         return false;
1:     }
1: 
1:     public String toString() {
1:         return "Transformer: " + delegate.toString() + " Packages to add: " + packageImportsToAdd;
1:     }
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:2411714
/////////////////////////////////////////////////////////////////////////
0:         packageImportsToAdd.add(s);
0:       Bundle provider = persistenceProvider.getBundle();
0:       String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" +
0:       provider.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE 
0:       + "=" + provider.getVersion();
1: 
commit:8ea3042
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.weaving.impl;
1: 
1: import java.lang.instrument.IllegalClassFormatException;
1: import java.security.ProtectionDomain;
1: import java.util.Collection;
1: import java.util.HashSet;
1: 
1: import javax.persistence.spi.ClassTransformer;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.BundleWiring;
1: 
1: class WrappingTransformer implements ClassTransformer {
0:   private final ClassTransformer delegate;
0:   private final Collection<String> packageImportsToAdd = new HashSet<String>();
1:   
0:   public WrappingTransformer(ClassTransformer delegate,
0:       ServiceReference<?> persistenceProvider) {
1: 
0:     if(delegate == null) 
0:       throw new NullPointerException("Delegate transformer must not be null");
1:     
0:     if(persistenceProvider == null) {
0:       throw new NullPointerException("Persistence Provider must not be null");
0:     }
1:     
0:     this.delegate = delegate;
1:     
0:     Object packages = persistenceProvider.getProperty("org.apache.aries.jpa.container.weaving.packages");
1:     
0:     Bundle provider = persistenceProvider.getBundle();
0:     String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" +
0:     provider.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE 
0:     + "=" + provider.getVersion();
1:     
0:     if(packages instanceof String[]) {
0:       for(String s : (String[]) packages) {
0:         packageImportsToAdd.add(s + suffix);
0:       }
0:     } else {
0:       BundleRevision br = provider.adapt(BundleWiring.class).getRevision();
0:       for(BundleCapability bc : br.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE)) {
0:         packageImportsToAdd.add(bc.getAttributes().get(BundleRevision.PACKAGE_NAMESPACE) + suffix);
0:       }
0:     }
0:   }
1: 
0:   public WrappingTransformer(ClassTransformer transformer) {
0:     delegate = transformer;
0:   }
1: 
0:   public byte[] transform(ClassLoader arg0, String arg1, Class<?> arg2,
0:       ProtectionDomain arg3, byte[] arg4) throws IllegalClassFormatException {
0:     return delegate.transform(arg0, arg1, arg2, arg3, arg4);
0:   }
1:   
0:   public Collection<String> getPackagesToAdd() {
0:     return packageImportsToAdd;
0:   }
1:   
0:   public int hashCode() {
0:     return delegate.hashCode();
0:   }
1:   
0:   public boolean equals(Object o) {
0:     if(o instanceof WrappingTransformer)
0:       return delegate == ((WrappingTransformer) o).delegate;
1: 
0:     return false;
0:   }
1:   
0:   public String toString() {
0:     return "Transformer: " + delegate.toString() + " Packages to add: " + packageImportsToAdd;
0:   }
0: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:d0e2822
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jpa.container.impl.NLS;
/////////////////////////////////////////////////////////////////////////
0:       throw new NullPointerException(NLS.MESSAGES.getMessage("jpa.weaving.null.transformer"));
0:       throw new NullPointerException(NLS.MESSAGES.getMessage("jpa.weaving.null.provider"));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:01b1fa4
/////////////////////////////////////////////////////////////////////////
0:         if (s.contains(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE)) packageImportsToAdd.add(s);
0:         else packageImportsToAdd.add(s + suffix);
============================================================================