1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:7a834c3: package org.apache.aries.subsystem.util.felix;
1:6c69a67: 
1:6c69a67: import java.util.ArrayList;
1:6c69a67: import java.util.Collection;
1:6c69a67: import java.util.HashMap;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
1:6c69a67: import org.apache.felix.bundlerepository.Capability;
1:6c69a67: import org.apache.felix.bundlerepository.Property;
1:6c69a67: 
1:6c69a67: public class OsgiCapabilityAdapter implements Capability {
1:6c69a67: 	private final org.osgi.resource.Capability capability;
1:6c69a67: 	
1:6c69a67: 	public OsgiCapabilityAdapter(org.osgi.resource.Capability capability) {
1:6c69a67: 		if (capability == null)
1:6c69a67: 			throw new NullPointerException("Missing required parameter: capability");
1:6c69a67: 		this.capability = capability;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	@Override
1:6c69a67: 	public boolean equals(Object o) {
1:6c69a67: 		return capability.equals(o);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getName() {
1:6c69a67: 		return NamespaceTranslator.translate(capability.getNamespace());
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Property[] getProperties() {
1:6c69a67: 		Map<String, Object> attributes = capability.getAttributes();
1:6c69a67: 		Collection<Property> result = new ArrayList<Property>(attributes.size());
1:6c69a67: 		for (final Map.Entry<String, Object> entry : capability.getAttributes().entrySet()) {
1:6c69a67: 			if (entry.getKey().equals(capability.getNamespace())) {
1:6c69a67: 				result.add(new FelixProperty(getName(), entry.getValue()));
1:6c69a67: 				continue;
1:6c69a67: 			}
1:6c69a67: 			result.add(new FelixProperty(entry));
1:6c69a67: 		}
1:6c69a67: 		return result.toArray(new Property[result.size()]);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	@SuppressWarnings("rawtypes")
1:6c69a67: 	public Map getPropertiesAsMap() {
1:6c69a67: 		Map<String, Object> result = new HashMap<String, Object>(capability.getAttributes());
1:6c69a67: 		result.put(getName(), result.get(capability.getNamespace()));
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	@Override
1:6c69a67: 	public int hashCode() {
1:6c69a67: 		return capability.hashCode();
1:6c69a67: 	}
1:6c69a67: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.util.felix;
1: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
author:John Ross
-------------------------------------------------------------------------------
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Property;
1: 
1: public class OsgiCapabilityAdapter implements Capability {
1: 	private final org.osgi.resource.Capability capability;
1: 	
1: 	public OsgiCapabilityAdapter(org.osgi.resource.Capability capability) {
1: 		if (capability == null)
1: 			throw new NullPointerException("Missing required parameter: capability");
1: 		this.capability = capability;
1: 	}
1: 	
1: 	@Override
1: 	public boolean equals(Object o) {
1: 		return capability.equals(o);
1: 	}
1: 
1: 	public String getName() {
1: 		return NamespaceTranslator.translate(capability.getNamespace());
1: 	}
1: 
1: 	public Property[] getProperties() {
1: 		Map<String, Object> attributes = capability.getAttributes();
1: 		Collection<Property> result = new ArrayList<Property>(attributes.size());
1: 		for (final Map.Entry<String, Object> entry : capability.getAttributes().entrySet()) {
1: 			if (entry.getKey().equals(capability.getNamespace())) {
1: 				result.add(new FelixProperty(getName(), entry.getValue()));
1: 				continue;
1: 			}
1: 			result.add(new FelixProperty(entry));
1: 		}
1: 		return result.toArray(new Property[result.size()]);
1: 	}
1: 
1: 	@SuppressWarnings("rawtypes")
1: 	public Map getPropertiesAsMap() {
1: 		Map<String, Object> result = new HashMap<String, Object>(capability.getAttributes());
1: 		result.put(getName(), result.get(capability.getNamespace()));
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public int hashCode() {
1: 		return capability.hashCode();
1: 	}
1: }
============================================================================