1:a5079e5: /*
1:a5079e5:  * Licensed to the Apache Software Foundation (ASF) under one
1:a5079e5:  * or more contributor license agreements.  See the NOTICE file
1:a5079e5:  * distributed with this work for additional information
1:a5079e5:  * regarding copyright ownership.  The ASF licenses this file
1:a5079e5:  * to you under the Apache License, Version 2.0 (the
1:a5079e5:  * "License"); you may not use this file except in compliance
1:a5079e5:  * with the License.  You may obtain a copy of the License at
1:a5079e5:  *
1:a5079e5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a5079e5:  *
1:a5079e5:  * Unless required by applicable law or agreed to in writing,
1:a5079e5:  * software distributed under the License is distributed on an
1:a5079e5:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:a5079e5:  * KIND, either express or implied.  See the License for the
1:a5079e5:  * specific language governing permissions and limitations
1:a5079e5:  * under the License.
1:a5079e5:  */
1:a5079e5: package org.apache.aries.application.modelling;
1:a5079e5: 
1:a5079e5: 
1:a5079e5: /* Base interface for a model of a requirement, or need for something, such as a bundle, 
1:a5079e5:  * package or service. 
1:a5079e5:  */
1:a5079e5: public interface Consumer
1:a5079e5: {
1:a5079e5:   /**
1:a5079e5:    * Return the resource type
1:a5079e5:    * @return the resource type, such as BUNDLE, PACKAGE, SERVICE, OTHER
1:a5079e5:    */
1:a5079e5:   ResourceType getType();
1:a5079e5:   
1:a5079e5:   /**
1:a5079e5:    * This is not the same as the filter which you might get, say, by parsing a blueprint
1:a5079e5:    * reference. It is more specific - and usable at runtime.  
1:a5079e5:    * 
1:a5079e5:    * @return String filter matching every property required by this consumer
1:a5079e5:    */
1:a5079e5:   String getAttributeFilter();
1:a5079e5:   /**
1:a5079e5:    * Whether the resources consumed can be multiple.
1:a5079e5:    * @return true if multiple resources can be consumed.
1:a5079e5:    */
1:a5079e5:   boolean isMultiple();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Whether the resource consumed can be optional.
1:a5079e5:    * @return true if optional.
1:a5079e5:    */
1:a5079e5:   boolean isOptional();
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Whether the provider object satisfies the consume criteria.
1:a5079e5:    * @param capability The provider capability
1:a5079e5:    * @return true if the capability satisfies the consuming criteria.
1:a5079e5:    */
1:a5079e5:   boolean isSatisfied(Provider capability);
1:a5079e5:   
1:a5079e5: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:a5079e5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling;
1: 
1: 
1: /* Base interface for a model of a requirement, or need for something, such as a bundle, 
1:  * package or service. 
1:  */
1: public interface Consumer
1: {
1:   /**
1:    * Return the resource type
1:    * @return the resource type, such as BUNDLE, PACKAGE, SERVICE, OTHER
1:    */
1:   ResourceType getType();
1:   
1:   /**
1:    * This is not the same as the filter which you might get, say, by parsing a blueprint
1:    * reference. It is more specific - and usable at runtime.  
1:    * 
1:    * @return String filter matching every property required by this consumer
1:    */
1:   String getAttributeFilter();
1:   /**
1:    * Whether the resources consumed can be multiple.
1:    * @return true if multiple resources can be consumed.
1:    */
1:   boolean isMultiple();
1: 
1:   /**
1:    * Whether the resource consumed can be optional.
1:    * @return true if optional.
1:    */
1:   boolean isOptional();
1: 
1:   /**
1:    * Whether the provider object satisfies the consume criteria.
1:    * @param capability The provider capability
1:    * @return true if the capability satisfies the consuming criteria.
1:    */
1:   boolean isSatisfied(Provider capability);
1:   
1: }
============================================================================