1:4173b7f: /**
1:4173b7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:4173b7f:  * or more contributor license agreements.  See the NOTICE file
1:4173b7f:  * distributed with this work for additional information
1:4173b7f:  * regarding copyright ownership.  The ASF licenses this file
1:4173b7f:  * to you under the Apache License, Version 2.0 (the
1:4173b7f:  * "License"); you may not use this file except in compliance
1:4173b7f:  * with the License.  You may obtain a copy of the License at
1:4173b7f:  *
1:4173b7f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4173b7f:  *
1:4173b7f:  * Unless required by applicable law or agreed to in writing,
1:4173b7f:  * software distributed under the License is distributed on an
1:4173b7f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4173b7f:  * KIND, either express or implied.  See the License for the
1:4173b7f:  * specific language governing permissions and limitations
1:4173b7f:  * under the License.
1:4173b7f:  */
1:4173b7f: package org.apache.aries.samples.blog.web;
1:4173b7f: 
1:4173b7f: import java.io.IOException;
1:4173b7f: import java.io.PrintWriter;
1:4173b7f: import java.util.List;
1:4173b7f: 
1:4173b7f: import javax.servlet.RequestDispatcher;
1:4173b7f: import javax.servlet.ServletException;
1:4173b7f: import javax.servlet.http.HttpServlet;
1:4173b7f: import javax.servlet.http.HttpServletRequest;
1:4173b7f: import javax.servlet.http.HttpServletResponse;
1:4173b7f: 
1:4173b7f: import org.apache.aries.samples.blog.web.util.HTMLOutput;
1:4173b7f: 
1:4173b7f: public class AddCommentForm extends HttpServlet{
1:4173b7f: 	private static final long serialVersionUID = 4989805137759774598L;
1:4173b7f: 	public static final String ERROR_MESSAGES_ID = "commentErrorMessages";
1:4173b7f: 	public static final String ID = "comment";
1:4173b7f: 
1:4173b7f: 
1:4173b7f: 	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
1:4173b7f: 			throws ServletException, IOException {
1:4173b7f: 		PrintWriter out = resp.getWriter();
1:4173b7f: 		
1:4173b7f: 		String postId = checkPostId(req.getParameter("postId"));
1:4173b7f: 
1:4173b7f: 		// if we have a valid postId, display the add comment page
1:4173b7f: 		if (postId != null) {
1:4173b7f: 			HTMLOutput.writeHTMLHeaderPartOne(out, "Add Comment");
1:4173b7f: 			HTMLOutput.writeDojoUses(out, "dojo.parser", "dijit.dijit",
1:4173b7f: 					"dijit.Editor", "dijit.form.TextBox");
1:4173b7f: 
1:4173b7f: 			out.println("<script type=\"text/javascript\">");
1:4173b7f: 			out.println("function storeCommentContent() {");
1:4173b7f: 			out.println("var textBox = dijit.byId('textArea');");
1:4173b7f: 			out.println("var textArea = dojo.byId('text');");
1:4173b7f: 			out.println("textArea.value = textBox.getValue();");
1:4173b7f: 			out.println("}");
1:4173b7f: 			out.println("</script>");
1:4173b7f: 
1:4173b7f: 			HTMLOutput.writeHTMLHeaderPartTwo(out);
1:4173b7f: 			
1:4173b7f: 			List<String> errors = null;
1:4173b7f: 			if (req.getSession() != null)
1:4173b7f: 				errors = (List<String>) req.getSession().getAttribute(
1:4173b7f: 						ERROR_MESSAGES_ID);
1:4173b7f: 
1:4173b7f: 			if (errors != null) {
1:4173b7f: 				out.println("\t\t\t<div id=\"errorMessages\">");
1:4173b7f: 				for (String msg : errors) {
1:4173b7f: 					out.println("\t\t\t\t<div class=\"errorMessage\">" + msg
1:4173b7f: 							+ "</div>");
1:4173b7f: 				}
1:4173b7f: 
1:4173b7f: 				out.println("\t\t\t</div>");
1:4173b7f: 				req.getSession().removeAttribute("commentErrorMessages");
1:4173b7f: 			}
1:4173b7f: 
1:4173b7f: 			out
1:4173b7f: 					.println("<form name=\"createComment\" method=\"get\" action=\"AddComment\">");
1:4173b7f: 			out
1:4173b7f: 					.println("<div class=\"textEntry\"><textarea dojoType=\"dijit.Editor\" id=\"textArea\" name=\"textArea\"></textarea></div>");
1:4173b7f: 			out
1:4173b7f: 					.println("<div class=\"textEntry\"><label>Email <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"email\" /></label></div>");
1:4173b7f: 			out
1:4173b7f: 					.println("<input type=\"hidden\" name=\"text\" id=\"text\" value=\"\"/>");
1:4173b7f: 			out.print("<input type=\"hidden\" name=\"postId\" value=\"");
1:4173b7f: 			out.print(postId);
1:4173b7f: 			out.println("\"/>");
1:4173b7f: 			out
1:4173b7f: 					.println("<input class=\"submit\" type=\"submit\" value=\"Submit\" name=\"Submit\" onclick=\"storeCommentContent()\"/>");
1:4173b7f: 			out.println("</form>");
1:4173b7f: 
1:4173b7f: 			HTMLOutput.writeHTMLFooter(out);
1:4173b7f: 			
1:4173b7f: 		} else {
1:4173b7f: 			// otherwise show the blog
1:4173b7f: 			RequestDispatcher dispatch = getServletContext()
1:4173b7f: 					.getRequestDispatcher("ViewBlog");
1:4173b7f: 			dispatch.forward(req, resp);
1:4173b7f: 		}
1:4173b7f: 	}
1:4173b7f: 
1:4173b7f: 	private String checkPostId(String parameter) {
1:4173b7f: 		if (parameter != null && parameter.matches("^\\d*$"))
1:4173b7f: 			return parameter;
1:4173b7f: 		return null;
1:4173b7f: 	}
1:4173b7f: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:14fd487
commit:4173b7f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.web;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.List;
1: 
1: import javax.servlet.RequestDispatcher;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
1: import org.apache.aries.samples.blog.web.util.HTMLOutput;
1: 
1: public class AddCommentForm extends HttpServlet{
1: 	private static final long serialVersionUID = 4989805137759774598L;
1: 	public static final String ERROR_MESSAGES_ID = "commentErrorMessages";
1: 	public static final String ID = "comment";
1: 
1: 
1: 	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
1: 			throws ServletException, IOException {
1: 		PrintWriter out = resp.getWriter();
1: 		
1: 		String postId = checkPostId(req.getParameter("postId"));
1: 
1: 		// if we have a valid postId, display the add comment page
1: 		if (postId != null) {
1: 			HTMLOutput.writeHTMLHeaderPartOne(out, "Add Comment");
1: 			HTMLOutput.writeDojoUses(out, "dojo.parser", "dijit.dijit",
1: 					"dijit.Editor", "dijit.form.TextBox");
1: 
1: 			out.println("<script type=\"text/javascript\">");
1: 			out.println("function storeCommentContent() {");
1: 			out.println("var textBox = dijit.byId('textArea');");
1: 			out.println("var textArea = dojo.byId('text');");
1: 			out.println("textArea.value = textBox.getValue();");
1: 			out.println("}");
1: 			out.println("</script>");
1: 
1: 			HTMLOutput.writeHTMLHeaderPartTwo(out);
1: 			
1: 			List<String> errors = null;
1: 			if (req.getSession() != null)
1: 				errors = (List<String>) req.getSession().getAttribute(
1: 						ERROR_MESSAGES_ID);
1: 
1: 			if (errors != null) {
1: 				out.println("\t\t\t<div id=\"errorMessages\">");
1: 				for (String msg : errors) {
1: 					out.println("\t\t\t\t<div class=\"errorMessage\">" + msg
1: 							+ "</div>");
1: 				}
1: 
1: 				out.println("\t\t\t</div>");
1: 				req.getSession().removeAttribute("commentErrorMessages");
1: 			}
1: 
1: 			out
1: 					.println("<form name=\"createComment\" method=\"get\" action=\"AddComment\">");
1: 			out
1: 					.println("<div class=\"textEntry\"><textarea dojoType=\"dijit.Editor\" id=\"textArea\" name=\"textArea\"></textarea></div>");
1: 			out
1: 					.println("<div class=\"textEntry\"><label>Email <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"email\" /></label></div>");
1: 			out
1: 					.println("<input type=\"hidden\" name=\"text\" id=\"text\" value=\"\"/>");
1: 			out.print("<input type=\"hidden\" name=\"postId\" value=\"");
1: 			out.print(postId);
1: 			out.println("\"/>");
1: 			out
1: 					.println("<input class=\"submit\" type=\"submit\" value=\"Submit\" name=\"Submit\" onclick=\"storeCommentContent()\"/>");
1: 			out.println("</form>");
1: 
1: 			HTMLOutput.writeHTMLFooter(out);
1: 			
1: 		} else {
1: 			// otherwise show the blog
1: 			RequestDispatcher dispatch = getServletContext()
1: 					.getRequestDispatcher("ViewBlog");
1: 			dispatch.forward(req, resp);
1: 		}
1: 	}
1: 
1: 	private String checkPostId(String parameter) {
1: 		if (parameter != null && parameter.matches("^\\d*$"))
1: 			return parameter;
1: 		return null;
1: 	}
1: }
============================================================================