1:1cfd24a: /*
1:1cfd24a:  * Licensed to the Apache Software Foundation (ASF) under one
1:1cfd24a:  * or more contributor license agreements.  See the NOTICE file
1:1cfd24a:  * distributed with this work for additional information
1:1cfd24a:  * regarding copyright ownership.  The ASF licenses this file
1:1cfd24a:  * to you under the Apache License, Version 2.0 (the
1:1cfd24a:  * "License"); you may not use this file except in compliance
1:1cfd24a:  * with the License.  You may obtain a copy of the License at
1:1cfd24a:  *
1:1cfd24a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1cfd24a:  *
1:1cfd24a:  * Unless required by applicable law or agreed to in writing,
1:1cfd24a:  * software distributed under the License is distributed on an
1:1cfd24a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1cfd24a:  * KIND, either express or implied.  See the License for the
1:1cfd24a:  * specific language governing permissions and limitations
1:1cfd24a:  * under the License.
1:1cfd24a:  */
1:1cfd24a: package org.apache.aries.blueprint.di;
1:1cfd24a: 
1:1cfd24a: import java.util.List;
1:1cfd24a: import java.util.concurrent.atomic.AtomicBoolean;
1:1cfd24a: 
1:09a7647: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:1cfd24a: import org.apache.aries.blueprint.container.SatisfiableRecipe;
1:1cfd24a: import org.apache.aries.blueprint.ext.DependentComponentFactoryMetadata;
1:1cfd24a: 
1:1cfd24a: /**
1:1cfd24a:  * Extends ComponentFactoryRecipe to support the dependency management (SatisfiableRecipe) for custom
1:1cfd24a:  * bean managers (DependentComponentFactoryMetadata instances in this case).
1:1cfd24a:  */
1:1cfd24a: public class DependentComponentFactoryRecipe extends ComponentFactoryRecipe<DependentComponentFactoryMetadata> 
1:1cfd24a:     implements SatisfiableRecipe, DependentComponentFactoryMetadata.SatisfactionCallback {
1:1cfd24a: 
1:1cfd24a:     private SatisfactionListener listener;
1:1cfd24a:     private AtomicBoolean started = new AtomicBoolean(false);
1:1cfd24a:     
1:1cfd24a:     public DependentComponentFactoryRecipe(
1:1cfd24a:             String name, DependentComponentFactoryMetadata metadata, 
1:1cfd24a:             ExtendedBlueprintContainer container, List<Recipe> dependencies) {
1:1cfd24a:         super(name, metadata, container, dependencies);
1:1cfd24a:     }
1:1cfd24a: 
1:1cfd24a:     public String getOsgiFilter() {
1:1cfd24a:         return getMetadata().getDependencyDescriptor();
1:1cfd24a:     }
1:1cfd24a: 
1:1cfd24a:     public boolean isSatisfied() {
1:1cfd24a:         return getMetadata().isSatisfied();
1:1cfd24a:     }
1:1cfd24a: 
1:1cfd24a:     public void start(SatisfactionListener listener) {
1:1cfd24a:         if (started.compareAndSet(false, true)) {
1:1cfd24a:             this.listener = listener;
1:1cfd24a:             getMetadata().startTracking(this);
1:1cfd24a:         }
1:1cfd24a:     }
1:1cfd24a: 
1:1cfd24a:     public void stop() {
1:1cfd24a:         if (started.compareAndSet(true, false)) {
1:1cfd24a:             listener = null;
1:1cfd24a:             getMetadata().stopTracking();
1:1cfd24a:         }
1:1cfd24a:     }
1:1cfd24a: 
1:1cfd24a:     public void notifyChanged() {
1:1cfd24a:         if (listener != null) {
1:1cfd24a:             listener.notifySatisfaction(this);
1:1cfd24a:         }
1:1cfd24a:     }
1:1cfd24a: 
1:1cfd24a: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
commit:1cfd24a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.di;
1: 
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
1: import org.apache.aries.blueprint.container.SatisfiableRecipe;
1: import org.apache.aries.blueprint.ext.DependentComponentFactoryMetadata;
1: 
1: /**
1:  * Extends ComponentFactoryRecipe to support the dependency management (SatisfiableRecipe) for custom
1:  * bean managers (DependentComponentFactoryMetadata instances in this case).
1:  */
1: public class DependentComponentFactoryRecipe extends ComponentFactoryRecipe<DependentComponentFactoryMetadata> 
1:     implements SatisfiableRecipe, DependentComponentFactoryMetadata.SatisfactionCallback {
1: 
1:     private SatisfactionListener listener;
1:     private AtomicBoolean started = new AtomicBoolean(false);
1:     
1:     public DependentComponentFactoryRecipe(
1:             String name, DependentComponentFactoryMetadata metadata, 
1:             ExtendedBlueprintContainer container, List<Recipe> dependencies) {
1:         super(name, metadata, container, dependencies);
1:     }
1: 
1:     public String getOsgiFilter() {
1:         return getMetadata().getDependencyDescriptor();
1:     }
1: 
1:     public boolean isSatisfied() {
1:         return getMetadata().isSatisfied();
1:     }
1: 
1:     public void start(SatisfactionListener listener) {
1:         if (started.compareAndSet(false, true)) {
1:             this.listener = listener;
1:             getMetadata().startTracking(this);
1:         }
1:     }
1: 
1:     public void stop() {
1:         if (started.compareAndSet(true, false)) {
1:             listener = null;
1:             getMetadata().stopTracking();
1:         }
1:     }
1: 
1:     public void notifyChanged() {
1:         if (listener != null) {
1:             listener.notifySatisfaction(this);
1:         }
1:     }
1: 
1: }
============================================================================