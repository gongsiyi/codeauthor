1:fdf3952: /*
1:0356de4:  * Copyright (c) OSGi Alliance (2009, 2012). All Rights Reserved.
39:32a99b9:  *
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
1:32a99b9:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:32a99b9:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
49:32a99b9:  */
3:fdf3952: 
1:fdf3952: package org.osgi.jmx.service.useradmin;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeType;
1:fdf3952: import javax.management.openmbean.SimpleType;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.Item;
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: 
50:32a99b9: /**
1:fdf3952:  * This MBean provides the management interface to the OSGi User Manager Service
1:32a99b9:  *
1:540df86:  * @version $Id: 08b1bb0c33e5266fe66917197cf52c8f157a0843 $
1:fdf3952:  * @ThreadSafe
1:32a99b9:  */
1:fdf3952: public interface UserAdminMBean {
1:540df86: 	/**
1:540df86: 	 * User Admin MBean object name.
1:540df86: 	 */
1:540df86: 	String			OBJECTNAME				= JmxConstants.OSGI_COMPENDIUM + ":service=useradmin,version=1.1";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The key NAME, used in {@link #NAME_ITEM}.
1:540df86: 	 */
1:540df86: 	String			NAME					= "Name";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The item for the user name for an authorization object. The key is
1:540df86: 	 * {@link #NAME} and the type is {@link SimpleType#STRING}.
1:540df86: 	 */
1:540df86: 	Item			NAME_ITEM				= new Item(NAME, "The user name for this authorization object", SimpleType.STRING);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The key ROLES, used in {@link #ROLES_ITEM}.
1:540df86: 	 */
1:540df86: 	String			ROLES					= "Roles";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The item containing the roles for this authorization object. The key is
1:540df86: 	 * {@link #ROLES}. and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
1:540df86: 	 */
1:540df86: 	Item			ROLES_ITEM				= new Item(ROLES, "The names of the roles encapsulated by this auth object", JmxConstants.STRING_ARRAY_TYPE);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The Composite Type for an Authorization object. It consists of the
1:540df86: 	 * {@link #NAME_ITEM} and {@link #ROLES_ITEM} items.
1:540df86: 	 */
1:540df86: 	CompositeType	AUTORIZATION_TYPE		= Item.compositeType("AUTHORIZATION", "An authorization object defines which roles has a user got", NAME_ITEM, ROLES_ITEM);
1:540df86: 	/**
1:540df86: 	 * The Role TYPE key, used in {@link #TYPE_ITEM}.
1:540df86: 	 */
1:540df86: 	String			TYPE					= "Type";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The item containing the type of the roles encapsulated by this
1:540df86: 	 * authorization object. The key is {@link #TYPE} and the type is
1:540df86: 	 * {@link SimpleType#INTEGER}.
1:540df86: 	 */
1:540df86: 	Item			TYPE_ITEM				= new Item(TYPE, "An integer representing type of the role: {0=Role,1=user,2=group}", SimpleType.INTEGER);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The PROPERTIES key, used in {@link #PROPERTIES_ITEM}.
1:540df86: 	 */
1:540df86: 	String			PROPERTIES				= "Properties";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The item containing the properties of a Role. The key is
1:540df86: 	 * {@link #PROPERTIES} and the type is {@link JmxConstants#PROPERTIES_TYPE}.
1:540df86: 	 */
1:540df86: 	Item			PROPERTIES_ITEM			= new Item(PROPERTIES, "A properties as defined by org.osgi.service.useradmin.Role", JmxConstants.PROPERTIES_TYPE);
1:540df86: 	/**
1:540df86: 	 * The Composite Type for a Role. It contains the following items:
1:540df86: 	 * <ul>
1:540df86: 	 * <li>{@link #NAME}</li>
1:540df86: 	 * <li>{@link #TYPE}</li>
1:540df86: 	 * <li>{@link #PROPERTIES}</li>
1:540df86: 	 * </ul>
1:540df86: 	 *
1:540df86: 	 */
1:540df86: 	CompositeType	ROLE_TYPE				= Item.compositeType("ROLE", "Mapping of org.osgi.service.useradmin.Role for remote management purposes. User and Group extend Role", NAME_ITEM, TYPE_ITEM);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The CREDENTIALS key, used in {@link #CREDENTIALS_ITEM}.
1:540df86: 	 */
1:540df86: 	String			CREDENTIALS				= "Credentials";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The item containing the credentials of a user. The key is
1:540df86: 	 * {@link #CREDENTIALS} and the type is {@link JmxConstants#PROPERTIES_TYPE}
1:540df86: 	 * .
1:540df86: 	 */
1:540df86: 	Item			CREDENTIALS_ITEM		= new Item(CREDENTIALS, "The credentials for this user", JmxConstants.PROPERTIES_TYPE);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * A Composite Type for a User. A User contains its Role description and
1:540df86: 	 * adds the credentials. It extends {@link #ROLE_TYPE} and adds
1:540df86: 	 * {@link #CREDENTIALS_ITEM}.
1:540df86: 	 *
1:540df86: 	 * This type extends the {@link #ROLE_TYPE}. It adds:
1:540df86: 	 * <ul>
1:540df86: 	 * <li>{@link #CREDENTIALS}</li>
1:540df86: 	 * </ul>
1:540df86: 	 */
1:540df86: 	CompositeType	USER_TYPE				= Item.extend(ROLE_TYPE, "USER", "Mapping of org.osgi.service.useradmin.User for remote management purposes. User extends Role");
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The MEMBERS key, used in {@link #MEMBERS_ITEM}.
1:540df86: 	 */
1:540df86: 	String			MEMBERS					= "Members";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The item containing the members of a group. The key is {@link #MEMBERS}
1:540df86: 	 * and the type is {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in
1:540df86: 	 * {@link #GROUP_TYPE}.
1:540df86: 	 */
1:540df86: 	Item			MEMBERS_ITEM			= new Item(MEMBERS, "The members of this group", JmxConstants.STRING_ARRAY_TYPE);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The REQUIRED_MEMBERS key, used in {@link #REQUIRED_MEMBERS_ITEM}.
1:540df86: 	 */
1:540df86: 	String			REQUIRED_MEMBERS		= "RequiredMembers";
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The item containing the required members of a group. The key is
1:540df86: 	 * {@link #REQUIRED_MEMBERS} and the type is
1:540df86: 	 * {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in {@link #GROUP_TYPE}
1:540df86: 	 * .
1:540df86: 	 */
1:540df86: 	Item			REQUIRED_MEMBERS_ITEM	= new Item(REQUIRED_MEMBERS, "The required members of this group", JmxConstants.STRING_ARRAY_TYPE);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * The Composite Type for a Group. It extends {@link #USER_TYPE} and adds
1:540df86: 	 * {@link #MEMBERS_ITEM}, and {@link #REQUIRED_MEMBERS_ITEM}.
1:540df86: 	 *
1:540df86: 	 * This type extends the {@link #USER_TYPE}. It adds:
1:540df86: 	 * <ul>
1:540df86: 	 * <li>{@link #MEMBERS}</li>
1:540df86: 	 * <li>{@link #REQUIRED_MEMBERS}</li>
1:540df86: 	 * </ul>
1:540df86: 	 * If there are no members or required members an empty array is returned in
1:540df86: 	 * the respective items.
1:540df86: 	 */
1:540df86: 	CompositeType	GROUP_TYPE				= Item.extend(USER_TYPE,
1:540df86: 													"GROUP",
1:540df86: 													"Mapping of org.osgi.service.useradmin.Group for remote management purposes. Group extends User which in turn extends Role",
1:540df86: 													MEMBERS_ITEM,
1:540df86: 													REQUIRED_MEMBERS_ITEM);
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Add credentials to a user, associated with the supplied key
1:540df86: 	 *
1:540df86: 	 * @param key The key of the credential to add
1:540df86: 	 * @param value The value of the credential to add
1:540df86: 	 * @param username The name of the user that gets the credential.
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the username is not a User
1:540df86: 	 */
1:540df86: 	void addCredential(String key, byte[] value, String username) throws IOException;
1:0356de4: 
1:540df86: 	/**
1:540df86: 	 * Add credentials to a user, associated with the supplied key
1:540df86: 	 *
1:540df86: 	 * @param key The key of the credential to add
1:540df86: 	 * @param value The value of the credential to add
1:540df86: 	 * @param username The name of the user that gets the credential.
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the username is not a User
1:540df86: 	 */
1:540df86: 	void addCredentialString(String key, String value, String username) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Add a member to the group.
1:540df86: 	 *
1:540df86: 	 * @param groupname The group name that receives the {@code rolename} as
1:540df86: 	 *        member.
1:540df86: 	 * @param rolename The {@code rolename} (User or Group) that must be added.
1:540df86: 	 * @return {@code true} if the role was added to the group
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if an invalid group name or role name is
1:540df86: 	 *         specified
1:540df86: 	 *
1:540df86: 	 */
1:540df86: 	boolean addMember(String groupname, String rolename) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Add or update a property on a role
1:540df86: 	 *
1:540df86: 	 * @param key The key of the property to add
1:540df86: 	 * @param value The value of the property to add ({@code String})
1:540df86: 	 * @param rolename The role name
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if an invalid role name is specified
1:540df86: 	 */
1:540df86: 	void addPropertyString(String key, String value, String rolename) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Add or update a property on a role.
1:540df86: 	 *
1:540df86: 	 * @param key The added property key
1:540df86: 	 * @param value The added byte[] property value
1:540df86: 	 * @param rolename The role name that receives the property
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if an invalid role name is specified
1:540df86: 	 */
1:540df86: 	void addProperty(String key, byte[] value, String rolename) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Add a required member to the group
1:540df86: 	 *
1:540df86: 	 * @param groupname The group name that is addded
1:540df86: 	 * @param rolename The role that
1:540df86: 	 * @return true if the role was added to the group
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if an invalid group name or role name is
1:540df86: 	 *         specified
1:540df86: 	 */
1:540df86: 	boolean addRequiredMember(String groupname, String rolename) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Create a User
1:540df86: 	 *
1:540df86: 	 * @param name Name of the user to create
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	void createUser(String name) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Create a Group
1:540df86: 	 *
1:540df86: 	 * @param name Name of the group to create
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	void createGroup(String name) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * This method was specified in error and must not be used.
1:540df86: 	 *
1:540df86: 	 * @param name Ignored.
1:540df86: 	 * @throws IOException This method will throw an exception if called.
1:540df86: 	 * @deprecated This method was specified in error. It does not function and
1:540df86: 	 *             must not be used. Use either {@link #createUser(String)} or
1:540df86: 	 *             {@link #createGroup(String)}.
1:540df86: 	 */
1:540df86: 	void createRole(String name) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the authorization for the user name.
1:540df86: 	 *
1:540df86: 	 * The Composite Data is typed by {@link #AUTORIZATION_TYPE}.
1:540df86: 	 *
1:540df86: 	 * @param user The user name
1:540df86: 	 * @return the Authorization typed by {@link #AUTORIZATION_TYPE}.
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the user name is not a User
1:540df86: 	 */
1:540df86: 	CompositeData getAuthorization(String user) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the credentials associated with a user.
1:540df86: 	 *
1:540df86: 	 * The returned Tabular Data is typed by
1:540df86: 	 * {@link JmxConstants#PROPERTIES_TYPE}.
1:540df86: 	 *
1:540df86: 	 * @param username The user name
1:540df86: 	 * @return the credentials associated with the user, see
1:540df86: 	 *         {@link JmxConstants#PROPERTIES_TYPE}
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the user name is not a User
1:540df86: 	 */
1:540df86: 	TabularData getCredentials(String username) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the Group associated with the group name.
1:540df86: 	 *
1:540df86: 	 * The returned Composite Data is typed by {@link #GROUP_TYPE}
1:540df86: 	 *
1:540df86: 	 * @param groupname The group name
1:540df86: 	 * @return the Group, see {@link #GROUP_TYPE}
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the group name is not a Group
1:540df86: 	 */
1:540df86: 	CompositeData getGroup(String groupname) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of group names
1:540df86: 	 *
1:540df86: 	 * @return The list of group names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	String[] listGroups() throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of group names
1:540df86: 	 *
1:540df86: 	 * @param filter The filter to apply
1:540df86: 	 * @return The list of group names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	String[] getGroups(String filter) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of implied roles for a user
1:540df86: 	 *
1:540df86: 	 * @param username The name of the user that has the implied roles
1:540df86: 	 * @return The list of role names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the username is not a User
1:540df86: 	 */
1:540df86: 	String[] getImpliedRoles(String username) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the the user names which are members of the group
1:540df86: 	 *
1:540df86: 	 * @param groupname The name of the group to get the members from
1:540df86: 	 * @return The list of user names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the groupname is not a Group
1:540df86: 	 */
1:540df86: 	String[] getMembers(String groupname) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the properties associated with a role.
1:540df86: 	 *
1:540df86: 	 * The returned Tabular Data is typed by
1:540df86: 	 * {@link JmxConstants#PROPERTIES_TYPE}.
1:540df86: 	 *
1:540df86: 	 * @param rolename The name of the role to get properties from
1:540df86: 	 * @return the properties associated with the role, see
1:540df86: 	 *         {@link JmxConstants#PROPERTIES_TYPE}
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the rolename is not a role
1:540df86: 	 */
1:540df86: 	TabularData getProperties(String rolename) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of user names which are required members of this group
1:540df86: 	 *
1:540df86: 	 * @param groupname The name of the group to get the required members from
1:540df86: 	 * @return The list of user names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the group name is not a Group
1:540df86: 	 */
1:540df86: 	String[] getRequiredMembers(String groupname) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the role associated with a name.
1:540df86: 	 *
1:540df86: 	 * The returned Composite Data is typed by {@link #ROLE_TYPE}.
1:540df86: 	 *
1:540df86: 	 * @param name The name of the role to get the data from
1:540df86: 	 * @return the Role, see {@link #ROLE_TYPE}
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the name is not a role
1:540df86: 	 */
1:540df86: 	CompositeData getRole(String name) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of role names in the User Admin database
1:540df86: 	 *
1:540df86: 	 * @return The list of role names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	String[] listRoles() throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of role names which match the supplied filter
1:540df86: 	 *
1:540df86: 	 * @param filter The string representation of the
1:540df86: 	 *        {@code org.osgi.framework.Filter} that is used to filter the roles
1:540df86: 	 *        by applying to the properties, if {@code null} all roles are
1:540df86: 	 *        returned.
1:540df86: 	 *
1:540df86: 	 * @return The list the role names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	String[] getRoles(String filter) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the User associated with the user name.
1:540df86: 	 *
1:540df86: 	 * The returned Composite Data is typed by {@link #USER_TYPE}.
1:540df86: 	 *
1:540df86: 	 * @param username The name of the requested user
1:540df86: 	 * @return The User, see {@link #USER_TYPE}
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the username is not a User
1:540df86: 	 */
1:540df86: 	CompositeData getUser(String username) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the user name with the given property key-value pair from the User
1:540df86: 	 * Admin service database.
1:540df86: 	 *
1:540df86: 	 * @param key The key to compare
1:540df86: 	 * @param value The value to compare
1:540df86: 	 * @return The User
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	String getUserWithProperty(String key, String value) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of user names in the User Admin database
1:540df86: 	 *
1:540df86: 	 * @return The list of user names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	String[] listUsers() throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Answer the list of user names in the User Admin database
1:540df86: 	 *
1:540df86: 	 * @param filter The filter to apply
1:540df86: 	 * @return The list of user names
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 */
1:540df86: 	String[] getUsers(String filter) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Remove the credential associated with the given user
1:540df86: 	 *
1:540df86: 	 * @param key The key of the credential to remove
1:540df86: 	 * @param username The name of the user for which the credential must be
1:540df86: 	 *        removed
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the username is not a User
1:540df86: 	 */
1:540df86: 	void removeCredential(String key, String username) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Remove a role from the group
1:540df86: 	 *
1:540df86: 	 * @param groupname The group name
1:540df86: 	 * @param rolename
1:540df86: 	 * @return true if the role was removed from the group
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the groupname is not a Group
1:540df86: 	 */
1:540df86: 	boolean removeMember(String groupname, String rolename) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Remove a property from a role
1:540df86: 	 *
1:540df86: 	 * @param key
1:540df86: 	 * @param rolename
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the rolename is not a role
1:540df86: 	 */
1:540df86: 	void removeProperty(String key, String rolename) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Remove the Role associated with the name
1:540df86: 	 *
1:540df86: 	 * @param name
1:540df86: 	 * @return true if the remove succeeded
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the name is not a role
1:540df86: 	 */
1:540df86: 	boolean removeRole(String name) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Remove the Group associated with the name
1:540df86: 	 *
1:540df86: 	 * @param name
1:540df86: 	 * @return true if the remove succeeded
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the name is not a Group
1:540df86: 	 */
1:540df86: 	boolean removeGroup(String name) throws IOException;
1:fdf3952: 
1:540df86: 	/**
1:540df86: 	 * Remove the User associated with the name
1:540df86: 	 *
1:540df86: 	 * @param name
1:540df86: 	 * @return true if the remove succeeded
1:540df86: 	 * @throws IOException if the operation fails
1:540df86: 	 * @throws IllegalArgumentException if the name is not a User
1:540df86: 	 */
1:540df86: 	boolean removeUser(String name) throws IOException;
1:0356de4: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:540df86
/////////////////////////////////////////////////////////////////////////
1:  * @version $Id: 08b1bb0c33e5266fe66917197cf52c8f157a0843 $
1: 	/**
1: 	 * User Admin MBean object name.
1: 	 */
1: 	String			OBJECTNAME				= JmxConstants.OSGI_COMPENDIUM + ":service=useradmin,version=1.1";
1: 	/**
1: 	 * The key NAME, used in {@link #NAME_ITEM}.
1: 	 */
1: 	String			NAME					= "Name";
1: 	/**
1: 	 * The item for the user name for an authorization object. The key is
1: 	 * {@link #NAME} and the type is {@link SimpleType#STRING}.
1: 	 */
1: 	Item			NAME_ITEM				= new Item(NAME, "The user name for this authorization object", SimpleType.STRING);
1: 	/**
1: 	 * The key ROLES, used in {@link #ROLES_ITEM}.
1: 	 */
1: 	String			ROLES					= "Roles";
1: 	/**
1: 	 * The item containing the roles for this authorization object. The key is
1: 	 * {@link #ROLES}. and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
1: 	 */
1: 	Item			ROLES_ITEM				= new Item(ROLES, "The names of the roles encapsulated by this auth object", JmxConstants.STRING_ARRAY_TYPE);
1: 	/**
1: 	 * The Composite Type for an Authorization object. It consists of the
1: 	 * {@link #NAME_ITEM} and {@link #ROLES_ITEM} items.
1: 	 */
1: 	CompositeType	AUTORIZATION_TYPE		= Item.compositeType("AUTHORIZATION", "An authorization object defines which roles has a user got", NAME_ITEM, ROLES_ITEM);
1: 	/**
1: 	 * The Role TYPE key, used in {@link #TYPE_ITEM}.
1: 	 */
1: 	String			TYPE					= "Type";
1: 	/**
1: 	 * The item containing the type of the roles encapsulated by this
1: 	 * authorization object. The key is {@link #TYPE} and the type is
1: 	 * {@link SimpleType#INTEGER}.
1: 	 */
1: 	Item			TYPE_ITEM				= new Item(TYPE, "An integer representing type of the role: {0=Role,1=user,2=group}", SimpleType.INTEGER);
1: 	/**
1: 	 * The PROPERTIES key, used in {@link #PROPERTIES_ITEM}.
1: 	 */
1: 	String			PROPERTIES				= "Properties";
1: 	/**
1: 	 * The item containing the properties of a Role. The key is
1: 	 * {@link #PROPERTIES} and the type is {@link JmxConstants#PROPERTIES_TYPE}.
1: 	 */
1: 	Item			PROPERTIES_ITEM			= new Item(PROPERTIES, "A properties as defined by org.osgi.service.useradmin.Role", JmxConstants.PROPERTIES_TYPE);
1: 	/**
1: 	 * The Composite Type for a Role. It contains the following items:
1: 	 * <ul>
1: 	 * <li>{@link #NAME}</li>
1: 	 * <li>{@link #TYPE}</li>
1: 	 * <li>{@link #PROPERTIES}</li>
1: 	 * </ul>
1: 	 *
1: 	 */
1: 	CompositeType	ROLE_TYPE				= Item.compositeType("ROLE", "Mapping of org.osgi.service.useradmin.Role for remote management purposes. User and Group extend Role", NAME_ITEM, TYPE_ITEM);
1: 	/**
1: 	 * The CREDENTIALS key, used in {@link #CREDENTIALS_ITEM}.
1: 	 */
1: 	String			CREDENTIALS				= "Credentials";
1: 	/**
1: 	 * The item containing the credentials of a user. The key is
1: 	 * {@link #CREDENTIALS} and the type is {@link JmxConstants#PROPERTIES_TYPE}
1: 	 * .
1: 	 */
1: 	Item			CREDENTIALS_ITEM		= new Item(CREDENTIALS, "The credentials for this user", JmxConstants.PROPERTIES_TYPE);
1: 	/**
1: 	 * A Composite Type for a User. A User contains its Role description and
1: 	 * adds the credentials. It extends {@link #ROLE_TYPE} and adds
1: 	 * {@link #CREDENTIALS_ITEM}.
1: 	 *
1: 	 * This type extends the {@link #ROLE_TYPE}. It adds:
1: 	 * <ul>
1: 	 * <li>{@link #CREDENTIALS}</li>
1: 	 * </ul>
1: 	 */
1: 	CompositeType	USER_TYPE				= Item.extend(ROLE_TYPE, "USER", "Mapping of org.osgi.service.useradmin.User for remote management purposes. User extends Role");
1: 	/**
1: 	 * The MEMBERS key, used in {@link #MEMBERS_ITEM}.
1: 	 */
1: 	String			MEMBERS					= "Members";
1: 	/**
1: 	 * The item containing the members of a group. The key is {@link #MEMBERS}
1: 	 * and the type is {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in
1: 	 * {@link #GROUP_TYPE}.
1: 	 */
1: 	Item			MEMBERS_ITEM			= new Item(MEMBERS, "The members of this group", JmxConstants.STRING_ARRAY_TYPE);
1: 	/**
1: 	 * The REQUIRED_MEMBERS key, used in {@link #REQUIRED_MEMBERS_ITEM}.
1: 	 */
1: 	String			REQUIRED_MEMBERS		= "RequiredMembers";
1: 	/**
1: 	 * The item containing the required members of a group. The key is
1: 	 * {@link #REQUIRED_MEMBERS} and the type is
1: 	 * {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in {@link #GROUP_TYPE}
1: 	 * .
1: 	 */
1: 	Item			REQUIRED_MEMBERS_ITEM	= new Item(REQUIRED_MEMBERS, "The required members of this group", JmxConstants.STRING_ARRAY_TYPE);
1: 	/**
1: 	 * The Composite Type for a Group. It extends {@link #USER_TYPE} and adds
1: 	 * {@link #MEMBERS_ITEM}, and {@link #REQUIRED_MEMBERS_ITEM}.
1: 	 *
1: 	 * This type extends the {@link #USER_TYPE}. It adds:
1: 	 * <ul>
1: 	 * <li>{@link #MEMBERS}</li>
1: 	 * <li>{@link #REQUIRED_MEMBERS}</li>
1: 	 * </ul>
1: 	 * If there are no members or required members an empty array is returned in
1: 	 * the respective items.
1: 	 */
1: 	CompositeType	GROUP_TYPE				= Item.extend(USER_TYPE,
1: 													"GROUP",
1: 													"Mapping of org.osgi.service.useradmin.Group for remote management purposes. Group extends User which in turn extends Role",
1: 													MEMBERS_ITEM,
1: 													REQUIRED_MEMBERS_ITEM);
1: 	/**
1: 	 * Add credentials to a user, associated with the supplied key
1: 	 *
1: 	 * @param key The key of the credential to add
1: 	 * @param value The value of the credential to add
1: 	 * @param username The name of the user that gets the credential.
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the username is not a User
1: 	 */
1: 	void addCredential(String key, byte[] value, String username) throws IOException;
1: 	/**
1: 	 * Add credentials to a user, associated with the supplied key
1: 	 *
1: 	 * @param key The key of the credential to add
1: 	 * @param value The value of the credential to add
1: 	 * @param username The name of the user that gets the credential.
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the username is not a User
1: 	 */
1: 	void addCredentialString(String key, String value, String username) throws IOException;
1: 	/**
1: 	 * Add a member to the group.
1: 	 *
1: 	 * @param groupname The group name that receives the {@code rolename} as
1: 	 *        member.
1: 	 * @param rolename The {@code rolename} (User or Group) that must be added.
1: 	 * @return {@code true} if the role was added to the group
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if an invalid group name or role name is
1: 	 *         specified
1: 	 *
1: 	 */
1: 	boolean addMember(String groupname, String rolename) throws IOException;
1: 	/**
1: 	 * Add or update a property on a role
1: 	 *
1: 	 * @param key The key of the property to add
1: 	 * @param value The value of the property to add ({@code String})
1: 	 * @param rolename The role name
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if an invalid role name is specified
1: 	 */
1: 	void addPropertyString(String key, String value, String rolename) throws IOException;
1: 	/**
1: 	 * Add or update a property on a role.
1: 	 *
1: 	 * @param key The added property key
1: 	 * @param value The added byte[] property value
1: 	 * @param rolename The role name that receives the property
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if an invalid role name is specified
1: 	 */
1: 	void addProperty(String key, byte[] value, String rolename) throws IOException;
1: 	/**
1: 	 * Add a required member to the group
1: 	 *
1: 	 * @param groupname The group name that is addded
1: 	 * @param rolename The role that
1: 	 * @return true if the role was added to the group
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if an invalid group name or role name is
1: 	 *         specified
1: 	 */
1: 	boolean addRequiredMember(String groupname, String rolename) throws IOException;
1: 	/**
1: 	 * Create a User
1: 	 *
1: 	 * @param name Name of the user to create
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void createUser(String name) throws IOException;
1: 	/**
1: 	 * Create a Group
1: 	 *
1: 	 * @param name Name of the group to create
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void createGroup(String name) throws IOException;
1: 	/**
1: 	 * This method was specified in error and must not be used.
1: 	 *
1: 	 * @param name Ignored.
1: 	 * @throws IOException This method will throw an exception if called.
1: 	 * @deprecated This method was specified in error. It does not function and
1: 	 *             must not be used. Use either {@link #createUser(String)} or
1: 	 *             {@link #createGroup(String)}.
1: 	 */
1: 	void createRole(String name) throws IOException;
1: 	/**
1: 	 * Answer the authorization for the user name.
1: 	 *
1: 	 * The Composite Data is typed by {@link #AUTORIZATION_TYPE}.
1: 	 *
1: 	 * @param user The user name
1: 	 * @return the Authorization typed by {@link #AUTORIZATION_TYPE}.
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the user name is not a User
1: 	 */
1: 	CompositeData getAuthorization(String user) throws IOException;
1: 	/**
1: 	 * Answer the credentials associated with a user.
1: 	 *
1: 	 * The returned Tabular Data is typed by
1: 	 * {@link JmxConstants#PROPERTIES_TYPE}.
1: 	 *
1: 	 * @param username The user name
1: 	 * @return the credentials associated with the user, see
1: 	 *         {@link JmxConstants#PROPERTIES_TYPE}
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the user name is not a User
1: 	 */
1: 	TabularData getCredentials(String username) throws IOException;
1: 	/**
1: 	 * Answer the Group associated with the group name.
1: 	 *
1: 	 * The returned Composite Data is typed by {@link #GROUP_TYPE}
1: 	 *
1: 	 * @param groupname The group name
1: 	 * @return the Group, see {@link #GROUP_TYPE}
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the group name is not a Group
1: 	 */
1: 	CompositeData getGroup(String groupname) throws IOException;
1: 	/**
1: 	 * Answer the list of group names
1: 	 *
1: 	 * @return The list of group names
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] listGroups() throws IOException;
1: 	/**
1: 	 * Answer the list of group names
1: 	 *
1: 	 * @param filter The filter to apply
1: 	 * @return The list of group names
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] getGroups(String filter) throws IOException;
1: 	/**
1: 	 * Answer the list of implied roles for a user
1: 	 *
1: 	 * @param username The name of the user that has the implied roles
1: 	 * @return The list of role names
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the username is not a User
1: 	 */
1: 	String[] getImpliedRoles(String username) throws IOException;
1: 	/**
1: 	 * Answer the the user names which are members of the group
1: 	 *
1: 	 * @param groupname The name of the group to get the members from
1: 	 * @return The list of user names
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the groupname is not a Group
1: 	 */
1: 	String[] getMembers(String groupname) throws IOException;
1: 	/**
1: 	 * Answer the properties associated with a role.
1: 	 *
1: 	 * The returned Tabular Data is typed by
1: 	 * {@link JmxConstants#PROPERTIES_TYPE}.
1: 	 *
1: 	 * @param rolename The name of the role to get properties from
1: 	 * @return the properties associated with the role, see
1: 	 *         {@link JmxConstants#PROPERTIES_TYPE}
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the rolename is not a role
1: 	 */
1: 	TabularData getProperties(String rolename) throws IOException;
1: 	/**
1: 	 * Answer the list of user names which are required members of this group
1: 	 *
1: 	 * @param groupname The name of the group to get the required members from
1: 	 * @return The list of user names
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the group name is not a Group
1: 	 */
1: 	String[] getRequiredMembers(String groupname) throws IOException;
1: 	/**
1: 	 * Answer the role associated with a name.
1: 	 *
1: 	 * The returned Composite Data is typed by {@link #ROLE_TYPE}.
1: 	 *
1: 	 * @param name The name of the role to get the data from
1: 	 * @return the Role, see {@link #ROLE_TYPE}
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the name is not a role
1: 	 */
1: 	CompositeData getRole(String name) throws IOException;
1: 	/**
1: 	 * Answer the list of role names in the User Admin database
1: 	 *
1: 	 * @return The list of role names
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] listRoles() throws IOException;
1: 	/**
1: 	 * Answer the list of role names which match the supplied filter
1: 	 *
1: 	 * @param filter The string representation of the
1: 	 *        {@code org.osgi.framework.Filter} that is used to filter the roles
1: 	 *        by applying to the properties, if {@code null} all roles are
1: 	 *        returned.
1: 	 *
1: 	 * @return The list the role names
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] getRoles(String filter) throws IOException;
1: 	/**
1: 	 * Answer the User associated with the user name.
1: 	 *
1: 	 * The returned Composite Data is typed by {@link #USER_TYPE}.
1: 	 *
1: 	 * @param username The name of the requested user
1: 	 * @return The User, see {@link #USER_TYPE}
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the username is not a User
1: 	 */
1: 	CompositeData getUser(String username) throws IOException;
1: 	/**
1: 	 * Answer the user name with the given property key-value pair from the User
1: 	 * Admin service database.
1: 	 *
1: 	 * @param key The key to compare
1: 	 * @param value The value to compare
1: 	 * @return The User
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String getUserWithProperty(String key, String value) throws IOException;
1: 	/**
1: 	 * Answer the list of user names in the User Admin database
1: 	 *
1: 	 * @return The list of user names
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] listUsers() throws IOException;
1: 	/**
1: 	 * Answer the list of user names in the User Admin database
1: 	 *
1: 	 * @param filter The filter to apply
1: 	 * @return The list of user names
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] getUsers(String filter) throws IOException;
1: 	/**
1: 	 * Remove the credential associated with the given user
1: 	 *
1: 	 * @param key The key of the credential to remove
1: 	 * @param username The name of the user for which the credential must be
1: 	 *        removed
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the username is not a User
1: 	 */
1: 	void removeCredential(String key, String username) throws IOException;
1: 	/**
1: 	 * Remove a role from the group
1: 	 *
1: 	 * @param groupname The group name
1: 	 * @param rolename
1: 	 * @return true if the role was removed from the group
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the groupname is not a Group
1: 	 */
1: 	boolean removeMember(String groupname, String rolename) throws IOException;
1: 	/**
1: 	 * Remove a property from a role
1: 	 *
1: 	 * @param key
1: 	 * @param rolename
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the rolename is not a role
1: 	 */
1: 	void removeProperty(String key, String rolename) throws IOException;
1: 	/**
1: 	 * Remove the Role associated with the name
1: 	 *
1: 	 * @param name
1: 	 * @return true if the remove succeeded
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the name is not a role
1: 	 */
1: 	boolean removeRole(String name) throws IOException;
1: 	/**
1: 	 * Remove the Group associated with the name
1: 	 *
1: 	 * @param name
1: 	 * @return true if the remove succeeded
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the name is not a Group
1: 	 */
1: 	boolean removeGroup(String name) throws IOException;
1: 	/**
1: 	 * Remove the User associated with the name
1: 	 *
1: 	 * @param name
1: 	 * @return true if the remove succeeded
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the name is not a User
1: 	 */
1: 	boolean removeUser(String name) throws IOException;
commit:32a99b9
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * User Admin MBean object name.
1:      */
0:     String          OBJECTNAME              = JmxConstants.OSGI_COMPENDIUM + ":service=useradmin,version=1.1";
1:     /**
0:      * The key NAME, used in {@link #NAME_ITEM}.
1:      */
0:     String          NAME                    = "Name";
1:     /**
0:      * The item for the user name for an authorization object. The key is
0:      * {@link #NAME} and the type is {@link SimpleType#STRING}.
1:      */
0:     Item            NAME_ITEM               = new Item(NAME, "The user name for this authorization object", SimpleType.STRING);
1:     /**
0:      * The key ROLES, used in {@link #ROLES_ITEM}.
1:      */
0:     String          ROLES                   = "Roles";
1:     /**
0:      * The item containing the roles for this authorization object. The key is
0:      * {@link #ROLES}. and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
1:      */
0:     Item            ROLES_ITEM              = new Item(ROLES, "The names of the roles encapsulated by this auth object", JmxConstants.STRING_ARRAY_TYPE);
1:     /**
0:      * The Composite Type for an Authorization object. It consists of the
0:      * {@link #NAME_ITEM} and {@link #ROLES_ITEM} items.
1:      */
0:     CompositeType   AUTORIZATION_TYPE       = Item.compositeType("AUTHORIZATION", "An authorization object defines which roles has a user got", NAME_ITEM, ROLES_ITEM);
1:     /**
0:      * The Role TYPE key, used in {@link #TYPE_ITEM}.
1:      */
0:     String          TYPE                    = "Type";
1:     /**
0:      * The item containing the type of the roles encapsulated by this
0:      * authorization object. The key is {@link #TYPE} and the type is
0:      * {@link SimpleType#INTEGER}.
1:      */
0:     Item            TYPE_ITEM               = new Item(TYPE, "An integer representing type of the role: {0=Role,1=user,2=group}", SimpleType.INTEGER);
1:     /**
0:      * The PROPERTIES key, used in {@link #PROPERTIES_ITEM}.
1:      */
0:     String          PROPERTIES              = "Properties";
1:     /**
0:      * The item containing the properties of a Role. The key is
0:      * {@link #PROPERTIES} and the type is {@link JmxConstants#PROPERTIES_TYPE}.
1:      */
0:     Item            PROPERTIES_ITEM         = new Item(PROPERTIES, "A properties as defined by org.osgi.service.useradmin.Role", JmxConstants.PROPERTIES_TYPE);
1:     /**
0:      * The Composite Type for a Role. It contains the following items:
0:      * <ul>
0:      * <li>{@link #NAME}</li>
0:      * <li>{@link #TYPE}</li>
0:      * <li>{@link #PROPERTIES}</li>
0:      * </ul>
1:      *
1:      */
0:     CompositeType   ROLE_TYPE               = Item.compositeType("ROLE",
0:                                                     "Mapping of org.osgi.service.useradmin.Role for remote management purposes. User and Group extend Role",
0:                                                     NAME_ITEM,
0:                                                     TYPE_ITEM,
0:                                                     PROPERTIES_ITEM);
1:     /**
0:      * The CREDENTIALS key, used in {@link #CREDENTIALS_ITEM}.
1:      */
0:     String          CREDENTIALS             = "Credentials";
1:     /**
0:      * The item containing the credentials of a user. The key is
0:      * {@link #CREDENTIALS} and the type is {@link JmxConstants#PROPERTIES_TYPE}
0:      * .
1:      */
0:     Item            CREDENTIALS_ITEM        = new Item(CREDENTIALS, "The credentials for this user", JmxConstants.PROPERTIES_TYPE);
1:     /**
0:      * A Composite Type for a User. A User contains its Role description and
0:      * adds the credentials. It extends {@link #ROLE_TYPE} and adds
0:      * {@link #CREDENTIALS_ITEM}.
1:      *
0:      * This type extends the {@link #ROLE_TYPE}. It adds:
0:      * <ul>
0:      * <li>{@link #CREDENTIALS}</li>
0:      * </ul>
1:      */
0:     CompositeType   USER_TYPE               = Item.extend(ROLE_TYPE, "USER", "Mapping of org.osgi.service.useradmin.User for remote management purposes. User extends Role", CREDENTIALS_ITEM);
1:     /**
0:      * The MEMBERS key, used in {@link #MEMBERS_ITEM}.
1:      */
0:     String          MEMBERS                 = "Members";
1:     /**
0:      * The item containing the members of a group. The key is {@link #MEMBERS}
0:      * and the type is {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in
0:      * {@link #GROUP_TYPE}.
1:      */
0:     Item            MEMBERS_ITEM            = new Item(MEMBERS, "The members of this group", JmxConstants.STRING_ARRAY_TYPE);
1:     /**
0:      * The REQUIRED_MEMBERS key, used in {@link #REQUIRED_MEMBERS_ITEM}.
1:      */
0:     String          REQUIRED_MEMBERS        = "RequiredMembers";
1:     /**
0:      * The item containing the required members of a group. The key is
0:      * {@link #REQUIRED_MEMBERS} and the type is
0:      * {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in {@link #GROUP_TYPE}
0:      * .
1:      */
0:     Item            REQUIRED_MEMBERS_ITEM   = new Item(REQUIRED_MEMBERS, "The required members of this group", JmxConstants.STRING_ARRAY_TYPE);
1:     /**
0:      * The Composite Type for a Group. It extends {@link #USER_TYPE} and adds
0:      * {@link #MEMBERS_ITEM}, and {@link #REQUIRED_MEMBERS_ITEM}.
1:      *
0:      * This type extends the {@link #USER_TYPE}. It adds:
0:      * <ul>
0:      * <li>{@link #MEMBERS}</li>
0:      * <li>{@link #REQUIRED_MEMBERS}</li>
0:      * </ul>
0:      * If there are no members or required members an empty array is returned in
0:      * the respective items.
1:      */
0:     CompositeType   GROUP_TYPE              = Item.extend(USER_TYPE,
0:                                                     "GROUP",
0:                                                     "Mapping of org.osgi.service.useradmin.Group for remote management purposes. Group extends User which in turn extends Role",
0:                                                     MEMBERS_ITEM,
0:                                                     REQUIRED_MEMBERS_ITEM);
1:     /**
0:      * Add credentials to a user, associated with the supplied key
1:      *
0:      * @param key The key of the credential to add
0:      * @param value The value of the credential to add
0:      * @param username The name of the user that gets the credential.
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the username is not a User
1:      */
0:     void addCredential(String key, byte[] value, String username) throws IOException;
1:     /**
0:      * Add credentials to a user, associated with the supplied key
1:      *
0:      * @param key The key of the credential to add
0:      * @param value The value of the credential to add
0:      * @param username The name of the user that gets the credential.
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the username is not a User
1:      */
0:     void addCredentialString(String key, String value, String username) throws IOException;
1:     /**
0:      * Add a member to the group.
1:      *
0:      * @param groupname The group name that receives the {@code rolename} as
0:      *        member.
0:      * @param rolename The {@code rolename} (User or Group) that must be added.
0:      * @return {@code true} if the role was added to the group
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if an invalid group name or role name is
0:      *         specified
1:      *
1:      */
0:     boolean addMember(String groupname, String rolename) throws IOException;
1:     /**
0:      * Add or update a property on a role
1:      *
0:      * @param key The key of the property to add
0:      * @param value The value of the property to add ({@code String})
0:      * @param rolename The role name
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if an invalid role name is specified
1:      */
0:     void addPropertyString(String key, String value, String rolename) throws IOException;
1:     /**
0:      * Add or update a property on a role.
1:      *
0:      * @param key The added property key
0:      * @param value The added byte[] property value
0:      * @param rolename The role name that receives the property
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if an invalid role name is specified
1:      */
0:     void addProperty(String key, byte[] value, String rolename) throws IOException;
1:     /**
0:      * Add a required member to the group
1:      *
0:      * @param groupname The group name that is addded
0:      * @param rolename The role that
0:      * @return true if the role was added to the group
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if an invalid group name or role name is
0:      *         specified
1:      */
0:     boolean addRequiredMember(String groupname, String rolename) throws IOException;
1:     /**
0:      * Create a User
1:      *
0:      * @param name Name of the user to create
0:      * @throws IOException if the operation fails
1:      */
0:     void createUser(String name) throws IOException;
1:     /**
0:      * Create a Group
1:      *
0:      * @param name Name of the group to create
0:      * @throws IOException if the operation fails
1:      */
0:     void createGroup(String name) throws IOException;
1:     /**
0:      * This method was specified in error and must not be used.
1:      *
0:      * @param name Ignored.
0:      * @throws IOException This method will throw an exception if called.
0:      * @deprecated This method was specified in error. It does not function and
0:      *             must not be used. Use either {@link #createUser(String)} or
0:      *             {@link #createGroup(String)}.
1:      */
0:     void createRole(String name) throws IOException;
1:     /**
0:      * Answer the authorization for the user name.
1:      *
0:      * The Composite Data is typed by {@link #AUTORIZATION_TYPE}.
1:      *
0:      * @param user The user name
0:      * @return the Authorization typed by {@link #AUTORIZATION_TYPE}.
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the user name is not a User
1:      */
0:     CompositeData getAuthorization(String user) throws IOException;
1:     /**
0:      * Answer the credentials associated with a user.
1:      *
0:      * The returned Tabular Data is typed by
0:      * {@link JmxConstants#PROPERTIES_TYPE}.
1:      *
0:      * @param username The user name
0:      * @return the credentials associated with the user, see
0:      *         {@link JmxConstants#PROPERTIES_TYPE}
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the user name is not a User
1:      */
0:     TabularData getCredentials(String username) throws IOException;
1:     /**
0:      * Answer the Group associated with the group name.
1:      *
0:      * The returned Composite Data is typed by {@link #GROUP_TYPE}
1:      *
0:      * @param groupname The group name
0:      * @return the Group, see {@link #GROUP_TYPE}
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the group name is not a Group
1:      */
0:     CompositeData getGroup(String groupname) throws IOException;
1:     /**
0:      * Answer the list of group names
1:      *
0:      * @return The list of group names
0:      * @throws IOException if the operation fails
1:      */
0:     String[] listGroups() throws IOException;
1:     /**
0:      * Answer the list of group names
1:      *
0:      * @param filter The filter to apply
0:      * @return The list of group names
0:      * @throws IOException if the operation fails
1:      */
0:     String[] getGroups(String filter) throws IOException;
1:     /**
0:      * Answer the list of implied roles for a user
1:      *
0:      * @param username The name of the user that has the implied roles
0:      * @return The list of role names
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the username is not a User
1:      */
0:     String[] getImpliedRoles(String username) throws IOException;
1:     /**
0:      * Answer the the user names which are members of the group
1:      *
0:      * @param groupname The name of the group to get the members from
0:      * @return The list of user names
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the groupname is not a Group
1:      */
0:     String[] getMembers(String groupname) throws IOException;
1:     /**
0:      * Answer the properties associated with a role.
1:      *
0:      * The returned Tabular Data is typed by
0:      * {@link JmxConstants#PROPERTIES_TYPE}.
1:      *
0:      * @param rolename The name of the role to get properties from
0:      * @return the properties associated with the role, see
0:      *         {@link JmxConstants#PROPERTIES_TYPE}
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the rolename is not a role
1:      */
0:     TabularData getProperties(String rolename) throws IOException;
1:     /**
0:      * Answer the list of user names which are required members of this group
1:      *
0:      * @param groupname The name of the group to get the required members from
0:      * @return The list of user names
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the group name is not a Group
1:      */
0:     String[] getRequiredMembers(String groupname) throws IOException;
1:     /**
0:      * Answer the role associated with a name.
1:      *
0:      * The returned Composite Data is typed by {@link #ROLE_TYPE}.
1:      *
0:      * @param name The name of the role to get the data from
0:      * @return the Role, see {@link #ROLE_TYPE}
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the name is not a role
1:      */
0:     CompositeData getRole(String name) throws IOException;
1:     /**
0:      * Answer the list of role names in the User Admin database
1:      *
0:      * @return The list of role names
0:      * @throws IOException if the operation fails
1:      */
0:     String[] listRoles() throws IOException;
1:     /**
0:      * Answer the list of role names which match the supplied filter
1:      *
0:      * @param filter The string representation of the
0:      *        {@code org.osgi.framework.Filter} that is used to filter the roles
0:      *        by applying to the properties, if {@code null} all roles are
0:      *        returned.
1:      *
0:      * @return The list the role names
0:      * @throws IOException if the operation fails
1:      */
0:     String[] getRoles(String filter) throws IOException;
1:     /**
0:      * Answer the User associated with the user name.
1:      *
0:      * The returned Composite Data is typed by {@link #USER_TYPE}.
1:      *
0:      * @param username The name of the requested user
0:      * @return The User, see {@link #USER_TYPE}
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the username is not a User
1:      */
0:     CompositeData getUser(String username) throws IOException;
1:     /**
0:      * Answer the user name with the given property key-value pair from the User
0:      * Admin service database.
1:      *
0:      * @param key The key to compare
0:      * @param value The value to compare
0:      * @return The User
0:      * @throws IOException if the operation fails
1:      */
0:     String getUserWithProperty(String key, String value) throws IOException;
1:     /**
0:      * Answer the list of user names in the User Admin database
1:      *
0:      * @return The list of user names
0:      * @throws IOException if the operation fails
1:      */
0:     String[] listUsers() throws IOException;
1:     /**
0:      * Answer the list of user names in the User Admin database
1:      *
0:      * @param filter The filter to apply
0:      * @return The list of user names
0:      * @throws IOException if the operation fails
1:      */
0:     String[] getUsers(String filter) throws IOException;
1:     /**
0:      * Remove the credential associated with the given user
1:      *
0:      * @param key The key of the credential to remove
0:      * @param username The name of the user for which the credential must be
0:      *        removed
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the username is not a User
1:      */
0:     void removeCredential(String key, String username) throws IOException;
1:     /**
0:      * Remove a role from the group
1:      *
0:      * @param groupname The group name
0:      * @param rolename
0:      * @return true if the role was removed from the group
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the groupname is not a Group
1:      */
0:     boolean removeMember(String groupname, String rolename) throws IOException;
1:     /**
0:      * Remove a property from a role
1:      *
0:      * @param key
0:      * @param rolename
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the rolename is not a role
1:      */
0:     void removeProperty(String key, String rolename) throws IOException;
1:     /**
0:      * Remove the Role associated with the name
1:      *
0:      * @param name
0:      * @return true if the remove succeeded
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the name is not a role
1:      */
0:     boolean removeRole(String name) throws IOException;
1:     /**
0:      * Remove the Group associated with the name
1:      *
0:      * @param name
0:      * @return true if the remove succeeded
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the name is not a Group
1:      */
0:     boolean removeGroup(String name) throws IOException;
1:     /**
0:      * Remove the User associated with the name
1:      *
0:      * @param name
0:      * @return true if the remove succeeded
0:      * @throws IOException if the operation fails
0:      * @throws IllegalArgumentException if the name is not a User
1:      */
0:     boolean removeUser(String name) throws IOException;
commit:0356de4
/////////////////////////////////////////////////////////////////////////
1:  * Copyright (c) OSGi Alliance (2009, 2012). All Rights Reserved.
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * @version $Id: f7e49989d7b71ebdbdca58c1a4e0c24735576196 $
0: 	String			OBJECTNAME				= JmxConstants.OSGI_COMPENDIUM + ":service=useradmin,version=1.1";
/////////////////////////////////////////////////////////////////////////
0: 	Item			NAME_ITEM				= new Item(NAME, "The user name for this authorization object", SimpleType.STRING);
/////////////////////////////////////////////////////////////////////////
0: 	Item			ROLES_ITEM				= new Item(ROLES, "The names of the roles encapsulated by this auth object", JmxConstants.STRING_ARRAY_TYPE);
0: 	CompositeType	AUTORIZATION_TYPE		= Item.compositeType("AUTHORIZATION", "An authorization object defines which roles has a user got", NAME_ITEM, ROLES_ITEM);
/////////////////////////////////////////////////////////////////////////
0: 	Item			TYPE_ITEM				= new Item(TYPE, "An integer representing type of the role: {0=Role,1=user,2=group}", SimpleType.INTEGER);
/////////////////////////////////////////////////////////////////////////
0: 	Item			PROPERTIES_ITEM			= new Item(PROPERTIES, "A properties as defined by org.osgi.service.useradmin.Role", JmxConstants.PROPERTIES_TYPE);
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	CompositeType	ROLE_TYPE				= Item.compositeType("ROLE",
0: 													"Mapping of org.osgi.service.useradmin.Role for remote management purposes. User and Group extend Role",
0: 													NAME_ITEM,
0: 													TYPE_ITEM,
0: 													PROPERTIES_ITEM);
/////////////////////////////////////////////////////////////////////////
0: 	 * {@link #CREDENTIALS} and the type is {@link JmxConstants#PROPERTIES_TYPE}
0: 	 * .
0: 	Item			CREDENTIALS_ITEM		= new Item(CREDENTIALS, "The credentials for this user", JmxConstants.PROPERTIES_TYPE);
0: 	 *
0: 	CompositeType	USER_TYPE				= Item.extend(ROLE_TYPE, "USER", "Mapping of org.osgi.service.useradmin.User for remote management purposes. User extends Role");
/////////////////////////////////////////////////////////////////////////
0: 	Item			MEMBERS_ITEM			= new Item(MEMBERS, "The members of this group", JmxConstants.STRING_ARRAY_TYPE);
/////////////////////////////////////////////////////////////////////////
0: 	 * {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in {@link #GROUP_TYPE}
0: 	 * .
0: 	Item			REQUIRED_MEMBERS_ITEM	= new Item(REQUIRED_MEMBERS, "The required members of this group", JmxConstants.STRING_ARRAY_TYPE);
0: 	 *
0: 	 * If there are no members or required members an empty array is returned in
0: 	 * the respective items.
0: 	CompositeType	GROUP_TYPE				= Item.extend(USER_TYPE,
0: 													"GROUP",
0: 													"Mapping of org.osgi.service.useradmin.Group for remote management purposes. Group extends User which in turn extends Role",
0: 													MEMBERS_ITEM,
0: 													REQUIRED_MEMBERS_ITEM);
0: 	 *
0: 	void addCredential(String key, byte[] value, String username) throws IOException;
1: 
0: 	/**
0: 	 * Add credentials to a user, associated with the supplied key
0: 	 *
0: 	 * @param key The key of the credential to add
0: 	 * @param value The value of the credential to add
0: 	 * @param username The name of the user that gets the credential.
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the username is not a User
0: 	 */
0: 	void addCredentialString(String key, String value, String username) throws IOException;
0: 	 *
0: 	 * @param groupname The group name that receives the {@code rolename} as
0: 	 *        member.
0: 	 * @param rolename The {@code rolename} (User or Group) that must be added.
0: 	 * @return {@code true} if the role was added to the group
0: 	 * @throws IllegalArgumentException if an invalid group name or role name is
0: 	 *         specified
0: 	 *
0: 	 *
0: 	 * @param value The value of the property to add ({@code String})
0: 	 * @throws IllegalArgumentException if an invalid role name is specified
0: 	void addPropertyString(String key, String value, String rolename) throws IOException;
0: 	 *
0: 	 * @throws IllegalArgumentException if an invalid role name is specified
0: 	void addProperty(String key, byte[] value, String rolename) throws IOException;
0: 	 *
0: 	 * @throws IllegalArgumentException if an invalid group name or role name is
0: 	 *         specified
0: 	boolean addRequiredMember(String groupname, String rolename) throws IOException;
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	 * This method was specified in error and must not be used.
0: 	 *
0: 	 * @param name Ignored.
0: 	 * @throws IOException This method will throw an exception if called.
0: 	 * @deprecated This method was specified in error. It does not function and
0: 	 *             must not be used. Use either {@link #createUser(String)} or
0: 	 *             {@link #createGroup(String)}.
0: 	 *
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	 * @throws IllegalArgumentException if the groupname is not a Group
0: 	 *
0: 	 *
0: 	 * @throws IllegalArgumentException if the rolename is not a role
0: 	 *
0: 	 * @throws IllegalArgumentException if the group name is not a Group
0: 	 *
0: 	 *
0: 	 * @throws IllegalArgumentException if the name is not a role
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	 *        {@code org.osgi.framework.Filter} that is used to filter the roles
0: 	 *        by applying to the properties, if {@code null} all roles are
0: 	 *        returned.
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	 *
0: 	 * @throws IllegalArgumentException if the username is not a User
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
/////////////////////////////////////////////////////////////////////////
0: 	 *
0: 	 * @throws IllegalArgumentException if the rolename is not a role
0: 	 *
0: 	 * @throws IllegalArgumentException if the name is not a role
0: 	 *
0: 	 * @throws IllegalArgumentException if the name is not a Group
0: 	 *
0: 	 * @throws IllegalArgumentException if the name is not a User
1: }
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
0:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
1: package org.osgi.jmx.service.useradmin;
1: 
1: import java.io.IOException;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.SimpleType;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.osgi.jmx.Item;
1: import org.osgi.jmx.JmxConstants;
1: 
0: /**
1:  * This MBean provides the management interface to the OSGi User Manager Service
0:  * 
0:  * @version $Revision$
1:  * @ThreadSafe
0:  */
1: public interface UserAdminMBean {
0: 	/**
0: 	 * User Admin MBean object name.
0: 	 */
0: 	String			OBJECTNAME				= JmxConstants.OSGI_COMPENDIUM
0: 													+ ":service=useradmin,version=1.1";
1: 
0: 	/**
0: 	 * The key NAME, used in {@link #NAME_ITEM}.
0: 	 */
0: 	String			NAME					= "Name";
1: 
0: 	/**
0: 	 * The item for the user name for an authorization object. The key is
0: 	 * {@link #NAME} and the type is {@link SimpleType#STRING}.
0: 	 */
0: 	Item			NAME_ITEM				= new Item(
0: 													NAME,
0: 													"The user name for this authorization object",
0: 													SimpleType.STRING);
1: 
0: 	/**
0: 	 * The key ROLES, used in {@link #ROLES_ITEM}.
0: 	 */
0: 	String			ROLES					= "Roles";
1: 
0: 	/**
0: 	 * The item containing the roles for this authorization object. The key is
0: 	 * {@link #ROLES}. and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
0: 	 */
0: 	Item			ROLES_ITEM				= new Item(
0: 													ROLES,
0: 													"The names of the roles encapsulated by this auth object",
0: 													JmxConstants.STRING_ARRAY_TYPE);
1: 
0: 	/**
0: 	 * The Composite Type for an Authorization object. It consists of the
0: 	 * {@link #NAME_ITEM} and {@link #TYPE_ITEM} items.
0: 	 */
0: 	CompositeType	AUTORIZATION_TYPE		= Item
0: 													.compositeType(
0: 															"AUTHORIZATION",
0: 															"An authorization object defines which roles has a user got",
0: 															NAME_ITEM,
0: 															ROLES_ITEM);
0: 	/**
0: 	 * The Role TYPE key, used in {@link #TYPE_ITEM}.
0: 	 */
0: 	String			TYPE					= "Type";
1: 
0: 	/**
0: 	 * The item containing the type of the roles encapsulated by this
0: 	 * authorization object. The key is {@link #TYPE} and the type is
0: 	 * {@link SimpleType#INTEGER}.
0: 	 */
0: 	Item			TYPE_ITEM				= new Item(
0: 													TYPE,
0: 													"An integer representing type of the role: {0=Role,1=user,2=group}",
0: 													SimpleType.INTEGER);
1: 
0: 	/**
0: 	 * The PROPERTIES key, used in {@link #PROPERTIES_ITEM}.
0: 	 */
0: 	String			PROPERTIES				= "Properties";
1: 
0: 	/**
0: 	 * The item containing the properties of a Role. The key is
0: 	 * {@link #PROPERTIES} and the type is {@link JmxConstants#PROPERTIES_TYPE}.
0: 	 */
0: 	Item			PROPERTIES_ITEM			= new Item(
0: 													PROPERTIES,
0: 													"A properties as defined by org.osgi.service.useradmin.Role",
0: 													JmxConstants.PROPERTIES_TYPE);
0: 	/**
0: 	 * The Composite Type for a Role. It contains the following items:
0: 	 * <ul>
0: 	 * <li>{@link #NAME}</li>
0: 	 * <li>{@link #TYPE}</li>
0: 	 * <li>{@link #PROPERTIES}</li>
0: 	 * </ul>
0: 	 * 
0: 	 */
0: 	CompositeType	ROLE_TYPE				= Item
0: 													.compositeType(
0: 															"ROLE",
0: 															"Mapping of org.osgi.service.useradmin.Role for remote management purposes. User and Group extend Role",
0: 															NAME_ITEM,
0: 															TYPE_ITEM);
1: 
0: 	/**
0: 	 * The CREDENTIALS key, used in {@link #CREDENTIALS_ITEM}.
0: 	 */
0: 	String			CREDENTIALS				= "Credentials";
1: 
0: 	/**
0: 	 * The item containing the credentials of a user. The key is
0: 	 * {@link #CREDENTIALS} and the type is {@link JmxConstants#PROPERTIES_TYPE} .
0: 	 */
0: 	Item			CREDENTIALS_ITEM		= new Item(
0: 													CREDENTIALS,
0: 													"The credentials for this user",
0: 													JmxConstants.PROPERTIES_TYPE);
1: 
0: 	/**
0: 	 * A Composite Type for a User. A User contains its Role description and
0: 	 * adds the credentials. It extends {@link #ROLE_TYPE} and adds
0: 	 * {@link #CREDENTIALS_ITEM}.
0: 	 * 
0: 	 * This type extends the {@link #ROLE_TYPE}. It adds:
0: 	 * <ul>
0: 	 * <li>{@link #CREDENTIALS}</li>
0: 	 * </ul>
0: 	 */
0: 	CompositeType	USER_TYPE				= Item
0: 													.extend(
0: 															ROLE_TYPE,
0: 															"USER",
0: 															"Mapping of org.osgi.service.useradmin.User for remote management purposes. User extends Role");
1: 
0: 	/**
0: 	 * The MEMBERS key, used in {@link #MEMBERS_ITEM}.
0: 	 */
0: 	String			MEMBERS					= "Members";
1: 
0: 	/**
0: 	 * The item containing the members of a group. The key is {@link #MEMBERS}
0: 	 * and the type is {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in
0: 	 * {@link #GROUP_TYPE}.
0: 	 */
0: 	Item			MEMBERS_ITEM			= new Item(
0: 													MEMBERS,
0: 													"The members of this group",
0: 													JmxConstants.STRING_ARRAY_TYPE);
1: 
0: 	/**
0: 	 * The REQUIRED_MEMBERS key, used in {@link #REQUIRED_MEMBERS_ITEM}.
0: 	 */
0: 	String			REQUIRED_MEMBERS		= "RequiredMembers";
1: 
0: 	/**
0: 	 * The item containing the required members of a group. The key is
0: 	 * {@link #REQUIRED_MEMBERS} and the type is
0: 	 * {@link JmxConstants#STRING_ARRAY_TYPE}. It is used in
0: 	 * {@link #GROUP_TYPE} .
0: 	 */
0: 	Item			REQUIRED_MEMBERS_ITEM	= new Item(
0: 													REQUIRED_MEMBERS,
0: 													"The required members of this group",
0: 													JmxConstants.STRING_ARRAY_TYPE);
1: 
0: 	/**
0: 	 * The Composite Type for a Group. It extends {@link #USER_TYPE} and adds
0: 	 * {@link #MEMBERS_ITEM}, and {@link #REQUIRED_MEMBERS_ITEM}.
0: 	 * 
0: 	 * This type extends the {@link #USER_TYPE}. It adds:
0: 	 * <ul>
0: 	 * <li>{@link #MEMBERS}</li>
0: 	 * <li>{@link #REQUIRED_MEMBERS}</li>
0: 	 * </ul>
0: 	 */
0: 	CompositeType	GROUP_TYPE				= Item
0: 													.extend(
0: 															USER_TYPE,
0: 															"GROUP",
0: 															"Mapping of org.osgi.service.useradmin.Group for remote management purposes. Group extends User which in turn extends Role",
0: 															MEMBERS_ITEM,
0: 															REQUIRED_MEMBERS_ITEM);
1: 
0: 	/**
0: 	 * Add credentials to a user, associated with the supplied key
0: 	 * 
0: 	 * @param key The key of the credential to add
0: 	 * @param value The value of the credential to add
0: 	 * @param username The name of the user that gets the credential.
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the user name is not a User
0: 	 */
0: 	void addCredential(String key, byte[] value, String username)
0: 			throws IOException;
1: 
0: 	/**
0: 	 * Add credentials to a user, associated with the supplied key
0: 	 * 
0: 	 * @param key The key of the credential to add
0: 	 * @param value The value of the credential to add
0: 	 * @param username The name of the user that gets the credential.
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the username is not a User
0: 	 */
0: 	void addCredentialString(String key, String value, String username)
0: 			throws IOException;
1: 
0: 	/**
0: 	 * Add a member to the group.
0: 	 * 
0: 	 * @param groupname The group name that receives the <code>rolename</code>
0: 	 *        as member.
0: 	 * @param rolename The <code>rolename</code> (User or Group) that must be
0: 	 *        added.
0: 	 * @return <code>true</code> if the role was added to the group
0: 	 * @throws IOException if the operation fails
0: 	 * 
0: 	 */
0: 	boolean addMember(String groupname, String rolename) throws IOException;
1: 
0: 	/**
0: 	 * Add or update a property on a role
0: 	 * 
0: 	 * @param key The key of the property to add
0: 	 * @param value The value of the property to add (<code>String</code>)
0: 	 * @param rolename The role name
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	void addPropertyString(String key, String value, String rolename)
0: 			throws IOException;
1: 
0: 	/**
0: 	 * Add or update a property on a role.
0: 	 * 
0: 	 * @param key The added property key
0: 	 * @param value The added byte[] property value
0: 	 * @param rolename The role name that receives the property
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	void addProperty(String key, byte[] value, String rolename)
0: 			throws IOException;
1: 
0: 	/**
0: 	 * Add a required member to the group
0: 	 * 
0: 	 * @param groupname The group name that is addded
0: 	 * @param rolename The role that
0: 	 * @return true if the role was added to the group
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	boolean addRequiredMember(String groupname, String rolename)
0: 			throws IOException;
1: 
0: 	/**
0: 	 * Create a User
0: 	 * 
0: 	 * @param name Name of the user to create
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	void createUser(String name) throws IOException;
1: 
0: 	/**
0: 	 * Create a Group
0: 	 * 
0: 	 * @param name Name of the group to create
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	void createGroup(String name) throws IOException;
1: 
0: 	/**
0: 	 * Create a Role
0: 	 * 
0: 	 * @param name of the role to create
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	void createRole(String name) throws IOException;
1: 
0: 	/**
0: 	 * Answer the authorization for the user name.
0: 	 * 
0: 	 * The Composite Data is typed by {@link #AUTORIZATION_TYPE}.
0: 	 * 
0: 	 * @param user The user name
0: 	 * @return the Authorization typed by {@link #AUTORIZATION_TYPE}.
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the user name is not a User
0: 	 */
0: 	CompositeData getAuthorization(String user) throws IOException;
1: 
0: 	/**
0: 	 * Answer the credentials associated with a user.
0: 	 * 
0: 	 * The returned Tabular Data is typed by
0: 	 * {@link JmxConstants#PROPERTIES_TYPE}.
0: 	 * 
0: 	 * @param username The user name
0: 	 * @return the credentials associated with the user, see
0: 	 *         {@link JmxConstants#PROPERTIES_TYPE}
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the user name is not a User
0: 	 */
0: 	TabularData getCredentials(String username) throws IOException;
1: 
0: 	/**
0: 	 * Answer the Group associated with the group name.
0: 	 * 
0: 	 * The returned Composite Data is typed by {@link #GROUP_TYPE}
0: 	 * 
0: 	 * @param groupname The group name
0: 	 * @return the Group, see {@link #GROUP_TYPE}
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the group name is not a Group
0: 	 */
0: 	CompositeData getGroup(String groupname) throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of group names
0: 	 * 
0: 	 * @return The list of group names
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	String[] listGroups() throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of group names
0: 	 * 
0: 	 * @param filter The filter to apply
0: 	 * @return The list of group names
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	String[] getGroups(String filter) throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of implied roles for a user
0: 	 * 
0: 	 * @param username The name of the user that has the implied roles
0: 	 * @return The list of role names
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the username is not a User
0: 	 */
0: 	String[] getImpliedRoles(String username) throws IOException;
1: 
0: 	/**
0: 	 * Answer the the user names which are members of the group
0: 	 * 
0: 	 * @param groupname The name of the group to get the members from
0: 	 * @return The list of user names
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the <code>groupname</code> is not a
0: 	 *         group
0: 	 */
0: 	String[] getMembers(String groupname) throws IOException;
1: 
0: 	/**
0: 	 * Answer the properties associated with a role.
0: 	 * 
0: 	 * The returned Tabular Data is typed by
0: 	 * {@link JmxConstants#PROPERTIES_TYPE}.
0: 	 * 
0: 	 * @param rolename The name of the role to get properties from
0: 	 * @return the properties associated with the role, see
0: 	 *         {@link JmxConstants#PROPERTIES_TYPE}
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	TabularData getProperties(String rolename) throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of user names which are required members of this group
0: 	 * 
0: 	 * @param groupname The name of the group to get the required members from
0: 	 * @return The list of user names
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the group name is not a group
0: 	 */
0: 	String[] getRequiredMembers(String groupname) throws IOException;
1: 
0: 	/**
0: 	 * Answer the role associated with a name.
0: 	 * 
0: 	 * The returned Composite Data is typed by {@link #ROLE_TYPE}.
0: 	 * 
0: 	 * @param name The name of the role to get the data from
0: 	 * @return the Role, see {@link #ROLE_TYPE}
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	CompositeData getRole(String name) throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of role names in the User Admin database
0: 	 * 
0: 	 * @return The list of role names
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	String[] listRoles() throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of role names which match the supplied filter
0: 	 * 
0: 	 * @param filter The string representation of the
0: 	 *        <code>org.osgi.framework.Filter</code> that is used to filter
0: 	 *        the roles by applying to the properties, if <code>null</code>
0: 	 *        all roles are returned.
0: 	 * 
0: 	 * @return The list the role names
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	String[] getRoles(String filter) throws IOException;
1: 
0: 	/**
0: 	 * Answer the User associated with the user name.
0: 	 * 
0: 	 * The returned Composite Data is typed by {@link #USER_TYPE}.
0: 	 * 
0: 	 * @param username The name of the requested user
0: 	 * @return The User, see {@link #USER_TYPE}
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the <code>username</code> is not a
0: 	 *         User
0: 	 */
0: 	CompositeData getUser(String username) throws IOException;
1: 
0: 	/**
0: 	 * Answer the user name with the given property key-value pair from the User
0: 	 * Admin service database.
0: 	 * 
0: 	 * @param key The key to compare
0: 	 * @param value The value to compare
0: 	 * @return The User
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	String getUserWithProperty(String key, String value) throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of user names in the User Admin database
0: 	 * 
0: 	 * @return The list of user names
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	String[] listUsers() throws IOException;
1: 
0: 	/**
0: 	 * Answer the list of user names in the User Admin database
0: 	 * 
0: 	 * @param filter The filter to apply
0: 	 * @return The list of user names
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	String[] getUsers(String filter) throws IOException;
1: 
0: 	/**
0: 	 * Remove the credential associated with the given user
0: 	 * 
0: 	 * @param key The key of the credential to remove
0: 	 * @param username The name of the user for which the credential must be
0: 	 *        removed
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the username is not a User
0: 	 */
0: 	void removeCredential(String key, String username) throws IOException;
1: 
0: 	/**
0: 	 * Remove a role from the group
0: 	 * 
0: 	 * @param groupname The group name
0: 	 * @param rolename
0: 	 * @return true if the role was removed from the group
0: 	 * @throws IOException if the operation fails
0: 	 * @throws IllegalArgumentException if the groupname is not a Group
0: 	 */
0: 	boolean removeMember(String groupname, String rolename) throws IOException;
1: 
0: 	/**
0: 	 * Remove a property from a role
0: 	 * 
0: 	 * @param key
0: 	 * @param rolename
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	void removeProperty(String key, String rolename) throws IOException;
1: 
0: 	/**
0: 	 * Remove the Role associated with the name
0: 	 * 
0: 	 * @param name
0: 	 * @return true if the remove succeeded
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	boolean removeRole(String name) throws IOException;
1: 
0: 	/**
0: 	 * Remove the Group associated with the name
0: 	 * 
0: 	 * @param name
0: 	 * @return true if the remove succeeded
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	boolean removeGroup(String name) throws IOException;
1: 
0: 	/**
0: 	 * Remove the User associated with the name
0: 	 * 
0: 	 * @param name
0: 	 * @return true if the remove succeeded
0: 	 * @throws IOException if the operation fails
0: 	 */
0: 	boolean removeUser(String name) throws IOException;
1: 
0: }
============================================================================