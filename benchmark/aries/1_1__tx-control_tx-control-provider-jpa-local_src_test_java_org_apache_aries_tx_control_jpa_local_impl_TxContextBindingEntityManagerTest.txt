1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:e7c1ea5: package org.apache.aries.tx.control.jpa.local.impl;
1:e7c1ea5: 
1:e7c1ea5: 
1:e7c1ea5: import static org.mockito.Mockito.times;
1:e7c1ea5: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1:e7c1ea5: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:e7c1ea5: 
1:e7c1ea5: import java.sql.SQLException;
1:e7c1ea5: import java.util.HashMap;
1:e7c1ea5: import java.util.Map;
1:e7c1ea5: import java.util.UUID;
1:e7c1ea5: 
1:e7c1ea5: import javax.persistence.EntityManager;
1:e7c1ea5: import javax.persistence.EntityManagerFactory;
1:e7c1ea5: import javax.persistence.EntityTransaction;
1:e7c1ea5: 
1:e7c1ea5: import org.junit.Before;
1:e7c1ea5: import org.junit.Test;
1:e7c1ea5: import org.junit.runner.RunWith;
1:e7c1ea5: import org.mockito.ArgumentCaptor;
1:e7c1ea5: import org.mockito.Mock;
1:e7c1ea5: import org.mockito.Mockito;
1:e7c1ea5: import org.mockito.runners.MockitoJUnitRunner;
1:e7c1ea5: import org.osgi.service.transaction.control.LocalResource;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionContext;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionControl;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionException;
1:e7c1ea5: 
1:e7c1ea5: @RunWith(MockitoJUnitRunner.class)
1:e7c1ea5: public class TxContextBindingEntityManagerTest {
1:e7c1ea5: 
1:e7c1ea5: 	@Mock
1:e7c1ea5: 	TransactionControl control;
1:e7c1ea5: 	
1:e7c1ea5: 	@Mock
1:e7c1ea5: 	TransactionContext context;
1:e7c1ea5: 	
1:e7c1ea5: 	@Mock
1:e7c1ea5: 	EntityManagerFactory emf;
1:e7c1ea5: 	
1:e7c1ea5: 	@Mock
1:e7c1ea5: 	EntityManager rawEm;
1:e7c1ea5: 
1:e7c1ea5: 	@Mock
1:e7c1ea5: 	EntityTransaction et;
1:e7c1ea5: 	
1:e7c1ea5: 	Map<Object, Object> variables = new HashMap<>();
1:e7c1ea5: 	
1:e7c1ea5: 	UUID id = UUID.randomUUID();
1:e7c1ea5: 	
1:e7c1ea5: 	TxContextBindingEntityManager em;
1:e7c1ea5: 	
1:e7c1ea5: 	@Before
1:e7c1ea5: 	public void setUp() throws SQLException {
1:e7c1ea5: 		Mockito.when(emf.createEntityManager()).thenReturn(rawEm).thenReturn(null);
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.when(rawEm.getTransaction()).thenReturn(et);
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.doAnswer(i -> variables.put(i.getArguments()[0], i.getArguments()[1]))
1:e7c1ea5: 			.when(context).putScopedValue(Mockito.any(), Mockito.any());
1:e7c1ea5: 		Mockito.when(context.getScopedValue(Mockito.any()))
1:e7c1ea5: 			.thenAnswer(i -> variables.get(i.getArguments()[0]));
1:e7c1ea5: 		
1:e7c1ea5: 		em = new TxContextBindingEntityManager(control, emf, id);
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	private void setupNoTransaction() {
1:e7c1ea5: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1:e7c1ea5: 		Mockito.when(context.getTransactionStatus()).thenReturn(NO_TRANSACTION);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	private void setupActiveTransaction() {
1:e7c1ea5: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1:e7c1ea5: 		Mockito.when(context.supportsLocal()).thenReturn(true);
1:e7c1ea5: 		Mockito.when(context.getTransactionStatus()).thenReturn(ACTIVE);
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	
1:e7c1ea5: 	@Test(expected=TransactionException.class)
1:e7c1ea5: 	public void testUnscoped() throws SQLException {
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testNoTransaction() throws SQLException {
1:e7c1ea5: 		setupNoTransaction();
1:e7c1ea5: 		
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.verify(rawEm, times(2)).isOpen();
1:e7c1ea5: 		Mockito.verify(rawEm, times(0)).getTransaction();
1:e7c1ea5: 		Mockito.verify(context, times(0)).registerLocalResource(Mockito.any());
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.verify(context).postCompletion(Mockito.any());
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testActiveTransactionCommit() throws SQLException {
1:e7c1ea5: 		setupActiveTransaction();
1:e7c1ea5: 		
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 		
1:e7c1ea5: 		ArgumentCaptor<LocalResource> captor = ArgumentCaptor.forClass(LocalResource.class);
1:e7c1ea5: 
1:e7c1ea5: 		Mockito.verify(rawEm, times(2)).isOpen();
1:e7c1ea5: 		Mockito.verify(et).begin();
1:e7c1ea5: 		Mockito.verify(et, times(0)).commit();
1:e7c1ea5: 		Mockito.verify(et, times(0)).rollback();
1:e7c1ea5: 		Mockito.verify(context).registerLocalResource(captor.capture());
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.verify(context).postCompletion(Mockito.any());
1:e7c1ea5: 		
1:e7c1ea5: 		captor.getValue().commit();
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.verify(et).commit();
1:e7c1ea5: 		Mockito.verify(et, times(0)).rollback();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Test
1:e7c1ea5: 	public void testActiveTransactionRollback() throws SQLException {
1:e7c1ea5: 		setupActiveTransaction();
1:e7c1ea5: 		
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 		
1:e7c1ea5: 		ArgumentCaptor<LocalResource> captor = ArgumentCaptor.forClass(LocalResource.class);
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.verify(rawEm, times(2)).isOpen();
1:e7c1ea5: 		Mockito.verify(et).begin();
1:e7c1ea5: 		Mockito.verify(et, times(0)).commit();
1:e7c1ea5: 		Mockito.verify(et, times(0)).rollback();
1:e7c1ea5: 		Mockito.verify(context).registerLocalResource(captor.capture());
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.verify(context).postCompletion(Mockito.any());
1:e7c1ea5: 		
1:e7c1ea5: 		captor.getValue().rollback();
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.verify(et).rollback();
1:e7c1ea5: 		Mockito.verify(et, times(0)).commit();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Test(expected=TransactionException.class)
1:e7c1ea5: 	public void testActiveTransactionNoLocal() throws SQLException {
1:e7c1ea5: 		setupActiveTransaction();
1:e7c1ea5: 		
1:e7c1ea5: 		Mockito.when(context.supportsLocal()).thenReturn(false);
1:e7c1ea5: 		em.isOpen();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.local.impl;
1: 
1: 
1: import static org.mockito.Mockito.times;
1: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: 
1: import java.sql.SQLException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.UUID;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.EntityTransaction;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.ArgumentCaptor;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class TxContextBindingEntityManagerTest {
1: 
1: 	@Mock
1: 	TransactionControl control;
1: 	
1: 	@Mock
1: 	TransactionContext context;
1: 	
1: 	@Mock
1: 	EntityManagerFactory emf;
1: 	
1: 	@Mock
1: 	EntityManager rawEm;
1: 
1: 	@Mock
1: 	EntityTransaction et;
1: 	
1: 	Map<Object, Object> variables = new HashMap<>();
1: 	
1: 	UUID id = UUID.randomUUID();
1: 	
1: 	TxContextBindingEntityManager em;
1: 	
1: 	@Before
1: 	public void setUp() throws SQLException {
1: 		Mockito.when(emf.createEntityManager()).thenReturn(rawEm).thenReturn(null);
1: 		
1: 		Mockito.when(rawEm.getTransaction()).thenReturn(et);
1: 		
1: 		Mockito.doAnswer(i -> variables.put(i.getArguments()[0], i.getArguments()[1]))
1: 			.when(context).putScopedValue(Mockito.any(), Mockito.any());
1: 		Mockito.when(context.getScopedValue(Mockito.any()))
1: 			.thenAnswer(i -> variables.get(i.getArguments()[0]));
1: 		
1: 		em = new TxContextBindingEntityManager(control, emf, id);
1: 	}
1: 	
1: 	private void setupNoTransaction() {
1: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1: 		Mockito.when(context.getTransactionStatus()).thenReturn(NO_TRANSACTION);
1: 	}
1: 
1: 	private void setupActiveTransaction() {
1: 		Mockito.when(control.getCurrentContext()).thenReturn(context);
1: 		Mockito.when(context.supportsLocal()).thenReturn(true);
1: 		Mockito.when(context.getTransactionStatus()).thenReturn(ACTIVE);
1: 	}
1: 	
1: 	
1: 	@Test(expected=TransactionException.class)
1: 	public void testUnscoped() throws SQLException {
1: 		em.isOpen();
1: 	}
1: 
1: 	@Test
1: 	public void testNoTransaction() throws SQLException {
1: 		setupNoTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(rawEm, times(0)).getTransaction();
1: 		Mockito.verify(context, times(0)).registerLocalResource(Mockito.any());
1: 		
1: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 	}
1: 
1: 	@Test
1: 	public void testActiveTransactionCommit() throws SQLException {
1: 		setupActiveTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		ArgumentCaptor<LocalResource> captor = ArgumentCaptor.forClass(LocalResource.class);
1: 
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(et).begin();
1: 		Mockito.verify(et, times(0)).commit();
1: 		Mockito.verify(et, times(0)).rollback();
1: 		Mockito.verify(context).registerLocalResource(captor.capture());
1: 		
1: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 		
1: 		captor.getValue().commit();
1: 		
1: 		Mockito.verify(et).commit();
1: 		Mockito.verify(et, times(0)).rollback();
1: 	}
1: 
1: 	@Test
1: 	public void testActiveTransactionRollback() throws SQLException {
1: 		setupActiveTransaction();
1: 		
1: 		em.isOpen();
1: 		em.isOpen();
1: 		
1: 		ArgumentCaptor<LocalResource> captor = ArgumentCaptor.forClass(LocalResource.class);
1: 		
1: 		Mockito.verify(rawEm, times(2)).isOpen();
1: 		Mockito.verify(et).begin();
1: 		Mockito.verify(et, times(0)).commit();
1: 		Mockito.verify(et, times(0)).rollback();
1: 		Mockito.verify(context).registerLocalResource(captor.capture());
1: 		
1: 		Mockito.verify(context).postCompletion(Mockito.any());
1: 		
1: 		captor.getValue().rollback();
1: 		
1: 		Mockito.verify(et).rollback();
1: 		Mockito.verify(et, times(0)).commit();
1: 	}
1: 
1: 	@Test(expected=TransactionException.class)
1: 	public void testActiveTransactionNoLocal() throws SQLException {
1: 		setupActiveTransaction();
1: 		
1: 		Mockito.when(context.supportsLocal()).thenReturn(false);
1: 		em.isOpen();
1: 	}
1: 
1: }
============================================================================