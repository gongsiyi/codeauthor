1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.apache.aries.jmx.blueprint;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.ArrayType;
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeType;
1:fdf3952: import javax.management.openmbean.SimpleType;
1:fdf3952: 
1:fdf3952: 
1:fdf3952: public interface BlueprintMetadataMBean {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The object name for this MBean.
1:fdf3952:      */
1:fdf3952:     String OBJECTNAME = JmxConstants.ARIES_BLUEPRINT+":service=blueprintMetadata,version=1.0";
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <value>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key STRING_VALUE, used in {@link #STRING_VALUE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          STRING_VALUE            = "StringValue";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the un-converted string representation of the value.
1:fdf3952:      * The key is {@link #STRING_VALUE}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            STRING_VALUE_ITEM       = new Item(
1:fdf3952:                                                     STRING_VALUE, 
1:fdf3952:                                                     "The un-converted string representation of a value", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key TYPE, used in {@link #TYPE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          TYPE                    = "Type";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the type to which the value should be converted.
1:fdf3952:      * The key is {@link #TYPE}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            TYPE_ITEM               = new Item(
1:fdf3952:                                                     TYPE, 
1:fdf3952:                                                     "The type of a value", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for ValueMetadata objects, used in {@link #VALUE_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          VALUE_METADATA          = "ValueMetadata";
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType encapsulates ValueMetadata objects. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #STRING_VALUE}</li>
1:fdf3952:      * <li>{@link #TYPE}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   VALUE_METADATA_TYPE     = Item.compositeType(
1:fdf3952:                                                     VALUE_METADATA, 
1:fdf3952:                                                     "This type encapsulates ValueMetadata objects", 
1:fdf3952:                                                     STRING_VALUE_ITEM, 
1:fdf3952:                                                     TYPE_ITEM);                  
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <null>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////  
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key PLACEHOLDER, used in {@link #PLACEHOLDER_ITEM}.
1:fdf3952:      */ 
1:fdf3952:     String          PLACEHOLDER             = "Placeholder";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item is a placeholder in the null metadata type.
1:fdf3952:      * The key is {@link #PLACEHOLDER}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            PLACEHOLDER_ITEM        = new Item(
1:fdf3952:                                                     PLACEHOLDER, 
1:fdf3952:                                                     "This is a placeholder", 
1:fdf3952:                                                     SimpleType.VOID);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for NullMetadata objects, used in {@link #NULL_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          NULL_METADATA          = "NullMetadata";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for NullMetadata objects. A composite type requires at least one item, so we add a placeholder item.
1:fdf3952:      */
1:fdf3952:     CompositeType   NULL_METADATA_TYPE      = Item.compositeType(
1:fdf3952:                                                     NULL_METADATA, 
1:fdf3952:                                                     "This type encapsulates NullMetadata objects", 
1:fdf3952:                                                     PLACEHOLDER_ITEM);
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <ref>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////      
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key COMPONENT_ID, used in {@link #COMPONENT_ID_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          COMPONENT_ID            = "ComponentId";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the component id to which the "ref" associates.
1:fdf3952:      * The key is {@link #COMPONENT_ID}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            COMPONENT_ID_ITEM       = new Item(
1:fdf3952:                                                     COMPONENT_ID,
1:fdf3952:                                                     "The component id",
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for RefMetadata objects, used in {@link #REF_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          REF_METADATA          = "RefMetadata";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a RefMetadata object. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #COMPONENT_ID}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   REF_METADATA_TYPE       = Item.compositeType(
1:fdf3952:                                                     REF_METADATA, 
1:fdf3952:                                                     "This type encapsulates RefMetadata objects", 
1:fdf3952:                                                     COMPONENT_ID_ITEM);
1:fdf3952: 
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <idref>'s CompositeType
1:fdf3952:     // COMPONENT_ID_ITEM defined in <ref>'s definition
1:fdf3952:     ///////////////////////////////////////////////////////////////  
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for IdRefMetadata objects, used in {@link #ID_REF_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          ID_REF_METADATA          = "IdRefMetadata";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for an IdRefMetadata object. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #COMPONENT_ID}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   ID_REF_METADATA_TYPE    = Item.compositeType(
1:fdf3952:                                                     ID_REF_METADATA, 
1:fdf3952:                                                     "This type encapsulates IdRefMetadata objects", 
1:fdf3952:                                                     COMPONENT_ID_ITEM);
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <entry>'s CompositeType, 
1:fdf3952:     // used by MapMetadata, PropsMetadata, and Service properties
1:fdf3952:     ///////////////////////////////////////////////////////////////    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key KEY, used in {@link #KEY_ITEM}.
1:fdf3952:      */    
1:fdf3952:     String          KEY                     = "Key";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the key of an entry.
1:fdf3952:      * The key is {@link #KEY}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            KEY_ITEM                = new Item(
1:fdf3952:                                                     KEY,
1:fdf3952:                                                     "The key of an entry",
1:fdf3952:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:     * The key VALUE, used in {@link #VALUE_ITEM}.
1:fdf3952:     */
1:fdf3952:     String          VALUE                   = "Value";
1:fdf3952:        
1:fdf3952:     /**
1:fdf3952:     * The item containing a value and this will be used by 
1:fdf3952:     * BeanArgument, BeanProperty, MapEntry and CollectionMetadata.
1:fdf3952:     * The key is {@link #VALUE}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:fdf3952:     */
1:fdf3952:     Item            VALUE_ITEM              = new Item(
1:fdf3952:                                                    VALUE, 
1:fdf3952:                                                    "A value", 
1:fdf3952:                                                    JmxConstants.BYTE_ARRAY_TYPE);  
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for MapEntry objects, used in {@link #MAP_ENTRY_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          MAP_ENTRY          = "MapEntry";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a MapEntry object. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #KEY}</li>
1:fdf3952:      * <li>{@link #VALUE}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   MAP_ENTRY_TYPE          = Item.compositeType(
1:fdf3952:                                                    MAP_ENTRY, 
1:fdf3952:                                                    "This type encapsulates MapEntry objects",
1:fdf3952:                                                    KEY_ITEM,
1:fdf3952:                                                    VALUE_ITEM);
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <map>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key ENTRIES, used in {@link #ENTRIES_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          ENTRIES                 = "Entries";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing an array of entries
1:fdf3952:      * The key is {@link #ENTRIES}, and the type is {@link ArrayType}.
1:fdf3952:      */
1:fdf3952:     Item            ENTRIES_ITEM            = new Item(
1:fdf3952:                                                     ENTRIES,
1:fdf3952:                                                     "An array of entries",
1:fdf3952:                                                     Item.arrayType(1, MAP_ENTRY_TYPE));
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key KEY_TYPE, used in {@link #KEY_TYPE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          KEY_TYPE                = "KeyType";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the key type of the entries.
1:fdf3952:      * The key is {@link #KEY_TYPE}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            KEY_TYPE_ITEM           = new Item(
1:fdf3952:                                                     KEY_TYPE,
1:fdf3952:                                                     "The key type of the entries",
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key VALUE_TYPE, used in {@link #VALUE_TYPE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          VALUE_TYPE              = "ValueType";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the value type that the value should be
1:fdf3952:      * The key is {@link #VALUE_TYPE}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            VALUE_TYPE_ITEM         = new Item(
1:fdf3952:                                                     VALUE_TYPE, 
1:fdf3952:                                                     "The value type", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for MapMetadata objects, used in {@link #MAP_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          MAP_METADATA          = "MapMetadata";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a MapMetadata object. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #ENTRIES}</li>
1:fdf3952:      * <li>{@link #KEY_TYPE}</li>
1:fdf3952:      * <li>{@link #VALUE_TYPE}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   MAP_METADATA_TYPE       = Item.compositeType(
1:fdf3952:                                                     MAP_METADATA, 
1:fdf3952:                                                     "This type encapsulates MapMetadata objects",
1:fdf3952:                                                     ENTRIES_ITEM,
1:fdf3952:                                                     KEY_TYPE_ITEM,
1:fdf3952:                                                     VALUE_TYPE_ITEM);
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <props>'s CompositeType
1:fdf3952:     // ENTRIES_ITEM defined in <map>'s definition
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for PropsMetadata objects, used in {@link #PROPS_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          PROPS_METADATA          = "PropsMetadata";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a PropsMetadata object. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #ENTRIES}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   PROPS_METADATA_TYPE     = Item.compositeType(
1:fdf3952:                                                     PROPS_METADATA, 
1:fdf3952:                                                     "This type encapsulates PropsMetadata objects",
1:fdf3952:                                                     ENTRIES_ITEM);
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <collection>'s CompositeType
1:fdf3952:     // VALUE_TYPE_ITEM defined in <map>'s definition
1:fdf3952:     ///////////////////////////////////////////////////////////////   
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key COLLECTION_CLASS, used in {@link #KEY_TYPE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          COLLECTION_CLASS        = "CollectionClass";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the type of this collection
1:fdf3952:      * The key is {@link #COLLECTION_CLASS}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            COLLECTION_CLASS_ITEM   = new Item(
1:fdf3952:                                                     COLLECTION_CLASS,
1:fdf3952:                                                     "The type of this collection",
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key VALUES, used in {@link #VALUES_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          VALUES                  = "Values";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing all the values
1:fdf3952:      * The key is {@link #VALUES}, and the type is {@link ArrayType}.
1:fdf3952:      */
1:fdf3952:     Item            VALUES_ITEM             = new Item(
1:fdf3952:                                                     VALUES,
1:fdf3952:                                                     "All the values",
1:fdf3952:                                                     Item.arrayType(2, SimpleType.BYTE));
1:fdf3952:     
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for CollectionMetadata objects, used in {@link #COLLECTION_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          COLLECTION_METADATA          = "CollectionMetadata";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a CollectionMetadata object. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #COLLECTION_CLASS}</li>
1:fdf3952:      * <li>{@link #VALUES}</li>
1:fdf3952:      * <li>{@link #VALUE_TYPE}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   COLLECTION_METADATA_TYPE= Item.compositeType(
1:fdf3952:                                                     COLLECTION_METADATA, 
1:fdf3952:                                                     "This type encapsulates CollectionMetadata objects",
1:fdf3952:                                                     COLLECTION_CLASS_ITEM,
1:fdf3952:                                                     VALUES_ITEM,
1:fdf3952:                                                     VALUE_TYPE_ITEM);
1:fdf3952:    
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <argument>'s CompositeType
1:fdf3952:     // VALUE_TYPE_ITEM defined in <map>'s definition
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key INDEX, used in {@link #INDEX_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          INDEX                   = "Index";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the zero-based index into the parameter list of
1:fdf3952:      * the factory method or constructor to be invoked for this argument.
1:fdf3952:      * The key is {@link #INDEX}, and the type is {@link SimpleType#INTEGER}.
1:fdf3952:      */
1:fdf3952:     Item            INDEX_ITEM              = new Item(
1:fdf3952:                                                     INDEX, 
1:fdf3952:                                                     "The zero-based index", 
1:fdf3952:                                                     SimpleType.INTEGER);
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for BeanArgument objects, used in {@link #BEAN_ARGUMENT_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          BEAN_ARGUMENT               = "BeanArgument";    
1:fdf3952: 
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a Argument object. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #INDEX}</li>
1:fdf3952:      * <li>{@link #VALUE_TYPE}</li>
1:fdf3952:      * <li>{@link #VALUE}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   BEAN_ARGUMENT_TYPE          = Item.compositeType(
1:fdf3952:                                                     BEAN_ARGUMENT,
1:fdf3952:                                                     "This type encapsulates BeanArgument objects",
1:fdf3952:                                                     INDEX_ITEM,
1:fdf3952:                                                     VALUE_TYPE_ITEM,
1:fdf3952:                                                     VALUE_ITEM);
1:fdf3952:        
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <property>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key NAME, used in {@link #NAME_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          NAME                    = "Name";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the property to be injected.
1:fdf3952:      * The key is {@link #NAME}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            NAME_ITEM               = new Item(
1:fdf3952:                                                     NAME,
1:fdf3952:                                                     "The name of the property",
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for BeanProperty objects, used in {@link #BEAN_PROPERTY_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          BEAN_PROPERTY               = "BeanProperty";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for property type. It contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #NAME}</li>
1:fdf3952:      * <li>{@link #VALUE}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   BEAN_PROPERTY_TYPE           = Item.compositeType(
1:fdf3952:                                                     BEAN_PROPERTY, 
1:fdf3952:                                                     "This type encapsulates BeanProperty objects",
1:fdf3952:                                                     NAME_ITEM,
1:fdf3952:                                                     VALUE_ITEM);
1:fdf3952:         
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define Component's CompositeType
1:fdf3952:     // <bean>, <service> & Service Reference's CompositeType will 
1:fdf3952:     // extend this.
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key ID, used in {@link #ID_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          ID                    = "Id";
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The item containing the component id of a component. 
1:fdf3952:      * The key is {@link #ID}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            ID_ITEM       = new Item(
1:fdf3952:                                                     ID,
1:fdf3952:                                                     "The id of the component",
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     /**
1:fdf3952:      * The key ACTIVATION, used in {@link #ACTIVATION_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          ACTIVATION              = "Activation";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the activation strategy for a component. 
1:fdf3952:      * The key is {@link #ACTIVATION}, and the type is {@link SimpleType#INTEGER}.
1:fdf3952:      */
1:fdf3952:     Item            ACTIVATION_ITEM         = new Item(
1:fdf3952:                                                     ACTIVATION,
1:fdf3952:                                                     "The activation strategy for a component",
1:fdf3952:                                                     SimpleType.INTEGER);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key DEPENDS_ON, used in {@link #DEPENDS_ON_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          DEPENDS_ON              = "DependsOn";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the ids of any components listed in a <code>depends-on</code> attribute for the component. 
1:fdf3952:      * The key is {@link #DEPENDS_ON}, and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
1:fdf3952:      */
1:fdf3952:     Item            DEPENDS_ON_ITEM         = new Item(
1:fdf3952:                                                     DEPENDS_ON,
1:fdf3952:                                                     "The ids of any components listed in a depends-on attribute",
1:fdf3952:                                                     JmxConstants.STRING_ARRAY_TYPE);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for ComponentMetadata objects, used in {@link #COMPONENT_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          COMPONENT_METADATA               = "ComponentMetadata";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a ComponentMetadata object, it contains 
1:fdf3952:      * the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #ID}</li>
1:fdf3952:      * <li>{@link #ACTIVATION}</li>
1:fdf3952:      * <li>{@link #DEPENDS_ON}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   COMPONENT_METADATA_TYPE     = Item.compositeType(
1:fdf3952:                                                     COMPONENT_METADATA,
1:fdf3952:                                                     "This type encapsulates ComponentMetadata objects",
1:fdf3952:                                                     ID_ITEM,
1:fdf3952:                                                     ACTIVATION_ITEM,
1:fdf3952:                                                     DEPENDS_ON_ITEM);
1:fdf3952:                             
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <bean>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key CLASS_NAME, used in {@link #CLASS_NAME_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          CLASS_NAME              = "ClassName";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the class specified for the bean. 
1:fdf3952:      * The key is {@link #CLASS_NAME}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            CLASS_NAME_ITEM         = new Item(
1:fdf3952:                                                     CLASS_NAME,
1:fdf3952:                                                     "The name of the class specified for the bean",
1:fdf3952:                                                     SimpleType.STRING
1:fdf3952:                                                     );
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key INIT_METHOD, used in {@link #INIT_METHOD_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          INIT_METHOD             = "InitMethod";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the init method specified for the bean.
1:fdf3952:      * The key is {@link #INIT_METHOD}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            INIT_METHOD_ITEM        = new Item(
1:fdf3952:                                                     INIT_METHOD, 
1:fdf3952:                                                     "The name of the init method specified for the bean", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key DESTROY_METHOD, used in {@link #DESTROY_METHOD_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          DESTROY_METHOD          = "DestroyMethod";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the destroy method specified for the bean.
1:fdf3952:      * The key is {@link #DESTROY_METHOD}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            DESTROY_METHOD_ITEM     = new Item(
1:fdf3952:                                                     DESTROY_METHOD, 
1:fdf3952:                                                     "The name of the destroy method specified for the bean", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The key FACTORY_METHOD, used in {@link #FACTORY_METHOD_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          FACTORY_METHOD          = "FactoryMethod";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the factory method specified for the bean.
1:fdf3952:      * The key is {@link #FACTORY_METHOD}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            FACTORY_METHOD_ITEM     = new Item(
1:fdf3952:                                                     FACTORY_METHOD, 
1:fdf3952:                                                     "The name of the factory method specified for the bean", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key FACTORY_COMPONENT, used in {@link #FACTORY_COMPONENT_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          FACTORY_COMPONENT       = "FactoryComponent";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the id of the factory component on which to invoke the factory method for the bean.
1:fdf3952:      * The key is {@link #FACTORY_COMPONENT}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:fdf3952:      */
1:fdf3952:     Item            FACTORY_COMPONENT_ITEM  = new Item(
1:fdf3952:                                                     FACTORY_COMPONENT, 
1:fdf3952:                                                     "The factory component on which to invoke the factory method for the bean", 
1:fdf3952:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key SCOPE, used in {@link #SCOPE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          SCOPE                   = "Scope";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the scope for the bean.
1:fdf3952:      * The key is {@link #SCOPE}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            SCOPE_ITEM              = new Item(
1:fdf3952:                                                     SCOPE, 
1:fdf3952:                                                     "The scope for the bean", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The key ARGUMENT, used in {@link #ARGUMENTS_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          ARGUMENTS                   = "Arguments";
1:fdf3952:         
1:fdf3952:     /**
1:fdf3952:      * The item containing the bean argument for the bean's compositeType.
1:fdf3952:      * The key is {@link #ARGUMENTS}, and the type is {@link ARGUMENT_TYPE}.
1:fdf3952:      */
1:fdf3952:     Item           ARGUMENTS_ITEM     = new Item(
1:fdf3952:                                                     ARGUMENTS, 
1:fdf3952:                                                     "The bean argument", 
1:fdf3952:                                                     Item.arrayType(1, BEAN_ARGUMENT_TYPE));
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key PROPERTY, used in {@link #PROPERTIES_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          PROPERTIES         = "Properties";
1:fdf3952:         
1:fdf3952:     /**
1:fdf3952:      * The item containing the bean property for the bean's compositeType.
1:fdf3952:      * The key is {@link #PROPERTIES}, and the type is {@link PROPERTY_TYPE}.
1:fdf3952:      */
1:fdf3952:     Item            PROPERTIES_ITEM    = new Item(
1:fdf3952:                                                     PROPERTIES, 
1:fdf3952:                                                     "The bean property", 
1:fdf3952:                                                     Item.arrayType(1, BEAN_PROPERTY_TYPE));
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for BeanMetadata objects, used in {@link #BEAN_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          BEAN_METADATA               = "BeanMetadata";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a BeanMetadata object, it extends {@link #COMPONENT_METADATA_TYPE} 
1:fdf3952:      * and adds the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #CLASS_NAME}</li>
1:fdf3952:      * <li>{@link #INIT_METHOD}</li>
1:fdf3952:      * <li>{@link #DESTROY_METHOD}</li>
1:fdf3952:      * <li>{@link #FACTORY_METHOD}</li>
1:fdf3952:      * <li>{@link #FACTORY_COMPONENT}</li>
1:fdf3952:      * <li>{@link #SCOPE}</li>
1:fdf3952:      * <li>{@link #ARGUMENTS}</li>
1:fdf3952:      * <li>{@link #PROPERTIES}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   BEAN_METADATA_TYPE      = Item.extend(
1:fdf3952:                                                     COMPONENT_METADATA_TYPE, 
1:fdf3952:                                                     BEAN_METADATA, 
1:fdf3952:                                                     "This type encapsulates BeanMetadata objects",
1:fdf3952:                                                     CLASS_NAME_ITEM,
1:fdf3952:                                                     INIT_METHOD_ITEM,
1:fdf3952:                                                     DESTROY_METHOD_ITEM, 
1:fdf3952:                                                     FACTORY_METHOD_ITEM,
1:fdf3952:                                                     FACTORY_COMPONENT_ITEM,
1:fdf3952:                                                     SCOPE_ITEM,
1:fdf3952:                                                     ARGUMENTS_ITEM,
1:fdf3952:                                                     PROPERTIES_ITEM);
1:fdf3952: 
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <registration-listener>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key LISTENER_COMPONENT, used in {@link #LISTENER_COMPONENT_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          LISTENER_COMPONENT      = "ListenerComponent";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the listener component.
1:fdf3952:      * The key is {@link #LISTENER_COMPONENT}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:fdf3952:      */
1:fdf3952:     Item            LISTENER_COMPONENT_ITEM = new Item(
1:fdf3952:                                                     LISTENER_COMPONENT, 
1:fdf3952:                                                     "The listener component", 
1:fdf3952:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key REGISTRATION_METHOD, used in {@link #REGISTRATION_METHOD_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          REGISTRATION_METHOD     = "RegistrationMethod";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the registration method.
1:fdf3952:      * The key is {@link #REGISTRATION_METHOD}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            REGISTRATION_METHOD_ITEM    = new Item(
1:fdf3952:                                                     REGISTRATION_METHOD, 
1:fdf3952:                                                     "The name of the registration method", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key UNREGISTRATION_METHOD, used in {@link #UNREGISTRATION_METHOD_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          UNREGISTRATION_METHOD       = "UnregistrationMethod";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the unregistration method.
1:fdf3952:      * The key is {@link #UNREGISTRATION_METHOD}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            UNREGISTRATION_METHOD_ITEM  = new Item(
1:fdf3952:                                                     UNREGISTRATION_METHOD, 
1:fdf3952:                                                     "The name of the unregistration method", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for RegistrationListener objects, used in {@link #REGISTRATION_LISTENER_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          REGISTRATION_LISTENER               = "RegistrationListener";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a registration listener, and it contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #LISTENER_COMPONENT}</li>
1:fdf3952:      * <li>{@link #REGISTRATION_METHOD}</li>
1:fdf3952:      * <li>{@link #UNREGISTRATION_METHOD}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   REGISTRATION_LISTENER_TYPE  = Item.compositeType(
1:fdf3952:                                                     REGISTRATION_LISTENER, 
1:fdf3952:                                                     "This type encapsulates RegistrationListener objects",
1:fdf3952:                                                     LISTENER_COMPONENT_ITEM,
1:fdf3952:                                                     REGISTRATION_METHOD_ITEM,
1:fdf3952:                                                     UNREGISTRATION_METHOD_ITEM);
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <service>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key INTERFACES, used in {@link #INTERFACES_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          INTERFACES              = "Interfaces";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the type names of the interfaces that the service should be advertised as supporting.
1:fdf3952:      * The key is {@link #INTERFACES}, and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
1:fdf3952:      */
1:fdf3952:     Item            INTERFACES_ITEM         = new Item(
1:fdf3952:                                                     INTERFACES, 
1:fdf3952:                                                     "The type names of the interfaces", 
1:fdf3952:                                                     JmxConstants.STRING_ARRAY_TYPE);
1:fdf3952:     /**
1:fdf3952:      * The key AUTO_EXPORT, used in {@link #AUTO_EXPORT_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          AUTO_EXPORT             = "AutoExport";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the auto-export mode for the service.
1:fdf3952:      * The key is {@link #AUTO_EXPORT}, and the type is {@link SimpleType#INTEGER}.
1:fdf3952:      */
1:fdf3952:     //TODO describe integer
1:fdf3952:     Item            AUTO_EXPORT_ITEM        = new Item(
1:fdf3952:                                                     AUTO_EXPORT, 
1:fdf3952:                                                     "The auto-export mode for the service", 
1:fdf3952:                                                     SimpleType.INTEGER);
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The key RANKING, used in {@link #RANKING_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          RANKING                 = "Ranking";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the ranking value to use when advertising the service.
1:fdf3952:      * The key is {@link #RANKING}, and the type is {@link SimpleType#INTEGER}.
1:fdf3952:      */
1:fdf3952:     Item            RANKING_ITEM            = new Item(
1:fdf3952:                                                     RANKING, 
1:fdf3952:                                                     "The ranking value when advertising the service", 
1:fdf3952:                                                     SimpleType.INTEGER);
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The key SERVICE_COMPONENT, used in {@link #SERVICE_COMPONENT_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          SERVICE_COMPONENT       = "ServiceComponent";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the id of the component to be exported as a service.
1:fdf3952:      * The key is {@link #SERVICE_COMPONENT}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:fdf3952:      */
1:fdf3952:     Item            SERVICE_COMPONENT_ITEM  = new Item(
1:fdf3952:                                                     SERVICE_COMPONENT, 
1:fdf3952:                                                     "The component to be exported as a service", 
1:fdf3952:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key SERVICE_PROPERTIES, used in {@link #SERVICE_PROPERTIES_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          SERVICE_PROPERTIES      = "ServiceProperties";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the user declared properties to be advertised with the service.
1:fdf3952:      * The key is {@link #SERVICE_COMPONENT}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            SERVICE_PROPERTIES_ITEM = new Item(
1:fdf3952:                                                     SERVICE_PROPERTIES,
1:fdf3952:                                                     "The user declared properties to be advertised with the service",
1:fdf3952:                                                     Item.arrayType(1, MAP_ENTRY_TYPE));
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key REGISTRATION_LISTENERS, used in {@link #SERVICE_LISTENERS_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          REGISTRATION_LISTENERS  = "RegistrationListeners";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing all the registration listeners.
1:fdf3952:      * The key is {@link #REGISTRATION_LISTENERS}, and the type is {@link ArrayType}.
1:fdf3952:      */
1:fdf3952:     Item            REGISTRATION_LISTENERS_ITEM = new Item(
1:fdf3952:                                                     REGISTRATION_LISTENERS,
1:fdf3952:                                                     "All the registration listeners",
1:fdf3952:                                                     Item.arrayType(1, REGISTRATION_LISTENER_TYPE));
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for ServiceMetadata objects, used in {@link #SERVICE_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          SERVICE_METADATA               = "ServiceMetadata";    
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a ServiceMetadata object, it extends {@link #COMPONENT_METADATA_TYPE}
1:fdf3952:      * and adds the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #INTERFACES}</li>
1:fdf3952:      * <li>{@link #AUTO_EXPORT}</li>
1:fdf3952:      * <li>{@link #RANKING}</li>
1:fdf3952:      * <li>{@link #SERVICE_COMPONENT}</li>
1:fdf3952:      * <li>{@link #SERVICE_PROPERTIES}</li>
1:fdf3952:      * <li>{@link #REGISTRATION_LISTENERS}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   SERVICE_METADATA_TYPE   = Item.extend(
1:fdf3952:                                                     COMPONENT_METADATA_TYPE, 
1:fdf3952:                                                     SERVICE_METADATA, 
1:fdf3952:                                                     "This type encapsulates ServiceMetadata objects",
1:fdf3952:                                                     INTERFACES_ITEM,
1:fdf3952:                                                     AUTO_EXPORT_ITEM,
1:fdf3952:                                                     RANKING_ITEM,
1:fdf3952:                                                     SERVICE_COMPONENT_ITEM,
1:fdf3952:                                                     SERVICE_PROPERTIES_ITEM,
1:fdf3952:                                                     REGISTRATION_LISTENERS_ITEM);
1:fdf3952: 
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <reference-listener>'s CompositeType
1:fdf3952:     // LISTENER_COMPONENT_ITEM defined in the <registration-listener>
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key BIND_METHOD, used in {@link #BIND_METHOD_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          BIND_METHOD                 = "BindMethod";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the bind method.
1:fdf3952:      * The key is {@link #BIND_METHOD}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            BIND_METHOD_ITEM            = new Item(
1:fdf3952:                                                     BIND_METHOD, 
1:fdf3952:                                                     "The name of the bind method", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key UNBIND_METHOD, used in {@link #UNBIND_METHOD_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          UNBIND_METHOD               = "UnbindMethod";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the unbind method.
1:fdf3952:      * The key is {@link #UNBIND_METHOD}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            UNBIND_METHOD_ITEM          = new Item(
1:fdf3952:                                                     UNBIND_METHOD, 
1:fdf3952:                                                     "The name of the unbind method", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for ReferenceListener objects, used in {@link #REFERENCE_LISTENER_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          REFERENCE_LISTENER               = "ReferenceListener"; 
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a reference listener, and it contains the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #LISTENER_COMPONENT}</li>
1:fdf3952:      * <li>{@link #BIND_METHOD}</li>
1:fdf3952:      * <li>{@link #UNBIND_METHOD}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   REFERENCE_LISTENER_TYPE  = Item.compositeType(
1:fdf3952:                                                     REFERENCE_LISTENER, 
1:fdf3952:                                                     "This type encapsulates ReferenceListener objects",
1:fdf3952:                                                     LISTENER_COMPONENT_ITEM,
1:fdf3952:                                                     BIND_METHOD_ITEM,
1:fdf3952:                                                     UNBIND_METHOD_ITEM);
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define Service Reference's CompositeType, 
1:fdf3952:     // <reference> & <reference-list> will extend this
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key AVAILABILITY, used in {@link #AVAILABILITY_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          AVAILABILITY            = "Availability";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item specify whether or not a matching service is required at all times.
1:fdf3952:      * The key is {@link #AVAILABILITY}, and the type is {@link SimpleType#INTEGER}.
1:fdf3952:      * 
1:fdf3952:      */
1:fdf3952:     //TODO add description for each int
1:fdf3952:     Item            AVAILABILITY_ITEM       = new Item(
1:fdf3952:                                                     AVAILABILITY, 
1:fdf3952:                                                     "To specify whether or not a matching service is required at all times", 
1:fdf3952:                                                     SimpleType.INTEGER);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key INTERFACE, used in {@link #INTERFACE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          INTERFACE               = "Interface";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the name of the interface type that a matching service must support.
1:fdf3952:      * The key is {@link #INTERFACE}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            INTERFACE_ITEM          = new Item(
1:fdf3952:                                                     INTERFACE, 
1:fdf3952:                                                     "the name of the interface type", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key COMPONENT_NAME, used in {@link #COMPONENT_NAME_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          COMPONENT_NAME          = "ComponentName";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the value of the <code>component-name</code> attribute of the service reference.
1:fdf3952:      * The key is {@link #INTERFACE}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            COMPONENT_NAME_ITEM     = new Item(
1:fdf3952:                                                     COMPONENT_NAME, 
1:fdf3952:                                                     "The value of the component-name attribute of the service reference", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     /**
1:fdf3952:      * The key FILTER, used in {@link #FILTER_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          FILTER                  = "Filter";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the filter expression that a matching service must match.
1:fdf3952:      * The key is {@link #FILTER}, and the type is {@link SimpleType#STRING}.
1:fdf3952:      */
1:fdf3952:     Item            FILTER_ITEM             = new Item(
1:fdf3952:                                                     FILTER, 
1:fdf3952:                                                     "The filter expression that a matching service must match", 
1:fdf3952:                                                     SimpleType.STRING);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key REFERENCE_LISTENERS, used in {@link #SERVICE_LISTENERS_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          REFERENCE_LISTENERS     = "RegistrationListeners";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing all the reference listeners.
1:fdf3952:      * The key is {@link #REFERENCE_LISTENERS}, and the type is {@link ArrayType}.
1:fdf3952:      */
1:fdf3952:     Item            REFERENCE_LISTENERS_ITEM= new Item(
1:fdf3952:                                                     REFERENCE_LISTENERS,
1:fdf3952:                                                     "All the reference listeners",
1:fdf3952:                                                     Item.arrayType(1, REFERENCE_LISTENER_TYPE));
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for ServiceReferenceMetadata objects, used in {@link #SERVICE_REFERENCE_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          SERVICE_REFERENCE_METADATA               = "ServiceReferenceMetadata"; 
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a ServiceReferenceMetadata object, it extends 
1:fdf3952:      * {@link #COMPONENT_METADATA_TYPE} and adds the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #AVAILABILITY}</li>
1:fdf3952:      * <li>{@link #INTERFACE}</li>
1:fdf3952:      * <li>{@link #COMPONENT_NAME}</li>
1:fdf3952:      * <li>{@link #FILTER}</li>
1:fdf3952:      * <li>{@link #REFERENCE_LISTENERS}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   SERVICE_REFERENCE_METADATA_TYPE  = Item.extend(
1:fdf3952:                                                     COMPONENT_METADATA_TYPE, 
1:fdf3952:                                                     SERVICE_REFERENCE_METADATA, 
1:fdf3952:                                                     "This type encapsulates ServiceReferenceMetadata objects",
1:fdf3952:                                                     AVAILABILITY_ITEM,
1:fdf3952:                                                     INTERFACE_ITEM,
1:fdf3952:                                                     COMPONENT_NAME_ITEM,
1:fdf3952:                                                     FILTER_ITEM,
1:fdf3952:                                                     REFERENCE_LISTENERS_ITEM);
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <reference>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key TIME_OUT, used in {@link #TIMEOUT_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          TIMEOUT                = "TimeOut";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item containing the timeout for service invocations when a backing service is is unavailable.
1:fdf3952:      * The key is {@link #TIMEOUT}, and the type is {@link SimpleType#LONG}.
1:fdf3952:      */
1:fdf3952:     Item            TIMEOUT_ITEM           = new Item(
1:fdf3952:                                                     TIMEOUT, 
1:fdf3952:                                                     "The timeout for service invocations when a backing service is is unavailable", 
1:fdf3952:                                                     SimpleType.LONG);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for ReferenceMetadata objects, used in {@link #REFERENCE_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          REFERENCE_METADATA        = "ReferenceMetadata"; 
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a ReferenceMetadata object, it extends 
1:fdf3952:      * {@link #SERVICE_REFERENCE_METADATA_TYPE} and adds the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #TIMEOUT}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   REFERENCE_METADATA_TYPE = Item.extend(
1:fdf3952:                                                     SERVICE_REFERENCE_METADATA_TYPE, 
1:fdf3952:                                                     REFERENCE_METADATA, 
1:fdf3952:                                                     "This type encapsulates ReferenceMetadata objects",
1:fdf3952:                                                     TIMEOUT_ITEM);
1:fdf3952:     
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     // Define <reference-list>'s CompositeType
1:fdf3952:     ///////////////////////////////////////////////////////////////
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The key MEMBER_TYPE, used in {@link #MEMBER_TYPE_ITEM}.
1:fdf3952:      */
1:fdf3952:     String          MEMBER_TYPE             = "MemberType";
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The item specify whether the List will contain service object proxies or ServiceReference objects.
1:fdf3952:      * The key is {@link #MEMBER_TYPE}, and the type is {@link SimpleType#INTEGER}.
1:fdf3952:      */
1:fdf3952:     Item            MEMBER_TYPE_ITEM        = new Item(
1:fdf3952:                                                     MEMBER_TYPE, 
1:fdf3952:                                                     "To specify whether the List will contain service object proxies or ServiceReference objects", 
1:fdf3952:                                                     SimpleType.INTEGER);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The name of CompositeType for ReferenceListMetadata objects, used in {@link #REFERENCE_LIST_METADATA_TYPE}.
1:fdf3952:      */
1:fdf3952:     String          REFERENCE_LIST_METADATA        = "ReferenceListMetadata"; 
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * The CompositeType for a ReferenceListMetadata object, it extends 
1:fdf3952:      * {@link #SERVICE_REFERENCE_METADATA_TYPE} and adds the following items:
1:fdf3952:      * <ul>
1:fdf3952:      * <li>{@link #MEMBER_TYPE}</li>
1:fdf3952:      * </ul>
1:fdf3952:      */
1:fdf3952:     CompositeType   REFERENCE_LIST_METADATA_TYPE = Item.extend(
1:fdf3952:                                                     SERVICE_REFERENCE_METADATA_TYPE, 
1:fdf3952:                                                     REFERENCE_LIST_METADATA, 
1:fdf3952:                                                     "This type encapsulates ReferenceListMetadata objects",
1:fdf3952:                                                     MEMBER_TYPE_ITEM);
1:fdf3952: 
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Returns the list of component id.
1:fdf3952:      * 
1:fdf3952:      * @param containerServiceId The blueprint container service id
1:fdf3952:      * @return the array of component id
1:fdf3952:      */
1:fdf3952:     public String[] getComponentIds(long containerServiceId);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Returns all component ids of the specified component type
1:fdf3952:      * 
1:fdf3952:      * @param containerServiceId The blueprint container service id
1:fdf3952:      * @param type The string used to specify the type of component
1:fdf3952:      * @return the array of component id
1:fdf3952:      */
1:fdf3952:     //TODO add description for type
1:fdf3952:     public String[] getComponentIdsByType(long containerServiceId, String type);
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Returns the ComponentMetadata according to the its component id.
1:fdf3952:      * The returned Composite Data's type is actually one of {@link #BEAN_METADATA_TYPE}, 
1:fdf3952:      * {@link #SERVICE_METADATA_TYPE}, {@link #REFERENCE_METADATA_TYPE}, REFERENCE_LIST_METADATA_TYPE.
1:fdf3952:      * 
1:fdf3952:      * @param containerServiceId The blueprint container service id
1:fdf3952:      * @param componentId The component id
1:fdf3952:      * @return the ComponentMetadata
1:fdf3952:      */
1:fdf3952:     public CompositeData getComponentMetadata(long containerServiceId, String componentId);
1:fdf3952:         
1:fdf3952:     /**
1:fdf3952:      * Returns all the blueprint containers' service IDs, which successfully
1:fdf3952:      * created from blueprint bundles.
1:fdf3952:      * 
1:fdf3952:      * @return the list of all the service IDs of the blueprint containers created by current extender 
1:fdf3952:      * @throws IOException if the operation fails
1:fdf3952:      */
1:fdf3952:     public long[] getBlueprintContainerServiceIds() throws IOException;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Returns the blueprint container's service id if the bundle specified 
1:fdf3952:      * by the bundle id is a blueprint bundle.
1:fdf3952:      * 
1:fdf3952:      * @param bundleId The bundle id of a blueprint bundle
1:fdf3952:      * @return the blueprint container's service id, or null if the blueprint bundle initialed failed.
1:fdf3952:      * @throws IOException if the operation fails
1:fdf3952:      * @throws IllegalArgumentException if the bundle is not a blueprint bundle
1:fdf3952:      */
1:fdf3952:     public long getBlueprintContainerServiceId(long bundleId) throws IOException;
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.jmx.blueprint;
1: 
1: import java.io.IOException;
1: 
1: import javax.management.openmbean.ArrayType;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.SimpleType;
1: 
1: 
1: public interface BlueprintMetadataMBean {
1: 
1:     /**
1:      * The object name for this MBean.
1:      */
1:     String OBJECTNAME = JmxConstants.ARIES_BLUEPRINT+":service=blueprintMetadata,version=1.0";
1:     
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <value>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key STRING_VALUE, used in {@link #STRING_VALUE_ITEM}.
1:      */
1:     String          STRING_VALUE            = "StringValue";
1:     
1:     /**
1:      * The item containing the un-converted string representation of the value.
1:      * The key is {@link #STRING_VALUE}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            STRING_VALUE_ITEM       = new Item(
1:                                                     STRING_VALUE, 
1:                                                     "The un-converted string representation of a value", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key TYPE, used in {@link #TYPE_ITEM}.
1:      */
1:     String          TYPE                    = "Type";
1:     
1:     /**
1:      * The item containing the name of the type to which the value should be converted.
1:      * The key is {@link #TYPE}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            TYPE_ITEM               = new Item(
1:                                                     TYPE, 
1:                                                     "The type of a value", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The name of CompositeType for ValueMetadata objects, used in {@link #VALUE_METADATA_TYPE}.
1:      */
1:     String          VALUE_METADATA          = "ValueMetadata";
1:     
1:     
1:     /**
1:      * The CompositeType encapsulates ValueMetadata objects. It contains the following items:
1:      * <ul>
1:      * <li>{@link #STRING_VALUE}</li>
1:      * <li>{@link #TYPE}</li>
1:      * </ul>
1:      */
1:     CompositeType   VALUE_METADATA_TYPE     = Item.compositeType(
1:                                                     VALUE_METADATA, 
1:                                                     "This type encapsulates ValueMetadata objects", 
1:                                                     STRING_VALUE_ITEM, 
1:                                                     TYPE_ITEM);                  
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <null>'s CompositeType
1:     ///////////////////////////////////////////////////////////////  
1:     
1:     /**
1:      * The key PLACEHOLDER, used in {@link #PLACEHOLDER_ITEM}.
1:      */ 
1:     String          PLACEHOLDER             = "Placeholder";
1:     
1:     /**
1:      * The item is a placeholder in the null metadata type.
1:      * The key is {@link #PLACEHOLDER}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            PLACEHOLDER_ITEM        = new Item(
1:                                                     PLACEHOLDER, 
1:                                                     "This is a placeholder", 
1:                                                     SimpleType.VOID);
1:     
1:     /**
1:      * The name of CompositeType for NullMetadata objects, used in {@link #NULL_METADATA_TYPE}.
1:      */
1:     String          NULL_METADATA          = "NullMetadata";
1:     
1:     /**
1:      * The CompositeType for NullMetadata objects. A composite type requires at least one item, so we add a placeholder item.
1:      */
1:     CompositeType   NULL_METADATA_TYPE      = Item.compositeType(
1:                                                     NULL_METADATA, 
1:                                                     "This type encapsulates NullMetadata objects", 
1:                                                     PLACEHOLDER_ITEM);
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <ref>'s CompositeType
1:     ///////////////////////////////////////////////////////////////      
1:     
1:     /**
1:      * The key COMPONENT_ID, used in {@link #COMPONENT_ID_ITEM}.
1:      */
1:     String          COMPONENT_ID            = "ComponentId";
1:     
1:     /**
1:      * The item containing the component id to which the "ref" associates.
1:      * The key is {@link #COMPONENT_ID}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            COMPONENT_ID_ITEM       = new Item(
1:                                                     COMPONENT_ID,
1:                                                     "The component id",
1:                                                     SimpleType.STRING);
1:     /**
1:      * The name of CompositeType for RefMetadata objects, used in {@link #REF_METADATA_TYPE}.
1:      */
1:     String          REF_METADATA          = "RefMetadata";
1:     
1:     /**
1:      * The CompositeType for a RefMetadata object. It contains the following items:
1:      * <ul>
1:      * <li>{@link #COMPONENT_ID}</li>
1:      * </ul>
1:      */
1:     CompositeType   REF_METADATA_TYPE       = Item.compositeType(
1:                                                     REF_METADATA, 
1:                                                     "This type encapsulates RefMetadata objects", 
1:                                                     COMPONENT_ID_ITEM);
1: 
1:     ///////////////////////////////////////////////////////////////
1:     // Define <idref>'s CompositeType
1:     // COMPONENT_ID_ITEM defined in <ref>'s definition
1:     ///////////////////////////////////////////////////////////////  
1:     /**
1:      * The name of CompositeType for IdRefMetadata objects, used in {@link #ID_REF_METADATA_TYPE}.
1:      */
1:     String          ID_REF_METADATA          = "IdRefMetadata";
1:     
1:     /**
1:      * The CompositeType for an IdRefMetadata object. It contains the following items:
1:      * <ul>
1:      * <li>{@link #COMPONENT_ID}</li>
1:      * </ul>
1:      */
1:     CompositeType   ID_REF_METADATA_TYPE    = Item.compositeType(
1:                                                     ID_REF_METADATA, 
1:                                                     "This type encapsulates IdRefMetadata objects", 
1:                                                     COMPONENT_ID_ITEM);
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <entry>'s CompositeType, 
1:     // used by MapMetadata, PropsMetadata, and Service properties
1:     ///////////////////////////////////////////////////////////////    
1:     
1:     /**
1:      * The key KEY, used in {@link #KEY_ITEM}.
1:      */    
1:     String          KEY                     = "Key";
1:     
1:     /**
1:      * The item containing the key of an entry.
1:      * The key is {@link #KEY}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            KEY_ITEM                = new Item(
1:                                                     KEY,
1:                                                     "The key of an entry",
1:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:     
1:     /**
1:     * The key VALUE, used in {@link #VALUE_ITEM}.
1:     */
1:     String          VALUE                   = "Value";
1:        
1:     /**
1:     * The item containing a value and this will be used by 
1:     * BeanArgument, BeanProperty, MapEntry and CollectionMetadata.
1:     * The key is {@link #VALUE}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:     */
1:     Item            VALUE_ITEM              = new Item(
1:                                                    VALUE, 
1:                                                    "A value", 
1:                                                    JmxConstants.BYTE_ARRAY_TYPE);  
1: 
1:     /**
1:      * The name of CompositeType for MapEntry objects, used in {@link #MAP_ENTRY_TYPE}.
1:      */
1:     String          MAP_ENTRY          = "MapEntry";
1:     
1:     /**
1:      * The CompositeType for a MapEntry object. It contains the following items:
1:      * <ul>
1:      * <li>{@link #KEY}</li>
1:      * <li>{@link #VALUE}</li>
1:      * </ul>
1:      */
1:     CompositeType   MAP_ENTRY_TYPE          = Item.compositeType(
1:                                                    MAP_ENTRY, 
1:                                                    "This type encapsulates MapEntry objects",
1:                                                    KEY_ITEM,
1:                                                    VALUE_ITEM);
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <map>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key ENTRIES, used in {@link #ENTRIES_ITEM}.
1:      */
1:     String          ENTRIES                 = "Entries";
1:     
1:     /**
1:      * The item containing an array of entries
1:      * The key is {@link #ENTRIES}, and the type is {@link ArrayType}.
1:      */
1:     Item            ENTRIES_ITEM            = new Item(
1:                                                     ENTRIES,
1:                                                     "An array of entries",
1:                                                     Item.arrayType(1, MAP_ENTRY_TYPE));
1:     
1:     /**
1:      * The key KEY_TYPE, used in {@link #KEY_TYPE_ITEM}.
1:      */
1:     String          KEY_TYPE                = "KeyType";
1:     
1:     /**
1:      * The item containing the key type of the entries.
1:      * The key is {@link #KEY_TYPE}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            KEY_TYPE_ITEM           = new Item(
1:                                                     KEY_TYPE,
1:                                                     "The key type of the entries",
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key VALUE_TYPE, used in {@link #VALUE_TYPE_ITEM}.
1:      */
1:     String          VALUE_TYPE              = "ValueType";
1:     
1:     /**
1:      * The item containing the value type that the value should be
1:      * The key is {@link #VALUE_TYPE}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            VALUE_TYPE_ITEM         = new Item(
1:                                                     VALUE_TYPE, 
1:                                                     "The value type", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The name of CompositeType for MapMetadata objects, used in {@link #MAP_METADATA_TYPE}.
1:      */
1:     String          MAP_METADATA          = "MapMetadata";
1:     
1:     /**
1:      * The CompositeType for a MapMetadata object. It contains the following items:
1:      * <ul>
1:      * <li>{@link #ENTRIES}</li>
1:      * <li>{@link #KEY_TYPE}</li>
1:      * <li>{@link #VALUE_TYPE}</li>
1:      * </ul>
1:      */
1:     CompositeType   MAP_METADATA_TYPE       = Item.compositeType(
1:                                                     MAP_METADATA, 
1:                                                     "This type encapsulates MapMetadata objects",
1:                                                     ENTRIES_ITEM,
1:                                                     KEY_TYPE_ITEM,
1:                                                     VALUE_TYPE_ITEM);
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <props>'s CompositeType
1:     // ENTRIES_ITEM defined in <map>'s definition
1:     ///////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * The name of CompositeType for PropsMetadata objects, used in {@link #PROPS_METADATA_TYPE}.
1:      */
1:     String          PROPS_METADATA          = "PropsMetadata";    
1:     
1:     /**
1:      * The CompositeType for a PropsMetadata object. It contains the following items:
1:      * <ul>
1:      * <li>{@link #ENTRIES}</li>
1:      * </ul>
1:      */
1:     CompositeType   PROPS_METADATA_TYPE     = Item.compositeType(
1:                                                     PROPS_METADATA, 
1:                                                     "This type encapsulates PropsMetadata objects",
1:                                                     ENTRIES_ITEM);
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <collection>'s CompositeType
1:     // VALUE_TYPE_ITEM defined in <map>'s definition
1:     ///////////////////////////////////////////////////////////////   
1:     
1:     /**
1:      * The key COLLECTION_CLASS, used in {@link #KEY_TYPE_ITEM}.
1:      */
1:     String          COLLECTION_CLASS        = "CollectionClass";    
1:     
1:     /**
1:      * The item containing the type of this collection
1:      * The key is {@link #COLLECTION_CLASS}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            COLLECTION_CLASS_ITEM   = new Item(
1:                                                     COLLECTION_CLASS,
1:                                                     "The type of this collection",
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key VALUES, used in {@link #VALUES_ITEM}.
1:      */
1:     String          VALUES                  = "Values";
1:     
1:     /**
1:      * The item containing all the values
1:      * The key is {@link #VALUES}, and the type is {@link ArrayType}.
1:      */
1:     Item            VALUES_ITEM             = new Item(
1:                                                     VALUES,
1:                                                     "All the values",
1:                                                     Item.arrayType(2, SimpleType.BYTE));
1:     
1: 
1:     /**
1:      * The name of CompositeType for CollectionMetadata objects, used in {@link #COLLECTION_METADATA_TYPE}.
1:      */
1:     String          COLLECTION_METADATA          = "CollectionMetadata";    
1:     
1:     /**
1:      * The CompositeType for a CollectionMetadata object. It contains the following items:
1:      * <ul>
1:      * <li>{@link #COLLECTION_CLASS}</li>
1:      * <li>{@link #VALUES}</li>
1:      * <li>{@link #VALUE_TYPE}</li>
1:      * </ul>
1:      */
1:     CompositeType   COLLECTION_METADATA_TYPE= Item.compositeType(
1:                                                     COLLECTION_METADATA, 
1:                                                     "This type encapsulates CollectionMetadata objects",
1:                                                     COLLECTION_CLASS_ITEM,
1:                                                     VALUES_ITEM,
1:                                                     VALUE_TYPE_ITEM);
1:    
1:     ///////////////////////////////////////////////////////////////
1:     // Define <argument>'s CompositeType
1:     // VALUE_TYPE_ITEM defined in <map>'s definition
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key INDEX, used in {@link #INDEX_ITEM}.
1:      */
1:     String          INDEX                   = "Index";
1:     
1:     /**
1:      * The item containing the zero-based index into the parameter list of
1:      * the factory method or constructor to be invoked for this argument.
1:      * The key is {@link #INDEX}, and the type is {@link SimpleType#INTEGER}.
1:      */
1:     Item            INDEX_ITEM              = new Item(
1:                                                     INDEX, 
1:                                                     "The zero-based index", 
1:                                                     SimpleType.INTEGER);
1: 
1:     /**
1:      * The name of CompositeType for BeanArgument objects, used in {@link #BEAN_ARGUMENT_TYPE}.
1:      */
1:     String          BEAN_ARGUMENT               = "BeanArgument";    
1: 
1:     
1:     /**
1:      * The CompositeType for a Argument object. It contains the following items:
1:      * <ul>
1:      * <li>{@link #INDEX}</li>
1:      * <li>{@link #VALUE_TYPE}</li>
1:      * <li>{@link #VALUE}</li>
1:      * </ul>
1:      */
1:     CompositeType   BEAN_ARGUMENT_TYPE          = Item.compositeType(
1:                                                     BEAN_ARGUMENT,
1:                                                     "This type encapsulates BeanArgument objects",
1:                                                     INDEX_ITEM,
1:                                                     VALUE_TYPE_ITEM,
1:                                                     VALUE_ITEM);
1:        
1:     ///////////////////////////////////////////////////////////////
1:     // Define <property>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key NAME, used in {@link #NAME_ITEM}.
1:      */
1:     String          NAME                    = "Name";
1:     
1:     /**
1:      * The item containing the name of the property to be injected.
1:      * The key is {@link #NAME}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            NAME_ITEM               = new Item(
1:                                                     NAME,
1:                                                     "The name of the property",
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The name of CompositeType for BeanProperty objects, used in {@link #BEAN_PROPERTY_TYPE}.
1:      */
1:     String          BEAN_PROPERTY               = "BeanProperty";    
1:     
1:     /**
1:      * The CompositeType for property type. It contains the following items:
1:      * <ul>
1:      * <li>{@link #NAME}</li>
1:      * <li>{@link #VALUE}</li>
1:      * </ul>
1:      */
1:     CompositeType   BEAN_PROPERTY_TYPE           = Item.compositeType(
1:                                                     BEAN_PROPERTY, 
1:                                                     "This type encapsulates BeanProperty objects",
1:                                                     NAME_ITEM,
1:                                                     VALUE_ITEM);
1:         
1:     ///////////////////////////////////////////////////////////////
1:     // Define Component's CompositeType
1:     // <bean>, <service> & Service Reference's CompositeType will 
1:     // extend this.
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key ID, used in {@link #ID_ITEM}.
1:      */
1:     String          ID                    = "Id";
1: 
1:     /**
1:      * The item containing the component id of a component. 
1:      * The key is {@link #ID}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            ID_ITEM       = new Item(
1:                                                     ID,
1:                                                     "The id of the component",
1:                                                     SimpleType.STRING);
1:     /**
1:      * The key ACTIVATION, used in {@link #ACTIVATION_ITEM}.
1:      */
1:     String          ACTIVATION              = "Activation";
1:     
1:     /**
1:      * The item containing the activation strategy for a component. 
1:      * The key is {@link #ACTIVATION}, and the type is {@link SimpleType#INTEGER}.
1:      */
1:     Item            ACTIVATION_ITEM         = new Item(
1:                                                     ACTIVATION,
1:                                                     "The activation strategy for a component",
1:                                                     SimpleType.INTEGER);
1:     
1:     /**
1:      * The key DEPENDS_ON, used in {@link #DEPENDS_ON_ITEM}.
1:      */
1:     String          DEPENDS_ON              = "DependsOn";
1:     
1:     /**
1:      * The item containing the ids of any components listed in a <code>depends-on</code> attribute for the component. 
1:      * The key is {@link #DEPENDS_ON}, and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
1:      */
1:     Item            DEPENDS_ON_ITEM         = new Item(
1:                                                     DEPENDS_ON,
1:                                                     "The ids of any components listed in a depends-on attribute",
1:                                                     JmxConstants.STRING_ARRAY_TYPE);
1:     
1:     /**
1:      * The name of CompositeType for ComponentMetadata objects, used in {@link #COMPONENT_METADATA_TYPE}.
1:      */
1:     String          COMPONENT_METADATA               = "ComponentMetadata";    
1:     
1:     /**
1:      * The CompositeType for a ComponentMetadata object, it contains 
1:      * the following items:
1:      * <ul>
1:      * <li>{@link #ID}</li>
1:      * <li>{@link #ACTIVATION}</li>
1:      * <li>{@link #DEPENDS_ON}</li>
1:      * </ul>
1:      */
1:     CompositeType   COMPONENT_METADATA_TYPE     = Item.compositeType(
1:                                                     COMPONENT_METADATA,
1:                                                     "This type encapsulates ComponentMetadata objects",
1:                                                     ID_ITEM,
1:                                                     ACTIVATION_ITEM,
1:                                                     DEPENDS_ON_ITEM);
1:                             
1:     ///////////////////////////////////////////////////////////////
1:     // Define <bean>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key CLASS_NAME, used in {@link #CLASS_NAME_ITEM}.
1:      */
1:     String          CLASS_NAME              = "ClassName";
1:     
1:     /**
1:      * The item containing the name of the class specified for the bean. 
1:      * The key is {@link #CLASS_NAME}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            CLASS_NAME_ITEM         = new Item(
1:                                                     CLASS_NAME,
1:                                                     "The name of the class specified for the bean",
1:                                                     SimpleType.STRING
1:                                                     );
1:     
1:     /**
1:      * The key INIT_METHOD, used in {@link #INIT_METHOD_ITEM}.
1:      */
1:     String          INIT_METHOD             = "InitMethod";
1:     
1:     /**
1:      * The item containing the name of the init method specified for the bean.
1:      * The key is {@link #INIT_METHOD}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            INIT_METHOD_ITEM        = new Item(
1:                                                     INIT_METHOD, 
1:                                                     "The name of the init method specified for the bean", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key DESTROY_METHOD, used in {@link #DESTROY_METHOD_ITEM}.
1:      */
1:     String          DESTROY_METHOD          = "DestroyMethod";
1:     
1:     /**
1:      * The item containing the name of the destroy method specified for the bean.
1:      * The key is {@link #DESTROY_METHOD}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            DESTROY_METHOD_ITEM     = new Item(
1:                                                     DESTROY_METHOD, 
1:                                                     "The name of the destroy method specified for the bean", 
1:                                                     SimpleType.STRING);
1: 
1:     /**
1:      * The key FACTORY_METHOD, used in {@link #FACTORY_METHOD_ITEM}.
1:      */
1:     String          FACTORY_METHOD          = "FactoryMethod";
1:     
1:     /**
1:      * The item containing the name of the factory method specified for the bean.
1:      * The key is {@link #FACTORY_METHOD}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            FACTORY_METHOD_ITEM     = new Item(
1:                                                     FACTORY_METHOD, 
1:                                                     "The name of the factory method specified for the bean", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key FACTORY_COMPONENT, used in {@link #FACTORY_COMPONENT_ITEM}.
1:      */
1:     String          FACTORY_COMPONENT       = "FactoryComponent";
1:     
1:     /**
1:      * The item containing the id of the factory component on which to invoke the factory method for the bean.
1:      * The key is {@link #FACTORY_COMPONENT}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:      */
1:     Item            FACTORY_COMPONENT_ITEM  = new Item(
1:                                                     FACTORY_COMPONENT, 
1:                                                     "The factory component on which to invoke the factory method for the bean", 
1:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:     
1:     /**
1:      * The key SCOPE, used in {@link #SCOPE_ITEM}.
1:      */
1:     String          SCOPE                   = "Scope";
1:     
1:     /**
1:      * The item containing the scope for the bean.
1:      * The key is {@link #SCOPE}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            SCOPE_ITEM              = new Item(
1:                                                     SCOPE, 
1:                                                     "The scope for the bean", 
1:                                                     SimpleType.STRING);
1: 
1:     /**
1:      * The key ARGUMENT, used in {@link #ARGUMENTS_ITEM}.
1:      */
1:     String          ARGUMENTS                   = "Arguments";
1:         
1:     /**
1:      * The item containing the bean argument for the bean's compositeType.
1:      * The key is {@link #ARGUMENTS}, and the type is {@link ARGUMENT_TYPE}.
1:      */
1:     Item           ARGUMENTS_ITEM     = new Item(
1:                                                     ARGUMENTS, 
1:                                                     "The bean argument", 
1:                                                     Item.arrayType(1, BEAN_ARGUMENT_TYPE));
1:     
1:     /**
1:      * The key PROPERTY, used in {@link #PROPERTIES_ITEM}.
1:      */
1:     String          PROPERTIES         = "Properties";
1:         
1:     /**
1:      * The item containing the bean property for the bean's compositeType.
1:      * The key is {@link #PROPERTIES}, and the type is {@link PROPERTY_TYPE}.
1:      */
1:     Item            PROPERTIES_ITEM    = new Item(
1:                                                     PROPERTIES, 
1:                                                     "The bean property", 
1:                                                     Item.arrayType(1, BEAN_PROPERTY_TYPE));
1:     
1:     /**
1:      * The name of CompositeType for BeanMetadata objects, used in {@link #BEAN_METADATA_TYPE}.
1:      */
1:     String          BEAN_METADATA               = "BeanMetadata";    
1:     
1:     /**
1:      * The CompositeType for a BeanMetadata object, it extends {@link #COMPONENT_METADATA_TYPE} 
1:      * and adds the following items:
1:      * <ul>
1:      * <li>{@link #CLASS_NAME}</li>
1:      * <li>{@link #INIT_METHOD}</li>
1:      * <li>{@link #DESTROY_METHOD}</li>
1:      * <li>{@link #FACTORY_METHOD}</li>
1:      * <li>{@link #FACTORY_COMPONENT}</li>
1:      * <li>{@link #SCOPE}</li>
1:      * <li>{@link #ARGUMENTS}</li>
1:      * <li>{@link #PROPERTIES}</li>
1:      * </ul>
1:      */
1:     CompositeType   BEAN_METADATA_TYPE      = Item.extend(
1:                                                     COMPONENT_METADATA_TYPE, 
1:                                                     BEAN_METADATA, 
1:                                                     "This type encapsulates BeanMetadata objects",
1:                                                     CLASS_NAME_ITEM,
1:                                                     INIT_METHOD_ITEM,
1:                                                     DESTROY_METHOD_ITEM, 
1:                                                     FACTORY_METHOD_ITEM,
1:                                                     FACTORY_COMPONENT_ITEM,
1:                                                     SCOPE_ITEM,
1:                                                     ARGUMENTS_ITEM,
1:                                                     PROPERTIES_ITEM);
1: 
1:     ///////////////////////////////////////////////////////////////
1:     // Define <registration-listener>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key LISTENER_COMPONENT, used in {@link #LISTENER_COMPONENT_ITEM}.
1:      */
1:     String          LISTENER_COMPONENT      = "ListenerComponent";
1:     
1:     /**
1:      * The item containing the listener component.
1:      * The key is {@link #LISTENER_COMPONENT}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:      */
1:     Item            LISTENER_COMPONENT_ITEM = new Item(
1:                                                     LISTENER_COMPONENT, 
1:                                                     "The listener component", 
1:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:     
1:     /**
1:      * The key REGISTRATION_METHOD, used in {@link #REGISTRATION_METHOD_ITEM}.
1:      */
1:     String          REGISTRATION_METHOD     = "RegistrationMethod";
1:     
1:     /**
1:      * The item containing the name of the registration method.
1:      * The key is {@link #REGISTRATION_METHOD}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            REGISTRATION_METHOD_ITEM    = new Item(
1:                                                     REGISTRATION_METHOD, 
1:                                                     "The name of the registration method", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key UNREGISTRATION_METHOD, used in {@link #UNREGISTRATION_METHOD_ITEM}.
1:      */
1:     String          UNREGISTRATION_METHOD       = "UnregistrationMethod";
1:     
1:     /**
1:      * The item containing the name of the unregistration method.
1:      * The key is {@link #UNREGISTRATION_METHOD}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            UNREGISTRATION_METHOD_ITEM  = new Item(
1:                                                     UNREGISTRATION_METHOD, 
1:                                                     "The name of the unregistration method", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The name of CompositeType for RegistrationListener objects, used in {@link #REGISTRATION_LISTENER_TYPE}.
1:      */
1:     String          REGISTRATION_LISTENER               = "RegistrationListener";    
1:     
1:     /**
1:      * The CompositeType for a registration listener, and it contains the following items:
1:      * <ul>
1:      * <li>{@link #LISTENER_COMPONENT}</li>
1:      * <li>{@link #REGISTRATION_METHOD}</li>
1:      * <li>{@link #UNREGISTRATION_METHOD}</li>
1:      * </ul>
1:      */
1:     CompositeType   REGISTRATION_LISTENER_TYPE  = Item.compositeType(
1:                                                     REGISTRATION_LISTENER, 
1:                                                     "This type encapsulates RegistrationListener objects",
1:                                                     LISTENER_COMPONENT_ITEM,
1:                                                     REGISTRATION_METHOD_ITEM,
1:                                                     UNREGISTRATION_METHOD_ITEM);
1:     
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <service>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key INTERFACES, used in {@link #INTERFACES_ITEM}.
1:      */
1:     String          INTERFACES              = "Interfaces";
1:     
1:     /**
1:      * The item containing the type names of the interfaces that the service should be advertised as supporting.
1:      * The key is {@link #INTERFACES}, and the type is {@link JmxConstants#STRING_ARRAY_TYPE}.
1:      */
1:     Item            INTERFACES_ITEM         = new Item(
1:                                                     INTERFACES, 
1:                                                     "The type names of the interfaces", 
1:                                                     JmxConstants.STRING_ARRAY_TYPE);
1:     /**
1:      * The key AUTO_EXPORT, used in {@link #AUTO_EXPORT_ITEM}.
1:      */
1:     String          AUTO_EXPORT             = "AutoExport";
1:     
1:     /**
1:      * The item containing the auto-export mode for the service.
1:      * The key is {@link #AUTO_EXPORT}, and the type is {@link SimpleType#INTEGER}.
1:      */
1:     //TODO describe integer
1:     Item            AUTO_EXPORT_ITEM        = new Item(
1:                                                     AUTO_EXPORT, 
1:                                                     "The auto-export mode for the service", 
1:                                                     SimpleType.INTEGER);
1: 
1:     /**
1:      * The key RANKING, used in {@link #RANKING_ITEM}.
1:      */
1:     String          RANKING                 = "Ranking";
1:     
1:     /**
1:      * The item containing the ranking value to use when advertising the service.
1:      * The key is {@link #RANKING}, and the type is {@link SimpleType#INTEGER}.
1:      */
1:     Item            RANKING_ITEM            = new Item(
1:                                                     RANKING, 
1:                                                     "The ranking value when advertising the service", 
1:                                                     SimpleType.INTEGER);
1: 
1:     /**
1:      * The key SERVICE_COMPONENT, used in {@link #SERVICE_COMPONENT_ITEM}.
1:      */
1:     String          SERVICE_COMPONENT       = "ServiceComponent";
1:     
1:     /**
1:      * The item containing the id of the component to be exported as a service.
1:      * The key is {@link #SERVICE_COMPONENT}, and the type is {@link JmxConstants#PRIMITIVE_BYTE_ARRAY_TYPE}.
1:      */
1:     Item            SERVICE_COMPONENT_ITEM  = new Item(
1:                                                     SERVICE_COMPONENT, 
1:                                                     "The component to be exported as a service", 
1:                                                     JmxConstants.BYTE_ARRAY_TYPE);
1:     
1:     /**
1:      * The key SERVICE_PROPERTIES, used in {@link #SERVICE_PROPERTIES_ITEM}.
1:      */
1:     String          SERVICE_PROPERTIES      = "ServiceProperties";
1:     
1:     /**
1:      * The item containing the user declared properties to be advertised with the service.
1:      * The key is {@link #SERVICE_COMPONENT}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            SERVICE_PROPERTIES_ITEM = new Item(
1:                                                     SERVICE_PROPERTIES,
1:                                                     "The user declared properties to be advertised with the service",
1:                                                     Item.arrayType(1, MAP_ENTRY_TYPE));
1:     
1:     /**
1:      * The key REGISTRATION_LISTENERS, used in {@link #SERVICE_LISTENERS_ITEM}.
1:      */
1:     String          REGISTRATION_LISTENERS  = "RegistrationListeners";
1:     
1:     /**
1:      * The item containing all the registration listeners.
1:      * The key is {@link #REGISTRATION_LISTENERS}, and the type is {@link ArrayType}.
1:      */
1:     Item            REGISTRATION_LISTENERS_ITEM = new Item(
1:                                                     REGISTRATION_LISTENERS,
1:                                                     "All the registration listeners",
1:                                                     Item.arrayType(1, REGISTRATION_LISTENER_TYPE));
1:     
1:     /**
1:      * The name of CompositeType for ServiceMetadata objects, used in {@link #SERVICE_METADATA_TYPE}.
1:      */
1:     String          SERVICE_METADATA               = "ServiceMetadata";    
1:     
1:     /**
1:      * The CompositeType for a ServiceMetadata object, it extends {@link #COMPONENT_METADATA_TYPE}
1:      * and adds the following items:
1:      * <ul>
1:      * <li>{@link #INTERFACES}</li>
1:      * <li>{@link #AUTO_EXPORT}</li>
1:      * <li>{@link #RANKING}</li>
1:      * <li>{@link #SERVICE_COMPONENT}</li>
1:      * <li>{@link #SERVICE_PROPERTIES}</li>
1:      * <li>{@link #REGISTRATION_LISTENERS}</li>
1:      * </ul>
1:      */
1:     CompositeType   SERVICE_METADATA_TYPE   = Item.extend(
1:                                                     COMPONENT_METADATA_TYPE, 
1:                                                     SERVICE_METADATA, 
1:                                                     "This type encapsulates ServiceMetadata objects",
1:                                                     INTERFACES_ITEM,
1:                                                     AUTO_EXPORT_ITEM,
1:                                                     RANKING_ITEM,
1:                                                     SERVICE_COMPONENT_ITEM,
1:                                                     SERVICE_PROPERTIES_ITEM,
1:                                                     REGISTRATION_LISTENERS_ITEM);
1: 
1:     ///////////////////////////////////////////////////////////////
1:     // Define <reference-listener>'s CompositeType
1:     // LISTENER_COMPONENT_ITEM defined in the <registration-listener>
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key BIND_METHOD, used in {@link #BIND_METHOD_ITEM}.
1:      */
1:     String          BIND_METHOD                 = "BindMethod";
1:     
1:     /**
1:      * The item containing the name of the bind method.
1:      * The key is {@link #BIND_METHOD}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            BIND_METHOD_ITEM            = new Item(
1:                                                     BIND_METHOD, 
1:                                                     "The name of the bind method", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key UNBIND_METHOD, used in {@link #UNBIND_METHOD_ITEM}.
1:      */
1:     String          UNBIND_METHOD               = "UnbindMethod";
1:     
1:     /**
1:      * The item containing the name of the unbind method.
1:      * The key is {@link #UNBIND_METHOD}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            UNBIND_METHOD_ITEM          = new Item(
1:                                                     UNBIND_METHOD, 
1:                                                     "The name of the unbind method", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The name of CompositeType for ReferenceListener objects, used in {@link #REFERENCE_LISTENER_TYPE}.
1:      */
1:     String          REFERENCE_LISTENER               = "ReferenceListener"; 
1:     
1:     /**
1:      * The CompositeType for a reference listener, and it contains the following items:
1:      * <ul>
1:      * <li>{@link #LISTENER_COMPONENT}</li>
1:      * <li>{@link #BIND_METHOD}</li>
1:      * <li>{@link #UNBIND_METHOD}</li>
1:      * </ul>
1:      */
1:     CompositeType   REFERENCE_LISTENER_TYPE  = Item.compositeType(
1:                                                     REFERENCE_LISTENER, 
1:                                                     "This type encapsulates ReferenceListener objects",
1:                                                     LISTENER_COMPONENT_ITEM,
1:                                                     BIND_METHOD_ITEM,
1:                                                     UNBIND_METHOD_ITEM);
1:     
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define Service Reference's CompositeType, 
1:     // <reference> & <reference-list> will extend this
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key AVAILABILITY, used in {@link #AVAILABILITY_ITEM}.
1:      */
1:     String          AVAILABILITY            = "Availability";
1:     
1:     /**
1:      * The item specify whether or not a matching service is required at all times.
1:      * The key is {@link #AVAILABILITY}, and the type is {@link SimpleType#INTEGER}.
1:      * 
1:      */
1:     //TODO add description for each int
1:     Item            AVAILABILITY_ITEM       = new Item(
1:                                                     AVAILABILITY, 
1:                                                     "To specify whether or not a matching service is required at all times", 
1:                                                     SimpleType.INTEGER);
1:     
1:     /**
1:      * The key INTERFACE, used in {@link #INTERFACE_ITEM}.
1:      */
1:     String          INTERFACE               = "Interface";
1:     
1:     /**
1:      * The item containing the name of the interface type that a matching service must support.
1:      * The key is {@link #INTERFACE}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            INTERFACE_ITEM          = new Item(
1:                                                     INTERFACE, 
1:                                                     "the name of the interface type", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key COMPONENT_NAME, used in {@link #COMPONENT_NAME_ITEM}.
1:      */
1:     String          COMPONENT_NAME          = "ComponentName";
1:     
1:     /**
1:      * The item containing the value of the <code>component-name</code> attribute of the service reference.
1:      * The key is {@link #INTERFACE}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            COMPONENT_NAME_ITEM     = new Item(
1:                                                     COMPONENT_NAME, 
1:                                                     "The value of the component-name attribute of the service reference", 
1:                                                     SimpleType.STRING);
1:     /**
1:      * The key FILTER, used in {@link #FILTER_ITEM}.
1:      */
1:     String          FILTER                  = "Filter";
1:     
1:     /**
1:      * The item containing the filter expression that a matching service must match.
1:      * The key is {@link #FILTER}, and the type is {@link SimpleType#STRING}.
1:      */
1:     Item            FILTER_ITEM             = new Item(
1:                                                     FILTER, 
1:                                                     "The filter expression that a matching service must match", 
1:                                                     SimpleType.STRING);
1:     
1:     /**
1:      * The key REFERENCE_LISTENERS, used in {@link #SERVICE_LISTENERS_ITEM}.
1:      */
1:     String          REFERENCE_LISTENERS     = "RegistrationListeners";
1:     
1:     /**
1:      * The item containing all the reference listeners.
1:      * The key is {@link #REFERENCE_LISTENERS}, and the type is {@link ArrayType}.
1:      */
1:     Item            REFERENCE_LISTENERS_ITEM= new Item(
1:                                                     REFERENCE_LISTENERS,
1:                                                     "All the reference listeners",
1:                                                     Item.arrayType(1, REFERENCE_LISTENER_TYPE));
1:     
1:     /**
1:      * The name of CompositeType for ServiceReferenceMetadata objects, used in {@link #SERVICE_REFERENCE_METADATA_TYPE}.
1:      */
1:     String          SERVICE_REFERENCE_METADATA               = "ServiceReferenceMetadata"; 
1:     
1:     /**
1:      * The CompositeType for a ServiceReferenceMetadata object, it extends 
1:      * {@link #COMPONENT_METADATA_TYPE} and adds the following items:
1:      * <ul>
1:      * <li>{@link #AVAILABILITY}</li>
1:      * <li>{@link #INTERFACE}</li>
1:      * <li>{@link #COMPONENT_NAME}</li>
1:      * <li>{@link #FILTER}</li>
1:      * <li>{@link #REFERENCE_LISTENERS}</li>
1:      * </ul>
1:      */
1:     CompositeType   SERVICE_REFERENCE_METADATA_TYPE  = Item.extend(
1:                                                     COMPONENT_METADATA_TYPE, 
1:                                                     SERVICE_REFERENCE_METADATA, 
1:                                                     "This type encapsulates ServiceReferenceMetadata objects",
1:                                                     AVAILABILITY_ITEM,
1:                                                     INTERFACE_ITEM,
1:                                                     COMPONENT_NAME_ITEM,
1:                                                     FILTER_ITEM,
1:                                                     REFERENCE_LISTENERS_ITEM);
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <reference>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key TIME_OUT, used in {@link #TIMEOUT_ITEM}.
1:      */
1:     String          TIMEOUT                = "TimeOut";
1:     
1:     /**
1:      * The item containing the timeout for service invocations when a backing service is is unavailable.
1:      * The key is {@link #TIMEOUT}, and the type is {@link SimpleType#LONG}.
1:      */
1:     Item            TIMEOUT_ITEM           = new Item(
1:                                                     TIMEOUT, 
1:                                                     "The timeout for service invocations when a backing service is is unavailable", 
1:                                                     SimpleType.LONG);
1:     
1:     /**
1:      * The name of CompositeType for ReferenceMetadata objects, used in {@link #REFERENCE_METADATA_TYPE}.
1:      */
1:     String          REFERENCE_METADATA        = "ReferenceMetadata"; 
1:     
1:     /**
1:      * The CompositeType for a ReferenceMetadata object, it extends 
1:      * {@link #SERVICE_REFERENCE_METADATA_TYPE} and adds the following items:
1:      * <ul>
1:      * <li>{@link #TIMEOUT}</li>
1:      * </ul>
1:      */
1:     CompositeType   REFERENCE_METADATA_TYPE = Item.extend(
1:                                                     SERVICE_REFERENCE_METADATA_TYPE, 
1:                                                     REFERENCE_METADATA, 
1:                                                     "This type encapsulates ReferenceMetadata objects",
1:                                                     TIMEOUT_ITEM);
1:     
1:     ///////////////////////////////////////////////////////////////
1:     // Define <reference-list>'s CompositeType
1:     ///////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * The key MEMBER_TYPE, used in {@link #MEMBER_TYPE_ITEM}.
1:      */
1:     String          MEMBER_TYPE             = "MemberType";
1:     
1:     /**
1:      * The item specify whether the List will contain service object proxies or ServiceReference objects.
1:      * The key is {@link #MEMBER_TYPE}, and the type is {@link SimpleType#INTEGER}.
1:      */
1:     Item            MEMBER_TYPE_ITEM        = new Item(
1:                                                     MEMBER_TYPE, 
1:                                                     "To specify whether the List will contain service object proxies or ServiceReference objects", 
1:                                                     SimpleType.INTEGER);
1:     
1:     /**
1:      * The name of CompositeType for ReferenceListMetadata objects, used in {@link #REFERENCE_LIST_METADATA_TYPE}.
1:      */
1:     String          REFERENCE_LIST_METADATA        = "ReferenceListMetadata"; 
1:     
1:     /**
1:      * The CompositeType for a ReferenceListMetadata object, it extends 
1:      * {@link #SERVICE_REFERENCE_METADATA_TYPE} and adds the following items:
1:      * <ul>
1:      * <li>{@link #MEMBER_TYPE}</li>
1:      * </ul>
1:      */
1:     CompositeType   REFERENCE_LIST_METADATA_TYPE = Item.extend(
1:                                                     SERVICE_REFERENCE_METADATA_TYPE, 
1:                                                     REFERENCE_LIST_METADATA, 
1:                                                     "This type encapsulates ReferenceListMetadata objects",
1:                                                     MEMBER_TYPE_ITEM);
1: 
1: 
1:     /**
1:      * Returns the list of component id.
1:      * 
1:      * @param containerServiceId The blueprint container service id
1:      * @return the array of component id
1:      */
1:     public String[] getComponentIds(long containerServiceId);
1:     
1:     /**
1:      * Returns all component ids of the specified component type
1:      * 
1:      * @param containerServiceId The blueprint container service id
1:      * @param type The string used to specify the type of component
1:      * @return the array of component id
1:      */
1:     //TODO add description for type
1:     public String[] getComponentIdsByType(long containerServiceId, String type);
1:     
1:     /**
1:      * Returns the ComponentMetadata according to the its component id.
1:      * The returned Composite Data's type is actually one of {@link #BEAN_METADATA_TYPE}, 
1:      * {@link #SERVICE_METADATA_TYPE}, {@link #REFERENCE_METADATA_TYPE}, REFERENCE_LIST_METADATA_TYPE.
1:      * 
1:      * @param containerServiceId The blueprint container service id
1:      * @param componentId The component id
1:      * @return the ComponentMetadata
1:      */
1:     public CompositeData getComponentMetadata(long containerServiceId, String componentId);
1:         
1:     /**
1:      * Returns all the blueprint containers' service IDs, which successfully
1:      * created from blueprint bundles.
1:      * 
1:      * @return the list of all the service IDs of the blueprint containers created by current extender 
1:      * @throws IOException if the operation fails
1:      */
1:     public long[] getBlueprintContainerServiceIds() throws IOException;
1:     
1:     /**
1:      * Returns the blueprint container's service id if the bundle specified 
1:      * by the bundle id is a blueprint bundle.
1:      * 
1:      * @param bundleId The bundle id of a blueprint bundle
1:      * @return the blueprint container's service id, or null if the blueprint bundle initialed failed.
1:      * @throws IOException if the operation fails
1:      * @throws IllegalArgumentException if the bundle is not a blueprint bundle
1:      */
1:     public long getBlueprintContainerServiceId(long bundleId) throws IOException;
1: }
============================================================================