1:c4a0ec6: /*
1:c4a0ec6:  * Licensed to the Apache Software Foundation (ASF) under one
1:c4a0ec6:  * or more contributor license agreements.  See the NOTICE file
1:c4a0ec6:  * distributed with this work for additional information
1:c4a0ec6:  * regarding copyright ownership.  The ASF licenses this file
1:c4a0ec6:  * to you under the Apache License, Version 2.0 (the
1:c4a0ec6:  * "License"); you may not use this file except in compliance
1:c4a0ec6:  * with the License.  You may obtain a copy of the License at
1:c4a0ec6:  *
1:c4a0ec6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c4a0ec6:  *
1:c4a0ec6:  * Unless required by applicable law or agreed to in writing,
1:c4a0ec6:  * software distributed under the License is distributed on an
1:c4a0ec6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c4a0ec6:  * KIND, either express or implied.  See the License for the
1:c4a0ec6:  * specific language governing permissions and limitations
1:c4a0ec6:  * under the License.
1:c4a0ec6:  */
1:c4a0ec6: package org.apache.aries.subsystem.itests.defect;
1:c4a0ec6: 
1:c4a0ec6: import static org.junit.Assert.fail;
1:c4a0ec6: 
1:c4a0ec6: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1:c4a0ec6: import org.apache.aries.subsystem.itests.SubsystemTest;
1:c4a0ec6: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1:c4a0ec6: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1:c4a0ec6: import org.junit.Test;
1:c4a0ec6: import org.osgi.framework.Bundle;
1:c4a0ec6: import org.osgi.service.subsystem.Subsystem;
1:c4a0ec6: import org.osgi.service.subsystem.SubsystemConstants;
1:c4a0ec6: import org.osgi.service.subsystem.SubsystemException;
1:c4a0ec6: 
1:c4a0ec6: public class Aries1538Test extends SubsystemTest {
1:c4a0ec6: 	@Test
1:8ec6403: 	public void testEffectiveActiveApacheAriesProvisionDependenciesInstall() throws Exception {
1:8ec6403: 		testEffectiveActive(AriesProvisionDependenciesDirective.INSTALL);
1:c4a0ec6: 	}
1:c4a0ec6: 	
1:c4a0ec6: 	@Test
1:8ec6403: 	public void testEffectiveActiveApacheAriesProvisionDependenciesResolve() throws Exception {
1:8ec6403: 		testEffectiveActive(AriesProvisionDependenciesDirective.RESOLVE);
1:c4a0ec6: 	}
1:c4a0ec6: 	
1:8ec6403: 	@Test
1:8ec6403: 	public void testSubstitutableExportApacheAriesProvisionDependenciesInstall() throws Exception {
1:8ec6403: 		testSubstitutableExport(AriesProvisionDependenciesDirective.INSTALL);
1:8ec6403: 	}
1:8ec6403: 	
1:8ec6403: 	@Test
1:8ec6403: 	public void testSubstituableExportApacheAriesProvisionDependenciesResolve() throws Exception {
1:8ec6403: 		testSubstitutableExport(AriesProvisionDependenciesDirective.RESOLVE);
1:8ec6403: 	}
1:8ec6403: 	
1:8ec6403: 	@Test
1:8ec6403: 	public void testHostFragmentCircularDependencyApacheAriesProvisionDependenciesInstall() throws Exception {
1:8ec6403: 		testHostFragmentCircularDependency(AriesProvisionDependenciesDirective.INSTALL);
1:8ec6403: 	}
1:8ec6403: 	
1:8ec6403: 	@Test
1:8ec6403: 	public void testHostFragmentCircularDependencyApacheAriesProvisionDependenciesResolve() throws Exception {
1:8ec6403: 		testHostFragmentCircularDependency(AriesProvisionDependenciesDirective.RESOLVE);
1:8ec6403: 	}
1:8ec6403: 	
1:8ec6403: 	private void testEffectiveActive(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1:c4a0ec6: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1:c4a0ec6: 		BundleArchiveBuilder bab = new BundleArchiveBuilder();
1:c4a0ec6: 		bab.symbolicName("bundle");
1:c4a0ec6: 		bab.requireCapability("osgi.service;filter:=\"(&(objectClass=java.lang.Object)(foo=bar))\";effective:=active");
1:c4a0ec6: 		bab.exportPackage("foo");
1:c4a0ec6: 		Subsystem root = getRootSubsystem();
1:c4a0ec6: 		Bundle a = root.getBundleContext().installBundle(
1:c4a0ec6: 				"a", 
1:c4a0ec6: 				bab.build());
1:c4a0ec6: 		uninstallableBundles.add(a);
1:c4a0ec6: 		startBundle(a);
1:c4a0ec6: 		try {
1:c4a0ec6: 			Subsystem subsystem = installSubsystem(
1:c4a0ec6: 					root,
1:c4a0ec6: 					"subsystem", 
1:c4a0ec6: 					new SubsystemArchiveBuilder()
1:c4a0ec6: 							.symbolicName("subsystem")
1:c4a0ec6: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1:c4a0ec6: 										+ provisionDependencies.toString())
1:c4a0ec6: 							.bundle(
1:c4a0ec6: 									"b", 
1:c4a0ec6: 									new BundleArchiveBuilder()
1:c4a0ec6: 											.symbolicName("b")
1:c4a0ec6: 											.importPackage("foo")
1:c4a0ec6: 											.build())
1:c4a0ec6: 							.build(),
1:c4a0ec6: 					flag
1:c4a0ec6: 			);
1:c4a0ec6: 			uninstallableSubsystems.add(subsystem);
1:c4a0ec6: 			startSubsystem(subsystem, flag);
1:c4a0ec6: 			stoppableSubsystems.add(subsystem);
1:c4a0ec6: 		}
1:c4a0ec6: 		catch (SubsystemException e) {
1:c4a0ec6: 			e.printStackTrace();
1:c4a0ec6: 			fail("Subsystem should have installed and started");
1:c4a0ec6: 		}
1:c4a0ec6: 	}
1:8ec6403: 	
1:8ec6403: 	private void testSubstitutableExport(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1:8ec6403: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1:8ec6403: 		BundleArchiveBuilder hostBuilder = new BundleArchiveBuilder();
1:8ec6403: 		hostBuilder.symbolicName("host");
1:8ec6403: 		BundleArchiveBuilder fragmentBuilder = new BundleArchiveBuilder();
1:8ec6403: 		fragmentBuilder.symbolicName("fragment");
1:8ec6403: 		fragmentBuilder.exportPackage("foo");
1:8ec6403: 		fragmentBuilder.importPackage("foo");
1:8ec6403: 		fragmentBuilder.header("Fragment-Host", "host");
1:8ec6403: 		Subsystem root = getRootSubsystem();
1:8ec6403: 		Bundle host = root.getBundleContext().installBundle(
1:8ec6403: 				"host", 
1:8ec6403: 				hostBuilder.build());
1:8ec6403: 		uninstallableBundles.add(host);
1:8ec6403: 		Bundle fragment = root.getBundleContext().installBundle(
1:8ec6403: 				"fragment", 
1:8ec6403: 				fragmentBuilder.build());
1:8ec6403: 		uninstallableBundles.add(fragment);
1:8ec6403: 		startBundle(host);
1:8ec6403: 		try {
1:8ec6403: 			Subsystem subsystem = installSubsystem(
1:8ec6403: 					root,
1:8ec6403: 					"subsystem", 
1:8ec6403: 					new SubsystemArchiveBuilder()
1:8ec6403: 							.symbolicName("subsystem")
1:8ec6403: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1:8ec6403: 										+ provisionDependencies.toString())
1:8ec6403: 							.bundle(
1:8ec6403: 									"a", 
1:8ec6403: 									new BundleArchiveBuilder()
1:8ec6403: 											.symbolicName("a")
1:8ec6403: 											.importPackage("foo")
1:8ec6403: 											.build())
1:8ec6403: 							.build(),
1:8ec6403: 					flag
1:8ec6403: 			);
1:8ec6403: 			uninstallableSubsystems.add(subsystem);
1:8ec6403: 			startSubsystem(subsystem, flag);
1:8ec6403: 			stoppableSubsystems.add(subsystem);
1:8ec6403: 		}
1:8ec6403: 		catch (SubsystemException e) {
1:8ec6403: 			e.printStackTrace();
1:8ec6403: 			fail("Subsystem should have installed and started");
1:8ec6403: 		}
1:8ec6403: 	}
1:8ec6403: 	
1:8ec6403: 	private void testHostFragmentCircularDependency(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1:8ec6403: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1:8ec6403: 		BundleArchiveBuilder hostBuilder = new BundleArchiveBuilder();
1:8ec6403: 		hostBuilder.symbolicName("host");
1:8ec6403: 		hostBuilder.exportPackage("foo");
1:8ec6403: 		hostBuilder.importPackage("bar");
1:8ec6403: 		BundleArchiveBuilder fragmentBuilder = new BundleArchiveBuilder();
1:8ec6403: 		fragmentBuilder.symbolicName("fragment");
1:8ec6403: 		fragmentBuilder.exportPackage("bar");
1:8ec6403: 		fragmentBuilder.importPackage("foo");
1:8ec6403: 		fragmentBuilder.header("Fragment-Host", "host");
1:8ec6403: 		Subsystem root = getRootSubsystem();
1:8ec6403: 		Bundle host = root.getBundleContext().installBundle(
1:8ec6403: 				"host", 
1:8ec6403: 				hostBuilder.build());
1:8ec6403: 		uninstallableBundles.add(host);
1:8ec6403: 		Bundle fragment = root.getBundleContext().installBundle(
1:8ec6403: 				"fragment", 
1:8ec6403: 				fragmentBuilder.build());
1:8ec6403: 		uninstallableBundles.add(fragment);
1:8ec6403: 		startBundle(host);
1:8ec6403: 		try {
1:8ec6403: 			Subsystem subsystem = installSubsystem(
1:8ec6403: 					root,
1:8ec6403: 					"subsystem", 
1:8ec6403: 					new SubsystemArchiveBuilder()
1:8ec6403: 							.symbolicName("subsystem")
1:8ec6403: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1:8ec6403: 										+ provisionDependencies.toString())
1:8ec6403: 							.bundle(
1:8ec6403: 									"a", 
1:8ec6403: 									new BundleArchiveBuilder()
1:8ec6403: 											.symbolicName("a")
1:8ec6403: 											.importPackage("foo")
1:8ec6403: 											.build())
1:8ec6403: 							.build(),
1:8ec6403: 					flag
1:8ec6403: 			);
1:8ec6403: 			uninstallableSubsystems.add(subsystem);
1:8ec6403: 			startSubsystem(subsystem, flag);
1:8ec6403: 			stoppableSubsystems.add(subsystem);
1:8ec6403: 		}
1:8ec6403: 		catch (SubsystemException e) {
1:8ec6403: 			e.printStackTrace();
1:8ec6403: 			fail("Subsystem should have installed and started");
1:8ec6403: 		}
1:8ec6403: 	}
1:c4a0ec6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8ec6403
/////////////////////////////////////////////////////////////////////////
1: 	public void testEffectiveActiveApacheAriesProvisionDependenciesInstall() throws Exception {
1: 		testEffectiveActive(AriesProvisionDependenciesDirective.INSTALL);
1: 	public void testEffectiveActiveApacheAriesProvisionDependenciesResolve() throws Exception {
1: 		testEffectiveActive(AriesProvisionDependenciesDirective.RESOLVE);
1: 	@Test
1: 	public void testSubstitutableExportApacheAriesProvisionDependenciesInstall() throws Exception {
1: 		testSubstitutableExport(AriesProvisionDependenciesDirective.INSTALL);
1: 	}
1: 	
1: 	@Test
1: 	public void testSubstituableExportApacheAriesProvisionDependenciesResolve() throws Exception {
1: 		testSubstitutableExport(AriesProvisionDependenciesDirective.RESOLVE);
1: 	}
1: 	
1: 	@Test
1: 	public void testHostFragmentCircularDependencyApacheAriesProvisionDependenciesInstall() throws Exception {
1: 		testHostFragmentCircularDependency(AriesProvisionDependenciesDirective.INSTALL);
1: 	}
1: 	
1: 	@Test
1: 	public void testHostFragmentCircularDependencyApacheAriesProvisionDependenciesResolve() throws Exception {
1: 		testHostFragmentCircularDependency(AriesProvisionDependenciesDirective.RESOLVE);
1: 	}
1: 	
1: 	private void testEffectiveActive(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private void testSubstitutableExport(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1: 		BundleArchiveBuilder hostBuilder = new BundleArchiveBuilder();
1: 		hostBuilder.symbolicName("host");
1: 		BundleArchiveBuilder fragmentBuilder = new BundleArchiveBuilder();
1: 		fragmentBuilder.symbolicName("fragment");
1: 		fragmentBuilder.exportPackage("foo");
1: 		fragmentBuilder.importPackage("foo");
1: 		fragmentBuilder.header("Fragment-Host", "host");
1: 		Subsystem root = getRootSubsystem();
1: 		Bundle host = root.getBundleContext().installBundle(
1: 				"host", 
1: 				hostBuilder.build());
1: 		uninstallableBundles.add(host);
1: 		Bundle fragment = root.getBundleContext().installBundle(
1: 				"fragment", 
1: 				fragmentBuilder.build());
1: 		uninstallableBundles.add(fragment);
1: 		startBundle(host);
1: 		try {
1: 			Subsystem subsystem = installSubsystem(
1: 					root,
1: 					"subsystem", 
1: 					new SubsystemArchiveBuilder()
1: 							.symbolicName("subsystem")
1: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1: 										+ provisionDependencies.toString())
1: 							.bundle(
1: 									"a", 
1: 									new BundleArchiveBuilder()
1: 											.symbolicName("a")
1: 											.importPackage("foo")
1: 											.build())
1: 							.build(),
1: 					flag
1: 			);
1: 			uninstallableSubsystems.add(subsystem);
1: 			startSubsystem(subsystem, flag);
1: 			stoppableSubsystems.add(subsystem);
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Subsystem should have installed and started");
1: 		}
1: 	}
1: 	
1: 	private void testHostFragmentCircularDependency(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1: 		BundleArchiveBuilder hostBuilder = new BundleArchiveBuilder();
1: 		hostBuilder.symbolicName("host");
1: 		hostBuilder.exportPackage("foo");
1: 		hostBuilder.importPackage("bar");
1: 		BundleArchiveBuilder fragmentBuilder = new BundleArchiveBuilder();
1: 		fragmentBuilder.symbolicName("fragment");
1: 		fragmentBuilder.exportPackage("bar");
1: 		fragmentBuilder.importPackage("foo");
1: 		fragmentBuilder.header("Fragment-Host", "host");
1: 		Subsystem root = getRootSubsystem();
1: 		Bundle host = root.getBundleContext().installBundle(
1: 				"host", 
1: 				hostBuilder.build());
1: 		uninstallableBundles.add(host);
1: 		Bundle fragment = root.getBundleContext().installBundle(
1: 				"fragment", 
1: 				fragmentBuilder.build());
1: 		uninstallableBundles.add(fragment);
1: 		startBundle(host);
1: 		try {
1: 			Subsystem subsystem = installSubsystem(
1: 					root,
1: 					"subsystem", 
1: 					new SubsystemArchiveBuilder()
1: 							.symbolicName("subsystem")
1: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1: 										+ provisionDependencies.toString())
1: 							.bundle(
1: 									"a", 
1: 									new BundleArchiveBuilder()
1: 											.symbolicName("a")
1: 											.importPackage("foo")
1: 											.build())
1: 							.build(),
1: 					flag
1: 			);
1: 			uninstallableSubsystems.add(subsystem);
1: 			startSubsystem(subsystem, flag);
1: 			stoppableSubsystems.add(subsystem);
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Subsystem should have installed and started");
1: 		}
1: 	}
commit:c4a0ec6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class Aries1538Test extends SubsystemTest {
1: 	@Test
0: 	public void testApacheAriesProvisionDepenenciesInstall() throws Exception {
0: 		test(AriesProvisionDependenciesDirective.INSTALL);
1: 	}
1: 	
1: 	@Test
0: 	public void testApacheAriesProvisionDepenenciesResolve() throws Exception {
0: 		test(AriesProvisionDependenciesDirective.RESOLVE);
1: 	}
1: 	
0: 	private void test(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1: 		BundleArchiveBuilder bab = new BundleArchiveBuilder();
1: 		bab.symbolicName("bundle");
1: 		bab.requireCapability("osgi.service;filter:=\"(&(objectClass=java.lang.Object)(foo=bar))\";effective:=active");
1: 		bab.exportPackage("foo");
1: 		Subsystem root = getRootSubsystem();
1: 		Bundle a = root.getBundleContext().installBundle(
1: 				"a", 
1: 				bab.build());
1: 		uninstallableBundles.add(a);
1: 		startBundle(a);
1: 		try {
1: 			Subsystem subsystem = installSubsystem(
1: 					root,
1: 					"subsystem", 
1: 					new SubsystemArchiveBuilder()
1: 							.symbolicName("subsystem")
1: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1: 										+ provisionDependencies.toString())
1: 							.bundle(
1: 									"b", 
1: 									new BundleArchiveBuilder()
1: 											.symbolicName("b")
1: 											.importPackage("foo")
1: 											.build())
1: 							.build(),
1: 					flag
1: 			);
1: 			uninstallableSubsystems.add(subsystem);
1: 			startSubsystem(subsystem, flag);
1: 			stoppableSubsystems.add(subsystem);
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Subsystem should have installed and started");
1: 		}
1: 	}
1: }
============================================================================