1:1f667ca: /*
1:1f667ca:  * Licensed to the Apache Software Foundation (ASF) under one
1:1f667ca:  * or more contributor license agreements.  See the NOTICE file
1:1f667ca:  * distributed with this work for additional information
1:1f667ca:  * regarding copyright ownership.  The ASF licenses this file
1:1f667ca:  * to you under the Apache License, Version 2.0 (the
1:1f667ca:  * "License"); you may not use this file except in compliance
1:1f667ca:  * with the License.  You may obtain a copy of the License at
1:1f667ca:  *
1:1f667ca:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1f667ca:  *
1:1f667ca:  * Unless required by applicable law or agreed to in writing,
1:1f667ca:  * software distributed under the License is distributed on an
1:1f667ca:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1f667ca:  * KIND, either express or implied.  See the License for the
1:1f667ca:  * specific language governing permissions and limitations
1:1f667ca:  * under the License.
1:1f667ca:  */
1:1f667ca: package org.apache.aries.subsystem.itests.defect;
1:1f667ca: 
1:1f667ca: import org.apache.aries.subsystem.itests.SubsystemTest;
1:1f667ca: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1:1f667ca: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1:1f667ca: import org.junit.Test;
1:1f667ca: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:1f667ca: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:1f667ca: import org.osgi.framework.Bundle;
1:1f667ca: import org.osgi.service.subsystem.Subsystem;
1:1f667ca: import org.osgi.service.subsystem.SubsystemConstants;
1:1f667ca: 
1:1f667ca: @ExamReactorStrategy(PerMethod.class)
1:1f667ca: public class Aries1441Test extends SubsystemTest {
1:1f667ca: 	@Test
1:1f667ca: 	public void testApplication() throws Exception {
1:1f667ca: 		test(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:1f667ca: 	}
1:1f667ca: 	
1:1f667ca: 	@Test
1:1f667ca: 	public void testComposite() throws Exception {
1:1f667ca: 		test(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:1f667ca: 	}
1:1f667ca: 	
1:1f667ca: 	@Test
1:1f667ca: 	public void testFeature() throws Exception {
1:1f667ca: 		test(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:1f667ca: 	}
1:1f667ca: 	
1:1f667ca: 	private void test(String type) throws Exception {
1:1f667ca: 		SubsystemArchiveBuilder builder = new SubsystemArchiveBuilder()
1:1f667ca: 				.symbolicName("subsystem")
1:1f667ca: 				.type(type)
1:1f667ca: 				.content("a;version=\"[0,0]\"")
1:1f667ca: 				.bundle(
1:1f667ca: 						"a",
1:1f667ca: 						new BundleArchiveBuilder()
1:1f667ca: 								.symbolicName("a")
1:1f667ca: 									.importPackage("org.osgi.framework")
1:1f667ca: 									.importPackage("b")
1:1f667ca: 									.build()
1:1f667ca: 				)
1:1f667ca: 				.bundle(
1:1f667ca: 						"b",
1:1f667ca: 						new BundleArchiveBuilder()
1:1f667ca: 								.symbolicName("b")
1:1f667ca: 									.exportPackage("b")
1:1f667ca: 									.build()
1:1f667ca: 				);
1:1f667ca: 		if (SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)) {
1:1f667ca: 			builder.importPackage("org.osgi.framework,b");
1:1f667ca: 		}
1:1f667ca: 		Subsystem root = getRootSubsystem();
1:1f667ca: 		Subsystem subsystem = installSubsystem(root, "subsystem", builder.build());
1:1f667ca: 		uninstallableSubsystems.add(subsystem);
1:1f667ca: 		startSubsystem(subsystem);
1:1f667ca: 		stoppableSubsystems.add(subsystem);
1:1f667ca: 		Bundle core = getSubsystemCoreBundle();
1:1f667ca: 		core.stop();
1:1f667ca: 		stoppableSubsystems.remove(subsystem);
1:1f667ca: 		uninstallableSubsystems.remove(subsystem);
1:1f667ca: 		assertBundleState(getSystemBundle(), org.osgi.framework.Bundle.ACTIVE);
1:1f667ca: 		core.start();
1:1f667ca: 		root = getRootSubsystem();
1:1f667ca: 		subsystem = getChild(root, "subsystem", null, type);
1:1f667ca: 		stopSubsystem(subsystem);
1:1f667ca: 		assertBundleState(Bundle.RESOLVED, "b", root);
1:1f667ca: 		uninstallSubsystem(subsystem);
1:1f667ca: 		assertNotConstituent(root, "b");
1:1f667ca: 	}
1:1f667ca: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:1f667ca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: @ExamReactorStrategy(PerMethod.class)
1: public class Aries1441Test extends SubsystemTest {
1: 	@Test
1: 	public void testApplication() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 	}
1: 	
1: 	@Test
1: 	public void testComposite() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 	}
1: 	
1: 	@Test
1: 	public void testFeature() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 	}
1: 	
1: 	private void test(String type) throws Exception {
1: 		SubsystemArchiveBuilder builder = new SubsystemArchiveBuilder()
1: 				.symbolicName("subsystem")
1: 				.type(type)
1: 				.content("a;version=\"[0,0]\"")
1: 				.bundle(
1: 						"a",
1: 						new BundleArchiveBuilder()
1: 								.symbolicName("a")
1: 									.importPackage("org.osgi.framework")
1: 									.importPackage("b")
1: 									.build()
1: 				)
1: 				.bundle(
1: 						"b",
1: 						new BundleArchiveBuilder()
1: 								.symbolicName("b")
1: 									.exportPackage("b")
1: 									.build()
1: 				);
1: 		if (SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)) {
1: 			builder.importPackage("org.osgi.framework,b");
1: 		}
1: 		Subsystem root = getRootSubsystem();
1: 		Subsystem subsystem = installSubsystem(root, "subsystem", builder.build());
1: 		uninstallableSubsystems.add(subsystem);
1: 		startSubsystem(subsystem);
1: 		stoppableSubsystems.add(subsystem);
1: 		Bundle core = getSubsystemCoreBundle();
1: 		core.stop();
1: 		stoppableSubsystems.remove(subsystem);
1: 		uninstallableSubsystems.remove(subsystem);
1: 		assertBundleState(getSystemBundle(), org.osgi.framework.Bundle.ACTIVE);
1: 		core.start();
1: 		root = getRootSubsystem();
1: 		subsystem = getChild(root, "subsystem", null, type);
1: 		stopSubsystem(subsystem);
1: 		assertBundleState(Bundle.RESOLVED, "b", root);
1: 		uninstallSubsystem(subsystem);
1: 		assertNotConstituent(root, "b");
1: 	}
1: }
============================================================================