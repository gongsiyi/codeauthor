1:6df3ad3: /*
1:6df3ad3:  * Licensed to the Apache Software Foundation (ASF) under one
1:6df3ad3:  * or more contributor license agreements.  See the NOTICE file
1:6df3ad3:  * distributed with this work for additional information
1:6df3ad3:  * regarding copyright ownership.  The ASF licenses this file
1:6df3ad3:  * to you under the Apache License, Version 2.0 (the
1:6df3ad3:  * "License"); you may not use this file except in compliance
1:6df3ad3:  * with the License.  You may obtain a copy of the License at
1:6df3ad3:  *
1:6df3ad3:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6df3ad3:  *
1:6df3ad3:  * Unless required by applicable law or agreed to in writing,
1:6df3ad3:  * software distributed under the License is distributed on an
1:6df3ad3:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6df3ad3:  * KIND, either express or implied.  See the License for the
1:6df3ad3:  * specific language governing permissions and limitations
1:6df3ad3:  * under the License.
1:6df3ad3:  */
1:6df3ad3: package org.apache.aries.util;
1:6df3ad3: 
1:6df3ad3: import org.apache.aries.util.internal.DefaultWorker;
1:6df3ad3: import org.apache.aries.util.internal.EquinoxWorker;
1:6df3ad3: import org.apache.aries.util.internal.FelixWorker;
1:6df3ad3: import org.apache.aries.util.internal.FrameworkUtilWorker;
1:6df3ad3: import org.apache.aries.util.internal.R43Worker;
1:6df3ad3: import org.osgi.framework.Bundle;
1:6df3ad3: import org.osgi.framework.FrameworkUtil;
1:6df3ad3: import org.osgi.framework.ServiceRegistration;
1:6df3ad3: 
1:6df3ad3: public final class AriesFrameworkUtil
1:6df3ad3: {
1:6df3ad3:   private static FrameworkUtilWorker worker;
1:6df3ad3:   
1:6df3ad3:   static {
1:6df3ad3:     try {
1:6df3ad3:       worker = new R43Worker();
1:6df3ad3:     } catch (Throwable e) {
1:6df3ad3:     }
1:6df3ad3:     Bundle b = FrameworkUtil.getBundle(AriesFrameworkUtil.class);
1:6df3ad3:     String bundleClassName = b == null? "": b.getClass().getName();
1:6df3ad3:     if (worker == null && isEquinox(bundleClassName)) {
1:6df3ad3:       worker = new EquinoxWorker();
1:6df3ad3:     } else if (worker == null && bundleClassName.startsWith("org.apache.felix")) {
1:6df3ad3:       worker = new FelixWorker();
1:6df3ad3:     } 
1:6df3ad3:     
1:6df3ad3:     if (worker == null || !!!worker.isValid()) worker = new DefaultWorker();
1:6df3ad3:   }
1:6df3ad3:   
1:6df3ad3:   
1:6df3ad3:   /**
1:6df3ad3:    * This method attempts to get the classloader for a bundle. It may return null if
1:6df3ad3:    * their is no such classloader, or if it cannot obtain the classloader for the bundle.
1:6df3ad3:    * 
1:6df3ad3:    * @param b the bundle whose classloader is desired.
1:6df3ad3:    * @return  the classloader if found, or null if for example the bundle is in INSTALLED or UNINSTALLED state
1:6df3ad3:    */
1:6df3ad3:   public static ClassLoader getClassLoader(Bundle b)
1:6df3ad3:   {
1:6df3ad3:     if (b != null && b.getState() != Bundle.UNINSTALLED && b.getState() != Bundle.INSTALLED) {
1:6df3ad3:       return worker.getClassLoader(b);
1:6df3ad3:     } else {
1:6df3ad3:       return null;
1:6df3ad3:     }
1:6df3ad3:   }
1:6df3ad3:   
1:6df3ad3:   /**
1:6df3ad3:    * Returns true if we are in equinox, and we can access the interfaces we need.
1:6df3ad3:    * @param bundleClassName the class name of the bundle implementation.
1:6df3ad3:    * @return true if we are in equinox, false otherwise.
1:6df3ad3:    */
1:6df3ad3:   private static boolean isEquinox(String bundleClassName) 
1:6df3ad3:   {
1:6df3ad3:     if (bundleClassName.startsWith("org.eclipse.osgi")) {
1:6df3ad3:       try {
1:6df3ad3:         Class.forName("org.eclipse.osgi.framework.internal.core.BundleHost");
1:6df3ad3:         return true;
1:6df3ad3:       } catch (ClassNotFoundException e) {
1:6df3ad3:       }
1:6df3ad3:     }
1:6df3ad3:     return false;
1:6df3ad3:   }
1:6df3ad3: 
1:6df3ad3:   /**
1:6df3ad3:    * This method attempts to get the classloader for a bundle. It will force the creation
1:6df3ad3:    * of a classloader, so if no classloader exists. If the bundle is in installed state, but
1:6df3ad3:    * cannot be resolved the null will be returned.
1:6df3ad3:    * 
1:6df3ad3:    * @param b the bundle to get a classloader for
1:6df3ad3:    * @return  the classloader.
1:6df3ad3:    */
1:6df3ad3:   public static ClassLoader getClassLoaderForced(Bundle b)
1:6df3ad3:   {
1:6df3ad3:     if (b == null)
1:6df3ad3:       return null;
1:6df3ad3:     try {
1:6df3ad3:       b.loadClass("java.lang.Object");
1:6df3ad3:     } catch (ClassNotFoundException e) {
1:6df3ad3:     }
1:6df3ad3:     return worker.getClassLoader(b);
1:6df3ad3:   }
1:6df3ad3:   
1:6df3ad3:   /**
1:6df3ad3:    * Safely unregister the supplied ServiceRegistration, for when you don't
1:6df3ad3:    * care about the potential IllegalStateException and don't want
1:6df3ad3:    * it to run wild through your code
1:6df3ad3:    * 
1:6df3ad3:    * @param reg The {@link ServiceRegistration}, may be null
1:6df3ad3:    */
1:6df3ad3:   public static void safeUnregisterService(ServiceRegistration reg) 
1:6df3ad3:   {
1:6df3ad3:     if(reg != null) {
1:6df3ad3:       try {
1:6df3ad3:         reg.unregister();
1:6df3ad3:       } catch (IllegalStateException e) {
1:6df3ad3:         //This can be safely ignored
1:6df3ad3:       }
1:6df3ad3:     }
1:6df3ad3:   }
1:6df3ad3: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util;
1: 
1: import org.apache.aries.util.internal.DefaultWorker;
1: import org.apache.aries.util.internal.EquinoxWorker;
1: import org.apache.aries.util.internal.FelixWorker;
1: import org.apache.aries.util.internal.FrameworkUtilWorker;
1: import org.apache.aries.util.internal.R43Worker;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: public final class AriesFrameworkUtil
1: {
1:   private static FrameworkUtilWorker worker;
1:   
1:   static {
1:     try {
1:       worker = new R43Worker();
1:     } catch (Throwable e) {
1:     }
1:     Bundle b = FrameworkUtil.getBundle(AriesFrameworkUtil.class);
1:     String bundleClassName = b == null? "": b.getClass().getName();
1:     if (worker == null && isEquinox(bundleClassName)) {
1:       worker = new EquinoxWorker();
1:     } else if (worker == null && bundleClassName.startsWith("org.apache.felix")) {
1:       worker = new FelixWorker();
1:     } 
1:     
1:     if (worker == null || !!!worker.isValid()) worker = new DefaultWorker();
1:   }
1:   
1:   
1:   /**
1:    * This method attempts to get the classloader for a bundle. It may return null if
1:    * their is no such classloader, or if it cannot obtain the classloader for the bundle.
1:    * 
1:    * @param b the bundle whose classloader is desired.
1:    * @return  the classloader if found, or null if for example the bundle is in INSTALLED or UNINSTALLED state
1:    */
1:   public static ClassLoader getClassLoader(Bundle b)
1:   {
1:     if (b != null && b.getState() != Bundle.UNINSTALLED && b.getState() != Bundle.INSTALLED) {
1:       return worker.getClassLoader(b);
1:     } else {
1:       return null;
1:     }
1:   }
1:   
1:   /**
1:    * Returns true if we are in equinox, and we can access the interfaces we need.
1:    * @param bundleClassName the class name of the bundle implementation.
1:    * @return true if we are in equinox, false otherwise.
1:    */
1:   private static boolean isEquinox(String bundleClassName) 
1:   {
1:     if (bundleClassName.startsWith("org.eclipse.osgi")) {
1:       try {
1:         Class.forName("org.eclipse.osgi.framework.internal.core.BundleHost");
1:         return true;
1:       } catch (ClassNotFoundException e) {
1:       }
1:     }
1:     return false;
1:   }
1: 
1:   /**
1:    * This method attempts to get the classloader for a bundle. It will force the creation
1:    * of a classloader, so if no classloader exists. If the bundle is in installed state, but
1:    * cannot be resolved the null will be returned.
1:    * 
1:    * @param b the bundle to get a classloader for
1:    * @return  the classloader.
1:    */
1:   public static ClassLoader getClassLoaderForced(Bundle b)
1:   {
1:     if (b == null)
1:       return null;
1:     try {
1:       b.loadClass("java.lang.Object");
1:     } catch (ClassNotFoundException e) {
1:     }
1:     return worker.getClassLoader(b);
1:   }
1:   
1:   /**
1:    * Safely unregister the supplied ServiceRegistration, for when you don't
1:    * care about the potential IllegalStateException and don't want
1:    * it to run wild through your code
1:    * 
1:    * @param reg The {@link ServiceRegistration}, may be null
1:    */
1:   public static void safeUnregisterService(ServiceRegistration reg) 
1:   {
1:     if(reg != null) {
1:       try {
1:         reg.unregister();
1:       } catch (IllegalStateException e) {
1:         //This can be safely ignored
1:       }
1:     }
1:   }
1: }
============================================================================