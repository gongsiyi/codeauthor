1:64f241a: /**
1:64f241a:  * Licensed to the Apache Software Foundation (ASF) under one
1:64f241a:  * or more contributor license agreements.  See the NOTICE file
1:64f241a:  * distributed with this work for additional information
1:64f241a:  * regarding copyright ownership.  The ASF licenses this file
1:64f241a:  * to you under the Apache License, Version 2.0 (the
1:64f241a:  * "License"); you may not use this file except in compliance
1:64f241a:  * with the License.  You may obtain a copy of the License at
1:64f241a:  * <p>
1:64f241a:  * http://www.apache.org/licenses/LICENSE-2.0
1:64f241a:  * <p>
1:64f241a:  * Unless required by applicable law or agreed to in writing,
1:64f241a:  * software distributed under the License is distributed on an
1:64f241a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:64f241a:  * KIND, either express or implied.  See the License for the
1:64f241a:  * specific language governing permissions and limitations
1:64f241a:  * under the License.
1:64f241a:  */
1:64f241a: package org.apache.aries.blueprint.plugin.javax;
1:64f241a: 
1:64f241a: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1:64f241a: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:64f241a: import org.apache.aries.blueprint.plugin.spi.FieldAnnotationHandler;
1:64f241a: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:64f241a: 
1:64f241a: import javax.persistence.PersistenceContext;
1:64f241a: import javax.xml.stream.XMLStreamException;
1:64f241a: import javax.xml.stream.XMLStreamWriter;
1:64f241a: import java.lang.reflect.Field;
1:64f241a: import java.util.List;
1:64f241a: 
1:a680609: import static org.apache.aries.blueprint.plugin.javax.Namespaces.PATTERN_NS_JPA1;
1:a680609: import static org.apache.aries.blueprint.plugin.javax.Namespaces.PATTERN_NS_JPA2;
1:a680609: import static org.apache.aries.blueprint.plugin.javax.Namespaces.getNamespaceByPattern;
1:a680609: 
1:64f241a: public class PersistenceContextHandler implements FieldAnnotationHandler<PersistenceContext> {
1:64f241a: 
1:64f241a:     @Override
1:64f241a:     public Class<PersistenceContext> getAnnotation() {
1:64f241a:         return PersistenceContext.class;
1:64f241a:     }
1:64f241a: 
1:64f241a:     @Override
1:fc7ae19:     public void handleFieldAnnotation(Class<?> clazz, List<Field> fields, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:a680609:         final String nsJpa1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_JPA1);
1:a680609:         if (nsJpa1 != null) {
1:64f241a:             for (final Field field : fields) {
1:64f241a:                 final String name = field.getName();
1:64f241a:                 final PersistenceContext persistenceContext = field.getAnnotation(PersistenceContext.class);
1:64f241a:                 beanEnricher.addBeanContentWriter("javax.persistence.field.context/" + name, new XmlWriter() {
1:64f241a:                     @Override
1:64f241a:                     public void write(XMLStreamWriter writer) throws XMLStreamException {
1:6aac545:                         writer.writeEmptyElement("context");
1:a680609:                         writer.writeDefaultNamespace(nsJpa1);
1:64f241a:                         writer.writeAttribute("unitname", persistenceContext.unitName());
1:64f241a:                         writer.writeAttribute("property", name);
1:64f241a:                     }
1:64f241a:                 });
1:64f241a:             }
1:64f241a:         }
1:a680609:         final String nsJpa2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_JPA2);
1:a680609:         if (nsJpa2 != null) {
1:64f241a:             contextEnricher.addBlueprintContentWriter("javax.persistence.enableJpa2", new XmlWriter() {
1:64f241a:                 @Override
1:64f241a:                 public void write(XMLStreamWriter writer) throws XMLStreamException {
1:6aac545:                     writer.writeEmptyElement("enable");
1:a680609:                     writer.writeDefaultNamespace(nsJpa2);
1:64f241a:                 }
1:64f241a:             });
1:64f241a:         }
1:64f241a:     }
1:64f241a: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:fc7ae19
/////////////////////////////////////////////////////////////////////////
1:     public void handleFieldAnnotation(Class<?> clazz, List<Field> fields, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
commit:a680609
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.plugin.javax.Namespaces.PATTERN_NS_JPA1;
1: import static org.apache.aries.blueprint.plugin.javax.Namespaces.PATTERN_NS_JPA2;
1: import static org.apache.aries.blueprint.plugin.javax.Namespaces.getNamespaceByPattern;
1: 
/////////////////////////////////////////////////////////////////////////
1:         final String nsJpa1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_JPA1);
1:         if (nsJpa1 != null) {
/////////////////////////////////////////////////////////////////////////
1:                         writer.writeDefaultNamespace(nsJpa1);
1:         final String nsJpa2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_JPA2);
1:         if (nsJpa2 != null) {
1:                     writer.writeDefaultNamespace(nsJpa2);
commit:6aac545
/////////////////////////////////////////////////////////////////////////
1:                         writer.writeEmptyElement("context");
0:                         writer.writeDefaultNamespace(NS_JPA);
/////////////////////////////////////////////////////////////////////////
1:                     writer.writeEmptyElement("enable");
0:                     writer.writeDefaultNamespace(NS_JPA2);
commit:64f241a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.javax;
1: 
1: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1: import org.apache.aries.blueprint.plugin.spi.FieldAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1: 
1: import javax.persistence.PersistenceContext;
1: import javax.xml.stream.XMLStreamException;
1: import javax.xml.stream.XMLStreamWriter;
1: import java.lang.reflect.Field;
1: import java.util.List;
1: 
1: public class PersistenceContextHandler implements FieldAnnotationHandler<PersistenceContext> {
0:     public static final String NS_JPA = "http://aries.apache.org/xmlns/jpa/v1.1.0";
0:     public static final String NS_JPA2 = "http://aries.apache.org/xmlns/jpa/v2.0.0";
1: 
1:     @Override
1:     public Class<PersistenceContext> getAnnotation() {
1:         return PersistenceContext.class;
1:     }
1: 
1:     @Override
0:     public void handleMethodAnnotation(Class<?> clazz, List<Field> fields, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
0:         if (contextEnricher.getBlueprintConfiguration().getNamespaces().contains(NS_JPA)) {
1:             for (final Field field : fields) {
1:                 final String name = field.getName();
1:                 final PersistenceContext persistenceContext = field.getAnnotation(PersistenceContext.class);
1:                 beanEnricher.addBeanContentWriter("javax.persistence.field.context/" + name, new XmlWriter() {
1:                     @Override
1:                     public void write(XMLStreamWriter writer) throws XMLStreamException {
0:                         writer.writeEmptyElement("jpa", "context", NS_JPA);
1:                         writer.writeAttribute("unitname", persistenceContext.unitName());
1:                         writer.writeAttribute("property", name);
1:                     }
1:                 });
1:             }
1:         }
0:         if (contextEnricher.getBlueprintConfiguration().getNamespaces().contains(NS_JPA2)) {
1:             contextEnricher.addBlueprintContentWriter("javax.persistence.enableJpa2", new XmlWriter() {
1:                 @Override
1:                 public void write(XMLStreamWriter writer) throws XMLStreamException {
0:                     writer.writeEmptyElement("jpa", "enable", NS_JPA2);
1:                 }
1:             });
1:         }
1:     }
1: }
============================================================================