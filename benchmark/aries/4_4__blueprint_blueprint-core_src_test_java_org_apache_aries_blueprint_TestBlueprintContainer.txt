1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint;
1:f13c6ac: 
1:5e2bd49: import java.util.ArrayList;
1:5e2bd49: import java.util.List;
1:5e2bd49: import java.util.Map;
1:f13c6ac: 
1:5e2bd49: import org.apache.aries.blueprint.container.AggregateConverter;
1:6414875: import org.apache.aries.blueprint.container.BlueprintContainerImpl;
1:6bd0f94: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1:5e2bd49: import org.apache.aries.blueprint.proxy.ProxyUtils;
1:2f55d71: import org.apache.aries.blueprint.reflect.PassThroughMetadataImpl;
1:d4b3ee0: import org.apache.aries.proxy.ProxyManager;
1:7ecd3f1: import org.apache.aries.proxy.impl.JdkProxyManager;
1:5e2bd49: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:5e2bd49: import org.osgi.service.blueprint.container.Converter;
1:5e2bd49: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:5e2bd49: import org.osgi.service.blueprint.reflect.RefMetadata;
1:5e2bd49: import org.osgi.service.blueprint.reflect.Target;
1:5e2bd49: 
1:f13c6ac: public class TestBlueprintContainer extends BlueprintContainerImpl {
1:f13c6ac: 
1:f13c6ac:     private ComponentDefinitionRegistryImpl registry;
1:f13c6ac:     
1:5e2bd49:     public TestBlueprintContainer(ComponentDefinitionRegistryImpl registry) throws Exception {
1:7ecd3f1:         this(registry, new JdkProxyManager());
1:d4b3ee0:     }
1:d4b3ee0: 
1:5e2bd49:     public TestBlueprintContainer(ComponentDefinitionRegistryImpl registry, ProxyManager proxyManager) throws Exception {
1:c89ef70:         super(null, new TestBundleContext(), null, null, null, null, null, null, proxyManager, null);
1:f13c6ac:         this.registry = registry;
1:f13c6ac:         if (registry != null) {
1:2f55d71:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintContainer", this));
1:2f55d71:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundle", getBundleContext().getBundle()));
1:2f55d71:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundleContext", getBundleContext()));
1:2f55d71:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintConverter", getConverter()));
1:5e2bd49:             processTypeConverters();
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:     
1:55084bf:     protected void processTypeConverters() throws Exception {
1:5e2bd49:         List<String> typeConverters = new ArrayList<String>();
1:5e2bd49:         for (Target target : registry.getTypeConverters()) {
1:5e2bd49:             if (target instanceof ComponentMetadata) {
1:5e2bd49:                 typeConverters.add(((ComponentMetadata) target).getId());
1:5e2bd49:             } else if (target instanceof RefMetadata) {
1:5e2bd49:                 typeConverters.add(((RefMetadata) target).getComponentId());
1:5e2bd49:             } else {
1:5e2bd49:                 throw new ComponentDefinitionException("Unexpected metadata for type converter: " + target);
1:5e2bd49:             }
1:5e2bd49:         }
1:5e2bd49: 
1:5e2bd49:         Map<String, Object> objects = getRepository().createAll(typeConverters, ProxyUtils.asList(Converter.class));
1:5e2bd49:         for (String name : typeConverters) {
1:5e2bd49:             Object obj = objects.get(name);
1:5e2bd49:             if (obj instanceof Converter) {
1:5e2bd49:                 ((AggregateConverter)getConverter()).registerConverter((Converter) obj);
1:5e2bd49:             } else {
1:5e2bd49:                 throw new ComponentDefinitionException("Type converter " + obj + " does not implement the " + Converter.class.getName() + " interface");
1:5e2bd49:             }
1:5e2bd49:         }
1:5e2bd49:     }
1:5e2bd49: 
1:f13c6ac:     @Override
1:f13c6ac:     public Class loadClass(String name) throws ClassNotFoundException {
1:f13c6ac:         return Thread.currentThread().getContextClassLoader().loadClass(name);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Override
1:f13c6ac:     public ComponentDefinitionRegistryImpl getComponentDefinitionRegistry() {
1:f13c6ac:         return registry;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c89ef70
/////////////////////////////////////////////////////////////////////////
1:         super(null, new TestBundleContext(), null, null, null, null, null, null, proxyManager, null);
commit:55084bf
/////////////////////////////////////////////////////////////////////////
1:     protected void processTypeConverters() throws Exception {
commit:6d7c26a
/////////////////////////////////////////////////////////////////////////
0:         super(null, new TestBundleContext(), null, null, null, null, null, null, proxyManager);
commit:fe68bf1
/////////////////////////////////////////////////////////////////////////
0:         super(new TestBundleContext(), null, null, null, null, null, null, proxyManager);
commit:d4b3ee0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.ProxyManager;
0:         this(registry, null);
1:     }
1: 
0:     public TestBlueprintContainer(ComponentDefinitionRegistryImpl registry, ProxyManager proxyManager) {
0:         super(new TestBundleContext(), null, null, null, null, null, proxyManager);
commit:4dfd2d8
/////////////////////////////////////////////////////////////////////////
0:         super(new TestBundleContext(), null, null, null, null, null, null);
commit:2f55d71
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.reflect.PassThroughMetadataImpl;
/////////////////////////////////////////////////////////////////////////
1:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintContainer", this));
1:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundle", getBundleContext().getBundle()));
1:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundleContext", getBundleContext()));
1:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintConverter", getConverter()));
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint;
1: 
0: import org.apache.geronimo.blueprint.container.BlueprintContainerImpl;
0: import org.apache.geronimo.blueprint.namespace.ComponentDefinitionRegistryImpl;
0: import org.apache.geronimo.blueprint.reflect.EnvironmentMetadataImpl;
1: 
1: public class TestBlueprintContainer extends BlueprintContainerImpl {
1: 
1:     private ComponentDefinitionRegistryImpl registry;
1:     
0:     public TestBlueprintContainer(ComponentDefinitionRegistryImpl registry) {
0:         super(new TestBundleContext(), null, null, null, null, null);
1:         this.registry = registry;
1:         if (registry != null) {
0:             registry.registerComponentDefinition(new EnvironmentMetadataImpl("blueprintContainer", this));
0:             registry.registerComponentDefinition(new EnvironmentMetadataImpl("blueprintBundle", getBundleContext().getBundle()));
0:             registry.registerComponentDefinition(new EnvironmentMetadataImpl("blueprintBundleContext", getBundleContext()));
0:             registry.registerComponentDefinition(new EnvironmentMetadataImpl("blueprintConverter", getConverter()));
1:         }
1:     }
1: 
1:     @Override
1:     public Class loadClass(String name) throws ClassNotFoundException {
1:         return Thread.currentThread().getContextClassLoader().loadClass(name);
1:     }
1: 
1:     @Override
1:     public ComponentDefinitionRegistryImpl getComponentDefinitionRegistry() {
1:         return registry;
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7ecd3f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.JdkProxyManager;
/////////////////////////////////////////////////////////////////////////
1:         this(registry, new JdkProxyManager());
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.blueprint.container.AggregateConverter;
1: import org.apache.aries.blueprint.proxy.ProxyUtils;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.osgi.service.blueprint.container.Converter;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.RefMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
1:     public TestBlueprintContainer(ComponentDefinitionRegistryImpl registry) throws Exception {
1:     public TestBlueprintContainer(ComponentDefinitionRegistryImpl registry, ProxyManager proxyManager) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             processTypeConverters();
1:         }
1:     }
1:     
0:     private void processTypeConverters() throws Exception {
1:         List<String> typeConverters = new ArrayList<String>();
1:         for (Target target : registry.getTypeConverters()) {
1:             if (target instanceof ComponentMetadata) {
1:                 typeConverters.add(((ComponentMetadata) target).getId());
1:             } else if (target instanceof RefMetadata) {
1:                 typeConverters.add(((RefMetadata) target).getComponentId());
1:             } else {
1:                 throw new ComponentDefinitionException("Unexpected metadata for type converter: " + target);
1:             }
1:         }
1: 
1:         Map<String, Object> objects = getRepository().createAll(typeConverters, ProxyUtils.asList(Converter.class));
1:         for (String name : typeConverters) {
1:             Object obj = objects.get(name);
1:             if (obj instanceof Converter) {
1:                 ((AggregateConverter)getConverter()).registerConverter((Converter) obj);
1:             } else {
1:                 throw new ComponentDefinitionException("Type converter " + obj + " does not implement the " + Converter.class.getName() + " interface");
1:             }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:6bd0f94
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
commit:c1dc516
/////////////////////////////////////////////////////////////////////////
0:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundle", getBundleContext().getBundle()));
0:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundleContext", getBundleContext()));
0:             registry.registerComponentDefinition(new PassThroughMetadataImpl("blueprintConverter", getConverter()));
commit:79e9d13
/////////////////////////////////////////////////////////////////////////
0:             // overwrite the dummy container with something proper because it is needed somewhere
0:             registry.removeComponentDefinition("blueprintContainer");
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint;
1: import org.apache.aries.blueprint.container.BlueprintContainerImpl;
0: import org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl;
0: import org.apache.aries.blueprint.reflect.EnvironmentMetadataImpl;
============================================================================