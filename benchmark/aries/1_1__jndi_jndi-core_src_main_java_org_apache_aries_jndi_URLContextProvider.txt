1:1f6db42: /*
1:1f6db42:  * Licensed to the Apache Software Foundation (ASF) under one
1:1f6db42:  * or more contributor license agreements.  See the NOTICE file
1:1f6db42:  * distributed with this work for additional information
1:1f6db42:  * regarding copyright ownership.  The ASF licenses this file
1:1f6db42:  * to you under the Apache License, Version 2.0 (the
1:1f6db42:  * "License"); you may not use this file except in compliance
1:1f6db42:  * with the License.  You may obtain a copy of the License at
1:1f6db42:  *
1:1f6db42:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1f6db42:  *
1:1f6db42:  * Unless required by applicable law or agreed to in writing,
1:1f6db42:  * software distributed under the License is distributed on an
1:1f6db42:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1f6db42:  * KIND, either express or implied.  See the License for the
1:1f6db42:  * specific language governing permissions and limitations
1:1f6db42:  * under the License.
1:1f6db42:  */
1:1f6db42: package org.apache.aries.jndi;
1:1f6db42: 
1:1f6db42: import java.util.Hashtable;
1:1f6db42: 
1:1f6db42: import javax.naming.Context;
1:1f6db42: import javax.naming.NamingException;
1:1f6db42: import javax.naming.spi.ObjectFactory;
1:1f6db42: 
1:1f6db42: import org.osgi.framework.BundleContext;
1:1f6db42: import org.osgi.framework.ServiceReference;
1:1f6db42: 
1:1f6db42: public class URLContextProvider extends ContextProvider {
1:1f6db42:     private final ObjectFactory factory;
1:1f6db42:     private final Hashtable<?, ?> environment;
1:1f6db42:     
1:1f6db42:     public URLContextProvider(BundleContext bc, ServiceReference reference, ObjectFactory factory, Hashtable<?, ?> environment) {
1:1f6db42:         super(bc, reference);
1:1f6db42:         this.factory = factory;
1:1f6db42:         this.environment = environment;
1:1f6db42:     }
1:1f6db42: 
1:1f6db42:     @Override
1:1f6db42:     public Context getContext() throws NamingException {
1:1f6db42:         try {
1:1f6db42:             return (Context) factory.getObjectInstance(null, null, null, environment);
1:1f6db42:         } catch (Exception e) {
1:1f6db42:             NamingException ne = new NamingException();
1:1f6db42:             ne.initCause(e);
1:1f6db42:             throw ne;
1:1f6db42:         }
1:1f6db42:     }    
1:1f6db42: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:1f6db42
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.ObjectFactory;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: 
1: public class URLContextProvider extends ContextProvider {
1:     private final ObjectFactory factory;
1:     private final Hashtable<?, ?> environment;
1:     
1:     public URLContextProvider(BundleContext bc, ServiceReference reference, ObjectFactory factory, Hashtable<?, ?> environment) {
1:         super(bc, reference);
1:         this.factory = factory;
1:         this.environment = environment;
1:     }
1: 
1:     @Override
1:     public Context getContext() throws NamingException {
1:         try {
1:             return (Context) factory.getObjectInstance(null, null, null, environment);
1:         } catch (Exception e) {
1:             NamingException ne = new NamingException();
1:             ne.initCause(e);
1:             throw ne;
1:         }
1:     }    
1: }
============================================================================