1:79b20bc: /*
1:79b20bc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:79b20bc:  * you may not use this file except in compliance with the License.
1:79b20bc:  * You may obtain a copy of the License at
1:79b20bc:  *
1:79b20bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:79b20bc:  *
1:79b20bc:  * Unless required by applicable law or agreed to in writing, software
1:79b20bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79b20bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79b20bc:  * See the License for the specific language governing permissions and
1:79b20bc:  * limitations under the License.
1:79b20bc:  */
1:79b20bc: package org.apache.aries.subsystem.core.internal;
1:79b20bc: 
1:79b20bc: import org.apache.aries.subsystem.ContentHandler;
1:79b20bc: import org.osgi.framework.InvalidSyntaxException;
1:79b20bc: import org.osgi.framework.ServiceReference;
1:79b20bc: 
1:79b20bc: class CustomResources {
1:79b20bc:     private CustomResources() {
1:79b20bc:         // Only static methods
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     /**
1:79b20bc:      * Find a custom content handler in the context of a given subsystem. Custom content handlers are
1:79b20bc:      * services of type {@link ContentHandler} with the service registration property
1:79b20bc:      * {@link ContentHandler#CONTENT_TYPE_PROPERTY} set to the type being handled.
1:79b20bc:      * @param subsystem The subsystem that provides the context to look up the service.
1:79b20bc:      * @param type The content type to find the handler for.
1:79b20bc:      * @return The Service Reference for the Content Handler for the type or {@code null} if not found.
1:79b20bc:      */
1:79b20bc:     static ServiceReference<ContentHandler> getCustomContentHandler(BasicSubsystem subsystem, String type) {
1:79b20bc:         try {
1:79b20bc:             for(ServiceReference<ContentHandler> ref :
1:79b20bc:                     subsystem.getBundleContext().getServiceReferences(ContentHandler.class,
1:79b20bc:                     "(" + ContentHandler.CONTENT_TYPE_PROPERTY + "=" + type + ")")) {
1:79b20bc:                 return ref;
1:79b20bc:             }
1:79b20bc:             return null;
1:79b20bc:         } catch (InvalidSyntaxException e) {
1:79b20bc:             throw new RuntimeException(e);
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.apache.aries.subsystem.ContentHandler;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: 
1: class CustomResources {
1:     private CustomResources() {
1:         // Only static methods
1:     }
1: 
1:     /**
1:      * Find a custom content handler in the context of a given subsystem. Custom content handlers are
1:      * services of type {@link ContentHandler} with the service registration property
1:      * {@link ContentHandler#CONTENT_TYPE_PROPERTY} set to the type being handled.
1:      * @param subsystem The subsystem that provides the context to look up the service.
1:      * @param type The content type to find the handler for.
1:      * @return The Service Reference for the Content Handler for the type or {@code null} if not found.
1:      */
1:     static ServiceReference<ContentHandler> getCustomContentHandler(BasicSubsystem subsystem, String type) {
1:         try {
1:             for(ServiceReference<ContentHandler> ref :
1:                     subsystem.getBundleContext().getServiceReferences(ContentHandler.class,
1:                     "(" + ContentHandler.CONTENT_TYPE_PROPERTY + "=" + type + ")")) {
1:                 return ref;
1:             }
1:             return null;
1:         } catch (InvalidSyntaxException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: }
============================================================================