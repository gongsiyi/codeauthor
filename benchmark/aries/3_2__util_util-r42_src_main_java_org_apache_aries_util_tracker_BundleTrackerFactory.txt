6:79268bf: /**
1:79268bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:79268bf:  * or more contributor license agreements.  See the NOTICE file
1:79268bf:  * distributed with this work for additional information
1:79268bf:  * regarding copyright ownership.  The ASF licenses this file
1:79268bf:  * to you under the Apache License, Version 2.0 (the
1:79268bf:  * "License"); you may not use this file except in compliance
1:79268bf:  * with the License.  You may obtain a copy of the License at
1:79268bf:  *
1:79268bf:  *   http://www.apache.org/licenses/LICENSE-2.0
1:79268bf:  *
1:79268bf:  * Unless required by applicable law or agreed to in writing,
1:79268bf:  * software distributed under the License is distributed on an
1:79268bf:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:79268bf:  * KIND, either express or implied.  See the License for the
1:79268bf:  * specific language governing permissions and limitations
1:79268bf:  * under the License.
6:79268bf:  */
1:79268bf: package org.apache.aries.util.tracker;
5:79268bf: 
1:79268bf: import java.util.ArrayList;
1:79268bf: import java.util.Collection;
1:79268bf: import java.util.List;
1:79268bf: import java.util.concurrent.ConcurrentHashMap;
1:79268bf: 
1:79268bf: import org.osgi.framework.Version;
1:79268bf: import org.osgi.util.tracker.BundleTracker;
1:79268bf: 
1:79268bf: /**
1:f23ad42:  * This is the factory for BundleTracker
1:79268bf:  */
1:1534743: public class BundleTrackerFactory {
1:1534743:     private static ConcurrentHashMap<String, List<BundleTracker>> btMap = new ConcurrentHashMap<String, List<BundleTracker>>();
1:79268bf: 
1:1534743:     /**
1:1534743:      * get bundle tracker based on bundle name and version
1:1534743:      * 
1:1534743:      * @param bundleScope
1:1534743:      *            composite bundle's - SymbolicName_Version
1:1534743:      * @return the list of bundle tracker associated with the bundle scope
1:1534743:      */
1:1534743:     public static List<BundleTracker> getBundleTrackerList(String bundleScope) {
1:1534743:         return (List<BundleTracker>) btMap.get(bundleScope);
8:79268bf:     }
1:1534743: 
1:1534743:     /**
1:1534743:      * get bundle tracker based on composite bundle's symbolicName and version
1:1534743:      * 
1:f23ad42:      * @param symbolicName
1:1534743:      *            composite bundle's symbolicName
1:f23ad42:      * @param version
1:1534743:      *            composite bundle's version
1:1534743:      * @return the list of bundle tracker associated with the bundle scope
1:1534743:      */
1:1534743:     public static List<BundleTracker> getBundleTrackerList(String symbolicName,
1:1534743:             Version version) {
1:1534743:         return (List<BundleTracker>) btMap.get(symbolicName + "_"
1:1534743:                 + version.toString());
1:1534743:     }
1:1534743: 
1:1534743:     /**
1:1534743:      * get all bundle tracker registered in this factory
1:1534743:      * 
1:f23ad42:      * @return all the trackers registered. The collection contains a List<BundleTracker> for each bundle scope.
1:1534743:      */
1:1534743:     public static Collection<List<BundleTracker>> getAllBundleTracker() {
1:1534743:         return btMap.values();
1:1534743:     }
1:1534743: 
1:1534743:     /**
1:1534743:      * register the bundle tracker
1:1534743:      * 
1:1534743:      * @param bundleScope
1:1534743:      *            composite bundle's SymbolicName_Version
1:1534743:      * @param bt
1:1534743:      *            the bundle tracker to be registered
1:1534743:      */
1:1534743:     public static void registerBundleTracker(String bundleScope,
1:1534743:             BundleTracker bt) {
1:1534743:         List<BundleTracker> list = btMap.get(bundleScope);
1:1534743:         if (list == null) {
1:1534743:             list = new ArrayList<BundleTracker>();
1:1534743:         }
1:1534743:         list.add(bt);
1:1534743:         btMap.putIfAbsent(bundleScope, list);
1:1534743:     }
1:1534743: 
1:1534743:     /**
1:1534743:      * unregister and close the bundle tracker(s) associated with composite
1:1534743:      * bundle's - SymbolicName_Version
1:1534743:      * 
1:1534743:      * @param bundleScope
1:1534743:      *            composite bundle's - SymbolicName_Version
1:1534743:      */
1:1534743:     public static void unregisterAndCloseBundleTracker(String bundleScope) {
1:1534743:         List<BundleTracker> list = btMap.get(bundleScope);
1:1534743:         if (list == null) {
1:1534743:             return;
1:1534743:         } else {
1:1534743:             for (BundleTracker bt : list) {
1:1534743:                 bt.close();
1:1534743:             }
1:1534743:         }
1:1534743:         btMap.remove(bundleScope);
1:1534743:     }
1:79268bf: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:f23ad42
/////////////////////////////////////////////////////////////////////////
1:  * This is the factory for BundleTracker
/////////////////////////////////////////////////////////////////////////
1:      * @param symbolicName
1:      * @param version
/////////////////////////////////////////////////////////////////////////
1:      * @return all the trackers registered. The collection contains a List<BundleTracker> for each bundle scope.
author:Lin Sun
-------------------------------------------------------------------------------
commit:1534743
/////////////////////////////////////////////////////////////////////////
1: public class BundleTrackerFactory {
1:     private static ConcurrentHashMap<String, List<BundleTracker>> btMap = new ConcurrentHashMap<String, List<BundleTracker>>();
1:     /**
1:      * get bundle tracker based on bundle name and version
1:      * 
1:      * @param bundleScope
1:      *            composite bundle's - SymbolicName_Version
1:      * @return the list of bundle tracker associated with the bundle scope
1:      */
1:     public static List<BundleTracker> getBundleTrackerList(String bundleScope) {
1:         return (List<BundleTracker>) btMap.get(bundleScope);
1: 
1:     /**
1:      * get bundle tracker based on composite bundle's symbolicName and version
1:      * 
0:      * @param bundleSymbolicName
1:      *            composite bundle's symbolicName
0:      * @param bundleVersion
1:      *            composite bundle's version
1:      * @return the list of bundle tracker associated with the bundle scope
1:      */
1:     public static List<BundleTracker> getBundleTrackerList(String symbolicName,
1:             Version version) {
1:         return (List<BundleTracker>) btMap.get(symbolicName + "_"
1:                 + version.toString());
1:     }
1: 
1:     /**
1:      * get all bundle tracker registered in this factory
1:      * 
0:      * @return
1:      */
1:     public static Collection<List<BundleTracker>> getAllBundleTracker() {
1:         return btMap.values();
1:     }
1: 
1:     /**
1:      * register the bundle tracker
1:      * 
1:      * @param bundleScope
1:      *            composite bundle's SymbolicName_Version
1:      * @param bt
1:      *            the bundle tracker to be registered
1:      */
1:     public static void registerBundleTracker(String bundleScope,
1:             BundleTracker bt) {
1:         List<BundleTracker> list = btMap.get(bundleScope);
1:         if (list == null) {
1:             list = new ArrayList<BundleTracker>();
1:         }
1:         list.add(bt);
1:         btMap.putIfAbsent(bundleScope, list);
1:     }
1: 
1:     /**
1:      * unregister and close the bundle tracker(s) associated with composite
1:      * bundle's - SymbolicName_Version
1:      * 
1:      * @param bundleScope
1:      *            composite bundle's - SymbolicName_Version
1:      */
1:     public static void unregisterAndCloseBundleTracker(String bundleScope) {
1:         List<BundleTracker> list = btMap.get(bundleScope);
1:         if (list == null) {
1:             return;
1:         } else {
1:             for (BundleTracker bt : list) {
1:                 bt.close();
1:             }
1:         }
1:         btMap.remove(bundleScope);
1:     }
commit:79268bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util.tracker;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.osgi.framework.Version;
1: import org.osgi.util.tracker.BundleTracker;
1: 
1: /**
0:  * this is the factory for BundleTracker
1:  */
0: public class BundleTrackerFactory
0: {
0:   private static ConcurrentHashMap<String, List<BundleTracker>> btMap = new ConcurrentHashMap<String, List<BundleTracker>>();
1: 
1:   /**
0:    * get bundle tracker based on bundle name and version
0:    * @param bundleScope        composite bundle's - SymbolicName_Version
0:    * @return                   the list of bundle tracker associated with the bundle scope
1:    */
0:   public static List<BundleTracker> getBundleTrackerList(String bundleScope)
0:   {
0:     return (List<BundleTracker>) btMap.get(bundleScope);
1:   }
1:   
1:   /**
0:    * get bundle tracker based on composite bundle's symbolicName and version
0:    * @param bundleSymbolicName  composite bundle's symbolicName 
0:    * @param bundleVersion       composite bundle's version
0:    * @return                    the list of bundle tracker associated with the bundle scope
1:    */
0:   public static List<BundleTracker> getBundleTrackerList(String symbolicName, Version version)
0:   {
0:     return (List<BundleTracker>) btMap.get(symbolicName + "_" + version.toString());
1:   }
1: 
1:   /**
0:    * get all bundle tracker registered in this factory
0:    * @return
1:    */
0:   public static Collection<List<BundleTracker>> getAllBundleTracker()
0:   {
0:     return btMap.values();
1:   }
1:   
1:   /**
0:    * register the bundle tracker
0:    * @param bundleScope    composite bundle's SymbolicName_Version
0:    * @param bt          the bundle tracker to be registered
1:    */
0:   public static void registerBundleTracker(String bundleScope, BundleTracker bt)
0:   {
0:     List<BundleTracker> list = btMap.get(bundleScope);
0:     if (list == null) {
0:       list = new ArrayList<BundleTracker>();
1:     } 
0:     list.add(bt);
0:     btMap.putIfAbsent(bundleScope, list);
1:   }
1:   
1:   /**
0:    * unregister and close the bundle tracker(s) associated with composite bundle's - SymbolicName_Version
0:    * @param bundleScope  composite bundle's - SymbolicName_Version
1:    */
0:   public static void unregisterAndCloseBundleTracker(String bundleScope)
0:   {
0:     List<BundleTracker> list = btMap.get(bundleScope);
0:     if (list == null) {
0:       return;
0:     } else {
0:       for (BundleTracker bt : list) {
0:         bt.close();
1:       }
1:     }
0:     btMap.remove(bundleScope);
1:   }
1: }
============================================================================