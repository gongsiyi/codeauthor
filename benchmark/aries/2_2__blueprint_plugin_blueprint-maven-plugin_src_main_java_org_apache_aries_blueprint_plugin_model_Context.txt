1:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:59217b2:  * <p/>
1:59217b2:  * http://www.apache.org/licenses/LICENSE-2.0
1:59217b2:  * <p/>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
1:46cfc09:  */
1:46cfc09: package org.apache.aries.blueprint.plugin.model;
8:46cfc09: 
1:868c96f: import org.apache.aries.blueprint.plugin.Extensions;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.BlueprintConfiguration;
1:868c96f: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:aaf182f: import org.apache.aries.blueprint.plugin.spi.ContextInitializationHandler;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:59217b2: 
1:a2ed671: import java.lang.annotation.Annotation;
1:b5bf406: import java.lang.reflect.Method;
1:46cfc09: import java.util.Arrays;
1:46cfc09: import java.util.Collection;
1:868c96f: import java.util.HashMap;
1:868c96f: import java.util.Map;
1:46cfc09: import java.util.SortedSet;
1:46cfc09: import java.util.TreeSet;
1:b5bf406: 
1:a2ed671: public class Context implements BlueprintRegister, ContextEnricher {
1:46cfc09: 
1:3d350f5:     SortedSet<BeanRef> reg = new TreeSet<BeanRef>();
1:0d2c0ec:     private final Map<String, XmlWriter> blueprintWriters = new HashMap<>();
1:0d2c0ec:     private final BlueprintConfiguration blueprintConfiguration;
1:46cfc09: 
1:0d2c0ec:     public Context(BlueprintConfiguration blueprintConfiguration, Class<?>... beanClasses) {
1:0d2c0ec:         this(blueprintConfiguration, Arrays.asList(beanClasses));
1:b5bf406:     }
1:3aa60ba: 
1:0d2c0ec:     public Context(BlueprintConfiguration blueprintConfiguration, Collection<Class<?>> beanClasses) {
1:0d2c0ec:         this.blueprintConfiguration = blueprintConfiguration;
1:aaf182f:         initContext();
1:46cfc09:         addBeans(beanClasses);
1:9b08497:     }
1:9b08497: 
1:aaf182f:     private void initContext() {
1:aaf182f:         for (ContextInitializationHandler contextInitializationHandler : Extensions.contextInitializationHandlers) {
1:aaf182f:             contextInitializationHandler.initContext(this);
1:65ec8ae:         }
1:65ec8ae:     }
1:65ec8ae: 
1:46cfc09:     private void addBeans(Collection<Class<?>> beanClasses) {
1:46cfc09:         for (Class<?> clazz : beanClasses) {
1:ae778e2:             addBean(clazz);
1:b5bf406:         }
1:b5bf406:     }
1:b5bf406: 
1:ae778e2:     private void addBean(Class<?> clazz) {
1:0d2c0ec:         Bean bean = new Bean(clazz, this);
1:9b08497:         reg.add(bean);
1:868c96f:         reg.addAll(bean.refs);
1:a2ed671:         addBeansFromFactories(bean);
1:ae778e2:     }
1:ae778e2: 
1:a2ed671:     private void addBeansFromFactories(BeanRef factoryBean) {
1:3d350f5:         for (Method method : factoryBean.clazz.getMethods()) {
1:a2ed671:             if (!isFactoryMethod(method)) {
1:a2ed671:                 continue;
1:0b1a9fb:             }
1:c201f83:             String name = AnnotationHelper.findName(method.getAnnotations());
1:a2ed671:             Class<?> beanClass = method.getReturnType();
1:a2ed671:             BeanFromFactory beanFromFactory;
1:a2ed671:             if (name != null) {
1:a2ed671:                 beanFromFactory = new BeanFromFactory(beanClass, name, factoryBean, method, this);
1:59217b2:             } else {
1:a2ed671:                 beanFromFactory = new BeanFromFactory(beanClass, factoryBean, method, this);
1:59217b2:             }
1:a2ed671:             if (AnnotationHelper.findSingletons(method.getAnnotations())) {
1:a2ed671:                 beanFromFactory.setSingleton();
1:59217b2:             }
1:a2ed671:             reg.add(beanFromFactory);
1:0b1a9fb:         }
9:46cfc09:     }
1:b5bf406: 
1:a2ed671:     private boolean isFactoryMethod(Method method) {
1:a2ed671:         boolean isFactoryMethod = false;
1:a2ed671:         for (Class<? extends Annotation> factoryMethodAnnotationClass : Extensions.factoryMethodAnnotationClasses) {
1:a2ed671:             Annotation annotation = AnnotationHelper.findAnnotation(method.getAnnotations(), factoryMethodAnnotationClass);
1:a2ed671:             if (annotation != null) {
1:a2ed671:                 isFactoryMethod = true;
1:a2ed671:                 break;
1:46cfc09:             }
1:46cfc09:         }
1:a2ed671:         return isFactoryMethod;
1:46cfc09:     }
1:46cfc09: 
1:46cfc09:     public void resolve() {
1:9b08497:         for (Bean bean : getBeans()) {
1:46cfc09:             bean.resolve(this);
1:218954f:         }
1:46cfc09:     }
1:218954f: 
1:b5bf406:     public BeanRef getMatching(BeanRef template) {
1:9b08497:         for (BeanRef bean : reg) {
2:b5bf406:             if (bean.matches(template)) {
2:46cfc09:                 return bean;
1:65ec8ae:             }
1:65ec8ae:         }
1:0b1a9fb:         return null;
1:0b1a9fb:     }
1:0b1a9fb: 
1:46cfc09:     public SortedSet<Bean> getBeans() {
1:9b08497:         TreeSet<Bean> beans = new TreeSet<Bean>();
2:9b08497:         for (BeanRef ref : reg) {
1:9b08497:             if (ref instanceof Bean) {
1:59217b2:                 beans.add((Bean) ref);
1:9b08497:             }
1:9b08497:         }
1:46cfc09:         return beans;
1:9b08497:     }
1:b5bf406: 
1:0d2c0ec:     public Map<String, XmlWriter> getBlueprintWriters() {
1:868c96f:         return blueprintWriters;
1:9b08497:     }
1:46cfc09: 
1:868c96f:     @Override
1:868c96f:     public void addBean(String id, Class<?> clazz) {
1:868c96f:         reg.add(new BeanRef(clazz, id));
1:46cfc09: 
1:46cfc09:     }
1:46cfc09: 
1:868c96f:     @Override
1:0d2c0ec:     public void addBlueprintContentWriter(String id, XmlWriter blueprintWriter) {
1:868c96f:         blueprintWriters.put(id, blueprintWriter);
1:46cfc09:     }
1:46cfc09: 
1:0d2c0ec:     @Override
1:0d2c0ec:     public BlueprintConfiguration getBlueprintConfiguration() {
1:0d2c0ec:         return blueprintConfiguration;
1:46cfc09:     }
1:46cfc09: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:5ab57d7
/////////////////////////////////////////////////////////////////////////
0:                     producedBean = new ProducedBean(producedClass, named.value(), factoryBean, method);
0:                     producedBean = new ProducedBean(producedClass, factoryBean, method);
commit:d042317
/////////////////////////////////////////////////////////////////////////
0:  * <p>
0:  * <p>
commit:59217b2
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.cdi.api.OsgiService;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import org.osgi.service.blueprint.container.Converter;
1: 
0: import javax.enterprise.inject.Produces;
0: import javax.inject.Named;
0: import javax.inject.Singleton;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             Named named = method.getAnnotation(Named.class);
0:             Singleton singleton = method.getAnnotation(Singleton.class);
0:                 ProducedBean producedBean;
0:                 if (named != null) {
0:                     producedBean = new ProducedBean(producedClass, named.value(), factoryBean, method.getName());
1:                 } else {
0:                     producedBean = new ProducedBean(producedClass, factoryBean, method.getName());
1:                 }
0:                 if (singleton != null) {
0:                     producedBean.setSingleton();
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 beans.add((Bean) ref);
/////////////////////////////////////////////////////////////////////////
0:                 serviceRefs.add((OsgiServiceRef) ref);
commit:218954f
/////////////////////////////////////////////////////////////////////////
0:             addServiceRefs(bean);
0:     private void addServiceRefs(Bean bean) {
0:         reg.addAll(bean.serviceRefs);
1:     }
1: 
commit:05c904d
/////////////////////////////////////////////////////////////////////////
0:         for (Field field : new Introspector(clazz).fieldsWith(OsgiService.class)) {
commit:3aa60ba
/////////////////////////////////////////////////////////////////////////
0:         for (Field field : new FieldFinder(OsgiService.class).findFields(clazz)) {
0:             reg.add(new OsgiServiceRef(field));
/////////////////////////////////////////////////////////////////////////
1: 
commit:853c6ee
/////////////////////////////////////////////////////////////////////////
0:         addProducedBeans(clazz, bean);
0:     private void addProducedBeans(Class<?> clazz, BeanRef factoryBean) {
0:                 ProducedBean producedBean = new ProducedBean(producedClass, factoryBean, method.getName());
commit:9b08497
/////////////////////////////////////////////////////////////////////////
0:     SortedSet<BeanRef> reg;
0:         this.reg = new TreeSet<BeanRef>();
0:         addBlueprintRefs();
0:     private void addBlueprintRefs() {
0:         reg.add(new BeanRef(BundleContext.class, "blueprintBundleContext"));
0:         reg.add(new BeanRef(Bundle.class, "blueprintBundle"));
0:         reg.add(new BeanRef(BlueprintContainer.class, "blueprintContainer"));
0:         reg.add(new BeanRef(Converter.class, "blueprintConverter"));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         reg.add(bean);
/////////////////////////////////////////////////////////////////////////
0:                 reg.add(producedBean);
/////////////////////////////////////////////////////////////////////////
0:                 reg.add(new OsgiServiceRef(field));
1:         for (Bean bean : getBeans()) {
1:         for (BeanRef bean : reg) {
1:         TreeSet<Bean> beans = new TreeSet<Bean>();
1:         for (BeanRef ref : reg) {
1:             if (ref instanceof Bean) {
0:                 beans.add((Bean)ref);
1:             }
1:         }
0:         TreeSet<OsgiServiceRef> serviceRefs = new TreeSet<OsgiServiceRef>();
1:         for (BeanRef ref : reg) {
0:             if (ref instanceof OsgiServiceRef) {
0:                 serviceRefs.add((OsgiServiceRef)ref);
1:             }
1:         }
commit:ae778e2
/////////////////////////////////////////////////////////////////////////
1:             addBean(clazz);
1:     private void addBean(Class<?> clazz) {
0:         Bean bean = new Bean(clazz);
0:         beans.add(bean);
0:         addServiceRefs(clazz);
0:         addProducedBeans(clazz, bean.id);
1:     }
1: 
commit:e214baf
/////////////////////////////////////////////////////////////////////////
0:                 serviceRefs.add(new OsgiServiceRef(field));
commit:65ec8ae
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import org.osgi.service.blueprint.container.Converter;
/////////////////////////////////////////////////////////////////////////
0:         if (template.clazz == BundleContext.class) {
0:             return new BeanRef(BundleContext.class, "blueprintBundleContext");
1:         }
0:         if (template.clazz == Bundle.class) {
0:             return new BeanRef(Bundle.class, "blueprintBundle");
1:         }
0:         if (template.clazz == BlueprintContainer.class) {
0:             return new BeanRef(BlueprintContainer.class, "blueprintContainer");
1:         }
0:         if (template.clazz == Converter.class) {
0:             return new BeanRef(Converter.class, "blueprintConverter");
1:         }
1:         
commit:b5bf406
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
0: import javax.enterprise.inject.Produces;
/////////////////////////////////////////////////////////////////////////
0:     SortedSet<OsgiServiceRef> serviceRefs;
1: 
0:         this.serviceRefs = new TreeSet<OsgiServiceRef>();
/////////////////////////////////////////////////////////////////////////
0:             addProducedBeans(clazz, bean.id);
1:         }
1:     }
1: 
0:     private void addProducedBeans(Class<?> clazz, String factoryBeanId) {
0:         for (Method method : clazz.getMethods()) {
0:             Produces produces = method.getAnnotation(Produces.class);
0:             if (produces != null) {
0:                 Class<?> producedClass = method.getReturnType();
0:                 ProducedBean producedBean = new ProducedBean(producedClass, factoryBeanId, method.getName());
0:                 beans.add(producedBean);
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 serviceRefs.add(new OsgiServiceRef(field.getType(), osgiService));
1: 
1:     public BeanRef getMatching(BeanRef template) {
1:             if (bean.matches(template)) {
0:         for (BeanRef bean : serviceRefs) {
1:             if (bean.matches(template)) {
1: 
0:     public SortedSet<OsgiServiceRef> getServiceRefs() {
commit:0b1a9fb
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.beans.factory.annotation.Qualifier;
/////////////////////////////////////////////////////////////////////////
0:         String destId = getDestinationId(field);
/////////////////////////////////////////////////////////////////////////
0: 	private String getDestinationId(Field field) {
0: 		Named named = field.getAnnotation(Named.class);
0: 		if (named != null) {
0: 			return named.value();
1: 		}
0: 		Qualifier qualifier = field.getAnnotation(Qualifier.class);
0:         if (qualifier != null) {
0:         	return qualifier.value();
1:         }
1: 		return null;
1: 	}
1: 
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.model;
1: 
0: import java.lang.reflect.Field;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
1: 
0: import javax.inject.Named;
1: 
0: import org.ops4j.pax.cdi.api.OsgiService;
1: 
0: public class Context implements Matcher {
1: 
0:     SortedSet<Bean> beans;
0:     SortedSet<OsgiServiceBean> serviceRefs;
1:     
0:     public Context(Class<?>... beanClasses) {
0:         this(Arrays.asList(beanClasses));
1:     }
1: 
0:     public Context(Collection<Class<?>> beanClasses) {
0:         this.beans = new TreeSet<Bean>();
0:         this.serviceRefs = new TreeSet<OsgiServiceBean>();
1:         addBeans(beanClasses);
1:     }
1: 
1:     private void addBeans(Collection<Class<?>> beanClasses) {
1:         for (Class<?> clazz : beanClasses) {
0:             Bean bean = new Bean(clazz);
0:             beans.add(bean);
0:             addServiceRefs(clazz);
1:         }
1:     }
1: 
0:     private void addServiceRefs(Class<?> clazz) {
0:         for (Field field : clazz.getDeclaredFields()) {
0:             OsgiService osgiService = field.getAnnotation(OsgiService.class);
0:             if (osgiService != null) {
0:                 serviceRefs.add(new OsgiServiceBean(field.getType(), osgiService));
1:             }
1:         }
1:     }
1:     
1:     public void resolve() {
0:         for (Bean bean : beans) {
1:             bean.resolve(this);
1:         }
1:     }
1:     
0:     public Bean getMatching(Field field) {
0:         Named named = field.getAnnotation(Named.class);
0:         String destId = (named == null) ? null : named.value();
0:         // TODO Replace loop by lookup
0:         for (Bean bean : beans) {
0:             if (bean.matches(field.getType(), destId)) {
1:                 return bean;
1:             }
1:         }
0:         for (Bean bean : serviceRefs) {
0:             if (bean.matches(field.getType(), destId)) {
1:                 return bean;
1:             }
1:         }
0:         return null;
1:     }
1: 
1:     public SortedSet<Bean> getBeans() {
1:         return beans;
1:     }
1:     
0:     public SortedSet<OsgiServiceBean> getServiceRefs() {
0:         return serviceRefs;
1:     }
1: 
1: 
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:fc7ae19
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:aaf182f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.ContextInitializationHandler;
/////////////////////////////////////////////////////////////////////////
1:         initContext();
1:     private void initContext() {
1:         for (ContextInitializationHandler contextInitializationHandler : Extensions.contextInitializationHandlers) {
1:             contextInitializationHandler.initContext(this);
0:         }
commit:a2ed671
/////////////////////////////////////////////////////////////////////////
1: import java.lang.annotation.Annotation;
/////////////////////////////////////////////////////////////////////////
1: public class Context implements BlueprintRegister, ContextEnricher {
/////////////////////////////////////////////////////////////////////////
1:         addBeansFromFactories(bean);
1:     private void addBeansFromFactories(BeanRef factoryBean) {
1:             if (!isFactoryMethod(method)) {
1:                 continue;
0:             }
1:             Class<?> beanClass = method.getReturnType();
1:             BeanFromFactory beanFromFactory;
1:             if (name != null) {
1:                 beanFromFactory = new BeanFromFactory(beanClass, name, factoryBean, method, this);
0:             } else {
1:                 beanFromFactory = new BeanFromFactory(beanClass, factoryBean, method, this);
0:             }
1:             if (AnnotationHelper.findSingletons(method.getAnnotations())) {
1:                 beanFromFactory.setSingleton();
0:             }
1:             reg.add(beanFromFactory);
0:             for (CustomFactoryMethodAnnotationHandler customFactoryMethodAnnotationHandler : Extensions.customFactoryMethodAnnotationHandlers) {
0:                 if (AnnotationHelper.findAnnotation(method.getAnnotations(), customFactoryMethodAnnotationHandler.getAnnotation()) != null) {
0:                     customFactoryMethodAnnotationHandler.handleFactoryMethodAnnotation(method, beanFromFactory.id, this);
1:     private boolean isFactoryMethod(Method method) {
1:         boolean isFactoryMethod = false;
1:         for (Class<? extends Annotation> factoryMethodAnnotationClass : Extensions.factoryMethodAnnotationClasses) {
1:             Annotation annotation = AnnotationHelper.findAnnotation(method.getAnnotations(), factoryMethodAnnotationClass);
1:             if (annotation != null) {
1:                 isFactoryMethod = true;
1:                 break;
0:             }
0:         }
1:         return isFactoryMethod;
0:     }
0: 
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.BlueprintConfiguration;
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<String, XmlWriter> blueprintWriters = new HashMap<>();
1:     private final BlueprintConfiguration blueprintConfiguration;
1:     public Context(BlueprintConfiguration blueprintConfiguration, Class<?>... beanClasses) {
1:         this(blueprintConfiguration, Arrays.asList(beanClasses));
1:     public Context(BlueprintConfiguration blueprintConfiguration, Collection<Class<?>> beanClasses) {
1:         this.blueprintConfiguration = blueprintConfiguration;
/////////////////////////////////////////////////////////////////////////
1:         Bean bean = new Bean(clazz, this);
/////////////////////////////////////////////////////////////////////////
0:                     producedBean = new ProducedBean(producedClass, name, factoryBean, method, this);
0:                     producedBean = new ProducedBean(producedClass, factoryBean, method, this);
/////////////////////////////////////////////////////////////////////////
1:     public Map<String, XmlWriter> getBlueprintWriters() {
/////////////////////////////////////////////////////////////////////////
1:     public void addBlueprintContentWriter(String id, XmlWriter blueprintWriter) {
0: 
1:     @Override
1:     public BlueprintConfiguration getBlueprintConfiguration() {
1:         return blueprintConfiguration;
0:     }
commit:868c96f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.Extensions;
0: import org.apache.aries.blueprint.plugin.spi.BlueprintWriter;
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
0: import org.apache.aries.blueprint.plugin.spi.CustomFactoryMethodAnnotationHandler;
1: import java.util.HashMap;
1: import java.util.Map;
0: public class Context implements BlueprinRegister, ContextEnricher {
0:     private final Map<String, BlueprintWriter> blueprintWriters = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:         reg.addAll(bean.refs);
0:         blueprintWriters.putAll(bean.blueprintWriters);
/////////////////////////////////////////////////////////////////////////
0:                 for (CustomFactoryMethodAnnotationHandler customFactoryMethodAnnotationHandler : Extensions.customFactoryMethodAnnotationHandlers) {
0:                     if (AnnotationHelper.findAnnotation(method.getAnnotations(), customFactoryMethodAnnotationHandler.getAnnotation()) != null) {
0:                         customFactoryMethodAnnotationHandler.handleFactoryMethodAnnotation(method, producedBean.id, this);
0:                     }
/////////////////////////////////////////////////////////////////////////
0:     public Map<String, BlueprintWriter> getBlueprintWriters() {
1:         return blueprintWriters;
1:     @Override
1:     public void addBean(String id, Class<?> clazz) {
1:         reg.add(new BeanRef(clazz, id));
0: 
0:     }
0: 
1:     @Override
0:     public void addBlueprintWriter(String id, BlueprintWriter blueprintWriter) {
1:         blueprintWriters.put(id, blueprintWriter);
commit:c201f83
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             String name = AnnotationHelper.findName(method.getAnnotations());
0:                 if (name != null) {
0:                     producedBean = new ProducedBean(producedClass, name, factoryBean, method);
0:                 if (AnnotationHelper.findSingletons(method.getAnnotations())) {
commit:d22e134
/////////////////////////////////////////////////////////////////////////
0:         for (Method method : new Introspector(clazz).methodsWith(OsgiService.class)) {
0:             reg.add(new OsgiServiceRef(method));
0:         }
commit:ac69b8b
/////////////////////////////////////////////////////////////////////////
0:  * <p/>
0:  * <p/>
/////////////////////////////////////////////////////////////////////////
0:                 ServiceProvider serviceProvider = ServiceProvider.fromMethod(producedBean, method);
0:                 if (serviceProvider != null) {
0:                     serviceProviders.add(serviceProvider);
0:                 }
commit:3d350f5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.model.service.ServiceProvider;
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
1:     SortedSet<BeanRef> reg = new TreeSet<BeanRef>();
0:     private final List<ServiceProvider> serviceProviders = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
0:         addProducedBeans(bean);
0:         addServiceProviders(bean);
0:     private void addServiceProviders(Bean bean) {
0:         serviceProviders.addAll(bean.serviceProviders);
0:     }
0: 
0:     private void addProducedBeans(BeanRef factoryBean) {
1:         for (Method method : factoryBean.clazz.getMethods()) {
/////////////////////////////////////////////////////////////////////////
0:     public List<ServiceProvider> getServiceProviders() {
0:         return serviceProviders;
0:     }
============================================================================