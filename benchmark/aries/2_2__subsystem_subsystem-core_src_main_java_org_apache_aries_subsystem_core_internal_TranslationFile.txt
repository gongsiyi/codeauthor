1:fba8a39: /*
1:fba8a39:  * Licensed to the Apache Software Foundation (ASF) under one
1:fba8a39:  * or more contributor license agreements.  See the NOTICE file
1:fba8a39:  * distributed with this work for additional information
1:fba8a39:  * regarding copyright ownership.  The ASF licenses this file
1:fba8a39:  * to you under the Apache License, Version 2.0 (the
1:fba8a39:  * "License"); you may not use this file except in compliance
1:fba8a39:  * with the License.  You may obtain a copy of the License at
1:fba8a39:  *
1:fba8a39:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fba8a39:  *
1:fba8a39:  * Unless required by applicable law or agreed to in writing,
1:fba8a39:  * software distributed under the License is distributed on an
1:fba8a39:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fba8a39:  * KIND, either express or implied.  See the License for the
1:fba8a39:  * specific language governing permissions and limitations
1:fba8a39:  * under the License.
1:fba8a39:  */
1:d6eb080: package org.apache.aries.subsystem.core.internal;
1:d6eb080: 
1:d6eb080: import java.io.File;
1:d6eb080: import java.io.FileOutputStream;
1:d6eb080: import java.io.IOException;
1:d6eb080: import java.util.Properties;
1:d6eb080: 
1:d6eb080: public class TranslationFile {
1:d6eb080: 	private static String normalizeName(String name) {
1:d6eb080: 		int index = name.lastIndexOf('/');
1:d6eb080: 		if (index == -1)
1:d6eb080: 			return name;
1:d6eb080: 		return name.substring(index + 1);
1:d6eb080: 	}
1:d6eb080: 	
1:d6eb080: 	private final String name;
1:d6eb080: 	private final Properties properties;
1:d6eb080: 	
1:d6eb080: 	public TranslationFile(String name, Properties properties) {
1:d6eb080: 		if (name == null || properties == null)
1:d6eb080: 			throw new NullPointerException();
1:d6eb080: 		if (name.isEmpty())
1:d6eb080: 			throw new IllegalArgumentException();
1:d6eb080: 		this.name = normalizeName(name);
1:d6eb080: 		this.properties = properties;
1:d6eb080: 	}
1:d6eb080: 	
1:d6eb080: 	public void write(File directory) throws IOException {
1:d6eb080: 		FileOutputStream fos = new FileOutputStream(new File(directory, name));
1:d6eb080: 		try {
1:d6eb080: 			properties.store(fos, null);
1:d6eb080: 		}
1:d6eb080: 		finally {
1:d6eb080: 			fos.close();
1:d6eb080: 		}
1:d6eb080: 	}
1:d6eb080: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:fba8a39
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.util.Properties;
1: 
1: public class TranslationFile {
1: 	private static String normalizeName(String name) {
1: 		int index = name.lastIndexOf('/');
1: 		if (index == -1)
1: 			return name;
1: 		return name.substring(index + 1);
1: 	}
1: 	
1: 	private final String name;
1: 	private final Properties properties;
1: 	
1: 	public TranslationFile(String name, Properties properties) {
1: 		if (name == null || properties == null)
1: 			throw new NullPointerException();
1: 		if (name.isEmpty())
1: 			throw new IllegalArgumentException();
1: 		this.name = normalizeName(name);
1: 		this.properties = properties;
1: 	}
1: 	
1: 	public void write(File directory) throws IOException {
1: 		FileOutputStream fos = new FileOutputStream(new File(directory, name));
1: 		try {
1: 			properties.store(fos, null);
1: 		}
1: 		finally {
1: 			fos.close();
1: 		}
1: 	}
1: }
============================================================================