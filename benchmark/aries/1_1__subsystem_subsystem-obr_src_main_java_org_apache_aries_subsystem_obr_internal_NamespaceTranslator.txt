1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:6c69a67: package org.apache.aries.subsystem.obr.internal;
1:6c69a67: 
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.HashMap;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:6c69a67: import org.osgi.framework.namespace.BundleNamespace;
1:6c69a67: import org.osgi.framework.namespace.PackageNamespace;
1:6c69a67: import org.osgi.namespace.service.ServiceNamespace;
1:6c69a67: 
1:6c69a67: public class NamespaceTranslator {
1:6c69a67: 	private static final Map<String, String> namespaces = computeNamespaces();
1:6c69a67: 	
1:6c69a67: 	private static Map<String, String> computeNamespaces() {
1:6c69a67: 		Map<String, String> result = new HashMap<String, String>(8);
1:6c69a67: 		result.put(PackageNamespace.PACKAGE_NAMESPACE, org.apache.felix.bundlerepository.Capability.PACKAGE);
1:6c69a67: 		result.put(ServiceNamespace.SERVICE_NAMESPACE, org.apache.felix.bundlerepository.Capability.SERVICE);
1:6c69a67: 		result.put(BundleNamespace.BUNDLE_NAMESPACE, org.apache.felix.bundlerepository.Capability.BUNDLE);
1:6c69a67: 		result.put(org.apache.felix.bundlerepository.Capability.PACKAGE, PackageNamespace.PACKAGE_NAMESPACE);
1:6c69a67: 		result.put(org.apache.felix.bundlerepository.Capability.SERVICE, ServiceNamespace.SERVICE_NAMESPACE);
1:6c69a67: 		result.put(org.apache.felix.bundlerepository.Capability.BUNDLE, BundleNamespace.BUNDLE_NAMESPACE);
1:6c69a67: 		return Collections.unmodifiableMap(result);
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	public static String translate(String namespace) {
1:6c69a67: 		String result = namespaces.get(namespace);
1:6c69a67: 		if (result == null)
1:6c69a67: 			result = namespace;
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:eb467d6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.osgi.framework.namespace.BundleNamespace;
0: import org.osgi.framework.namespace.HostNamespace;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.namespace.service.ServiceNamespace;
1: 
1: public class NamespaceTranslator {
1: 	private static final Map<String, String> namespaces = computeNamespaces();
1: 	
1: 	private static Map<String, String> computeNamespaces() {
1: 		Map<String, String> result = new HashMap<String, String>(8);
1: 		result.put(PackageNamespace.PACKAGE_NAMESPACE, org.apache.felix.bundlerepository.Capability.PACKAGE);
1: 		result.put(ServiceNamespace.SERVICE_NAMESPACE, org.apache.felix.bundlerepository.Capability.SERVICE);
1: 		result.put(BundleNamespace.BUNDLE_NAMESPACE, org.apache.felix.bundlerepository.Capability.BUNDLE);
0: 		result.put(HostNamespace.HOST_NAMESPACE, org.apache.felix.bundlerepository.Capability.FRAGMENT);
1: 		result.put(org.apache.felix.bundlerepository.Capability.PACKAGE, PackageNamespace.PACKAGE_NAMESPACE);
1: 		result.put(org.apache.felix.bundlerepository.Capability.SERVICE, ServiceNamespace.SERVICE_NAMESPACE);
1: 		result.put(org.apache.felix.bundlerepository.Capability.BUNDLE, BundleNamespace.BUNDLE_NAMESPACE);
0: 		result.put(org.apache.felix.bundlerepository.Capability.FRAGMENT, HostNamespace.HOST_NAMESPACE);
1: 		return Collections.unmodifiableMap(result);
1: 	}
1: 	
1: 	public static String translate(String namespace) {
1: 		String result = namespaces.get(namespace);
1: 		if (result == null)
1: 			result = namespace;
1: 		return result;
1: 	}
1: }
============================================================================