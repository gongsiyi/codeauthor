1:632cd72: /*
1:632cd72:  * Licensed to the Apache Software Foundation (ASF) under one
1:632cd72:  * or more contributor license agreements.  See the NOTICE file
1:632cd72:  * distributed with this work for additional information
1:632cd72:  * regarding copyright ownership.  The ASF licenses this file
1:632cd72:  * to you under the Apache License, Version 2.0 (the
1:632cd72:  * "License"); you may not use this file except in compliance
1:632cd72:  * with the License.  You may obtain a copy of the License at
1:632cd72:  *
1:632cd72:  *   http://www.apache.org/licenses/LICENSE-2.0
1:632cd72:  *
1:632cd72:  * Unless required by applicable law or agreed to in writing,
1:632cd72:  * software distributed under the License is distributed on an
1:632cd72:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:632cd72:  * KIND, either express or implied.  See the License for the
1:632cd72:  * specific language governing permissions and limitations
1:632cd72:  * under the License.
1:632cd72:  */
1:632cd72: package org.apache.aries.application.resolver.noop.impl;
9:632cd72: 
1:632cd72: import java.util.Collection;
1:632cd72: import java.util.HashSet;
1:632cd72: import java.util.Set;
1:2901df4: 
1:632cd72: import org.apache.aries.application.Content;
1:632cd72: import org.apache.aries.application.management.AriesApplication;
1:632cd72: import org.apache.aries.application.management.BundleInfo;
1:632cd72: import org.apache.aries.application.management.ResolveConstraint;
1:632cd72: import org.apache.aries.application.management.ResolverException;
1:632cd72: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
1:632cd72: import org.apache.aries.application.modelling.ModelledResource;
1:632cd72: import org.osgi.framework.Version;
1:cce7f7c: 
1:632cd72: /**
1:cce7f7c:  * AriesApplicationManager requires that there be at least one
1:cce7f7c:  * AriesApplicationResolver service present. This class provides a null
1:cce7f7c:  * implementation: it simply returns the bundles that it was provided with -
1:cce7f7c:  * enough to permit the testing of Aries applications that have no external
1:cce7f7c:  * dependencies. It is not intended to be used in a production environment, as
1:cce7f7c:  * the implementation of the AriesApplicationResolver just returns the bundles
1:cce7f7c:  * included in the application irrespective of what is specified in
1:cce7f7c:  * application.mf.
1:632cd72:  */
1:2901df4: 
1:632cd72: public class NoOpResolver implements AriesApplicationResolver {
1:632cd72: 
1:cce7f7c:     Set<BundleInfo> resolvedBundles = new HashSet<BundleInfo>();
1:cce7f7c: 
1:cce7f7c:     public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) {
1:cce7f7c:         resolvedBundles.addAll(app.getBundleInfo());
1:cce7f7c:         return app.getBundleInfo();
1:cce7f7c:     }
1:cce7f7c: 
1:cce7f7c:     public BundleInfo getBundleInfo(String bundleSymbolicName, Version bundleVersion) {
1:cce7f7c:         BundleInfo result = null;
1:cce7f7c:         for (BundleInfo info : resolvedBundles) {
1:cce7f7c:             if (info.getSymbolicName().equals(bundleSymbolicName)
1:cce7f7c:                     && info.getVersion().equals(bundleVersion)) {
1:cce7f7c:                 result = info;
1:cce7f7c:             }
1:cce7f7c:         }
1:cce7f7c:         return result;
1:cce7f7c:     }
1:cce7f7c: 
1:cce7f7c:     public Collection<ModelledResource> resolve(String appName,
1:cce7f7c:             String appVersion, Collection<ModelledResource> byValueBundles,
1:cce7f7c:             Collection<Content> inputs) throws ResolverException {
1:cce7f7c: 
1:cce7f7c:         return byValueBundles;
1:cce7f7c:     }
1:cce7f7c: 
1:cce7f7c:     @Override
1:cce7f7c:     public Collection<ModelledResource> resolveInIsolation(String appName,
1:cce7f7c:             String appVersion, Collection<ModelledResource> byValueBundles,
1:cce7f7c:             Collection<Content> inputs) throws ResolverException {
1:cce7f7c:         return byValueBundles;
1:cce7f7c:     }
1:632cd72: 
1:2901df4: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:cce7f7c
/////////////////////////////////////////////////////////////////////////
1: 
1:  * AriesApplicationManager requires that there be at least one
1:  * AriesApplicationResolver service present. This class provides a null
1:  * implementation: it simply returns the bundles that it was provided with -
1:  * enough to permit the testing of Aries applications that have no external
1:  * dependencies. It is not intended to be used in a production environment, as
1:  * the implementation of the AriesApplicationResolver just returns the bundles
1:  * included in the application irrespective of what is specified in
1:  * application.mf.
1:     Set<BundleInfo> resolvedBundles = new HashSet<BundleInfo>();
1: 
1:     public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) {
1:         resolvedBundles.addAll(app.getBundleInfo());
1:         return app.getBundleInfo();
1:     }
1: 
1:     public BundleInfo getBundleInfo(String bundleSymbolicName, Version bundleVersion) {
1:         BundleInfo result = null;
1:         for (BundleInfo info : resolvedBundles) {
1:             if (info.getSymbolicName().equals(bundleSymbolicName)
1:                     && info.getVersion().equals(bundleVersion)) {
1:                 result = info;
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     public Collection<ModelledResource> resolve(String appName,
1:             String appVersion, Collection<ModelledResource> byValueBundles,
1:             Collection<Content> inputs) throws ResolverException {
1: 
1:         return byValueBundles;
1:     }
1: 
1:     @Override
1:     public Collection<ModelledResource> resolveInIsolation(String appName,
1:             String appVersion, Collection<ModelledResource> byValueBundles,
1:             Collection<Content> inputs) throws ResolverException {
1:         return byValueBundles;
1:     }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:17170a0
/////////////////////////////////////////////////////////////////////////
commit:2901df4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.spi.repository.PlatformRepository;
/////////////////////////////////////////////////////////////////////////
1: 	   
0: 	   public Collection<ModelledResource> resolve(String appName, String appVersion,
0: 		       Collection<ModelledResource> byValueBundles, Collection<Content> inputs, PlatformRepository platformRepository)
0: 		       throws ResolverException
0: 		   {
1: 		     
0: 		     return byValueBundles;
1: 		   }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:632cd72
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.resolver.noop.impl;
1: 
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.BundleInfo;
1: import org.apache.aries.application.management.ResolveConstraint;
1: import org.apache.aries.application.management.ResolverException;
1: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.osgi.framework.Version;
1: /**
0:  * AriesApplicationManager requires that there be at least one 
0:  * AriesApplicationResolver service present. This class provides a null 
0:  * implementation: it simply returns the bundles that it was provided with - 
0:  * enough to permit the testing of Aries applications that have no external 
0:  * dependencies.   
0:  * It is not intended to be used in a production environment, as the implementation 
0:  * of the AriesApplicationResolver just returns the bundles included in the application irrespective of 
0:  * what is specified in application.mf.
1:  */
1: 
1: public class NoOpResolver implements AriesApplicationResolver {
1: 
0: 	Set<BundleInfo> resolvedBundles = new HashSet<BundleInfo>();
1: 	   
0: 	   public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) {
0: 	     resolvedBundles.addAll(app.getBundleInfo());
0: 	     return app.getBundleInfo();
0: 	   }
1: 	 
0: 	   public BundleInfo getBundleInfo(String bundleSymbolicName, Version bundleVersion)
0: 	   {
0: 	     BundleInfo result = null;
0: 	     for (BundleInfo info : resolvedBundles)
0: 	     {
0: 	       if (info.getSymbolicName().equals(bundleSymbolicName) &&
0: 	           info.getVersion().equals(bundleVersion))
0: 	       {
0: 	         result = info;
0: 	       }
0: 	     }
0: 	     return result;
0: 	   }
1: 	 
0: 	   public Collection<ModelledResource> resolve(String appName, String appVersion,
0: 	       Collection<ModelledResource> byValueBundles, Collection<Content> inputs)
0: 	       throws ResolverException
0: 	   {
1: 	     
0: 	     return byValueBundles;
0: 	   }
1: 
0: }
1: 
1: 
============================================================================