1:aa4dd7c: /**
1:aa4dd7c:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:aa4dd7c:  *  contributor license agreements.  See the NOTICE file distributed with
1:aa4dd7c:  *  this work for additional information regarding copyright ownership.
1:aa4dd7c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:aa4dd7c:  *  (the "License"); you may not use this file except in compliance with
1:aa4dd7c:  *  the License.  You may obtain a copy of the License at
1:aa4dd7c:  *
1:aa4dd7c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:aa4dd7c:  *
1:aa4dd7c:  *  Unless required by applicable law or agreed to in writing, software
1:aa4dd7c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:aa4dd7c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa4dd7c:  *  See the License for the specific language governing permissions and
1:aa4dd7c:  *  limitations under the License.
2:aa4dd7c:  */
1:3364e3f: package org.apache.aries.samples.ariestrader.entities;
3:aa4dd7c: 
1:aa4dd7c: import java.io.Serializable;
1:aa4dd7c: import java.math.BigDecimal;
1:aa4dd7c: import java.sql.Timestamp;
1:aa4dd7c: import java.util.ArrayList;
1:aa4dd7c: import java.util.Collection;
1:aa4dd7c: import java.util.Date;
1:aa4dd7c: 
1:aa4dd7c: import javax.persistence.Column;
1:aa4dd7c: import javax.persistence.Entity;
1:aa4dd7c: import javax.persistence.FetchType;
1:aa4dd7c: import javax.persistence.GeneratedValue;
1:aa4dd7c: import javax.persistence.GenerationType;
1:aa4dd7c: import javax.persistence.Id;
1:aa4dd7c: import javax.persistence.JoinColumn;
1:aa4dd7c: import javax.persistence.NamedQueries;
1:aa4dd7c: import javax.persistence.NamedQuery;
1:aa4dd7c: import javax.persistence.OneToMany;
1:aa4dd7c: import javax.persistence.OneToOne;
1:aa4dd7c: import javax.persistence.Table;
1:aa4dd7c: import javax.persistence.TableGenerator;
1:aa4dd7c: import javax.persistence.Temporal;
1:aa4dd7c: import javax.persistence.TemporalType;
1:aa4dd7c: import javax.persistence.Transient;
1:aa4dd7c: 
1:61d7f67: import org.apache.aries.samples.ariestrader.util.Log;
1:61d7f67: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1:aa4dd7c: 
1:aa4dd7c: @Entity (name = "accountejb")
1:aa4dd7c: @Table(name = "accountejb")
1:aa4dd7c: @NamedQueries( {
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByCreationdate", query = "SELECT a FROM accountejb a WHERE a.creationDate = :creationdate"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByOpenbalance", query = "SELECT a FROM accountejb a WHERE a.openBalance = :openbalance"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByLogoutcount", query = "SELECT a FROM accountejb a WHERE a.logoutCount = :logoutcount"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByBalance", query = "SELECT a FROM accountejb a WHERE a.balance = :balance"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByAccountid", query = "SELECT a FROM accountejb a WHERE a.accountID = :accountid"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByAccountid_eager", query = "SELECT a FROM accountejb a LEFT JOIN FETCH a.profile WHERE a.accountID = :accountid"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByAccountid_eagerholdings", query = "SELECT a FROM accountejb a LEFT JOIN FETCH a.holdings WHERE a.accountID = :accountid"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByLastlogin", query = "SELECT a FROM accountejb a WHERE a.lastLogin = :lastlogin"),
1:aa4dd7c:         @NamedQuery(name = "accountejb.findByLogincount", query = "SELECT a FROM accountejb a WHERE a.loginCount = :logincount")
1:aa4dd7c:     })
1:aa4dd7c: public class AccountDataBeanImpl implements AccountDataBean, Serializable {
1:aa4dd7c: 	
1:aa4dd7c: 	/* Accessor methods for persistent fields */
1:aa4dd7c:     @TableGenerator(
1:aa4dd7c:             name="accountIdGen",
1:aa4dd7c:             table="KEYGENEJB",
1:aa4dd7c:             pkColumnName="KEYNAME",
1:aa4dd7c:             valueColumnName="KEYVAL",
1:aa4dd7c:             pkColumnValue="account",
1:aa4dd7c:             allocationSize=1000)
1:aa4dd7c:     
1:aa4dd7c: 	@Id
1:aa4dd7c:     @GeneratedValue(strategy=GenerationType.TABLE, generator="accountIdGen")
1:aa4dd7c:     @Column(name = "ACCOUNTID", nullable = false)
1:aa4dd7c:     private Integer accountID;              /* accountID */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "LOGINCOUNT", nullable = false)
1:aa4dd7c:     private int loginCount;                 /* loginCount */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "LOGOUTCOUNT", nullable = false)
1:aa4dd7c:     private int logoutCount;                /* logoutCount */
1:aa4dd7c:     
1:aa4dd7c: 	 @Column(name = "LASTLOGIN")
1:aa4dd7c: 	    @Temporal(TemporalType.TIMESTAMP)
1:aa4dd7c:     private Date lastLogin;                 /* lastLogin Date */
1:aa4dd7c:     
1:aa4dd7c: 	 @Column(name = "CREATIONDATE")
1:aa4dd7c: 	    @Temporal(TemporalType.TIMESTAMP)
1:aa4dd7c:     private Date creationDate;              /* creationDate */
1:aa4dd7c:     
1:aa4dd7c: 	 @Column(name = "BALANCE")
1:aa4dd7c:     private BigDecimal balance;             /* balance */
1:aa4dd7c:     
1:aa4dd7c: 	 @Column(name = "OPENBALANCE")
1:aa4dd7c:     private BigDecimal openBalance;         /* open balance */
1:aa4dd7c:     
1:aa4dd7c: 	 @OneToMany(mappedBy = "account", fetch=FetchType.LAZY)
1:aa4dd7c:     private Collection<OrderDataBeanImpl> orders;
1:aa4dd7c:     
1:aa4dd7c:     @OneToMany(mappedBy = "account", fetch=FetchType.LAZY)
1:aa4dd7c:     private Collection<HoldingDataBeanImpl> holdings;
1:aa4dd7c:     
1:aa4dd7c:     @OneToOne(fetch=FetchType.LAZY)
1:09d6656:     @JoinColumn(name="PROFILE_USERID", columnDefinition="VARCHAR(255)")
1:aa4dd7c:     private AccountProfileDataBeanImpl profile;
1:aa4dd7c: 
1:aa4dd7c:     /* Accessor methods for relationship fields are only included for the AccountProfile profileID */
1:aa4dd7c:     @Transient
1:aa4dd7c:     private String profileID;
1:aa4dd7c: 
1:aa4dd7c:     public AccountDataBeanImpl() {
2:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public AccountDataBeanImpl(Integer accountID,
1:aa4dd7c:             int loginCount,
1:aa4dd7c:             int logoutCount,
1:aa4dd7c:             Date lastLogin,
1:aa4dd7c:             Date creationDate,
1:aa4dd7c:             BigDecimal balance,
1:aa4dd7c:             BigDecimal openBalance,
1:aa4dd7c:             String profileID) {
1:aa4dd7c:         setAccountID(accountID);
1:aa4dd7c:         setLoginCount(loginCount);
1:aa4dd7c:         setLogoutCount(logoutCount);
1:aa4dd7c:         setLastLogin(lastLogin);
1:aa4dd7c:         setCreationDate(creationDate);
1:aa4dd7c:         setBalance(balance);
1:aa4dd7c:         setOpenBalance(openBalance);
1:aa4dd7c:         setProfileID(profileID);
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public AccountDataBeanImpl(int loginCount,
1:aa4dd7c:             int logoutCount,
1:aa4dd7c:             Date lastLogin,
1:aa4dd7c:             Date creationDate,
1:aa4dd7c:             BigDecimal balance,
1:aa4dd7c:             BigDecimal openBalance,
1:aa4dd7c:             String profileID) {
1:aa4dd7c:         setLoginCount(loginCount);
1:aa4dd7c:         setLogoutCount(logoutCount);
1:aa4dd7c:         setLastLogin(lastLogin);
1:aa4dd7c:         setCreationDate(creationDate);
1:aa4dd7c:         setBalance(balance);
1:aa4dd7c:         setOpenBalance(openBalance);
1:aa4dd7c:         setProfileID(profileID);
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public static AccountDataBean getRandomInstance() {
1:aa4dd7c:         return new AccountDataBeanImpl(new Integer(TradeConfig.rndInt(100000)), //accountID
1:aa4dd7c:                 TradeConfig.rndInt(10000), //loginCount
1:aa4dd7c:                 TradeConfig.rndInt(10000), //logoutCount
1:aa4dd7c:                 new java.util.Date(), //lastLogin
1:aa4dd7c:                 new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //creationDate
1:aa4dd7c:                 TradeConfig.rndBigDecimal(1000000.0f), //balance
1:aa4dd7c:                 TradeConfig.rndBigDecimal(1000000.0f), //openBalance
1:aa4dd7c:                 TradeConfig.rndUserID() //profileID
1:aa4dd7c:         );
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public String toString() {
1:aa4dd7c:         return "\n\tAccount Data for account: " + getAccountID()
1:aa4dd7c:                 + "\n\t\t   loginCount:" + getLoginCount()
1:aa4dd7c:                 + "\n\t\t  logoutCount:" + getLogoutCount()
1:aa4dd7c:                 + "\n\t\t    lastLogin:" + getLastLogin()
1:aa4dd7c:                 + "\n\t\t creationDate:" + getCreationDate()
1:aa4dd7c:                 + "\n\t\t      balance:" + getBalance()
1:aa4dd7c:                 + "\n\t\t  openBalance:" + getOpenBalance()
1:aa4dd7c:                 + "\n\t\t    profileID:" + getProfileID()
1:aa4dd7c:                 ;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public String toHTML() {
1:aa4dd7c:         return "<BR>Account Data for account: <B>" + getAccountID() + "</B>"
1:aa4dd7c:                 + "<LI>   loginCount:" + getLoginCount() + "</LI>"
1:aa4dd7c:                 + "<LI>  logoutCount:" + getLogoutCount() + "</LI>"
1:aa4dd7c:                 + "<LI>    lastLogin:" + getLastLogin() + "</LI>"
1:aa4dd7c:                 + "<LI> creationDate:" + getCreationDate() + "</LI>"
1:aa4dd7c:                 + "<LI>      balance:" + getBalance() + "</LI>"
1:aa4dd7c:                 + "<LI>  openBalance:" + getOpenBalance() + "</LI>"
1:aa4dd7c:                 + "<LI>    profileID:" + getProfileID() + "</LI>"
1:aa4dd7c:                 ;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void print() {
1:aa4dd7c:         Log.log(this.toString());
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public Integer getAccountID() {
1:aa4dd7c:         return accountID;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setAccountID(Integer accountID) {
1:aa4dd7c:         this.accountID = accountID;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public int getLoginCount() {
1:aa4dd7c:         return loginCount;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setLoginCount(int loginCount) {
1:aa4dd7c:         this.loginCount = loginCount;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public int getLogoutCount() {
1:aa4dd7c:         return logoutCount;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setLogoutCount(int logoutCount) {
1:aa4dd7c:         this.logoutCount = logoutCount;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public Date getLastLogin() {
1:aa4dd7c:         return lastLogin;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setLastLogin(Date lastLogin) {
1:aa4dd7c:         this.lastLogin = lastLogin;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public Date getCreationDate() {
1:aa4dd7c:         return creationDate;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setCreationDate(Date creationDate) {
1:aa4dd7c:         this.creationDate = creationDate;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public BigDecimal getBalance() {
1:aa4dd7c:         return balance;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setBalance(BigDecimal balance) {
1:aa4dd7c:         this.balance = balance;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public BigDecimal getOpenBalance() {
1:aa4dd7c:         return openBalance;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setOpenBalance(BigDecimal openBalance) {
1:aa4dd7c:         this.openBalance = openBalance;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public String getProfileID() {
1:aa4dd7c:         return profileID;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setProfileID(String profileID) {
1:aa4dd7c:         this.profileID = profileID;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public Collection<OrderDataBean> getOrders() {
1:aa4dd7c:         Collection orderDataBeans = new ArrayList();
1:aa4dd7c:         for (OrderDataBeanImpl o : orders ) {
1:aa4dd7c:             orderDataBeans.add( (OrderDataBean) o);
1:aa4dd7c:         }
1:aa4dd7c:         return orderDataBeans;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setOrders(Collection<OrderDataBeanImpl> orders) {
1:aa4dd7c:         this.orders = orders;
1:aa4dd7c:     }
1:aa4dd7c:     
1:aa4dd7c:     public Collection<HoldingDataBean> getHoldings() {
1:aa4dd7c:         Collection holdingDataBeans = new ArrayList();
1:aa4dd7c:         for (HoldingDataBeanImpl h : holdings ) {
1:aa4dd7c:             holdingDataBeans.add( (HoldingDataBean) h);
1:aa4dd7c:         }
1:aa4dd7c:         return holdingDataBeans;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setHoldings(Collection<HoldingDataBeanImpl> holdings) {
1:aa4dd7c:         this.holdings = holdings;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public AccountProfileDataBean getProfile() {
1:aa4dd7c:         return profile;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setProfile(AccountProfileDataBean profile) {
1:aa4dd7c:         this.profile = (AccountProfileDataBeanImpl) profile;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void login(String password) {
1:aa4dd7c:         AccountProfileDataBean profile = getProfile();
1:aa4dd7c:         if ((profile == null) || (profile.getPassword().equals(password) == false)) {
1:aa4dd7c:             String error = "AccountBean:Login failure for account: " + getAccountID() +
1:aa4dd7c:                     ((profile == null) ? "null AccountProfile" :
1:aa4dd7c:                             "\n\tIncorrect password-->" + profile.getUserID() + ":" + profile.getPassword());
1:aa4dd7c:             throw new RuntimeException(error);
1:aa4dd7c:             
1:aa4dd7c:         }
1:aa4dd7c: 
1:aa4dd7c:         setLastLogin(new Timestamp(System.currentTimeMillis()));
1:aa4dd7c:         setLoginCount(getLoginCount() + 1);
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void logout() {
1:aa4dd7c:         setLogoutCount(getLogoutCount() + 1);
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     @Override
1:aa4dd7c:     public int hashCode() {
1:aa4dd7c:         int hash = 0;
1:aa4dd7c:         hash += (this.accountID != null ? this.accountID.hashCode() : 0);
1:aa4dd7c:         return hash;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     @Override
1:aa4dd7c:     public boolean equals(Object object) {
1:aa4dd7c:         // TODO: Warning - this method won't work in the case the id fields are not set
1:aa4dd7c:         if (!(object instanceof AccountDataBeanImpl)) {
1:aa4dd7c:             return false;
1:aa4dd7c:         }
1:aa4dd7c:         AccountDataBeanImpl other = (AccountDataBeanImpl)object;
1:aa4dd7c:         if (this.accountID != other.accountID && (this.accountID == null || !this.accountID.equals(other.accountID))) return false;
1:aa4dd7c:         return true;
1:aa4dd7c:     }
1:aa4dd7c: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:09d6656
/////////////////////////////////////////////////////////////////////////
1:     @JoinColumn(name="PROFILE_USERID", columnDefinition="VARCHAR(255)")
commit:3ed5a02
/////////////////////////////////////////////////////////////////////////
0:     @JoinColumn(name="PROFILE_USERID", columnDefinition="VARCHAR(250)")
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
commit:989ba4e
commit:3364e3f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.entities;
commit:f336ad3
commit:61d7f67
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.ariestrader.beans;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountProfileDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.OrderDataBean;
commit:4eb010a
commit:aa4dd7c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.beans;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: import java.sql.Timestamp;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Date;
1: 
1: import javax.persistence.Column;
1: import javax.persistence.Entity;
1: import javax.persistence.FetchType;
1: import javax.persistence.GeneratedValue;
1: import javax.persistence.GenerationType;
1: import javax.persistence.Id;
1: import javax.persistence.JoinColumn;
1: import javax.persistence.NamedQueries;
1: import javax.persistence.NamedQuery;
1: import javax.persistence.OneToMany;
1: import javax.persistence.OneToOne;
1: import javax.persistence.Table;
1: import javax.persistence.TableGenerator;
1: import javax.persistence.Temporal;
1: import javax.persistence.TemporalType;
1: import javax.persistence.Transient;
1: 
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountProfileDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.OrderDataBean;
1: 
1: @Entity (name = "accountejb")
1: @Table(name = "accountejb")
1: @NamedQueries( {
1:         @NamedQuery(name = "accountejb.findByCreationdate", query = "SELECT a FROM accountejb a WHERE a.creationDate = :creationdate"),
1:         @NamedQuery(name = "accountejb.findByOpenbalance", query = "SELECT a FROM accountejb a WHERE a.openBalance = :openbalance"),
1:         @NamedQuery(name = "accountejb.findByLogoutcount", query = "SELECT a FROM accountejb a WHERE a.logoutCount = :logoutcount"),
1:         @NamedQuery(name = "accountejb.findByBalance", query = "SELECT a FROM accountejb a WHERE a.balance = :balance"),
1:         @NamedQuery(name = "accountejb.findByAccountid", query = "SELECT a FROM accountejb a WHERE a.accountID = :accountid"),
1:         @NamedQuery(name = "accountejb.findByAccountid_eager", query = "SELECT a FROM accountejb a LEFT JOIN FETCH a.profile WHERE a.accountID = :accountid"),
1:         @NamedQuery(name = "accountejb.findByAccountid_eagerholdings", query = "SELECT a FROM accountejb a LEFT JOIN FETCH a.holdings WHERE a.accountID = :accountid"),
1:         @NamedQuery(name = "accountejb.findByLastlogin", query = "SELECT a FROM accountejb a WHERE a.lastLogin = :lastlogin"),
1:         @NamedQuery(name = "accountejb.findByLogincount", query = "SELECT a FROM accountejb a WHERE a.loginCount = :logincount")
1:     })
1: public class AccountDataBeanImpl implements AccountDataBean, Serializable {
1: 	
1: 	/* Accessor methods for persistent fields */
1:     @TableGenerator(
1:             name="accountIdGen",
1:             table="KEYGENEJB",
1:             pkColumnName="KEYNAME",
1:             valueColumnName="KEYVAL",
1:             pkColumnValue="account",
1:             allocationSize=1000)
1:     
1: 	@Id
1:     @GeneratedValue(strategy=GenerationType.TABLE, generator="accountIdGen")
1:     @Column(name = "ACCOUNTID", nullable = false)
1:     private Integer accountID;              /* accountID */
1:     
1: 	@Column(name = "LOGINCOUNT", nullable = false)
1:     private int loginCount;                 /* loginCount */
1:     
1: 	@Column(name = "LOGOUTCOUNT", nullable = false)
1:     private int logoutCount;                /* logoutCount */
1:     
1: 	 @Column(name = "LASTLOGIN")
1: 	    @Temporal(TemporalType.TIMESTAMP)
1:     private Date lastLogin;                 /* lastLogin Date */
1:     
1: 	 @Column(name = "CREATIONDATE")
1: 	    @Temporal(TemporalType.TIMESTAMP)
1:     private Date creationDate;              /* creationDate */
1:     
1: 	 @Column(name = "BALANCE")
1:     private BigDecimal balance;             /* balance */
1:     
1: 	 @Column(name = "OPENBALANCE")
1:     private BigDecimal openBalance;         /* open balance */
1:     
1: 	 @OneToMany(mappedBy = "account", fetch=FetchType.LAZY)
1:     private Collection<OrderDataBeanImpl> orders;
1:     
1:     @OneToMany(mappedBy = "account", fetch=FetchType.LAZY)
1:     private Collection<HoldingDataBeanImpl> holdings;
1:     
1:     @OneToOne(fetch=FetchType.LAZY)
0:     @JoinColumn(name="PROFILE_USERID")
1:     private AccountProfileDataBeanImpl profile;
1: 
0: //    @Version
0: //    private Integer optock;
1: 
1:     /* Accessor methods for relationship fields are only included for the AccountProfile profileID */
1:     @Transient
1:     private String profileID;
1: 
1:     public AccountDataBeanImpl() {
1:     }
1: 
1:     public AccountDataBeanImpl(Integer accountID,
1:             int loginCount,
1:             int logoutCount,
1:             Date lastLogin,
1:             Date creationDate,
1:             BigDecimal balance,
1:             BigDecimal openBalance,
1:             String profileID) {
1:         setAccountID(accountID);
1:         setLoginCount(loginCount);
1:         setLogoutCount(logoutCount);
1:         setLastLogin(lastLogin);
1:         setCreationDate(creationDate);
1:         setBalance(balance);
1:         setOpenBalance(openBalance);
1:         setProfileID(profileID);
1:     }
1: 
1:     public AccountDataBeanImpl(int loginCount,
1:             int logoutCount,
1:             Date lastLogin,
1:             Date creationDate,
1:             BigDecimal balance,
1:             BigDecimal openBalance,
1:             String profileID) {
1:         setLoginCount(loginCount);
1:         setLogoutCount(logoutCount);
1:         setLastLogin(lastLogin);
1:         setCreationDate(creationDate);
1:         setBalance(balance);
1:         setOpenBalance(openBalance);
1:         setProfileID(profileID);
1:     }
1: 
1:     public static AccountDataBean getRandomInstance() {
1:         return new AccountDataBeanImpl(new Integer(TradeConfig.rndInt(100000)), //accountID
1:                 TradeConfig.rndInt(10000), //loginCount
1:                 TradeConfig.rndInt(10000), //logoutCount
1:                 new java.util.Date(), //lastLogin
1:                 new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //creationDate
1:                 TradeConfig.rndBigDecimal(1000000.0f), //balance
1:                 TradeConfig.rndBigDecimal(1000000.0f), //openBalance
1:                 TradeConfig.rndUserID() //profileID
1:         );
1:     }
1: 
1:     public String toString() {
1:         return "\n\tAccount Data for account: " + getAccountID()
1:                 + "\n\t\t   loginCount:" + getLoginCount()
1:                 + "\n\t\t  logoutCount:" + getLogoutCount()
1:                 + "\n\t\t    lastLogin:" + getLastLogin()
1:                 + "\n\t\t creationDate:" + getCreationDate()
1:                 + "\n\t\t      balance:" + getBalance()
1:                 + "\n\t\t  openBalance:" + getOpenBalance()
1:                 + "\n\t\t    profileID:" + getProfileID()
1:                 ;
1:     }
1: 
1:     public String toHTML() {
1:         return "<BR>Account Data for account: <B>" + getAccountID() + "</B>"
1:                 + "<LI>   loginCount:" + getLoginCount() + "</LI>"
1:                 + "<LI>  logoutCount:" + getLogoutCount() + "</LI>"
1:                 + "<LI>    lastLogin:" + getLastLogin() + "</LI>"
1:                 + "<LI> creationDate:" + getCreationDate() + "</LI>"
1:                 + "<LI>      balance:" + getBalance() + "</LI>"
1:                 + "<LI>  openBalance:" + getOpenBalance() + "</LI>"
1:                 + "<LI>    profileID:" + getProfileID() + "</LI>"
1:                 ;
1:     }
1: 
1:     public void print() {
1:         Log.log(this.toString());
1:     }
1: 
1:     public Integer getAccountID() {
1:         return accountID;
1:     }
1: 
1:     public void setAccountID(Integer accountID) {
1:         this.accountID = accountID;
1:     }
1: 
1:     public int getLoginCount() {
1:         return loginCount;
1:     }
1: 
1:     public void setLoginCount(int loginCount) {
1:         this.loginCount = loginCount;
1:     }
1: 
1:     public int getLogoutCount() {
1:         return logoutCount;
1:     }
1: 
1:     public void setLogoutCount(int logoutCount) {
1:         this.logoutCount = logoutCount;
1:     }
1: 
1:     public Date getLastLogin() {
1:         return lastLogin;
1:     }
1: 
1:     public void setLastLogin(Date lastLogin) {
1:         this.lastLogin = lastLogin;
1:     }
1: 
1:     public Date getCreationDate() {
1:         return creationDate;
1:     }
1: 
1:     public void setCreationDate(Date creationDate) {
1:         this.creationDate = creationDate;
1:     }
1: 
1:     public BigDecimal getBalance() {
1:         return balance;
1:     }
1: 
1:     public void setBalance(BigDecimal balance) {
1:         this.balance = balance;
1:     }
1: 
1:     public BigDecimal getOpenBalance() {
1:         return openBalance;
1:     }
1: 
1:     public void setOpenBalance(BigDecimal openBalance) {
1:         this.openBalance = openBalance;
1:     }
1: 
1:     public String getProfileID() {
1:         return profileID;
1:     }
1: 
1:     public void setProfileID(String profileID) {
1:         this.profileID = profileID;
1:     }
1: 
0:     /* Disabled for D185273
0:      public String getUserID() {
0:          return getProfileID();
1:      }
1:      */
1: 
1:     public Collection<OrderDataBean> getOrders() {
1:         Collection orderDataBeans = new ArrayList();
1:         for (OrderDataBeanImpl o : orders ) {
1:             orderDataBeans.add( (OrderDataBean) o);
1:         }
1:         return orderDataBeans;
1:     }
1: 
1:     public void setOrders(Collection<OrderDataBeanImpl> orders) {
1:         this.orders = orders;
1:     }
1:     
1:     public Collection<HoldingDataBean> getHoldings() {
1:         Collection holdingDataBeans = new ArrayList();
1:         for (HoldingDataBeanImpl h : holdings ) {
1:             holdingDataBeans.add( (HoldingDataBean) h);
1:         }
1:         return holdingDataBeans;
1:     }
1: 
1:     public void setHoldings(Collection<HoldingDataBeanImpl> holdings) {
1:         this.holdings = holdings;
1:     }
1: 
1:     public AccountProfileDataBean getProfile() {
1:         return profile;
1:     }
1: 
1:     public void setProfile(AccountProfileDataBean profile) {
1:         this.profile = (AccountProfileDataBeanImpl) profile;
1:     }
1: 
1:     public void login(String password) {
1:         AccountProfileDataBean profile = getProfile();
1:         if ((profile == null) || (profile.getPassword().equals(password) == false)) {
1:             String error = "AccountBean:Login failure for account: " + getAccountID() +
1:                     ((profile == null) ? "null AccountProfile" :
1:                             "\n\tIncorrect password-->" + profile.getUserID() + ":" + profile.getPassword());
1:             throw new RuntimeException(error);
1:             
1:         }
1: 
1:         setLastLogin(new Timestamp(System.currentTimeMillis()));
1:         setLoginCount(getLoginCount() + 1);
1:     }
1: 
1:     public void logout() {
1:         setLogoutCount(getLogoutCount() + 1);
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         int hash = 0;
1:         hash += (this.accountID != null ? this.accountID.hashCode() : 0);
1:         return hash;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object object) {
1:         // TODO: Warning - this method won't work in the case the id fields are not set
1:         if (!(object instanceof AccountDataBeanImpl)) {
1:             return false;
1:         }
1:         AccountDataBeanImpl other = (AccountDataBeanImpl)object;
1:         if (this.accountID != other.accountID && (this.accountID == null || !this.accountID.equals(other.accountID))) return false;
1:         return true;
1:     }
1: }
============================================================================