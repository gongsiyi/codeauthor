1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint;
1:f13c6ac: 
1:f13c6ac: import java.net.URI;
1:f13c6ac: import java.net.URL;
1:3b2c33b: import java.util.Collections;
1:3b2c33b: import java.util.HashSet;
1:f13c6ac: import java.util.List;
1:f117d81: import java.util.Map;
1:f13c6ac: import java.util.Set;
1:f13c6ac: import java.io.IOException;
1:f13c6ac: 
1:f13c6ac: import javax.xml.validation.Schema;
1:f13c6ac: 
1:f13c6ac: import org.w3c.dom.Attr;
1:f13c6ac: import org.w3c.dom.Element;
1:f13c6ac: import org.w3c.dom.Node;
1:f13c6ac: 
1:09a7647: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1:6414875: import org.apache.aries.blueprint.reflect.BeanMetadataImpl;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanArgument;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanProperty;
1:f13c6ac: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Metadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.NullMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.RefMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:f13c6ac: import org.xml.sax.SAXException;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * TODO: constructor injection
1:f13c6ac:  * TODO: Dependency#setMethod 
1:f13c6ac:  */
1:f13c6ac: public class ParserTest extends AbstractBlueprintTest {
1:f13c6ac: 
1:f13c6ac:     public void test() {
1:f13c6ac:         Integer[] oo = new Integer[1];
1:f13c6ac:         Object[] ii = oo;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testParseComponent() throws Exception {
1:f13c6ac:         ComponentDefinitionRegistry registry = parse("/test-simple-component.xml");
1:f13c6ac:         assertNotNull(registry);
1:f13c6ac:         ComponentMetadata component = registry.getComponentDefinition("pojoA");
1:f13c6ac:         assertNotNull(component);
1:f13c6ac:         assertEquals("pojoA", component.getId());
1:f13c6ac:         assertTrue(component instanceof BeanMetadata);
1:f13c6ac:         BeanMetadata local = (BeanMetadata) component;
1:f13c6ac:         List<String> deps = local.getDependsOn();
1:f13c6ac:         assertNotNull(deps);
1:f13c6ac:         assertEquals(2, deps.size());
1:f13c6ac:         assertTrue(deps.contains("pojoB"));
1:f13c6ac:         assertTrue(deps.contains("pojoC"));
1:6414875:         assertEquals("org.apache.aries.blueprint.pojos.PojoA", local.getClassName());
1:f13c6ac:         List<BeanArgument> params = local.getArguments();
1:f13c6ac:         assertNotNull(params);
1:f13c6ac:         assertEquals(6, params.size());
1:f13c6ac:         BeanArgument param = params.get(0);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(-1, param.getIndex());
1:f13c6ac:         assertNull(param.getValueType());
1:f13c6ac:         assertNotNull(param.getValue());
1:f13c6ac:         assertTrue(param.getValue() instanceof ValueMetadata);
1:f13c6ac:         assertEquals("val0", ((ValueMetadata) param.getValue()).getStringValue());
1:f13c6ac:         assertNull(((ValueMetadata) param.getValue()).getType());
1:f13c6ac:         param = params.get(1);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(-1, param.getIndex());
1:f13c6ac:         assertNull(param.getValueType());
1:f13c6ac:         assertNotNull(param.getValue());
1:f13c6ac:         assertTrue(param.getValue() instanceof RefMetadata);
1:f13c6ac:         assertEquals("val1", ((RefMetadata) param.getValue()).getComponentId());
1:f13c6ac:         param = params.get(2);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(-1, param.getIndex());
1:f13c6ac:         assertNull(param.getValueType());
1:f13c6ac:         assertNotNull(param.getValue());
1:f13c6ac:         assertTrue(param.getValue() instanceof NullMetadata);
1:f13c6ac:         param = params.get(3);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(-1, param.getIndex());
1:f13c6ac:         assertEquals("java.lang.String", param.getValueType());
1:f13c6ac:         assertNotNull(param.getValue());
1:f13c6ac:         assertTrue(param.getValue() instanceof ValueMetadata);
1:f13c6ac:         assertEquals("val3", ((ValueMetadata) param.getValue()).getStringValue());
1:f13c6ac:         assertNull(((ValueMetadata) param.getValue()).getType());
1:f13c6ac:         param = params.get(4);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(-1, param.getIndex());
1:f13c6ac:         assertNull(param.getValueType());
1:f13c6ac:         assertNotNull(param.getValue());
1:f13c6ac:         assertTrue(param.getValue() instanceof CollectionMetadata);
1:f13c6ac:         CollectionMetadata array = (CollectionMetadata) param.getValue();
1:f13c6ac:         assertNull(array.getValueType());
1:f13c6ac:         assertNotNull(array.getValues());
1:f13c6ac:         assertEquals(3, array.getValues().size());
1:f13c6ac:         assertTrue(array.getValues().get(0) instanceof ValueMetadata);
1:f13c6ac:         assertTrue(array.getValues().get(1) instanceof ComponentMetadata);
1:f13c6ac:         assertTrue(array.getValues().get(2) instanceof NullMetadata);
1:f13c6ac:         param = params.get(5);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(-1, param.getIndex());
1:f13c6ac:         assertNull(param.getValueType());
1:f13c6ac:         assertNotNull(param.getValue());
1:f13c6ac:         assertTrue(param.getValue() instanceof RefMetadata);
1:f13c6ac:         assertEquals("pojoB", ((RefMetadata) param.getValue()).getComponentId());
1:f13c6ac:         
1:f13c6ac:         assertEquals(null, local.getInitMethod());
1:f13c6ac:         assertEquals(null, local.getDestroyMethod());
1:f13c6ac:                 
1:f13c6ac:         // test pojoB
1:f13c6ac:         ComponentMetadata pojoB = registry.getComponentDefinition("pojoB");
1:f13c6ac:         assertNotNull(pojoB);
1:f13c6ac:         assertEquals("pojoB", pojoB.getId());
1:f13c6ac:         assertTrue(pojoB instanceof BeanMetadata);
1:f13c6ac:         BeanMetadata pojoBLocal = (BeanMetadata) pojoB;
1:f13c6ac:         assertEquals("initPojo", pojoBLocal.getInitMethod());
1:f13c6ac: //        assertEquals("", pojoBLocal.getDestroyMethod());
1:f13c6ac:         
1:f13c6ac:         params = pojoBLocal.getArguments();
1:f13c6ac:         assertNotNull(params);
1:f13c6ac:         assertEquals(2, params.size());
1:f13c6ac:         param = params.get(0);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(1, param.getIndex());
1:f13c6ac:         param = params.get(1);
1:f13c6ac:         assertNotNull(param);
1:f13c6ac:         assertEquals(0, param.getIndex());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testParse() throws Exception {
1:f13c6ac:         parse("/test.xml");
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: 
1:f13c6ac:     public void testCustomNodes() throws Exception {
1:3b2c33b:         ComponentDefinitionRegistry registry = parse("/test-custom-nodes.xml", new TestNamespaceHandlerSet());
1:f13c6ac:         
1:f13c6ac:         ComponentMetadata metadata;
1:f13c6ac:         
1:f13c6ac:         metadata = registry.getComponentDefinition("fooService");
1:f13c6ac:         assertNotNull(metadata);
1:f13c6ac:         assertTrue(metadata instanceof MyLocalComponentMetadata);
1:f13c6ac:         MyLocalComponentMetadata comp1 = (MyLocalComponentMetadata) metadata;
1:f13c6ac:         assertEquals(true, comp1.getCacheReturnValues());
1:f13c6ac:         assertEquals("getVolatile", comp1.getOperation());
1:f13c6ac:         
1:f13c6ac:         metadata = registry.getComponentDefinition("barService");
1:f13c6ac:         assertNotNull(metadata);
1:f13c6ac:         assertTrue(metadata instanceof BeanMetadata);
1:f13c6ac:         BeanMetadata comp2 = (BeanMetadata) metadata;
1:f13c6ac:         assertEquals(1, comp2.getProperties().size());
1:f13c6ac:         BeanProperty propertyMetadata = comp2.getProperties().get(0);
1:f13c6ac:         assertEquals("localCache", propertyMetadata.getName());
1:f13c6ac:         Metadata propertyValue = propertyMetadata.getValue();
1:f13c6ac:         assertTrue(propertyValue instanceof BeanMetadata);
1:f13c6ac:         BeanMetadata innerComp = (BeanMetadata) propertyValue;
1:6414875:         assertEquals("org.apache.aries.CacheProperty", innerComp.getClassName()); 
1:f13c6ac:         
1:f13c6ac:         metadata = registry.getComponentDefinition("myCache");
1:f13c6ac:         assertNotNull(metadata);
1:f13c6ac:         assertTrue(metadata instanceof BeanMetadata);
1:f13c6ac:         BeanMetadata comp3 = (BeanMetadata) metadata;
1:6414875:         assertEquals("org.apache.aries.Cache", comp3.getClassName());         
1:f13c6ac:     }
1:3b2c33b:     
1:b4fc651:     public void testScopes() throws Exception {
1:b4fc651:         ComponentDefinitionRegistry registry = parse("/test-scopes.xml", new TestNamespaceHandlerSet());
1:f13c6ac: 
1:b4fc651:         ComponentMetadata metadata = registry.getComponentDefinition("fooService");
1:b4fc651:         assertNotNull(metadata);
1:b4fc651:         assertTrue(metadata instanceof BeanMetadata);
1:b4fc651:         BeanMetadata bm = (BeanMetadata) metadata;
1:b4fc651:         assertNull(bm.getScope());
1:f13c6ac:         
1:b4fc651:         metadata = registry.getComponentDefinition("barService");
1:b4fc651:         assertNotNull(metadata);
1:b4fc651:         assertTrue(metadata instanceof BeanMetadata);
1:b4fc651:         bm = (BeanMetadata) metadata;
1:b4fc651:         assertEquals("prototype", bm.getScope());
1:f13c6ac:         
1:b4fc651:         metadata = registry.getComponentDefinition("bazService");
1:b4fc651:         assertNotNull(metadata);
1:b4fc651:         assertTrue(metadata instanceof BeanMetadata);
1:b4fc651:         bm = (BeanMetadata) metadata;
1:b4fc651:         assertEquals("singleton", bm.getScope());
2:b4fc651:         
1:b4fc651:         metadata = registry.getComponentDefinition("booService");
1:b4fc651:         assertNotNull(metadata);
1:b4fc651:         assertTrue(metadata instanceof BeanMetadata);
1:b4fc651:         bm = (BeanMetadata) metadata;
1:b4fc651:         assertEquals("{http://test.org}boo", bm.getScope());
1:f13c6ac:     }
1:b4fc651: 
1:09a7647:     private static class TestNamespaceHandlerSet implements NamespaceHandlerSet {
1:b4fc651:         private static final URI CACHE = URI.create("http://cache.org");
1:b4fc651: 
1:b4fc651:         private static final URI TEST = URI.create("http://test.org");
1:b4fc651: 
1:3b2c33b:         private TestNamespaceHandlerSet() {
1:b4fc651:         }
1:3b2c33b: 
1:3b2c33b:         public Set<URI> getNamespaces() {
1:b4fc651:             Set<URI> namespaces = new HashSet<URI>();
1:b4fc651:             namespaces.add(CACHE);
1:b4fc651:             namespaces.add(TEST);
1:3b2c33b:             
1:b4fc651:             return namespaces;
1:3b2c33b:         }
1:b4fc651: 
1:3b2c33b:         public boolean isComplete() {
1:3b2c33b:             return true;
1:3b2c33b:         }
1:3b2c33b: 
1:3b2c33b:         public NamespaceHandler getNamespaceHandler(URI namespace) {
1:b4fc651:             if (CACHE.equals(namespace)) {
1:f13c6ac:                 return new TestNamespaceHandler();
1:b4fc651:             } else if (TEST.equals(namespace)) {
1:b4fc651:                 return new ScopeNamespaceHandler();
1:f13c6ac:             } else {
1:b4fc651:                 return null;
1:3b2c33b:             }
1:f13c6ac:         }
1:f13c6ac: 
1:3b2c33b:         public Schema getSchema() throws SAXException, IOException {
1:b4fc651:             return null;
1:3b2c33b:         }
1:3b2c33b: 
1:f117d81:         public Schema getSchema(Map<String, String> locations) throws SAXException, IOException {
1:f117d81:             return null;
1:f117d81:         }
1:f117d81: 
1:09a7647:         public void addListener(NamespaceHandlerSet.Listener listener) {
1:3b2c33b:         }
1:3b2c33b: 
1:09a7647:         public void removeListener(NamespaceHandlerSet.Listener listener) {
1:f13c6ac:         }
1:3b2c33b: 
1:3b2c33b:         public void destroy() {
1:3b2c33b:         }
1:f13c6ac:     }
1:3b2c33b:     
1:b4fc651:     private static class ScopeNamespaceHandler implements NamespaceHandler {
1:f13c6ac: 
1:f13c6ac:         public URL getSchemaLocation(String namespace) {
1:b4fc651:             // TODO Auto-generated method stub
1:f13c6ac:             return null;
1:f13c6ac:         }
1:f13c6ac: 
1:b4fc651:         public Set<Class> getManagedClasses() {
1:b4fc651:             // TODO Auto-generated method stub
1:f13c6ac:             return null;
1:f13c6ac:         }
1:f13c6ac: 
1:b4fc651:         public Metadata parse(Element element, ParserContext context) {
1:b4fc651:             // TODO Auto-generated method stub
1:b4fc651:             return null;
1:f13c6ac:         }
1:b4fc651: 
1:f13c6ac:         public ComponentMetadata decorate(Node node,
1:b4fc651:                 ComponentMetadata component, ParserContext context) {
1:b4fc651:             return component;
1:f13c6ac:         }
5:b4fc651:     }
1:f13c6ac: 
1:f13c6ac:     private static class TestNamespaceHandler implements NamespaceHandler {
1:f13c6ac: 
1:3b2c33b:         public URL getSchemaLocation(String namespace) {
1:3b2c33b:             return getClass().getResource("/cache.xsd");
1:3b2c33b:         }
1:3b2c33b: 
1:3b2c33b:         public Set<Class> getManagedClasses() {
1:3b2c33b:             return new HashSet<Class>();
1:3b2c33b:         }
1:3b2c33b: 
1:b4fc651:         public ComponentMetadata decorate(Node node,
1:f13c6ac:                                           ComponentMetadata component,
1:f13c6ac:                                           ParserContext context) {
1:f13c6ac:             //System.out.println("decorate: " + node + " " + component + " " + container.getEnclosingComponent().getId());
1:f13c6ac:             
1:f13c6ac:             if (node instanceof Attr) {
1:f13c6ac:                 Attr attr = (Attr) node;
1:f13c6ac:                 MyLocalComponentMetadata decoratedComp = new MyLocalComponentMetadata((BeanMetadata)component);
1:f13c6ac:                 decoratedComp.setCacheReturnValues(Boolean.parseBoolean(attr.getValue()));
1:f13c6ac:                 return decoratedComp;
1:f13c6ac:             } else if (node instanceof Element) {
1:f13c6ac:                 Element element = (Element) node;                
1:f13c6ac:                 MyLocalComponentMetadata decoratedComp = (MyLocalComponentMetadata) component;
1:f13c6ac:                 decoratedComp.setOperation(element.getAttribute("name"));
1:f13c6ac:                 return decoratedComp;
1:f13c6ac:             } else {
1:f13c6ac:                 throw new RuntimeException("Unhandled node: " + node);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public Metadata parse(Element element, ParserContext context) {
1:f13c6ac:             String comp = (context.getEnclosingComponent() == null) ? null : context.getEnclosingComponent().getId();
1:f13c6ac:             //System.out.println("parse: " + element.getLocalName() + " " + comp);
1:f13c6ac:             
1:f13c6ac:             String className;
1:f13c6ac:             if (context.getEnclosingComponent() == null) {
1:6414875:                 className = "org.apache.aries.Cache";
1:f13c6ac:             } else {
1:6414875:                 className = "org.apache.aries.CacheProperty";
1:f13c6ac:             }
1:f13c6ac:                         
1:f13c6ac:             BeanMetadataImpl p = new BeanMetadataImpl();
1:f13c6ac:             p.setId(element.getAttribute("id"));
1:f13c6ac:             p.setClassName(className);
1:f13c6ac:             
1:f13c6ac:             return p;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     private static class MyLocalComponentMetadata extends BeanMetadataImpl {
1:f13c6ac:         
1:f13c6ac:         private boolean cacheReturnValues;
1:f13c6ac:         private String operation;
1:f13c6ac:         
1:f13c6ac:         public MyLocalComponentMetadata(BeanMetadata impl) {
1:f13c6ac:             super(impl);
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public boolean getCacheReturnValues() {
1:f13c6ac:             return cacheReturnValues;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public void setCacheReturnValues(boolean value) {
1:f13c6ac:             cacheReturnValues = value;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public void setOperation(String operation) {
1:f13c6ac:             this.operation = operation;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public String getOperation() {
1:f13c6ac:             return this.operation;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f117d81
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:         public Schema getSchema(Map<String, String> locations) throws SAXException, IOException {
1:             return null;
1:         }
1: 
commit:3b2c33b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Bundle;
/////////////////////////////////////////////////////////////////////////
1:         ComponentDefinitionRegistry registry = parse("/test-custom-nodes.xml", new TestNamespaceHandlerSet());
/////////////////////////////////////////////////////////////////////////
0:     private static class TestNamespaceHandlerSet implements NamespaceHandlerRegistry.NamespaceHandlerSet {
1: 
1:         private TestNamespaceHandlerSet() {
1: 
1:         public Set<URI> getNamespaces() {
0:             return Collections.singleton(URI.create("http://cache.org"));
1:         }
1: 
1:         public boolean isComplete() {
1:             return true;
1:         }
1: 
1:         public NamespaceHandler getNamespaceHandler(URI namespace) {
0:             if (u.equals(namespace)) {
1:             }
1:         public Schema getSchema() throws SAXException, IOException {
1: 
0:         public void addListener(NamespaceHandlerRegistry.Listener listener) {
1:         }
1: 
0:         public void removeListener(NamespaceHandlerRegistry.Listener listener) {
1:         }
1: 
1:         public void destroy() {
1:         }
1: 
1:         public URL getSchemaLocation(String namespace) {
1:             return getClass().getResource("/cache.xsd");
1:         }
1: 
1:         public Set<Class> getManagedClasses() {
1:             return new HashSet<Class>();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint;
1: 
1: import java.net.URI;
1: import java.net.URL;
1: import java.util.List;
1: import java.util.Set;
1: import java.io.IOException;
1: 
1: import javax.xml.validation.Schema;
1: 
1: import org.w3c.dom.Attr;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
0: import org.apache.geronimo.blueprint.container.NamespaceHandlerRegistry;
0: import org.apache.geronimo.blueprint.reflect.BeanMetadataImpl;
1: import org.osgi.service.blueprint.reflect.BeanArgument;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanProperty;
1: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.NullMetadata;
1: import org.osgi.service.blueprint.reflect.RefMetadata;
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
1: import org.xml.sax.SAXException;
1: 
1: /**
1:  * TODO: constructor injection
1:  * TODO: Dependency#setMethod 
1:  */
1: public class ParserTest extends AbstractBlueprintTest {
1: 
1:     public void test() {
1:         Integer[] oo = new Integer[1];
1:         Object[] ii = oo;
1:     }
1: 
1:     public void testParseComponent() throws Exception {
1:         ComponentDefinitionRegistry registry = parse("/test-simple-component.xml");
1:         assertNotNull(registry);
1:         ComponentMetadata component = registry.getComponentDefinition("pojoA");
1:         assertNotNull(component);
1:         assertEquals("pojoA", component.getId());
1:         assertTrue(component instanceof BeanMetadata);
1:         BeanMetadata local = (BeanMetadata) component;
1:         List<String> deps = local.getDependsOn();
1:         assertNotNull(deps);
1:         assertEquals(2, deps.size());
1:         assertTrue(deps.contains("pojoB"));
1:         assertTrue(deps.contains("pojoC"));
0:         assertEquals("org.apache.geronimo.blueprint.pojos.PojoA", local.getClassName());
1:         List<BeanArgument> params = local.getArguments();
1:         assertNotNull(params);
1:         assertEquals(6, params.size());
1:         BeanArgument param = params.get(0);
1:         assertNotNull(param);
1:         assertEquals(-1, param.getIndex());
1:         assertNull(param.getValueType());
1:         assertNotNull(param.getValue());
1:         assertTrue(param.getValue() instanceof ValueMetadata);
1:         assertEquals("val0", ((ValueMetadata) param.getValue()).getStringValue());
1:         assertNull(((ValueMetadata) param.getValue()).getType());
1:         param = params.get(1);
1:         assertNotNull(param);
1:         assertEquals(-1, param.getIndex());
1:         assertNull(param.getValueType());
1:         assertNotNull(param.getValue());
1:         assertTrue(param.getValue() instanceof RefMetadata);
1:         assertEquals("val1", ((RefMetadata) param.getValue()).getComponentId());
1:         param = params.get(2);
1:         assertNotNull(param);
1:         assertEquals(-1, param.getIndex());
1:         assertNull(param.getValueType());
1:         assertNotNull(param.getValue());
1:         assertTrue(param.getValue() instanceof NullMetadata);
1:         param = params.get(3);
1:         assertNotNull(param);
1:         assertEquals(-1, param.getIndex());
1:         assertEquals("java.lang.String", param.getValueType());
1:         assertNotNull(param.getValue());
1:         assertTrue(param.getValue() instanceof ValueMetadata);
1:         assertEquals("val3", ((ValueMetadata) param.getValue()).getStringValue());
1:         assertNull(((ValueMetadata) param.getValue()).getType());
1:         param = params.get(4);
1:         assertNotNull(param);
1:         assertEquals(-1, param.getIndex());
1:         assertNull(param.getValueType());
1:         assertNotNull(param.getValue());
1:         assertTrue(param.getValue() instanceof CollectionMetadata);
1:         CollectionMetadata array = (CollectionMetadata) param.getValue();
1:         assertNull(array.getValueType());
1:         assertNotNull(array.getValues());
1:         assertEquals(3, array.getValues().size());
1:         assertTrue(array.getValues().get(0) instanceof ValueMetadata);
1:         assertTrue(array.getValues().get(1) instanceof ComponentMetadata);
1:         assertTrue(array.getValues().get(2) instanceof NullMetadata);
1:         param = params.get(5);
1:         assertNotNull(param);
1:         assertEquals(-1, param.getIndex());
1:         assertNull(param.getValueType());
1:         assertNotNull(param.getValue());
1:         assertTrue(param.getValue() instanceof RefMetadata);
1:         assertEquals("pojoB", ((RefMetadata) param.getValue()).getComponentId());
1:         
1:         assertEquals(null, local.getInitMethod());
1:         assertEquals(null, local.getDestroyMethod());
1:                 
1:         // test pojoB
1:         ComponentMetadata pojoB = registry.getComponentDefinition("pojoB");
1:         assertNotNull(pojoB);
1:         assertEquals("pojoB", pojoB.getId());
1:         assertTrue(pojoB instanceof BeanMetadata);
1:         BeanMetadata pojoBLocal = (BeanMetadata) pojoB;
1:         assertEquals("initPojo", pojoBLocal.getInitMethod());
1: //        assertEquals("", pojoBLocal.getDestroyMethod());
1:         
1:         params = pojoBLocal.getArguments();
1:         assertNotNull(params);
1:         assertEquals(2, params.size());
1:         param = params.get(0);
1:         assertNotNull(param);
1:         assertEquals(1, param.getIndex());
1:         param = params.get(1);
1:         assertNotNull(param);
1:         assertEquals(0, param.getIndex());
1:     }
1: 
1:     public void testParse() throws Exception {
1:         parse("/test.xml");
1:     }
1: 
1: 
1:     public void testCustomNodes() throws Exception {
0:         ComponentDefinitionRegistry registry = parse("/test-custom-nodes.xml", new TestNamespaceHandlerRegistry());
1:         
1:         ComponentMetadata metadata;
1:         
1:         metadata = registry.getComponentDefinition("fooService");
1:         assertNotNull(metadata);
1:         assertTrue(metadata instanceof MyLocalComponentMetadata);
1:         MyLocalComponentMetadata comp1 = (MyLocalComponentMetadata) metadata;
1:         assertEquals(true, comp1.getCacheReturnValues());
1:         assertEquals("getVolatile", comp1.getOperation());
1:         
1:         metadata = registry.getComponentDefinition("barService");
1:         assertNotNull(metadata);
1:         assertTrue(metadata instanceof BeanMetadata);
1:         BeanMetadata comp2 = (BeanMetadata) metadata;
1:         assertEquals(1, comp2.getProperties().size());
1:         BeanProperty propertyMetadata = comp2.getProperties().get(0);
1:         assertEquals("localCache", propertyMetadata.getName());
1:         Metadata propertyValue = propertyMetadata.getValue();
1:         assertTrue(propertyValue instanceof BeanMetadata);
1:         BeanMetadata innerComp = (BeanMetadata) propertyValue;
0:         assertEquals("org.apache.geronimo.CacheProperty", innerComp.getClassName()); 
1:         
1:         metadata = registry.getComponentDefinition("myCache");
1:         assertNotNull(metadata);
1:         assertTrue(metadata instanceof BeanMetadata);
1:         BeanMetadata comp3 = (BeanMetadata) metadata;
0:         assertEquals("org.apache.geronimo.Cache", comp3.getClassName());         
1:     }
1: 
0:     private static class TestNamespaceHandlerRegistry implements NamespaceHandlerRegistry {
1:         
0:         public void destroy() {
1:         }
1:         
0:         public NamespaceHandler getNamespaceHandler(URI uri) {
0:             URI u = URI.create("http://cache.org");
0:             if (u.equals(uri)) {
1:                 return new TestNamespaceHandler();
1:             } else {
1:                 return null;
1:             }        
1:         }
1: 
0:         public void addListener(Listener listener) {
1:         }
1: 
0:         public void removeListener(Listener listener) {
1:         }
1: 
0:         public Schema getSchema(Set<URI> namespaces) throws SAXException, IOException {
1:             return null;
1:         }
1:     }
1:     
1:     private static class TestNamespaceHandler implements NamespaceHandler {
1: 
1:         public ComponentMetadata decorate(Node node,
1:                                           ComponentMetadata component,
1:                                           ParserContext context) {
1:             //System.out.println("decorate: " + node + " " + component + " " + container.getEnclosingComponent().getId());
1:             
1:             if (node instanceof Attr) {
1:                 Attr attr = (Attr) node;
1:                 MyLocalComponentMetadata decoratedComp = new MyLocalComponentMetadata((BeanMetadata)component);
1:                 decoratedComp.setCacheReturnValues(Boolean.parseBoolean(attr.getValue()));
1:                 return decoratedComp;
1:             } else if (node instanceof Element) {
1:                 Element element = (Element) node;                
1:                 MyLocalComponentMetadata decoratedComp = (MyLocalComponentMetadata) component;
1:                 decoratedComp.setOperation(element.getAttribute("name"));
1:                 return decoratedComp;
1:             } else {
1:                 throw new RuntimeException("Unhandled node: " + node);
1:             }
1:         }
1: 
1:         public URL getSchemaLocation(String namespace) {
0:             return getClass().getResource("/cache.xsd");
1:         }
1: 
1:         public Metadata parse(Element element, ParserContext context) {
1:             String comp = (context.getEnclosingComponent() == null) ? null : context.getEnclosingComponent().getId();
1:             //System.out.println("parse: " + element.getLocalName() + " " + comp);
1:             
1:             String className;
1:             if (context.getEnclosingComponent() == null) {
0:                 className = "org.apache.geronimo.Cache";
1:             } else {
0:                 className = "org.apache.geronimo.CacheProperty";
1:             }
1:                         
1:             BeanMetadataImpl p = new BeanMetadataImpl();
1:             p.setId(element.getAttribute("id"));
1:             p.setClassName(className);
1:             
1:             return p;
1:         }
1:         
1:     }
1:     
1:     private static class MyLocalComponentMetadata extends BeanMetadataImpl {
1:         
1:         private boolean cacheReturnValues;
1:         private String operation;
1:         
1:         public MyLocalComponentMetadata(BeanMetadata impl) {
1:             super(impl);
1:         }
1:         
1:         public boolean getCacheReturnValues() {
1:             return cacheReturnValues;
1:         }
1:         
1:         public void setCacheReturnValues(boolean value) {
1:             cacheReturnValues = value;
1:         }
1:         
1:         public void setOperation(String operation) {
1:             this.operation = operation;
1:         }
1:         
1:         public String getOperation() {
1:             return this.operation;
1:         }
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b4fc651
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testScopes() throws Exception {
1:         ComponentDefinitionRegistry registry = parse("/test-scopes.xml", new TestNamespaceHandlerSet());
1: 
1:         ComponentMetadata metadata = registry.getComponentDefinition("fooService");
1:         assertNotNull(metadata);
1:         assertTrue(metadata instanceof BeanMetadata);
1:         BeanMetadata bm = (BeanMetadata) metadata;
1:         assertNull(bm.getScope());
1:         
1:         metadata = registry.getComponentDefinition("barService");
1:         assertNotNull(metadata);
1:         assertTrue(metadata instanceof BeanMetadata);
1:         bm = (BeanMetadata) metadata;
1:         assertEquals("prototype", bm.getScope());
1:         
1:         metadata = registry.getComponentDefinition("bazService");
1:         assertNotNull(metadata);
1:         assertTrue(metadata instanceof BeanMetadata);
1:         bm = (BeanMetadata) metadata;
1:         assertEquals("singleton", bm.getScope());
1:         
1:         metadata = registry.getComponentDefinition("booService");
1:         assertNotNull(metadata);
1:         assertTrue(metadata instanceof BeanMetadata);
1:         bm = (BeanMetadata) metadata;
1:         assertEquals("{http://test.org}boo", bm.getScope());
1:     }
1:         private static final URI CACHE = URI.create("http://cache.org");
1: 
1:         private static final URI TEST = URI.create("http://test.org");
1:             Set<URI> namespaces = new HashSet<URI>();
1:             namespaces.add(CACHE);
1:             namespaces.add(TEST);
1:             
1:             return namespaces;
/////////////////////////////////////////////////////////////////////////
1:             if (CACHE.equals(namespace)) {
1:             } else if (TEST.equals(namespace)) {
1:                 return new ScopeNamespaceHandler();
/////////////////////////////////////////////////////////////////////////
0:     
1:     private static class ScopeNamespaceHandler implements NamespaceHandler {
0: 
0:         public URL getSchemaLocation(String namespace) {
1:             // TODO Auto-generated method stub
1:             return null;
1:         }
0: 
1:         public Set<Class> getManagedClasses() {
1:             // TODO Auto-generated method stub
1:             return null;
1:         }
0: 
1:         public Metadata parse(Element element, ParserContext context) {
1:             // TODO Auto-generated method stub
1:             return null;
1:         }
0: 
1:         public ComponentMetadata decorate(Node node,
1:                 ComponentMetadata component, ParserContext context) {
1:             return component;
1:         }
1:     }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
/////////////////////////////////////////////////////////////////////////
1:     private static class TestNamespaceHandlerSet implements NamespaceHandlerSet {
/////////////////////////////////////////////////////////////////////////
1:         public void addListener(NamespaceHandlerSet.Listener listener) {
1:         public void removeListener(NamespaceHandlerSet.Listener listener) {
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
1: import org.apache.aries.blueprint.reflect.BeanMetadataImpl;
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("org.apache.aries.blueprint.pojos.PojoA", local.getClassName());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("org.apache.aries.CacheProperty", innerComp.getClassName()); 
1:         assertEquals("org.apache.aries.Cache", comp3.getClassName());         
/////////////////////////////////////////////////////////////////////////
1:                 className = "org.apache.aries.Cache";
1:                 className = "org.apache.aries.CacheProperty";
============================================================================