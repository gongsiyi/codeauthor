1:0aad0ca: /*
1:0aad0ca:  * Licensed to the Apache Software Foundation (ASF) under one
1:0aad0ca:  * or more contributor license agreements.  See the NOTICE file
1:0aad0ca:  * distributed with this work for additional information
1:0aad0ca:  * regarding copyright ownership.  The ASF licenses this file
1:0aad0ca:  * to you under the Apache License, Version 2.0 (the
1:0aad0ca:  * "License"); you may not use this file except in compliance
1:0aad0ca:  * with the License.  You may obtain a copy of the License at
1:0aad0ca:  *
1:0aad0ca:  *  http://www.apache.org/licenses/LICENSE-2.0
1:0aad0ca:  *
1:0aad0ca:  * Unless required by applicable law or agreed to in writing,
1:0aad0ca:  * software distributed under the License is distributed on an
1:0aad0ca:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0aad0ca:  * KIND, either express or implied.  See the License for the
1:0aad0ca:  * specific language governing permissions and limitations
1:0aad0ca:  * under the License.
2:0aad0ca:  */
4:0aad0ca: 
1:0aad0ca: 
1:0aad0ca: package org.apache.aries.application.resolver.obr.impl;
1:0aad0ca: 
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:0aad0ca: 
1:792f3de: import java.util.Hashtable;
1:792f3de: import java.util.Map;
1:792f3de: 
1:792f3de: import org.apache.aries.application.modelling.Consumer;
1:792f3de: import org.apache.aries.application.utils.FilterUtils;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:792f3de: import org.apache.felix.bundlerepository.Capability;
1:792f3de: import org.apache.felix.bundlerepository.Requirement;
1:792f3de: import org.osgi.framework.Filter;
1:792f3de: import org.osgi.framework.FrameworkUtil;
1:792f3de: import org.osgi.framework.InvalidSyntaxException;
1:792f3de: import org.slf4j.Logger;
1:792f3de: import org.slf4j.LoggerFactory;
1:792f3de: 
1:0aad0ca: public class RequirementImpl implements Requirement
6:0aad0ca: {
1:792f3de: 
1:792f3de: 
1:792f3de:   private final Logger logger = LoggerFactory.getLogger(RequirementImpl.class);
1:792f3de:   private final Consumer consumer;
1:792f3de: 
1:0aad0ca:   private final String name;
1:792f3de:   private final String filter;
1:0aad0ca:   private final boolean multiple;
1:0aad0ca:   private final boolean optional;
1:0aad0ca:   private final boolean extend;
1:0aad0ca:   private final String comment;
1:0aad0ca: 
1:0aad0ca:   public RequirementImpl(String name, Filter filter, boolean multiple, boolean optional, boolean extend, String comment)
1:0aad0ca:   {
1:0aad0ca:     this.name = name;
1:792f3de:     this.filter = filter.toString();
1:0aad0ca:     this.multiple = multiple;
1:0aad0ca:     this.optional = optional;
1:0aad0ca:     this.extend = extend;
1:0aad0ca:     this.comment = comment;
1:792f3de:     this.consumer = null;
5:0aad0ca:   }
1:0aad0ca: 
1:792f3de:   public RequirementImpl(Consumer consumer) {
1:792f3de:     this.consumer = consumer;
1:792f3de:     this.name = getName();
1:792f3de:     this.filter= getFilter();
1:792f3de:     this.multiple= isMultiple();
1:792f3de:     this.optional= isOptional();
1:792f3de:     this.extend = false;
1:792f3de:     this.comment = getComment();
1:792f3de: 
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca: 
1:0aad0ca: 
1:0aad0ca:   public String getComment()
1:0aad0ca:   {
1:792f3de: 
1:792f3de:     logger.debug(LOG_ENTRY,"getComment" );
1:792f3de:     if (consumer!= null) {
1:792f3de:       String cleanFilter = FilterUtils.removeMandatoryFilterToken(consumer.getAttributeFilter());
1:792f3de:       Map<String, String> atts = ManifestHeaderProcessor.parseFilter(cleanFilter);
1:792f3de:       String comment = "Requires " + consumer.getType().toString() + " with attributes " + atts;
1:792f3de:       logger.debug(LOG_EXIT,"getComment", comment );
1:792f3de:       return comment;
1:792f3de:     } else {
1:792f3de:       logger.debug(LOG_EXIT,"getComment", this.comment );
1:792f3de:       return this.comment;
1:792f3de:     }
1:0aad0ca:   }
1:792f3de: 
1:0aad0ca: 
1:792f3de:   public String getFilter()
1:0aad0ca:   {
1:792f3de:     String result;
1:792f3de:     if (consumer != null) {
1:792f3de:       result = consumer.getAttributeFilter();
1:792f3de:     } else {
1:792f3de:       result = this.filter;
1:792f3de:     }
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String getName()
1:792f3de:   {
1:792f3de: 
1:792f3de:     String result;
1:792f3de:     if (consumer != null) {
1:792f3de:       result = consumer.getType().toString();
1:792f3de:     } else {
1:792f3de:       result = this.name;
1:792f3de:     }
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public boolean isExtend()
1:792f3de:   {
1:792f3de:     return this.extend;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public boolean isMultiple()
1:792f3de:   {
1:792f3de:     boolean result;
1:792f3de:     if (consumer != null ) {
1:792f3de:       result = consumer.isMultiple();
1:792f3de:     } else {
1:792f3de:       result = this.multiple;
1:792f3de:     }
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public boolean isOptional()
1:792f3de:   {
1:792f3de:     boolean result;
1:792f3de:     if (consumer != null) {
1:792f3de:       result = consumer.isOptional();
1:792f3de:     } else {
1:792f3de:       result = this.optional;
1:792f3de:     }
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de:   @SuppressWarnings("unchecked")
1:792f3de: 
1:792f3de:   public boolean isSatisfied(Capability cap)
1:792f3de:   {
1:792f3de:    
1:792f3de:     logger.debug(LOG_ENTRY,"isSatisfied", cap );
1:792f3de:     boolean result = false;
1:792f3de: 
1:792f3de:     String name = getName();
1:792f3de:     if (name.equals(cap.getName())) {
1:792f3de:       String filterToCreate = getFilter();
1:792f3de:       try {
1:792f3de:         Filter f = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(filterToCreate));
1:792f3de:         Hashtable<String, Object> hash = new Hashtable<String, Object>();
1:3c9b85a:         Map<String, String> props = cap.getPropertiesAsMap();
1:792f3de:         if ((props != null) && (!!!props.isEmpty())) {
1:3c9b85a:           for (Map.Entry<String, String> propertyPair : props.entrySet()) {
1:3c9b85a:             hash.put(propertyPair.getKey(), propertyPair.getValue());
1:792f3de:           }
1:792f3de:         }
1:792f3de: 
1:792f3de:         result = f.match(hash);
1:792f3de:       } catch (InvalidSyntaxException e) {
1:792f3de:         logger.error(e.getMessage());
1:792f3de:       }
1:792f3de:     }
1:792f3de:     logger.debug(LOG_EXIT,"isSatisfied", result );
1:792f3de:     return result;
1:0aad0ca:   }
1:0aad0ca: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:3c9b85a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Map<String, String> props = cap.getPropertiesAsMap();
1:           for (Map.Entry<String, String> propertyPair : props.entrySet()) {
1:             hash.put(propertyPair.getKey(), propertyPair.getValue());
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
0: import java.util.Arrays;
1: import java.util.Hashtable;
0: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.Consumer;
1: import org.apache.aries.application.utils.FilterUtils;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.apache.felix.bundlerepository.Capability;
0: import org.apache.felix.bundlerepository.Property;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: 
1:   private final Logger logger = LoggerFactory.getLogger(RequirementImpl.class);
1:   private final Consumer consumer;
1: 
1:   private final String filter;
/////////////////////////////////////////////////////////////////////////
1:     this.filter = filter.toString();
1:     this.consumer = null;
1:   public RequirementImpl(Consumer consumer) {
1:     this.consumer = consumer;
1:     this.name = getName();
1:     this.filter= getFilter();
1:     this.multiple= isMultiple();
1:     this.optional= isOptional();
1:     this.extend = false;
1:     this.comment = getComment();
1: 
1: 
1:     logger.debug(LOG_ENTRY,"getComment" );
1:     if (consumer!= null) {
1:       String cleanFilter = FilterUtils.removeMandatoryFilterToken(consumer.getAttributeFilter());
1:       Map<String, String> atts = ManifestHeaderProcessor.parseFilter(cleanFilter);
1:       String comment = "Requires " + consumer.getType().toString() + " with attributes " + atts;
1:       logger.debug(LOG_EXIT,"getComment", comment );
1:       return comment;
1:     } else {
1:       logger.debug(LOG_EXIT,"getComment", this.comment );
1:       return this.comment;
1:     }
1: 
1:   public String getFilter()
1:     String result;
1:     if (consumer != null) {
1:       result = consumer.getAttributeFilter();
1:     } else {
1:       result = this.filter;
1:     }
1:     return result;
1:   }
1: 
1: 
1:   public String getName()
1:   {
1: 
1:     String result;
1:     if (consumer != null) {
1:       result = consumer.getType().toString();
1:     } else {
1:       result = this.name;
1:     }
1:     return result;
1:   }
1: 
1: 
1:   public boolean isExtend()
1:   {
1:     return this.extend;
1:   }
1: 
1: 
1:   public boolean isMultiple()
1:   {
1:     boolean result;
1:     if (consumer != null ) {
1:       result = consumer.isMultiple();
1:     } else {
1:       result = this.multiple;
1:     }
1:     return result;
1:   }
1: 
1: 
1:   public boolean isOptional()
1:   {
1:     boolean result;
1:     if (consumer != null) {
1:       result = consumer.isOptional();
1:     } else {
1:       result = this.optional;
1:     }
1:     return result;
1:   }
1: 
1:   @SuppressWarnings("unchecked")
1: 
1:   public boolean isSatisfied(Capability cap)
1:   {
1:    
1:     logger.debug(LOG_ENTRY,"isSatisfied", cap );
1:     boolean result = false;
1: 
1:     String name = getName();
1:     if (name.equals(cap.getName())) {
1:       String filterToCreate = getFilter();
1:       try {
1:         Filter f = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(filterToCreate));
1:         Hashtable<String, Object> hash = new Hashtable<String, Object>();
0:         List<Property> props = Arrays.asList(cap.getProperties());
1:         if ((props != null) && (!!!props.isEmpty())) {
0:           for (Property prop : props) {
0:             hash.put(prop.getName(), prop.getValue());
1:           }
1:         }
1: 
1:         result = f.match(hash);
1:       } catch (InvalidSyntaxException e) {
1:         logger.error(e.getMessage());
1:       }
1:     }
1:     logger.debug(LOG_EXIT,"isSatisfied", result );
1:     return result;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:248447e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.felix.bundlerepository.Capability;
0: import org.apache.felix.bundlerepository.Requirement;
/////////////////////////////////////////////////////////////////////////
0:     return filter.match(new MapToDictionary(capability.getPropertiesAsMap()));
commit:e8ec7a5
/////////////////////////////////////////////////////////////////////////
author:David Jencks
-------------------------------------------------------------------------------
commit:0aad0ca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: 
1: package org.apache.aries.application.resolver.obr.impl;
1: 
0: import org.osgi.framework.Filter;
0: import org.osgi.service.obr.Capability;
0: import org.osgi.service.obr.Requirement;
1: 
0: /**
0:  * @version $Rev$ $Date$
1:  */
1: public class RequirementImpl implements Requirement
1: {
1: 
1:   private final String name;
0:   private final Filter filter;
1:   private final boolean multiple;
1:   private final boolean optional;
1:   private final boolean extend;
1:   private final String comment;
1: 
1:   public RequirementImpl(String name, Filter filter, boolean multiple, boolean optional, boolean extend, String comment)
1:   {
1:     this.name = name;
0:     this.filter = filter;
1:     this.multiple = multiple;
1:     this.optional = optional;
1:     this.extend = extend;
1:     this.comment = comment;
1:   }
1: 
0:   public String getName()
1:   {
0:     return name;
1:   }
1: 
0:   public String getFilter()
1:   {
0:     return filter.toString();
1:   }
1: 
0:   public boolean isMultiple()
1:   {
0:     return multiple;
1:   }
1: 
0:   public boolean isOptional()
1:   {
0:     return optional;
1:   }
1: 
0:   public boolean isExtend()
1:   {
0:     return extend;
1:   }
1: 
1:   public String getComment()
1:   {
0:     return comment;
1:   }
1: 
0:   public boolean isSatisfied(Capability capability)
1:   {
0:     return filter.match(new MapToDictionary(capability.getProperties()));
1:   }
1: }
============================================================================