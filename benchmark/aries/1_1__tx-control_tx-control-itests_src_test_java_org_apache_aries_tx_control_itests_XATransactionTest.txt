1:2299957: /*
1:2299957:  * Licensed to the Apache Software Foundation (ASF) under one
1:2299957:  * or more contributor license agreements.  See the NOTICE file
1:2299957:  * distributed with this work for additional information
1:2299957:  * regarding copyright ownership.  The ASF licenses this file
1:2299957:  * to you under the Apache License, Version 2.0 (the
1:2299957:  * "License"); you may not use this file except in compliance
1:2299957:  * with the License.  You may obtain a copy of the License at
1:2299957:  *
1:2299957:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2299957:  *
1:2299957:  * Unless required by applicable law or agreed to in writing,
1:2299957:  * software distributed under the License is distributed on an
1:2299957:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2299957:  * KIND, either express or implied.  See the License for the
1:2299957:  * specific language governing permissions and limitations
1:2299957:  * under the License.
1:2299957:  */
1:2299957: package org.apache.aries.tx.control.itests;
5:2299957: 
1:2299957: import static org.junit.Assert.assertEquals;
1:2299957: import static org.junit.Assert.fail;
1:2299957: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:2299957: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:2299957: import static org.ops4j.pax.exam.CoreOptions.options;
1:2299957: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:2299957: import static org.ops4j.pax.exam.CoreOptions.when;
1:2299957: 
1:2299957: import java.io.File;
1:2299957: import java.sql.Connection;
1:2299957: import java.sql.ResultSet;
1:2299957: import java.sql.SQLException;
1:2299957: import java.sql.Statement;
1:2299957: import java.util.Properties;
1:2299957: 
1:2299957: import javax.inject.Inject;
1:2299957: import javax.transaction.xa.XAException;
1:2299957: import javax.transaction.xa.XAResource;
1:2299957: import javax.transaction.xa.Xid;
1:2299957: 
1:2299957: import org.h2.tools.Server;
1:2299957: import org.junit.After;
1:2299957: import org.junit.Before;
1:2299957: import org.junit.Test;
1:2299957: import org.junit.runner.RunWith;
1:2299957: import org.ops4j.pax.exam.Configuration;
1:2299957: import org.ops4j.pax.exam.CoreOptions;
1:2299957: import org.ops4j.pax.exam.Option;
1:2299957: import org.ops4j.pax.exam.junit.PaxExam;
1:2299957: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:2299957: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:2299957: import org.ops4j.pax.exam.util.Filter;
1:2299957: import org.osgi.service.jdbc.DataSourceFactory;
1:2299957: import org.osgi.service.transaction.control.TransactionControl;
1:2299957: import org.osgi.service.transaction.control.TransactionRolledBackException;
1:2299957: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1:2299957: 
1:2299957: @RunWith(PaxExam.class)
1:2299957: @ExamReactorStrategy(PerClass.class)
1:f6f7de7: public class XATransactionTest {
1:2299957: 
1:2299957: 	@Inject
1:2299957: 	@Filter("(osgi.xa.enabled=true)")
1:2299957: 	private TransactionControl txControl;
1:2299957: 	
1:2299957: 	@Inject
1:2299957: 	@Filter("(osgi.xa.enabled=true)")
1:2299957: 	private JDBCConnectionProviderFactory factory;
1:f6f7de7: 
1:f6f7de7: 	@Inject
1:f6f7de7: 	@Filter("(osgi.jdbc.driver.class=org.h2.Driver)")
1:f6f7de7: 	private DataSourceFactory dsf;
1:2299957: 	
1:2299957: 	protected Connection connection1;
1:2299957: 	protected Connection connection2;
1:2299957: 
1:2299957: 	private Server server1;
1:2299957: 	private Server server2;
1:2299957: 
1:2299957: 	@Before
1:2299957: 	public void setUp() throws Exception {
1:2299957: 		Properties jdbc = new Properties();
1:2299957: 		
1:2299957: 		server1 = Server.createTcpServer("-tcpPort", "0");
1:2299957: 		server1.start();
1:2299957: 
1:2299957: 		server2 = Server.createTcpServer("-tcpPort", "0");
1:2299957: 		server2.start();
1:2299957: 			
1:2299957: 		String jdbcUrl1 = "jdbc:h2:tcp://127.0.0.1:" + server1.getPort() + "/" + getRemoteDBPath("db1");
1:2299957: 		String jdbcUrl2 = "jdbc:h2:tcp://127.0.0.1:" + server2.getPort() + "/" + getRemoteDBPath("db2");
1:2299957: 		
1:2299957: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, jdbcUrl1);
1:f6f7de7: 		connection1 = factory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1:2299957: 		
1:2299957: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, jdbcUrl2);
1:f6f7de7: 		connection2 = factory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1:2299957: 		
1:2299957: 		txControl.required(() -> {
1:2299957: 				Statement s = connection1.createStatement();
1:2299957: 				try {
1:2299957: 					s.execute("DROP TABLE TEST_TABLE");
1:2299957: 				} catch (SQLException sqle) {}
1:2299957: 				s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
1:2299957: 				return null;
1:2299957: 			});
1:2299957: 		txControl.required(() -> {
1:2299957: 				Statement s = connection2.createStatement();
1:2299957: 				try {
1:2299957: 					s.execute("DROP TABLE TEST_TABLE");
1:2299957: 				} catch (SQLException sqle) {}
1:2299957: 				s.execute("CREATE TABLE TEST_TABLE ( idValue varchar(16) PRIMARY KEY )");
1:2299957: 				return null;
1:2299957: 			});
2:2299957: 	}
1:2299957: 
1:2299957: 	@After
1:2299957: 	public void tearDown() {
1:2299957: 
1:2299957: 		try {
1:2299957: 			txControl.required(() -> connection1.createStatement()
1:2299957: 					.execute("DROP TABLE TEST_TABLE"));
1:2299957: 		} catch (Exception e) {}
1:2299957: 		try {
1:2299957: 			txControl.required(() -> connection2.createStatement()
1:2299957: 					.execute("DROP TABLE TEST_TABLE"));
1:2299957: 		} catch (Exception e) {}
1:2299957: 		
1:2299957: 		
1:2299957: 		if(server1 != null) {
1:2299957: 			server1.stop();
1:2299957: 		}
1:2299957: 
1:2299957: 		if(server2 != null) {
1:2299957: 			server2.stop();
1:2299957: 		}
1:2299957: 
1:2299957: 		connection1 = null;
1:2299957: 		connection2 = null;
1:2299957: 	}
1:2299957: 
1:2299957: 	@Test
1:2299957: 	public void testTwoPhaseCommit() {
1:2299957: 		txControl.required(() -> {
1:2299957: 			connection1.createStatement()
1:2299957: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:2299957: 			
1:2299957: 			connection2.createStatement()
1:2299957: 				.execute("Insert into TEST_TABLE values ( 'Hello 1' )");
1:2299957: 			
1:2299957: 			return null;
1:2299957: 		});
1:2299957: 		
1:2299957: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:2299957: 			ResultSet rs = connection1.createStatement()
1:2299957: 					.executeQuery("Select * from TEST_TABLE");
1:2299957: 			rs.next();
1:2299957: 			return rs.getString(1);
1:2299957: 		}));
1:2299957: 
1:2299957: 		assertEquals("Hello 1", txControl.notSupported(() -> {
1:2299957: 			ResultSet rs = connection2.createStatement()
1:2299957: 					.executeQuery("Select * from TEST_TABLE");
1:2299957: 			rs.next();
1:2299957: 			return rs.getString(1);
1:2299957: 		}));
1:2299957: 	}
1:2299957: 
1:2299957: 	@Test
1:2299957: 	public void testTwoPhaseRollback() {
1:2299957: 		try {
1:2299957: 			txControl.required(() -> {
1:2299957: 				connection1.createStatement()
1:2299957: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:2299957: 				
1:2299957: 				connection2.createStatement()
1:2299957: 					.execute("Insert into TEST_TABLE values ( 'Hello 1' )");
1:2299957: 				
1:2299957: 				txControl.requiresNew(() -> {
1:2299957: 						connection2.createStatement()
1:2299957: 							.execute("Insert into TEST_TABLE values ( 'Hello 2' )");
1:2299957: 						return null;
1:2299957: 					});
1:2299957: 				
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(new PoisonResource(), null);
1:2299957: 				
1:2299957: 				return null;
1:2299957: 			});
1:2299957: 			fail("Should roll back");
1:2299957: 		} catch (TransactionRolledBackException trbe) {
1:2299957: 		}
1:2299957: 		
1:2299957: 		assertEquals(0, (int) txControl.notSupported(() -> {
1:2299957: 			ResultSet rs = connection1.createStatement()
1:2299957: 					.executeQuery("Select count(*) from TEST_TABLE");
1:2299957: 			rs.next();
1:2299957: 			return rs.getInt(1);
1:2299957: 		}));
1:2299957: 		
1:2299957: 		
1:2299957: 		assertEquals("1: Hello 2", txControl.notSupported(() -> {
1:2299957: 			Statement s = connection2.createStatement();
1:2299957: 			
1:2299957: 			ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1:2299957: 			rs.next();
1:2299957: 			int count = rs.getInt(1);
1:2299957: 			
1:2299957: 			rs = s.executeQuery("Select idValue from TEST_TABLE ORDER BY idValue");
1:2299957: 			
1:2299957: 			rs.next();
1:2299957: 			return "" + count + ": " + rs.getString(1);
1:2299957: 		}));
1:2299957: 	}
1:2299957: 	
1:2299957: 	
1:2299957: 	@Configuration
1:2299957: 	public Option[] xaServerH2XATxConfiguration() {
1:2299957: 		String localRepo = System.getProperty("maven.repo.local");
1:2299957: 		if (localRepo == null) {
1:2299957: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:2299957: 		}
1:2299957: 		
1:2299957: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:2299957: 				when(localRepo != null)
1:2299957: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:2299957: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject(),
1:2299957: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1:2299957: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-xa").versionAsInProject(),
1:2299957: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:2299957: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:2299957: 				
1:2299957: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:2299957: 				);
1:2299957: 	}
1:2299957: 
1:2299957: 	private String getRemoteDBPath(String name) {
1:2299957: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1:2299957: 		
1:2299957: 		String resourcePath = getClass().getResource(getClass().getSimpleName() + ".class").getPath();
1:2299957: 		
1:2299957: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1:2299957: 		
1:2299957: 		String dbPath = new File(testClassesDir.getParentFile(), "testdb/" + name).getAbsolutePath();
1:2299957: 		return dbPath;
1:2299957: 	}
1:2299957: 	
1:2299957: 	private static class PoisonResource implements XAResource {
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public void commit(Xid arg0, boolean arg1) throws XAException {
1:2299957: 			throw new XAException(XAException.XA_RBOTHER);
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public void end(Xid arg0, int arg1) throws XAException {
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public void forget(Xid arg0) throws XAException {
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public int getTransactionTimeout() throws XAException {
1:2299957: 			return 30;
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public boolean isSameRM(XAResource arg0) throws XAException {
1:2299957: 			return false;
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public int prepare(Xid arg0) throws XAException {
1:2299957: 			throw new XAException(XAException.XA_RBOTHER);
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public Xid[] recover(int arg0) throws XAException {
1:2299957: 			return new Xid[0];
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public void rollback(Xid arg0) throws XAException {
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public boolean setTransactionTimeout(int arg0) throws XAException {
1:2299957: 			return false;
1:2299957: 		}
1:2299957: 
1:2299957: 		@Override
1:2299957: 		public void start(Xid arg0, int arg1) throws XAException {
1:2299957: 		}
1:2299957: 	}
1:2299957: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 				txControl.getCurrentContext().registerXAResource(new PoisonResource(), null);
commit:f6f7de7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class XATransactionTest {
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Inject
1: 	@Filter("(osgi.jdbc.driver.class=org.h2.Driver)")
1: 	private DataSourceFactory dsf;
/////////////////////////////////////////////////////////////////////////
1: 		connection1 = factory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1: 		connection2 = factory.getProviderFor(dsf, jdbc, null).getResource(txControl);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f87416c
/////////////////////////////////////////////////////////////////////////
commit:2299957
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
1: import java.io.File;
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.Properties;
1: 
1: import javax.inject.Inject;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.h2.tools.Server;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.ops4j.pax.exam.util.Filter;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionRolledBackException;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
0: public class XATransactionTest extends AbstractIntegrationTest {
1: 
1: 	@Inject
1: 	@Filter("(osgi.xa.enabled=true)")
1: 	private TransactionControl txControl;
1: 	
1: 	@Inject
1: 	@Filter("(osgi.xa.enabled=true)")
1: 	private JDBCConnectionProviderFactory factory;
1: 	
1: 	protected Connection connection1;
1: 	protected Connection connection2;
1: 
1: 	private Server server1;
1: 	private Server server2;
1: 
1: 	@Before
1: 	public void setUp() throws Exception {
1: 		Properties jdbc = new Properties();
1: 		
1: 		server1 = Server.createTcpServer("-tcpPort", "0");
1: 		server1.start();
1: 
1: 		server2 = Server.createTcpServer("-tcpPort", "0");
1: 		server2.start();
1: 			
1: 		String jdbcUrl1 = "jdbc:h2:tcp://127.0.0.1:" + server1.getPort() + "/" + getRemoteDBPath("db1");
1: 		String jdbcUrl2 = "jdbc:h2:tcp://127.0.0.1:" + server2.getPort() + "/" + getRemoteDBPath("db2");
1: 		
1: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, jdbcUrl1);
0: 		connection1 = programaticConnection(jdbc);
1: 		
1: 		jdbc.setProperty(DataSourceFactory.JDBC_URL, jdbcUrl2);
0: 		connection2 = programaticConnection(jdbc);
1: 		
1: 		txControl.required(() -> {
1: 				Statement s = connection1.createStatement();
1: 				try {
1: 					s.execute("DROP TABLE TEST_TABLE");
1: 				} catch (SQLException sqle) {}
1: 				s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
1: 				return null;
1: 			});
1: 		txControl.required(() -> {
1: 				Statement s = connection2.createStatement();
1: 				try {
1: 					s.execute("DROP TABLE TEST_TABLE");
1: 				} catch (SQLException sqle) {}
1: 				s.execute("CREATE TABLE TEST_TABLE ( idValue varchar(16) PRIMARY KEY )");
1: 				return null;
1: 			});
1: 	}
1: 
0: 	private Connection programaticConnection(Properties jdbc) {
1: 		
0: 		JDBCConnectionProviderFactory resourceProviderFactory = context()
0: 				.getService(JDBCConnectionProviderFactory.class, 5000);
1: 		
0: 		DataSourceFactory dsf = context().getService(DataSourceFactory.class, 5000);
1: 		
0: 		return resourceProviderFactory.getProviderFor(dsf, jdbc, null).getResource(txControl);
1: 	}
1: 
1: 	@After
1: 	public void tearDown() {
1: 
1: 		try {
1: 			txControl.required(() -> connection1.createStatement()
1: 					.execute("DROP TABLE TEST_TABLE"));
1: 		} catch (Exception e) {}
1: 		try {
1: 			txControl.required(() -> connection2.createStatement()
1: 					.execute("DROP TABLE TEST_TABLE"));
1: 		} catch (Exception e) {}
1: 		
1: 		
1: 		if(server1 != null) {
1: 			server1.stop();
1: 		}
1: 
1: 		if(server2 != null) {
1: 			server2.stop();
1: 		}
1: 
1: 		connection1 = null;
1: 		connection2 = null;
1: 	}
1: 
1: 	@Test
1: 	public void testTwoPhaseCommit() {
1: 		txControl.required(() -> {
1: 			connection1.createStatement()
1: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			
1: 			connection2.createStatement()
1: 				.execute("Insert into TEST_TABLE values ( 'Hello 1' )");
1: 			
1: 			return null;
1: 		});
1: 		
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1: 			ResultSet rs = connection1.createStatement()
1: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getString(1);
1: 		}));
1: 
1: 		assertEquals("Hello 1", txControl.notSupported(() -> {
1: 			ResultSet rs = connection2.createStatement()
1: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getString(1);
1: 		}));
1: 	}
1: 
1: 	@Test
1: 	public void testTwoPhaseRollback() {
1: 		try {
1: 			txControl.required(() -> {
1: 				connection1.createStatement()
1: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 				
1: 				connection2.createStatement()
1: 					.execute("Insert into TEST_TABLE values ( 'Hello 1' )");
1: 				
1: 				txControl.requiresNew(() -> {
1: 						connection2.createStatement()
1: 							.execute("Insert into TEST_TABLE values ( 'Hello 2' )");
1: 						return null;
1: 					});
1: 				
0: 				txControl.getCurrentContext().registerXAResource(new PoisonResource());
1: 				
1: 				return null;
1: 			});
1: 			fail("Should roll back");
1: 		} catch (TransactionRolledBackException trbe) {
1: 		}
1: 		
1: 		assertEquals(0, (int) txControl.notSupported(() -> {
1: 			ResultSet rs = connection1.createStatement()
1: 					.executeQuery("Select count(*) from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getInt(1);
1: 		}));
1: 		
1: 		
1: 		assertEquals("1: Hello 2", txControl.notSupported(() -> {
1: 			Statement s = connection2.createStatement();
1: 			
1: 			ResultSet rs = s.executeQuery("Select count(*) from TEST_TABLE");
1: 			rs.next();
1: 			int count = rs.getInt(1);
1: 			
1: 			rs = s.executeQuery("Select idValue from TEST_TABLE ORDER BY idValue");
1: 			
1: 			rs.next();
1: 			return "" + count + ": " + rs.getString(1);
1: 		}));
1: 	}
1: 	
1: 	
1: 	@Configuration
1: 	public Option[] xaServerH2XATxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
0: 				mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject(),
1: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jdbc-xa").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 
1: 	private String getRemoteDBPath(String name) {
1: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1: 		
1: 		String resourcePath = getClass().getResource(getClass().getSimpleName() + ".class").getPath();
1: 		
1: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1: 		
1: 		String dbPath = new File(testClassesDir.getParentFile(), "testdb/" + name).getAbsolutePath();
1: 		return dbPath;
1: 	}
1: 	
1: 	private static class PoisonResource implements XAResource {
1: 
1: 		@Override
1: 		public void commit(Xid arg0, boolean arg1) throws XAException {
1: 			throw new XAException(XAException.XA_RBOTHER);
1: 		}
1: 
1: 		@Override
1: 		public void end(Xid arg0, int arg1) throws XAException {
1: 		}
1: 
1: 		@Override
1: 		public void forget(Xid arg0) throws XAException {
1: 		}
1: 
1: 		@Override
1: 		public int getTransactionTimeout() throws XAException {
1: 			return 30;
1: 		}
1: 
1: 		@Override
1: 		public boolean isSameRM(XAResource arg0) throws XAException {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		public int prepare(Xid arg0) throws XAException {
1: 			throw new XAException(XAException.XA_RBOTHER);
1: 		}
1: 
1: 		@Override
1: 		public Xid[] recover(int arg0) throws XAException {
1: 			return new Xid[0];
1: 		}
1: 
1: 		@Override
1: 		public void rollback(Xid arg0) throws XAException {
1: 		}
1: 
1: 		@Override
1: 		public boolean setTransactionTimeout(int arg0) throws XAException {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		public void start(Xid arg0, int arg1) throws XAException {
1: 		}
1: 	}
1: }
============================================================================