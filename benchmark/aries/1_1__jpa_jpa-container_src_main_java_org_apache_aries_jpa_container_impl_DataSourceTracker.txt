1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.impl;
1:2cfdf52: 
1:2cfdf52: import static javax.persistence.spi.PersistenceUnitTransactionType.JTA;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.spi.PersistenceProvider;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: import javax.sql.DataSource;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.Filter;
1:2cfdf52: import org.osgi.framework.FrameworkUtil;
1:2cfdf52: import org.osgi.framework.InvalidSyntaxException;
1:2cfdf52: import org.osgi.framework.ServiceReference;
1:2cfdf52: import org.osgi.util.tracker.ServiceTracker;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: public class DataSourceTracker extends ServiceTracker<DataSource, ManagedEMF>{
1:2cfdf52:     private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceTracker.class);
1:2cfdf52: 
1:2cfdf52:     private PersistenceProvider provider;
1:2cfdf52:     private PersistenceUnit punit;
1:2cfdf52: 
1:2cfdf52:     static final String DS_PREFIX = "osgi:service/javax.sql.DataSource";
1:2cfdf52: 
1:2cfdf52:     public DataSourceTracker(BundleContext context, PersistenceProvider provider, PersistenceUnit punit) {
1:2cfdf52:         super(context, createFilter(context, punit), null);
1:2cfdf52:         this.provider = provider;
1:2cfdf52:         this.punit = punit;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     static Filter createFilter(BundleContext context, PersistenceUnit punit) {
1:2cfdf52:         String dsName = getDsName(punit);
1:2cfdf52:         if (dsName == null) {
1:2cfdf52:             throw new IllegalArgumentException("No DataSource supplied in persistence.xml");
1:2cfdf52:         }
1:2cfdf52:         String subFilter = getSubFilter(dsName);
1:2cfdf52:         String filter = String.format("(&(objectClass=%s)%s)",
1:2cfdf52:                                       DataSource.class.getName(),
1:2cfdf52:                                       subFilter);
1:2cfdf52:         LOGGER.info("Tracking DataSource for punit " + punit.getPersistenceUnitName() + " with filter " + filter);
1:2cfdf52:         try {
1:2cfdf52:             return context.createFilter(filter);
1:2cfdf52:         } catch (InvalidSyntaxException e) {
1:2cfdf52:             throw new IllegalArgumentException(e);
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private static String getSubFilter(String dsName) {
1:2cfdf52:         if (dsName.startsWith(DS_PREFIX)) {
1:2cfdf52:             return (dsName.length() > DS_PREFIX.length() +1) 
1:2cfdf52:                 ? dsName.substring(DS_PREFIX.length()+1) 
1:2cfdf52:                 : "(osgi.jndi.service.name=*)"; 
1:2cfdf52:         } else {
1:2cfdf52:             return "(osgi.jndi.service.name=" + dsName + ")";
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private static String getDsName(PersistenceUnit punit) {
1:2cfdf52:         return punit.getTransactionType() == JTA ? punit.getJtaDataSourceName() : punit.getNonJtaDataSourceName();
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public ManagedEMF addingService(ServiceReference<DataSource> reference) {
1:2cfdf52:         LOGGER.info("Found DataSource for " + punit.getPersistenceUnitName() + " " + getDsName(punit));
1:2cfdf52:         DataSource ds = context.getService(reference);
1:2cfdf52:         if (punit.getTransactionType() == PersistenceUnitTransactionType.JTA) {
1:2cfdf52:             punit.setJtaDataSource(ds);
1:2cfdf52:         } else {
1:2cfdf52:             punit.setNonJtaDataSource(ds);
1:2cfdf52:         }
1:2cfdf52:         BundleContext containerContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
1:2cfdf52:         return new ManagedEMF(containerContext, punit.getBundle(), provider, punit);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void removedService(ServiceReference<DataSource> reference, ManagedEMF managedEMF) {
1:2cfdf52:         LOGGER.info("Lost DataSource for " + punit.getPersistenceUnitName() + " " + getDsName(punit));
1:2cfdf52:         managedEMF.close();
1:2cfdf52:         super.removedService(reference, managedEMF);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.impl;
1: 
1: import static javax.persistence.spi.PersistenceUnitTransactionType.JTA;
1: 
1: import javax.persistence.spi.PersistenceProvider;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: import javax.sql.DataSource;
1: 
1: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DataSourceTracker extends ServiceTracker<DataSource, ManagedEMF>{
1:     private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceTracker.class);
1: 
1:     private PersistenceProvider provider;
1:     private PersistenceUnit punit;
1: 
1:     static final String DS_PREFIX = "osgi:service/javax.sql.DataSource";
1: 
1:     public DataSourceTracker(BundleContext context, PersistenceProvider provider, PersistenceUnit punit) {
1:         super(context, createFilter(context, punit), null);
1:         this.provider = provider;
1:         this.punit = punit;
1:     }
1: 
1:     static Filter createFilter(BundleContext context, PersistenceUnit punit) {
1:         String dsName = getDsName(punit);
1:         if (dsName == null) {
1:             throw new IllegalArgumentException("No DataSource supplied in persistence.xml");
1:         }
1:         String subFilter = getSubFilter(dsName);
1:         String filter = String.format("(&(objectClass=%s)%s)",
1:                                       DataSource.class.getName(),
1:                                       subFilter);
1:         LOGGER.info("Tracking DataSource for punit " + punit.getPersistenceUnitName() + " with filter " + filter);
1:         try {
1:             return context.createFilter(filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IllegalArgumentException(e);
1:         }
1:     }
1: 
1:     private static String getSubFilter(String dsName) {
1:         if (dsName.startsWith(DS_PREFIX)) {
1:             return (dsName.length() > DS_PREFIX.length() +1) 
1:                 ? dsName.substring(DS_PREFIX.length()+1) 
1:                 : "(osgi.jndi.service.name=*)"; 
1:         } else {
1:             return "(osgi.jndi.service.name=" + dsName + ")";
1:         }
1:     }
1: 
1:     private static String getDsName(PersistenceUnit punit) {
1:         return punit.getTransactionType() == JTA ? punit.getJtaDataSourceName() : punit.getNonJtaDataSourceName();
1:     }
1: 
1:     @Override
1:     public ManagedEMF addingService(ServiceReference<DataSource> reference) {
1:         LOGGER.info("Found DataSource for " + punit.getPersistenceUnitName() + " " + getDsName(punit));
1:         DataSource ds = context.getService(reference);
1:         if (punit.getTransactionType() == PersistenceUnitTransactionType.JTA) {
1:             punit.setJtaDataSource(ds);
1:         } else {
1:             punit.setNonJtaDataSource(ds);
1:         }
1:         BundleContext containerContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
1:         return new ManagedEMF(containerContext, punit.getBundle(), provider, punit);
1:     }
1: 
1: 
1:     @Override
1:     public void removedService(ServiceReference<DataSource> reference, ManagedEMF managedEMF) {
1:         LOGGER.info("Lost DataSource for " + punit.getPersistenceUnitName() + " " + getDsName(punit));
1:         managedEMF.close();
1:         super.removedService(reference, managedEMF);
1:     }
1: 
1: }
============================================================================