1:8151f8c: /*
1:8151f8c:  * Licensed to the Apache Software Foundation (ASF) under one
1:8151f8c:  * or more contributor license agreements.  See the NOTICE file
1:8151f8c:  * distributed with this work for additional information
1:8151f8c:  * regarding copyright ownership.  The ASF licenses this file
1:8151f8c:  * to you under the Apache License, Version 2.0 (the
1:8151f8c:  * "License"); you may not use this file except in compliance
1:8151f8c:  * with the License.  You may obtain a copy of the License at
1:8151f8c:  *
1:8151f8c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8151f8c:  *
1:8151f8c:  * Unless required by applicable law or agreed to in writing,
1:8151f8c:  * software distributed under the License is distributed on an
1:8151f8c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8151f8c:  * KIND, either express or implied.  See the License for the
1:8151f8c:  * specific language governing permissions and limitations
1:8151f8c:  * under the License.
1:8151f8c:  */
1:8151f8c: package org.apache.aries.application.runtime.itests.util;
4:8151f8c: 
1:8151f8c: import java.io.File;
1:8151f8c: import java.io.FileOutputStream;
1:7a355b2: import java.lang.reflect.InvocationHandler;
1:8151f8c: import java.lang.reflect.Method;
1:7a355b2: import java.lang.reflect.Proxy;
1:8151f8c: import java.net.MalformedURLException;
1:7a355b2: import java.util.ArrayList;
1:8151f8c: import java.util.Arrays;
1:8151f8c: import java.util.Collections;
1:8151f8c: import java.util.Hashtable;
1:8151f8c: import java.util.Set;
1:8151f8c: import java.util.jar.Attributes;
1:8151f8c: 
1:8151f8c: import org.apache.aries.application.Content;
1:8151f8c: import org.apache.aries.application.DeploymentContent;
1:8151f8c: import org.apache.aries.application.management.AriesApplication;
1:666dd1b: import org.apache.aries.application.management.spi.framework.BundleFramework;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepository;
1:89f804e: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1:8151f8c: import org.apache.aries.application.modelling.ModelledResource;
1:58f55bd: import org.apache.aries.application.modelling.ModellingManager;
1:8151f8c: import org.apache.aries.isolated.sample.HelloWorld;
1:8151f8c: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:8151f8c: import org.osgi.framework.Bundle;
1:8151f8c: import org.osgi.framework.BundleContext;
1:8151f8c: import org.osgi.framework.BundleException;
1:8151f8c: import org.osgi.framework.Constants;
1:8151f8c: import org.osgi.framework.Filter;
1:8151f8c: import org.osgi.framework.FrameworkUtil;
1:8151f8c: import org.osgi.framework.Version;
1:8151f8c: import org.osgi.service.framework.CompositeBundle;
1:8151f8c: import org.osgi.util.tracker.ServiceTracker;
1:8151f8c: 
1:8151f8c: public class IsolationTestUtils {
1:8151f8c:   public static final long DEFAULT_TIMEOUT = 10000;
1:8151f8c:   
1:8151f8c:   /**
1:8151f8c:    * Retrieve the bundle context for an isolated application framework
1:8151f8c:    */
1:8151f8c:   public static BundleContext findIsolatedAppBundleContext(BundleContext runtimeCtx, String appName)
1:8151f8c:   {
1:8151f8c:     for (Bundle sharedBundle : runtimeCtx.getBundles())
1:8151f8c:     {
1:8151f8c:       if (sharedBundle.getSymbolicName().equals("shared.bundle.framework"))
1:8151f8c:       {
1:8151f8c:         BundleContext sharedContext = ((CompositeBundle)sharedBundle).getCompositeFramework().getBundleContext();
1:8151f8c:         for (Bundle appBundle : sharedContext.getBundles())
1:8151f8c:         {
1:8151f8c:           if (appBundle.getSymbolicName().equals(appName))
1:8151f8c:           {
1:8151f8c:             return ((CompositeBundle)appBundle).getCompositeFramework().getBundleContext();
5:8151f8c:           }
1:8151f8c:         }
1:8151f8c:         break;
1:8151f8c:       }
1:8151f8c:     }    
1:8151f8c:     
2:8151f8c:     return null;
1:8151f8c:   }
1:8151f8c:   
1:8151f8c:   /**
1:8151f8c:    * Set up the necessary resources for installing version 2 of the org.apache.aries.isolated.sample sample bundle, 
1:8151f8c:    * which returns the message "hello brave new world" rather than "hello world"
1:8151f8c:    * 
1:8151f8c:    * This means setting up a global bundle repository as well as a global OBR repository
1:8151f8c:    */
1:58f55bd:   public static void prepareSampleBundleV2(BundleContext runtimeCtx, 
1:58f55bd:       RepositoryGenerator repoGen, RepositoryAdmin repoAdmin, 
1:58f55bd:       ModellingManager modellingManager)
1:8151f8c:     throws Exception
1:8151f8c:   {
1:8151f8c:     BundleRepository repo = new BundleRepository() {
1:8151f8c:       public int getCost() {
1:8151f8c:         return 1;
1:8151f8c:       }
1:8151f8c: 
1:8151f8c:       public BundleSuggestion suggestBundleToUse(DeploymentContent content) {
1:8151f8c:         if (content.getContentName().equals("org.apache.aries.isolated.sample")) {
1:8151f8c:           return new BundleSuggestion() {
1:8151f8c: 
1:666dd1b:             public Bundle install(BundleFramework framework, AriesApplication app) throws BundleException {
1:8151f8c:               File f = new File("sample_2.0.0.jar");
2:8151f8c:               try {
1:666dd1b:                 return framework.getIsolatedBundleContext().installBundle(f.toURL().toString());                
1:8151f8c:               } catch (MalformedURLException mue) {
1:8151f8c:                 throw new RuntimeException(mue);
1:8151f8c:               }
1:8151f8c:             }
1:8151f8c: 
1:8151f8c:             public Version getVersion() {
1:8151f8c:               return new Version("2.0.0");
1:8151f8c:             }
1:8151f8c: 
1:8151f8c:             public Set<Content> getImportPackage() {
1:8151f8c:               return Collections.emptySet();
1:8151f8c:             }
1:8151f8c: 
1:8151f8c:             public Set<Content> getExportPackage() {
1:8151f8c:               return Collections.emptySet();
1:8151f8c:             }
1:8151f8c: 
1:8151f8c:             public int getCost() {
1:8151f8c:               return 1;
1:8151f8c:             }
2:8151f8c:           };
2:8151f8c:         } else {
1:8151f8c:           return null;
1:8151f8c:         }
1:8151f8c:       }        
1:8151f8c:     };
1:8151f8c:     
1:8151f8c:     Hashtable<String, String> props = new Hashtable<String,String>();
1:8151f8c:     props.put(BundleRepository.REPOSITORY_SCOPE, BundleRepository.GLOBAL_SCOPE);
1:8151f8c:     
1:8151f8c:     runtimeCtx.registerService(BundleRepository.class.getName(), repo, props);
1:8151f8c: 
1:8151f8c:     Attributes attrs = new Attributes();
1:8151f8c:     attrs.putValue("Bundle-ManifestVersion", "2");
1:8151f8c:     attrs.putValue("Bundle-Version", "2.0.0");
1:8151f8c:     attrs.putValue("Bundle-SymbolicName", "org.apache.aries.isolated.sample");
1:8151f8c:     attrs.putValue("Manifest-Version", "1");
1:8151f8c: 
1:58f55bd:     ModelledResource res = modellingManager.getModelledResource(
1:8151f8c:         new File("sample_2.0.0.jar").toURI().toString(), 
1:8151f8c:         attrs,
1:8151f8c:         Collections.EMPTY_LIST, Collections.EMPTY_LIST);
1:8151f8c: 
1:8151f8c:     repoGen.generateRepository("repo.xml", Arrays.asList(res), new FileOutputStream("repo.xml"));
1:8151f8c:     repoAdmin.addRepository(new File("repo.xml").toURI().toString());
1:8151f8c:   }
1:8151f8c:   
1:7a355b2:   public static HelloWorld findHelloWorldService(BundleContext ctx) throws Exception
1:7a355b2:   {
1:7a355b2: 	  if (ctx != null)
1:7a355b2: 	  {
1:7a355b2: 	      // Dive into the context and pull out the composite bundle for the app
1:7a355b2: 	      Filter osgiFilter = FrameworkUtil.createFilter("(" + Constants.OBJECTCLASS + "=" + HelloWorld.class.getName() + ")");
1:7a355b2: 	      ServiceTracker tracker = new ServiceTracker(ctx, 
1:7a355b2: 	          osgiFilter,
1:7a355b2: 	          null);
1:7a355b2: 	      
1:7a355b2: 	      tracker.open();
1:7a355b2: 	      final Object hw = tracker.waitForService(DEFAULT_TIMEOUT);
1:7a355b2: 	      tracker.close();
1:7a355b2: 	
1:7a355b2: 	      if (hw != null) {
1:7a355b2: 	        // proxy because the class space between the sample app and the test bundle is not consistent
1:7a355b2: 	        return new HelloWorld() {
1:7a355b2: 	          public String getMessage() {
1:7a355b2: 	            try {
1:7a355b2: 	              Method m = hw.getClass().getMethod("getMessage");
1:7a355b2: 	              return (String) m.invoke(hw);
1:7a355b2: 	            } catch (Exception e) {
1:7a355b2: 	              throw new RuntimeException(e);
1:7a355b2: 	            }
1:7a355b2: 	          }
1:7a355b2: 	        };
1:7a355b2: 	      } else {
1:7a355b2: 	        return null;
1:7a355b2: 	      }	 
1:7a355b2: 	  }
1:7a355b2: 	  else
1:7a355b2: 	  {
1:7a355b2: 		  return null;
1:7a355b2: 	  }
1:7a355b2:   }
1:7a355b2:   
1:8151f8c:   /**
1:8151f8c:    * Find the {@link HelloWorld} service for the isolated app
1:8151f8c:    * @return the service object, suitably proxied so that it can be actually used, or null if the service is not present
1:8151f8c:    * @throws IllegalStateException if the isolated app is not installed
1:8151f8c:    */
1:8151f8c:   public static HelloWorld findHelloWorldService(BundleContext runtimeCtx, String appName) throws Exception
1:8151f8c:   {
1:8151f8c:     BundleContext appContext = IsolationTestUtils.findIsolatedAppBundleContext(runtimeCtx, appName);
1:8151f8c:     
1:8151f8c:     if (appContext != null) {  
1:7a355b2:     	return findHelloWorldService(appContext);
1:8151f8c:     } else {
1:8151f8c:       throw new IllegalStateException("Expected to find isolated app ctx, but didn't");
1:7a355b2:     }
1:8151f8c:   }
1:8151f8c: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7a355b2
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Proxy;
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:   public static HelloWorld findHelloWorldService(BundleContext ctx) throws Exception
1:   {
1: 	  if (ctx != null)
1: 	  {
1: 	      // Dive into the context and pull out the composite bundle for the app
1: 	      Filter osgiFilter = FrameworkUtil.createFilter("(" + Constants.OBJECTCLASS + "=" + HelloWorld.class.getName() + ")");
1: 	      ServiceTracker tracker = new ServiceTracker(ctx, 
1: 	          osgiFilter,
1: 	          null);
1: 	      
1: 	      tracker.open();
1: 	      final Object hw = tracker.waitForService(DEFAULT_TIMEOUT);
1: 	      tracker.close();
1: 	
1: 	      if (hw != null) {
1: 	        // proxy because the class space between the sample app and the test bundle is not consistent
1: 	        return new HelloWorld() {
1: 	          public String getMessage() {
1: 	            try {
1: 	              Method m = hw.getClass().getMethod("getMessage");
1: 	              return (String) m.invoke(hw);
1: 	            } catch (Exception e) {
1: 	              throw new RuntimeException(e);
1: 	            }
1: 	          }
1: 	        };
1: 	      } else {
1: 	        return null;
1: 	      }	 
1: 	  }
1: 	  else
1: 	  {
1: 		  return null;
1: 	  }
1:   }
1:   
/////////////////////////////////////////////////////////////////////////
1:     	return findHelloWorldService(appContext);
1: }
author:Chris Wilkinson
-------------------------------------------------------------------------------
commit:666dd1b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.framework.BundleFramework;
/////////////////////////////////////////////////////////////////////////
1:             public Bundle install(BundleFramework framework, AriesApplication app) throws BundleException {
1:                 return framework.getIsolatedBundleContext().installBundle(f.toURL().toString());                
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingManager;
/////////////////////////////////////////////////////////////////////////
1:   public static void prepareSampleBundleV2(BundleContext runtimeCtx, 
1:       RepositoryGenerator repoGen, RepositoryAdmin repoAdmin, 
1:       ModellingManager modellingManager)
/////////////////////////////////////////////////////////////////////////
1:     ModelledResource res = modellingManager.getModelledResource(
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.repository.BundleRepository;
1: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
commit:8151f8c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.runtime.itests.util;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.lang.reflect.Method;
1: import java.net.MalformedURLException;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.Hashtable;
1: import java.util.Set;
1: import java.util.jar.Attributes;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.DeploymentContent;
1: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.BundleRepository;
0: import org.apache.aries.application.management.RepositoryGenerator;
1: import org.apache.aries.application.modelling.ModelledResource;
0: import org.apache.aries.application.modelling.utils.ModellingManager;
1: import org.apache.aries.isolated.sample.HelloWorld;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.Version;
1: import org.osgi.service.framework.CompositeBundle;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class IsolationTestUtils {
1:   public static final long DEFAULT_TIMEOUT = 10000;
1:   
1:   /**
1:    * Retrieve the bundle context for an isolated application framework
1:    */
1:   public static BundleContext findIsolatedAppBundleContext(BundleContext runtimeCtx, String appName)
1:   {
1:     for (Bundle sharedBundle : runtimeCtx.getBundles())
1:     {
1:       if (sharedBundle.getSymbolicName().equals("shared.bundle.framework"))
1:       {
1:         BundleContext sharedContext = ((CompositeBundle)sharedBundle).getCompositeFramework().getBundleContext();
1:         for (Bundle appBundle : sharedContext.getBundles())
1:         {
1:           if (appBundle.getSymbolicName().equals(appName))
1:           {
1:             return ((CompositeBundle)appBundle).getCompositeFramework().getBundleContext();
1:           }
1:         }
1:         break;
1:       }
1:     }    
1:     
1:     return null;
1:   }
1:   
1:   /**
1:    * Set up the necessary resources for installing version 2 of the org.apache.aries.isolated.sample sample bundle, 
1:    * which returns the message "hello brave new world" rather than "hello world"
1:    * 
1:    * This means setting up a global bundle repository as well as a global OBR repository
1:    */
0:   public static void prepareSampleBundleV2(BundleContext runtimeCtx, RepositoryGenerator repoGen, RepositoryAdmin repoAdmin)
1:     throws Exception
1:   {
1:     BundleRepository repo = new BundleRepository() {
1:       public int getCost() {
1:         return 1;
1:       }
1: 
1:       public BundleSuggestion suggestBundleToUse(DeploymentContent content) {
1:         if (content.getContentName().equals("org.apache.aries.isolated.sample")) {
1:           return new BundleSuggestion() {
1: 
0:             public Bundle install(BundleContext ctx, AriesApplication app) throws BundleException {
1:               File f = new File("sample_2.0.0.jar");
1:               try {
0:                 return ctx.installBundle(f.toURL().toString());                
1:               } catch (MalformedURLException mue) {
1:                 throw new RuntimeException(mue);
1:               }
1:             }
1: 
1:             public Version getVersion() {
1:               return new Version("2.0.0");
1:             }
1: 
1:             public Set<Content> getImportPackage() {
1:               return Collections.emptySet();
1:             }
1: 
1:             public Set<Content> getExportPackage() {
1:               return Collections.emptySet();
1:             }
1: 
1:             public int getCost() {
1:               return 1;
1:             }
1:           };
1:         } else {
1:           return null;
1:         }
1:       }        
1:     };
1:     
1:     Hashtable<String, String> props = new Hashtable<String,String>();
1:     props.put(BundleRepository.REPOSITORY_SCOPE, BundleRepository.GLOBAL_SCOPE);
1:     
1:     runtimeCtx.registerService(BundleRepository.class.getName(), repo, props);
1: 
1:     Attributes attrs = new Attributes();
1:     attrs.putValue("Bundle-ManifestVersion", "2");
1:     attrs.putValue("Bundle-Version", "2.0.0");
1:     attrs.putValue("Bundle-SymbolicName", "org.apache.aries.isolated.sample");
1:     attrs.putValue("Manifest-Version", "1");
1: 
0:     ModelledResource res = ModellingManager.getModelledResource(
1:         new File("sample_2.0.0.jar").toURI().toString(), 
1:         attrs,
1:         Collections.EMPTY_LIST, Collections.EMPTY_LIST);
1: 
1:     repoGen.generateRepository("repo.xml", Arrays.asList(res), new FileOutputStream("repo.xml"));
1:     repoAdmin.addRepository(new File("repo.xml").toURI().toString());
1:   }
1:   
1:   /**
1:    * Find the {@link HelloWorld} service for the isolated app
1:    * @return the service object, suitably proxied so that it can be actually used, or null if the service is not present
1:    * @throws IllegalStateException if the isolated app is not installed
1:    */
1:   public static HelloWorld findHelloWorldService(BundleContext runtimeCtx, String appName) throws Exception
1:   {
1:     BundleContext appContext = IsolationTestUtils.findIsolatedAppBundleContext(runtimeCtx, appName);
1:     
1:     if (appContext != null) {  
0:       // Dive into the context and pull out the composite bundle for the app
0:       Filter osgiFilter = FrameworkUtil.createFilter("(" + Constants.OBJECTCLASS + "=" + HelloWorld.class.getName() + ")");
0:       ServiceTracker tracker = new ServiceTracker(appContext, 
0:           osgiFilter,
0:           null);
1:       
0:       tracker.open();
0:       final Object hw = tracker.waitForService(DEFAULT_TIMEOUT);
0:       tracker.close();
1: 
0:       if (hw != null) {
0:         // proxy because the class space between the sample app and the test bundle is not consistent
0:         return new HelloWorld() {
0:           public String getMessage() {
1:             try {
0:               Method m = hw.getClass().getMethod("getMessage");
0:               return (String) m.invoke(hw);
0:             } catch (Exception e) {
0:               throw new RuntimeException(e);
1:             }
1:           }
1:         };
1:       } else {
1:         return null;
1:       }
1: 
1:     } else {
1:       throw new IllegalStateException("Expected to find isolated app ctx, but didn't");
1:     }
1:   }
1: }
============================================================================