1:fdf3952: /*
1:fdf3952:  * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
1:fdf3952:  * 
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.osgi.jmx.service.permissionadmin;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * This MBean represents the OSGi Permission Manager Service
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$
1:fdf3952:  */
1:fdf3952: public interface PermissionAdminMBean {
1:fdf3952: 	/**
1:fdf3952: 	 * Permission Admin MBean object name.
1:fdf3952: 	 */
1:fdf3952: 	String	OBJECTNAME	= JmxConstants.OSGI_CORE
1:fdf3952: 								+ ":service=permissionadmin,version=1.2";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the bundle locations that have permissions assigned to them
1:fdf3952: 	 * 
1:fdf3952: 	 * @return the bundle locations
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	String[] listLocations() throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the list of encoded permissions of the bundle specified by the
1:fdf3952: 	 * bundle location
1:fdf3952: 	 * 
1:fdf3952: 	 * @param location location identifying the bundle
1:fdf3952: 	 * @return the array of String encoded permissions
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	String[] getPermissions(String location) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Set the default permissions assigned to bundle locations that have no
1:fdf3952: 	 * assigned permissions
1:fdf3952: 	 * 
1:fdf3952: 	 * @param encodedPermissions the string encoded permissions
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	void setDefaultPermissions(String[] encodedPermissions) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the list of encoded permissions representing the default
1:fdf3952: 	 * permissions assigned to bundle locations that have no assigned
1:fdf3952: 	 * permissions
1:fdf3952: 	 * 
1:fdf3952: 	 * @return the array of String encoded permissions
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	String[] listDefaultPermissions() throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Set the permissions on the bundle specified by the bundle location
1:fdf3952: 	 * 
1:fdf3952: 	 * @param location the location of the bundle
1:fdf3952: 	 * @param encodedPermissions the string encoded permissions to set
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	void setPermissions(String location, String[] encodedPermissions)
1:fdf3952: 			throws IOException;
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.jmx.service.permissionadmin;
1: 
1: import java.io.IOException;
1: 
1: import org.osgi.jmx.JmxConstants;
1: 
1: /**
1:  * This MBean represents the OSGi Permission Manager Service
1:  * 
1:  * @version $Rev$
1:  */
1: public interface PermissionAdminMBean {
1: 	/**
1: 	 * Permission Admin MBean object name.
1: 	 */
1: 	String	OBJECTNAME	= JmxConstants.OSGI_CORE
1: 								+ ":service=permissionadmin,version=1.2";
1: 
1: 	/**
1: 	 * Answer the bundle locations that have permissions assigned to them
1: 	 * 
1: 	 * @return the bundle locations
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] listLocations() throws IOException;
1: 
1: 	/**
1: 	 * Answer the list of encoded permissions of the bundle specified by the
1: 	 * bundle location
1: 	 * 
1: 	 * @param location location identifying the bundle
1: 	 * @return the array of String encoded permissions
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] getPermissions(String location) throws IOException;
1: 
1: 	/**
1: 	 * Set the default permissions assigned to bundle locations that have no
1: 	 * assigned permissions
1: 	 * 
1: 	 * @param encodedPermissions the string encoded permissions
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void setDefaultPermissions(String[] encodedPermissions) throws IOException;
1: 
1: 	/**
1: 	 * Answer the list of encoded permissions representing the default
1: 	 * permissions assigned to bundle locations that have no assigned
1: 	 * permissions
1: 	 * 
1: 	 * @return the array of String encoded permissions
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	String[] listDefaultPermissions() throws IOException;
1: 
1: 	/**
1: 	 * Set the permissions on the bundle specified by the bundle location
1: 	 * 
1: 	 * @param location the location of the bundle
1: 	 * @param encodedPermissions the string encoded permissions to set
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	void setPermissions(String location, String[] encodedPermissions)
1: 			throws IOException;
1: }
============================================================================