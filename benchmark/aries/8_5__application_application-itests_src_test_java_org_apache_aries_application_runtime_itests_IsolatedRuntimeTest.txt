1:f34e6a1: /*
1:c06b97e:  * Licensed to the Apache Software Foundation (ASF) under one
1:c06b97e:  * or more contributor license agreements.  See the NOTICE file
1:c06b97e:  * distributed with this work for additional information
1:c06b97e:  * regarding copyright ownership.  The ASF licenses this file
1:c06b97e:  * to you under the Apache License, Version 2.0 (the
1:c06b97e:  * "License"); you may not use this file except in compliance
1:c06b97e:  * with the License.  You may obtain a copy of the License at
1:c06b97e:  *
1:c06b97e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c06b97e:  *
1:c06b97e:  * Unless required by applicable law or agreed to in writing,
1:c06b97e:  * software distributed under the License is distributed on an
1:c06b97e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c06b97e:  * KIND, either express or implied.  See the License for the
1:c06b97e:  * specific language governing permissions and limitations
1:c06b97e:  * under the License.
1:f34e6a1:  */
1:c06b97e: package org.apache.aries.application.runtime.itests;
1:041f5f2: 
1:58f55bd: import static org.junit.Assert.assertEquals;
1:58f55bd: import static org.junit.Assert.assertNotNull;
1:58f55bd: import static org.junit.Assert.assertNull;
1:395a819: import static org.junit.Assert.assertTrue;
1:0223547: import static org.ops4j.pax.exam.CoreOptions.*;
1:86224ba: 
1:c06b97e: import java.io.File;
1:c06b97e: import java.io.FileOutputStream;
1:395a819: import java.util.concurrent.atomic.AtomicBoolean;
1:86224ba: 
1:c06b97e: import org.apache.aries.application.management.AriesApplication;
1:c06b97e: import org.apache.aries.application.management.AriesApplicationContext;
1:c06b97e: import org.apache.aries.application.management.AriesApplicationManager;
1:5aeba16: import org.apache.aries.application.management.ResolveConstraint;
1:89f804e: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1:58f55bd: import org.apache.aries.application.modelling.ModellingManager;
1:8151f8c: import org.apache.aries.application.runtime.itests.util.IsolationTestUtils;
1:c06b97e: import org.apache.aries.isolated.sample.HelloWorld;
1:86224ba: import org.apache.aries.itest.AbstractIntegrationTest;
1:c06b97e: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:c06b97e: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:5aeba16: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:c06b97e: import org.junit.Before;
1:0223547: import org.junit.Ignore;
1:c06b97e: import org.junit.Test;
1:c06b97e: import org.junit.runner.RunWith;
1:0223547: import org.ops4j.pax.exam.Configuration;
1:c06b97e: import org.ops4j.pax.exam.Option;
1:0223547: import org.ops4j.pax.exam.junit.PaxExam;
1:0223547: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0223547: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:395a819: import org.osgi.framework.Bundle;
1:395a819: import org.osgi.framework.BundleEvent;
1:395a819: import org.osgi.framework.SynchronousBundleListener;
1:395a819: import org.osgi.service.framework.CompositeBundle;
1:041f5f2: 
1:0223547: @RunWith(PaxExam.class)
1:0223547: @ExamReactorStrategy(PerClass.class)
1:c06b97e: public class IsolatedRuntimeTest extends AbstractIntegrationTest {
1:0223547: 
1:0223547:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:0223547:      * are created in the paxweb temp directory, and not in the svn tree
1:0223547:      */
1:0223547:     static boolean createdApplications = false;
1:0223547: 
1:0223547:     @Before
1:0223547:     public void createApplications() throws Exception {
1:0223547: 
1:0223547:         if (createdApplications) {
1:0223547:             return;
1:0223547:         }
1:0223547:         ZipFixture testEba = ArchiveFixture.newZip()
1:0223547:                 .jar("sample.jar")
1:0223547:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:0223547:                 .attribute("Bundle-Version", "1.0.0")
1:0223547:                 .attribute("Import-Package", "org.osgi.service.blueprint, org.apache.aries.isolated.shared")
1:0223547:                         // needed for testFrameworkResolvedBeforeInnerBundlesStart()
1:0223547:                 .attribute("Bundle-ActivationPolicy", "lazy")
1:0223547:                 .end()
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:0223547:                 .binary("org/apache/aries/isolated/sample/SharedImpl.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/SharedImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
1:0223547:                 .end()
1:0223547:                 .jar("shared.jar")
1:0223547:                 .manifest().symbolicName("org.apache.aries.isolated.shared")
1:0223547:                 .attribute("Bundle-Version", "1.0.0")
1:0223547:                 .attribute("Export-Package", "org.apache.aries.isolated.shared")
1:0223547:                 .end()
1:0223547:                 .binary("org/apache/aries/isolated/shared/Shared.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/shared/Shared.class"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         FileOutputStream fout = new FileOutputStream("test.eba");
1:0223547:         testEba.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         ZipFixture testEba2 = testEba.binary("META-INF/APPLICATION.MF",
1:0223547:                 IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/APPLICATION.MF"))
1:0223547:                 .end();
1:0223547:         fout = new FileOutputStream("test2.eba");
1:0223547:         testEba2.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         ZipFixture sampleJar2 = ArchiveFixture.newJar()
1:0223547:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:0223547:                 .attribute("Bundle-Version", "2.0.0")
1:0223547:                 .end()
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/aries.xml",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample2-blueprint.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         fout = new FileOutputStream("sample_2.0.0.jar");
1:0223547:         sampleJar2.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         ZipFixture ebaWithFragment = ArchiveFixture.newZip()
1:0223547:                 .jar("sample.jar")
1:0223547:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:0223547:                 .attribute("Bundle-Version", "1.0.0")
1:0223547:                 .end()
1:0223547:                 .end()
1:0223547:                 .jar("fragment.jar")
1:0223547:                 .manifest().symbolicName("org.apache.aries.isolated.fragment")
1:0223547:                 .attribute("Bundle-Version", "1.0.0")
1:0223547:                 .attribute("Fragment-Host", "org.apache.aries.isolated.sample")
1:0223547:                 .end()
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         fout = new FileOutputStream("withFragment.eba");
1:0223547:         ebaWithFragment.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         createdApplications = true;
1:f34e6a1:     }
1:f34e6a1: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testAppWithoutApplicationManifest() throws Exception {
1:8069959: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:8069959: 
1:0223547:         ctx.start();
1:0223547:         assertHelloWorldService("test.eba");
1:8069959: 
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:395a819: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testAppWithApplicationManifest() throws Exception {
1:395a819: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:395a819: 
1:0223547:         ctx.start();
1:0223547:         assertHelloWorldService("org.apache.aries.sample2");
1:041f5f2: 
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:041f5f2: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testUninstallReinstall() throws Exception {
1:0223547: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547: 
1:0223547:         app = ctx.getApplication();
1:0223547: 
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         assertHelloWorldService("org.apache.aries.sample2");
1:0223547: 
1:0223547:         ctx.stop();
1:0223547:         manager.uninstall(ctx);
1:0223547: 
1:0223547:         assertNull(IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, "org.apache.aries.sample2"));
1:0223547: 
1:0223547:         ctx = manager.install(app);
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         assertHelloWorldService("org.apache.aries.sample2");
1:0223547: 
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:0223547: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testAppWithFragment() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("withFragment.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547: 
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         assertHelloWorldService("withFragment.eba");
1:0223547: 
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:0223547: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testAppWithGlobalRepositoryBundle() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:0223547: 
1:0223547:         IsolationTestUtils.prepareSampleBundleV2(bundleContext,
1:0223547:                 context().getService(RepositoryGenerator.class),
1:0223547:                 context().getService(RepositoryAdmin.class),
1:0223547:                 context().getService(ModellingManager.class));
1:0223547: 
1:0223547:         AriesApplication newApp = manager.resolve(app, new ResolveConstraint() {
1:0223547:             @Override
1:0223547:             public String getBundleName() {
1:0223547:                 return "org.apache.aries.isolated.sample";
1:0223547:             }
1:0223547: 
1:0223547:             @Override
1:0223547:             public VersionRange getVersionRange() {
1:0223547:                 return ManifestHeaderProcessor.parseVersionRange("[2.0.0,2.0.0]", true);
1:0223547:             }
1:0223547:         });
1:0223547: 
1:0223547:         AriesApplicationContext ctx = manager.install(newApp);
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         assertHelloWorldService("org.apache.aries.sample2", "hello brave new world");
1:0223547: 
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:0223547: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testFrameworkResolvedBeforeInnerBundlesStart() throws Exception {
1:f34e6a1:       /*
1:395a819:        * Lazy bundles have in the past triggered recursive bundle trackers to handle them before
1:395a819:        * the composite bundle framework was even resolved. In such a case the below loadClass
1:395a819:        * operation on a class that depends on a class imported from the outside of the composite 
1:395a819:        * will fail with an NPE.
1:f34e6a1:        */
1:0223547: 
1:0223547:         final AtomicBoolean loadedClass = new AtomicBoolean(false);
1:0223547: 
1:0223547:         context().addBundleListener(new SynchronousBundleListener() {
1:0223547:             public void bundleChanged(BundleEvent event) {
1:0223547:                 Bundle b = event.getBundle();
1:0223547:                 if (event.getType() == BundleEvent.STARTING || event.getType() == BundleEvent.LAZY_ACTIVATION) {
1:0223547:                     if (b.getEntry("org/apache/aries/isolated/sample/SharedImpl.class") != null) {
1:0223547:                         try {
1:0223547:                             Class<?> cl = b.loadClass("org.apache.aries.isolated.sample.SharedImpl");
1:0223547:                             cl.newInstance();
1:0223547:                             loadedClass.set(true);
1:0223547:                         } catch (Exception e) {
1:0223547:                             e.printStackTrace();
1:0223547:                             throw new RuntimeException(e);
1:0223547:                         }
1:8069959:                     }
1:0223547:                 } else if (event.getType() == BundleEvent.INSTALLED && b instanceof CompositeBundle) {
1:0223547:                     ((CompositeBundle) b).getCompositeFramework().getBundleContext().addBundleListener(this);
1:8069959:                 }
3:395a819:             }
1:0223547:         });
1:0223547: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547: 
1:0223547:         try {
1:0223547:             ctx.start();
1:0223547: 
1:0223547:             app = ctx.getApplication();
1:0223547:             assertEquals(1, app.getDeploymentMetadata().getApplicationDeploymentContents().size());
1:0223547:             assertEquals(1, app.getDeploymentMetadata().getApplicationProvisionBundles().size());
1:0223547:             assertTrue(loadedClass.get());
1:0223547:         } finally {
1:0223547:             manager.uninstall(ctx);
1:395a819:         }
1:395a819:     }
1:395a819: 
1:0223547:     private void assertHelloWorldService(String appName) throws Exception {
1:0223547:         assertHelloWorldService(appName, "hello world");
1:0223547:     }
1:395a819: 
1:0223547:     private void assertHelloWorldService(String appName, String message) throws Exception {
1:0223547:         HelloWorld hw = IsolationTestUtils.findHelloWorldService(bundleContext, appName);
1:0223547:         assertNotNull("The Hello World service could not be found.", hw);
1:0223547:         assertEquals(message, hw.getMessage());
1:0223547:     }
1:0223547: 
1:0223547:     @Configuration
1:0223547:     public static Option[] configuration() {
1:0223547:         return options(
1:0223547: 
1:0223547:                 // framework / core bundles
1:0223547:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:0223547: 
1:0223547:                 // Repository
1:0223547:                 repository("http://repository.ops4j.org/maven2"),
1:0223547: 
1:0223547:                 // Logging
1:0223547:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 junitBundles(),
1:0223547:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:0223547:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.repository").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject());
1:0223547:     }
1:395a819: 
1:395a819: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e334773
/////////////////////////////////////////////////////////////////////////
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:0223547
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: 
1:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:      * are created in the paxweb temp directory, and not in the svn tree
1:      */
1:     static boolean createdApplications = false;
1: 
1:     @Before
1:     public void createApplications() throws Exception {
1: 
1:         if (createdApplications) {
1:             return;
1:         }
1:         ZipFixture testEba = ArchiveFixture.newZip()
1:                 .jar("sample.jar")
1:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:                 .attribute("Bundle-Version", "1.0.0")
1:                 .attribute("Import-Package", "org.osgi.service.blueprint, org.apache.aries.isolated.shared")
1:                         // needed for testFrameworkResolvedBeforeInnerBundlesStart()
1:                 .attribute("Bundle-ActivationPolicy", "lazy")
1:                 .end()
1:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:                 .binary("org/apache/aries/isolated/sample/SharedImpl.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/SharedImpl.class"))
1:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
1:                 .end()
1:                 .jar("shared.jar")
1:                 .manifest().symbolicName("org.apache.aries.isolated.shared")
1:                 .attribute("Bundle-Version", "1.0.0")
1:                 .attribute("Export-Package", "org.apache.aries.isolated.shared")
1:                 .end()
1:                 .binary("org/apache/aries/isolated/shared/Shared.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/shared/Shared.class"))
1:                 .end();
1: 
1:         FileOutputStream fout = new FileOutputStream("test.eba");
1:         testEba.writeOut(fout);
1:         fout.close();
1: 
1:         ZipFixture testEba2 = testEba.binary("META-INF/APPLICATION.MF",
1:                 IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/APPLICATION.MF"))
1:                 .end();
1:         fout = new FileOutputStream("test2.eba");
1:         testEba2.writeOut(fout);
1:         fout.close();
1: 
1:         ZipFixture sampleJar2 = ArchiveFixture.newJar()
1:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:                 .attribute("Bundle-Version", "2.0.0")
1:                 .end()
1:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:                 .binary("OSGI-INF/blueprint/aries.xml",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample2-blueprint.xml"))
1:                 .end();
1: 
1:         fout = new FileOutputStream("sample_2.0.0.jar");
1:         sampleJar2.writeOut(fout);
1:         fout.close();
1: 
1:         ZipFixture ebaWithFragment = ArchiveFixture.newZip()
1:                 .jar("sample.jar")
1:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:                 .attribute("Bundle-Version", "1.0.0")
1:                 .end()
1:                 .end()
1:                 .jar("fragment.jar")
1:                 .manifest().symbolicName("org.apache.aries.isolated.fragment")
1:                 .attribute("Bundle-Version", "1.0.0")
1:                 .attribute("Fragment-Host", "org.apache.aries.isolated.sample")
1:                 .end()
1:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
1:                 .end();
1: 
1:         fout = new FileOutputStream("withFragment.eba");
1:         ebaWithFragment.writeOut(fout);
1:         fout.close();
1: 
1:         createdApplications = true;
1:     @Test
1:     @Ignore
1:     public void testAppWithoutApplicationManifest() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1:         assertHelloWorldService("test.eba");
1:         manager.uninstall(ctx);
1:     }
1:     @Test
1:     @Ignore
1:     public void testAppWithApplicationManifest() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1:         assertHelloWorldService("org.apache.aries.sample2");
1:         manager.uninstall(ctx);
1:     }
1:     @Test
1:     @Ignore
1:     public void testUninstallReinstall() throws Exception {
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1: 
1:         app = ctx.getApplication();
1: 
1:         ctx.start();
1: 
1:         assertHelloWorldService("org.apache.aries.sample2");
1: 
1:         ctx.stop();
1:         manager.uninstall(ctx);
1: 
1:         assertNull(IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, "org.apache.aries.sample2"));
1: 
1:         ctx = manager.install(app);
1:         ctx.start();
1: 
1:         assertHelloWorldService("org.apache.aries.sample2");
1: 
1:         manager.uninstall(ctx);
1:     }
1: 
1:     @Test
1:     @Ignore
1:     public void testAppWithFragment() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("withFragment.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1: 
1:         ctx.start();
1: 
1:         assertHelloWorldService("withFragment.eba");
1: 
1:         manager.uninstall(ctx);
1:     }
1: 
1:     @Test
1:     @Ignore
1:     public void testAppWithGlobalRepositoryBundle() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1: 
1:         IsolationTestUtils.prepareSampleBundleV2(bundleContext,
1:                 context().getService(RepositoryGenerator.class),
1:                 context().getService(RepositoryAdmin.class),
1:                 context().getService(ModellingManager.class));
1: 
1:         AriesApplication newApp = manager.resolve(app, new ResolveConstraint() {
1:             @Override
1:             public String getBundleName() {
1:                 return "org.apache.aries.isolated.sample";
1:             }
1: 
1:             @Override
1:             public VersionRange getVersionRange() {
1:                 return ManifestHeaderProcessor.parseVersionRange("[2.0.0,2.0.0]", true);
1:             }
1:         });
1: 
1:         AriesApplicationContext ctx = manager.install(newApp);
1:         ctx.start();
1: 
1:         assertHelloWorldService("org.apache.aries.sample2", "hello brave new world");
1: 
1:         manager.uninstall(ctx);
1:     }
1: 
1:     @Test
1:     @Ignore
1:     public void testFrameworkResolvedBeforeInnerBundlesStart() throws Exception {
1: 
1:         final AtomicBoolean loadedClass = new AtomicBoolean(false);
1: 
1:         context().addBundleListener(new SynchronousBundleListener() {
1:             public void bundleChanged(BundleEvent event) {
1:                 Bundle b = event.getBundle();
1:                 if (event.getType() == BundleEvent.STARTING || event.getType() == BundleEvent.LAZY_ACTIVATION) {
1:                     if (b.getEntry("org/apache/aries/isolated/sample/SharedImpl.class") != null) {
1:                         try {
1:                             Class<?> cl = b.loadClass("org.apache.aries.isolated.sample.SharedImpl");
1:                             cl.newInstance();
1:                             loadedClass.set(true);
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                             throw new RuntimeException(e);
1:                         }
1:                 } else if (event.getType() == BundleEvent.INSTALLED && b instanceof CompositeBundle) {
1:                     ((CompositeBundle) b).getCompositeFramework().getBundleContext().addBundleListener(this);
1:         });
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1: 
1:         try {
1:             ctx.start();
1: 
1:             app = ctx.getApplication();
1:             assertEquals(1, app.getDeploymentMetadata().getApplicationDeploymentContents().size());
1:             assertEquals(1, app.getDeploymentMetadata().getApplicationProvisionBundles().size());
1:             assertTrue(loadedClass.get());
1:         } finally {
1:             manager.uninstall(ctx);
1:     private void assertHelloWorldService(String appName) throws Exception {
1:         assertHelloWorldService(appName, "hello world");
1:     }
1:     private void assertHelloWorldService(String appName, String message) throws Exception {
1:         HelloWorld hw = IsolationTestUtils.findHelloWorldService(bundleContext, appName);
1:         assertNotNull("The Hello World service could not be found.", hw);
1:         assertEquals(message, hw.getMessage());
1:     }
1: 
1:     @Configuration
1:     public static Option[] configuration() {
1:         return options(
1: 
1:                 // framework / core bundles
1:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
0:                 mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1: 
1:                 // Repository
1:                 repository("http://repository.ops4j.org/maven2"),
1: 
1:                 // Logging
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 
1:                 // Bundles
1:                 junitBundles(),
1:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 
1:                 // Bundles
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint").versionAsInProject(),
1:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.repository").versionAsInProject(),
1:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject());
1:     }
author:John Ross
-------------------------------------------------------------------------------
commit:cffbcb0
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.flatOptions;
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
/////////////////////////////////////////////////////////////////////////
0:   public static Option[] configuration()
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties")        
commit:f34e6a1
/////////////////////////////////////////////////////////////////////////
1:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
1:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
1:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
1:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox38Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.8.0.V20120529-1548")
0: 	          );
1:   }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
0:     assertNotNull("The Hello World service could not be found.", hw);
0:   private static Option[] generalConfiguration() {
0:     return flatOptions(
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.geronimo.specs","geronimo-jta_1.1_spec")
/////////////////////////////////////////////////////////////////////////
0:           );
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox35Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 	          equinox().version("3.5.0")
0: 	          );
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox37Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.7.0.v20110613")
0: 	          );
1:   }
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:2b7f337
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
commit:65e113c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.AppConstants;
/////////////////////////////////////////////////////////////////////////
0:         // do not provision against the local runtime
0:         systemProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP).value("true"),
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:395a819
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.SynchronousBundleListener;
1: import org.osgi.service.framework.CompositeBundle;
/////////////////////////////////////////////////////////////////////////
0:           .attribute("Import-Package", "org.osgi.service.blueprint, org.apache.aries.isolated.shared")
0:           // needed for testFrameworkResolvedBeforeInnerBundlesStart()
0:           .attribute("Bundle-ActivationPolicy", "lazy")
0:         .binary("org/apache/aries/isolated/sample/SharedImpl.class", 
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/SharedImpl.class"))
0:         .end()
0:       .jar("shared.jar")
0:         .manifest().symbolicName("org.apache.aries.isolated.shared")
0:           .attribute("Bundle-Version", "1.0.0")
0:           .attribute("Export-Package", "org.apache.aries.isolated.shared")
0:         .end()
0:         .binary("org/apache/aries/isolated/shared/Shared.class",
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/shared/Shared.class"))
/////////////////////////////////////////////////////////////////////////
0:   @Test
0:   public void testFrameworkResolvedBeforeInnerBundlesStart() throws Exception {
0:       /*
1:        * Lazy bundles have in the past triggered recursive bundle trackers to handle them before
1:        * the composite bundle framework was even resolved. In such a case the below loadClass
1:        * operation on a class that depends on a class imported from the outside of the composite 
1:        * will fail with an NPE.
0:        */
1:       
0:       final AtomicBoolean loadedClass = new AtomicBoolean(false);
1:       
0:       context().addBundleListener(new SynchronousBundleListener() {
0:         public void bundleChanged(BundleEvent event) {
0:             Bundle b = event.getBundle();
0:             if (event.getType() == BundleEvent.STARTING || event.getType() == BundleEvent.LAZY_ACTIVATION) {
0:                 if (b.getEntry("org/apache/aries/isolated/sample/SharedImpl.class") != null) {
0:                     try {
0:                         Class<?> cl = b.loadClass("org.apache.aries.isolated.sample.SharedImpl");
0:                         cl.newInstance();
0:                         loadedClass.set(true);
0:                     } catch (Exception e) {
0:                         e.printStackTrace();
0:                         throw new RuntimeException(e);
1:                     }
1:                 }
0:             } else if (event.getType() == BundleEvent.INSTALLED && b instanceof CompositeBundle) {
0:                 ((CompositeBundle) b).getCompositeFramework().getBundleContext().addBundleListener(this);
1:             }
1:         }
0:     });
1:       
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
0:     AriesApplicationContext ctx = manager.install(app);      
1:     
0:     try {
0:         ctx.start();
1:         
0:         app = ctx.getApplication();
0:         assertEquals(1, app.getDeploymentMetadata().getApplicationDeploymentContents().size());
0:         assertEquals(1, app.getDeploymentMetadata().getApplicationProvisionBundles().size());
0:         assertTrue(loadedClass.get());
0:     } finally {
0:         manager.uninstall(ctx);
1:     }
1:   }
1:   
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
0:         context().getService(RepositoryGenerator.class), 
0:         context().getService(RepositoryAdmin.class), 
0:         context().getService(ModellingManager.class));
/////////////////////////////////////////////////////////////////////////
0:     return testOptions(
1:         
0:         paxLogging("DEBUG"),
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:de5b346
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       @Override
0: 	public String getBundleName() {
0:       @Override
0: 	public VersionRange getVersionRange() {
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:041f5f2
/////////////////////////////////////////////////////////////////////////
1:     
0:     manager.uninstall(ctx);
/////////////////////////////////////////////////////////////////////////
1:     
0:     manager.uninstall(ctx);
/////////////////////////////////////////////////////////////////////////
1:     
0:     manager.uninstall(ctx);
/////////////////////////////////////////////////////////////////////////
1:     
0:     manager.uninstall(ctx);
/////////////////////////////////////////////////////////////////////////
0:     
0:     manager.uninstall(ctx);
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
commit:8151f8c
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.*;
1: import org.apache.aries.application.runtime.itests.util.IsolationTestUtils;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
0:     assertNull(IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, "org.apache.aries.sample2"));
/////////////////////////////////////////////////////////////////////////
0:     IsolationTestUtils.prepareSampleBundleV2(bundleContext, getOsgiService(RepositoryGenerator.class), getOsgiService(RepositoryAdmin.class));
/////////////////////////////////////////////////////////////////////////
0:     HelloWorld hw = IsolationTestUtils.findHelloWorldService(bundleContext, appName);
0:     assertNotNull(hw);
0:     assertEquals(message, hw.getMessage());
commit:b1c02cb
/////////////////////////////////////////////////////////////////////////
0:     ZipFixture ebaWithFragment = ArchiveFixture.newZip()
0:       .jar("sample.jar")
0:         .manifest().symbolicName("org.apache.aries.isolated.sample")
0:           .attribute("Bundle-Version", "1.0.0")
0:           .end()
0:       .end()
0:       .jar("fragment.jar")
0:         .manifest().symbolicName("org.apache.aries.isolated.fragment")
0:           .attribute("Bundle-Version", "1.0.0")
0:           .attribute("Fragment-Host", "org.apache.aries.isolated.sample")
0:         .end()
0:         .binary("org/apache/aries/isolated/sample/HelloWorld.class", 
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
0:         .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class", 
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
0:         .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
0:         .end();
0:     
0:     fout = new FileOutputStream("withFragment.eba");
0:     ebaWithFragment.writeOut(fout);
0:     fout.close();
0:     
/////////////////////////////////////////////////////////////////////////
0:     ctx.start();
0:     assertHelloWorldService("test.eba");
/////////////////////////////////////////////////////////////////////////
0:     ctx.start();
0:     assertHelloWorldService("org.apache.aries.sample2");
/////////////////////////////////////////////////////////////////////////
0: 
0:     ctx.start();
0: 
0:     assertHelloWorldService("org.apache.aries.sample2");
0: 
0:     ctx.stop();
0:     manager.uninstall(ctx);
0: 
0:     ctx = manager.install(app);
0:     ctx.start();
0: 
0:     assertHelloWorldService("org.apache.aries.sample2");
0:   }
0:   
0:   @Test
0:   public void testAppWithFragment() throws Exception
0:   {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("withFragment.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0: 
0:     ctx.start();
0:     assertHelloWorldService("withFragment.eba");
/////////////////////////////////////////////////////////////////////////
0: 
commit:5aeba16
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: import java.net.MalformedURLException;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.Hashtable;
0: import java.util.Set;
0: import java.util.jar.Attributes;
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.DeploymentContent;
0: import org.apache.aries.application.VersionRange;
0: import org.apache.aries.application.management.BundleRepository;
0: import org.apache.aries.application.management.RepositoryGenerator;
1: import org.apache.aries.application.management.ResolveConstraint;
0: import org.apache.aries.application.modelling.ModelledResource;
0: import org.apache.aries.application.modelling.utils.ModellingManager;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.BundleException;
0: import org.osgi.framework.Version;
0: 
/////////////////////////////////////////////////////////////////////////
0:     
0:     ZipFixture sampleJar2 = ArchiveFixture.newJar()
0:       .manifest().symbolicName("org.apache.aries.isolated.sample")
0:         .attribute("Bundle-Version", "2.0.0")
0:       .end()
0:       .binary("org/apache/aries/isolated/sample/HelloWorld.class", 
0:           IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
0:       .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class", 
0:           IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
0:       .binary("OSGI-INF/blueprint/aries.xml", 
0:           IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample2-blueprint.xml"))
0:       .end();
0:   
0:     fout = new FileOutputStream("sample_2.0.0.jar");
0:     sampleJar2.writeOut(fout);
0:     fout.close();
0:     
/////////////////////////////////////////////////////////////////////////
0:   @Test
0:   public void testAppWithGlobalRepositoryBundle() throws Exception
0:   {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
0:     
0:     BundleRepository repo = new BundleRepository() {
0:       public int getCost() {
0:         return 1;
0:       }
0: 
0:       public BundleSuggestion suggestBundleToUse(DeploymentContent content) {
0:         if (content.getContentName().equals("org.apache.aries.isolated.sample")) {
0:           return new BundleSuggestion() {
0: 
0:             public Bundle install(BundleContext ctx, AriesApplication app) throws BundleException {
0:               File f = new File("sample_2.0.0.jar");
0:               try {
0:                 return ctx.installBundle(f.toURL().toString());                
0:               } catch (MalformedURLException mue) {
0:                 throw new RuntimeException(mue);
0:               }
0:             }
0: 
0:             public Version getVersion() {
0:               return new Version("2.0.0");
0:             }
0: 
0:             public Set<Content> getImportPackage() {
0:               return Collections.emptySet();
0:             }
0: 
0:             public Set<Content> getExportPackage() {
0:               return Collections.emptySet();
0:             }
0: 
0:             public int getCost() {
0:               return 1;
0:             }
0:           };
0:         } else {
0:           return null;
0:         }
0:       }        
0:     };
0:     
0:     Hashtable<String, String> props = new Hashtable<String,String>();
0:     props.put(BundleRepository.REPOSITORY_SCOPE, BundleRepository.GLOBAL_SCOPE);
0:     
0:     bundleContext.registerService(BundleRepository.class.getName(), repo, props);
0: 
0:     RepositoryGenerator repoGen = getOsgiService(RepositoryGenerator.class);
0:     RepositoryAdmin repoAdmin = getOsgiService(RepositoryAdmin.class);
0: 
0:     Attributes attrs = new Attributes();
0:     attrs.putValue("Bundle-ManifestVersion", "2");
0:     attrs.putValue("Bundle-Version", "2.0.0");
0:     attrs.putValue("Bundle-SymbolicName", "org.apache.aries.isolated.sample");
0:     attrs.putValue("Manifest-Version", "1");
0: 
0:     ModelledResource res = ModellingManager.getModelledResource(
0:         new File("sample_2.0.0.jar").toURI().toString(), 
0:         attrs,
0:         Collections.EMPTY_LIST, Collections.EMPTY_LIST);
0: 
0:     repoGen.generateRepository("repo.xml", Arrays.asList(res), new FileOutputStream("repo.xml"));
0:     repoAdmin.addRepository(new File("repo.xml").toURI().toString());
0: 
0:     AriesApplication newApp = manager.resolve(app, new ResolveConstraint() {
0:       public String getBundleName() {
0:         return "org.apache.aries.isolated.sample";
0:       }
0: 
0:       public VersionRange getVersionRange() {
0:         return ManifestHeaderProcessor.parseVersionRange("[2.0.0,2.0.0]", true);
0:       }
0:     });
0:     
0:     AriesApplicationContext ctx = manager.install(newApp);
0:     ctx.start();
0:     
0:     assertHelloWorldService("org.apache.aries.sample2", "hello brave new world");
0:   }  
0:     assertHelloWorldService(appName, "hello world");
0:   }
0:   
0:   private void assertHelloWorldService(String appName, String message) throws Exception
0:   {
/////////////////////////////////////////////////////////////////////////
0:       assertEquals(message, result);
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
commit:f91202e
/////////////////////////////////////////////////////////////////////////
0:       assertHelloWorldService("test.eba");
0:   
/////////////////////////////////////////////////////////////////////////
0:       assertHelloWorldService("org.apache.aries.sample2");
0:   
0:   @Test
0:   public void testUninstallReinstall() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     
0:     app = ctx.getApplication();
0:     
0:     try
0:     {
0:       ctx.start();
0:       
0:       assertHelloWorldService("org.apache.aries.sample2");
0:       
0:       ctx.stop();
0:       manager.uninstall(ctx);
0:       
0:       ctx = manager.install(app);
0:       ctx.start();
0:       
0:       assertHelloWorldService("org.apache.aries.sample2");
0:       
0:     } finally {
0:       ctx.stop();
0:       manager.uninstall(ctx);
0:     }    
0:   }
0: 
0:   
0:   
0:   private void assertHelloWorldService(String appName) throws Exception
0:   {
0:     BundleContext appContext = getAppIsolatedBundleContext(appName);
0:     
0:     if (appContext != null) {  
0:       // Dive into the context and pull out the composite bundle for the app
0:       Filter osgiFilter = FrameworkUtil.createFilter("(" + Constants.OBJECTCLASS + "=" + HelloWorld.class.getName() + ")");
0:       ServiceTracker tracker = new ServiceTracker(appContext, 
0:           osgiFilter,
0:           null);
0:       tracker.open();
0:       
0:       Object hw = tracker.waitForService(DEFAULT_TIMEOUT);
0:       
0:       tracker.close();
0:       
0:       // We can cast to our version of HelloWorld as it is in a different classloader
0:       // so reflect into it to get the single method
0:       Class returnClass = hw.getClass();
0:       Method method = returnClass.getDeclaredMethod("getMessage",null);
0:       String result = (String)method.invoke(hw);      
0:       
0:       assertEquals("hello world", result);
0:     }
0:     else {
0:       fail("No service found inside application framework");
0:     }
0:     
0:   }
0:   
0:   private BundleContext getAppIsolatedBundleContext(String appName)
0:   {
0:     for (Bundle sharedBundle : bundleContext.getBundles())
0:     {
0:       if (sharedBundle.getSymbolicName().equals("shared.bundle.framework"))
0:       {
0:         BundleContext sharedContext = ((CompositeBundle)sharedBundle).getCompositeFramework().getBundleContext();
0:         for (Bundle appBundle : sharedContext.getBundles())
0:         {
0:           if (appBundle.getSymbolicName().equals(appName))
0:           {
0:             return ((CompositeBundle)appBundle).getCompositeFramework().getBundleContext();
0:           }
0:         }
0:         break;
0:       }
0:     }    
0:     
0:     return null;
0:   }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:e22d71c
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.repository;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:           .attribute("Import-Package", "org.osgi.service.blueprint")
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:         repository( "http://repository.ops4j.org/maven2" ),
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5011"),
commit:be6ac25
/////////////////////////////////////////////////////////////////////////
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:d3efe20
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
commit:a0eca03
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.platform.repo"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.postresolve.process"),
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
0: 
1: import org.apache.aries.application.modelling.ModellingManager;
/////////////////////////////////////////////////////////////////////////
0:     IsolationTestUtils.prepareSampleBundleV2(bundleContext, 
0:         getOsgiService(RepositoryGenerator.class), 
0:         getOsgiService(RepositoryAdmin.class), 
0:         getOsgiService(ModellingManager.class));
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated"),
commit:92429ff
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
/////////////////////////////////////////////////////////////////////////
0:         /* For debugging, uncommenting the following two lines and add the imports */
0:         /*
0:          * vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5011"),
0:         waitForFrameworkStartup(),*/
0:         /*
0:          * and add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:          */
commit:c06b97e
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.application.runtime.itests;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import java.io.File;
1: import java.io.FileOutputStream;
0: import java.lang.reflect.Method;
0: 
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
1: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: 
1: import org.apache.aries.isolated.sample.HelloWorld;
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.Filter;
0: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.service.framework.CompositeBundle;
0: import org.osgi.util.tracker.ServiceTracker;
0: 
0: import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: 
0: @RunWith(JUnit4TestRunner.class)
1: public class IsolatedRuntimeTest extends AbstractIntegrationTest {
0:   
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree 
0:    */
0:   static boolean createdApplications = false;
0:   @Before
0:   public static void createApplications() throws Exception {
0:        
0:     if (createdApplications) { 
0:       return;
0:     }
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:       .jar("sample.jar")
0:         .manifest().symbolicName("org.apache.aries.isolated.sample")
0:           .attribute("Bundle-Version", "1.0.0")
0:           .end()
0:         .binary("org/apache/aries/isolated/sample/HelloWorld.class", 
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
0:         .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class", 
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
0:         .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:             IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
0:         .end();
0:       
0:     FileOutputStream fout = new FileOutputStream("test.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
0:     
0:     ZipFixture testEba2 = testEba.binary("META-INF/APPLICATION.MF", 
0:         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/APPLICATION.MF"))
0:         .end();
0:     fout = new FileOutputStream("test2.eba");
0:     testEba2.writeOut(fout);
0:     fout.close();
0:     createdApplications = true;
0:   }
0:   
0:   @Test
0:   public void testAppWithoutApplicationManifest() throws Exception {
0:     
0:     String result = null;
0:     
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     
0:     try
0:     {
0:       ctx.start();
0:       
0:       BundleContext appContext = null;
0:       for (Bundle sharedBundle : bundleContext.getBundles())
0:       {
0:         if (sharedBundle.getSymbolicName().equals("shared.bundle.framework"))
0:         {
0:           BundleContext sharedContext = ((CompositeBundle)sharedBundle).getCompositeFramework().getBundleContext();
0:           for (Bundle appBundle : sharedContext.getBundles())
0:           {
0:             if (appBundle.getSymbolicName().equals("test.eba"))
0:             {
0:               appContext = ((CompositeBundle)appBundle).getCompositeFramework().getBundleContext();
0:               break;
0:             }
0:           }
0:           break;
0:         }
0:       }
0:       
0:       if (appContext != null) {  
0:         // Dive into the context and pull out the composite bundle for the app
0:         Filter osgiFilter = FrameworkUtil.createFilter("(" + Constants.OBJECTCLASS + "=" + HelloWorld.class.getName() + ")");
0:         ServiceTracker tracker = new ServiceTracker(appContext, 
0:             osgiFilter,
0:             null);
0:         tracker.open();
0:         
0:         Object hw = tracker.waitForService(DEFAULT_TIMEOUT);
0:         
0:         tracker.close();
0:         
0:         // We can cast to our version of HelloWorld as it is in a different classloader
0:         // so reflect into it to get the single method
0:         Class returnClass = hw.getClass();
0:         Method method = returnClass.getDeclaredMethod("getMessage",null);
0:         result = (String)method.invoke(hw);      
0:        
0:       }
0:       else
0:         fail("No service found inside application framework");
0:       
0:     } catch (Exception e)
0:     {
0:       System.out.println("MOOP");
0:       
0:       e.printStackTrace();
0:       
0:     } finally {
0:       ctx.stop();
0:       manager.uninstall(ctx);
0:     }
0:     
0:     assertEquals (result, "hello world");
0:   }
0: 
0:   @Test
0:   public void testAppWithApplicationManifest() throws Exception {
0:         
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     
0:     try
0:     {
0:       ctx.start();
0:       
0:       BundleContext appContext = null;
0:       for (Bundle sharedBundle : bundleContext.getBundles())
0:       {
0:         if (sharedBundle.getSymbolicName().equals("shared.bundle.framework"))
0:         {
0:           BundleContext sharedContext = ((CompositeBundle)sharedBundle).getCompositeFramework().getBundleContext();
0:           for (Bundle appBundle : sharedContext.getBundles())
0:           {
0:             if (appBundle.getSymbolicName().equals("org.apache.aries.sample2"))
0:             {
0:               appContext = ((CompositeBundle)appBundle).getCompositeFramework().getBundleContext();
0:               break;
0:             }
0:           }
0:           break;
0:         }
0:       }
0:       
0:       if (appContext != null) {  
0:         // Dive into the context and pull out the composite bundle for the app
0:         Filter osgiFilter = FrameworkUtil.createFilter("(" + Constants.OBJECTCLASS + "=" + HelloWorld.class.getName() + ")");
0:         ServiceTracker tracker = new ServiceTracker(appContext, 
0:             osgiFilter,
0:             null);
0:         tracker.open();
0:         
0:         Object hw = tracker.waitForService(DEFAULT_TIMEOUT);
0:         
0:         tracker.close();
0:         
0:         // We can cast to our version of HelloWorld as it is in a different classloader
0:         // so reflect into it to get the single method
0:         Class returnClass = hw.getClass();
0:         Method method = returnClass.getDeclaredMethod("getMessage",null);
0:         String result = (String)method.invoke(hw);
0:         assertEquals (result, "hello world");
0:         
0:         
0:       }
0:       else
0:         fail("No service found inside application framework");
0:       
0:     } finally {
0:       ctx.stop();
0:       manager.uninstall(ctx);
0:     }
0:   }
0: 
0:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.repository"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.geronimo.specs","geronimo-jta_1.1_spec"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0: 
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
0: //        waitForFrameworkStartup(),
0: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
0: }
============================================================================