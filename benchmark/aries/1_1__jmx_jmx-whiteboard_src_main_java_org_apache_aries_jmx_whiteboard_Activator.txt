1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.whiteboard;
1:fdf3952: 
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: 
1:fdf3952: import org.osgi.framework.BundleActivator;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.InvalidSyntaxException;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.util.tracker.ServiceTracker;
1:fdf3952: 
1:fdf3952: public class Activator implements BundleActivator {
1:fdf3952: 
1:fdf3952:     private JmxWhiteboardSupport jmxWhiteBoard;
1:fdf3952: 
1:fdf3952:     private ServiceTracker mbeanServerTracker;
1:fdf3952: 
1:fdf3952:     private ServiceTracker mbeanTracker;
1:fdf3952: 
1:fdf3952:     public void start(BundleContext context) throws Exception {
1:fdf3952:         jmxWhiteBoard = new JmxWhiteboardSupport();
1:fdf3952: 
1:fdf3952:         mbeanServerTracker = new MBeanServerTracker(context);
1:fdf3952:         mbeanServerTracker.open();
1:fdf3952: 
1:fdf3952:         mbeanTracker = new MBeanTracker(context);
1:fdf3952:         mbeanTracker.open(true);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public void stop(BundleContext context) throws Exception {
1:fdf3952:         if (mbeanTracker != null) {
1:fdf3952:             mbeanTracker.close();
1:fdf3952:             mbeanTracker = null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         if (mbeanServerTracker != null) {
1:fdf3952:             mbeanServerTracker.close();
1:fdf3952:             mbeanServerTracker = null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         jmxWhiteBoard = null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private class MBeanServerTracker extends ServiceTracker {
1:fdf3952: 
1:fdf3952:         public MBeanServerTracker(BundleContext context) {
1:fdf3952:             super(context, MBeanServer.class.getName(), null);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         @Override
1:fdf3952:         public Object addingService(ServiceReference reference) {
1:fdf3952:             MBeanServer mbeanServer = (MBeanServer) super.addingService(reference);
1:fdf3952:             jmxWhiteBoard.addMBeanServer(mbeanServer);
1:fdf3952:             return mbeanServer;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         @Override
1:fdf3952:         public void removedService(ServiceReference reference, Object service) {
1:fdf3952:             if (service instanceof MBeanServer) {
1:fdf3952:                 jmxWhiteBoard.removeMBeanServer((MBeanServer) service);
1:fdf3952:             }
1:fdf3952:             super.removedService(reference, service);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private class MBeanTracker extends ServiceTracker {
1:fdf3952: 
1:fdf3952:         /**
1:fdf3952:          * Listens for any services registered with a "jmx.objectname" service
1:fdf3952:          * property. If the property is not a non-empty String object the service
1:fdf3952:          * is expected to implement the MBeanRegistration interface to create
1:fdf3952:          * the name dynamically.
1:fdf3952:          */
1:fdf3952:         private static final String SIMPLE_MBEAN_FILTER = "("
1:fdf3952:             + JmxWhiteboardSupport.PROP_OBJECT_NAME+ "=*)";
1:fdf3952: 
1:fdf3952:         public MBeanTracker(BundleContext context)
1:fdf3952:                 throws InvalidSyntaxException {
1:fdf3952:             super(context, context.createFilter(SIMPLE_MBEAN_FILTER), null);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         @Override
1:fdf3952:         public Object addingService(ServiceReference reference) {
1:fdf3952:             Object mbean = super.addingService(reference);
1:fdf3952:             jmxWhiteBoard.registerMBean(mbean, reference);
1:fdf3952:             return mbean;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         @Override
1:fdf3952:         public void removedService(ServiceReference reference, Object service) {
1:fdf3952:             jmxWhiteBoard.unregisterMBean(service);
1:fdf3952:             super.removedService(reference, service);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.whiteboard;
1: 
1: import javax.management.MBeanServer;
1: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class Activator implements BundleActivator {
1: 
1:     private JmxWhiteboardSupport jmxWhiteBoard;
1: 
1:     private ServiceTracker mbeanServerTracker;
1: 
1:     private ServiceTracker mbeanTracker;
1: 
1:     public void start(BundleContext context) throws Exception {
1:         jmxWhiteBoard = new JmxWhiteboardSupport();
1: 
1:         mbeanServerTracker = new MBeanServerTracker(context);
1:         mbeanServerTracker.open();
1: 
1:         mbeanTracker = new MBeanTracker(context);
1:         mbeanTracker.open(true);
1:     }
1: 
1:     public void stop(BundleContext context) throws Exception {
1:         if (mbeanTracker != null) {
1:             mbeanTracker.close();
1:             mbeanTracker = null;
1:         }
1: 
1:         if (mbeanServerTracker != null) {
1:             mbeanServerTracker.close();
1:             mbeanServerTracker = null;
1:         }
1: 
1:         jmxWhiteBoard = null;
1:     }
1: 
1:     private class MBeanServerTracker extends ServiceTracker {
1: 
1:         public MBeanServerTracker(BundleContext context) {
1:             super(context, MBeanServer.class.getName(), null);
1:         }
1: 
1:         @Override
1:         public Object addingService(ServiceReference reference) {
1:             MBeanServer mbeanServer = (MBeanServer) super.addingService(reference);
1:             jmxWhiteBoard.addMBeanServer(mbeanServer);
1:             return mbeanServer;
1:         }
1: 
1:         @Override
1:         public void removedService(ServiceReference reference, Object service) {
1:             if (service instanceof MBeanServer) {
1:                 jmxWhiteBoard.removeMBeanServer((MBeanServer) service);
1:             }
1:             super.removedService(reference, service);
1:         }
1:     }
1: 
1:     private class MBeanTracker extends ServiceTracker {
1: 
1:         /**
1:          * Listens for any services registered with a "jmx.objectname" service
1:          * property. If the property is not a non-empty String object the service
1:          * is expected to implement the MBeanRegistration interface to create
1:          * the name dynamically.
1:          */
1:         private static final String SIMPLE_MBEAN_FILTER = "("
1:             + JmxWhiteboardSupport.PROP_OBJECT_NAME+ "=*)";
1: 
1:         public MBeanTracker(BundleContext context)
1:                 throws InvalidSyntaxException {
1:             super(context, context.createFilter(SIMPLE_MBEAN_FILTER), null);
1:         }
1: 
1:         @Override
1:         public Object addingService(ServiceReference reference) {
1:             Object mbean = super.addingService(reference);
1:             jmxWhiteBoard.registerMBean(mbean, reference);
1:             return mbean;
1:         }
1: 
1:         @Override
1:         public void removedService(ServiceReference reference, Object service) {
1:             jmxWhiteBoard.unregisterMBean(service);
1:             super.removedService(reference, service);
1:         }
1:     }
1: }
============================================================================