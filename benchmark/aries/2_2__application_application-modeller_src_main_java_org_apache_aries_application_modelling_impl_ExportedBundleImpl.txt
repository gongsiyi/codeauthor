1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.impl;
1:4fec049: 
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:4fec049: 
1:4fec049: import java.util.Collections;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.Map;
1:4fec049: import java.util.jar.Attributes;
1:4fec049: 
1:89f804e: import org.apache.aries.application.InvalidAttributeException;
1:4fec049: import org.apache.aries.application.modelling.ImportedBundle;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:4fec049: import org.apache.aries.application.modelling.internal.MessageUtil;
1:58f55bd: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.osgi.framework.Version;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:4fec049: 
1:4fec049: /**
1:4fec049:  * An exported bundle: one that I have and make available.  
1:4fec049:  */
1:4fec049: public class ExportedBundleImpl extends AbstractExportedBundle
1:4fec049: {
1:4fec049:   private static final Logger logger = LoggerFactory.getLogger(ExportedBundleImpl.class);
1:4fec049:   private final Map<String, Object> _attributes;
1:4fec049:   private final ImportedBundle _fragHost;
1:4fec049:     
1:4fec049:   /**
1:4fec049:    * Construct an ExportedBundleImpl from a processed Manifest
1:4fec049:    * @param attrs
1:4fec049:    * @throws InvalidAttributeException
1:4fec049:    */
1:4fec049:   public ExportedBundleImpl (Attributes attrs) throws InvalidAttributeException { 
1:4fec049:     logger.debug(LOG_ENTRY, "ExportedBundleImpl", attrs);
1:4fec049:     String symbolicName = attrs.getValue(Constants.BUNDLE_SYMBOLICNAME);
1:4fec049:     
1:de5b346:     Map<String,Map<String, String>> map = ManifestHeaderProcessor.parseImportString(symbolicName);
1:4fec049:     
1:4fec049:     //This should have one entry, which is keyed on the symbolicName
1:4fec049:     
1:4fec049:     if(map.size() != 1) {
1:4fec049:       InvalidAttributeException iax = new InvalidAttributeException (MessageUtil.getMessage(
1:4fec049:           "TOO_MANY_SYM_NAMES", new Object[] {symbolicName}));
1:4fec049:       logger.debug(LOG_EXIT, "ExportedBundleImpl", iax);
1:4fec049:       throw iax;
1:4fec049:     }
1:4fec049:     
1:de5b346:     Map.Entry<String, Map<String, String>> entry =  map.entrySet().iterator().next();
1:4fec049:     
1:4fec049:     symbolicName = entry.getKey();
1:4fec049:     
1:4fec049:     Map<String, String> bundleAttrs = entry.getValue();
1:4fec049:     
1:4fec049:     String displayName = attrs.getValue(Constants.BUNDLE_NAME);
1:4fec049:     String version = attrs.getValue(Constants.BUNDLE_VERSION);
1:4fec049:     if (version == null) { 
1:4fec049:       version = Version.emptyVersion.toString();
1:4fec049:     }
1:4fec049:     String bmVersion = attrs.getValue(Constants.BUNDLE_MANIFESTVERSION);
1:4fec049:     if (symbolicName == null || bmVersion == null) { 
1:4fec049:       InvalidAttributeException iax = new InvalidAttributeException(MessageUtil.getMessage("INCORRECT_MANDATORY_HEADERS", 
1:4fec049:           new Object[] {symbolicName, bmVersion}));
1:4fec049:       logger.debug(LOG_EXIT, "ExportedBundleImpl", iax);
1:4fec049:       throw iax;
1:4fec049:     }
1:4fec049: 
1:4fec049:     if(bundleAttrs != null)
1:4fec049:       _attributes = new HashMap<String, Object>(entry.getValue());
1:4fec049:     else
1:4fec049:       _attributes = new HashMap<String, Object>();
1:4fec049: 
1:4fec049:     _attributes.put (Constants.BUNDLE_MANIFESTVERSION, bmVersion);
1:4fec049:     _attributes.put(ModellingConstants.OBR_SYMBOLIC_NAME, symbolicName);
1:4fec049:     _attributes.put (Constants.VERSION_ATTRIBUTE, version);
1:4fec049:     
1:4fec049:     if(displayName != null)
1:4fec049:       _attributes.put(ModellingConstants.OBR_PRESENTATION_NAME, displayName);
1:4fec049:     
1:4fec049:     String fragmentHost = attrs.getValue(Constants.FRAGMENT_HOST);
1:4fec049:     if (fragmentHost != null) { 
1:58f55bd:       _fragHost = ModellingHelperImpl.buildFragmentHost_(fragmentHost);
1:4fec049:       _attributes.put(Constants.FRAGMENT_HOST, fragmentHost);
1:4fec049:     } else { 
1:4fec049:       _fragHost = null;
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "ExportedBundleImpl");
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Construct a bundle from attributes and a fragment host
1:4fec049:    * @param attributes attributes describing the bundle
1:4fec049:    * @param fragHost may be null if this bundle is not a fragment
1:4fec049:    */
1:4fec049:   public ExportedBundleImpl(Map<String, String> attributes, ImportedBundle fragHost) {
1:4fec049:     logger.debug(LOG_ENTRY, "ExportedBundleImpl", new Object[]{attributes, fragHost});
1:4fec049:     _attributes = new HashMap<String, Object>(attributes);
1:4fec049:     _fragHost = fragHost;
1:4fec049:     logger.debug(LOG_EXIT, "ExportedBundleImpl", new Object[]{attributes, fragHost});
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:de5b346:   @Override
1:de5b346: public Map<String, Object> getAttributes() {
1:4fec049:     logger.debug(LOG_ENTRY, "getAttributes");
1:4fec049:     logger.debug(LOG_EXIT, "getAttributes", new Object[]{_attributes});
1:4fec049:     return Collections.unmodifiableMap(_attributes);
1:4fec049:   }
1:4fec049:   
1:4fec049: 
1:de5b346:   @Override
1:de5b346: public String toString() {
1:4fec049:     return  _attributes.toString();
1:4fec049:   }
1:4fec049: 
1:4fec049:  
1:de5b346:   @Override
1:de5b346: public ImportedBundle getFragmentHost() {
1:4fec049:     logger.debug(LOG_ENTRY, "getFragmentHost");
1:4fec049:     logger.debug(LOG_EXIT, "getFragmentHost", new Object[]{_fragHost});
1:4fec049:     return _fragHost;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:de5b346:   @Override
1:de5b346: public boolean isFragment() {
1:4fec049:     logger.debug(LOG_ENTRY, "isFragment");
1:4fec049:     boolean result = _fragHost != null;
1:4fec049:     logger.debug(LOG_EXIT, "isFragment", new Object[]{result});
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Map<String,Map<String, String>> map = ManifestHeaderProcessor.parseImportString(symbolicName);
/////////////////////////////////////////////////////////////////////////
1:     Map.Entry<String, Map<String, String>> entry =  map.entrySet().iterator().next();
/////////////////////////////////////////////////////////////////////////
1:   @Override
1: public Map<String, Object> getAttributes() {
1:   @Override
1: public String toString() {
1:   @Override
1: public ImportedBundle getFragmentHost() {
1:   @Override
1: public boolean isFragment() {
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.InvalidAttributeException;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
1: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
/////////////////////////////////////////////////////////////////////////
1:       _fragHost = ModellingHelperImpl.buildFragmentHost_(fragmentHost);
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.impl;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: 
0: import org.apache.aries.application.management.InvalidAttributeException;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.aries.application.modelling.internal.MessageUtil;
0: import org.apache.aries.application.modelling.utils.ModellingConstants;
0: import org.apache.aries.application.modelling.utils.ModellingUtils;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * An exported bundle: one that I have and make available.  
1:  */
1: public class ExportedBundleImpl extends AbstractExportedBundle
1: {
1:   private static final Logger logger = LoggerFactory.getLogger(ExportedBundleImpl.class);
1:   private final Map<String, Object> _attributes;
1:   private final ImportedBundle _fragHost;
1:     
1:   /**
1:    * Construct an ExportedBundleImpl from a processed Manifest
1:    * @param attrs
1:    * @throws InvalidAttributeException
1:    */
1:   public ExportedBundleImpl (Attributes attrs) throws InvalidAttributeException { 
1:     logger.debug(LOG_ENTRY, "ExportedBundleImpl", attrs);
1:     String symbolicName = attrs.getValue(Constants.BUNDLE_SYMBOLICNAME);
1:     
0:     Map<String,NameValueMap<String, String>> map = ManifestHeaderProcessor.parseImportString(symbolicName);
1:     
1:     //This should have one entry, which is keyed on the symbolicName
1:     
1:     if(map.size() != 1) {
1:       InvalidAttributeException iax = new InvalidAttributeException (MessageUtil.getMessage(
1:           "TOO_MANY_SYM_NAMES", new Object[] {symbolicName}));
1:       logger.debug(LOG_EXIT, "ExportedBundleImpl", iax);
1:       throw iax;
1:     }
1:     
0:     Map.Entry<String, NameValueMap<String, String>> entry =  map.entrySet().iterator().next();
1:     
1:     symbolicName = entry.getKey();
1:     
1:     Map<String, String> bundleAttrs = entry.getValue();
1:     
1:     String displayName = attrs.getValue(Constants.BUNDLE_NAME);
1:     String version = attrs.getValue(Constants.BUNDLE_VERSION);
1:     if (version == null) { 
1:       version = Version.emptyVersion.toString();
1:     }
1:     String bmVersion = attrs.getValue(Constants.BUNDLE_MANIFESTVERSION);
1:     if (symbolicName == null || bmVersion == null) { 
1:       InvalidAttributeException iax = new InvalidAttributeException(MessageUtil.getMessage("INCORRECT_MANDATORY_HEADERS", 
1:           new Object[] {symbolicName, bmVersion}));
1:       logger.debug(LOG_EXIT, "ExportedBundleImpl", iax);
1:       throw iax;
1:     }
1: 
1:     if(bundleAttrs != null)
1:       _attributes = new HashMap<String, Object>(entry.getValue());
1:     else
1:       _attributes = new HashMap<String, Object>();
1: 
1:     _attributes.put (Constants.BUNDLE_MANIFESTVERSION, bmVersion);
1:     _attributes.put(ModellingConstants.OBR_SYMBOLIC_NAME, symbolicName);
1:     _attributes.put (Constants.VERSION_ATTRIBUTE, version);
1:     
1:     if(displayName != null)
1:       _attributes.put(ModellingConstants.OBR_PRESENTATION_NAME, displayName);
1:     
1:     String fragmentHost = attrs.getValue(Constants.FRAGMENT_HOST);
1:     if (fragmentHost != null) { 
0:       _fragHost = ModellingUtils.buildFragmentHost(fragmentHost);
1:       _attributes.put(Constants.FRAGMENT_HOST, fragmentHost);
1:     } else { 
1:       _fragHost = null;
1:     }
1:     logger.debug(LOG_EXIT, "ExportedBundleImpl");
1:   }
1:   
1:   /**
1:    * Construct a bundle from attributes and a fragment host
1:    * @param attributes attributes describing the bundle
1:    * @param fragHost may be null if this bundle is not a fragment
1:    */
1:   public ExportedBundleImpl(Map<String, String> attributes, ImportedBundle fragHost) {
1:     logger.debug(LOG_ENTRY, "ExportedBundleImpl", new Object[]{attributes, fragHost});
1:     _attributes = new HashMap<String, Object>(attributes);
1:     _fragHost = fragHost;
1:     logger.debug(LOG_EXIT, "ExportedBundleImpl", new Object[]{attributes, fragHost});
1:   }
1: 
1: 
0:   public Map<String, Object> getAttributes() {
1:     logger.debug(LOG_ENTRY, "getAttributes");
1:     logger.debug(LOG_EXIT, "getAttributes", new Object[]{_attributes});
1:     return Collections.unmodifiableMap(_attributes);
1:   }
1:   
1: 
0:   public String toString() {
1:     return  _attributes.toString();
1:   }
1: 
1:  
0:   public ImportedBundle getFragmentHost() {
1:     logger.debug(LOG_ENTRY, "getFragmentHost");
1:     logger.debug(LOG_EXIT, "getFragmentHost", new Object[]{_fragHost});
1:     return _fragHost;
1:   }
1: 
1: 
0:   public boolean isFragment() {
1:     logger.debug(LOG_ENTRY, "isFragment");
1:     boolean result = _fragHost != null;
1:     logger.debug(LOG_EXIT, "isFragment", new Object[]{result});
1:     return result;
1:   }
1: }
============================================================================