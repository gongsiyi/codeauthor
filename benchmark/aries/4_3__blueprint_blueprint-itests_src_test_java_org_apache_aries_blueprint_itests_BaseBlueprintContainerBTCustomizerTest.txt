1:370ce47: /*
1:370ce47:  * Licensed to the Apache Software Foundation (ASF) under one
1:370ce47:  * or more contributor license agreements.  See the NOTICE file
1:370ce47:  * distributed with this work for additional information
1:370ce47:  * regarding copyright ownership.  The ASF licenses this file
1:370ce47:  * to you under the Apache License, Version 2.0 (the
1:370ce47:  * "License"); you may not use this file except in compliance
1:370ce47:  * with the License.  You may obtain a copy of the License at
1:370ce47:  *
1:370ce47:  *   http://www.apache.org/licenses/LICENSE-2.0
1:370ce47:  *
1:370ce47:  * Unless required by applicable law or agreed to in writing,
1:370ce47:  * software distributed under the License is distributed on an
1:370ce47:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:370ce47:  * KIND, either express or implied.  See the License for the
1:370ce47:  * specific language governing permissions and limitations
1:370ce47:  * under the License.
1:370ce47:  */
1:370ce47: package org.apache.aries.blueprint.itests;
9:370ce47: 
1:d251156: import java.io.IOException;
1:370ce47: import java.io.InputStream;
1:d251156: import java.net.MalformedURLException;
1:370ce47: import java.net.URL;
1:370ce47: import java.util.HashMap;
1:370ce47: import java.util.Map;
1:370ce47: 
1:354f309: import javax.inject.Inject;
1:354f309: 
1:354f309: import org.junit.Assert;
1:d251156: import org.ops4j.pax.exam.CoreOptions;
1:370ce47: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1:370ce47: import org.osgi.framework.Bundle;
1:370ce47: import org.osgi.framework.BundleContext;
1:d251156: import org.osgi.framework.BundleException;
1:370ce47: import org.osgi.framework.Constants;
1:354f309: import org.osgi.service.framework.CompositeBundle;
1:354f309: import org.osgi.service.framework.CompositeBundleFactory;
1:370ce47: 
1:354f309: @SuppressWarnings("deprecation")
1:d251156: public abstract class BaseBlueprintContainerBTCustomizerTest extends AbstractBlueprintIntegrationTest 
1:370ce47: {
1:354f309: 	@Inject
1:354f309: 	CompositeBundleFactory cbf;
1:354f309: 
1:bc2c036: 	/**
1:bc2c036: 	 * Make sure to adapt the imports and exports to the imports and exports needed by the sample
1:bc2c036: 	 * bundle. If they are wrong then there might be an error like:
1:bc2c036: 	 * composite bundle could not be resolved: bundle was disabled:null
1:bc2c036: 	 * @return
1:bc2c036: 	 */
1:370ce47:     protected Map<String, String> getCompositeManifest() {
1:370ce47:         Map<String, String> compositeManifest = new HashMap<String, String>();
1:370ce47:         compositeManifest.put(Constants.BUNDLE_SYMBOLICNAME, "test-composite");
1:370ce47:         compositeManifest.put(Constants.BUNDLE_VERSION, "1.0.0");
1:370ce47:         // this import-package is used by the blueprint.sample
1:bc2c036:         compositeManifest.put(Constants.IMPORT_PACKAGE, "org.osgi.framework;version=\"[1.6,2)\","
1:bc2c036:         		+ "org.osgi.service.cm,"
1:bc2c036:         		+ "org.osgi.service.blueprint;version=\"[1.0.0,2.0.0)\","
1:bc2c036:         		+ "org.osgi.service.blueprint.container;version=\"[1.0,2)\"");
1:370ce47:         // this export-package is used by pax junit runner as it needs to see the blueprint sample package 
1:370ce47:         // for the test after the blueprint sample is started.
1:bc2c036:         compositeManifest.put(Constants.EXPORT_PACKAGE, "org.apache.aries.blueprint.sample;version=\"1.0.1\"");
1:370ce47:         
1:370ce47:         return compositeManifest;
5:370ce47:     }
1:354f309:     
1:354f309:     protected MavenArtifactProvisionOption configAdminOption() {
1:354f309: 		return CoreOptions.mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject();
1:354f309: 	}
1:d251156:     
1:354f309:     protected Bundle installBundle(BundleContext bundleContext, String url) throws IOException, MalformedURLException, BundleException {
1:d251156:         // let's use input stream to avoid invoking mvn url handler which isn't avail in the child framework.
1:354f309:         InputStream is = new URL(url).openStream();
1:354f309:         Bundle bundle = bundleContext.installBundle(url, is);
1:354f309:         Assert.assertNotNull(bundle);
1:354f309:         return bundle;
1:354f309:     }
1:354f309: 
1:354f309: 	protected CompositeBundle createCompositeBundle() throws BundleException {
1:354f309: 		Map<String, String> frameworkConfig = new HashMap<String, String>();
1:354f309: 	    Map<String, String> compositeManifest = getCompositeManifest();
1:354f309: 	    CompositeBundle cb = cbf.installCompositeBundle(frameworkConfig, "test-composite", compositeManifest);
1:354f309: 		return cb;
1:354f309: 	}
1:d251156: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bc2c036
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Make sure to adapt the imports and exports to the imports and exports needed by the sample
1: 	 * bundle. If they are wrong then there might be an error like:
1: 	 * composite bundle could not be resolved: bundle was disabled:null
1: 	 * @return
1: 	 */
1:         compositeManifest.put(Constants.IMPORT_PACKAGE, "org.osgi.framework;version=\"[1.6,2)\","
1:         		+ "org.osgi.service.cm,"
1:         		+ "org.osgi.service.blueprint;version=\"[1.0.0,2.0.0)\","
1:         		+ "org.osgi.service.blueprint.container;version=\"[1.0,2)\"");
1:         compositeManifest.put(Constants.EXPORT_PACKAGE, "org.apache.aries.blueprint.sample;version=\"1.0.1\"");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:354f309
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: 
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.framework.CompositeBundle;
1: import org.osgi.service.framework.CompositeBundleFactory;
1: @SuppressWarnings("deprecation")
1: 	@Inject
1: 	CompositeBundleFactory cbf;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected MavenArtifactProvisionOption configAdminOption() {
1: 		return CoreOptions.mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject();
1: 	}
/////////////////////////////////////////////////////////////////////////
1:     protected Bundle installBundle(BundleContext bundleContext, String url) throws IOException, MalformedURLException, BundleException {
1:         InputStream is = new URL(url).openStream();
1:         Bundle bundle = bundleContext.installBundle(url, is);
1:         Assert.assertNotNull(bundle);
1:         return bundle;
1: 
0: 	protected MavenArtifactProvisionOption testBundleOption() {
0: 		return CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").versionAsInProject();
1: 	}
1: 
1: 	protected CompositeBundle createCompositeBundle() throws BundleException {
1: 		Map<String, String> frameworkConfig = new HashMap<String, String>();
1: 	    Map<String, String> compositeManifest = getCompositeManifest();
1: 	    CompositeBundle cb = cbf.installCompositeBundle(frameworkConfig, "test-composite", compositeManifest);
1: 		return cb;
1: 	}
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
0:             MavenArtifactProvisionOption cfgAdminOption = CoreOptions.mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject();
/////////////////////////////////////////////////////////////////////////
0:         MavenArtifactProvisionOption mapo = CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").versionAsInProject();
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.osgi.framework.BundleException;
1: public abstract class BaseBlueprintContainerBTCustomizerTest extends AbstractBlueprintIntegrationTest 
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings({ "rawtypes", "unchecked" })
0:             MavenArtifactProvisionOption cfgAdminOption = CoreOptions.mavenBundle("org.apache.felix", "org.apache.felix.configadmin");
/////////////////////////////////////////////////////////////////////////
0:         Hashtable<String, String> props = new Hashtable<String, String>();
1:     
0:     protected Bundle installTestBundle(BundleContext compositeBundleContext) throws IOException, MalformedURLException, BundleException {
0:         // install the blueprint sample onto the framework associated with the composite bundle
0:         MavenArtifactProvisionOption mapo = CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample");
1:         // let's use input stream to avoid invoking mvn url handler which isn't avail in the child framework.
0:         InputStream is = new URL(mapo.getURL()).openStream();
0:         return compositeBundleContext.installBundle(mapo.getURL(), is);
1:     }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:370ce47
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
0: import static org.apache.aries.itest.ExtraOptions.mavenBundleInTest;
1: 
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.HashMap;
0: import java.util.Hashtable;
1: import java.util.Map;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.apache.aries.itest.RichBundleContext;
1: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
0: import org.osgi.util.tracker.ServiceTracker;
1: 
0: public abstract class BaseBlueprintContainerBTCustomizerTest extends AbstractIntegrationTest 
1: {
1:     protected Map<String, String> getCompositeManifest() {
1:         Map<String, String> compositeManifest = new HashMap<String, String>();
1:         compositeManifest.put(Constants.BUNDLE_SYMBOLICNAME, "test-composite");
1:         compositeManifest.put(Constants.BUNDLE_VERSION, "1.0.0");
1:         // this import-package is used by the blueprint.sample
0:         compositeManifest.put(Constants.IMPORT_PACKAGE, "org.osgi.service.blueprint;version=\"[1.0.0,2.0.0)\", org.osgi.service.blueprint.container;version=1.0, org.osgi.service.cm");
1:         // this export-package is used by pax junit runner as it needs to see the blueprint sample package 
1:         // for the test after the blueprint sample is started.
0:         compositeManifest.put(Constants.EXPORT_PACKAGE, "org.apache.aries.blueprint.sample");
1:         
1:         return compositeManifest;
1:     }
1:     
0:     protected Bundle installConfigurationAdmin(BundleContext ctx) throws Exception {
1:         
0:         Bundle configAdminBundle = null;
0:         // make sure we don't have a config admin already present
0:         ServiceTracker tracker = new ServiceTracker(ctx, ctx.createFilter("(" + Constants.OBJECTCLASS + "=" + ConfigurationAdmin.class.getName() + ")"), null);
0:         tracker.open();
0:             Object cfgAdminService = tracker.waitForService(5000);
0:         tracker.close();
1:         
0:         if (cfgAdminService == null) {
0:             MavenArtifactProvisionOption cfgAdminOption = mavenBundleInTest(getClass().getClassLoader(), "org.apache.felix", "org.apache.felix.configadmin");
0:             InputStream cfgAdminStream = new URL(cfgAdminOption.getURL()).openStream();
1:             
0:             configAdminBundle = ctx.installBundle(cfgAdminOption.getURL(), cfgAdminStream);            
1:         }
1: 
0:         return configAdminBundle;
1:     }
1:     
0:     protected void applyCommonConfiguration(BundleContext ctx) throws Exception {
1: 
0:         ConfigurationAdmin ca = (new RichBundleContext(ctx)).getService(ConfigurationAdmin.class);        
0:         Configuration cf = ca.getConfiguration("blueprint-sample-placeholder", null);
0:         Hashtable props = new Hashtable();
0:         props.put("key.b", "10");
0:         cf.update(props);
1:     }
1: }
============================================================================