1:3b4e485: /*
1:3b4e485:  * Licensed to the Apache Software Foundation (ASF) under one
1:3b4e485:  * or more contributor license agreements.  See the NOTICE file
1:3b4e485:  * distributed with this work for additional information
1:3b4e485:  * regarding copyright ownership.  The ASF licenses this file
1:3b4e485:  * to you under the Apache License, Version 2.0 (the
1:3b4e485:  * "License"); you may not use this file except in compliance
1:3b4e485:  * with the License.  You may obtain a copy of the License at
1:3b4e485:  *
1:3b4e485:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3b4e485:  *
1:3b4e485:  * Unless required by applicable law or agreed to in writing,
1:3b4e485:  * software distributed under the License is distributed on an
1:3b4e485:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3b4e485:  * KIND, either express or implied.  See the License for the
1:3b4e485:  * specific language governing permissions and limitations
1:3b4e485:  * under the License.
1:3b4e485:  */
1:3b4e485: package org.apache.aries.subsystem.itests.defect;
1:3b4e485: 
1:3b4e485: import static org.junit.Assert.assertEquals;
1:3b4e485: import static org.junit.Assert.assertFalse;
1:3b4e485: import static org.junit.Assert.assertTrue;
1:3b4e485: import static org.junit.Assert.fail;
1:3b4e485: 
1:3b4e485: import java.io.IOException;
1:3b4e485: import java.util.Collections;
1:3b4e485: import java.util.HashMap;
1:3b4e485: import java.util.Map;
1:3b4e485: 
1:3b4e485: import org.apache.aries.subsystem.core.archive.DeployedContentHeader;
1:3b4e485: import org.apache.aries.subsystem.itests.SubsystemTest;
1:3b4e485: import org.junit.Before;
1:3b4e485: import org.junit.Test;
1:3b4e485: import org.osgi.framework.Bundle;
1:3b4e485: import org.osgi.framework.Constants;
1:3b4e485: import org.osgi.framework.namespace.IdentityNamespace;
1:3b4e485: import org.osgi.service.subsystem.Subsystem;
1:3b4e485: import org.osgi.service.subsystem.SubsystemConstants;
1:3b4e485: import org.osgi.service.subsystem.SubsystemException;
1:3b4e485: 
1:3b4e485: /*
1:3b4e485:  * https://issues.apache.org/jira/browse/ARIES-1425
1:3b4e485:  * 
1:3b4e485:  * Support both osgi.bundle and osgi.fragment resource types when given a 
1:3b4e485:  * Subsystem-Content header clause with an unspecified type attribute.
1:3b4e485:  */
1:3b4e485: public class Aries1425Test extends SubsystemTest {
1:3b4e485:     /*
1:3b4e485:      * Subsystem-SymbolicName: application.a.esa
1:3b4e485:      * Subsystem-Content: bundle.a.jar, bundle.b.jar
1:3b4e485:      * 
1:3b4e485: 	 * Included In Archive
1:3b4e485: 	 * 		bundle.a.fragment.jar
1:3b4e485: 	 * 		bundle.b.jar
1:3b4e485:      */
1:3b4e485:     private static final String APPLICATION_A = "application.a.esa";
1:3b4e485:     /*
1:3b4e485:      * Subsystem-SymbolicName: application.b.esa
1:3b4e485:      * Subsystem-Content: bundle.a.jar
1:3b4e485:      * 
1:3b4e485: 	 * Included In Archive
1:3b4e485: 	 * 		bundle.a.fragment.jar
1:3b4e485: 	 * 		bundle.a.bundle.jar
1:3b4e485:      */
1:3b4e485:     private static final String APPLICATION_B = "application.b.esa";
1:3b4e485:     /*
1:3b4e485:      * Subsystem-SymbolicName: application.c.esa
1:3b4e485:      * Subsystem-Content: bundle.a.jar
1:3b4e485:      */
1:3b4e485:     private static final String APPLICATION_C = "application.c.esa";
1:3b4e485:     /*
1:3b4e485:      * Subsystem-SymbolicName: application.d.esa
1:3b4e485:      * Subsystem-Content: bundle.a.jar, bundle.b.jar
1:3b4e485:      * 
1:3b4e485:      * Included In Archive
1:3b4e485: 	 * 		bundle.a.fragment.jar
1:3b4e485:      */
1:3b4e485:     private static final String APPLICATION_D = "application.d.esa";
1:3b4e485:     
1:3b4e485:     private static final String BUNDLE_A = "bundle.a.jar";
1:3b4e485: 	/*
1:3b4e485: 	 * Bundle-SymbolicName: bundle.a.jar
1:3b4e485: 	 * Fragment-Host: bundle.b.jar
1:3b4e485: 	 */
1:3b4e485: 	private static final String BUNDLE_A_FRAGMENT = "bundle.a.fragment.jar";
1:3b4e485: 	/*
1:3b4e485: 	 * Bundle-SymbolicName: bundle.a.jar
1:3b4e485: 	 */
1:3b4e485: 	private static final String BUNDLE_A_BUNDLE = "bundle.a.bundle.jar";
1:3b4e485: 	/*
1:3b4e485: 	 * Bundle-SymbolicName: bundle.b.jar
1:3b4e485: 	 */
1:3b4e485: 	private static final String BUNDLE_B = "bundle.b.jar";
1:3b4e485: 	
1:3b4e485: 	private static boolean createdTestFiles;
1:3b4e485: 	
1:3b4e485: 	@Before
1:3b4e485: 	public void createTestFiles() throws Exception {
1:3b4e485: 		if (createdTestFiles)
1:3b4e485: 			return;
1:3b4e485: 		createBundleABundle();
1:3b4e485: 		createBundleAFragment();
1:3b4e485: 		createBundleB();
1:3b4e485: 		createApplicationA();
1:3b4e485: 		createApplicationB();
1:3b4e485: 		createApplicationC();
1:3b4e485: 		createApplicationD();
1:3b4e485: 		createdTestFiles = true;
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	private void createBundleABundle() throws IOException {
1:3b4e485: 		Map<String, String> headers = new HashMap<String, String>();
1:3b4e485: 		headers.put(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1:3b4e485: 		createBundle(BUNDLE_A_BUNDLE, Collections.<String>emptyList(), headers);
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	private void createBundleAFragment() throws IOException {
1:3b4e485: 		Map<String, String> headers = new HashMap<String, String>();
1:3b4e485: 		headers.put(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1:3b4e485: 		headers.put(Constants.FRAGMENT_HOST, BUNDLE_B);
1:3b4e485: 		createBundle(BUNDLE_A_FRAGMENT, Collections.<String>emptyList(), headers);
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	private void createBundleB() throws IOException {
1:3b4e485: 		createBundle(name(BUNDLE_B));
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	private static void createApplicationA() throws IOException {
1:3b4e485:         createApplicationAManifest();
1:3b4e485:         createSubsystem(APPLICATION_A, BUNDLE_A_FRAGMENT, BUNDLE_B);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     private static void createApplicationAManifest() throws IOException {
1:3b4e485:         Map<String, String> attributes = new HashMap<String, String>();
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ',' + BUNDLE_B);
1:3b4e485:         createManifest(APPLICATION_A + ".mf", attributes);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     private static void createApplicationB() throws IOException {
1:3b4e485:         createApplicationBManifest();
1:3b4e485:         createSubsystem(APPLICATION_B, BUNDLE_A_FRAGMENT, BUNDLE_A_BUNDLE);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     private static void createApplicationBManifest() throws IOException {
1:3b4e485:         Map<String, String> attributes = new HashMap<String, String>();
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:3b4e485:         createManifest(APPLICATION_B + ".mf", attributes);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     private static void createApplicationC() throws IOException {
1:3b4e485:         createApplicationCManifest();
1:3b4e485:         createSubsystem(APPLICATION_C);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     private static void createApplicationCManifest() throws IOException {
1:3b4e485:         Map<String, String> attributes = new HashMap<String, String>();
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_C);
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:3b4e485:         createManifest(APPLICATION_C + ".mf", attributes);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     private static void createApplicationD() throws IOException {
1:3b4e485:         createApplicationDManifest();
1:3b4e485:         createSubsystem(APPLICATION_D, BUNDLE_A_FRAGMENT);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     private static void createApplicationDManifest() throws IOException {
1:3b4e485:         Map<String, String> attributes = new HashMap<String, String>();
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_D);
1:3b4e485:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:3b4e485:         createManifest(APPLICATION_D + ".mf", attributes);
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     @Test
1:3b4e485:     public void testFragmentSelected() throws Exception {
1:3b4e485:     	try {
1:3b4e485:     		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:3b4e485:     		try {
1:3b4e485:     			assertConstituent(applicationA, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:3b4e485:     		}
1:3b4e485:     		finally {
1:3b4e485:     			uninstallSubsystemSilently(applicationA);
1:3b4e485:     		}
1:3b4e485:     	}
1:3b4e485:     	catch (SubsystemException e) {
1:3b4e485:     		e.printStackTrace();
1:3b4e485:     		fail("Subsystem should have installed");
1:3b4e485:     	}
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     @Test
1:3b4e485:     public void testFragmentResolved() throws Exception {
1:3b4e485:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:3b4e485:     	try {
1:3b4e485:     		applicationA.start();
1:3b4e485:     		try {
1:3b4e485:     			Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:3b4e485:     			assertBundleState(bundleA, Bundle.RESOLVED);
1:3b4e485:     		}
1:3b4e485:     		finally {
1:3b4e485:     			stopSubsystemSilently(applicationA);
1:3b4e485:     		}
1:3b4e485:     	}
1:3b4e485:     	finally {
1:3b4e485:     		uninstallSubsystemSilently(applicationA);
1:3b4e485:     	}
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     @Test
1:3b4e485:     public void testDeployedContentHeader() throws Exception {
1:3b4e485:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:3b4e485:     	try {
1:3b4e485:     		Map<String, String> headers = applicationA.getDeploymentHeaders();
1:3b4e485:     		String header = headers.get(SubsystemConstants.DEPLOYED_CONTENT);
1:3b4e485: 			DeployedContentHeader dch = new DeployedContentHeader(header);
1:3b4e485: 			boolean foundClause = false;
1:3b4e485: 			for (DeployedContentHeader.Clause clause : dch.getClauses()) {
1:3b4e485: 				if (BUNDLE_A.equals(clause.getSymbolicName())) {
1:3b4e485: 					assertEquals("Wrong type", IdentityNamespace.TYPE_FRAGMENT, clause.getType());
1:3b4e485: 					foundClause = true;
1:3b4e485: 					break;
1:3b4e485: 				}
1:3b4e485: 			}
1:3b4e485: 			assertTrue("Missing clause", foundClause);
1:3b4e485:     	}
1:3b4e485:     	finally {
1:3b4e485:     		uninstallSubsystemSilently(applicationA);
1:3b4e485:     	}
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     @Test
1:3b4e485:     public void testProvisionResourceHeader() throws Exception {
1:3b4e485:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:3b4e485:     	try {
1:3b4e485:     		Map<String, String> headers = applicationA.getDeploymentHeaders();
1:3b4e485:     		String header = headers.get(SubsystemConstants.PROVISION_RESOURCE);
1:3b4e485: 			assertFalse("Fragment content treated as dependency", header != null && header.contains(BUNDLE_A));
1:3b4e485:     	}
1:3b4e485:     	finally {
1:3b4e485:     		uninstallSubsystemSilently(applicationA);
1:3b4e485:     	}
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     @Test
1:3b4e485:     public void testBundleSelectedFromLocalRepository() throws Exception {
1:3b4e485:     	Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:3b4e485:     	try {
1:3b4e485:     		assertNotConstituent(applicationB, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:3b4e485:     		assertConstituent(applicationB, BUNDLE_A, null, IdentityNamespace.TYPE_BUNDLE);
1:3b4e485:     	}
1:3b4e485:     	finally {
1:3b4e485:     		uninstallSubsystemSilently(applicationB);
1:3b4e485:     	}
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     @Test
1:3b4e485:     public void testBundleSelectedFromRemoteRepository() throws Exception {
1:3b4e485:     	// Make sure the repository containing the fragment comes first.
1:3b4e485:     	registerRepositoryService(BUNDLE_A_FRAGMENT);
1:3b4e485:     	registerRepositoryService(BUNDLE_A_BUNDLE);
1:3b4e485:     	
1:3b4e485:     	Subsystem applicationC = installSubsystemFromFile(APPLICATION_C);
1:3b4e485:     	try {
1:3b4e485:     		assertNotConstituent(applicationC, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:3b4e485:     		assertConstituent(applicationC, BUNDLE_A, null, IdentityNamespace.TYPE_BUNDLE);
1:3b4e485:     	}
1:3b4e485:     	finally {
1:3b4e485:     		uninstallSubsystemSilently(applicationC);
1:3b4e485:     	}
1:3b4e485:     }
1:3b4e485:     
1:3b4e485:     @Test
1:3b4e485:     public void testFragmentFromLocalRepoSelectedBeforeBundleRemoteRepository() throws Exception {
1:3b4e485:     	registerRepositoryService(BUNDLE_A_BUNDLE, BUNDLE_B);
1:3b4e485:     	Subsystem applicationD = installSubsystemFromFile(APPLICATION_D);
1:3b4e485:     	try {
1:3b4e485:     		assertNotConstituent(applicationD, BUNDLE_A, null, IdentityNamespace.TYPE_BUNDLE);
1:3b4e485:     		assertConstituent(applicationD, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:3b4e485:     	}
1:3b4e485:     	finally {
1:3b4e485:     		uninstallSubsystemSilently(applicationD);
1:3b4e485:     	}
1:3b4e485:     }
1:3b4e485: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3b4e485
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.archive.DeployedContentHeader;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1425
1:  * 
1:  * Support both osgi.bundle and osgi.fragment resource types when given a 
1:  * Subsystem-Content header clause with an unspecified type attribute.
1:  */
1: public class Aries1425Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * Subsystem-Content: bundle.a.jar, bundle.b.jar
1:      * 
1: 	 * Included In Archive
1: 	 * 		bundle.a.fragment.jar
1: 	 * 		bundle.b.jar
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: application.b.esa
1:      * Subsystem-Content: bundle.a.jar
1:      * 
1: 	 * Included In Archive
1: 	 * 		bundle.a.fragment.jar
1: 	 * 		bundle.a.bundle.jar
1:      */
1:     private static final String APPLICATION_B = "application.b.esa";
1:     /*
1:      * Subsystem-SymbolicName: application.c.esa
1:      * Subsystem-Content: bundle.a.jar
1:      */
1:     private static final String APPLICATION_C = "application.c.esa";
1:     /*
1:      * Subsystem-SymbolicName: application.d.esa
1:      * Subsystem-Content: bundle.a.jar, bundle.b.jar
1:      * 
1:      * Included In Archive
1: 	 * 		bundle.a.fragment.jar
1:      */
1:     private static final String APPLICATION_D = "application.d.esa";
1:     
1:     private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Fragment-Host: bundle.b.jar
1: 	 */
1: 	private static final String BUNDLE_A_FRAGMENT = "bundle.a.fragment.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A_BUNDLE = "bundle.a.bundle.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleABundle();
1: 		createBundleAFragment();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createApplicationB();
1: 		createApplicationC();
1: 		createApplicationD();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleABundle() throws IOException {
1: 		Map<String, String> headers = new HashMap<String, String>();
1: 		headers.put(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1: 		createBundle(BUNDLE_A_BUNDLE, Collections.<String>emptyList(), headers);
1: 	}
1: 	
1: 	private void createBundleAFragment() throws IOException {
1: 		Map<String, String> headers = new HashMap<String, String>();
1: 		headers.put(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1: 		headers.put(Constants.FRAGMENT_HOST, BUNDLE_B);
1: 		createBundle(BUNDLE_A_FRAGMENT, Collections.<String>emptyList(), headers);
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B));
1: 	}
1: 	
1: 	private static void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A_FRAGMENT, BUNDLE_B);
1:     }
1:     
1:     private static void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ',' + BUNDLE_B);
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     private static void createApplicationB() throws IOException {
1:         createApplicationBManifest();
1:         createSubsystem(APPLICATION_B, BUNDLE_A_FRAGMENT, BUNDLE_A_BUNDLE);
1:     }
1:     
1:     private static void createApplicationBManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:         createManifest(APPLICATION_B + ".mf", attributes);
1:     }
1:     
1:     private static void createApplicationC() throws IOException {
1:         createApplicationCManifest();
1:         createSubsystem(APPLICATION_C);
1:     }
1:     
1:     private static void createApplicationCManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_C);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:         createManifest(APPLICATION_C + ".mf", attributes);
1:     }
1:     
1:     private static void createApplicationD() throws IOException {
1:         createApplicationDManifest();
1:         createSubsystem(APPLICATION_D, BUNDLE_A_FRAGMENT);
1:     }
1:     
1:     private static void createApplicationDManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_D);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:         createManifest(APPLICATION_D + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testFragmentSelected() throws Exception {
1:     	try {
1:     		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     		try {
1:     			assertConstituent(applicationA, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:     		}
1:     		finally {
1:     			uninstallSubsystemSilently(applicationA);
1:     		}
1:     	}
1:     	catch (SubsystemException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystem should have installed");
1:     	}
1:     }
1:     
1:     @Test
1:     public void testFragmentResolved() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		applicationA.start();
1:     		try {
1:     			Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:     			assertBundleState(bundleA, Bundle.RESOLVED);
1:     		}
1:     		finally {
1:     			stopSubsystemSilently(applicationA);
1:     		}
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testDeployedContentHeader() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		Map<String, String> headers = applicationA.getDeploymentHeaders();
1:     		String header = headers.get(SubsystemConstants.DEPLOYED_CONTENT);
1: 			DeployedContentHeader dch = new DeployedContentHeader(header);
1: 			boolean foundClause = false;
1: 			for (DeployedContentHeader.Clause clause : dch.getClauses()) {
1: 				if (BUNDLE_A.equals(clause.getSymbolicName())) {
1: 					assertEquals("Wrong type", IdentityNamespace.TYPE_FRAGMENT, clause.getType());
1: 					foundClause = true;
1: 					break;
1: 				}
1: 			}
1: 			assertTrue("Missing clause", foundClause);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testProvisionResourceHeader() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		Map<String, String> headers = applicationA.getDeploymentHeaders();
1:     		String header = headers.get(SubsystemConstants.PROVISION_RESOURCE);
1: 			assertFalse("Fragment content treated as dependency", header != null && header.contains(BUNDLE_A));
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testBundleSelectedFromLocalRepository() throws Exception {
1:     	Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:     	try {
1:     		assertNotConstituent(applicationB, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:     		assertConstituent(applicationB, BUNDLE_A, null, IdentityNamespace.TYPE_BUNDLE);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationB);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testBundleSelectedFromRemoteRepository() throws Exception {
1:     	// Make sure the repository containing the fragment comes first.
1:     	registerRepositoryService(BUNDLE_A_FRAGMENT);
1:     	registerRepositoryService(BUNDLE_A_BUNDLE);
1:     	
1:     	Subsystem applicationC = installSubsystemFromFile(APPLICATION_C);
1:     	try {
1:     		assertNotConstituent(applicationC, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:     		assertConstituent(applicationC, BUNDLE_A, null, IdentityNamespace.TYPE_BUNDLE);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationC);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testFragmentFromLocalRepoSelectedBeforeBundleRemoteRepository() throws Exception {
1:     	registerRepositoryService(BUNDLE_A_BUNDLE, BUNDLE_B);
1:     	Subsystem applicationD = installSubsystemFromFile(APPLICATION_D);
1:     	try {
1:     		assertNotConstituent(applicationD, BUNDLE_A, null, IdentityNamespace.TYPE_BUNDLE);
1:     		assertConstituent(applicationD, BUNDLE_A, null, IdentityNamespace.TYPE_FRAGMENT);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationD);
1:     	}
1:     }
1: }
============================================================================