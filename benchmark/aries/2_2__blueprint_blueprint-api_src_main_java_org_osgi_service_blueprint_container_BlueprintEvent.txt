1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.container;
1:f13c6ac: 
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * A Blueprint Event.
1:f13c6ac:  *
1:f13c6ac:  * <p>
1:f13c6ac:  * <code>BlueprintEvent</code> objects are delivered to all registered
1:f13c6ac:  * {@link BlueprintListener} services. Blueprint Events must be asynchronously
1:f13c6ac:  * delivered in chronological order with respect to each listener.
1:f13c6ac:  *
1:f13c6ac:  * <p>
1:f13c6ac:  * In addition, after a Blueprint Listener is registered, the Blueprint extender
1:f13c6ac:  * will synchronously send to this Blueprint Listener the last Blueprint Event
1:f13c6ac:  * for each ready Blueprint bundle managed by this extender. This
1:f13c6ac:  * <em>replay</em> of Blueprint Events is designed so that the new Blueprint
1:f13c6ac:  * Listener can be informed of the state of each Blueprint bundle. Blueprint
1:f13c6ac:  * Events sent during this replay will have the {@link #isReplay()} flag set.
1:f13c6ac:  * The Blueprint extender must ensure that this replay phase does not interfere
1:f13c6ac:  * with new Blueprint Events so that the chronological order of all Blueprint
1:f13c6ac:  * Events received by the Blueprint Listener is preserved. If the last Blueprint
1:f13c6ac:  * Event for a given Blueprint bundle is {@link #DESTROYED}, the extender must
1:f13c6ac:  * not send it during this replay phase.
1:f13c6ac:  *
1:f13c6ac:  * <p>
1:f13c6ac:  * A type code is used to identify the type of event. The following event types
1:f13c6ac:  * are defined:
1:f13c6ac:  * <ul>
1:f13c6ac:  * <li>{@link #CREATING}</li>
1:f13c6ac:  * <li>{@link #CREATED}</li>
1:f13c6ac:  * <li>{@link #DESTROYING}</li>
1:f13c6ac:  * <li>{@link #DESTROYED}</li>
1:f13c6ac:  * <li>{@link #FAILURE}</li>
1:f13c6ac:  * <li>{@link #GRACE_PERIOD}</li>
1:f13c6ac:  * <li>{@link #WAITING}</li>
1:f13c6ac:  * </ul>
1:f13c6ac:  *
1:f13c6ac:  * <p>
1:f13c6ac:  * In addition to calling the registered {@link BlueprintListener} services, the
1:f13c6ac:  * Blueprint extender must also send those events to the Event Admin service, if
1:f13c6ac:  * it is available.
1:f13c6ac:  *
1:f13c6ac:  * @see BlueprintListener
1:f13c6ac:  * @see EventConstants
1:f13c6ac:  * @Immutable
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public class BlueprintEvent {
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint extender has started creating a Blueprint Container for the
1:f13c6ac: 	 * bundle.
1:f13c6ac: 	 */
1:f13c6ac: 	public static final int	CREATING		= 1;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint extender has created a Blueprint Container for the bundle.
1:f13c6ac: 	 * This event is sent after the Blueprint Container has been registered as a
1:f13c6ac: 	 * service.
1:f13c6ac: 	 */
1:f13c6ac: 	public static final int	CREATED			= 2;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint extender has started destroying the Blueprint Container for
1:f13c6ac: 	 * the bundle.
1:f13c6ac: 	 */
1:f13c6ac: 	public static final int	DESTROYING		= 3;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint Container for the bundle has been completely destroyed.
1:f13c6ac: 	 * This event is sent after the Blueprint Container has been unregistered as
1:f13c6ac: 	 * a service.
1:f13c6ac: 	 */
1:f13c6ac: 	public static final int	DESTROYED		= 4;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint Container creation for the bundle has failed. If this event
1:f13c6ac: 	 * is sent after a timeout in the Grace Period, the
1:f13c6ac: 	 * {@link #getDependencies()} method must return an array of missing
1:f13c6ac: 	 * mandatory dependencies. The event must also contain the cause of the
1:f13c6ac: 	 * failure as a <code>Throwable</code> through the {@link #getCause()}
1:f13c6ac: 	 * method.
1:f13c6ac: 	 */
1:f13c6ac: 	public static final int	FAILURE			= 5;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint Container has entered the grace period. The list of missing
1:f13c6ac: 	 * dependencies must be made available through the
1:f13c6ac: 	 * {@link #getDependencies()} method. During the grace period, a
1:f13c6ac: 	 * {@link #GRACE_PERIOD} event is sent each time the set of unsatisfied
1:f13c6ac: 	 * dependencies changes.
1:f13c6ac: 	 */
1:f13c6ac: 	public static final int	GRACE_PERIOD	= 6;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint Container is waiting on the availability of a service to
1:f13c6ac: 	 * satisfy an invocation on a referenced service. The missing dependency
1:f13c6ac: 	 * must be made available through the {@link #getDependencies()} method
1:f13c6ac: 	 * which will return an array containing one filter object as a String.
1:f13c6ac: 	 */
1:f13c6ac: 	public static final int	WAITING			= 7;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Type of this event.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @see #getType()
1:f13c6ac: 	 */
1:f13c6ac: 	private final int		type;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The time when the event occurred.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @see #getTimestamp()
1:f13c6ac: 	 */
1:f13c6ac: 	private final long		timestamp;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint bundle.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @see #getBundle()
1:f13c6ac: 	 */
1:f13c6ac: 	private final Bundle	bundle;
1:f13c6ac: 	/**
1:f13c6ac: 	 * The Blueprint extender bundle.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @see #getExtenderBundle()
1:f13c6ac: 	 */
1:f13c6ac: 	private final Bundle	extenderBundle;
1:f13c6ac: 	/**
1:f13c6ac: 	 * An array containing filters identifying the missing dependencies. Must
1:f13c6ac: 	 * not be <code>null</code> when the event type requires it.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @see #getDependencies()
1:f13c6ac: 	 */
1:f13c6ac: 	private final String[]	dependencies;
1:f13c6ac: 	/**
1:f13c6ac: 	 * Cause of the failure.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @see #getCause()
1:f13c6ac: 	 */
1:f13c6ac: 	private final Throwable	cause;
1:f13c6ac: 	/**
1:f13c6ac: 	 * Indicate if this event is a replay event or not.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @see #isReplay()
1:f13c6ac: 	 */
1:f13c6ac: 	private final boolean	replay;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Create a simple <code>BlueprintEvent</code> object.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @param type The type of this event.
1:f13c6ac: 	 * @param bundle The Blueprint bundle associated with this event. This
1:f13c6ac: 	 *        parameter must not be <code>null</code>.
1:f13c6ac: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1:f13c6ac: 	 *        this event. This parameter must not be <code>null</code>.
1:f13c6ac: 	 */
1:f13c6ac: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle) {
1:f13c6ac: 		this(type, bundle, extenderBundle, null, null);
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Create a <code>BlueprintEvent</code> object associated with a set of
1:f13c6ac: 	 * dependencies.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @param type The type of this event.
1:f13c6ac: 	 * @param bundle The Blueprint bundle associated with this event. This
1:f13c6ac: 	 *        parameter must not be <code>null</code>.
1:f13c6ac: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1:f13c6ac: 	 *        this event. This parameter must not be <code>null</code>.
1:f13c6ac: 	 * @param dependencies An array of <code>String</code> filters for each
1:f13c6ac: 	 *        dependency associated with this event. Must be a non-empty array
1:f13c6ac: 	 *        for event types {@link #FAILURE}, {@link #GRACE_PERIOD} and
1:f13c6ac: 	 *        {@link #WAITING}. Must be <code>null</code> for other event types.
1:f13c6ac: 	 */
1:f13c6ac: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle,
1:f13c6ac: 			String[] dependencies) {
1:f13c6ac: 		this(type, bundle, extenderBundle, dependencies, null);
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Create a <code>BlueprintEvent</code> object associated with a failure
1:f13c6ac: 	 * cause.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @param type The type of this event.
1:f13c6ac: 	 * @param bundle The Blueprint bundle associated with this event. This
1:f13c6ac: 	 *        parameter must not be <code>null</code>.
1:f13c6ac: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1:f13c6ac: 	 *        this event. This parameter must not be <code>null</code>.
1:f13c6ac: 	 * @param cause A <code>Throwable</code> object describing the root cause of
1:f13c6ac: 	 *        the event. May be <code>null</code>.
1:f13c6ac: 	 */
1:f13c6ac: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle,
1:f13c6ac: 			Throwable cause) {
1:f13c6ac: 		this(type, bundle, extenderBundle, null, cause);
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Create a <code>BlueprintEvent</code> object associated with a failure
1:f13c6ac: 	 * cause and a set of dependencies.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @param type The type of this event.
1:f13c6ac: 	 * @param bundle The Blueprint bundle associated with this event. This
1:f13c6ac: 	 *        parameter must not be <code>null</code>.
1:f13c6ac: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1:f13c6ac: 	 *        this event. This parameter must not be <code>null</code>.
1:f13c6ac: 	 * @param dependencies An array of <code>String</code> filters for each
1:f13c6ac: 	 *        dependency associated with this event. Must be a non-empty array
1:f13c6ac: 	 *        for event types {@link #GRACE_PERIOD} and	(@link #WAITING}.  It
1:f13c6ac: 	 *        is optional for {@link #FAILURE} event types.
1:f13c6ac: 	 *        Must be <code>null</code> for other event types.
1:f13c6ac: 	 * @param cause A <code>Throwable</code> object describing the root cause of
1:f13c6ac: 	 *        this event. May be <code>null</code>.
1:f13c6ac: 	 */
1:f13c6ac: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle,
1:f13c6ac: 			String[] dependencies, Throwable cause) {
1:f13c6ac: 		this.type = type;
1:f13c6ac: 		this.timestamp = System.currentTimeMillis();
1:f13c6ac: 		this.bundle = bundle;
1:f13c6ac: 		this.extenderBundle = extenderBundle;
1:808a497: 	    this.dependencies = dependencies == null ? null
1:808a497:                         : (String[]) dependencies.clone();;
1:f13c6ac: 		this.cause = cause;
1:f13c6ac: 		this.replay = false;
1:f13c6ac: 		if (bundle == null) {
1:f13c6ac: 			throw new NullPointerException("bundle must not be null");
1:f13c6ac: 		}
1:f13c6ac: 		if (extenderBundle == null) {
1:f13c6ac: 			throw new NullPointerException("extenderBundle must not be null");
1:f13c6ac: 		}
1:f13c6ac: 		switch (type) {
1:f13c6ac: 			case WAITING :
1:f13c6ac: 			case GRACE_PERIOD :
1:f13c6ac: 				if (dependencies == null) {
1:f13c6ac: 					throw new NullPointerException(
1:f13c6ac: 							"dependencies must not be null");
1:f13c6ac: 				}
1:f13c6ac: 				if (dependencies.length == 0) {
1:f13c6ac: 					throw new IllegalArgumentException(
1:f13c6ac: 							"dependencies must not be length zero");
1:f13c6ac: 				}
1:f13c6ac: 				break;
1:f13c6ac: 			case FAILURE :
1:f13c6ac: 				// not all FAILURE events have a dependency list, but if there
1:f13c6ac: 				// is one, it must be non-empty.
1:f13c6ac: 				if (dependencies != null) {
1:f13c6ac:      				if (dependencies.length == 0) {
1:f13c6ac:      					throw new IllegalArgumentException(
1:f13c6ac:      							"dependencies must not be length zero");
1:f13c6ac:      				}
1:f13c6ac: 				}
1:f13c6ac: 				break;
1:f13c6ac: 			default :
1:f13c6ac: 				if (dependencies != null) {
1:f13c6ac: 					throw new IllegalArgumentException(
1:f13c6ac: 							"dependencies must be null");
1:f13c6ac: 				}
1:f13c6ac: 				break;
1:f13c6ac: 		}
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Create a new <code>BlueprintEvent</code> from the specified
1:f13c6ac: 	 * <code>BlueprintEvent</code>. The <code>timestamp</code> property will be
1:f13c6ac: 	 * copied from the original event and only the replay property will be
1:f13c6ac: 	 * overridden with the given value.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @param event The original <code>BlueprintEvent</code> to copy. Must not
1:f13c6ac: 	 *        be <code>null</code>.
1:f13c6ac: 	 * @param replay <code>true</code> if this event should be used as a replay
1:f13c6ac: 	 *        event.
1:f13c6ac: 	 */
1:f13c6ac: 	public BlueprintEvent(BlueprintEvent event, boolean replay) {
1:f13c6ac: 		this.type = event.type;
1:f13c6ac: 		this.timestamp = event.timestamp;
1:f13c6ac: 		this.bundle = event.bundle;
1:f13c6ac: 		this.extenderBundle = event.extenderBundle;
1:f13c6ac: 		this.dependencies = event.dependencies;
1:f13c6ac: 		this.cause = event.cause;
1:f13c6ac: 		this.replay = replay;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the type of this event.
1:f13c6ac: 	 * <p>
1:f13c6ac: 	 * The type values are:
1:f13c6ac: 	 * <ul>
1:f13c6ac: 	 * <li>{@link #CREATING}</li>
1:f13c6ac: 	 * <li>{@link #CREATED}</li>
1:f13c6ac: 	 * <li>{@link #DESTROYING}</li>
1:f13c6ac: 	 * <li>{@link #DESTROYED}</li>
1:f13c6ac: 	 * <li>{@link #FAILURE}</li>
1:f13c6ac: 	 * <li>{@link #GRACE_PERIOD}</li>
1:f13c6ac: 	 * <li>{@link #WAITING}</li>
1:f13c6ac: 	 * </ul>
1:f13c6ac: 	 *
1:f13c6ac: 	 * @return The type of this event.
1:f13c6ac: 	 */
1:f13c6ac: 	public int getType() {
1:f13c6ac: 		return type;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the time at which this event was created.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @return The time at which this event was created.
1:f13c6ac: 	 */
1:f13c6ac: 	public long getTimestamp() {
1:f13c6ac: 		return timestamp;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the Blueprint bundle associated with this event.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @return The Blueprint bundle associated with this event.
1:f13c6ac: 	 */
1:f13c6ac: 	public Bundle getBundle() {
1:f13c6ac: 		return bundle;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the Blueprint extender bundle that is generating this event.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @return The Blueprint extender bundle that is generating this event.
1:f13c6ac: 	 */
1:f13c6ac: 	public Bundle getExtenderBundle() {
1:f13c6ac: 		return extenderBundle;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the filters identifying the missing dependencies that caused this
1:f13c6ac: 	 * event.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @return The filters identifying the missing dependencies that caused this
1:f13c6ac: 	 *         event if the event type is one of {@link #WAITING},
1:f13c6ac: 	 *         {@link #GRACE_PERIOD} or {@link #FAILURE} or <code>null</code>
1:f13c6ac: 	 *         for the other event types.
1:f13c6ac: 	 */
1:f13c6ac: 	public String[] getDependencies() {
1:f13c6ac: 		return dependencies == null ? null : (String[]) dependencies.clone();
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the cause for this {@link #FAILURE} event.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @return The cause of the failure for this event. May be <code>null</code>
1:f13c6ac: 	 *         .
1:f13c6ac: 	 */
1:f13c6ac: 	public Throwable getCause() {
1:f13c6ac: 		return cause;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return whether this event is a replay event.
1:f13c6ac: 	 *
1:f13c6ac: 	 * @return <code>true</code> if this event is a replay event and
1:f13c6ac: 	 *         <code>false</code> otherwise.
1:f13c6ac: 	 */
1:f13c6ac: 	public boolean isReplay() {
1:f13c6ac: 		return replay;
1:f13c6ac: 	}
1:f13c6ac: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:808a497
/////////////////////////////////////////////////////////////////////////
1: 	    this.dependencies = dependencies == null ? null
1:                         : (String[]) dependencies.clone();;
commit:3154f16
/////////////////////////////////////////////////////////////////////////
0:         this.dependencies = dependencies;
commit:24455ce
/////////////////////////////////////////////////////////////////////////
0: 		this.dependencies = dependencies == null ? null : dependencies.clone();
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.container;
1: 
1: import org.osgi.framework.Bundle;
1: 
1: /**
1:  * A Blueprint Event.
1:  *
1:  * <p>
1:  * <code>BlueprintEvent</code> objects are delivered to all registered
1:  * {@link BlueprintListener} services. Blueprint Events must be asynchronously
1:  * delivered in chronological order with respect to each listener.
1:  *
1:  * <p>
1:  * In addition, after a Blueprint Listener is registered, the Blueprint extender
1:  * will synchronously send to this Blueprint Listener the last Blueprint Event
1:  * for each ready Blueprint bundle managed by this extender. This
1:  * <em>replay</em> of Blueprint Events is designed so that the new Blueprint
1:  * Listener can be informed of the state of each Blueprint bundle. Blueprint
1:  * Events sent during this replay will have the {@link #isReplay()} flag set.
1:  * The Blueprint extender must ensure that this replay phase does not interfere
1:  * with new Blueprint Events so that the chronological order of all Blueprint
1:  * Events received by the Blueprint Listener is preserved. If the last Blueprint
1:  * Event for a given Blueprint bundle is {@link #DESTROYED}, the extender must
1:  * not send it during this replay phase.
1:  *
1:  * <p>
1:  * A type code is used to identify the type of event. The following event types
1:  * are defined:
1:  * <ul>
1:  * <li>{@link #CREATING}</li>
1:  * <li>{@link #CREATED}</li>
1:  * <li>{@link #DESTROYING}</li>
1:  * <li>{@link #DESTROYED}</li>
1:  * <li>{@link #FAILURE}</li>
1:  * <li>{@link #GRACE_PERIOD}</li>
1:  * <li>{@link #WAITING}</li>
1:  * </ul>
1:  *
1:  * <p>
1:  * In addition to calling the registered {@link BlueprintListener} services, the
1:  * Blueprint extender must also send those events to the Event Admin service, if
1:  * it is available.
1:  *
1:  * @see BlueprintListener
1:  * @see EventConstants
1:  * @Immutable
1:  * @version $Revision$
1:  */
1: public class BlueprintEvent {
1: 
1: 	/**
1: 	 * The Blueprint extender has started creating a Blueprint Container for the
1: 	 * bundle.
1: 	 */
1: 	public static final int	CREATING		= 1;
1: 	/**
1: 	 * The Blueprint extender has created a Blueprint Container for the bundle.
1: 	 * This event is sent after the Blueprint Container has been registered as a
1: 	 * service.
1: 	 */
1: 	public static final int	CREATED			= 2;
1: 	/**
1: 	 * The Blueprint extender has started destroying the Blueprint Container for
1: 	 * the bundle.
1: 	 */
1: 	public static final int	DESTROYING		= 3;
1: 	/**
1: 	 * The Blueprint Container for the bundle has been completely destroyed.
1: 	 * This event is sent after the Blueprint Container has been unregistered as
1: 	 * a service.
1: 	 */
1: 	public static final int	DESTROYED		= 4;
1: 	/**
1: 	 * The Blueprint Container creation for the bundle has failed. If this event
1: 	 * is sent after a timeout in the Grace Period, the
1: 	 * {@link #getDependencies()} method must return an array of missing
1: 	 * mandatory dependencies. The event must also contain the cause of the
1: 	 * failure as a <code>Throwable</code> through the {@link #getCause()}
1: 	 * method.
1: 	 */
1: 	public static final int	FAILURE			= 5;
1: 	/**
1: 	 * The Blueprint Container has entered the grace period. The list of missing
1: 	 * dependencies must be made available through the
1: 	 * {@link #getDependencies()} method. During the grace period, a
1: 	 * {@link #GRACE_PERIOD} event is sent each time the set of unsatisfied
1: 	 * dependencies changes.
1: 	 */
1: 	public static final int	GRACE_PERIOD	= 6;
1: 	/**
1: 	 * The Blueprint Container is waiting on the availability of a service to
1: 	 * satisfy an invocation on a referenced service. The missing dependency
1: 	 * must be made available through the {@link #getDependencies()} method
1: 	 * which will return an array containing one filter object as a String.
1: 	 */
1: 	public static final int	WAITING			= 7;
1: 
1: 	/**
1: 	 * Type of this event.
1: 	 *
1: 	 * @see #getType()
1: 	 */
1: 	private final int		type;
1: 	/**
1: 	 * The time when the event occurred.
1: 	 *
1: 	 * @see #getTimestamp()
1: 	 */
1: 	private final long		timestamp;
1: 	/**
1: 	 * The Blueprint bundle.
1: 	 *
1: 	 * @see #getBundle()
1: 	 */
1: 	private final Bundle	bundle;
1: 	/**
1: 	 * The Blueprint extender bundle.
1: 	 *
1: 	 * @see #getExtenderBundle()
1: 	 */
1: 	private final Bundle	extenderBundle;
1: 	/**
1: 	 * An array containing filters identifying the missing dependencies. Must
1: 	 * not be <code>null</code> when the event type requires it.
1: 	 *
1: 	 * @see #getDependencies()
1: 	 */
1: 	private final String[]	dependencies;
1: 	/**
1: 	 * Cause of the failure.
1: 	 *
1: 	 * @see #getCause()
1: 	 */
1: 	private final Throwable	cause;
1: 	/**
1: 	 * Indicate if this event is a replay event or not.
1: 	 *
1: 	 * @see #isReplay()
1: 	 */
1: 	private final boolean	replay;
1: 
1: 	/**
1: 	 * Create a simple <code>BlueprintEvent</code> object.
1: 	 *
1: 	 * @param type The type of this event.
1: 	 * @param bundle The Blueprint bundle associated with this event. This
1: 	 *        parameter must not be <code>null</code>.
1: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1: 	 *        this event. This parameter must not be <code>null</code>.
1: 	 */
1: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle) {
1: 		this(type, bundle, extenderBundle, null, null);
1: 	}
1: 
1: 	/**
1: 	 * Create a <code>BlueprintEvent</code> object associated with a set of
1: 	 * dependencies.
1: 	 *
1: 	 * @param type The type of this event.
1: 	 * @param bundle The Blueprint bundle associated with this event. This
1: 	 *        parameter must not be <code>null</code>.
1: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1: 	 *        this event. This parameter must not be <code>null</code>.
1: 	 * @param dependencies An array of <code>String</code> filters for each
1: 	 *        dependency associated with this event. Must be a non-empty array
1: 	 *        for event types {@link #FAILURE}, {@link #GRACE_PERIOD} and
1: 	 *        {@link #WAITING}. Must be <code>null</code> for other event types.
1: 	 */
1: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle,
1: 			String[] dependencies) {
1: 		this(type, bundle, extenderBundle, dependencies, null);
1: 	}
1: 
1: 	/**
1: 	 * Create a <code>BlueprintEvent</code> object associated with a failure
1: 	 * cause.
1: 	 *
1: 	 * @param type The type of this event.
1: 	 * @param bundle The Blueprint bundle associated with this event. This
1: 	 *        parameter must not be <code>null</code>.
1: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1: 	 *        this event. This parameter must not be <code>null</code>.
1: 	 * @param cause A <code>Throwable</code> object describing the root cause of
1: 	 *        the event. May be <code>null</code>.
1: 	 */
1: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle,
1: 			Throwable cause) {
1: 		this(type, bundle, extenderBundle, null, cause);
1: 	}
1: 
1: 	/**
1: 	 * Create a <code>BlueprintEvent</code> object associated with a failure
1: 	 * cause and a set of dependencies.
1: 	 *
1: 	 * @param type The type of this event.
1: 	 * @param bundle The Blueprint bundle associated with this event. This
1: 	 *        parameter must not be <code>null</code>.
1: 	 * @param extenderBundle The Blueprint extender bundle that is generating
1: 	 *        this event. This parameter must not be <code>null</code>.
1: 	 * @param dependencies An array of <code>String</code> filters for each
1: 	 *        dependency associated with this event. Must be a non-empty array
1: 	 *        for event types {@link #GRACE_PERIOD} and	(@link #WAITING}.  It
1: 	 *        is optional for {@link #FAILURE} event types.
1: 	 *        Must be <code>null</code> for other event types.
1: 	 * @param cause A <code>Throwable</code> object describing the root cause of
1: 	 *        this event. May be <code>null</code>.
1: 	 */
1: 	public BlueprintEvent(int type, Bundle bundle, Bundle extenderBundle,
1: 			String[] dependencies, Throwable cause) {
1: 		this.type = type;
1: 		this.timestamp = System.currentTimeMillis();
1: 		this.bundle = bundle;
1: 		this.extenderBundle = extenderBundle;
0: 		this.dependencies = dependencies;
1: 		this.cause = cause;
1: 		this.replay = false;
1: 		if (bundle == null) {
1: 			throw new NullPointerException("bundle must not be null");
1: 		}
1: 		if (extenderBundle == null) {
1: 			throw new NullPointerException("extenderBundle must not be null");
1: 		}
1: 		switch (type) {
1: 			case WAITING :
1: 			case GRACE_PERIOD :
1: 				if (dependencies == null) {
1: 					throw new NullPointerException(
1: 							"dependencies must not be null");
1: 				}
1: 				if (dependencies.length == 0) {
1: 					throw new IllegalArgumentException(
1: 							"dependencies must not be length zero");
1: 				}
1: 				break;
1: 			case FAILURE :
1: 				// not all FAILURE events have a dependency list, but if there
1: 				// is one, it must be non-empty.
1: 				if (dependencies != null) {
1:      				if (dependencies.length == 0) {
1:      					throw new IllegalArgumentException(
1:      							"dependencies must not be length zero");
1:      				}
1: 				}
1: 				break;
1: 			default :
1: 				if (dependencies != null) {
1: 					throw new IllegalArgumentException(
1: 							"dependencies must be null");
1: 				}
1: 				break;
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * Create a new <code>BlueprintEvent</code> from the specified
1: 	 * <code>BlueprintEvent</code>. The <code>timestamp</code> property will be
1: 	 * copied from the original event and only the replay property will be
1: 	 * overridden with the given value.
1: 	 *
1: 	 * @param event The original <code>BlueprintEvent</code> to copy. Must not
1: 	 *        be <code>null</code>.
1: 	 * @param replay <code>true</code> if this event should be used as a replay
1: 	 *        event.
1: 	 */
1: 	public BlueprintEvent(BlueprintEvent event, boolean replay) {
1: 		this.type = event.type;
1: 		this.timestamp = event.timestamp;
1: 		this.bundle = event.bundle;
1: 		this.extenderBundle = event.extenderBundle;
1: 		this.dependencies = event.dependencies;
1: 		this.cause = event.cause;
1: 		this.replay = replay;
1: 	}
1: 
1: 	/**
1: 	 * Return the type of this event.
1: 	 * <p>
1: 	 * The type values are:
1: 	 * <ul>
1: 	 * <li>{@link #CREATING}</li>
1: 	 * <li>{@link #CREATED}</li>
1: 	 * <li>{@link #DESTROYING}</li>
1: 	 * <li>{@link #DESTROYED}</li>
1: 	 * <li>{@link #FAILURE}</li>
1: 	 * <li>{@link #GRACE_PERIOD}</li>
1: 	 * <li>{@link #WAITING}</li>
1: 	 * </ul>
1: 	 *
1: 	 * @return The type of this event.
1: 	 */
1: 	public int getType() {
1: 		return type;
1: 	}
1: 
1: 	/**
1: 	 * Return the time at which this event was created.
1: 	 *
1: 	 * @return The time at which this event was created.
1: 	 */
1: 	public long getTimestamp() {
1: 		return timestamp;
1: 	}
1: 
1: 	/**
1: 	 * Return the Blueprint bundle associated with this event.
1: 	 *
1: 	 * @return The Blueprint bundle associated with this event.
1: 	 */
1: 	public Bundle getBundle() {
1: 		return bundle;
1: 	}
1: 
1: 	/**
1: 	 * Return the Blueprint extender bundle that is generating this event.
1: 	 *
1: 	 * @return The Blueprint extender bundle that is generating this event.
1: 	 */
1: 	public Bundle getExtenderBundle() {
1: 		return extenderBundle;
1: 	}
1: 
1: 	/**
1: 	 * Return the filters identifying the missing dependencies that caused this
1: 	 * event.
1: 	 *
1: 	 * @return The filters identifying the missing dependencies that caused this
1: 	 *         event if the event type is one of {@link #WAITING},
1: 	 *         {@link #GRACE_PERIOD} or {@link #FAILURE} or <code>null</code>
1: 	 *         for the other event types.
1: 	 */
1: 	public String[] getDependencies() {
1: 		return dependencies == null ? null : (String[]) dependencies.clone();
1: 	}
1: 
1: 	/**
1: 	 * Return the cause for this {@link #FAILURE} event.
1: 	 *
1: 	 * @return The cause of the failure for this event. May be <code>null</code>
1: 	 *         .
1: 	 */
1: 	public Throwable getCause() {
1: 		return cause;
1: 	}
1: 
1: 	/**
1: 	 * Return whether this event is a replay event.
1: 	 *
1: 	 * @return <code>true</code> if this event is a replay event and
1: 	 *         <code>false</code> otherwise.
1: 	 */
1: 	public boolean isReplay() {
1: 		return replay;
1: 	}
1: }
============================================================================