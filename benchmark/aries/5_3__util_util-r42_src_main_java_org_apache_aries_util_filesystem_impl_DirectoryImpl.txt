1:3c38842: /*
1:3c38842:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c38842:  * or more contributor license agreements.  See the NOTICE file
1:3c38842:  * distributed with this work for additional information
1:3c38842:  * regarding copyright ownership.  The ASF licenses this file
1:3c38842:  * to you under the Apache License, Version 2.0 (the
1:3c38842:  * "License"); you may not use this file except in compliance
1:3c38842:  * with the License.  You may obtain a copy of the License at
1:3c38842:  *
1:3c38842:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c38842:  *
1:3c38842:  * Unless required by applicable law or agreed to in writing,
1:3c38842:  * software distributed under the License is distributed on an
1:3c38842:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:3c38842:  * KIND, either express or implied.  See the License for the
1:3c38842:  * specific language governing permissions and limitations
1:3c38842:  * under the License.
1:3c38842:  */
2:3c38842: 
1:910fec0: package org.apache.aries.util.filesystem.impl;
1:3c38842: 
1:3c38842: import java.io.File;
1:3c38842: import java.io.IOException;
1:3c38842: import java.io.InputStream;
1:3c38842: import java.util.ArrayList;
1:3c38842: import java.util.Iterator;
1:3c38842: import java.util.List;
1:3c38842: 
1:910fec0: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:3c38842: 
1:3c38842: /**
1:3c38842:  * An IDirectory representing a java.io.File whose isDirectory method returns true.
1:3c38842:  */
1:3c38842: public class DirectoryImpl extends FileImpl implements IDirectory
1:3c38842: {
1:3c38842:   /**
1:3c38842:    * @param dir      the file to represent.
1:3c38842:    * @param rootFile the file that represents the FS root.
1:3c38842:    */
1:3c38842:   public DirectoryImpl(File dir, File rootFile)
1:3c38842:   {
1:3c38842:     super(dir, rootFile);
5:3c38842:   }
1:3c38842: 
1:3c38842:   public IFile getFile(String name)
1:3c38842:   {
1:3c38842:     File desiredFile = new File(file, name);
1:3c38842:     IFile result = null;
1:3c38842:     
1:6118606:     if (desiredFile.exists()) 
1:6118606:     {
1:6118606:         if(!desiredFile.isDirectory())
1:3c38842:           result = new FileImpl(desiredFile, rootDirFile);
1:6118606:         else
1:6118606:           result = new DirectoryImpl(desiredFile, rootDirFile);
1:3c38842:     }
1:3c38842:     
3:3c38842:     return result;
1:3c38842:   }
1:72345ab: 
1:3c38842:   public boolean isRoot()
1:3c38842:   {
1:3c38842:     boolean result = (rootDirFile == file);
1:3c38842:     return result;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public List<IFile> listFiles()
1:3c38842:   {
1:3c38842:     List<IFile> files = new ArrayList<IFile>();
1:9c133a0:     File[] filesInDir = file.listFiles();
1:9c133a0:     if (filesInDir != null) {
1:9c133a0:       for (File f : filesInDir) {
1:9c133a0:         if (f.isFile()) {
1:9c133a0:           files.add(new FileImpl(f, rootDirFile));
1:9c133a0:         } else if (f.isDirectory()) {
1:9c133a0:           files.add(new DirectoryImpl(f, rootDirFile));
1:9c133a0:         }
1:9c133a0:       }
1:9c133a0:     }
1:9c133a0:     return files;
1:9c133a0:   }
1:e62fca9:   
1:9c133a0:   public List<IFile> listAllFiles()
1:9c133a0:   {
1:9c133a0:     List<IFile> files = new ArrayList<IFile>();
1:9c133a0:     File[] filesInDir = file.listFiles();
1:9c133a0:     if (filesInDir != null) {
1:9c133a0:       for (File f : filesInDir) {
1:9c133a0:         if (f.isFile()) {
1:3c38842:           files.add(new FileImpl(f, rootDirFile));
1:9c133a0:         } else if (f.isDirectory()) {
1:e62fca9:           IDirectory subdir = new DirectoryImpl(f, rootDirFile);
1:e62fca9:           files.add(subdir);
1:e62fca9:           files.addAll(subdir.listAllFiles());
1:9c133a0:         }
1:9c133a0:       }
1:9c133a0:     }
1:3c38842:     return files;
1:9c133a0:   }
1:9c133a0:   
1:3c38842:   public Iterator<IFile> iterator()
1:3c38842:   {
1:e62fca9: 	return listFiles().iterator();
1:3c38842:   }
1:9c133a0: 
1:3c38842:   public IDirectory getParent()
1:3c38842:   {
1:e62fca9:     return isRoot() ? null : super.getParent();
1:3c38842:   }
1:3c38842: 
1:3c38842:   public IDirectory convert()
1:3c38842:   {
1:3c38842:     return this;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public InputStream open() throws IOException
1:3c38842:   {
1:3c38842:     throw new UnsupportedOperationException();
1:3c38842:   }
1:3c38842: 
1:3c38842:   public long getLastModified()
1:3c38842:   {
1:3c38842:     long result = super.getLastModified();
1:3c38842:     for (IFile aFile : this) {
1:3c38842:       long tmpLastModified = aFile.getLastModified();
1:3c38842:       
1:3c38842:       if (tmpLastModified > result) result = tmpLastModified;
1:3c38842:     }
1:3c38842:     return result;
1:3c38842:   }
1:3c38842: 
1:72345ab:   public ICloseableDirectory toCloseable() {
1:72345ab: 	return new CloseableDirectory(this);
1:72345ab:   }
1:3c38842: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
commit:72345ab
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.filesystem.ICloseableDirectory;
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override
1:   public ICloseableDirectory toCloseable() {
1: 	return new CloseableDirectory(this);
1:   }
commit:e62fca9
/////////////////////////////////////////////////////////////////////////
0:   @Override
/////////////////////////////////////////////////////////////////////////
0:   @Override
0:   @Override
/////////////////////////////////////////////////////////////////////////
1:   
0:   @Override
/////////////////////////////////////////////////////////////////////////
1:           IDirectory subdir = new DirectoryImpl(f, rootDirFile);
1:           files.add(subdir);
1:           files.addAll(subdir.listAllFiles());
0:   @Override
1: 	return listFiles().iterator();
1:     return isRoot() ? null : super.getParent();
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9c133a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public List<IFile> listAllFiles()
1:   {
1:     List<IFile> files = new ArrayList<IFile>();
1:     File[] filesInDir = file.listFiles();
1:     if (filesInDir != null) {
1:       for (File f : filesInDir) {
1:         if (f.isFile()) {
1:           files.add(new FileImpl(f, rootDirFile));
1:         } else if (f.isDirectory()) {
1:           files.add(new DirectoryImpl(f, rootDirFile));
0:           listSubDirectoryFiles(files, f);
1:         }
1:       }
1:     }
1:     return files;
1:   }
1:   
0:   private void listSubDirectoryFiles(List<IFile> lists, File file) {
1:     File[] filesInDir = file.listFiles();
1:     if (filesInDir != null) {
1:       for (File f : filesInDir) {
1:         if (f.isFile()) {
0:           lists.add(new FileImpl(f, rootDirFile));
1:         } else if (f.isDirectory()) {
0:           lists.add(new DirectoryImpl(f, rootDirFile));
0:           listSubDirectoryFiles(lists, f);
1:         }
1:       }
1:     }
1:     
1:   }
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem.impl;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.filesystem.utils.impl;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.AppConstants;
1: 
1: /**
1:  * An IDirectory representing a java.io.File whose isDirectory method returns true.
1:  */
1: public class DirectoryImpl extends FileImpl implements IDirectory
1: {
1:   /**
1:    * @param dir      the file to represent.
1:    * @param rootFile the file that represents the FS root.
1:    */
1:   public DirectoryImpl(File dir, File rootFile)
1:   {
1:     super(dir, rootFile);
1:   }
1: 
1:   public IFile getFile(String name)
1:   {
1:     File desiredFile = new File(file, name);
1:     IFile result = null;
1:     
0:     if (desiredFile.exists()) {
1:       result = new FileImpl(desiredFile, rootDirFile);
1:     }
1:     return result;
1:   }
1: 
1:   public boolean isRoot()
1:   {
1:     boolean result = (rootDirFile == file);
1:     return result;
1:   }
1: 
1:   public List<IFile> listFiles()
1:   {
1:     List<IFile> files = new ArrayList<IFile>();
0:     File[] filesInDir = file.listFiles();
0:     if (filesInDir != null) {
0:       for (File f : filesInDir) {
0:         if (f.isFile()) {
1:           files.add(new FileImpl(f, rootDirFile));
0:         } else if (f.isDirectory()) {
0:           files.add(new DirectoryImpl(f, rootDirFile));
1:         }
1:       }
1:     }
1:     return files;
1:   }
1: 
1:   public Iterator<IFile> iterator()
1:   {
0:     Iterator<IFile> result = listFiles().iterator();
1:     return result;
1:   }
1: 
0:   @Override
1:   public IDirectory getParent()
1:   {
0:     IDirectory result = isRoot() ? null : super.getParent();
1:     return result;
1:   }
1: 
0:   @Override
1:   public IDirectory convert()
1:   {
1:     return this;
1:   }
1: 
0:   @Override
1:   public InputStream open() throws IOException
1:   {
1:     throw new UnsupportedOperationException();
1:   }
1: 
0:   @Override
1:   public long getLastModified()
1:   {
1:     long result = super.getLastModified();
1:     for (IFile aFile : this) {
1:       long tmpLastModified = aFile.getLastModified();
1:       
1:       if (tmpLastModified > result) result = tmpLastModified;
1:     }
1:     return result;
1:   }
1: }
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:6118606
/////////////////////////////////////////////////////////////////////////
1:     if (desiredFile.exists()) 
1:     {
1:         if(!desiredFile.isDirectory())
0:           result = new FileImpl(desiredFile, rootDirFile);
1:         else
1:           result = new DirectoryImpl(desiredFile, rootDirFile);
0:     
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.filesystem.impl;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.AppConstants;
0: 
0: /**
0:  * An IDirectory representing a java.io.File whose isDirectory method returns true.
0:  */
0: public class DirectoryImpl extends FileImpl implements IDirectory
0: {
0:   /**
0:    * @param dir      the file to represent.
0:    * @param rootFile the file that represents the FS root.
0:    */
0:   public DirectoryImpl(File dir, File rootFile)
0:   {
0:     super(dir, rootFile);
0:   }
0: 
0:   public IFile getFile(String name)
0:   {
0:     File desiredFile = new File(file, name);
0:     IFile result = null;
0:     
0:     if (desiredFile.exists()) {
0:       result = new FileImpl(desiredFile, rootDirFile);
0:     }
0:     return result;
0:   }
0: 
0:   public boolean isRoot()
0:   {
0:     boolean result = (rootDirFile == file);
0:     return result;
0:   }
0: 
0:   public List<IFile> listFiles()
0:   {
0:     List<IFile> files = new ArrayList<IFile>();
0:     File[] filesInDir = file.listFiles();
0:     if (filesInDir != null) {
0:       for (File f : filesInDir) {
0:         if (f.isFile()) {
0:           files.add(new FileImpl(f, rootDirFile));
0:         } else if (f.isDirectory()) {
0:           files.add(new DirectoryImpl(f, rootDirFile));
0:         }
0:       }
0:     }
0:     return files;
0:   }
0: 
0:   public Iterator<IFile> iterator()
0:   {
0:     Iterator<IFile> result = listFiles().iterator();
0:     return result;
0:   }
0: 
0:   @Override
0:   public IDirectory getParent()
0:   {
0:     IDirectory result = isRoot() ? null : super.getParent();
0:     return result;
0:   }
0: 
0:   @Override
0:   public IDirectory convert()
0:   {
0:     return this;
0:   }
0: 
0:   @Override
0:   public InputStream open() throws IOException
0:   {
0:     throw new UnsupportedOperationException();
0:   }
0: 
0:   @Override
0:   public long getLastModified()
0:   {
0:     long result = super.getLastModified();
0:     for (IFile aFile : this) {
0:       long tmpLastModified = aFile.getLastModified();
0:       
0:       if (tmpLastModified > result) result = tmpLastModified;
0:     }
0:     return result;
0:   }
0: }
============================================================================