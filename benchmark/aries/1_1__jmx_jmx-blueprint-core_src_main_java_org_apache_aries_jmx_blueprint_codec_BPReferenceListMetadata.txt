1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1:fdf3952: 
1:fdf3952: public class BPReferenceListMetadata extends BPServiceReferenceMetadata {
1:fdf3952:     private int memberType;
1:fdf3952: 
1:fdf3952:     public BPReferenceListMetadata(CompositeData ref_list) {
1:fdf3952:         super(ref_list);
1:fdf3952:         memberType = (Integer) ref_list.get(BlueprintMetadataMBean.MEMBER_TYPE);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPReferenceListMetadata(ReferenceListMetadata ref_list) {
1:fdf3952:         super(ref_list);
1:fdf3952:         memberType = ref_list.getMemberType();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected Map<String, Object> getItemsMap() {
1:fdf3952:         Map<String, Object> items = super.getItemsMap();
1:fdf3952:         items.put(BlueprintMetadataMBean.MEMBER_TYPE, memberType);
1:fdf3952: 
1:fdf3952:         return items;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public CompositeData asCompositeData() {
1:fdf3952:         try {
1:fdf3952:             return new CompositeDataSupport(BlueprintMetadataMBean.REFERENCE_LIST_METADATA_TYPE, getItemsMap());
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getMemberType() {
1:fdf3952:         return memberType;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1: 
1: public class BPReferenceListMetadata extends BPServiceReferenceMetadata {
1:     private int memberType;
1: 
1:     public BPReferenceListMetadata(CompositeData ref_list) {
1:         super(ref_list);
1:         memberType = (Integer) ref_list.get(BlueprintMetadataMBean.MEMBER_TYPE);
1:     }
1: 
1:     public BPReferenceListMetadata(ReferenceListMetadata ref_list) {
1:         super(ref_list);
1:         memberType = ref_list.getMemberType();
1:     }
1: 
1:     protected Map<String, Object> getItemsMap() {
1:         Map<String, Object> items = super.getItemsMap();
1:         items.put(BlueprintMetadataMBean.MEMBER_TYPE, memberType);
1: 
1:         return items;
1:     }
1: 
1:     public CompositeData asCompositeData() {
1:         try {
1:             return new CompositeDataSupport(BlueprintMetadataMBean.REFERENCE_LIST_METADATA_TYPE, getItemsMap());
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public int getMemberType() {
1:         return memberType;
1:     }
1: }
============================================================================