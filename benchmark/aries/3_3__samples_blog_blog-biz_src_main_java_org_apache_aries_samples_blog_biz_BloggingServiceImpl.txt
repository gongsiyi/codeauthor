1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:e0beeec: package org.apache.aries.samples.blog.biz;
9:430e8f5: 
1:430e8f5: import java.text.ParseException;
1:bb9ffe7: import java.util.Arrays;
1:8285ae5: import java.util.Collections;
1:bb9ffe7: import java.util.List;
1:430e8f5: 
1:430e8f5: import org.apache.aries.samples.blog.api.BlogAuthor;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogAuthorManager;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogComment;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogCommentManager;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogEntry;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogEntryManager;
1:430e8f5: import org.apache.aries.samples.blog.api.BloggingService;
1:430e8f5: 
1:430e8f5: /** Implementation of the BloggingService */
1:bb9ffe7: public class BloggingServiceImpl implements BloggingService {
1:8285ae5:     private BlogEntryManager blogEntryManager;
1:8285ae5:     private BlogAuthorManager blogAuthorManager;
1:8285ae5:     private BlogCommentManager blogCommentManager;
1:430e8f5: 
1:8285ae5:     // Injected via blueprint
1:8285ae5:     public void setBlogEntryManager(BlogEntryManager blogPostManager) {
1:8285ae5:         this.blogEntryManager = blogPostManager;
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     // Injected via blueprint
1:8285ae5:     public void setBlogAuthorManager(BlogAuthorManager authorManager) {
1:8285ae5:         this.blogAuthorManager = authorManager;
1:8285ae5:     }
1:8285ae5: 
1:8285ae5:     // Injected via blueprint
1:8285ae5:     public void setBlogCommentManager(BlogCommentManager commentManager) {
1:8285ae5:         this.blogCommentManager = commentManager;
1:8285ae5:     }
1:bb9ffe7: 
1:430e8f5: 
1:8285ae5:     public String getBlogTitle() {
1:8285ae5:         return new BlogImpl().getBlogTitle();
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public BlogAuthor getBlogAuthor(String email) {
1:8285ae5:         return blogAuthorManager.getAuthor(email);
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public void createBlogAuthor(String email, String nickName, String name,
1:8285ae5:                                  String bio, String dob) {
1:8285ae5:         try {
1:8285ae5:             blogAuthorManager.createAuthor(email, dob, name, nickName, bio);
1:8285ae5:         }
1:8285ae5:         catch (ParseException e) {
1:8285ae5:             // TODO Auto-generated catch block
1:8285ae5:             e.printStackTrace();
1:8285ae5:         }
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public void updateBlogAuthor(String email, String nickName, String name,
1:8285ae5:                                  String bio, String dob) {
1:8285ae5:         try {
1:8285ae5:             blogAuthorManager.updateAuthor(email, dob, name, nickName, bio);
1:8285ae5:         }
1:8285ae5:         catch (ParseException e) {
1:8285ae5:             // TODO Auto-generated catch block
1:8285ae5:             e.printStackTrace();
1:8285ae5:         }
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public BlogEntry getPost(long id) {
1:8285ae5:         return blogEntryManager.getBlogPost(id);
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public List<? extends BlogEntry> getBlogEntries(int firstPostIndex,
1:8285ae5:                                                     int noOfPosts) {
1:8285ae5:         return blogEntryManager.getBlogEntries(firstPostIndex, noOfPosts);
1:bb9ffe7: 
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public List<? extends BlogEntry> getAllBlogEntries() {
1:8285ae5:         return blogEntryManager.getAllBlogEntries();
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public int getNoOfEntries() {
1:8285ae5:         return blogEntryManager.getNoOfPosts();
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public void createBlogEntry(String email, String title, String blogText,
1:8285ae5:                                 String tags) {
1:8285ae5:         blogEntryManager.createBlogPost(email, title, blogText, Arrays
1:8285ae5:                                         .asList(tags.split(",")));
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public void createBlogComment(String comment, String authorEmail, long id) {
1:8285ae5:         if (blogCommentManager != null) {
1:8285ae5:             blogCommentManager.createComment(comment, authorEmail, id);
1:8285ae5:         }
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public void deleteBlogComment(BlogComment comment) {
1:8285ae5:         if (blogCommentManager != null) {
1:8285ae5:             blogCommentManager.deleteComment(comment.getId());
1:8285ae5:         }
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public List<? extends BlogComment> getCommentsForEntry(BlogEntry entry) {
1:8285ae5:         if (blogCommentManager != null) {
1:8285ae5:             return blogCommentManager.getCommentsForPost(entry.getId());
1:8285ae5:         }
1:8285ae5:         return Collections.<BlogComment>emptyList();
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public BlogEntry getBlogEntry(long id) {
1:8285ae5:         return blogEntryManager.getBlogPost(id);
1:8285ae5:     }
1:bb9ffe7: 
1:8285ae5:     public boolean isCommentingAvailable() {
1:8285ae5:         if (blogCommentManager != null) {
1:8285ae5:             return blogCommentManager.isCommentingAvailable();
1:8285ae5:         }
1:8285ae5:         return false;
1:8285ae5: 
1:8285ae5:     }
19:bb9ffe7: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:8285ae5
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     private BlogEntryManager blogEntryManager;
1:     private BlogAuthorManager blogAuthorManager;
1:     private BlogCommentManager blogCommentManager;
1:     // Injected via blueprint
1:     public void setBlogEntryManager(BlogEntryManager blogPostManager) {
1:         this.blogEntryManager = blogPostManager;
1:     }
1:     // Injected via blueprint
1:     public void setBlogAuthorManager(BlogAuthorManager authorManager) {
1:         this.blogAuthorManager = authorManager;
1:     }
1: 
1:     // Injected via blueprint
1:     public void setBlogCommentManager(BlogCommentManager commentManager) {
1:         this.blogCommentManager = commentManager;
1:     }
1:     public String getBlogTitle() {
1:         return new BlogImpl().getBlogTitle();
1:     }
1:     public BlogAuthor getBlogAuthor(String email) {
1:         return blogAuthorManager.getAuthor(email);
1:     }
1:     public void createBlogAuthor(String email, String nickName, String name,
1:                                  String bio, String dob) {
1:         try {
1:             blogAuthorManager.createAuthor(email, dob, name, nickName, bio);
1:         }
1:         catch (ParseException e) {
1:             // TODO Auto-generated catch block
1:             e.printStackTrace();
1:         }
1:     }
1:     public void updateBlogAuthor(String email, String nickName, String name,
1:                                  String bio, String dob) {
1:         try {
1:             blogAuthorManager.updateAuthor(email, dob, name, nickName, bio);
1:         }
1:         catch (ParseException e) {
1:             // TODO Auto-generated catch block
1:             e.printStackTrace();
1:         }
1:     }
1:     public BlogEntry getPost(long id) {
1:         return blogEntryManager.getBlogPost(id);
1:     }
1:     public List<? extends BlogEntry> getBlogEntries(int firstPostIndex,
1:                                                     int noOfPosts) {
1:         return blogEntryManager.getBlogEntries(firstPostIndex, noOfPosts);
1:     }
1:     public List<? extends BlogEntry> getAllBlogEntries() {
1:         return blogEntryManager.getAllBlogEntries();
1:     }
1:     public int getNoOfEntries() {
1:         return blogEntryManager.getNoOfPosts();
1:     }
1:     public void createBlogEntry(String email, String title, String blogText,
1:                                 String tags) {
1:         blogEntryManager.createBlogPost(email, title, blogText, Arrays
1:                                         .asList(tags.split(",")));
1:     }
1:     public void createBlogComment(String comment, String authorEmail, long id) {
1:         if (blogCommentManager != null) {
1:             blogCommentManager.createComment(comment, authorEmail, id);
1:         }
1:     }
1:     public void deleteBlogComment(BlogComment comment) {
1:         if (blogCommentManager != null) {
1:             blogCommentManager.deleteComment(comment.getId());
1:         }
1:     }
1:     public List<? extends BlogComment> getCommentsForEntry(BlogEntry entry) {
1:         if (blogCommentManager != null) {
1:             return blogCommentManager.getCommentsForPost(entry.getId());
1:         }
1:         return Collections.<BlogComment>emptyList();
1:     }
1:     public BlogEntry getBlogEntry(long id) {
1:         return blogEntryManager.getBlogPost(id);
1:     }
1:     public boolean isCommentingAvailable() {
1:         if (blogCommentManager != null) {
1:             return blogCommentManager.isCommentingAvailable();
1:         }
1:         return false;
1: 
1:     }
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.biz;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:607acfe
commit:bb9ffe7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.List;
1: import org.apache.aries.samples.blog.api.BlogAuthorManager;
1: import org.apache.aries.samples.blog.api.BlogComment;
1: import org.apache.aries.samples.blog.api.BlogCommentManager;
1: import org.apache.aries.samples.blog.api.BlogEntry;
1: import org.apache.aries.samples.blog.api.BlogEntryManager;
1: public class BloggingServiceImpl implements BloggingService {
0: 	private BlogEntryManager blogEntryManager;
0: 	private BlogAuthorManager blogAuthorManager;
0: 	private BlogCommentManager blogCommentManager;
0: 	// Injected via blueprint
0: 	public void setBlogEntryManager(BlogEntryManager blogPostManager) {
0: 		this.blogEntryManager = blogPostManager;
1: 	}
0: 	// Injected via blueprint
0: 	public void setBlogAuthorManager(BlogAuthorManager authorManager) {
0: 		this.blogAuthorManager = authorManager;
1: 	}
1: 	
0: 	// Injected via blueprint
0: 	public void setBlogCommentManager(BlogCommentManager commentManager) {
0: 		this.blogCommentManager = commentManager;
1: 	}
0: 	public String getBlogTitle() {
0: 		return new BlogImpl().getBlogTitle();
1: 	}
1: 
0: 	public BlogAuthor getBlogAuthor(String email) {
0: 		return blogAuthorManager.getAuthor(email);
1: 	}
1: 
0: 	public void createBlogAuthor(String email, String nickName, String name,
0: 			String bio, String dob) {
0: 		try {
0: 			blogAuthorManager.createAuthor(email, dob, name, nickName, bio);
0: 		} catch (ParseException e) {
0: 			// TODO Auto-generated catch block
0: 			e.printStackTrace();
1: 		}
1: 	}
1: 
0: 	public void updateBlogAuthor(String email, String nickName, String name,
0: 			String bio, String dob) {
0: 		try {
0: 			blogAuthorManager.updateAuthor(email, dob, name, nickName, bio);
0: 		} catch (ParseException e) {
0: 			// TODO Auto-generated catch block
0: 			e.printStackTrace();
1: 		}
1: 	}
1: 
0: 	public BlogEntry getPost(long id) {
0: 		return blogEntryManager.getBlogPost(id);
1: 	}
1: 
0: 	public List<? extends BlogEntry> getBlogEntries(int firstPostIndex,
0: 			int noOfPosts) {
0: 		return blogEntryManager.getBlogEntries(firstPostIndex, noOfPosts);
1: 
1: 	}
1: 
0: 	public List<? extends BlogEntry> getAllBlogEntries() {
0: 		return blogEntryManager.getAllBlogEntries();
1: 	}
1: 
0: 	public int getNoOfEntries() {
0: 		return blogEntryManager.getNoOfPosts();
1: 	}
1: 
0: 	public void createBlogEntry(String email, String title, String blogText,
0: 			String tags) {
0: 		blogEntryManager.createBlogPost(email, title, blogText, Arrays
0: 				.asList(tags.split(",")));
1: 	}
1: 
0: 	public void createBlogComment(String comment, String authorEmail, long id) {
0: 		blogCommentManager.createComment(comment, authorEmail, id);
1: 	}
1: 
0: 	public void deleteBlogComment(BlogComment comment) {
0: 		blogCommentManager.deleteComment(comment.getId());
1: 	}
1: 
0: 	public List<? extends BlogComment> getCommentsForEntry(BlogEntry entry) {
0: 		return blogCommentManager.getCommentsForPost(entry.getId());
1: 	}
1: 
0: 	public BlogEntry getBlogEntry(long id) {
0: 		return blogEntryManager.getBlogPost(id);
1: 	}
1: 	
0: 	public boolean isCommentingAvailable() {
0: 		return blogCommentManager.isCommentingAvailable();
1: 
1: 	}
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.samples.blog;
1: 
1: import java.text.ParseException;
1: 
0: import org.apache.aries.samples.blog.api.AuthorManager;
0: import org.apache.aries.samples.blog.api.Blog;
1: import org.apache.aries.samples.blog.api.BlogAuthor;
0: import org.apache.aries.samples.blog.api.BlogPost;
0: import org.apache.aries.samples.blog.api.BlogPostManager;
1: import org.apache.aries.samples.blog.api.BloggingService;
0: import org.apache.aries.samples.blog.persistence.api.Author;
1: 
1: 
1: 
1: /** Implementation of the BloggingService */
0: public class BloggingServiceImpl implements BloggingService
0: {
0:   private BlogPostManager blogPostManager;
0:   private AuthorManager authorManager;
1:   
0:   // Injected via blueprint
0:   public void setBlogPostManager(BlogPostManager blogPostManager)
0:   {
0:     this.blogPostManager = blogPostManager;
0:   }
1:   
0:   // Injected via blueprint
0:   public void setAuthorManager(AuthorManager authorManager)
0:   {
0:     this.authorManager = authorManager;
0:   }
1: 
0:   public Blog getBlog()
0:   {
0:     return new BlogImpl(authorManager, blogPostManager);
0:   }
1: 
0:   public BlogAuthor getBlogAuthor(String email)
0:   {
0:     Author a = authorManager.getAuthor(email);
0:     if (a != null)
0:       return new BlogAuthorImpl(a, this);
0:     else
0:       return null;
0:   }
1: 
0:   public void createAuthor(String email, String nickName, String name, String bio, String dob)
0:   {
0:     try {
0:       authorManager.createAuthor(email, dob, name, nickName, bio);
0:     } catch (ParseException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
0:     }
0:   }
1: 
0:   public void updateAuthor(String email, String nickName, String name, String bio, String dob)
0:   {
0:     try {
0:       authorManager.updateAuthor(email, dob, name, nickName, bio);
0:     } catch (ParseException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
0:     }
0:   }
1: 
1: 
0:   public BlogPost getPost(long id)
0:   {
0:     return blogPostManager.getBlogPost(id);
0:   }
0: }
============================================================================