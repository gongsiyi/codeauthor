1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
12:1129914: 
1:2ffcfb9: public class GenericClause extends AbstractClause {
1:1129914: 	public GenericClause(String clause) {
1:2ffcfb9:         super(
1:2ffcfb9:         		parsePath(clause, Patterns.PATHS, false), 
1:2ffcfb9:         		parseParameters(clause, false), 
1:2ffcfb9:         		generateDefaultParameters());
16:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class GenericClause extends AbstractClause {
1:         super(
1:         		parsePath(clause, Patterns.PATHS, false), 
1:         		parseParameters(clause, false), 
1:         		generateDefaultParameters());
commit:fea3a1c
/////////////////////////////////////////////////////////////////////////
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: 	// TODO The introduction of the whitespace (\\s*) before a parameter was added to get around a grammatically
0: 	// incorrect clause in Equinox: org.eclipse.osgi; singleton:=true;deployed-version=3.7.0.v20110221;type=osgi.bundle.
0: 	// Note the space before the singleton directive.
0: 	private static final String REGEX = '(' + Grammar.PATH + "(?:;" + Grammar.PATH + ")*)(?:;\\s*(" + Grammar.PARAMETER + "))*";
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Map;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
0: public class GenericClause implements Clause {
0: 	private static final String REGEX = '(' + Grammar.PATH + "(?:;" + Grammar.PATH + ")*)(?:;(" + Grammar.PARAMETER + "))*";
1: 	
0: 	private static final Pattern PATTERN = Pattern.compile(REGEX);
0: 	private static final Pattern PATTERN_PARAMETER = Pattern.compile(Grammar.PARAMETER);
1: 	
0: 	private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
0: 	private final String path;
1: 	
1: 	public GenericClause(String clause) {
0: 		Matcher matcher = PATTERN.matcher(clause);
0: 		if (!matcher.matches()) {
0: 			throw new IllegalArgumentException("Invalid clause: " + clause);
1: 		}
0: 		path = matcher.group(1);
0: 		matcher = PATTERN_PARAMETER.matcher(clause);
0: 		while(matcher.find()) {
0: 			String group = matcher.group();
0: 			if (group == null || group.length() == 0)
0: 				continue;
0: 			Parameter parameter = ParameterFactory.create(group);
0: 			parameters.put(parameter.getName(), parameter);
1: 		}
1: 	}
1: 	
0: 	public Attribute getAttribute(String name) {
0: 		Parameter result = parameters.get(name);
0: 		if (result instanceof Attribute) {
0: 			return (Attribute)result;
1: 		}
0: 		return null;
1: 	}
1: 	
0: 	public Collection<Attribute> getAttributes() {
0: 		ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 		for (Parameter parameter : parameters.values()) {
0: 			if (parameter instanceof Attribute) {
0: 				attributes.add((Attribute)parameter);
1: 			}
1: 		}
0: 		attributes.trimToSize();
0: 		return attributes;
1: 	}
1: 	
0: 	public Directive getDirective(String name) {
0: 		Parameter result = parameters.get(name);
0: 		if (result instanceof Directive) {
0: 			return (Directive)result;
1: 		}
0: 		return null;
1: 	}
1: 	
0: 	public Collection<Directive> getDirectives() {
0: 		ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 		for (Parameter parameter : parameters.values()) {
0: 			if (parameter instanceof Directive) {
0: 				directives.add((Directive)parameter);
1: 			}
1: 		}
0: 		directives.trimToSize();
0: 		return directives;
1: 	}
1: 	
0: 	public Parameter getParameter(String name) {
0: 		return parameters.get(name);
1: 	}
1: 	
0: 	public Collection<Parameter> getParameters() {
0: 		return Collections.unmodifiableCollection(parameters.values());
1: 	}
1: 	
0: 	public String getPath() {
0: 		return path;
1: 	}
1: }
============================================================================