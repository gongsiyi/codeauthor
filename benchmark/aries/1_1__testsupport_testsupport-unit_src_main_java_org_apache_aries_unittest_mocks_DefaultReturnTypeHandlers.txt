1:264011e: /*
1:264011e:  * Licensed to the Apache Software Foundation (ASF) under one
1:264011e:  * or more contributor license agreements.  See the NOTICE file
1:264011e:  * distributed with this work for additional information
1:264011e:  * regarding copyright ownership.  The ASF licenses this file
1:264011e:  * to you under the Apache License, Version 2.0 (the
1:264011e:  * "License"); you may not use this file except in compliance
1:264011e:  * with the License.  You may obtain a copy of the License at
1:264011e:  *
1:264011e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:264011e:  *
1:264011e:  * Unless required by applicable law or agreed to in writing,
1:264011e:  * software distributed under the License is distributed on an
1:264011e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:264011e:  * KIND, either express or implied.  See the License for the
1:264011e:  * specific language governing permissions and limitations
1:264011e:  * under the License.
1:264011e:  */
1:264011e: package org.apache.aries.unittest.mocks;
1:264011e: 
1:264011e: import java.util.ArrayList;
1:264011e: import java.util.HashMap;
1:264011e: import java.util.HashSet;
1:264011e: import java.util.List;
1:264011e: import java.util.Map;
1:264011e: import java.util.Set;
1:264011e: 
1:264011e: /**
1:264011e:  * <p>This class contains some return type handlers that provides some default behavior.</p>
1:264011e:  */
1:264011e: public class DefaultReturnTypeHandlers
1:264011e: {
1:264011e:   /** A handler for Longs */
1:264011e:   public static final ReturnTypeHandler LONG_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return Long.valueOf(0);
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Integers */
1:264011e:   public static final ReturnTypeHandler INT_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return Integer.valueOf(0);
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Shorts */
1:264011e:   public static final ReturnTypeHandler SHORT_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return Short.valueOf((short)0);
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Bytes */
1:264011e:   public static final ReturnTypeHandler BYTE_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return Byte.valueOf((byte)0);
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Characters */
1:264011e:   public static final ReturnTypeHandler CHAR_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return Character.valueOf(' ');
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Strings */
1:264011e:   public static final ReturnTypeHandler STRING_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return "";
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Lists */
1:264011e:   public static final ReturnTypeHandler LIST_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return new ArrayList<Object>();
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Maps */
1:264011e:   public static final ReturnTypeHandler MAP_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return new HashMap<Object,Object>();
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Setss */
1:264011e:   public static final ReturnTypeHandler SET_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return new HashSet<Object>();
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Floats */
1:264011e:   public static final ReturnTypeHandler FLOAT_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return new Float(0.0f);
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Doubles */
1:264011e:   public static final ReturnTypeHandler DOUBLE_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return new Double(0.0d);
1:264011e:     }
1:264011e:   };
1:264011e:   /** A handler for Booleans */
1:264011e:   public static final ReturnTypeHandler BOOLEAN_HANDLER = new ReturnTypeHandler() {
1:264011e:     public Object handle(Class<?> class1, Skeleton parent)
1:264011e:     {
1:264011e:       return Boolean.FALSE;
1:264011e:     }
1:264011e:   };
1:264011e:   /**
1:264011e:    * Register all the default handlers against the specified skeleton.
1:264011e:    * 
1:264011e:    * @param s the skeleton
1:264011e:    */
1:264011e:   public static void registerDefaultHandlers(Skeleton s)
1:264011e:   {
1:264011e:     s.registerReturnTypeHandler(Double.class, DOUBLE_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Float.class, FLOAT_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Long.class, LONG_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Integer.class, INT_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Short.class, SHORT_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Byte.class, BYTE_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Boolean.class, BOOLEAN_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Character.class, CHAR_HANDLER);
1:264011e:     s.registerReturnTypeHandler(String.class, STRING_HANDLER);
1:264011e:     s.registerReturnTypeHandler(List.class, LIST_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Map.class, MAP_HANDLER);
1:264011e:     s.registerReturnTypeHandler(Set.class, SET_HANDLER);
1:264011e:     s.registerReturnTypeHandler(double.class, DOUBLE_HANDLER);
1:264011e:     s.registerReturnTypeHandler(float.class, FLOAT_HANDLER);
1:264011e:     s.registerReturnTypeHandler(long.class, LONG_HANDLER);
1:264011e:     s.registerReturnTypeHandler(int.class, INT_HANDLER);
1:264011e:     s.registerReturnTypeHandler(short.class, SHORT_HANDLER);
1:264011e:     s.registerReturnTypeHandler(byte.class, BYTE_HANDLER);
1:264011e:     s.registerReturnTypeHandler(char.class, CHAR_HANDLER);
1:264011e:     s.registerReturnTypeHandler(boolean.class, BOOLEAN_HANDLER);
1:264011e:   }
14:4e2fb0c: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:264011e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.unittest.mocks;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: /**
1:  * <p>This class contains some return type handlers that provides some default behavior.</p>
1:  */
1: public class DefaultReturnTypeHandlers
1: {
1:   /** A handler for Longs */
1:   public static final ReturnTypeHandler LONG_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return Long.valueOf(0);
1:     }
1:   };
1:   /** A handler for Integers */
1:   public static final ReturnTypeHandler INT_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return Integer.valueOf(0);
1:     }
1:   };
1:   /** A handler for Shorts */
1:   public static final ReturnTypeHandler SHORT_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return Short.valueOf((short)0);
1:     }
1:   };
1:   /** A handler for Bytes */
1:   public static final ReturnTypeHandler BYTE_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return Byte.valueOf((byte)0);
1:     }
1:   };
1:   /** A handler for Characters */
1:   public static final ReturnTypeHandler CHAR_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return Character.valueOf(' ');
1:     }
1:   };
1:   /** A handler for Strings */
1:   public static final ReturnTypeHandler STRING_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return "";
1:     }
1:   };
1:   /** A handler for Lists */
1:   public static final ReturnTypeHandler LIST_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return new ArrayList<Object>();
1:     }
1:   };
1:   /** A handler for Maps */
1:   public static final ReturnTypeHandler MAP_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return new HashMap<Object,Object>();
1:     }
1:   };
1:   /** A handler for Setss */
1:   public static final ReturnTypeHandler SET_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return new HashSet<Object>();
1:     }
1:   };
1:   /** A handler for Floats */
1:   public static final ReturnTypeHandler FLOAT_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return new Float(0.0f);
1:     }
1:   };
1:   /** A handler for Doubles */
1:   public static final ReturnTypeHandler DOUBLE_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return new Double(0.0d);
1:     }
1:   };
1:   /** A handler for Booleans */
1:   public static final ReturnTypeHandler BOOLEAN_HANDLER = new ReturnTypeHandler() {
1:     public Object handle(Class<?> class1, Skeleton parent)
1:     {
1:       return Boolean.FALSE;
1:     }
1:   };
1:   /**
1:    * Register all the default handlers against the specified skeleton.
1:    * 
1:    * @param s the skeleton
1:    */
1:   public static void registerDefaultHandlers(Skeleton s)
1:   {
1:     s.registerReturnTypeHandler(Double.class, DOUBLE_HANDLER);
1:     s.registerReturnTypeHandler(Float.class, FLOAT_HANDLER);
1:     s.registerReturnTypeHandler(Long.class, LONG_HANDLER);
1:     s.registerReturnTypeHandler(Integer.class, INT_HANDLER);
1:     s.registerReturnTypeHandler(Short.class, SHORT_HANDLER);
1:     s.registerReturnTypeHandler(Byte.class, BYTE_HANDLER);
1:     s.registerReturnTypeHandler(Boolean.class, BOOLEAN_HANDLER);
1:     s.registerReturnTypeHandler(Character.class, CHAR_HANDLER);
1:     s.registerReturnTypeHandler(String.class, STRING_HANDLER);
1:     s.registerReturnTypeHandler(List.class, LIST_HANDLER);
1:     s.registerReturnTypeHandler(Map.class, MAP_HANDLER);
1:     s.registerReturnTypeHandler(Set.class, SET_HANDLER);
1:     s.registerReturnTypeHandler(double.class, DOUBLE_HANDLER);
1:     s.registerReturnTypeHandler(float.class, FLOAT_HANDLER);
1:     s.registerReturnTypeHandler(long.class, LONG_HANDLER);
1:     s.registerReturnTypeHandler(int.class, INT_HANDLER);
1:     s.registerReturnTypeHandler(short.class, SHORT_HANDLER);
1:     s.registerReturnTypeHandler(byte.class, BYTE_HANDLER);
1:     s.registerReturnTypeHandler(char.class, CHAR_HANDLER);
1:     s.registerReturnTypeHandler(boolean.class, BOOLEAN_HANDLER);
1:   }
commit:4e2fb0c
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.unittest.mocks;
0: 
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: 
0: /**
0:  * <p>This class contains some return type handlers that provides some default behavior.</p>
0:  */
0: public class DefaultReturnTypeHandlers
0: {
0:   /** A handler for Longs */
0:   public static final ReturnTypeHandler LONG_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return Long.valueOf(0);
1:     }
0:   };
0:   /** A handler for Integers */
0:   public static final ReturnTypeHandler INT_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return Integer.valueOf(0);
1:     }
0:   };
0:   /** A handler for Shorts */
0:   public static final ReturnTypeHandler SHORT_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return Short.valueOf((short)0);
1:     }
0:   };
0:   /** A handler for Bytes */
0:   public static final ReturnTypeHandler BYTE_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return Byte.valueOf((byte)0);
1:     }
0:   };
0:   /** A handler for Characters */
0:   public static final ReturnTypeHandler CHAR_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return Character.valueOf(' ');
1:     }
0:   };
0:   /** A handler for Strings */
0:   public static final ReturnTypeHandler STRING_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return "";
1:     }
0:   };
0:   /** A handler for Lists */
0:   public static final ReturnTypeHandler LIST_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return new ArrayList<Object>();
1:     }
0:   };
0:   /** A handler for Maps */
0:   public static final ReturnTypeHandler MAP_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return new HashMap<Object,Object>();
1:     }
0:   };
0:   /** A handler for Setss */
0:   public static final ReturnTypeHandler SET_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return new HashSet<Object>();
1:     }
0:   };
0:   /** A handler for Floats */
0:   public static final ReturnTypeHandler FLOAT_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return new Float(0.0f);
1:     }
0:   };
0:   /** A handler for Doubles */
0:   public static final ReturnTypeHandler DOUBLE_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return new Double(0.0d);
1:     }
0:   };
0:   /** A handler for Booleans */
0:   public static final ReturnTypeHandler BOOLEAN_HANDLER = new ReturnTypeHandler() {
0:     public Object handle(Class<?> class1, Skeleton parent)
0:     {
0:       return Boolean.FALSE;
1:     }
0:   };
0:   /**
0:    * Register all the default handlers against the specified skeleton.
0:    * 
0:    * @param s the skeleton
0:    */
0:   public static void registerDefaultHandlers(Skeleton s)
0:   {
0:     s.registerReturnTypeHandler(Double.class, DOUBLE_HANDLER);
0:     s.registerReturnTypeHandler(Float.class, FLOAT_HANDLER);
0:     s.registerReturnTypeHandler(Long.class, LONG_HANDLER);
0:     s.registerReturnTypeHandler(Integer.class, INT_HANDLER);
0:     s.registerReturnTypeHandler(Short.class, SHORT_HANDLER);
0:     s.registerReturnTypeHandler(Byte.class, BYTE_HANDLER);
0:     s.registerReturnTypeHandler(Boolean.class, BOOLEAN_HANDLER);
0:     s.registerReturnTypeHandler(Character.class, CHAR_HANDLER);
0:     s.registerReturnTypeHandler(String.class, STRING_HANDLER);
0:     s.registerReturnTypeHandler(List.class, LIST_HANDLER);
0:     s.registerReturnTypeHandler(Map.class, MAP_HANDLER);
0:     s.registerReturnTypeHandler(Set.class, SET_HANDLER);
0:     s.registerReturnTypeHandler(double.class, DOUBLE_HANDLER);
0:     s.registerReturnTypeHandler(float.class, FLOAT_HANDLER);
0:     s.registerReturnTypeHandler(long.class, LONG_HANDLER);
0:     s.registerReturnTypeHandler(int.class, INT_HANDLER);
0:     s.registerReturnTypeHandler(short.class, SHORT_HANDLER);
0:     s.registerReturnTypeHandler(byte.class, BYTE_HANDLER);
0:     s.registerReturnTypeHandler(char.class, CHAR_HANDLER);
0:     s.registerReturnTypeHandler(boolean.class, BOOLEAN_HANDLER);
1:   }
1: }
============================================================================