1:05c76d5: /*
1:05c76d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:05c76d5:  * or more contributor license agreements.  See the NOTICE file
1:05c76d5:  * distributed with this work for additional information
1:05c76d5:  * regarding copyright ownership.  The ASF licenses this file
1:05c76d5:  * to you under the Apache License, Version 2.0 (the
1:05c76d5:  * "License"); you may not use this file except in compliance
1:05c76d5:  * with the License.  You may obtain a copy of the License at
1:05c76d5:  *
1:05c76d5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:05c76d5:  *
1:05c76d5:  * Unless required by applicable law or agreed to in writing,
1:05c76d5:  * software distributed under the License is distributed on an
1:05c76d5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:05c76d5:  * KIND, either express or implied.  See the License for the
1:05c76d5:  * specific language governing permissions and limitations
1:05c76d5:  * under the License.
1:05c76d5:  */
1:05c76d5: package org.apache.aries.samples.blueprint.helloworld.itests;
1:05c76d5: 
1:05c76d5: import static org.ops4j.pax.exam.CoreOptions.options;
1:05c76d5: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
1:05c76d5: import static org.ops4j.pax.exam.OptionUtils.combine;
1:05c76d5: 
1:05c76d5: import java.io.BufferedReader;
1:05c76d5: import java.io.FileNotFoundException;
1:05c76d5: import java.io.IOException;
1:05c76d5: import java.io.InputStream;
1:05c76d5: import java.io.InputStreamReader;
1:05c76d5: import java.net.HttpURLConnection;
1:05c76d5: import java.net.MalformedURLException;
1:05c76d5: import java.net.URL;
1:05c76d5: import java.util.ArrayList;
1:05c76d5: import java.util.List;
1:05c76d5: import java.util.Properties;
1:05c76d5: 
1:05c76d5: import org.junit.After;
1:05c76d5: import org.junit.Before;
1:05c76d5: import org.ops4j.pax.exam.CoreOptions;
1:05c76d5: import org.ops4j.pax.exam.Inject;
1:05c76d5: import org.ops4j.pax.exam.Option;
1:05c76d5: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1:05c76d5: import org.ops4j.pax.url.mvn.Handler;
1:05c76d5: import org.ops4j.pax.url.mvn.ServiceConstants;
1:05c76d5: import org.osgi.framework.Bundle;
1:05c76d5: import org.osgi.framework.BundleContext;
1:05c76d5: import org.osgi.framework.Constants;
1:05c76d5: import org.osgi.framework.Filter;
1:05c76d5: import org.osgi.framework.FrameworkUtil;
1:05c76d5: import org.osgi.framework.InvalidSyntaxException;
1:05c76d5: import org.osgi.framework.ServiceReference;
1:05c76d5: import org.osgi.util.tracker.ServiceTracker;
1:05c76d5: 
1:05c76d5: 
1:05c76d5: public abstract class AbstractIntegrationTest {
1:05c76d5: 
1:05c76d5:     private static final int CONNECTION_TIMEOUT = 30000;
1:05c76d5:     public static final long DEFAULT_TIMEOUT = 60000;
1:05c76d5: 
1:05c76d5: 	@Inject
1:05c76d5:   	protected BundleContext bundleContext;
1:05c76d5: 
1:05c76d5:     private List<ServiceTracker> srs;
1:05c76d5: 
1:05c76d5:     @Before
1:05c76d5:     public void setUp() {
1:05c76d5:         srs = new ArrayList<ServiceTracker>();
1:05c76d5:     }
1:05c76d5:     
1:05c76d5:     @After
1:05c76d5:     public void tearDown() throws Exception{
1:05c76d5:         for (ServiceTracker st : srs) {
1:05c76d5:             if (st != null) {
1:05c76d5:                 st.close();
1:05c76d5:             }  
1:05c76d5:         }
1:05c76d5:     }
1:05c76d5: 
1:05c76d5: 	public static MavenArtifactProvisionOption mavenBundle(String groupId, String artifactId) {
1:05c76d5:         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();
1:05c76d5:     }
1:05c76d5: 
1:05c76d5:     public static MavenArtifactProvisionOption mavenBundleInTest(String groupId, String artifactId) {
1:05c76d5:         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).version(getArtifactVersion(groupId, artifactId));
1:05c76d5:     }
1:05c76d5: 
1:05c76d5: 	public static String getArtifactVersion( final String groupId,
1:05c76d5:                                              final String artifactId )
1:05c76d5:     {
1:05c76d5:         final Properties dependencies = new Properties();
1:05c76d5:         try
1:05c76d5:         {
1:05c76d5:             InputStream in = getFileFromClasspath("META-INF/maven/dependencies.properties");
1:05c76d5:             try {
1:05c76d5:                 dependencies.load(in);
1:05c76d5:             } finally {
1:05c76d5:                 in.close();
1:05c76d5:             }
1:05c76d5:             final String version = dependencies.getProperty( groupId + "/" + artifactId + "/version" );
1:05c76d5:             if( version == null )
1:05c76d5:             {
1:05c76d5:                 throw new RuntimeException(
1:05c76d5:                     "Could not resolve version. Do you have a dependency for " + groupId + "/" + artifactId
1:05c76d5:                     + " in your maven project?"
1:05c76d5:                 );
1:05c76d5:             }
1:05c76d5:             return version;
1:05c76d5:         }
1:05c76d5:         catch( IOException e )
1:05c76d5:         {
1:05c76d5:             // TODO throw a better exception
1:05c76d5:             throw new RuntimeException(
1:05c76d5:              "Could not resolve version. Did you configured the plugin in your maven project?"
1:05c76d5:              + "Or maybe you did not run the maven build and you are using an IDE?"
1:05c76d5:             );
1:05c76d5:         }
1:05c76d5:      }
1:05c76d5: 
1:05c76d5: 
1:05c76d5: 	protected Bundle getInstalledBundle(String symbolicName) {
1:05c76d5:         for (Bundle b : bundleContext.getBundles()) {
1:05c76d5:             if (b.getSymbolicName().equals(symbolicName)) {
1:05c76d5:                 return b;
1:05c76d5:             }
1:05c76d5:         }
1:05c76d5:         return null;
1:05c76d5:     }
1:05c76d5: 
1:05c76d5: 	private static InputStream getFileFromClasspath( final String filePath )
1:05c76d5:         throws FileNotFoundException
1:05c76d5:     {
1:05c76d5:         try
1:05c76d5:         {
1:05c76d5:             URL fileURL = AbstractIntegrationTest.class.getClassLoader().getResource( filePath );
1:05c76d5:             if( fileURL == null )
1:05c76d5:             {
1:05c76d5:                 throw new FileNotFoundException( "File [" + filePath + "] could not be found in classpath" );
1:05c76d5:             }
1:05c76d5:             return fileURL.openStream();
1:05c76d5:         }
1:05c76d5:         catch (IOException e)
1:05c76d5:         {
1:05c76d5:             throw new FileNotFoundException( "File [" + filePath + "] could not be found: " + e.getMessage() );
1:05c76d5:         }
1:05c76d5:     }
1:05c76d5: 
1:05c76d5: 	protected void listBundleServices(Bundle b) {
1:05c76d5:     	ServiceReference []srb = b.getRegisteredServices();
1:05c76d5: 		for(ServiceReference sr:srb){
1:05c76d5: 			System.out.println(b.getSymbolicName() + " SERVICE: "+sr);
1:05c76d5:     	}	
1:05c76d5: 	}
1:05c76d5: 
1:05c76d5: 	protected Boolean isServiceRegistered(Bundle b) {
1:05c76d5: 		ServiceReference []srb = b.getRegisteredServices();
1:05c76d5: 		if(srb == null) {
1:05c76d5: 			return false;
1:05c76d5: 		}
1:05c76d5:     	return true;
1:05c76d5: 	}
1:05c76d5: 
1:05c76d5:     protected void waitForServices(Bundle b, String sclass) {
1:05c76d5: 		try {
1:05c76d5: 			BundleContext bc = b.getBundleContext();
1:05c76d5:     		String bsn = b.getSymbolicName();
1:05c76d5: 			ServiceTracker st = new ServiceTracker(bc, sclass, null);
1:05c76d5:     		st.open();
1:05c76d5:     		Object bac = st.waitForService(DEFAULT_TIMEOUT);
1:05c76d5: 			/* Uncomment for debug */
1:05c76d5: 			/*
1:05c76d5: 			if(bac == null) {
1:05c76d5: 				System.out.println("SERVICE NOTFOUND " + bsn);
1:05c76d5: 			} else {
1:05c76d5: 				System.out.println("SERVICE FOUND " + bsn);
1:05c76d5: 			}
1:05c76d5: 			*/
1:05c76d5: 			st.close();
1:05c76d5: 			return;
1:05c76d5: 		} 
1:05c76d5: 		catch (Exception e) {
1:05c76d5: 			System.out.println("Failed to register services for " + b.getSymbolicName() + e.getMessage());	
1:05c76d5: 		}
1:05c76d5: 	}
1:05c76d5: 
1:05c76d5: 
1:05c76d5: 	protected static Option[] updateOptions(Option[] options) {
1:05c76d5: 	if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
1:05c76d5:             Option[] ibmOptions = options(
1:05c76d5:                 wrappedBundle(mavenBundle("org.ops4j.pax.exam", "pax-exam-junit"))
1:05c76d5:             );
1:05c76d5:             options = combine(ibmOptions, options);
1:05c76d5:         }
1:05c76d5: 
1:05c76d5:         return options;
1:05c76d5:     }
1:05c76d5: 
1:05c76d5:   public static String getHTTPResponse(HttpURLConnection conn) throws IOException
1:05c76d5:   {
1:05c76d5:     StringBuilder response = new StringBuilder();
1:05c76d5:     BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),
1:05c76d5:         "ISO-8859-1"));
1:05c76d5:     try {
1:05c76d5:       for (String s = reader.readLine(); s != null; s = reader.readLine()) {
1:05c76d5:         response.append(s).append("\r\n");
1:05c76d5:       }
1:05c76d5:     } finally {
1:05c76d5:       reader.close();
1:05c76d5:     }
1:05c76d5: 
1:05c76d5:     return response.toString();
1:05c76d5:   }
1:05c76d5: 
1:05c76d5:   public static HttpURLConnection makeConnection(String contextPath) throws IOException
1:05c76d5:   {
1:05c76d5:     URL url = new URL(contextPath);
1:05c76d5:     HttpURLConnection conn = (HttpURLConnection) url.openConnection();
1:05c76d5: 
1:05c76d5:     conn.setConnectTimeout(CONNECTION_TIMEOUT);
1:05c76d5:     conn.connect();
1:05c76d5: 
1:05c76d5:     return conn;
1:05c76d5:   }
1:05c76d5:   
1:05c76d5:   protected <T> T getOsgiService(Class<T> type, long timeout) {
1:05c76d5:       return getOsgiService(type, null, timeout);
1:05c76d5:   }
1:05c76d5: 
1:05c76d5:   protected <T> T getOsgiService(Class<T> type) {
1:05c76d5:     return getOsgiService(type, null, DEFAULT_TIMEOUT);
1:05c76d5:   }
1:05c76d5:     
1:05c76d5:   protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {
1:05c76d5:     return getOsgiService(null, type, filter, timeout);
1:05c76d5:   }
1:05c76d5: 
1:05c76d5:   protected <T> T getOsgiService(BundleContext bc, Class<T> type,
1:05c76d5:       String filter, long timeout) {
1:05c76d5:     ServiceTracker tracker = null;
1:05c76d5:     try {
1:05c76d5:       String flt;
1:05c76d5:       if (filter != null) {
1:05c76d5:         if (filter.startsWith("(")) {
1:05c76d5:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")"
1:05c76d5:               + filter + ")";
1:05c76d5:         } else {
1:05c76d5:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")("
1:05c76d5:               + filter + "))";
1:05c76d5:         }
1:05c76d5:       } else {
1:05c76d5:         flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:05c76d5:       }
1:05c76d5:       Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:05c76d5:       tracker = new ServiceTracker(bc == null ? bundleContext : bc, osgiFilter,
1:05c76d5:           null);
1:05c76d5:       tracker.open();
1:05c76d5:       
1:05c76d5:       // add tracker to the list of trackers we close at tear down
1:05c76d5:       srs.add(tracker);
1:05c76d5:       Object x = tracker.waitForService(timeout);
1:05c76d5:       Object svc = type.cast(x);
1:05c76d5:       if (svc == null) {
1:05c76d5:         throw new RuntimeException("Gave up waiting for service " + flt);
1:05c76d5:       }
1:05c76d5:       return type.cast(svc);
1:05c76d5:     } catch (InvalidSyntaxException e) {
1:05c76d5:       throw new IllegalArgumentException("Invalid filter", e);
1:05c76d5:     } catch (InterruptedException e) {
1:05c76d5:       throw new RuntimeException(e);
1:05c76d5:     }
1:05c76d5:   }
1:05c76d5:   
1:05c76d5:   public static URL getUrlToEba(String groupId, String artifactId) throws MalformedURLException {
1:05c76d5:     String artifactVersion = getArtifactVersion(groupId, artifactId);
1:05c76d5: 
1:05c76d5:     // Need to use handler from org.ops4j.pax.url.mvn
1:05c76d5:     URL urlToEba = new URL(null,
1:05c76d5:         ServiceConstants.PROTOCOL + ":" + groupId + "/" +artifactId + "/"
1:05c76d5:             + artifactVersion + "/eba", new Handler());
1:05c76d5:     return urlToEba;
1:05c76d5:   }
1:05c76d5: 
1:05c76d5: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:05c76d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blueprint.helloworld.itests;
1: 
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
1: import static org.ops4j.pax.exam.OptionUtils.combine;
1: 
1: import java.io.BufferedReader;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.net.HttpURLConnection;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Inject;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.ops4j.pax.url.mvn.Handler;
1: import org.ops4j.pax.url.mvn.ServiceConstants;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: 
1: public abstract class AbstractIntegrationTest {
1: 
1:     private static final int CONNECTION_TIMEOUT = 30000;
1:     public static final long DEFAULT_TIMEOUT = 60000;
1: 
1: 	@Inject
1:   	protected BundleContext bundleContext;
1: 
1:     private List<ServiceTracker> srs;
1: 
1:     @Before
1:     public void setUp() {
1:         srs = new ArrayList<ServiceTracker>();
1:     }
1:     
1:     @After
1:     public void tearDown() throws Exception{
1:         for (ServiceTracker st : srs) {
1:             if (st != null) {
1:                 st.close();
1:             }  
1:         }
1:     }
1: 
1: 	public static MavenArtifactProvisionOption mavenBundle(String groupId, String artifactId) {
1:         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();
1:     }
1: 
1:     public static MavenArtifactProvisionOption mavenBundleInTest(String groupId, String artifactId) {
1:         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).version(getArtifactVersion(groupId, artifactId));
1:     }
1: 
1: 	public static String getArtifactVersion( final String groupId,
1:                                              final String artifactId )
1:     {
1:         final Properties dependencies = new Properties();
1:         try
1:         {
1:             InputStream in = getFileFromClasspath("META-INF/maven/dependencies.properties");
1:             try {
1:                 dependencies.load(in);
1:             } finally {
1:                 in.close();
1:             }
1:             final String version = dependencies.getProperty( groupId + "/" + artifactId + "/version" );
1:             if( version == null )
1:             {
1:                 throw new RuntimeException(
1:                     "Could not resolve version. Do you have a dependency for " + groupId + "/" + artifactId
1:                     + " in your maven project?"
1:                 );
1:             }
1:             return version;
1:         }
1:         catch( IOException e )
1:         {
1:             // TODO throw a better exception
1:             throw new RuntimeException(
1:              "Could not resolve version. Did you configured the plugin in your maven project?"
1:              + "Or maybe you did not run the maven build and you are using an IDE?"
1:             );
1:         }
1:      }
1: 
1: 
1: 	protected Bundle getInstalledBundle(String symbolicName) {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if (b.getSymbolicName().equals(symbolicName)) {
1:                 return b;
1:             }
1:         }
1:         return null;
1:     }
1: 
1: 	private static InputStream getFileFromClasspath( final String filePath )
1:         throws FileNotFoundException
1:     {
1:         try
1:         {
1:             URL fileURL = AbstractIntegrationTest.class.getClassLoader().getResource( filePath );
1:             if( fileURL == null )
1:             {
1:                 throw new FileNotFoundException( "File [" + filePath + "] could not be found in classpath" );
1:             }
1:             return fileURL.openStream();
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FileNotFoundException( "File [" + filePath + "] could not be found: " + e.getMessage() );
1:         }
1:     }
1: 
1: 	protected void listBundleServices(Bundle b) {
1:     	ServiceReference []srb = b.getRegisteredServices();
1: 		for(ServiceReference sr:srb){
1: 			System.out.println(b.getSymbolicName() + " SERVICE: "+sr);
1:     	}	
1: 	}
1: 
1: 	protected Boolean isServiceRegistered(Bundle b) {
1: 		ServiceReference []srb = b.getRegisteredServices();
1: 		if(srb == null) {
1: 			return false;
1: 		}
1:     	return true;
1: 	}
1: 
1:     protected void waitForServices(Bundle b, String sclass) {
1: 		try {
1: 			BundleContext bc = b.getBundleContext();
1:     		String bsn = b.getSymbolicName();
1: 			ServiceTracker st = new ServiceTracker(bc, sclass, null);
1:     		st.open();
1:     		Object bac = st.waitForService(DEFAULT_TIMEOUT);
1: 			/* Uncomment for debug */
1: 			/*
1: 			if(bac == null) {
1: 				System.out.println("SERVICE NOTFOUND " + bsn);
1: 			} else {
1: 				System.out.println("SERVICE FOUND " + bsn);
1: 			}
1: 			*/
1: 			st.close();
1: 			return;
1: 		} 
1: 		catch (Exception e) {
1: 			System.out.println("Failed to register services for " + b.getSymbolicName() + e.getMessage());	
1: 		}
1: 	}
1: 
1: 
1: 	protected static Option[] updateOptions(Option[] options) {
1: 	if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
1:             Option[] ibmOptions = options(
1:                 wrappedBundle(mavenBundle("org.ops4j.pax.exam", "pax-exam-junit"))
1:             );
1:             options = combine(ibmOptions, options);
1:         }
1: 
1:         return options;
1:     }
1: 
1:   public static String getHTTPResponse(HttpURLConnection conn) throws IOException
1:   {
1:     StringBuilder response = new StringBuilder();
1:     BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),
1:         "ISO-8859-1"));
1:     try {
1:       for (String s = reader.readLine(); s != null; s = reader.readLine()) {
1:         response.append(s).append("\r\n");
1:       }
1:     } finally {
1:       reader.close();
1:     }
1: 
1:     return response.toString();
1:   }
1: 
1:   public static HttpURLConnection makeConnection(String contextPath) throws IOException
1:   {
1:     URL url = new URL(contextPath);
1:     HttpURLConnection conn = (HttpURLConnection) url.openConnection();
1: 
1:     conn.setConnectTimeout(CONNECTION_TIMEOUT);
1:     conn.connect();
1: 
1:     return conn;
1:   }
1:   
1:   protected <T> T getOsgiService(Class<T> type, long timeout) {
1:       return getOsgiService(type, null, timeout);
1:   }
1: 
1:   protected <T> T getOsgiService(Class<T> type) {
1:     return getOsgiService(type, null, DEFAULT_TIMEOUT);
1:   }
1:     
1:   protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {
1:     return getOsgiService(null, type, filter, timeout);
1:   }
1: 
1:   protected <T> T getOsgiService(BundleContext bc, Class<T> type,
1:       String filter, long timeout) {
1:     ServiceTracker tracker = null;
1:     try {
1:       String flt;
1:       if (filter != null) {
1:         if (filter.startsWith("(")) {
1:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")"
1:               + filter + ")";
1:         } else {
1:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")("
1:               + filter + "))";
1:         }
1:       } else {
1:         flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:       }
1:       Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:       tracker = new ServiceTracker(bc == null ? bundleContext : bc, osgiFilter,
1:           null);
1:       tracker.open();
1:       
1:       // add tracker to the list of trackers we close at tear down
1:       srs.add(tracker);
1:       Object x = tracker.waitForService(timeout);
1:       Object svc = type.cast(x);
1:       if (svc == null) {
1:         throw new RuntimeException("Gave up waiting for service " + flt);
1:       }
1:       return type.cast(svc);
1:     } catch (InvalidSyntaxException e) {
1:       throw new IllegalArgumentException("Invalid filter", e);
1:     } catch (InterruptedException e) {
1:       throw new RuntimeException(e);
1:     }
1:   }
1:   
1:   public static URL getUrlToEba(String groupId, String artifactId) throws MalformedURLException {
1:     String artifactVersion = getArtifactVersion(groupId, artifactId);
1: 
1:     // Need to use handler from org.ops4j.pax.url.mvn
1:     URL urlToEba = new URL(null,
1:         ServiceConstants.PROTOCOL + ":" + groupId + "/" +artifactId + "/"
1:             + artifactVersion + "/eba", new Handler());
1:     return urlToEba;
1:   }
1: 
1: }
============================================================================