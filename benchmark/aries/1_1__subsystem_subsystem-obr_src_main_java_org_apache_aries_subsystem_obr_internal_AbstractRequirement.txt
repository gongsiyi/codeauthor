1:9731fd6: /*
1:9731fd6:  * Licensed under the Apache License, Version 2.0 (the "License");
1:9731fd6:  * you may not use this file except in compliance with the License.
1:9731fd6:  * You may obtain a copy of the License at
1:9731fd6:  *
1:9731fd6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9731fd6:  *
1:9731fd6:  * Unless required by applicable law or agreed to in writing, software
1:9731fd6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9731fd6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9731fd6:  * See the License for the specific language governing permissions and
1:9731fd6:  * limitations under the License.
1:9731fd6:  */
1:9731fd6: package org.apache.aries.subsystem.obr.internal;
1:9731fd6: 
1:9731fd6: import org.osgi.resource.Requirement;
1:9731fd6: 
1:9731fd6: public abstract class AbstractRequirement implements Requirement {
1:9731fd6: 	@Override
1:9731fd6: 	public boolean equals(Object o) {
1:9731fd6: 		if (o == this)
1:9731fd6: 			return true;
1:9731fd6: 		if (!(o instanceof Requirement))
1:9731fd6: 			return false;
1:9731fd6: 		Requirement c = (Requirement)o;
1:9731fd6: 		return c.getNamespace().equals(getNamespace())
1:9731fd6: 				&& c.getAttributes().equals(getAttributes())
1:9731fd6: 				&& c.getDirectives().equals(getDirectives())
1:9731fd6: 				&& c.getResource() != null ? c.getResource().equals(
1:9731fd6: 				getResource()) : getResource() == null;
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	@Override
1:9731fd6: 	public int hashCode() {
1:9731fd6: 		int result = 17;
1:9731fd6: 		result = 31 * result + getNamespace().hashCode();
1:9731fd6: 		result = 31 * result + getAttributes().hashCode();
1:9731fd6: 		result = 31 * result + getDirectives().hashCode();
1:9731fd6: 		result = 31 * result
1:9731fd6: 				+ (getResource() == null ? 0 : getResource().hashCode());
1:9731fd6: 		return result;
1:9731fd6: 	}
1:9731fd6: 	
1:9731fd6: 	@Override
1:9731fd6: 	public String toString() {
1:9731fd6: 		return new StringBuffer().append(getClass().getName()).append(": ")
1:9731fd6: 				.append("namespace=").append(getNamespace())
1:9731fd6: 				.append(", attributes=").append(getAttributes())
1:9731fd6: 				.append(", directives=").append(getDirectives())
1:9731fd6: 				.append(", resource=").append(getResource()).toString();
1:9731fd6: 	}
1:9731fd6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.obr.internal;
1: 
1: import org.osgi.resource.Requirement;
1: 
1: public abstract class AbstractRequirement implements Requirement {
1: 	@Override
1: 	public boolean equals(Object o) {
1: 		if (o == this)
1: 			return true;
1: 		if (!(o instanceof Requirement))
1: 			return false;
1: 		Requirement c = (Requirement)o;
1: 		return c.getNamespace().equals(getNamespace())
1: 				&& c.getAttributes().equals(getAttributes())
1: 				&& c.getDirectives().equals(getDirectives())
1: 				&& c.getResource() != null ? c.getResource().equals(
1: 				getResource()) : getResource() == null;
1: 	}
1: 	
1: 	@Override
1: 	public int hashCode() {
1: 		int result = 17;
1: 		result = 31 * result + getNamespace().hashCode();
1: 		result = 31 * result + getAttributes().hashCode();
1: 		result = 31 * result + getDirectives().hashCode();
1: 		result = 31 * result
1: 				+ (getResource() == null ? 0 : getResource().hashCode());
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
1: 		return new StringBuffer().append(getClass().getName()).append(": ")
1: 				.append("namespace=").append(getNamespace())
1: 				.append(", attributes=").append(getAttributes())
1: 				.append(", directives=").append(getDirectives())
1: 				.append(", resource=").append(getResource()).toString();
1: 	}
1: }
============================================================================