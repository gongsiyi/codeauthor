1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
8:fdf3952: 
1:7186eab: import static org.junit.Assert.assertNotNull;
1:7186eab: import static org.mockito.Mockito.mock;
1:7186eab: import static org.mockito.Mockito.verify;
1:7186eab: import static org.mockito.Mockito.when;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.Logger;
1:f5398b2: import org.apache.aries.jmx.agent.JMXAgent;
1:f5398b2: import org.apache.aries.jmx.agent.JMXAgentContext;
1:fdf3952: import org.junit.Test;
1:7186eab: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:7186eab: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.startlevel.StartLevel;
1:fdf3952: 
1:fdf3952: /**
1:7186eab:  *
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class BundleStateMBeanHandlerTest {
1:7186eab: 
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testOpenAndClose() throws Exception {
1:7186eab: 
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:7186eab:         when(context.getProperty(Constants.FRAMEWORK_UUID)).thenReturn("some-uuid");
1:7186eab: 
1:fdf3952:         Logger logger = mock(Logger.class);
1:7186eab: 
1:7186eab:         Bundle mockSystemBundle = mock(Bundle.class);
1:7186eab:         when(mockSystemBundle.getSymbolicName()).thenReturn("the.sytem.bundle");
1:7186eab:         when(context.getBundle(0)).thenReturn(mockSystemBundle);
1:7186eab: 
1:fdf3952:         ServiceReference packageAdminRef = mock(ServiceReference.class);
1:fdf3952:         PackageAdmin packageAdmin = mock(PackageAdmin.class);
1:fdf3952:         when(context.getServiceReference(PackageAdmin.class.getName())).thenReturn(packageAdminRef);
1:fdf3952:         when(context.getService(packageAdminRef)).thenReturn(packageAdmin);
1:fdf3952:         ServiceReference startLevelRef = mock(ServiceReference.class);
1:fdf3952:         StartLevel startLevel = mock(StartLevel.class);
1:fdf3952:         when(context.getServiceReference(StartLevel.class.getName())).thenReturn(startLevelRef);
1:fdf3952:         when(context.getService(startLevelRef)).thenReturn(startLevel);
1:7186eab: 
1:f5398b2:         JMXAgent agent = mock(JMXAgent.class);
1:f5398b2:         JMXAgentContext agentContext = new JMXAgentContext(context, agent, logger);
1:fdf3952: 
1:a0df2a3:         BundleStateMBeanHandler handler = new BundleStateMBeanHandler(agentContext, new StateConfig());
1:fdf3952:         handler.open();
1:7186eab: 
1:fdf3952:         assertNotNull(handler.getMbean());
1:7186eab: 
1:fdf3952:         handler.close();
1:fdf3952:         verify(context).ungetService(packageAdminRef);
1:fdf3952:         verify(context).ungetService(startLevelRef);
1:7186eab: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:a0df2a3
/////////////////////////////////////////////////////////////////////////
1:         BundleStateMBeanHandler handler = new BundleStateMBeanHandler(agentContext, new StateConfig());
commit:0273964
commit:7186eab
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1:  *
1: 
1: 
1:         when(context.getProperty(Constants.FRAMEWORK_UUID)).thenReturn("some-uuid");
1: 
1: 
1:         Bundle mockSystemBundle = mock(Bundle.class);
1:         when(mockSystemBundle.getSymbolicName()).thenReturn("the.sytem.bundle");
1:         when(context.getBundle(0)).thenReturn(mockSystemBundle);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
0: import static org.junit.Assert.*;
1: 
1: import org.apache.aries.jmx.Logger;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.startlevel.StartLevel;
1: 
0: import static org.mockito.Mockito.*;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class BundleStateMBeanHandlerTest {
1: 
1:     
1:     @Test
1:     public void testOpenAndClose() throws Exception {
1:         
1:         BundleContext context = mock(BundleContext.class);
1:         Logger logger = mock(Logger.class);
1:         
1:         ServiceReference packageAdminRef = mock(ServiceReference.class);
1:         PackageAdmin packageAdmin = mock(PackageAdmin.class);
1:         when(context.getServiceReference(PackageAdmin.class.getName())).thenReturn(packageAdminRef);
1:         when(context.getService(packageAdminRef)).thenReturn(packageAdmin);
1:         ServiceReference startLevelRef = mock(ServiceReference.class);
1:         StartLevel startLevel = mock(StartLevel.class);
1:         when(context.getServiceReference(StartLevel.class.getName())).thenReturn(startLevelRef);
1:         when(context.getService(startLevelRef)).thenReturn(startLevel);
1:         
0:         BundleStateMBeanHandler handler = new BundleStateMBeanHandler(context, logger);
1:         handler.open();
1:         
1:         assertNotNull(handler.getMbean());
1:         
1:         handler.close();
1:         verify(context).ungetService(packageAdminRef);
1:         verify(context).ungetService(startLevelRef);
1:         
1:     }
1: 
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.agent.JMXAgent;
1: import org.apache.aries.jmx.agent.JMXAgentContext;
/////////////////////////////////////////////////////////////////////////
1:         JMXAgent agent = mock(JMXAgent.class);
1:         JMXAgentContext agentContext = new JMXAgentContext(context, agent, logger);
0: 
0:         BundleStateMBeanHandler handler = new BundleStateMBeanHandler(agentContext);
============================================================================