1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:4c0430e: package org.apache.aries.tx.control.jpa.xa.impl;
5:4c0430e: 
1:4c0430e: import static java.util.Optional.ofNullable;
1:4c0430e: import static javax.persistence.spi.PersistenceUnitTransactionType.JTA;
1:81c668a: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:81c668a: 
1:4c0430e: import java.io.PrintWriter;
1:4c0430e: import java.sql.Connection;
1:4c0430e: import java.sql.SQLException;
1:4c0430e: import java.sql.SQLFeatureNotSupportedException;
1:4c0430e: import java.util.HashMap;
1:4c0430e: import java.util.Map;
1:81c668a: import java.util.UUID;
1:81c668a: import java.util.concurrent.Callable;
1:4c0430e: import java.util.logging.Logger;
1:4c0430e: 
1:4c0430e: import javax.persistence.EntityManagerFactory;
1:4c0430e: import javax.persistence.spi.PersistenceUnitTransactionType;
1:4c0430e: import javax.sql.DataSource;
1:81c668a: import javax.transaction.xa.XAResource;
1:4c0430e: 
1:81c668a: import org.apache.aries.tx.control.jdbc.common.impl.ScopedConnectionWrapper;
1:81c668a: import org.apache.aries.tx.control.jdbc.common.impl.TxConnectionWrapper;
1:81c668a: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XAConnectionWrapper;
1:426f022: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1:426f022: import org.apache.aries.tx.control.jpa.common.impl.InternalJPAEntityManagerProviderFactory;
1:4c0430e: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:81c668a: import org.osgi.service.transaction.control.TransactionContext;
1:4c0430e: import org.osgi.service.transaction.control.TransactionControl;
1:4c0430e: import org.osgi.service.transaction.control.TransactionException;
1:4c0430e: 
1:426f022: public class JPAEntityManagerProviderFactoryImpl implements InternalJPAEntityManagerProviderFactory {
1:4c0430e: 
1:4c0430e: 	@Override
1:426f022: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
1:4c0430e: 			Map<String, Object> resourceProviderProperties) {
1:426f022: 		return new DelayedJPAEntityManagerProvider(tx -> getProviderFor(emfb, jpaProperties, resourceProviderProperties, tx, null));
1:ebd8d15: 	}
1:ebd8d15: 
1:426f022: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
1:426f022: 		Map<String, Object> resourceProviderProperties, ThreadLocal<TransactionControl> localStore, Runnable onClose) {
1:ebd8d15: 		Map<String, Object> toUse;
1:ebd8d15: 		if(checkEnlistment(resourceProviderProperties)) {
1:ebd8d15: 			toUse = enlistDataSource(localStore, jpaProperties);
1:ebd8d15: 		} else {
1:ebd8d15: 			toUse = jpaProperties;
1:ebd8d15: 		}
1:426f022: 		return localStore.get().notSupported(() -> internalBuilderCreate(emfb, toUse, localStore, onClose));
1:81c668a: 	}
1:4c0430e: 
1:74e23ff: 	private Map<String, Object> enlistDataSource(ThreadLocal<TransactionControl> tx, Map<String, Object> jpaProperties) {
1:4c0430e: 		Map<String, Object> toReturn = new HashMap<>(jpaProperties);
1:4c0430e: 		
1:4c0430e: 		DataSource ds = (DataSource) jpaProperties.get("javax.persistence.jtaDataSource");
1:4c0430e: 
1:4c0430e: 		if(!jpaProperties.containsKey("javax.persistence.nonJtaDataSource")) {
1:9e5434c: 			toReturn.put("javax.persistence.nonJtaDataSource", ds);
3:4c0430e: 		}
1:4c0430e: 		
1:81c668a: 		toReturn.put("javax.persistence.jtaDataSource", new EnlistingDataSource(tx, ds));
1:4c0430e: 		
1:4c0430e: 		return toReturn;
1:4c0430e: 	}
1:4c0430e: 
1:426f022: 	private AbstractJPAEntityManagerProvider internalBuilderCreate(EntityManagerFactoryBuilder emfb,
1:426f022: 			Map<String, Object> jpaProperties, ThreadLocal<TransactionControl> tx, Runnable onClose) {
1:4c0430e: 		EntityManagerFactory emf = emfb.createEntityManagerFactory(jpaProperties);
1:4c0430e: 		
1:4c0430e: 		validateEMF(emf);
1:4c0430e: 		
1:426f022: 		return new JPAEntityManagerProviderImpl(emf, tx, () -> {
1:426f022: 			try {
1:426f022: 				emf.close();
1:426f022: 			} catch (Exception e) {
1:426f022: 			}
1:426f022: 			if (onClose != null) {
1:426f022: 				onClose.run();
1:426f022: 			}
1:426f022: 		});
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	private void validateEMF(EntityManagerFactory emf) {
1:4c0430e: 		Object o = emf.getProperties().get("javax.persistence.transactionType");
1:4c0430e: 		
1:4c0430e: 		PersistenceUnitTransactionType tranType;
1:4c0430e: 		if(o instanceof PersistenceUnitTransactionType) {
1:4c0430e: 			tranType = (PersistenceUnitTransactionType) o;
1:4c0430e: 		} else if (o instanceof String) {
1:4c0430e: 			tranType = PersistenceUnitTransactionType.valueOf(o.toString());
1:81c668a: 		} else {
1:4c0430e: 			//TODO log this?
1:4c0430e: 			tranType = JTA;
1:4c0430e: 		}
1:4c0430e: 		
1:4c0430e: 		if(JTA != tranType) {
1:4c0430e: 			throw new IllegalArgumentException("The supplied EntityManagerFactory is not declared RESOURCE_LOCAL");
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:426f022: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
1:4c0430e: 			Map<String, Object> resourceProviderProperties) {
1:4c0430e: 		checkEnlistment(resourceProviderProperties);
1:4c0430e: 		validateEMF(emf);
1:4c0430e: 		
1:426f022: 		return new JPAEntityManagerProviderImpl(emf, new ThreadLocal<>(), null);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	private boolean checkEnlistment(Map<String, Object> resourceProviderProperties) {
1:4c0430e: 		if (toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, false)) {
1:4c0430e: 			throw new TransactionException("This Resource Provider does not support Local transactions");
1:4c0430e: 		} else if (!toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true)) {
1:4c0430e: 			throw new TransactionException(
1:4c0430e: 					"This Resource Provider always enlists in XA transactions as it does not support local transactions");
1:4c0430e: 		}
1:4c0430e: 		
1:4c0430e: 		return !toBoolean(resourceProviderProperties, PRE_ENLISTED_DB_CONNECTION, false);
1:4c0430e: 	}
1:4c0430e: 	
1:4c0430e: 	public static boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1:4c0430e: 		Object o =  ofNullable(props)
1:4c0430e: 			.map(m -> m.get(key))
1:4c0430e: 			.orElse(defaultValue);
1:4c0430e: 		
1:4c0430e: 		if (o instanceof Boolean) {
1:4c0430e: 			return ((Boolean) o).booleanValue();
1:4c0430e: 		} else if(o instanceof String) {
1:4c0430e: 			return Boolean.parseBoolean((String) o);
2:4c0430e: 		} else {
1:4c0430e: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: 	
1:74e23ff: 	public static class EnlistingDataSource implements DataSource {
1:4c0430e: 		
1:4c0430e: 		private final DataSource delegate;
1:4c0430e: 
1:81c668a: 		private final UUID resourceId = UUID.randomUUID();
1:81c668a: 		
1:74e23ff: 		private final ThreadLocal<TransactionControl> txControlToUse;
1:74e23ff: 		
1:74e23ff: 		public EnlistingDataSource(ThreadLocal<TransactionControl> txControlToUse, DataSource delegate) {
1:74e23ff: 			this.txControlToUse = txControlToUse;
1:4c0430e: 			this.delegate = delegate;
1:4c0430e: 		}
1:74e23ff: 		
1:74e23ff: 		public TransactionControl getTxControl() {
1:74e23ff: 			TransactionControl transactionControl = txControlToUse.get();
1:74e23ff: 			if(transactionControl == null) {
1:74e23ff: 				throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1:74e23ff: 			}
1:74e23ff: 			return transactionControl;
1:74e23ff: 		}
1:4c0430e: 
1:4c0430e: 		public PrintWriter getLogWriter() throws SQLException {
1:4c0430e: 			return delegate.getLogWriter();
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public <T> T unwrap(Class<T> iface) throws SQLException {
1:4c0430e: 			return delegate.unwrap(iface);
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public void setLogWriter(PrintWriter out) throws SQLException {
1:4c0430e: 			delegate.setLogWriter(out);
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:4c0430e: 			return delegate.isWrapperFor(iface);
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public Connection getConnection() throws SQLException {
1:81c668a: 			return enlistedConnection(() -> delegate.getConnection());
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public void setLoginTimeout(int seconds) throws SQLException {
1:4c0430e: 			delegate.setLoginTimeout(seconds);
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public Connection getConnection(String username, String password) throws SQLException {
1:81c668a: 			return enlistedConnection(() -> delegate.getConnection(username, password));
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public int getLoginTimeout() throws SQLException {
1:4c0430e: 			return delegate.getLoginTimeout();
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:4c0430e: 			return delegate.getParentLogger();
1:4c0430e: 		}
1:81c668a: 		
1:81c668a: 		private Connection enlistedConnection(Callable<Connection> supplier) {
1:74e23ff: 			TransactionContext txContext = getTxControl().getCurrentContext();
1:81c668a: 
1:81c668a: 			if (txContext == null) {
1:81c668a: 				throw new TransactionException("The resource " + resourceId
1:81c668a: 						+ " cannot be accessed outside of an active Transaction Context");
1:81c668a: 			}
1:81c668a: 
1:81c668a: 			Connection existing = (Connection) txContext.getScopedValue(resourceId);
1:81c668a: 
1:81c668a: 			if (existing != null) {
1:81c668a: 				return existing;
1:81c668a: 			}
1:81c668a: 
1:81c668a: 			Connection toReturn;
1:81c668a: 			Connection toClose;
1:81c668a: 
1:81c668a: 			try {
1:81c668a: 				toClose = supplier.call();
1:81c668a: 				if (txContext.getTransactionStatus() == NO_TRANSACTION) {
1:81c668a: 					toReturn = new ScopedConnectionWrapper(toClose);
1:81c668a: 				} else if (txContext.supportsXA()) {
1:81c668a: 					toReturn = new TxConnectionWrapper(toClose);
1:47a70d3: 					txContext.registerXAResource(getXAResource(toClose), null);
1:81c668a: 				} else {
1:81c668a: 					throw new TransactionException(
1:81c668a: 							"There is a transaction active, but it does not support XA participants");
1:81c668a: 				}
1:81c668a: 			} catch (Exception sqle) {
1:81c668a: 				throw new TransactionException(
1:81c668a: 						"There was a problem getting hold of a database connection",
1:81c668a: 						sqle);
1:81c668a: 			}
1:81c668a: 
1:81c668a: 			
1:81c668a: 			txContext.postCompletion(x -> {
1:81c668a: 					try {
1:81c668a: 						toClose.close();
1:81c668a: 					} catch (SQLException sqle) {
1:81c668a: 						// TODO log this
1:81c668a: 					}
1:81c668a: 				});
1:81c668a: 			
1:81c668a: 			txContext.putScopedValue(resourceId, toReturn);
1:81c668a: 			
1:81c668a: 			return toReturn;
1:81c668a: 		}
1:81c668a: 		
1:81c668a: 		private XAResource getXAResource(Connection conn) throws SQLException {
1:81c668a: 			if(conn instanceof XAConnectionWrapper) {
1:81c668a: 				return ((XAConnectionWrapper)conn).getXaResource();
1:81c668a: 			} else if(conn.isWrapperFor(XAConnectionWrapper.class)){
1:81c668a: 				return conn.unwrap(XAConnectionWrapper.class).getXaResource();
1:81c668a: 			} else {
1:81c668a: 				throw new IllegalArgumentException("The XAResource for the connection cannot be found");
1:81c668a: 			}
1:81c668a: 		}
1:4c0430e: 	}
1:4c0430e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:426f022
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1: import org.apache.aries.tx.control.jpa.common.impl.InternalJPAEntityManagerProviderFactory;
1: public class JPAEntityManagerProviderFactoryImpl implements InternalJPAEntityManagerProviderFactory {
1: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
1: 		return new DelayedJPAEntityManagerProvider(tx -> getProviderFor(emfb, jpaProperties, resourceProviderProperties, tx, null));
1: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
1: 		Map<String, Object> resourceProviderProperties, ThreadLocal<TransactionControl> localStore, Runnable onClose) {
1: 		return localStore.get().notSupported(() -> internalBuilderCreate(emfb, toUse, localStore, onClose));
/////////////////////////////////////////////////////////////////////////
1: 	private AbstractJPAEntityManagerProvider internalBuilderCreate(EntityManagerFactoryBuilder emfb,
1: 			Map<String, Object> jpaProperties, ThreadLocal<TransactionControl> tx, Runnable onClose) {
1: 		return new JPAEntityManagerProviderImpl(emf, tx, () -> {
1: 			try {
1: 				emf.close();
1: 			} catch (Exception e) {
1: 			}
1: 			if (onClose != null) {
1: 				onClose.run();
1: 			}
1: 		});
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
1: 		return new JPAEntityManagerProviderImpl(emf, new ThreadLocal<>(), null);
commit:ebd8d15
/////////////////////////////////////////////////////////////////////////
0: 		return new DelayedJPAEntityManagerProvider(tx -> getProviderFor(emfb, jpaProperties, resourceProviderProperties, tx));
1: 	}
1: 
0: 	public JPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
0: 		Map<String, Object> resourceProviderProperties, ThreadLocal<TransactionControl> localStore) {
1: 		Map<String, Object> toUse;
1: 		if(checkEnlistment(resourceProviderProperties)) {
1: 			toUse = enlistDataSource(localStore, jpaProperties);
1: 		} else {
1: 			toUse = jpaProperties;
1: 		}
0: 		return localStore.get().notSupported(() -> internalBuilderCreate(emfb, toUse, localStore));
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
0: 				return tx.get().notSupported(() -> internalBuilderCreate(emfb, toUse, tx));
1: 	private Map<String, Object> enlistDataSource(ThreadLocal<TransactionControl> tx, Map<String, Object> jpaProperties) {
/////////////////////////////////////////////////////////////////////////
0: 			Map<String, Object> jpaProperties, ThreadLocal<TransactionControl> tx) {
0: 		return new JPAEntityManagerProviderImpl(emf, tx);
/////////////////////////////////////////////////////////////////////////
0: 		return new JPAEntityManagerProviderImpl(emf, new ThreadLocal<>());
/////////////////////////////////////////////////////////////////////////
1: 	public static class EnlistingDataSource implements DataSource {
1: 		private final ThreadLocal<TransactionControl> txControlToUse;
1: 		
1: 		public EnlistingDataSource(ThreadLocal<TransactionControl> txControlToUse, DataSource delegate) {
1: 			this.txControlToUse = txControlToUse;
1: 		
1: 		public TransactionControl getTxControl() {
1: 			TransactionControl transactionControl = txControlToUse.get();
1: 			if(transactionControl == null) {
1: 				throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1: 			}
1: 			return transactionControl;
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 			TransactionContext txContext = getTxControl().getCurrentContext();
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 					txContext.registerXAResource(getXAResource(toClose), null);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:9e5434c
/////////////////////////////////////////////////////////////////////////
1: 			toReturn.put("javax.persistence.nonJtaDataSource", ds);
commit:81c668a
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
1: import java.util.concurrent.Callable;
1: import javax.transaction.xa.XAResource;
1: import org.apache.aries.tx.control.jdbc.common.impl.ScopedConnectionWrapper;
1: import org.apache.aries.tx.control.jdbc.common.impl.TxConnectionWrapper;
1: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XAConnectionWrapper;
1: import org.osgi.service.transaction.control.TransactionContext;
/////////////////////////////////////////////////////////////////////////
0: 		return new DelayedJPAEntityManagerProvider(tx -> {
0: 				Map<String, Object> toUse;
0: 				if(checkEnlistment(resourceProviderProperties)) {
0: 					toUse = enlistDataSource(tx, jpaProperties);
1: 				} else {
0: 					toUse = jpaProperties;
1: 				}
0: 				return tx.notSupported(() -> internalBuilderCreate(emfb, toUse));
/////////////////////////////////////////////////////////////////////////
1: 		toReturn.put("javax.persistence.jtaDataSource", new EnlistingDataSource(tx, ds));
/////////////////////////////////////////////////////////////////////////
0: 		private final TransactionControl txControl;
1: 		
1: 		private final UUID resourceId = UUID.randomUUID();
1: 		
0: 		public EnlistingDataSource(TransactionControl txControl, DataSource delegate) {
0: 			this.txControl = txControl;
/////////////////////////////////////////////////////////////////////////
1: 			return enlistedConnection(() -> delegate.getConnection());
/////////////////////////////////////////////////////////////////////////
1: 			return enlistedConnection(() -> delegate.getConnection(username, password));
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		private Connection enlistedConnection(Callable<Connection> supplier) {
0: 			TransactionContext txContext = txControl.getCurrentContext();
1: 
1: 			if (txContext == null) {
1: 				throw new TransactionException("The resource " + resourceId
1: 						+ " cannot be accessed outside of an active Transaction Context");
1: 			}
1: 
1: 			Connection existing = (Connection) txContext.getScopedValue(resourceId);
1: 
1: 			if (existing != null) {
1: 				return existing;
1: 			}
1: 
1: 			Connection toReturn;
1: 			Connection toClose;
1: 
1: 			try {
1: 				toClose = supplier.call();
1: 				if (txContext.getTransactionStatus() == NO_TRANSACTION) {
1: 					toReturn = new ScopedConnectionWrapper(toClose);
1: 				} else if (txContext.supportsXA()) {
1: 					toReturn = new TxConnectionWrapper(toClose);
0: 					txContext.registerXAResource(getXAResource(toClose));
1: 				} else {
1: 					throw new TransactionException(
1: 							"There is a transaction active, but it does not support XA participants");
1: 				}
1: 			} catch (Exception sqle) {
1: 				throw new TransactionException(
1: 						"There was a problem getting hold of a database connection",
1: 						sqle);
1: 			}
1: 
1: 			
1: 			txContext.postCompletion(x -> {
1: 					try {
1: 						toClose.close();
1: 					} catch (SQLException sqle) {
1: 						// TODO log this
1: 					}
1: 				});
1: 			
1: 			txContext.putScopedValue(resourceId, toReturn);
1: 			
1: 			return toReturn;
1: 		}
1: 		
1: 		private XAResource getXAResource(Connection conn) throws SQLException {
1: 			if(conn instanceof XAConnectionWrapper) {
1: 				return ((XAConnectionWrapper)conn).getXaResource();
1: 			} else if(conn.isWrapperFor(XAConnectionWrapper.class)){
1: 				return conn.unwrap(XAConnectionWrapper.class).getXaResource();
1: 			} else {
1: 				throw new IllegalArgumentException("The XAResource for the connection cannot be found");
1: 			}
1: 		}
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.xa.impl;
1: 
1: import static java.util.Optional.ofNullable;
1: import static javax.persistence.spi.PersistenceUnitTransactionType.JTA;
1: 
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.logging.Logger;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: import javax.sql.DataSource;
1: 
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
0: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
0: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProviderFactory;
1: 
0: public class JPAEntityManagerProviderFactoryImpl implements JPAEntityManagerProviderFactory {
1: 
1: 	@Override
0: 	public JPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
1: 			Map<String, Object> resourceProviderProperties) {
0: 		if(checkEnlistment(resourceProviderProperties)) {
0: 			return new DelayedJPAEntityManagerProvider(tx -> {
1: 				
0: 				Map<String, Object> toUse = enlistDataSource(tx, jpaProperties);
1: 				
0: 				return internalBuilderCreate(emfb, toUse);
0: 			});
1: 		}
1: 		
0: 		return internalBuilderCreate(emfb, jpaProperties);
1: 	}
1: 
0: 	private Map<String, Object> enlistDataSource(TransactionControl tx, Map<String, Object> jpaProperties) {
1: 		Map<String, Object> toReturn = new HashMap<>(jpaProperties);
1: 		
1: 		DataSource ds = (DataSource) jpaProperties.get("javax.persistence.jtaDataSource");
1: 
1: 		if(!jpaProperties.containsKey("javax.persistence.nonJtaDataSource")) {
0: 			toReturn.put("javax.persistence.jtaDataSource", ds);
1: 		}
1: 		
0: 		toReturn.put("javax.persistence.jtaDataSource", new EnlistingDataSource(ds));
1: 		
1: 		return toReturn;
1: 	}
1: 
0: 	private JPAEntityManagerProvider internalBuilderCreate(EntityManagerFactoryBuilder emfb,
0: 			Map<String, Object> jpaProperties) {
1: 		EntityManagerFactory emf = emfb.createEntityManagerFactory(jpaProperties);
1: 		
1: 		validateEMF(emf);
1: 		
0: 		return new JPAEntityManagerProviderImpl(emf);
1: 	}
1: 
1: 	private void validateEMF(EntityManagerFactory emf) {
1: 		Object o = emf.getProperties().get("javax.persistence.transactionType");
1: 		
1: 		PersistenceUnitTransactionType tranType;
1: 		if(o instanceof PersistenceUnitTransactionType) {
1: 			tranType = (PersistenceUnitTransactionType) o;
1: 		} else if (o instanceof String) {
1: 			tranType = PersistenceUnitTransactionType.valueOf(o.toString());
1: 		} else {
1: 			//TODO log this?
1: 			tranType = JTA;
1: 		}
1: 		
1: 		if(JTA != tranType) {
1: 			throw new IllegalArgumentException("The supplied EntityManagerFactory is not declared RESOURCE_LOCAL");
1: 		}
1: 	}
1: 
1: 	@Override
0: 	public JPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
1: 			Map<String, Object> resourceProviderProperties) {
1: 		checkEnlistment(resourceProviderProperties);
1: 		validateEMF(emf);
1: 		
0: 		return new JPAEntityManagerProviderImpl(emf);
1: 	}
1: 
1: 	private boolean checkEnlistment(Map<String, Object> resourceProviderProperties) {
1: 		if (toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, false)) {
1: 			throw new TransactionException("This Resource Provider does not support Local transactions");
1: 		} else if (!toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true)) {
1: 			throw new TransactionException(
1: 					"This Resource Provider always enlists in XA transactions as it does not support local transactions");
1: 		}
1: 		
1: 		return !toBoolean(resourceProviderProperties, PRE_ENLISTED_DB_CONNECTION, false);
1: 	}
1: 	
1: 	public static boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1: 		Object o =  ofNullable(props)
1: 			.map(m -> m.get(key))
1: 			.orElse(defaultValue);
1: 		
1: 		if (o instanceof Boolean) {
1: 			return ((Boolean) o).booleanValue();
1: 		} else if(o instanceof String) {
1: 			return Boolean.parseBoolean((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1: 		}
1: 	}
1: 	
0: 	public class EnlistingDataSource implements DataSource {
1: 		
1: 		private final DataSource delegate;
1: 
0: 		public EnlistingDataSource(DataSource delegate) {
1: 			this.delegate = delegate;
1: 		}
1: 
1: 		public PrintWriter getLogWriter() throws SQLException {
1: 			return delegate.getLogWriter();
1: 		}
1: 
1: 		public <T> T unwrap(Class<T> iface) throws SQLException {
1: 			return delegate.unwrap(iface);
1: 		}
1: 
1: 		public void setLogWriter(PrintWriter out) throws SQLException {
1: 			delegate.setLogWriter(out);
1: 		}
1: 
1: 		public boolean isWrapperFor(Class<?> iface) throws SQLException {
1: 			return delegate.isWrapperFor(iface);
1: 		}
1: 
1: 		public Connection getConnection() throws SQLException {
0: 			return delegate.getConnection();
1: 		}
1: 
1: 		public void setLoginTimeout(int seconds) throws SQLException {
1: 			delegate.setLoginTimeout(seconds);
1: 		}
1: 
1: 		public Connection getConnection(String username, String password) throws SQLException {
0: 			return delegate.getConnection(username, password);
1: 		}
1: 
1: 		public int getLoginTimeout() throws SQLException {
1: 			return delegate.getLoginTimeout();
1: 		}
1: 
1: 		public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1: 			return delegate.getParentLogger();
1: 		}
1: 	}
1: }
============================================================================