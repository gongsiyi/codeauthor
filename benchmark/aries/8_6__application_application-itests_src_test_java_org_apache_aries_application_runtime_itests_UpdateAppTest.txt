1:f34e6a1: /*
1:8151f8c:  * Licensed to the Apache Software Foundation (ASF) under one
1:8151f8c:  * or more contributor license agreements.  See the NOTICE file
1:8151f8c:  * distributed with this work for additional information
1:8151f8c:  * regarding copyright ownership.  The ASF licenses this file
1:8151f8c:  * to you under the Apache License, Version 2.0 (the
1:8151f8c:  * "License"); you may not use this file except in compliance
1:8151f8c:  * with the License.  You may obtain a copy of the License at
1:8151f8c:  *
1:8151f8c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8151f8c:  *
1:8151f8c:  * Unless required by applicable law or agreed to in writing,
1:8151f8c:  * software distributed under the License is distributed on an
1:8151f8c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8151f8c:  * KIND, either express or implied.  See the License for the
1:8151f8c:  * specific language governing permissions and limitations
1:8151f8c:  * under the License.
1:f34e6a1:  */
1:8151f8c: package org.apache.aries.application.runtime.itests;
44:8151f8c: 
1:58f55bd: import static org.junit.Assert.assertEquals;
1:58f55bd: import static org.junit.Assert.assertNotNull;
1:58f55bd: import static org.junit.Assert.assertNull;
1:58f55bd: import static org.junit.Assert.assertTrue;
1:0223547: import static org.ops4j.pax.exam.CoreOptions.*;
1:86224ba: 
1:8151f8c: import java.io.File;
1:8151f8c: import java.io.FileOutputStream;
1:8151f8c: import java.util.Hashtable;
1:8151f8c: import java.util.Map;
1:86224ba: 
1:8151f8c: import org.apache.aries.application.DeploymentContent;
1:8151f8c: import org.apache.aries.application.DeploymentMetadata;
1:8151f8c: import org.apache.aries.application.management.AriesApplication;
1:8151f8c: import org.apache.aries.application.management.AriesApplicationContext;
1:8151f8c: import org.apache.aries.application.management.AriesApplicationManager;
1:8151f8c: import org.apache.aries.application.management.ResolveConstraint;
1:8151f8c: import org.apache.aries.application.management.UpdateException;
1:89f804e: import org.apache.aries.application.management.spi.framework.BundleFramework;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepository.BundleSuggestion;
1:cffbcb0: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1:89f804e: import org.apache.aries.application.management.spi.update.UpdateStrategy;
1:58f55bd: import org.apache.aries.application.modelling.ModellingManager;
1:8151f8c: import org.apache.aries.application.runtime.itests.util.IsolationTestUtils;
1:65e113c: import org.apache.aries.application.utils.AppConstants;
1:8151f8c: import org.apache.aries.isolated.sample.HelloWorld;
1:86224ba: import org.apache.aries.itest.AbstractIntegrationTest;
1:8151f8c: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:8151f8c: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:8151f8c: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:8151f8c: import org.junit.Before;
1:0223547: import org.junit.Ignore;
1:8151f8c: import org.junit.Test;
1:86224ba: import org.junit.runner.RunWith;
1:0223547: import org.ops4j.pax.exam.Configuration;
1:8151f8c: import org.ops4j.pax.exam.Option;
1:0223547: import org.ops4j.pax.exam.junit.PaxExam;
1:0223547: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0223547: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:8151f8c: import org.osgi.framework.Bundle;
1:8151f8c: import org.osgi.framework.BundleContext;
1:8151f8c: 
1:0223547: @RunWith(PaxExam.class)
1:0223547: @ExamReactorStrategy(PerClass.class)
1:8151f8c: public class UpdateAppTest extends AbstractIntegrationTest {
1:0223547: 
1:0223547:     private static final String SAMPLE_APP_NAME = "org.apache.aries.sample2";
1:0223547:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:0223547:      * are created in the paxweb temp directory, and not in the svn tree
1:0223547:      */
1:0223547:     static boolean createdApplications = false;
1:0223547: 
1:0223547:     @Before
1:0223547:     public void createApplications() throws Exception {
1:0223547: 
1:0223547:         if (createdApplications) {
1:0223547:             return;
1:0223547:         }
1:0223547: 
1:0223547:         ZipFixture testEba = ArchiveFixture.newZip()
1:0223547:                 .binary("META-INF/APPLICATION.MF",
1:0223547:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("isolated/APPLICATION.MF"))
1:0223547:                 .jar("sample.jar")
1:0223547:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:0223547:                 .attribute("Bundle-Version", "1.0.0")
1:0223547:                 .end()
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:0223547:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:0223547:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/aries.xml",
1:0223547:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         FileOutputStream fout = new FileOutputStream("test.eba");
1:0223547:         testEba.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         ZipFixture sample2 = ArchiveFixture.newJar()
1:0223547:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:0223547:                 .attribute("Bundle-Version", "2.0.0")
1:0223547:                 .end()
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:0223547:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/aries.xml",
1:0223547:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample2-blueprint.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         fout = new FileOutputStream("sample_2.0.0.jar");
1:0223547:         sample2.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         createdApplications = true;
1:f34e6a1:     }
1:f34e6a1: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testFullUpdate() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = setupApp();
1:8069959: 
1:0223547:         updateApp(manager, app);
1:8069959: 
1:0223547:         assertAppMessage("hello brave new world");
1:0223547:     }
1:8069959: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testFineUpdate() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = setupApp();
1:86224ba: 
1:0223547:         BundleContext oldCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:8151f8c: 
1:0223547:         installMockUpdateStrategy();
1:0223547:         updateApp(manager, app);
1:8151f8c: 
1:0223547:         BundleContext newCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:0223547:         assertAppMessage("hello brave new world");
1:8151f8c: 
1:0223547:         assertTrue("We bounced the app where the update was supposed to do an update in place", oldCtx == newCtx);
1:0223547:     }
1:8151f8c: 
1:0223547:     @Test
1:0223547:     @Ignore
1:0223547:     public void testUpdateThenStart() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         app = ctx.getApplication();
1:0223547: 
1:0223547:         BundleContext oldCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:0223547: 
1:0223547:         installMockUpdateStrategy();
1:0223547:         ctx = updateApp(manager, app);
1:0223547: 
1:0223547:         BundleContext newCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:0223547: 
1:0223547:         assertNull("App is not started yet but HelloWorld service is already there",
1:0223547:                 IsolationTestUtils.findHelloWorldService(bundleContext, SAMPLE_APP_NAME));
1:0223547: 
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         assertAppMessage("hello brave new world");
1:0223547: 
1:0223547:         assertTrue("We bounced the app where the update was supposed to do an update in place", oldCtx == newCtx);
1:0223547:     }
1:0223547: 
1:0223547:     private void installMockUpdateStrategy() {
1:0223547:         bundleContext.registerService(UpdateStrategy.class.getName(), new UpdateStrategy() {
1:0223547: 
1:0223547:             public boolean allowsUpdate(DeploymentMetadata newMetadata, DeploymentMetadata oldMetadata) {
1:0223547:                 return true;
1:0223547:             }
1:0223547: 
1:0223547:             public void update(UpdateInfo info) throws UpdateException {
1:0223547:                 BundleFramework fwk = info.getAppFramework();
1:0223547: 
1:0223547:                 Bundle old = null;
1:0223547:                 for (Bundle b : fwk.getBundles()) {
1:0223547:                     if (b.getSymbolicName().equals("org.apache.aries.isolated.sample")) {
1:0223547:                         old = b;
1:0223547:                         break;
1:0223547:                     }
1:0223547:                 }
1:0223547: 
1:0223547:                 if (old == null) throw new RuntimeException("Could not find old bundle");
1:0223547: 
1:0223547:                 try {
1:0223547:                     info.unregister(old);
1:0223547:                     fwk.uninstall(old);
1:0223547: 
1:0223547:                     // only contains one element at most
1:0223547:                     Map<DeploymentContent, BundleSuggestion> suggestions =
1:0223547:                             info.suggestBundle(info.getNewMetadata().getApplicationDeploymentContents());
1:0223547: 
1:0223547:                     BundleSuggestion toInstall = suggestions.values().iterator().next();
1:0223547: 
1:0223547:                     Bundle newBundle = fwk.install(toInstall, info.getApplication());
1:0223547:                     info.register(newBundle);
1:0223547:                     if (info.startBundles()) fwk.start(newBundle);
1:0223547: 
1:0223547:                 } catch (Exception e) {
1:0223547:                     throw new RuntimeException(e);
1:0223547:                 }
1:0223547:             }
1:0223547: 
1:0223547:         }, new Hashtable<String, String>());
1:0223547:     }
1:0223547: 
1:0223547:     private AriesApplication setupApp() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         app = ctx.getApplication();
1:0223547: 
1:0223547:         ctx.start();
1:0223547:         assertAppMessage("hello world");
1:0223547: 
1:0223547:         return app;
1:0223547:     }
1:0223547: 
1:0223547:     private AriesApplicationContext updateApp(AriesApplicationManager manager, AriesApplication app) throws Exception {
1:0223547:         IsolationTestUtils.prepareSampleBundleV2(bundleContext,
1:0223547:                 context().getService(RepositoryGenerator.class),
1:0223547:                 context().getService(RepositoryAdmin.class),
1:0223547:                 context().getService(ModellingManager.class));
1:0223547: 
1:0223547:         AriesApplication newApp = manager.resolve(app, new ResolveConstraint() {
1:0223547:             public String getBundleName() {
1:0223547:                 return "org.apache.aries.isolated.sample";
1:0223547:             }
1:0223547: 
1:0223547:             public VersionRange getVersionRange() {
1:0223547:                 return ManifestHeaderProcessor.parseVersionRange("[2.0.0,2.0.0]", true);
1:0223547:             }
1:0223547:         });
1:0223547: 
1:0223547:         return manager.update(app, newApp.getDeploymentMetadata());
1:0223547:     }
1:0223547: 
1:0223547:     private void assertAppMessage(String message) throws Exception {
1:0223547:         HelloWorld hw = IsolationTestUtils.findHelloWorldService(bundleContext, SAMPLE_APP_NAME);
1:0223547:         assertNotNull(hw);
1:0223547:         assertEquals(message, hw.getMessage());
1:0223547:     }
1:0223547: 
1:0223547:     @Configuration
1:0223547:     public static Option[] configuration() {
1:0223547:         return options(
1:0223547: 
1:0223547:                 // framework / core bundles
1:0223547:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:0223547: 
1:0223547:                 // Logging
1:0223547:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:0223547: 
1:0223547:                 // do not provision against the local runtime
1:0223547:                 systemProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP).value("true"),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 junitBundles(),
1:0223547:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:0223547:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.repository").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject());
1:0223547:     }
1:8151f8c: 
2:8069959: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e334773
/////////////////////////////////////////////////////////////////////////
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:0223547
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: 
1:     private static final String SAMPLE_APP_NAME = "org.apache.aries.sample2";
1:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:      * are created in the paxweb temp directory, and not in the svn tree
1:      */
1:     static boolean createdApplications = false;
1: 
1:     @Before
1:     public void createApplications() throws Exception {
1: 
1:         if (createdApplications) {
1:             return;
1:         }
1: 
1:         ZipFixture testEba = ArchiveFixture.newZip()
1:                 .binary("META-INF/APPLICATION.MF",
1:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("isolated/APPLICATION.MF"))
1:                 .jar("sample.jar")
1:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:                 .attribute("Bundle-Version", "1.0.0")
1:                 .end()
1:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:                 .binary("OSGI-INF/blueprint/aries.xml",
1:                         UpdateAppTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
1:                 .end();
1: 
1:         FileOutputStream fout = new FileOutputStream("test.eba");
1:         testEba.writeOut(fout);
1:         fout.close();
1: 
1:         ZipFixture sample2 = ArchiveFixture.newJar()
1:                 .manifest().symbolicName("org.apache.aries.isolated.sample")
1:                 .attribute("Bundle-Version", "2.0.0")
1:                 .end()
1:                 .binary("org/apache/aries/isolated/sample/HelloWorld.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
1:                 .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
1:                 .binary("OSGI-INF/blueprint/aries.xml",
1:                         IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample2-blueprint.xml"))
1:                 .end();
1: 
1:         fout = new FileOutputStream("sample_2.0.0.jar");
1:         sample2.writeOut(fout);
1:         fout.close();
1: 
1:         createdApplications = true;
1:     @Test
1:     @Ignore
1:     public void testFullUpdate() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = setupApp();
1:         updateApp(manager, app);
1:         assertAppMessage("hello brave new world");
1:     }
1:     @Test
1:     @Ignore
1:     public void testFineUpdate() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = setupApp();
1:         BundleContext oldCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:         installMockUpdateStrategy();
1:         updateApp(manager, app);
1:         BundleContext newCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:         assertAppMessage("hello brave new world");
1:         assertTrue("We bounced the app where the update was supposed to do an update in place", oldCtx == newCtx);
1:     }
1:     @Test
1:     @Ignore
1:     public void testUpdateThenStart() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1:         app = ctx.getApplication();
1: 
1:         BundleContext oldCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1: 
1:         installMockUpdateStrategy();
1:         ctx = updateApp(manager, app);
1: 
1:         BundleContext newCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1: 
1:         assertNull("App is not started yet but HelloWorld service is already there",
1:                 IsolationTestUtils.findHelloWorldService(bundleContext, SAMPLE_APP_NAME));
1: 
1:         ctx.start();
1: 
1:         assertAppMessage("hello brave new world");
1: 
1:         assertTrue("We bounced the app where the update was supposed to do an update in place", oldCtx == newCtx);
1:     }
1: 
1:     private void installMockUpdateStrategy() {
1:         bundleContext.registerService(UpdateStrategy.class.getName(), new UpdateStrategy() {
1: 
1:             public boolean allowsUpdate(DeploymentMetadata newMetadata, DeploymentMetadata oldMetadata) {
1:                 return true;
1:             }
1: 
1:             public void update(UpdateInfo info) throws UpdateException {
1:                 BundleFramework fwk = info.getAppFramework();
1: 
1:                 Bundle old = null;
1:                 for (Bundle b : fwk.getBundles()) {
1:                     if (b.getSymbolicName().equals("org.apache.aries.isolated.sample")) {
1:                         old = b;
1:                         break;
1:                     }
1:                 }
1: 
1:                 if (old == null) throw new RuntimeException("Could not find old bundle");
1: 
1:                 try {
1:                     info.unregister(old);
1:                     fwk.uninstall(old);
1: 
1:                     // only contains one element at most
1:                     Map<DeploymentContent, BundleSuggestion> suggestions =
1:                             info.suggestBundle(info.getNewMetadata().getApplicationDeploymentContents());
1: 
1:                     BundleSuggestion toInstall = suggestions.values().iterator().next();
1: 
1:                     Bundle newBundle = fwk.install(toInstall, info.getApplication());
1:                     info.register(newBundle);
1:                     if (info.startBundles()) fwk.start(newBundle);
1: 
1:                 } catch (Exception e) {
1:                     throw new RuntimeException(e);
1:                 }
1:             }
1: 
1:         }, new Hashtable<String, String>());
1:     }
1: 
1:     private AriesApplication setupApp() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1:         app = ctx.getApplication();
1: 
1:         ctx.start();
1:         assertAppMessage("hello world");
1: 
1:         return app;
1:     }
1: 
1:     private AriesApplicationContext updateApp(AriesApplicationManager manager, AriesApplication app) throws Exception {
1:         IsolationTestUtils.prepareSampleBundleV2(bundleContext,
1:                 context().getService(RepositoryGenerator.class),
1:                 context().getService(RepositoryAdmin.class),
1:                 context().getService(ModellingManager.class));
1: 
1:         AriesApplication newApp = manager.resolve(app, new ResolveConstraint() {
1:             public String getBundleName() {
1:                 return "org.apache.aries.isolated.sample";
1:             }
1: 
1:             public VersionRange getVersionRange() {
1:                 return ManifestHeaderProcessor.parseVersionRange("[2.0.0,2.0.0]", true);
1:             }
1:         });
1: 
1:         return manager.update(app, newApp.getDeploymentMetadata());
1:     }
1: 
1:     private void assertAppMessage(String message) throws Exception {
1:         HelloWorld hw = IsolationTestUtils.findHelloWorldService(bundleContext, SAMPLE_APP_NAME);
1:         assertNotNull(hw);
1:         assertEquals(message, hw.getMessage());
1:     }
1: 
1:     @Configuration
1:     public static Option[] configuration() {
1:         return options(
1: 
1:                 // framework / core bundles
1:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
0:                 mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1: 
1:                 // Logging
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 
1:                 // do not provision against the local runtime
1:                 systemProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP).value("true"),
1: 
1:                 // Bundles
1:                 junitBundles(),
1:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint").versionAsInProject(),
1:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.repository").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated").versionAsInProject(),
1:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject());
1:     }
author:John Ross
-------------------------------------------------------------------------------
commit:cffbcb0
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
/////////////////////////////////////////////////////////////////////////
0:   public static Option[] configuration()
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties")        
commit:f34e6a1
/////////////////////////////////////////////////////////////////////////
1:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
1:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
0:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
0:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox38Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.8.0.V20120529-1548")
0: 	          );
1:   }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
0:   private static Option[] generalConfiguration() {
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.geronimo.specs","geronimo-jta_1.1_spec")
/////////////////////////////////////////////////////////////////////////
0:         );
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox35Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 	          equinox().version("3.5.0")
0: 	          );
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox37Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.7.0.v20110613")
0: 	          );
1:   }
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:2b7f337
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
commit:65e113c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.AppConstants;
/////////////////////////////////////////////////////////////////////////
0:         // do not provision against the local runtime
0:         systemProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP).value("true"),
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: @RunWith(JUnit4TestRunner.class)
1:   
0:   public void createApplications() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:         context().getService(RepositoryGenerator.class), 
0:         context().getService(RepositoryAdmin.class), 
0:         context().getService(ModellingManager.class));
/////////////////////////////////////////////////////////////////////////
0:     return testOptions(
0:         paxLogging("DEBUG"),
1:         
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.framework.BundleFramework;
0: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1: import org.apache.aries.application.management.spi.repository.BundleRepository.BundleSuggestion;
1: import org.apache.aries.application.management.spi.update.UpdateStrategy;
commit:8151f8c
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.application.runtime.itests;
1: 
0: import static org.junit.Assert.*;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.DeploymentContent;
1: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.VersionRange;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
1: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.management.BundleFramework;
0: import org.apache.aries.application.management.RepositoryGenerator;
1: import org.apache.aries.application.management.ResolveConstraint;
1: import org.apache.aries.application.management.UpdateException;
0: import org.apache.aries.application.management.BundleRepository.BundleSuggestion;
0: import org.apache.aries.application.management.provider.UpdateStrategy;
1: import org.apache.aries.application.runtime.itests.util.IsolationTestUtils;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.apache.aries.isolated.sample.HelloWorld;
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.Option;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: 
1: public class UpdateAppTest extends AbstractIntegrationTest {
0:   private static final String SAMPLE_APP_NAME = "org.apache.aries.sample2";
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree 
0:    */
0:   static boolean createdApplications = false;
0:   @Before
0:   public static void createApplications() throws Exception {
1:        
0:     if (createdApplications) { 
0:       return;
0:     }
1:     
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:       .binary("META-INF/APPLICATION.MF", 
0:           UpdateAppTest.class.getClassLoader().getResourceAsStream("isolated/APPLICATION.MF"))
0:       .jar("sample.jar")
0:         .manifest().symbolicName("org.apache.aries.isolated.sample")
0:           .attribute("Bundle-Version", "1.0.0")
0:           .end()
0:         .binary("org/apache/aries/isolated/sample/HelloWorld.class", 
0:             UpdateAppTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
0:         .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class", 
0:             UpdateAppTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
0:         .binary("OSGI-INF/blueprint/aries.xml", 
0:             UpdateAppTest.class.getClassLoader().getResourceAsStream("isolated/sample-blueprint.xml"))
0:         .end();
1:       
0:     FileOutputStream fout = new FileOutputStream("test.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
1:     
0:     ZipFixture sample2 = ArchiveFixture.newJar()
0:       .manifest().symbolicName("org.apache.aries.isolated.sample")
0:         .attribute("Bundle-Version", "2.0.0")
0:       .end()
0:       .binary("org/apache/aries/isolated/sample/HelloWorld.class", 
0:           IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorld.class"))
0:       .binary("org/apache/aries/isolated/sample/HelloWorldImpl.class", 
0:           IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("org/apache/aries/isolated/sample/HelloWorldImpl.class"))
0:       .binary("OSGI-INF/blueprint/aries.xml", 
0:           IsolatedRuntimeTest.class.getClassLoader().getResourceAsStream("isolated/sample2-blueprint.xml"))
0:       .end();
1:     
0:     fout = new FileOutputStream("sample_2.0.0.jar");
0:     sample2.writeOut(fout);
0:     fout.close();
1:     
0:     createdApplications = true;
0:   }
1:   
0:   @Test
0:   public void testFullUpdate() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = setupApp();
1:     
0:     updateApp(manager, app);
1: 
0:     assertAppMessage("hello brave new world");
0:   }
1:   
0:   @Test
0:   public void testFineUpdate() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = setupApp();
1:     
0:     BundleContext oldCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:     
0:     installMockUpdateStrategy();
0:     updateApp(manager, app);
1:     
0:     BundleContext newCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);    
0:     assertAppMessage("hello brave new world");
1:     
0:     assertTrue("We bounced the app where the update was supposed to do an update in place", oldCtx == newCtx);
0:   }
1:   
0:   @Test
0:   public void testUpdateThenStart() throws Exception
0:   {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     app = ctx.getApplication();
1: 
0:     BundleContext oldCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);
1:     
0:     installMockUpdateStrategy();
0:     ctx = updateApp(manager, app);
1:     
0:     BundleContext newCtx = IsolationTestUtils.findIsolatedAppBundleContext(bundleContext, SAMPLE_APP_NAME);    
1:     
0:     assertNull("App is not started yet but HelloWorld service is already there",
0:         IsolationTestUtils.findHelloWorldService(bundleContext, SAMPLE_APP_NAME));
1:     
0:     ctx.start();
1:     
0:     assertAppMessage("hello brave new world");
1:     
0:     assertTrue("We bounced the app where the update was supposed to do an update in place", oldCtx == newCtx);
0:   }
1:   
0:   private void installMockUpdateStrategy()
0:   {
0:     bundleContext.registerService(UpdateStrategy.class.getName(), new UpdateStrategy() {
1: 
0:       public boolean allowsUpdate(DeploymentMetadata newMetadata, DeploymentMetadata oldMetadata) {
0:         return true;
0:       }
1: 
0:       public void update(UpdateInfo info) throws UpdateException {
0:         BundleFramework fwk = info.getAppFramework();
1:         
0:         Bundle old = null;
0:         for (Bundle b : fwk.getBundles()) {
0:           if (b.getSymbolicName().equals("org.apache.aries.isolated.sample")) {
0:             old = b;
0:             break;
0:           }
0:         }
1:         
0:         if (old == null) throw new RuntimeException("Could not find old bundle");
1:         
0:         try {
0:           info.unregister(old);
0:           fwk.uninstall(old);
1:           
0:           // only contains one element at most
0:           Map<DeploymentContent, BundleSuggestion> suggestions = 
0:             info.suggestBundle(info.getNewMetadata().getApplicationDeploymentContents());
1:           
0:           BundleSuggestion toInstall = suggestions.values().iterator().next();
1:           
0:           Bundle newBundle = fwk.install(toInstall, info.getApplication());
0:           info.register(newBundle);
0:           if (info.startBundles()) fwk.start(newBundle);
1:           
0:         } catch (Exception e) {
0:           throw new RuntimeException(e);
0:         }
0:       }
1:       
0:     }, new Hashtable<String, String>());    
0:   }
1:   
0:   private AriesApplication setupApp() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     app = ctx.getApplication();
1: 
0:     ctx.start();
0:     assertAppMessage("hello world");    
1:     
0:     return app;
0:   }
1:   
0:   private AriesApplicationContext updateApp(AriesApplicationManager manager, AriesApplication app) throws Exception {
0:     IsolationTestUtils.prepareSampleBundleV2(bundleContext, getOsgiService(RepositoryGenerator.class), getOsgiService(RepositoryAdmin.class));
1:     
0:     AriesApplication newApp = manager.resolve(app, new ResolveConstraint() {
0:       public String getBundleName() {
0:         return "org.apache.aries.isolated.sample";
0:       }
1: 
0:       public VersionRange getVersionRange() {
0:         return ManifestHeaderProcessor.parseVersionRange("[2.0.0,2.0.0]", true);
0:       }
0:     });
1:     
0:     return manager.update(app, newApp.getDeploymentMetadata());
0:   }
1:   
0:   private void assertAppMessage(String message) throws Exception {
0:     HelloWorld hw = IsolationTestUtils.findHelloWorldService(bundleContext, SAMPLE_APP_NAME);
0:     assertNotNull(hw);
0:     assertEquals(message, hw.getMessage());
0:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.framework.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.repository"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.geronimo.specs","geronimo-jta_1.1_spec"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
1: 
0:         // new VMOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5011"),
1: 
0:         /*
0:          * and add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:          */
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
0: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:be6ac25
/////////////////////////////////////////////////////////////////////////
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:d3efe20
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.spi.repository.BundleRepository.BundleSuggestion;
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
commit:a0eca03
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.platform.repo"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.postresolve.process"),
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1: import org.apache.aries.application.modelling.ModellingManager;
/////////////////////////////////////////////////////////////////////////
0:     IsolationTestUtils.prepareSampleBundleV2(bundleContext, 
0:         getOsgiService(RepositoryGenerator.class), 
0:         getOsgiService(RepositoryAdmin.class), 
0:         getOsgiService(ModellingManager.class));
/////////////////////////////////////////////////////////////////////////
0:         
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.isolated"),
============================================================================