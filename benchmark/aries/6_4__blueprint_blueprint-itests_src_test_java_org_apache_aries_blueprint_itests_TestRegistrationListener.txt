1:69489a8: /*
1:69489a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:69489a8:  * or more contributor license agreements.  See the NOTICE file
1:69489a8:  * distributed with this work for additional information
1:69489a8:  * regarding copyright ownership.  The ASF licenses this file
1:69489a8:  * to you under the Apache License, Version 2.0 (the
1:69489a8:  * "License"); you may not use this file except in compliance
1:69489a8:  * with the License.  You may obtain a copy of the License at
1:69489a8:  *
1:69489a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:69489a8:  *
1:69489a8:  * Unless required by applicable law or agreed to in writing,
1:69489a8:  * software distributed under the License is distributed on an
1:69489a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:69489a8:  * KIND, either express or implied.  See the License for the
1:69489a8:  * specific language governing permissions and limitations
1:69489a8:  * under the License.
1:69489a8:  */
1:69489a8: package org.apache.aries.blueprint.itests;
9:69489a8: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:69489a8: import static org.junit.Assert.assertEquals;
1:69489a8: import static org.junit.Assert.assertNotNull;
1:69489a8: import static org.junit.Assert.assertTrue;
1:d251156: 
1:69489a8: import java.util.Map;
1:69489a8: 
1:69489a8: import org.apache.aries.blueprint.BlueprintConstants;
1:69489a8: import org.apache.aries.blueprint.sample.Foo;
1:69489a8: import org.apache.aries.blueprint.sample.FooRegistrationListener;
1:69489a8: import org.junit.Test;
1:69489a8: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:69489a8: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:69489a8: import org.osgi.service.blueprint.container.BlueprintContainer;
1:86224ba: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: public class TestRegistrationListener extends AbstractBlueprintIntegrationTest {
1:69489a8: 
1:69489a8:     @Test
1:69489a8:     public void testWithAutoExportEnabled() throws Exception {
1:69489a8: 
1:86224ba:         BlueprintContainer blueprintContainer = 
1:86224ba:             Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:86224ba:         
1:69489a8:         assertNotNull(blueprintContainer);
1:69489a8: 
1:86224ba:         Foo foo = context().getService(Foo.class, "(" + BlueprintConstants.COMPONENT_NAME_PROPERTY + "=foo)");
1:69489a8:         assertEquals(5, foo.getA());
1:69489a8: 
1:69489a8:         FooRegistrationListener listener = 
1:69489a8:             (FooRegistrationListener) blueprintContainer.getComponentInstance("fooRegistrationListener");
1:69489a8: 
1:69489a8:         // If registration listener works fine, the registration method should
1:69489a8:         // have already been called and properties that were passed to this
1:69489a8:         // method should have been not null
1:69489a8: 
1:d251156:         Map<?, ?> props = listener.getProperties();
1:69489a8:         assertNotNull(props);
1:69489a8: 
1:69489a8:         assertTrue(props.containsKey(BlueprintConstants.COMPONENT_NAME_PROPERTY));
1:69489a8:         assertEquals("foo", props.get(BlueprintConstants.COMPONENT_NAME_PROPERTY));
1:69489a8: 
1:69489a8:         assertTrue(props.containsKey("key"));
1:69489a8:         assertEquals("value", props.get("key"));
1:86224ba: 
1:69489a8:     }
1:86224ba:     
1:d251156:     @Configuration
1:d251156:     public Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:                 baseOptions(),
1:86224ba:                 Helper.blueprintBundles(),
1:c185a5a:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample")
1:d251156:         };
1:69489a8:     }
1:69489a8: 
1:69489a8: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bc2c036
/////////////////////////////////////////////////////////////////////////
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample")
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: @RunWith(PaxExam.class)
1: public class TestRegistrationListener extends AbstractBlueprintIntegrationTest {
/////////////////////////////////////////////////////////////////////////
1:         Map<?, ?> props = listener.getProperties();
/////////////////////////////////////////////////////////////////////////
1:     @Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:                 baseOptions(),
0:                 CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample")
1:         };
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
1:         BlueprintContainer blueprintContainer = 
1:             Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:         
1:         Foo foo = context().getService(Foo.class, "(" + BlueprintConstants.COMPONENT_NAME_PROPERTY + "=foo)");
/////////////////////////////////////////////////////////////////////////
1:     
0:         return testOptions(
0:                 equinox().version("3.5.0"),
0:                 paxLogging("INFO"),
1:                 Helper.blueprintBundles(),
1:                 
0:                 bundles("org.apache.aries.blueprint/org.apache.aries.blueprint.sample"));
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:                 mavenBundle("asm", "asm-all"),
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:69489a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
1: import java.util.Map;
1: 
1: import org.apache.aries.blueprint.BlueprintConstants;
1: import org.apache.aries.blueprint.sample.Foo;
1: import org.apache.aries.blueprint.sample.FooRegistrationListener;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class TestRegistrationListener extends AbstractIntegrationTest {
1: 
1:     @Test
1:     public void testWithAutoExportEnabled() throws Exception {
1: 
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample");
1:         assertNotNull(blueprintContainer);
1: 
0:         Foo foo = getOsgiService(Foo.class, "(" + BlueprintConstants.COMPONENT_NAME_PROPERTY + "=foo)", DEFAULT_TIMEOUT);
1:         assertEquals(5, foo.getA());
1: 
1:         FooRegistrationListener listener = 
1:             (FooRegistrationListener) blueprintContainer.getComponentInstance("fooRegistrationListener");
1: 
1:         // If registration listener works fine, the registration method should
1:         // have already been called and properties that were passed to this
1:         // method should have been not null
1: 
0:         Map props = listener.getProperties();
1:         assertNotNull(props);
1: 
1:         assertTrue(props.containsKey(BlueprintConstants.COMPONENT_NAME_PROPERTY));
1:         assertEquals("foo", props.get(BlueprintConstants.COMPONENT_NAME_PROPERTY));
1: 
1:         assertTrue(props.containsKey("key"));
1:         assertEquals("value", props.get("key"));
1: 
1:     }
1: 
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:                 // Log
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:                 // Felix Config Admin
0:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:                 // Felix mvn url handler
0:                 mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:                 // this is how you set the default log level when using pax
0:                 // logging (logProfile)
0:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 
0:                 // Bundles
0:                 mavenBundle("org.apache.aries", "org.apache.aries.util"), 
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample"),
0:                 mavenBundle("org.osgi", "org.osgi.compendium"),
1: 
0:                 // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:                 equinox().version("3.5.0"));
0:         options = updateOptions(options);
0:         return options;
1:     }
1: 
1: }
============================================================================