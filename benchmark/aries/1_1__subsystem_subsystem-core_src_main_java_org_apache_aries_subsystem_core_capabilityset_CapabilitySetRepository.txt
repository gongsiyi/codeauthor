1:9df8274: /*
1:9df8274:  * Licensed to the Apache Software Foundation (ASF) under one
1:9df8274:  * or more contributor license agreements.  See the NOTICE file
1:9df8274:  * distributed with this work for additional information
1:9df8274:  * regarding copyright ownership.  The ASF licenses this file
1:9df8274:  * to you under the Apache License, Version 2.0 (the
1:9df8274:  * "License"); you may not use this file except in compliance
1:9df8274:  * with the License.  You may obtain a copy of the License at
1:9df8274:  *
1:9df8274:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9df8274:  *
1:9df8274:  * Unless required by applicable law or agreed to in writing,
1:9df8274:  * software distributed under the License is distributed on an
1:9df8274:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9df8274:  * KIND, either express or implied.  See the License for the
1:9df8274:  * specific language governing permissions and limitations
1:9df8274:  * under the License.
1:9df8274:  */
1:9df8274: package org.apache.aries.subsystem.core.capabilityset;
1:9df8274: 
1:9df8274: import java.util.Arrays;
1:9df8274: import java.util.Collection;
1:9df8274: import java.util.Collections;
1:9df8274: import java.util.HashMap;
1:9df8274: import java.util.Map;
1:9df8274: import java.util.Set;
1:9df8274: 
1:9df8274: import org.apache.aries.subsystem.core.repository.Repository;
1:9df8274: import org.osgi.framework.namespace.BundleNamespace;
1:9df8274: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
1:9df8274: import org.osgi.framework.namespace.HostNamespace;
1:9df8274: import org.osgi.framework.namespace.IdentityNamespace;
1:9df8274: import org.osgi.framework.namespace.NativeNamespace;
1:9df8274: import org.osgi.framework.namespace.PackageNamespace;
1:9df8274: import org.osgi.namespace.service.ServiceNamespace;
1:9df8274: import org.osgi.resource.Capability;
1:9df8274: import org.osgi.resource.Namespace;
1:9df8274: import org.osgi.resource.Requirement;
1:9df8274: import org.osgi.resource.Resource;
1:9df8274: 
1:9df8274: public class CapabilitySetRepository implements Repository {
1:9df8274:     private final Map<String, CapabilitySet> namespace2capabilitySet;
1:9df8274: 
1:9df8274:     public CapabilitySetRepository() {
1:9df8274:         namespace2capabilitySet = Collections.synchronizedMap(new HashMap<String, CapabilitySet>());
1:9df8274:         namespace2capabilitySet.put(
1:9df8274:                 IdentityNamespace.IDENTITY_NAMESPACE, 
1:9df8274:                 new CapabilitySet(Arrays.asList(IdentityNamespace.IDENTITY_NAMESPACE), true));
1:9df8274:         namespace2capabilitySet.put(
1:9df8274:                 NativeNamespace.NATIVE_NAMESPACE, 
1:9df8274:                 new CapabilitySet(Arrays.asList(NativeNamespace.NATIVE_NAMESPACE), true));
1:9df8274:         namespace2capabilitySet.put(
1:9df8274:                 ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE, 
1:9df8274:                 new CapabilitySet(Arrays.asList(ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE), true));
1:9df8274:         namespace2capabilitySet.put(
1:9df8274:                 BundleNamespace.BUNDLE_NAMESPACE, 
1:9df8274:                 new CapabilitySet(Arrays.asList(BundleNamespace.BUNDLE_NAMESPACE), true));
1:9df8274:         namespace2capabilitySet.put(
1:9df8274:                 HostNamespace.HOST_NAMESPACE, 
1:9df8274:                 new CapabilitySet(Arrays.asList(HostNamespace.HOST_NAMESPACE), true));
1:9df8274:         namespace2capabilitySet.put(
1:9df8274:                 PackageNamespace.PACKAGE_NAMESPACE, 
1:9df8274:                 new CapabilitySet(Arrays.asList(PackageNamespace.PACKAGE_NAMESPACE), true));
1:9df8274:         namespace2capabilitySet.put(
1:9df8274:                 ServiceNamespace.SERVICE_NAMESPACE, 
1:9df8274:                 new CapabilitySet(Arrays.asList(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE), true));
1:9df8274:     }
1:9df8274:     
1:9df8274:     public void addResource(Resource resource) {
1:9df8274:         for (Capability capability : resource.getCapabilities(null)) {
1:9df8274:             String namespace = capability.getNamespace();
1:9df8274:             CapabilitySet capabilitySet;
1:9df8274:             synchronized (namespace2capabilitySet) {
1:9df8274:                 capabilitySet = namespace2capabilitySet.get(namespace);
1:9df8274:                 if (capabilitySet == null) {
1:9df8274:                     capabilitySet = new CapabilitySet(Arrays.asList(namespace), true);
1:9df8274:                     namespace2capabilitySet.put(namespace, capabilitySet);
1:9df8274:                 }
1:9df8274:             }
1:9df8274:             // TODO Examine CapabilitySet for thread safety.
1:9df8274:             capabilitySet.addCapability(capability);
1:9df8274:         }
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:9df8274:         Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>(requirements.size());
1:9df8274:         for (Requirement requirement : requirements) {
1:9df8274:             String filterDirective = requirement.getDirectives().get(Namespace.REQUIREMENT_FILTER_DIRECTIVE);
1:9df8274:             SimpleFilter simpleFilter;
1:9df8274:             if (filterDirective == null) {
1:9df8274:                 simpleFilter = new SimpleFilter(null, null, SimpleFilter.MATCH_ALL);
1:9df8274:             }
1:9df8274:             else {
1:9df8274:                 simpleFilter = SimpleFilter.parse(filterDirective);
1:9df8274:             }
1:9df8274:             String namespace = requirement.getNamespace();
1:9df8274:             CapabilitySet capabilitySet = namespace2capabilitySet.get(namespace);
1:9df8274:             if (capabilitySet != null) {
1:9df8274:                 Set<Capability> capabilities = capabilitySet.match(
1:9df8274:                         simpleFilter, 
1:9df8274:                         PackageNamespace.PACKAGE_NAMESPACE.equals(namespace)
1:9df8274:                                 || BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)
1:9df8274:                                 || HostNamespace.HOST_NAMESPACE.equals(namespace));
1:9df8274:                 result.put(requirement, capabilities);
1:9df8274:             }
1:3f524ae:             else {
1:3f524ae:                 result.put(requirement, Collections.<Capability>emptyList());
1:3f524ae:             }
1:9df8274:         }
1:9df8274:         return result;
1:9df8274:     }
1:9df8274:     
1:9df8274:     public void removeResource(Resource resource) {
1:9df8274:         for (Capability capability : resource.getCapabilities(null)) {
1:9df8274:             CapabilitySet capabilitySet = namespace2capabilitySet.get(capability.getNamespace());
1:9df8274:             if (capabilitySet == null) {
1:9df8274:                 continue;
1:9df8274:             }
1:9df8274:             // TODO Examine CapabilitySet for thread safety.
1:9df8274:             capabilitySet.removeCapability(capability);
1:9df8274:         }
1:9df8274:     }
1:9df8274: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3f524ae
/////////////////////////////////////////////////////////////////////////
1:             else {
1:                 result.put(requirement, Collections.<Capability>emptyList());
1:             }
commit:9df8274
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.core.capabilityset;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.subsystem.core.repository.Repository;
1: import org.osgi.framework.namespace.BundleNamespace;
1: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
1: import org.osgi.framework.namespace.HostNamespace;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.framework.namespace.NativeNamespace;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: public class CapabilitySetRepository implements Repository {
1:     private final Map<String, CapabilitySet> namespace2capabilitySet;
1: 
1:     public CapabilitySetRepository() {
1:         namespace2capabilitySet = Collections.synchronizedMap(new HashMap<String, CapabilitySet>());
1:         namespace2capabilitySet.put(
1:                 IdentityNamespace.IDENTITY_NAMESPACE, 
1:                 new CapabilitySet(Arrays.asList(IdentityNamespace.IDENTITY_NAMESPACE), true));
1:         namespace2capabilitySet.put(
1:                 NativeNamespace.NATIVE_NAMESPACE, 
1:                 new CapabilitySet(Arrays.asList(NativeNamespace.NATIVE_NAMESPACE), true));
1:         namespace2capabilitySet.put(
1:                 ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE, 
1:                 new CapabilitySet(Arrays.asList(ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE), true));
1:         namespace2capabilitySet.put(
1:                 BundleNamespace.BUNDLE_NAMESPACE, 
1:                 new CapabilitySet(Arrays.asList(BundleNamespace.BUNDLE_NAMESPACE), true));
1:         namespace2capabilitySet.put(
1:                 HostNamespace.HOST_NAMESPACE, 
1:                 new CapabilitySet(Arrays.asList(HostNamespace.HOST_NAMESPACE), true));
1:         namespace2capabilitySet.put(
1:                 PackageNamespace.PACKAGE_NAMESPACE, 
1:                 new CapabilitySet(Arrays.asList(PackageNamespace.PACKAGE_NAMESPACE), true));
1:         namespace2capabilitySet.put(
1:                 ServiceNamespace.SERVICE_NAMESPACE, 
1:                 new CapabilitySet(Arrays.asList(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE), true));
1:     }
1:     
1:     public void addResource(Resource resource) {
1:         for (Capability capability : resource.getCapabilities(null)) {
1:             String namespace = capability.getNamespace();
1:             CapabilitySet capabilitySet;
1:             synchronized (namespace2capabilitySet) {
1:                 capabilitySet = namespace2capabilitySet.get(namespace);
1:                 if (capabilitySet == null) {
1:                     capabilitySet = new CapabilitySet(Arrays.asList(namespace), true);
1:                     namespace2capabilitySet.put(namespace, capabilitySet);
1:                 }
1:             }
1:             // TODO Examine CapabilitySet for thread safety.
1:             capabilitySet.addCapability(capability);
1:         }
1:     }
1: 
1:     @Override
1:     public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:         Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>(requirements.size());
1:         for (Requirement requirement : requirements) {
1:             String filterDirective = requirement.getDirectives().get(Namespace.REQUIREMENT_FILTER_DIRECTIVE);
1:             SimpleFilter simpleFilter;
1:             if (filterDirective == null) {
1:                 simpleFilter = new SimpleFilter(null, null, SimpleFilter.MATCH_ALL);
1:             }
1:             else {
1:                 simpleFilter = SimpleFilter.parse(filterDirective);
1:             }
1:             String namespace = requirement.getNamespace();
1:             CapabilitySet capabilitySet = namespace2capabilitySet.get(namespace);
1:             if (capabilitySet != null) {
1:                 Set<Capability> capabilities = capabilitySet.match(
1:                         simpleFilter, 
1:                         PackageNamespace.PACKAGE_NAMESPACE.equals(namespace)
1:                                 || BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)
1:                                 || HostNamespace.HOST_NAMESPACE.equals(namespace));
1:                 result.put(requirement, capabilities);
1:             }
1:         }
1:         return result;
1:     }
1:     
1:     public void removeResource(Resource resource) {
1:         for (Capability capability : resource.getCapabilities(null)) {
1:             CapabilitySet capabilitySet = namespace2capabilitySet.get(capability.getNamespace());
1:             if (capabilitySet == null) {
1:                 continue;
1:             }
1:             // TODO Examine CapabilitySet for thread safety.
1:             capabilitySet.removeCapability(capability);
1:         }
1:     }
1: }
============================================================================