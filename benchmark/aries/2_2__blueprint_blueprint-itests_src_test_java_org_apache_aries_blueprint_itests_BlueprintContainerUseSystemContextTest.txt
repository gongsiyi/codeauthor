1:ecf9333: /*
1:ecf9333:  * Licensed to the Apache Software Foundation (ASF) under one
1:ecf9333:  * or more contributor license agreements.  See the NOTICE file
1:ecf9333:  * distributed with this work for additional information
1:ecf9333:  * regarding copyright ownership.  The ASF licenses this file
1:ecf9333:  * to you under the Apache License, Version 2.0 (the
1:ecf9333:  * "License"); you may not use this file except in compliance
1:ecf9333:  * with the License.  You may obtain a copy of the License at
1:ecf9333:  *
1:ecf9333:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ecf9333:  *
1:ecf9333:  * Unless required by applicable law or agreed to in writing,
1:ecf9333:  * software distributed under the License is distributed on an
1:ecf9333:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ecf9333:  * KIND, either express or implied.  See the License for the
1:ecf9333:  * specific language governing permissions and limitations
1:ecf9333:  * under the License.
1:ecf9333:  */
1:ecf9333: package org.apache.aries.blueprint.itests;
1:ecf9333: 
1:ecf9333: import static org.junit.Assert.assertNotNull;
1:ecf9333: 
1:ecf9333: import java.util.Collection;
1:ecf9333: import java.util.Collections;
1:ecf9333: import java.util.Iterator;
1:ecf9333: 
1:ecf9333: import org.junit.After;
1:ecf9333: import org.junit.Before;
1:ecf9333: import org.junit.Test;
1:ecf9333: import org.ops4j.pax.exam.CoreOptions;
1:ecf9333: import org.ops4j.pax.exam.Option;
1:ecf9333: import org.osgi.framework.Bundle;
1:ecf9333: import org.osgi.framework.BundleContext;
1:ecf9333: import org.osgi.framework.BundleEvent;
1:ecf9333: import org.osgi.framework.Constants;
1:ecf9333: import org.osgi.framework.ServiceRegistration;
1:ecf9333: import org.osgi.framework.hooks.bundle.EventHook;
1:ecf9333: import org.osgi.framework.hooks.bundle.FindHook;
1:ecf9333: 
1:48189a5: /**
1:48189a5:  * Shows that the blueprint extender uses the system bundle to find user bundles if the respective property is set
1:48189a5:  */
1:ecf9333: public class BlueprintContainerUseSystemContextTest extends AbstractBlueprintIntegrationTest {
1:ecf9333: 
1:ecf9333: 	ServiceRegistration eventHook;
1:ecf9333: 	ServiceRegistration findHook;
1:ecf9333: 	@Before
1:ecf9333: 	public void regiserHook() {
1:ecf9333: 		final BundleContext systemContext = context().getBundle(Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
1:ecf9333: 		eventHook = context().registerService(EventHook.class, new EventHook() {
1:ecf9333: 			@Override
1:ecf9333: 			public void event(BundleEvent event,
1:ecf9333: 					Collection contexts) {
1:ecf9333: 				if ("org.apache.aries.blueprint.sample".equals(event.getBundle().getSymbolicName())) {
1:ecf9333: 					// hide sample from everything but the system bundle
1:ecf9333: 					// TODO on R6 we should be able to even try hiding from the system bundle
1:ecf9333: 					// R5 it was not clear if hooks could hide from the system bundle
1:ecf9333: 					// equinox R5 does allow hiding from system bundle
1:ecf9333: 					contexts.retainAll(Collections.singleton(systemContext));
1:ecf9333: 				}
1:ecf9333: 			}
1:ecf9333: 		}, null);
1:ecf9333: 		findHook = context().registerService(FindHook.class, new FindHook(){
1:ecf9333: 			@Override
1:ecf9333: 			public void find(BundleContext context, Collection bundles) {
1:ecf9333: 				if (context.equals(systemContext)) {
1:ecf9333: 					// TODO on R6 we should be able to even try hiding from the system bundle
1:ecf9333: 					// R5 it was not clear if hooks could hide from the system bundle
1:ecf9333: 					// equinox R5 does allow hiding from system bundle
1:ecf9333: 					return;
1:ecf9333: 				}
1:ecf9333: 				for (Iterator iBundles = bundles.iterator(); iBundles.hasNext();) {
1:ecf9333: 					if ("org.apache.aries.blueprint.sample".equals(((Bundle) iBundles.next()).getSymbolicName())) {
1:ecf9333: 						// hide sample from everything
1:ecf9333: 						iBundles.remove();
1:ecf9333: 					}
1:ecf9333: 				}
1:ecf9333: 			}}, null);
1:ecf9333: 	}
1:ecf9333: 
1:ecf9333: 	@After 
1:ecf9333: 	public void unregisterHook() {
1:ecf9333: 		eventHook.unregister();
1:ecf9333: 		findHook.unregister();
1:ecf9333: 	}
1:ecf9333: 
1:ecf9333:     @Test
1:ecf9333:     public void test() throws Exception {
1:ecf9333:     	applyCommonConfiguration(context());
1:ecf9333:         Bundle bundle = context().installBundle(sampleBundleOption().getURL());
1:ecf9333:         assertNotNull(bundle);
1:ecf9333:         bundle.start();
1:ecf9333:         
1:ecf9333:         // do the test
1:ecf9333:         Helper.testBlueprintContainer(context(), bundle);
1:ecf9333:     }
1:ecf9333: 
1:ecf9333:     @org.ops4j.pax.exam.Configuration
1:ecf9333:     public Option[] configuration() {
1:ecf9333:         return new Option[] {
1:ecf9333:             baseOptions(),
1:ecf9333:             CoreOptions.systemProperty("org.apache.aries.blueprint.use.system.context").value("true"),
1:ecf9333:             Helper.blueprintBundles()
1:ecf9333:         };
1:ecf9333:     }
1:ecf9333: 
1:ecf9333: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:48189a5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Shows that the blueprint extender uses the system bundle to find user bundles if the respective property is set
1:  */
author:Tom Watson
-------------------------------------------------------------------------------
commit:ecf9333
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
0: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Iterator;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.framework.hooks.bundle.EventHook;
1: import org.osgi.framework.hooks.bundle.FindHook;
1: 
1: public class BlueprintContainerUseSystemContextTest extends AbstractBlueprintIntegrationTest {
1: 
1: 	ServiceRegistration eventHook;
1: 	ServiceRegistration findHook;
1: 	@Before
1: 	public void regiserHook() {
1: 		final BundleContext systemContext = context().getBundle(Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
1: 		eventHook = context().registerService(EventHook.class, new EventHook() {
1: 			@Override
1: 			public void event(BundleEvent event,
1: 					Collection contexts) {
1: 				if ("org.apache.aries.blueprint.sample".equals(event.getBundle().getSymbolicName())) {
1: 					// hide sample from everything but the system bundle
1: 					// TODO on R6 we should be able to even try hiding from the system bundle
1: 					// R5 it was not clear if hooks could hide from the system bundle
1: 					// equinox R5 does allow hiding from system bundle
1: 					contexts.retainAll(Collections.singleton(systemContext));
1: 				}
1: 			}
1: 		}, null);
1: 		findHook = context().registerService(FindHook.class, new FindHook(){
1: 			@Override
1: 			public void find(BundleContext context, Collection bundles) {
1: 				if (context.equals(systemContext)) {
1: 					// TODO on R6 we should be able to even try hiding from the system bundle
1: 					// R5 it was not clear if hooks could hide from the system bundle
1: 					// equinox R5 does allow hiding from system bundle
1: 					return;
1: 				}
1: 				for (Iterator iBundles = bundles.iterator(); iBundles.hasNext();) {
1: 					if ("org.apache.aries.blueprint.sample".equals(((Bundle) iBundles.next()).getSymbolicName())) {
1: 						// hide sample from everything
1: 						iBundles.remove();
1: 					}
1: 				}
1: 			}}, null);
1: 	}
1: 
1: 	@After 
1: 	public void unregisterHook() {
1: 		eventHook.unregister();
1: 		findHook.unregister();
1: 	}
1: 
1:     @Test
1:     public void test() throws Exception {
1:     	applyCommonConfiguration(context());
1:         Bundle bundle = context().installBundle(sampleBundleOption().getURL());
1:         assertNotNull(bundle);
1:         bundle.start();
1:         
1:         // do the test
1:         Helper.testBlueprintContainer(context(), bundle);
1:     }
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(),
1:             CoreOptions.systemProperty("org.apache.aries.blueprint.use.system.context").value("true"),
1:             Helper.blueprintBundles()
1:         };
1:     }
1: 
1: }
============================================================================