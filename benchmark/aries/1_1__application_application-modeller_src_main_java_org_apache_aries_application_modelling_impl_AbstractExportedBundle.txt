1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.impl;
1:4fec049: 
1:4fec049: import java.util.Map;
1:4fec049: 
1:4fec049: import org.apache.aries.application.modelling.ExportedBundle;
1:4fec049: import org.apache.aries.application.modelling.ImportedBundle;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:4fec049: import org.apache.aries.application.modelling.ResourceType;
1:4fec049: import org.apache.aries.application.utils.AppConstants;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.osgi.framework.Version;
1:4fec049: 
1:4fec049:  abstract class AbstractExportedBundle implements ExportedBundle
1:4fec049: {
1:4fec049: 
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * Get the exported bundle or composite's manifest attributes
1:4fec049:    * @return attributes extracted from the object's manifest 
1:4fec049:    */
1:4fec049:   public abstract Map<String, Object> getAttributes(); 
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * This is always BUNDLE, even for composites. Their compositey-ness is detected
1:4fec049:    * from ModelledResource.getType()
1:4fec049:    */
1:4fec049: 
1:4fec049:   public final ResourceType getType() { 
1:4fec049:     
1:4fec049:     return ResourceType.BUNDLE;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get the bundle's symbolic name
1:4fec049:    * @return symbolic name
1:4fec049:    */
1:4fec049:   public String getSymbolicName() {
1:4fec049:     
1:4fec049:     String result = String.valueOf(getAttributes().get(ModellingConstants.OBR_SYMBOLIC_NAME));
1:4fec049:     
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * Get the bundle or composite's version
1:4fec049:    * @return version
1:4fec049:    */
1:4fec049:   public String getVersion () { 
1:4fec049:     
1:4fec049:     String result = String.valueOf(getAttributes().get(Constants.VERSION_ATTRIBUTE));
1:4fec049:     
1:4fec049:     return Version.parseVersion(result).toString();
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   
1:4fec049:   public String toDeploymentString() {
1:4fec049:     
1:4fec049:     String result = getSymbolicName() + ";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" + getVersion();
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Return true if this is a fragment
1:4fec049:    * @return true if this is a fragment
1:4fec049:    */
1:4fec049:   public abstract boolean isFragment();
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * If this bundle is a fragment, this method will return the bundle to which it attaches 
1:4fec049:    * @return fragment host
1:4fec049:    */
1:4fec049:   public abstract ImportedBundle getFragmentHost();
1:4fec049: 
1:4fec049: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.impl;
1: 
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.ExportedBundle;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.aries.application.modelling.ResourceType;
0: import org.apache.aries.application.modelling.utils.ModellingConstants;
1: import org.apache.aries.application.utils.AppConstants;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: 
1:  abstract class AbstractExportedBundle implements ExportedBundle
1: {
1: 
1: 
1:   /**
1:    * Get the exported bundle or composite's manifest attributes
1:    * @return attributes extracted from the object's manifest 
1:    */
1:   public abstract Map<String, Object> getAttributes(); 
1: 
1:   /**
1:    * This is always BUNDLE, even for composites. Their compositey-ness is detected
1:    * from ModelledResource.getType()
1:    */
1: 
1:   public final ResourceType getType() { 
1:     
1:     return ResourceType.BUNDLE;
1:   }
1:   
1:   /**
1:    * Get the bundle's symbolic name
1:    * @return symbolic name
1:    */
1:   public String getSymbolicName() {
1:     
1:     String result = String.valueOf(getAttributes().get(ModellingConstants.OBR_SYMBOLIC_NAME));
1:     
1:     return result;
1:   }
1: 
1:   /**
1:    * Get the bundle or composite's version
1:    * @return version
1:    */
1:   public String getVersion () { 
1:     
1:     String result = String.valueOf(getAttributes().get(Constants.VERSION_ATTRIBUTE));
1:     
1:     return Version.parseVersion(result).toString();
1:   }
1: 
1: 
1:   
1:   public String toDeploymentString() {
1:     
1:     String result = getSymbolicName() + ";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" + getVersion();
1:     return result;
1:   }
1:   
1:   /**
1:    * Return true if this is a fragment
1:    * @return true if this is a fragment
1:    */
1:   public abstract boolean isFragment();
1:   
1:   /**
1:    * If this bundle is a fragment, this method will return the bundle to which it attaches 
1:    * @return fragment host
1:    */
1:   public abstract ImportedBundle getFragmentHost();
1: 
1: }
============================================================================