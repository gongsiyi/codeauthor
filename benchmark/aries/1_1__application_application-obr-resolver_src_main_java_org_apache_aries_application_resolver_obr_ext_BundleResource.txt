1:792f3de: /*
1:792f3de:  * Licensed to the Apache Software Foundation (ASF) under one
1:792f3de:  * or more contributor license agreements.  See the NOTICE file
1:792f3de:  * distributed with this work for additional information
1:792f3de:  * regarding copyright ownership.  The ASF licenses this file
1:792f3de:  * to you under the Apache License, Version 2.0 (the
1:792f3de:  * "License"); you may not use this file except in compliance
1:792f3de:  * with the License.  You may obtain a copy of the License at
1:792f3de:  *
1:792f3de:  *  http://www.apache.org/licenses/LICENSE-2.0
1:792f3de:  *
1:792f3de:  * Unless required by applicable law or agreed to in writing,
1:792f3de:  * software distributed under the License is distributed on an
1:792f3de:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:792f3de:  * KIND, either express or implied.  See the License for the
1:792f3de:  * specific language governing permissions and limitations
1:792f3de:  * under the License.
1:792f3de:  */
1:792f3de: 
1:a1f07b5: package org.apache.aries.application.resolver.obr.ext;
1:792f3de: 
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:792f3de: 
1:792f3de: import java.net.MalformedURLException;
1:792f3de: import java.net.URI;
1:792f3de: import java.net.URISyntaxException;
1:792f3de: import java.net.URL;
1:792f3de: import java.util.ArrayList;
1:792f3de: import java.util.Collection;
1:792f3de: import java.util.Map;
1:792f3de: 
1:792f3de: import org.apache.aries.application.modelling.ExportedPackage;
1:792f3de: import org.apache.aries.application.modelling.ExportedService;
1:792f3de: import org.apache.aries.application.modelling.ImportedBundle;
1:792f3de: import org.apache.aries.application.modelling.ImportedPackage;
1:792f3de: import org.apache.aries.application.modelling.ImportedService;
1:792f3de: import org.apache.aries.application.modelling.ModelledResource;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:a1f07b5: import org.apache.aries.application.resolver.obr.impl.OBRCapability;
1:a1f07b5: import org.apache.aries.application.resolver.obr.impl.RequirementImpl;
1:792f3de: import org.apache.felix.bundlerepository.Capability;
1:792f3de: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:792f3de: import org.apache.felix.bundlerepository.Requirement;
1:792f3de: import org.apache.felix.bundlerepository.Resource;
1:792f3de: import org.osgi.framework.Version;
1:792f3de: import org.slf4j.Logger;
1:792f3de: import org.slf4j.LoggerFactory;
1:792f3de: 
1:792f3de: public class BundleResource implements Resource
1:792f3de: {
1:792f3de:   
1:792f3de:   private final ModelledResource _modelledBundle;
1:792f3de:   private final Collection<Capability> _capabilities;
1:792f3de:   private final Collection<Requirement> _requirements;
1:792f3de:   private final String _displayName;
1:792f3de:   private Logger logger = LoggerFactory.getLogger(BundleResource.class);
1:a1f07b5:   
1:a1f07b5:   /**
1:a1f07b5:    * Build a BundleResource from another BundleResource and some optional extra capabilities and requirements
1:a1f07b5:    * @param br
1:a1f07b5:    * @param extraCapabilities can be null
1:a1f07b5:    * @param extraRequirements can be null
1:a1f07b5:    */
1:a1f07b5:   public BundleResource (BundleResource br, Collection<Capability> extraCapabilities, Collection<Requirement> extraRequirements) { 
1:a1f07b5:     _modelledBundle = br._modelledBundle;
1:a1f07b5:     _capabilities = new ArrayList<Capability> (br._capabilities);
1:a1f07b5:     _requirements = new ArrayList<Requirement> (br._requirements);
1:a1f07b5:     _displayName = new String (br._displayName);
1:a1f07b5:     if (extraCapabilities != null) _capabilities.addAll(extraCapabilities);
1:a1f07b5:     if (extraRequirements != null) _requirements.addAll(extraRequirements);
1:a1f07b5:   }
1:a1f07b5:   
1:792f3de:   public BundleResource (ModelledResource mb, RepositoryAdmin repositoryAdmin) { 
1:792f3de:     logger.debug(LOG_ENTRY,"BundleResource", mb);
1:792f3de:     _modelledBundle = mb;
1:792f3de:     
1:792f3de:     _capabilities = new ArrayList<Capability>();
1:792f3de:     _capabilities.add(new OBRCapability(_modelledBundle.getExportedBundle(), repositoryAdmin));
1:792f3de: 
1:792f3de:     for (ExportedPackage pkg : _modelledBundle.getExportedPackages()) {
1:792f3de:       _capabilities.add(new OBRCapability(pkg, repositoryAdmin));
1:792f3de:     }
1:792f3de: 
1:792f3de:     for (ExportedService svc : _modelledBundle.getExportedServices()) {
1:792f3de:       _capabilities.add(new OBRCapability(svc, repositoryAdmin));
1:792f3de:     }
1:792f3de: 
1:792f3de:     _requirements = new ArrayList<Requirement>();
1:792f3de:     for (ImportedPackage pkg : _modelledBundle.getImportedPackages()) {
1:792f3de:       _requirements.add(new RequirementImpl(pkg));
1:792f3de:     }
1:792f3de:     
1:792f3de:     for (ImportedService svc : _modelledBundle.getImportedServices()) { 
1:792f3de:       _requirements.add(new RequirementImpl(svc));
1:792f3de:     }
1:792f3de:     
1:792f3de:     for (ImportedBundle requiredBundle : _modelledBundle.getRequiredBundles()) { 
1:792f3de:       _requirements.add(new RequirementImpl(requiredBundle));
1:792f3de:     }
1:792f3de:     
1:792f3de:     if(mb.isFragment())
1:792f3de:       _requirements.add(new RequirementImpl(mb.getFragmentHost()));
1:792f3de: 
1:792f3de:     String possibleDisplayName = (String) mb.getExportedBundle().getAttributes().get(
1:792f3de:         ModellingConstants.OBR_PRESENTATION_NAME);
1:792f3de:     if (possibleDisplayName == null) {
1:792f3de:       _displayName = mb.getSymbolicName();
1:792f3de:     } else {
1:792f3de:       _displayName = possibleDisplayName;
1:792f3de:     }
1:a1f07b5:     
1:a1f07b5:     
1:792f3de:     
1:792f3de:     logger.debug(LOG_EXIT,"BundleResource");
1:792f3de:     
1:792f3de:   }
1:792f3de: 
1:a1f07b5:   public ModelledResource getModelledResource() { 
1:a1f07b5:     return _modelledBundle;
1:a1f07b5:   }
1:a1f07b5:   
1:792f3de:   public Capability[] getCapabilities() {
1:792f3de:    
1:792f3de:     logger.debug(LOG_ENTRY,"getCapabilities");
1:792f3de:     Capability [] result = _capabilities.toArray(new Capability[_capabilities.size()]);
1:792f3de:     logger.debug(LOG_EXIT,"getCapabilities", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String[] getCategories() {
1:792f3de:     logger.debug(LOG_ENTRY,"getCategories");
1:792f3de:     logger.debug(LOG_EXIT,"getCategories", null);
1:792f3de:     return null;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String getId() {   
1:792f3de:     logger.debug(LOG_ENTRY,"getId");
1:792f3de:     String id = _modelledBundle.getSymbolicName() + '/' + _modelledBundle.getVersion();
1:792f3de:     logger.debug(LOG_EXIT,"getId", id);
1:792f3de:     return id;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String getPresentationName() {
1:792f3de:     
1:792f3de:     logger.debug(LOG_ENTRY,"getPresentationName");
1:792f3de:     logger.debug(LOG_EXIT,"getPresentationName", _displayName);
1:792f3de:     return _displayName;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   @SuppressWarnings("unchecked")
1:792f3de:   public Map getProperties() {
1:792f3de:     logger.debug(LOG_ENTRY,"getProperties");
1:792f3de:     logger.debug(LOG_EXIT,"getProperties", null);
1:792f3de:     
1:792f3de:     return null;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de: 
1:792f3de: 
1:792f3de:   public Requirement[] getRequirements() {
1:792f3de:     logger.debug(LOG_ENTRY,"getRequirements");
1:792f3de:     Requirement [] result = _requirements.toArray(new Requirement[_requirements.size()]);
1:792f3de:     logger.debug(LOG_EXIT,"getRequirements", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String getSymbolicName() {
1:792f3de:     logger.debug(LOG_ENTRY,"getSymbolicName");
1:792f3de:     String result = _modelledBundle.getSymbolicName();
1:792f3de:     logger.debug(LOG_EXIT,"getSymbolicName", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public URL getURL() {
1:792f3de:     
1:792f3de:     logger.debug(LOG_ENTRY,"getURL");
1:792f3de:     URL url = null;
1:792f3de:     try {
1:792f3de:       URI uri = new URI(_modelledBundle.getLocation());
1:792f3de:       url = uri.toURL();
1:792f3de:     } catch (URISyntaxException e) {
1:792f3de:       logger.error(e.getMessage());
1:792f3de:     } catch (MalformedURLException e) {
1:792f3de:       logger.error(e.getMessage());
1:792f3de:     }
1:792f3de:     logger.debug(LOG_EXIT,"getURL", url);
1:792f3de:     return url;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public Version getVersion() {
1:792f3de:     logger.debug(LOG_ENTRY,"getVersion");
1:792f3de:     Version v = new Version(_modelledBundle.getVersion()); 
1:792f3de:     logger.debug(LOG_EXIT,"getVersion", v);
1:792f3de:     return v;
1:792f3de:   }
1:792f3de: 
1:792f3de:   public Long getSize()
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY,"getSize");
1:792f3de:     logger.debug(LOG_EXIT,"getSize", 5l);
1:792f3de:     return 5l;
1:792f3de:   }
1:792f3de: 
1:792f3de:   public String getURI()
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY,"getURI");
1:792f3de:     String uri = _modelledBundle.getLocation();
1:792f3de:     logger.debug(LOG_EXIT,"getURI", uri);
1:792f3de:     return uri;
1:792f3de:   }
1:792f3de: 
1:792f3de:   public boolean isLocal()
1:792f3de:   {
1:792f3de:     logger.debug(LOG_ENTRY,"isLocal");
1:792f3de:     logger.debug(LOG_EXIT,"isLocal", false);
1:792f3de:     return false;
1:792f3de:   }
1:792f3de: 
1:792f3de: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
commit:a1f07b5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.resolver.obr.ext;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.resolver.obr.impl.OBRCapability;
1: import org.apache.aries.application.resolver.obr.impl.RequirementImpl;
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Build a BundleResource from another BundleResource and some optional extra capabilities and requirements
1:    * @param br
1:    * @param extraCapabilities can be null
1:    * @param extraRequirements can be null
1:    */
1:   public BundleResource (BundleResource br, Collection<Capability> extraCapabilities, Collection<Requirement> extraRequirements) { 
1:     _modelledBundle = br._modelledBundle;
1:     _capabilities = new ArrayList<Capability> (br._capabilities);
1:     _requirements = new ArrayList<Requirement> (br._requirements);
1:     _displayName = new String (br._displayName);
1:     if (extraCapabilities != null) _capabilities.addAll(extraCapabilities);
1:     if (extraRequirements != null) _requirements.addAll(extraRequirements);
1:   }
1:   
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:   public ModelledResource getModelledResource() { 
1:     return _modelledBundle;
1:   }
1:   
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.resolver.obr.impl;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.net.MalformedURLException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.ExportedPackage;
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.aries.application.modelling.ImportedPackage;
1: import org.apache.aries.application.modelling.ImportedService;
1: import org.apache.aries.application.modelling.ModelledResource;
0: import org.apache.aries.application.modelling.utils.ModellingConstants;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.osgi.framework.Version;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BundleResource implements Resource
1: {
1:   
1:   private final ModelledResource _modelledBundle;
1:   private final Collection<Capability> _capabilities;
1:   private final Collection<Requirement> _requirements;
1:   private final String _displayName;
1:   private Logger logger = LoggerFactory.getLogger(BundleResource.class);
1:   public BundleResource (ModelledResource mb, RepositoryAdmin repositoryAdmin) { 
1:     logger.debug(LOG_ENTRY,"BundleResource", mb);
1:     _modelledBundle = mb;
1:     
1:     _capabilities = new ArrayList<Capability>();
1:     _capabilities.add(new OBRCapability(_modelledBundle.getExportedBundle(), repositoryAdmin));
1: 
1:     for (ExportedPackage pkg : _modelledBundle.getExportedPackages()) {
1:       _capabilities.add(new OBRCapability(pkg, repositoryAdmin));
1:     }
1: 
1:     for (ExportedService svc : _modelledBundle.getExportedServices()) {
1:       _capabilities.add(new OBRCapability(svc, repositoryAdmin));
1:     }
1: 
1:     _requirements = new ArrayList<Requirement>();
1:     for (ImportedPackage pkg : _modelledBundle.getImportedPackages()) {
1:       _requirements.add(new RequirementImpl(pkg));
1:     }
1:     
1:     for (ImportedService svc : _modelledBundle.getImportedServices()) { 
1:       _requirements.add(new RequirementImpl(svc));
1:     }
1:     
1:     for (ImportedBundle requiredBundle : _modelledBundle.getRequiredBundles()) { 
1:       _requirements.add(new RequirementImpl(requiredBundle));
1:     }
1:     
1:     if(mb.isFragment())
1:       _requirements.add(new RequirementImpl(mb.getFragmentHost()));
1: 
1:     String possibleDisplayName = (String) mb.getExportedBundle().getAttributes().get(
1:         ModellingConstants.OBR_PRESENTATION_NAME);
1:     if (possibleDisplayName == null) {
1:       _displayName = mb.getSymbolicName();
1:     } else {
1:       _displayName = possibleDisplayName;
1:     }
1:     
1:     logger.debug(LOG_EXIT,"BundleResource");
1:     
1:   }
1: 
1:   public Capability[] getCapabilities() {
1:    
1:     logger.debug(LOG_ENTRY,"getCapabilities");
1:     Capability [] result = _capabilities.toArray(new Capability[_capabilities.size()]);
1:     logger.debug(LOG_EXIT,"getCapabilities", result);
1:     return result;
1:   }
1: 
1: 
1:   public String[] getCategories() {
1:     logger.debug(LOG_ENTRY,"getCategories");
1:     logger.debug(LOG_EXIT,"getCategories", null);
1:     return null;
1:   }
1: 
1: 
1:   public String getId() {   
1:     logger.debug(LOG_ENTRY,"getId");
1:     String id = _modelledBundle.getSymbolicName() + '/' + _modelledBundle.getVersion();
1:     logger.debug(LOG_EXIT,"getId", id);
1:     return id;
1:   }
1: 
1: 
1:   public String getPresentationName() {
1:     
1:     logger.debug(LOG_ENTRY,"getPresentationName");
1:     logger.debug(LOG_EXIT,"getPresentationName", _displayName);
1:     return _displayName;
1:   }
1: 
1: 
1:   @SuppressWarnings("unchecked")
1:   public Map getProperties() {
1:     logger.debug(LOG_ENTRY,"getProperties");
1:     logger.debug(LOG_EXIT,"getProperties", null);
1:     
1:     return null;
1:   }
1: 
1: 
1: 
1: 
1:   public Requirement[] getRequirements() {
1:     logger.debug(LOG_ENTRY,"getRequirements");
1:     Requirement [] result = _requirements.toArray(new Requirement[_requirements.size()]);
1:     logger.debug(LOG_EXIT,"getRequirements", result);
1:     return result;
1:   }
1: 
1: 
1:   public String getSymbolicName() {
1:     logger.debug(LOG_ENTRY,"getSymbolicName");
1:     String result = _modelledBundle.getSymbolicName();
1:     logger.debug(LOG_EXIT,"getSymbolicName", result);
1:     return result;
1:   }
1: 
1: 
1:   public URL getURL() {
1:     
1:     logger.debug(LOG_ENTRY,"getURL");
1:     URL url = null;
1:     try {
1:       URI uri = new URI(_modelledBundle.getLocation());
1:       url = uri.toURL();
1:     } catch (URISyntaxException e) {
1:       logger.error(e.getMessage());
1:     } catch (MalformedURLException e) {
1:       logger.error(e.getMessage());
1:     }
1:     logger.debug(LOG_EXIT,"getURL", url);
1:     return url;
1:   }
1: 
1: 
1:   public Version getVersion() {
1:     logger.debug(LOG_ENTRY,"getVersion");
1:     Version v = new Version(_modelledBundle.getVersion()); 
1:     logger.debug(LOG_EXIT,"getVersion", v);
1:     return v;
1:   }
1: 
1:   public Long getSize()
1:   {
1:     logger.debug(LOG_ENTRY,"getSize");
1:     logger.debug(LOG_EXIT,"getSize", 5l);
1:     return 5l;
1:   }
1: 
1:   public String getURI()
1:   {
1:     logger.debug(LOG_ENTRY,"getURI");
1:     String uri = _modelledBundle.getLocation();
1:     logger.debug(LOG_EXIT,"getURI", uri);
1:     return uri;
1:   }
1: 
1:   public boolean isLocal()
1:   {
1:     logger.debug(LOG_ENTRY,"isLocal");
1:     logger.debug(LOG_EXIT,"isLocal", false);
1:     return false;
1:   }
1: 
1: }
============================================================================