1:94b52c5: /*
1:94b52c5:  * Licensed under the Apache License, Version 2.0 (the "License");
1:94b52c5:  * you may not use this file except in compliance with the License.
1:94b52c5:  * You may obtain a copy of the License at
1:94b52c5:  *
1:94b52c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:94b52c5:  *
1:94b52c5:  * Unless required by applicable law or agreed to in writing, software
1:94b52c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:94b52c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:94b52c5:  * See the License for the specific language governing permissions and
1:94b52c5:  * limitations under the License.
1:94b52c5:  */
1:96715a0: package org.apache.aries.subsystem.obr.internal;
1:96715a0: 
1:96715a0: import static org.junit.Assert.assertEquals;
1:96715a0: 
1:96715a0: import java.util.HashMap;
1:96715a0: import java.util.Map;
1:96715a0: 
1:7a834c3: import org.apache.aries.subsystem.util.felix.FelixCapabilityAdapter;
1:96715a0: import org.apache.felix.bundlerepository.Capability;
1:96715a0: import org.apache.felix.bundlerepository.Resource;
1:96715a0: import org.easymock.EasyMock;
1:96715a0: import org.junit.Test;
1:96715a0: import org.osgi.framework.namespace.BundleNamespace;
1:96715a0: import org.osgi.framework.namespace.PackageNamespace;
1:96715a0: import org.osgi.namespace.service.ServiceNamespace;
1:96715a0: 
1:96715a0: public class FelixCapabilityAdapterTest {
1:96715a0: 	@Test
1:96715a0: 	public void testObjectClassAttribute() {
1:96715a0: 		String objectClass = "com.foo.Bar";
1:96715a0: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1:96715a0: 		EasyMock.expect(cap.getName()).andReturn(Capability.SERVICE);
1:96715a0: 		Map<String, Object> props = new HashMap<String, Object>();
1:96715a0: 		props.put(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE.toLowerCase(), objectClass);
1:96715a0: 		EasyMock.expect(cap.getPropertiesAsMap()).andReturn(props);
1:96715a0: 		EasyMock.replay(cap);
1:96715a0: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1:96715a0: 		assertEquals("Wrong value for attribute " + ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, objectClass, adapter.getAttributes().get(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE));
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testOsgiServiceNamespace() {
1:96715a0: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1:96715a0: 		EasyMock.expect(cap.getName()).andReturn(Capability.SERVICE);
1:96715a0: 		EasyMock.replay(cap);
1:96715a0: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1:96715a0: 		assertEquals("Wrong namespace", ServiceNamespace.SERVICE_NAMESPACE, adapter.getNamespace());
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testOsgiWiringPackageAttribute() {
1:96715a0: 		String pkg = "com.foo.Bar";
1:96715a0: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1:96715a0: 		EasyMock.expect(cap.getName()).andReturn(Capability.PACKAGE).anyTimes();
1:96715a0: 		Map<String, Object> props = new HashMap<String, Object>();
1:96715a0: 		props.put(Capability.PACKAGE, pkg);
1:96715a0: 		EasyMock.expect(cap.getPropertiesAsMap()).andReturn(props);
1:96715a0: 		EasyMock.replay(cap);
1:96715a0: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1:96715a0: 		assertEquals("Wrong value for attribute " + PackageNamespace.PACKAGE_NAMESPACE, pkg, adapter.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE));
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testOsgiWiringPackageNamespace() {
1:96715a0: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1:96715a0: 		EasyMock.expect(cap.getName()).andReturn(Capability.PACKAGE);
1:96715a0: 		EasyMock.replay(cap);
1:96715a0: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1:96715a0: 		assertEquals("Wrong namespace", PackageNamespace.PACKAGE_NAMESPACE, adapter.getNamespace());
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testOsgiWiringBundleNamespace() {
1:96715a0: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1:96715a0: 		EasyMock.expect(cap.getName()).andReturn(Capability.BUNDLE);
1:96715a0: 		EasyMock.replay(cap);
1:96715a0: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1:96715a0: 		assertEquals("Wrong namespace", BundleNamespace.BUNDLE_NAMESPACE, adapter.getNamespace());
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testOsgiWiringBundleAttribute() {
1:96715a0: 		String symbolicName = "derbyclient";
1:96715a0: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1:96715a0: 		EasyMock.expect(cap.getName()).andReturn(Capability.BUNDLE).anyTimes();
1:96715a0: 		Map<String, Object> props = new HashMap<String, Object>();
1:96715a0: 		props.put(Resource.SYMBOLIC_NAME, symbolicName);
1:96715a0: 		EasyMock.expect(cap.getPropertiesAsMap()).andReturn(props);
1:96715a0: 		EasyMock.replay(cap);
1:96715a0: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1:96715a0: 		assertEquals("Wrong value for attribute " + BundleNamespace.BUNDLE_NAMESPACE, symbolicName, adapter.getAttributes().get(BundleNamespace.BUNDLE_NAMESPACE));
1:96715a0: 	}
1:96715a0: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.util.felix.FelixCapabilityAdapter;
author:John Ross
-------------------------------------------------------------------------------
commit:94b52c5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:96715a0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.obr.internal;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.framework.namespace.BundleNamespace;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.namespace.service.ServiceNamespace;
1: 
1: public class FelixCapabilityAdapterTest {
1: 	@Test
1: 	public void testObjectClassAttribute() {
1: 		String objectClass = "com.foo.Bar";
1: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1: 		EasyMock.expect(cap.getName()).andReturn(Capability.SERVICE);
1: 		Map<String, Object> props = new HashMap<String, Object>();
1: 		props.put(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE.toLowerCase(), objectClass);
1: 		EasyMock.expect(cap.getPropertiesAsMap()).andReturn(props);
1: 		EasyMock.replay(cap);
1: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1: 		assertEquals("Wrong value for attribute " + ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, objectClass, adapter.getAttributes().get(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE));
1: 	}
1: 	
1: 	@Test
1: 	public void testOsgiServiceNamespace() {
1: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1: 		EasyMock.expect(cap.getName()).andReturn(Capability.SERVICE);
1: 		EasyMock.replay(cap);
1: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1: 		assertEquals("Wrong namespace", ServiceNamespace.SERVICE_NAMESPACE, adapter.getNamespace());
1: 	}
1: 	
1: 	@Test
1: 	public void testOsgiWiringPackageAttribute() {
1: 		String pkg = "com.foo.Bar";
1: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1: 		EasyMock.expect(cap.getName()).andReturn(Capability.PACKAGE).anyTimes();
1: 		Map<String, Object> props = new HashMap<String, Object>();
1: 		props.put(Capability.PACKAGE, pkg);
1: 		EasyMock.expect(cap.getPropertiesAsMap()).andReturn(props);
1: 		EasyMock.replay(cap);
1: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1: 		assertEquals("Wrong value for attribute " + PackageNamespace.PACKAGE_NAMESPACE, pkg, adapter.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE));
1: 	}
1: 	
1: 	@Test
1: 	public void testOsgiWiringPackageNamespace() {
1: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1: 		EasyMock.expect(cap.getName()).andReturn(Capability.PACKAGE);
1: 		EasyMock.replay(cap);
1: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1: 		assertEquals("Wrong namespace", PackageNamespace.PACKAGE_NAMESPACE, adapter.getNamespace());
1: 	}
1: 	
1: 	@Test
1: 	public void testOsgiWiringBundleNamespace() {
1: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1: 		EasyMock.expect(cap.getName()).andReturn(Capability.BUNDLE);
1: 		EasyMock.replay(cap);
1: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1: 		assertEquals("Wrong namespace", BundleNamespace.BUNDLE_NAMESPACE, adapter.getNamespace());
1: 	}
1: 	
1: 	@Test
1: 	public void testOsgiWiringBundleAttribute() {
1: 		String symbolicName = "derbyclient";
1: 		Capability cap = EasyMock.createNiceMock(Capability.class);
1: 		EasyMock.expect(cap.getName()).andReturn(Capability.BUNDLE).anyTimes();
1: 		Map<String, Object> props = new HashMap<String, Object>();
1: 		props.put(Resource.SYMBOLIC_NAME, symbolicName);
1: 		EasyMock.expect(cap.getPropertiesAsMap()).andReturn(props);
1: 		EasyMock.replay(cap);
1: 		FelixCapabilityAdapter adapter = new FelixCapabilityAdapter(cap, EasyMock.createNiceMock(org.osgi.resource.Resource.class));
1: 		assertEquals("Wrong value for attribute " + BundleNamespace.BUNDLE_NAMESPACE, symbolicName, adapter.getAttributes().get(BundleNamespace.BUNDLE_NAMESPACE));
1: 	}
1: }
============================================================================