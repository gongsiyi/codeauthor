1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
2:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
2:8914925:  */
1:8914925: package org.apache.aries.application.impl;
16:8914925: 
1:8914925: import java.util.Collections;
1:8914925: import java.util.HashMap;
1:8914925: import java.util.Map;
1:8914925: 
1:8914925: import org.apache.aries.application.Content;
1:0e0fd84: import org.apache.aries.application.utils.internal.MessageUtil;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:3162c07: import org.osgi.framework.Constants;
1:0e0fd84: import org.osgi.framework.Version;
1:8914925: 
1:8914925: 
2:8914925: /**
1:48d72a7:  * Implementation of Content
1:8914925:  *
1:8914925:  */
1:3162c07: public final class ContentImpl implements Content
4:8914925: {
1:8914925:   private String contentName;
1:8914925:   protected Map<String, String> attributes;
1:8914925:   private Map<String, String> directives;
1:de5b346:   private Map<String, String> nameValueMap;
1:8914925:   
1:8914925:   /**
1:8914925:    * 
1:8914925:    * @param content  Application-Content, Import-Package content
1:8914925:    */
1:8914925:   public ContentImpl(String content) {
1:de5b346:     Map<String, Map<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(content);
1:0e0fd84:     if (appContentsMap.size() != 1) {
1:0e0fd84:       throw new IllegalArgumentException(MessageUtil.getMessage("APPUTILS0004E",content));
1:0e0fd84:     }
1:de5b346:     for (Map.Entry<String, Map<String, String>> entry : appContentsMap.entrySet()) {
1:0e0fd84:       this.contentName = entry.getKey();
1:0e0fd84:       this.nameValueMap= entry.getValue();
1:0e0fd84:       setup();
1:0e0fd84:       break;
1:0e0fd84:     }
13:8914925:   }
1:0e0fd84:   
1:0e0fd84:   public ContentImpl (String bundleSymbolicName, Version version) { 
1:0e0fd84:     this.contentName = bundleSymbolicName;
1:de5b346:     this.nameValueMap = new HashMap<String, String>();
1:0e0fd84:     nameValueMap.put("version", version.toString());
1:0e0fd84:     setup();
1:0e0fd84:   }
1:0e0fd84:   
1:9c133a0:   public ContentImpl (String bundleSymbolicName, VersionRange version) { 
1:9c133a0:     this.contentName = bundleSymbolicName;
1:de5b346:     this.nameValueMap = new HashMap<String, String>();
1:9c133a0:     nameValueMap.put("version", version.toString());
1:9c133a0:     setup();
1:9c133a0:   }
1:0e0fd84:   /**
1:0e0fd84:    * 
1:0e0fd84:    * @param contentName  
1:0e0fd84:    * @param nameValueMap
1:0e0fd84:    */
1:de5b346:   public ContentImpl(String contentName, Map<String, String> nameValueMap) {
1:0e0fd84:     this.contentName = contentName;
1:0e0fd84:     this.nameValueMap= nameValueMap;
1:0e0fd84:     setup();
1:8914925:   }
1:8914925:   
1:8914925:   public String getContentName() {
1:8914925:     return this.contentName;
1:8914925:   }
1:8914925:   
1:8914925:   public Map<String, String> getAttributes() {
1:8914925:     return Collections.unmodifiableMap(this.attributes);
1:8914925:   }
1:8914925:   
1:8914925:   public Map<String, String> getDirectives() {
1:8914925:     return Collections.unmodifiableMap(this.directives);
1:8914925:   }
1:8914925:   
1:8914925:   public String getAttribute(String key) {
1:8914925:     String toReturn = this.attributes.get(key);
1:8914925:     return toReturn;
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * add key value to the attributes map
1:8914925:    * @param key
1:8914925:    * @param value
1:8914925:    */
1:8914925:   public void addAttribute(String key, String value) {
1:8914925:     this.attributes.put(key, value);
1:8914925:   }
1:8914925:   
1:8914925:   public String getDirective(String key) {
1:8914925:     String toReturn = this.directives.get(key);
1:8914925:     return toReturn;
1:8914925:   }
1:8914925:   
1:de5b346:   public Map<String, String> getNameValueMap() {
1:de5b346:     Map<String, String> nvm = new HashMap<String, String>();
1:5297b83:     for (String key : this.nameValueMap.keySet()) {
1:de5b346:       nvm.put(key, this.nameValueMap.get(key));
1:5297b83:     }
1:5297b83:     return nvm;
1:5297b83:   }
1:5297b83:   
1:8914925:   /**
1:8914925:    * add key value to the directives map
1:8914925:    * @param key
1:8914925:    * @param value
1:8914925:    */
1:8914925:   public void addDirective(String key, String value) {
1:8914925:     this.directives.put(key, value);
1:8914925:   }
1:8914925:   
1:8914925:   public VersionRange getVersion() {
1:8914925:     VersionRange vi = null;
1:0e0fd84:     if (this.attributes.get(Constants.VERSION_ATTRIBUTE) != null 
1:0e0fd84:         && this.attributes.get(Constants.VERSION_ATTRIBUTE).length() > 0) {
1:0e0fd84:       vi = ManifestHeaderProcessor.parseVersionRange(this.attributes.get(Constants.VERSION_ATTRIBUTE));
1:43f0e1c:     } else {
1:0e0fd84:       // what if version is not specified?  let's interpret it as 0.0.0 
1:0e0fd84:       vi = ManifestHeaderProcessor.parseVersionRange("0.0.0");
1:8914925:     }
1:8914925:     return vi;
1:8914925:   }
1:3162c07:   
1:3162c07:   @Override
1:3162c07:   public String toString()
1:3162c07:   {
1:f9c9743:     StringBuilder builder = new StringBuilder();
1:f9c9743:     
1:f9c9743:     builder.append(this.contentName);
1:f9c9743:     
1:f9c9743:     if (!!!nameValueMap.isEmpty()) {
1:f9c9743:       for (Map.Entry<String, String> entry : nameValueMap.entrySet()) {
1:f9c9743:         builder.append(';');
1:f9c9743:         builder.append(entry.getKey());
1:f9c9743:         builder.append('=').append('\"');
1:f9c9743:         builder.append(entry.getValue());
1:f9c9743:         builder.append('\"');
1:f9c9743:       }
1:f9c9743:     }
1:f9c9743:     
1:f9c9743:     
1:f9c9743:     return builder.toString();
1:3162c07:   }
1:f9c9743: 
1:3162c07:   @Override
1:3162c07:   public boolean equals(Object other)
1:3162c07:   {
1:3162c07:     if (other == this) return true;
1:3162c07:     if (other == null) return false;
1:3162c07:     
1:3162c07:     if (other instanceof ContentImpl) {
1:3162c07:       ContentImpl otherContent = (ContentImpl)other;
1:e5cf43a:       
1:e5cf43a:       Map<String,String> attributesWithoutVersion = attributes;
1:e5cf43a:       
1:e5cf43a:       if (attributes.containsKey("version")) {
1:e5cf43a:         attributesWithoutVersion = new HashMap<String, String>(attributes);
1:e5cf43a:         attributesWithoutVersion.remove("version");
1:e5cf43a:       }
1:e5cf43a:       
1:e5cf43a:       Map<String, String> otherAttributesWithoutVersion = otherContent.attributes;
1:e5cf43a:       
1:e5cf43a:       if (otherContent.attributes.containsKey("version")) {
1:e5cf43a:         otherAttributesWithoutVersion = new HashMap<String, String>(otherContent.attributes);
1:e5cf43a:         otherAttributesWithoutVersion.remove("version");
1:e5cf43a:       }
1:e5cf43a:       
1:3162c07:       return contentName.equals(otherContent.contentName) && 
1:e5cf43a:              attributesWithoutVersion.equals(otherAttributesWithoutVersion) &&
1:e5cf43a:              directives.equals(otherContent.directives) &&
1:e5cf43a:              getVersion().equals(otherContent.getVersion());
1:3162c07:     }
1:3162c07:     
1:3162c07:     return false;
1:3162c07:   }
1:3162c07:   
1:3162c07:   @Override
1:3162c07:   public int hashCode()
1:3162c07:   {
1:3162c07:     return contentName.hashCode();
1:3162c07:   }
1:3162c07:   
1:8914925:   /**
1:0e0fd84:    * set up directives and attributes
1:8914925:    */
1:0e0fd84:   protected void setup() {
1:0e0fd84:     this.attributes = new HashMap<String, String>();
1:0e0fd84:     this.directives = new HashMap<String, String>();
1:3162c07:     
1:0e0fd84:     for (String key : this.nameValueMap.keySet()) {
1:0e0fd84:       if (key.endsWith(":")) {
1:0e0fd84:         this.directives.put(key.substring(0, key.length() - 1), this.nameValueMap.get(key));
1:0e0fd84:       } else {
1:0e0fd84:         this.attributes.put(key, this.nameValueMap.get(key));
1:3162c07:       }
1:8914925:     }
1:8914925:   }
1:8914925: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, String> nameValueMap;
1:     Map<String, Map<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(content);
1:     for (Map.Entry<String, Map<String, String>> entry : appContentsMap.entrySet()) {
/////////////////////////////////////////////////////////////////////////
1:     this.nameValueMap = new HashMap<String, String>();
1:     this.nameValueMap = new HashMap<String, String>();
/////////////////////////////////////////////////////////////////////////
1:   public ContentImpl(String contentName, Map<String, String> nameValueMap) {
/////////////////////////////////////////////////////////////////////////
1:   public Map<String, String> getNameValueMap() {
1:     Map<String, String> nvm = new HashMap<String, String>();
1:       nvm.put(key, this.nameValueMap.get(key));
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:f9c9743
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder builder = new StringBuilder();
1:     
1:     builder.append(this.contentName);
1:     
1:     if (!!!nameValueMap.isEmpty()) {
1:       for (Map.Entry<String, String> entry : nameValueMap.entrySet()) {
1:         builder.append(';');
1:         builder.append(entry.getKey());
1:         builder.append('=').append('\"');
1:         builder.append(entry.getValue());
1:         builder.append('\"');
1:       }
1:     }
1:     
1:     
1:     return builder.toString();
1: 
commit:e5cf43a
/////////////////////////////////////////////////////////////////////////
1:       
1:       Map<String,String> attributesWithoutVersion = attributes;
1:       
1:       if (attributes.containsKey("version")) {
1:         attributesWithoutVersion = new HashMap<String, String>(attributes);
1:         attributesWithoutVersion.remove("version");
1:       }
1:       
1:       Map<String, String> otherAttributesWithoutVersion = otherContent.attributes;
1:       
1:       if (otherContent.attributes.containsKey("version")) {
1:         otherAttributesWithoutVersion = new HashMap<String, String>(otherContent.attributes);
1:         otherAttributesWithoutVersion.remove("version");
1:       }
1:       
1:              attributesWithoutVersion.equals(otherAttributesWithoutVersion) &&
1:              directives.equals(otherContent.directives) &&
1:              getVersion().equals(otherContent.getVersion());
commit:43f0e1c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     } else {
0:       vi = new VersionRangeImpl("0.0.0");
commit:3162c07
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.AppConstants;
1: import org.osgi.framework.Constants;
1: public final class ContentImpl implements Content
/////////////////////////////////////////////////////////////////////////
1:     
0:     if (!!!attributes.containsKey(Constants.VERSION_ATTRIBUTE)) {
0:       attributes.put(Constants.VERSION_ATTRIBUTE, AppConstants.DEFAULT_VERSION);
1:     }
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public String toString()
1:   {
0:     return content;
1:   }
1:   
1:   @Override
1:   public boolean equals(Object other)
1:   {
1:     if (other == this) return true;
1:     if (other == null) return false;
1:     
1:     if (other instanceof ContentImpl) {
1:       ContentImpl otherContent = (ContentImpl)other;
1:       return contentName.equals(otherContent.contentName) && 
0:              attributes.equals(otherContent.attributes) &&
0:              directives.equals(otherContent.directives);
1:     }
1:     
1:     return false;
1:   }
1:   
1:   @Override
1:   public int hashCode()
1:   {
1:     return contentName.hashCode();
1:   }
1:   
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalArgumentException("Invalid content: " + content);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9c133a0
/////////////////////////////////////////////////////////////////////////
1:   public ContentImpl (String bundleSymbolicName, VersionRange version) { 
1:     this.contentName = bundleSymbolicName;
0:     this.nameValueMap = new NameValueMap<String, String>();
1:     nameValueMap.put("version", version.toString());
1:     setup();
1:   }
commit:5297b83
/////////////////////////////////////////////////////////////////////////
0:   public NameValueMap<String, String> getNameValueMap() {
0:     NameValueMap<String, String> nvm = new NameValueMap<String, String>();
1:     for (String key : this.nameValueMap.keySet()) {
0:       nvm.addToCollection(key, this.nameValueMap.get(key));
1:     }
1:     return nvm;
1:   }
1:   
commit:0e0fd84
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.internal.MessageUtil;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
0: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
/////////////////////////////////////////////////////////////////////////
0:   private NameValueMap<String, String> nameValueMap;
0:     Map<String, NameValueMap<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(content);
1:     if (appContentsMap.size() != 1) {
1:       throw new IllegalArgumentException(MessageUtil.getMessage("APPUTILS0004E",content));
1:     }
0:     for (Map.Entry<String, NameValueMap<String, String>> entry : appContentsMap.entrySet()) {
1:       this.contentName = entry.getKey();
1:       this.nameValueMap= entry.getValue();
1:       setup();
1:       break;
1:     }
1:   public ContentImpl (String bundleSymbolicName, Version version) { 
1:     this.contentName = bundleSymbolicName;
0:     this.nameValueMap = new NameValueMap<String, String>();
1:     nameValueMap.put("version", version.toString());
1:     setup();
1:   }
1:   
1:   /**
1:    * 
1:    * @param contentName  
1:    * @param nameValueMap
1:    */
0:   public ContentImpl(String contentName, NameValueMap<String, String> nameValueMap) {
1:     this.contentName = contentName;
1:     this.nameValueMap= nameValueMap;
1:     setup();
/////////////////////////////////////////////////////////////////////////
1:     if (this.attributes.get(Constants.VERSION_ATTRIBUTE) != null 
1:         && this.attributes.get(Constants.VERSION_ATTRIBUTE).length() > 0) {
1:       vi = ManifestHeaderProcessor.parseVersionRange(this.attributes.get(Constants.VERSION_ATTRIBUTE));
1:       // what if version is not specified?  let's interpret it as 0.0.0 
1:       vi = ManifestHeaderProcessor.parseVersionRange("0.0.0");
/////////////////////////////////////////////////////////////////////////
0:     return this.contentName + ";" + this.nameValueMap.toString();
/////////////////////////////////////////////////////////////////////////
1:    * set up directives and attributes
1:   protected void setup() {
1:     this.attributes = new HashMap<String, String>();
1:     this.directives = new HashMap<String, String>();
1:     
1:     for (String key : this.nameValueMap.keySet()) {
1:       if (key.endsWith(":")) {
1:         this.directives.put(key.substring(0, key.length() - 1), this.nameValueMap.get(key));
1:       } else {
1:         this.attributes.put(key, this.nameValueMap.get(key));
author:Lin Sun
-------------------------------------------------------------------------------
commit:48d72a7
/////////////////////////////////////////////////////////////////////////
1:  * Implementation of Content
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.impl;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.Content;
0: import org.apache.aries.application.VersionRange;
0: import org.apache.aries.application.utils.internal.MessageUtil;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.Version;
1: 
1: 
1: /**
0:  * Implementation of Content 
1:  *
1:  */
0: public final class ContentImpl implements Content
1: {
1:   private String contentName;
1:   protected Map<String, String> attributes;
1:   private Map<String, String> directives;
0:   private NameValueMap<String, String> nameValueMap;
1:   
1:   /**
1:    * 
1:    * @param content  Application-Content, Import-Package content
1:    */
1:   public ContentImpl(String content) {
0:     Map<String, NameValueMap<String, String>> appContentsMap = ManifestHeaderProcessor.parseImportString(content);
0:     if (appContentsMap.size() != 1) {
0:       throw new IllegalArgumentException(MessageUtil.getMessage("APPUTILS0004E",content));
1:     }
0:     for (Map.Entry<String, NameValueMap<String, String>> entry : appContentsMap.entrySet()) {
0:       this.contentName = entry.getKey();
0:       this.nameValueMap= entry.getValue();
0:       setup();
0:       break;
1:     }
1:   }
1:   
0:   public ContentImpl (String bundleSymbolicName, Version version) { 
0:     this.contentName = bundleSymbolicName;
0:     this.nameValueMap = new NameValueMap<String, String>();
0:     nameValueMap.put("version", version.toString());
0:     setup();
1:   }
1:   
1:   /**
1:    * 
0:    * @param contentName  
0:    * @param nameValueMap
1:    */
0:   public ContentImpl(String contentName, NameValueMap<String, String> nameValueMap) {
0:     this.contentName = contentName;
0:     this.nameValueMap= nameValueMap;
0:     setup();
1:   }
1:   
1:   public String getContentName() {
1:     return this.contentName;
1:   }
1:   
1:   public Map<String, String> getAttributes() {
1:     return Collections.unmodifiableMap(this.attributes);
1:   }
1:   
1:   public Map<String, String> getDirectives() {
1:     return Collections.unmodifiableMap(this.directives);
1:   }
1:   
1:   public String getAttribute(String key) {
1:     String toReturn = this.attributes.get(key);
1:     return toReturn;
1:   }
1:   
1:   /**
1:    * add key value to the attributes map
1:    * @param key
1:    * @param value
1:    */
1:   public void addAttribute(String key, String value) {
1:     this.attributes.put(key, value);
1:   }
1:   
1:   public String getDirective(String key) {
1:     String toReturn = this.directives.get(key);
1:     return toReturn;
1:   }
1:   
0:   public NameValueMap<String, String> getNameValueMap() {
0:     NameValueMap<String, String> nvm = new NameValueMap<String, String>();
0:     for (String key : this.nameValueMap.keySet()) {
0:       nvm.addToCollection(key, this.nameValueMap.get(key));
1:     }
0:     return nvm;
1:   }
1:   
1:   /**
1:    * add key value to the directives map
1:    * @param key
1:    * @param value
1:    */
1:   public void addDirective(String key, String value) {
1:     this.directives.put(key, value);
1:   }
1:   
1:   public VersionRange getVersion() {
1:     VersionRange vi = null;
0:     if (this.attributes.get(Constants.VERSION_ATTRIBUTE) != null 
0:         && this.attributes.get(Constants.VERSION_ATTRIBUTE).length() > 0) {
0:       vi = ManifestHeaderProcessor.parseVersionRange(this.attributes.get(Constants.VERSION_ATTRIBUTE));
0:     } else {
0:       // what if version is not specified?  let's interpret it as 0.0.0 
0:       vi = ManifestHeaderProcessor.parseVersionRange("0.0.0");
1:     }
1:     return vi;
1:   }
1:   
0:   @Override
0:   public String toString()
1:   {
0:     return this.contentName + ";" + this.nameValueMap.toString();
1:   }
1:   
0:   @Override
0:   public boolean equals(Object other)
1:   {
0:     if (other == this) return true;
0:     if (other == null) return false;
1:     
0:     if (other instanceof ContentImpl) {
0:       ContentImpl otherContent = (ContentImpl)other;
1:       
0:       Map<String,String> attributesWithoutVersion = attributes;
1:       
0:       if (attributes.containsKey("version")) {
0:         attributesWithoutVersion = new HashMap<String, String>(attributes);
0:         attributesWithoutVersion.remove("version");
1:       }
1:       
0:       Map<String, String> otherAttributesWithoutVersion = otherContent.attributes;
1:       
0:       if (otherContent.attributes.containsKey("version")) {
0:         otherAttributesWithoutVersion = new HashMap<String, String>(otherContent.attributes);
0:         otherAttributesWithoutVersion.remove("version");
1:       }
1:       
0:       return contentName.equals(otherContent.contentName) && 
0:              attributesWithoutVersion.equals(otherAttributesWithoutVersion) &&
0:              directives.equals(otherContent.directives) &&
0:              getVersion().equals(otherContent.getVersion());
1:     }
1:     
0:     return false;
1:   }
1:   
0:   @Override
0:   public int hashCode()
1:   {
0:     return contentName.hashCode();
1:   }
1:   
1:   /**
0:    * set up directives and attributes
1:    */
0:   protected void setup() {
0:     this.attributes = new HashMap<String, String>();
0:     this.directives = new HashMap<String, String>();
1:     
0:     for (String key : this.nameValueMap.keySet()) {
0:       if (key.endsWith(":")) {
0:         this.directives.put(key.substring(0, key.length() - 1), this.nameValueMap.get(key));
0:       } else {
0:         this.attributes.put(key, this.nameValueMap.get(key));
1:       }
1:     }
1:   }
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:025f7a2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Graham Charters
-------------------------------------------------------------------------------
commit:d77c519
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.impl;
0: 
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Map;
0: 
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.VersionRange;
0: 
0: 
0: /**
0:  * Implementation of Content 
0:  *
0:  */
0: public class ContentImpl implements Content
0: {
0:   private String content;
0:   private String contentName;
0:   protected Map<String, String> attributes;
0:   private Map<String, String> directives;
0:   
0:   /**
0:    * 
0:    * @param content  Application-Content, Import-Package content
0:    */
0:   public ContentImpl(String content) {
0:     this.content = content;
0:     this.attributes = new HashMap<String, String>();
0:     this.directives = new HashMap<String, String>();
0:     setup(content, this.attributes, this.directives);
0:   }
0:   
0:   @Override
0:   public String getContent() {
0:     return this.content;
0:   }
0:   
0:   @Override
0:   public String getContentName() {
0:     return this.contentName;
0:   }
0:   
0:   @Override
0:   public Map<String, String> getAttributes() {
0:     return Collections.unmodifiableMap(this.attributes);
0:   }
0:   
0:   @Override
0:   public Map<String, String> getDirectives() {
0:     return Collections.unmodifiableMap(this.directives);
0:   }
0:   
0:   @Override
0:   public String getAttribute(String key) {
0:     String toReturn = this.attributes.get(key);
0:     return toReturn;
0:   }
0:   
0:   /**
0:    * add key value to the attributes map
0:    * @param key
0:    * @param value
0:    */
0:   public void addAttribute(String key, String value) {
0:     this.attributes.put(key, value);
0:   }
0:   
0:   @Override
0:   public String getDirective(String key) {
0:     String toReturn = this.directives.get(key);
0:     return toReturn;
0:   }
0:   
0:   /**
0:    * add key value to the directives map
0:    * @param key
0:    * @param value
0:    */
0:   public void addDirective(String key, String value) {
0:     this.directives.put(key, value);
0:   }
0:   
0:   @Override
0:   public VersionRange getVersion() {
0:     VersionRange vi = null;
0:     if (this.attributes.get("version") != null && this.attributes.get("version").length() > 0) {
0:       vi = new VersionRangeImpl(this.attributes.get("version"));
0:     }
0:     return vi;
0:   }
0:   
0:   /**
0:    * setup attributes and directives from the Application-Content or Import-Package
0:    * @param content
0:    * @param attributes
0:    * @param directives
0:    */
0:   protected void setup(String content, Map<String, String> attributes, Map<String, String> directives)
0:   {
0:     String[] tokens = content.split(";");
0:     if (tokens.length < 1) {
0:       throw new IllegalArgumentException("Invalid header split: " + content);
0:     }
0:     this.contentName = tokens[0].trim();
0:     for (int i = 1; i < tokens.length; i++) {
0:       int pos = tokens[i].indexOf('=');
0:       if (pos != -1) {
0:         if (pos > 0 && tokens[i].charAt(pos - 1) == ':') {
0:           String name = tokens[i].substring(0, pos - 1).trim();
0:           String value = tokens[i].substring(pos + 1).trim();
0:           directives.put(name, trimDoubleQuotes(value));
0:         } else {
0:           String name = tokens[i].substring(0, pos).trim();
0:           String value = tokens[i].substring(pos + 1).trim();
0:           attributes.put(name, trimDoubleQuotes(value));
0:         }
0:       }
0:     }
0:   }
0:   
0:   /**
0:    * this method trims the double quotes at the beginning and end, for example version="1.0.0"
0:    * @param value
0:    * @return
0:    */
0:   private String trimDoubleQuotes(String value) {
0:     if (value.startsWith("\"") && value.endsWith("\"")) {
0:       value = value.substring(1, value.length() -1);
0:     }   
0:     return value;
0:   }
0: }
============================================================================