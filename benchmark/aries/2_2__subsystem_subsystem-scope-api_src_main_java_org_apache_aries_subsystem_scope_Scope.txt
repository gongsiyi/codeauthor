1:643420c: /*
1:643420c:  * Licensed to the Apache Software Foundation (ASF) under one
1:643420c:  * or more contributor license agreements.  See the NOTICE file
1:643420c:  * distributed with this work for additional information
1:643420c:  * regarding copyright ownership.  The ASF licenses this file
1:643420c:  * to you under the Apache License, Version 2.0 (the
1:643420c:  * "License"); you may not use this file except in compliance
1:643420c:  * with the License.  You may obtain a copy of the License at
1:643420c:  *
1:643420c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:643420c:  *
1:643420c:  * Unless required by applicable law or agreed to in writing,
1:643420c:  * software distributed under the License is distributed on an
1:643420c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:643420c:  * KIND, either express or implied.  See the License for the
1:643420c:  * specific language governing permissions and limitations
1:643420c:  * under the License.
2:643420c:  */
1:643420c: package org.apache.aries.subsystem.scope;
2:643420c: 
1:643420c: import java.util.Collection;
1:643420c: import java.util.List;
1:643420c: import java.util.Map;
1:643420c: 
1:643420c: import org.osgi.framework.Bundle;
1:643420c: 
2:643420c: /**
1:643420c:  * A scope is used to issolate a collection of bundles
1:643420c:  * with a sharing policy.  Scopes can be nested as
1:643420c:  * children scopes.
1:643420c:  *
1:643420c:  */
1:643420c: public interface Scope {
1:643420c: 	/**
1:643420c: 	 * The name of this scope.  A name has no meaning
1:643420c: 	 * at runtime and is only for informational purposes.
1:643420c: 	 * @return the name of this scope.
1:643420c: 	 */
1:643420c: 	String getName();
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * The collection of bundles contained in this scope.
1:643420c: 	 * @return an unmodifiable collection of bundles
1:643420c: 	 * contained in this scope.
1:643420c: 	 */
1:643420c: 	Collection<Bundle> getBundles();
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns a map containing the sharing policies for this scope.
1:643420c: 	 * The key is the name space of the policy and the value is the
1:643420c: 	 * list of policies with the same name space. 
1:643420c: 	 * @param type the type of policy to return.  Must be
1:643420c: 	 *        of type {@link SharePolicy#TYPE_EXPORT EXPORT} or
1:643420c: 	 *        {@link SharePolicy#TYPE_IMPORT IMPORT}.  Any other type
1:643420c: 	 *        results in an exception.
1:643420c: 	 * @return an unmodifiable map containing the sharing policies of this scope.
1:643420c: 	 *         each list value in the map is also unmodifiable.
1:643420c: 	 * @throws IllegalArgumentException if the type is not
1:643420c: 	 *         {@link SharePolicy#TYPE_EXPORT EXPORT} or
1:643420c: 	 *         {@link SharePolicy#TYPE_IMPORT IMPORT}.
1:643420c: 	 */
1:643420c: 	Map<String, List<SharePolicy>> getSharePolicies(String type);
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns the collection of children scopes for this scope.
1:643420c: 	 * @return an unmodifiable collection of children scopes.
1:643420c: 	 */
1:643420c: 	Collection<Scope> getChildren();
1:643420c: 	
1:643420c: 	/**
1:643420c: 	 * Returns the id for the scope
1:643420c: 	 * @return   id for the scope
1:643420c: 	 */
1:643420c: 	long getId();
1:643420c: 	
1:643420c: 	/**
1:643420c: 	 * Returns the install location String of the scope
1:643420c: 	 * @return   the install location String of the scope
1:643420c: 	 */
1:643420c: 	String getLocation();
1:e9f9bca: 	
1:e9f9bca: 	Scope getParent();
1:e9f9bca: 	
1:e9f9bca: 	ScopeUpdate newScopeUpdate();
1:643420c: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	Scope getParent();
1: 	
1: 	ScopeUpdate newScopeUpdate();
author:Lin Sun
-------------------------------------------------------------------------------
commit:643420c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.scope;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.osgi.framework.Bundle;
1: 
1: /**
1:  * A scope is used to issolate a collection of bundles
1:  * with a sharing policy.  Scopes can be nested as
1:  * children scopes.
1:  *
1:  */
1: public interface Scope {
1: 	/**
1: 	 * The name of this scope.  A name has no meaning
1: 	 * at runtime and is only for informational purposes.
1: 	 * @return the name of this scope.
1: 	 */
1: 	String getName();
1: 
1: 	/**
1: 	 * The collection of bundles contained in this scope.
1: 	 * @return an unmodifiable collection of bundles
1: 	 * contained in this scope.
1: 	 */
1: 	Collection<Bundle> getBundles();
1: 
1: 	/**
1: 	 * Returns a map containing the sharing policies for this scope.
1: 	 * The key is the name space of the policy and the value is the
1: 	 * list of policies with the same name space. 
1: 	 * @param type the type of policy to return.  Must be
1: 	 *        of type {@link SharePolicy#TYPE_EXPORT EXPORT} or
1: 	 *        {@link SharePolicy#TYPE_IMPORT IMPORT}.  Any other type
1: 	 *        results in an exception.
1: 	 * @return an unmodifiable map containing the sharing policies of this scope.
1: 	 *         each list value in the map is also unmodifiable.
1: 	 * @throws IllegalArgumentException if the type is not
1: 	 *         {@link SharePolicy#TYPE_EXPORT EXPORT} or
1: 	 *         {@link SharePolicy#TYPE_IMPORT IMPORT}.
1: 	 */
1: 	Map<String, List<SharePolicy>> getSharePolicies(String type);
1: 
1: 	/**
1: 	 * Returns the collection of children scopes for this scope.
1: 	 * @return an unmodifiable collection of children scopes.
1: 	 */
1: 	Collection<Scope> getChildren();
1: 	
1: 	/**
1: 	 * Returns the id for the scope
1: 	 * @return   id for the scope
1: 	 */
1: 	long getId();
1: 	
1: 	/**
0: 	 * destoy the scope
1: 	 */
0: 	void destroy();
1: 	
1: 	/**
1: 	 * Returns the install location String of the scope
1: 	 * @return   the install location String of the scope
1: 	 */
1: 	String getLocation();
1: }
============================================================================