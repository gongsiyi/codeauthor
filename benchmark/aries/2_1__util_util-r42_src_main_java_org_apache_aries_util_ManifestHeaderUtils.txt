1:8d4d949: /*
1:8d4d949:  * Licensed to the Apache Software Foundation (ASF) under one
1:8d4d949:  * or more contributor license agreements.  See the NOTICE file
1:8d4d949:  * distributed with this work for additional information
1:8d4d949:  * regarding copyright ownership.  The ASF licenses this file
1:8d4d949:  * to you under the Apache License, Version 2.0 (the
1:8d4d949:  * "License"); you may not use this file except in compliance
1:8d4d949:  * with the License.  You may obtain a copy of the License at
1:8d4d949:  *
1:8d4d949:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8d4d949:  *
1:8d4d949:  * Unless required by applicable law or agreed to in writing,
1:8d4d949:  * software distributed under the License is distributed on an
1:8d4d949:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8d4d949:  * KIND, either express or implied.  See the License for the
1:8d4d949:  * specific language governing permissions and limitations
1:8d4d949:  * under the License.
1:8d4d949:  */
1:8d4d949: package org.apache.aries.util;
1:8d4d949: 
1:8d4d949: import java.util.ArrayList;
1:8d4d949: import java.util.List;
1:8d4d949: 
1:8d4d949: import org.apache.aries.util.internal.MessageUtil;
1:8d4d949: 
1:8d4d949: 
1:8d4d949: 
1:8d4d949: public class ManifestHeaderUtils {
1:8d4d949: 
1:8d4d949:      /**
1:8d4d949:      * 
1:8d4d949:      * Splits a delimiter separated string, tolerating presence of non separator commas
1:8d4d949:      * within double quoted segments.
1:8d4d949:      * 
1:8d4d949:      * Eg.
1:8d4d949:      * com.ibm.ws.eba.helloWorldService;version="[1.0.0, 1.0.0]" &
1:8d4d949:      * com.ibm.ws.eba.helloWorldService;version="1.0.0"
1:8d4d949:      * com.ibm.ws.eba.helloWorld;version="2";bundle-version="[2,30)"
1:8d4d949:      * com.acme.foo;weirdAttr="one;two;three";weirdDir:="1;2;3"
1:8d4d949:      *  @param value          the value to be split
1:8d4d949:      *  @param delimiter      the delimiter string such as ',' etc.
1:8d4d949:      *  @return List<String>  the components of the split String in a list
1:8d4d949:      */
1:8d4d949:     public static List<String> split(String value, String delimiter)
1:8d4d949:     {
1:8d4d949:       List<String> result = new ArrayList<String>();
1:8d4d949:       if (value != null) {
1:8d4d949:         String[] packages = value.split(delimiter);
1:8d4d949:         
1:8d4d949:         for (int i = 0; i < packages.length; ) {
1:8d4d949:           String tmp = packages[i++].trim();
1:8d4d949:           // if there is a odd number of " in a string, we need to append
1:8d4d949:           while (count(tmp, "\"") % 2 != 0) {
1:8d4d949:             // check to see if we need to append the next package[i++]          
1:8d4d949:               if (i<packages.length)
1:8d4d949:                 tmp = tmp + delimiter + packages[i++].trim();
1:8d4d949:               else 
1:8d4d949:                 // oops. The double quotes are not paired up. We have reached to the end of the string.
1:8d4d949:                 throw new IllegalArgumentException(MessageUtil.getMessage("UTIL0008E",tmp));        
1:8d4d949:           }
1:8d4d949:           
1:8d4d949:           result.add(tmp);
1:8d4d949:           
1:8d4d949:         }
1:8d4d949:       }
1:8d4d949:       return result;
1:8d4d949:     }  
1:8d4d949:    
1:8d4d949:     /**
1:8d4d949:      * count the number of characters in a string
1:8d4d949:      * @param parent The string to be searched
1:8d4d949:      * @param subString The substring to be found
1:8d4d949:      * @return the number of occurrence of the subString
1:8d4d949:      */
1:8d4d949:      private static int count(String parent, String subString) {
1:8d4d949:        
1:8d4d949:        int count = 0 ;
1:8d4d949:        int i = parent.indexOf(subString);
1:8d4d949:        while (i > -1) {
1:8d4d949:          if (parent.length() >= i+1)
1:8d4d949:            parent = parent.substring(i+1);
1:8d4d949:          count ++;
1:8d4d949:          i = parent.indexOf(subString);
1:8d4d949:        }
1:8d4d949:        return count;
1:8d4d949:      }
1:8d4d949: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:8d4d949
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.aries.util.internal.MessageUtil;
1: 
1: 
1: 
1: public class ManifestHeaderUtils {
1: 
1:      /**
1:      * 
1:      * Splits a delimiter separated string, tolerating presence of non separator commas
1:      * within double quoted segments.
1:      * 
1:      * Eg.
1:      * com.ibm.ws.eba.helloWorldService;version="[1.0.0, 1.0.0]" &
1:      * com.ibm.ws.eba.helloWorldService;version="1.0.0"
1:      * com.ibm.ws.eba.helloWorld;version="2";bundle-version="[2,30)"
1:      * com.acme.foo;weirdAttr="one;two;three";weirdDir:="1;2;3"
1:      *  @param value          the value to be split
1:      *  @param delimiter      the delimiter string such as ',' etc.
1:      *  @return List<String>  the components of the split String in a list
1:      */
1:     public static List<String> split(String value, String delimiter)
1:     {
1:       List<String> result = new ArrayList<String>();
1:       if (value != null) {
1:         String[] packages = value.split(delimiter);
1:         
1:         for (int i = 0; i < packages.length; ) {
1:           String tmp = packages[i++].trim();
1:           // if there is a odd number of " in a string, we need to append
1:           while (count(tmp, "\"") % 2 != 0) {
1:             // check to see if we need to append the next package[i++]          
1:               if (i<packages.length)
1:                 tmp = tmp + delimiter + packages[i++].trim();
1:               else 
1:                 // oops. The double quotes are not paired up. We have reached to the end of the string.
1:                 throw new IllegalArgumentException(MessageUtil.getMessage("UTIL0008E",tmp));        
1:           }
1:           
1:           result.add(tmp);
1:           
1:         }
1:       }
1:       return result;
1:     }  
1:    
1:     /**
1:      * count the number of characters in a string
1:      * @param parent The string to be searched
1:      * @param subString The substring to be found
1:      * @return the number of occurrence of the subString
1:      */
1:      private static int count(String parent, String subString) {
1:        
1:        int count = 0 ;
1:        int i = parent.indexOf(subString);
1:        while (i > -1) {
1:          if (parent.length() >= i+1)
1:            parent = parent.substring(i+1);
1:          count ++;
1:          i = parent.indexOf(subString);
1:        }
1:        return count;
1:      }
1: }
============================================================================