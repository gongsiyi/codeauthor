1:2ffcfb9: /*
1:2ffcfb9:  * Licensed under the Apache License, Version 2.0 (the "License");
1:2ffcfb9:  * you may not use this file except in compliance with the License.
1:2ffcfb9:  * You may obtain a copy of the License at
1:2ffcfb9:  *
1:2ffcfb9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ffcfb9:  *
1:2ffcfb9:  * Unless required by applicable law or agreed to in writing, software
1:2ffcfb9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ffcfb9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ffcfb9:  * See the License for the specific language governing permissions and
1:2ffcfb9:  * limitations under the License.
1:2ffcfb9:  */
1:2ffcfb9: package org.apache.aries.subsystem.core.archive;
1:2ffcfb9: 
1:2ffcfb9: import java.util.Collection;
1:2ffcfb9: import java.util.Collections;
1:2ffcfb9: import java.util.HashSet;
1:c5864b3: import java.util.List;
1:2ffcfb9: import java.util.Set;
1:2ffcfb9: 
1:c5864b3: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1:c5864b3: import org.osgi.framework.VersionRange;
1:c5864b3: 
1:2ffcfb9: public abstract class AbstractClauseBasedHeader<C extends Clause> implements Header<C> {
1:c5864b3: 	protected static VersionRange parseVersionRange(List<SimpleFilter> filters) {
1:c5864b3: 		SimpleFilter floor = null;
1:c5864b3: 		SimpleFilter ceiling = null;
1:c5864b3: 		for (SimpleFilter filter : filters) {
1:c5864b3: 			switch (filter.getOperation()) {
1:c5864b3: 				case SimpleFilter.EQ:
1:c5864b3: 				case SimpleFilter.GTE:
1:c5864b3: 					floor = filter;
1:c5864b3: 					break;
1:c5864b3: 				case SimpleFilter.LTE:
1:c5864b3: 					ceiling = filter;
1:c5864b3: 					break;
1:c5864b3: 				case SimpleFilter.NOT:
1:c5864b3: 					SimpleFilter negated = ((List<SimpleFilter>)filter.getValue()).get(0);
1:c5864b3: 					switch (negated.getOperation()) {
1:c5864b3: 						case SimpleFilter.EQ:
1:c5864b3: 						case SimpleFilter.GTE:
1:c5864b3: 							ceiling = filter;
1:c5864b3: 							break;
1:c5864b3: 						case SimpleFilter.LTE:
1:c5864b3: 							floor = filter;
1:c5864b3: 							break;
1:c5864b3: 						default:
1:c5864b3: 							throw new IllegalArgumentException("Invalid filter: " + filter);
1:c5864b3: 					}
1:c5864b3: 					break;
1:b70cf95: 				case SimpleFilter.PRESENT:
1:b70cf95: 					/* This can happen with version ranges of the form 
1:b70cf95: 					 * (1.5.0,2.0.0). The filter form will be
1:b70cf95: 					 * (&(version=*)(!(version<=1.5.0))(!(version>=2.0.0)). The
1:b70cf95: 					 * presence operator is required because an absent version
1:b70cf95: 					 * attribute would otherwise match. These should simply be
1:b70cf95: 					 * ignored for the purposes of converting back into a
1:b70cf95: 					 * version range.
1:b70cf95: 					 */
1:b70cf95: 					break;
1:c5864b3: 				default:
1:c5864b3: 					throw new IllegalArgumentException("Invalid filter: " + filter);
1:c5864b3: 			}
1:c5864b3: 		}
1:c5864b3: 		if (ceiling == null) {
1:c5864b3: 			return new VersionRange(String.valueOf(floor.getValue()));
1:c5864b3: 		}
1:c5864b3: 		String range = new StringBuilder()
1:c5864b3: 			.append(floor.getOperation() == SimpleFilter.NOT ? '(' : '[')
1:c5864b3: 			.append(floor.getOperation() == SimpleFilter.NOT ? 
1:c5864b3: 					((List<SimpleFilter>)floor.getValue()).get(0).getValue() : floor.getValue())
1:c5864b3: 			.append(',')
1:c5864b3: 			.append(ceiling.getOperation() == SimpleFilter.NOT ? 
1:c5864b3: 					((List<SimpleFilter>)ceiling.getValue()).get(0).getValue() : ceiling.getValue())
1:c5864b3: 			.append(ceiling.getOperation() == SimpleFilter.NOT ? ')' : ']')
1:c5864b3: 			.toString();
1:c5864b3: 		return new VersionRange(range);
1:c5864b3: 	}
1:c5864b3: 	
1:69fd7d4: 	private static <C> Collection<C> computeClauses(String header, ClauseFactory<C> factory) {
1:69fd7d4: 		Collection<String> clauseStrs = new ClauseTokenizer(header).getClauses();
1:69fd7d4: 		Set<C> clauses = new HashSet<C>(clauseStrs.size());
1:69fd7d4: 		for (String clause : clauseStrs) {
1:69fd7d4: 			clauses.add(factory.newInstance(clause));
1:69fd7d4: 		}
1:69fd7d4: 		return clauses;
1:69fd7d4: 	}
1:69fd7d4: 	
1:2ffcfb9: 	public interface ClauseFactory<C> {
1:2ffcfb9: 		public C newInstance(String clause);
2:2ffcfb9: 	}
1:2ffcfb9: 	
1:2ffcfb9:     protected final Set<C> clauses;
1:2ffcfb9:     
1:2ffcfb9:     public AbstractClauseBasedHeader(Collection<C> clauses) {
1:2ffcfb9:         if (clauses.isEmpty()) {
1:69fd7d4:             throw new IllegalArgumentException("No clauses");
1:2ffcfb9:         }
1:2ffcfb9:         this.clauses = Collections.synchronizedSet(new HashSet<C>(clauses));
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     public AbstractClauseBasedHeader(String header, ClauseFactory<C> factory) {
1:69fd7d4:     	this(computeClauses(header, factory));
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public final Collection<C> getClauses() {
1:2ffcfb9:         return Collections.unmodifiableCollection(clauses);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public int hashCode() {
1:2ffcfb9:         int result = 17;
1:2ffcfb9:         result = 31 * result + getName().hashCode();
1:2ffcfb9:         result = 31 * result + clauses.hashCode();
1:2ffcfb9:         return result;
1:2ffcfb9:     }
1:2ffcfb9:     
1:2ffcfb9:     @Override
1:2ffcfb9:     public boolean equals(Object o) {
1:2ffcfb9:     	if (o == this) {
1:2ffcfb9:     		return true;
1:2ffcfb9:     	}
1:2ffcfb9:     	if (!(o instanceof AbstractClauseBasedHeader)) {
1:2ffcfb9:     		return false;
1:2ffcfb9:     	}
1:2ffcfb9:     	AbstractClauseBasedHeader<?> that = (AbstractClauseBasedHeader<?>)o;
1:2ffcfb9:     	return that.getName().equals(this.getName())
1:2ffcfb9:     			&& that.clauses.equals(this.clauses);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public String toString() {
1:2ffcfb9:         StringBuilder builder = new StringBuilder();
1:2ffcfb9:         for (C clause : getClauses()) {
1:2ffcfb9:             builder.append(clause).append(',');
1:2ffcfb9:         }
1:2ffcfb9:         // Remove the trailing comma. Note at least one clause is guaranteed to
1:2ffcfb9:         // exist.
1:2ffcfb9:         builder.deleteCharAt(builder.length() - 1);
1:2ffcfb9:         return builder.toString();
1:2ffcfb9:     }
1:2ffcfb9: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:b70cf95
/////////////////////////////////////////////////////////////////////////
1: 				case SimpleFilter.PRESENT:
1: 					/* This can happen with version ranges of the form 
1: 					 * (1.5.0,2.0.0). The filter form will be
1: 					 * (&(version=*)(!(version<=1.5.0))(!(version>=2.0.0)). The
1: 					 * presence operator is required because an absent version
1: 					 * attribute would otherwise match. These should simply be
1: 					 * ignored for the purposes of converting back into a
1: 					 * version range.
1: 					 */
1: 					break;
commit:c5864b3
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1: import org.osgi.framework.VersionRange;
1: 
1: 	protected static VersionRange parseVersionRange(List<SimpleFilter> filters) {
1: 		SimpleFilter floor = null;
1: 		SimpleFilter ceiling = null;
1: 		for (SimpleFilter filter : filters) {
1: 			switch (filter.getOperation()) {
1: 				case SimpleFilter.EQ:
1: 				case SimpleFilter.GTE:
1: 					floor = filter;
1: 					break;
1: 				case SimpleFilter.LTE:
1: 					ceiling = filter;
1: 					break;
1: 				case SimpleFilter.NOT:
1: 					SimpleFilter negated = ((List<SimpleFilter>)filter.getValue()).get(0);
1: 					switch (negated.getOperation()) {
1: 						case SimpleFilter.EQ:
1: 						case SimpleFilter.GTE:
1: 							ceiling = filter;
1: 							break;
1: 						case SimpleFilter.LTE:
1: 							floor = filter;
1: 							break;
1: 						default:
1: 							throw new IllegalArgumentException("Invalid filter: " + filter);
1: 					}
1: 					break;
1: 				default:
1: 					throw new IllegalArgumentException("Invalid filter: " + filter);
1: 			}
1: 		}
1: 		if (ceiling == null) {
1: 			return new VersionRange(String.valueOf(floor.getValue()));
1: 		}
1: 		String range = new StringBuilder()
1: 			.append(floor.getOperation() == SimpleFilter.NOT ? '(' : '[')
1: 			.append(floor.getOperation() == SimpleFilter.NOT ? 
1: 					((List<SimpleFilter>)floor.getValue()).get(0).getValue() : floor.getValue())
1: 			.append(',')
1: 			.append(ceiling.getOperation() == SimpleFilter.NOT ? 
1: 					((List<SimpleFilter>)ceiling.getValue()).get(0).getValue() : ceiling.getValue())
1: 			.append(ceiling.getOperation() == SimpleFilter.NOT ? ')' : ']')
1: 			.toString();
1: 		return new VersionRange(range);
1: 	}
1: 	
commit:69fd7d4
/////////////////////////////////////////////////////////////////////////
1: 	private static <C> Collection<C> computeClauses(String header, ClauseFactory<C> factory) {
1: 		Collection<String> clauseStrs = new ClauseTokenizer(header).getClauses();
1: 		Set<C> clauses = new HashSet<C>(clauseStrs.size());
1: 		for (String clause : clauseStrs) {
1: 			clauses.add(factory.newInstance(clause));
1: 		}
1: 		return clauses;
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalArgumentException("No clauses");
1:     	this(computeClauses(header, factory));
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: public abstract class AbstractClauseBasedHeader<C extends Clause> implements Header<C> {
1: 	public interface ClauseFactory<C> {
1: 		public C newInstance(String clause);
1: 	}
1: 	
1:     protected final Set<C> clauses;
1:     
1:     public AbstractClauseBasedHeader(Collection<C> clauses) {
1:         if (clauses.isEmpty()) {
0:             throw new IllegalArgumentException(String.format(
0:                     "The header %s must have at least one clause.", getName()));
1:         }
1:         this.clauses = Collections.synchronizedSet(new HashSet<C>(clauses));
1:     }
1: 
1:     public AbstractClauseBasedHeader(String header, ClauseFactory<C> factory) {
0:     	Collection<String> clauseStrs = new ClauseTokenizer(header).getClauses();
0: 		Set<C> clauses = new HashSet<C>(clauseStrs.size());
0: 		for (String clause : new ClauseTokenizer(header).getClauses()) {
0: 			clauses.add(factory.newInstance(clause));
1: 		}
0: 		this.clauses = Collections.synchronizedSet(clauses);
1:     }
1: 
1:     @Override
1:     public final Collection<C> getClauses() {
1:         return Collections.unmodifiableCollection(clauses);
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         int result = 17;
1:         result = 31 * result + getName().hashCode();
1:         result = 31 * result + clauses.hashCode();
1:         return result;
1:     }
1:     
1:     @Override
1:     public boolean equals(Object o) {
1:     	if (o == this) {
1:     		return true;
1:     	}
1:     	if (!(o instanceof AbstractClauseBasedHeader)) {
1:     		return false;
1:     	}
1:     	AbstractClauseBasedHeader<?> that = (AbstractClauseBasedHeader<?>)o;
1:     	return that.getName().equals(this.getName())
1:     			&& that.clauses.equals(this.clauses);
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         StringBuilder builder = new StringBuilder();
1:         for (C clause : getClauses()) {
1:             builder.append(clause).append(',');
1:         }
1:         // Remove the trailing comma. Note at least one clause is guaranteed to
1:         // exist.
1:         builder.deleteCharAt(builder.length() - 1);
1:         return builder.toString();
1:     }
1: }
============================================================================