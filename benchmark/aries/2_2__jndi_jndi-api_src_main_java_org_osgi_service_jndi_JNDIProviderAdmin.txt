1:696374b: /*
1:696374b:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:696374b:  * 
1:696374b:  * Licensed under the Apache License, Version 2.0 (the "License");
1:696374b:  * you may not use this file except in compliance with the License.
1:696374b:  * You may obtain a copy of the License at
1:696374b:  *
1:696374b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:696374b:  *
1:696374b:  * Unless required by applicable law or agreed to in writing, software
1:696374b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:696374b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:696374b:  * See the License for the specific language governing permissions and
1:696374b:  * limitations under the License.
1:696374b:  */
1:696374b: 
1:696374b: package org.osgi.service.jndi;
1:696374b: 
1:696374b: import java.util.Map;
1:696374b: 
1:696374b: import javax.naming.Context;
1:696374b: import javax.naming.Name;
1:696374b: import javax.naming.directory.Attributes;
1:696374b: 
1:696374b: /**
1:696374b:  * This interface defines the OSGi service interface for the JNDIProviderAdmin
1:696374b:  * service.
1:696374b:  * 
1:696374b:  * This service provides the ability to resolve JNDI References in a dynamic
1:696374b:  * fashion that does not require calls to
1:696374b:  * <code>NamingManager.getObjectInstance()</code>. The methods of this service
1:696374b:  * provide similar reference resolution, but rely on the OSGi Service Registry
1:696374b:  * in order to find <code>ObjectFactory</code> instances that can convert a
1:696374b:  * Reference to an Object.
1:696374b:  * 
1:696374b:  * This service will typically be used by OSGi-aware JNDI Service Providers.
1:696374b:  * 
1:696374b:  * @version $Revision$
1:696374b:  * @ThreadSafe
1:696374b:  */
1:696374b: public interface JNDIProviderAdmin {
1:696374b: 
1:696374b: 	/**
1:696374b: 	 * Resolve the object from the given reference.
1:696374b: 	 * 
1:696374b: 	 * @param refInfo Reference info
1:696374b: 	 * @param name the JNDI name associated with this reference
1:696374b: 	 * @param context the JNDI context associated with this reference
1:696374b: 	 * @param environment the JNDI environment associated with this JNDI context
1:696374b: 	 * @return an Object based on the reference passed in, or the original
1:696374b: 	 *         reference object if the reference could not be resolved.
1:696374b: 	 * @throws Exception in the event that an error occurs while attempting to
1:696374b: 	 *         resolve the JNDI reference.
1:696374b: 	 */
1:696374b: 	public Object getObjectInstance(Object refInfo, Name name, Context context,
1:4bb7230: 			Map<?,?> environment) throws Exception;
1:696374b: 
1:696374b: 	/**
1:696374b: 	 * Resolve the object from the given reference.
1:696374b: 	 * 
1:696374b: 	 * @param refInfo Reference info
1:696374b: 	 * @param name the JNDI name associated with this reference
1:696374b: 	 * @param context the JNDI context associated with this reference
1:696374b: 	 * @param environment the JNDI environment associated with this JNDI context
1:696374b: 	 * @param attributes the naming attributes to use when resolving this object
1:696374b: 	 * @return an Object based on the reference passed in, or the original
1:696374b: 	 *         reference object if the reference could not be resolved.
1:696374b: 	 * @throws Exception in the event that an error occurs while attempting to
1:696374b: 	 *         resolve the JNDI reference.
1:696374b: 	 */
1:696374b: 	public Object getObjectInstance(Object refInfo, Name name, Context context,
1:4bb7230: 			Map<?,?> environment, Attributes attributes) throws Exception;
1:696374b: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:4bb7230
/////////////////////////////////////////////////////////////////////////
1: 			Map<?,?> environment) throws Exception;
/////////////////////////////////////////////////////////////////////////
1: 			Map<?,?> environment, Attributes attributes) throws Exception;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:696374b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.service.jndi;
1: 
1: import java.util.Map;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.directory.Attributes;
1: 
1: /**
1:  * This interface defines the OSGi service interface for the JNDIProviderAdmin
1:  * service.
1:  * 
1:  * This service provides the ability to resolve JNDI References in a dynamic
1:  * fashion that does not require calls to
1:  * <code>NamingManager.getObjectInstance()</code>. The methods of this service
1:  * provide similar reference resolution, but rely on the OSGi Service Registry
1:  * in order to find <code>ObjectFactory</code> instances that can convert a
1:  * Reference to an Object.
1:  * 
1:  * This service will typically be used by OSGi-aware JNDI Service Providers.
1:  * 
1:  * @version $Revision$
1:  * @ThreadSafe
1:  */
1: public interface JNDIProviderAdmin {
1: 
1: 	/**
1: 	 * Resolve the object from the given reference.
1: 	 * 
1: 	 * @param refInfo Reference info
1: 	 * @param name the JNDI name associated with this reference
1: 	 * @param context the JNDI context associated with this reference
1: 	 * @param environment the JNDI environment associated with this JNDI context
1: 	 * @return an Object based on the reference passed in, or the original
1: 	 *         reference object if the reference could not be resolved.
1: 	 * @throws Exception in the event that an error occurs while attempting to
1: 	 *         resolve the JNDI reference.
1: 	 */
1: 	public Object getObjectInstance(Object refInfo, Name name, Context context,
0: 			Map environment) throws Exception;
1: 
1: 	/**
1: 	 * Resolve the object from the given reference.
1: 	 * 
1: 	 * @param refInfo Reference info
1: 	 * @param name the JNDI name associated with this reference
1: 	 * @param context the JNDI context associated with this reference
1: 	 * @param environment the JNDI environment associated with this JNDI context
1: 	 * @param attributes the naming attributes to use when resolving this object
1: 	 * @return an Object based on the reference passed in, or the original
1: 	 *         reference object if the reference could not be resolved.
1: 	 * @throws Exception in the event that an error occurs while attempting to
1: 	 *         resolve the JNDI reference.
1: 	 */
1: 	public Object getObjectInstance(Object refInfo, Name name, Context context,
0: 			Map environment, Attributes attributes) throws Exception;
1: }
============================================================================