1:c39db92: /*
1:c39db92:  * Licensed to the Apache Software Foundation (ASF) under one
1:c39db92:  * or more contributor license agreements.  See the NOTICE file
1:c39db92:  * distributed with this work for additional information
1:c39db92:  * regarding copyright ownership.  The ASF licenses this file
1:c39db92:  * to you under the Apache License, Version 2.0 (the
1:c39db92:  * "License"); you may not use this file except in compliance
1:c39db92:  * with the License.  You may obtain a copy of the License at
1:c39db92:  *
1:c39db92:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c39db92:  *
1:c39db92:  * Unless required by applicable law or agreed to in writing,
1:c39db92:  * software distributed under the License is distributed on an
1:c39db92:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:c39db92:  * KIND, either express or implied.  See the License for the
1:c39db92:  * specific language governing permissions and limitations
1:c39db92:  * under the License.
1:c39db92:  */
1:c39db92: 
1:bbcf8d2: package org.apache.aries.application.modelling.utils;
1:bbcf8d2: 
1:bbcf8d2: import static org.junit.Assert.assertEquals;
1:bbcf8d2: import static org.junit.Assert.assertFalse;
1:bbcf8d2: 
1:bbcf8d2: import java.util.HashMap;
1:bbcf8d2: import java.util.Map;
1:bbcf8d2: 
1:bbcf8d2: import org.apache.aries.application.modelling.ExportedPackage;
1:bbcf8d2: import org.apache.aries.application.modelling.ModelledResource;
1:bbcf8d2: import org.apache.aries.application.modelling.impl.ExportedPackageImpl;
1:bbcf8d2: import org.apache.aries.unittest.mocks.Skeleton;
1:bbcf8d2: import org.junit.Test;
1:bbcf8d2: import org.osgi.framework.Constants;
1:bbcf8d2: 
1:bbcf8d2: public class ExportedPackageTest {
1:bbcf8d2: 
1:bbcf8d2: 	@Test
1:bbcf8d2: 	public void testEqualsForIdenticalPackages() {
1:bbcf8d2: 		String packageName = "package.name";
1:bbcf8d2: 		String version = "1.0.0";
1:bbcf8d2: 		ExportedPackage package1 = instantiatePackage(packageName, version);
1:bbcf8d2: 		// I should hope so!
1:bbcf8d2: 		assertEquals(package1, package1);
1:bbcf8d2: 	}
1:bbcf8d2: 
1:bbcf8d2: 
1:bbcf8d2: 	@Test
1:bbcf8d2: 	public void testEqualsForEqualTrivialPackages() {
1:bbcf8d2: 		String packageName = "package.name";
1:bbcf8d2: 		String version = "1.0.0";
1:bbcf8d2: 		ExportedPackage package1 = instantiatePackage(packageName, version);
1:bbcf8d2: 		ExportedPackage package2 = instantiatePackage(packageName, version);
1:bbcf8d2: 		assertEquals(package1, package2);
1:bbcf8d2: 	}
1:bbcf8d2: 
1:bbcf8d2: 	@Test
1:bbcf8d2: 	public void testEqualsForTrivialPackagesWithDifferentName() {
1:bbcf8d2: 		String version = "1.0.0";
1:bbcf8d2: 		ExportedPackage package1 = instantiatePackage("package.name", version);
1:bbcf8d2: 		ExportedPackage package2 = instantiatePackage("other.package.name", version);
1:bbcf8d2: 		assertFalse("Unexpectedly reported as equal" + package1 + "==" + package2, package1.equals(package2));
1:bbcf8d2: 	}
1:bbcf8d2: 	
1:bbcf8d2: 	@Test
1:bbcf8d2: 	public void testEqualsForTrivialPackagesWithDifferentVersion() {
1:bbcf8d2: 		String packageName = "package.name";
1:bbcf8d2: 		ExportedPackage package1 = instantiatePackage(packageName, "1.0.0");
1:bbcf8d2: 		ExportedPackage package2 = instantiatePackage(packageName, "1.0.1");
1:bbcf8d2: 		assertFalse("Unexpectedly reported as equal" + package1 + "==" + package2, package1.equals(package2));
1:bbcf8d2: 	}
1:bbcf8d2: 	
1:bbcf8d2: 	@Test
1:bbcf8d2: 	public void testEqualsForEqualPackagesWithDifferentAttributes() {
1:bbcf8d2: 		String packageName = "package.name";
1:bbcf8d2: 		String version = "1.0.0";
1:bbcf8d2: 		ExportedPackage package1 = instantiatePackage(packageName, version, "att=something");
1:bbcf8d2: 		ExportedPackage package2 = instantiatePackage(packageName, version, "att=something.else");
1:bbcf8d2: 		assertFalse("Unexpectedly reported as equal" + package1 + "==" + package2, package1.equals(package2));
1:bbcf8d2: 	}
1:bbcf8d2: 
1:bbcf8d2: 
1:bbcf8d2: 	private ExportedPackage instantiatePackage(String packageName,
1:bbcf8d2: 			String version, String ... attributes) {
1:bbcf8d2: 		ModelledResource mr = Skeleton.newMock(ModelledResource.class);
1:bbcf8d2: 		Map<String, Object> generatedAttributes = new HashMap<String, Object>();
1:bbcf8d2: 		generatedAttributes.put(Constants.VERSION_ATTRIBUTE, version);
1:bbcf8d2: 		for (String att : attributes)
1:bbcf8d2: 		{
1:bbcf8d2: 			String[] bits = att.split("=");
1:bbcf8d2: 			generatedAttributes.put(bits[0], bits[1]);
1:bbcf8d2: 		}
1:bbcf8d2: 		return new ExportedPackageImpl(mr, packageName, generatedAttributes);
1:bbcf8d2: 	}
1:bbcf8d2: 
1:bbcf8d2: 
1:bbcf8d2: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:c39db92
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
commit:bbcf8d2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.modelling.utils;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.ExportedPackage;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.impl.ExportedPackageImpl;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: 
1: public class ExportedPackageTest {
1: 
1: 	@Test
1: 	public void testEqualsForIdenticalPackages() {
1: 		String packageName = "package.name";
1: 		String version = "1.0.0";
1: 		ExportedPackage package1 = instantiatePackage(packageName, version);
1: 		// I should hope so!
1: 		assertEquals(package1, package1);
1: 	}
1: 
1: 
1: 	@Test
1: 	public void testEqualsForEqualTrivialPackages() {
1: 		String packageName = "package.name";
1: 		String version = "1.0.0";
1: 		ExportedPackage package1 = instantiatePackage(packageName, version);
1: 		ExportedPackage package2 = instantiatePackage(packageName, version);
1: 		assertEquals(package1, package2);
1: 	}
1: 
1: 	@Test
1: 	public void testEqualsForTrivialPackagesWithDifferentName() {
1: 		String version = "1.0.0";
1: 		ExportedPackage package1 = instantiatePackage("package.name", version);
1: 		ExportedPackage package2 = instantiatePackage("other.package.name", version);
1: 		assertFalse("Unexpectedly reported as equal" + package1 + "==" + package2, package1.equals(package2));
1: 	}
1: 	
1: 	@Test
1: 	public void testEqualsForTrivialPackagesWithDifferentVersion() {
1: 		String packageName = "package.name";
1: 		ExportedPackage package1 = instantiatePackage(packageName, "1.0.0");
1: 		ExportedPackage package2 = instantiatePackage(packageName, "1.0.1");
1: 		assertFalse("Unexpectedly reported as equal" + package1 + "==" + package2, package1.equals(package2));
1: 	}
1: 	
1: 	@Test
1: 	public void testEqualsForEqualPackagesWithDifferentAttributes() {
1: 		String packageName = "package.name";
1: 		String version = "1.0.0";
1: 		ExportedPackage package1 = instantiatePackage(packageName, version, "att=something");
1: 		ExportedPackage package2 = instantiatePackage(packageName, version, "att=something.else");
1: 		assertFalse("Unexpectedly reported as equal" + package1 + "==" + package2, package1.equals(package2));
1: 	}
1: 
1: 
1: 	private ExportedPackage instantiatePackage(String packageName,
1: 			String version, String ... attributes) {
1: 		ModelledResource mr = Skeleton.newMock(ModelledResource.class);
1: 		Map<String, Object> generatedAttributes = new HashMap<String, Object>();
1: 		generatedAttributes.put(Constants.VERSION_ATTRIBUTE, version);
1: 		for (String att : attributes)
1: 		{
1: 			String[] bits = att.split("=");
1: 			generatedAttributes.put(bits[0], bits[1]);
1: 		}
1: 		return new ExportedPackageImpl(mr, packageName, generatedAttributes);
1: 	}
1: 
1: 
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:26ae47b
============================================================================