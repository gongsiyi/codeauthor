1:1c43780: /**
1:1c43780:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c43780:  * or more contributor license agreements.  See the NOTICE file
1:1c43780:  * distributed with this work for additional information
1:1c43780:  * regarding copyright ownership.  The ASF licenses this file
1:1c43780:  * to you under the Apache License, Version 2.0 (the
1:1c43780:  * "License"); you may not use this file except in compliance
1:1c43780:  * with the License.  You may obtain a copy of the License at
1:1c43780:  *
1:1c43780:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c43780:  *
1:1c43780:  * Unless required by applicable law or agreed to in writing,
1:1c43780:  * software distributed under the License is distributed on an
1:1c43780:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c43780:  * KIND, either express or implied.  See the License for the
1:1c43780:  * specific language governing permissions and limitations
1:1c43780:  * under the License.
1:1c43780:  */
1:1c43780: package org.apache.aries.spifly;
7:1c43780: 
1:1c43780: import java.util.Arrays;
1:43cb4c6: import java.util.List;
1:43cb4c6: import java.util.Set;
1:1c43780: 
1:1c43780: /** Contains information needed for the byte code weaver.
1:1c43780:  */
1:1c43780: public class WeavingData {
1:1c43780:     private final String className;
1:1c43780:     private final String methodName;
1:1c43780:     private final String[] argClasses;
1:43cb4c6:     private final Set<ConsumerRestriction> argRestrictions;
1:43cb4c6:     private final List<BundleDescriptor> allowedBundles;
1:1c43780: 
1:1c43780:     /**
1:1c43780:      * Constructor.
1:1c43780:      * @param className The class name of the call that needs to be woven.
1:1c43780:      * @param methodName The method name of the call that needs to be woven.
1:1c43780:      * @param argClasses The overload (class names of the signature) of the call
1:1c43780:      * that needs to be woven. If <code>null</code> then all overloads of the method
1:1c43780:      * need to be woven.
1:3aef914:      * @param argRestrictions
1:3aef914:      * @param allowedBundles
1:1c43780:      */
1:43cb4c6:     public WeavingData(String className, String methodName, String[] argClasses, Set<ConsumerRestriction> argRestrictions, List<BundleDescriptor> allowedBundles) {
1:43cb4c6:         // TODO can we infer argClasses from restrictions?
1:1c43780:         this.className = className;
1:1c43780:         this.methodName = methodName;
1:1c43780:         this.argClasses = argClasses;
1:43cb4c6:         this.argRestrictions = argRestrictions;
1:43cb4c6:         this.allowedBundles = allowedBundles;
4:1c43780:     }
1:1c43780: 
1:1c43780:     public String getClassName() {
1:1c43780:         return className;
1:1c43780:     }
1:1c43780: 
1:1c43780:     public String getMethodName() {
1:1c43780:         return methodName;
1:1c43780:     }
1:1c43780: 
1:43cb4c6:     public List<BundleDescriptor> getAllowedBundles() {
1:43cb4c6:         return allowedBundles;
1:43cb4c6:     }
1:1c43780: 
1:43cb4c6:     public String[] getArgClasses() {
1:43cb4c6:         return argClasses;
1:3aef914:     }
1:43cb4c6: 
1:43cb4c6:     public Set<ConsumerRestriction> getArgRestrictions() {
1:43cb4c6:         return argRestrictions;
1:3aef914:     }
1:3aef914: 
1:1c43780:     @Override
1:1c43780:     public int hashCode() {
1:1c43780:         final int prime = 31;
1:1c43780:         int result = 1;
1:1c43780:         result = prime * result + Arrays.hashCode(argClasses);
1:1c43780:         result = prime * result + ((className == null) ? 0 : className.hashCode());
1:1c43780:         result = prime * result + ((methodName == null) ? 0 : methodName.hashCode());
1:3aef914:         result = prime * result + ((argRestrictions == null) ? 0 : argRestrictions.hashCode());
1:3aef914:         result = prime * result + ((allowedBundles == null) ? 0 : allowedBundles.hashCode());
1:1c43780:         return result;
1:43cb4c6:     }
1:43cb4c6: 
1:1c43780:     @Override
1:1c43780:     public boolean equals(Object obj) {
1:1c43780:         if (this == obj)
1:1c43780:             return true;
1:3aef914: 
1:1c43780:         if (obj == null)
1:1c43780:             return false;
1:3aef914: 
1:1c43780:         if (getClass() != obj.getClass())
1:1c43780:             return false;
1:3aef914: 
1:1c43780:         WeavingData other = (WeavingData) obj;
1:1c43780:         if (!Arrays.equals(argClasses, other.argClasses))
1:1c43780:             return false;
1:3aef914: 
1:1c43780:         if (className == null) {
1:1c43780:             if (other.className != null)
1:1c43780:                 return false;
1:1c43780:         } else if (!className.equals(other.className))
1:1c43780:             return false;
1:3aef914: 
1:1c43780:         if (methodName == null) {
1:1c43780:             if (other.methodName != null)
1:1c43780:                 return false;
1:1c43780:         } else if (!methodName.equals(other.methodName))
1:1c43780:             return false;
1:3aef914: 
1:3aef914:         if (argRestrictions == null) {
1:3aef914:             if (other.argRestrictions != null)
1:3aef914:                 return false;
1:3aef914:         } else if (!argRestrictions.equals(other.argRestrictions))
1:3aef914:             return false;
1:3aef914: 
1:3aef914:         if (allowedBundles == null) {
1:3aef914:             if (other.allowedBundles != null)
1:3aef914:                 return false;
1:3aef914:         } else if (!allowedBundles.equals(other.allowedBundles))
1:3aef914:             return false;
1:3aef914: 
1:1c43780:         return true;
1:43cb4c6:     }
1:1c43780: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:3aef914
/////////////////////////////////////////////////////////////////////////
1:      * @param argRestrictions
1:      * @param allowedBundles
/////////////////////////////////////////////////////////////////////////
1:     }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         result = prime * result + ((argRestrictions == null) ? 0 : argRestrictions.hashCode());
1:         result = prime * result + ((allowedBundles == null) ? 0 : allowedBundles.hashCode());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1:         if (argRestrictions == null) {
1:             if (other.argRestrictions != null)
1:                 return false;
1:         } else if (!argRestrictions.equals(other.argRestrictions))
1:             return false;
1: 
1:         if (allowedBundles == null) {
1:             if (other.allowedBundles != null)
1:                 return false;
1:         } else if (!allowedBundles.equals(other.allowedBundles))
1:             return false;
1: 
commit:43cb4c6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     private final Set<ConsumerRestriction> argRestrictions;
1:     private final List<BundleDescriptor> allowedBundles;
/////////////////////////////////////////////////////////////////////////
0:      * @param argRestrictions 
0:      * @param allowedBundles 
1:     public WeavingData(String className, String methodName, String[] argClasses, Set<ConsumerRestriction> argRestrictions, List<BundleDescriptor> allowedBundles) {
1:         // TODO can we infer argClasses from restrictions?
1:         this.argRestrictions = argRestrictions;
1:         this.allowedBundles = allowedBundles;
/////////////////////////////////////////////////////////////////////////
1:     public List<BundleDescriptor> getAllowedBundles() {
1:         return allowedBundles;
1:     public String[] getArgClasses() {
1:         return argClasses;
1:     }        
1: 
1:     public Set<ConsumerRestriction> getArgRestrictions() {
1:         return argRestrictions;
1:     }        
1:     
/////////////////////////////////////////////////////////////////////////
1:     }
commit:1c43780
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import java.util.Arrays;
1: 
1: /** Contains information needed for the byte code weaver.
1:  */
1: public class WeavingData {
1:     private final String className;
1:     private final String methodName;
1:     private final String[] argClasses;
1: 
1:     /**
1:      * Constructor.
1:      * @param className The class name of the call that needs to be woven.
1:      * @param methodName The method name of the call that needs to be woven.
1:      * @param argClasses The overload (class names of the signature) of the call
1:      * that needs to be woven. If <code>null</code> then all overloads of the method
1:      * need to be woven.
1:      */
0:     public WeavingData(String className, String methodName, String[] argClasses) {
1:         this.className = className;
1:         this.methodName = methodName;
1:         this.argClasses = argClasses;
1:     }
1: 
1:     public String getClassName() {
1:         return className;
1:     }
1: 
1:     public String getMethodName() {
1:         return methodName;
1:     }
1: 
0:     public String[] getArgClasses() {
0:         return argClasses;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         final int prime = 31;
1:         int result = 1;
1:         result = prime * result + Arrays.hashCode(argClasses);
1:         result = prime * result + ((className == null) ? 0 : className.hashCode());
1:         result = prime * result + ((methodName == null) ? 0 : methodName.hashCode());
1:         return result;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj) {
1:         if (this == obj)
1:             return true;
1:         
1:         if (obj == null)
1:             return false;
1:         
1:         if (getClass() != obj.getClass())
1:             return false;
1:         
1:         WeavingData other = (WeavingData) obj;
1:         if (!Arrays.equals(argClasses, other.argClasses))
1:             return false;
1:         if (className == null) {
1:             if (other.className != null)
1:                 return false;
1:         } else if (!className.equals(other.className))
1:             return false;
1:         if (methodName == null) {
1:             if (other.methodName != null)
1:                 return false;
1:         } else if (!methodName.equals(other.methodName))
1:             return false;
1:         return true;
1:     }    
1:     
1:     
1: }
============================================================================