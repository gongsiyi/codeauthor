1:48255a0: /*
1:48255a0:  * Licensed to the Apache Software Foundation (ASF) under one
1:48255a0:  * or more contributor license agreements.  See the NOTICE file
1:48255a0:  * distributed with this work for additional information
1:48255a0:  * regarding copyright ownership.  The ASF licenses this file
1:48255a0:  * to you under the Apache License, Version 2.0 (the
1:48255a0:  * "License"); you may not use this file except in compliance
1:48255a0:  * with the License.  You may obtain a copy of the License at
1:48255a0:  *
1:48255a0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:48255a0:  *
1:48255a0:  * Unless required by applicable law or agreed to in writing,
1:48255a0:  * software distributed under the License is distributed on an
1:48255a0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:48255a0:  * KIND, either express or implied.  See the License for the
1:48255a0:  * specific language governing permissions and limitations
1:48255a0:  * under the License.
1:48255a0:  */
1:48255a0: package org.apache.aries.subsystem.itests.defect;
1:48255a0: 
1:48255a0: import static org.junit.Assert.fail;
1:48255a0: 
1:48255a0: import java.io.IOException;
1:48255a0: import java.util.HashMap;
1:48255a0: import java.util.Map;
1:48255a0: 
1:48255a0: import org.apache.aries.subsystem.itests.Header;
1:48255a0: import org.apache.aries.subsystem.itests.SubsystemTest;
1:48255a0: import org.junit.Before;
1:48255a0: import org.junit.Test;
1:48255a0: import org.osgi.framework.Bundle;
1:48255a0: import org.osgi.framework.Constants;
1:48255a0: import org.osgi.service.subsystem.Subsystem;
1:48255a0: import org.osgi.service.subsystem.SubsystemConstants;
1:48255a0: import org.osgi.service.subsystem.SubsystemException;
1:48255a0: 
1:48255a0: /*
1:48255a0:  * https://issues.apache.org/jira/browse/ARIES-1416
1:48255a0:  * 
1:48255a0:  * BundleException "bundle is already installed" when the Preferred-Provider 
1:48255a0:  * subsystem header points to a bundle.
1:48255a0:  */
1:48255a0: public class Aries1416Test extends SubsystemTest {
1:48255a0:     /*
1:48255a0:      * Subsystem-SymbolicName: application.a.esa
1:48255a0:      * Subsystem-Content: bundle.a.jar
1:48255a0:      * Preferred-Provider: bundle.b.jar;type=osgi.bundle
1:48255a0:      */
1:48255a0:     private static final String APPLICATION_A = "application.a.esa";
1:48255a0:     /*
1:48255a0:      * Subsystem-SymbolicName: feature.a.esa
1:48255a0:      * Subsystem-Content: application.a.esa
1:48255a0:      */
1:48255a0:     private static final String FEATURE_A = "feature.a.esa";
1:48255a0:     /*
1:48255a0:      * Subsystem-SymbolicName: feature.b.esa
1:48255a0:      * Subsystem-Content: application.a.esa
1:48255a0:      */
1:48255a0:     private static final String FEATURE_B = "feature.b.esa";
1:48255a0: 	/*
1:48255a0: 	 * Bundle-SymbolicName: bundle.a.jar
1:48255a0: 	 * Require-Capability: b
1:48255a0: 	 */
1:48255a0: 	private static final String BUNDLE_A = "bundle.a.jar";
1:48255a0: 	/*
1:48255a0: 	 * Bundle-SymbolicName: bundle.b.jar
1:48255a0: 	 * Provide-Capability: b
1:48255a0: 	 */
1:48255a0: 	private static final String BUNDLE_B = "bundle.b.jar";
1:48255a0: 	
1:48255a0: 	private static boolean createdTestFiles;
1:48255a0: 	
1:48255a0: 	@Before
1:48255a0: 	public void createTestFiles() throws Exception {
1:48255a0: 		if (createdTestFiles)
1:48255a0: 			return;
1:48255a0: 		createBundleA();
1:48255a0: 		createBundleB();
1:48255a0: 		createApplicationA();
1:48255a0: 		createFeatureA();
1:48255a0: 		createFeatureB();
1:48255a0: 		createdTestFiles = true;
1:48255a0: 	}
1:48255a0: 	
1:48255a0: 	private void createBundleA() throws IOException {
1:48255a0: 		createBundle(name(BUNDLE_A), new Header(Constants.REQUIRE_CAPABILITY, "b"));
1:48255a0: 	}
1:48255a0: 	
1:48255a0: 	private void createBundleB() throws IOException {
1:48255a0: 		createBundle(name(BUNDLE_B), new Header(Constants.PROVIDE_CAPABILITY, "b"));
1:48255a0: 	}
1:48255a0:     
1:48255a0:     private static void createApplicationA() throws IOException {
1:48255a0:         createApplicationAManifest();
1:48255a0:         createSubsystem(APPLICATION_A, BUNDLE_A, BUNDLE_B);
1:48255a0:     }
1:48255a0:     
1:48255a0:     private static void createApplicationAManifest() throws IOException {
1:48255a0:         Map<String, String> attributes = new HashMap<String, String>();
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:48255a0:         attributes.put(SubsystemConstants.PREFERRED_PROVIDER, BUNDLE_B + ";type=osgi.bundle");
1:48255a0:         createManifest(APPLICATION_A + ".mf", attributes);
1:48255a0:     }
1:48255a0:     
1:48255a0:     private static void createFeatureA() throws IOException {
1:48255a0:         createFeatureAManifest();
1:48255a0:         createSubsystem(FEATURE_A, BUNDLE_B, APPLICATION_A);
1:48255a0:     }
1:48255a0:     
1:48255a0:     private static void createFeatureAManifest() throws IOException {
1:48255a0:         Map<String, String> attributes = new HashMap<String, String>();
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ',' + 
1:48255a0:         		APPLICATION_A + ";type=osgi.subsystem.application");
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:48255a0:         createManifest(FEATURE_A + ".mf", attributes);
1:48255a0:     }
1:48255a0:     
1:48255a0:     private static void createFeatureB() throws IOException {
1:48255a0:         createFeatureBManifest();
1:48255a0:         createSubsystem(FEATURE_B, BUNDLE_B, APPLICATION_A);
1:48255a0:     }
1:48255a0:     
1:48255a0:     private static void createFeatureBManifest() throws IOException {
1:48255a0:         Map<String, String> attributes = new HashMap<String, String>();
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_B);
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ',' + 
1:48255a0:         		APPLICATION_A + ";type=osgi.subsystem.application");
1:48255a0:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:48255a0:         createManifest(FEATURE_B + ".mf", attributes);
1:48255a0:     }
1:48255a0:     
1:48255a0:     @Test 
1:48255a0:     public void testSystemRepositoryBundlePreferredProvider() throws Exception {
1:48255a0:     	Subsystem root = getRootSubsystem();
1:48255a0:     	// Install bundle B providing capability b into the root subsystem's
1:48255a0:     	// region.
1:48255a0:     	Bundle bundleB = installBundleFromFile(BUNDLE_B, root);
1:48255a0:     	try {
1:48255a0:     		// Install application A containing content bundle A requiring 
1:48255a0:     		// capability b and dependency bundle B providing capability b.
1:48255a0:     		// Bundle B is not content but will become part of the local 
1:48255a0:     		// repository. The preferred provider is bundle B. Bundle B from the
1:48255a0:     		// system repository should be used. Bundle B from the local
1:48255a0:     		// repository should not be provisioned.
1:48255a0:     		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:48255a0:     		uninstallSubsystemSilently(applicationA);
1:48255a0:     	}
1:48255a0:     	catch (SubsystemException e) {
1:48255a0:     		e.printStackTrace();
1:48255a0:     		fail("Subsystem should have installed");
1:48255a0:     	}
1:48255a0:     	finally {
1:48255a0:     		uninstallSilently(bundleB);
1:48255a0:     	}
1:48255a0:     }
1:48255a0:     
1:48255a0:     @Test
1:48255a0:     public void testSharedContentBundlePreferredProvider() throws Exception {
1:48255a0:     	// Install feature A containing bundle B and application A both in the
1:48255a0:     	// archive and as content into the root subsystem region. Bundle B 
1:48255a0:     	// provides capability b. Application A contains bundle A requiring 
1:48255a0:     	// capability b both in the archive and as content. Preferred provider 
1:48255a0:     	// bundle B is also included in the archive but not as content.
1:48255a0:     	Subsystem featureA = installSubsystemFromFile(FEATURE_A);
1:48255a0:     	try {
1:48255a0:     		// Install feature B having the same characteristics as feature A
1:48255a0:     		// described above into the root subsystem region. Bundle B will 
1:48255a0:     		// become shared content of features A and B. Shared content bundle
1:48255a0:     		// B from the system repository should be used as the preferred
1:48255a0:     		// provider. Bundle B from the local repository should not be
1:48255a0:     		// provisioned.
1:48255a0:     		Subsystem featureB = installSubsystemFromFile(FEATURE_B);
1:48255a0:     		uninstallSubsystemSilently(featureB);
1:48255a0:     	}
1:48255a0:     	catch (SubsystemException e) {
1:48255a0:     		e.printStackTrace();
1:48255a0:     		fail("Subsystem should have installed");
1:48255a0:     	}
1:48255a0:     	finally {
1:48255a0:     		uninstallSubsystemSilently(featureA);
1:48255a0:     	}
1:48255a0:     }
1:48255a0: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:48255a0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.itests.Header;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1416
1:  * 
1:  * BundleException "bundle is already installed" when the Preferred-Provider 
1:  * subsystem header points to a bundle.
1:  */
1: public class Aries1416Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * Subsystem-Content: bundle.a.jar
1:      * Preferred-Provider: bundle.b.jar;type=osgi.bundle
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: feature.a.esa
1:      * Subsystem-Content: application.a.esa
1:      */
1:     private static final String FEATURE_A = "feature.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: feature.b.esa
1:      * Subsystem-Content: application.a.esa
1:      */
1:     private static final String FEATURE_B = "feature.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: b
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Provide-Capability: b
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createFeatureA();
1: 		createFeatureB();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), new Header(Constants.REQUIRE_CAPABILITY, "b"));
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), new Header(Constants.PROVIDE_CAPABILITY, "b"));
1: 	}
1:     
1:     private static void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A, BUNDLE_B);
1:     }
1:     
1:     private static void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:         attributes.put(SubsystemConstants.PREFERRED_PROVIDER, BUNDLE_B + ";type=osgi.bundle");
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     private static void createFeatureA() throws IOException {
1:         createFeatureAManifest();
1:         createSubsystem(FEATURE_A, BUNDLE_B, APPLICATION_A);
1:     }
1:     
1:     private static void createFeatureAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ',' + 
1:         		APPLICATION_A + ";type=osgi.subsystem.application");
1:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:         createManifest(FEATURE_A + ".mf", attributes);
1:     }
1:     
1:     private static void createFeatureB() throws IOException {
1:         createFeatureBManifest();
1:         createSubsystem(FEATURE_B, BUNDLE_B, APPLICATION_A);
1:     }
1:     
1:     private static void createFeatureBManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_B);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ',' + 
1:         		APPLICATION_A + ";type=osgi.subsystem.application");
1:         attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:         createManifest(FEATURE_B + ".mf", attributes);
1:     }
1:     
1:     @Test 
1:     public void testSystemRepositoryBundlePreferredProvider() throws Exception {
1:     	Subsystem root = getRootSubsystem();
1:     	// Install bundle B providing capability b into the root subsystem's
1:     	// region.
1:     	Bundle bundleB = installBundleFromFile(BUNDLE_B, root);
1:     	try {
1:     		// Install application A containing content bundle A requiring 
1:     		// capability b and dependency bundle B providing capability b.
1:     		// Bundle B is not content but will become part of the local 
1:     		// repository. The preferred provider is bundle B. Bundle B from the
1:     		// system repository should be used. Bundle B from the local
1:     		// repository should not be provisioned.
1:     		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     	catch (SubsystemException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystem should have installed");
1:     	}
1:     	finally {
1:     		uninstallSilently(bundleB);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testSharedContentBundlePreferredProvider() throws Exception {
1:     	// Install feature A containing bundle B and application A both in the
1:     	// archive and as content into the root subsystem region. Bundle B 
1:     	// provides capability b. Application A contains bundle A requiring 
1:     	// capability b both in the archive and as content. Preferred provider 
1:     	// bundle B is also included in the archive but not as content.
1:     	Subsystem featureA = installSubsystemFromFile(FEATURE_A);
1:     	try {
1:     		// Install feature B having the same characteristics as feature A
1:     		// described above into the root subsystem region. Bundle B will 
1:     		// become shared content of features A and B. Shared content bundle
1:     		// B from the system repository should be used as the preferred
1:     		// provider. Bundle B from the local repository should not be
1:     		// provisioned.
1:     		Subsystem featureB = installSubsystemFromFile(FEATURE_B);
1:     		uninstallSubsystemSilently(featureB);
1:     	}
1:     	catch (SubsystemException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystem should have installed");
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(featureA);
1:     	}
1:     }
1: }
============================================================================