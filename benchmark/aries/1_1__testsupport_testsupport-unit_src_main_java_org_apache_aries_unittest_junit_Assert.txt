1:264011e: /*
1:264011e:  * Licensed to the Apache Software Foundation (ASF) under one
1:264011e:  * or more contributor license agreements.  See the NOTICE file
1:264011e:  * distributed with this work for additional information
1:264011e:  * regarding copyright ownership.  The ASF licenses this file
1:264011e:  * to you under the Apache License, Version 2.0 (the
1:264011e:  * "License"); you may not use this file except in compliance
1:264011e:  * with the License.  You may obtain a copy of the License at
1:264011e:  *
1:264011e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:264011e:  *
1:264011e:  * Unless required by applicable law or agreed to in writing,
1:264011e:  * software distributed under the License is distributed on an
1:264011e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:264011e:  * KIND, either express or implied.  See the License for the
1:264011e:  * specific language governing permissions and limitations
1:264011e:  * under the License.
1:264011e:  */
1:264011e: package org.apache.aries.unittest.junit;
1:264011e: 
1:264011e: import static org.junit.Assert.assertEquals;
1:264011e: import static org.junit.Assert.assertFalse;
1:264011e: import static org.junit.Assert.assertTrue;
1:264011e: 
1:264011e: /**
1:264011e:  * A library of useful assertion routines.
1:264011e:  */
1:264011e: public class Assert
1:264011e: {
1:264011e:   /**
1:264011e:    * This method checks that the two objects have the same hashCode. If the
1:264011e:    * equalsObjects parameter is true then the objects must also be .equals equal
1:264011e:    * if the equalsObject parameter is false then they must not be .equals equal.
1:264011e:    * 
1:264011e:    * @param <T> 
1:264011e:    * @param obj  the first object.
1:264011e:    * @param obj2 the second object.
1:264011e:    * @param equalObjects whether the objects are also equal.
1:264011e:    */
1:264011e:   public static <T> void assertHashCodeEquals(T obj, T obj2, boolean equalObjects)
1:264011e:   {
1:264011e:     assertEquals("The hashCodes were different, bad, bad, bad", obj.hashCode(), obj2.hashCode());
1:264011e:     assertEquals("The two objects are not equal", equalObjects, obj.equals(obj2));
1:264011e:   }
1:264011e: 
1:264011e:   /**
1:264011e:    * This method makes sure that the hashCodes are not equal. And that they
1:264011e:    * are not .equals. This is because two objects of the same type cannot be
1:264011e:    * .equals if they have different hashCodes.
1:264011e:    * 
1:264011e:    * @param <T> 
1:264011e:    * @param obj
1:264011e:    * @param obj2
1:264011e:    */
1:264011e:   public static <T> void assertHashCodeNotEquals(T obj, T obj2)
1:264011e:   {
1:264011e:     assertFalse("The the two hashCodes should be different: " + obj.hashCode() + ", " + obj2.hashCode(), obj.hashCode() == obj2.hashCode());
1:264011e:     assertFalse("The two objects not equal", obj.equals(obj2));
1:264011e:   }
1:264011e:   
1:264011e:   /**
1:264011e:    * This method asserts that the equals contract is upheld by type T.
1:264011e:    * 
1:264011e:    * @param <T>
1:264011e:    * @param info    an instance of T
1:264011e:    * @param info2   a different instance of T that is .equal to info
1:264011e:    * @param info3   an instance of T that is not equal to info
1:264011e:    */
1:264011e:   public static <T> void assertEqualsContract(T info, T info2, T info3)
1:264011e:   {
1:264011e:     Object other = new Object();
1:264011e:     if (info.getClass() == Object.class) other = "A string";
1:264011e:     
1:264011e:     assertEquals(info, info);
1:264011e:     assertFalse(info.equals(null));
1:264011e:     assertTrue("Equals should be commutative", info.equals(info2) == info2.equals(info) && info2.equals(info3) == info3.equals(info2));
1:264011e:     assertTrue("If two objects are equal, then they must both be equal (or not equal) to a third", info.equals(info3) == info2.equals(info3));
1:264011e:     assertFalse("An object should not equal an object of a disparate type", info.equals(other));
1:264011e:   }
4:4e2fb0c: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:264011e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.unittest.junit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * A library of useful assertion routines.
1:  */
1: public class Assert
1: {
1:   /**
1:    * This method checks that the two objects have the same hashCode. If the
1:    * equalsObjects parameter is true then the objects must also be .equals equal
1:    * if the equalsObject parameter is false then they must not be .equals equal.
1:    * 
1:    * @param <T> 
1:    * @param obj  the first object.
1:    * @param obj2 the second object.
1:    * @param equalObjects whether the objects are also equal.
1:    */
1:   public static <T> void assertHashCodeEquals(T obj, T obj2, boolean equalObjects)
1:   {
1:     assertEquals("The hashCodes were different, bad, bad, bad", obj.hashCode(), obj2.hashCode());
1:     assertEquals("The two objects are not equal", equalObjects, obj.equals(obj2));
1:   }
1: 
1:   /**
1:    * This method makes sure that the hashCodes are not equal. And that they
1:    * are not .equals. This is because two objects of the same type cannot be
1:    * .equals if they have different hashCodes.
1:    * 
1:    * @param <T> 
1:    * @param obj
1:    * @param obj2
1:    */
1:   public static <T> void assertHashCodeNotEquals(T obj, T obj2)
1:   {
1:     assertFalse("The the two hashCodes should be different: " + obj.hashCode() + ", " + obj2.hashCode(), obj.hashCode() == obj2.hashCode());
1:     assertFalse("The two objects not equal", obj.equals(obj2));
1:   }
1:   
1:   /**
1:    * This method asserts that the equals contract is upheld by type T.
1:    * 
1:    * @param <T>
1:    * @param info    an instance of T
1:    * @param info2   a different instance of T that is .equal to info
1:    * @param info3   an instance of T that is not equal to info
1:    */
1:   public static <T> void assertEqualsContract(T info, T info2, T info3)
1:   {
1:     Object other = new Object();
1:     if (info.getClass() == Object.class) other = "A string";
1:     
1:     assertEquals(info, info);
1:     assertFalse(info.equals(null));
1:     assertTrue("Equals should be commutative", info.equals(info2) == info2.equals(info) && info2.equals(info3) == info3.equals(info2));
1:     assertTrue("If two objects are equal, then they must both be equal (or not equal) to a third", info.equals(info3) == info2.equals(info3));
1:     assertFalse("An object should not equal an object of a disparate type", info.equals(other));
1:   }
commit:4e2fb0c
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.unittest.junit;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertTrue;
0: 
0: /**
0:  * A library of useful assertion routines.
0:  */
0: public class Assert
0: {
0:   /**
0:    * This method checks that the two objects have the same hashCode. If the
0:    * equalsObjects parameter is true then the objects must also be .equals equal
0:    * if the equalsObject parameter is false then they must not be .equals equal.
0:    * 
0:    * @param <T> 
0:    * @param obj  the first object.
0:    * @param obj2 the second object.
0:    * @param equalObjects whether the objects are also equal.
0:    */
0:   public static <T> void assertHashCodeEquals(T obj, T obj2, boolean equalObjects)
0:   {
0:     assertEquals("The hashCodes were different, bad, bad, bad", obj.hashCode(), obj2.hashCode());
0:     assertEquals("The two objects are not equal", equalObjects, obj.equals(obj2));
1:   }
0: 
0:   /**
0:    * This method makes sure that the hashCodes are not equal. And that they
0:    * are not .equals. This is because two objects of the same type cannot be
0:    * .equals if they have different hashCodes.
0:    * 
0:    * @param <T> 
0:    * @param obj
0:    * @param obj2
0:    */
0:   public static <T> void assertHashCodeNotEquals(T obj, T obj2)
0:   {
0:     assertFalse("The the two hashCodes should be different: " + obj.hashCode() + ", " + obj2.hashCode(), obj.hashCode() == obj2.hashCode());
0:     assertFalse("The two objects not equal", obj.equals(obj2));
1:   }
0:   
0:   /**
0:    * This method asserts that the equals contract is upheld by type T.
0:    * 
0:    * @param <T>
0:    * @param info    an instance of T
0:    * @param info2   a different instance of T that is .equal to info
0:    * @param info3   an instance of T that is not equal to info
0:    */
0:   public static <T> void assertEqualsContract(T info, T info2, T info3)
0:   {
0:     Object other = new Object();
0:     if (info.getClass() == Object.class) other = "A string";
0:     
0:     assertEquals(info, info);
0:     assertFalse(info.equals(null));
0:     assertTrue("Equals should be commutative", info.equals(info2) == info2.equals(info) && info2.equals(info3) == info3.equals(info2));
0:     assertTrue("If two objects are equal, then they must both be equal (or not equal) to a third", info.equals(info3) == info2.equals(info3));
0:     assertFalse("An object should not equal an object of a disparate type", info.equals(other));
1:   }
1: }
============================================================================