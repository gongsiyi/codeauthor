1:76e1d79: /*
1:76e1d79:  * Licensed to the Apache Software Foundation (ASF) under one
1:76e1d79:  * or more contributor license agreements.  See the NOTICE file
1:76e1d79:  * distributed with this work for additional information
1:76e1d79:  * regarding copyright ownership.  The ASF licenses this file
1:76e1d79:  * to you under the Apache License, Version 2.0 (the
1:76e1d79:  * "License"); you may not use this file except in compliance
1:76e1d79:  * with the License.  You may obtain a copy of the License at
1:76e1d79:  *
1:76e1d79:  *   http://www.apache.org/licenses/LICENSE-2.0
1:76e1d79:  *
1:76e1d79:  * Unless required by applicable law or agreed to in writing,
1:76e1d79:  * software distributed under the License is distributed on an
1:76e1d79:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:76e1d79:  * KIND, either express or implied.  See the License for the
1:76e1d79:  * specific language governing permissions and limitations
1:76e1d79:  * under the License.
1:76e1d79:  */
1:76e1d79: package org.apache.aries.util.internal;
1:76e1d79: 
1:c528d12: import java.lang.reflect.InvocationTargetException;
1:c528d12: 
1:76e1d79: import org.osgi.framework.Bundle;
1:76e1d79: 
1:76e1d79: public class EquinoxWorker extends DefaultWorker implements FrameworkUtilWorker {
1:76e1d79: 
1:76e1d79:   public ClassLoader getClassLoader(Bundle b) 
1:76e1d79:   {
1:c528d12:     ClassLoader result = null;
1:c528d12:     try {
1:c528d12:       Object bundleLoaderProxy = invoke(b, "getLoaderProxy");
1:c528d12:       if (bundleLoaderProxy != null) {
1:c528d12:         Object bundleLoader = invoke(bundleLoaderProxy, "getBasicBundleLoader");
1:c528d12:         if (bundleLoader != null) {
1:c528d12:           Object bundleClassLoader = invoke(bundleLoader, "createClassLoader");
1:c528d12:           if (bundleClassLoader instanceof ClassLoader) {
1:c528d12:             result = (ClassLoader)bundleClassLoader;
1:c528d12:           }
1:c528d12:         }
1:c528d12:       }
1:c528d12:     } catch (IllegalArgumentException e) {
1:c528d12:     } catch (SecurityException e) {
1:c528d12:     } catch (IllegalAccessException e) {
1:c528d12:     } catch (InvocationTargetException e) {
1:c528d12:     } catch (NoSuchMethodException e) {
1:c528d12:     }
1:76e1d79:     
1:c528d12:     return result;
1:c528d12:   }
1:c528d12: 
1:c528d12:   private Object invoke(Object targetObject, String method) throws IllegalAccessException, InvocationTargetException,
1:c528d12:       NoSuchMethodException
1:c528d12:   {
1:c528d12:     return targetObject.getClass().getDeclaredMethod(method).invoke(targetObject);
1:76e1d79:   }
1:76e1d79: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:c528d12
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: 
1:     ClassLoader result = null;
1:     try {
1:       Object bundleLoaderProxy = invoke(b, "getLoaderProxy");
1:       if (bundleLoaderProxy != null) {
1:         Object bundleLoader = invoke(bundleLoaderProxy, "getBasicBundleLoader");
1:         if (bundleLoader != null) {
1:           Object bundleClassLoader = invoke(bundleLoader, "createClassLoader");
1:           if (bundleClassLoader instanceof ClassLoader) {
1:             result = (ClassLoader)bundleClassLoader;
1:           }
1:         }
1:       }
1:     } catch (IllegalArgumentException e) {
1:     } catch (SecurityException e) {
1:     } catch (IllegalAccessException e) {
1:     } catch (InvocationTargetException e) {
1:     } catch (NoSuchMethodException e) {
1:     }
1:     return result;
1:   }
1: 
1:   private Object invoke(Object targetObject, String method) throws IllegalAccessException, InvocationTargetException,
1:       NoSuchMethodException
1:   {
1:     return targetObject.getClass().getDeclaredMethod(method).invoke(targetObject);
commit:76e1d79
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util.internal;
1: 
0: import org.eclipse.osgi.framework.adaptor.BundleClassLoader;
0: import org.eclipse.osgi.framework.internal.core.BundleHost;
0: import org.eclipse.osgi.internal.loader.BundleLoader;
0: import org.eclipse.osgi.internal.loader.BundleLoaderProxy;
1: import org.osgi.framework.Bundle;
1: 
1: public class EquinoxWorker extends DefaultWorker implements FrameworkUtilWorker {
1: 
1:   public ClassLoader getClassLoader(Bundle b) 
1:   {
0:     BundleHost host = (BundleHost) b;
0:     BundleLoaderProxy lp = host.getLoaderProxy();
0:     BundleLoader bl = (lp == null) ? null : lp.getBasicBundleLoader();
0:     BundleClassLoader cl = (bl == null) ? null : bl.createClassLoader();
1:     
0:     return ((cl instanceof ClassLoader) ? (ClassLoader)cl : null);
1:   }
1: }
============================================================================