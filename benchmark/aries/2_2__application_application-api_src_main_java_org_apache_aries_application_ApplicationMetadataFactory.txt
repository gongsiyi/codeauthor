1:629b3bd: /*
1:629b3bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:629b3bd:  * or more contributor license agreements.  See the NOTICE file
1:629b3bd:  * distributed with this work for additional information
1:629b3bd:  * regarding copyright ownership.  The ASF licenses this file
1:629b3bd:  * to you under the Apache License, Version 2.0 (the
1:629b3bd:  * "License"); you may not use this file except in compliance
1:629b3bd:  * with the License.  You may obtain a copy of the License at
5:629b3bd:  *
1:629b3bd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:629b3bd:  *
1:629b3bd:  * Unless required by applicable law or agreed to in writing,
1:629b3bd:  * software distributed under the License is distributed on an
1:629b3bd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:629b3bd:  * KIND, either express or implied.  See the License for the
1:629b3bd:  * specific language governing permissions and limitations
1:629b3bd:  * under the License.
4:629b3bd:  */
1:629b3bd: package org.apache.aries.application;
1:beeb1d7: 
1:629b3bd: import java.io.IOException;
1:629b3bd: import java.io.InputStream;
1:629b3bd: import java.util.jar.Manifest;
2:d7dcea4: 
1:3162c07: /**
1:43be66f:  * Provides various means of generating {@link org.apache.aries.application.ApplicationMetadata  
1:43be66f:  * ApplicationMetadata} instances.  
1:3162c07:  */
1:beeb1d7: public interface ApplicationMetadataFactory
1:629b3bd: {
1:a99b257: 
4:629b3bd:   /**
1:629b3bd:    * Parse from the input stream the application manifest. This method is more
1:629b3bd:    * lenient than the normal manifest parsing routine and does not limit the
1:629b3bd:    * manifest to 76 bytes as a line length.
1:3162c07:    * 
1:a99b257:    * @param in the inputstream of the manifest to parse.
1:629b3bd:    * @return   the parsed application metadata.
1:629b3bd:    * 
1:629b3bd:    */
1:d7dcea4:   public ApplicationMetadata parseApplicationMetadata(InputStream in) throws IOException;
1:a99b257:     
1:629b3bd:   /**
1:629b3bd:    * Create the application metadata from the provided Manifest. This is provided
1:629b3bd:    * so application metadata can be created from within the JVM. When reading
1:629b3bd:    * from a stream the parseApplication method should be used.
1:629b3bd:    * 
1:629b3bd:    * @param man the manifest to read from
1:629b3bd:    * @return    the parsed application metadata.
1:629b3bd:    */
1:d7dcea4:   public ApplicationMetadata createApplicationMetadata(Manifest man);
1:a99b257: 
1:629b3bd: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:a99b257
/////////////////////////////////////////////////////////////////////////
1: 
1:    * @param in the inputstream of the manifest to parse.
1:     
/////////////////////////////////////////////////////////////////////////
1: 
commit:43be66f
/////////////////////////////////////////////////////////////////////////
1:  * Provides various means of generating {@link org.apache.aries.application.ApplicationMetadata  
1:  * ApplicationMetadata} instances.  
commit:beeb1d7
/////////////////////////////////////////////////////////////////////////
1: public interface ApplicationMetadataFactory
/////////////////////////////////////////////////////////////////////////
1:  
commit:bcc9cdb
/////////////////////////////////////////////////////////////////////////
0:   // Once we remove the methods, this interface should be renamed ApplicationMetadataFactory, since 
0:   // it won't be managing anything anymore. 
commit:d7dcea4
/////////////////////////////////////////////////////////////////////////
1:   public ApplicationMetadata parseApplicationMetadata(InputStream in) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:   public ApplicationMetadata createApplicationMetadata(Manifest man);
/////////////////////////////////////////////////////////////////////////
0:   public ApplicationMetadata getApplicationMetadata (String applicationSymbolicName, Version version);
1:   
0:   // MN: Dec 22: register, unregisterApplication probably will not be required
0:   // as we implement AriesApplicationManager, so I'm not refactoring the method names. 
1:   
commit:a20c83a
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:3162c07
/////////////////////////////////////////////////////////////////////////
0:   public Content parseContent(String content);
0:   public VersionRange parseVersionRange(String versionRange);
/////////////////////////////////////////////////////////////////////////
0:   
1:   /**
0:    * This method is used to remove a previously registered application. An
0:    * application can only be removed by the bundle that registered the application.
1:    * 
0:    * @param app the application to remove.
0:    * @return    true if the application was removed, false otherwise.
1:    */
0:   public boolean unregisterApplication(ApplicationMetadata app);
commit:629b3bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application;
0: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.jar.Manifest;
0: 
0: import org.osgi.framework.Version;
0: 
1: /**
0:  * This service provides manages application metadata.
1:  */
0: public interface ApplicationMetadataManager
1: {
1:   /**
1:    * Parse from the input stream the application manifest. This method is more
1:    * lenient than the normal manifest parsing routine and does not limit the
1:    * manifest to 76 bytes as a line length.
1:    * 
0:    * @param in the input stream to read the application manifest from.
1:    * @return   the parsed application metadata.
1:    * 
0:    * @throws IOException if an IOException occurs reading from the stream.
1:    */
0:   public ApplicationMetadata parseApplication(InputStream in) throws IOException;
1:   /**
1:    * Create the application metadata from the provided Manifest. This is provided
1:    * so application metadata can be created from within the JVM. When reading
1:    * from a stream the parseApplication method should be used.
1:    * 
1:    * @param man the manifest to read from
1:    * @return    the parsed application metadata.
1:    */
0:   public ApplicationMetadata createApplication(Manifest man);
1:   /**
0:    * This method is used to retrived a previously registered application metadata.
1:    * 
0:    * @param applicationSymbolicName the symbolic name of the application.
0:    * @param version                 the version of the application.
1:    * 
0:    * @return the application metadata, or null if no application has been 
0:    *         registered.
1:    */
0:   public ApplicationMetadata getApplication(String applicationSymbolicName, Version version);
1:   /**
0:    * This method is used to register an application. The ApplicationMetadata
0:    * passed in should be created via the createApplication or parseApplication
0:    * methods on this service. A boolean is returned to indicate if the 
0:    * registration was successful or not. The most likely reason for a registration
0:    * failure is that the application is already registered. When this service is 
0:    * released all registered applications will be removed from the service.
1:    * 
0:    * @param app the application to register.
0:    * @return    true if the application was registered, false otherwise.
1:    */
0:   public boolean registerApplication(ApplicationMetadata app);
1: }
============================================================================