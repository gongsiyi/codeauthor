1:bf5a863: /**
1:bf5a863:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:bf5a863:  *  contributor license agreements.  See the NOTICE file distributed with
1:bf5a863:  *  this work for additional information regarding copyright ownership.
1:bf5a863:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:bf5a863:  *  (the "License"); you may not use this file except in compliance with
1:bf5a863:  *  the License.  You may obtain a copy of the License at
1:bf5a863:  *
1:bf5a863:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bf5a863:  *
1:bf5a863:  *  Unless required by applicable law or agreed to in writing, software
1:bf5a863:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:bf5a863:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf5a863:  *  See the License for the specific language governing permissions and
1:bf5a863:  *  limitations under the License.
2:bf5a863:  */
1:95b5a88: package org.apache.aries.jmx.framework.wiring;
5:bf5a863: 
1:bf5a863: import java.io.IOException;
1:8c90050: import java.util.HashMap;
1:fd3ae03: import java.util.List;
1:8c90050: import java.util.Map;
1:bf5a863: 
1:bf5a863: import javax.management.openmbean.CompositeData;
1:8c90050: import javax.management.openmbean.TabularData;
1:8c90050: import javax.management.openmbean.TabularDataSupport;
1:bf5a863: 
1:bf5a863: import org.apache.aries.jmx.Logger;
1:bf5a863: import org.apache.aries.jmx.codec.BundleWiringData;
1:bf5a863: import org.apache.aries.jmx.util.FrameworkUtils;
1:bf5a863: import org.osgi.framework.Bundle;
1:bf5a863: import org.osgi.framework.BundleContext;
1:fd3ae03: import org.osgi.framework.wiring.BundleCapability;
1:fd3ae03: import org.osgi.framework.wiring.BundleRequirement;
1:bf5a863: import org.osgi.framework.wiring.BundleRevision;
1:62a90a9: import org.osgi.framework.wiring.BundleRevisions;
1:fd3ae03: import org.osgi.framework.wiring.BundleWire;
1:fd3ae03: import org.osgi.framework.wiring.BundleWiring;
1:1dbcef9: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
1:bf5a863: 
1:1dbcef9: public class BundleWiringState implements BundleWiringStateMBean {
1:bf5a863:     private final BundleContext bundleContext;
1:bf5a863:     private final Logger logger;
1:bf5a863: 
1:bf5a863: 
1:1dbcef9:     public BundleWiringState(BundleContext bundleContext, Logger logger) {
1:bf5a863:         this.bundleContext = bundleContext;
1:bf5a863:         this.logger = logger;
3:bf5a863:     }
1:bf5a863: 
2:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentRevisionDeclaredRequirements(long, java.lang.String)
1:bf5a863:      */
1:91e4c4b:     public CompositeData[] getCurrentRevisionDeclaredRequirements(long bundleId, String namespace) throws IOException {
1:91e4c4b:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:200f5ce:         BundleRevision revision = bundle.adapt(BundleRevision.class);
1:62a90a9: 
1:34c7cec:         return BundleWiringData.getRequirementsCompositeData(revision.getDeclaredRequirements(namespace));
1:bf5a863:     }
1:91e4c4b: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentRevisionDeclaredCapabilities(long, java.lang.String)
1:bf5a863:      */
1:307fdbc:     public CompositeData[] getCurrentRevisionDeclaredCapabilities(long bundleId, String namespace) throws IOException {
1:307fdbc:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:307fdbc:         BundleRevision revision = bundle.adapt(BundleRevision.class);
1:307fdbc: 
1:307fdbc:         return BundleWiringData.getCapabilitiesCompositeData(revision.getDeclaredCapabilities(namespace));
1:bf5a863:     }
1:bf5a863: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentWiring(long, java.lang.String)
1:bf5a863:      */
1:bf5a863:     public CompositeData getCurrentWiring(long bundleId, String namespace) throws IOException {
1:bf5a863:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:bf5a863:         BundleRevision currentRevision = bundle.adapt(BundleRevision.class);
1:8c90050:         Map<BundleRevision, Integer> revisionIDMap = getCurrentRevisionTransitiveRevisionsClosure(bundleId, namespace);
1:8c90050:         return getRevisionWiring(currentRevision, 0, namespace, revisionIDMap);
1:8c90050:     }
1:8c90050: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentWiringClosure(long)
1:bf5a863:      */
1:8c90050:     public TabularData getCurrentWiringClosure(long rootBundleId, String namespace) throws IOException {
1:8c90050:         Map<BundleRevision, Integer> revisionIDMap = getCurrentRevisionTransitiveRevisionsClosure(rootBundleId, namespace);
1:8c90050: 
1:3032a97:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLES_WIRING_TYPE);
1:8c90050:         for (Map.Entry<BundleRevision, Integer> entry : revisionIDMap.entrySet()) {
1:8c90050:             td.put(getRevisionWiring(entry.getKey(), entry.getValue(), namespace, revisionIDMap));
1:8c90050:         }
1:8c90050: 
1:8c90050:         return td;
1:8c90050:     }
1:8c90050: 
1:8c90050:     // The current revision being passed in always gets assigned revision ID 0
1:8c90050:     // All the other revision IDs unique, but don't increase monotonous.
1:8c90050:     private Map<BundleRevision, Integer> getCurrentRevisionTransitiveRevisionsClosure(long rootBundleId, String namespace) throws IOException {
1:8c90050:         Bundle rootBundle = FrameworkUtils.resolveBundle(bundleContext, rootBundleId);
1:8c90050:         BundleRevision rootRevision = rootBundle.adapt(BundleRevision.class);
1:e98589f:         return getRevisionTransitiveClosure(rootRevision, namespace);
1:e98589f:     }
1:e98589f: 
1:e98589f:     private Map<BundleRevision, Integer> getRevisionTransitiveClosure(BundleRevision rootRevision, String namespace) {
1:e98589f:         Map<BundleRevision, Integer> revisionIDMap = new HashMap<BundleRevision, Integer>();
1:8c90050:         populateTransitiveRevisions(namespace, rootRevision, revisionIDMap);
1:8c90050: 
1:8c90050:         // Set the root revision ID to 0,
1:8c90050:         // TODO check if there is already a revision with ID 0 and if so swap them. Quite a small chance that this will be needed
1:8c90050:         revisionIDMap.put(rootRevision, 0);
1:8c90050:         return revisionIDMap;
1:bf5a863:     }
1:bf5a863: 
1:8c90050:     private void populateTransitiveRevisions(String namespace, BundleRevision rootRevision, Map<BundleRevision, Integer> allRevisions) {
1:62a90a9:         allRevisions.put(rootRevision, System.identityHashCode(rootRevision));
1:8c90050:         BundleWiring wiring = rootRevision.getWiring();
1:75249ad:         if (wiring == null)
1:75249ad:             return;
1:75249ad: 
1:255bc84:         List<BundleWire> requiredWires = wiring.getRequiredWires(namespace);
1:255bc84:         for (BundleWire wire : requiredWires) {
1:8c90050:             BundleRevision revision = wire.getCapability().getRevision();
1:8c90050:             if (!allRevisions.containsKey(revision)) {
1:8c90050:                 populateTransitiveRevisions(namespace, revision, allRevisions);
1:bf5a863:             }
1:bf5a863:         }
1:255bc84: 
1:255bc84:         List<BundleWire> providedWires = wiring.getProvidedWires(namespace);
1:255bc84:         for (BundleWire wire : providedWires) {
1:255bc84:             BundleRevision revision = wire.getRequirement().getRevision();
1:255bc84:             if (!allRevisions.containsKey(revision)) {
1:255bc84:                 populateTransitiveRevisions(namespace, revision, allRevisions);
1:255bc84:             }
1:255bc84:         }
1:bf5a863:     }
1:bf5a863: 
1:34c7cec:     private CompositeData getRevisionWiring(BundleRevision revision, int revisionID, String namespace, Map<BundleRevision, Integer> revisionIDMap) {
1:34c7cec:         BundleWiring wiring = revision.getWiring();
1:34c7cec:         List<BundleCapability> capabilities = wiring.getCapabilities(namespace);
1:34c7cec:         List<BundleRequirement> requirements = wiring.getRequirements(namespace);
1:34c7cec:         List<BundleWire> providedWires = wiring.getProvidedWires(namespace);
1:34c7cec:         List<BundleWire> requiredWires = wiring.getRequiredWires(namespace);
1:34c7cec: 
1:34c7cec:         BundleWiringData data = new BundleWiringData(wiring.getBundle().getBundleId(), revisionID, capabilities, requirements, providedWires, requiredWires, revisionIDMap);
1:34c7cec:         return data.toCompositeData();
1:34c7cec:     }
1:34c7cec: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getRevisionsDeclaredRequirements(long, java.lang.String, boolean)
1:bf5a863:      */
1:62a90a9:     public TabularData getRevisionsDeclaredRequirements(long bundleId, String namespace) throws IOException {
1:62a90a9:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:62a90a9:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1:91b6cdf: 
1:62a90a9:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.REVISIONS_REQUIREMENTS_TYPE);
1:62a90a9:         for (BundleRevision revision : revisions.getRevisions()) {
1:62a90a9:             td.put(BundleWiringData.getRevisionRequirements(
1:62a90a9:                     System.identityHashCode(revision),
1:62a90a9:                     revision.getDeclaredRequirements(namespace)));
1:62a90a9:         }
1:62a90a9:         return td;
1:8c90050:     }
1:8c90050: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getRevisionsDeclaredCapabilities(long, java.lang.String, boolean)
1:bf5a863:      */
1:62a90a9:     public TabularData getRevisionsDeclaredCapabilities(long bundleId, String namespace) throws IOException {
1:62a90a9:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:62a90a9:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1:62a90a9: 
1:62a90a9:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.REVISIONS_CAPABILITIES_TYPE);
1:62a90a9:         for (BundleRevision revision : revisions.getRevisions()) {
1:62a90a9:             td.put(BundleWiringData.getRevisionCapabilities(
1:62a90a9:                     System.identityHashCode(revision),
1:62a90a9:                     revision.getDeclaredCapabilities(namespace)));
1:62a90a9:         }
1:62a90a9:         return td;
1:8c90050:     }
1:8c90050: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getRevisionsWiring(long, java.lang.String)
1:bf5a863:      */
1:e98589f:     public TabularData getRevisionsWiring(long bundleId, String namespace) throws IOException {
1:e98589f:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:e98589f:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1:e98589f: 
1:3032a97:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLES_WIRING_TYPE);
1:e98589f:         for (BundleRevision revision : revisions.getRevisions()) {
1:e98589f:             Map<BundleRevision, Integer> revisionIDMap = getRevisionTransitiveClosure(revision, namespace);
1:e98589f:             td.put(getRevisionWiring(revision, System.identityHashCode(revision), namespace, revisionIDMap));
1:e98589f:         }
1:e98589f:         return td;
1:8c90050:     }
1:bf5a863: 
1:bf5a863:     /* (non-Javadoc)
1:bf5a863:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getWiringClosure(long, java.lang.String)
1:bf5a863:      */
1:91b6cdf:     public TabularData getRevisionsWiringClosure(long rootBundleId, String namespace) throws IOException {
1:91b6cdf:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, rootBundleId);
1:91b6cdf:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1:91b6cdf: 
1:91b6cdf:         Map<BundleRevision, Integer> revisionIDMap = new HashMap<BundleRevision, Integer>();
1:91b6cdf:         for (BundleRevision revision : revisions.getRevisions()) {
1:91b6cdf:             populateTransitiveRevisions(namespace, revision, revisionIDMap);
1:91b6cdf:         }
1:91b6cdf: 
1:91b6cdf:         // Set the root current revision ID to 0,
1:91b6cdf:         // TODO check if there is already a revision with ID 0 and if so swap them. Quite a small chance that this will be needed
1:91b6cdf:         BundleRevision revision = bundle.adapt(BundleRevision.class);
1:91b6cdf:         revisionIDMap.put(revision, 0);
1:91b6cdf: 
1:3032a97:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLES_WIRING_TYPE);
1:91b6cdf:         for (Map.Entry<BundleRevision, Integer> entry : revisionIDMap.entrySet()) {
1:91b6cdf:             td.put(getRevisionWiring(entry.getKey(), entry.getValue(), namespace, revisionIDMap));
1:91b6cdf:         }
1:bf5a863: 
1:91b6cdf:         return td;
1:bf5a863:     }
1:bf5a863: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:255bc84
/////////////////////////////////////////////////////////////////////////
1:         List<BundleWire> requiredWires = wiring.getRequiredWires(namespace);
1:         for (BundleWire wire : requiredWires) {
1: 
1:         List<BundleWire> providedWires = wiring.getProvidedWires(namespace);
1:         for (BundleWire wire : providedWires) {
1:             BundleRevision revision = wire.getRequirement().getRevision();
1:             if (!allRevisions.containsKey(revision)) {
1:                 populateTransitiveRevisions(namespace, revision, allRevisions);
1:             }
1:         }
commit:75249ad
/////////////////////////////////////////////////////////////////////////
1:         if (wiring == null)
1:             return;
1: 
commit:3032a97
/////////////////////////////////////////////////////////////////////////
1:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLES_WIRING_TYPE);
/////////////////////////////////////////////////////////////////////////
1:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLES_WIRING_TYPE);
/////////////////////////////////////////////////////////////////////////
1:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLES_WIRING_TYPE);
commit:12bb1ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:91b6cdf
/////////////////////////////////////////////////////////////////////////
1:     public TabularData getRevisionsWiringClosure(long rootBundleId, String namespace) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, rootBundleId);
1:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1: 
1:         Map<BundleRevision, Integer> revisionIDMap = new HashMap<BundleRevision, Integer>();
1:         for (BundleRevision revision : revisions.getRevisions()) {
1:             populateTransitiveRevisions(namespace, revision, revisionIDMap);
1:         }
1: 
1:         // Set the root current revision ID to 0,
1:         // TODO check if there is already a revision with ID 0 and if so swap them. Quite a small chance that this will be needed
1:         BundleRevision revision = bundle.adapt(BundleRevision.class);
1:         revisionIDMap.put(revision, 0);
1: 
0:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLE_WIRING_CLOSURE_TYPE);
1:         for (Map.Entry<BundleRevision, Integer> entry : revisionIDMap.entrySet()) {
1:             td.put(getRevisionWiring(entry.getKey(), entry.getValue(), namespace, revisionIDMap));
1:         }
1: 
1:         return td;
commit:e98589f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return getRevisionTransitiveClosure(rootRevision, namespace);
1:     }
1: 
1:     private Map<BundleRevision, Integer> getRevisionTransitiveClosure(BundleRevision rootRevision, String namespace) {
1:         Map<BundleRevision, Integer> revisionIDMap = new HashMap<BundleRevision, Integer>();
/////////////////////////////////////////////////////////////////////////
1:     public TabularData getRevisionsWiring(long bundleId, String namespace) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1: 
0:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.REVISIONS_BUNDLE_WIRING_TYPE);
1:         for (BundleRevision revision : revisions.getRevisions()) {
1:             Map<BundleRevision, Integer> revisionIDMap = getRevisionTransitiveClosure(revision, namespace);
1:             td.put(getRevisionWiring(revision, System.identityHashCode(revision), namespace, revisionIDMap));
1:         }
1:         return td;
0:     public TabularData getWiringClosure(long rootBundleId, String namespace) {
commit:62a90a9
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevisions;
/////////////////////////////////////////////////////////////////////////
1:         allRevisions.put(rootRevision, System.identityHashCode(rootRevision));
/////////////////////////////////////////////////////////////////////////
1:     public TabularData getRevisionsDeclaredRequirements(long bundleId, String namespace) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1: 
1:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.REVISIONS_REQUIREMENTS_TYPE);
1:         for (BundleRevision revision : revisions.getRevisions()) {
1:             td.put(BundleWiringData.getRevisionRequirements(
0:                     revision.getBundle().getBundleId(),
1:                     System.identityHashCode(revision),
1:                     revision.getDeclaredRequirements(namespace)));
1:         }
1:         return td;
1:     public TabularData getRevisionsDeclaredCapabilities(long bundleId, String namespace) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:         BundleRevisions revisions = bundle.adapt(BundleRevisions.class);
1: 
1:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.REVISIONS_CAPABILITIES_TYPE);
1:         for (BundleRevision revision : revisions.getRevisions()) {
1:             td.put(BundleWiringData.getRevisionCapabilities(
0:                     revision.getBundle().getBundleId(),
1:                     System.identityHashCode(revision),
1:                     revision.getDeclaredCapabilities(namespace)));
1:         }
1:         return td;
commit:307fdbc
/////////////////////////////////////////////////////////////////////////
1:     public CompositeData[] getCurrentRevisionDeclaredCapabilities(long bundleId, String namespace) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:         BundleRevision revision = bundle.adapt(BundleRevision.class);
1: 
1:         return BundleWiringData.getCapabilitiesCompositeData(revision.getDeclaredCapabilities(namespace));
commit:1dbcef9
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
1: public class BundleWiringState implements BundleWiringStateMBean {
1:     public BundleWiringState(BundleContext bundleContext, Logger logger) {
/////////////////////////////////////////////////////////////////////////
0:         TabularData td = new TabularDataSupport(BundleWiringStateMBean.BUNDLE_WIRING_CLOSURE_TYPE);
commit:95b5a88
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jmx.framework.wiring;
commit:3f3f24f
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.jmx.framework.wiring.BundleRevisionsStateMBean;
commit:34c7cec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return BundleWiringData.getRequirementsCompositeData(revision.getDeclaredRequirements(namespace));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private CompositeData getRevisionWiring(BundleRevision revision, int revisionID, String namespace, Map<BundleRevision, Integer> revisionIDMap) {
1:         BundleWiring wiring = revision.getWiring();
1:         List<BundleCapability> capabilities = wiring.getCapabilities(namespace);
1:         List<BundleRequirement> requirements = wiring.getRequirements(namespace);
1:         List<BundleWire> providedWires = wiring.getProvidedWires(namespace);
1:         List<BundleWire> requiredWires = wiring.getRequiredWires(namespace);
1: 
1:         BundleWiringData data = new BundleWiringData(wiring.getBundle().getBundleId(), revisionID, capabilities, requirements, providedWires, requiredWires, revisionIDMap);
1:         return data.toCompositeData();
1:     }
1: 
commit:8c90050
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
/////////////////////////////////////////////////////////////////////////
1:         Map<BundleRevision, Integer> revisionIDMap = getCurrentRevisionTransitiveRevisionsClosure(bundleId, namespace);
1:         return getRevisionWiring(currentRevision, 0, namespace, revisionIDMap);
1:     }
1: 
0:     private CompositeData getRevisionWiring(BundleRevision revision, int revisionID, String namespace, Map<BundleRevision, Integer> revisionIDMap) {
0:         BundleWiring wiring = revision.getWiring();
0:         BundleWiringData data = new BundleWiringData(wiring.getBundle().getBundleId(), revisionID, capabilities, requirements, providedWires, requiredWires, revisionIDMap);
1:     public TabularData getCurrentWiringClosure(long rootBundleId, String namespace) throws IOException {
1:         Map<BundleRevision, Integer> revisionIDMap = getCurrentRevisionTransitiveRevisionsClosure(rootBundleId, namespace);
1: 
0:         TabularData td = new TabularDataSupport(BundleRevisionsStateMBean.BUNDLE_WIRING_CLOSURE_TYPE);
1:         for (Map.Entry<BundleRevision, Integer> entry : revisionIDMap.entrySet()) {
1:             td.put(getRevisionWiring(entry.getKey(), entry.getValue(), namespace, revisionIDMap));
1:         }
1: 
1:         return td;
1:     }
1: 
1:     // The current revision being passed in always gets assigned revision ID 0
1:     // All the other revision IDs unique, but don't increase monotonous.
1:     private Map<BundleRevision, Integer> getCurrentRevisionTransitiveRevisionsClosure(long rootBundleId, String namespace) throws IOException {
0:         Map<BundleRevision, Integer> revisionIDMap = new HashMap<BundleRevision, Integer>();
1: 
1:         Bundle rootBundle = FrameworkUtils.resolveBundle(bundleContext, rootBundleId);
1:         BundleRevision rootRevision = rootBundle.adapt(BundleRevision.class);
1:         populateTransitiveRevisions(namespace, rootRevision, revisionIDMap);
1: 
1:         // Set the root revision ID to 0,
1:         // TODO check if there is already a revision with ID 0 and if so swap them. Quite a small chance that this will be needed
1:         revisionIDMap.put(rootRevision, 0);
1:         return revisionIDMap;
1:     }
1: 
1:     private void populateTransitiveRevisions(String namespace, BundleRevision rootRevision, Map<BundleRevision, Integer> allRevisions) {
0:         allRevisions.put(rootRevision, rootRevision.hashCode());
1:         BundleWiring wiring = rootRevision.getWiring();
0:         List<BundleWire> wires = wiring.getRequiredWires(namespace);
0:         for (BundleWire wire : wires) {
1:             BundleRevision revision = wire.getCapability().getRevision();
1:             if (!allRevisions.containsKey(revision)) {
1:                 populateTransitiveRevisions(namespace, revision, allRevisions);
1:             }
1:         }
commit:200f5ce
/////////////////////////////////////////////////////////////////////////
1:         BundleRevision revision = bundle.adapt(BundleRevision.class);
0:         BundleRequirementsData data = new BundleRequirementsData(revision.getDeclaredRequirements(namespace));
commit:91e4c4b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jmx.codec.BundleRequirementsData;
/////////////////////////////////////////////////////////////////////////
1:     public CompositeData[] getCurrentRevisionDeclaredRequirements(long bundleId, String namespace) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
0:         BundleWiring wiring = bundle.adapt(BundleWiring.class);
1: 
0:         BundleRequirementsData data = new BundleRequirementsData(wiring.getRequirements(namespace));
0:         return data.toCompositeData();
/////////////////////////////////////////////////////////////////////////
0:     public ArrayType getRevisionsDeclaredRequirements(long bundleId, String namespace) {
/////////////////////////////////////////////////////////////////////////
0:     public ArrayType getRevisionsDeclaredCapabilities(long bundleId, String namespace) {
commit:0e0d5fd
/////////////////////////////////////////////////////////////////////////
0:         List<BundleWire> providedWires = wiring.getProvidedWires(namespace);
0:         BundleWiringData data = new BundleWiringData(bundle.getBundleId(), capabilities, requirements, providedWires, requiredWires);
commit:516dd36
/////////////////////////////////////////////////////////////////////////
0:         BundleWiringData data = new BundleWiringData(bundle.getBundleId(), capabilities, requirements, requiredWires);
0:         return data.toCompositeData();
commit:fd3ae03
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRequirement;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
0:         BundleWiring wiring = currentRevision.getWiring();
0:         List<BundleCapability> capabilities = wiring.getCapabilities(namespace);
0:         List<BundleRequirement> requirements = wiring.getRequirements(namespace);
0:         List<BundleWire> requiredWires = wiring.getRequiredWires(namespace);
0:         BundleWiringData data = new BundleWiringData(bundle.getBundleId(), namespace, capabilities, requirements, requiredWires);
commit:bf5a863
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.aries.jmx.framework;
1: 
1: import java.io.IOException;
1: 
0: import javax.management.openmbean.ArrayType;
1: import javax.management.openmbean.CompositeData;
0: import javax.management.openmbean.CompositeType;
1: 
1: import org.apache.aries.jmx.Logger;
1: import org.apache.aries.jmx.codec.BundleWiringData;
1: import org.apache.aries.jmx.util.FrameworkUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.wiring.BundleRevision;
0: import org.osgi.jmx.framework.BundleRevisionsStateMBean;
1: 
0: public class BundleRevisionsState implements BundleRevisionsStateMBean {
1:     private final BundleContext bundleContext;
1:     private final Logger logger;
1: 
1: 
0:     public BundleRevisionsState(BundleContext bundleContext, Logger logger) {
1:         this.bundleContext = bundleContext;
1:         this.logger = logger;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentRevisionDeclaredRequirements(long, java.lang.String)
1:      */
0:     public ArrayType getCurrentRevisionDeclaredRequirements(long bundleId, String namespace) {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentRevisionDeclaredCapabilities(long, java.lang.String)
1:      */
0:     public ArrayType getCurrentRevisionDeclaredCapabilities(long bundleId, String namespace) {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentWiring(long, java.lang.String)
1:      */
1:     public CompositeData getCurrentWiring(long bundleId, String namespace) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(bundleContext, bundleId);
1:         BundleRevision currentRevision = bundle.adapt(BundleRevision.class);
1: 
0:         System.out.println("******** getCurrentWiring: " + bundle);
0:         BundleWiringData data = new BundleWiringData(bundle.getBundleId());
0:         CompositeData compositeData = data.toCompositeData();
0:         System.out.println("######## " + compositeData);
0:         return compositeData;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getCurrentWiringClosure(long)
1:      */
0:     public CompositeData getCurrentWiringClosure(long rootBundleId) throws IOException {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getRevisionsDeclaredRequirements(long, java.lang.String, boolean)
1:      */
0:     public ArrayType getRevisionsDeclaredRequirements(long bundleId, String namespace, boolean inUse) {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getRevisionsDeclaredCapabilities(long, java.lang.String, boolean)
1:      */
0:     public ArrayType getRevisionsDeclaredCapabilities(long bundleId, String namespace, boolean inUse) {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getRevisionsWiring(long, java.lang.String)
1:      */
0:     public ArrayType getRevisionsWiring(long bundleId, String namespace) {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#getWiringClosure(long, java.lang.String)
1:      */
0:     public ArrayType getWiringClosure(long rootBundleId, String namespace) {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
1:     /* (non-Javadoc)
0:      * @see org.osgi.jmx.framework.BundleRevisionsStateMBean#matches(javax.management.openmbean.CompositeType, javax.management.openmbean.CompositeType)
1:      */
0:     public boolean matches(CompositeType provider, CompositeType requirer) {
0:         // TODO Auto-generated method stub
0:         return false;
1:     }
1: }
============================================================================