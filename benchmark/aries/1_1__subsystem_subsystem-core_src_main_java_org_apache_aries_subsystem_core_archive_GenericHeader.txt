1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
11:fea3a1c: 
1:fea3a1c: import java.util.Collection;
1:fea3a1c: import java.util.Collections;
1:fea3a1c: 
1:2ffcfb9: public class GenericHeader extends AbstractClauseBasedHeader<GenericHeader.Clause> {
1:2ffcfb9: 	public static class Clause extends AbstractClause {
1:fea3a1c: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9: 					clause,
1:2ffcfb9: 					Collections.<String, Parameter>emptyMap(),
1:2ffcfb9: 	        		generateDefaultParameters());
11:fea3a1c: 		}
1:fea3a1c: 	}
1:fea3a1c: 	
1:fea3a1c: 	private final String name;
1:fea3a1c: 	
1:fea3a1c: 	public GenericHeader(String name, Collection<Clause> clauses) {
1:2ffcfb9: 	    super(clauses);
1:fea3a1c: 		this.name = name;
1:fea3a1c: 	}
1:fea3a1c: 	
1:1129914: 	public GenericHeader(String name, String value) {
1:2ffcfb9: 		super(
1:8ab013a: 				value.isEmpty() ? "\"\"" : value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:2ffcfb9: 		this.name = name;
1:fea3a1c: 	}
1:fea3a1c: 
4:fea3a1c: 	@Override
1:fea3a1c: 	public String getName() {
1:fea3a1c: 		return name;
1:fea3a1c: 	}
1:fea3a1c: 
1:fea3a1c: 	@Override
1:fea3a1c: 	public String getValue() {
1:fea3a1c: 		return toString();
1:fea3a1c: 	}
1:fea3a1c: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8ab013a
/////////////////////////////////////////////////////////////////////////
1: 				value.isEmpty() ? "\"\"" : value, 
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class GenericHeader extends AbstractClauseBasedHeader<GenericHeader.Clause> {
1: 	public static class Clause extends AbstractClause {
1: 			super(
1: 					clause,
1: 					Collections.<String, Parameter>emptyMap(),
1: 	        		generateDefaultParameters());
1: 	    super(clauses);
1: 		super(
0: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1: 		this.name = name;
/////////////////////////////////////////////////////////////////////////
commit:fea3a1c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Collections;
0: import java.util.HashSet;
0: import java.util.Set;
1: 
0: public class GenericHeader implements Header<GenericHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		private final String path;
1: 		
1: 		public Clause(String clause) {
0: 			path = clause;
1: 		}
1: 		
0: 		public Attribute getAttribute(String name) {
0: 			return null;
1: 		}
1: 		
0: 		public Collection<Attribute> getAttributes() {
0: 			return Collections.emptyList();
1: 		}
1: 		
0: 		public Directive getDirective(String name) {
0: 			return null;
1: 		}
1: 		
0: 		public Collection<Directive> getDirectives() {
0: 			return Collections.emptyList();
1: 		}
1: 		
0: 		public Parameter getParameter(String name) {
0: 			return null;
1: 		}
1: 		
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.emptyList();
1: 		}
1: 		
0: 		public String getPath() {
0: 			return path;
1: 		}
1: 		
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	private final String name;
1: 	
1: 	public GenericHeader(String name, Collection<Clause> clauses) {
1: 		this.name = name;
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
0: 		this(name, Collections.singletonList(new Clause(value)));
1: 	}
1: 
1: 	@Override
0: 	public Collection<Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return name;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
0: 
0: public class GenericHeader extends AbstractHeader {
1: 	public GenericHeader(String name, String value) {
0: 		super(name, value);
0: 	}
0: }
============================================================================