1:fc02f66: /*
1:fc02f66:  * Licensed to the Apache Software Foundation (ASF) under one
1:fc02f66:  * or more contributor license agreements.  See the NOTICE file
1:fc02f66:  * distributed with this work for additional information
1:fc02f66:  * regarding copyright ownership.  The ASF licenses this file
1:fc02f66:  * to you under the Apache License, Version 2.0 (the
1:fc02f66:  * "License"); you may not use this file except in compliance
1:fc02f66:  * with the License.  You may obtain a copy of the License at
1:fc02f66:  *
1:fc02f66:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fc02f66:  *
1:fc02f66:  * Unless required by applicable law or agreed to in writing,
1:fc02f66:  * software distributed under the License is distributed on an
1:3c19a77:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fc02f66:  * KIND, either express or implied.  See the License for the
1:fc02f66:  * specific language governing permissions and limitations
1:fc02f66:  * under the License.
1:fc02f66:  */
1:fc02f66: package org.apache.aries.jndi.startup;
1:4b48331: 
1:99452a8: import java.lang.reflect.Field;
1:4b48331: import java.util.Arrays;
1:4b48331: 
1:fc02f66: import javax.naming.NamingException;
1:4b48331: import javax.naming.spi.InitialContextFactory;
1:4bf53f2: import javax.naming.spi.InitialContextFactoryBuilder;
1:fc02f66: import javax.naming.spi.NamingManager;
1:4b48331: import javax.naming.spi.ObjectFactory;
1:99452a8: import javax.naming.spi.ObjectFactoryBuilder;
1:4b48331: 
1:4bf53f2: import org.apache.aries.jndi.ContextManagerServiceFactory;
1:4bf53f2: import org.apache.aries.jndi.JREInitialContextFactoryBuilder;
1:fc02f66: import org.apache.aries.jndi.OSGiInitialContextFactoryBuilder;
1:fc02f66: import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
1:7b2544b: import org.apache.aries.jndi.ProviderAdminServiceFactory;
1:4b48331: import org.apache.aries.jndi.Utils;
1:d90eeba: import org.apache.aries.jndi.AugmenterInvokerImpl;
1:5140ce3: import org.apache.aries.jndi.spi.EnvironmentAugmentation;
1:d90eeba: import org.apache.aries.jndi.spi.EnvironmentUnaugmentation;
1:d90eeba: import org.apache.aries.jndi.spi.AugmenterInvoker;
1:4b48331: import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
1:4b48331: import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
1:b756d71: import org.osgi.framework.BundleActivator;
1:b756d71: import org.osgi.framework.BundleContext;
1:4b48331: import org.osgi.framework.ServiceReference;
1:b756d71: import org.osgi.service.jndi.JNDIContextManager;
1:b756d71: import org.osgi.service.jndi.JNDIProviderAdmin;
1:4b48331: import org.osgi.util.tracker.ServiceTracker;
1:4b48331: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:6263fd0: import org.slf4j.Logger;
1:6263fd0: import org.slf4j.LoggerFactory;
1:4b48331: 
1:fc02f66: /**
1:fc02f66:  * The activator for this bundle makes sure the static classes in it are
1:fc02f66:  * driven so they can do their magic stuff properly.
1:fc02f66:  */
1:4bf53f2: public class Activator implements BundleActivator {
1:6263fd0: 
1:6263fd0:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
9:4b48331: 
1:99452a8:     private OSGiInitialContextFactoryBuilder icfBuilder;
1:99452a8:     private OSGiObjectFactoryBuilder ofBuilder;
1:4b48331:     private static ServiceTracker icfBuilders;
1:4b48331:     private static ServiceTracker urlObjectFactoryFinders;
1:4b48331:     private static ServiceTracker initialContextFactories;
1:4b48331:     private static ServiceTracker objectFactories;
1:5140ce3:     private static ServiceTracker environmentAugmentors;
1:d90eeba:     private static ServiceTracker environmentUnaugmentors;
1:be0a722: 
1:4bf53f2:     public void start(BundleContext context) {
1:be0a722: 
1:4b48331:         initialContextFactories = initServiceTracker(context, InitialContextFactory.class, ServiceTrackerCustomizers.ICF_CACHE);
1:4b48331:         objectFactories = initServiceTracker(context, ObjectFactory.class, ServiceTrackerCustomizers.URL_FACTORY_CACHE);
1:7f6baa5:         icfBuilders = initServiceTracker(context, InitialContextFactoryBuilder.class, ServiceTrackerCustomizers.LAZY);
1:7f6baa5:         urlObjectFactoryFinders = initServiceTracker(context, URLObjectFactoryFinder.class, ServiceTrackerCustomizers.LAZY);
1:5140ce3:         environmentAugmentors = initServiceTracker(context, EnvironmentAugmentation.class, null);
1:d90eeba:         environmentUnaugmentors = initServiceTracker(context, EnvironmentUnaugmentation.class, null);
1:be0a722: 
2:4bf53f2:         try {
1:b756d71:             OSGiInitialContextFactoryBuilder builder = new OSGiInitialContextFactoryBuilder();
1:99452a8:             NamingManager.setInitialContextFactoryBuilder(builder);
1:99452a8:             icfBuilder = builder;
1:4bf53f2:         } catch (NamingException e) {
1:6263fd0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB"), e);
1:99452a8:         } catch (IllegalStateException e) {
1:3ec4774:             // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
1:3ec4774:             // don't want to see stack traces at info level when everything it working as expected.
1:fe0a29e:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)));
1:fe0a29e:             LOGGER.debug(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
5:4bf53f2:         }
1:be0a722: 
1:99452a8:         try {
1:99452a8:             OSGiObjectFactoryBuilder builder = new OSGiObjectFactoryBuilder(context);
1:99452a8:             NamingManager.setObjectFactoryBuilder(builder);
1:99452a8:             ofBuilder = builder;
1:4bf53f2:         } catch (NamingException e) {
1:6263fd0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB"), e);
1:4bf53f2:         } catch (IllegalStateException e) {
1:3ec4774:             // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
1:3ec4774:             // don't want to see stack traces at info level when everything it working as expected.
1:fe0a29e:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(InitialContextFactoryBuilder.class)));
1:fe0a29e:             LOGGER.debug(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
1:99452a8:         }
1:be0a722: 
1:be0a722:         context.registerService(JNDIProviderAdmin.class.getName(),
1:be0a722:                                 new ProviderAdminServiceFactory(context),
2:b756d71:                                 null);
1:d90eeba: 
1:be0a722:         context.registerService(InitialContextFactoryBuilder.class.getName(),
1:be0a722:                                 new JREInitialContextFactoryBuilder(),
1:b756d71:                                 null);
1:be0a722: 
1:be0a722:         context.registerService(JNDIContextManager.class.getName(),
1:b756d71:                                 new ContextManagerServiceFactory(),
1:d90eeba:                                 null);
1:7f6baa5:                context.registerService(AugmenterInvoker.class.getName(),
1:7f6baa5:                                                AugmenterInvokerImpl.getInstance(),
1:7f6baa5:                                                null);
1:d90eeba: 
1:4bf53f2:     }
1:5140ce3: 
1:be0a722:     private String getClassName(Class<?> expectedType)
1:5ee7638:     {
1:5ee7638:       try {
1:5ee7638:         for (Field field : NamingManager.class.getDeclaredFields()) {
1:5ee7638:             if (expectedType.equals(field.getType())) {
1:5ee7638:                 field.setAccessible(true);
1:5ee7638:                 Object icf = field.get(null);
1:5ee7638:                 return icf.getClass().getName();
1:5ee7638:             }
1:5ee7638:         }
1:5ee7638:       } catch (Throwable t) {
1:6263fd0:           // Ignore
1:5ee7638:       }
1:5ee7638:       return "";
1:5ee7638:     }
1:5ee7638: 
1:4b48331:     private ServiceTracker initServiceTracker(BundleContext context,
1:be0a722:         Class<?> type, ServiceTrackerCustomizer custom)
1:4b48331:     {
1:4b48331:       ServiceTracker t = new ServiceTracker(context, type.getName(), custom);
1:4b48331:       t.open();
1:4b48331:       return t;
1:4b48331:     }
1:4b48331: 
1:4bf53f2:     public void stop(BundleContext context) {
1:99452a8:         /*
1:99452a8:          * Try to reset the InitialContextFactoryBuilder and ObjectFactoryBuilder
1:be0a722:          * on the NamingManager.
1:99452a8:          */
1:99452a8:         if (icfBuilder != null) {
1:99452a8:             unsetField(InitialContextFactoryBuilder.class);
1:99452a8:         }
1:99452a8:         if (ofBuilder != null) {
1:99452a8:             unsetField(ObjectFactoryBuilder.class);
1:99452a8:         }
1:be0a722: 
1:4b48331:         icfBuilders.close();
1:4b48331:         urlObjectFactoryFinders.close();
1:4b48331:         objectFactories.close();
1:4b48331:         initialContextFactories.close();
1:5140ce3:         environmentAugmentors.close();
1:d90eeba:         environmentUnaugmentors.close();
1:31b19f1:     }
1:31b19f1: 
1:99452a8:     /*
1:99452a8:      * There are no public API to reset the InitialContextFactoryBuilder or
1:be0a722:      * ObjectFactoryBuilder on the NamingManager so try to use reflection.
1:99452a8:      */
1:99452a8:     private static void unsetField(Class<?> expectedType) {
1:99452a8:         try {
1:99452a8:             for (Field field : NamingManager.class.getDeclaredFields()) {
1:99452a8:                 if (expectedType.equals(field.getType())) {
1:99452a8:                     field.setAccessible(true);
1:b756d71:                     field.set(null, null);
1:99452a8:                 }
1:99452a8:             }
1:99452a8:         } catch (Throwable t) {
1:5ee7638:             // Ignore
1:6263fd0:             LOGGER.debug("Error setting field.", t);
1:99452a8:         }
1:99452a8:     }
1:31b19f1: 
1:4b48331:     public static ServiceReference[] getInitialContextFactoryBuilderServices()
2:4b48331:     {
1:4b48331:       ServiceReference[] refs = icfBuilders.getServiceReferences();
1:614e830: 
2:4b48331:       if (refs != null) Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:be0a722: 
2:4b48331:       return refs;
1:4b48331:     }
1:be0a722: 
1:be0a722:     public static ServiceReference[] getInitialContextFactoryServices()
1:4b48331:     {
1:be0a722:       ServiceReference[] refs = initialContextFactories.getServiceReferences();
1:be0a722: 
1:4b48331:       if (refs != null) Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:be0a722: 
1:4b48331:       return refs;
1:4b48331:     }
1:be0a722: 
1:be0a722:     public static ServiceReference[] getURLObectFactoryFinderServices()
1:be0a722:     {
1:be0a722:       ServiceReference[] refs = urlObjectFactoryFinders.getServiceReferences();
1:be0a722: 
1:be0a722:       if (refs != null) Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:be0a722: 
1:be0a722:       return refs;
1:be0a722:     }
1:be0a722: 
1:5140ce3:     public static Object[] getEnvironmentAugmentors()
1:5140ce3:     {
1:5140ce3:       return environmentAugmentors.getServices();
1:5140ce3:     }
1:d90eeba: 
1:d90eeba:     public static Object[] getEnvironmentUnaugmentors()
1:d90eeba:     {
1:d90eeba:       return environmentUnaugmentors.getServices();
1:d90eeba:     }
1:d90eeba: 
1:4b48331: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:7f6baa5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         icfBuilders = initServiceTracker(context, InitialContextFactoryBuilder.class, ServiceTrackerCustomizers.LAZY);
1:         urlObjectFactoryFinders = initServiceTracker(context, URLObjectFactoryFinder.class, ServiceTrackerCustomizers.LAZY);
/////////////////////////////////////////////////////////////////////////
1:                context.registerService(AugmenterInvoker.class.getName(),
1:                                                AugmenterInvokerImpl.getInstance(),
1:                                                null);
/////////////////////////////////////////////////////////////////////////
commit:d90eeba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jndi.AugmenterInvokerImpl;
1: import org.apache.aries.jndi.spi.EnvironmentUnaugmentation;
1: import org.apache.aries.jndi.spi.AugmenterInvoker;
/////////////////////////////////////////////////////////////////////////
1:     private static ServiceTracker environmentUnaugmentors;
/////////////////////////////////////////////////////////////////////////
1:         environmentUnaugmentors = initServiceTracker(context, EnvironmentUnaugmentation.class, null);
/////////////////////////////////////////////////////////////////////////
1: 
0: 		context.registerService(AugmenterInvoker.class.getName(),
0: 				                AugmenterInvokerImpl.getInstance(),
1: 				                null);        
1:         
/////////////////////////////////////////////////////////////////////////
1:         environmentUnaugmentors.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static Object[] getEnvironmentUnaugmentors()
1:     {
1:       return environmentUnaugmentors.getServices();
1:     }
1: 
commit:31b19f1
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Bundle;
0: import org.osgi.util.tracker.BundleTracker;
/////////////////////////////////////////////////////////////////////////
0:     private BundleTracker bt = null;
0:         icfBuilders = initServiceTracker(context, InitialContextFactoryBuilder.class, ServiceTrackerCustomizers.ICFB_CACHE);
0:         urlObjectFactoryFinders = initServiceTracker(context, URLObjectFactoryFinder.class, ServiceTrackerCustomizers.URLOBJFACTORYFINDER_CACHE);
/////////////////////////////////////////////////////////////////////////
0:         //Start the bundletracker that clears out the cache. (only interested in stopping events)
0:         bt = new BundleTracker(context,Bundle.STOPPING,new ServiceTrackerCustomizers.CacheBundleTrackerCustomizer());
0:         bt.open();
/////////////////////////////////////////////////////////////////////////
1:                 
0:         if (bt != null) {
0:           bt.close();
1:         }
1:         
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:3ec4774
/////////////////////////////////////////////////////////////////////////
1:             // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
1:             // don't want to see stack traces at info level when everything it working as expected.
/////////////////////////////////////////////////////////////////////////
1:             // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
1:             // don't want to see stack traces at info level when everything it working as expected.
commit:fe0a29e
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)));
1:             LOGGER.debug(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(InitialContextFactoryBuilder.class)));
1:             LOGGER.debug(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
commit:6263fd0
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB"), e);
0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB"), e);
0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             // Ignore
1:             LOGGER.debug("Error setting field.", t);
commit:614e830
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.log.Logger;
0: import org.osgi.service.log.LogService;
0:     private static Logger logger;
/////////////////////////////////////////////////////////////////////////
0:         logger = new Logger(context);
0:         logger.open();
/////////////////////////////////////////////////////////////////////////
0:             logger.log(LogService.LOG_INFO, Utils.MESSAGES.getMessage("unable.to.set.static.ICFB"), e);
0:             logger.log(LogService.LOG_INFO, Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
/////////////////////////////////////////////////////////////////////////
0:             logger.log(LogService.LOG_INFO, Utils.MESSAGES.getMessage("unable.to.set.static.OFB"), e);
0:             logger.log(LogService.LOG_INFO, Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (logger != null)
0:             logger.close();
/////////////////////////////////////////////////////////////////////////
0:             if (logger != null)
0:                 logger.log(LogService.LOG_DEBUG, "Error setting field.", t);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:9c42dfb
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB"), e);
0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB"), e);
0:             LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
commit:be0a722
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:             LOGGER.info("Cannot set the InitialContextFactoryBuilder.", e);
0:             LOGGER.info("Cannot set the InitialContextFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
1: 
0:             LOGGER.info("Cannot set the ObjectFactoryBuilder.", e);
0:             LOGGER.info("Cannot set the ObjectFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
1: 
1:         context.registerService(JNDIProviderAdmin.class.getName(),
1:                                 new ProviderAdminServiceFactory(context),
1:         context.registerService(InitialContextFactoryBuilder.class.getName(),
1:                                 new JREInitialContextFactoryBuilder(),
1:         context.registerService(JNDIContextManager.class.getName(),
1:     private String getClassName(Class<?> expectedType)
/////////////////////////////////////////////////////////////////////////
1:         Class<?> type, ServiceTrackerCustomizer custom)
/////////////////////////////////////////////////////////////////////////
1:          * on the NamingManager.
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      * ObjectFactoryBuilder on the NamingManager so try to use reflection.
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.debug("Error setting field.", t);
1: 
1: 
1:     public static ServiceReference[] getInitialContextFactoryServices()
1:       ServiceReference[] refs = initialContextFactories.getServiceReferences();
1: 
1: 
1: 
1:     public static ServiceReference[] getURLObectFactoryFinderServices()
1:     {
1:       ServiceReference[] refs = urlObjectFactoryFinders.getServiceReferences();
1: 
1:       if (refs != null) Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1: 
1:       return refs;
1:     }
1: 
commit:5ee7638
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.log(Level.INFO, "Cannot set the InitialContextFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.log(Level.INFO, "Cannot set the ObjectFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
/////////////////////////////////////////////////////////////////////////
0:     private String getClassName(Class<?> expectedType) 
1:     {
1:       try {
1:         for (Field field : NamingManager.class.getDeclaredFields()) {
1:             if (expectedType.equals(field.getType())) {
1:                 field.setAccessible(true);
1:                 Object icf = field.get(null);
1:                 return icf.getClass().getName();
1:             }
1:         }
1:       } catch (Throwable t) {
1:           // Ignore
1:       }
1:       return "";
1:     }
1: 
commit:5140ce3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jndi.spi.EnvironmentAugmentation;
/////////////////////////////////////////////////////////////////////////
1:     private static ServiceTracker environmentAugmentors;
/////////////////////////////////////////////////////////////////////////
1:         environmentAugmentors = initServiceTracker(context, EnvironmentAugmentation.class, null);
/////////////////////////////////////////////////////////////////////////
1:         environmentAugmentors.close();
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static Object[] getEnvironmentAugmentors()
1:     {
1:       return environmentAugmentors.getServices();
1:     }
commit:4b48331
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import javax.naming.spi.InitialContextFactory;
1: import javax.naming.spi.ObjectFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jndi.Utils;
1: import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
1: import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
/////////////////////////////////////////////////////////////////////////
1:     private static ServiceTracker icfBuilders;
1:     private static ServiceTracker urlObjectFactoryFinders;
1:     private static ServiceTracker initialContextFactories;
1:     private static ServiceTracker objectFactories;
1:         
1:         initialContextFactories = initServiceTracker(context, InitialContextFactory.class, ServiceTrackerCustomizers.ICF_CACHE);
1:         objectFactories = initServiceTracker(context, ObjectFactory.class, ServiceTrackerCustomizers.URL_FACTORY_CACHE);
0:         icfBuilders = initServiceTracker(context, InitialContextFactoryBuilder.class, ServiceTrackerCustomizers.LAZY);
0:         urlObjectFactoryFinders = initServiceTracker(context, URLObjectFactoryFinder.class, ServiceTrackerCustomizers.LAZY);
1:         
/////////////////////////////////////////////////////////////////////////
1:     private ServiceTracker initServiceTracker(BundleContext context,
0:         Class<?> type, ServiceTrackerCustomizer custom) 
1:     {
1:       ServiceTracker t = new ServiceTracker(context, type.getName(), custom);
1:       t.open();
1:       return t;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         
1:         icfBuilders.close();
1:         urlObjectFactoryFinders.close();
1:         objectFactories.close();
1:         initialContextFactories.close();
1:         
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static ServiceReference[] getInitialContextFactoryBuilderServices()
1:     {
1:       ServiceReference[] refs = icfBuilders.getServiceReferences();
1:       
1:       if (refs != null) Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:       
1:       return refs;
1:     }
1:     
0:     public static ServiceReference[] getInitialContextFactoryServices() 
1:     {
0:       ServiceReference[] refs = initialContextFactories.getServiceReferences();
1:       
1:       if (refs != null) Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:       
1:       return refs;
1:     }
1: 
0:     public static ServiceReference[] getURLObectFactoryFinderServices() 
1:     {
0:       ServiceReference[] refs = urlObjectFactoryFinders.getServiceReferences();
1:       
1:       if (refs != null) Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:       
1:       return refs;
1:     }
commit:b756d71
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.jndi.JNDIContextManager;
1: import org.osgi.service.jndi.JNDIProviderAdmin;
/////////////////////////////////////////////////////////////////////////
1:             OSGiInitialContextFactoryBuilder builder = new OSGiInitialContextFactoryBuilder();
/////////////////////////////////////////////////////////////////////////
0:         context.registerService(JNDIProviderAdmin.class.getName(), 
0:                                 new ProviderAdminServiceFactory(context), 
1:                                 null);
0:         context.registerService(InitialContextFactoryBuilder.class.getName(), 
0:                                 new JREInitialContextFactoryBuilder(), 
1:                                 null);
0:         context.registerService(JNDIContextManager.class.getName(), 
1:                                 new ContextManagerServiceFactory(),
1:                                 null);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     field.set(null, null);
0:           t.printStackTrace();
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:49d4ef7
/////////////////////////////////////////////////////////////////////////
0: import java.util.logging.Level;
0: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
0: 
0:     private static final Logger LOGGER = Logger.getLogger(Activator.class.getName());
0: 
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.log(Level.INFO, "Cannot set the InitialContextFactoryBuilder.", e);
0:             LOGGER.log(Level.INFO, "Cannot set the InitialContextFactoryBuilder. Another builder is already installed", e);
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.log(Level.INFO, "Cannot set the ObjectFactoryBuilder.", e);
0:             LOGGER.log(Level.INFO, "Cannot set the ObjectFactoryBuilder. Another builder is already installed", e);
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.log(Level.FINE, "Error setting field.", t);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:99452a8
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
1: import javax.naming.spi.ObjectFactoryBuilder;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private OSGiInitialContextFactoryBuilder icfBuilder;
1:     private OSGiObjectFactoryBuilder ofBuilder;
0:             OSGiInitialContextFactoryBuilder builder = new OSGiInitialContextFactoryBuilder(context);
1:             NamingManager.setInitialContextFactoryBuilder(builder);
1:             icfBuilder = builder;
1:         } catch (IllegalStateException e) {
0:             System.err.println("Cannot set the InitialContextFactoryBuilder. Another builder is already installed");
1:             OSGiObjectFactoryBuilder builder = new OSGiObjectFactoryBuilder(context);
1:             NamingManager.setObjectFactoryBuilder(builder);
1:             ofBuilder = builder;
0:             System.err.println("Cannot set the ObjectFactoryBuilder. Another builder is already installed");
/////////////////////////////////////////////////////////////////////////
1:         /*
1:          * Try to reset the InitialContextFactoryBuilder and ObjectFactoryBuilder
0:          * on the NamingManager. 
1:          */
1:         if (icfBuilder != null) {
1:             unsetField(InitialContextFactoryBuilder.class);
1:         }
1:         if (ofBuilder != null) {
1:             unsetField(ObjectFactoryBuilder.class);
1:         }
0:         
0:     
1:     /*
1:      * There are no public API to reset the InitialContextFactoryBuilder or
0:      * ObjectFactoryBuilder on the NamingManager so try to use reflection. 
1:      */
1:     private static void unsetField(Class<?> expectedType) {
1:         try {
1:             for (Field field : NamingManager.class.getDeclaredFields()) {
1:                 if (expectedType.equals(field.getType())) {
0:                     boolean accessible = field.isAccessible();
1:                     field.setAccessible(true);
1:                     try {
0:                         field.set(null, null);
0:                     } finally {
0:                         field.setAccessible(accessible);
1:                     }
1:                 }
1:             }
1:         } catch (Throwable t) {
0:             // Ignore
1:         }
1:     }
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jndi.ProviderAdminServiceFactory;
/////////////////////////////////////////////////////////////////////////
0:           
/////////////////////////////////////////////////////////////////////////
0:             NamingManager.setObjectFactoryBuilder(new OSGiObjectFactoryBuilder(context));
0:         
0:         registrations.add(context.registerService(JNDIProviderAdmin.class.getName(), 
0:                           new ProviderAdminServiceFactory(context), 
0:                           null));
0: 
0:         registrations.add(context.registerService(InitialContextFactoryBuilder.class.getName(), 
0:                           new JREInitialContextFactoryBuilder(), 
0:                           null));
0: 
0:         registrations.add(context.registerService(JNDIContextManager.class.getName(), 
0:                           new ContextManagerServiceFactory(context),
0:                           null));
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.jndi.JNDIProviderAdmin;
0: import org.apache.aries.jndi.ProviderAdminService;
/////////////////////////////////////////////////////////////////////////
0:         registrations.add(context.registerService(JNDIProviderAdmin.class.getName(), 
0:                                                   new ProviderAdminService(context), 
0:                                                   null));
0:         
commit:4bf53f2
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
0: 
1: import javax.naming.spi.InitialContextFactoryBuilder;
0: import org.osgi.framework.ServiceRegistration;
0: import org.osgi.service.jndi.JNDIContextManager;
1: import org.apache.aries.jndi.ContextManagerServiceFactory;
1: import org.apache.aries.jndi.JREInitialContextFactoryBuilder;
/////////////////////////////////////////////////////////////////////////
1: public class Activator implements BundleActivator {
0:     private List<ServiceRegistration> registrations = new ArrayList<ServiceRegistration>();
0:     
1:     public void start(BundleContext context) {
0:   
0:         registrations.add(context.registerService(InitialContextFactoryBuilder.class.getName(), 
0:                                                  new JREInitialContextFactoryBuilder(), 
0:                                                  null));
0:         
0:         ContextManagerServiceFactory contextManagerFactory = new ContextManagerServiceFactory();
0:         registrations.add(context.registerService(JNDIContextManager.class.getName(), 
0:                                                   contextManagerFactory, 
0:                                                   null));
0:         
0:         ContextHelper.setBundleContext(context);
0:         OSGiObjectFactoryBuilder.setBundleContext(context);
0:   
1:         try {
0:             if (!!!NamingManager.hasInitialContextFactoryBuilder()) {
0:                 NamingManager.setInitialContextFactoryBuilder(new OSGiInitialContextFactoryBuilder(context));
1:             }
1:         } catch (NamingException e) {
0:             //    TODO Auto-generated catch block
0:             e.printStackTrace();
1:         }
0:     
1:         try {
0:             NamingManager.setObjectFactoryBuilder(new OSGiObjectFactoryBuilder());
1:         } catch (NamingException e) {
0:             // TODO Auto-generated catch block
0:             e.printStackTrace();
1:         } catch (IllegalStateException e) {
0:             e.printStackTrace();
1:         }
1:     public void stop(BundleContext context) {
0:         for (ServiceRegistration registration : registrations) {
0:             registration.unregister();
1:         }
0:         registrations.clear();
1:     }
1: }
commit:3c19a77
/////////////////////////////////////////////////////////////////////////
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
commit:e6f69cc
commit:fc02f66
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.startup;
0: 
1: import javax.naming.NamingException;
1: import javax.naming.spi.NamingManager;
0: 
0: import org.osgi.framework.BundleActivator;
0: import org.osgi.framework.BundleContext;
0: 
0: import org.apache.aries.jndi.ContextHelper;
1: import org.apache.aries.jndi.OSGiInitialContextFactoryBuilder;
1: import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
0: 
1: /**
1:  * The activator for this bundle makes sure the static classes in it are
1:  * driven so they can do their magic stuff properly.
1:  */
0: public class Activator implements BundleActivator
0: {
0:   public void start(BundleContext context)
0:   {
0:     ContextHelper.setBundleContext(context);
0:     OSGiObjectFactoryBuilder.setBundleContext(context);
0:   
0:     try {
0:       if (!!!NamingManager.hasInitialContextFactoryBuilder()) {
0:         NamingManager.setInitialContextFactoryBuilder(new OSGiInitialContextFactoryBuilder(context));
0:       }
0:     } catch (NamingException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
0:     }
0:     
0:     try {
0:       NamingManager.setObjectFactoryBuilder(new OSGiObjectFactoryBuilder());
0:     } catch (NamingException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
0:     } catch (IllegalStateException e) {
0:       e.printStackTrace();
0:     }
0:   }
0: 
0:   public void stop(BundleContext context) {}
commit:1a3015d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.jndi.startup;
0: 
0: import javax.naming.NamingException;
0: import javax.naming.spi.NamingManager;
0: 
0: import org.osgi.framework.BundleActivator;
0: import org.osgi.framework.BundleContext;
0: 
0: import org.apache.aries.jndi.ContextHelper;
0: import org.apache.aries.jndi.OSGiInitialContextFactoryBuilder;
0: import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
0: 
0: /**
0:  * The activator for this bundle makes sure the static classes in it are
0:  * driven so they can do their magic stuff properly.
0:  */
0: public class Activator implements BundleActivator
0: {
0:   public void start(BundleContext context)
0:   {
0:     ContextHelper.setBundleContext(context);
0:     OSGiObjectFactoryBuilder.setBundleContext(context);
0:   
0:     try {
0:       if (!!!NamingManager.hasInitialContextFactoryBuilder()) {
0:         NamingManager.setInitialContextFactoryBuilder(new OSGiInitialContextFactoryBuilder(context));
0:       }
0:     } catch (NamingException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
0:     }
0:     
0:     try {
0:       NamingManager.setObjectFactoryBuilder(new OSGiObjectFactoryBuilder());
0:     } catch (NamingException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
0:     } catch (IllegalStateException e) {
0:       e.printStackTrace();
0:     }
0:   }
0: 
0:   public void stop(BundleContext context) {}
0: }
============================================================================