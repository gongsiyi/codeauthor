1:9e140bf: /*
1:9e140bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:9e140bf:  * or more contributor license agreements.  See the NOTICE file
1:9e140bf:  * distributed with this work for additional information
1:9e140bf:  * regarding copyright ownership.  The ASF licenses this file
1:9e140bf:  * to you under the Apache License, Version 2.0 (the
1:9e140bf:  * "License"); you may not use this file except in compliance
1:9e140bf:  * with the License.  You may obtain a copy of the License at
1:9e140bf:  *
1:9e140bf:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9e140bf:  *
1:9e140bf:  * Unless required by applicable law or agreed to in writing,
1:9e140bf:  * software distributed under the License is distributed on an
1:9e140bf:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9e140bf:  * KIND, either express or implied.  See the License for the
1:9e140bf:  * specific language governing permissions and limitations
1:9e140bf:  * under the License.
1:9e140bf:  */
1:9e140bf: package org.apache.aries.jndi;
24:9e140bf: 
1:e04b9ae: import java.security.AccessController;
1:e04b9ae: import java.security.PrivilegedAction;
1:9e140bf: import java.util.Arrays;
1:9e140bf: import java.util.Enumeration;
1:9e140bf: import java.util.Hashtable;
1:2b1b14d: import java.util.logging.Level;
1:2b1b14d: import java.util.logging.Logger;
1:7b2544b: 
1:9e140bf: import javax.naming.Context;
1:9e140bf: import javax.naming.Name;
1:9e140bf: import javax.naming.NamingException;
1:9e140bf: import javax.naming.RefAddr;
1:9e140bf: import javax.naming.Reference;
1:9e140bf: import javax.naming.Referenceable;
1:9e140bf: import javax.naming.StringRefAddr;
1:bbd85f9: import javax.naming.directory.Attributes;
1:bbd85f9: import javax.naming.spi.DirObjectFactory;
1:9e140bf: import javax.naming.spi.ObjectFactory;
1:9e140bf: import javax.naming.spi.ObjectFactoryBuilder;
1:9e140bf: 
1:7bde01a: import org.apache.aries.util.service.registry.ServicePair;
1:9e140bf: import org.osgi.framework.BundleContext;
1:9e140bf: import org.osgi.framework.InvalidSyntaxException;
1:9e140bf: import org.osgi.framework.ServiceReference;
1:31b19f1: 
1:9e140bf: public class ObjectFactoryHelper implements ObjectFactory {
1:31b19f1:     
1:7b2544b:     protected BundleContext defaultContext;
1:7b2544b:     protected BundleContext callerContext;
1:2b1b14d:     private static final Logger logger = Logger.getLogger(ObjectFactoryHelper.class.getName());
1:31b19f1: 
1:7b2544b:     public ObjectFactoryHelper(BundleContext defaultContext, BundleContext callerContext) {
1:7b2544b:         this.defaultContext = defaultContext;
1:7b2544b:         this.callerContext = callerContext;
1:7b2544b:     }
1:31b19f1: 
1:e04b9ae:     public Object getObjectInstance(Object obj,
1:e04b9ae:                                     Name name,
1:e04b9ae:                                     Context nameCtx,
1:e04b9ae:                                     Hashtable<?, ?> environment) throws Exception {
1:31b19f1: 
1:bb59233:         // Step 1 ensure we have a reference rather than a referenceable
1:9e140bf:         if (obj instanceof Referenceable) {
1:9e140bf:             obj = ((Referenceable) obj).getReference();
28:9e140bf:         }
1:31b19f1:         
1:6a61c05:         if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "obj = " + obj);
1:31b19f1: 
1:9e140bf:         Object result = obj;
1:2b1b14d: 
1:bb59233:         // Step 2 - if we have a reference process it as a reference
1:9e140bf:         if (obj instanceof Reference) {
1:9e140bf:             Reference ref = (Reference) obj;
1:9e140bf:             String className = ref.getFactoryClassName();
1:bb59233: 
1:9e140bf:             if (className != null) {
1:bb59233:                 // Step 3 - use the class name in the reference to get the factory class name
1:9e140bf:                 result = getObjectInstanceUsingClassName(obj, className, obj, name, nameCtx, environment);
1:9e140bf:             } else {
1:bb59233:                 // Step 4 - look, assuming url string ref addrs, for a url context object factory.
1:9e140bf:                 result = getObjectInstanceUsingRefAddress(ref.getAll(), obj, name, nameCtx, environment);
1:9e140bf:             }
1:9e140bf:         }
1:2b1b14d:         
1:6a61c05: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 4: result = " + result);
1:9e140bf: 
1:bb59233:         // Step 5 - if we still don't have a resolved object goto the object factory builds in the SR.
1:9e140bf:         if (result == null || result == obj) {
1:9e140bf:             result = getObjectInstanceUsingObjectFactoryBuilders(obj, name, nameCtx, environment);
1:9e140bf:         }
1:2b1b14d: 
1:6a61c05: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 5: result = " + result);
1:9e140bf: 
1:2b1b14d:         // Step 6 - Attempt to use all the registered ObjectFactories in the SR.
1:9e140bf:         if (result == null || result == obj) {                
1:9e140bf:             if ((obj instanceof Reference && ((Reference) obj).getFactoryClassName() == null) ||
1:9e140bf:                 !(obj instanceof Reference)) {
1:9e140bf:                 result = getObjectInstanceUsingObjectFactories(obj, name, nameCtx, environment);
1:9e140bf:             }
1:9e140bf:         }
1:2b1b14d:  
1:6a61c05: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 6: result = " + result);
1:2b1b14d: 
1:2b1b14d: 		// Extra, non-standard, bonus step 7. If javax.naming.OBJECT_FACTORIES is set as 
1:2b1b14d: 		// a property in the environment, use its value to construct additional object factories. 
1:2b1b14d: 		// Added under Aries-822, with reference 
1:2b1b14d: 		// to https://www.osgi.org/bugzilla/show_bug.cgi?id=138 
1:2b1b14d: 		if (result == null || result == obj) {
1:2b1b14d: 			result = getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment);
1:2b1b14d: 		} 
1:2b1b14d: 		
1:6a61c05: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 7: result = " + result);
1:2b1b14d: 
1:9e140bf:         return (result == null) ? obj : result;
1:9e140bf:     }
1:bbd85f9:  
1:2b1b14d:     /*
1:2b1b14d:      * Attempt to obtain an Object instance via the java.naming.factory.object property
1:2b1b14d:      */
1:2b1b14d:     protected Object getObjectInstanceViaContextDotObjectFactories(Object obj,
1:2b1b14d:             Name name,
1:2b1b14d:             Context nameCtx,
1:2b1b14d:             Hashtable<?, ?> environment) throws Exception
1:2b1b14d:     {
1:bbd85f9:     	return getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment, null);
1:bbd85f9:     }
1:bbd85f9:     
1:bbd85f9:     /*
1:bbd85f9:      * Attempt to obtain an Object instance via the java.naming.factory.object property
1:bbd85f9:      */
1:bbd85f9:     protected Object getObjectInstanceViaContextDotObjectFactories(Object obj,
1:bbd85f9:             Name name,
1:bbd85f9:             Context nameCtx,
1:bbd85f9:             Hashtable<?, ?> environment,
1:bbd85f9:             Attributes attrs) throws Exception
1:bbd85f9:     {
1:2b1b14d:     	Object result = null;
1:2b1b14d:     	String factories = (String) environment.get(Context.OBJECT_FACTORIES);
1:2b1b14d: 		if (factories != null && factories.length() > 0) {
1:2b1b14d: 			String[] candidates = factories.split(":");
1:2b1b14d: 			ClassLoader cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:2b1b14d: 				public ClassLoader run() {
1:2b1b14d: 					return Thread.currentThread().getContextClassLoader();
1:2b1b14d: 				}
1:2b1b14d: 			});
1:2b1b14d: 			for (String cand : candidates) {
1:2b1b14d: 				ObjectFactory factory = null;
1:2b1b14d: 				try {
1:2b1b14d: 					@SuppressWarnings("unchecked")
1:2b1b14d: 					Class<ObjectFactory> clz = (Class<ObjectFactory>) cl.loadClass(cand);
1:2b1b14d: 					factory = clz.newInstance();
1:2b1b14d: 				} catch (Exception e) {
1:6a61c05: 					if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Exception instantiating factory: " + e);
1:2b1b14d: 					continue;
1:2b1b14d: 				}
1:6a61c05: 				if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "cand=" + cand + " factory=" + factory);
1:2b1b14d: 				if (factory != null) {
1:bbd85f9: 					if(factory instanceof DirObjectFactory)
1:bbd85f9: 					{
1:6a61c05: 						if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "its a DirObjectFactory");
1:bbd85f9: 						final DirObjectFactory dirFactory = (DirObjectFactory) factory;
1:bbd85f9: 						result = dirFactory.getObjectInstance(obj, name, nameCtx, environment, attrs);
1:bbd85f9: 					}
1:bbd85f9: 					else
1:bbd85f9: 					{
1:6a61c05: 						if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "its an ObjectFactory");
1:bbd85f9: 						result = factory.getObjectInstance(obj, name, nameCtx, environment);
1:bbd85f9: 					}
1:2b1b14d: 				}
1:2b1b14d: 				if (result != null && result != obj) break;
1:2b1b14d: 			}
1:2b1b14d: 		}
1:6a61c05: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "result = " + result);
1:2b1b14d: 		return (result == null) ? obj : result;
1:2b1b14d:     }
1:e04b9ae: 
1:9e140bf:     protected Object getObjectInstanceUsingObjectFactories(Object obj,
1:7b2544b:                                                            Name name,
1:7b2544b:                                                            Context nameCtx,
1:9e140bf:                                                            Hashtable<?, ?> environment) 
1:9e140bf:         throws Exception {
1:e04b9ae:         Object result = null;
1:7f6baa5:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactory.class);
1:bb59233:             
1:e04b9ae:         if (refs != null) {
1:bb59233:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:bb59233:             
1:bb59233:             for (ServiceReference ref : refs) {
1:7bee809:               if (canCallObjectFactory(obj, ref)) {
1:7f6baa5:                 ObjectFactory factory = (ObjectFactory) Utils.getServicePrivileged(callerContext, ref);
1:bb59233: 
1:bb59233:                 try {
1:2b1b14d:                     result = factory.getObjectInstance(obj, name, nameCtx, environment);
1:bb59233:                 } catch (NamingException ne) {
1:bb59233:                   // Ignore this since we are doing last ditch finding, another OF might work.
1:7f6baa5:                 } finally {
1:7f6baa5:                     callerContext.ungetService(ref);
1:bb59233:                 }
1:e04b9ae: 
1:bb59233:                 // if the result comes back and is not null and not the reference
1:bb59233:                 // object then we should return the result, so break out of the
1:bb59233:                 // loop we are in.
1:bb59233:                 if (result != null && result != obj) {
1:bb59233:                     break;
1:7bee809:                 }
1:bb59233:               }
1:bb59233:             }
1:e04b9ae:         }
1:e04b9ae: 
1:9e140bf:         return (result == null) ? obj : result;
1:e04b9ae:     }
1:e04b9ae: 
1:7bee809:     private boolean canCallObjectFactory(Object obj, ServiceReference ref)
1:7bee809:     {
1:7bee809:       if (obj instanceof Reference) return true;
1:7bee809:       
1:7bee809:       Object prop = ref.getProperty("aries.object.factory.requires.reference");
1:7bee809:       
1:7bee809:       if (prop == null) return true;
1:7bee809:       
1:7bee809:       if (prop instanceof Boolean) return !!!(Boolean) prop; // if set to true we don't call.
1:7bee809:       
1:7bee809:       return true;
1:7bee809:     }
1:7bee809: 
1:9e140bf:     protected static String getUrlScheme(String name) {
1:9e140bf:         String scheme = name;   
1:9e140bf:         int index = name.indexOf(':');
1:9e140bf:         if (index != -1) {
1:9e140bf:             scheme = name.substring(0, index);
1:e04b9ae:         }
1:9e140bf:         return scheme;
1:e04b9ae:     }
1:e04b9ae:         
1:9e140bf:     private Object getObjectInstanceUsingRefAddress(Enumeration<RefAddr> addresses,
1:9e140bf:                                                     Object obj,
3:9e140bf:                                                     Name name,
3:9e140bf:                                                     Context nameCtx,
1:9e140bf:                                                     Hashtable<?, ?> environment)
1:9e140bf:         throws Exception {       
3:9e140bf:         Object result = null;
1:9e140bf:         while (addresses.hasMoreElements()) {
1:9e140bf:             RefAddr address = addresses.nextElement();
1:9e140bf:             if (address instanceof StringRefAddr && "URL".equals(address.getType())) {
1:9e140bf:                 String urlScheme = getUrlScheme( (String) address.getContent() );
1:b756d71:                 
1:b756d71:                 ServicePair<ObjectFactory> factoryService = ContextHelper.getURLObjectFactory(callerContext, urlScheme, environment);
1:b756d71:                 
1:b756d71:                 if (factoryService != null) {
1:b756d71:                     ObjectFactory factory = factoryService.get();
1:e04b9ae:                     
1:9e140bf:                     String value = (String) address.getContent();
1:bb59233:                     try {
1:9e140bf:                         result = factory.getObjectInstance(value, name, nameCtx, environment);
1:bb59233:                     } finally {
1:b756d71:                         factoryService.unget();
1:e04b9ae:                     }
1:e04b9ae:                     
1:e04b9ae:                     // if the result comes back and is not null and not the reference
1:e04b9ae:                     // object then we should return the result, so break out of the
1:e04b9ae:                     // loop we are in.
1:e04b9ae:                     if (result != null && result != obj) {
1:e04b9ae:                         break;
1:e04b9ae:                     }
1:7b2544b:                 }
1:9e140bf:             }
1:9e140bf:         }
1:7b2544b: 
1:9e140bf:         return (result == null) ? obj : result;
1:9e140bf:     }
1:9e140bf: 
1:7f6baa5:     static Tuple<ServiceReference,ObjectFactory> findObjectFactoryByClassName(final BundleContext ctx, final String className) {
1:bb59233:         return AccessController.doPrivileged(new PrivilegedAction<Tuple<ServiceReference,ObjectFactory>>() {
1:bb59233:             public Tuple<ServiceReference,ObjectFactory> run() {
1:7f6baa5:                 ServiceReference serviceReference = null;
1:7f6baa5:                 
1:7f6baa5:                 try {
1:7f6baa5:                     ServiceReference[] refs = ctx.getServiceReferences(className, null);
1:7f6baa5:                     if (refs != null && refs.length > 0) {
1:7f6baa5:                         serviceReference = refs[0];
1:7f6baa5:                     }
1:7f6baa5:                 } catch (InvalidSyntaxException e) {
1:7f6baa5:                     // should not happen
1:7f6baa5:                     throw new RuntimeException(Utils.MESSAGES.getMessage("null.is.invalid.filter"), e);
1:7f6baa5:                 }
1:bb59233: 
1:bb59233:                 ObjectFactory factory = null;
1:e04b9ae:                 
1:bb59233:                 if (serviceReference != null) {
1:7f6baa5:                     factory = (ObjectFactory) ctx.getService(serviceReference);            
1:bb59233:                 }
1:bb59233:                 
1:bb59233:                 return new Tuple<ServiceReference, ObjectFactory>(serviceReference, factory);
1:bb59233:             }
1:bb59233:         });        
1:bb59233:     }
1:e04b9ae:     
1:9e140bf:     private Object getObjectInstanceUsingClassName(Object reference,
1:9e140bf:                                                    String className,
1:9e140bf:                                                    Object obj,
1:9e140bf:                                                    Name name,
1:9e140bf:                                                    Context nameCtx,
1:9e140bf:                                                    Hashtable<?, ?> environment) 
1:9e140bf:         throws Exception {
1:e04b9ae:         
1:7f6baa5:         Tuple<ServiceReference,ObjectFactory> tuple = findObjectFactoryByClassName(defaultContext, className);
1:bb59233:         Object result = null;
1:bb59233:         
1:bb59233:         if (tuple.second != null) {
1:7f6baa5:             try {
1:7f6baa5:                 result = tuple.second.getObjectInstance(reference, name, nameCtx, environment);
1:7f6baa5:             } finally {
1:7f6baa5:                 defaultContext.ungetService(tuple.first);
1:7f6baa5:             }
1:bb59233:         }
1:e04b9ae: 
1:9e140bf:         return (result == null) ? obj : result;
1:e04b9ae:     }
1:9e140bf:   
1:9e140bf:     private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
1:9e140bf:                                                                Name name,
1:9e140bf:                                                                Context nameCtx,
1:9e140bf:                                                                Hashtable<?, ?> environment) 
1:9e140bf:         throws Exception {
1:9e140bf:         
1:e04b9ae:         ObjectFactory factory = null;
1:9e140bf:         
1:7f6baa5:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
1:e04b9ae:         if (refs != null) {
1:bb59233:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:bb59233:             for (ServiceReference ref : refs) {
1:7f6baa5:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
1:bb59233:                 try {
1:bb59233:                     factory = builder.createObjectFactory(obj, environment);
1:bb59233:                 } catch (NamingException e) {
1:bb59233:                     // TODO: log it
1:7f6baa5:                 } finally {
1:7f6baa5:                     callerContext.ungetService(ref);
1:bb59233:                 }
1:bb59233:                 if (factory != null) {
1:bb59233:                     break;
1:bb59233:                 }
1:bb59233:             }
1:e04b9ae:         }
1:9e140bf: 
1:9e140bf:         Object result = null;
1:9e140bf:         
1:e04b9ae:         if (factory != null) {
1:bb59233:             result = factory.getObjectInstance(obj, name, nameCtx, environment);
1:e04b9ae:         }
1:9e140bf:         
1:9e140bf:         return (result == null) ? obj : result;
1:e04b9ae:     }
1:9e140bf: 
1:e04b9ae: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:7f6baa5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactory.class);
1:                 ObjectFactory factory = (ObjectFactory) Utils.getServicePrivileged(callerContext, ref);
1:                 } finally {
1:                     callerContext.ungetService(ref);
/////////////////////////////////////////////////////////////////////////
1:     static Tuple<ServiceReference,ObjectFactory> findObjectFactoryByClassName(final BundleContext ctx, final String className) {
1:                 ServiceReference serviceReference = null;
1:                 
1:                 try {
1:                     ServiceReference[] refs = ctx.getServiceReferences(className, null);
1:                     if (refs != null && refs.length > 0) {
1:                         serviceReference = refs[0];
1:                     }
1:                 } catch (InvalidSyntaxException e) {
1:                     // should not happen
1:                     throw new RuntimeException(Utils.MESSAGES.getMessage("null.is.invalid.filter"), e);
1:                 }
1:                     factory = (ObjectFactory) ctx.getService(serviceReference);            
/////////////////////////////////////////////////////////////////////////
1:         Tuple<ServiceReference,ObjectFactory> tuple = findObjectFactoryByClassName(defaultContext, className);
1:             try {
1:                 result = tuple.second.getObjectInstance(reference, name, nameCtx, environment);
1:             } finally {
1:                 defaultContext.ungetService(tuple.first);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
1:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
1:                 } finally {
1:                     callerContext.ungetService(ref);
commit:6a61c05
/////////////////////////////////////////////////////////////////////////
1:         if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "obj = " + obj);
/////////////////////////////////////////////////////////////////////////
1: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 4: result = " + result);
1: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 5: result = " + result);
/////////////////////////////////////////////////////////////////////////
1: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 6: result = " + result);
/////////////////////////////////////////////////////////////////////////
1: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Step 7: result = " + result);
/////////////////////////////////////////////////////////////////////////
1: 					if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "Exception instantiating factory: " + e);
1: 				if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "cand=" + cand + " factory=" + factory);
1: 						if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "its a DirObjectFactory");
1: 						if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "its an ObjectFactory");
1: 		if (logger.isLoggable(Level.FINE)) logger.log(Level.FINE, "result = " + result);
commit:31b19f1
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.Vector;
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
0: import org.osgi.util.tracker.ServiceTracker;
0: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: 
1:     
0:     protected ServiceTrackerCustomizers.ContextServiceTrackerCustomizer objFactoryBuilderStC = null;
0:     protected ServiceTrackerCustomizers.ContextServiceTrackerCustomizer objFactoryStC = null;
0:     protected ServiceTrackerCustomizers.ContextServiceTrackerCustomizer defaultStC = null;
1:     
1: 
0:         //Create service trackers for the contexts to allow caching of services
0:         objFactoryBuilderStC = ServiceTrackerCustomizers.getOrRegisterServiceTracker(callerContext, ObjectFactoryBuilder.class.getName());
1:         
0:         objFactoryStC = ServiceTrackerCustomizers.getOrRegisterServiceTracker(callerContext, ObjectFactory.class.getName());
1:         
0:         defaultStC = ServiceTrackerCustomizers.getOrRegisterServiceTracker(defaultContext, ObjectFactory.class.getName());
1:       
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference[] refs = objFactoryStC.getServiceRefs();
0:                 ObjectFactory factory = (ObjectFactory) objFactoryStC.getService(ref);
/////////////////////////////////////////////////////////////////////////
0:     static Tuple<ServiceReference,ObjectFactory> findObjectFactoryByClassName(final ServiceTrackerCustomizers.ContextServiceTrackerCustomizer ctxCache, final String className) {
0:                 ServiceReference serviceReference = ctxCache.getServiceRef(className);
0:                     factory = (ObjectFactory) ctxCache.getService(serviceReference);
/////////////////////////////////////////////////////////////////////////
0:         Tuple<ServiceReference,ObjectFactory> tuple = findObjectFactoryByClassName(defaultStC, className);
0:             result = tuple.second.getObjectInstance(reference, name, nameCtx, environment);
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference[] refs = objFactoryBuilderStC.getServiceRefs();
0:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) objFactoryBuilderStC.getService(ref);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:bbd85f9
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.directory.Attributes;
1: import javax.naming.spi.DirObjectFactory;
/////////////////////////////////////////////////////////////////////////
1:  
/////////////////////////////////////////////////////////////////////////
1:     	return getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment, null);
1:     }
1:     
1:     /*
1:      * Attempt to obtain an Object instance via the java.naming.factory.object property
1:      */
1:     protected Object getObjectInstanceViaContextDotObjectFactories(Object obj,
1:             Name name,
1:             Context nameCtx,
1:             Hashtable<?, ?> environment,
1:             Attributes attrs) throws Exception
1:     {
/////////////////////////////////////////////////////////////////////////
1: 					if(factory instanceof DirObjectFactory)
1: 					{
0: 						logger.log(Level.FINE, "its a DirObjectFactory");
1: 						final DirObjectFactory dirFactory = (DirObjectFactory) factory;
1: 						result = dirFactory.getObjectInstance(obj, name, nameCtx, environment, attrs);
1: 					}
1: 					else
1: 					{
0: 						logger.log(Level.FINE, "its an ObjectFactory");
1: 						result = factory.getObjectInstance(obj, name, nameCtx, environment);
1: 					}
0: 		logger.log(Level.FINE, "result = " + result);
commit:2b1b14d
/////////////////////////////////////////////////////////////////////////
1: import java.util.logging.Level;
1: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = Logger.getLogger(ObjectFactoryHelper.class.getName());
/////////////////////////////////////////////////////////////////////////
1:         
0:         logger.log(Level.FINE, "obj = " + obj);
/////////////////////////////////////////////////////////////////////////
1:         
0: 		logger.log(Level.FINE, "Step 4: result = " + result);
0: 		logger.log(Level.FINE, "Step 5: result = " + result);
1: 
1:         // Step 6 - Attempt to use all the registered ObjectFactories in the SR.
1:  
0: 		logger.log(Level.FINE, "Step 6: result = " + result);
1: 
1: 		// Extra, non-standard, bonus step 7. If javax.naming.OBJECT_FACTORIES is set as 
1: 		// a property in the environment, use its value to construct additional object factories. 
1: 		// Added under Aries-822, with reference 
1: 		// to https://www.osgi.org/bugzilla/show_bug.cgi?id=138 
1: 		if (result == null || result == obj) {
1: 			result = getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment);
1: 		} 
1: 		
0: 		logger.log(Level.FINE, "Step 7: result = " + result);
1:     
1:     /*
1:      * Attempt to obtain an Object instance via the java.naming.factory.object property
1:      */
1:     protected Object getObjectInstanceViaContextDotObjectFactories(Object obj,
1:             Name name,
1:             Context nameCtx,
1:             Hashtable<?, ?> environment) throws Exception
1:     {
1:     	Object result = null;
1:     	String factories = (String) environment.get(Context.OBJECT_FACTORIES);
1: 		if (factories != null && factories.length() > 0) {
1: 			String[] candidates = factories.split(":");
1: 			ClassLoader cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1: 				public ClassLoader run() {
1: 					return Thread.currentThread().getContextClassLoader();
1: 				}
1: 			});
1: 			for (String cand : candidates) {
1: 				ObjectFactory factory = null;
1: 				try {
1: 					@SuppressWarnings("unchecked")
1: 					Class<ObjectFactory> clz = (Class<ObjectFactory>) cl.loadClass(cand);
1: 					factory = clz.newInstance();
1: 				} catch (Exception e) {
0: 					logger.log(Level.FINE, "Exception instantiating factory: " + e);
1: 					continue;
1: 				}
0: 				logger.log(Level.FINE, "cand=" + cand + " factory=" + factory);
1: 				if (factory != null) {
1: 					result = factory.getObjectInstance(obj, name, nameCtx, environment);
1: 				}
1: 				if (result != null && result != obj) break;
1: 			}
1: 		}
1: 		return (result == null) ? obj : result;
1:     }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:7bee809
/////////////////////////////////////////////////////////////////////////
1:               if (canCallObjectFactory(obj, ref)) {
/////////////////////////////////////////////////////////////////////////
1:               }
1:     private boolean canCallObjectFactory(Object obj, ServiceReference ref)
1:     {
1:       if (obj instanceof Reference) return true;
1:       
1:       Object prop = ref.getProperty("aries.object.factory.requires.reference");
1:       
1:       if (prop == null) return true;
1:       
1:       if (prop instanceof Boolean) return !!!(Boolean) prop; // if set to true we don't call.
1:       
1:       return true;
1:     }
1: 
commit:bb59233
/////////////////////////////////////////////////////////////////////////
1:         // Step 1 ensure we have a reference rather than a referenceable
1:         // Step 2 - if we have a reference process it as a reference
1:                 // Step 3 - use the class name in the reference to get the factory class name
1:                 // Step 4 - look, assuming url string ref addrs, for a url context object factory.
1:         // Step 5 - if we still don't have a resolved object goto the object factory builds in the SR.
0:         // Step 6 - finally as a last ditch effort attempt to use all the registered ObjectFactories in the SR.
/////////////////////////////////////////////////////////////////////////
1:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:             
1:             for (ServiceReference ref : refs) {
0:                 ObjectFactory factory = (ObjectFactory) Utils.getServicePrivileged(callerContext, ref);
1:                 try {
1:                     result = factory.getObjectInstance(obj, name, nameCtx, environment);
1:                 } catch (NamingException ne) {
1:                   // Ignore this since we are doing last ditch finding, another OF might work.
1:                 } finally {
0:                     callerContext.ungetService(ref);
1:                 }
1:                 // if the result comes back and is not null and not the reference
1:                 // object then we should return the result, so break out of the
1:                 // loop we are in.
1:                 if (result != null && result != obj) {
1:                     break;
1:                 }
1:             }
/////////////////////////////////////////////////////////////////////////
1:         return AccessController.doPrivileged(new PrivilegedAction<Tuple<ServiceReference,ObjectFactory>>() {
1:             public Tuple<ServiceReference,ObjectFactory> run() {
0:                 ServiceReference serviceReference = null;
1:                 
1:                 try {
0:                     ServiceReference[] refs = ctx.getServiceReferences(className, null);
0:                     if (refs != null && refs.length > 0) {
0:                         serviceReference = refs[0];
1:                     }
0:                 } catch (InvalidSyntaxException e) {
0:                     // should not happen
1:                 }
1:                 ObjectFactory factory = null;
1:                 
1:                 if (serviceReference != null) {
0:                     factory = (ObjectFactory) ctx.getService(serviceReference);            
1:                 }
1:                 
1:                 return new Tuple<ServiceReference, ObjectFactory>(serviceReference, factory);
1:             }
1:         });        
/////////////////////////////////////////////////////////////////////////
1:         
0:         Tuple<ServiceReference,ObjectFactory> tuple = findObjectFactoryByClassName(defaultContext, className);
1:         Object result = null;
1:         
1:         if (tuple.second != null) {
/////////////////////////////////////////////////////////////////////////
1:         
1:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:             for (ServiceReference ref : refs) {
0:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
1:                 try {
1:                     factory = builder.createObjectFactory(obj, environment);
1:                 } catch (NamingException e) {
1:                     // TODO: log it
0:                 } finally {
0:                     callerContext.ungetService(ref);
1:                 }
1:                 if (factory != null) {
1:                     break;
1:                 }
1:             }
commit:9c42dfb
/////////////////////////////////////////////////////////////////////////
0:                     throw new RuntimeException(Utils.MESSAGES.getMessage("null.is.invalid.filter"), e);
commit:7bde01a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.service.registry.ServicePair;
commit:b756d71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 ServicePair<ObjectFactory> factoryService = ContextHelper.getURLObjectFactory(callerContext, urlScheme, environment);
1:                 
1:                 if (factoryService != null) {
1:                     ObjectFactory factory = factoryService.get();
1:                         factoryService.unget();
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:e04b9ae
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context nameCtx,
1:                                     Hashtable<?, ?> environment) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactory.class);
1:             
1:         if (refs != null) {
0:         	Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:         	
0:         	for (ServiceReference ref : refs) {
0:         		ObjectFactory factory = (ObjectFactory) Utils.getServicePrivileged(callerContext, ref);
0:         		try {
0:         			result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:         		} finally {
0:         			callerContext.ungetService(ref);
1:         		}
1:         		// if the result comes back and is not null and not the reference
1:         		// object then we should return the result, so break out of the
1:         		// loop we are in.
1:         		if (result != null && result != obj) {
1:         			break;
1:         		}
1:         	}
/////////////////////////////////////////////////////////////////////////
0:     static Tuple<ServiceReference,ObjectFactory> findObjectFactoryByClassName(final BundleContext ctx, final String className) {
0:     	return AccessController.doPrivileged(new PrivilegedAction<Tuple<ServiceReference,ObjectFactory>>() {
0: 			public Tuple<ServiceReference,ObjectFactory> run() {
0: 		        ServiceReference serviceReference = null;
1: 		        
0: 		        try {
0: 		            ServiceReference[] refs = ctx.getServiceReferences(className, null);
0: 		            if (refs != null && refs.length > 0) {
0: 		                serviceReference = refs[0];
1: 		            }
0: 		        } catch (InvalidSyntaxException e) {
0: 		            // should not happen
0: 		            throw new RuntimeException("Invalid filter", e);
1: 		        }
1: 
1: 		        ObjectFactory factory = null;
1: 		        
0: 		        if (serviceReference != null) {
0: 		            factory = (ObjectFactory) ctx.getService(serviceReference);			
1: 		        }
1: 		        
0: 		        return new Tuple<ServiceReference, ObjectFactory>(serviceReference, factory);
1: 			}
0: 		});    	
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     	
0:     	Tuple<ServiceReference,ObjectFactory> tuple = findObjectFactoryByClassName(defaultContext, className);
1:     	Object result = null;
1:     	
0:     	if (tuple.second != null) {
0:                 result = tuple.second.getObjectInstance(reference, name, nameCtx, environment);
0:                 defaultContext.ungetService(tuple.first);
/////////////////////////////////////////////////////////////////////////
1:     	
1:         
0:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
1:         if (refs != null) {
0:         	Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
0:         	for (ServiceReference ref : refs) {
0:         		ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
0:         		try {
0:         			factory = builder.createObjectFactory(obj, environment);
0:         		} catch (NamingException e) {
0:         			// TODO: log it
0:         		} finally {
0:         			callerContext.ungetService(ref);
1:         		}
1:         		if (factory != null) {
0:         			break;
1:         		}
1:         	}
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
0: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected BundleContext defaultContext;
1:     protected BundleContext callerContext;
1:     public ObjectFactoryHelper(BundleContext defaultContext, BundleContext callerContext) {
1:         this.defaultContext = defaultContext;
1:         this.callerContext = callerContext;
0:     public Object getObjectInstance(final Object obj,
0:                                     final Name name,
0:                                     final Context nameCtx,
0:                                     final Hashtable<?, ?> environment) throws Exception {
0:         return Utils.doPrivileged(new PrivilegedExceptionAction<Object>() {
0:             public Object run() throws Exception {
0:                 return doGetObjectInstance(obj, name, nameCtx, environment);
1:             }            
0:         });
1:     }
1:     
0:     private Object doGetObjectInstance(Object obj,
1:                                        Name name,
1:                                        Context nameCtx,
0:                                        Hashtable<?, ?> environment) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:             ServiceReference[] refs = callerContext.getServiceReferences(ObjectFactory.class.getName(), null);
0:                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
0:                     ObjectFactory factory = (ObjectFactory) callerContext.getService(ref);
0:                         callerContext.ungetService(ref);
/////////////////////////////////////////////////////////////////////////
0:                     ServiceReference[] services = callerContext.getServiceReferences(ObjectFactory.class.getName(), 
/////////////////////////////////////////////////////////////////////////
0:                     factory = (ObjectFactory) callerContext.getService(ref);
0:                         callerContext.ungetService(ref);
/////////////////////////////////////////////////////////////////////////
0:             ServiceReference[] refs = defaultContext.getServiceReferences(className, null);
/////////////////////////////////////////////////////////////////////////
0:             ObjectFactory factory = (ObjectFactory) defaultContext.getService(serviceReference);
0:                 defaultContext.ungetService(serviceReference);
/////////////////////////////////////////////////////////////////////////
0:             ServiceReference[] refs = callerContext.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
0:                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
0:                     ObjectFactoryBuilder builder = (ObjectFactoryBuilder) callerContext.getService(ref);
0:                         callerContext.ungetService(ref);
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.util.Arrays;
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.NamingException;
1: import javax.naming.RefAddr;
1: import javax.naming.Reference;
1: import javax.naming.Referenceable;
1: import javax.naming.StringRefAddr;
1: import javax.naming.spi.ObjectFactory;
1: import javax.naming.spi.ObjectFactoryBuilder;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.jndi.JNDIConstants;
1: 
1: public class ObjectFactoryHelper implements ObjectFactory {
1: 
0:     protected BundleContext context;
1: 
0:     public void setBundleContext(BundleContext ctx) {
0:         context = ctx;
1:     }
1: 
0:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context nameCtx,
0:                                     Hashtable<?, ?> environment) throws Exception {
1: 
0:         // Step 1
1:         if (obj instanceof Referenceable) {
1:             obj = ((Referenceable) obj).getReference();
1:         }
1: 
1:         Object result = obj;
1: 
0:         // Step 2
1:         if (obj instanceof Reference) {
1:             Reference ref = (Reference) obj;
1:             String className = ref.getFactoryClassName();
1: 
1:             if (className != null) {
0:                 // Step 3
1:                 result = getObjectInstanceUsingClassName(obj, className, obj, name, nameCtx, environment);
1:             } else {
0:                 // Step 4
1:                 result = getObjectInstanceUsingRefAddress(ref.getAll(), obj, name, nameCtx, environment);
1:             }
1:         }
1: 
0:         // Step 5
1:         if (result == null || result == obj) {
1:             result = getObjectInstanceUsingObjectFactoryBuilders(obj, name, nameCtx, environment);
1:         }
1: 
0:         // Step 6
1:         if (result == null || result == obj) {                
1:             if ((obj instanceof Reference && ((Reference) obj).getFactoryClassName() == null) ||
1:                 !(obj instanceof Reference)) {
1:                 result = getObjectInstanceUsingObjectFactories(obj, name, nameCtx, environment);
1:             }
1:         }
1: 
1:         return (result == null) ? obj : result;
1:     }
1: 
1:     protected Object getObjectInstanceUsingObjectFactories(Object obj,
1:                                                            Name name,
1:                                                            Context nameCtx,
1:                                                            Hashtable<?, ?> environment) 
1:         throws Exception {
1:         Object result = null;
0:         try {
0:             ServiceReference[] refs = context.getAllServiceReferences(ObjectFactory.class.getName(), null);
0:             if (refs != null) {
0:                 Arrays.sort(refs, ContextHelper.SERVICE_REFERENCE_COMPARATOR);
0:                 for (ServiceReference ref : refs) {
0:                     ObjectFactory factory = (ObjectFactory) context.getService(ref);
1: 
0:                     try {
0:                         result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:                     } finally {
0:                         context.ungetService(ref);
1:                     }
1: 
0:                     // if the result comes back and is not null and not the reference
0:                     // object then we should return the result, so break out of the
0:                     // loop we are in.
0:                     if (result != null && result != obj) {
0:                         break;
1:                     }
1:                 }
1:             }
0:         } catch (InvalidSyntaxException e) {
0:             // should not happen
0:             throw new RuntimeException("Invalid filter", e);
1:         }
1: 
1:         return (result == null) ? obj : result;
1:     }
1: 
1:     protected static String getUrlScheme(String name) {
1:         String scheme = name;   
1:         int index = name.indexOf(':');
1:         if (index != -1) {
1:             scheme = name.substring(0, index);
1:         }
1:         return scheme;
1:     }
1:         
1:     private Object getObjectInstanceUsingRefAddress(Enumeration<RefAddr> addresses,
1:                                                     Object obj,
1:                                                     Name name,
1:                                                     Context nameCtx,
1:                                                     Hashtable<?, ?> environment)
1:         throws Exception {       
1:         Object result = null;
1:         while (addresses.hasMoreElements()) {
1:             RefAddr address = addresses.nextElement();
1:             if (address instanceof StringRefAddr && "URL".equals(address.getType())) {
1:                 String urlScheme = getUrlScheme( (String) address.getContent() );
0:                 ObjectFactory factory = null;
0:                 ServiceReference ref = null;
0:                 try {
0:                     ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(), 
0:                             "(&(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme + "))");
1: 
0:                     if (services != null && services.length > 0) {
0:                         ref = services[0];
1:                     }
0:                 } catch (InvalidSyntaxException e) {
0:                     // should not happen
0:                     throw new RuntimeException("Invalid filter", e);
1:                 }
1: 
0:                 if (ref != null) {
0:                     factory = (ObjectFactory) context.getService(ref);
1:                     
1:                     String value = (String) address.getContent();
0:                     try {
1:                         result = factory.getObjectInstance(value, name, nameCtx, environment);
0:                     } finally {
0:                         context.ungetService(ref);
1:                     }
1:                     
0:                     // if the result comes back and is not null and not the reference
0:                     // object then we should return the result, so break out of the
0:                     // loop we are in.
0:                     if (result != null && result != obj) {
0:                         break;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         return (result == null) ? obj : result;
1:     }
1: 
1:     private Object getObjectInstanceUsingClassName(Object reference,
1:                                                    String className,
1:                                                    Object obj,
1:                                                    Name name,
1:                                                    Context nameCtx,
1:                                                    Hashtable<?, ?> environment) 
1:         throws Exception {
0:         ServiceReference serviceReference = null;
1: 
0:         try {
0:             ServiceReference[] refs = context.getAllServiceReferences(className, null);
0:             if (refs != null && refs.length > 0) {
0:                 serviceReference = refs[0];
1:             }
0:         } catch (InvalidSyntaxException e) {
0:             // should not happen
0:             throw new RuntimeException("Invalid filter", e);
1:         }
1: 
1:         Object result = null;
1:         
0:         if (serviceReference != null) {
0:             ObjectFactory factory = (ObjectFactory) context.getService(serviceReference);
0:             try {
0:                 result = factory.getObjectInstance(reference, name, nameCtx, environment);
0:             } finally {
0:                 context.ungetService(serviceReference);
1:             }
1:         }
1: 
1:         return (result == null) ? obj : result;
1:     }
1:   
1:     private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
1:                                                                Name name,
1:                                                                Context nameCtx,
1:                                                                Hashtable<?, ?> environment) 
1:         throws Exception {
0:         ObjectFactory factory = null;
0:         try {
0:             ServiceReference[] refs = context.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
0:             if (refs != null) {
0:                 Arrays.sort(refs, ContextHelper.SERVICE_REFERENCE_COMPARATOR);
0:                 for (ServiceReference ref : refs) {
0:                     ObjectFactoryBuilder builder = (ObjectFactoryBuilder) context.getService(ref);
0:                     try {
0:                         factory = builder.createObjectFactory(obj, environment);
0:                     } catch (NamingException e) {
0:                         // TODO: log it
0:                     } finally {
0:                         context.ungetService(ref);
1:                     }
0:                     if (factory != null) {
0:                         break;
1:                     }
1:                 }
1:             }
0:         } catch (InvalidSyntaxException e) {
0:             // should not happen
0:             throw new RuntimeException("Invalid filter", e);
1:         }
1: 
1:         Object result = null;
1:         
0:         if (factory != null) {
0:             result = factory.getObjectInstance(obj, name, nameCtx, environment);
1:         }
1:         
1:         return (result == null) ? obj : result;
1:     }
1: 
1: }
============================================================================