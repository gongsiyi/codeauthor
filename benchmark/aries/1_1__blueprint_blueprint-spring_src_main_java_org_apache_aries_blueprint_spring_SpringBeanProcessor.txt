1:8d9ae6e: /**
1:8d9ae6e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:8d9ae6e:  *  contributor license agreements.  See the NOTICE file distributed with
1:8d9ae6e:  *  this work for additional information regarding copyright ownership.
1:8d9ae6e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:8d9ae6e:  *  (the "License"); you may not use this file except in compliance with
1:8d9ae6e:  *  the License.  You may obtain a copy of the License at
1:8d9ae6e:  *
1:8d9ae6e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8d9ae6e:  *
1:8d9ae6e:  *  Unless required by applicable law or agreed to in writing, software
1:8d9ae6e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:8d9ae6e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d9ae6e:  *  See the License for the specific language governing permissions and
1:8d9ae6e:  *  limitations under the License.
1:8d9ae6e:  */
1:8d9ae6e: package org.apache.aries.blueprint.spring;
1:8d9ae6e: 
1:8d9ae6e: import java.util.ArrayList;
1:8d9ae6e: import java.util.List;
1:8d9ae6e: 
1:8d9ae6e: import org.apache.aries.blueprint.BeanProcessor;
1:8d9ae6e: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:8d9ae6e: import org.apache.aries.blueprint.ComponentDefinitionRegistryProcessor;
1:8d9ae6e: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1:8d9ae6e: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:c68f0d3: import org.apache.aries.blueprint.spring.BlueprintBeanFactory.SpringMetadata;
1:8d9ae6e: import org.osgi.framework.BundleContext;
1:8d9ae6e: import org.osgi.framework.wiring.BundleWiring;
1:8d9ae6e: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:8d9ae6e: import org.springframework.beans.factory.Aware;
1:8d9ae6e: import org.springframework.beans.factory.BeanClassLoaderAware;
1:8d9ae6e: import org.springframework.beans.factory.BeanFactoryAware;
1:8d9ae6e: import org.springframework.beans.factory.BeanNameAware;
1:8d9ae6e: import org.springframework.beans.factory.config.BeanPostProcessor;
1:8d9ae6e: import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;
1:8d9ae6e: 
1:8d9ae6e: public class SpringBeanProcessor implements BeanProcessor, ComponentDefinitionRegistryProcessor {
1:8d9ae6e: 
1:8d9ae6e:     private final BundleContext bundleContext;
1:8d9ae6e:     private final ExtendedBlueprintContainer blueprintContainer;
1:8d9ae6e:     private final SpringApplicationContext applicationContext;
1:8d9ae6e:     boolean creatingProcessor;
1:8d9ae6e: 
1:8d9ae6e:     public SpringBeanProcessor(
1:8d9ae6e:             BundleContext bundleContext,
1:8d9ae6e:             ExtendedBlueprintContainer blueprintContainer,
1:8d9ae6e:             SpringApplicationContext applicationContext) {
1:8d9ae6e:         this.bundleContext = bundleContext;
1:8d9ae6e:         this.blueprintContainer = blueprintContainer;
1:8d9ae6e:         this.applicationContext = applicationContext;
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public void process(ComponentDefinitionRegistry componentDefinitionRegistry) {
1:8d9ae6e:         applicationContext.process();
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public Object beforeInit(Object o, String s, BeanCreator beanCreator, BeanMetadata beanMetadata) {
1:2e9d097:         if (beanMetadata instanceof SpringMetadata || beanMetadata == null) {
1:c68f0d3:             return o;
1:c68f0d3:         }
1:8d9ae6e:         if (o instanceof Aware) {
1:8d9ae6e:             if (o instanceof BeanNameAware) {
1:8d9ae6e:                 ((BeanNameAware) o).setBeanName(s);
1:8d9ae6e:             }
1:8d9ae6e:             if (o instanceof BeanClassLoaderAware) {
1:8d9ae6e:                 ClassLoader cl = bundleContext.getBundle().adapt(BundleWiring.class).getClassLoader();
1:8d9ae6e:                 ((BeanClassLoaderAware) o).setBeanClassLoader(cl);
1:8d9ae6e:             }
1:8d9ae6e:             if (o instanceof BeanFactoryAware) {
1:8d9ae6e:                 ((BeanFactoryAware) o).setBeanFactory(applicationContext.getBeanFactory());
1:8d9ae6e:             }
1:8d9ae6e:         }
1:8d9ae6e:         return applicationContext.getBeanFactory().applyBeanPostProcessorsBeforeInitialization(o, s);
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public Object afterInit(Object o, String s, BeanCreator beanCreator, BeanMetadata beanMetadata) {
1:8d9ae6e:         return applicationContext.getBeanFactory().applyBeanPostProcessorsAfterInitialization(o, s);
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public void beforeDestroy(Object o, String s) {
1:8d9ae6e:         for (BeanPostProcessor processor : applicationContext.getBeanFactory().getBeanPostProcessors()) {
1:8d9ae6e:             if (processor instanceof DestructionAwareBeanPostProcessor) {
1:8d9ae6e:                 ((DestructionAwareBeanPostProcessor) processor).postProcessBeforeDestruction(o, s);
1:8d9ae6e:             }
1:8d9ae6e:         }
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public void afterDestroy(Object o, String s) {
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     private <T> List<T> getProcessors(Class<T> type) {
1:8d9ae6e:         List<T> processors = new ArrayList<T>();
1:8d9ae6e:         if (!creatingProcessor) {
1:8d9ae6e:             creatingProcessor = true;
1:8d9ae6e:             for (BeanMetadata bean : blueprintContainer.getMetadata(BeanMetadata.class)) {
1:8d9ae6e:                 Class clazz = null;
1:8d9ae6e:                 if (bean instanceof ExtendedBeanMetadata) {
1:8d9ae6e:                     clazz = ((ExtendedBeanMetadata) bean).getRuntimeClass();
1:8d9ae6e:                 }
1:8d9ae6e:                 if (clazz == null && bean.getClassName() != null) {
1:8d9ae6e:                     try {
1:8d9ae6e:                         clazz = bundleContext.getBundle().loadClass(bean.getClassName());
1:8d9ae6e:                     } catch (ClassNotFoundException e) {
1:8d9ae6e:                     }
1:8d9ae6e:                 }
1:8d9ae6e:                 if (clazz == null) {
1:8d9ae6e:                     continue;
1:8d9ae6e:                 }
1:8d9ae6e:                 if (type.isAssignableFrom(clazz)) {
1:8d9ae6e:                     Object p = blueprintContainer.getComponentInstance(bean.getId());
1:8d9ae6e:                     processors.add(type.cast(p));
1:8d9ae6e:                 }
1:8d9ae6e:             }
1:8d9ae6e:             creatingProcessor = false;
1:8d9ae6e:         }
1:8d9ae6e:         return processors;
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e9d097
/////////////////////////////////////////////////////////////////////////
1:         if (beanMetadata instanceof SpringMetadata || beanMetadata == null) {
commit:c68f0d3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.spring.BlueprintBeanFactory.SpringMetadata;
/////////////////////////////////////////////////////////////////////////
0:         if (beanMetadata instanceof SpringMetadata) {
1:             return o;
1:         }
commit:4a2cc5c
/////////////////////////////////////////////////////////////////////////
commit:8d9ae6e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.aries.blueprint.BeanProcessor;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistryProcessor;
1: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.springframework.beans.factory.Aware;
1: import org.springframework.beans.factory.BeanClassLoaderAware;
1: import org.springframework.beans.factory.BeanFactoryAware;
1: import org.springframework.beans.factory.BeanNameAware;
0: import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
1: import org.springframework.beans.factory.config.BeanPostProcessor;
1: import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;
0: import org.springframework.context.ApplicationContextAware;
0: import org.springframework.context.support.AbstractApplicationContext;
1: 
1: public class SpringBeanProcessor implements BeanProcessor, ComponentDefinitionRegistryProcessor {
1: 
1:     private final BundleContext bundleContext;
1:     private final ExtendedBlueprintContainer blueprintContainer;
1:     private final SpringApplicationContext applicationContext;
1:     boolean creatingProcessor;
1: 
1:     public SpringBeanProcessor(
1:             BundleContext bundleContext,
1:             ExtendedBlueprintContainer blueprintContainer,
1:             SpringApplicationContext applicationContext) {
1:         this.bundleContext = bundleContext;
1:         this.blueprintContainer = blueprintContainer;
1:         this.applicationContext = applicationContext;
1:     }
1: 
1:     @Override
1:     public void process(ComponentDefinitionRegistry componentDefinitionRegistry) {
1:         applicationContext.process();
1:     }
1: 
1:     @Override
1:     public Object beforeInit(Object o, String s, BeanCreator beanCreator, BeanMetadata beanMetadata) {
1:         if (o instanceof Aware) {
1:             if (o instanceof BeanNameAware) {
1:                 ((BeanNameAware) o).setBeanName(s);
1:             }
1:             if (o instanceof BeanClassLoaderAware) {
1:                 ClassLoader cl = bundleContext.getBundle().adapt(BundleWiring.class).getClassLoader();
1:                 ((BeanClassLoaderAware) o).setBeanClassLoader(cl);
1:             }
1:             if (o instanceof BeanFactoryAware) {
1:                 ((BeanFactoryAware) o).setBeanFactory(applicationContext.getBeanFactory());
1:             }
1:         }
1:         return applicationContext.getBeanFactory().applyBeanPostProcessorsBeforeInitialization(o, s);
1:     }
1: 
1:     @Override
1:     public Object afterInit(Object o, String s, BeanCreator beanCreator, BeanMetadata beanMetadata) {
1:         return applicationContext.getBeanFactory().applyBeanPostProcessorsAfterInitialization(o, s);
1:     }
1: 
1:     @Override
1:     public void beforeDestroy(Object o, String s) {
1:         for (BeanPostProcessor processor : applicationContext.getBeanFactory().getBeanPostProcessors()) {
1:             if (processor instanceof DestructionAwareBeanPostProcessor) {
1:                 ((DestructionAwareBeanPostProcessor) processor).postProcessBeforeDestruction(o, s);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void afterDestroy(Object o, String s) {
1:     }
1: 
1:     private <T> List<T> getProcessors(Class<T> type) {
1:         List<T> processors = new ArrayList<T>();
1:         if (!creatingProcessor) {
1:             creatingProcessor = true;
1:             for (BeanMetadata bean : blueprintContainer.getMetadata(BeanMetadata.class)) {
1:                 Class clazz = null;
1:                 if (bean instanceof ExtendedBeanMetadata) {
1:                     clazz = ((ExtendedBeanMetadata) bean).getRuntimeClass();
1:                 }
1:                 if (clazz == null && bean.getClassName() != null) {
1:                     try {
1:                         clazz = bundleContext.getBundle().loadClass(bean.getClassName());
1:                     } catch (ClassNotFoundException e) {
1:                     }
1:                 }
1:                 if (clazz == null) {
1:                     continue;
1:                 }
1:                 if (type.isAssignableFrom(clazz)) {
1:                     Object p = blueprintContainer.getComponentInstance(bean.getId());
1:                     processors.add(type.cast(p));
1:                 }
1:             }
1:             creatingProcessor = false;
1:         }
1:         return processors;
1:     }
1: 
1: }
============================================================================