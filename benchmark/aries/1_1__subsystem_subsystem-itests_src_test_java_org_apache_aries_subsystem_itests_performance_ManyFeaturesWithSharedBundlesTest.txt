1:5320c0f: /*
1:5320c0f:  * Licensed to the Apache Software Foundation (ASF) under one
1:5320c0f:  * or more contributor license agreements.  See the NOTICE file
1:5320c0f:  * distributed with this work for additional information
1:5320c0f:  * regarding copyright ownership.  The ASF licenses this file
1:5320c0f:  * to you under the Apache License, Version 2.0 (the
1:5320c0f:  * "License"); you may not use this file except in compliance
1:5320c0f:  * with the License.  You may obtain a copy of the License at
1:5320c0f:  *
1:5320c0f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5320c0f:  *
1:5320c0f:  * Unless required by applicable law or agreed to in writing,
1:5320c0f:  * software distributed under the License is distributed on an
1:5320c0f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5320c0f:  * KIND, either express or implied.  See the License for the
1:5320c0f:  * specific language governing permissions and limitations
1:5320c0f:  * under the License.
1:5320c0f:  */
1:5320c0f: package org.apache.aries.subsystem.itests.performance;
1:5320c0f: 
1:5320c0f: import java.io.ByteArrayInputStream;
1:5320c0f: import java.io.ByteArrayOutputStream;
1:5320c0f: import java.io.FileOutputStream;
1:5320c0f: import java.io.IOException;
1:5320c0f: import java.io.InputStream;
1:5320c0f: import java.util.ArrayList;
1:5320c0f: import java.util.Collection;
1:5320c0f: import java.util.Collections;
1:5320c0f: import java.util.concurrent.Callable;
1:5320c0f: import java.util.concurrent.Future;
1:5320c0f: import java.util.zip.ZipEntry;
1:5320c0f: import java.util.zip.ZipOutputStream;
1:5320c0f: 
1:5320c0f: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
1:5320c0f: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
1:5320c0f: import org.junit.Test;
1:5320c0f: import org.osgi.framework.Constants;
1:5320c0f: import org.osgi.service.subsystem.Subsystem;
1:5320c0f: import org.osgi.service.subsystem.SubsystemConstants;
1:5320c0f: 
1:5320c0f: public class ManyFeaturesWithSharedBundlesTest extends AbstractPerformanceTest {
1:5320c0f:     private static final int FEATURE_COUNT = 50;
1:5320c0f:     
1:5320c0f:     public static void main(String[] args) throws IOException {
1:5320c0f:         ManyFeaturesWithSharedBundlesTest test = new ManyFeaturesWithSharedBundlesTest();
1:5320c0f:         InputStream is = test.createFeature("feature");
1:5320c0f:         FileOutputStream fos = new FileOutputStream("feature.esa");
1:5320c0f:         copy(is, fos);
1:5320c0f:         is.close();
1:5320c0f:         fos.close();
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     @Test
1:5320c0f:     @org.junit.Ignore
1:5320c0f:     public void testInstallAllFeatures() throws Exception {
1:5320c0f:         Collection<Callable<Subsystem>> callables = createInstallFeatureCallables();
1:5320c0f:         runTrials(callables);
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     @Test
1:5320c0f:     @org.junit.Ignore
1:5320c0f:     public void testInstallOneFeatureAfterAll() throws Exception {
1:5320c0f:         Collection<Callable<Subsystem>> callables = createInstallFeatureCallables();
1:5320c0f:         Collection<Future<Subsystem>> futures = executor.invokeAll(callables);
1:5320c0f:         Callable<Subsystem> callable = new Callable<Subsystem>() {
1:5320c0f:             @Override
1:5320c0f:             public Subsystem call() throws Exception {
1:5320c0f:                 Subsystem feature = getRootSubsystem().install("onefeature", createFeature("onefeature"));
1:5320c0f:                 return feature;
1:5320c0f:             }
1:5320c0f:         };
1:5320c0f:         runTrials(Collections.singletonList(callable));
1:5320c0f:         uninstallSubsystems(futures);
1:5320c0f:     }
1:5320c0f: 
1:5320c0f:     private InputStream createApplication(String symbolicName) throws IOException {
1:5320c0f:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:5320c0f:         ZipOutputStream zos = new ZipOutputStream(baos);
1:5320c0f:         addBundles(zos, "applicationbundle", "package", Constants.IMPORT_PACKAGE);
1:5320c0f:         zos.putNextEntry(new ZipEntry("OSGI-INF/SUBSYSTEM.MF"));
1:5320c0f:         StringBuilder preferredProviders = new StringBuilder("featurebundle0;type=osgi.bundle");
1:5320c0f:         for (int i = 1; i < BUNDLE_COUNT; i++) {
1:5320c0f:             preferredProviders.append(",featurebundle").append(i).append(";type=osgi.bundle");
1:5320c0f:         }
1:5320c0f:         new SubsystemManifest.Builder()
1:5320c0f:                 .symbolicName(symbolicName)
1:5320c0f:                 .type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION)
1:5320c0f:                 .header(new PreferredProviderHeader(preferredProviders.toString()))
1:5320c0f:                 .build()
1:5320c0f:                 .write(zos);
1:5320c0f:         zos.closeEntry();
1:5320c0f:         zos.close();
1:5320c0f:         return new ByteArrayInputStream(baos.toByteArray());
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     private InputStream createFeature(String symbolicName) throws IOException {
1:5320c0f:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:5320c0f:         ZipOutputStream zos = new ZipOutputStream(baos);
1:5320c0f:         addBundles(zos, "featurebundle", "package", Constants.EXPORT_PACKAGE);
1:5320c0f:         zos.putNextEntry(new ZipEntry("application.esa"));
1:5320c0f:         copy(createApplication("application"), zos);
1:5320c0f:         zos.closeEntry();
1:5320c0f:         zos.putNextEntry(new ZipEntry("OSGI-INF/SUBSYSTEM.MF"));
1:5320c0f:         new SubsystemManifest.Builder()
1:5320c0f:                 .symbolicName(symbolicName)
1:5320c0f:                 .type(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE)
1:5320c0f:                 .build()
1:5320c0f:                 .write(zos);
1:5320c0f:         zos.closeEntry();
1:5320c0f:         zos.close();
1:5320c0f:         return new ByteArrayInputStream(baos.toByteArray());
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     private Collection<Callable<Subsystem>> createInstallFeatureCallables() {
1:5320c0f:         Collection<Callable<Subsystem>> callables = new ArrayList<Callable<Subsystem>>(FEATURE_COUNT);
1:5320c0f:         for (int i = 0; i < FEATURE_COUNT; i++) {
1:5320c0f:             final int count = i;
1:5320c0f:             callables.add(new Callable<Subsystem>() {
1:5320c0f:                 @Override
1:5320c0f:                 public Subsystem call() throws Exception {
1:5320c0f:                     Subsystem feature = getRootSubsystem().install("feature" + count, createFeature("feature" + count));
1:5320c0f:                     System.out.println("Installed feature " + count);
1:5320c0f:                     return feature;
1:5320c0f:                 }
1:5320c0f:             });
1:5320c0f:         }
1:5320c0f:         return callables;
1:5320c0f:     }
1:5320c0f: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:5320c0f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.performance;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.Future;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
1: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
1: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: public class ManyFeaturesWithSharedBundlesTest extends AbstractPerformanceTest {
1:     private static final int FEATURE_COUNT = 50;
1:     
1:     public static void main(String[] args) throws IOException {
1:         ManyFeaturesWithSharedBundlesTest test = new ManyFeaturesWithSharedBundlesTest();
1:         InputStream is = test.createFeature("feature");
1:         FileOutputStream fos = new FileOutputStream("feature.esa");
1:         copy(is, fos);
1:         is.close();
1:         fos.close();
1:     }
1:     
1:     @Test
1:     @org.junit.Ignore
1:     public void testInstallAllFeatures() throws Exception {
1:         Collection<Callable<Subsystem>> callables = createInstallFeatureCallables();
1:         runTrials(callables);
1:     }
1:     
1:     @Test
1:     @org.junit.Ignore
1:     public void testInstallOneFeatureAfterAll() throws Exception {
1:         Collection<Callable<Subsystem>> callables = createInstallFeatureCallables();
1:         Collection<Future<Subsystem>> futures = executor.invokeAll(callables);
1:         Callable<Subsystem> callable = new Callable<Subsystem>() {
1:             @Override
1:             public Subsystem call() throws Exception {
1:                 Subsystem feature = getRootSubsystem().install("onefeature", createFeature("onefeature"));
1:                 return feature;
1:             }
1:         };
1:         runTrials(Collections.singletonList(callable));
1:         uninstallSubsystems(futures);
1:     }
1: 
1:     private InputStream createApplication(String symbolicName) throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addBundles(zos, "applicationbundle", "package", Constants.IMPORT_PACKAGE);
1:         zos.putNextEntry(new ZipEntry("OSGI-INF/SUBSYSTEM.MF"));
1:         StringBuilder preferredProviders = new StringBuilder("featurebundle0;type=osgi.bundle");
1:         for (int i = 1; i < BUNDLE_COUNT; i++) {
1:             preferredProviders.append(",featurebundle").append(i).append(";type=osgi.bundle");
1:         }
1:         new SubsystemManifest.Builder()
1:                 .symbolicName(symbolicName)
1:                 .type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION)
1:                 .header(new PreferredProviderHeader(preferredProviders.toString()))
1:                 .build()
1:                 .write(zos);
1:         zos.closeEntry();
1:         zos.close();
1:         return new ByteArrayInputStream(baos.toByteArray());
1:     }
1:     
1:     private InputStream createFeature(String symbolicName) throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addBundles(zos, "featurebundle", "package", Constants.EXPORT_PACKAGE);
1:         zos.putNextEntry(new ZipEntry("application.esa"));
1:         copy(createApplication("application"), zos);
1:         zos.closeEntry();
1:         zos.putNextEntry(new ZipEntry("OSGI-INF/SUBSYSTEM.MF"));
1:         new SubsystemManifest.Builder()
1:                 .symbolicName(symbolicName)
1:                 .type(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE)
1:                 .build()
1:                 .write(zos);
1:         zos.closeEntry();
1:         zos.close();
1:         return new ByteArrayInputStream(baos.toByteArray());
1:     }
1:     
1:     private Collection<Callable<Subsystem>> createInstallFeatureCallables() {
1:         Collection<Callable<Subsystem>> callables = new ArrayList<Callable<Subsystem>>(FEATURE_COUNT);
1:         for (int i = 0; i < FEATURE_COUNT; i++) {
1:             final int count = i;
1:             callables.add(new Callable<Subsystem>() {
1:                 @Override
1:                 public Subsystem call() throws Exception {
1:                     Subsystem feature = getRootSubsystem().install("feature" + count, createFeature("feature" + count));
1:                     System.out.println("Installed feature " + count);
1:                     return feature;
1:                 }
1:             });
1:         }
1:         return callables;
1:     }
1: }
============================================================================