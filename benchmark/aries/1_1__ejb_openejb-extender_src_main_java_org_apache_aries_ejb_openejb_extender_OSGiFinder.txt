1:541fd79: /**
1:541fd79:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:541fd79:  *  contributor license agreements.  See the NOTICE file distributed with
1:541fd79:  *  this work for additional information regarding copyright ownership.
1:541fd79:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:541fd79:  *  (the "License"); you may not use this file except in compliance with
1:541fd79:  *  the License.  You may obtain a copy of the License at
1:541fd79:  *
1:541fd79:  *     http://www.apache.org/licenses/LICENSE-2.0
1:541fd79:  *
1:541fd79:  *  Unless required by applicable law or agreed to in writing, software
1:541fd79:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:541fd79:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:541fd79:  *  See the License for the specific language governing permissions and
1:541fd79:  *  limitations under the License.
1:541fd79:  */
1:541fd79: package org.apache.aries.ejb.openejb.extender;
1:541fd79: 
1:541fd79: import java.io.IOException;
1:541fd79: import java.net.URL;
1:541fd79: 
1:541fd79: import org.apache.xbean.finder.AbstractFinder;
1:541fd79: import org.osgi.framework.Bundle;
1:541fd79: import org.osgi.framework.wiring.BundleWiring;
1:541fd79: import org.slf4j.Logger;
1:541fd79: import org.slf4j.LoggerFactory;
1:541fd79: 
1:541fd79: public class OSGiFinder extends AbstractFinder {
1:541fd79: 
1:541fd79:   private final Bundle b;
1:541fd79: 
1:541fd79:   private static final Logger logger = LoggerFactory.getLogger(OSGiFinder.class);
1:541fd79:   
1:541fd79:   public OSGiFinder(Bundle bundle) {
1:541fd79:     b = bundle;
1:541fd79:     
1:541fd79:     for(String resource : bundle.adapt(BundleWiring.class).
1:541fd79:         listResources("/", "*.class", BundleWiring.LISTRESOURCES_RECURSE)) {
1:541fd79:       
1:541fd79:       try {
1:541fd79:         readClassDef(getResource(resource).openStream());
1:541fd79:       } catch (IOException e) {
1:541fd79:         logger.warn("Error processing class file " + resource);
1:541fd79:       }
1:541fd79:     }
1:541fd79:   }
1:541fd79: 
1:541fd79:   @Override
1:541fd79:   protected URL getResource(String name) {
1:541fd79:     return b.getResource(name);
1:541fd79:   }
1:541fd79: 
1:541fd79:   @Override
1:541fd79:   protected Class<?> loadClass(String className) throws ClassNotFoundException {
1:541fd79:     return b.loadClass(className);
1:541fd79:   }
1:541fd79: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:541fd79
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.openejb.extender;
1: 
1: import java.io.IOException;
1: import java.net.URL;
1: 
1: import org.apache.xbean.finder.AbstractFinder;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class OSGiFinder extends AbstractFinder {
1: 
1:   private final Bundle b;
1: 
1:   private static final Logger logger = LoggerFactory.getLogger(OSGiFinder.class);
1:   
1:   public OSGiFinder(Bundle bundle) {
1:     b = bundle;
1:     
1:     for(String resource : bundle.adapt(BundleWiring.class).
1:         listResources("/", "*.class", BundleWiring.LISTRESOURCES_RECURSE)) {
1:       
1:       try {
1:         readClassDef(getResource(resource).openStream());
1:       } catch (IOException e) {
1:         logger.warn("Error processing class file " + resource);
1:       }
1:     }
1:   }
1: 
1:   @Override
1:   protected URL getResource(String name) {
1:     return b.getResource(name);
1:   }
1: 
1:   @Override
1:   protected Class<?> loadClass(String className) throws ClassNotFoundException {
1:     return b.loadClass(className);
1:   }
1: }
============================================================================