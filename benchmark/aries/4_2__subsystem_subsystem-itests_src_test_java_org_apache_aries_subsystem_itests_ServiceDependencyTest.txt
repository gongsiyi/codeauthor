1:b75f264: /*
1:b75f264:  * Licensed under the Apache License, Version 2.0 (the "License");
1:b75f264:  * you may not use this file except in compliance with the License.
1:b75f264:  * You may obtain a copy of the License at
1:b75f264:  *
1:b75f264:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b75f264:  *
1:b75f264:  * Unless required by applicable law or agreed to in writing, software
1:b75f264:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b75f264:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b75f264:  * See the License for the specific language governing permissions and
1:b75f264:  * limitations under the License.
1:b75f264:  */
1:b75f264: package org.apache.aries.subsystem.itests;
1:b75f264: 
1:b75f264: import static org.junit.Assert.assertEquals;
1:b75f264: import static org.junit.Assert.assertNull;
1:b75f264: import static org.junit.Assert.fail;
1:b75f264: 
1:b75f264: import java.io.IOException;
1:2289e23: import java.util.Collection;
1:b75f264: import java.util.HashMap;
1:2289e23: import java.util.Iterator;
1:b75f264: import java.util.List;
1:b75f264: import java.util.Map;
1:b75f264: 
1:2289e23: import org.apache.aries.subsystem.core.archive.SubsystemImportServiceHeader;
1:b75f264: import org.apache.aries.subsystem.itests.util.GenericMetadataWrapper;
1:b75f264: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:b75f264: import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
1:b75f264: import org.junit.Assert;
1:b75f264: import org.junit.Test;
1:b75f264: import org.osgi.framework.InvalidSyntaxException;
1:b75f264: import org.osgi.framework.Version;
1:b75f264: import org.osgi.service.subsystem.Subsystem;
1:b75f264: import org.osgi.service.subsystem.SubsystemConstants;
1:b75f264: import org.osgi.service.subsystem.SubsystemException;
1:b75f264: 
1:b75f264: public class ServiceDependencyTest extends SubsystemTest {
1:b75f264: 	/*
1:b75f264: 	 * Subsystem-SymbolicName: application.a.esa
1:b75f264: 	 * Subsystem-Content: bundle.a.jar
1:b75f264: 	 */
1:b75f264: 	private static final String APPLICATION_A = "application.a.esa";
1:b75f264: 	/*
1:b75f264: 	 * Subsystem-SymbolicName: application.b.esa
1:b75f264: 	 * Subsystem-Content: bundle.b.jar
1:b75f264: 	 */
1:b75f264: 	private static final String APPLICATION_B = "application.b.esa";
1:b75f264: 	/*
1:b75f264: 	 * Subsystem-SymbolicName: application.b.esa
1:b75f264: 	 * Subsystem-Content: bundle.a.jar, bundle.b.jar
1:b75f264: 	 */
1:b75f264: 	private static final String APPLICATION_C = "application.c.esa";
1:b75f264: 	/*
1:b75f264: 	 * Subsystem-SymbolicName: application.d.esa
1:b75f264: 	 * Subsystem-Content: bundle.a.jar, composite.a.esa
1:b75f264: 	 */
1:b75f264: 	private static final String APPLICATION_D = "application.d.esa";
1:b75f264: 	/*
1:b75f264: 	 * Subsystem-SymbolicName: composite.a.esa
1:b75f264: 	 * Subsystem-Content: bundle.b.jar
1:b75f264: 	 */
1:b75f264: 	private static final String COMPOSITE_A = "composite.a.esa";
1:b75f264: 	/*
1:b75f264: 	 * Bundle-SymbolicName: bundle.a.jar
1:b75f264: 	 * Bundle-Blueprint: OSGI-INF/blueprint/*.xml
1:b75f264: 	 * 
1:b75f264: 	 * <blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
1:2ffcfb9: 	 * 		<reference interface="bundle.b" filter="(&(active=true)(mode=shared))"/>
1:b75f264: 	 * 		<service interface="bundle.a" ref="bundle.a"/>
1:b75f264: 	 * </blueprint>
1:b75f264: 	 */
1:b75f264: 	private static final String BUNDLE_A = "bundle.a.jar";
1:b75f264: 	/*
1:b75f264: 	 * Bundle-SymbolicName: bundle.b.jar
1:b75f264: 	 * Bundle-Blueprint: OSGI-INF/blueprint/*.xml
1:b75f264: 	 * 
1:b75f264: 	 * <blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
1:b75f264: 	 * 		<reference interface="bundle.a" availability="optional"/>
1:b75f264: 	 * 		<service ref="bundle.b">
1:b75f264: 	 * 			<interfaces>
1:b75f264: 	 * 				<value>bundle.b</value>
1:b75f264: 	 * 				<value>bundle.b1</value>
1:b75f264: 	 * 			</interfaces>
1:b75f264: 	 * 			<service-properties>
1:b75f264: 	 * 				<entry key="active">
1:b75f264: 	 * 					<value type="java.lang.Boolean">true</value>
1:b75f264: 	 * 				</entry>
1:b75f264: 	 * 				<entry key="mode" value="shared"/>
1:b75f264: 	 * 			</service-properties>
1:b75f264: 	 * 		</service>
1:b75f264: 	 * </blueprint>
1:b75f264: 	 */
1:b75f264: 	private static final String BUNDLE_B = "bundle.b.jar";
1:b75f264: 	
1:b75f264: 	private static void createApplicationA() throws IOException {
1:b75f264: 		createApplicationAManifest();
1:b75f264: 		createSubsystem(APPLICATION_A, BUNDLE_A);
2:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createApplicationB() throws IOException {
1:b75f264: 		createApplicationBManifest();
1:b75f264: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createApplicationC() throws IOException {
1:b75f264: 		createApplicationCManifest();
1:b75f264: 		createSubsystem(APPLICATION_C, BUNDLE_A, BUNDLE_B);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createApplicationD() throws IOException {
1:b75f264: 		createApplicationDManifest();
1:b75f264: 		createSubsystem(APPLICATION_D, BUNDLE_A, COMPOSITE_A);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createApplicationAManifest() throws IOException {
1:b75f264: 		createBasicApplicationManifest(APPLICATION_A);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createApplicationBManifest() throws IOException {
1:b75f264: 		createBasicApplicationManifest(APPLICATION_B);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createApplicationCManifest() throws IOException {
1:b75f264: 		createBasicApplicationManifest(APPLICATION_C);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createApplicationDManifest() throws IOException {
1:b75f264: 		createBasicApplicationManifest(APPLICATION_D);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createBasicApplicationManifest(String symbolicName) throws IOException {
1:b75f264: 		createBasicSubsystemManifest(symbolicName, null, null);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createBasicSubsystemManifest(String symbolicName, Version version, String type) throws IOException {
1:b75f264: 		Map<String, String> attributes = new HashMap<String, String>();
1:b75f264: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, symbolicName);
1:b75f264: 		if (version != null)
1:b75f264: 			attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, version.toString());
1:b75f264: 		if (type != null)
1:b75f264: 			attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, type);
1:b75f264: 		createManifest(symbolicName + ".mf", attributes);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 
1:57b6627: 	
1:b75f264: 	private static void createBundleA() throws IOException {
1:57b6627: 		createBlueprintBundle(
1:b75f264: 				BUNDLE_A, 
1:b75f264: 				new StringBuilder()
1:b75f264: 					.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
1:b75f264: 					.append("<blueprint ")
1:b75f264: 					.append("xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">")
1:b75f264: 					.append("<reference ")
1:2ffcfb9: 					.append("interface=\"bundle.b\" ")
1:2ffcfb9: 					.append("filter=\"(active=true)(mode=shared)\"")
1:b75f264: 					.append("/>")
1:b75f264: 					.append("<service ")
1:b75f264: 					.append("interface=\"bundle.a\" ")
1:b75f264: 					.append("ref=\"bundle.a\"")
1:b75f264: 					.append("/>")
1:b75f264: 					.append("</blueprint>")
1:b75f264: 					.toString());
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createBundleB() throws IOException {
1:57b6627: 		createBlueprintBundle(
1:b75f264: 				BUNDLE_B, 
1:b75f264: 				new StringBuilder()
1:b75f264: 					.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
1:b75f264: 					.append("<blueprint ")
1:b75f264: 					.append("xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">")
1:b75f264: 					.append("<reference ")
1:b75f264: 					.append("interface=\"bundle.a\" ")
1:b75f264: 					.append("availability=\"optional\"")
1:b75f264: 					.append("/>")
1:b75f264: 					.append("<service ref=\"bundle.b\">")
1:b75f264: 					.append("<interfaces>")
1:b75f264: 					.append("<value>bundle.b</value>")
1:b75f264: 					.append("<value>bundle.b1</value>")
1:b75f264: 					.append("</interfaces>")
1:b75f264: 					.append("<service-properties>")
1:b75f264: 					.append("<entry key=\"active\">")
1:b75f264: 					.append("<value type=\"java.lang.Boolean\">true</value>")
1:b75f264: 					.append("</entry>")
1:b75f264: 					.append("<entry key=\"mode\" value=\"shared\"/>")
1:b75f264: 					.append("</service-properties>")
1:b75f264: 					.append("</service>")
1:b75f264: 					.append("</blueprint>")
1:b75f264: 					.toString());
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createCompositeA() throws IOException {
1:b75f264: 		createCompositeAManifest();
1:b75f264: 		createSubsystem(COMPOSITE_A, BUNDLE_B);
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private static void createCompositeAManifest() throws IOException {
1:b75f264: 		Map<String, String> attributes = new HashMap<String, String>();
1:b75f264: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:b75f264: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:b75f264: 		attributes.put(
1:b75f264: 				SubsystemConstants.SUBSYSTEM_EXPORTSERVICE, 
1:b75f264: 				"bundle.b;filter:=\"(&(active=true)(mode=shared))\"");
1:b75f264: 		createManifest(COMPOSITE_A + ".mf", attributes);
1:b75f264: 	}
1:b75f264: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:b75f264: 		createBundleA();
1:b75f264: 		createBundleB();
1:b75f264: 		createApplicationA();
1:b75f264: 		createApplicationB();
1:b75f264: 		createApplicationC();
1:b75f264: 		createCompositeA();
1:b75f264: 		createApplicationD();
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	//@Test
1:b75f264: 	public void testImportServiceDependencySatisfiedByChild() throws Exception {
1:b75f264: 		try {
1:b75f264: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_D);
1:b75f264: 			try {
1:b75f264: 				assertNull(
1:b75f264: 						"Generated application Subsystem-ImportService header when dependency satisfied by child",
1:b75f264: 						subsystem.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE));
1:b75f264: 				assertSubsystemExportServiceHeader(
1:b75f264: 						subsystem.getChildren().iterator().next(), 
1:b75f264: 						"bundle.b;filter:=\"(&(active=true)(mode=shared))\"");
1:b75f264: 			}
1:b75f264: 			finally {
1:b75f264: 				uninstallSubsystemSilently(subsystem);
1:b75f264: 			}
1:b75f264: 		}
1:b75f264: 		catch (SubsystemException e) {
1:b75f264: 			e.printStackTrace();
1:b75f264: 			fail("Installation must succeed if missing service dependency is satisfied");
1:b75f264: 		}
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	@Test
1:b75f264: 	public void testImportServiceDependencySatisfiedByContent() throws Exception {
1:b75f264: 		try {
1:b75f264: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_C);
1:b75f264: 			try {
1:b75f264: 				assertNull(
1:b75f264: 						"Generated application Subsystem-ImportService header when dependency satisfied by content",
1:b75f264: 						subsystem.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE));
1:b75f264: 			}
1:b75f264: 			finally {
1:b75f264: 				uninstallSubsystemSilently(subsystem);
1:b75f264: 			}
1:b75f264: 		}
1:b75f264: 		catch (SubsystemException e) {
1:b75f264: 			e.printStackTrace();
1:b75f264: 			fail("Installation must succeed if service dependency is satisfied");
1:b75f264: 		}
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	@Test
1:b75f264: 	public void testImportServiceDependencySatisfiedByParent() throws Exception {
1:b75f264: 		try {
1:b75f264: 			Subsystem parent = installSubsystemFromFile(APPLICATION_B);
1:b75f264: 			try {
1:b75f264: 				Subsystem child = installSubsystemFromFile(parent, APPLICATION_A);
1:b75f264: 				try {
1:2ffcfb9: 					assertSubsystemImportServiceHeader(child, "bundle.b;filter:=\"(&(active=true)(mode=shared))\";resolution:=mandatory;cardinality:=single;effective:=active");
1:b75f264: 				}
1:b75f264: 				finally {
1:b75f264: 					uninstallSubsystemSilently(child);
1:b75f264: 				}
1:b75f264: 			}
1:b75f264: 			catch (SubsystemException e) {
1:b75f264: 				e.printStackTrace();
1:b75f264: 				fail("Installation must succeed if service dependency is satisfied");
1:b75f264: 			}
1:b75f264: 			finally {
1:b75f264: 				uninstallSubsystemSilently(parent);
1:b75f264: 			}
1:b75f264: 		}
1:b75f264: 		catch (SubsystemException e) {
1:b75f264: 			e.printStackTrace();
1:b75f264: 			fail("Installation must succeed if missing service dependency is optional");
1:b75f264: 		}
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	@Test
1:b75f264: 	public void testMissingImportServiceDependencyMandatory() throws Exception {
1:b75f264: 		try {
1:b75f264: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_A);
1:b75f264: 			uninstallSubsystemSilently(subsystem);
1:b75f264: 			fail("Installation must fail due to missing service dependency");
1:b75f264: 		}
1:b75f264: 		catch (SubsystemException e) {
1:b75f264: 			// Okay.
1:b75f264: 		}
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	@Test
1:b75f264: 	public void testMissingImportServiceDependencyOptional() throws Exception {
1:b75f264: 		try {
1:b75f264: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_B);
1:b75f264: 			try {
1:2ffcfb9: 				assertSubsystemImportServiceHeader(subsystem, "bundle.a;resolution:=optional;cardinality:=single;effective:=active");
1:b75f264: 			}
1:b75f264: 			finally {
1:b75f264: 				uninstallSubsystemSilently(subsystem);
1:b75f264: 			}
1:b75f264: 		}
1:b75f264: 		catch (SubsystemException e) {
1:b75f264: 			e.printStackTrace();
1:b75f264: 			fail("Installation must succeed if missing service dependency is optional");
1:b75f264: 		}
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private void assertSubsystemExportServiceHeader(Subsystem subsystem, String value) throws InvalidSyntaxException {
1:b75f264: 		String header = assertHeaderExists(subsystem, SubsystemConstants.SUBSYSTEM_EXPORTSERVICE);
2:b75f264: 		List<GenericMetadata> actual = ManifestHeaderProcessor.parseRequirementString(header);
2:b75f264: 		List<GenericMetadata> expected = ManifestHeaderProcessor.parseRequirementString(value);
2:b75f264: 		Assert.assertEquals("Wrong number of clauses", expected.size(), actual.size());
2:b75f264: 		for (int i = 0; i < expected.size(); i++)
2:b75f264: 			assertEquals("Wrong clause", new GenericMetadataWrapper(expected.get(i)), new GenericMetadataWrapper(actual.get(i)));
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	private void assertSubsystemImportServiceHeader(Subsystem subsystem, String value) throws InvalidSyntaxException {
1:b75f264: 		String header = assertHeaderExists(subsystem, SubsystemConstants.SUBSYSTEM_IMPORTSERVICE);
1:2289e23: 		SubsystemImportServiceHeader actual = new SubsystemImportServiceHeader(header);
1:2289e23: 		SubsystemImportServiceHeader expected = new SubsystemImportServiceHeader(value);
1:2289e23: 		Collection<SubsystemImportServiceHeader.Clause> actualClauses = actual.getClauses();
1:2289e23: 		Collection<SubsystemImportServiceHeader.Clause> expectedClauses = expected.getClauses();
1:2289e23: 		Assert.assertEquals("Wrong number of clauses", expectedClauses.size(), actualClauses.size());
1:2289e23: 		Iterator<SubsystemImportServiceHeader.Clause> actualItr = actualClauses.iterator();
1:2289e23: 		Iterator<SubsystemImportServiceHeader.Clause>  expectedItr = expectedClauses.iterator();
1:2289e23: 		while (expectedItr.hasNext()) {
1:2289e23: 			assertEquals("Wrong clause", expectedItr.next(), actualItr.next());
1:2289e23: 		}
1:b75f264: 	}
1:b75f264: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2289e23
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Iterator;
1: import org.apache.aries.subsystem.core.archive.SubsystemImportServiceHeader;
/////////////////////////////////////////////////////////////////////////
1: 		SubsystemImportServiceHeader actual = new SubsystemImportServiceHeader(header);
1: 		SubsystemImportServiceHeader expected = new SubsystemImportServiceHeader(value);
1: 		Collection<SubsystemImportServiceHeader.Clause> actualClauses = actual.getClauses();
1: 		Collection<SubsystemImportServiceHeader.Clause> expectedClauses = expected.getClauses();
1: 		Assert.assertEquals("Wrong number of clauses", expectedClauses.size(), actualClauses.size());
1: 		Iterator<SubsystemImportServiceHeader.Clause> actualItr = actualClauses.iterator();
1: 		Iterator<SubsystemImportServiceHeader.Clause>  expectedItr = expectedClauses.iterator();
1: 		while (expectedItr.hasNext()) {
1: 			assertEquals("Wrong clause", expectedItr.next(), actualItr.next());
1: 		}
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 	 * 		<reference interface="bundle.b" filter="(&(active=true)(mode=shared))"/>
/////////////////////////////////////////////////////////////////////////
1: 					.append("interface=\"bundle.b\" ")
1: 					.append("filter=\"(active=true)(mode=shared)\"")
/////////////////////////////////////////////////////////////////////////
1: 					assertSubsystemImportServiceHeader(child, "bundle.b;filter:=\"(&(active=true)(mode=shared))\";resolution:=mandatory;cardinality:=single;effective:=active");
/////////////////////////////////////////////////////////////////////////
1: 				assertSubsystemImportServiceHeader(subsystem, "bundle.a;resolution:=optional;cardinality:=single;effective:=active");
commit:6740c72
/////////////////////////////////////////////////////////////////////////
0: 					assertSubsystemImportServiceHeader(child, "osgi.service;filter:=\"(&(objectClass=bundle.b))\";resolution:=mandatory;cardinality:=single");
/////////////////////////////////////////////////////////////////////////
0: 				assertSubsystemImportServiceHeader(subsystem, "osgi.service;filter:=\"(&(objectClass=bundle.a))\";resolution:=optional;cardinality:=single");
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.itests.util.GenericMetadataWrapper;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
1: import org.junit.Assert;
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.Version;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class ServiceDependencyTest extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * Subsystem-Content: bundle.b.jar
1: 	 */
1: 	private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * Subsystem-Content: bundle.a.jar, bundle.b.jar
1: 	 */
1: 	private static final String APPLICATION_C = "application.c.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: application.d.esa
1: 	 * Subsystem-Content: bundle.a.jar, composite.a.esa
1: 	 */
1: 	private static final String APPLICATION_D = "application.d.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: composite.a.esa
1: 	 * Subsystem-Content: bundle.b.jar
1: 	 */
1: 	private static final String COMPOSITE_A = "composite.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Bundle-Blueprint: OSGI-INF/blueprint/*.xml
1: 	 * 
1: 	 * <blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
0: 	 * 		<reference interface="bundle.b"/>
0: 	 * 		<reference interface="bundle.b1" filter="(active=true)"/>
1: 	 * 		<service interface="bundle.a" ref="bundle.a"/>
1: 	 * </blueprint>
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Bundle-Blueprint: OSGI-INF/blueprint/*.xml
1: 	 * 
1: 	 * <blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
1: 	 * 		<reference interface="bundle.a" availability="optional"/>
1: 	 * 		<service ref="bundle.b">
1: 	 * 			<interfaces>
1: 	 * 				<value>bundle.b</value>
1: 	 * 				<value>bundle.b1</value>
1: 	 * 			</interfaces>
1: 	 * 			<service-properties>
1: 	 * 				<entry key="active">
1: 	 * 					<value type="java.lang.Boolean">true</value>
1: 	 * 				</entry>
1: 	 * 				<entry key="mode" value="shared"/>
1: 	 * 			</service-properties>
1: 	 * 		</service>
1: 	 * </blueprint>
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createApplicationB() throws IOException {
1: 		createApplicationBManifest();
1: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1: 	}
1: 	
1: 	private static void createApplicationC() throws IOException {
1: 		createApplicationCManifest();
1: 		createSubsystem(APPLICATION_C, BUNDLE_A, BUNDLE_B);
1: 	}
1: 	
1: 	private static void createApplicationD() throws IOException {
1: 		createApplicationDManifest();
1: 		createSubsystem(APPLICATION_D, BUNDLE_A, COMPOSITE_A);
1: 	}
1: 	
1: 	private static void createApplicationAManifest() throws IOException {
1: 		createBasicApplicationManifest(APPLICATION_A);
1: 	}
1: 	
1: 	private static void createApplicationBManifest() throws IOException {
1: 		createBasicApplicationManifest(APPLICATION_B);
1: 	}
1: 	
1: 	private static void createApplicationCManifest() throws IOException {
1: 		createBasicApplicationManifest(APPLICATION_C);
1: 	}
1: 	
1: 	private static void createApplicationDManifest() throws IOException {
1: 		createBasicApplicationManifest(APPLICATION_D);
1: 	}
1: 	
1: 	private static void createBasicApplicationManifest(String symbolicName) throws IOException {
1: 		createBasicSubsystemManifest(symbolicName, null, null);
1: 	}
1: 	
1: 	private static void createBasicSubsystemManifest(String symbolicName, Version version, String type) throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, symbolicName);
1: 		if (version != null)
1: 			attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, version.toString());
1: 		if (type != null)
1: 			attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, type);
1: 		createManifest(symbolicName + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundle(String symbolicName, String blueprintXml)
0: 			throws IOException {
0: 		write(symbolicName,
0: 				ArchiveFixture.newJar().manifest().symbolicName(symbolicName)
0: 						.end().file("OSGI-INF/blueprint/blueprint.xml", blueprintXml));
1: 	}
1: 	
1: 	private static void createBundleA() throws IOException {
0: 		createBundle(
1: 				BUNDLE_A, 
1: 				new StringBuilder()
1: 					.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
1: 					.append("<blueprint ")
1: 					.append("xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">")
1: 					.append("<reference ")
0: 					.append("interface=\"bundle.b\"")
1: 					.append("/>")
1: 					.append("<service ")
1: 					.append("interface=\"bundle.a\" ")
1: 					.append("ref=\"bundle.a\"")
1: 					.append("/>")
1: 					.append("</blueprint>")
1: 					.toString());
1: 	}
1: 	
1: 	private static void createBundleB() throws IOException {
0: 		createBundle(
1: 				BUNDLE_B, 
1: 				new StringBuilder()
1: 					.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
1: 					.append("<blueprint ")
1: 					.append("xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">")
1: 					.append("<reference ")
1: 					.append("interface=\"bundle.a\" ")
1: 					.append("availability=\"optional\"")
1: 					.append("/>")
1: 					.append("<service ref=\"bundle.b\">")
1: 					.append("<interfaces>")
1: 					.append("<value>bundle.b</value>")
1: 					.append("<value>bundle.b1</value>")
1: 					.append("</interfaces>")
1: 					.append("<service-properties>")
1: 					.append("<entry key=\"active\">")
1: 					.append("<value type=\"java.lang.Boolean\">true</value>")
1: 					.append("</entry>")
1: 					.append("<entry key=\"mode\" value=\"shared\"/>")
1: 					.append("</service-properties>")
1: 					.append("</service>")
1: 					.append("</blueprint>")
1: 					.toString());
1: 	}
1: 	
1: 	private static void createCompositeA() throws IOException {
1: 		createCompositeAManifest();
1: 		createSubsystem(COMPOSITE_A, BUNDLE_B);
1: 	}
1: 	
1: 	private static void createCompositeAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(
1: 				SubsystemConstants.SUBSYSTEM_EXPORTSERVICE, 
1: 				"bundle.b;filter:=\"(&(active=true)(mode=shared))\"");
1: 		createManifest(COMPOSITE_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static boolean createdTestFiles;
0: 	@Before
0: 	public static void createTestFiles() throws Exception {
0: 		if (createdTestFiles)
0: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createApplicationB();
1: 		createApplicationC();
1: 		createCompositeA();
1: 		createApplicationD();
0: 		createdTestFiles = true;
1: 	}
1: 	
1: 	//@Test
1: 	public void testImportServiceDependencySatisfiedByChild() throws Exception {
1: 		try {
1: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_D);
1: 			try {
1: 				assertNull(
1: 						"Generated application Subsystem-ImportService header when dependency satisfied by child",
1: 						subsystem.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE));
1: 				assertSubsystemExportServiceHeader(
1: 						subsystem.getChildren().iterator().next(), 
1: 						"bundle.b;filter:=\"(&(active=true)(mode=shared))\"");
1: 			}
1: 			finally {
1: 				uninstallSubsystemSilently(subsystem);
1: 			}
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Installation must succeed if missing service dependency is satisfied");
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testImportServiceDependencySatisfiedByContent() throws Exception {
1: 		try {
1: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_C);
1: 			try {
1: 				assertNull(
1: 						"Generated application Subsystem-ImportService header when dependency satisfied by content",
1: 						subsystem.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE));
1: 			}
1: 			finally {
1: 				uninstallSubsystemSilently(subsystem);
1: 			}
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Installation must succeed if service dependency is satisfied");
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testImportServiceDependencySatisfiedByParent() throws Exception {
1: 		try {
1: 			Subsystem parent = installSubsystemFromFile(APPLICATION_B);
1: 			try {
1: 				Subsystem child = installSubsystemFromFile(parent, APPLICATION_A);
1: 				try {
0: 					assertSubsystemImportServiceHeader(child, "osgi.service;filter:=\"(&(objectClass=bundle.b))\";resolution:=mandatory");
1: 				}
1: 				finally {
1: 					uninstallSubsystemSilently(child);
1: 				}
1: 			}
1: 			catch (SubsystemException e) {
1: 				e.printStackTrace();
1: 				fail("Installation must succeed if service dependency is satisfied");
1: 			}
1: 			finally {
1: 				uninstallSubsystemSilently(parent);
1: 			}
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Installation must succeed if missing service dependency is optional");
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testMissingImportServiceDependencyMandatory() throws Exception {
1: 		try {
1: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_A);
1: 			uninstallSubsystemSilently(subsystem);
1: 			fail("Installation must fail due to missing service dependency");
1: 		}
1: 		catch (SubsystemException e) {
1: 			// Okay.
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testMissingImportServiceDependencyOptional() throws Exception {
1: 		try {
1: 			Subsystem subsystem = installSubsystemFromFile(APPLICATION_B);
1: 			try {
0: 				assertSubsystemImportServiceHeader(subsystem, "osgi.service;filter:=\"(&(objectClass=bundle.a))\";resolution:=optional");
1: 			}
1: 			finally {
1: 				uninstallSubsystemSilently(subsystem);
1: 			}
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Installation must succeed if missing service dependency is optional");
1: 		}
1: 	}
1: 	
1: 	private void assertSubsystemExportServiceHeader(Subsystem subsystem, String value) throws InvalidSyntaxException {
1: 		String header = assertHeaderExists(subsystem, SubsystemConstants.SUBSYSTEM_EXPORTSERVICE);
1: 		List<GenericMetadata> actual = ManifestHeaderProcessor.parseRequirementString(header);
1: 		List<GenericMetadata> expected = ManifestHeaderProcessor.parseRequirementString(value);
1: 		Assert.assertEquals("Wrong number of clauses", expected.size(), actual.size());
1: 		for (int i = 0; i < expected.size(); i++)
1: 			assertEquals("Wrong clause", new GenericMetadataWrapper(expected.get(i)), new GenericMetadataWrapper(actual.get(i)));
1: 	}
1: 	
1: 	private void assertSubsystemImportServiceHeader(Subsystem subsystem, String value) throws InvalidSyntaxException {
1: 		String header = assertHeaderExists(subsystem, SubsystemConstants.SUBSYSTEM_IMPORTSERVICE);
1: 		List<GenericMetadata> actual = ManifestHeaderProcessor.parseRequirementString(header);
1: 		List<GenericMetadata> expected = ManifestHeaderProcessor.parseRequirementString(value);
1: 		Assert.assertEquals("Wrong number of clauses", expected.size(), actual.size());
1: 		for (int i = 0; i < expected.size(); i++)
1: 			assertEquals("Wrong clause", new GenericMetadataWrapper(expected.get(i)), new GenericMetadataWrapper(actual.get(i)));
1: 	}
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e1a1f0d
/////////////////////////////////////////////////////////////////////////
0: 					assertSubsystemImportServiceHeader(child, "osgi.service;filter:=\"(objectClass=bundle.b)\";resolution:=mandatory;cardinality:=single");
/////////////////////////////////////////////////////////////////////////
0: 				assertSubsystemImportServiceHeader(subsystem, "osgi.service;filter:=\"(objectClass=bundle.a)\";resolution:=optional;cardinality:=single");
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 		createBlueprintBundle(
/////////////////////////////////////////////////////////////////////////
1: 		createBlueprintBundle(
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
/////////////////////////////////////////////////////////////////////////
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
============================================================================