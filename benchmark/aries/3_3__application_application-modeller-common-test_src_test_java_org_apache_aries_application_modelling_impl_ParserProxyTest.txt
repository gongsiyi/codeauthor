1:a1f07b5: /*
1:a1f07b5:  * Licensed to the Apache Software Foundation (ASF) under one
1:a1f07b5:  * or more contributor license agreements.  See the NOTICE file
1:a1f07b5:  * distributed with this work for additional information
1:a1f07b5:  * regarding copyright ownership.  The ASF licenses this file
1:a1f07b5:  * to you under the Apache License, Version 2.0 (the
1:a1f07b5:  * "License"); you may not use this file except in compliance
1:a1f07b5:  * with the License.  You may obtain a copy of the License at
1:a1f07b5:  *
1:a1f07b5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a1f07b5:  *
1:a1f07b5:  * Unless required by applicable law or agreed to in writing,
1:a1f07b5:  * software distributed under the License is distributed on an
1:a1f07b5:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:a1f07b5:  * KIND, either express or implied.  See the License for the
1:a1f07b5:  * specific language governing permissions and limitations
1:a1f07b5:  * under the License.
1:a1f07b5:  */
3:a1f07b5: 
1:a1f07b5: package org.apache.aries.application.modelling.impl;
1:a1f07b5: 
1:a1f07b5: import static org.junit.Assert.assertEquals;
1:a1f07b5: import static org.junit.Assert.assertTrue;
1:a1f07b5: 
1:a1f07b5: import java.io.File;
1:a1f07b5: import java.io.FileInputStream;
1:26ae47b: import java.io.IOException;
1:a1f07b5: import java.net.URL;
1:a1f07b5: import java.util.ArrayList;
1:a1f07b5: import java.util.Arrays;
1:a1f07b5: import java.util.HashMap;
1:a1f07b5: import java.util.HashSet;
1:a1f07b5: import java.util.Hashtable;
1:a1f07b5: import java.util.Iterator;
1:5965be7: import java.util.LinkedHashSet;
1:a1f07b5: import java.util.List;
1:a1f07b5: import java.util.Map;
1:a1f07b5: import java.util.Set;
1:a1f07b5: 
1:58f55bd: import org.apache.aries.application.modelling.ModellingManager;
1:a1f07b5: import org.apache.aries.application.modelling.ParsedServiceElements;
1:a1f07b5: import org.apache.aries.application.modelling.ParserProxy;
1:a1f07b5: import org.apache.aries.application.modelling.WrappedReferenceMetadata;
1:a1f07b5: import org.apache.aries.application.modelling.WrappedServiceMetadata;
1:26ae47b: import org.apache.aries.application.modelling.standalone.OfflineModellingFactory;
1:a1f07b5: import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
1:a1f07b5: import org.apache.aries.blueprint.container.ParserServiceImpl;
1:a1f07b5: import org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl;
1:09a7647: import org.apache.aries.blueprint.services.ParserService;
1:a1f07b5: import org.apache.aries.mocks.BundleContextMock;
1:a1f07b5: import org.apache.aries.unittest.mocks.Skeleton;
1:a1f07b5: import org.junit.AfterClass;
1:a1f07b5: import org.junit.Test;
1:26ae47b: import org.junit.runner.RunWith;
1:26ae47b: import org.junit.runners.Parameterized;
1:26ae47b: import org.junit.runners.Parameterized.Parameters;
1:a1f07b5: import org.osgi.framework.BundleContext;
1:a1f07b5: 
1:26ae47b: @RunWith(Parameterized.class)
1:26ae47b: public class ParserProxyTest {
1:a1f07b5: 
1:26ae47b:   @Parameters
1:26ae47b:   public static List<Object[]> parserProxies() {
1:26ae47b:     return Arrays.asList(new Object[][] {
1:26ae47b:             {getMockParserServiceProxy()}, 
1:26ae47b:             {OfflineModellingFactory.getOfflineParserProxy()}});
1:a1f07b5:   }
1:a1f07b5:   
1:26ae47b:   public static ParserProxy getMockParserServiceProxy() {
1:26ae47b:       BundleContext mockCtx = Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:26ae47b:       NamespaceHandlerRegistry nhri = new NamespaceHandlerRegistryImpl (mockCtx);
1:26ae47b: 
1:26ae47b:       ParserService parserService = new ParserServiceImpl(nhri);
1:26ae47b:       mockCtx.registerService(ParserService.class.getName(), parserService, new Hashtable<String, String>());
1:26ae47b:       
1:26ae47b:       ParserProxyImpl parserProxyService = new ParserProxyImpl();
1:26ae47b:       parserProxyService.setParserService(parserService);
1:26ae47b:       parserProxyService.setBundleContext(mockCtx);
1:26ae47b:       parserProxyService.setModellingManager(new ModellingManagerImpl());
1:26ae47b:       
1:26ae47b:       return parserProxyService;
1:26ae47b:   }
1:a1f07b5:   
1:a1f07b5:   @AfterClass
1:a1f07b5:   public static void teardown() { 
1:a1f07b5:     BundleContextMock.clear();
1:a1f07b5:   }
1:a1f07b5:   
1:26ae47b:   private final ModellingManager _modellingManager;
1:26ae47b:   private final ParserProxy _parserProxy;
1:26ae47b:   private final File resourceDir;
1:26ae47b:   
1:26ae47b:   public ParserProxyTest(ParserProxy sut) throws IOException {
1:26ae47b: 	  _parserProxy = sut;
1:26ae47b: 	  _modellingManager = new ModellingManagerImpl();
1:26ae47b: 	  
1:26ae47b: 	  // make sure paths work in Eclipse as well as Maven
1:26ae47b: 	  if (new File(".").getCanonicalFile().getName().equals("target")) {
1:26ae47b: 	      resourceDir = new File("../src/test/resources");
1:26ae47b: 	  } else {
1:26ae47b: 	      resourceDir = new File("src/test/resources");
1:26ae47b: 	  }
1:26ae47b:   }
1:a1f07b5:   
1:a1f07b5:   
1:a1f07b5:   @Test
1:a1f07b5:   public void basicTest1() throws Exception { 
1:26ae47b:     File bpXml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp.xml");
1:26ae47b:     File bp2Xml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp2.xml");
1:a1f07b5:     List<URL> urls = new ArrayList<URL>();
1:a1f07b5:     urls.add ((bpXml.toURI()).toURL());
1:a1f07b5:     urls.add ((bp2Xml.toURI()).toURL());
1:a1f07b5:     
1:a1f07b5:     List<? extends WrappedServiceMetadata> results = _parserProxy.parse(urls);
1:a1f07b5:     assertTrue ("Four results expected, not " + results.size(), results.size() == 4);
1:a1f07b5:     
1:a1f07b5:     Set<WrappedServiceMetadata> resultSet = new HashSet<WrappedServiceMetadata>(results);
1:a1f07b5:     Set<WrappedServiceMetadata> expectedResults = getTest1ExpectedResults();
1:a1f07b5:     assertEquals ("Blueprint parsed xml is not as expected: " + resultSet.toString() + " != " + expectedResults,
1:a1f07b5:         resultSet, expectedResults);
1:a1f07b5:   }
1:a1f07b5:   
1:a1f07b5:   @Test
1:a1f07b5:   public void testParseAllServiceElements() throws Exception { 
1:26ae47b:     File bpXml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp.xml");
1:26ae47b:     File bp2Xml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp2.xml");
1:a1f07b5:     
1:a1f07b5:     List<WrappedServiceMetadata> services = new ArrayList<WrappedServiceMetadata>();
1:a1f07b5:     List<WrappedReferenceMetadata> references = new ArrayList<WrappedReferenceMetadata>();
1:a1f07b5:     
1:a1f07b5:     FileInputStream fis = new FileInputStream (bpXml);
1:a1f07b5:     ParsedServiceElements bpelem = _parserProxy.parseAllServiceElements(fis); 
1:a1f07b5:     services.addAll(bpelem.getServices());
1:a1f07b5:     references.addAll(bpelem.getReferences());
1:a1f07b5:     
1:a1f07b5:     fis = new FileInputStream (bp2Xml);
1:a1f07b5:     bpelem = _parserProxy.parseAllServiceElements(fis); 
1:a1f07b5:     services.addAll(bpelem.getServices());
1:a1f07b5:     references.addAll(bpelem.getReferences());
1:a1f07b5:     
1:a1f07b5:     // We expect:
1:08df2a2:     // bp.xml: 3 services and 2 references
1:a1f07b5:     // bp2.xml: 3 services and a reference list
1:a1f07b5:     //
1:a1f07b5:     assertTrue ("Six services expected, not " + services.size(), services.size() == 6);
1:08df2a2:     assertTrue ("Three references expected, not " + references.size(), references.size() == 3);
1:a1f07b5:     
1:a1f07b5:     Set<WrappedServiceMetadata> expectedServices = getTest2ExpectedServices();
1:a1f07b5:     // ServiceResultSet will contain some services with autogenerated names starting '.' so we can't 
1:a1f07b5:     // use a straight Set.equals(). We could add the autogenerated names to the expected results but instead
1:a1f07b5:     // let's test that differsOnlyByName() works
1:a1f07b5:     int serviceMatchesFound = 0;
1:a1f07b5:     for (WrappedServiceMetadata result : services) { 
1:a1f07b5:       Iterator<WrappedServiceMetadata> it = expectedServices.iterator();
1:a1f07b5:       while (it.hasNext()) { 
1:a1f07b5:         WrappedServiceMetadata next = it.next();
1:a1f07b5:         if (result.equals(next) || result.identicalOrDiffersOnlyByName(next)) { 
1:a1f07b5:           serviceMatchesFound++;
1:a1f07b5:           it.remove();
1:a1f07b5:         }
1:a1f07b5:       }
1:a1f07b5:     }
1:a1f07b5:     
1:a1f07b5:     assertEquals ("Parsed services are wrong: " + expectedServices + " unmatched ",
1:a1f07b5:         6, serviceMatchesFound);
1:a1f07b5:     
1:a1f07b5:     Set<WrappedReferenceMetadata> expectedReferences = getTest2ExpectedReferences();
1:a1f07b5:     Set<WrappedReferenceMetadata> results = new HashSet<WrappedReferenceMetadata>(references);
1:a1f07b5:     assertTrue ("Parsed references are not as we'd expected: " + results.toString() + " != " + expectedReferences,
1:a1f07b5:         results.equals(expectedReferences));
1:a1f07b5:   }
1:a1f07b5:   
1:a1f07b5:   @Test
1:a1f07b5:   public void checkMultiValues() throws Exception { 
1:26ae47b:     File bpXml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bpMultiValues.xml");
1:a1f07b5:     List<WrappedServiceMetadata> services = new ArrayList<WrappedServiceMetadata>();
1:a1f07b5:     FileInputStream fis = new FileInputStream (bpXml);
1:a1f07b5:     ParsedServiceElements bpelem = _parserProxy.parseAllServiceElements(fis); 
1:a1f07b5:     services.addAll(bpelem.getServices());
1:a1f07b5:     
1:a1f07b5:     assertEquals ("Multi valued service not parsed correctly", services.size(), 1);
1:a1f07b5:     
1:a1f07b5:     WrappedServiceMetadata wsm = services.get(0);
1:a1f07b5:     Map<String, Object> props = wsm.getServiceProperties();
1:a1f07b5:     String [] intents = (String[]) props.get("service.intents");
1:a1f07b5:     
1:a1f07b5:     assertEquals ("Service.intents[0] wrong", intents[0], "propagatesTransaction");
1:a1f07b5:     assertEquals ("Service.intents[1] wrong", intents[1], "confidentiality");
1:a1f07b5:     
1:a1f07b5:   }
1:a1f07b5:   
1:a1f07b5:   // model
1:a1f07b5:   // <reference id="fromOutside" interface="foo.bar.MyInjectedService"/>
1:a1f07b5:   // <reference-list id="refList1" interface="my.logging.services" filter="(active=true)"/>
1:a1f07b5:   //
1:a1f07b5:   private Set<WrappedReferenceMetadata> getTest2ExpectedReferences() throws Exception { 
1:a1f07b5:     Set<WrappedReferenceMetadata> expectedResults = new HashSet<WrappedReferenceMetadata>();
1:a1f07b5:          
1:58f55bd:     expectedResults.add(_modellingManager.getImportedService(false, "foo.bar.MyInjectedService", null, 
1:a1f07b5:         null, "fromOutside", false));
1:08df2a2:     expectedResults.add(_modellingManager.getImportedService(true, "foo.bar.MyInjectedService", null, 
1:08df2a2:         null, "anotherOptionalReference", false));
1:58f55bd:     expectedResults.add(_modellingManager.getImportedService(false, "my.logging.service", null, "(&(trace=on)(debug=true))", "refList1", true));
1:a1f07b5:     
1:a1f07b5:     return expectedResults;
1:a1f07b5:   }
1:a1f07b5:   
1:a1f07b5:   // Test 2 includes anonymous services: the expected results are a superset of test1
1:a1f07b5:   private Set<WrappedServiceMetadata> getTest2ExpectedServices() { 
1:a1f07b5:     Set<WrappedServiceMetadata> expectedResults = getTest1ExpectedResults();
1:a1f07b5:         
1:58f55bd:     expectedResults.add(_modellingManager.getExportedService("", 0, Arrays.asList("foo.bar.AnonService"), null));
1:58f55bd:     expectedResults.add(_modellingManager.getExportedService("", 0, Arrays.asList("foo.bar.NamedInnerBeanService"), null));
1:a1f07b5:     return expectedResults;
1:a1f07b5:   }
1:a1f07b5:   
1:a1f07b5:   private Set<WrappedServiceMetadata> getTest1ExpectedResults() { 
1:a1f07b5:     Set<WrappedServiceMetadata> expectedResults = new HashSet<WrappedServiceMetadata>();
1:a1f07b5:     Map<String, Object> props = new HashMap<String, Object>();
1:a1f07b5:     props.put ("priority", "9");
1:a1f07b5:     props.put("volume", "11");
1:4db0d92:     props.put("property.list", Arrays.asList("1", "2", "3", "2", "1"));
1:4db0d92:     //Deliberately miss off duplicate entries and reorder, the parser should still match this
1:5965be7:     props.put("property.set", new LinkedHashSet<String>(Arrays.asList("1", "2", "3")));
1:4db0d92:     props.put("property.array", new String[]{"1", "2", "3", "2", "1"});
1:a1f07b5:     props.put("osgi.service.blueprint.compname", "myBean");
1:58f55bd:     expectedResults.add(_modellingManager.getExportedService("myService", 0, Arrays.asList("foo.bar.MyService"), props));
1:a1f07b5: 
1:a1f07b5:     props = new HashMap<String, Object>();
1:a1f07b5:     props.put ("priority", "7");
1:a1f07b5:     props.put ("volume", "11");
1:a1f07b5:     props.put ("osgi.service.blueprint.compname", "bean1");
1:58f55bd:     expectedResults.add(_modellingManager.getExportedService("service1.should.be.exported", 0, Arrays.asList("foo.bar.MyService"), props));
1:a1f07b5:  
1:a1f07b5:     props = new HashMap<String, Object>();
1:a1f07b5:     props.put ("customer", "pig");
1:a1f07b5:     props.put ("osgi.service.blueprint.compname", "bean2");
1:58f55bd:     expectedResults.add(_modellingManager.getExportedService("service2.should.not.be.exported", 0, Arrays.asList("com.acme.Delivery"), props));
1:a1f07b5:         
1:a1f07b5:     props = new HashMap<String, Object>();
1:a1f07b5:     props.put ("customer", "pig");
1:a1f07b5:     props.put ("target", "rabbit");
1:a1f07b5:     props.put ("payload", "excessive");
1:a1f07b5:     props.put ("osgi.service.blueprint.compname", "bean3");
1:58f55bd:     expectedResults.add(_modellingManager.getExportedService("bean3", 0, Arrays.asList("com.acme.Delivery"), props));
1:a1f07b5:        
1:a1f07b5:     return expectedResults;
1:a1f07b5:   } 
1:a1f07b5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:5965be7
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedHashSet;
/////////////////////////////////////////////////////////////////////////
1:     props.put("property.set", new LinkedHashSet<String>(Arrays.asList("1", "2", "3")));
commit:4db0d92
/////////////////////////////////////////////////////////////////////////
0: import java.util.TreeSet;
/////////////////////////////////////////////////////////////////////////
1:     props.put("property.list", Arrays.asList("1", "2", "3", "2", "1"));
1:     //Deliberately miss off duplicate entries and reorder, the parser should still match this
0:     props.put("property.set", new TreeSet<String>(Arrays.asList("2", "3", "1")));
1:     props.put("property.array", new String[]{"1", "2", "3", "2", "1"});
commit:08df2a2
/////////////////////////////////////////////////////////////////////////
1:     // bp.xml: 3 services and 2 references
1:     assertTrue ("Three references expected, not " + references.size(), references.size() == 3);
/////////////////////////////////////////////////////////////////////////
1:     expectedResults.add(_modellingManager.getImportedService(true, "foo.bar.MyInjectedService", null, 
1:         null, "anotherOptionalReference", false));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:26ae47b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.standalone.OfflineModellingFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
1: public class ParserProxyTest {
1:   @Parameters
1:   public static List<Object[]> parserProxies() {
1:     return Arrays.asList(new Object[][] {
1:             {getMockParserServiceProxy()}, 
1:             {OfflineModellingFactory.getOfflineParserProxy()}});
1:   public static ParserProxy getMockParserServiceProxy() {
1:       BundleContext mockCtx = Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:       NamespaceHandlerRegistry nhri = new NamespaceHandlerRegistryImpl (mockCtx);
1: 
1:       ParserService parserService = new ParserServiceImpl(nhri);
1:       mockCtx.registerService(ParserService.class.getName(), parserService, new Hashtable<String, String>());
1:       
1:       ParserProxyImpl parserProxyService = new ParserProxyImpl();
1:       parserProxyService.setParserService(parserService);
1:       parserProxyService.setBundleContext(mockCtx);
1:       parserProxyService.setModellingManager(new ModellingManagerImpl());
1:       
1:       return parserProxyService;
1:   }
1:   private final ModellingManager _modellingManager;
1:   private final ParserProxy _parserProxy;
1:   private final File resourceDir;
1:   
1:   public ParserProxyTest(ParserProxy sut) throws IOException {
1: 	  _parserProxy = sut;
1: 	  _modellingManager = new ModellingManagerImpl();
1: 	  
1: 	  // make sure paths work in Eclipse as well as Maven
1: 	  if (new File(".").getCanonicalFile().getName().equals("target")) {
1: 	      resourceDir = new File("../src/test/resources");
1: 	  } else {
1: 	      resourceDir = new File("src/test/resources");
1: 	  }
1:   }
1:     File bpXml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp.xml");
1:     File bp2Xml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp2.xml");
/////////////////////////////////////////////////////////////////////////
1:     File bpXml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp.xml");
1:     File bp2Xml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp2.xml");
/////////////////////////////////////////////////////////////////////////
1:     File bpXml = new File (resourceDir, "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bpMultiValues.xml");
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ParserService;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingManager;
/////////////////////////////////////////////////////////////////////////
0:   static ModellingManager _modellingManager;
/////////////////////////////////////////////////////////////////////////
0:     _parserProxy = new ParserProxyImpl();
0:     ((ParserProxyImpl)_parserProxy).setParserService(parserService);
0:     ((ParserProxyImpl)_parserProxy).setBundleContext(mockCtx);
0:     _modellingManager = new ModellingManagerImpl();
0:     ((ParserProxyImpl)_parserProxy).setModellingManager(_modellingManager);
/////////////////////////////////////////////////////////////////////////
1:     expectedResults.add(_modellingManager.getImportedService(false, "foo.bar.MyInjectedService", null, 
1:     expectedResults.add(_modellingManager.getImportedService(false, "my.logging.service", null, "(&(trace=on)(debug=true))", "refList1", true));
/////////////////////////////////////////////////////////////////////////
1:     expectedResults.add(_modellingManager.getExportedService("", 0, Arrays.asList("foo.bar.AnonService"), null));
1:     expectedResults.add(_modellingManager.getExportedService("", 0, Arrays.asList("foo.bar.NamedInnerBeanService"), null));
/////////////////////////////////////////////////////////////////////////
1:     expectedResults.add(_modellingManager.getExportedService("myService", 0, Arrays.asList("foo.bar.MyService"), props));
1:     expectedResults.add(_modellingManager.getExportedService("service1.should.be.exported", 0, Arrays.asList("foo.bar.MyService"), props));
1:     expectedResults.add(_modellingManager.getExportedService("service2.should.not.be.exported", 0, Arrays.asList("com.acme.Delivery"), props));
1:     expectedResults.add(_modellingManager.getExportedService("bean3", 0, Arrays.asList("com.acme.Delivery"), props));
commit:a1f07b5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.modelling.impl;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.modelling.ParsedServiceElements;
1: import org.apache.aries.application.modelling.ParserProxy;
1: import org.apache.aries.application.modelling.WrappedReferenceMetadata;
1: import org.apache.aries.application.modelling.WrappedServiceMetadata;
0: import org.apache.aries.application.modelling.utils.ModellingManager;
0: import org.apache.aries.blueprint.ParserService;
1: import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
1: import org.apache.aries.blueprint.container.ParserServiceImpl;
1: import org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl;
1: import org.apache.aries.mocks.BundleContextMock;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.AfterClass;
0: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: 
0: public class ParserProxyImplTest {
1: 
0:   static ParserProxy _parserProxy;
1:   
0:   @BeforeClass
0:   public static void setup() { 
0:     BundleContext mockCtx = Skeleton.newMock(new BundleContextMock(), BundleContext.class);
0:     NamespaceHandlerRegistry nhri = new NamespaceHandlerRegistryImpl (mockCtx);
0:     ParserService parserService = new ParserServiceImpl(nhri);
0:     mockCtx.registerService(ParserService.class.getName(), parserService, new Hashtable<String, String>());
0:     _parserProxy = new ParserProxyImpl(parserService, mockCtx); 
1:   }
1:   
1:   
1:   
1:   @AfterClass
1:   public static void teardown() { 
1:     BundleContextMock.clear();
1:   }
1:   
1:   
1:   
1:   @Test
1:   public void basicTest1() throws Exception { 
0:     File bpXml = new File ("../src/test/resources", "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp.xml");
0:     File bp2Xml = new File ("../src/test/resources", "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp2.xml");
1:     List<URL> urls = new ArrayList<URL>();
1:     urls.add ((bpXml.toURI()).toURL());
1:     urls.add ((bp2Xml.toURI()).toURL());
1:     
1:     List<? extends WrappedServiceMetadata> results = _parserProxy.parse(urls);
1:     assertTrue ("Four results expected, not " + results.size(), results.size() == 4);
1:     
1:     Set<WrappedServiceMetadata> resultSet = new HashSet<WrappedServiceMetadata>(results);
1:     Set<WrappedServiceMetadata> expectedResults = getTest1ExpectedResults();
1:     assertEquals ("Blueprint parsed xml is not as expected: " + resultSet.toString() + " != " + expectedResults,
1:         resultSet, expectedResults);
1:   }
1:   
1:   @Test
1:   public void testParseAllServiceElements() throws Exception { 
0:     File bpXml = new File ("../src/test/resources", "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp.xml");
0:     File bp2Xml = new File ("../src/test/resources", "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bp2.xml");
1:     
1:     List<WrappedServiceMetadata> services = new ArrayList<WrappedServiceMetadata>();
1:     List<WrappedReferenceMetadata> references = new ArrayList<WrappedReferenceMetadata>();
1:     
1:     FileInputStream fis = new FileInputStream (bpXml);
1:     ParsedServiceElements bpelem = _parserProxy.parseAllServiceElements(fis); 
1:     services.addAll(bpelem.getServices());
1:     references.addAll(bpelem.getReferences());
1:     
1:     fis = new FileInputStream (bp2Xml);
1:     bpelem = _parserProxy.parseAllServiceElements(fis); 
1:     services.addAll(bpelem.getServices());
1:     references.addAll(bpelem.getReferences());
1:     
1:     // We expect:
0:     // bp.xml: 3 services and a reference
1:     // bp2.xml: 3 services and a reference list
1:     //
1:     assertTrue ("Six services expected, not " + services.size(), services.size() == 6);
0:     assertTrue ("Two references expected, not " + references.size(), references.size() == 2);
1:     
1:     Set<WrappedServiceMetadata> expectedServices = getTest2ExpectedServices();
1:     // ServiceResultSet will contain some services with autogenerated names starting '.' so we can't 
1:     // use a straight Set.equals(). We could add the autogenerated names to the expected results but instead
1:     // let's test that differsOnlyByName() works
1:     int serviceMatchesFound = 0;
1:     for (WrappedServiceMetadata result : services) { 
1:       Iterator<WrappedServiceMetadata> it = expectedServices.iterator();
1:       while (it.hasNext()) { 
1:         WrappedServiceMetadata next = it.next();
1:         if (result.equals(next) || result.identicalOrDiffersOnlyByName(next)) { 
1:           serviceMatchesFound++;
1:           it.remove();
1:         }
1:       }
1:     }
1:     
1:     assertEquals ("Parsed services are wrong: " + expectedServices + " unmatched ",
1:         6, serviceMatchesFound);
1:     
1:     Set<WrappedReferenceMetadata> expectedReferences = getTest2ExpectedReferences();
1:     Set<WrappedReferenceMetadata> results = new HashSet<WrappedReferenceMetadata>(references);
1:     assertTrue ("Parsed references are not as we'd expected: " + results.toString() + " != " + expectedReferences,
1:         results.equals(expectedReferences));
1:   }
1:   
1:   @Test
1:   public void checkMultiValues() throws Exception { 
0:     File bpXml = new File ("../src/test/resources", "appModeller/test1.eba/bundle1.jar/OSGI-INF/blueprint/bpMultiValues.xml");
1:     List<WrappedServiceMetadata> services = new ArrayList<WrappedServiceMetadata>();
1:     FileInputStream fis = new FileInputStream (bpXml);
1:     ParsedServiceElements bpelem = _parserProxy.parseAllServiceElements(fis); 
1:     services.addAll(bpelem.getServices());
1:     
1:     assertEquals ("Multi valued service not parsed correctly", services.size(), 1);
1:     
1:     WrappedServiceMetadata wsm = services.get(0);
1:     Map<String, Object> props = wsm.getServiceProperties();
1:     String [] intents = (String[]) props.get("service.intents");
1:     
1:     assertEquals ("Service.intents[0] wrong", intents[0], "propagatesTransaction");
1:     assertEquals ("Service.intents[1] wrong", intents[1], "confidentiality");
1:     
1:   }
1:   
1:   // model
1:   // <reference id="fromOutside" interface="foo.bar.MyInjectedService"/>
1:   // <reference-list id="refList1" interface="my.logging.services" filter="(active=true)"/>
1:   //
1:   private Set<WrappedReferenceMetadata> getTest2ExpectedReferences() throws Exception { 
1:     Set<WrappedReferenceMetadata> expectedResults = new HashSet<WrappedReferenceMetadata>();
1:          
0:     expectedResults.add(ModellingManager.getImportedService(false, "foo.bar.MyInjectedService", null, 
1:         null, "fromOutside", false));
0:     expectedResults.add(ModellingManager.getImportedService(false, "my.logging.service", null, "(&(trace=on)(debug=true))", "refList1", true));
1:     
1:     return expectedResults;
1:   }
1:   
1:   // Test 2 includes anonymous services: the expected results are a superset of test1
1:   private Set<WrappedServiceMetadata> getTest2ExpectedServices() { 
1:     Set<WrappedServiceMetadata> expectedResults = getTest1ExpectedResults();
1:         
0:     expectedResults.add(ModellingManager.getExportedService("", 0, Arrays.asList("foo.bar.AnonService"), null));
0:     expectedResults.add(ModellingManager.getExportedService("", 0, Arrays.asList("foo.bar.NamedInnerBeanService"), null));
1:     return expectedResults;
1:   }
1:   
1:   private Set<WrappedServiceMetadata> getTest1ExpectedResults() { 
1:     Set<WrappedServiceMetadata> expectedResults = new HashSet<WrappedServiceMetadata>();
1:     Map<String, Object> props = new HashMap<String, Object>();
1:     props.put ("priority", "9");
1:     props.put("volume", "11");
1:     props.put("osgi.service.blueprint.compname", "myBean");
0:     expectedResults.add(ModellingManager.getExportedService("myService", 0, Arrays.asList("foo.bar.MyService"), props));
1: 
1:     props = new HashMap<String, Object>();
1:     props.put ("priority", "7");
1:     props.put ("volume", "11");
1:     props.put ("osgi.service.blueprint.compname", "bean1");
0:     expectedResults.add(ModellingManager.getExportedService("service1.should.be.exported", 0, Arrays.asList("foo.bar.MyService"), props));
1:  
1:     props = new HashMap<String, Object>();
1:     props.put ("customer", "pig");
1:     props.put ("osgi.service.blueprint.compname", "bean2");
0:     expectedResults.add(ModellingManager.getExportedService("service2.should.not.be.exported", 0, Arrays.asList("com.acme.Delivery"), props));
1:         
1:     props = new HashMap<String, Object>();
1:     props.put ("customer", "pig");
1:     props.put ("target", "rabbit");
1:     props.put ("payload", "excessive");
1:     props.put ("osgi.service.blueprint.compname", "bean3");
0:     expectedResults.add(ModellingManager.getExportedService("bean3", 0, Arrays.asList("com.acme.Delivery"), props));
1:        
1:     return expectedResults;
1:   } 
1: }
============================================================================