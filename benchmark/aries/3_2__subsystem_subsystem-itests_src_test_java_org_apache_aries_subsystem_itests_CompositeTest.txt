1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:deca8ed: package org.apache.aries.subsystem.itests;
8:deca8ed: 
1:deca8ed: import java.io.IOException;
1:47d9366: import java.util.HashMap;
1:47d9366: import java.util.Map;
1:c1afebc: 
1:deca8ed: import org.junit.Test;
1:deca8ed: import org.osgi.framework.Bundle;
1:deca8ed: import org.osgi.framework.Constants;
1:deca8ed: import org.osgi.service.subsystem.Subsystem;
1:deca8ed: import org.osgi.service.subsystem.SubsystemConstants;
1:deca8ed: 
1:deca8ed: public class CompositeTest extends SubsystemTest {
1:7837a59: 	private static final String BUNDLE_A = "bundle.a";
1:7837a59: 	private static final String BUNDLE_B = "bundle.b";
1:7837a59: 	private static final String BUNDLE_C = "bundle.c";
1:7837a59: 	private static final String BUNDLE_D = "bundle.d";
1:7837a59: 	private static final String BUNDLE_E = "bundle.e";
1:7837a59: 	private static final String COMPOSITE_A = "composite.a";
1:7837a59: 	private static final String COMPOSITE_B = "composite.b";
1:7837a59: 	private static final String COMPOSITE_C = "composite.c";
1:7837a59: 	private static final String COMPOSITE_D = "composite.d";
1:7837a59: 	private static final String PACKAGE_X = "x";
1:47d9366: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:deca8ed: 		createBundleA();
1:c1afebc: 		createBundleB();
1:deca8ed: 		createBundleC();
1:47d9366: 		createBundleD();
1:c1afebc: 		createBundleE();
1:7837a59: 		createCompositeA();
1:47d9366: 		createCompositeB();
1:c1afebc: 		createCompositeC();
1:c1afebc: 		createCompositeD();
1:47d9366: 	}
1:7837a59: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), version("1.0.0"), exportPackage(PACKAGE_X + ";version=1.0"));
1:7837a59: 	}
1:47d9366: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), version("1.0.0"), 
1:57b6627: 				new Header(Constants.PROVIDE_CAPABILITY, "y; y=test; version:Version=1.0"));
1:47d9366: 	}
1:47d9366: 	
1:57b6627: 	private void createBundleC() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_C), version("1.0.0"), importPackage(PACKAGE_X + ";version=\"[1.0,2.0)\""));
1:47d9366: 	}
1:47d9366: 	
1:57b6627: 	private void createBundleD() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_D), requireBundle(BUNDLE_A));
1:47d9366: 	}
1:47d9366: 	
1:57b6627: 	private void createBundleE() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_E), new Header(Constants.REQUIRE_CAPABILITY, "y; filter:=(y=test)"));
1:47d9366: 	}
1:47d9366: 	
1:7837a59: 	private static void createCompositeA() throws IOException {
1:7837a59: 		createCompositeAManifest();
1:7837a59: 		createSubsystem(COMPOSITE_A);
1:7837a59: 	}
1:7837a59: 	
1:47d9366: 	private static void createCompositeB() throws IOException {
1:47d9366: 		createCompositeBManifest();
1:7837a59: 		createSubsystem(COMPOSITE_B);
1:47d9366: 	}
1:47d9366: 	
1:deca8ed: 	private static void createCompositeC() throws IOException {
1:deca8ed: 		createCompositeCManifest();
1:7837a59: 		createSubsystem(COMPOSITE_C);
1:47d9366: 	}
1:c1afebc: 	
1:c1afebc: 	private static void createCompositeD() throws IOException {
1:c1afebc: 		createCompositeDManifest();
1:7837a59: 		createSubsystem(COMPOSITE_D);
1:7837a59: 	}
1:7837a59: 	
1:7837a59: 	private static void createCompositeAManifest() throws IOException {
1:7837a59: 		Map<String, String> attributes = new HashMap<String, String>();
1:7837a59: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:7837a59: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:7837a59: 		attributes.put(Constants.EXPORT_PACKAGE, PACKAGE_X + "; version=1.0, does.not.exist; a=b");
1:7837a59: 		createManifest(COMPOSITE_A + ".mf", attributes);
1:47d9366: 	}
1:47d9366: 	
1:47d9366: 	private static void createCompositeBManifest() throws IOException {
1:47d9366: 		Map<String, String> attributes = new HashMap<String, String>();
1:47d9366: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_B);
1:47d9366: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:47d9366: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A + "; bundle-version=\"[1.0, 2.0)\", does.not.exist; bundle-version=\"[1.0, 2.0)\"");
1:7837a59: 		createManifest(COMPOSITE_B + ".mf", attributes);
1:c1afebc: 	}
1:c1afebc: 	
1:deca8ed: 	private static void createCompositeCManifest() throws IOException {
1:47d9366: 		Map<String, String> attributes = new HashMap<String, String>();
1:47d9366: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_C);
1:47d9366: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:7837a59: 		attributes.put(Constants.IMPORT_PACKAGE, PACKAGE_X + ", does.not.exist; a=b");
1:7837a59: 		createManifest(COMPOSITE_C + ".mf", attributes);
1:47d9366: 	}
1:c1afebc: 	
1:c1afebc: 	private static void createCompositeDManifest() throws IOException {
1:47d9366: 		Map<String, String> attributes = new HashMap<String, String>();
1:47d9366: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_D);
1:47d9366: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:47d9366: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y; filter:=\"(y=test)\", does.not.exist; filter:=\"(a=b)\"");
1:7837a59: 		createManifest(COMPOSITE_D + ".mf", attributes);
1:47d9366: 	}
1:47d9366: 	
1:7837a59: 	@Test
1:7837a59: 	public void testExportPackage() throws Exception {
1:7837a59: 		Subsystem composite = installSubsystemFromFile(COMPOSITE_A);
1:7837a59: 		try {
1:7837a59: 			startSubsystem(composite);
1:7837a59: 			Bundle bundleA = installBundleFromFile(BUNDLE_A, composite);
1:7837a59: 			try {
1:7837a59: 				Bundle bundleC = installBundleFromFile(BUNDLE_C);
1:7837a59: 				try {
1:7837a59: 					startBundle(bundleC);
1:7837a59: 				}
1:7837a59: 				finally {
1:7837a59: 					bundleC.uninstall();
1:7837a59: 				}
1:7837a59: 			}
1:7837a59: 			finally {
1:7837a59: 				bundleA.uninstall();
1:7837a59: 			}
1:7837a59: 		}
1:7837a59: 		finally {
1:574fba9: 			stopSubsystemSilently(composite);
1:574fba9: 			uninstallSubsystemSilently(composite);
1:7837a59: 		}
1:47d9366: 	}
1:47d9366: 	
1:c1afebc: 	@Test
1:deca8ed: 	public void testImportPackage() throws Exception {
1:47d9366: 		Bundle bundleA = installBundleFromFile(BUNDLE_A);
1:c1afebc: 		try {
1:47d9366: 			Subsystem compositeC = installSubsystemFromFile(COMPOSITE_C);
1:c1afebc: 			try {
1:47d9366: 				Bundle bundleC = installBundleFromFile(BUNDLE_C, compositeC);
1:deca8ed: 				try {
1:deca8ed: 					startBundle(bundleC, compositeC);
1:c1afebc: 				}
1:deca8ed: 				finally {
1:deca8ed: 					bundleC.uninstall();
1:c1afebc: 				}
1:c1afebc: 			}
1:deca8ed: 			finally {
1:574fba9: 				uninstallSubsystemSilently(compositeC);
9:deca8ed: 			}
1:deca8ed: 		}
1:deca8ed: 		finally {
1:deca8ed: 			bundleA.uninstall();
1:deca8ed: 		}
1:deca8ed: 	}
1:c1afebc: 	
1:deca8ed: 	@Test
1:47d9366: 	public void testRequireBundle() throws Exception {
1:47d9366: 		Bundle bundleA = installBundleFromFile(BUNDLE_A);
1:deca8ed: 		try {
1:47d9366: 			Subsystem compositeB = installSubsystemFromFile(COMPOSITE_B);
1:deca8ed: 			try {
1:47d9366: 				Bundle bundleD = installBundleFromFile(BUNDLE_D, compositeB);
1:47d9366: 				try {
1:47d9366: 					startBundle(bundleD, compositeB);
1:47d9366: 				}
1:47d9366: 				finally {
1:47d9366: 					bundleD.uninstall();
1:47d9366: 				}
1:47d9366: 			}
1:47d9366: 			finally {
1:574fba9: 				uninstallSubsystemSilently(compositeB);
1:47d9366: 			}
1:47d9366: 		}
1:47d9366: 		finally {
1:47d9366: 			bundleA.uninstall();
1:47d9366: 		}
1:47d9366: 	}
1:47d9366: 	
1:47d9366: 	@Test
1:47d9366: 	public void testRequireCapability() throws Exception {
1:47d9366: 		Bundle bundleB = installBundleFromFile(BUNDLE_B);
1:47d9366: 		try {
1:47d9366: 			Subsystem compositeD = installSubsystemFromFile(COMPOSITE_D);
1:47d9366: 			try {
1:47d9366: 				Bundle bundleE = installBundleFromFile(BUNDLE_E, compositeD);
1:c1afebc: 				try {
1:c1afebc: 					startBundle(bundleE, compositeD);
1:c1afebc: 				}
1:c1afebc: 				finally {
1:c1afebc: 					bundleE.uninstall();
1:c1afebc: 				}
1:c1afebc: 			}
1:c1afebc: 			finally {
1:574fba9: 				uninstallSubsystemSilently(compositeD);
1:c1afebc: 			}
1:c1afebc: 		}
1:c1afebc: 		finally {
1:c1afebc: 			bundleB.uninstall();
1:c1afebc: 		}
1:c1afebc: 	}
1:deca8ed: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), version("1.0.0"), exportPackage(PACKAGE_X + ";version=1.0"));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), version("1.0.0"), 
1: 				new Header(Constants.PROVIDE_CAPABILITY, "y; y=test; version:Version=1.0"));
1: 	private void createBundleC() throws IOException {
1: 		createBundle(name(BUNDLE_C), version("1.0.0"), importPackage(PACKAGE_X + ";version=\"[1.0,2.0)\""));
1: 	private void createBundleD() throws IOException {
1: 		createBundle(name(BUNDLE_D), requireBundle(BUNDLE_A));
1: 	private void createBundleE() throws IOException {
1: 		createBundle(name(BUNDLE_E), new Header(Constants.REQUIRE_CAPABILITY, "y; filter:=(y=test)"));
author:John Ross
-------------------------------------------------------------------------------
commit:47cea41
/////////////////////////////////////////////////////////////////////////
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:574fba9
/////////////////////////////////////////////////////////////////////////
1: 			stopSubsystemSilently(composite);
1: 			uninstallSubsystemSilently(composite);
/////////////////////////////////////////////////////////////////////////
1: 				uninstallSubsystemSilently(compositeC);
/////////////////////////////////////////////////////////////////////////
1: 				uninstallSubsystemSilently(compositeB);
/////////////////////////////////////////////////////////////////////////
1: 				uninstallSubsystemSilently(compositeD);
commit:7e004f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7837a59
/////////////////////////////////////////////////////////////////////////
1: 	private static final String BUNDLE_A = "bundle.a";
1: 	private static final String BUNDLE_B = "bundle.b";
1: 	private static final String BUNDLE_C = "bundle.c";
1: 	private static final String BUNDLE_D = "bundle.d";
1: 	private static final String BUNDLE_E = "bundle.e";
1: 	private static final String COMPOSITE_A = "composite.a";
1: 	private static final String COMPOSITE_B = "composite.b";
1: 	private static final String COMPOSITE_C = "composite.c";
1: 	private static final String COMPOSITE_D = "composite.d";
1: 	private static final String PACKAGE_X = "x";
/////////////////////////////////////////////////////////////////////////
1: 		createCompositeA();
/////////////////////////////////////////////////////////////////////////
0: 		headers.put(Constants.EXPORT_PACKAGE, PACKAGE_X + ";version=1.0");
/////////////////////////////////////////////////////////////////////////
0: 		headers.put(Constants.IMPORT_PACKAGE, PACKAGE_X + ";version=\"[1.0,2.0)\"");
0: 		createBundle(BUNDLE_C, "1.0.0", headers);
/////////////////////////////////////////////////////////////////////////
1: 	private static void createCompositeA() throws IOException {
1: 		createCompositeAManifest();
1: 		createSubsystem(COMPOSITE_A);
1: 	}
1: 	
1: 		createSubsystem(COMPOSITE_B);
1: 		createSubsystem(COMPOSITE_C);
1: 		createSubsystem(COMPOSITE_D);
1: 	}
1: 	
1: 	private static void createCompositeAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(Constants.EXPORT_PACKAGE, PACKAGE_X + "; version=1.0, does.not.exist; a=b");
1: 		createManifest(COMPOSITE_A + ".mf", attributes);
/////////////////////////////////////////////////////////////////////////
1: 		createManifest(COMPOSITE_B + ".mf", attributes);
1: 		attributes.put(Constants.IMPORT_PACKAGE, PACKAGE_X + ", does.not.exist; a=b");
1: 		createManifest(COMPOSITE_C + ".mf", attributes);
/////////////////////////////////////////////////////////////////////////
1: 		createManifest(COMPOSITE_D + ".mf", attributes);
/////////////////////////////////////////////////////////////////////////
0: 	private static void createSubsystem(String name) throws IOException {
0: 		write(name, ArchiveFixture.newZip().binary("OSGI-INF/SUBSYSTEM.MF", new FileInputStream(name + ".mf")));
1: 	}
1: 	
1: 	@Test
1: 	public void testExportPackage() throws Exception {
1: 		Subsystem composite = installSubsystemFromFile(COMPOSITE_A);
1: 		try {
1: 			startSubsystem(composite);
1: 			Bundle bundleA = installBundleFromFile(BUNDLE_A, composite);
1: 			try {
1: 				Bundle bundleC = installBundleFromFile(BUNDLE_C);
1: 				try {
1: 					startBundle(bundleC);
1: 				}
1: 				finally {
1: 					bundleC.uninstall();
1: 				}
1: 			}
1: 			finally {
1: 				bundleA.uninstall();
1: 			}
1: 		}
1: 		finally {
0: 			stopSubsystem(composite);
0: 			uninstallScopedSubsystem(composite);
1: 		}
commit:47d9366
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
0: import java.util.Map.Entry;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.JarFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ManifestFixture;
/////////////////////////////////////////////////////////////////////////
0: 	private static final String BUNDLE_A = "org.apache.aries.subsystem.itests.bundle.a";
0: 	private static final String BUNDLE_B = "org.apache.aries.subsystem.itests.bundle.b";
0: 	private static final String BUNDLE_C = "org.apache.aries.subsystem.itests.bundle.c";
0: 	private static final String BUNDLE_D = "org.apache.aries.subsystem.itests.bundle.d";
0: 	private static final String BUNDLE_E = "org.apache.aries.subsystem.itests.bundle.e";
0: 	private static final String COMPOSITE_B = "org.apache.aries.subsystem.itests.subsystem.composite.b";
0: 	private static final String COMPOSITE_C = "org.apache.aries.subsystem.itests.subsystem.composite.c";
0: 	private static final String COMPOSITE_D = "org.apache.aries.subsystem.itests.subsystem.composite.d";
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		createBundleD();
1: 		createCompositeB();
0: 	private static void createBundle(String symbolicName) throws IOException {
0: 		createBundle(symbolicName, null);
1: 	}
1: 	
0: 	private static void createBundle(String symbolicName, Map<String, String> headers) throws IOException {
0: 		createBundle(symbolicName, null, headers);
1: 	}
1: 	
0: 	private static void createBundle(String symbolicName, String version, Map<String, String> headers) throws IOException {
0: 		if (headers == null)
0: 			headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_SYMBOLICNAME, symbolicName);
0: 		if (version != null)
0: 			headers.put(Constants.BUNDLE_VERSION, version);
0: 		createBundle(headers);
1: 	}
1: 	
0: 	private static void createBundle(Map<String, String> headers) throws IOException {
0: 		String symbolicName = headers.get(Constants.BUNDLE_SYMBOLICNAME);
0: 		JarFixture bundle = ArchiveFixture.newJar();
0: 		ManifestFixture manifest = bundle.manifest();
0: 		for (Entry<String, String> header : headers.entrySet()) {
0: 			manifest.attribute(header.getKey(), header.getValue());
1: 		}
0: 		write(symbolicName, bundle);
1: 	}
1: 	
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.EXPORT_PACKAGE, BUNDLE_A + ".x;version=\"1.0\"");
0: 		createBundle(BUNDLE_A, "1.0.0", headers);
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "y; y=test; version:Version=1.0");
0: 		createBundle(BUNDLE_B, "1.0.0", headers);
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, BUNDLE_A + ".x;version=\"[1.0,2.0)\"");
0: 		createBundle(BUNDLE_C, headers);
1: 	}
1: 	
0: 	private static void createBundleD() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
0: 		createBundle(BUNDLE_D, headers);
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.REQUIRE_CAPABILITY, "y; filter:=(y=test)");
0: 		createBundle(BUNDLE_E, headers);
1: 	}
1: 	
1: 	private static void createCompositeB() throws IOException {
1: 		createCompositeBManifest();
0: 		createSubsystem(COMPOSITE_B, "COMPOSITE.B.MF");
0: 		createSubsystem(COMPOSITE_C, "COMPOSITE.C.MF");
0: 		createSubsystem(COMPOSITE_D, "COMPOSITE.D.MF");
1: 	}
1: 	
1: 	private static void createCompositeBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A + "; bundle-version=\"[1.0, 2.0)\", does.not.exist; bundle-version=\"[1.0, 2.0)\"");
0: 		createManifest("COMPOSITE.B.MF", attributes);
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_C);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
0: 		attributes.put(Constants.IMPORT_PACKAGE, BUNDLE_A + ".x, does.not.exist; a=b");
0: 		createManifest("COMPOSITE.C.MF", attributes);
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_D);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y; filter:=\"(y=test)\", does.not.exist; filter:=\"(a=b)\"");
0: 		createManifest("COMPOSITE.D.MF", attributes);
1: 	}
1: 	
0: 	private static void createManifest(String name, Map<String, String> headers) throws IOException {
0: 		ManifestFixture manifest = ArchiveFixture.newJar().manifest();
0: 		for (Entry<String, String> header : headers.entrySet()) {
0: 			manifest.attribute(header.getKey(), header.getValue());
1: 		}
0: 		write(name, manifest);
1: 	}
1: 	
0: 	private static void createSubsystem(String name, String manifest) throws IOException {
0: 		write(name, ArchiveFixture.newZip().binary("OSGI-INF/SUBSYSTEM.MF", new FileInputStream(manifest)));
1: 		Bundle bundleA = installBundleFromFile(BUNDLE_A);
1: 			Subsystem compositeC = installSubsystemFromFile(COMPOSITE_C);
1: 				Bundle bundleC = installBundleFromFile(BUNDLE_C, compositeC);
/////////////////////////////////////////////////////////////////////////
1: 	public void testRequireBundle() throws Exception {
1: 		Bundle bundleA = installBundleFromFile(BUNDLE_A);
1: 			Subsystem compositeB = installSubsystemFromFile(COMPOSITE_B);
1: 				Bundle bundleD = installBundleFromFile(BUNDLE_D, compositeB);
1: 				try {
1: 					startBundle(bundleD, compositeB);
1: 				}
1: 				finally {
1: 					bundleD.uninstall();
1: 				}
1: 			}
1: 			finally {
0: 				uninstallScopedSubsystem(compositeB);
1: 			}
1: 		}
1: 		finally {
1: 			bundleA.uninstall();
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testRequireCapability() throws Exception {
1: 		Bundle bundleB = installBundleFromFile(BUNDLE_B);
1: 		try {
1: 			Subsystem compositeD = installSubsystemFromFile(COMPOSITE_D);
1: 			try {
1: 				Bundle bundleE = installBundleFromFile(BUNDLE_E, compositeD);
commit:c1afebc
/////////////////////////////////////////////////////////////////////////
1: 		createBundleB();
1: 		createBundleE();
1: 		createCompositeC();
1: 		createCompositeD();
/////////////////////////////////////////////////////////////////////////
0: 	private static void createBundleB() throws IOException {
0: 		write("bundle.b.jar",
0: 				ArchiveFixture
0: 						.newJar()
0: 						.manifest()
0: 						.symbolicName(
0: 								"org.apache.aries.subsystem.itests.bundle.b")
0: 						.version("1.0.0")
0: 						.attribute(Constants.PROVIDE_CAPABILITY,
0: 								"y; y=test; version:Version=1.0")
0: 						.end());
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 	private static void createBundleE() throws IOException {
0: 		write("bundle.e.jar",
0: 				ArchiveFixture
0: 						.newJar()
0: 						.manifest()
0: 						.symbolicName(
0: 								"org.apache.aries.subsystem.itests.bundle.e")
0: 						.version("1.0.0")
0: 						.attribute(Constants.REQUIRE_CAPABILITY,
0: 								"y; filter:=(y=test)")
0: 						.end());
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	private static void createCompositeD() throws IOException {
1: 		createCompositeDManifest();
0: 		write("composite.d.esa",
0: 				ArchiveFixture.newZip().binary("OSGI-INF/SUBSYSTEM.MF",
0: 						new FileInputStream("COMPOSITE.D.MF")));
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	private static void createCompositeDManifest() throws IOException {
0: 		write("COMPOSITE.D.MF",
0: 				ArchiveFixture
0: 						.newJar()
0: 						.manifest()
0: 						.attribute(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME,
0: 								"org.apache.aries.subsystem.itests.subsystem.composite.d")
0: 						.attribute(SubsystemConstants.SUBSYSTEM_TYPE,
0: 								SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE)
0: 						.attribute(Constants.REQUIRE_CAPABILITY,
0: 								"y; filter:=\"(y=test)\", does.not.exist; filter:=\"(a=b)\""));
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	@Test
0: 	public void testRequireCapability() throws Exception {
0: 		Bundle bundleB = installBundleFromFile("bundle.b.jar");
1: 		try {
0: 			Subsystem compositeD = installSubsystemFromFile("composite.d.esa");
1: 			try {
0: 				Bundle bundleE = installBundleFromFile("bundle.e.jar", compositeD);
1: 				try {
1: 					startBundle(bundleE, compositeD);
1: 				}
1: 				finally {
1: 					bundleE.uninstall();
1: 				}
1: 			}
1: 			finally {
0: 				uninstallScopedSubsystem(compositeD);
1: 			}
1: 		}
1: 		finally {
1: 			bundleB.uninstall();
1: 		}
1: 	}
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests;
1: 
0: import java.io.FileInputStream;
1: import java.io.IOException;
1: 
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class CompositeTest extends SubsystemTest {
0: 	private static boolean createdTestFiles;
1: 	
0: 	@Before
0: 	public static void createTestFiles() throws Exception {
0: 		if (createdTestFiles)
0: 			return;
1: 		createBundleA();
0: 		createCompositeC();
1: 		createBundleC();
0: 		createdTestFiles = true;
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		write("bundle.a.jar",
0: 				ArchiveFixture
0: 						.newJar()
0: 						.manifest()
0: 						.symbolicName(
0: 								"org.apache.aries.subsystem.itests.bundle.a")
0: 						.attribute(Constants.EXPORT_PACKAGE,
0: 								"org.apache.aries.subsystem.itests.bundle.a.x;version=\"1.0\"")
0: 						.end());
1: 	}
1: 	
0: 	private static void createBundleC() throws IOException {
0: 		write("bundle.c.jar",
0: 				ArchiveFixture
0: 						.newJar()
0: 						.manifest()
0: 						.symbolicName(
0: 								"org.apache.aries.subsystem.itests.bundle.c")
0: 						.attribute(Constants.IMPORT_PACKAGE,
0: 								"org.apache.aries.subsystem.itests.bundle.a.x;version=\"[1.0,2.0)\"")
0: 						.end());
1: 	}
1: 	
1: 	private static void createCompositeC() throws IOException {
1: 		createCompositeCManifest();
0: 		write("composite.c.esa",
0: 				ArchiveFixture.newZip().binary("OSGI-INF/SUBSYSTEM.MF",
0: 						new FileInputStream("COMPOSITE.C.MF")));
1: 	}
1: 	
1: 	private static void createCompositeCManifest() throws IOException {
0: 		write("COMPOSITE.C.MF",
0: 				ArchiveFixture
0: 						.newJar()
0: 						.manifest()
0: 						.attribute(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME,
0: 								"org.apache.aries.subsystem.itests.subsystem.composite.c")
0: 						.attribute(SubsystemConstants.SUBSYSTEM_TYPE,
0: 								SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE)
0: 						.attribute(Constants.IMPORT_PACKAGE,
0: 								"org.apache.aries.subsystem.itests.bundle.a.x, does.not.exist; a=b"));
1: 	}
1: 	
1: 	@Test
1: 	public void testImportPackage() throws Exception {
0: 		Bundle bundleA = installBundleFromFile("bundle.a.jar");
1: 		try {
0: 			Subsystem compositeC = installSubsystemFromFile("composite.c.esa");
1: 			try {
0: 				Bundle bundleC = installBundleFromFile("bundle.c.jar", compositeC);
1: 				try {
1: 					startBundle(bundleC, compositeC);
1: 				}
1: 				finally {
1: 					bundleC.uninstall();
1: 				}
1: 			}
1: 			finally {
0: 				uninstallScopedSubsystem(compositeC);
1: 			}
1: 		}
1: 		finally {
1: 			bundleA.uninstall();
1: 		}
1: 	}
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
============================================================================