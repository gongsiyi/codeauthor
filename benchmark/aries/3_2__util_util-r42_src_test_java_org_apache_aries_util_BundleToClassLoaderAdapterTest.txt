1:4b85880: /*
1:4b85880:  * Licensed to the Apache Software Foundation (ASF) under one
1:4b85880:  * or more contributor license agreements.  See the NOTICE file
1:4b85880:  * distributed with this work for additional information
1:4b85880:  * regarding copyright ownership.  The ASF licenses this file
1:4b85880:  * to you under the Apache License, Version 2.0 (the
1:4b85880:  * "License"); you may not use this file except in compliance
1:4b85880:  * with the License.  You may obtain a copy of the License at
1:4b85880:  *
1:4b85880:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4b85880:  *
1:4b85880:  * Unless required by applicable law or agreed to in writing,
1:4b85880:  * software distributed under the License is distributed on an
1:4b85880:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4b85880:  * KIND, either express or implied.  See the License for the
1:4b85880:  * specific language governing permissions and limitations
1:4b85880:  * under the License.
1:4b85880:  */
1:4b85880: 
1:a326a17: package org.apache.aries.util;
1:a326a17: 
1:a326a17: import org.apache.aries.unittest.mocks.MethodCall;
1:a326a17: import org.apache.aries.unittest.mocks.Skeleton;
1:a326a17: import org.apache.aries.util.internal.BundleToClassLoaderAdapter;
1:a326a17: import org.junit.Test;
1:a326a17: import org.osgi.framework.Bundle;
1:a326a17: 
1:a326a17: import static org.junit.Assert.assertEquals;
1:a326a17: 
1:a326a17: public class BundleToClassLoaderAdapterTest {
1:a326a17:     @Test(expected=ClassNotFoundException.class)
1:a326a17:     public void testInheritance() throws Exception {
1:a326a17:         ClassLoader testLoader = new ClassLoader(makeSUT(false)) {
1:a326a17:         };
1:a326a17:         
1:a326a17:         testLoader.loadClass(Bundle.class.getName());
1:a326a17:     }
1:a326a17:     
1:a326a17:     @Test
1:a326a17:     public void testInheritancePositive() throws Exception {
1:a326a17:         ClassLoader testLoader = new ClassLoader(makeSUT(true)) {
1:a326a17:         };
1:a326a17: 
1:a326a17:         assertEquals(Bundle.class, testLoader.loadClass(Bundle.class.getName()));
1:a326a17:     }
1:a326a17:     
1:a326a17:     @Test
1:a326a17:     public void testStraightLoadClass() throws Exception {
1:a326a17:         assertEquals(Bundle.class, makeSUT(true).loadClass(Bundle.class.getName()));
1:a326a17:     }
1:a326a17:     
1:a326a17:     @Test(expected=ClassNotFoundException.class)
1:a326a17:     public void testLoadClassFailure() throws Exception {
1:a326a17:         makeSUT(false).loadClass(Bundle.class.getName());        
1:a326a17:     }
1:a326a17:     
1:a326a17:     @Test
1:a326a17:     public void testLoadWithResolve() throws Exception {
1:a326a17:         assertEquals(Bundle.class, makeSUT(true).loadClass(Bundle.class.getName(), true));
1:a326a17:     }
1:a326a17:     
1:a326a17:     private BundleToClassLoaderAdapter makeSUT(boolean includeBundleClass) {
1:a326a17:         Bundle bundle = Skeleton.newMock(Bundle.class);
1:a326a17:         if (includeBundleClass) {
1:a326a17:             Skeleton.getSkeleton(bundle).setReturnValue(new MethodCall(Bundle.class, "loadClass", Bundle.class.getName()), Bundle.class);
1:a326a17:         } else {
1:a326a17:             Skeleton.getSkeleton(bundle).setThrows(new MethodCall(Bundle.class, "loadClass", Bundle.class.getName()), new ClassNotFoundException());
1:a326a17:         }
1:a326a17:         
1:a326a17:         return new BundleToClassLoaderAdapter(bundle);
1:a326a17:     }
1:a326a17: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:4b85880
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:a326a17
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util;
1: 
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.apache.aries.util.internal.BundleToClassLoaderAdapter;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class BundleToClassLoaderAdapterTest {
1:     @Test(expected=ClassNotFoundException.class)
1:     public void testInheritance() throws Exception {
1:         ClassLoader testLoader = new ClassLoader(makeSUT(false)) {
1:         };
1:         
1:         testLoader.loadClass(Bundle.class.getName());
1:     }
1:     
1:     @Test
1:     public void testInheritancePositive() throws Exception {
1:         ClassLoader testLoader = new ClassLoader(makeSUT(true)) {
1:         };
1: 
1:         assertEquals(Bundle.class, testLoader.loadClass(Bundle.class.getName()));
1:     }
1:     
1:     @Test
1:     public void testStraightLoadClass() throws Exception {
1:         assertEquals(Bundle.class, makeSUT(true).loadClass(Bundle.class.getName()));
1:     }
1:     
1:     @Test(expected=ClassNotFoundException.class)
1:     public void testLoadClassFailure() throws Exception {
1:         makeSUT(false).loadClass(Bundle.class.getName());        
1:     }
1:     
1:     @Test
1:     public void testLoadWithResolve() throws Exception {
1:         assertEquals(Bundle.class, makeSUT(true).loadClass(Bundle.class.getName(), true));
1:     }
1:     
1:     private BundleToClassLoaderAdapter makeSUT(boolean includeBundleClass) {
1:         Bundle bundle = Skeleton.newMock(Bundle.class);
1:         if (includeBundleClass) {
1:             Skeleton.getSkeleton(bundle).setReturnValue(new MethodCall(Bundle.class, "loadClass", Bundle.class.getName()), Bundle.class);
1:         } else {
1:             Skeleton.getSkeleton(bundle).setThrows(new MethodCall(Bundle.class, "loadClass", Bundle.class.getName()), new ClassNotFoundException());
1:         }
1:         
1:         return new BundleToClassLoaderAdapter(bundle);
1:     }
1: }
============================================================================