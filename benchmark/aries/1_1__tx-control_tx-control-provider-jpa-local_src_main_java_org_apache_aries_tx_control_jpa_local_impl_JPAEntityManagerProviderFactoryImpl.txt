1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:e7c1ea5: package org.apache.aries.tx.control.jpa.local.impl;
4:e7c1ea5: 
1:e7c1ea5: import static java.util.Optional.ofNullable;
1:e7c1ea5: import static javax.persistence.spi.PersistenceUnitTransactionType.RESOURCE_LOCAL;
1:e7c1ea5: 
1:e7c1ea5: import java.util.Map;
1:e7c1ea5: 
1:e7c1ea5: import javax.persistence.EntityManagerFactory;
1:e7c1ea5: import javax.persistence.spi.PersistenceUnitTransactionType;
1:e7c1ea5: 
1:e55f0fd: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1:e55f0fd: import org.apache.aries.tx.control.jpa.common.impl.InternalJPAEntityManagerProviderFactory;
1:e7c1ea5: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionException;
1:e7c1ea5: 
1:e55f0fd: public class JPAEntityManagerProviderFactoryImpl implements InternalJPAEntityManagerProviderFactory {
1:e7c1ea5: 
1:e55f0fd: 	@Override
1:e55f0fd: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
1:e7c1ea5: 			Map<String, Object> resourceProviderProperties) {
1:e55f0fd: 		checkEnlistment(resourceProviderProperties);
1:e7c1ea5: 		
1:e55f0fd: 		EntityManagerFactory emf = emfb.createEntityManagerFactory(jpaProperties);
1:e55f0fd: 		
1:e55f0fd: 		validateEMF(emf);
1:e55f0fd: 		
1:e55f0fd: 		return new JPAEntityManagerProviderImpl(emf, () -> emf.close());
4:e7c1ea5: 	}
1:e55f0fd: 
1:426f022: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, 
1:426f022: 			Map<String, Object> jpaProperties, Map<String, Object> resourceProviderProperties, 
1:426f022: 			Runnable onClose) {
1:426f022: 		checkEnlistment(resourceProviderProperties);
1:426f022: 		
1:426f022: 		EntityManagerFactory emf = emfb.createEntityManagerFactory(jpaProperties);
1:426f022: 		
1:426f022: 		validateEMF(emf);
1:426f022: 		
1:426f022: 		return new JPAEntityManagerProviderImpl(emf, () -> {
1:426f022: 			try {
1:426f022: 				emf.close();
1:426f022: 			} catch (Exception e) {
1:426f022: 			}
1:426f022: 			if (onClose != null) {
1:426f022: 				onClose.run();
1:426f022: 			}
1:426f022: 		});
1:426f022: 	}
1:e55f0fd: 
1:e7c1ea5: 	private void validateEMF(EntityManagerFactory emf) {
1:e7c1ea5: 		Object o = emf.getProperties().get("javax.persistence.transactionType");
1:e7c1ea5: 		
1:e7c1ea5: 		PersistenceUnitTransactionType tranType;
1:e7c1ea5: 		if(o instanceof PersistenceUnitTransactionType) {
1:e7c1ea5: 			tranType = (PersistenceUnitTransactionType) o;
1:e7c1ea5: 		} else if (o instanceof String) {
1:e7c1ea5: 			tranType = PersistenceUnitTransactionType.valueOf(o.toString());
1:e7c1ea5: 		} else {
1:e7c1ea5: 			//TODO log this?
1:b73433a: 			tranType = RESOURCE_LOCAL;
1:e55f0fd: 		}
1:e7c1ea5: 		
1:e7c1ea5: 		if(RESOURCE_LOCAL != tranType) {
1:e7c1ea5: 			throw new IllegalArgumentException("The supplied EntityManagerFactory is not declared RESOURCE_LOCAL");
1:e55f0fd: 		}
1:e55f0fd: 	}
1:e7c1ea5: 
2:e7c1ea5: 	@Override
1:e55f0fd: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
1:e7c1ea5: 			Map<String, Object> resourceProviderProperties) {
2:e7c1ea5: 		checkEnlistment(resourceProviderProperties);
2:e7c1ea5: 		validateEMF(emf);
1:e7c1ea5: 		
1:e55f0fd: 		return new JPAEntityManagerProviderImpl(emf, null);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	private void checkEnlistment(Map<String, Object> resourceProviderProperties) {
1:e7c1ea5: 		if (toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, false)) {
1:e7c1ea5: 			throw new TransactionException("This Resource Provider does not support XA transactions");
1:e7c1ea5: 		} else if (!toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true)) {
1:e7c1ea5: 			throw new TransactionException(
1:e7c1ea5: 					"This Resource Provider always enlists in local transactions as it does not support XA");
1:e7c1ea5: 		}
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	private boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1:e7c1ea5: 		Object o =  ofNullable(props)
1:e7c1ea5: 			.map(m -> m.get(key))
1:e7c1ea5: 			.orElse(defaultValue);
1:e7c1ea5: 		
1:e7c1ea5: 		if (o instanceof Boolean) {
1:e7c1ea5: 			return ((Boolean) o).booleanValue();
1:e7c1ea5: 		} else if(o instanceof String) {
1:e7c1ea5: 			return Boolean.parseBoolean((String) o);
1:e7c1ea5: 		} else {
1:e7c1ea5: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1:e7c1ea5: 		}
1:e7c1ea5: 	}
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:426f022
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, 
1: 			Map<String, Object> jpaProperties, Map<String, Object> resourceProviderProperties, 
1: 			Runnable onClose) {
1: 		checkEnlistment(resourceProviderProperties);
1: 		
1: 		EntityManagerFactory emf = emfb.createEntityManagerFactory(jpaProperties);
1: 		
1: 		validateEMF(emf);
1: 		
1: 		return new JPAEntityManagerProviderImpl(emf, () -> {
1: 			try {
1: 				emf.close();
1: 			} catch (Exception e) {
1: 			}
1: 			if (onClose != null) {
1: 				onClose.run();
1: 			}
1: 		});
1: 	}
commit:e55f0fd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1: import org.apache.aries.tx.control.jpa.common.impl.InternalJPAEntityManagerProviderFactory;
1: public class JPAEntityManagerProviderFactoryImpl implements InternalJPAEntityManagerProviderFactory {
1: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
/////////////////////////////////////////////////////////////////////////
1: 		return new JPAEntityManagerProviderImpl(emf, () -> emf.close());
1: 	@Override
0: 		public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, 
0: 				Map<String, Object> jpaProperties, Map<String, Object> resourceProviderProperties, 
0: 				Runnable onClose) {
1: 			checkEnlistment(resourceProviderProperties);
1: 			
1: 			EntityManagerFactory emf = emfb.createEntityManagerFactory(jpaProperties);
1: 			
1: 			validateEMF(emf);
1: 			
0: 			return new JPAEntityManagerProviderImpl(emf, () -> {
0: 				try {
0: 					emf.close();
0: 				} catch (Exception e) {
1: 				}
0: 				if (onClose != null) {
0: 					onClose.run();
1: 				}
0: 			});
1: 		}
1: 
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractJPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
1: 		return new JPAEntityManagerProviderImpl(emf, null);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
0: 	public JPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
commit:b73433a
/////////////////////////////////////////////////////////////////////////
1: 			tranType = RESOURCE_LOCAL;
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.local.impl;
1: 
1: import static java.util.Optional.ofNullable;
1: import static javax.persistence.spi.PersistenceUnitTransactionType.RESOURCE_LOCAL;
1: 
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.service.transaction.control.TransactionException;
0: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
0: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProviderFactory;
1: 
0: public class JPAEntityManagerProviderFactoryImpl implements JPAEntityManagerProviderFactory {
1: 
1: 	@Override
0: 	public JPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb, Map<String, Object> jpaProperties,
1: 			Map<String, Object> resourceProviderProperties) {
1: 		checkEnlistment(resourceProviderProperties);
1: 		
0: 		EntityManagerFactory emf = emfb.createEntityManagerFactory(jpaProperties);
1: 		
1: 		validateEMF(emf);
1: 		
0: 		return new JPAEntityManagerProviderImpl(emf);
1: 	}
1: 
1: 	private void validateEMF(EntityManagerFactory emf) {
1: 		Object o = emf.getProperties().get("javax.persistence.transactionType");
1: 		
1: 		PersistenceUnitTransactionType tranType;
1: 		if(o instanceof PersistenceUnitTransactionType) {
1: 			tranType = (PersistenceUnitTransactionType) o;
1: 		} else if (o instanceof String) {
1: 			tranType = PersistenceUnitTransactionType.valueOf(o.toString());
1: 		} else {
1: 			//TODO log this?
0: 			tranType = null;
1: 		}
1: 		
1: 		if(RESOURCE_LOCAL != tranType) {
1: 			throw new IllegalArgumentException("The supplied EntityManagerFactory is not declared RESOURCE_LOCAL");
1: 		}
1: 	}
1: 
1: 	@Override
0: 	public JPAEntityManagerProvider getProviderFor(EntityManagerFactory emf, Map<String, Object> jpaProperties,
1: 			Map<String, Object> resourceProviderProperties) {
1: 		checkEnlistment(resourceProviderProperties);
1: 		validateEMF(emf);
1: 		
0: 		return new JPAEntityManagerProviderImpl(emf);
1: 	}
1: 
1: 	private void checkEnlistment(Map<String, Object> resourceProviderProperties) {
1: 		if (toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, false)) {
1: 			throw new TransactionException("This Resource Provider does not support XA transactions");
1: 		} else if (!toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true)) {
1: 			throw new TransactionException(
1: 					"This Resource Provider always enlists in local transactions as it does not support XA");
1: 		}
1: 	}
1: 	
1: 	private boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1: 		Object o =  ofNullable(props)
1: 			.map(m -> m.get(key))
1: 			.orElse(defaultValue);
1: 		
1: 		if (o instanceof Boolean) {
1: 			return ((Boolean) o).booleanValue();
1: 		} else if(o instanceof String) {
1: 			return Boolean.parseBoolean((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1: 		}
1: 	}
1: }
============================================================================