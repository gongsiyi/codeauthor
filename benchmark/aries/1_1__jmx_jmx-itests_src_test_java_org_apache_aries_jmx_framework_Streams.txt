1:c13e6cc: /**
1:c13e6cc:  * Licensed to the Apache Software Foundation (ASF) under one
1:c13e6cc:  * or more contributor license agreements.  See the NOTICE file
1:c13e6cc:  * distributed with this work for additional information
1:c13e6cc:  * regarding copyright ownership.  The ASF licenses this file
1:c13e6cc:  * to you under the Apache License, Version 2.0 (the
1:c13e6cc:  * "License"); you may not use this file except in compliance
1:c13e6cc:  * with the License.  You may obtain a copy of the License at
1:c13e6cc:  *
1:c13e6cc:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c13e6cc:  *
1:c13e6cc:  * Unless required by applicable law or agreed to in writing,
1:c13e6cc:  * software distributed under the License is distributed on an
1:c13e6cc:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c13e6cc:  * KIND, either express or implied.  See the License for the
1:c13e6cc:  * specific language governing permissions and limitations
1:c13e6cc:  * under the License.
1:c13e6cc:  */
1:c13e6cc: package org.apache.aries.jmx.framework;
1:c13e6cc: 
1:c13e6cc: import java.io.ByteArrayOutputStream;
1:c13e6cc: import java.io.IOException;
1:c13e6cc: import java.io.InputStream;
1:c13e6cc: import java.io.OutputStream;
1:c13e6cc: 
1:c13e6cc: public class Streams {
1:c13e6cc:     private Streams() {}
1:c13e6cc: 
1:c13e6cc:     public static void pump(InputStream is, OutputStream os) throws IOException {
1:c13e6cc:         byte[] bytes = new byte[8192];
1:c13e6cc: 
1:c13e6cc:         int length = 0;
1:c13e6cc:         int offset = 0;
1:c13e6cc: 
1:c13e6cc:         while ((length = is.read(bytes, offset, bytes.length - offset)) != -1) {
1:c13e6cc:             offset += length;
1:c13e6cc: 
1:c13e6cc:             if (offset == bytes.length) {
1:c13e6cc:                 os.write(bytes, 0, bytes.length);
1:c13e6cc:                 offset = 0;
1:c13e6cc:             }
1:c13e6cc:         }
1:c13e6cc:         if (offset != 0) {
1:c13e6cc:             os.write(bytes, 0, offset);
1:c13e6cc:         }
1:c13e6cc:     }
1:c13e6cc: 
1:c13e6cc:     public static byte [] suck(InputStream is) throws IOException {
1:c13e6cc:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:c13e6cc:         try {
1:c13e6cc:             pump(is, baos);
1:c13e6cc:             return baos.toByteArray();
1:c13e6cc:         } finally {
1:c13e6cc:             is.close();
1:c13e6cc:         }
1:c13e6cc:     }
1:c13e6cc: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:c13e6cc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: 
1: public class Streams {
1:     private Streams() {}
1: 
1:     public static void pump(InputStream is, OutputStream os) throws IOException {
1:         byte[] bytes = new byte[8192];
1: 
1:         int length = 0;
1:         int offset = 0;
1: 
1:         while ((length = is.read(bytes, offset, bytes.length - offset)) != -1) {
1:             offset += length;
1: 
1:             if (offset == bytes.length) {
1:                 os.write(bytes, 0, bytes.length);
1:                 offset = 0;
1:             }
1:         }
1:         if (offset != 0) {
1:             os.write(bytes, 0, offset);
1:         }
1:     }
1: 
1:     public static byte [] suck(InputStream is) throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try {
1:             pump(is, baos);
1:             return baos.toByteArray();
1:         } finally {
1:             is.close();
1:         }
1:     }
1: }
============================================================================