1:3f63942: /**
1:3f63942:  * Licensed to the Apache Software Foundation (ASF) under one
1:3f63942:  * or more contributor license agreements.  See the NOTICE file
1:3f63942:  * distributed with this work for additional information
1:3f63942:  * regarding copyright ownership.  The ASF licenses this file
1:3f63942:  * to you under the Apache License, Version 2.0 (the
1:3f63942:  * "License"); you may not use this file except in compliance
1:3f63942:  * with the License.  You may obtain a copy of the License at
1:3f63942:  *
1:3f63942:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3f63942:  *
1:3f63942:  * Unless required by applicable law or agreed to in writing,
1:3f63942:  * software distributed under the License is distributed on an
1:3f63942:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3f63942:  * KIND, either express or implied.  See the License for the
1:3f63942:  * specific language governing permissions and limitations
1:3f63942:  * under the License.
1:3f63942:  */
1:3f63942: package org.apache.aries.spifly.pc.bundle;
1:3f63942: 
1:3f63942: import org.apache.aries.spifly.client.jar.Consumer;
1:3f63942: import org.osgi.framework.BundleActivator;
1:3f63942: import org.osgi.framework.BundleContext;
1:3f63942: 
1:3f63942: /** The activator invokes the SPI Consumer, which is also provided by this bundle. It does so
1:3f63942:  * asynchronously to give the SPI-Fly extender a chance to register the provider, which is done
1:3f63942:  * asynchronously as well.
1:3f63942:  */
1:3f63942: public class Activator implements BundleActivator {
1:3f63942:     @Override
1:3f63942:     public void start(BundleContext context) throws Exception {
1:3f63942:         Thread t = new Thread(new Runnable() {
1:3f63942:             @Override
1:3f63942:             public void run() {
1:3f63942:                 System.out.println("*** Asynchronous invocation to let the extender do its work.");
1:3f63942:                 try {
1:3f63942:                     Thread.sleep(500);
1:3f63942:                 } catch (InterruptedException e) {
1:3f63942:                     // ignore
1:3f63942:                 }
1:3f63942:                 Consumer consumer = new Consumer();
1:3f63942:                 System.out.println("*** Result from invoking the SPI consumer via library: " + consumer.callSPI());
1:3f63942:             }
1:3f63942:         });
1:3f63942:         t.start();
1:3f63942:     }
1:3f63942: 
1:3f63942:     @Override
1:3f63942:     public void stop(BundleContext context) throws Exception {
1:3f63942:     }
1:3f63942: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:3f63942
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly.pc.bundle;
1: 
1: import org.apache.aries.spifly.client.jar.Consumer;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: 
1: /** The activator invokes the SPI Consumer, which is also provided by this bundle. It does so
1:  * asynchronously to give the SPI-Fly extender a chance to register the provider, which is done
1:  * asynchronously as well.
1:  */
1: public class Activator implements BundleActivator {
1:     @Override
1:     public void start(BundleContext context) throws Exception {
1:         Thread t = new Thread(new Runnable() {
1:             @Override
1:             public void run() {
1:                 System.out.println("*** Asynchronous invocation to let the extender do its work.");
1:                 try {
1:                     Thread.sleep(500);
1:                 } catch (InterruptedException e) {
1:                     // ignore
1:                 }
1:                 Consumer consumer = new Consumer();
1:                 System.out.println("*** Result from invoking the SPI consumer via library: " + consumer.callSPI());
1:             }
1:         });
1:         t.start();
1:     }
1: 
1:     @Override
1:     public void stop(BundleContext context) throws Exception {
1:     }
1: }
============================================================================