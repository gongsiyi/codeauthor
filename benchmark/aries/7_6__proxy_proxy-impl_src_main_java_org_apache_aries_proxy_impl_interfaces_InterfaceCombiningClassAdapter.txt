1:475ef33: /*
1:475ef33:  * Licensed to the Apache Software Foundation (ASF) under one
1:475ef33:  * or more contributor license agreements.  See the NOTICE file
1:475ef33:  * distributed with this work for additional information
1:475ef33:  * regarding copyright ownership.  The ASF licenses this file
1:475ef33:  * to you under the Apache License, Version 2.0 (the
1:475ef33:  * "License"); you may not use this file except in compliance
1:475ef33:  * with the License.  You may obtain a copy of the License at
1:475ef33:  *
1:475ef33:  *   http://www.apache.org/licenses/LICENSE-2.0
1:475ef33:  *
1:475ef33:  * Unless required by applicable law or agreed to in writing,
1:475ef33:  * software distributed under the License is distributed on an
1:475ef33:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:475ef33:  * KIND, either express or implied.  See the License for the
1:475ef33:  * specific language governing permissions and limitations
1:475ef33:  * under the License.
3:475ef33:  */
1:475ef33: package org.apache.aries.proxy.impl.interfaces;
1:d014a6c: 
1:475ef33: import java.io.IOException;
1:d014a6c: import java.lang.reflect.Modifier;
1:d014a6c: import java.util.ArrayList;
1:475ef33: import java.util.Collection;
1:d014a6c: import java.util.List;
1:d014a6c: 
1:475ef33: import org.apache.aries.proxy.UnableToProxyException;
1:b5b836a: import org.apache.aries.proxy.impl.ProxyUtils;
1:475ef33: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1:e6518d7: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassVisitor;
1:475ef33: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassWriter;
1:e6518d7: import org.objectweb.asm.ClassVisitor;
1:475ef33: import org.objectweb.asm.ClassWriter;
1:475ef33: import org.objectweb.asm.MethodVisitor;
1:475ef33: import org.objectweb.asm.Opcodes;
1:475ef33: import org.objectweb.asm.Type;
1:475ef33: import org.objectweb.asm.commons.Method;
1:e6518d7: 
2:475ef33: /**
1:475ef33:  * This class is used to aggregate several interfaces into a real class which implements all of them
1:475ef33:  */
1:322f373: final class InterfaceCombiningClassAdapter extends ClassVisitor implements Opcodes {
1:322f373: 
1:d014a6c:   /** The superclass we should use */
1:8f852b6:   private final Class<?> superclass;
1:475ef33:   /** The interfaces we need to implement */
1:475ef33:   private final Collection<Class<?>> interfaces;
1:475ef33:   /** The {@link ClassWriter} we use to write our class */
1:475ef33:   private final ClassWriter writer;
1:475ef33:   /** The adapter we use to weave in our method implementations */
1:8f852b6:   private final AbstractWovenProxyAdapter adapter;
1:475ef33:   /** Whether we have already written the class bytes */
1:475ef33:   private boolean done = false;
1:322f373: 
1:475ef33:   /**
1:475ef33:    * Construct an {@link InterfaceCombiningClassAdapter} to combine the supplied
1:475ef33:    * interfaces into a class with the supplied name using the supplied classloader
1:475ef33:    * @param className
1:475ef33:    * @param loader
1:475ef33:    * @param interfaces
1:9a9631e:    */
1:9a9631e:   InterfaceCombiningClassAdapter(String className,
1:9a9631e:       ClassLoader loader, Class<?> superclass, Collection<Class<?>> interfaces) {
1:9a9631e:     super(Opcodes.ASM5);
1:9a9631e:     writer = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_FRAMES, loader);
1:9a9631e:     ClassVisitor cv = new OSGiFriendlyClassVisitor(writer, ClassWriter.COMPUTE_FRAMES);
1:9a9631e:     adapter = new InterfaceUsingWovenProxyAdapter(cv, className, loader);
1:322f373: 
1:475ef33:     this.interfaces = interfaces;
1:d014a6c:     this.superclass = superclass;
1:475ef33:     String[] interfaceNames = new String[interfaces.size()];
1:322f373: 
1:475ef33:     int i = 0;
1:475ef33:     for(Class<?> in : interfaces) {
1:d014a6c:       interfaceNames[i] = Type.getInternalName(in);
1:475ef33:       i++;
1:475ef33:     }
1:322f373: 
1:b5b836a:     adapter.visit(ProxyUtils.getWeavingJavaVersion(), ACC_PUBLIC | ACC_SYNTHETIC, className, null,
1:d014a6c:         (superclass == null) ? AbstractWovenProxyAdapter.OBJECT_TYPE.getInternalName() :
1:322f373:           Type.getInternalName(superclass), interfaceNames);
1:475ef33:   }
1:322f373: 
1:8f852b6: 
1:475ef33:   @Override
1:475ef33:   public final MethodVisitor visitMethod(int access, String name, String desc,
1:2c49003:           String sig, String[] arg4) {
1:2c49003:       //If we already implement this method (from another interface) then we don't
1:2c49003:       //want a duplicate. We also don't want to copy any static init blocks (these
1:2c49003:       //initialize static fields on the interface that we don't copy
1:2c49003:       if(adapter.getKnownMethods().contains(new Method(name, desc)) || 
1:2c49003:               "<clinit>".equals(name)) {
1:2c49003:           return null;
1:2c49003:       }
1:2c49003:       else if(((access & (ACC_PRIVATE|ACC_SYNTHETIC)) == (ACC_PRIVATE|ACC_SYNTHETIC))) {
1:2c49003:           // private, synthetic methods on interfaces don't need to be proxied.       
1:2c49003:           return null;
1:0737543:       } else if (((access & (ACC_STATIC)) == (ACC_STATIC))) {
1:0737543:           //static methods on interfaces don't need to be proxied
1:0737543:           return null;
1:2c49003:       }
1:2c49003:       else {//We're going to implement this method, so make it non abstract!
1:2c49003:           return adapter.visitMethod(access, name, desc, null, arg4);
1:2c49003:       }
1:d014a6c:   }
1:d014a6c: 
1:475ef33:   /**
1:475ef33:    * Generate the byte[] for our class
1:475ef33:    * @return
1:475ef33:    * @throws UnableToProxyException
1:475ef33:    */
1:475ef33:   final byte[] generateBytes() throws UnableToProxyException {
1:475ef33:     if(!!!done) {
1:475ef33:       for(Class<?> c : interfaces) {
1:d014a6c:         adapter.setCurrentMethodDeclaringType(Type.getType(c), true);
1:475ef33:         try {
1:475ef33:           AbstractWovenProxyAdapter.readClass(c, this);
1:475ef33:         } catch (IOException e) {
1:475ef33:           throw new UnableToProxyException(c, e);
1:475ef33:         }
1:475ef33:       }
1:322f373: 
1:d014a6c:       Class<?> clazz = superclass;
1:322f373: 
1:d014a6c:       while(clazz != null && (clazz.getModifiers() & Modifier.ABSTRACT) != 0) {
1:d014a6c:         adapter.setCurrentMethodDeclaringType(Type.getType(clazz), false);
1:d014a6c:         visitAbstractMethods(clazz);
1:d014a6c:         clazz = clazz.getSuperclass();
1:d014a6c:       }
1:322f373:       
1:8f852b6:       adapter.setCurrentMethodDeclaringType(AbstractWovenProxyAdapter.OBJECT_TYPE, false);
1:ec0e1f2:       visitObjectMethods();
1:322f373: 
1:475ef33:       adapter.visitEnd();
1:475ef33:       done  = true;
1:475ef33:     }
1:8f852b6:     
1:475ef33:     return writer.toByteArray();
1:475ef33:   }
1:322f373: 
1:d014a6c:   private void visitAbstractMethods(Class<?> clazz) {
1:d014a6c:     for(java.lang.reflect.Method m : clazz.getDeclaredMethods()) {
1:d014a6c:       int modifiers = m.getModifiers();
1:d014a6c:       if((modifiers & Modifier.ABSTRACT) != 0) {
1:d014a6c:         List<String> exceptions = new ArrayList<String>();
1:d014a6c:         for(Class<?> c : m.getExceptionTypes()) {
1:d014a6c:           exceptions.add(Type.getInternalName(c));
1:d014a6c:         }
1:d014a6c:         MethodVisitor visitor = visitMethod(modifiers, m.getName(), Method.getMethod(m).getDescriptor(), 
1:d014a6c:             null, exceptions.toArray(new String[exceptions.size()]));
1:322f373:         if (visitor != null) visitor.visitEnd();
1:d014a6c:       }
1:d014a6c:     }
1:d014a6c:   }
1:d014a6c: 
1:d014a6c: 
1:475ef33:   /**
1:ec0e1f2:    * Make sure that the three common Object methods toString, equals and hashCode are redirected to the delegate
1:ec0e1f2:    * even if they are not on any of the interfaces
1:475ef33:    */
1:ec0e1f2:   private void visitObjectMethods() {
1:8f852b6:       MethodVisitor visitor = visitMethod(ACC_PUBLIC | ACC_ABSTRACT, "toString", "()Ljava/lang/String;", null, null);
1:322f373:       if (visitor != null) visitor.visitEnd();
1:322f373:       
1:8f852b6:       visitor = visitMethod(ACC_PUBLIC | ACC_ABSTRACT, "equals", "(Ljava/lang/Object;)Z", null, null);
1:322f373:       if (visitor != null) visitor.visitEnd();
1:8f852b6: 
1:8f852b6:       visitor = visitMethod(ACC_PUBLIC | ACC_ABSTRACT, "hashCode", "()I", null, null);
3:8f852b6:       if (visitor != null) visitor.visitEnd();     
1:475ef33:   }
1:475ef33: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0737543
/////////////////////////////////////////////////////////////////////////
1:       } else if (((access & (ACC_STATIC)) == (ACC_STATIC))) {
1:           //static methods on interfaces don't need to be proxied
1:           return null;
author:Sam Bratton
-------------------------------------------------------------------------------
commit:2c49003
/////////////////////////////////////////////////////////////////////////
1:           String sig, String[] arg4) {
1:       //If we already implement this method (from another interface) then we don't
1:       //want a duplicate. We also don't want to copy any static init blocks (these
1:       //initialize static fields on the interface that we don't copy
1:       if(adapter.getKnownMethods().contains(new Method(name, desc)) || 
1:               "<clinit>".equals(name)) {
1:           return null;
1:       }
1:       else if(((access & (ACC_PRIVATE|ACC_SYNTHETIC)) == (ACC_PRIVATE|ACC_SYNTHETIC))) {
1:           // private, synthetic methods on interfaces don't need to be proxied.       
1:           return null;
1:       }
1:       else {//We're going to implement this method, so make it non abstract!
1:           return adapter.visitMethod(access, name, desc, null, arg4);
1:       }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1:    */
1:   InterfaceCombiningClassAdapter(String className,
1:       ClassLoader loader, Class<?> superclass, Collection<Class<?>> interfaces) {
1:     super(Opcodes.ASM5);
1:     writer = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_FRAMES, loader);
1:     ClassVisitor cv = new OSGiFriendlyClassVisitor(writer, ClassWriter.COMPUTE_FRAMES);
1:     adapter = new InterfaceUsingWovenProxyAdapter(cv, className, loader);
author:Emily Jiang
-------------------------------------------------------------------------------
commit:b5b836a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.ProxyUtils;
/////////////////////////////////////////////////////////////////////////
1:     adapter.visit(ProxyUtils.getWeavingJavaVersion(), ACC_PUBLIC | ACC_SYNTHETIC, className, null,
commit:322f373
/////////////////////////////////////////////////////////////////////////
1: final class InterfaceCombiningClassAdapter extends ClassVisitor implements Opcodes {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:   InterfaceCombiningClassAdapter(String className,
0:     super(Opcodes.ASM4);
1: 
1: 
1: 
1:           Type.getInternalName(superclass), interfaceNames);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:     MethodVisitor visitor = visitMethod(ACC_PUBLIC, "toString", "()Ljava/lang/String;", null, null);
1:     if (visitor != null) visitor.visitEnd();
0:     visitor = visitMethod(ACC_PUBLIC, "equals", "(Ljava/lang/Object;)Z", null, null);
1:     if (visitor != null) visitor.visitEnd();
1: 
0:     visitor = visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
1:     if (visitor != null) visitor.visitEnd();      
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassVisitor;
0: import org.apache.aries.proxy.impl.gen.Constants;
0: import org.apache.aries.proxy.impl.weaving.EmptyVisitor;
1: import org.objectweb.asm.ClassVisitor;
1: 
/////////////////////////////////////////////////////////////////////////
0:      super(Constants.ASM4);
0:     writer = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_FRAMES, loader, className, (superclass!=null)? superclass.getName(): null);
0:     ClassVisitor cv = new OSGiFriendlyClassVisitor(writer, ClassWriter.COMPUTE_FRAMES);
0:     adapter = new InterfaceUsingWovenProxyAdapter(cv, className, loader);
author:David Jencks
-------------------------------------------------------------------------------
commit:f80358e
/////////////////////////////////////////////////////////////////////////
0:     writer = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_FRAMES, loader);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private final Class<?> superclass;
1:   private final AbstractWovenProxyAdapter adapter;
/////////////////////////////////////////////////////////////////////////
0:       ClassLoader loader, Class<?> superclass, Collection<Class<?>> interfaces) {
/////////////////////////////////////////////////////////////////////////
0:       return adapter.visitMethod(access, name, desc, null, arg4);
/////////////////////////////////////////////////////////////////////////
1:       
1:       adapter.setCurrentMethodDeclaringType(AbstractWovenProxyAdapter.OBJECT_TYPE, false);
1:     
/////////////////////////////////////////////////////////////////////////
1:       MethodVisitor visitor = visitMethod(ACC_PUBLIC | ACC_ABSTRACT, "toString", "()Ljava/lang/String;", null, null);
1:       if (visitor != null) visitor.visitEnd();
1:       
1:       visitor = visitMethod(ACC_PUBLIC | ACC_ABSTRACT, "equals", "(Ljava/lang/Object;)Z", null, null);
1:       if (visitor != null) visitor.visitEnd();
1:       visitor = visitMethod(ACC_PUBLIC | ACC_ABSTRACT, "hashCode", "()I", null, null);
1:       if (visitor != null) visitor.visitEnd();     
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Modifier;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.aries.proxy.weaving.WovenProxy;
/////////////////////////////////////////////////////////////////////////
1:   /** The superclass we should use */
0:   private final Class<? extends WovenProxy> superclass;
/////////////////////////////////////////////////////////////////////////
0:       ClassLoader loader, Class<? extends WovenProxy> superclass, Collection<Class<?>> interfaces) {
1:     this.superclass = superclass;
1:       interfaceNames[i] = Type.getInternalName(in);
1:         (superclass == null) ? AbstractWovenProxyAdapter.OBJECT_TYPE.getInternalName() :
0:                                Type.getInternalName(superclass), interfaceNames);
0:     else {//We're going to implement this method, so make it non abstract!
0:       return adapter.visitMethod(access & ~ACC_ABSTRACT, name, desc, null, arg4);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         adapter.setCurrentMethodDeclaringType(Type.getType(c), true);
/////////////////////////////////////////////////////////////////////////
1:       Class<?> clazz = superclass;
1:       
1:       while(clazz != null && (clazz.getModifiers() & Modifier.ABSTRACT) != 0) {
1:         adapter.setCurrentMethodDeclaringType(Type.getType(clazz), false);
1:         visitAbstractMethods(clazz);
1:         clazz = clazz.getSuperclass();
1:       }
1:       
0:       adapter.setCurrentMethodDeclaringType(Type.getType(Object.class), false);
/////////////////////////////////////////////////////////////////////////
1:   private void visitAbstractMethods(Class<?> clazz) {
1:     for(java.lang.reflect.Method m : clazz.getDeclaredMethods()) {
1:       int modifiers = m.getModifiers();
1:       if((modifiers & Modifier.ABSTRACT) != 0) {
1:         List<String> exceptions = new ArrayList<String>();
1:         for(Class<?> c : m.getExceptionTypes()) {
1:           exceptions.add(Type.getInternalName(c));
1:         }
1:         MethodVisitor visitor = visitMethod(modifiers, m.getName(), Method.getMethod(m).getDescriptor(), 
1:             null, exceptions.toArray(new String[exceptions.size()]));
0:         if (visitor != null) visitor.visitEnd();
1:       }
1:     }
1:   }
1: 
1: 
commit:82cd139
/////////////////////////////////////////////////////////////////////////
0:       adapter.setCurrentInterface(Type.getType(Object.class));
commit:dad18d4
/////////////////////////////////////////////////////////////////////////
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl.interfaces;
0: 
1: import java.io.IOException;
1: import java.util.Collection;
0: import java.util.HashSet;
0: import java.util.Queue;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.ConcurrentMap;
0: import java.util.concurrent.LinkedBlockingQueue;
0: 
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassWriter;
1: import org.objectweb.asm.ClassWriter;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Opcodes;
1: import org.objectweb.asm.Type;
0: import org.objectweb.asm.commons.EmptyVisitor;
1: import org.objectweb.asm.commons.Method;
0: 
1: /**
1:  * This class is used to aggregate several interfaces into a real class which implements all of them
1:  */
0: final class InterfaceCombiningClassAdapter extends EmptyVisitor implements Opcodes {
0: 
1:   /** 
0:    * A cache of previously created proxy class loaders. Because we cache then update
0:    * the {@link InterfaceCombiningClassAdapter#accessList} we might temporarily 
0:    * end up with more in the cache than the maximum size of the access list. 
0:    * We therefore initialize this to be double the size of the access list so it
0:    * should never be necessary to resize
1:    */
0:   private static final ConcurrentMap<HashSet<Class<?>>, ProxyClassLoader> cache = 
0:     new ConcurrentHashMap<HashSet<Class<?>>, ProxyClassLoader>(256);
1:   /**
0:    * The access List that determines when we evict things from our cache, items
0:    * are removed and re-added when accessed so a {@link LinkedBlockingQueue}
0:    * is considerably faster 
1:    */
0:   private static final Queue<HashSet<Class<?>>> accessList = 
0:     new LinkedBlockingQueue<HashSet<Class<?>>>(128);
0:   
1:   /** The interfaces we need to implement */
1:   private final Collection<Class<?>> interfaces;
1:   /** The {@link ClassWriter} we use to write our class */
1:   private final ClassWriter writer;
1:   /** The adapter we use to weave in our method implementations */
0:   private final InterfaceUsingWovenProxyAdapter adapter;
1:   /** Whether we have already written the class bytes */
1:   private boolean done = false;
0:   
1:   /**
1:    * Construct an {@link InterfaceCombiningClassAdapter} to combine the supplied
1:    * interfaces into a class with the supplied name using the supplied classloader
1:    * @param className
1:    * @param loader
1:    * @param interfaces
1:    */
0:    InterfaceCombiningClassAdapter(String className,
0:       ClassLoader loader, Collection<Class<?>> interfaces) {
0:     writer = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_FRAMES, loader);
0:     adapter = new InterfaceUsingWovenProxyAdapter(writer, className, loader);
0:     
1:     this.interfaces = interfaces;
1:     String[] interfaceNames = new String[interfaces.size()];
0:     
1:     int i = 0;
1:     for(Class<?> in : interfaces) {
0:       interfaceNames[i] = Type.getType(in).getInternalName();
1:       i++;
1:     }
0:     
0:     adapter.visit(V1_6, ACC_PUBLIC | ACC_SYNTHETIC, className, null,
0:         AbstractWovenProxyAdapter.OBJECT_TYPE.getInternalName(), interfaceNames);
1:   }
0: 
0: 
1:   @Override
1:   public final MethodVisitor visitMethod(int access, String name, String desc,
0:       String sig, String[] arg4) {
0:     //We're going to implement this method, so make it non abstract!
0:     access ^= ACC_ABSTRACT;
0:     //If we already implement this method (from another interface) then we don't
0:     //want a duplicate. We also don't want to copy any static init blocks (these
0:     //initialize static fields on the interface that we don't copy
0:     if(adapter.getKnownMethods().contains(new Method(name, desc)) || 
0:         "<clinit>".equals(name))
0:       return null;
0:     else 
0:       return adapter.visitMethod(access, name, desc, null, arg4);
1:   }
0:   
1:   /**
1:    * Generate the byte[] for our class
1:    * @return
1:    * @throws UnableToProxyException
1:    */
1:   final byte[] generateBytes() throws UnableToProxyException {
1:     if(!!!done) {
1:       for(Class<?> c : interfaces) {
0:         adapter.setCurrentInterface(Type.getType(c));
1:         try {
1:           AbstractWovenProxyAdapter.readClass(c, this);
1:         } catch (IOException e) {
1:           throw new UnableToProxyException(c, e);
1:         }
1:       }
1:       adapter.visitEnd();
1:       done  = true;
1:     }
1:     return writer.toByteArray();
1:   }
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:ec0e1f2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     access &= ~ACC_ABSTRACT;
/////////////////////////////////////////////////////////////////////////
0:       
1:       visitObjectMethods();
0:       
0:   
0:   /**
1:    * Make sure that the three common Object methods toString, equals and hashCode are redirected to the delegate
1:    * even if they are not on any of the interfaces
0:    */
1:   private void visitObjectMethods() {
0:       MethodVisitor visitor = visitMethod(ACC_PUBLIC, "toString", "()Ljava/lang/String;", null, null);
0:       if (visitor != null) visitor.visitEnd();
0:       
0:       visitor = visitMethod(ACC_PUBLIC, "equals", "(Ljava/lang/Object;)Z", null, null);
0:       if (visitor != null) visitor.visitEnd();
0: 
0:       visitor = visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
0:       if (visitor != null) visitor.visitEnd();      
0:   }
============================================================================