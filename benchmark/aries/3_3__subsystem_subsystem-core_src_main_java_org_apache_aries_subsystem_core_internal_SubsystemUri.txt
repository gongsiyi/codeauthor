1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.internal;
1:1a916e6: 
1:35094c6: import java.io.UnsupportedEncodingException;
1:1129914: import java.net.MalformedURLException;
1:1129914: import java.net.URI;
1:1129914: import java.net.URISyntaxException;
1:1129914: import java.net.URL;
1:35094c6: import java.net.URLEncoder;
1:1c9c28b: import java.util.regex.Matcher;
1:1c9c28b: import java.util.regex.Pattern;
1:dde76c3: 
1:1c9c28b: import org.apache.aries.subsystem.core.archive.SubsystemSymbolicNameHeader;
1:1c9c28b: import org.apache.aries.subsystem.core.archive.SubsystemVersionHeader;
1:1129914: import org.osgi.framework.Version;
1:35094c6: import org.osgi.service.subsystem.SubsystemConstants;
1:dde76c3: 
1:1129914: public class SubsystemUri {
1:1c9c28b: 	private static final String REGEXP = "([^=]*)=([^&]*)&?";
1:1c9c28b: 	private static final Pattern PATTERN = Pattern.compile(REGEXP);
1:1a916e6: 	
1:1129914: 	private final String symbolicName;
1:1129914: 	private final URL url;
1:1129914: 	private final Version version;
1:1a916e6: 	
1:1129914: 	public SubsystemUri(String location) throws URISyntaxException, MalformedURLException {
1:1c9c28b: 		if (!location.startsWith("subsystem://"))
1:1c9c28b: 			throw new IllegalArgumentException(location);
1:1129914: 		URI uri = new URI(location);
1:1c9c28b: 		if (uri.getAuthority() != null)
1:1c9c28b: 			url = new URL(uri.getAuthority());
1:1c9c28b: 		else
1:1c9c28b: 			url = null;
1:1c9c28b: 		Matcher matcher = PATTERN.matcher(uri.getQuery());
1:1c9c28b: 		String symbolicName = null;
1:1c9c28b: 		Version version = Version.emptyVersion;
1:1c9c28b: 		while (matcher.find()) {
1:1c9c28b: 			String name = matcher.group(1);
1:1a916e6: 			if (SubsystemSymbolicNameHeader.NAME.equals(name))
1:1a916e6: 				symbolicName = new SubsystemSymbolicNameHeader(matcher.group(2)).getValue();
1:1a916e6: 			else if (SubsystemVersionHeader.NAME.equals(name))
1:1a916e6: 				version = Version.parseVersion(matcher.group(2));
1:1a916e6: 			else
1:1c9c28b: 				throw new IllegalArgumentException("Unsupported subsystem URI parameter: " + name);
1:dde76c3: 		}
1:1c9c28b: 		this.symbolicName = symbolicName;
1:1c9c28b: 		this.version = version;
1:dde76c3: 	}
1:1a916e6: 	
1:35094c6: 	public SubsystemUri(String symbolicName, Version version, URL url) {
1:35094c6: 		// TODO symbolicName should conform to OSGi grammar.
1:35094c6: 		if (symbolicName == null || symbolicName.length() == 0)
1:35094c6: 			throw new IllegalArgumentException(
1:35094c6: 					"Missing required parameter: symbolicName");
1:35094c6: 		this.symbolicName = symbolicName;
1:35094c6: 		this.version = version;
1:35094c6: 		this.url = url;
1:dde76c3: 	}
1:1a916e6: 	
1:1129914: 	public String getSymbolicName() {
1:1129914: 		return symbolicName;
1:35094c6: 	}
1:1a916e6: 	
1:1129914: 	public URL getURL() {
1:1129914: 		return url;
1:1c9c28b: 	}
1:1a916e6: 	
1:1129914: 	public Version getVersion() {
1:1129914: 		return version;
5:1129914: 	}
1:9bba779: 
1:9bba779:     @SuppressWarnings("deprecation")
1:35094c6: 	public String toString() {
1:35094c6: 		StringBuilder builder = new StringBuilder("subsystem://");
1:35094c6: 		if (url != null) {
1:35094c6: 			try {
1:35094c6: 				builder.append(URLEncoder.encode(url.toString(), "UTF-8"));
1:35094c6: 			} catch (UnsupportedEncodingException e) {
1:35094c6: 				builder.append(URLEncoder.encode(url.toString()));
1:35094c6: 			}
1:35094c6: 		}
1:35094c6: 		builder.append('?').append(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME)
1:35094c6: 				.append('=').append(symbolicName);
1:35094c6: 		if (version != null)
1:35094c6: 			builder.append('&').append(SubsystemConstants.SUBSYSTEM_VERSION)
1:35094c6: 					.append('=').append(version);
1:35094c6: 		return builder.toString();
1:35094c6: 	}
1:1129914: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9bba779
/////////////////////////////////////////////////////////////////////////
1: 
1:     @SuppressWarnings("deprecation")
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:1a916e6
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	
/////////////////////////////////////////////////////////////////////////
1: 			if (SubsystemSymbolicNameHeader.NAME.equals(name))
1: 				symbolicName = new SubsystemSymbolicNameHeader(matcher.group(2)).getValue();
1: 			else if (SubsystemVersionHeader.NAME.equals(name))
1: 				version = Version.parseVersion(matcher.group(2));
1: 			else
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	
1: 	
1: 	
commit:dde76c3
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 			if (SubsystemSymbolicNameHeader.NAME.equals(name)) {
0: 			    int idx = location.indexOf("!/");
0:                 if (idx > 0) {
0: 			        symbolicName = location.substring(idx + 2);
0: 			        int idx2 = symbolicName.indexOf('@');
0: 			        if (idx2 > 0) {
0: 			            symbolicName = symbolicName.substring(0, idx2);
1: 			        }
0: 			    } else {
0: 			        symbolicName = new SubsystemSymbolicNameHeader(matcher.group(2)).getValue();
1: 			    }
0: 			} else if (SubsystemVersionHeader.NAME.equals(name)) {
0: 			    String group = matcher.group(2);
0: 			    if (group.contains("!/") && group.contains("@")) {
0: 			        int idx = group.lastIndexOf('@');
0: 			        version = Version.parseVersion(group.substring(idx + 1));
0: 			    } else {
0: 			        version = Version.parseVersion(group);
1: 			    }
0: 			} else
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
author:John Ross
-------------------------------------------------------------------------------
commit:35094c6
/////////////////////////////////////////////////////////////////////////
1: import java.io.UnsupportedEncodingException;
1: import java.net.URLEncoder;
1: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
1: 	public SubsystemUri(String symbolicName, Version version, URL url) {
1: 		// TODO symbolicName should conform to OSGi grammar.
1: 		if (symbolicName == null || symbolicName.length() == 0)
1: 			throw new IllegalArgumentException(
1: 					"Missing required parameter: symbolicName");
1: 		this.symbolicName = symbolicName;
1: 		this.version = version;
1: 		this.url = url;
1: 	}
0: 	
/////////////////////////////////////////////////////////////////////////
0: 	
1: 	public String toString() {
1: 		StringBuilder builder = new StringBuilder("subsystem://");
1: 		if (url != null) {
1: 			try {
1: 				builder.append(URLEncoder.encode(url.toString(), "UTF-8"));
1: 			} catch (UnsupportedEncodingException e) {
1: 				builder.append(URLEncoder.encode(url.toString()));
1: 			}
1: 		}
1: 		builder.append('?').append(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME)
1: 				.append('=').append(symbolicName);
1: 		if (version != null)
1: 			builder.append('&').append(SubsystemConstants.SUBSYSTEM_VERSION)
1: 					.append('=').append(version);
1: 		return builder.toString();
1: 	}
commit:bd2f017
/////////////////////////////////////////////////////////////////////////
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: import org.apache.aries.subsystem.core.archive.SubsystemSymbolicNameHeader;
1: import org.apache.aries.subsystem.core.archive.SubsystemVersionHeader;
1: 	private static final String REGEXP = "([^=]*)=([^&]*)&?";
1: 	private static final Pattern PATTERN = Pattern.compile(REGEXP);
0: 	
1: 		if (!location.startsWith("subsystem://"))
1: 			throw new IllegalArgumentException(location);
1: 		if (uri.getAuthority() != null)
1: 			url = new URL(uri.getAuthority());
1: 			url = null;
1: 		Matcher matcher = PATTERN.matcher(uri.getQuery());
1: 		String symbolicName = null;
1: 		Version version = Version.emptyVersion;
1: 		while (matcher.find()) {
1: 			String name = matcher.group(1);
0: 			if (SubsystemSymbolicNameHeader.NAME.equals(name))
0: 				symbolicName = new SubsystemSymbolicNameHeader(matcher.group(2)).getValue();
0: 			else if (SubsystemVersionHeader.NAME.equals(name))
0: 				version = Version.parseVersion(matcher.group(2));
1: 			else
1: 				throw new IllegalArgumentException("Unsupported subsystem URI parameter: " + name);
1: 		}
0: 		if (symbolicName == null)
0: 			throw new IllegalArgumentException("Missing required subsystem URI parameter: " + SubsystemSymbolicNameHeader.NAME);
1: 		this.symbolicName = symbolicName;
1: 		this.version = version;
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
0: 
1: import java.net.MalformedURLException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.URL;
0: 
0: import org.apache.aries.subsystem.core.archive.Grammar;
1: import org.osgi.framework.Version;
0: 
1: public class SubsystemUri {
1: 	private final String symbolicName;
0: 	private final String type;
1: 	private final URL url;
1: 	private final Version version;
0: 	
1: 	public SubsystemUri(String location) throws URISyntaxException, MalformedURLException {
1: 		URI uri = new URI(location);
0: 		String scheme = uri.getScheme();
0: 		// TODO Add to constants.
0: 		if (!scheme.matches("subsystem(?:.(?:eba|cba|fba))?"))
0: 			throw new IllegalArgumentException(location);
0: 		int i = scheme.indexOf('.');
0: 		if (i != -1)
0: 			type = scheme.substring(i);
0: 		else
0: 			// TODO Add to constants.
0: 			type = "eba";
0: 		symbolicName = uri.getQuery();
0: 		if (!symbolicName.matches(Grammar.SYMBOLICNAME))
0: 			throw new IllegalArgumentException(location);
0: 		url = new URL(uri.getAuthority());
0: 		String fragment = uri.getFragment();
0: 		if (fragment != null)
0: 			version = Version.parseVersion(uri.getFragment());
0: 		else
0: 			version = null;
1: 	}
0: 	
1: 	public String getSymbolicName() {
1: 		return symbolicName;
1: 	}
0: 	
0: 	public String getType() {
0: 		return type;
1: 	}
0: 	
1: 	public URL getURL() {
1: 		return url;
1: 	}
0: 	
1: 	public Version getVersion() {
1: 		return version;
1: 	}
1: }
============================================================================