1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:777b216: package org.apache.aries.subsystem.core.internal;
1:777b216: 
1:777b216: import java.util.EnumSet;
1:777b216: 
1:777b216: import org.osgi.service.subsystem.Subsystem.State;
1:777b216: 
1:777b216: public class UninstallAction extends AbstractAction {
1:5bd3bf6: 	public UninstallAction(BasicSubsystem requestor, BasicSubsystem target, boolean disableRootCheck) {
1:391a1aa: 		super(requestor, target, disableRootCheck);
1:777b216: 	}
1:777b216: 	
1:777b216: 	@Override
1:777b216: 	public Object run() {
1:b66ad7c: 		// Protect against re-entry now that cycles are supported.
1:279dba5: 		if (!Activator.getInstance().getLockingStrategy().set(State.UNINSTALLING, target)) {
1:777b216: 			return null;
1:777b216: 		}
1:b66ad7c: 		try {
1:445abc4: 			// Acquire the global write lock to prevent all other operations 
1:445abc4: 			// until the uninstall is complete. There is no need to hold any 
1:445abc4: 			// other locks.
1:279dba5: 			Activator.getInstance().getLockingStrategy().writeLock();
1:b66ad7c: 			try {
1:b66ad7c: 				checkRoot();
1:b66ad7c: 				checkValid();
1:b66ad7c: 				State state = target.getState();
1:b66ad7c: 				if (EnumSet.of(State.UNINSTALLED).contains(state)) {
1:b66ad7c: 					return null;
1:b66ad7c: 				}
1:b66ad7c: 				if (state.equals(State.ACTIVE)) {
1:b66ad7c: 					new StopAction(requestor, target, disableRootCheck).run();
1:b66ad7c: 				}
1:b66ad7c: 				ResourceUninstaller.newInstance(requestor, target).uninstall();
1:b66ad7c: 			}
1:b66ad7c: 			finally {
1:b66ad7c: 				// Release the global write lock.
1:279dba5: 				Activator.getInstance().getLockingStrategy().writeUnlock();
1:b66ad7c: 			}
1:777b216: 		}
1:b66ad7c: 		finally {
1:b66ad7c: 			// Protection against re-entry no longer required.
1:279dba5: 			Activator.getInstance().getLockingStrategy().unset(State.UNINSTALLING, target);
1:b66ad7c: 		}
1:777b216: 		return null;
1:777b216: 	}
1:777b216: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:279dba5
/////////////////////////////////////////////////////////////////////////
1: 		if (!Activator.getInstance().getLockingStrategy().set(State.UNINSTALLING, target)) {
1: 			Activator.getInstance().getLockingStrategy().writeLock();
/////////////////////////////////////////////////////////////////////////
1: 				Activator.getInstance().getLockingStrategy().writeUnlock();
1: 			Activator.getInstance().getLockingStrategy().unset(State.UNINSTALLING, target);
author:John Ross
-------------------------------------------------------------------------------
commit:445abc4
/////////////////////////////////////////////////////////////////////////
1: 			// Acquire the global write lock to prevent all other operations 
1: 			// until the uninstall is complete. There is no need to hold any 
1: 			// other locks.
commit:ee4d874
/////////////////////////////////////////////////////////////////////////
0: 		if (!LockingStrategy.set(State.UNINSTALLING, target)) {
/////////////////////////////////////////////////////////////////////////
0: 			LockingStrategy.unset(State.UNINSTALLING, target);
commit:b66ad7c
/////////////////////////////////////////////////////////////////////////
1: 		// Protect against re-entry now that cycles are supported.
0: 		if (!LockingStrategy.set(State.STOPPING, target)) {
1: 		try {
0: 			// Acquire the global write lock to prevent all other operations until
0: 			// the installation is complete. There is no need to hold any other locks.
0: 			LockingStrategy.writeLock();
1: 			try {
1: 				checkRoot();
1: 				checkValid();
1: 				State state = target.getState();
1: 				if (EnumSet.of(State.UNINSTALLED).contains(state)) {
1: 					return null;
1: 				}
1: 				if (state.equals(State.ACTIVE)) {
1: 					new StopAction(requestor, target, disableRootCheck).run();
1: 				}
1: 				ResourceUninstaller.newInstance(requestor, target).uninstall();
1: 			}
1: 			finally {
1: 				// Release the global write lock.
0: 				LockingStrategy.writeUnlock();
1: 			}
1: 		finally {
1: 			// Protection against re-entry no longer required.
0: 			LockingStrategy.unset(State.STOPPING, target);
1: 		}
commit:a990e32
/////////////////////////////////////////////////////////////////////////
0: 		else if ((State.INSTALLING.equals(state) && Utils.isProvisionDependenciesInstall(target))
0: 				|| EnumSet.of(State.RESOLVING, State.STARTING, State.STOPPING, State.UNINSTALLING).contains(state)) {
commit:171067b
/////////////////////////////////////////////////////////////////////////
0: 			waitForStateChange(state);
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public UninstallAction(BasicSubsystem requestor, BasicSubsystem target, boolean disableRootCheck) {
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
0: 	public UninstallAction(AriesSubsystem requestor, AriesSubsystem target, boolean disableRootCheck) {
1: 		super(requestor, target, disableRootCheck);
0: 		State state = target.getState();
0: 			target.uninstall();
0: 			new StopAction(requestor, target, disableRootCheck).run();
0: 			target.uninstall();
0: 			ResourceUninstaller.newInstance(requestor, target).uninstall();
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 	public UninstallAction(AriesSubsystem subsystem, boolean disableRootCheck, boolean explicit) {
0: 		super(subsystem, disableRootCheck, explicit);
0: 		checkValid();
/////////////////////////////////////////////////////////////////////////
0: 			new StopAction(subsystem, disableRootCheck, explicit).run();
commit:307d743
/////////////////////////////////////////////////////////////////////////
0: 		if (EnumSet.of(State.UNINSTALLED).contains(state))
0: 		else if (EnumSet.of(State.INSTALL_FAILED, State.INSTALLING, State.RESOLVING, State.STARTING, State.STOPPING, State.UNINSTALLING).contains(state)) {
/////////////////////////////////////////////////////////////////////////
0: 			ResourceUninstaller.newInstance(subsystem, subsystem).uninstall();
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.EnumSet;
1: 
1: import org.osgi.service.subsystem.Subsystem.State;
1: 
1: public class UninstallAction extends AbstractAction {
0: 	public UninstallAction(AriesSubsystem subsystem) {
0: 		super(subsystem);
1: 	}
1: 	
1: 	@Override
1: 	public Object run() {
0: 		checkRoot();
0: 		State state = subsystem.getState();
0: 		// UNINSTALLING is included here because the transition to UNINSTALLED
0: 		// is guaranteed, so there's no point in waiting.
0: 		if (EnumSet.of(State.UNINSTALLING, State.UNINSTALLED).contains(state))
1: 			return null;
0: 		else if (EnumSet.of(State.INSTALLING, State.RESOLVING, State.STARTING, State.STOPPING).contains(state)) {
0: 			waitForStateChange();
0: 			subsystem.uninstall();
1: 		}
0: 		else if (state.equals(State.ACTIVE)) {
0: 			subsystem.stop();
0: 			subsystem.uninstall();
1: 		}
0: 		else
0: 			ResourceUninstaller.newInstance(subsystem).uninstall();
1: 		return null;
1: 	}
1: }
============================================================================