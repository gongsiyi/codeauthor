1:3c38842: /*
1:3c38842:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c38842:  * or more contributor license agreements.  See the NOTICE file
1:3c38842:  * distributed with this work for additional information
1:3c38842:  * regarding copyright ownership.  The ASF licenses this file
1:3c38842:  * to you under the Apache License, Version 2.0 (the
1:3c38842:  * "License"); you may not use this file except in compliance
1:3c38842:  * with the License.  You may obtain a copy of the License at
1:3c38842:  *
1:3c38842:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c38842:  *
1:3c38842:  * Unless required by applicable law or agreed to in writing,
1:3c38842:  * software distributed under the License is distributed on an
1:3c38842:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:3c38842:  * KIND, either express or implied.  See the License for the
1:3c38842:  * specific language governing permissions and limitations
1:3c38842:  * under the License.
1:3c38842:  */
1:3c38842: 
1:910fec0: package org.apache.aries.util.filesystem;
1:3c38842: 
1:3c38842: import java.util.List;
1:3c38842: 
1:3c38842: /**
1:43be66f:  * A virtual directory in a file system. Widely used to present a common view of regular 
1:72345ab:  * file systems, jar and zip files. 
1:3c38842:  */
1:3c38842: public interface IDirectory extends Iterable<IFile>, IFile
1:3c38842: {
1:3c38842:   /**
1:3c38842:    * @return the list of files in this directory. Files must be in this directory
1:3c38842:    *         and not in sub-directories.
1:3c38842:    */
1:3c38842:   public List<IFile> listFiles();
1:a5079e5:   
1:a5079e5:   /**
1:a5079e5:    * 
1:a5079e5:    * @return the list of files in all directories (including sub-directories). This is the complete list.
1:a5079e5:    */
1:a5079e5:   public List<IFile> listAllFiles();
1:a5079e5:   
1:3c38842:   /**
1:3c38842:    * Gets the requested file under this directory. The file may be located any
1:3c38842:    * number of levels within this directory. The name is relative to this
1:3c38842:    * directory. If the file cannot be found it will return null.
1:3c38842:    * 
1:3c38842:    * @param name the name of the file.
1:3c38842:    * @return     the IFile, or null if no such file exists.
1:3c38842:    */
1:3c38842:   public IFile getFile(String name);
1:72345ab:   
1:3c38842:   /**
1:3c38842:    * @return true if this IDirectory is the root of the virtual file system.
1:3c38842:    */
1:3c38842:   public boolean isRoot();
1:72345ab:   
1:72345ab:   /**
1:72345ab:    * Open a more effective implementation with user regulated resource management. The implementation will be 
1:72345ab:    * more efficient for batch operations. Make sure to call close when finished with the returned IDirectory. 
1:72345ab:    * 
1:72345ab:    * IFiles and IDirectories other than the returned closeable directory
1:72345ab:    * will stay valid after calling the close method but will no longer perform as efficiently. InputStreams that are
1:72345ab:    * open at the time of calling close may be invalidated.
1:72345ab:    * 
1:72345ab:    * @return {@link ICloseableDirectory} or null if a batch aware version of this {@link IDirectory} is not supported
1:72345ab:    */
1:72345ab:   public ICloseableDirectory toCloseable();
1:3c38842: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem;
commit:72345ab
/////////////////////////////////////////////////////////////////////////
1:  * file systems, jar and zip files. 
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   /**
1:    * Open a more effective implementation with user regulated resource management. The implementation will be 
1:    * more efficient for batch operations. Make sure to call close when finished with the returned IDirectory. 
1:    * 
1:    * IFiles and IDirectories other than the returned closeable directory
1:    * will stay valid after calling the close method but will no longer perform as efficiently. InputStreams that are
1:    * open at the time of calling close may be invalidated.
1:    * 
1:    * @return {@link ICloseableDirectory} or null if a batch aware version of this {@link IDirectory} is not supported
1:    */
1:   public ICloseableDirectory toCloseable();
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:a5079e5
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * 
1:    * @return the list of files in all directories (including sub-directories). This is the complete list.
1:    */
1:   public List<IFile> listAllFiles();
1:   
commit:43be66f
/////////////////////////////////////////////////////////////////////////
1:  * A virtual directory in a file system. Widely used to present a common view of regular 
0:  * file sytems, jar and zip files. 
commit:3c38842
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.filesystem;
1: 
1: import java.util.List;
1: 
1: /**
0:  * A virtual directory in a file system.
1:  */
1: public interface IDirectory extends Iterable<IFile>, IFile
1: {
1:   /**
1:    * @return the list of files in this directory. Files must be in this directory
1:    *         and not in sub-directories.
1:    */
1:   public List<IFile> listFiles();
1:   /**
1:    * Gets the requested file under this directory. The file may be located any
1:    * number of levels within this directory. The name is relative to this
1:    * directory. If the file cannot be found it will return null.
1:    * 
1:    * @param name the name of the file.
1:    * @return     the IFile, or null if no such file exists.
1:    */
1:   public IFile getFile(String name);
1:   /**
1:    * @return true if this IDirectory is the root of the virtual file system.
1:    */
1:   public boolean isRoot();
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.filesystem;
0: 
0: import java.util.List;
0: 
0: /**
0:  * A virtual directory in a file system.
0:  */
0: public interface IDirectory extends Iterable<IFile>, IFile
0: {
0:   /**
0:    * @return the list of files in this directory. Files must be in this directory
0:    *         and not in sub-directories.
0:    */
0:   public List<IFile> listFiles();
0:   /**
0:    * Gets the requested file under this directory. The file may be located any
0:    * number of levels within this directory. The name is relative to this
0:    * directory. If the file cannot be found it will return null.
0:    * 
0:    * @param name the name of the file.
0:    * @return     the IFile, or null if no such file exists.
0:    */
0:   public IFile getFile(String name);
0:   /**
0:    * @return true if this IDirectory is the root of the virtual file system.
0:    */
0:   public boolean isRoot();
============================================================================