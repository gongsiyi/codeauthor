1:4134a37: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:4134a37:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
10:0d78661: 
1:92d0499: import java.io.IOException;
1:92d0499: import java.io.InputStream;
1:0d78661: import java.net.MalformedURLException;
1:0d78661: import java.net.URL;
1:0d78661: import java.util.ArrayList;
1:92d0499: import java.util.Iterator;
1:0d78661: import java.util.List;
1:0d78661: 
1:0d78661: import org.apache.aries.application.modelling.ModellerException;
1:0d78661: import org.apache.aries.ejb.modelling.EJBLocator;
1:0d78661: import org.apache.aries.ejb.modelling.EJBRegistry;
1:92d0499: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:0d78661: import org.apache.aries.util.filesystem.IDirectory;
1:0d78661: import org.apache.aries.util.filesystem.IFile;
1:0d78661: import org.apache.aries.util.manifest.BundleManifest;
1:0d78661: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:0d78661: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1:0d78661: import org.apache.openejb.config.AnnotationDeployer;
1:0d78661: import org.apache.openejb.config.AppModule;
1:0d78661: import org.apache.openejb.config.EjbModule;
1:0d78661: import org.apache.openejb.config.ReadDescriptors;
1:0d78661: import org.apache.openejb.jee.EjbJar;
1:0d78661: import org.apache.openejb.jee.EnterpriseBean;
1:0d78661: import org.apache.openejb.jee.SessionBean;
1:0d78661: import org.osgi.framework.Constants;
1:0d78661: import org.slf4j.Logger;
1:0d78661: import org.slf4j.LoggerFactory;
1:0d78661: 
1:4134a37: /**
1:4134a37:  * An {@link EJBLocator} that uses OpenEJB to find EJBs
1:4134a37:  *
1:4134a37:  */
1:0d78661: public class OpenEJBLocator implements EJBLocator {
1:0d78661: 
1:0d78661:   private static final Logger logger = LoggerFactory.getLogger(OpenEJBLocator.class);
1:0d78661: 
1:92d0499:   public class ClasspathIDirectory implements IDirectory {
1:92d0499: 
1:92d0499:     private final IDirectory parent;
1:92d0499:     private final String entry;
1:0d78661:     
1:92d0499:     public ClasspathIDirectory(IDirectory parent, String name) {
1:92d0499:       this.parent = parent;
1:92d0499:       this.entry = (name.endsWith("/")) ? name : name + "/";
1:92d0499:     }
1:92d0499: 
1:92d0499:     public IDirectory convert() {
1:92d0499:       return parent.convert();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public IDirectory convertNested() {
1:92d0499:       return parent.convertNested();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public IFile getFile(String arg0) {
1:92d0499:       return parent.getFile(entry + arg0);
1:92d0499:     }
1:92d0499: 
1:92d0499:     public long getLastModified() {
1:92d0499:       return parent.getLastModified();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public String getName() {
1:92d0499:       return parent.getName() + entry;
1:92d0499:     }
1:92d0499: 
1:92d0499:     public IDirectory getParent() {
1:92d0499:       return parent.getParent();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public IDirectory getRoot() {
1:92d0499:       return parent.getRoot();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public long getSize() {
1:92d0499:       return parent.getSize();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public boolean isDirectory() {
1:92d0499:       return parent.isDirectory();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public boolean isFile() {
1:92d0499:       return parent.isFile();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public boolean isRoot() {
1:92d0499:       return parent.isRoot();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public Iterator<IFile> iterator() {
1:92d0499:       return parent.iterator();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public List<IFile> listAllFiles() {
1:92d0499:       List<IFile> files = new ArrayList<IFile>();
1:92d0499:       for(IFile f : parent.listAllFiles()) {
1:92d0499:         if(f.getName().startsWith(entry))
1:92d0499:           files.add(f);
6:0d78661:       }
1:92d0499:       return files;
1:92d0499:     }
1:92d0499: 
1:92d0499:     public List<IFile> listFiles() {
1:92d0499:       List<IFile> files = new ArrayList<IFile>();
1:92d0499:       for(IFile f : parent.listFiles()) {
1:92d0499:         if(f.getName().startsWith(entry))
1:92d0499:           files.add(f);
1:92d0499:       }
1:92d0499:       return files;
1:92d0499:     }
1:92d0499: 
1:92d0499:     public InputStream open() throws IOException, UnsupportedOperationException {
1:92d0499:       return parent.open();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public ICloseableDirectory toCloseable() {
1:92d0499:       return parent.toCloseable();
1:92d0499:     }
1:92d0499: 
1:92d0499:     public URL toURL() throws MalformedURLException {
1:92d0499:       return parent.toURL();
1:0d78661:     }
1:0d78661:   }
1:0d78661: 
1:0d78661:   public void findEJBs(BundleManifest manifest, IDirectory bundle,
1:0d78661:       EJBRegistry registry) throws ModellerException {
1:0d78661: 
1:92d0499:     logger.debug("Scanning " + manifest.getSymbolicName() + "_" + manifest.getManifestVersion() +
1:92d0499:         " for EJBs");
1:92d0499:     
1:5e2bb18:     String ejbJarLocation = (manifest.getRawAttributes().getValue(
1:5e2bb18:         "Web-ContextPath") == null) ? "META-INF/ejb-jar.xml" : "WEB-INF/ejb-jar.xml";
1:5e2bb18:     
2:0d78661:     try {
1:4134a37:       //If we have an ejb-jar.xml then parse it 
1:5e2bb18:       IFile file = bundle.getFile(ejbJarLocation);
1:0d78661:       EjbJar ejbJar = (file == null) ? new EjbJar() : ReadDescriptors.readEjbJar(file.toURL());
1:0d78661:       
1:0d78661:       EjbModule module = new EjbModule(ejbJar);
1:0d78661:       
1:4134a37:       //We build our own because we can't trust anyone to get the classpath right otherwise!
1:92d0499:       module.setFinder(new IDirectoryFinder(AnnotationDeployer.class.getClassLoader(), 
1:92d0499:           getClassPathLocations(manifest, bundle)));
1:0d78661:       
1:4134a37:       //Scan our app for annotated EJBs
1:0d78661:       AppModule app = new AppModule(module);
1:0d78661:       new AnnotationDeployer().deploy(app);
1:0d78661:       
1:4134a37:       //Register our session beans
1:0d78661:       for(EnterpriseBean eb : ejbJar.getEnterpriseBeans()) {
1:0d78661:         
1:0d78661:         if(!!!(eb instanceof SessionBean))
2:0d78661:           continue;
1:0d78661:         else
1:0d78661:           registerSessionBean(registry, (SessionBean) eb);
1:0d78661:       }
1:0d78661:       
1:0d78661:     } catch (Exception e) {
1:0d78661:       throw new ModellerException(e);
1:0d78661:     }
1:0d78661:   }
1:4134a37:   
1:4134a37:   /**
1:4134a37:    * Find the classpath entries for our bundle
1:4134a37:    * 
1:4134a37:    * @param manifest
1:4134a37:    * @param bundle
1:4134a37:    * @return
1:4134a37:    */
1:0d78661:   private List<IDirectory> getClassPathLocations(BundleManifest manifest,
1:0d78661:       IDirectory bundle) {
1:0d78661:     List<IDirectory> result = new ArrayList<IDirectory>();
1:0d78661:     
1:0d78661:     String rawCp = manifest.getRawAttributes().getValue(Constants.BUNDLE_CLASSPATH);
1:0d78661:     
1:92d0499:     logger.debug("Classpath is " + rawCp);
1:92d0499:     
1:0d78661:     if(rawCp == null || rawCp.trim() == "")
1:0d78661:       result.add(bundle);
1:0d78661:     else {
1:0d78661:       List<NameValuePair> splitCp = ManifestHeaderProcessor.parseExportString(rawCp);
1:0d78661:       
1:92d0499:       List<IFile> allFiles = null;
1:92d0499:       
1:0d78661:       for(NameValuePair nvp : splitCp) {
1:0d78661:         String name = nvp.getName().trim();
1:92d0499:         if(".".equals(name)) {
1:0d78661:           result.add(bundle);
1:92d0499:         }
1:0d78661:         else {
1:0d78661:           IFile f = bundle.getFile(name);
1:0d78661:           
1:92d0499:           if(f==null) {
1:92d0499:             //This possibly just means no directory entries in a
1:92d0499:             //Zip. Check to make sure
1:92d0499:             if(allFiles == null)
1:92d0499:               allFiles = bundle.listAllFiles();
1:92d0499:             
1:92d0499:             for(IFile file : allFiles) {
1:92d0499:               if(file.getName().startsWith(name)) {
1:92d0499:                  result.add(new ClasspathIDirectory(bundle, name));
1:92d0499:                  break;
1:92d0499:               }
1:92d0499:             }
1:92d0499:             
1:92d0499:           } else {
1:92d0499:             IDirectory converted = f.convertNested();
1:92d0499:             if(converted != null)
1:92d0499:               result.add(converted);
1:92d0499:           }
1:0d78661:         }
1:0d78661:       }
1:0d78661:     }
2:0d78661:     return result;
1:0d78661:   }
1:0d78661: 
1:4134a37:   /**
1:4134a37:    * Register a located session bean with the {@link EJBRegistry}
1:4134a37:    * @param registry
1:4134a37:    * @param sb
1:4134a37:    */
1:0d78661:   private void registerSessionBean(EJBRegistry registry, SessionBean sb) {
1:0d78661:     
1:0d78661:     String name = sb.getEjbName();
1:0d78661:     String type = sb.getSessionType().toString();
1:0d78661:     
1:92d0499:     logger.debug("Found EJB " + name + " of type " + type);
1:92d0499:     
1:0d78661:     boolean added = false;
1:0d78661:     
1:0d78661:     for(String iface : sb.getBusinessLocal()) {
1:0d78661:       added = true;
1:0d78661:       registry.addEJBView(name, type, iface, false);
1:0d78661:     }
1:0d78661:     
1:0d78661:     for(String iface : sb.getBusinessRemote()) {
1:0d78661:       added = true;
1:0d78661:       registry.addEJBView(name, type, iface, true);
1:0d78661:     }
1:0d78661:     
1:0d78661:     if(sb.getLocal() != null) {
1:0d78661:       added = true;
1:0d78661:       registry.addEJBView(name, type, sb.getLocal(), false);
1:0d78661:     }
1:0d78661:     
1:0d78661:     if(sb.getLocalHome() != null) {
1:0d78661:       added = true;
1:0d78661:       registry.addEJBView(name, type, sb.getLocalHome(), false);
1:0d78661:     }
1:0d78661:       
1:0d78661:     if(sb.getRemote() != null) {
1:0d78661:       added = true;
1:0d78661:       registry.addEJBView(name, type, sb.getRemote(), true);
1:0d78661:     }
1:0d78661:     
1:0d78661:     if(sb.getHome() != null) {
1:0d78661:       added = true;
1:0d78661:       registry.addEJBView(name, type, sb.getHome(), true);
1:0d78661:     }
1:0d78661:     //If not added elsewhere then we have a no-interface view
1:0d78661:     if(!!!added) {
1:0d78661:       registry.addEJBView(name, type, sb.getEjbClass(), false);
1:92d0499:     }
1:0d78661:   }
1:0d78661: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:92d0499
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Iterator;
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
/////////////////////////////////////////////////////////////////////////
1:   public class ClasspathIDirectory implements IDirectory {
1: 
1:     private final IDirectory parent;
1:     private final String entry;
1:     public ClasspathIDirectory(IDirectory parent, String name) {
1:       this.parent = parent;
1:       this.entry = (name.endsWith("/")) ? name : name + "/";
1:     }
1: 
1:     public IDirectory convert() {
1:       return parent.convert();
1:     }
1: 
1:     public IDirectory convertNested() {
1:       return parent.convertNested();
1:     }
1: 
1:     public IFile getFile(String arg0) {
1:       return parent.getFile(entry + arg0);
1:     }
1: 
1:     public long getLastModified() {
1:       return parent.getLastModified();
1:     }
1: 
1:     public String getName() {
1:       return parent.getName() + entry;
1:     }
1: 
1:     public IDirectory getParent() {
1:       return parent.getParent();
1:     }
1: 
1:     public IDirectory getRoot() {
1:       return parent.getRoot();
1:     }
1: 
1:     public long getSize() {
1:       return parent.getSize();
1:     }
1: 
1:     public boolean isDirectory() {
1:       return parent.isDirectory();
1:     }
1: 
1:     public boolean isFile() {
1:       return parent.isFile();
1:     }
1: 
1:     public boolean isRoot() {
1:       return parent.isRoot();
1:     }
1: 
1:     public Iterator<IFile> iterator() {
1:       return parent.iterator();
1:     }
1: 
1:     public List<IFile> listAllFiles() {
1:       List<IFile> files = new ArrayList<IFile>();
1:       for(IFile f : parent.listAllFiles()) {
1:         if(f.getName().startsWith(entry))
1:           files.add(f);
1:       return files;
1:     }
1: 
1:     public List<IFile> listFiles() {
1:       List<IFile> files = new ArrayList<IFile>();
1:       for(IFile f : parent.listFiles()) {
1:         if(f.getName().startsWith(entry))
1:           files.add(f);
1:       }
1:       return files;
1:     }
1: 
1:     public InputStream open() throws IOException, UnsupportedOperationException {
1:       return parent.open();
1:     }
1: 
1:     public ICloseableDirectory toCloseable() {
1:       return parent.toCloseable();
1:     }
1: 
1:     public URL toURL() throws MalformedURLException {
1:       return parent.toURL();
1:     logger.debug("Scanning " + manifest.getSymbolicName() + "_" + manifest.getManifestVersion() +
1:         " for EJBs");
1:     
/////////////////////////////////////////////////////////////////////////
1:       module.setFinder(new IDirectoryFinder(AnnotationDeployer.class.getClassLoader(), 
1:           getClassPathLocations(manifest, bundle)));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     logger.debug("Classpath is " + rawCp);
1:     
1:       List<IFile> allFiles = null;
1:       
1:         if(".".equals(name)) {
1:         }
1:           if(f==null) {
1:             //This possibly just means no directory entries in a
1:             //Zip. Check to make sure
1:             if(allFiles == null)
1:               allFiles = bundle.listAllFiles();
1:             
1:             for(IFile file : allFiles) {
1:               if(file.getName().startsWith(name)) {
1:                  result.add(new ClasspathIDirectory(bundle, name));
1:                  break;
1:               }
1:             }
1:             
1:           } else {
1:             IDirectory converted = f.convertNested();
1:             if(converted != null)
1:               result.add(converted);
1:           }
/////////////////////////////////////////////////////////////////////////
1:     logger.debug("Found EJB " + name + " of type " + type);
1:     
/////////////////////////////////////////////////////////////////////////
1: }
commit:5e2bb18
/////////////////////////////////////////////////////////////////////////
1:     String ejbJarLocation = (manifest.getRawAttributes().getValue(
1:         "Web-ContextPath") == null) ? "META-INF/ejb-jar.xml" : "WEB-INF/ejb-jar.xml";
1:     
1:       IFile file = bundle.getFile(ejbJarLocation);
commit:4134a37
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * An {@link EJBLocator} that uses OpenEJB to find EJBs
0:  * @author Tim
1:  *
1:  */
1:   /**
0:    * A ClassLoader used by OpenEJB in annotation scanning
1:    */
/////////////////////////////////////////////////////////////////////////
1:       //If we have an ejb-jar.xml then parse it 
0:       //Find our classpath so we can scan the module
1:       //We build our own because we can't trust anyone to get the classpath right otherwise!
1:       //Scan our app for annotated EJBs
1:       //Register our session beans
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
0:    * Get URLs for creating a {@link ClassFinder}
0:    * @param cpEntries
1:    * @return
0:    * @throws MalformedURLException
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Find the classpath entries for our bundle
1:    * 
1:    * @param manifest
1:    * @param bundle
0:    * @return
1:    */
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * Register a located session bean with the {@link EJBRegistry}
1:    * @param registry
1:    * @param sb
0:    */
commit:0d78661
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
0:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.ejb.modelling.EJBLocator;
1: import org.apache.aries.ejb.modelling.EJBRegistry;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1: import org.apache.openejb.config.AnnotationDeployer;
1: import org.apache.openejb.config.AppModule;
1: import org.apache.openejb.config.EjbModule;
1: import org.apache.openejb.config.ReadDescriptors;
1: import org.apache.openejb.jee.EjbJar;
1: import org.apache.openejb.jee.EnterpriseBean;
1: import org.apache.openejb.jee.SessionBean;
0: import org.apache.openejb.jee.SessionType;
0: import org.apache.xbean.finder.ClassFinder;
1: import org.osgi.framework.Constants;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class OpenEJBLocator implements EJBLocator {
1: 
1:   private static final Logger logger = LoggerFactory.getLogger(OpenEJBLocator.class);
1:   
0:   public static class ResourceClassLoader extends ClassLoader {
1: 
0:     private final List<IDirectory> classpath;
0:     public ResourceClassLoader(List<IDirectory> cpEntries) {
0:       classpath = cpEntries;
1:     }
1:     
0:     @Override
0:     protected URL findResource(String resName) {
0:       for(IDirectory id : classpath) {
0:         IFile f = id.getFile(resName);
0:         if(f != null)
1:           try {
0:             return f.toURL();
0:           } catch (MalformedURLException e) {
0:             logger.error("Error getting URL for file " + f, e);
1:           }
1:       }
0:       return null;
1:     }
1:   }
1: 
1:   public void findEJBs(BundleManifest manifest, IDirectory bundle,
1:       EJBRegistry registry) throws ModellerException {
1: 
1:     try {
0:       IFile file = bundle.getFile("META-INF/ejb-jar.xml");
1:       EjbJar ejbJar = (file == null) ? new EjbJar() : ReadDescriptors.readEjbJar(file.toURL());
1:       
1:       EjbModule module = new EjbModule(ejbJar);
1:       
0:       List<IDirectory> cpEntries = getClassPathLocations(manifest, bundle);
1:       
0:       ClassLoader cl = new ResourceClassLoader(cpEntries);
0:       module.setClassLoader(cl);
1:       
0:       //This may become AnnotationFinder at some point in the future. We build our
0:       //own because we can't trust anyone to get the classpath right otherwise!
0:       module.setFinder(new ClassFinder(cl, getClassPathURLs(cpEntries)));
1:       
1:       AppModule app = new AppModule(module);
1:       
1:       new AnnotationDeployer().deploy(app);
1:       
1:       for(EnterpriseBean eb : ejbJar.getEnterpriseBeans()) {
1:         
1:         if(!!!(eb instanceof SessionBean))
1:           continue;
1:         else
1:           registerSessionBean(registry, (SessionBean) eb);
1:       }
1:       
1:     } catch (Exception e) {
1:       throw new ModellerException(e);
1:     }
1:   }
1: 
0:   private List<URL> getClassPathURLs(List<IDirectory> cpEntries) throws MalformedURLException {
0:     List<URL> result = new ArrayList<URL>();
1:     
0:     for(IDirectory id : cpEntries) {
0:       result.add(id.toURL());
1:     }
1:     return result;
1:   }
1: 
1:   private List<IDirectory> getClassPathLocations(BundleManifest manifest,
1:       IDirectory bundle) {
1:     List<IDirectory> result = new ArrayList<IDirectory>();
1:     
1:     String rawCp = manifest.getRawAttributes().getValue(Constants.BUNDLE_CLASSPATH);
1:     
1:     if(rawCp == null || rawCp.trim() == "")
1:       result.add(bundle);
1:     else {
1:       List<NameValuePair> splitCp = ManifestHeaderProcessor.parseExportString(rawCp);
1:       
1:       for(NameValuePair nvp : splitCp) {
1:         String name = nvp.getName().trim();
0:         if(".".equals(name))
1:           result.add(bundle);
1:         else {
1:           IFile f = bundle.getFile(name);
1:           
0:           if(f==null)
1:             continue;
1:           
0:           IDirectory converted = f.convertNested();
0:           if(converted != null)
0:             result.add(converted);
1:         }
1:       }
1:     }
1:     return result;
1:   }
1: 
1:   private void registerSessionBean(EJBRegistry registry, SessionBean sb) {
1:     
1:     String name = sb.getEjbName();
1:     String type = sb.getSessionType().toString();
1:     
0:     if(sb.getSessionType() == SessionType.STATEFUL)
0:       return;
1:     
1:     boolean added = false;
1:     
1:     for(String iface : sb.getBusinessLocal()) {
1:       added = true;
1:       registry.addEJBView(name, type, iface, false);
1:     }
1:     
1:     for(String iface : sb.getBusinessRemote()) {
1:       added = true;
1:       registry.addEJBView(name, type, iface, true);
1:     }
1:     
1:     if(sb.getLocal() != null) {
1:       added = true;
1:       registry.addEJBView(name, type, sb.getLocal(), false);
1:     }
1:     
1:     if(sb.getLocalHome() != null) {
1:       added = true;
1:       registry.addEJBView(name, type, sb.getLocalHome(), false);
1:     }
1:       
1:     if(sb.getRemote() != null) {
1:       added = true;
1:       registry.addEJBView(name, type, sb.getRemote(), true);
1:     }
1:     
1:     if(sb.getHome() != null) {
1:       added = true;
1:       registry.addEJBView(name, type, sb.getHome(), true);
1:     }
1:     //If not added elsewhere then we have a no-interface view
1:     if(!!!added) {
1:       registry.addEJBView(name, type, sb.getEjbClass(), false);
1:     }
1:   }
1: }
============================================================================