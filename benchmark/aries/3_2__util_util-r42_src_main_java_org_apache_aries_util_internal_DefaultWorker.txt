1:76e1d79: /*
1:76e1d79:  * Licensed to the Apache Software Foundation (ASF) under one
1:76e1d79:  * or more contributor license agreements.  See the NOTICE file
1:76e1d79:  * distributed with this work for additional information
1:76e1d79:  * regarding copyright ownership.  The ASF licenses this file
1:76e1d79:  * to you under the Apache License, Version 2.0 (the
1:76e1d79:  * "License"); you may not use this file except in compliance
1:76e1d79:  * with the License.  You may obtain a copy of the License at
1:76e1d79:  *
1:76e1d79:  *   http://www.apache.org/licenses/LICENSE-2.0
1:76e1d79:  *
1:76e1d79:  * Unless required by applicable law or agreed to in writing,
1:76e1d79:  * software distributed under the License is distributed on an
1:76e1d79:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:76e1d79:  * KIND, either express or implied.  See the License for the
1:76e1d79:  * specific language governing permissions and limitations
1:76e1d79:  * under the License.
1:76e1d79:  */
1:76e1d79: package org.apache.aries.util.internal;
4:76e1d79: 
1:76e1d79: import java.security.AccessController;
1:76e1d79: import java.security.PrivilegedAction;
1:76e1d79: import java.util.IdentityHashMap;
1:76e1d79: import java.util.Map;
1:0b7a5ab: 
1:76e1d79: import org.osgi.framework.Bundle;
1:76e1d79: import org.osgi.framework.BundleContext;
1:76e1d79: import org.osgi.framework.BundleEvent;
1:76e1d79: import org.osgi.framework.BundleListener;
1:76e1d79: import org.osgi.framework.Constants;
1:76e1d79: import org.osgi.framework.FrameworkEvent;
1:76e1d79: import org.osgi.framework.FrameworkListener;
1:76e1d79: import org.osgi.framework.FrameworkUtil;
1:76e1d79: 
1:76e1d79: public class DefaultWorker implements FrameworkUtilWorker, BundleListener, FrameworkListener
1:76e1d79: {
1:76e1d79:   private Map<Bundle, ClassLoader> classLoaders = new IdentityHashMap<Bundle, ClassLoader>();
1:2bb7ce1:   private static final Bundle myFrameworkBundle;
1:76e1d79: 
1:2bb7ce1:   static
1:2bb7ce1:   {
1:6df3ad3:     Bundle bundle = FrameworkUtil.getBundle(DefaultWorker.class);
1:6df3ad3:     BundleContext myContext = bundle == null? null: bundle.getBundleContext();
1:2bb7ce1:     
1:2bb7ce1:     // This may be created during framework shutdown when the bundle context is null.
1:2bb7ce1:     // So we need to cope and not NPE during construction.
1:2bb7ce1:     if (myContext != null) {
1:2bb7ce1:       myFrameworkBundle = myContext.getBundle(0);
1:2bb7ce1:     } else {
1:2bb7ce1:       myFrameworkBundle = null;
1:2bb7ce1:     }
1:2bb7ce1:   }
1:2bb7ce1:   
1:2bb7ce1:   
1:76e1d79:   public ClassLoader getClassLoader(final Bundle b) 
1:76e1d79:   {
1:76e1d79:     ClassLoader cl = get(b);
1:81d8073:     
1:76e1d79:     if (cl != null) return cl;
1:6df3ad3: 
1:76e1d79:     // so first off try to get the real classloader. We can do this by loading a known class
1:76e1d79:     // such as the bundle activator. There is no guarantee this will work, so we have a back door too.
1:76e1d79:     String activator = (String) b.getHeaders().get(Constants.BUNDLE_ACTIVATOR);
1:76e1d79:     if (activator != null) {
1:76e1d79:       try {
1:76e1d79:         Class<?> clazz = b.loadClass(activator);
1:76e1d79:         // so we have the class, but it could have been imported, so we make sure the two bundles
1:76e1d79:         // are the same. A reference check should work here because there will be one.
1:76e1d79:         Bundle activatorBundle = FrameworkUtil.getBundle(clazz);
1:76e1d79:         if (activatorBundle == b) {
1:76e1d79:           cl = clazz.getClassLoader();
1:76e1d79:         }
1:76e1d79:       } catch (ClassNotFoundException e) {
1:76e1d79:       }
1:76e1d79:     }
1:76e1d79:     
1:76e1d79:     if (cl == null) {
1:76e1d79:       // ok so we haven't found a class loader yet, so we need to create a wapper class loader
1:76e1d79:       cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:76e1d79:         public ClassLoader run() {
1:76e1d79:           return new BundleToClassLoaderAdapter(b);
1:76e1d79:         }
1:76e1d79:       });
1:76e1d79:     }
1:76e1d79:     
1:76e1d79:     if (cl != null) {
1:76e1d79:       setupListener(b);
1:76e1d79:       cl = put(b, cl);
1:76e1d79:     }
1:76e1d79:     
1:76e1d79:     return cl;
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   private void setupListener(Bundle b) 
1:76e1d79:   {
1:76e1d79:     // So we need to cope with multiple equinox frameworks, so we can't just listen to our
1:76e1d79:     // BundleContext. Instead we add a listener to Bundle 0 of the framework bundle associated
1:76e1d79:     // with the bundle passed in.
1:76e1d79:     BundleContext ctx = b.getBundleContext().getBundle(0).getBundleContext();
1:76e1d79:     ctx.addBundleListener(this);
1:76e1d79:     ctx.addFrameworkListener(this);
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   private synchronized ClassLoader put(Bundle b, ClassLoader cl) 
1:76e1d79:   {
1:76e1d79:     // If the bundle is uninstalled or installed then there is no classloader so we should
1:76e1d79:     // just return null. This is a last second sanity check to avoid memory leaks that could
1:76e1d79:     // occur if a bundle is uninstalled or unresolved while someone is calling getClassLoader
1:76e1d79:     if (b.getState() == Bundle.UNINSTALLED || b.getState() == Bundle.INSTALLED) return null;
1:76e1d79:     
1:76e1d79:     ClassLoader previous = classLoaders.put(b, cl);
1:76e1d79:     // OK, so we could cause a replace to occur here, so we want to check to
1:76e1d79:     // see if previous is not null. If it is not null we need to do a replace
1:76e1d79:     // and return the previous classloader. This ensures we have one classloader
1:76e1d79:     // in use for a bundle.
1:76e1d79:     if (previous != null) {
1:76e1d79:       cl = previous;
1:76e1d79:       classLoaders.put(b, cl);
1:76e1d79:     }
1:76e1d79:     
1:76e1d79:     return cl;
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   private synchronized ClassLoader get(Bundle b) 
1:76e1d79:   {
1:76e1d79:     return classLoaders.get(b);
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   private synchronized void remove(Bundle bundle) 
1:76e1d79:   {
1:76e1d79:     classLoaders.remove(bundle);
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   public boolean isValid()
1:76e1d79:   {
1:76e1d79:     return true;
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   public void bundleChanged(BundleEvent event) 
1:76e1d79:   {
1:76e1d79:     if (event.getType() == BundleEvent.UNINSTALLED || event.getType() == BundleEvent.UNRESOLVED) {
1:76e1d79:       Bundle b = event.getBundle();
1:76e1d79:       
1:76e1d79:       remove(b);
1:76e1d79:       
1:76e1d79:       if (b.getBundleId() == 0) {
1:76e1d79:         clearBundles(b);
1:76e1d79:       }
1:76e1d79:     }
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   private void clearBundles(Bundle b) {
1:76e1d79:     // we have been told about the system bundle, so we need to clear up any state for this framework.
1:76e1d79:     BundleContext ctx = b.getBundleContext();
1:76e1d79:     ctx.removeBundleListener(this);
1:76e1d79:     Bundle[] bundles = ctx.getBundles();
1:76e1d79:     for (Bundle bundle : bundles) {
1:76e1d79:       remove(bundle);
1:76e1d79:     }
1:76e1d79:   }
1:76e1d79: 
1:76e1d79:   public void frameworkEvent(FrameworkEvent event) 
1:76e1d79:   {
1:76e1d79:     if (event.getType() == FrameworkEvent.STOPPED) {
1:76e1d79:       Bundle b = event.getBundle();
1:76e1d79:       if (b == myFrameworkBundle) {
1:76e1d79:         classLoaders.clear();
1:76e1d79:       } else if (b != null) {
1:76e1d79:         clearBundles(b);
1:76e1d79:       }
1:76e1d79:       
1:76e1d79:       b.getBundleContext().removeFrameworkListener(this);
1:76e1d79:     }
1:76e1d79:   }
1:76e1d79: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
/////////////////////////////////////////////////////////////////////////
1:     Bundle bundle = FrameworkUtil.getBundle(DefaultWorker.class);
1:     BundleContext myContext = bundle == null? null: bundle.getBundleContext();
/////////////////////////////////////////////////////////////////////////
1: 
commit:81d8073
/////////////////////////////////////////////////////////////////////////
0:     BundleContext myContext = FrameworkUtil.getBundle(DefaultWorker.class).getBundleContext();
/////////////////////////////////////////////////////////////////////////
1:     
commit:0b7a5ab
/////////////////////////////////////////////////////////////////////////
0:     Bundle bundle = FrameworkUtil.getBundle(DefaultWorker.class);
0:     BundleContext myContext = bundle == null? null: bundle.getBundleContext();
/////////////////////////////////////////////////////////////////////////
1: 
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:b6c4135
/////////////////////////////////////////////////////////////////////////
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:2bb7ce1
/////////////////////////////////////////////////////////////////////////
1:   private static final Bundle myFrameworkBundle;
1:   static
1:   {
0:     BundleContext myContext = FrameworkUtil.getBundle(DefaultWorker.class).getBundleContext();
1:     
1:     // This may be created during framework shutdown when the bundle context is null.
1:     // So we need to cope and not NPE during construction.
1:     if (myContext != null) {
1:       myFrameworkBundle = myContext.getBundle(0);
1:     } else {
1:       myFrameworkBundle = null;
1:     }
1:   }
1:   
1:   
commit:76e1d79
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util.internal;
1: 
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.util.IdentityHashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.util.BundleToClassLoaderAdapter;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.BundleListener;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.FrameworkEvent;
1: import org.osgi.framework.FrameworkListener;
1: import org.osgi.framework.FrameworkUtil;
1: 
1: public class DefaultWorker implements FrameworkUtilWorker, BundleListener, FrameworkListener
1: {
1:   private Map<Bundle, ClassLoader> classLoaders = new IdentityHashMap<Bundle, ClassLoader>();
0:   private static final Bundle myFrameworkBundle = FrameworkUtil.getBundle(DefaultWorker.class).getBundleContext().getBundle(0);
1: 
1:   public ClassLoader getClassLoader(final Bundle b) 
1:   {
1:     ClassLoader cl = get(b);
1:     
1:     if (cl != null) return cl;
1:     
1:     // so first off try to get the real classloader. We can do this by loading a known class
1:     // such as the bundle activator. There is no guarantee this will work, so we have a back door too.
1:     String activator = (String) b.getHeaders().get(Constants.BUNDLE_ACTIVATOR);
1:     if (activator != null) {
1:       try {
1:         Class<?> clazz = b.loadClass(activator);
1:         // so we have the class, but it could have been imported, so we make sure the two bundles
1:         // are the same. A reference check should work here because there will be one.
1:         Bundle activatorBundle = FrameworkUtil.getBundle(clazz);
1:         if (activatorBundle == b) {
1:           cl = clazz.getClassLoader();
1:         }
1:       } catch (ClassNotFoundException e) {
1:       }
1:     }
1:     
1:     if (cl == null) {
1:       // ok so we haven't found a class loader yet, so we need to create a wapper class loader
1:       cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:         public ClassLoader run() {
1:           return new BundleToClassLoaderAdapter(b);
1:         }
1:       });
1:     }
1:     
1:     if (cl != null) {
1:       setupListener(b);
1:       cl = put(b, cl);
1:     }
1:     
1:     return cl;
1:   }
1: 
1:   private void setupListener(Bundle b) 
1:   {
1:     // So we need to cope with multiple equinox frameworks, so we can't just listen to our
1:     // BundleContext. Instead we add a listener to Bundle 0 of the framework bundle associated
1:     // with the bundle passed in.
1:     BundleContext ctx = b.getBundleContext().getBundle(0).getBundleContext();
1:     ctx.addBundleListener(this);
1:     ctx.addFrameworkListener(this);
1:   }
1: 
1:   private synchronized ClassLoader put(Bundle b, ClassLoader cl) 
1:   {
1:     // If the bundle is uninstalled or installed then there is no classloader so we should
1:     // just return null. This is a last second sanity check to avoid memory leaks that could
1:     // occur if a bundle is uninstalled or unresolved while someone is calling getClassLoader
1:     if (b.getState() == Bundle.UNINSTALLED || b.getState() == Bundle.INSTALLED) return null;
1:     
1:     ClassLoader previous = classLoaders.put(b, cl);
1:     // OK, so we could cause a replace to occur here, so we want to check to
1:     // see if previous is not null. If it is not null we need to do a replace
1:     // and return the previous classloader. This ensures we have one classloader
1:     // in use for a bundle.
1:     if (previous != null) {
1:       cl = previous;
1:       classLoaders.put(b, cl);
1:     }
1:     
1:     return cl;
1:   }
1: 
1:   private synchronized ClassLoader get(Bundle b) 
1:   {
1:     return classLoaders.get(b);
1:   }
1: 
1:   private synchronized void remove(Bundle bundle) 
1:   {
1:     classLoaders.remove(bundle);
1:   }
1: 
1:   public boolean isValid()
1:   {
1:     return true;
1:   }
1: 
1:   public void bundleChanged(BundleEvent event) 
1:   {
1:     if (event.getType() == BundleEvent.UNINSTALLED || event.getType() == BundleEvent.UNRESOLVED) {
1:       Bundle b = event.getBundle();
1:       
1:       remove(b);
1:       
1:       if (b.getBundleId() == 0) {
1:         clearBundles(b);
1:       }
1:     }
1:   }
1: 
1:   private void clearBundles(Bundle b) {
1:     // we have been told about the system bundle, so we need to clear up any state for this framework.
1:     BundleContext ctx = b.getBundleContext();
1:     ctx.removeBundleListener(this);
1:     Bundle[] bundles = ctx.getBundles();
1:     for (Bundle bundle : bundles) {
1:       remove(bundle);
1:     }
1:   }
1: 
1:   public void frameworkEvent(FrameworkEvent event) 
1:   {
1:     if (event.getType() == FrameworkEvent.STOPPED) {
1:       Bundle b = event.getBundle();
1:       if (b == myFrameworkBundle) {
1:         classLoaders.clear();
1:       } else if (b != null) {
1:         clearBundles(b);
1:       }
1:       
1:       b.getBundleContext().removeFrameworkListener(this);
1:     }
1:   }
1: }
============================================================================