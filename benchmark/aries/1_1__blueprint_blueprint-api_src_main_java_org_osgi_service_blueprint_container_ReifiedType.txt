1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.container;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Provides access to a concrete type and its optional generic type parameters.
1:f13c6ac:  * 
1:f13c6ac:  * <p>
1:f13c6ac:  * Java 5 and later support generic types. These types consist of a raw class
1:f13c6ac:  * with type parameters. This class models such a <code>Type</code> class but
1:f13c6ac:  * ensures that the type is <em>reified</em>. Reification means that the Type
1:f13c6ac:  * graph associated with a Java 5 <code>Type</code> instance is traversed until
1:f13c6ac:  * the type becomes a concrete class. This class is available with the
1:f13c6ac:  * {@link #getRawClass()} method. The optional type parameters are recursively
1:f13c6ac:  * represented as Reified Types.
1:f13c6ac:  * 
1:f13c6ac:  * <p>
1:f13c6ac:  * In Java 1.4, a class has by definition no type parameters. This class
1:f13c6ac:  * implementation provides the Reified Type for Java 1.4 by making the raw class
1:f13c6ac:  * the Java 1.4 class and using a Reified Type based on the <code>Object</code>
1:f13c6ac:  * class for any requested type parameter.
1:f13c6ac:  * 
1:f13c6ac:  * <p>
1:f13c6ac:  * A Blueprint extender implementations can subclass this class and provide
1:f13c6ac:  * access to the generic type parameter graph for conversion. Such a subclass
1:f13c6ac:  * must <em>reify</em> the different Java 5 <code>Type</code> instances into the
1:f13c6ac:  * reified form. That is, a form where the raw Class is available with its
1:f13c6ac:  * optional type parameters as Reified Types.
1:f13c6ac:  * 
1:f13c6ac:  * @Immutable
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public class ReifiedType {
1:f13c6ac: 	private final static ReifiedType	OBJECT	= new ReifiedType(Object.class);
1:f13c6ac: 
1:f13c6ac: 	private final Class					clazz;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Create a Reified Type for a raw Java class without any generic type
1:f13c6ac: 	 * parameters. Subclasses can provide the optional generic type parameter
1:f13c6ac: 	 * information. Without subclassing, this instance has no type parameters.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param clazz The raw class of the Reified Type.
1:f13c6ac: 	 */
1:f13c6ac: 	public ReifiedType(Class clazz) {
1:f13c6ac: 		this.clazz = clazz;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the raw class represented by this type.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * The raw class represents the concrete class that is associated with a
1:f13c6ac: 	 * type declaration. This class could have been deduced from the generics
1:f13c6ac: 	 * type parameter graph of the declaration. For example, in the following
1:f13c6ac: 	 * example:
1:f13c6ac: 	 * 
1:f13c6ac: 	 * <pre>
1:f13c6ac: 	 * Map&lt;String, ? extends Metadata&gt;
1:f13c6ac: 	 * </pre>
1:f13c6ac: 	 * 
1:f13c6ac: 	 * The raw class is the Map class.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The raw class represented by this type.
1:f13c6ac: 	 */
1:f13c6ac: 	public Class getRawClass() {
1:f13c6ac: 		return clazz;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return a type parameter for this type.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * The type parameter refers to a parameter in a generic type declaration
1:f13c6ac: 	 * given by the zero-based index <code>i</code>.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * For example, in the following example:
1:f13c6ac: 	 * 
1:f13c6ac: 	 * <pre>
1:f13c6ac: 	 * Map&lt;String, ? extends Metadata&gt;
1:f13c6ac: 	 * </pre>
1:f13c6ac: 	 * 
1:f13c6ac: 	 * type parameter 0 is <code>String</code>, and type parameter 1 is
1:f13c6ac: 	 * <code>Metadata</code>.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * <p>
1:f13c6ac: 	 * This implementation returns a Reified Type that has <code>Object</code>
1:f13c6ac: 	 * as class. Any object is assignable to Object and therefore no conversion
1:f13c6ac: 	 * is then necessary. This is compatible with versions of Java language
1:f13c6ac: 	 * prior to Java 5.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This method should be overridden by a subclass that provides access to
1:f13c6ac: 	 * the generic type parameter information for Java 5 and later.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param i The zero-based index of the requested type parameter.
1:f13c6ac: 	 * @return The <code>ReifiedType</code> for the generic type parameter at
1:f13c6ac: 	 *         the specified index.
1:f13c6ac: 	 */
1:f13c6ac: 	public ReifiedType getActualTypeArgument(int i) {
1:f13c6ac: 		return OBJECT;
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the number of type parameters for this type.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * <p>
1:f13c6ac: 	 * This implementation returns <code>0</code>. This method should be
1:f13c6ac: 	 * overridden by a subclass that provides access to the generic type
1:f13c6ac: 	 * parameter information for Java 5 and later.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The number of type parameters for this type.
1:f13c6ac: 	 */
1:f13c6ac: 	public int size() {
1:f13c6ac: 		return 0;
1:f13c6ac: 	}
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.container;
1: 
1: /**
1:  * Provides access to a concrete type and its optional generic type parameters.
1:  * 
1:  * <p>
1:  * Java 5 and later support generic types. These types consist of a raw class
1:  * with type parameters. This class models such a <code>Type</code> class but
1:  * ensures that the type is <em>reified</em>. Reification means that the Type
1:  * graph associated with a Java 5 <code>Type</code> instance is traversed until
1:  * the type becomes a concrete class. This class is available with the
1:  * {@link #getRawClass()} method. The optional type parameters are recursively
1:  * represented as Reified Types.
1:  * 
1:  * <p>
1:  * In Java 1.4, a class has by definition no type parameters. This class
1:  * implementation provides the Reified Type for Java 1.4 by making the raw class
1:  * the Java 1.4 class and using a Reified Type based on the <code>Object</code>
1:  * class for any requested type parameter.
1:  * 
1:  * <p>
1:  * A Blueprint extender implementations can subclass this class and provide
1:  * access to the generic type parameter graph for conversion. Such a subclass
1:  * must <em>reify</em> the different Java 5 <code>Type</code> instances into the
1:  * reified form. That is, a form where the raw Class is available with its
1:  * optional type parameters as Reified Types.
1:  * 
1:  * @Immutable
1:  * @version $Revision$
1:  */
1: public class ReifiedType {
1: 	private final static ReifiedType	OBJECT	= new ReifiedType(Object.class);
1: 
1: 	private final Class					clazz;
1: 
1: 	/**
1: 	 * Create a Reified Type for a raw Java class without any generic type
1: 	 * parameters. Subclasses can provide the optional generic type parameter
1: 	 * information. Without subclassing, this instance has no type parameters.
1: 	 * 
1: 	 * @param clazz The raw class of the Reified Type.
1: 	 */
1: 	public ReifiedType(Class clazz) {
1: 		this.clazz = clazz;
1: 	}
1: 
1: 	/**
1: 	 * Return the raw class represented by this type.
1: 	 * 
1: 	 * The raw class represents the concrete class that is associated with a
1: 	 * type declaration. This class could have been deduced from the generics
1: 	 * type parameter graph of the declaration. For example, in the following
1: 	 * example:
1: 	 * 
1: 	 * <pre>
1: 	 * Map&lt;String, ? extends Metadata&gt;
1: 	 * </pre>
1: 	 * 
1: 	 * The raw class is the Map class.
1: 	 * 
1: 	 * @return The raw class represented by this type.
1: 	 */
1: 	public Class getRawClass() {
1: 		return clazz;
1: 	}
1: 
1: 	/**
1: 	 * Return a type parameter for this type.
1: 	 * 
1: 	 * The type parameter refers to a parameter in a generic type declaration
1: 	 * given by the zero-based index <code>i</code>.
1: 	 * 
1: 	 * For example, in the following example:
1: 	 * 
1: 	 * <pre>
1: 	 * Map&lt;String, ? extends Metadata&gt;
1: 	 * </pre>
1: 	 * 
1: 	 * type parameter 0 is <code>String</code>, and type parameter 1 is
1: 	 * <code>Metadata</code>.
1: 	 * 
1: 	 * <p>
1: 	 * This implementation returns a Reified Type that has <code>Object</code>
1: 	 * as class. Any object is assignable to Object and therefore no conversion
1: 	 * is then necessary. This is compatible with versions of Java language
1: 	 * prior to Java 5.
1: 	 * 
1: 	 * This method should be overridden by a subclass that provides access to
1: 	 * the generic type parameter information for Java 5 and later.
1: 	 * 
1: 	 * @param i The zero-based index of the requested type parameter.
1: 	 * @return The <code>ReifiedType</code> for the generic type parameter at
1: 	 *         the specified index.
1: 	 */
1: 	public ReifiedType getActualTypeArgument(int i) {
1: 		return OBJECT;
1: 	}
1: 
1: 	/**
1: 	 * Return the number of type parameters for this type.
1: 	 * 
1: 	 * <p>
1: 	 * This implementation returns <code>0</code>. This method should be
1: 	 * overridden by a subclass that provides access to the generic type
1: 	 * parameter information for Java 5 and later.
1: 	 * 
1: 	 * @return The number of type parameters for this type.
1: 	 */
1: 	public int size() {
1: 		return 0;
1: 	}
1: }
============================================================================