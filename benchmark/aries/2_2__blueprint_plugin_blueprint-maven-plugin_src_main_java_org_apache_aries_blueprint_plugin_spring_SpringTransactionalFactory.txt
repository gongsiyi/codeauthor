1:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:0d2c0ec:  * <p>
1:0d2c0ec:  * http://www.apache.org/licenses/LICENSE-2.0
1:0d2c0ec:  * <p>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
1:46cfc09:  */
1:c201f83: package org.apache.aries.blueprint.plugin.spring;
1:46cfc09: 
1:fff2e99: import com.google.common.base.CaseFormat;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.MethodAnnotationHandler;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:46cfc09: import org.springframework.transaction.annotation.Propagation;
1:46cfc09: import org.springframework.transaction.annotation.Transactional;
1:46cfc09: 
1:0d2c0ec: import javax.xml.stream.XMLStreamException;
1:0d2c0ec: import javax.xml.stream.XMLStreamWriter;
1:0d2c0ec: import java.lang.reflect.AnnotatedElement;
1:0d2c0ec: import java.lang.reflect.Method;
1:0d2c0ec: import java.util.List;
1:a680609: import java.util.Set;
1:46cfc09: 
1:0d2c0ec: public class SpringTransactionalFactory implements BeanAnnotationHandler<Transactional>, MethodAnnotationHandler<Transactional> {
1:a680609:     private static final String PATTERN_NS_TX1 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v1\\.(.)\\.(.)";
1:a680609:     private static final String PATTERN_NS_TX2 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v2\\.(.)\\.(.)";
1:46cfc09: 
1:0d2c0ec:     private String getTransactionTypeName(Transactional transactional) {
1:fff2e99:         Propagation propagation = transactional.propagation();
1:fff2e99:         if (propagation == Propagation.NESTED) {
1:fff2e99:             throw new UnsupportedOperationException("Nested transactions not supported");
1:fff2e99:         }
1:fff2e99:         return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, propagation.name());
1:46cfc09:     }
1:46cfc09: 
1:fff2e99:     @Override
1:0d2c0ec:     public Class<Transactional> getAnnotation() {
1:fff2e99:         return Transactional.class;
1:46cfc09:     }
1:0d2c0ec: 
1:fff2e99:     @Override
1:0d2c0ec:     public void handleMethodAnnotation(Class<?> clazz, List<Method> methods, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:a680609:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:a680609:         if (nsTx1 != null) {
1:a680609:             enableAnnotations(contextEnricher, nsTx1);
1:0d2c0ec:             for (final Method method : methods) {
1:0d2c0ec:                 final Transactional transactional = method.getAnnotation(Transactional.class);
1:0d2c0ec:                 final String transactionTypeName = getTransactionTypeName(transactional);
1:0d2c0ec:                 final String name = method.getName();
1:0d2c0ec:                 beanEnricher.addBeanContentWriter("javax.transactional.method/" + clazz.getName() + "/" + name + "/" + transactionTypeName, new XmlWriter() {
2:0d2c0ec:                     @Override
1:0d2c0ec:                     public void write(XMLStreamWriter writer) throws XMLStreamException {
1:6aac545:                         writer.writeEmptyElement("transaction");
1:a680609:                         writer.writeDefaultNamespace(nsTx1);
1:0d2c0ec:                         writer.writeAttribute("method", name);
1:0d2c0ec:                         writer.writeAttribute("value", transactionTypeName);
1:46cfc09:                     }
1:0d2c0ec:                 });
2:0d2c0ec:             }
1:0d2c0ec:         }
1:a680609:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX2);
1:a680609:         if (nsTx2 != null) {
1:a680609:             enableTransactionsTx2(contextEnricher, nsTx2);
1:0d2c0ec:         }
1:0d2c0ec:     }
1:0d2c0ec: 
1:a680609:     private void enableAnnotations(ContextEnricher contextEnricher, final String namespace) {
1:0d2c0ec:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:0d2c0ec:             @Override
1:0d2c0ec:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:6aac545:                 writer.writeEmptyElement("enable-annotations");
1:a680609:                 writer.writeDefaultNamespace(namespace);
1:0d2c0ec:             }
1:0d2c0ec:         });
1:0d2c0ec:     }
3:0d2c0ec: 
1:0d2c0ec:     @Override
1:0d2c0ec:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, String id, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:a680609:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:a680609:         if (nsTx1 != null) {
1:a680609:             enableAnnotations(contextEnricher, nsTx1);
1:0d2c0ec:             final Transactional transactional = annotatedElement.getAnnotation(Transactional.class);
1:0d2c0ec:             final String transactionTypeName = getTransactionTypeName(transactional);
1:0d2c0ec:             beanEnricher.addBeanContentWriter("javax.transactional.method/" + annotatedElement + "/*/" + transactionTypeName, new XmlWriter() {
1:0d2c0ec:                 @Override
1:0d2c0ec:                 public void write(XMLStreamWriter writer) throws XMLStreamException {
1:6aac545:                     writer.writeEmptyElement("transaction");
1:a680609:                     writer.writeDefaultNamespace(nsTx1);
1:0d2c0ec:                     writer.writeAttribute("method", "*");
1:0d2c0ec:                     writer.writeAttribute("value", transactionTypeName);
1:0d2c0ec:                 }
1:0d2c0ec:             });
1:0d2c0ec:         }
1:a680609:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:a680609:         if (nsTx2 != null) {
1:a680609:             enableTransactionsTx2(contextEnricher, nsTx2);
1:0d2c0ec:         }
1:0d2c0ec:     }
1:0d2c0ec: 
1:a680609:     private void enableTransactionsTx2(ContextEnricher contextEnricher, final String namespace) {
1:0d2c0ec:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:0d2c0ec:             @Override
1:0d2c0ec:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:6aac545:                 writer.writeEmptyElement("enable");
1:a680609:                 writer.writeDefaultNamespace(namespace);
1:a680609:             }
1:0d2c0ec:         });
1:0d2c0ec:     }
1:a680609: 
1:a680609:     private String getNamespaceByPattern(Set<String> namespaces, String pattern) {
1:a680609:         for (String namespace : namespaces) {
1:a680609:             if (namespace.matches(pattern)) {
1:a680609:                 return namespace;
1:a680609:             }
1:a680609:         }
1:a680609:         return null;
1:a680609:     }
1:0d2c0ec: } 
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:fff2e99
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.CaseFormat;
0: public class SpringTransactionFactory extends AbstractTransactionalFactory<Transactional> {
1:     @Override
0:     public String getTransactionTypeName(Transactional transactional)
0:     {
1:         Propagation propagation = transactional.propagation();
1:         if (propagation == Propagation.NESTED) {
1:             throw new UnsupportedOperationException("Nested transactions not supported");
1:         }
1:         return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, propagation.name());
1:     @Override
0:     public Class<Transactional> getTransactionalClass()
0:     {
1:         return Transactional.class;
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.blueprint.plugin.model;
1: 
0: import java.util.HashMap;
1: 
1: import org.springframework.transaction.annotation.Propagation;
1: import org.springframework.transaction.annotation.Transactional;
1: 
0: public class SpringTransactionFactory {
0:     private static HashMap<Propagation, String> txTypeNames;
1: 
0:     static {
0:         txTypeNames = new HashMap<Propagation, String>();
0:         txTypeNames.put(Propagation.REQUIRED, TransactionalDef.TYPE_REQUIRED);
0:         txTypeNames.put(Propagation.REQUIRES_NEW, TransactionalDef.TYPE_REQUIRES_NEW);
1:     }
1: 
0:     TransactionalDef create(Class<?> clazz) {
0:         Transactional transactional = clazz.getAnnotation(Transactional.class);
0:         return transactional != null ? 
0:                 new TransactionalDef("*", txTypeNames.get(transactional.propagation())) : null;
1:     }
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:a680609
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1:     private static final String PATTERN_NS_TX1 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v1\\.(.)\\.(.)";
1:     private static final String PATTERN_NS_TX2 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v2\\.(.)\\.(.)";
/////////////////////////////////////////////////////////////////////////
1:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:         if (nsTx1 != null) {
1:             enableAnnotations(contextEnricher, nsTx1);
/////////////////////////////////////////////////////////////////////////
1:                         writer.writeDefaultNamespace(nsTx1);
1:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX2);
1:         if (nsTx2 != null) {
1:             enableTransactionsTx2(contextEnricher, nsTx2);
1:     private void enableAnnotations(ContextEnricher contextEnricher, final String namespace) {
1:                 writer.writeDefaultNamespace(namespace);
1:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:         if (nsTx1 != null) {
1:             enableAnnotations(contextEnricher, nsTx1);
1:                     writer.writeDefaultNamespace(nsTx1);
1:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:         if (nsTx2 != null) {
1:             enableTransactionsTx2(contextEnricher, nsTx2);
1:     private void enableTransactionsTx2(ContextEnricher contextEnricher, final String namespace) {
1:                 writer.writeDefaultNamespace(namespace);
1: 
1:     private String getNamespaceByPattern(Set<String> namespaces, String pattern) {
1:         for (String namespace : namespaces) {
1:             if (namespace.matches(pattern)) {
1:                 return namespace;
1:             }
1:         }
1:         return null;
1:     }
1: } 
commit:6aac545
/////////////////////////////////////////////////////////////////////////
1:                         writer.writeEmptyElement("transaction");
0:                         writer.writeDefaultNamespace(NS_TX);
/////////////////////////////////////////////////////////////////////////
1:                 writer.writeEmptyElement("enable-annotations");
0:                 writer.writeDefaultNamespace(NS_TX);
/////////////////////////////////////////////////////////////////////////
1:                     writer.writeEmptyElement("transaction");
0:                     writer.writeDefaultNamespace(NS_TX);
/////////////////////////////////////////////////////////////////////////
1:                 writer.writeEmptyElement("enable");
0:                 writer.writeDefaultNamespace(NS_TX2);
commit:64f241a
/////////////////////////////////////////////////////////////////////////
0:                         writer.writeEmptyElement("tx", "transaction", NS_TX);
/////////////////////////////////////////////////////////////////////////
0:                 writer.writeEmptyElement("tx", "enable-annotations", NS_TX);
/////////////////////////////////////////////////////////////////////////
0:                     writer.writeEmptyElement("tx", "transaction", NS_TX);
/////////////////////////////////////////////////////////////////////////
0:                 writer.writeEmptyElement("tx", "enable", NS_TX2);
commit:119afa3
/////////////////////////////////////////////////////////////////////////
0:     public static final String NS_TX = "http://aries.apache.org/xmlns/transactions/v1.2.0";
0:     public static final String NS_TX2 = "http://aries.apache.org/xmlns/transactions/v2.0.0";
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1: import org.apache.aries.blueprint.plugin.spi.MethodAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1: import javax.xml.stream.XMLStreamException;
1: import javax.xml.stream.XMLStreamWriter;
1: import java.lang.reflect.AnnotatedElement;
1: import java.lang.reflect.Method;
1: import java.util.List;
1: 
1: public class SpringTransactionalFactory implements BeanAnnotationHandler<Transactional>, MethodAnnotationHandler<Transactional> {
0:     private static final String NS_TX = "http://aries.apache.org/xmlns/transactions/v1.2.0";
0:     private static final String NS_TX2 = "http://aries.apache.org/xmlns/transactions/v2.0.0";
1: 
1:     private String getTransactionTypeName(Transactional transactional) {
/////////////////////////////////////////////////////////////////////////
1:     public Class<Transactional> getAnnotation() {
1: 
1:     @Override
1:     public void handleMethodAnnotation(Class<?> clazz, List<Method> methods, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
0:         if (contextEnricher.getBlueprintConfiguration().getNamespaces().contains(NS_TX)) {
0:             enableAnnotations(contextEnricher);
1:             for (final Method method : methods) {
1:                 final Transactional transactional = method.getAnnotation(Transactional.class);
1:                 final String transactionTypeName = getTransactionTypeName(transactional);
1:                 final String name = method.getName();
1:                 beanEnricher.addBeanContentWriter("javax.transactional.method/" + clazz.getName() + "/" + name + "/" + transactionTypeName, new XmlWriter() {
1:                     @Override
1:                     public void write(XMLStreamWriter writer) throws XMLStreamException {
0:                         writer.writeEmptyElement(NS_TX, "transaction");
1:                         writer.writeAttribute("method", name);
1:                         writer.writeAttribute("value", transactionTypeName);
0:                         writer.writeCharacters("\n");
1:                     }
1:                 });
1:             }
1:         }
0:         if (contextEnricher.getBlueprintConfiguration().getNamespaces().contains(NS_TX2)) {
0:             enableTransactionsTx2(contextEnricher);
1:         }
1:     }
1: 
0:     private void enableAnnotations(ContextEnricher contextEnricher) {
1:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:             @Override
1:             public void write(XMLStreamWriter writer) throws XMLStreamException {
0:                 writer.writeEmptyElement(NS_TX, "enable-annotations");
1:             }
1:         });
1:     }
1: 
1:     @Override
1:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, String id, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
0:         if (contextEnricher.getBlueprintConfiguration().getNamespaces().contains(NS_TX)) {
0:             enableAnnotations(contextEnricher);
1:             final Transactional transactional = annotatedElement.getAnnotation(Transactional.class);
1:             final String transactionTypeName = getTransactionTypeName(transactional);
1:             beanEnricher.addBeanContentWriter("javax.transactional.method/" + annotatedElement + "/*/" + transactionTypeName, new XmlWriter() {
1:                 @Override
1:                 public void write(XMLStreamWriter writer) throws XMLStreamException {
0:                     writer.writeEmptyElement(NS_TX, "transaction");
1:                     writer.writeAttribute("method", "*");
1:                     writer.writeAttribute("value", transactionTypeName);
0:                     writer.writeCharacters("\n");
1:                 }
1:             });
1:         }
0:         if (contextEnricher.getBlueprintConfiguration().getNamespaces().contains(NS_TX2)) {
0:             enableTransactionsTx2(contextEnricher);
1:         }
1:     }
1: 
0:     private void enableTransactionsTx2(ContextEnricher contextEnricher) {
1:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:             @Override
1:             public void write(XMLStreamWriter writer) throws XMLStreamException {
0:                 writer.writeEmptyElement(NS_TX2, "enable");
1:             }
1:         });
1:     }
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.plugin.spring;
0: import com.google.common.base.CaseFormat;
0: import org.apache.aries.blueprint.plugin.spi.TransactionalFactory;
0: public class SpringTransactionalFactory implements TransactionalFactory<Transactional> {
0:     public String getTransactionTypeName(Transactional transactional) {
/////////////////////////////////////////////////////////////////////////
0:     public Class<Transactional> getTransactionalClass() {
============================================================================