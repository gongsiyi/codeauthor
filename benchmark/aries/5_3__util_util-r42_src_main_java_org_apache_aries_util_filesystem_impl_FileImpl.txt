1:3c38842: /*
1:3c38842:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c38842:  * or more contributor license agreements.  See the NOTICE file
1:3c38842:  * distributed with this work for additional information
1:3c38842:  * regarding copyright ownership.  The ASF licenses this file
1:3c38842:  * to you under the Apache License, Version 2.0 (the
1:3c38842:  * "License"); you may not use this file except in compliance
1:3c38842:  * with the License.  You may obtain a copy of the License at
1:3c38842:  *
1:3c38842:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c38842:  *
1:3c38842:  * Unless required by applicable law or agreed to in writing,
1:3c38842:  * software distributed under the License is distributed on an
1:3c38842:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:3c38842:  * KIND, either express or implied.  See the License for the
1:3c38842:  * specific language governing permissions and limitations
1:3c38842:  * under the License.
1:3c38842:  */
8:3c38842: 
1:910fec0: package org.apache.aries.util.filesystem.impl;
1:3c38842: 
1:3c38842: import java.io.File;
1:3c38842: import java.io.FileInputStream;
1:3c38842: import java.io.IOException;
1:3c38842: import java.io.InputStream;
1:3c38842: import java.net.MalformedURLException;
1:3c38842: import java.net.URL;
1:3c38842: 
1:8ab18a7: import org.apache.aries.util.IORuntimeException;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:3c38842: 
1:3c38842: /**
1:3c38842:  * An implementation of IFile that represents a java.io.File.
1:3c38842:  */
1:3c38842: public class FileImpl implements IFile
1:3c38842: {
1:3c38842:   /** The name of the root directory of the file system */
1:3c38842:   protected String rootDir;
1:3c38842:   /** This file in the file system */
1:3c38842:   protected File file;
1:3c38842:   /** The root File in the file system */
1:3c38842:   protected File rootDirFile;
1:3c38842:   /** The name of this file in the vFS */
1:3c38842:   private String name;
1:8ab18a7: 
1:3c38842:   /**
1:3c38842:    * @param f        this file.
1:3c38842:    * @param rootFile the root of the vFS.
1:3c38842:    */
1:3c38842:   public FileImpl(File f, File rootFile)
1:3c38842:   {
1:3c38842:     file = f;
1:3c38842:     this.rootDirFile = rootFile;
1:3c38842:     rootDir = rootFile.getAbsolutePath();
1:8ab18a7: 
1:e62fca9:     if (f.equals(rootFile)) name = "";
1:04290f8:     else name = file.getAbsolutePath().substring(rootDir.length() + 1).replace('\\', '/');
1:3c38842:   }
1:8ab18a7: 
1:3c38842:   public IDirectory convert()
1:3c38842:   {
1:3c38842:     return null;
1:3c38842:   }
1:e62fca9: 
1:3c38842:   public long getLastModified()
1:3c38842:   {
1:3c38842:     long result = file.lastModified();
1:3c38842:     return result;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public String getName()
1:3c38842:   {
1:3c38842:     return name;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public IDirectory getParent()
1:3c38842:   {
1:3c38842:     IDirectory parent = new DirectoryImpl(file.getParentFile(), rootDirFile);
1:3c38842:     return parent;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public long getSize()
1:3c38842:   {
1:3c38842:     long size = file.length();
1:3c38842:     return size;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public boolean isDirectory()
1:3c38842:   {
1:3c38842:     boolean result = file.isDirectory();
1:3c38842:     return result;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public boolean isFile()
1:3c38842:   {
1:3c38842:     boolean result = file.isFile();
1:3c38842:     return result;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public InputStream open() throws IOException
1:3c38842:   {
1:3c38842:     InputStream is = new FileInputStream(file);
1:3c38842:     return is;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public IDirectory getRoot()
1:3c38842:   {
1:3c38842:     IDirectory root = new DirectoryImpl(rootDirFile, rootDirFile);
1:3c38842:     return root;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public URL toURL() throws MalformedURLException
1:3c38842:   {
1:5481a62:     URL result = file.toURI().toURL();
1:3c38842:     return result;
1:3c38842:   }
1:3c38842: 
8:e62fca9:   @Override
1:3c38842:   public boolean equals(Object obj)
1:3c38842:   {
1:3c38842:     if (obj == null) return false;
1:3c38842:     if (obj == this) return true;
1:8ab18a7: 
1:3c38842:     if (obj.getClass() == getClass()) {
1:3c38842:       return file.equals(((FileImpl)obj).file);
1:3c38842:     }
1:8ab18a7: 
1:3c38842:     return false;
1:3c38842:   }
1:3c38842: 
1:e62fca9:   @Override
1:3c38842:   public int hashCode()
1:3c38842:   {
1:3c38842:     return file.hashCode();
1:3c38842:   }
1:8ab18a7: 
1:e62fca9:   @Override
1:3c38842:   public String toString()
1:3c38842:   {
1:3c38842:     return file.getAbsolutePath();
1:3c38842:   }
1:3c38842: 
1:e62fca9:   public IDirectory convertNested() {
1:8ab18a7: 	if (isDirectory()) {
1:8ab18a7: 	  return convert();
1:8ab18a7: 	} else {
1:8ab18a7: 	  try {
1:8ab18a7:         return FileSystemImpl.getFSRoot(file, getParent());
1:8ab18a7:       } catch (IORuntimeException e) {
1:8ab18a7:         return null;
1:8ab18a7:       }
1:8ab18a7: 	}
1:e62fca9:   }
1:3c38842: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:8ab18a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.IORuntimeException;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 	if (isDirectory()) {
1: 	  return convert();
1: 	} else {
1: 	  try {
1:         return FileSystemImpl.getFSRoot(file, getParent());
1:       } catch (IORuntimeException e) {
1:         return null;
1:       }
1: 	}
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:04290f8
/////////////////////////////////////////////////////////////////////////
1:     else name = file.getAbsolutePath().substring(rootDir.length() + 1).replace('\\', '/');
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
commit:e62fca9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (f.equals(rootFile)) name = "";
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override
1:   public IDirectory convertNested() {
0: 	  if (isDirectory()) return convert();
0: 	  else return FileSystemImpl.getFSRoot(file, getParent());
1:   }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:5481a62
/////////////////////////////////////////////////////////////////////////
1:     URL result = file.toURI().toURL();
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem.impl;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.filesystem.utils.impl;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
1: 
1: /**
1:  * An implementation of IFile that represents a java.io.File.
1:  */
1: public class FileImpl implements IFile
1: {
1:   
1:   /** The name of the root directory of the file system */
1:   protected String rootDir;
1:   /** This file in the file system */
1:   protected File file;
1:   /** The root File in the file system */
1:   protected File rootDirFile;
1:   /** The name of this file in the vFS */
1:   private String name;
1:   
1:   /**
1:    * @param f        this file.
1:    * @param rootFile the root of the vFS.
1:    */
1:   public FileImpl(File f, File rootFile)
1:   {
1:     file = f;
1:     this.rootDirFile = rootFile;
1:     rootDir = rootFile.getAbsolutePath();
1:     
0:     if (f == rootFile) name = "";
0:     else name = file.getAbsolutePath().substring(rootDir.length() + 1);
1:   }
1:   
1:   public IDirectory convert()
1:   {
1:     return null;
1:   }
1: 
1:   public long getLastModified()
1:   {
1:     long result = file.lastModified();
1:     return result;
1:   }
1: 
1:   public String getName()
1:   {
1:     return name;
1:   }
1: 
1:   public IDirectory getParent()
1:   {
1:     IDirectory parent = new DirectoryImpl(file.getParentFile(), rootDirFile);
1:     return parent;
1:   }
1: 
1:   public long getSize()
1:   {
1:     long size = file.length();
1:     return size;
1:   }
1: 
1:   public boolean isDirectory()
1:   {
1:     boolean result = file.isDirectory();
1:     return result;
1:   }
1: 
1:   public boolean isFile()
1:   {
1:     boolean result = file.isFile();
1:     return result;
1:   }
1: 
1:   public InputStream open() throws IOException
1:   {
1:     InputStream is = new FileInputStream(file);
1:     return is;
1:   }
1: 
1:   public IDirectory getRoot()
1:   {
1:     IDirectory root = new DirectoryImpl(rootDirFile, rootDirFile);
1:     return root;
1:   }
1: 
1:   public URL toURL() throws MalformedURLException
1:   {
0:     URL result = file.toURL();
1:     return result;
1:   }
1: 
0:   @Override
1:   public boolean equals(Object obj)
1:   {
1:     if (obj == null) return false;
1:     if (obj == this) return true;
1:     
1:     if (obj.getClass() == getClass()) {
1:       return file.equals(((FileImpl)obj).file);
1:     }
1:     
1:     return false;
1:   }
1: 
0:   @Override
1:   public int hashCode()
1:   {
1:     return file.hashCode();
1:   }
1:   
0:   @Override
1:   public String toString()
1:   {
1:     return file.getAbsolutePath();
1:   }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.filesystem.impl;
0: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.net.MalformedURLException;
0: import java.net.URL;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: 
0: /**
0:  * An implementation of IFile that represents a java.io.File.
0:  */
0: public class FileImpl implements IFile
0: {
0:   
0:   /** The name of the root directory of the file system */
0:   protected String rootDir;
0:   /** This file in the file system */
0:   protected File file;
0:   /** The root File in the file system */
0:   protected File rootDirFile;
0:   /** The name of this file in the vFS */
0:   private String name;
0:   
0:   /**
0:    * @param f        this file.
0:    * @param rootFile the root of the vFS.
0:    */
0:   public FileImpl(File f, File rootFile)
0:   {
0:     file = f;
0:     this.rootDirFile = rootFile;
0:     rootDir = rootFile.getAbsolutePath();
0:     
0:     if (f == rootFile) name = "";
0:     else name = file.getAbsolutePath().substring(rootDir.length() + 1);
0:   }
0:   
0:   public IDirectory convert()
0:   {
0:     return null;
0:   }
0: 
0:   public long getLastModified()
0:   {
0:     long result = file.lastModified();
0:     return result;
0:   }
0: 
0:   public String getName()
0:   {
0:     return name;
0:   }
0: 
0:   public IDirectory getParent()
0:   {
0:     IDirectory parent = new DirectoryImpl(file.getParentFile(), rootDirFile);
0:     return parent;
0:   }
0: 
0:   public long getSize()
0:   {
0:     long size = file.length();
0:     return size;
0:   }
0: 
0:   public boolean isDirectory()
0:   {
0:     boolean result = file.isDirectory();
0:     return result;
0:   }
0: 
0:   public boolean isFile()
0:   {
0:     boolean result = file.isFile();
0:     return result;
0:   }
0: 
0:   public InputStream open() throws IOException
0:   {
0:     InputStream is = new FileInputStream(file);
0:     return is;
0:   }
0: 
0:   public IDirectory getRoot()
0:   {
0:     IDirectory root = new DirectoryImpl(rootDirFile, rootDirFile);
0:     return root;
0:   }
0: 
0:   public URL toURL() throws MalformedURLException
0:   {
0:     URL result = file.toURL();
0:     return result;
0:   }
0: 
0:   @Override
0:   public boolean equals(Object obj)
0:   {
0:     if (obj == null) return false;
0:     if (obj == this) return true;
0:     
0:     if (obj.getClass() == getClass()) {
0:       return file.equals(((FileImpl)obj).file);
0:     }
0:     
0:     return false;
0:   }
0: 
0:   @Override
0:   public int hashCode()
0:   {
0:     return file.hashCode();
0:   }
0:   
0:   @Override
0:   public String toString()
0:   {
0:     return file.getAbsolutePath();
0:   }
============================================================================