1:643420c: /*
1:643420c:  * Licensed to the Apache Software Foundation (ASF) under one
1:643420c:  * or more contributor license agreements.  See the NOTICE file
1:643420c:  * distributed with this work for additional information
1:643420c:  * regarding copyright ownership.  The ASF licenses this file
1:643420c:  * to you under the Apache License, Version 2.0 (the
1:643420c:  * "License"); you may not use this file except in compliance
1:643420c:  * with the License.  You may obtain a copy of the License at
1:643420c:  *
1:643420c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:643420c:  *
1:643420c:  * Unless required by applicable law or agreed to in writing,
1:643420c:  * software distributed under the License is distributed on an
1:643420c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:643420c:  * KIND, either express or implied.  See the License for the
1:643420c:  * specific language governing permissions and limitations
1:643420c:  * under the License.
1:643420c:  */
1:643420c: package org.apache.aries.subsystem.scope;
1:643420c: 
1:643420c: import org.osgi.framework.Filter;
1:643420c: 
1:643420c: /**
1:643420c:  * A share policy is used to control what capabilities
1:643420c:  * are imported and exported from a scope.
1:643420c:  */
1:643420c: public class SharePolicy {
1:643420c: 	/**
1:643420c: 	 * A type of share policy for importing capabilities
1:643420c: 	 * into a scope.
1:643420c: 	 */
1:643420c: 	public static final String TYPE_IMPORT = "IMPORT";
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * A type of share policy for exporting capabilities
1:643420c: 	 * out of a scope.
1:643420c: 	 */
1:643420c: 	public static final String TYPE_EXPORT = "EXPORT";
1:643420c: 
1:643420c: 	private final String type;
1:643420c: 	private final String namespace;
1:643420c: 	private final Filter filter;
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Constructs a new share policy.
1:643420c: 	 * @param type the type of share policy.  Must be either
1:643420c: 	 * {@link #TYPE_IMPORT IMPORT} or {@link #TYPE_EXPORT
1:643420c: 	 * EXPORT}.
1:643420c: 	 * @param namespace the name space of the capability this policy controls.
1:643420c: 	 * @param filter the filter for matching capabilities this policy controls.
1:643420c: 	 */
1:643420c: 	public SharePolicy(String type, String namespace, Filter filter) {
1:e9f9bca: 		if (!(TYPE_EXPORT.equals(type) || TYPE_IMPORT.equals(type)))
1:e9f9bca: 			throw new IllegalArgumentException("Invalid parameter value: type = " + type);
1:643420c: 		this.type = type;
1:e9f9bca: 		if (namespace == null || namespace.length() == 0)
1:e9f9bca: 			throw new IllegalArgumentException("Missing required paramater: namespace");
1:643420c: 		this.namespace = namespace;
1:e9f9bca: 		if (filter == null)
1:e9f9bca: 			throw new NullPointerException("Missing required parameter: filter");
1:643420c: 		this.filter = filter;
1:643420c: 	}
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns the type of this policy.
1:643420c: 	 * @return the type of this policy.
1:643420c: 	 */
1:643420c: 	public String getType() {
1:643420c: 		return type;
1:643420c: 	}
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns the name space of the capability this policy controls.
1:643420c: 	 * @return the name space of the capability this policy controls.
1:643420c: 	 */
1:643420c: 	public String getNamespace() {
1:643420c: 		return namespace;
1:643420c: 	}
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns the filter for matching capabilities this policy controls.
1:643420c: 	 * @return the filter for matching capabilities this policy controls.
1:643420c: 	 */
1:643420c: 	public Filter getFilter() {
1:643420c: 		return filter;
1:643420c: 	}
1:643420c: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: 		if (!(TYPE_EXPORT.equals(type) || TYPE_IMPORT.equals(type)))
1: 			throw new IllegalArgumentException("Invalid parameter value: type = " + type);
1: 		if (namespace == null || namespace.length() == 0)
1: 			throw new IllegalArgumentException("Missing required paramater: namespace");
1: 		if (filter == null)
1: 			throw new NullPointerException("Missing required parameter: filter");
author:Lin Sun
-------------------------------------------------------------------------------
commit:643420c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.scope;
1: 
1: import org.osgi.framework.Filter;
1: 
1: /**
1:  * A share policy is used to control what capabilities
1:  * are imported and exported from a scope.
1:  */
1: public class SharePolicy {
1: 	/**
1: 	 * A type of share policy for importing capabilities
1: 	 * into a scope.
1: 	 */
1: 	public static final String TYPE_IMPORT = "IMPORT";
1: 
1: 	/**
1: 	 * A type of share policy for exporting capabilities
1: 	 * out of a scope.
1: 	 */
1: 	public static final String TYPE_EXPORT = "EXPORT";
1: 
1: 	private final String type;
1: 	private final String namespace;
1: 	private final Filter filter;
1: 
1: 	/**
1: 	 * Constructs a new share policy.
1: 	 * @param type the type of share policy.  Must be either
1: 	 * {@link #TYPE_IMPORT IMPORT} or {@link #TYPE_EXPORT
1: 	 * EXPORT}.
1: 	 * @param namespace the name space of the capability this policy controls.
1: 	 * @param filter the filter for matching capabilities this policy controls.
1: 	 */
1: 	public SharePolicy(String type, String namespace, Filter filter) {
1: 		this.type = type;
1: 		this.namespace = namespace;
1: 		this.filter = filter;
1: 	}
1: 
1: 	/**
1: 	 * Returns the type of this policy.
1: 	 * @return the type of this policy.
1: 	 */
1: 	public String getType() {
1: 		return type;
1: 	}
1: 
1: 	/**
1: 	 * Returns the name space of the capability this policy controls.
1: 	 * @return the name space of the capability this policy controls.
1: 	 */
1: 	public String getNamespace() {
1: 		return namespace;
1: 	}
1: 
1: 	/**
1: 	 * Returns the filter for matching capabilities this policy controls.
1: 	 * @return the filter for matching capabilities this policy controls.
1: 	 */
1: 	public Filter getFilter() {
1: 		return filter;
1: 	}
1: }
============================================================================