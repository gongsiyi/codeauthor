1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:39cd3f4: package org.apache.aries.async.impl;
4:39cd3f4: 
1:1d8a06f: import java.lang.ref.WeakReference;
1:1d8a06f: import java.lang.reflect.InvocationHandler;
1:39cd3f4: import java.lang.reflect.Method;
1:39cd3f4: import java.lang.reflect.Modifier;
1:39cd3f4: import java.lang.reflect.Proxy;
1:39cd3f4: import java.security.AccessController;
1:39cd3f4: import java.security.PrivilegedAction;
1:1d8a06f: import java.util.WeakHashMap;
1:39cd3f4: import java.util.concurrent.ConcurrentHashMap;
1:39cd3f4: import java.util.concurrent.ConcurrentMap;
1:39cd3f4: import java.util.concurrent.ExecutorService;
1:8b05938: import java.util.concurrent.ScheduledExecutorService;
1:39cd3f4: 
1:39cd3f4: import org.osgi.framework.Bundle;
1:39cd3f4: import org.osgi.framework.ServiceReference;
1:39cd3f4: import org.osgi.framework.wiring.BundleWiring;
1:39cd3f4: import org.osgi.service.async.Async;
1:39cd3f4: import org.osgi.service.log.LogService;
1:39cd3f4: import org.osgi.util.promise.Promise;
1:39cd3f4: import org.osgi.util.tracker.ServiceTracker;
1:39cd3f4: 
1:6caae36: import net.sf.cglib.proxy.Callback;
1:1d8a06f: import net.sf.cglib.proxy.Enhancer;
1:6caae36: import net.sf.cglib.proxy.Factory;
1:1d8a06f: 
1:39cd3f4: 
1:39cd3f4: public class AsyncService implements Async {
1:39cd3f4: 
1:39cd3f4: 	private static final class CGLibAwareClassLoader extends ClassLoader {
1:39cd3f4: 		private final ClassLoader serviceTypeLoader;
1:39cd3f4: 
1:39cd3f4: 		private CGLibAwareClassLoader(Bundle registeringBundle) {
1:39cd3f4: 			this.serviceTypeLoader = registeringBundle.adapt(BundleWiring.class).getClassLoader();
3:39cd3f4: 		}
1:39cd3f4: 
1:39cd3f4: 		private CGLibAwareClassLoader(ClassLoader loader) {
1:39cd3f4: 			this.serviceTypeLoader = loader;
1:39cd3f4: 		}
1:39cd3f4: 
1:39cd3f4: 		@Override
1:39cd3f4: 		protected Class<?> findClass(String var0)
1:39cd3f4: 				throws ClassNotFoundException {
1:39cd3f4: 			if(var0.startsWith("net.sf.cglib")) {
1:39cd3f4: 				return AsyncService.class.getClassLoader().loadClass(var0);
3:39cd3f4: 			} else {
1:39cd3f4: 				return serviceTypeLoader.loadClass(var0);
1:39cd3f4: 			}
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: 
1:1d8a06f: 	/**
1:1d8a06f: 	 * It is important to use both weak keys *and* values in this map. The
1:1d8a06f: 	 * key must be weakly held because it is typically a type from another 
1:1d8a06f: 	 * bundle, and would represent a classloader leak if held after that 
1:1d8a06f: 	 * bundle was uninstalled. The value must be weak because it either 
1:1d8a06f: 	 * extends or implements the type that is the key, and so holds a strong 
1:1d8a06f: 	 * reference to the key, which again would cause a leak.
1:1d8a06f: 	 * 
1:1d8a06f: 	 * This cache may drop the value type if no mediators are held, however in
1:1d8a06f: 	 * this situation we can simply create a new value without risking exploding
1:1d8a06f: 	 * the heap.
1:1d8a06f: 	 */
1:1d8a06f: 	private final WeakHashMap<Class<?>, WeakReference<Class<?>>> proxyLoaderCache
1:1d8a06f: 		= new WeakHashMap<Class<?>, WeakReference<Class<?>>>();
1:1d8a06f: 	
1:39cd3f4: 	private final Bundle clientBundle;
1:39cd3f4: 	
1:39cd3f4: 	private final ConcurrentMap<Thread, MethodCall> invocations = new ConcurrentHashMap<Thread, MethodCall>();
1:39cd3f4: 	
1:39cd3f4: 	private final ExecutorService executor;
1:39cd3f4: 	
1:8b05938: 	private final ScheduledExecutorService ses;
1:8b05938: 
1:39cd3f4: 	private final ServiceTracker<LogService, LogService> logServiceTracker;
1:39cd3f4: 	
1:8b05938: 	public AsyncService(Bundle clientBundle, ExecutorService executor, ScheduledExecutorService ses, ServiceTracker<LogService, LogService> logServiceTracker) {
1:39cd3f4: 		super();
1:39cd3f4: 		this.clientBundle = clientBundle;
1:39cd3f4: 		this.executor = executor;
1:8b05938: 		this.ses = ses;
1:39cd3f4: 		this.logServiceTracker = logServiceTracker;
1:39cd3f4: 	}
1:1d8a06f: 	
1:1d8a06f: 	void clear() {
1:1d8a06f: 		proxyLoaderCache.clear();
1:1d8a06f: 	}
1:39cd3f4: 
1:39cd3f4: 	public <T> T mediate(final T service, final Class<T> iface) {
1:39cd3f4: 		return AccessController.doPrivileged(new PrivilegedAction<T>() {
1:39cd3f4: 			public T run() {
1:39cd3f4: 				return privMediate(service, iface);
1:39cd3f4: 			}
1:39cd3f4: 		});
1:39cd3f4: 	}
1:39cd3f4: 
1:1d8a06f: 	@SuppressWarnings("unchecked")
1:39cd3f4: 	private <T> T privMediate(T service, Class<T> iface) {
1:39cd3f4: 		
1:39cd3f4: 		TrackingInvocationHandler handler = new TrackingInvocationHandler(this, 
1:39cd3f4: 				clientBundle, logServiceTracker, service);
1:39cd3f4: 		
1:6caae36:         synchronized(proxyLoaderCache) {
1:6caae36:             T toReturn = cachedMediate(iface, handler);
1:1d8a06f: 		
1:6caae36:             if(toReturn != null) {
1:6caae36:                 return toReturn;
1:6caae36:             } else if(iface.isInterface()) {
1:6caae36:                 toReturn = (T) Proxy.newProxyInstance(
1:39cd3f4: 					new ClassLoader(service.getClass().getClassLoader()){}, 
1:39cd3f4: 					new Class[] {iface}, handler);
1:6caae36:             } else {
1:6caae36:                 toReturn = (T) proxyClass(iface, handler,
1:39cd3f4: 					new CGLibAwareClassLoader(service.getClass().getClassLoader()));
1:6caae36:             }
1:6caae36:             proxyLoaderCache.put(iface, new WeakReference<Class<?>>(toReturn.getClass()));
1:6caae36:         
1:6caae36:             return toReturn;
1:6caae36:         }
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	@SuppressWarnings("unchecked")
1:1d8a06f: 	private <T> T cachedMediate(Class<T> iface, TrackingInvocationHandler handler) {
1:1d8a06f: 		WeakReference<Class<?>> weakReference = proxyLoaderCache.get(iface);
1:1d8a06f: 		Class<?> cached = weakReference == null ? null : weakReference.get();
1:1d8a06f: 		if(cached != null) {
1:1d8a06f: 			if(iface.isInterface()) {
1:1d8a06f: 				try {
1:1d8a06f: 					return (T) cached.getConstructor(InvocationHandler.class)
1:1d8a06f: 							.newInstance(handler);
1:1d8a06f: 				} catch (Exception e) {
1:1d8a06f: 					throw new IllegalArgumentException("Unable to mediate interface: " + iface, e);
1:1d8a06f: 				}
1:1d8a06f: 			} else {
1:6caae36:                 try {
1:6caae36:                     T t = (T) cached.getConstructor().newInstance();
1:6caae36:                     ((Factory)t).setCallbacks(new Callback[] {handler});
1:6caae36:                     return t;
1:6caae36:                 } catch (Exception e) {
1:6caae36:                     throw new IllegalArgumentException("Unable to mediate class: " + iface, e);
1:6caae36:                 }
1:1d8a06f: 			}
1:1d8a06f: 		}
1:1d8a06f: 		return null;
1:1d8a06f: 	}
1:1d8a06f: 
1:39cd3f4: 	public <T> T mediate(final ServiceReference<? extends T> ref, final Class<T> iface) {
1:39cd3f4: 		return AccessController.doPrivileged(new PrivilegedAction<T>() {
1:39cd3f4: 			public T run() {
1:39cd3f4: 				return privMediate(ref, iface);
1:39cd3f4: 			}
1:39cd3f4: 		});
1:39cd3f4: 	}
1:39cd3f4: 	
1:39cd3f4: 	@SuppressWarnings("unchecked")
1:39cd3f4: 	private <T> T privMediate(ServiceReference<? extends T> ref, Class<T> iface) {
1:39cd3f4: 
1:39cd3f4: 		TrackingInvocationHandler handler = new TrackingInvocationHandler(this, 
1:39cd3f4: 				clientBundle, logServiceTracker, ref);
1:6caae36: 		
1:6caae36:         synchronized(proxyLoaderCache) {
1:6caae36:             T toReturn = cachedMediate(iface, handler);
1:1d8a06f:             
1:6caae36:             if(toReturn != null) {
1:6caae36:                 return toReturn;
1:6caae36:             } else if(iface.isInterface()) {
1:6caae36:                 toReturn = (T) Proxy.newProxyInstance(
1:e96ec5c: 					new ClassLoader(iface.getClassLoader()){}, 
1:39cd3f4: 					new Class[] {iface}, handler);
1:6caae36:             } else {
1:6caae36:                 toReturn = (T) proxyClass(iface, handler,
1:e96ec5c: 					new CGLibAwareClassLoader(iface.getClassLoader()));
1:6caae36:             }
1:6caae36:             proxyLoaderCache.put(iface, new WeakReference<Class<?>>(toReturn.getClass()));
1:6caae36:             
1:6caae36:             return toReturn;
1:6caae36:         }
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	private Object proxyClass(Class<?> mostSpecificClass, 
1:39cd3f4: 			TrackingInvocationHandler handler, ClassLoader classLoader) {
1:39cd3f4: 		
1:39cd3f4: 		acceptClassType(mostSpecificClass);
1:39cd3f4: 		
1:39cd3f4: 		Enhancer enhancer = new Enhancer();
1:39cd3f4: 		enhancer.setClassLoader(classLoader);
1:39cd3f4: 		enhancer.setSuperclass(mostSpecificClass);
1:39cd3f4: 		enhancer.setCallback(handler);
1:39cd3f4: 		
1:39cd3f4: 		return enhancer.create();
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	private void acceptClassType(Class<?> type) {
1:39cd3f4: 		
1:39cd3f4: 		if(Modifier.isFinal(type.getModifiers())) {
1:39cd3f4: 			throw new IllegalArgumentException("The type " + type.getName() + " is final");
1:39cd3f4: 		}
1:39cd3f4: 		try {
1:39cd3f4: 			type.getConstructor();
1:39cd3f4: 		} catch (NoSuchMethodException nsme) {
1:39cd3f4: 			throw new IllegalArgumentException("The type " + type.getName() + " has no zero-argument constructor", nsme);
1:39cd3f4: 		}
1:39cd3f4: 		
1:39cd3f4: 		Class<?> toCheck = type;
1:39cd3f4: 		while(toCheck != Object.class) {
1:39cd3f4: 			for(Method m : toCheck.getDeclaredMethods()) {
1:39cd3f4: 				if(Modifier.isFinal(m.getModifiers())) {
1:39cd3f4: 					throw new IllegalArgumentException("The type hierarchy for " + type.getName() + 
1:39cd3f4: 							" has a final method " + m.getName() + " defined on " + toCheck.getName());
1:39cd3f4: 				}
1:39cd3f4: 			}
1:39cd3f4: 			toCheck = toCheck.getSuperclass();
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	public <T> Promise<T> call(T call) throws IllegalStateException {
1:39cd3f4: 		MethodCall currentInvocation = consumeCurrentInvocation();
1:39cd3f4: 		if(currentInvocation == null) throw new IllegalStateException("Incorrect API usage - this thread has no pending method calls");
1:8b05938: 		return currentInvocation.invokeAsynchronously(clientBundle, executor, ses);
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	public Promise<?> call() throws IllegalStateException {
1:39cd3f4: 		return call(null);
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	public Promise<Void> execute() throws IllegalStateException {
1:39cd3f4: 		MethodCall currentInvocation = consumeCurrentInvocation();
1:39cd3f4: 		if(currentInvocation == null) throw new IllegalStateException("Incorrect API usage - this thread has no pending method calls");
1:8b05938: 		return currentInvocation.fireAndForget(clientBundle, executor, ses);
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	void registerInvocation(MethodCall invocation) {
1:39cd3f4: 		if(invocations.putIfAbsent(Thread.currentThread(), invocation) != null) {
1:39cd3f4: 			invocations.remove(Thread.currentThread());
1:39cd3f4: 			throw new IllegalStateException("Incorrect API usage - this thread already has a pending method call");
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	MethodCall consumeCurrentInvocation() {
1:39cd3f4: 		return invocations.remove(Thread.currentThread());
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8b05938
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ScheduledExecutorService;
/////////////////////////////////////////////////////////////////////////
1: 	private final ScheduledExecutorService ses;
1: 
1: 	public AsyncService(Bundle clientBundle, ExecutorService executor, ScheduledExecutorService ses, ServiceTracker<LogService, LogService> logServiceTracker) {
1: 		this.ses = ses;
/////////////////////////////////////////////////////////////////////////
1: 		return currentInvocation.invokeAsynchronously(clientBundle, executor, ses);
/////////////////////////////////////////////////////////////////////////
1: 		return currentInvocation.fireAndForget(clientBundle, executor, ses);
commit:6caae36
/////////////////////////////////////////////////////////////////////////
1: import net.sf.cglib.proxy.Callback;
1: import net.sf.cglib.proxy.Factory;
/////////////////////////////////////////////////////////////////////////
1:         synchronized(proxyLoaderCache) {
1:             T toReturn = cachedMediate(iface, handler);
1:             if(toReturn != null) {
1:                 return toReturn;
1:             } else if(iface.isInterface()) {
1:                 toReturn = (T) Proxy.newProxyInstance(
1:             } else {
1:                 toReturn = (T) proxyClass(iface, handler,
1:             }
1:             proxyLoaderCache.put(iface, new WeakReference<Class<?>>(toReturn.getClass()));
1:         
1:             return toReturn;
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     T t = (T) cached.getConstructor().newInstance();
1:                     ((Factory)t).setCallbacks(new Callback[] {handler});
1:                     return t;
1:                 } catch (Exception e) {
1:                     throw new IllegalArgumentException("Unable to mediate class: " + iface, e);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         synchronized(proxyLoaderCache) {
1:             T toReturn = cachedMediate(iface, handler);
1:             
1:             if(toReturn != null) {
1:                 return toReturn;
1:             } else if(iface.isInterface()) {
1:                 toReturn = (T) Proxy.newProxyInstance(
1:             } else {
1:                 toReturn = (T) proxyClass(iface, handler,
1:             }
1:             proxyLoaderCache.put(iface, new WeakReference<Class<?>>(toReturn.getClass()));
1:             
1:             return toReturn;
1:         }
commit:1d8a06f
/////////////////////////////////////////////////////////////////////////
1: import java.lang.ref.WeakReference;
1: import java.lang.reflect.InvocationHandler;
1: import java.util.WeakHashMap;
/////////////////////////////////////////////////////////////////////////
1: import net.sf.cglib.proxy.Enhancer;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * It is important to use both weak keys *and* values in this map. The
1: 	 * key must be weakly held because it is typically a type from another 
1: 	 * bundle, and would represent a classloader leak if held after that 
1: 	 * bundle was uninstalled. The value must be weak because it either 
1: 	 * extends or implements the type that is the key, and so holds a strong 
1: 	 * reference to the key, which again would cause a leak.
1: 	 * 
1: 	 * This cache may drop the value type if no mediators are held, however in
1: 	 * this situation we can simply create a new value without risking exploding
1: 	 * the heap.
1: 	 */
1: 	private final WeakHashMap<Class<?>, WeakReference<Class<?>>> proxyLoaderCache
1: 		= new WeakHashMap<Class<?>, WeakReference<Class<?>>>();
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	void clear() {
1: 		proxyLoaderCache.clear();
1: 	}
/////////////////////////////////////////////////////////////////////////
0: 		T toReturn = cachedMediate(iface, handler);
1: 		
0: 		if(toReturn != null) {
0: 			return toReturn;
0: 		} else if(iface.isInterface()) {
/////////////////////////////////////////////////////////////////////////
1: 	@SuppressWarnings("unchecked")
1: 	private <T> T cachedMediate(Class<T> iface, TrackingInvocationHandler handler) {
1: 		WeakReference<Class<?>> weakReference = proxyLoaderCache.get(iface);
1: 		Class<?> cached = weakReference == null ? null : weakReference.get();
1: 		if(cached != null) {
1: 			if(iface.isInterface()) {
1: 				try {
1: 					return (T) cached.getConstructor(InvocationHandler.class)
1: 							.newInstance(handler);
1: 				} catch (Exception e) {
1: 					throw new IllegalArgumentException("Unable to mediate interface: " + iface, e);
1: 				}
1: 			} else {
0: 				return (T) Enhancer.create(cached, handler);
1: 			}
1: 		}
1: 		return null;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
0: 		T toReturn = cachedMediate(iface, handler);
1: 		
0: 		if(toReturn != null) {
0: 			return toReturn;
0: 		} else if(iface.isInterface()) {
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e96ec5c
/////////////////////////////////////////////////////////////////////////
1: 					new ClassLoader(iface.getClassLoader()){}, 
1: 					new CGLibAwareClassLoader(iface.getClassLoader()));
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.impl;
1: 
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Modifier;
1: import java.lang.reflect.Proxy;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: import java.util.concurrent.ExecutorService;
1: 
0: import net.sf.cglib.proxy.Enhancer;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.async.Async;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.promise.Promise;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: 
1: public class AsyncService implements Async {
1: 
1: 	private static final class CGLibAwareClassLoader extends ClassLoader {
1: 		private final ClassLoader serviceTypeLoader;
1: 
1: 		private CGLibAwareClassLoader(Bundle registeringBundle) {
1: 			this.serviceTypeLoader = registeringBundle.adapt(BundleWiring.class).getClassLoader();
1: 		}
1: 
1: 		private CGLibAwareClassLoader(ClassLoader loader) {
1: 			this.serviceTypeLoader = loader;
1: 		}
1: 
1: 		@Override
1: 		protected Class<?> findClass(String var0)
1: 				throws ClassNotFoundException {
1: 			if(var0.startsWith("net.sf.cglib")) {
1: 				return AsyncService.class.getClassLoader().loadClass(var0);
1: 			} else {
1: 				return serviceTypeLoader.loadClass(var0);
1: 			}
1: 		}
1: 	}
1: 
1: 	private final Bundle clientBundle;
1: 	
1: 	private final ConcurrentMap<Thread, MethodCall> invocations = new ConcurrentHashMap<Thread, MethodCall>();
1: 	
1: 	private final ExecutorService executor;
1: 	
1: 	private final ServiceTracker<LogService, LogService> logServiceTracker;
1: 	
0: 	public AsyncService(Bundle clientBundle, ExecutorService executor, ServiceTracker<LogService, LogService> logServiceTracker) {
1: 		super();
1: 		this.clientBundle = clientBundle;
1: 		this.executor = executor;
1: 		this.logServiceTracker = logServiceTracker;
1: 	}
1: 
1: 	public <T> T mediate(final T service, final Class<T> iface) {
1: 		return AccessController.doPrivileged(new PrivilegedAction<T>() {
1: 			public T run() {
1: 				return privMediate(service, iface);
1: 			}
1: 		});
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
1: 	private <T> T privMediate(T service, Class<T> iface) {
1: 		
1: 		TrackingInvocationHandler handler = new TrackingInvocationHandler(this, 
1: 				clientBundle, logServiceTracker, service);
1: 		
0: 		if(iface.isInterface()) {
0: 			return (T) Proxy.newProxyInstance(
1: 					new ClassLoader(service.getClass().getClassLoader()){}, 
1: 					new Class[] {iface}, handler);
1: 		} else {
0: 			return (T) proxyClass(iface, handler, 
1: 					new CGLibAwareClassLoader(service.getClass().getClassLoader()));
1: 		}
1: 	}
1: 
1: 	public <T> T mediate(final ServiceReference<? extends T> ref, final Class<T> iface) {
1: 		return AccessController.doPrivileged(new PrivilegedAction<T>() {
1: 			public T run() {
1: 				return privMediate(ref, iface);
1: 			}
1: 		});
1: 	}
1: 	
1: 	@SuppressWarnings("unchecked")
1: 	private <T> T privMediate(ServiceReference<? extends T> ref, Class<T> iface) {
1: 
1: 		TrackingInvocationHandler handler = new TrackingInvocationHandler(this, 
1: 				clientBundle, logServiceTracker, ref);
1: 		
0: 		Bundle registeringBundle = ref.getBundle();
1: 
0: 		if(iface.isInterface()) {
0: 			return (T) Proxy.newProxyInstance(
0: 					new ClassLoader(registeringBundle.adapt(BundleWiring.class).getClassLoader()){}, 
1: 					new Class[] {iface}, handler);
1: 		} else {
0: 			return (T) proxyClass(iface, handler, 
0: 					new CGLibAwareClassLoader(registeringBundle));
1: 		}
1: 	}
1: 
1: 	private Object proxyClass(Class<?> mostSpecificClass, 
1: 			TrackingInvocationHandler handler, ClassLoader classLoader) {
1: 		
1: 		acceptClassType(mostSpecificClass);
1: 		
1: 		Enhancer enhancer = new Enhancer();
1: 		enhancer.setClassLoader(classLoader);
1: 		enhancer.setSuperclass(mostSpecificClass);
1: 		enhancer.setCallback(handler);
1: 		
1: 		return enhancer.create();
1: 	}
1: 
1: 	private void acceptClassType(Class<?> type) {
1: 		
1: 		if(Modifier.isFinal(type.getModifiers())) {
1: 			throw new IllegalArgumentException("The type " + type.getName() + " is final");
1: 		}
1: 		try {
1: 			type.getConstructor();
1: 		} catch (NoSuchMethodException nsme) {
1: 			throw new IllegalArgumentException("The type " + type.getName() + " has no zero-argument constructor", nsme);
1: 		}
1: 		
1: 		Class<?> toCheck = type;
1: 		while(toCheck != Object.class) {
1: 			for(Method m : toCheck.getDeclaredMethods()) {
1: 				if(Modifier.isFinal(m.getModifiers())) {
1: 					throw new IllegalArgumentException("The type hierarchy for " + type.getName() + 
1: 							" has a final method " + m.getName() + " defined on " + toCheck.getName());
1: 				}
1: 			}
1: 			toCheck = toCheck.getSuperclass();
1: 		}
1: 	}
1: 
1: 	public <T> Promise<T> call(T call) throws IllegalStateException {
1: 		MethodCall currentInvocation = consumeCurrentInvocation();
1: 		if(currentInvocation == null) throw new IllegalStateException("Incorrect API usage - this thread has no pending method calls");
0: 		return currentInvocation.invokeAsynchronously(clientBundle, executor);
1: 	}
1: 
1: 	public Promise<?> call() throws IllegalStateException {
1: 		return call(null);
1: 	}
1: 
1: 	public Promise<Void> execute() throws IllegalStateException {
1: 		MethodCall currentInvocation = consumeCurrentInvocation();
1: 		if(currentInvocation == null) throw new IllegalStateException("Incorrect API usage - this thread has no pending method calls");
0: 		return currentInvocation.fireAndForget(clientBundle, executor);
1: 	}
1: 
1: 	void registerInvocation(MethodCall invocation) {
1: 		if(invocations.putIfAbsent(Thread.currentThread(), invocation) != null) {
1: 			invocations.remove(Thread.currentThread());
1: 			throw new IllegalStateException("Incorrect API usage - this thread already has a pending method call");
1: 		}
1: 	}
1: 
1: 	MethodCall consumeCurrentInvocation() {
1: 		return invocations.remove(Thread.currentThread());
1: 	}
1: 
1: }
============================================================================