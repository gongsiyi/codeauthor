1:1409552: /*
1:1409552:  * Licensed to the Apache Software Foundation (ASF) under one
1:1409552:  * or more contributor license agreements.  See the NOTICE file
1:1409552:  * distributed with this work for additional information
1:1409552:  * regarding copyright ownership.  The ASF licenses this file
1:1409552:  * to you under the Apache License, Version 2.0 (the
1:1409552:  * "License"); you may not use this file except in compliance
1:1409552:  * with the License.  You may obtain a copy of the License at
1:1409552:  *
1:1409552:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1409552:  *
1:1409552:  * Unless required by applicable law or agreed to in writing,
1:1409552:  * software distributed under the License is distributed on an
1:1409552:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:1409552:  * KIND, either express or implied.  See the License for the
1:1409552:  * specific language governing permissions and limitations
1:1409552:  * under the License.
1:1409552:  */
1:1409552: package org.apache.aries.util;
1:1409552: 
1:1409552: 
1:1409552: import static org.junit.Assert.assertEquals;
1:1409552: import static org.junit.Assert.assertFalse;
1:1409552: import static org.junit.Assert.assertNotNull;
1:1409552: import static org.junit.Assert.assertNull;
1:1409552: import static org.junit.Assert.assertTrue;
1:1409552: import static org.junit.Assert.fail;
1:1409552: 
1:1409552: import org.junit.Test;
1:1409552: import org.osgi.framework.Version;
1:1409552: 
1:1409552: public class VersionRangeTest
1:1409552: {
1:1409552:   /**
1:1409552:    * Test the version range created correctly
1:1409552:    * @throws Exception
1:1409552:    */
1:1409552:   
1:1409552:   @Test
1:1409552:   public void testVersionRange() throws Exception {
1:1409552:     String version1 = "[1.2.3, 4.5.6]";
1:1409552:     String version2="(1, 2]";
1:1409552:     String version3="[2,4)";
1:1409552:     String version4="(1,2)";
1:1409552:     String version5="2";
1:1409552:     String version6 = "2.3";
1:1409552:     String version7="[1.2.3.q, 2.3.4.p)";
1:1409552:     String version8="1.2.2.5";
1:1409552:     String version9="a.b.c";
1:1409552:     String version10=null;
1:1409552:     String version11="";
1:1409552:     String version12="\"[1.2.3, 4.5.6]\"";
1:1409552:     
1:1409552:     VersionRange vr = new VersionRange(version1);
1:1409552:     assertEquals("The value is wrong", "1.2.3", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertEquals("The value is wrong", "4.5.6", vr.getMaximumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:1409552:     
1:1409552:     vr = new VersionRange(version2);
1:1409552:     assertEquals("The value is wrong", "1.0.0", vr.getMinimumVersion().toString());
1:1409552:     assertTrue("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertEquals("The value is wrong", "2.0.0", vr.getMaximumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:1409552:     
1:1409552:     vr = new VersionRange(version3);
1:1409552:     
1:1409552:     assertEquals("The value is wrong", "2.0.0", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertEquals("The value is wrong", "4.0.0", vr.getMaximumVersion().toString());
1:1409552:     assertTrue("The value is wrong", vr.isMaximumExclusive());
1:1409552:     
1:1409552:     vr = new VersionRange(version4);
1:1409552:     
1:1409552:     assertEquals("The value is wrong", "1.0.0", vr.getMinimumVersion().toString());
1:1409552:     assertTrue("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertEquals("The value is wrong", "2.0.0", vr.getMaximumVersion().toString());
1:1409552:     assertTrue("The value is wrong", vr.isMaximumExclusive());
1:1409552:     
1:1409552:     vr = new VersionRange(version5);
1:1409552:     assertEquals("The value is wrong", "2.0.0", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertNull("The value is wrong", vr.getMaximumVersion());
1:1409552:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:1409552:     
1:1409552:     vr = new VersionRange(version6);
1:1409552:     assertEquals("The value is wrong", "2.3.0", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertNull("The value is wrong", vr.getMaximumVersion());
1:1409552:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:1409552:     
1:1409552:     vr = new VersionRange(version7);
1:1409552:     assertEquals("The value is wrong", "1.2.3.q", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertEquals("The value is wrong", "2.3.4.p", vr.getMaximumVersion().toString());
1:1409552:     assertTrue("The value is wrong", vr.isMaximumExclusive());
1:1409552:     
1:1409552:     vr = new VersionRange(version8);
1:1409552:     assertEquals("The value is wrong", "1.2.2.5", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertNull("The value is wrong", vr.getMaximumVersion());
1:1409552:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:1409552:     boolean exception = false;
1:1409552:     try {
1:1409552:     vr = new VersionRange(version9);
1:1409552:     } catch (Exception e){
1:1409552:       exception = true;
1:1409552:     }
1:1409552:     
1:1409552:     assertTrue("The value is wrong", exception);
1:1409552:     boolean exceptionNull = false;
1:1409552:     try {
1:1409552:       vr = new VersionRange(version10);
1:1409552:     } catch (Exception e){
1:1409552:       exceptionNull = true;
1:1409552:     }
1:1409552:     assertTrue("The value is wrong", exceptionNull);
1:1409552:     // empty version should be defaulted to >=0.0.0
1:1409552:     vr = new VersionRange(version11);
1:1409552:     assertEquals("The value is wrong", "0.0.0", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertNull("The value is wrong", vr.getMaximumVersion());
1:1409552:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:1409552: 
1:1409552:     vr = new VersionRange(version12);
1:1409552:     assertEquals("The value is wrong", "1.2.3", vr.getMinimumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:1409552:     assertEquals("The value is wrong", "4.5.6", vr.getMaximumVersion().toString());
1:1409552:     assertFalse("The value is wrong", vr.isMaximumExclusive());  
1:1409552:   }
1:1409552:   
1:1409552:   @Test
1:1409552:   public void testInvalidVersions() throws Exception
1:1409552:   {
1:1409552:     try {
1:1409552:       new VersionRange("a");
1:1409552:       assertTrue("Should have thrown an exception", false);
1:1409552:     } catch (IllegalArgumentException e) {
1:1409552:     }
1:1409552:     
1:1409552:     try {
1:1409552:       new VersionRange("[1.0.0,1.0.1]", true);
1:1409552:       assertTrue("Should have thrown an exception", false);
1:1409552:     } catch (IllegalArgumentException e) {
1:1409552:     }
1:1409552:   }
1:1409552:   
1:1409552:   @Test
1:1409552:   public void testExactVersion() throws Exception 
1:1409552:   {
1:1409552:     VersionRange vr;
1:1409552:     try {
1:1409552:       vr = new VersionRange("[1.0.0, 2.0.0]", true);
1:1409552:       fail("from 1 to 2 not excludsive is not an exact range");
1:1409552:     } catch (IllegalArgumentException e) {
1:1409552:       // expected
1:1409552:     }
1:1409552:     
1:1409552:     vr = new VersionRange("[1.0.0, 1.0.0]", true);
1:1409552:     assertTrue(vr.isExactVersion());
1:1409552:     
1:1409552:     try {
1:1409552:       vr = new VersionRange("(1.0.0, 1.0.0]", true);
1:1409552:       fail("from 1 (not including 1) to 1, is not valid");
1:1409552:     } catch (IllegalArgumentException e) {
1:1409552:       // expected
1:1409552:     }
1:1409552:     
1:1409552:     try {
1:1409552:       vr = new VersionRange("[1.0.0, 1.0.0)", true);
1:1409552:       fail("sfrom 1 to 1 (not including 1), is not valid");
1:1409552:     } catch (IllegalArgumentException e) {
1:1409552:       // expected
1:1409552:     }
1:1409552: 
1:1409552:     vr = new VersionRange("1.0.0", true);
1:1409552:     assertTrue(vr.isExactVersion());
1:1409552: 
1:1409552:     vr = new VersionRange("1.0.0", false);
1:1409552:     assertFalse(vr.isExactVersion());
1:1409552: 
1:1409552:     vr = new VersionRange("[1.0.0, 2.0.0]");
1:1409552:     assertFalse(vr.isExactVersion());
1:1409552:     
1:1409552:     vr = new VersionRange("[1.0.0, 1.0.0]");
1:1409552:     assertTrue(vr.isExactVersion());
1:1409552: 
1:1409552:     vr = new VersionRange("1.0.0", true);
1:1409552:     assertEquals(new Version("1.0.0"), vr.getMinimumVersion());
1:1409552:     assertTrue(vr.isExactVersion());
1:1409552:     
1:1409552:     vr = new VersionRange("1.0.0", false);
1:1409552:     assertEquals(new Version("1.0.0"), vr.getMinimumVersion());
1:1409552:     assertNull(vr.getMaximumVersion());
1:1409552:     assertFalse(vr.isExactVersion());
1:1409552:     
1:1409552:     // don't throw any silly exceptions
1:1409552:     vr = new VersionRange("[1.0.0,2.0.0)", false);
1:1409552:     assertFalse(vr.isExactVersion());
1:1409552:     
1:1409552:     vr = new VersionRange("[1.0.0, 2.0.0]");
1:1409552:     assertFalse(vr.isExactVersion());
1:1409552: 
1:1409552:     vr = new VersionRange("[1.0.0, 1.0.0]");
1:1409552:     assertTrue(vr.isExactVersion());
1:1409552: 
1:1409552:   }
1:1409552:   
1:1409552:   @Test
1:1409552:   public void testMatches()
1:1409552:   {
1:1409552:     VersionRange vr = new VersionRange("[1.0.0, 2.0.0]");
1:1409552:     
1:1409552:     assertFalse(vr.matches(new Version(0,9,0)));
1:1409552:     assertFalse(vr.matches(new Version(2,1,0)));
1:1409552:     assertTrue(vr.matches(new Version(2,0,0)));
1:1409552:     assertTrue(vr.matches(new Version(1,0,0)));
1:1409552:     assertTrue(vr.matches(new Version(1,5,0)));
1:1409552:     
1:1409552:     vr = new VersionRange("[1.0.0, 2.0.0)");
1:1409552:     
1:1409552:     assertFalse(vr.matches(new Version(0,9,0)));
1:1409552:     assertFalse(vr.matches(new Version(2,1,0)));
1:1409552:     assertFalse(vr.matches(new Version(2,0,0)));
1:1409552:     assertTrue(vr.matches(new Version(1,0,0)));
1:1409552:     assertTrue(vr.matches(new Version(1,5,0)));
1:1409552: 
1:1409552:     vr = new VersionRange("(1.0.0, 2.0.0)");
1:1409552:     
1:1409552:     assertFalse(vr.matches(new Version(0,9,0)));
1:1409552:     assertFalse(vr.matches(new Version(2,1,0)));
1:1409552:     assertFalse(vr.matches(new Version(2,0,0)));
1:1409552:     assertFalse(vr.matches(new Version(1,0,0)));
1:1409552:     assertTrue(vr.matches(new Version(1,5,0)));
1:1409552: 
1:1409552:     vr = new VersionRange("[1.0.0, 1.0.0]");
1:1409552:     assertFalse(vr.matches(new Version(0,9,0)));
1:1409552:     assertFalse(vr.matches(new Version(2,0,0)));
1:1409552:     assertTrue(vr.matches(new Version(1,0,0)));
1:1409552:     assertFalse(vr.matches(new Version(1,5,0)));
1:1409552:     assertFalse(vr.matches(new Version(1,9,9)));
1:1409552:   }
1:1409552:   
1:1409552:   @Test
1:1409552:   public void testIntersectVersionRange_Valid1()
1:1409552:   {
1:1409552:     VersionRange v1 = new VersionRange("[1.0.0,3.0.0]");
1:1409552:     VersionRange v2 = new VersionRange("[2.0.0,3.0.0)");
1:1409552:     VersionRange result = v1.intersect(v2);
1:1409552:     assertNotNull(result);
1:1409552:     assertEquals("[2.0.0,3.0.0)", result.toString());
1:1409552:   }
1:1409552:   
1:1409552:   @Test
1:1409552:   public void testIntersectVersionRange_Valid2()
1:1409552:   {
1:1409552:     VersionRange v1 = new VersionRange("[1.0.0,3.0.0)");
1:1409552:     VersionRange v2 = new VersionRange("(2.0.0,3.0.0]");
1:1409552:     VersionRange result = v1.intersect(v2);
1:1409552:     assertNotNull(result);
1:1409552:     assertEquals("(2.0.0,3.0.0)", result.toString());
1:1409552:   }
1:1409552: 
1:1409552:   @Test
1:1409552:   public void testIntersectVersionRange_Valid3()
1:1409552:   {
1:1409552:     VersionRange v1 = new VersionRange("[2.0.0,2.0.0]");
1:1409552:     VersionRange v2 = new VersionRange("[1.0.0,3.0.0]");
1:1409552:     VersionRange result = v1.intersect(v2);
1:1409552:     assertNotNull(result);
1:1409552:     assertEquals("[2.0.0,2.0.0]", result.toString());
1:1409552:   }
1:1409552:   
1:1409552:   @Test
1:1409552:   public void testIntersectVersionRange_Invalid1()
1:1409552:   {
1:1409552:     VersionRange v1 = new VersionRange("[1.0.0,2.0.0]");
1:1409552:     VersionRange v2 = new VersionRange("(2.0.0,3.0.0]");
1:1409552:     VersionRange result = v1.intersect(v2);
1:1409552:     assertNull(result);
1:1409552:   }
1:1409552: 
1:1409552:   @Test
1:1409552:   public void testIntersectVersionRange_Invalid2()
1:1409552:   {
1:1409552:     VersionRange v1 = new VersionRange("[1.0.0,2.0.0)");
1:1409552:     VersionRange v2 = new VersionRange("[2.0.0,3.0.0]");
1:1409552:     VersionRange result = v1.intersect(v2);
1:1409552:     assertNull(result);
1:1409552:   }
1:1409552: 
1:1409552:   @Test
1:1409552:   public void testIntersectVersionRange_Invalid3()
1:1409552:   {
1:1409552:     VersionRange v1 = new VersionRange("[1.0.0,1.0.0]");
1:1409552:     VersionRange v2 = new VersionRange("[2.0.0,2.0.0]");
1:1409552:     VersionRange result = v1.intersect(v2);
1:1409552:     assertNull(result);
1:1409552:   }
1:1409552: 
1:1409552: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:1409552
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.Version;
1: 
1: public class VersionRangeTest
1: {
1:   /**
1:    * Test the version range created correctly
1:    * @throws Exception
1:    */
1:   
1:   @Test
1:   public void testVersionRange() throws Exception {
1:     String version1 = "[1.2.3, 4.5.6]";
1:     String version2="(1, 2]";
1:     String version3="[2,4)";
1:     String version4="(1,2)";
1:     String version5="2";
1:     String version6 = "2.3";
1:     String version7="[1.2.3.q, 2.3.4.p)";
1:     String version8="1.2.2.5";
1:     String version9="a.b.c";
1:     String version10=null;
1:     String version11="";
1:     String version12="\"[1.2.3, 4.5.6]\"";
1:     
1:     VersionRange vr = new VersionRange(version1);
1:     assertEquals("The value is wrong", "1.2.3", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertEquals("The value is wrong", "4.5.6", vr.getMaximumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:     
1:     vr = new VersionRange(version2);
1:     assertEquals("The value is wrong", "1.0.0", vr.getMinimumVersion().toString());
1:     assertTrue("The value is wrong", vr.isMinimumExclusive());
1:     assertEquals("The value is wrong", "2.0.0", vr.getMaximumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:     
1:     vr = new VersionRange(version3);
1:     
1:     assertEquals("The value is wrong", "2.0.0", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertEquals("The value is wrong", "4.0.0", vr.getMaximumVersion().toString());
1:     assertTrue("The value is wrong", vr.isMaximumExclusive());
1:     
1:     vr = new VersionRange(version4);
1:     
1:     assertEquals("The value is wrong", "1.0.0", vr.getMinimumVersion().toString());
1:     assertTrue("The value is wrong", vr.isMinimumExclusive());
1:     assertEquals("The value is wrong", "2.0.0", vr.getMaximumVersion().toString());
1:     assertTrue("The value is wrong", vr.isMaximumExclusive());
1:     
1:     vr = new VersionRange(version5);
1:     assertEquals("The value is wrong", "2.0.0", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertNull("The value is wrong", vr.getMaximumVersion());
1:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:     
1:     vr = new VersionRange(version6);
1:     assertEquals("The value is wrong", "2.3.0", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertNull("The value is wrong", vr.getMaximumVersion());
1:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:     
1:     vr = new VersionRange(version7);
1:     assertEquals("The value is wrong", "1.2.3.q", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertEquals("The value is wrong", "2.3.4.p", vr.getMaximumVersion().toString());
1:     assertTrue("The value is wrong", vr.isMaximumExclusive());
1:     
1:     vr = new VersionRange(version8);
1:     assertEquals("The value is wrong", "1.2.2.5", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertNull("The value is wrong", vr.getMaximumVersion());
1:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1:     boolean exception = false;
1:     try {
1:     vr = new VersionRange(version9);
1:     } catch (Exception e){
1:       exception = true;
1:     }
1:     
1:     assertTrue("The value is wrong", exception);
1:     boolean exceptionNull = false;
1:     try {
1:       vr = new VersionRange(version10);
1:     } catch (Exception e){
1:       exceptionNull = true;
1:     }
1:     assertTrue("The value is wrong", exceptionNull);
1:     // empty version should be defaulted to >=0.0.0
1:     vr = new VersionRange(version11);
1:     assertEquals("The value is wrong", "0.0.0", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertNull("The value is wrong", vr.getMaximumVersion());
1:     assertFalse("The value is wrong", vr.isMaximumExclusive());
1: 
1:     vr = new VersionRange(version12);
1:     assertEquals("The value is wrong", "1.2.3", vr.getMinimumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMinimumExclusive());
1:     assertEquals("The value is wrong", "4.5.6", vr.getMaximumVersion().toString());
1:     assertFalse("The value is wrong", vr.isMaximumExclusive());  
1:   }
1:   
1:   @Test
1:   public void testInvalidVersions() throws Exception
1:   {
1:     try {
1:       new VersionRange("a");
1:       assertTrue("Should have thrown an exception", false);
1:     } catch (IllegalArgumentException e) {
1:     }
1:     
1:     try {
1:       new VersionRange("[1.0.0,1.0.1]", true);
1:       assertTrue("Should have thrown an exception", false);
1:     } catch (IllegalArgumentException e) {
1:     }
1:   }
1:   
1:   @Test
1:   public void testExactVersion() throws Exception 
1:   {
1:     VersionRange vr;
1:     try {
1:       vr = new VersionRange("[1.0.0, 2.0.0]", true);
1:       fail("from 1 to 2 not excludsive is not an exact range");
1:     } catch (IllegalArgumentException e) {
1:       // expected
1:     }
1:     
1:     vr = new VersionRange("[1.0.0, 1.0.0]", true);
1:     assertTrue(vr.isExactVersion());
1:     
1:     try {
1:       vr = new VersionRange("(1.0.0, 1.0.0]", true);
1:       fail("from 1 (not including 1) to 1, is not valid");
1:     } catch (IllegalArgumentException e) {
1:       // expected
1:     }
1:     
1:     try {
1:       vr = new VersionRange("[1.0.0, 1.0.0)", true);
1:       fail("sfrom 1 to 1 (not including 1), is not valid");
1:     } catch (IllegalArgumentException e) {
1:       // expected
1:     }
1: 
1:     vr = new VersionRange("1.0.0", true);
1:     assertTrue(vr.isExactVersion());
1: 
1:     vr = new VersionRange("1.0.0", false);
1:     assertFalse(vr.isExactVersion());
1: 
1:     vr = new VersionRange("[1.0.0, 2.0.0]");
1:     assertFalse(vr.isExactVersion());
1:     
1:     vr = new VersionRange("[1.0.0, 1.0.0]");
1:     assertTrue(vr.isExactVersion());
1: 
1:     vr = new VersionRange("1.0.0", true);
1:     assertEquals(new Version("1.0.0"), vr.getMinimumVersion());
1:     assertTrue(vr.isExactVersion());
1:     
1:     vr = new VersionRange("1.0.0", false);
1:     assertEquals(new Version("1.0.0"), vr.getMinimumVersion());
1:     assertNull(vr.getMaximumVersion());
1:     assertFalse(vr.isExactVersion());
1:     
1:     // don't throw any silly exceptions
1:     vr = new VersionRange("[1.0.0,2.0.0)", false);
1:     assertFalse(vr.isExactVersion());
1:     
1:     vr = new VersionRange("[1.0.0, 2.0.0]");
1:     assertFalse(vr.isExactVersion());
1: 
1:     vr = new VersionRange("[1.0.0, 1.0.0]");
1:     assertTrue(vr.isExactVersion());
1: 
1:   }
1:   
1:   @Test
1:   public void testMatches()
1:   {
1:     VersionRange vr = new VersionRange("[1.0.0, 2.0.0]");
1:     
1:     assertFalse(vr.matches(new Version(0,9,0)));
1:     assertFalse(vr.matches(new Version(2,1,0)));
1:     assertTrue(vr.matches(new Version(2,0,0)));
1:     assertTrue(vr.matches(new Version(1,0,0)));
1:     assertTrue(vr.matches(new Version(1,5,0)));
1:     
1:     vr = new VersionRange("[1.0.0, 2.0.0)");
1:     
1:     assertFalse(vr.matches(new Version(0,9,0)));
1:     assertFalse(vr.matches(new Version(2,1,0)));
1:     assertFalse(vr.matches(new Version(2,0,0)));
1:     assertTrue(vr.matches(new Version(1,0,0)));
1:     assertTrue(vr.matches(new Version(1,5,0)));
1: 
1:     vr = new VersionRange("(1.0.0, 2.0.0)");
1:     
1:     assertFalse(vr.matches(new Version(0,9,0)));
1:     assertFalse(vr.matches(new Version(2,1,0)));
1:     assertFalse(vr.matches(new Version(2,0,0)));
1:     assertFalse(vr.matches(new Version(1,0,0)));
1:     assertTrue(vr.matches(new Version(1,5,0)));
1: 
1:     vr = new VersionRange("[1.0.0, 1.0.0]");
1:     assertFalse(vr.matches(new Version(0,9,0)));
1:     assertFalse(vr.matches(new Version(2,0,0)));
1:     assertTrue(vr.matches(new Version(1,0,0)));
1:     assertFalse(vr.matches(new Version(1,5,0)));
1:     assertFalse(vr.matches(new Version(1,9,9)));
1:   }
1:   
1:   @Test
1:   public void testIntersectVersionRange_Valid1()
1:   {
1:     VersionRange v1 = new VersionRange("[1.0.0,3.0.0]");
1:     VersionRange v2 = new VersionRange("[2.0.0,3.0.0)");
1:     VersionRange result = v1.intersect(v2);
1:     assertNotNull(result);
1:     assertEquals("[2.0.0,3.0.0)", result.toString());
1:   }
1:   
1:   @Test
1:   public void testIntersectVersionRange_Valid2()
1:   {
1:     VersionRange v1 = new VersionRange("[1.0.0,3.0.0)");
1:     VersionRange v2 = new VersionRange("(2.0.0,3.0.0]");
1:     VersionRange result = v1.intersect(v2);
1:     assertNotNull(result);
1:     assertEquals("(2.0.0,3.0.0)", result.toString());
1:   }
1: 
1:   @Test
1:   public void testIntersectVersionRange_Valid3()
1:   {
1:     VersionRange v1 = new VersionRange("[2.0.0,2.0.0]");
1:     VersionRange v2 = new VersionRange("[1.0.0,3.0.0]");
1:     VersionRange result = v1.intersect(v2);
1:     assertNotNull(result);
1:     assertEquals("[2.0.0,2.0.0]", result.toString());
1:   }
1:   
1:   @Test
1:   public void testIntersectVersionRange_Invalid1()
1:   {
1:     VersionRange v1 = new VersionRange("[1.0.0,2.0.0]");
1:     VersionRange v2 = new VersionRange("(2.0.0,3.0.0]");
1:     VersionRange result = v1.intersect(v2);
1:     assertNull(result);
1:   }
1: 
1:   @Test
1:   public void testIntersectVersionRange_Invalid2()
1:   {
1:     VersionRange v1 = new VersionRange("[1.0.0,2.0.0)");
1:     VersionRange v2 = new VersionRange("[2.0.0,3.0.0]");
1:     VersionRange result = v1.intersect(v2);
1:     assertNull(result);
1:   }
1: 
1:   @Test
1:   public void testIntersectVersionRange_Invalid3()
1:   {
1:     VersionRange v1 = new VersionRange("[1.0.0,1.0.0]");
1:     VersionRange v2 = new VersionRange("[2.0.0,2.0.0]");
1:     VersionRange result = v1.intersect(v2);
1:     assertNull(result);
1:   }
1: 
1: }
============================================================================