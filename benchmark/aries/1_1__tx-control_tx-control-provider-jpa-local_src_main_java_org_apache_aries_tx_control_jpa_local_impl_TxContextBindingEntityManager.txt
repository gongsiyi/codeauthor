1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:e7c1ea5: package org.apache.aries.tx.control.jpa.local.impl;
1:e7c1ea5: 
1:e7c1ea5: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:e7c1ea5: 
1:e7c1ea5: import java.util.UUID;
1:e7c1ea5: 
1:e7c1ea5: import javax.persistence.EntityManager;
1:e7c1ea5: import javax.persistence.EntityManagerFactory;
1:e7c1ea5: import javax.persistence.PersistenceException;
1:e7c1ea5: 
1:e7c1ea5: import org.apache.aries.tx.control.jpa.common.impl.EntityManagerWrapper;
1:e7c1ea5: import org.apache.aries.tx.control.jpa.common.impl.ScopedEntityManagerWrapper;
1:e7c1ea5: import org.apache.aries.tx.control.jpa.common.impl.TxEntityManagerWrapper;
1:e7c1ea5: import org.osgi.service.transaction.control.LocalResource;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionContext;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionControl;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionException;
1:e7c1ea5: 
1:e7c1ea5: public class TxContextBindingEntityManager extends EntityManagerWrapper {
1:e7c1ea5: 
1:e7c1ea5: 	private final TransactionControl	txControl;
1:e7c1ea5: 	private final UUID					resourceId;
1:e7c1ea5: 	private final EntityManagerFactory	emf;
1:e7c1ea5: 
1:e7c1ea5: 	public TxContextBindingEntityManager(TransactionControl txControl,
1:e7c1ea5: 			EntityManagerFactory emf, UUID resourceId) {
1:e7c1ea5: 		this.txControl = txControl;
1:e7c1ea5: 		this.emf = emf;
1:e7c1ea5: 		this.resourceId = resourceId;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	protected final EntityManager getRealEntityManager() {
1:e7c1ea5: 
1:e7c1ea5: 		TransactionContext txContext = txControl.getCurrentContext();
1:e7c1ea5: 
1:e7c1ea5: 		if (txContext == null) {
1:e7c1ea5: 			throw new TransactionException("The resource " + emf
1:e7c1ea5: 					+ " cannot be accessed outside of an active Transaction Context");
1:e7c1ea5: 		}
1:e7c1ea5: 
1:e7c1ea5: 		EntityManager existing = (EntityManager) txContext.getScopedValue(resourceId);
1:e7c1ea5: 
1:e7c1ea5: 		if (existing != null) {
1:e7c1ea5: 			return existing;
1:e7c1ea5: 		}
1:e7c1ea5: 
1:e7c1ea5: 		EntityManager toReturn;
1:e7c1ea5: 		EntityManager toClose;
1:e7c1ea5: 
1:e7c1ea5: 		try {
1:e7c1ea5: 			if (txContext.getTransactionStatus() == NO_TRANSACTION) {
1:e7c1ea5: 				toClose = emf.createEntityManager();
1:e7c1ea5: 				toReturn = new ScopedEntityManagerWrapper(toClose);
1:e7c1ea5: 			} else if (txContext.supportsLocal()) {
1:e7c1ea5: 				toClose = emf.createEntityManager();
1:e7c1ea5: 				toReturn = new TxEntityManagerWrapper(toClose);
1:e7c1ea5: 				txContext.registerLocalResource(getLocalResource(toClose));
1:e7c1ea5: 				toClose.getTransaction().begin();
1:e7c1ea5: 			} else {
1:e7c1ea5: 				throw new TransactionException(
1:e7c1ea5: 						"There is a transaction active, but it does not support local participants");
1:e7c1ea5: 			}
1:e7c1ea5: 		} catch (Exception sqle) {
1:e7c1ea5: 			throw new TransactionException(
1:e7c1ea5: 					"There was a problem getting hold of a database connection",
1:e7c1ea5: 					sqle);
1:e7c1ea5: 		}
1:e7c1ea5: 
1:e7c1ea5: 		
1:e7c1ea5: 		txContext.postCompletion(x -> {
1:e7c1ea5: 				try {
1:e7c1ea5: 					toClose.close();
1:e7c1ea5: 				} catch (PersistenceException sqle) {
1:e7c1ea5: 					// TODO log this
1:e7c1ea5: 				}
1:e7c1ea5: 			});
1:e7c1ea5: 		
1:e7c1ea5: 		txContext.putScopedValue(resourceId, toReturn);
1:e7c1ea5: 		
1:e7c1ea5: 		return toReturn;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	
1:e7c1ea5: 	private LocalResource getLocalResource(EntityManager em) {
1:e7c1ea5: 		return new LocalResource() {
1:e7c1ea5: 			@Override
1:e7c1ea5: 			public void commit() throws TransactionException {
1:e7c1ea5: 				try {
1:e7c1ea5: 					em.getTransaction().commit();
1:e7c1ea5: 				} catch (PersistenceException e) {
1:e7c1ea5: 					throw new TransactionException(
1:e7c1ea5: 							"An error occurred when committing the connection", e);
1:e7c1ea5: 				}
1:e7c1ea5: 			}
1:e7c1ea5: 
1:e7c1ea5: 			@Override
1:e7c1ea5: 			public void rollback() throws TransactionException {
1:e7c1ea5: 				try {
1:e7c1ea5: 					em.getTransaction().rollback();
1:e7c1ea5: 				} catch (PersistenceException e) {
1:e7c1ea5: 					throw new TransactionException(
1:e7c1ea5: 							"An error occurred when rolling back the connection", e);
1:e7c1ea5: 				}
1:e7c1ea5: 			}
1:e7c1ea5: 
1:e7c1ea5: 		};
1:e7c1ea5: 	}
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.local.impl;
1: 
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: 
1: import java.util.UUID;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.PersistenceException;
1: 
1: import org.apache.aries.tx.control.jpa.common.impl.EntityManagerWrapper;
1: import org.apache.aries.tx.control.jpa.common.impl.ScopedEntityManagerWrapper;
1: import org.apache.aries.tx.control.jpa.common.impl.TxEntityManagerWrapper;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
1: 
1: public class TxContextBindingEntityManager extends EntityManagerWrapper {
1: 
1: 	private final TransactionControl	txControl;
1: 	private final UUID					resourceId;
1: 	private final EntityManagerFactory	emf;
1: 
1: 	public TxContextBindingEntityManager(TransactionControl txControl,
1: 			EntityManagerFactory emf, UUID resourceId) {
1: 		this.txControl = txControl;
1: 		this.emf = emf;
1: 		this.resourceId = resourceId;
1: 	}
1: 
1: 	@Override
1: 	protected final EntityManager getRealEntityManager() {
1: 
1: 		TransactionContext txContext = txControl.getCurrentContext();
1: 
1: 		if (txContext == null) {
1: 			throw new TransactionException("The resource " + emf
1: 					+ " cannot be accessed outside of an active Transaction Context");
1: 		}
1: 
1: 		EntityManager existing = (EntityManager) txContext.getScopedValue(resourceId);
1: 
1: 		if (existing != null) {
1: 			return existing;
1: 		}
1: 
1: 		EntityManager toReturn;
1: 		EntityManager toClose;
1: 
1: 		try {
1: 			if (txContext.getTransactionStatus() == NO_TRANSACTION) {
1: 				toClose = emf.createEntityManager();
1: 				toReturn = new ScopedEntityManagerWrapper(toClose);
1: 			} else if (txContext.supportsLocal()) {
1: 				toClose = emf.createEntityManager();
1: 				toReturn = new TxEntityManagerWrapper(toClose);
1: 				txContext.registerLocalResource(getLocalResource(toClose));
1: 				toClose.getTransaction().begin();
1: 			} else {
1: 				throw new TransactionException(
1: 						"There is a transaction active, but it does not support local participants");
1: 			}
1: 		} catch (Exception sqle) {
1: 			throw new TransactionException(
1: 					"There was a problem getting hold of a database connection",
1: 					sqle);
1: 		}
1: 
1: 		
1: 		txContext.postCompletion(x -> {
1: 				try {
1: 					toClose.close();
1: 				} catch (PersistenceException sqle) {
1: 					// TODO log this
1: 				}
1: 			});
1: 		
1: 		txContext.putScopedValue(resourceId, toReturn);
1: 		
1: 		return toReturn;
1: 	}
1: 
1: 	
1: 	private LocalResource getLocalResource(EntityManager em) {
1: 		return new LocalResource() {
1: 			@Override
1: 			public void commit() throws TransactionException {
1: 				try {
1: 					em.getTransaction().commit();
1: 				} catch (PersistenceException e) {
1: 					throw new TransactionException(
1: 							"An error occurred when committing the connection", e);
1: 				}
1: 			}
1: 
1: 			@Override
1: 			public void rollback() throws TransactionException {
1: 				try {
1: 					em.getTransaction().rollback();
1: 				} catch (PersistenceException e) {
1: 					throw new TransactionException(
1: 							"An error occurred when rolling back the connection", e);
1: 				}
1: 			}
1: 
1: 		};
1: 	}
1: }
============================================================================