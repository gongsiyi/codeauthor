1:dd9325e: /**
1:dd9325e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:dd9325e:  *  contributor license agreements.  See the NOTICE file distributed with
1:dd9325e:  *  this work for additional information regarding copyright ownership.
1:dd9325e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:dd9325e:  *  (the "License"); you may not use this file except in compliance with
1:dd9325e:  *  the License.  You may obtain a copy of the License at
1:dd9325e:  *
1:dd9325e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dd9325e:  *
1:dd9325e:  *  Unless required by applicable law or agreed to in writing, software
1:dd9325e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:dd9325e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dd9325e:  *  See the License for the specific language governing permissions and
1:dd9325e:  *  limitations under the License.
1:dd9325e:  */
1:dd9325e: package org.apache.aries.blueprint.annotation;
4:dd9325e: 
1:dd9325e: import java.lang.annotation.ElementType;
1:dd9325e: import java.lang.annotation.Retention;
1:dd9325e: import java.lang.annotation.RetentionPolicy;
1:dd9325e: import java.lang.annotation.Target;
1:dd9325e: 
1:dd9325e: /*
1:dd9325e:  * To annotate a bean as a blueprint bean, use @Bean
1:dd9325e:  */
1:dd9325e: @Target(ElementType.TYPE)
1:dd9325e: @Retention(RetentionPolicy.RUNTIME)
1:dd9325e: public @interface Bean {
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      * id, activation, dependsOn comes from Tcomponent
1:dd9325e:      * the id property for the bean
1:dd9325e:      * should this be auto generated if none is specified?
1:dd9325e:      */
1:0a78dad:     String id();
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      * the activation property for the bean
1:dd9325e:      * This can either be "eager" or "lazy".  If not specified, it
1:dd9325e:      * defaults to default-activation attribute of the enclosing
1:dd9325e:      * <blueprint> element.
1:dd9325e:      */
1:dd9325e:     String activation() default "";
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      *  the components that the bean depends on
1:dd9325e:      */
1:dd9325e:     String[] dependsOn() default ""; 
1:0a78dad: 
1:dd9325e:     /**
1:dd9325e:      * the description property for the bean
1:dd9325e:      */
1:dd9325e:     String description() default "";
1:dd9325e:     
1:dd9325e:     /**
1:dd9325e:      * the scope property for the bean. value can be prototype or singleton
1:dd9325e:      */
1:dd9325e:     String scope() default "";
1:dd9325e: 
1:dd9325e:     /**
1:dd9325e:      * the reference to the factory component on which to invoke the
1:dd9325e:      * factory method for the bean.
1:dd9325e:      */
1:dd9325e:     String factoryRef() default "";
1:be22f12:     
1:be22f12:     /**
1:be22f12:      * the factory method in the factoryRef referred factory component
1:be22f12:      * @return
1:be22f12:      */
1:be22f12:     String factoryMethod() default "";
1:be22f12:     
1:be22f12:     /**
1:be22f12:      * arguments for the bean constructor or the factory method of the bean
1:be22f12:      * @return
1:be22f12:      */
1:be22f12:     Arg[] args() default {};
1:dd9325e:   
1:dd9325e: }
============================================================================
author:Lin Sun
-------------------------------------------------------------------------------
commit:0a78dad
/////////////////////////////////////////////////////////////////////////
1:     String id();
/////////////////////////////////////////////////////////////////////////
1: 
commit:be22f12
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * the factory method in the factoryRef referred factory component
1:      * @return
1:      */
1:     String factoryMethod() default "";
1:     
1:     /**
1:      * arguments for the bean constructor or the factory method of the bean
1:      * @return
1:      */
1:     Arg[] args() default {};
commit:dd9325e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.annotation;
1: 
1: import java.lang.annotation.ElementType;
1: import java.lang.annotation.Retention;
1: import java.lang.annotation.RetentionPolicy;
1: import java.lang.annotation.Target;
1: 
1: /*
1:  * To annotate a bean as a blueprint bean, use @Bean
1:  */
1: @Target(ElementType.TYPE)
1: @Retention(RetentionPolicy.RUNTIME)
1: public @interface Bean {
1:     
1:     /**
1:      * id, activation, dependsOn comes from Tcomponent
1:      * the id property for the bean
1:      * should this be auto generated if none is specified?
1:      */
0:     String id() default "";
1:     
1:     /**
1:      * the activation property for the bean
1:      * This can either be "eager" or "lazy".  If not specified, it
1:      * defaults to default-activation attribute of the enclosing
1:      * <blueprint> element.
1:      */
1:     String activation() default "";
1:     
1:     /**
1:      *  the components that the bean depends on
1:      */
1:     String[] dependsOn() default ""; 
1:     
1:     
0:     // TODO:  add the argument for the bean
1:     
1:     /**
1:      * the description property for the bean
1:      */
1:     String description() default "";
1:     
1:     /**
1:      * the scope property for the bean. value can be prototype or singleton
1:      */
1:     String scope() default "";
1: 
1:     /**
1:      * the reference to the factory component on which to invoke the
1:      * factory method for the bean.
1:      */
1:     String factoryRef() default "";
1:   
1: }
============================================================================