1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:e7c1ea5: package org.apache.aries.tx.control.jpa.common.impl;
1:e7c1ea5: 
1:e7c1ea5: import java.util.List;
1:e7c1ea5: import java.util.Map;
1:e7c1ea5: 
1:e7c1ea5: import javax.persistence.EntityGraph;
1:e7c1ea5: import javax.persistence.EntityManager;
1:e7c1ea5: import javax.persistence.EntityManagerFactory;
1:e7c1ea5: import javax.persistence.EntityTransaction;
1:e7c1ea5: import javax.persistence.FlushModeType;
1:e7c1ea5: import javax.persistence.LockModeType;
1:e7c1ea5: import javax.persistence.Query;
1:e7c1ea5: import javax.persistence.StoredProcedureQuery;
1:e7c1ea5: import javax.persistence.TypedQuery;
1:e7c1ea5: import javax.persistence.criteria.CriteriaBuilder;
1:e7c1ea5: import javax.persistence.criteria.CriteriaDelete;
1:e7c1ea5: import javax.persistence.criteria.CriteriaQuery;
1:e7c1ea5: import javax.persistence.criteria.CriteriaUpdate;
1:e7c1ea5: import javax.persistence.metamodel.Metamodel;
1:e7c1ea5: 
1:e7c1ea5: public abstract class EntityManagerWrapper implements EntityManager {
1:e7c1ea5: 
1:e7c1ea5: 	public void persist(Object entity) {
1:e7c1ea5: 		getRealEntityManager().persist(entity);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> T merge(T entity) {
1:e7c1ea5: 		return getRealEntityManager().merge(entity);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void remove(Object entity) {
1:e7c1ea5: 		getRealEntityManager().remove(entity);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> T find(Class<T> entityClass, Object primaryKey) {
1:e7c1ea5: 		return getRealEntityManager().find(entityClass, primaryKey);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties) {
1:e7c1ea5: 		return getRealEntityManager().find(entityClass, primaryKey, properties);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode) {
1:e7c1ea5: 		return getRealEntityManager().find(entityClass, primaryKey, lockMode);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode, Map<String, Object> properties) {
1:e7c1ea5: 		return getRealEntityManager().find(entityClass, primaryKey, lockMode, properties);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> T getReference(Class<T> entityClass, Object primaryKey) {
1:e7c1ea5: 		return getRealEntityManager().getReference(entityClass, primaryKey);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void flush() {
1:e7c1ea5: 		getRealEntityManager().flush();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void setFlushMode(FlushModeType flushMode) {
1:e7c1ea5: 		getRealEntityManager().setFlushMode(flushMode);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public FlushModeType getFlushMode() {
1:e7c1ea5: 		return getRealEntityManager().getFlushMode();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void lock(Object entity, LockModeType lockMode) {
1:e7c1ea5: 		getRealEntityManager().lock(entity, lockMode);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void lock(Object entity, LockModeType lockMode, Map<String, Object> properties) {
1:e7c1ea5: 		getRealEntityManager().lock(entity, lockMode, properties);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void refresh(Object entity) {
1:e7c1ea5: 		getRealEntityManager().refresh(entity);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void refresh(Object entity, Map<String, Object> properties) {
1:e7c1ea5: 		getRealEntityManager().refresh(entity, properties);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void refresh(Object entity, LockModeType lockMode) {
1:e7c1ea5: 		getRealEntityManager().refresh(entity, lockMode);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void refresh(Object entity, LockModeType lockMode, Map<String, Object> properties) {
1:e7c1ea5: 		getRealEntityManager().refresh(entity, lockMode, properties);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void clear() {
1:e7c1ea5: 		getRealEntityManager().clear();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void detach(Object entity) {
1:e7c1ea5: 		getRealEntityManager().detach(entity);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public boolean contains(Object entity) {
1:e7c1ea5: 		return getRealEntityManager().contains(entity);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public LockModeType getLockMode(Object entity) {
1:e7c1ea5: 		return getRealEntityManager().getLockMode(entity);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void setProperty(String propertyName, Object value) {
1:e7c1ea5: 		getRealEntityManager().setProperty(propertyName, value);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Map<String, Object> getProperties() {
1:e7c1ea5: 		return getRealEntityManager().getProperties();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Query createQuery(String qlString) {
1:e7c1ea5: 		return getRealEntityManager().createQuery(qlString);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {
1:e7c1ea5: 		return getRealEntityManager().createQuery(criteriaQuery);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Query createQuery(@SuppressWarnings("rawtypes") CriteriaUpdate updateQuery) {
1:e7c1ea5: 		return getRealEntityManager().createQuery(updateQuery);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Query createQuery(@SuppressWarnings("rawtypes") CriteriaDelete deleteQuery) {
1:e7c1ea5: 		return getRealEntityManager().createQuery(deleteQuery);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass) {
1:e7c1ea5: 		return getRealEntityManager().createQuery(qlString, resultClass);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Query createNamedQuery(String name) {
1:e7c1ea5: 		return getRealEntityManager().createNamedQuery(name);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass) {
1:e7c1ea5: 		return getRealEntityManager().createNamedQuery(name, resultClass);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Query createNativeQuery(String sqlString) {
1:e7c1ea5: 		return getRealEntityManager().createNativeQuery(sqlString);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Query createNativeQuery(String sqlString, @SuppressWarnings("rawtypes") Class resultClass) {
1:e7c1ea5: 		return getRealEntityManager().createNativeQuery(sqlString, resultClass);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Query createNativeQuery(String sqlString, String resultSetMapping) {
1:e7c1ea5: 		return getRealEntityManager().createNativeQuery(sqlString, resultSetMapping);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public StoredProcedureQuery createNamedStoredProcedureQuery(String name) {
1:e7c1ea5: 		return getRealEntityManager().createNamedStoredProcedureQuery(name);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public StoredProcedureQuery createStoredProcedureQuery(String procedureName) {
1:e7c1ea5: 		return getRealEntityManager().createStoredProcedureQuery(procedureName);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public StoredProcedureQuery createStoredProcedureQuery(String procedureName, @SuppressWarnings("rawtypes") Class... resultClasses) {
1:e7c1ea5: 		return getRealEntityManager().createStoredProcedureQuery(procedureName, resultClasses);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public StoredProcedureQuery createStoredProcedureQuery(String procedureName, String... resultSetMappings) {
1:e7c1ea5: 		return getRealEntityManager().createStoredProcedureQuery(procedureName, resultSetMappings);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void joinTransaction() {
1:e7c1ea5: 		getRealEntityManager().joinTransaction();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public boolean isJoinedToTransaction() {
1:e7c1ea5: 		return getRealEntityManager().isJoinedToTransaction();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> T unwrap(Class<T> cls) {
1:e7c1ea5: 		return getRealEntityManager().unwrap(cls);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Object getDelegate() {
1:e7c1ea5: 		return getRealEntityManager().getDelegate();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void close() {
1:e7c1ea5: 		getRealEntityManager().close();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public boolean isOpen() {
1:e7c1ea5: 		return getRealEntityManager().isOpen();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public EntityTransaction getTransaction() {
1:e7c1ea5: 		return getRealEntityManager().getTransaction();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public EntityManagerFactory getEntityManagerFactory() {
1:e7c1ea5: 		return getRealEntityManager().getEntityManagerFactory();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public CriteriaBuilder getCriteriaBuilder() {
1:e7c1ea5: 		return getRealEntityManager().getCriteriaBuilder();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Metamodel getMetamodel() {
1:e7c1ea5: 		return getRealEntityManager().getMetamodel();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> EntityGraph<T> createEntityGraph(Class<T> rootType) {
1:e7c1ea5: 		return getRealEntityManager().createEntityGraph(rootType);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public EntityGraph<?> createEntityGraph(String graphName) {
1:e7c1ea5: 		return getRealEntityManager().createEntityGraph(graphName);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public EntityGraph<?> getEntityGraph(String graphName) {
1:e7c1ea5: 		return getRealEntityManager().getEntityGraph(graphName);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public <T> List<EntityGraph<? super T>> getEntityGraphs(Class<T> entityClass) {
1:e7c1ea5: 		return getRealEntityManager().getEntityGraphs(entityClass);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	protected abstract EntityManager getRealEntityManager();
1:e7c1ea5: 
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0e20712
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.common.impl;
1: 
1: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.persistence.EntityGraph;
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.EntityTransaction;
1: import javax.persistence.FlushModeType;
1: import javax.persistence.LockModeType;
1: import javax.persistence.Query;
1: import javax.persistence.StoredProcedureQuery;
1: import javax.persistence.TypedQuery;
1: import javax.persistence.criteria.CriteriaBuilder;
1: import javax.persistence.criteria.CriteriaDelete;
1: import javax.persistence.criteria.CriteriaQuery;
1: import javax.persistence.criteria.CriteriaUpdate;
1: import javax.persistence.metamodel.Metamodel;
1: 
1: public abstract class EntityManagerWrapper implements EntityManager {
1: 
1: 	public void persist(Object entity) {
1: 		getRealEntityManager().persist(entity);
1: 	}
1: 
1: 	public <T> T merge(T entity) {
1: 		return getRealEntityManager().merge(entity);
1: 	}
1: 
1: 	public void remove(Object entity) {
1: 		getRealEntityManager().remove(entity);
1: 	}
1: 
1: 	public <T> T find(Class<T> entityClass, Object primaryKey) {
1: 		return getRealEntityManager().find(entityClass, primaryKey);
1: 	}
1: 
1: 	public <T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties) {
1: 		return getRealEntityManager().find(entityClass, primaryKey, properties);
1: 	}
1: 
1: 	public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode) {
1: 		return getRealEntityManager().find(entityClass, primaryKey, lockMode);
1: 	}
1: 
1: 	public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode, Map<String, Object> properties) {
1: 		return getRealEntityManager().find(entityClass, primaryKey, lockMode, properties);
1: 	}
1: 
1: 	public <T> T getReference(Class<T> entityClass, Object primaryKey) {
1: 		return getRealEntityManager().getReference(entityClass, primaryKey);
1: 	}
1: 
1: 	public void flush() {
1: 		getRealEntityManager().flush();
1: 	}
1: 
1: 	public void setFlushMode(FlushModeType flushMode) {
1: 		getRealEntityManager().setFlushMode(flushMode);
1: 	}
1: 
1: 	public FlushModeType getFlushMode() {
1: 		return getRealEntityManager().getFlushMode();
1: 	}
1: 
1: 	public void lock(Object entity, LockModeType lockMode) {
1: 		getRealEntityManager().lock(entity, lockMode);
1: 	}
1: 
1: 	public void lock(Object entity, LockModeType lockMode, Map<String, Object> properties) {
1: 		getRealEntityManager().lock(entity, lockMode, properties);
1: 	}
1: 
1: 	public void refresh(Object entity) {
1: 		getRealEntityManager().refresh(entity);
1: 	}
1: 
1: 	public void refresh(Object entity, Map<String, Object> properties) {
1: 		getRealEntityManager().refresh(entity, properties);
1: 	}
1: 
1: 	public void refresh(Object entity, LockModeType lockMode) {
1: 		getRealEntityManager().refresh(entity, lockMode);
1: 	}
1: 
1: 	public void refresh(Object entity, LockModeType lockMode, Map<String, Object> properties) {
1: 		getRealEntityManager().refresh(entity, lockMode, properties);
1: 	}
1: 
1: 	public void clear() {
1: 		getRealEntityManager().clear();
1: 	}
1: 
1: 	public void detach(Object entity) {
1: 		getRealEntityManager().detach(entity);
1: 	}
1: 
1: 	public boolean contains(Object entity) {
1: 		return getRealEntityManager().contains(entity);
1: 	}
1: 
1: 	public LockModeType getLockMode(Object entity) {
1: 		return getRealEntityManager().getLockMode(entity);
1: 	}
1: 
1: 	public void setProperty(String propertyName, Object value) {
1: 		getRealEntityManager().setProperty(propertyName, value);
1: 	}
1: 
1: 	public Map<String, Object> getProperties() {
1: 		return getRealEntityManager().getProperties();
1: 	}
1: 
1: 	public Query createQuery(String qlString) {
1: 		return getRealEntityManager().createQuery(qlString);
1: 	}
1: 
1: 	public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {
1: 		return getRealEntityManager().createQuery(criteriaQuery);
1: 	}
1: 
1: 	public Query createQuery(@SuppressWarnings("rawtypes") CriteriaUpdate updateQuery) {
1: 		return getRealEntityManager().createQuery(updateQuery);
1: 	}
1: 
1: 	public Query createQuery(@SuppressWarnings("rawtypes") CriteriaDelete deleteQuery) {
1: 		return getRealEntityManager().createQuery(deleteQuery);
1: 	}
1: 
1: 	public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass) {
1: 		return getRealEntityManager().createQuery(qlString, resultClass);
1: 	}
1: 
1: 	public Query createNamedQuery(String name) {
1: 		return getRealEntityManager().createNamedQuery(name);
1: 	}
1: 
1: 	public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass) {
1: 		return getRealEntityManager().createNamedQuery(name, resultClass);
1: 	}
1: 
1: 	public Query createNativeQuery(String sqlString) {
1: 		return getRealEntityManager().createNativeQuery(sqlString);
1: 	}
1: 
1: 	public Query createNativeQuery(String sqlString, @SuppressWarnings("rawtypes") Class resultClass) {
1: 		return getRealEntityManager().createNativeQuery(sqlString, resultClass);
1: 	}
1: 
1: 	public Query createNativeQuery(String sqlString, String resultSetMapping) {
1: 		return getRealEntityManager().createNativeQuery(sqlString, resultSetMapping);
1: 	}
1: 
1: 	public StoredProcedureQuery createNamedStoredProcedureQuery(String name) {
1: 		return getRealEntityManager().createNamedStoredProcedureQuery(name);
1: 	}
1: 
1: 	public StoredProcedureQuery createStoredProcedureQuery(String procedureName) {
1: 		return getRealEntityManager().createStoredProcedureQuery(procedureName);
1: 	}
1: 
1: 	public StoredProcedureQuery createStoredProcedureQuery(String procedureName, @SuppressWarnings("rawtypes") Class... resultClasses) {
1: 		return getRealEntityManager().createStoredProcedureQuery(procedureName, resultClasses);
1: 	}
1: 
1: 	public StoredProcedureQuery createStoredProcedureQuery(String procedureName, String... resultSetMappings) {
1: 		return getRealEntityManager().createStoredProcedureQuery(procedureName, resultSetMappings);
1: 	}
1: 
1: 	public void joinTransaction() {
1: 		getRealEntityManager().joinTransaction();
1: 	}
1: 
1: 	public boolean isJoinedToTransaction() {
1: 		return getRealEntityManager().isJoinedToTransaction();
1: 	}
1: 
1: 	public <T> T unwrap(Class<T> cls) {
1: 		return getRealEntityManager().unwrap(cls);
1: 	}
1: 
1: 	public Object getDelegate() {
1: 		return getRealEntityManager().getDelegate();
1: 	}
1: 
1: 	public void close() {
1: 		getRealEntityManager().close();
1: 	}
1: 
1: 	public boolean isOpen() {
1: 		return getRealEntityManager().isOpen();
1: 	}
1: 
1: 	public EntityTransaction getTransaction() {
1: 		return getRealEntityManager().getTransaction();
1: 	}
1: 
1: 	public EntityManagerFactory getEntityManagerFactory() {
1: 		return getRealEntityManager().getEntityManagerFactory();
1: 	}
1: 
1: 	public CriteriaBuilder getCriteriaBuilder() {
1: 		return getRealEntityManager().getCriteriaBuilder();
1: 	}
1: 
1: 	public Metamodel getMetamodel() {
1: 		return getRealEntityManager().getMetamodel();
1: 	}
1: 
1: 	public <T> EntityGraph<T> createEntityGraph(Class<T> rootType) {
1: 		return getRealEntityManager().createEntityGraph(rootType);
1: 	}
1: 
1: 	public EntityGraph<?> createEntityGraph(String graphName) {
1: 		return getRealEntityManager().createEntityGraph(graphName);
1: 	}
1: 
1: 	public EntityGraph<?> getEntityGraph(String graphName) {
1: 		return getRealEntityManager().getEntityGraph(graphName);
1: 	}
1: 
1: 	public <T> List<EntityGraph<? super T>> getEntityGraphs(Class<T> entityClass) {
1: 		return getRealEntityManager().getEntityGraphs(entityClass);
1: 	}
1: 
1: 	protected abstract EntityManager getRealEntityManager();
1: 
1: }
============================================================================