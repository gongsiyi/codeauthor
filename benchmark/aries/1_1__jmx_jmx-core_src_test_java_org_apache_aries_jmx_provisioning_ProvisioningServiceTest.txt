1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.provisioning;
1:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.mockito.Matchers.any;
1:fdf3952: import static org.mockito.Mockito.doReturn;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.spy;
1:fdf3952: import static org.mockito.Mockito.verify;
1:fdf3952: import static org.mockito.Mockito.when;
1:fdf3952: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1:fdf3952: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG;
1:fdf3952: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE;
1:fdf3952: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_RSH_SECRET;
1:fdf3952: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_SPID;
1:fdf3952: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT;
1:fdf3952: 
1:fdf3952: import java.io.InputStream;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: import java.util.zip.ZipInputStream;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.ArgumentCaptor;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ProvisioningServiceTest {
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     public void testAddInformationFromZip() throws Exception {
1:fdf3952: 
1:fdf3952:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:fdf3952:         ProvisioningService mbean = new ProvisioningService(provService);
1:fdf3952:         ProvisioningService spiedMBean = spy(mbean);
1:fdf3952:         
1:fdf3952:         InputStream is = mock(InputStream.class);
1:fdf3952:         doReturn(is).when(spiedMBean).createStream("file://prov.zip");
1:fdf3952:         
1:fdf3952:         spiedMBean.addInformationFromZip("file://prov.zip");
1:fdf3952:         verify(provService).addInformation(any(ZipInputStream.class));
1:fdf3952:         verify(is).close();
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public void testAddInformationWithTabularData() throws Exception {
1:fdf3952:         
1:fdf3952:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:fdf3952:         ProvisioningService mbean = new ProvisioningService(provService);
1:fdf3952:         
1:fdf3952:         TabularData data = new TabularDataSupport(PROPERTIES_TYPE);
1:fdf3952:         PropertyData<byte[]> p1 = PropertyData.newInstance(PROVISIONING_AGENT_CONFIG, new byte[] { 20, 30, 40 });
1:fdf3952:         data.put(p1.toCompositeData());
1:fdf3952:         PropertyData<String> p2 = PropertyData.newInstance(PROVISIONING_SPID, "x.test");
1:fdf3952:         data.put(p2.toCompositeData());
1:fdf3952:         
1:fdf3952:         mbean.addInformation(data);
1:fdf3952:         ArgumentCaptor<Dictionary> dictionaryArgument = ArgumentCaptor.forClass(Dictionary.class);
1:fdf3952:         verify(provService).addInformation(dictionaryArgument.capture());
1:fdf3952:         
1:fdf3952:         Dictionary<String, Object> info = dictionaryArgument.getValue();
1:fdf3952:         assertEquals(2, info.size() );
1:fdf3952:         assertArrayEquals(new byte[] { 20, 30, 40 }, (byte[]) info.get(PROVISIONING_AGENT_CONFIG));
1:fdf3952:         assertEquals("x.test", info.get(PROVISIONING_SPID));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void testListInformation() throws Exception {
1:fdf3952: 
1:fdf3952:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:fdf3952:         ProvisioningService mbean = new ProvisioningService(provService);
1:fdf3952:         
1:fdf3952:         Dictionary<String, Object> info = new Hashtable<String, Object>();
1:fdf3952:         info.put(PROVISIONING_AGENT_CONFIG, new byte[] { 20, 30, 40 });
1:fdf3952:         info.put(PROVISIONING_SPID, "x.test");
1:fdf3952:         info.put(PROVISIONING_REFERENCE, "rsh://0.0.0.0/provX");
1:fdf3952:         info.put(PROVISIONING_RSH_SECRET, new byte[] { 15, 25, 35 });
1:fdf3952:         info.put(PROVISIONING_UPDATE_COUNT, 1);
1:fdf3952:         
1:fdf3952:         when(provService.getInformation()).thenReturn(info);
1:fdf3952:         
1:fdf3952:         TabularData provData = mbean.listInformation();
1:fdf3952:         assertNotNull(provData);
1:fdf3952:         assertEquals(PROPERTIES_TYPE, provData.getTabularType());
1:fdf3952:         assertEquals(5, provData.values().size());
1:fdf3952:         PropertyData<byte[]> agentConfig = PropertyData.from(provData.get(new Object[]{ PROVISIONING_AGENT_CONFIG }));
1:fdf3952:         assertArrayEquals(new byte[] { 20, 30, 40 }, agentConfig.getValue());
1:fdf3952:         PropertyData<String> spid = PropertyData.from(provData.get(new Object[] { PROVISIONING_SPID }));
1:fdf3952:         assertEquals("x.test", spid.getValue());
1:fdf3952:         PropertyData<String> ref = PropertyData.from(provData.get(new Object[] { PROVISIONING_REFERENCE }));
1:fdf3952:         assertEquals("rsh://0.0.0.0/provX", ref.getValue());
1:fdf3952:         PropertyData<byte[]> sec = PropertyData.from(provData.get(new Object[] { PROVISIONING_RSH_SECRET }));
1:fdf3952:         assertArrayEquals(new byte[] { 15, 25, 35 }, sec.getValue());
1:fdf3952:         PropertyData<Integer> count = PropertyData.from(provData.get(new Object[] { PROVISIONING_UPDATE_COUNT }));
1:fdf3952:         assertEquals(new Integer(1), count.getValue());
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:    
1:fdf3952:     @Test
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public void testSetInformation() throws Exception {
1:fdf3952:       
1:fdf3952:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:fdf3952:         ProvisioningService mbean = new ProvisioningService(provService);
1:fdf3952:         
1:fdf3952:         TabularData data = new TabularDataSupport(PROPERTIES_TYPE);
1:fdf3952:         PropertyData<String> p1 = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/provX");
1:fdf3952:         data.put(p1.toCompositeData());
1:fdf3952:         PropertyData<String> p2 = PropertyData.newInstance(PROVISIONING_SPID, "x.test");
1:fdf3952:         data.put(p2.toCompositeData());
1:fdf3952:         
1:fdf3952:         mbean.setInformation(data);
1:fdf3952:         
1:fdf3952:         ArgumentCaptor<Dictionary> dictionaryArgument = ArgumentCaptor.forClass(Dictionary.class);
1:fdf3952:         verify(provService).setInformation(dictionaryArgument.capture());
1:fdf3952:         
1:fdf3952:         Dictionary<String, Object> info = dictionaryArgument.getValue();
1:fdf3952:         assertEquals(2, info.size() );
1:fdf3952:         assertEquals("rsh://0.0.0.0/provX", info.get(PROVISIONING_REFERENCE));
1:fdf3952:         assertEquals("x.test", info.get(PROVISIONING_SPID));
1:fdf3952:         
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.provisioning;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.mockito.Matchers.any;
1: import static org.mockito.Mockito.doReturn;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.spy;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG;
1: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE;
1: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_RSH_SECRET;
1: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_SPID;
1: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_UPDATE_COUNT;
1: 
1: import java.io.InputStream;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.zip.ZipInputStream;
1: 
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.junit.Test;
1: import org.mockito.ArgumentCaptor;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ProvisioningServiceTest {
1: 
1:    
1:     @Test
1:     public void testAddInformationFromZip() throws Exception {
1: 
1:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:         ProvisioningService mbean = new ProvisioningService(provService);
1:         ProvisioningService spiedMBean = spy(mbean);
1:         
1:         InputStream is = mock(InputStream.class);
1:         doReturn(is).when(spiedMBean).createStream("file://prov.zip");
1:         
1:         spiedMBean.addInformationFromZip("file://prov.zip");
1:         verify(provService).addInformation(any(ZipInputStream.class));
1:         verify(is).close();
1:         
1:     }
1: 
1:     
1:     @Test
1:     @SuppressWarnings("unchecked")
1:     public void testAddInformationWithTabularData() throws Exception {
1:         
1:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:         ProvisioningService mbean = new ProvisioningService(provService);
1:         
1:         TabularData data = new TabularDataSupport(PROPERTIES_TYPE);
1:         PropertyData<byte[]> p1 = PropertyData.newInstance(PROVISIONING_AGENT_CONFIG, new byte[] { 20, 30, 40 });
1:         data.put(p1.toCompositeData());
1:         PropertyData<String> p2 = PropertyData.newInstance(PROVISIONING_SPID, "x.test");
1:         data.put(p2.toCompositeData());
1:         
1:         mbean.addInformation(data);
1:         ArgumentCaptor<Dictionary> dictionaryArgument = ArgumentCaptor.forClass(Dictionary.class);
1:         verify(provService).addInformation(dictionaryArgument.capture());
1:         
1:         Dictionary<String, Object> info = dictionaryArgument.getValue();
1:         assertEquals(2, info.size() );
1:         assertArrayEquals(new byte[] { 20, 30, 40 }, (byte[]) info.get(PROVISIONING_AGENT_CONFIG));
1:         assertEquals("x.test", info.get(PROVISIONING_SPID));
1:         
1:     }
1: 
1:     
1:     @Test
1:     public void testListInformation() throws Exception {
1: 
1:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:         ProvisioningService mbean = new ProvisioningService(provService);
1:         
1:         Dictionary<String, Object> info = new Hashtable<String, Object>();
1:         info.put(PROVISIONING_AGENT_CONFIG, new byte[] { 20, 30, 40 });
1:         info.put(PROVISIONING_SPID, "x.test");
1:         info.put(PROVISIONING_REFERENCE, "rsh://0.0.0.0/provX");
1:         info.put(PROVISIONING_RSH_SECRET, new byte[] { 15, 25, 35 });
1:         info.put(PROVISIONING_UPDATE_COUNT, 1);
1:         
1:         when(provService.getInformation()).thenReturn(info);
1:         
1:         TabularData provData = mbean.listInformation();
1:         assertNotNull(provData);
1:         assertEquals(PROPERTIES_TYPE, provData.getTabularType());
1:         assertEquals(5, provData.values().size());
1:         PropertyData<byte[]> agentConfig = PropertyData.from(provData.get(new Object[]{ PROVISIONING_AGENT_CONFIG }));
1:         assertArrayEquals(new byte[] { 20, 30, 40 }, agentConfig.getValue());
1:         PropertyData<String> spid = PropertyData.from(provData.get(new Object[] { PROVISIONING_SPID }));
1:         assertEquals("x.test", spid.getValue());
1:         PropertyData<String> ref = PropertyData.from(provData.get(new Object[] { PROVISIONING_REFERENCE }));
1:         assertEquals("rsh://0.0.0.0/provX", ref.getValue());
1:         PropertyData<byte[]> sec = PropertyData.from(provData.get(new Object[] { PROVISIONING_RSH_SECRET }));
1:         assertArrayEquals(new byte[] { 15, 25, 35 }, sec.getValue());
1:         PropertyData<Integer> count = PropertyData.from(provData.get(new Object[] { PROVISIONING_UPDATE_COUNT }));
1:         assertEquals(new Integer(1), count.getValue());
1:         
1:     }
1: 
1:    
1:     @Test
1:     @SuppressWarnings("unchecked")
1:     public void testSetInformation() throws Exception {
1:       
1:         org.osgi.service.provisioning.ProvisioningService provService = mock(org.osgi.service.provisioning.ProvisioningService.class);
1:         ProvisioningService mbean = new ProvisioningService(provService);
1:         
1:         TabularData data = new TabularDataSupport(PROPERTIES_TYPE);
1:         PropertyData<String> p1 = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/provX");
1:         data.put(p1.toCompositeData());
1:         PropertyData<String> p2 = PropertyData.newInstance(PROVISIONING_SPID, "x.test");
1:         data.put(p2.toCompositeData());
1:         
1:         mbean.setInformation(data);
1:         
1:         ArgumentCaptor<Dictionary> dictionaryArgument = ArgumentCaptor.forClass(Dictionary.class);
1:         verify(provService).setInformation(dictionaryArgument.capture());
1:         
1:         Dictionary<String, Object> info = dictionaryArgument.getValue();
1:         assertEquals(2, info.size() );
1:         assertEquals("rsh://0.0.0.0/provX", info.get(PROVISIONING_REFERENCE));
1:         assertEquals("x.test", info.get(PROVISIONING_SPID));
1:         
1:     }
1: 
1: }
============================================================================