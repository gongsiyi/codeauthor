1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:09a7647: package org.apache.aries.blueprint.parser;
1:f13c6ac: 
1:47d3353: import java.net.URI;
1:47d3353: 
1:6414875: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:47d3353: import org.apache.aries.blueprint.NamespaceHandler;
1:6414875: import org.apache.aries.blueprint.ParserContext;
1:6414875: import org.apache.aries.blueprint.reflect.MetadataUtil;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Metadata;
1:f13c6ac: import org.w3c.dom.Element;
1:f13c6ac: import org.w3c.dom.Node;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * A simple ParserContext implementation.
1:f13c6ac:  * 
1:f13c6ac:  * This class is supposed to be short lived and only used for calling a given namespace handler.
1:f13c6ac:  *
1:09a7647:  * @version $Rev: 896324 $, $Date: 2010-01-06 06:05:04 +0000 (Wed, 06 Jan 2010) $
1:f13c6ac:  */
1:f13c6ac: public class ParserContextImpl implements ParserContext {    
1:f13c6ac:     private final Parser parser;
1:f13c6ac:     private final ComponentDefinitionRegistry componentDefinitionRegistry;
1:f13c6ac:     private final ComponentMetadata enclosingComponent;
1:f13c6ac:     private final Node sourceNode;
1:f13c6ac: 
1:f13c6ac:     public ParserContextImpl(Parser parser,
1:f13c6ac:                              ComponentDefinitionRegistry componentDefinitionRegistry,
1:f13c6ac:                              ComponentMetadata enclosingComponent,
1:f13c6ac:                              Node sourceNode) {
1:f13c6ac:         this.parser = parser;
1:f13c6ac:         this.componentDefinitionRegistry = componentDefinitionRegistry;
1:f13c6ac:         this.enclosingComponent = enclosingComponent;
1:f13c6ac:         this.sourceNode = sourceNode;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public ComponentDefinitionRegistry getComponentDefinitionRegistry() {
1:f13c6ac:         return componentDefinitionRegistry;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public ComponentMetadata getEnclosingComponent() {
1:f13c6ac:         return enclosingComponent;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Node getSourceNode() {
1:f13c6ac:         return sourceNode;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public <T extends Metadata> T createMetadata(Class<T> type) {
1:f13c6ac:         return MetadataUtil.createMetadata(type);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public <T> T parseElement(Class<T> type, ComponentMetadata enclosingComponent, Element element) {
1:f13c6ac:         return parser.parseElement(type, enclosingComponent, element);
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public Parser getParser() {
1:f13c6ac:         return parser;
1:f13c6ac:     }
1:f13c6ac:     
1:1cfd24a:     public String generateId() {
1:1cfd24a:         return parser.generateId();
1:f13c6ac:     }
1:f13c6ac: 
1:1cfd24a:     public String getDefaultActivation() {
1:1cfd24a:         return parser.getDefaultActivation();
1:1cfd24a:     }
3:1cfd24a: 
1:1cfd24a:     public String getDefaultAvailability() {
1:1cfd24a:         return parser.getDefaultAvailability();
1:1cfd24a:     }
1:1cfd24a: 
1:1cfd24a:     public String getDefaultTimeout() {
1:1cfd24a:         return parser.getDefaultTimeout();
1:1cfd24a:     }
1:47d3353: 
1:47d3353:     @Override
1:47d3353:     public NamespaceHandler getNamespaceHandler(URI namespaceUri) {
1:47d3353:         return parser.getNamespaceHandler(namespaceUri);
1:47d3353:     }
1:1cfd24a: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:47d3353
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public NamespaceHandler getNamespaceHandler(URI namespaceUri) {
1:         return parser.getNamespaceHandler(namespaceUri);
1:     }
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.container;
1: 
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
0: import org.apache.geronimo.blueprint.ComponentDefinitionRegistry;
0: import org.apache.geronimo.blueprint.ParserContext;
0: import org.apache.geronimo.blueprint.reflect.MetadataUtil;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: 
1: /**
1:  * A simple ParserContext implementation.
1:  * 
1:  * This class is supposed to be short lived and only used for calling a given namespace handler.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
1:  */
1: public class ParserContextImpl implements ParserContext {
1: 
1:     private final Parser parser;
1:     private final ComponentDefinitionRegistry componentDefinitionRegistry;
1:     private final ComponentMetadata enclosingComponent;
1:     private final Node sourceNode;
1: 
1:     public ParserContextImpl(Parser parser,
1:                              ComponentDefinitionRegistry componentDefinitionRegistry,
1:                              ComponentMetadata enclosingComponent,
1:                              Node sourceNode) {
1:         this.parser = parser;
1:         this.componentDefinitionRegistry = componentDefinitionRegistry;
1:         this.enclosingComponent = enclosingComponent;
1:         this.sourceNode = sourceNode;
1:     }
1: 
1:     public ComponentDefinitionRegistry getComponentDefinitionRegistry() {
1:         return componentDefinitionRegistry;
1:     }
1: 
1:     public ComponentMetadata getEnclosingComponent() {
1:         return enclosingComponent;
1:     }
1: 
1:     public Node getSourceNode() {
1:         return sourceNode;
1:     }
1: 
1:     public <T extends Metadata> T createMetadata(Class<T> type) {
1:         return MetadataUtil.createMetadata(type);
1:     }
1: 
1:     public <T> T parseElement(Class<T> type, ComponentMetadata enclosingComponent, Element element) {
1:         return parser.parseElement(type, enclosingComponent, element);
1:     }
1:     
1:     public Parser getParser() {
1:         return parser;
1:     }
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.parser;
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev: 896324 $, $Date: 2010-01-06 06:05:04 +0000 (Wed, 06 Jan 2010) $
commit:1cfd24a
/////////////////////////////////////////////////////////////////////////
0: import org.w3c.dom.Element;
0: import org.w3c.dom.Node;
/////////////////////////////////////////////////////////////////////////
0: public class ParserContextImpl implements ParserContext {    
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String generateId() {
1:         return parser.generateId();
1:     }
1: 
1:     public String getDefaultActivation() {
1:         return parser.getDefaultActivation();
1:     }
1: 
1:     public String getDefaultAvailability() {
1:         return parser.getDefaultAvailability();
1:     }
1: 
1:     public String getDefaultTimeout() {
1:         return parser.getDefaultTimeout();
1:     }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
0:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.container;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.reflect.MetadataUtil;
============================================================================