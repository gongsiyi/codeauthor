1:72345ab: /*
1:72345ab:  * Licensed to the Apache Software Foundation (ASF) under one
1:72345ab:  * or more contributor license agreements.  See the NOTICE file
1:72345ab:  * distributed with this work for additional information
1:72345ab:  * regarding copyright ownership.  The ASF licenses this file
1:72345ab:  * to you under the Apache License, Version 2.0 (the
1:72345ab:  * "License"); you may not use this file except in compliance
1:72345ab:  * with the License.  You may obtain a copy of the License at
1:72345ab:  *
1:72345ab:  *   http://www.apache.org/licenses/LICENSE-2.0
1:72345ab:  *
1:72345ab:  * Unless required by applicable law or agreed to in writing,
1:72345ab:  * software distributed under the License is distributed on an
1:72345ab:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:72345ab:  * KIND, either express or implied.  See the License for the
1:72345ab:  * specific language governing permissions and limitations
1:72345ab:  * under the License.
1:72345ab:  */
1:910fec0: package org.apache.aries.util.filesystem.impl;
1:72345ab: 
1:72345ab: import java.io.IOException;
1:72345ab: import java.io.InputStream;
1:72345ab: import java.net.MalformedURLException;
1:72345ab: import java.net.URL;
1:72345ab: import java.util.Iterator;
1:72345ab: import java.util.List;
1:72345ab: import java.util.concurrent.atomic.AtomicBoolean;
1:72345ab: 
1:910fec0: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:12b7bb3: import org.apache.aries.util.internal.MessageUtil;
1:72345ab: 
1:72345ab: public class CloseableDirectory implements ICloseableDirectory {
1:72345ab: 	protected IDirectory delegate;
1:72345ab: 	private final AtomicBoolean closed = new AtomicBoolean(false);
1:72345ab: 
1:72345ab: 	public CloseableDirectory(IDirectory delegate) {
1:72345ab: 		this.delegate = delegate;
1:72345ab: 	}
1:72345ab: 	
1:72345ab: 	public String getName() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.getName();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public boolean isDirectory() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.isDirectory();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public boolean isFile() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.isFile();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public long getLastModified() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.getLastModified();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public IFile getFile(String name) {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.getFile(name);
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public long getSize() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.getSize();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public IDirectory convert() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.convert();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public IDirectory convertNested() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.convertNested();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public boolean isRoot() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.isRoot();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public IDirectory getParent() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.getParent();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public IDirectory getRoot() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.getRoot();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public Iterator<IFile> iterator() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.iterator();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public List<IFile> listFiles() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.listFiles();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public List<IFile> listAllFiles() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.listAllFiles();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public ICloseableDirectory toCloseable() {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.toCloseable();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public InputStream open() throws IOException, UnsupportedOperationException {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.open();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public URL toURL() throws MalformedURLException {
1:72345ab: 		checkNotClosed();
1:72345ab: 		return delegate.toURL();
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public final void close() throws IOException {
1:72345ab: 		if (closed.compareAndSet(false, true)) {
1:72345ab: 			cleanup();
1:72345ab: 		}
1:72345ab: 	}
1:72345ab: 	
1:72345ab: 	protected void cleanup() {}
1:72345ab: 	
1:72345ab: 	protected void checkNotClosed() {
1:12b7bb3: 		if (isClosed()) throw new IllegalStateException(MessageUtil.getMessage("UTIL0018E"));
1:72345ab: 	}
1:72345ab: 
1:72345ab: 	public boolean isClosed() {
1:72345ab: 		return closed.get();
1:72345ab: 	}
1:72345ab: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:12b7bb3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.internal.MessageUtil;
/////////////////////////////////////////////////////////////////////////
1: 		if (isClosed()) throw new IllegalStateException(MessageUtil.getMessage("UTIL0018E"));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
commit:72345ab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.utils.filesystem.impl;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.apache.aries.application.filesystem.ICloseableDirectory;
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
1: 
1: public class CloseableDirectory implements ICloseableDirectory {
1: 	protected IDirectory delegate;
1: 	private final AtomicBoolean closed = new AtomicBoolean(false);
1: 
1: 	public CloseableDirectory(IDirectory delegate) {
1: 		this.delegate = delegate;
1: 	}
1: 	
0: 	@Override
1: 	public String getName() {
1: 		checkNotClosed();
1: 		return delegate.getName();
1: 	}
1: 
0: 	@Override
1: 	public boolean isDirectory() {
1: 		checkNotClosed();
1: 		return delegate.isDirectory();
1: 	}
1: 
0: 	@Override
1: 	public boolean isFile() {
1: 		checkNotClosed();
1: 		return delegate.isFile();
1: 	}
1: 
0: 	@Override
1: 	public long getLastModified() {
1: 		checkNotClosed();
1: 		return delegate.getLastModified();
1: 	}
1: 
0: 	@Override
1: 	public IFile getFile(String name) {
1: 		checkNotClosed();
1: 		return delegate.getFile(name);
1: 	}
1: 
0: 	@Override
1: 	public long getSize() {
1: 		checkNotClosed();
1: 		return delegate.getSize();
1: 	}
1: 
0: 	@Override
1: 	public IDirectory convert() {
1: 		checkNotClosed();
1: 		return delegate.convert();
1: 	}
1: 
0: 	@Override
1: 	public IDirectory convertNested() {
1: 		checkNotClosed();
1: 		return delegate.convertNested();
1: 	}
1: 
0: 	@Override
1: 	public boolean isRoot() {
1: 		checkNotClosed();
1: 		return delegate.isRoot();
1: 	}
1: 
0: 	@Override
1: 	public IDirectory getParent() {
1: 		checkNotClosed();
1: 		return delegate.getParent();
1: 	}
1: 
0: 	@Override
1: 	public IDirectory getRoot() {
1: 		checkNotClosed();
1: 		return delegate.getRoot();
1: 	}
1: 
0: 	@Override
1: 	public Iterator<IFile> iterator() {
1: 		checkNotClosed();
1: 		return delegate.iterator();
1: 	}
1: 
0: 	@Override
1: 	public List<IFile> listFiles() {
1: 		checkNotClosed();
1: 		return delegate.listFiles();
1: 	}
1: 
0: 	@Override
1: 	public List<IFile> listAllFiles() {
1: 		checkNotClosed();
1: 		return delegate.listAllFiles();
1: 	}
1: 
0: 	@Override
1: 	public ICloseableDirectory toCloseable() {
1: 		checkNotClosed();
1: 		return delegate.toCloseable();
1: 	}
1: 
0: 	@Override
1: 	public InputStream open() throws IOException, UnsupportedOperationException {
1: 		checkNotClosed();
1: 		return delegate.open();
1: 	}
1: 
0: 	@Override
1: 	public URL toURL() throws MalformedURLException {
1: 		checkNotClosed();
1: 		return delegate.toURL();
1: 	}
1: 
0: 	@Override
1: 	public final void close() throws IOException {
1: 		if (closed.compareAndSet(false, true)) {
1: 			cleanup();
1: 		}
1: 	}
1: 	
1: 	protected void cleanup() {}
1: 	
1: 	protected void checkNotClosed() {
0: 		if (isClosed()) throw new IllegalStateException("ICloseableDirectory is closed");
1: 	}
1: 
0: 	@Override
1: 	public boolean isClosed() {
1: 		return closed.get();
1: 	}
1: }
============================================================================