1:94b52c5: /*
1:94b52c5:  * Licensed under the Apache License, Version 2.0 (the "License");
1:94b52c5:  * you may not use this file except in compliance with the License.
1:94b52c5:  * You may obtain a copy of the License at
1:94b52c5:  *
1:94b52c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:94b52c5:  *
1:94b52c5:  * Unless required by applicable law or agreed to in writing, software
1:94b52c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:94b52c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:94b52c5:  * See the License for the specific language governing permissions and
1:94b52c5:  * limitations under the License.
1:94b52c5:  */
1:96715a0: package org.apache.aries.subsystem.obr.internal;
1:96715a0: 
1:96715a0: import static org.junit.Assert.assertEquals;
1:96715a0: import static org.junit.Assert.assertFalse;
1:96715a0: import static org.junit.Assert.assertTrue;
1:96715a0: 
1:96715a0: import java.util.HashMap;
1:96715a0: import java.util.Map;
1:96715a0: 
1:7a834c3: import org.apache.aries.subsystem.util.felix.OsgiRequirementAdapter;
1:96715a0: import org.apache.felix.bundlerepository.Capability;
1:96715a0: import org.easymock.EasyMock;
1:96715a0: import org.junit.Test;
1:96715a0: import org.osgi.framework.namespace.BundleNamespace;
1:96715a0: import org.osgi.framework.namespace.PackageNamespace;
1:96715a0: import org.osgi.namespace.service.ServiceNamespace;
1:96715a0: import org.osgi.resource.Namespace;
1:96715a0: import org.osgi.resource.Requirement;
1:96715a0: public class OsgiRequirementAdapterTest {
1:96715a0: 	@Test
1:96715a0: 	public void testGetNameBundle() {
1:96715a0: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:96715a0: 		EasyMock.expect(req.getNamespace()).andReturn(BundleNamespace.BUNDLE_NAMESPACE);
1:96715a0: 		EasyMock.replay(req);
1:96715a0: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1:96715a0: 		assertEquals("Wrong name", Capability.BUNDLE, adapter.getName());
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testGetNamePackage() {
1:96715a0: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:96715a0: 		EasyMock.expect(req.getNamespace()).andReturn(PackageNamespace.PACKAGE_NAMESPACE);
1:96715a0: 		EasyMock.replay(req);
1:96715a0: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1:96715a0: 		assertEquals("Wrong name", Capability.PACKAGE, adapter.getName());
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testGetNameService() {
1:96715a0: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:96715a0: 		EasyMock.expect(req.getNamespace()).andReturn(ServiceNamespace.SERVICE_NAMESPACE);
1:96715a0: 		EasyMock.replay(req);
1:96715a0: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1:96715a0: 		assertEquals("Wrong name", Capability.SERVICE, adapter.getName());
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testIsMultipleFalse() {
1:96715a0: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:96715a0: 		Map<String, String> directives = new HashMap<String, String>();
1:96715a0: 		directives.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_SINGLE);
1:96715a0: 		EasyMock.expect(req.getDirectives()).andReturn(directives);
1:96715a0: 		EasyMock.replay(req);
1:96715a0: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1:96715a0: 		assertFalse("Requirement was multiple", adapter.isMultiple());
1:96715a0: 	}
1:96715a0: 	
1:96715a0: 	@Test
1:96715a0: 	public void testIsMultipleTrue() {
1:96715a0: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1:96715a0: 		Map<String, String> directives = new HashMap<String, String>();
1:96715a0: 		directives.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_MULTIPLE);
1:96715a0: 		EasyMock.expect(req.getDirectives()).andReturn(directives);
1:96715a0: 		EasyMock.replay(req);
1:96715a0: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1:96715a0: 		assertTrue("Requirement was not multiple", adapter.isMultiple());
1:96715a0: 	}
1:96715a0: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.util.felix.OsgiRequirementAdapter;
author:John Ross
-------------------------------------------------------------------------------
commit:94b52c5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:96715a0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.obr.internal;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.felix.bundlerepository.Capability;
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.framework.namespace.BundleNamespace;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Requirement;
1: public class OsgiRequirementAdapterTest {
1: 	@Test
1: 	public void testGetNameBundle() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		EasyMock.expect(req.getNamespace()).andReturn(BundleNamespace.BUNDLE_NAMESPACE);
1: 		EasyMock.replay(req);
1: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1: 		assertEquals("Wrong name", Capability.BUNDLE, adapter.getName());
1: 	}
1: 	
1: 	@Test
1: 	public void testGetNamePackage() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		EasyMock.expect(req.getNamespace()).andReturn(PackageNamespace.PACKAGE_NAMESPACE);
1: 		EasyMock.replay(req);
1: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1: 		assertEquals("Wrong name", Capability.PACKAGE, adapter.getName());
1: 	}
1: 	
1: 	@Test
1: 	public void testGetNameService() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		EasyMock.expect(req.getNamespace()).andReturn(ServiceNamespace.SERVICE_NAMESPACE);
1: 		EasyMock.replay(req);
1: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1: 		assertEquals("Wrong name", Capability.SERVICE, adapter.getName());
1: 	}
1: 	
1: 	@Test
1: 	public void testIsMultipleFalse() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		Map<String, String> directives = new HashMap<String, String>();
1: 		directives.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_SINGLE);
1: 		EasyMock.expect(req.getDirectives()).andReturn(directives);
1: 		EasyMock.replay(req);
1: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1: 		assertFalse("Requirement was multiple", adapter.isMultiple());
1: 	}
1: 	
1: 	@Test
1: 	public void testIsMultipleTrue() {
1: 		Requirement req = EasyMock.createNiceMock(Requirement.class);
1: 		Map<String, String> directives = new HashMap<String, String>();
1: 		directives.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, Namespace.CARDINALITY_MULTIPLE);
1: 		EasyMock.expect(req.getDirectives()).andReturn(directives);
1: 		EasyMock.replay(req);
1: 		OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(req);
1: 		assertTrue("Requirement was not multiple", adapter.isMultiple());
1: 	}
1: }
============================================================================