1:d473e9a: /*
1:d473e9a:  * Licensed to the Apache Software Foundation (ASF) under one
1:d473e9a:  * or more contributor license agreements.  See the NOTICE file
1:d473e9a:  * distributed with this work for additional information
1:d473e9a:  * regarding copyright ownership.  The ASF licenses this file
1:d473e9a:  * to you under the Apache License, Version 2.0 (the
1:d473e9a:  * "License"); you may not use this file except in compliance
1:d473e9a:  * with the License.  You may obtain a copy of the License at
1:d473e9a:  *
1:d473e9a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d473e9a:  *
1:d473e9a:  * Unless required by applicable law or agreed to in writing,
1:d473e9a:  * software distributed under the License is distributed on an
1:d473e9a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d473e9a:  * KIND, either express or implied.  See the License for the
1:d473e9a:  * specific language governing permissions and limitations
1:d473e9a:  * under the License.
1:d473e9a:  */
1:d473e9a: package org.apache.aries.blueprint.container;
3:d473e9a: 
1:d473e9a: import java.lang.reflect.Method;
1:d473e9a: import java.util.Arrays;
1:d473e9a: import java.util.Collection;
1:d473e9a: import java.util.HashSet;
1:d473e9a: import java.util.List;
1:d473e9a: import java.util.Set;
1:d473e9a: 
1:eb17477: import org.apache.aries.blueprint.di.ExecutionContext;
1:c9e6b82: import org.apache.aries.blueprint.di.PassThroughRecipe;
1:d473e9a: import org.junit.Test;
1:c9e6b82: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:c9e6b82: 
1:d473e9a: import static org.junit.Assert.*;
1:d473e9a: 
1:d473e9a: public class BeanRecipeTest {
1:d473e9a: 	static class Base {
1:d473e9a: 		public static Object getObject() { return null; }
1:d473e9a: 		public static Object getOne(Object o) { return null; }
1:d473e9a: 
1:d473e9a: 		public static Object getMany(Object o, String n, String n2) { return null; }
1:d473e9a: 	}
1:d473e9a: 	
1:d473e9a: 	static class Middle extends Base {
1:d473e9a: 		public static Number getObject() { return null; }
1:d473e9a: 		public static Number getOne(Number n) { return null; }
1:d473e9a: 		public static Number getOne(Object o) { return null; }
1:d473e9a: 		
1:d473e9a: 		public static Object getMany(Object o, String n, Number i) { return null; }
1:d473e9a: 		public static Object getBasic(int n) { return 0; }
1:d473e9a: 	}
1:d473e9a: 	
1:d473e9a: 	static class Top extends Middle {
1:d473e9a: 		public static Integer getObject() { return null; }
1:d473e9a: 		public static Integer getOne(Integer n) { return null; }
1:d473e9a: 		
1:d473e9a: 		public static Object getMany(Object o, String n, Number i) { return null; }
1:d473e9a: 		public static Object getBasic(int n) { return 0; }
1:d473e9a: 	}
1:d473e9a: 	
1:d473e9a: 	static class Unrelated {
1:d473e9a: 		public static String getObject() { return null; }
1:d473e9a: 		public static Object getBasic(int n) { return 1; }
1:d473e9a: 	}
1:eb17477: 
1:eb17477:     static public interface Example<A> {}
1:eb17477:     static public class ExampleImpl implements Example<String> {}
1:eb17477:     static public class ExampleService {
1:eb17477:         public ExampleService(Example<String> e) {}
1:eb17477:     }
1:eb17477: 
1:224d200:     static public interface BaseInterface<T> { }
1:224d200:     static public interface ExtendedInterface<T0, T1> extends BaseInterface<T1> {}
1:224d200:     static public class MyClass implements ExtendedInterface<String, Integer> { }
1:224d200:     static public class MyClass2<T> implements BaseInterface<T> { }
1:224d200:     static public class MyClass3 extends MyClass2<Long> { }
1:224d200:     static public class MyService {
1:224d200:         public MyService(BaseInterface<? extends Number> e) {}
1:224d200:     }
1:224d200: 
1:224d200: 
1:c9e6b82:     static public interface A {
1:c9e6b82:         String getA();
1:c9e6b82:         void setA(String a);
1:c9e6b82:     }
1:c9e6b82:     static public interface B extends A {
1:c9e6b82:         String getB();
1:c9e6b82:         void setB(String b);
1:c9e6b82:         void init();
1:c9e6b82:     }
1:c9e6b82:     static public class C implements B {
1:c9e6b82:         String a = "a", b = "b", c = "c";
1:c9e6b82:         public String getA() {
1:c9e6b82:             return a;
1:c9e6b82:         }
1:c9e6b82:         public void setA(String a) {
1:c9e6b82:             this.a = a;
1:c9e6b82:         }
1:c9e6b82:         public String getB() {
1:c9e6b82:             return b;
1:c9e6b82:         }
1:c9e6b82:         public void setB(String b) {
1:c9e6b82:             this.b = b;
1:c9e6b82:         }
1:c9e6b82:         public String getC() {
1:c9e6b82:             return c;
1:c9e6b82:         }
1:c9e6b82:         public void setC(String c) {
1:c9e6b82:             this.c = c;
1:c9e6b82:         }
1:c9e6b82:         public void init() {
1:c9e6b82:         }
1:c9e6b82:     }
1:c9e6b82:     static public class Factory {
1:c9e6b82:         public B create() {
1:c9e6b82:             return new D();
1:c9e6b82:         }
1:c9e6b82:         private class D extends C {
1:c9e6b82:             String d = "d";
1:c9e6b82:             public String getD() {
1:c9e6b82:                 return d;
1:c9e6b82:             }
1:c9e6b82:             public void setD(String d) {
1:c9e6b82:                 this.d = d;
1:c9e6b82:             }
1:c9e6b82:             public void init() {
1:c9e6b82:             }
1:c9e6b82:         }
1:c9e6b82:     }
1:c9e6b82: 
1:c9e6b82: 
1:eb17477:     @Test
1:eb17477:     public void parameterWithGenerics() throws Exception {
1:c89ef70:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
1:eb17477:         BeanRecipe recipe = new BeanRecipe("example", container, ExampleService.class, false);
1:eb17477:         recipe.setArguments(Arrays.<Object>asList(new ExampleImpl()));
1:eb17477:         recipe.setArgTypes(Arrays.<String>asList((String) null));
1:eb17477:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:eb17477:         recipe.create();
1:eb17477:     }
1:eb17477: 
1:eb17477:     @Test
1:224d200:     public void parameterWithComplexGenerics1() throws Exception {
1:224d200:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
1:224d200:         BeanRecipe recipe = new BeanRecipe("example", container, MyService.class, false);
1:224d200:         recipe.setArguments(Arrays.<Object>asList(new MyClass()));
1:224d200:         recipe.setArgTypes(Arrays.<String>asList((String) null));
1:224d200:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:224d200:         recipe.create();
1:224d200:     }
1:224d200: 
1:224d200:     @Test
1:224d200:     public void parameterWithComplexGenerics2() throws Exception {
1:224d200:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
1:224d200:         BeanRecipe recipe = new BeanRecipe("example", container, MyService.class, false);
1:224d200:         recipe.setArguments(Arrays.<Object>asList(new MyClass3()));
1:224d200:         recipe.setArgTypes(Arrays.<String>asList((String) null));
1:224d200:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:224d200:         recipe.create();
1:224d200:     }
1:224d200: 
1:224d200:     @Test
1:d473e9a: 	public void parameterLessHiding() throws Exception {
1:d473e9a: 		Set<Method> methods = new HashSet<Method>(
1:d473e9a: 				Arrays.asList(
1:d473e9a: 						Base.class.getMethod("getObject"),
1:d473e9a: 						Middle.class.getMethod("getObject"),
1:d473e9a: 						Top.class.getMethod("getObject"),
1:d473e9a: 						Unrelated.class.getMethod("getObject")
1:d473e9a: 				));
1:d473e9a: 		
1:d473e9a: 		methods = applyStaticHidingRules(methods);
1:d473e9a: 
1:d473e9a: 		assertEquals(2, methods.size());
1:d473e9a: 		assertTrue(methods.contains(Top.class.getMethod("getObject")));
1:d473e9a: 		assertTrue(methods.contains(Unrelated.class.getMethod("getObject")));
1:d473e9a: 		assertFalse(methods.contains(Middle.class.getMethod("getObject")));
1:d473e9a: 	}
1:d473e9a: 	
2:d473e9a: 	@Test
1:d473e9a: 	public void parameterDistinction() throws Exception {
1:d473e9a: 		Set<Method> methods = new HashSet<Method>(
1:d473e9a: 				Arrays.asList(
1:d473e9a: 						Base.class.getMethod("getOne", Object.class),
1:d473e9a: 						Middle.class.getMethod("getOne", Number.class),
1:d473e9a: 						Middle.class.getMethod("getOne", Object.class),
1:d473e9a: 						Top.class.getMethod("getOne", Integer.class)
1:d473e9a: 				));
1:d473e9a: 		
1:d473e9a: 		methods = applyStaticHidingRules(methods);
1:d473e9a: 		
1:d473e9a: 		assertEquals(3, methods.size());
1:d473e9a: 		assertFalse(methods.contains(Base.class.getMethod("getOne", Object.class)));
1:d473e9a: 	}
1:d473e9a: 	
1:d473e9a: 	@Test
1:d473e9a: 	public void multiParameterTest() throws Exception {
1:d473e9a: 		Set<Method> methods = new HashSet<Method>(
1:d473e9a: 				Arrays.asList(
1:d473e9a: 						Base.class.getMethod("getMany", Object.class, String.class, String.class),
1:d473e9a: 						Middle.class.getMethod("getMany", Object.class, String.class, Number.class),
1:d473e9a: 						Top.class.getMethod("getMany", Object.class, String.class, Number.class)
1:d473e9a: 				));
1:d473e9a: 		
1:d473e9a: 		methods = applyStaticHidingRules(methods);
1:d473e9a: 		
1:d473e9a: 		assertEquals(2, methods.size());
1:d473e9a: 		assertFalse(methods.contains(Middle.class.getMethod("getMany", Object.class, String.class, Number.class)));
1:d473e9a: 		
1:d473e9a: 	}
1:d473e9a: 	
1:d473e9a: 	@Test
1:d473e9a: 	public void baseTypeHiding() throws Exception {
1:d473e9a: 		Set<Method> methods = new HashSet<Method>(
1:d473e9a: 				Arrays.asList(
1:d473e9a: 						Middle.class.getMethod("getBasic", int.class),
1:d473e9a: 						Top.class.getMethod("getBasic", int.class),
1:d473e9a: 						Unrelated.class.getMethod("getBasic", int.class)
1:d473e9a: 				));
1:d473e9a: 		
1:d473e9a: 		methods = applyStaticHidingRules(methods);
1:d473e9a: 		
1:d473e9a: 		assertEquals(2, methods.size());
1:d473e9a: 		assertFalse(methods.contains(Middle.class.getMethod("getBasic", int.class)));
1:d473e9a: 	}
1:c9e6b82: 
1:c9e6b82:     @Test
1:c9e6b82:     public void protectedClassAccess() throws Exception {
1:c89ef70:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
1:c9e6b82:         BeanRecipe recipe = new BeanRecipe("a", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:c9e6b82:         recipe.setFactoryMethod("getA");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         assertNotNull(recipe.create());
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("b", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:c9e6b82:         recipe.setFactoryMethod("getB");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         assertNotNull(recipe.create());
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("c", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:c9e6b82:         recipe.setFactoryMethod("getC");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         assertNotNull(recipe.create());
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("d", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:c9e6b82:         recipe.setFactoryMethod("getD");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         try {
1:c9e6b82:             assertNotNull(recipe.create());
1:c9e6b82:             fail("Should have thrown an exception");
1:c9e6b82:         } catch (ComponentDefinitionException e) {
1:c9e6b82:             // ok
1:c9e6b82:         }
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("a", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:c9e6b82:         recipe.setFactoryMethod("create");
1:c9e6b82:         recipe.setProperty("a", "a");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         assertNotNull(recipe.create());
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("b", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:c9e6b82:         recipe.setFactoryMethod("create");
1:c9e6b82:         recipe.setProperty("b", "b");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         assertNotNull(recipe.create());
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("c", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:c9e6b82:         recipe.setFactoryMethod("create");
1:c9e6b82:         recipe.setProperty("c", "c");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         assertNotNull(recipe.create());
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("d", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:c9e6b82:         recipe.setFactoryMethod("create");
1:c9e6b82:         recipe.setProperty("d", "d");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         try {
1:c9e6b82:             assertNotNull(recipe.create());
1:c9e6b82:             fail("Should have thrown an exception");
1:c9e6b82:         } catch (ComponentDefinitionException e) {
1:c9e6b82:             // ok
1:c9e6b82:         }
1:c9e6b82: 
1:c9e6b82:         recipe = new BeanRecipe("a", container, null, false);
1:c9e6b82:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:c9e6b82:         recipe.setFactoryMethod("create");
1:c9e6b82:         recipe.setInitMethod("init");
1:c9e6b82:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:c9e6b82:         assertNotNull(recipe.create());
1:c9e6b82: 
1:c9e6b82:     }
1:c9e6b82: 
1:c9e6b82: 
1:c9e6b82:     private Set<Method> applyStaticHidingRules(Collection<Method> methods) {
1:d473e9a: 		try {
1:d473e9a: 			Method m = BeanRecipe.class.getDeclaredMethod("applyStaticHidingRules", Collection.class);
1:d473e9a: 			m.setAccessible(true);
1:d473e9a: 			return new HashSet<Method>((List<Method>) m.invoke(null, methods));
1:d473e9a: 		} catch (Exception e) { 
1:d473e9a: 			throw new RuntimeException(e);
1:d473e9a: 		}
1:d473e9a: 	}
1:d473e9a: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:224d200
/////////////////////////////////////////////////////////////////////////
1:     static public interface BaseInterface<T> { }
1:     static public interface ExtendedInterface<T0, T1> extends BaseInterface<T1> {}
1:     static public class MyClass implements ExtendedInterface<String, Integer> { }
1:     static public class MyClass2<T> implements BaseInterface<T> { }
1:     static public class MyClass3 extends MyClass2<Long> { }
1:     static public class MyService {
1:         public MyService(BaseInterface<? extends Number> e) {}
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void parameterWithComplexGenerics1() throws Exception {
1:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
1:         BeanRecipe recipe = new BeanRecipe("example", container, MyService.class, false);
1:         recipe.setArguments(Arrays.<Object>asList(new MyClass()));
1:         recipe.setArgTypes(Arrays.<String>asList((String) null));
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         recipe.create();
1:     }
1: 
1:     @Test
1:     public void parameterWithComplexGenerics2() throws Exception {
1:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
1:         BeanRecipe recipe = new BeanRecipe("example", container, MyService.class, false);
1:         recipe.setArguments(Arrays.<Object>asList(new MyClass3()));
1:         recipe.setArgTypes(Arrays.<String>asList((String) null));
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         recipe.create();
1:     }
1: 
1:     @Test
commit:c89ef70
/////////////////////////////////////////////////////////////////////////
1:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
/////////////////////////////////////////////////////////////////////////
1:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null, null);
commit:6d7c26a
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null);
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null, null);
commit:fe68bf1
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null);
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null, null);
commit:c9e6b82
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.di.PassThroughRecipe;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     static public interface A {
1:         String getA();
1:         void setA(String a);
1:     }
1:     static public interface B extends A {
1:         String getB();
1:         void setB(String b);
1:         void init();
1:     }
1:     static public class C implements B {
1:         String a = "a", b = "b", c = "c";
1:         public String getA() {
1:             return a;
1:         }
1:         public void setA(String a) {
1:             this.a = a;
1:         }
1:         public String getB() {
1:             return b;
1:         }
1:         public void setB(String b) {
1:             this.b = b;
1:         }
1:         public String getC() {
1:             return c;
1:         }
1:         public void setC(String c) {
1:             this.c = c;
1:         }
1:         public void init() {
1:         }
1:     }
1:     static public class Factory {
1:         public B create() {
1:             return new D();
1:         }
1:         private class D extends C {
1:             String d = "d";
1:             public String getD() {
1:                 return d;
1:             }
1:             public void setD(String d) {
1:                 this.d = d;
1:             }
1:             public void init() {
1:             }
1:         }
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void protectedClassAccess() throws Exception {
0:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null);
1:         BeanRecipe recipe = new BeanRecipe("a", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:         recipe.setFactoryMethod("getA");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         assertNotNull(recipe.create());
1: 
1:         recipe = new BeanRecipe("b", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:         recipe.setFactoryMethod("getB");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         assertNotNull(recipe.create());
1: 
1:         recipe = new BeanRecipe("c", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:         recipe.setFactoryMethod("getC");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         assertNotNull(recipe.create());
1: 
1:         recipe = new BeanRecipe("d", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory().create()));
1:         recipe.setFactoryMethod("getD");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         try {
1:             assertNotNull(recipe.create());
1:             fail("Should have thrown an exception");
1:         } catch (ComponentDefinitionException e) {
1:             // ok
1:         }
1: 
1:         recipe = new BeanRecipe("a", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:         recipe.setFactoryMethod("create");
1:         recipe.setProperty("a", "a");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         assertNotNull(recipe.create());
1: 
1:         recipe = new BeanRecipe("b", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:         recipe.setFactoryMethod("create");
1:         recipe.setProperty("b", "b");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         assertNotNull(recipe.create());
1: 
1:         recipe = new BeanRecipe("c", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:         recipe.setFactoryMethod("create");
1:         recipe.setProperty("c", "c");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         assertNotNull(recipe.create());
1: 
1:         recipe = new BeanRecipe("d", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:         recipe.setFactoryMethod("create");
1:         recipe.setProperty("d", "d");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         try {
1:             assertNotNull(recipe.create());
1:             fail("Should have thrown an exception");
1:         } catch (ComponentDefinitionException e) {
1:             // ok
1:         }
1: 
1:         recipe = new BeanRecipe("a", container, null, false);
1:         recipe.setFactoryComponent(new PassThroughRecipe("factory", new Factory()));
1:         recipe.setFactoryMethod("create");
1:         recipe.setInitMethod("init");
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         assertNotNull(recipe.create());
1: 
1:     }
1: 
1: 
1:     private Set<Method> applyStaticHidingRules(Collection<Method> methods) {
commit:eb17477
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.di.ExecutionContext;
/////////////////////////////////////////////////////////////////////////
1: 
1:     static public interface Example<A> {}
1:     static public class ExampleImpl implements Example<String> {}
1:     static public class ExampleService {
1:         public ExampleService(Example<String> e) {}
1:     }
1: 
1:     @Test
1:     public void parameterWithGenerics() throws Exception {
0:         BlueprintContainerImpl container = new BlueprintContainerImpl(null, null, null, null, null, null, null);
1:         BeanRecipe recipe = new BeanRecipe("example", container, ExampleService.class, false);
1:         recipe.setArguments(Arrays.<Object>asList(new ExampleImpl()));
1:         recipe.setArgTypes(Arrays.<String>asList((String) null));
1:         ExecutionContext.Holder.setContext(new BlueprintRepository(container));
1:         recipe.create();
1:     }
1: 
1:     @Test
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:d473e9a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.container;
1: 
1: import java.lang.reflect.Method;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.junit.Test;
1: import static org.junit.Assert.*;
1: 
1: public class BeanRecipeTest {
1: 	static class Base {
1: 		public static Object getObject() { return null; }
1: 		public static Object getOne(Object o) { return null; }
1: 
1: 		public static Object getMany(Object o, String n, String n2) { return null; }
1: 	}
1: 	
1: 	static class Middle extends Base {
1: 		public static Number getObject() { return null; }
1: 		public static Number getOne(Number n) { return null; }
1: 		public static Number getOne(Object o) { return null; }
1: 		
1: 		public static Object getMany(Object o, String n, Number i) { return null; }
1: 		public static Object getBasic(int n) { return 0; }
1: 	}
1: 	
1: 	static class Top extends Middle {
1: 		public static Integer getObject() { return null; }
1: 		public static Integer getOne(Integer n) { return null; }
1: 		
1: 		public static Object getMany(Object o, String n, Number i) { return null; }
1: 		public static Object getBasic(int n) { return 0; }
1: 	}
1: 	
1: 	static class Unrelated {
1: 		public static String getObject() { return null; }
1: 		public static Object getBasic(int n) { return 1; }
1: 	}
1: 	
1: 	@Test
1: 	public void parameterLessHiding() throws Exception {
1: 		Set<Method> methods = new HashSet<Method>(
1: 				Arrays.asList(
1: 						Base.class.getMethod("getObject"),
1: 						Middle.class.getMethod("getObject"),
1: 						Top.class.getMethod("getObject"),
1: 						Unrelated.class.getMethod("getObject")
1: 				));
1: 		
1: 		methods = applyStaticHidingRules(methods);
1: 
1: 		assertEquals(2, methods.size());
1: 		assertTrue(methods.contains(Top.class.getMethod("getObject")));
1: 		assertTrue(methods.contains(Unrelated.class.getMethod("getObject")));
1: 		assertFalse(methods.contains(Middle.class.getMethod("getObject")));
1: 	}
1: 	
1: 	@Test
1: 	public void parameterDistinction() throws Exception {
1: 		Set<Method> methods = new HashSet<Method>(
1: 				Arrays.asList(
1: 						Base.class.getMethod("getOne", Object.class),
1: 						Middle.class.getMethod("getOne", Number.class),
1: 						Middle.class.getMethod("getOne", Object.class),
1: 						Top.class.getMethod("getOne", Integer.class)
1: 				));
1: 		
1: 		methods = applyStaticHidingRules(methods);
1: 		
1: 		assertEquals(3, methods.size());
1: 		assertFalse(methods.contains(Base.class.getMethod("getOne", Object.class)));
1: 	}
1: 	
1: 	@Test
1: 	public void multiParameterTest() throws Exception {
1: 		Set<Method> methods = new HashSet<Method>(
1: 				Arrays.asList(
1: 						Base.class.getMethod("getMany", Object.class, String.class, String.class),
1: 						Middle.class.getMethod("getMany", Object.class, String.class, Number.class),
1: 						Top.class.getMethod("getMany", Object.class, String.class, Number.class)
1: 				));
1: 		
1: 		methods = applyStaticHidingRules(methods);
1: 		
1: 		assertEquals(2, methods.size());
1: 		assertFalse(methods.contains(Middle.class.getMethod("getMany", Object.class, String.class, Number.class)));
1: 		
1: 	}
1: 	
1: 	@Test
1: 	public void baseTypeHiding() throws Exception {
1: 		Set<Method> methods = new HashSet<Method>(
1: 				Arrays.asList(
1: 						Middle.class.getMethod("getBasic", int.class),
1: 						Top.class.getMethod("getBasic", int.class),
1: 						Unrelated.class.getMethod("getBasic", int.class)
1: 				));
1: 		
1: 		methods = applyStaticHidingRules(methods);
1: 		
1: 		assertEquals(2, methods.size());
1: 		assertFalse(methods.contains(Middle.class.getMethod("getBasic", int.class)));
1: 	}
1: 	
0: 	private Set<Method> applyStaticHidingRules(Collection<Method> methods) {
1: 		try {
1: 			Method m = BeanRecipe.class.getDeclaredMethod("applyStaticHidingRules", Collection.class);
1: 			m.setAccessible(true);
1: 			return new HashSet<Method>((List<Method>) m.invoke(null, methods));
1: 		} catch (Exception e) { 
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1: }
============================================================================