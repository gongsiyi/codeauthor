1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.container;
1:f13c6ac: 
1:f13c6ac: import java.io.ByteArrayOutputStream;
1:c290cc1: import java.lang.reflect.Constructor;
1:f13c6ac: import java.math.BigInteger;
1:f13c6ac: import java.net.URI;
1:f13c6ac: import java.net.URL;
1:1ef5bcf: import java.util.ArrayList;
1:f13c6ac: import java.util.Arrays;
1:a9612e5: import java.util.Collections;
1:a9612e5: import java.util.Hashtable;
1:1ef5bcf: import java.util.Iterator;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Locale;
1:f13c6ac: import java.util.Properties;
1:f13c6ac: 
1:f13c6ac: import junit.framework.TestCase;
1:6414875: import org.apache.aries.blueprint.TestBlueprintContainer;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyClass;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyObject;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Tata;
1:c290cc1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Toto;
1:f13c6ac: import org.osgi.service.blueprint.container.ReifiedType;
1:f13c6ac: import org.osgi.service.blueprint.container.Converter;
1:f13c6ac: 
1:f13c6ac: public class AggregateConverterTest extends TestCase {
1:f13c6ac: 
1:f13c6ac:     private AggregateConverter service;
1:f13c6ac: 
1:5e2bd49:     protected void setUp() throws Exception {
1:f13c6ac:         service = new AggregateConverter(new TestBlueprintContainer(null));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertNumbers() throws Exception {
1:f13c6ac:         assertEquals(1, service.convert(1.46f, int.class));
1:f13c6ac:         assertEquals(1.0d, service.convert(1, double.class));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertSimpleTypes() throws Exception {
1:f13c6ac:         assertEquals(123, service.convert("123", int.class));
1:f13c6ac:         assertEquals(123, service.convert("123", Integer.class));
1:f13c6ac:         assertEquals(123l, service.convert("123", long.class));
1:f13c6ac:         assertEquals(123l, service.convert("123", Long.class));
1:f13c6ac:         assertEquals((short) 123, service.convert("123", short.class));
1:f13c6ac:         assertEquals((short) 123, service.convert("123", Short.class));
1:f13c6ac:         assertEquals(1.5f, service.convert("1.5", float.class));
1:f13c6ac:         assertEquals(1.5f, service.convert("1.5", Float.class));
1:f13c6ac:         assertEquals(1.5, service.convert("1.5", double.class));
1:f13c6ac:         assertEquals(1.5, service.convert("1.5", Double.class));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertCharacter() throws Exception {
1:f13c6ac:         assertEquals('c', service.convert("c", char.class));
1:f13c6ac:         assertEquals('c', service.convert("c", Character.class));
1:f13c6ac:         assertEquals('\u00F6', service.convert("\\u00F6", char.class));
1:f13c6ac:         assertEquals('\u00F6', service.convert("\\u00F6", Character.class));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertBoolean() throws Exception {
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("true", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("yes", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("on", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("TRUE", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("YES", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("ON", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("true", boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("yes", boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("on", boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("TRUE", boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("YES", boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert("ON", boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("false", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("no", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("off", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("FALSE", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("NO", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("OFF", Boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("false", boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("no", boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("off", boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("FALSE", boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("NO", boolean.class));
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert("OFF", boolean.class));
1:f13c6ac:         
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert(false, boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert(true, boolean.class));        
1:f13c6ac:         assertEquals(Boolean.FALSE, service.convert(false, Boolean.class));
1:f13c6ac:         assertEquals(Boolean.TRUE, service.convert(true, Boolean.class));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertOther() throws Exception {
1:f13c6ac:         assertEquals(URI.create("urn:test"), service.convert("urn:test", URI.class));
1:f13c6ac:         assertEquals(new URL("file:/test"), service.convert("file:/test", URL.class));
1:f13c6ac:         assertEquals(new BigInteger("12345"), service.convert("12345", BigInteger.class));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertProperties() throws Exception {
1:f13c6ac:         Properties props = new Properties();
1:f13c6ac:         props.setProperty("key", "value");
1:f13c6ac:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:f13c6ac:         props.store(baos, null);
1:f13c6ac:         props = (Properties) service.convert(baos.toString(), Properties.class);
1:f13c6ac:         assertEquals(1, props.size());
1:f13c6ac:         assertEquals("value", props.getProperty("key"));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertLocale() throws Exception {
1:f13c6ac:         Object result;
1:f13c6ac:         result = service.convert("en", Locale.class);
1:f13c6ac:         assertTrue(result instanceof Locale);
1:f13c6ac:         assertEquals(new Locale("en"), result);
1:f13c6ac:         
1:f13c6ac:         result = service.convert("de_DE", Locale.class);
1:f13c6ac:         assertTrue(result instanceof Locale);
1:f13c6ac:         assertEquals(new Locale("de", "DE"), result);
1:f13c6ac:         
1:f13c6ac:         result = service.convert("_GB", Locale.class);
1:f13c6ac:         assertTrue(result instanceof Locale);
1:f13c6ac:         assertEquals(new Locale("", "GB"), result);
1:f13c6ac:         
1:f13c6ac:         result = service.convert("en_US_WIN", Locale.class);
1:f13c6ac:         assertTrue(result instanceof Locale);
1:f13c6ac:         assertEquals(new Locale("en", "US", "WIN"), result);
1:f13c6ac:         
1:f13c6ac:         result = service.convert("de__POSIX", Locale.class);
1:f13c6ac:         assertTrue(result instanceof Locale);
1:f13c6ac:         assertEquals(new Locale("de", "", "POSIX"), result);
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testConvertClass() throws Exception {
1:f13c6ac:         assertEquals(this, service.convert(this, AggregateConverterTest.class));
1:f13c6ac:         assertEquals(AggregateConverterTest.class, service.convert(this.getClass().getName(), Class.class));
1:f13c6ac:         assertEquals(int[].class, service.convert("int[]", Class.class));
1:0a21aab:         assertEquals(RegionIterable.class, service.convert(RegionIterable.class.getName(), new GenericType(Class.class, new GenericType(RegionIterable.class))));
1:0a21aab:         assertTrue(AggregateConverter.isAssignable(RegionIterable.class, new GenericType(Class.class, new GenericType(RegionIterable.class))));
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testConvertArray() throws Exception {
1:f13c6ac:         Object obj = service.convert(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)),
1:f13c6ac:                                      GenericType.parse("java.util.List<java.lang.Integer>[]", getClass().getClassLoader()));
1:f13c6ac:         assertNotNull(obj);
1:f13c6ac:         assertTrue(obj.getClass().isArray());
1:f13c6ac:         Object[] o = (Object[]) obj;
1:f13c6ac:         assertEquals(2, o.length);
1:f13c6ac:         assertNotNull(o[0]);
1:f13c6ac:         assertTrue(o[0] instanceof List);
1:f13c6ac:         assertEquals(2, ((List) o[0]).size());
1:f13c6ac:         assertEquals(1, ((List) o[0]).get(0));
1:f13c6ac:         assertEquals(2, ((List) o[0]).get(1));
1:f13c6ac:         assertNotNull(o[0]);
1:f13c6ac:         assertTrue(o[1] instanceof List);
1:f13c6ac:         assertEquals(2, ((List) o[1]).size());
1:f13c6ac:         assertEquals(3, ((List) o[1]).get(0));
1:f13c6ac:         assertEquals(4, ((List) o[1]).get(1));
1:f13c6ac:         //assertEquals((Object) new int[] { 1, 2 }, (Object) service.convert(Arrays.asList(1, 2), int[].class));
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testCustom() throws Exception {
1:f13c6ac:         AggregateConverter s = new AggregateConverter(new TestBlueprintContainer(null));
1:f13c6ac:         s.registerConverter(new RegionConverter());
1:f13c6ac:         s.registerConverter(new EuRegionConverter());
1:f13c6ac:         
1:f13c6ac:         // lookup on a specific registered converter type
1:f13c6ac:         Object result;
1:f13c6ac:         result = s.convert(new Object(), Region.class);
1:f13c6ac:         assertTrue(result instanceof Region);
1:f13c6ac:         assertFalse(result instanceof EuRegion);
1:f13c6ac:                 
1:f13c6ac:         result = s.convert(new Object(), EuRegion.class);
1:f13c6ac:         assertTrue(result instanceof EuRegion);
1:f13c6ac:         
1:f13c6ac:         // find first converter that matches the type
1:f13c6ac:         s = new AggregateConverter(new TestBlueprintContainer(null));
1:f13c6ac:         s.registerConverter(new AsianRegionConverter());
1:f13c6ac:         s.registerConverter(new EuRegionConverter());
1:fc8fba6:         s.registerConverter(new NullMarkerConverter());
1:f13c6ac:         
1:f13c6ac:         result = s.convert(new Object(), Region.class);
1:f13c6ac:         // TODO: check with the spec about the result
1:f13c6ac:         //assertTrue(result instanceof AsianRegion || result instanceof EuRegion);
1:fc8fba6:         result = s.convert(new Object(), NullMarker.class);
1:fc8fba6:         assertNull(result);
1:f13c6ac:     }
1:1ef5bcf: 
1:c290cc1:     public void testGenericWilcard() throws Exception {
1:c290cc1:         Constructor cns = MyClass.class.getConstructor(MyObject.class);
1:c290cc1:         assertTrue(AggregateConverter.isAssignable(new Toto(), new GenericType(cns.getGenericParameterTypes()[0])));
1:c290cc1: 
1:c290cc1:         cns = Tata.class.getConstructor(MyObject.class);
1:c290cc1:         assertTrue(AggregateConverter.isAssignable(new Toto(), new GenericType(cns.getGenericParameterTypes()[0])));
1:c290cc1:     }
1:c290cc1: 
1:1ef5bcf:     public void testGenericAssignable() throws Exception {
1:1ef5bcf:         AggregateConverter s = new AggregateConverter(new TestBlueprintContainer(null));
1:1ef5bcf: 
1:1ef5bcf:         assertNotNull(s.convert(new RegionIterable(), new GenericType(Iterable.class, new GenericType(Region.class))));
1:1ef5bcf: 
1:1ef5bcf:         try {
1:1ef5bcf:             s.convert(new ArrayList<Region>(), new GenericType(Iterable.class, new GenericType(Region.class)));
1:1ef5bcf:             fail("Conversion should have thrown an exception");
1:1ef5bcf:         } catch (Exception e) {
1:1ef5bcf:             // Ignore
1:1ef5bcf:         }
1:1ef5bcf: 
1:c049af2:         assertTrue(Iterable.class.isAssignableFrom(RegionIterable.class));
1:c049af2:         // note that method signature is fromType, toType - reverse than above
1:c049af2:         assertTrue("Type should be assignable.", AggregateConverter.isTypeAssignable(new GenericType(RegionIterable.class), new GenericType(Iterable.class)));
1:1ef5bcf:     }
1:1ef5bcf: 
1:1ef5bcf:     public void testGenericCollection() throws Exception {
1:1ef5bcf:         AggregateConverter s = new AggregateConverter(new TestBlueprintContainer(null));
1:1ef5bcf: 
1:1ef5bcf:         try {
1:1ef5bcf:             s.convert(new ArrayList(), new GenericType(Iterable.class, new GenericType(Region.class)));
1:1ef5bcf:             fail("Conversion should have thrown an exception");
1:1ef5bcf:         } catch (Exception e) {
1:1ef5bcf:             // Ignore
1:1ef5bcf:         }
1:1ef5bcf: 
1:1ef5bcf:         try {
1:1ef5bcf:             s.convert(Arrays.asList(0l), new GenericType(Iterable.class, new GenericType(Region.class)));
1:1ef5bcf:             fail("Conversion should have thrown an exception");
1:1ef5bcf:         } catch (Exception e) {
1:1ef5bcf:             // Ignore
1:1ef5bcf:         }
1:1ef5bcf: 
1:1ef5bcf:         assertNotNull(s.convert(Arrays.asList(new EuRegion() {}), new GenericType(List.class, new GenericType(Region.class))));
1:1ef5bcf:     }
1:a9612e5: 
1:a9612e5:     public void testConvertCompatibleCollections() throws Exception {
1:a9612e5:         Object org = Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4));
1:a9612e5:         Object obj = service.convert(org,
1:a9612e5:                 GenericType.parse("java.util.List<java.util.List<java.lang.Integer>>", getClass().getClassLoader()));
1:a9612e5:         assertSame(org, obj);
1:a9612e5: 
1:a9612e5:         org = Collections.singletonMap("foo", 1);
1:a9612e5:         obj = service.convert(org,
1:a9612e5:                 GenericType.parse("java.util.Map<java.lang.String,java.lang.Integer>", getClass().getClassLoader()));
1:a9612e5:         assertSame(org, obj);
1:a9612e5: 
1:a9612e5:         org = new int[] { 1, 2 };
1:a9612e5:         obj = service.convert(org,
1:a9612e5:                 GenericType.parse("int[]", getClass().getClassLoader()));
1:a9612e5:         assertSame(org, obj);
1:a9612e5: 
1:a9612e5:         org = new Object[] { 1, 2 };
1:a9612e5:         obj = service.convert(org,
1:a9612e5:                 GenericType.parse("int[]", getClass().getClassLoader()));
1:a9612e5:         assertNotSame(org, obj);
1:a9612e5: 
1:a9612e5:         Hashtable<String, Integer> ht = new Hashtable<String, Integer>();
1:a9612e5:         ht.put("foo", 1);
1:a9612e5:         org = ht;
1:a9612e5:         obj = service.convert(org, GenericType.parse("java.util.Dictionary<java.lang.String,java.lang.Integer>", getClass().getClassLoader()));
1:a9612e5:         assertSame(org, obj);;
1:a9612e5:     }
1:f13c6ac:     
1:f13c6ac:     private interface Region {} 
1:f13c6ac:     
1:f13c6ac:     private interface EuRegion extends Region {}
1:f13c6ac:     
1:f13c6ac:     private interface AsianRegion extends Region {}
1:f13c6ac: 
1:fc8fba6:     private interface NullMarker {}
1:fc8fba6:     
1:f13c6ac:     private static class RegionConverter implements Converter {
1:f13c6ac:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:f13c6ac:             return Region.class == toType.getRawClass();
1:f13c6ac:         }
1:f13c6ac:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:f13c6ac:             return new Region() {} ;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     private static class EuRegionConverter implements Converter {
1:f13c6ac:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:f13c6ac:             return toType.getRawClass().isAssignableFrom(EuRegion.class);
1:f13c6ac:         }
1:f13c6ac:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:f13c6ac:             return new EuRegion() {} ;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     private static class AsianRegionConverter implements Converter {
1:f13c6ac:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:f13c6ac:             return toType.getRawClass().isAssignableFrom(AsianRegion.class);
1:f13c6ac:         }
1:f13c6ac:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:f13c6ac:             return new AsianRegion() {} ;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:fc8fba6:     private static class NullMarkerConverter implements Converter {
1:fc8fba6:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:fc8fba6:             return toType.getRawClass().isAssignableFrom(NullMarker.class);
1:f13c6ac:         }
1:fc8fba6:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:fc8fba6:             return null;
1:fc8fba6:         }
1:fc8fba6:     }
1:fc8fba6: 
1:1ef5bcf:     private static class RegionIterable implements Iterable<Region> {
1:1ef5bcf:         public Iterator<Region> iterator() {
1:1ef5bcf:             return null;
1:1ef5bcf:         }
1:1ef5bcf:     }
1:1ef5bcf: 
1:fc8fba6: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0a21aab
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(RegionIterable.class, service.convert(RegionIterable.class.getName(), new GenericType(Class.class, new GenericType(RegionIterable.class))));
1:         assertTrue(AggregateConverter.isAssignable(RegionIterable.class, new GenericType(Class.class, new GenericType(RegionIterable.class))));
commit:c049af2
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Iterable.class.isAssignableFrom(RegionIterable.class));
1:         // note that method signature is fromType, toType - reverse than above
1:         assertTrue("Type should be assignable.", AggregateConverter.isTypeAssignable(new GenericType(RegionIterable.class), new GenericType(Iterable.class)));
commit:c290cc1
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyClass;
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.MyObject;
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Tata;
1: import org.apache.aries.blueprint.pojos.PojoGenerics2.Toto;
/////////////////////////////////////////////////////////////////////////
1:     public void testGenericWilcard() throws Exception {
1:         Constructor cns = MyClass.class.getConstructor(MyObject.class);
1:         assertTrue(AggregateConverter.isAssignable(new Toto(), new GenericType(cns.getGenericParameterTypes()[0])));
1: 
1:         cns = Tata.class.getConstructor(MyObject.class);
1:         assertTrue(AggregateConverter.isAssignable(new Toto(), new GenericType(cns.getGenericParameterTypes()[0])));
1:     }
1: 
commit:a9612e5
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testConvertCompatibleCollections() throws Exception {
1:         Object org = Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4));
1:         Object obj = service.convert(org,
1:                 GenericType.parse("java.util.List<java.util.List<java.lang.Integer>>", getClass().getClassLoader()));
1:         assertSame(org, obj);
1: 
1:         org = Collections.singletonMap("foo", 1);
1:         obj = service.convert(org,
1:                 GenericType.parse("java.util.Map<java.lang.String,java.lang.Integer>", getClass().getClassLoader()));
1:         assertSame(org, obj);
1: 
1:         org = new int[] { 1, 2 };
1:         obj = service.convert(org,
1:                 GenericType.parse("int[]", getClass().getClassLoader()));
1:         assertSame(org, obj);
1: 
1:         org = new Object[] { 1, 2 };
1:         obj = service.convert(org,
1:                 GenericType.parse("int[]", getClass().getClassLoader()));
1:         assertNotSame(org, obj);
1: 
1:         Hashtable<String, Integer> ht = new Hashtable<String, Integer>();
1:         ht.put("foo", 1);
1:         org = ht;
1:         obj = service.convert(org, GenericType.parse("java.util.Dictionary<java.lang.String,java.lang.Integer>", getClass().getClassLoader()));
1:         assertSame(org, obj);;
1:     }
commit:1ef5bcf
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testGenericAssignable() throws Exception {
1:         AggregateConverter s = new AggregateConverter(new TestBlueprintContainer(null));
1: 
1:         assertNotNull(s.convert(new RegionIterable(), new GenericType(Iterable.class, new GenericType(Region.class))));
1: 
1:         try {
1:             s.convert(new ArrayList<Region>(), new GenericType(Iterable.class, new GenericType(Region.class)));
1:             fail("Conversion should have thrown an exception");
1:         } catch (Exception e) {
1:             // Ignore
1:         }
1: 
1:     }
1: 
1:     public void testGenericCollection() throws Exception {
1:         AggregateConverter s = new AggregateConverter(new TestBlueprintContainer(null));
1: 
1:         try {
1:             s.convert(new ArrayList(), new GenericType(Iterable.class, new GenericType(Region.class)));
1:             fail("Conversion should have thrown an exception");
1:         } catch (Exception e) {
1:             // Ignore
1:         }
1: 
1:         try {
1:             s.convert(Arrays.asList(0l), new GenericType(Iterable.class, new GenericType(Region.class)));
1:             fail("Conversion should have thrown an exception");
1:         } catch (Exception e) {
1:             // Ignore
1:         }
1: 
1:         assertNotNull(s.convert(Arrays.asList(new EuRegion() {}), new GenericType(List.class, new GenericType(Region.class))));
1:     }
/////////////////////////////////////////////////////////////////////////
1:     private static class RegionIterable implements Iterable<Region> {
1:         public Iterator<Region> iterator() {
1:             return null;
1:         }
1:     }
1: 
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.container;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.math.BigInteger;
1: import java.net.URI;
1: import java.net.URL;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Locale;
1: import java.util.Properties;
1: 
1: import junit.framework.TestCase;
0: import org.apache.geronimo.blueprint.TestBlueprintContainer;
1: import org.osgi.service.blueprint.container.ReifiedType;
1: import org.osgi.service.blueprint.container.Converter;
1: 
1: public class AggregateConverterTest extends TestCase {
1: 
1:     private AggregateConverter service;
1: 
0:     protected void setUp() {
1:         service = new AggregateConverter(new TestBlueprintContainer(null));
1:     }
1: 
1:     public void testConvertNumbers() throws Exception {
1:         assertEquals(1, service.convert(1.46f, int.class));
1:         assertEquals(1.0d, service.convert(1, double.class));
1:     }
1: 
1:     public void testConvertSimpleTypes() throws Exception {
1:         assertEquals(123, service.convert("123", int.class));
1:         assertEquals(123, service.convert("123", Integer.class));
1:         assertEquals(123l, service.convert("123", long.class));
1:         assertEquals(123l, service.convert("123", Long.class));
1:         assertEquals((short) 123, service.convert("123", short.class));
1:         assertEquals((short) 123, service.convert("123", Short.class));
1:         assertEquals(1.5f, service.convert("1.5", float.class));
1:         assertEquals(1.5f, service.convert("1.5", Float.class));
1:         assertEquals(1.5, service.convert("1.5", double.class));
1:         assertEquals(1.5, service.convert("1.5", Double.class));
1:     }
1: 
1:     public void testConvertCharacter() throws Exception {
1:         assertEquals('c', service.convert("c", char.class));
1:         assertEquals('c', service.convert("c", Character.class));
1:         assertEquals('\u00F6', service.convert("\\u00F6", char.class));
1:         assertEquals('\u00F6', service.convert("\\u00F6", Character.class));
1:     }
1: 
1:     public void testConvertBoolean() throws Exception {
1:         assertEquals(Boolean.TRUE, service.convert("true", Boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("yes", Boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("on", Boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("TRUE", Boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("YES", Boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("ON", Boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("true", boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("yes", boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("on", boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("TRUE", boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("YES", boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert("ON", boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("false", Boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("no", Boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("off", Boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("FALSE", Boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("NO", Boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("OFF", Boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("false", boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("no", boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("off", boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("FALSE", boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("NO", boolean.class));
1:         assertEquals(Boolean.FALSE, service.convert("OFF", boolean.class));
1:         
1:         assertEquals(Boolean.FALSE, service.convert(false, boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert(true, boolean.class));        
1:         assertEquals(Boolean.FALSE, service.convert(false, Boolean.class));
1:         assertEquals(Boolean.TRUE, service.convert(true, Boolean.class));
1:     }
1: 
1:     public void testConvertOther() throws Exception {
1:         assertEquals(URI.create("urn:test"), service.convert("urn:test", URI.class));
1:         assertEquals(new URL("file:/test"), service.convert("file:/test", URL.class));
1:         assertEquals(new BigInteger("12345"), service.convert("12345", BigInteger.class));
1:     }
1: 
1:     public void testConvertProperties() throws Exception {
1:         Properties props = new Properties();
1:         props.setProperty("key", "value");
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         props.store(baos, null);
1:         props = (Properties) service.convert(baos.toString(), Properties.class);
1:         assertEquals(1, props.size());
1:         assertEquals("value", props.getProperty("key"));
1:     }
1: 
1:     public void testConvertLocale() throws Exception {
1:         Object result;
1:         result = service.convert("en", Locale.class);
1:         assertTrue(result instanceof Locale);
1:         assertEquals(new Locale("en"), result);
1:         
1:         result = service.convert("de_DE", Locale.class);
1:         assertTrue(result instanceof Locale);
1:         assertEquals(new Locale("de", "DE"), result);
1:         
1:         result = service.convert("_GB", Locale.class);
1:         assertTrue(result instanceof Locale);
1:         assertEquals(new Locale("", "GB"), result);
1:         
1:         result = service.convert("en_US_WIN", Locale.class);
1:         assertTrue(result instanceof Locale);
1:         assertEquals(new Locale("en", "US", "WIN"), result);
1:         
1:         result = service.convert("de__POSIX", Locale.class);
1:         assertTrue(result instanceof Locale);
1:         assertEquals(new Locale("de", "", "POSIX"), result);
1:     }
1:     
1:     public void testConvertClass() throws Exception {
1:         assertEquals(this, service.convert(this, AggregateConverterTest.class));
1:         assertEquals(AggregateConverterTest.class, service.convert(this.getClass().getName(), Class.class));
1:         assertEquals(int[].class, service.convert("int[]", Class.class));
1:     }
1: 
1:     public void testConvertArray() throws Exception {
1:         Object obj = service.convert(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)),
1:                                      GenericType.parse("java.util.List<java.lang.Integer>[]", getClass().getClassLoader()));
1:         assertNotNull(obj);
1:         assertTrue(obj.getClass().isArray());
1:         Object[] o = (Object[]) obj;
1:         assertEquals(2, o.length);
1:         assertNotNull(o[0]);
1:         assertTrue(o[0] instanceof List);
1:         assertEquals(2, ((List) o[0]).size());
1:         assertEquals(1, ((List) o[0]).get(0));
1:         assertEquals(2, ((List) o[0]).get(1));
1:         assertNotNull(o[0]);
1:         assertTrue(o[1] instanceof List);
1:         assertEquals(2, ((List) o[1]).size());
1:         assertEquals(3, ((List) o[1]).get(0));
1:         assertEquals(4, ((List) o[1]).get(1));
1:         //assertEquals((Object) new int[] { 1, 2 }, (Object) service.convert(Arrays.asList(1, 2), int[].class));
1:     }
1:     
1:     public void testCustom() throws Exception {
1:         AggregateConverter s = new AggregateConverter(new TestBlueprintContainer(null));
1:         s.registerConverter(new RegionConverter());
1:         s.registerConverter(new EuRegionConverter());
1:         
1:         // lookup on a specific registered converter type
1:         Object result;
1:         result = s.convert(new Object(), Region.class);
1:         assertTrue(result instanceof Region);
1:         assertFalse(result instanceof EuRegion);
1:                 
1:         result = s.convert(new Object(), EuRegion.class);
1:         assertTrue(result instanceof EuRegion);
1:         
1:         // find first converter that matches the type
1:         s = new AggregateConverter(new TestBlueprintContainer(null));
1:         s.registerConverter(new AsianRegionConverter());
1:         s.registerConverter(new EuRegionConverter());
1:         
1:         result = s.convert(new Object(), Region.class);
1:         // TODO: check with the spec about the result
1:         //assertTrue(result instanceof AsianRegion || result instanceof EuRegion);
1:     }
1:     
1:     private interface Region {} 
1:     
1:     private interface EuRegion extends Region {}
1:     
1:     private interface AsianRegion extends Region {}
1:     
1:     private static class RegionConverter implements Converter {
1:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:             return Region.class == toType.getRawClass();
1:         }
1:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:             return new Region() {} ;
1:         }
1:     }
1:     
1:     private static class EuRegionConverter implements Converter {
1:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:             return toType.getRawClass().isAssignableFrom(EuRegion.class);
1:         }
1:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:             return new EuRegion() {} ;
1:         }
1:     }
1:     
1:     private static class AsianRegionConverter implements Converter {
1:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:             return toType.getRawClass().isAssignableFrom(AsianRegion.class);
1:         }
1:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:             return new AsianRegion() {} ;
1:         }
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() throws Exception {
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:fc8fba6
/////////////////////////////////////////////////////////////////////////
1:         s.registerConverter(new NullMarkerConverter());
1:         result = s.convert(new Object(), NullMarker.class);
1:         assertNull(result);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private interface NullMarker {}
/////////////////////////////////////////////////////////////////////////
1:     private static class NullMarkerConverter implements Converter {
1:         public boolean canConvert(Object fromValue, ReifiedType toType) {
1:             return toType.getRawClass().isAssignableFrom(NullMarker.class);
1:         }
1:         public Object convert(Object source, ReifiedType toType) throws Exception {
1:             return null;
1:         }
1:     }
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.container;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.TestBlueprintContainer;
============================================================================