1:7c69962: package org.apache.aries.subsystem.itests;
1:7c69962: 
1:7c69962: import java.util.ArrayList;
1:7c69962: import java.util.HashMap;
1:7c69962: import java.util.List;
1:7c69962: import java.util.Map;
1:7c69962: 
1:7c69962: import org.osgi.framework.ServiceEvent;
1:7c69962: import org.osgi.framework.ServiceListener;
1:7c69962: import org.osgi.framework.Version;
1:7c69962: import org.osgi.service.subsystem.Subsystem.State;
1:a990e32: import org.osgi.service.subsystem.SubsystemConstants;
1:7c69962: 
1:a990e32: public class SubsystemEventHandler implements ServiceListener {
1:7c69962: 	static class ServiceEventInfo {
1:7c69962: 		private final ServiceEvent event;
1:7c69962: 		private final long id;
1:7c69962: 		private final State state;
1:7c69962: 		private final String symbolicName;
1:7c69962: 		private final String type;
1:7c69962: 		private final Version version;
1:7c69962: 		
1:7c69962: 		public ServiceEventInfo(ServiceEvent event) {
1:7c69962: 			id = (Long)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_ID_PROPERTY);
1:7c69962: 			state = (State)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY);
1:7c69962: 			symbolicName = (String)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY);
1:7c69962: 			type = (String)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY);
1:7c69962: 			version = (Version)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY);
1:7c69962: 			this.event = event;
1:7c69962: 		}
1:7c69962: 		
1:7c69962: 		public int getEventType() {
1:7c69962: 			return event.getType();
1:7c69962: 		}
1:7c69962: 		
1:7c69962: 		public long getId() {
1:7c69962: 			return id;
1:7c69962: 		}
1:7c69962: 		
1:7c69962: 		public State getState() {
1:7c69962: 			return state;
1:7c69962: 		}
1:7c69962: 		
1:7c69962: 		public String getSymbolicName() {
1:7c69962: 			return symbolicName;
1:7c69962: 		}
1:7c69962: 		
1:7c69962: 		public String getType() {
1:7c69962: 			return type;
1:7c69962: 		}
1:7c69962: 		
1:7c69962: 		public Version getVersion() {
1:7c69962: 			return version;
1:7c69962: 		}
1:7c69962: 	}
1:7c69962: 	
1:7c69962: 	private final Map<Long, List<SubsystemEventHandler.ServiceEventInfo>> subsystemIdToEvents = new HashMap<Long, List<SubsystemEventHandler.ServiceEventInfo>>();
1:7c69962: 	
1:7c69962: 	public void clear() {
1:7c69962: 		synchronized (subsystemIdToEvents) {
1:7c69962: 			subsystemIdToEvents.clear();
1:7c69962: 		}
1:7c69962: 	}
1:7c69962: 	
1:7c69962: 	public SubsystemEventHandler.ServiceEventInfo poll(long subsystemId) throws InterruptedException {
1:7c69962: 		return poll(subsystemId, 0);
1:7c69962: 	}
1:7c69962: 	
1:7c69962: 	public SubsystemEventHandler.ServiceEventInfo poll(long subsystemId, long timeout) throws InterruptedException {
1:7c69962: 		List<SubsystemEventHandler.ServiceEventInfo> events;
1:7c69962: 		synchronized (subsystemIdToEvents) {
1:7c69962: 			events = subsystemIdToEvents.get(subsystemId);
1:7c69962: 			if (events == null) {
1:7c69962: 				events = new ArrayList<SubsystemEventHandler.ServiceEventInfo>();
1:7c69962: 				subsystemIdToEvents.put(subsystemId, events);
1:7c69962: 			}
1:7c69962: 		}
1:7c69962: 		synchronized (events) {
1:7c69962: 			if (events.isEmpty()) {
1:7c69962: 				events.wait(timeout);
1:7c69962: 				if (events.isEmpty()) {
1:7c69962: 					return null;
1:7c69962: 				}
1:7c69962: 			}
1:7c69962: 			return events.remove(0);
1:7c69962: 		}
1:7c69962: 	}
1:7c69962: 	
1:7c69962: 	public void serviceChanged(ServiceEvent event) {
1:7c69962: 		Long subsystemId = (Long)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_ID_PROPERTY);
1:7c69962: 		synchronized (subsystemIdToEvents) {
1:7c69962: 			List<SubsystemEventHandler.ServiceEventInfo> events = subsystemIdToEvents.get(subsystemId);
1:7c69962: 			if (events == null) {
1:7c69962: 				events = new ArrayList<SubsystemEventHandler.ServiceEventInfo>();
1:7c69962: 				subsystemIdToEvents.put(subsystemId, events);
1:7c69962: 			}
1:7c69962: 			synchronized (events) {
1:7c69962: 				events.add(new ServiceEventInfo(event));
1:7c69962: 				events.notify();
1:7c69962: 			}
1:7c69962: 		}
1:7c69962: 	}
1:7c69962: 	
1:7c69962: 	public int size() {
1:7c69962: 		synchronized (subsystemIdToEvents) {
1:7c69962: 			return subsystemIdToEvents.size();
1:7c69962: 		}
1:7c69962: 	}
1:7c69962: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemConstants;
1: public class SubsystemEventHandler implements ServiceListener {
author:Christian Schneider
-------------------------------------------------------------------------------
commit:7c69962
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceListener;
1: import org.osgi.framework.Version;
0: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.Subsystem.State;
1: 
0: class SubsystemEventHandler implements ServiceListener {
1: 	static class ServiceEventInfo {
1: 		private final ServiceEvent event;
1: 		private final long id;
1: 		private final State state;
1: 		private final String symbolicName;
1: 		private final String type;
1: 		private final Version version;
1: 		
1: 		public ServiceEventInfo(ServiceEvent event) {
1: 			id = (Long)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_ID_PROPERTY);
1: 			state = (State)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY);
1: 			symbolicName = (String)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY);
1: 			type = (String)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY);
1: 			version = (Version)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY);
1: 			this.event = event;
1: 		}
1: 		
1: 		public int getEventType() {
1: 			return event.getType();
1: 		}
1: 		
1: 		public long getId() {
1: 			return id;
1: 		}
1: 		
1: 		public State getState() {
1: 			return state;
1: 		}
1: 		
1: 		public String getSymbolicName() {
1: 			return symbolicName;
1: 		}
1: 		
1: 		public String getType() {
1: 			return type;
1: 		}
1: 		
1: 		public Version getVersion() {
1: 			return version;
1: 		}
1: 	}
1: 	
1: 	private final Map<Long, List<SubsystemEventHandler.ServiceEventInfo>> subsystemIdToEvents = new HashMap<Long, List<SubsystemEventHandler.ServiceEventInfo>>();
1: 	
1: 	public void clear() {
1: 		synchronized (subsystemIdToEvents) {
1: 			subsystemIdToEvents.clear();
1: 		}
1: 	}
1: 	
1: 	public SubsystemEventHandler.ServiceEventInfo poll(long subsystemId) throws InterruptedException {
1: 		return poll(subsystemId, 0);
1: 	}
1: 	
1: 	public SubsystemEventHandler.ServiceEventInfo poll(long subsystemId, long timeout) throws InterruptedException {
1: 		List<SubsystemEventHandler.ServiceEventInfo> events;
1: 		synchronized (subsystemIdToEvents) {
1: 			events = subsystemIdToEvents.get(subsystemId);
1: 			if (events == null) {
1: 				events = new ArrayList<SubsystemEventHandler.ServiceEventInfo>();
1: 				subsystemIdToEvents.put(subsystemId, events);
1: 			}
1: 		}
1: 		synchronized (events) {
1: 			if (events.isEmpty()) {
1: 				events.wait(timeout);
1: 				if (events.isEmpty()) {
1: 					return null;
1: 				}
1: 			}
1: 			return events.remove(0);
1: 		}
1: 	}
1: 	
1: 	public void serviceChanged(ServiceEvent event) {
1: 		Long subsystemId = (Long)event.getServiceReference().getProperty(SubsystemConstants.SUBSYSTEM_ID_PROPERTY);
1: 		synchronized (subsystemIdToEvents) {
1: 			List<SubsystemEventHandler.ServiceEventInfo> events = subsystemIdToEvents.get(subsystemId);
1: 			if (events == null) {
1: 				events = new ArrayList<SubsystemEventHandler.ServiceEventInfo>();
1: 				subsystemIdToEvents.put(subsystemId, events);
1: 			}
1: 			synchronized (events) {
1: 				events.add(new ServiceEventInfo(event));
1: 				events.notify();
1: 			}
1: 		}
1: 	}
1: 	
1: 	public int size() {
1: 		synchronized (subsystemIdToEvents) {
1: 			return subsystemIdToEvents.size();
1: 		}
1: 	}
1: }
============================================================================