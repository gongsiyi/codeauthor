1:955bf91: /**
1:955bf91:  * Licensed to the Apache Software Foundation (ASF) under one
1:955bf91:  * or more contributor license agreements.  See the NOTICE file
1:955bf91:  * distributed with this work for additional information
1:955bf91:  * regarding copyright ownership.  The ASF licenses this file
1:955bf91:  * to you under the Apache License, Version 2.0 (the
1:955bf91:  * "License"); you may not use this file except in compliance
1:955bf91:  * with the License.  You may obtain a copy of the License at
1:955bf91:  *
1:955bf91:  *   http://www.apache.org/licenses/LICENSE-2.0
1:955bf91:  *
1:955bf91:  * Unless required by applicable law or agreed to in writing,
1:955bf91:  * software distributed under the License is distributed on an
1:955bf91:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:955bf91:  * KIND, either express or implied.  See the License for the
1:955bf91:  * specific language governing permissions and limitations
1:955bf91:  * under the License.
1:955bf91:  */
1:3a658a8: package org.apache.aries.jndi;
1:3a658a8: 
1:3a658a8: import static org.junit.Assert.assertEquals;
1:3a658a8: import static org.junit.Assert.assertTrue;
1:1f6db42: import static org.junit.Assert.assertNotNull;
1:3a658a8: 
1:b49a314: import java.util.Dictionary;
1:3a658a8: import java.util.Hashtable;
1:3a658a8: import java.util.Properties;
1:1f6db42: import java.util.concurrent.atomic.AtomicBoolean;
1:3a658a8: 
1:3a658a8: import javax.naming.Context;
1:3a658a8: import javax.naming.InitialContext;
1:3a658a8: import javax.naming.Name;
1:3a658a8: import javax.naming.NamingException;
1:3a658a8: import javax.naming.NoInitialContextException;
1:62596e2: import javax.naming.ldap.Control;
1:62596e2: import javax.naming.ldap.ExtendedRequest;
1:62596e2: import javax.naming.ldap.InitialLdapContext;
1:62596e2: import javax.naming.ldap.LdapContext;
1:3a658a8: import javax.naming.spi.InitialContextFactory;
1:62596e2: import javax.naming.spi.InitialContextFactoryBuilder;
1:3a658a8: import javax.naming.spi.ObjectFactory;
1:3a658a8: 
1:1f6db42: import junit.framework.Assert;
1:1f6db42: 
1:3a658a8: import org.apache.aries.jndi.startup.Activator;
1:3a658a8: import org.apache.aries.mocks.BundleContextMock;
1:3a658a8: import org.apache.aries.unittest.mocks.MethodCall;
1:3a658a8: import org.apache.aries.unittest.mocks.Skeleton;
1:3a658a8: import org.junit.After;
1:3a658a8: import org.junit.Before;
1:3a658a8: import org.junit.Test;
1:3a658a8: import org.osgi.framework.BundleContext;
1:3a658a8: import org.osgi.service.jndi.JNDIConstants;
1:3a658a8: 
1:3a658a8: public class InitialContextTest 
1:3a658a8: {
1:3a658a8:   private Activator activator;
1:3a658a8:   private BundleContext bc;
1:1f6db42:   private InitialContext ic;
1:3a658a8:   
1:3a658a8:   /**
1:3a658a8:    * This method does the setup .
1:3a658a8:    * @throws NoSuchFieldException 
1:3a658a8:    * @throws SecurityException 
1:3a658a8:    * @throws IllegalAccessException 
1:3a658a8:    * @throws IllegalArgumentException 
1:3a658a8:    */
1:3a658a8:   @Before
1:3a658a8:   public void setup() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException
1:3a658a8:   {
1:3a658a8:     bc =  Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:3a658a8:     activator = new Activator();
1:3a658a8:     activator.start(bc);
2:3a658a8:   }
1:3a658a8: 
1:3a658a8:   /**
1:3a658a8:    * Make sure we clear the caches out before the next test.
1:3a658a8:    */
1:3a658a8:   @After
1:3a658a8:   public void teardown()
1:3a658a8:   {
1:3a658a8:     activator.stop(bc);
1:3a658a8:     BundleContextMock.clear();
1:3a658a8:   }
1:3a658a8: 
1:3a658a8:   @Test
1:3a658a8:   public void testLookupWithICF() throws NamingException
1:3a658a8:   {
1:3a658a8:     InitialContextFactory icf = Skeleton.newMock(InitialContextFactory.class);
1:b49a314:     bc.registerService(new String[] {InitialContextFactory.class.getName(), icf.getClass().getName()}, icf, (Dictionary) new Properties());
1:3a658a8:     Skeleton.getSkeleton(icf).setReturnValue(new MethodCall(Context.class, "lookup", "/"), Skeleton.newMock(Context.class));
1:3a658a8:     
1:3a658a8:     Properties props = new Properties();
1:3a658a8:     props.put(Context.INITIAL_CONTEXT_FACTORY, icf.getClass().getName());
1:3a658a8:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:3a658a8:     InitialContext ctx = new InitialContext(props);
1:3a658a8:     
1:3a658a8:     Context namingCtx = (Context) ctx.lookup("/");
1:3a658a8:     assertTrue("Context returned isn't the raw naming context: " + namingCtx, Skeleton.isSkeleton(namingCtx));
1:3a658a8:   }
1:3a658a8:   
1:3a658a8:   @Test(expected=NoInitialContextException.class)
1:3a658a8:   public void testLookupWithoutICF() throws NamingException
1:3a658a8:   {
1:3a658a8:     Properties props = new Properties();
1:3a658a8:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:3a658a8:     InitialContext ctx = new InitialContext(props);
1:3a658a8:     
1:3a658a8:     ctx.lookup("/");
1:3a658a8:   }
1:3a658a8: 
1:3a658a8:   @Test
1:3a658a8:   public void testLookupWithoutICFButWithURLLookup() throws NamingException
1:3a658a8:   {
1:3a658a8:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:3a658a8:     Context ctx = Skeleton.newMock(Context.class);
1:3a658a8:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class),
1:3a658a8:                                                  ctx);
1:3a658a8:     Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", String.class), "someText");
1:3a658a8:     
1:3a658a8:     Properties props = new Properties();
1:3a658a8:     props.put(JNDIConstants.JNDI_URLSCHEME, "testURL");
1:b49a314:     bc.registerService(ObjectFactory.class.getName(), factory, (Dictionary) props);
1:3a658a8:     
1:3a658a8:     
1:3a658a8:     props = new Properties();
1:3a658a8:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:3a658a8:     InitialContext initialCtx = new InitialContext(props);
1:3a658a8:     
1:3a658a8:     Object someObject = initialCtx.lookup("testURL:somedata");
1:3a658a8:     assertEquals("Expected to be given a string, but got something else.", "someText", someObject);
1:3a658a8:   }
1:62596e2:   
1:62596e2:   @Test
1:62596e2:   public void testLookFromLdapICF() throws Exception
1:62596e2:   {
1:62596e2:     InitialContextFactoryBuilder icf = Skeleton.newMock(InitialContextFactoryBuilder.class);
1:b49a314:     bc.registerService(new String[] {InitialContextFactoryBuilder.class.getName(), icf.getClass().getName()}, icf, (Dictionary) new Properties());
1:62596e2:     
1:62596e2:     LdapContext backCtx = Skeleton.newMock(LdapContext.class);
1:62596e2:     InitialContextFactory fac = Skeleton.newMock(InitialContextFactory.class);
1:62596e2:     Skeleton.getSkeleton(fac).setReturnValue(
1:62596e2:         new MethodCall(InitialContextFactory.class, "getInitialContext", Hashtable.class), 
1:62596e2:         backCtx);
1:62596e2:     Skeleton.getSkeleton(icf).setReturnValue(
1:62596e2:         new MethodCall(InitialContextFactoryBuilder.class, "createInitialContextFactory", Hashtable.class), 
1:62596e2:         fac);
1:62596e2:     
1:62596e2:     Properties props = new Properties();
1:62596e2:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:8f495e6:     props.put(Context.INITIAL_CONTEXT_FACTORY, "dummy.factory");
1:62596e2:     InitialLdapContext ilc = new InitialLdapContext(props, new Control[0]);
1:62596e2:     
1:62596e2:     ExtendedRequest req = Skeleton.newMock(ExtendedRequest.class);
1:62596e2:     ilc.extendedOperation(req);
1:62596e2:     Skeleton.getSkeleton(backCtx).assertCalled(new MethodCall(LdapContext.class, "extendedOperation", req));
1:62596e2:   }
1:1f6db42:   
1:1f6db42:   @Test
1:1f6db42:   public void testURLLookup() throws Exception {
1:1f6db42:       ObjectFactory of = new ObjectFactory() {
1:1f6db42:           public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:1f6db42:               return dummyContext("result");
1:1f6db42:           }
1:1f6db42:       };
1:1f6db42:       
1:1f6db42:       registerURLObjectFactory(of, "test");      
1:1f6db42:       ic = initialContext();      
1:1f6db42:       
1:1f6db42:       assertEquals("result", ic.lookup("test:something"));
1:1f6db42:   }
1:1f6db42:   
1:1f6db42:   @Test
1:1f6db42:   public void testNoURLContextCaching() throws Exception {
1:1f6db42:       final AtomicBoolean second = new AtomicBoolean(false);
1:1f6db42:       final Context ctx = dummyContext("one");
1:1f6db42:       final Context ctx2 = dummyContext("two");
1:1f6db42:       
1:1f6db42:       ObjectFactory of = new ObjectFactory() {
1:1f6db42:           public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:1f6db42:               if (second.get()) return ctx2;
1:1f6db42:               else {
1:1f6db42:                   second.set(true);
1:1f6db42:                   return ctx;
1:1f6db42:               }
1:1f6db42:           }          
1:1f6db42:       };
1:1f6db42:       
1:1f6db42:       registerURLObjectFactory(of, "test");
1:1f6db42:       ic = initialContext();
1:1f6db42:       
1:1f6db42:       assertEquals("one", ic.lookup("test:something"));
1:1f6db42:       assertEquals("two", ic.lookup("test:something"));
1:1f6db42:   }
1:1f6db42:   
1:1f6db42:   @Test
1:1f6db42:   public void testURLContextErrorPropagation() throws Exception {
1:1f6db42:       ObjectFactory of = new ObjectFactory() {        
1:1f6db42:         public Object getObjectInstance(Object obj, Name name, Context nameCtx,
1:1f6db42:                 Hashtable<?, ?> environment) throws Exception {
1:1f6db42:             throw new Exception("doh");
1:1f6db42:         }
1:1f6db42:       };
1:1f6db42:       
1:1f6db42:       registerURLObjectFactory(of, "test");
1:1f6db42:       ic = initialContext();
1:1f6db42:       
1:1f6db42:       try {
1:1f6db42:           ic.lookup("test:something");
1:1f6db42:           Assert.fail("Expected NamingException");
1:1f6db42:       } catch (NamingException ne) {
1:1f6db42:           assertNotNull(ne.getCause());
1:1f6db42:           assertEquals("doh", ne.getCause().getMessage());
1:1f6db42:       }
1:1f6db42:   }
1:1f6db42:   
1:1f6db42:   /**
1:1f6db42:    * Create a minimal initial context with just the bundle context in the environment
1:1f6db42:    * @return
1:1f6db42:    * @throws Exception
1:1f6db42:    */
1:1f6db42:   private InitialContext initialContext() throws Exception {
1:1f6db42:       Properties props = new Properties();
1:1f6db42:       props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:1f6db42:       InitialContext ic = new InitialContext(props);
1:1f6db42:       return ic;
1:1f6db42:   }
1:1f6db42:   
1:1f6db42:   /**
1:1f6db42:    * Registers an ObjectFactory to be used for creating URLContexts for the given scheme
1:1f6db42:    * @param of
1:1f6db42:    * @param scheme
1:1f6db42:    */
1:1f6db42:   private void registerURLObjectFactory(ObjectFactory of, String scheme) {
1:1f6db42:       Properties props = new Properties();
1:1f6db42:       props.setProperty(JNDIConstants.JNDI_URLSCHEME, "test");
1:b49a314:       bc.registerService(ObjectFactory.class.getName(), of, (Dictionary) props);
1:1f6db42:   }
1:1f6db42:   
1:1f6db42:   /**
1:1f6db42:    * Creates a context that always returns the given object
1:1f6db42:    * @param toReturn
1:1f6db42:    * @return
1:1f6db42:    */
1:1f6db42:   private Context dummyContext(Object toReturn) {
1:1f6db42:       Context ctx = Skeleton.newMock(Context.class);
1:1f6db42:       Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", String.class), toReturn);
1:1f6db42:       Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", Name.class), toReturn);
1:1f6db42:       return ctx;
1:955bf91:   }
1:1f6db42: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:b49a314
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
1:     bc.registerService(new String[] {InitialContextFactory.class.getName(), icf.getClass().getName()}, icf, (Dictionary) new Properties());
/////////////////////////////////////////////////////////////////////////
1:     bc.registerService(ObjectFactory.class.getName(), factory, (Dictionary) props);
/////////////////////////////////////////////////////////////////////////
1:     bc.registerService(new String[] {InitialContextFactoryBuilder.class.getName(), icf.getClass().getName()}, icf, (Dictionary) new Properties());
/////////////////////////////////////////////////////////////////////////
1:       bc.registerService(ObjectFactory.class.getName(), of, (Dictionary) props);
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:955bf91
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:1f6db42
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Assert;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private InitialContext ic;
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test
1:   public void testURLLookup() throws Exception {
1:       ObjectFactory of = new ObjectFactory() {
1:           public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:               return dummyContext("result");
1:           }
1:       };
1:       
1:       registerURLObjectFactory(of, "test");      
1:       ic = initialContext();      
1:       
1:       assertEquals("result", ic.lookup("test:something"));
1:   }
1:   
1:   @Test
1:   public void testNoURLContextCaching() throws Exception {
1:       final AtomicBoolean second = new AtomicBoolean(false);
1:       final Context ctx = dummyContext("one");
1:       final Context ctx2 = dummyContext("two");
1:       
1:       ObjectFactory of = new ObjectFactory() {
1:           public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:               if (second.get()) return ctx2;
1:               else {
1:                   second.set(true);
1:                   return ctx;
1:               }
1:           }          
1:       };
1:       
1:       registerURLObjectFactory(of, "test");
1:       ic = initialContext();
1:       
1:       assertEquals("one", ic.lookup("test:something"));
1:       assertEquals("two", ic.lookup("test:something"));
1:   }
1:   
1:   @Test
1:   public void testURLContextErrorPropagation() throws Exception {
1:       ObjectFactory of = new ObjectFactory() {        
1:         public Object getObjectInstance(Object obj, Name name, Context nameCtx,
1:                 Hashtable<?, ?> environment) throws Exception {
1:             throw new Exception("doh");
1:         }
1:       };
1:       
1:       registerURLObjectFactory(of, "test");
1:       ic = initialContext();
1:       
1:       try {
1:           ic.lookup("test:something");
1:           Assert.fail("Expected NamingException");
1:       } catch (NamingException ne) {
1:           assertNotNull(ne.getCause());
1:           assertEquals("doh", ne.getCause().getMessage());
1:       }
1:   }
1:   
1:   /**
1:    * Create a minimal initial context with just the bundle context in the environment
1:    * @return
1:    * @throws Exception
1:    */
1:   private InitialContext initialContext() throws Exception {
1:       Properties props = new Properties();
1:       props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:       InitialContext ic = new InitialContext(props);
1:       return ic;
1:   }
1:   
1:   /**
1:    * Registers an ObjectFactory to be used for creating URLContexts for the given scheme
1:    * @param of
1:    * @param scheme
1:    */
1:   private void registerURLObjectFactory(ObjectFactory of, String scheme) {
1:       Properties props = new Properties();
1:       props.setProperty(JNDIConstants.JNDI_URLSCHEME, "test");
0:       bc.registerService(ObjectFactory.class.getName(), of, props);      
1:   }
1:   
1:   /**
1:    * Creates a context that always returns the given object
1:    * @param toReturn
1:    * @return
1:    */
1:   private Context dummyContext(Object toReturn) {
1:       Context ctx = Skeleton.newMock(Context.class);
1:       Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", String.class), toReturn);
1:       Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", Name.class), toReturn);
1:       return ctx;
1:   }
commit:8f495e6
/////////////////////////////////////////////////////////////////////////
1:     props.put(Context.INITIAL_CONTEXT_FACTORY, "dummy.factory");
commit:62596e2
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.ldap.Control;
1: import javax.naming.ldap.ExtendedRequest;
1: import javax.naming.ldap.InitialLdapContext;
1: import javax.naming.ldap.LdapContext;
1: import javax.naming.spi.InitialContextFactoryBuilder;
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test
1:   public void testLookFromLdapICF() throws Exception
1:   {
1:     InitialContextFactoryBuilder icf = Skeleton.newMock(InitialContextFactoryBuilder.class);
0:     bc.registerService(new String[] {InitialContextFactoryBuilder.class.getName(), icf.getClass().getName()}, icf, new Properties());
1:     
1:     LdapContext backCtx = Skeleton.newMock(LdapContext.class);
1:     InitialContextFactory fac = Skeleton.newMock(InitialContextFactory.class);
1:     Skeleton.getSkeleton(fac).setReturnValue(
1:         new MethodCall(InitialContextFactory.class, "getInitialContext", Hashtable.class), 
1:         backCtx);
1:     Skeleton.getSkeleton(icf).setReturnValue(
1:         new MethodCall(InitialContextFactoryBuilder.class, "createInitialContextFactory", Hashtable.class), 
1:         fac);
1:     
1:     Properties props = new Properties();
1:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:     InitialLdapContext ilc = new InitialLdapContext(props, new Control[0]);
1:     
1:     ExtendedRequest req = Skeleton.newMock(ExtendedRequest.class);
1:     ilc.extendedOperation(req);
1:     Skeleton.getSkeleton(backCtx).assertCalled(new MethodCall(LdapContext.class, "extendedOperation", req));
1:   }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:3a658a8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jndi;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Hashtable;
1: import java.util.Properties;
1: 
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.Name;
1: import javax.naming.NamingException;
1: import javax.naming.NoInitialContextException;
1: import javax.naming.spi.InitialContextFactory;
1: import javax.naming.spi.ObjectFactory;
1: 
1: import org.apache.aries.jndi.startup.Activator;
1: import org.apache.aries.mocks.BundleContextMock;
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.jndi.JNDIConstants;
1: 
1: public class InitialContextTest 
1: {
1:   private Activator activator;
1:   private BundleContext bc;
1:   
1:   /**
1:    * This method does the setup .
1:    * @throws NoSuchFieldException 
1:    * @throws SecurityException 
1:    * @throws IllegalAccessException 
1:    * @throws IllegalArgumentException 
1:    */
1:   @Before
1:   public void setup() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException
1:   {
1:     bc =  Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:     activator = new Activator();
1:     activator.start(bc);
1:   }
1: 
1:   /**
1:    * Make sure we clear the caches out before the next test.
1:    */
1:   @After
1:   public void teardown()
1:   {
1:     activator.stop(bc);
1:     BundleContextMock.clear();
1:   }
1: 
1:   @Test
1:   public void testLookupWithICF() throws NamingException
1:   {
1:     InitialContextFactory icf = Skeleton.newMock(InitialContextFactory.class);
0:     bc.registerService(new String[] {InitialContextFactory.class.getName(), icf.getClass().getName()}, icf, new Properties());
1:     Skeleton.getSkeleton(icf).setReturnValue(new MethodCall(Context.class, "lookup", "/"), Skeleton.newMock(Context.class));
1:     
1:     Properties props = new Properties();
1:     props.put(Context.INITIAL_CONTEXT_FACTORY, icf.getClass().getName());
1:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:     InitialContext ctx = new InitialContext(props);
1:     
1:     Context namingCtx = (Context) ctx.lookup("/");
1:     assertTrue("Context returned isn't the raw naming context: " + namingCtx, Skeleton.isSkeleton(namingCtx));
1:   }
1:   
1:   @Test(expected=NoInitialContextException.class)
1:   public void testLookupWithoutICF() throws NamingException
1:   {
1:     Properties props = new Properties();
1:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:     InitialContext ctx = new InitialContext(props);
1:     
1:     ctx.lookup("/");
1:   }
1: 
1:   @Test
1:   public void testLookupWithoutICFButWithURLLookup() throws NamingException
1:   {
1:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:     Context ctx = Skeleton.newMock(Context.class);
1:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class),
1:                                                  ctx);
1:     Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", String.class), "someText");
1:     
1:     Properties props = new Properties();
1:     props.put(JNDIConstants.JNDI_URLSCHEME, "testURL");
0:     bc.registerService(ObjectFactory.class.getName(), factory, props);
1:     
1:     
1:     props = new Properties();
1:     props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
1:     InitialContext initialCtx = new InitialContext(props);
1:     
1:     Object someObject = initialCtx.lookup("testURL:somedata");
1:     assertEquals("Expected to be given a string, but got something else.", "someText", someObject);
1:   }
1: }
============================================================================