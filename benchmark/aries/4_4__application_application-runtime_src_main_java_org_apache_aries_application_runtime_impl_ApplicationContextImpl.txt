1:ad7ee02: /*
1:ad7ee02:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad7ee02:  * or more contributor license agreements.  See the NOTICE file
1:ad7ee02:  * distributed with this work for additional information
1:ad7ee02:  * regarding copyright ownership.  The ASF licenses this file
1:ad7ee02:  * to you under the Apache License, Version 2.0 (the
1:ad7ee02:  * "License"); you may not use this file except in compliance
1:ad7ee02:  * with the License.  You may obtain a copy of the License at
1:ad7ee02:  *
1:ad7ee02:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ad7ee02:  *
1:ad7ee02:  * Unless required by applicable law or agreed to in writing,
1:ad7ee02:  * software distributed under the License is distributed on an
1:ad7ee02:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ad7ee02:  * KIND, either express or implied.  See the License for the
1:ad7ee02:  * specific language governing permissions and limitations
1:ad7ee02:  * under the License.
1:ad7ee02:  */
1:ad7ee02: 
1:ad7ee02: package org.apache.aries.application.runtime.impl;
1:ad7ee02: 
1:55a9b56: import java.util.ArrayList;
1:ad7ee02: import java.util.HashMap;
1:ad7ee02: import java.util.HashSet;
1:55a9b56: import java.util.List;
1:ad7ee02: import java.util.Map;
1:ad7ee02: import java.util.Set;
1:ad7ee02: 
1:55a9b56: import org.apache.aries.application.DeploymentContent;
1:55a9b56: import org.apache.aries.application.DeploymentMetadata;
1:ad7ee02: import org.apache.aries.application.management.AriesApplication;
1:948b72b: import org.apache.aries.application.management.AriesApplicationContext;
1:ad7ee02: import org.apache.aries.application.management.BundleInfo;
1:55a9b56: import org.apache.aries.application.management.ManagementException;
1:89f804e: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
1:ad7ee02: import org.osgi.framework.Bundle;
1:ad7ee02: import org.osgi.framework.BundleContext;
1:ad7ee02: import org.osgi.framework.BundleException;
1:55a9b56: import org.osgi.framework.ServiceException;
1:55a9b56: import org.osgi.framework.ServiceReference;
1:55a9b56: import org.osgi.framework.Version;
1:8702237: import org.osgi.service.packageadmin.PackageAdmin;
1:ad7ee02: 
1:948b72b: public class ApplicationContextImpl implements AriesApplicationContext {
1:ad7ee02:   
1:ad7ee02:   private AriesApplication _application;
1:ad7ee02:   private Map<BundleInfo, Bundle> _bundles;
1:ad7ee02:   private ApplicationState _state;
1:ad7ee02:   private BundleContext _bundleContext;
1:ad7ee02:   
1:55a9b56:   public ApplicationContextImpl (BundleContext b, AriesApplication app) throws BundleException, ManagementException { 
1:17bf358:     _bundleContext = b;
1:ad7ee02:     _application = app;
1:ad7ee02:     _bundles = new HashMap<BundleInfo, Bundle>();
1:8914925:     
1:55a9b56:     DeploymentMetadata meta = _application.getDeploymentMetadata();
1:8702237:                 
1:55a9b56:     AriesApplicationResolver resolver = null;
1:8702237:     PackageAdmin packageAdmin = null;
1:8914925:     
1:8702237:     ServiceReference resolverRef = b.getServiceReference(AriesApplicationResolver.class.getName());
1:8702237:     ServiceReference packageAdminRef = b.getServiceReference(PackageAdmin.class.getName());
1:8914925:     
1:8702237:     try {            
1:8702237:       resolver = getService(resolverRef, AriesApplicationResolver.class);
1:8702237:       packageAdmin = getService(packageAdminRef, PackageAdmin.class);
1:8702237:     
1:ad46961:       List<DeploymentContent> bundlesToInstall = new ArrayList<DeploymentContent>(meta.getApplicationDeploymentContents());
1:ad46961:       bundlesToInstall.addAll(meta.getApplicationProvisionBundles());
1:83a0cc4:       bundlesToInstall.addAll(meta.getDeployedUseBundle());
1:ad46961:       for (DeploymentContent content : bundlesToInstall) {
1:55a9b56:         String bundleSymbolicName = content.getContentName();
1:55a9b56:         Version bundleVersion = content.getExactVersion();
1:8914925:         
1:8702237:         // Step 1: See if bundle is already installed in the framework
1:8702237:         if (findBundleInFramework(packageAdmin, bundleSymbolicName, bundleVersion) != null) {
1:8702237:             continue;
1:8702237:         }
1:8914925:         
1:8702237:         // Step 2: See if the bundle is included in the application
1:8702237:         BundleInfo bundleInfo = findBundleInfoInApplication(bundleSymbolicName, bundleVersion);
1:8702237:         if (bundleInfo == null) {
1:8702237:             // Step 3: Lookup bundle location using the resolver
1:8702237:             bundleInfo = findBundleInfoUsingResolver(resolver, bundleSymbolicName, bundleVersion);
5:8914925:         }
1:8914925:         
2:55a9b56:         if (bundleInfo == null) {
1:8702237:             throw new ManagementException("Cound not find bundles: " + bundleSymbolicName + "_" + bundleVersion);
1:8914925:         }
1:8702237:             
1:55a9b56:         Bundle bundle = _bundleContext.installBundle(bundleInfo.getLocation());
1:8702237:             
1:8702237:         _bundles.put(bundleInfo, bundle);        
1:8914925:       }
1:55a9b56:     } catch (BundleException be) {
1:55a9b56:       for (Bundle bundle : _bundles.values()) {
1:55a9b56:         bundle.uninstall();
1:8914925:       }
1:8914925:       
1:55a9b56:       _bundles.clear();
1:8914925:       
1:55a9b56:       throw be;
1:55a9b56:     } finally {
1:8702237:       if (resolver != null) {
1:8702237:           b.ungetService(resolverRef);
1:8702237:       }
1:8702237:       if (packageAdmin != null) {
1:8702237:           b.ungetService(packageAdminRef);
1:8702237:       }
1:8914925:     }
1:ad46961:     
1:ad7ee02:     _state = ApplicationState.INSTALLED;
1:ad7ee02:   }
1:ad7ee02: 
1:8702237:   private <T> T getService(ServiceReference ref, Class<T> type) throws ManagementException {
1:8702237:       Object service = null;
1:8702237:       if (ref != null) {
1:8702237:           service = _bundleContext.getService(ref);
1:8702237:       }
1:8702237:       
1:8702237:       if (service == null) {
1:8702237:           throw new ManagementException(new ServiceException(type.getName(), ServiceException.UNREGISTERED));
1:8702237:       }
1:8702237:       
1:8702237:       return type.cast(service);
1:8702237:   }
1:8702237:   
1:8702237:   private Bundle findBundleInFramework(PackageAdmin admin, String symbolicName, Version version) {
1:8702237:       String exactVersion = "[" + version + "," + version + "]";
1:8702237:       Bundle[] bundles = admin.getBundles(symbolicName, exactVersion);
1:8702237:       if (bundles != null && bundles.length == 1) {
1:8702237:           return bundles[0];
1:ad7ee02:       } else {
1:8702237:           return null;
1:8702237:       }
1:8702237:   }
1:8702237:   
1:8702237:   private BundleInfo findBundleInfoInApplication(String symbolicName, Version version) {
1:8702237:       for (BundleInfo info : _application.getBundleInfo()) {
1:8702237:           if (info.getSymbolicName().equals(symbolicName)
1:8702237:               && info.getVersion().equals(version)) {
1:8702237:               return info;
1:8702237:           }
1:8702237:       }
1:8702237:       return null;
1:8702237:   }
1:8702237:   
1:8702237:   private BundleInfo findBundleInfoUsingResolver(AriesApplicationResolver resolver, String symbolicName, Version version) {
1:8702237:       return resolver.getBundleInfo(symbolicName, version);
1:8702237:   }
1:8702237:   
1:ad7ee02:   public AriesApplication getApplication() {
1:ad7ee02:     return _application;
1:ad7ee02:   }
1:ad7ee02:   
1:ad7ee02:   public Set<Bundle> getApplicationContent() {
1:ad7ee02:     Set<Bundle> result = new HashSet<Bundle>();
1:ad7ee02:     for (Map.Entry<BundleInfo, Bundle> entry : _bundles.entrySet()) { 
1:ad7ee02:       result.add (entry.getValue());
1:ad7ee02:     }
1:ad7ee02:     return result;
1:ad7ee02:   } 
1:ad7ee02: 
1:ad7ee02:   public ApplicationState getApplicationState() {
1:ad7ee02:     return _state;
1:ad7ee02:   }
1:ad7ee02: 
1:55a9b56:   public void start() throws BundleException 
1:55a9b56:   {
1:55a9b56:     _state = ApplicationState.STARTING;
1:8914925:     
1:55a9b56:     List<Bundle> bundlesWeStarted = new ArrayList<Bundle>();
1:8914925:     
1:55a9b56:     try {
1:55a9b56:       for (Bundle b : _bundles.values()) { 
1:ad7ee02:         if (b.getState() != Bundle.ACTIVE) { 
1:55a9b56:           b.start(Bundle.START_ACTIVATION_POLICY);
1:55a9b56:           bundlesWeStarted.add(b);
1:ad7ee02:         }
1:ad7ee02:       }
1:55a9b56:     } catch (BundleException be) {
1:55a9b56:       for (Bundle b : bundlesWeStarted) {
2:55a9b56:         try {
1:8914925:           b.stop();
1:55a9b56:         } catch (BundleException be2) {
1:55a9b56:           // we are doing tidyup here, so we don't want to replace the bundle exception
1:55a9b56:           // that occurred during start with one from stop. We also want to try to stop
1:55a9b56:           // all the bundles we started even if some bundles wouldn't stop.
1:ad7ee02:         }
1:8914925:       }
1:8914925:       
1:8914925:       _state = ApplicationState.INSTALLED;
1:55a9b56:       throw be;
1:8914925:     }
1:ad7ee02:     _state = ApplicationState.ACTIVE;
1:ad7ee02:   }
1:ad7ee02: 
1:ad7ee02:   public void stop() throws BundleException {
1:ad7ee02:     for (Map.Entry<BundleInfo, Bundle> entry : _bundles.entrySet()) { 
1:ad7ee02:       Bundle b = entry.getValue();
1:ad7ee02:       b.stop();
1:ad7ee02:     }
1:ad7ee02:     _state = ApplicationState.RESOLVED;
1:ad7ee02:   }
1:1caf596: 
1:1caf596:   public void setState(ApplicationState state)
1:1caf596:   {
1:1caf596:     _state = state;
1:ad7ee02:   }
1:8914925: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:83a0cc4
/////////////////////////////////////////////////////////////////////////
1:       bundlesToInstall.addAll(meta.getDeployedUseBundle());
commit:17bf358
/////////////////////////////////////////////////////////////////////////
1:     _bundleContext = b;
commit:ad7ee02
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.runtime.impl;
1: 
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
0: import org.apache.aries.application.management.ApplicationContext;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.BundleInfo;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: 
0: public class ApplicationContextImpl implements ApplicationContext {
1:   
1:   private AriesApplication _application;
1:   private Map<BundleInfo, Bundle> _bundles;
1:   private ApplicationState _state;
1:   private BundleContext _bundleContext;
1:   
0:   public ApplicationContextImpl (BundleContext b, AriesApplication app) { 
1:     _application = app;
1:     _bundles = new HashMap<BundleInfo, Bundle>();
1:     _state = ApplicationState.INSTALLED;
1:   }
1: 
1:   public AriesApplication getApplication() {
1:     return _application;
1:   }
1:   
1:   public Set<Bundle> getApplicationContent() {
1:     Set<Bundle> result = new HashSet<Bundle>();
1:     for (Map.Entry<BundleInfo, Bundle> entry : _bundles.entrySet()) { 
1:       result.add (entry.getValue());
1:     }
1:     return result;
1:   } 
1: 
1:   public ApplicationState getApplicationState() {
1:     return _state;
1:   }
1: 
0:   public void start() throws BundleException {
0:     Set<BundleInfo> bundleInfo = _application.getBundleInfo();
0:     for (BundleInfo bi : bundleInfo) { 
0:       // TODO: proper synchronisation!
0:       if (_bundles.containsKey(bi)) { 
0:         Bundle b = _bundles.get(bi);
1:         if (b.getState() != Bundle.ACTIVE) { 
0:           b.start();
1:         }
1:       } else { 
0:         Bundle b = _bundleContext.installBundle(bi.getLocation()); 
0:         b.start();
0:         _bundles.put(bi, b);
1:       }
1:     }
1:     _state = ApplicationState.ACTIVE;
1:   }
1: 
1:   public void stop() throws BundleException {
1:     for (Map.Entry<BundleInfo, Bundle> entry : _bundles.entrySet()) { 
1:       Bundle b = entry.getValue();
1:       b.stop();
1:     }
1:     _state = ApplicationState.RESOLVED;
1:   }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8702237
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.packageadmin.PackageAdmin;
/////////////////////////////////////////////////////////////////////////
1:                 
1:     PackageAdmin packageAdmin = null;
1:     ServiceReference resolverRef = b.getServiceReference(AriesApplicationResolver.class.getName());
1:     ServiceReference packageAdminRef = b.getServiceReference(PackageAdmin.class.getName());
1:     try {            
1:       resolver = getService(resolverRef, AriesApplicationResolver.class);
1:       packageAdmin = getService(packageAdminRef, PackageAdmin.class);
1:     
1:         // Step 1: See if bundle is already installed in the framework
1:         if (findBundleInFramework(packageAdmin, bundleSymbolicName, bundleVersion) != null) {
1:             continue;
1:         }
1:         // Step 2: See if the bundle is included in the application
1:         BundleInfo bundleInfo = findBundleInfoInApplication(bundleSymbolicName, bundleVersion);
1:         if (bundleInfo == null) {
1:             // Step 3: Lookup bundle location using the resolver
1:             bundleInfo = findBundleInfoUsingResolver(resolver, bundleSymbolicName, bundleVersion);
1:             throw new ManagementException("Cound not find bundles: " + bundleSymbolicName + "_" + bundleVersion);
1:             
1:             
1:         _bundles.put(bundleInfo, bundle);        
/////////////////////////////////////////////////////////////////////////
1:       if (resolver != null) {
1:           b.ungetService(resolverRef);
1:       }
1:       if (packageAdmin != null) {
1:           b.ungetService(packageAdminRef);
1:       }
1:   private <T> T getService(ServiceReference ref, Class<T> type) throws ManagementException {
1:       Object service = null;
1:       if (ref != null) {
1:           service = _bundleContext.getService(ref);
1:       }
1:       
1:       if (service == null) {
1:           throw new ManagementException(new ServiceException(type.getName(), ServiceException.UNREGISTERED));
1:       }
1:       
1:       return type.cast(service);
1:   }
1:   
1:   private Bundle findBundleInFramework(PackageAdmin admin, String symbolicName, Version version) {
1:       String exactVersion = "[" + version + "," + version + "]";
1:       Bundle[] bundles = admin.getBundles(symbolicName, exactVersion);
1:       if (bundles != null && bundles.length == 1) {
1:           return bundles[0];
0:       } else {
1:           return null;
1:       }
1:   }
1:   
1:   private BundleInfo findBundleInfoInApplication(String symbolicName, Version version) {
1:       for (BundleInfo info : _application.getBundleInfo()) {
1:           if (info.getSymbolicName().equals(symbolicName)
1:               && info.getVersion().equals(version)) {
1:               return info;
1:           }
1:       }
1:       return null;
1:   }
1:   
1:   private BundleInfo findBundleInfoUsingResolver(AriesApplicationResolver resolver, String symbolicName, Version version) {
1:       return resolver.getBundleInfo(symbolicName, version);
1:   }
1:   
commit:948b72b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.AriesApplicationContext;
/////////////////////////////////////////////////////////////////////////
1: public class ApplicationContextImpl implements AriesApplicationContext {
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: 
0: package org.apache.aries.application.runtime.impl;
1: 
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Set;
1: 
0: import org.apache.aries.application.management.ApplicationContext;
0: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.BundleInfo;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.BundleException;
1: 
0: public class ApplicationContextImpl implements ApplicationContext {
1:   
0:   private AriesApplication _application;
0:   private Map<BundleInfo, Bundle> _bundles;
0:   private ApplicationState _state;
0:   private BundleContext _bundleContext;
1:   
0:   public ApplicationContextImpl (BundleContext b, AriesApplication app) { 
0:     _application = app;
0:     _bundles = new HashMap<BundleInfo, Bundle>();
1:     _state = ApplicationState.INSTALLED;
1:   }
1: 
0:   public AriesApplication getApplication() {
0:     return _application;
1:   }
1:   
0:   public Set<Bundle> getApplicationContent() {
0:     Set<Bundle> result = new HashSet<Bundle>();
0:     for (Map.Entry<BundleInfo, Bundle> entry : _bundles.entrySet()) { 
0:       result.add (entry.getValue());
1:     }
0:     return result;
1:   } 
1: 
0:   public ApplicationState getApplicationState() {
0:     return _state;
1:   }
1: 
0:   public void start() throws BundleException {
0:     Set<BundleInfo> bundleInfo = _application.getBundleInfo();
0:     for (BundleInfo bi : bundleInfo) { 
0:       // TODO: proper synchronisation!
0:       if (_bundles.containsKey(bi)) { 
0:         Bundle b = _bundles.get(bi);
0:         if (b.getState() != Bundle.ACTIVE) { 
0:           b.start();
1:         }
0:       } else { 
0:         Bundle b = _bundleContext.installBundle(bi.getLocation()); 
0:         b.start();
0:         _bundles.put(bi, b);
1:       }
1:     }
0:     _state = ApplicationState.ACTIVE;
1:   }
1: 
0:   public void stop() throws BundleException {
0:     for (Map.Entry<BundleInfo, Bundle> entry : _bundles.entrySet()) { 
0:       Bundle b = entry.getValue();
1:       b.stop();
1:     }
0:     _state = ApplicationState.RESOLVED;
1:   }
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ad46961
/////////////////////////////////////////////////////////////////////////
1:       List<DeploymentContent> bundlesToInstall = new ArrayList<DeploymentContent>(meta.getApplicationDeploymentContents());
1:       bundlesToInstall.addAll(meta.getApplicationProvisionBundles());
1:       
1:       for (DeploymentContent content : bundlesToInstall) {
commit:1caf596
/////////////////////////////////////////////////////////////////////////
1: 
1:   public void setState(ApplicationState state)
1:   {
1:     _state = state;
0:   }
commit:55a9b56
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.aries.application.DeploymentContent;
1: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.management.AriesApplicationResolver;
1: import org.apache.aries.application.management.ManagementException;
1: import org.osgi.framework.ServiceException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
/////////////////////////////////////////////////////////////////////////
1:   public ApplicationContextImpl (BundleContext b, AriesApplication app) throws BundleException, ManagementException { 
0:     
1:     DeploymentMetadata meta = _application.getDeploymentMetadata();
0:     
1:     AriesApplicationResolver resolver = null;
0:     
0:     ServiceReference ref = b.getServiceReference(AriesApplicationResolver.class.getName());
0: 
0:     if (ref != null) resolver = (AriesApplicationResolver) b.getService(ref);
0:     
0:     if (resolver == null) {
0:       throw new ManagementException(new ServiceException(AriesApplicationResolver.class.getName(), ServiceException.UNREGISTERED));
0:     }
0:     
1:     try {
0:       for (DeploymentContent content : meta.getApplicationDeploymentContents()) {
1:         String bundleSymbolicName = content.getContentName();
1:         Version bundleVersion = content.getExactVersion();
0:         
0:         BundleInfo bundleInfo = null;
0:         
0:         for (BundleInfo info : _application.getBundleInfo()) {
0:           if (info.getSymbolicName().equals(bundleSymbolicName) &&
0:               info.getVersion().equals(bundleVersion)) {
0:             bundleInfo = info;
0:             break;
0:           }
0:         }
0:         
1:         if (bundleInfo == null) {
0:           // call out to the bundle repository.
0:           bundleInfo = resolver.getBundleInfo(bundleSymbolicName, bundleVersion);
0:         }
0:         
1:         if (bundleInfo == null) {
0:           throw new ManagementException("Cound not find bundles: " + bundleSymbolicName + "_" + bundleVersion);
0:         }
0:         
1:         Bundle bundle = _bundleContext.installBundle(bundleInfo.getLocation());
0:         
0:         _bundles.put(bundleInfo, bundle);
0:       }
1:     } catch (BundleException be) {
1:       for (Bundle bundle : _bundles.values()) {
1:         bundle.uninstall();
0:       }
0:       
1:       _bundles.clear();
0:       
1:       throw be;
1:     } finally {
0:       if (resolver != null) b.ungetService(ref);
0:     }
0:     
/////////////////////////////////////////////////////////////////////////
1:   public void start() throws BundleException 
1:   {
1:     _state = ApplicationState.STARTING;
0:     
1:     List<Bundle> bundlesWeStarted = new ArrayList<Bundle>();
0:     
1:     try {
1:       for (Bundle b : _bundles.values()) { 
1:           b.start(Bundle.START_ACTIVATION_POLICY);
1:           bundlesWeStarted.add(b);
1:     } catch (BundleException be) {
1:       for (Bundle b : bundlesWeStarted) {
1:         try {
0:           b.stop();
1:         } catch (BundleException be2) {
1:           // we are doing tidyup here, so we don't want to replace the bundle exception
1:           // that occurred during start with one from stop. We also want to try to stop
1:           // all the bundles we started even if some bundles wouldn't stop.
0:         }
0:       }
0:       
0:       _state = ApplicationState.INSTALLED;
1:       throw be;
============================================================================