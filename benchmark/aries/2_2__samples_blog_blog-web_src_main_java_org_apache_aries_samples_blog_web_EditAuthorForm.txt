1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:430e8f5: package org.apache.aries.samples.blog.web;
2:430e8f5: 
1:430e8f5: import java.io.IOException;
1:430e8f5: import java.io.PrintWriter;
1:430e8f5: 
1:430e8f5: import javax.servlet.http.HttpServletRequest;
1:430e8f5: 
1:430e8f5: import org.apache.aries.samples.blog.api.BlogAuthor;
1:430e8f5: import org.apache.aries.samples.blog.api.BloggingService;
1:430e8f5: import org.apache.aries.samples.blog.web.util.FormServlet;
1:29d0247: import org.apache.aries.samples.blog.web.util.FormatChecker;
1:430e8f5: import org.apache.aries.samples.blog.web.util.HTMLOutput;
1:4173b7f: import org.apache.aries.samples.blog.web.util.JNDIHelper;
1:430e8f5: 
1:430e8f5: 
1:430e8f5: public class EditAuthorForm extends FormServlet
2:430e8f5: {
1:430e8f5:   private static final long serialVersionUID = 4996935653835900015L;
1:430e8f5:   public static final String ID = "author";
1:430e8f5: 
1:430e8f5:   public EditAuthorForm()
1:430e8f5:   {
1:430e8f5:     super(ID);
2:430e8f5:   }
1:430e8f5:   
1:430e8f5:   @Override
1:430e8f5:   protected void writeCustomHeaderContent(HttpServletRequest req, PrintWriter out)
1:430e8f5:   {
1:430e8f5:     HTMLOutput.writeDojoUses(out, "dijit.form.TextBox", "dijit.form.DateTextBox", "dijit.form.Textarea");
1:430e8f5:   }
1:430e8f5: 
1:430e8f5:   @Override
1:430e8f5:   protected String getPageTitle(HttpServletRequest req) throws IOException
1:430e8f5:   {
1:430e8f5:     String pageTitle = "Create Author";
1:430e8f5:     
1:4173b7f:     BloggingService service = JNDIHelper.getBloggingService();
1:430e8f5:     String email = getEmail(req);
1:430e8f5:     
1:430e8f5:     if (email != null && !!!"".equals(email)) {
1:430e8f5:       BlogAuthor author = service.getBlogAuthor(email);
1:430e8f5:       if (author != null) {
1:430e8f5:         pageTitle = "Update " + author.getName() + "'s profile";
1:430e8f5:       }
1:430e8f5:     }
1:430e8f5:     
1:430e8f5:     return pageTitle;
1:430e8f5:   }
1:430e8f5: 
1:430e8f5:   private String getEmail(HttpServletRequest req)
1:430e8f5:   {
1:430e8f5:     String email = retrieveOrEmpty(req, "email");
1:29d0247:     
1:430e8f5:     if ("".equals(email)) {
1:430e8f5:       email = req.getParameter("email");
1:430e8f5:     }
1:29d0247:     if(FormatChecker.isValidEmail(email))
1:29d0247:     	return email;
1:29d0247:     else 
1:29d0247:     	return null;
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   @Override
1:430e8f5:   protected void writeForm(HttpServletRequest req, PrintWriter out) throws IOException
1:430e8f5:   {
1:430e8f5:     String name = retrieveOrEmpty(req, "name");
1:430e8f5:     String nickName = retrieveOrEmpty(req, "nickName");
1:430e8f5:     String bio = retrieveOrEmpty(req, "bio");
1:430e8f5:     String dob = retrieveOrEmpty(req, "dob");
1:430e8f5:     String email = getEmail(req);
1:430e8f5:     
1:4173b7f:     BloggingService service = JNDIHelper.getBloggingService();
1:430e8f5:     
1:430e8f5:     if (email != null && !!!"".equals(email)) {
1:430e8f5:       BlogAuthor author = service.getBlogAuthor(email);
1:430e8f5:       
1:430e8f5:       if ("".equals(name))
1:430e8f5:         name = author.getFullName();
1:430e8f5:       if ("".equals(nickName))
1:430e8f5:         nickName = author.getName();
1:430e8f5:       if ("".equals(bio))
1:430e8f5:         bio = author.getBio();
1:430e8f5:       if ("".equals(dob))
1:430e8f5:         dob = author.getDateOfBirth();
1:430e8f5:     } else {
1:430e8f5:       email = "";
1:430e8f5:     }
1:430e8f5:     
1:430e8f5:     out.println("<form method=\"get\" action=\"EditAuthor\">");
1:430e8f5:     
1:430e8f5:     out.print("<div class=\"textEntry\"><label>Name <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"name\" value=\"");
1:430e8f5:     out.print(name);
1:430e8f5:     out.println("\"/></label></div>");
1:430e8f5:     out.print("<div class=\"textEntry\"><label>Nickname <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"nickName\" value=\"");
1:430e8f5:     out.print(nickName);
1:430e8f5:     out.println("\"/></label></div>");
1:430e8f5:     out.print("<div class=\"textEntry\"><label>Email <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"email\" value=\"");
1:430e8f5:     out.print(email);
1:430e8f5:     out.println("\"/></label></div>");
1:430e8f5:     out.print("<div class=\"textEntry\"><label>Date of Birth <input dojoType=\"dijit.form.DateTextBox\" type=\"text\" name=\"dob\" required=\"true\" value=\"");
1:430e8f5:     out.print(dob);
1:430e8f5:     out.println("\"/></label></div>");
1:430e8f5:     out.print("<div class=\"textEntry\"><label>Bio <textarea dojoType=\"dijit.form.Textarea\" style=\"width:300px\" name=\"bio\">");
1:430e8f5:     out.print(bio);
1:430e8f5:     out.println("</textarea></label></div>");
1:430e8f5: 
1:430e8f5:     out.println("<input class=\"submit\" type=\"submit\" value=\"Submit\" name=\"Submit\"/>");
1:430e8f5:     
1:430e8f5:     out.println("</form>");
1:430e8f5:   }
1:430e8f5: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:cfb4c6d
/////////////////////////////////////////////////////////////////////////
commit:29d0247
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.web.util.FormatChecker;
/////////////////////////////////////////////////////////////////////////
1:     
1:     if(FormatChecker.isValidEmail(email))
1:     	return email;
1:     else 
1:     	return null;
commit:afa98ec
commit:14fd487
commit:4173b7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.web.util.JNDIHelper;
/////////////////////////////////////////////////////////////////////////
1:     BloggingService service = JNDIHelper.getBloggingService();
/////////////////////////////////////////////////////////////////////////
1:     BloggingService service = JNDIHelper.getBloggingService();
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.web;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: 
1: import javax.servlet.http.HttpServletRequest;
1: 
1: import org.apache.aries.samples.blog.api.BlogAuthor;
1: import org.apache.aries.samples.blog.api.BloggingService;
1: import org.apache.aries.samples.blog.web.util.FormServlet;
1: import org.apache.aries.samples.blog.web.util.HTMLOutput;
1: 
1: 
1: public class EditAuthorForm extends FormServlet
1: {
1:   private static final long serialVersionUID = 4996935653835900015L;
1:   public static final String ID = "author";
1: 
1:   public EditAuthorForm()
1:   {
1:     super(ID);
1:   }
1:   
1:   @Override
1:   protected void writeCustomHeaderContent(HttpServletRequest req, PrintWriter out)
1:   {
1:     HTMLOutput.writeDojoUses(out, "dijit.form.TextBox", "dijit.form.DateTextBox", "dijit.form.Textarea");
1:   }
1: 
1:   @Override
1:   protected String getPageTitle(HttpServletRequest req) throws IOException
1:   {
1:     String pageTitle = "Create Author";
1:     
0:     BloggingService service = HTMLOutput.getBloggingService();
1:     String email = getEmail(req);
1:     
1:     if (email != null && !!!"".equals(email)) {
1:       BlogAuthor author = service.getBlogAuthor(email);
1:       if (author != null) {
1:         pageTitle = "Update " + author.getName() + "'s profile";
1:       }
1:     }
1:     
1:     return pageTitle;
1:   }
1: 
1:   private String getEmail(HttpServletRequest req)
1:   {
1:     String email = retrieveOrEmpty(req, "email");
1:     if ("".equals(email)) {
1:       email = req.getParameter("email");
1:     }
0:     return checkEmail(email);
1:   }
1:   
1:   @Override
1:   protected void writeForm(HttpServletRequest req, PrintWriter out) throws IOException
1:   {
1:     String name = retrieveOrEmpty(req, "name");
1:     String nickName = retrieveOrEmpty(req, "nickName");
1:     String bio = retrieveOrEmpty(req, "bio");
1:     String dob = retrieveOrEmpty(req, "dob");
1:     String email = getEmail(req);
1:     
0:     BloggingService service = HTMLOutput.getBloggingService();
1:     
1:     if (email != null && !!!"".equals(email)) {
1:       BlogAuthor author = service.getBlogAuthor(email);
1:       
1:       if ("".equals(name))
1:         name = author.getFullName();
1:       if ("".equals(nickName))
1:         nickName = author.getName();
1:       if ("".equals(bio))
1:         bio = author.getBio();
1:       if ("".equals(dob))
1:         dob = author.getDateOfBirth();
1:     } else {
1:       email = "";
1:     }
1:     
1:     out.println("<form method=\"get\" action=\"EditAuthor\">");
1:     
1:     out.print("<div class=\"textEntry\"><label>Name <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"name\" value=\"");
1:     out.print(name);
1:     out.println("\"/></label></div>");
1:     out.print("<div class=\"textEntry\"><label>Nickname <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"nickName\" value=\"");
1:     out.print(nickName);
1:     out.println("\"/></label></div>");
1:     out.print("<div class=\"textEntry\"><label>Email <input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"email\" value=\"");
1:     out.print(email);
1:     out.println("\"/></label></div>");
1:     out.print("<div class=\"textEntry\"><label>Date of Birth <input dojoType=\"dijit.form.DateTextBox\" type=\"text\" name=\"dob\" required=\"true\" value=\"");
1:     out.print(dob);
1:     out.println("\"/></label></div>");
1:     out.print("<div class=\"textEntry\"><label>Bio <textarea dojoType=\"dijit.form.Textarea\" style=\"width:300px\" name=\"bio\">");
1:     out.print(bio);
1:     out.println("</textarea></label></div>");
1: 
1:     out.println("<input class=\"submit\" type=\"submit\" value=\"Submit\" name=\"Submit\"/>");
1:     
1:     out.println("</form>");
1:   }
1:   
0:   private String checkEmail(String parameter)
1:   {
0:     if (parameter != null && parameter.matches("^(?:[a-zA-Z0-9_'^&amp;/+-])+(?:\\.(?:[a-zA-Z0-9_'^&amp;/+-])+)*@(?:(?:\\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\]?)|(?:[a-zA-Z0-9-]+\\.)+(?:[a-zA-Z]){2,}\\.?)$")) return parameter;
0:     return null;
1:   }
1: }
============================================================================