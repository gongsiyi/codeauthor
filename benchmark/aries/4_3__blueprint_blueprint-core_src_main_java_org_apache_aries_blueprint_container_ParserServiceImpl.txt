1:2d72200: /**
1:2d72200:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:2d72200:  *  contributor license agreements.  See the NOTICE file distributed with
1:2d72200:  *  this work for additional information regarding copyright ownership.
1:2d72200:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:2d72200:  *  (the "License"); you may not use this file except in compliance with
1:2d72200:  *  the License.  You may obtain a copy of the License at
1:2d72200:  *
1:2d72200:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2d72200:  *
1:2d72200:  *  Unless required by applicable law or agreed to in writing, software
1:2d72200:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:2d72200:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2d72200:  *  See the License for the specific language governing permissions and
1:2d72200:  *  limitations under the License.
1:2d72200:  */
1:76b662a: package org.apache.aries.blueprint.container;
3:76b662a: 
1:76b662a: import java.io.IOException;
1:76b662a: import java.io.InputStream;
1:76b662a: import java.net.URI;
1:76b662a: import java.net.URL;
1:76b662a: import java.util.ArrayList;
1:76b662a: import java.util.List;
1:76b662a: import java.util.Set;
1:76b662a: 
1:76b662a: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:6bd0f94: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1:09a7647: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1:09a7647: import org.apache.aries.blueprint.parser.Parser;
1:09a7647: import org.apache.aries.blueprint.services.ParserService;
1:76b662a: import org.osgi.framework.Bundle;
1:76b662a: import org.xml.sax.SAXException;
1:76b662a: 
1:76b662a: public class ParserServiceImpl implements ParserService {
1:76b662a: 
1:3cfe3e2: 	final NamespaceHandlerRegistry _namespaceHandlerRegistry;
1:3cfe3e2:     final boolean _ignoreUnknownNamespaceHandlers;
1:3cfe3e2: 
1:3cfe3e2:   public ParserServiceImpl (NamespaceHandlerRegistry nhr, boolean ignoreUnknownNamespaceHandlers) { 
1:3cfe3e2:     _namespaceHandlerRegistry = nhr;
1:3cfe3e2:     _ignoreUnknownNamespaceHandlers = ignoreUnknownNamespaceHandlers;
1:3cfe3e2:   }
1:3cfe3e2: 
1:3cfe3e2:   public ComponentDefinitionRegistry parse(URL url, Bundle clientBundle) throws Exception {
1:76b662a:     return parse (url, clientBundle, false);
2:76b662a:   }
1:76b662a: 
1:76b662a:   public ComponentDefinitionRegistry parse(URL url, Bundle clientBundle, boolean validate)
1:76b662a:       throws Exception {
1:76b662a:     List<URL> urls = new ArrayList<URL>();
1:76b662a:     urls.add(url);
1:76b662a:     return parse (urls, clientBundle, validate);
1:76b662a:   }
1:76b662a:   
1:76b662a:   public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle) throws Exception {
1:76b662a:     return parse(urls, clientBundle, false);
1:76b662a:   }
1:76b662a:   
1:76b662a: 	public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle, boolean validate) throws Exception {
1:3cfe3e2: 	  Parser parser = new Parser(null, _ignoreUnknownNamespaceHandlers);   
1:76b662a: 	  parser.parse(urls);
1:76b662a: 	  return validateAndPopulate (parser, clientBundle, validate);
1:76b662a: 	}
1:76b662a: 	
1:76b662a:   public ComponentDefinitionRegistry parse(InputStream is, Bundle clientBundle) throws Exception {
1:76b662a:     return parse (is, clientBundle, false);
1:76b662a:   }
1:76b662a:   
1:76b662a:   public ComponentDefinitionRegistry parse(InputStream is, Bundle clientBundle, boolean validate) throws Exception {
1:3cfe3e2:     Parser parser = new Parser(null, _ignoreUnknownNamespaceHandlers);
1:76b662a:     parser.parse(is);
1:76b662a:     return validateAndPopulate (parser, clientBundle, validate);
1:76b662a:   }
1:76b662a:     
1:76b662a:   private ComponentDefinitionRegistry validateAndPopulate (Parser parser, Bundle clientBundle, boolean validate) 
1:76b662a:   throws IOException, SAXException { 
1:76b662a:     Set<URI> nsuris = parser.getNamespaces();
1:1d8c3ec:     ComponentDefinitionRegistry cdr;
1:76b662a:     NamespaceHandlerSet nshandlers = _namespaceHandlerRegistry.getNamespaceHandlers(nsuris, clientBundle);
1:1d8c3ec:     try {
1:1d8c3ec:         if (validate) { 
1:1d8c3ec:           parser.validate( nshandlers.getSchema());
1:1d8c3ec:         }
1:1d8c3ec:         cdr = new ComponentDefinitionRegistryImpl();
1:1d8c3ec:         parser.populate(nshandlers, cdr);
1:1d8c3ec:     } finally {
1:1d8c3ec:         nshandlers.destroy();
1:76b662a:     }
1:1d8c3ec:     
1:76b662a:     return cdr;   
1:76b662a:   }
1:76b662a: 
1:76b662a: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:3cfe3e2
/////////////////////////////////////////////////////////////////////////
1: 	final NamespaceHandlerRegistry _namespaceHandlerRegistry;
1:     final boolean _ignoreUnknownNamespaceHandlers;
1: 
1:   public ParserServiceImpl (NamespaceHandlerRegistry nhr, boolean ignoreUnknownNamespaceHandlers) { 
1:     _namespaceHandlerRegistry = nhr;
1:     _ignoreUnknownNamespaceHandlers = ignoreUnknownNamespaceHandlers;
1:   }
1: 
1:   public ComponentDefinitionRegistry parse(URL url, Bundle clientBundle) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	  Parser parser = new Parser(null, _ignoreUnknownNamespaceHandlers);   
/////////////////////////////////////////////////////////////////////////
1:     Parser parser = new Parser(null, _ignoreUnknownNamespaceHandlers);
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:6bd0f94
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1: import org.apache.aries.blueprint.parser.Parser;
1: import org.apache.aries.blueprint.services.ParserService;
commit:1d8c3ec
/////////////////////////////////////////////////////////////////////////
1:     ComponentDefinitionRegistry cdr;
1:     try {
1:         if (validate) { 
1:           parser.validate( nshandlers.getSchema());
1:         }
1:         cdr = new ComponentDefinitionRegistryImpl();
1:         parser.populate(nshandlers, cdr);
1:     } finally {
1:         nshandlers.destroy();
1:     
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:2d72200
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.container;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
0: import org.apache.aries.blueprint.ParserService;
0: import org.apache.aries.blueprint.container.NamespaceHandlerRegistry.NamespaceHandlerSet;
0: import org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl;
1: import org.osgi.framework.Bundle;
1: import org.xml.sax.SAXException;
1: 
1: public class ParserServiceImpl implements ParserService {
1: 
0: 	NamespaceHandlerRegistry _namespaceHandlerRegistry;
1: 	
0: 	public ParserServiceImpl (NamespaceHandlerRegistry nhr) { 
0: 		_namespaceHandlerRegistry = nhr;
1: 	}
1: 	
0: 	public ComponentDefinitionRegistry parse(URL url, Bundle clientBundle) throws Exception {
1:     return parse (url, clientBundle, false);
1:   }
1: 
1:   public ComponentDefinitionRegistry parse(URL url, Bundle clientBundle, boolean validate)
1:       throws Exception {
1:     List<URL> urls = new ArrayList<URL>();
1:     urls.add(url);
1:     return parse (urls, clientBundle, validate);
1:   }
1:   
1:   public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle) throws Exception {
1:     return parse(urls, clientBundle, false);
1:   }
1:   
1: 	public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle, boolean validate) throws Exception {
0: 	  Parser parser = new Parser();   
1: 	  parser.parse(urls);
1: 	  return validateAndPopulate (parser, clientBundle, validate);
1: 	}
1: 	
1:   public ComponentDefinitionRegistry parse(InputStream is, Bundle clientBundle) throws Exception {
1:     return parse (is, clientBundle, false);
1:   }
1:   
1:   public ComponentDefinitionRegistry parse(InputStream is, Bundle clientBundle, boolean validate) throws Exception {
0:     Parser parser = new Parser();
1:     parser.parse(is);
1:     return validateAndPopulate (parser, clientBundle, validate);
1:   }
1:     
1:   private ComponentDefinitionRegistry validateAndPopulate (Parser parser, Bundle clientBundle, boolean validate) 
1:   throws IOException, SAXException { 
1:     Set<URI> nsuris = parser.getNamespaces();
1:     NamespaceHandlerSet nshandlers = _namespaceHandlerRegistry.getNamespaceHandlers(nsuris, clientBundle);
0:     if (validate) { 
0:       parser.validate( nshandlers.getSchema());
1:     }
0:     ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
0:     parser.populate(nshandlers, cdr);
1:     return cdr;   
1:   }
1: 
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9d16c7e
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
0: import org.xml.sax.SAXException;
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public ComponentDefinitionRegistry parse(URL url, Bundle clientBundle) throws Exception {
0:     return parse (url, clientBundle, false);
0:   }
0: 
0:   public ComponentDefinitionRegistry parse(URL url, Bundle clientBundle, boolean validate)
0:       throws Exception {
0:     List<URL> urls = new ArrayList<URL>();
0:     urls.add(url);
0:     return parse (urls, clientBundle, validate);
0:   }
0:   
0:   public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle) throws Exception {
0:     return parse(urls, clientBundle, false);
0:   }
0:   
0: 	public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle, boolean validate) throws Exception {
0: 	  Parser parser = new Parser();   
0: 	  parser.parse(urls);
0: 	  return validateAndPopulate (parser, clientBundle, validate);
0:   public ComponentDefinitionRegistry parse(InputStream is, Bundle clientBundle) throws Exception {
0:     return parse (is, clientBundle, false);
0:   }
0:   
0:   public ComponentDefinitionRegistry parse(InputStream is, Bundle clientBundle, boolean validate) throws Exception {
0:     Parser parser = new Parser();
0:     parser.parse(is);
0:     return validateAndPopulate (parser, clientBundle, validate);
0:   }
0:     
0:   private ComponentDefinitionRegistry validateAndPopulate (Parser parser, Bundle clientBundle, boolean validate) 
0:   throws IOException, SAXException { 
0:     Set<URI> nsuris = parser.getNamespaces();
0:     NamespaceHandlerSet nshandlers = _namespaceHandlerRegistry.getNamespaceHandlers(nsuris, clientBundle);
0:     if (validate) { 
0:       parser.validate( nshandlers.getSchema());
0:     }
0:     ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
0:     parser.populate(nshandlers, cdr);
0:     return cdr;   
0:   }
0: 
commit:3fa788c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.container;
0: 
0: import java.net.URI;
0: import java.net.URL;
0: import java.util.List;
0: import java.util.Set;
0: 
0: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
0: import org.apache.aries.blueprint.ParserService;
0: import org.apache.aries.blueprint.container.NamespaceHandlerRegistry.NamespaceHandlerSet;
0: import org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl;
0: import org.osgi.framework.Bundle;
0: 
0: public class ParserServiceImpl implements ParserService {
0: 
0: 	NamespaceHandlerRegistry _namespaceHandlerRegistry;
0: 	
0: 	public ParserServiceImpl (NamespaceHandlerRegistry nhr) { 
0: 		_namespaceHandlerRegistry = nhr;
0: 	}
0: 	public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle) throws Exception {
0: 		return parse(urls, clientBundle, false);
0: 	}
0: 	
0: 	public ComponentDefinitionRegistry parse(List<URL> urls, Bundle clientBundle, boolean validate) throws Exception {
0: 		Parser parser = new Parser();   
0: 		parser.parse(urls);
0: 		Set<URI> nsuris = parser.getNamespaces();
0: 		NamespaceHandlerSet nshandlers = _namespaceHandlerRegistry.getNamespaceHandlers(nsuris, clientBundle);
0: 		if (validate) { 
0: 		  parser.validate( nshandlers.getSchema());
0: 		}
0: 		ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
0: 		parser.populate(nshandlers, cdr);
0: 		return cdr;		
0: 	}
0: }
============================================================================