1:330bc7e: /*
1:330bc7e:  * Licensed to the Apache Software Foundation (ASF) under one
1:330bc7e:  * or more contributor license agreements.  See the NOTICE file
1:330bc7e:  * distributed with this work for additional information
1:330bc7e:  * regarding copyright ownership.  The ASF licenses this file
1:330bc7e:  * to you under the Apache License, Version 2.0 (the
1:330bc7e:  * "License"); you may not use this file except in compliance
1:330bc7e:  * with the License.  You may obtain a copy of the License at
1:330bc7e:  *
1:330bc7e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:330bc7e:  *
1:330bc7e:  * Unless required by applicable law or agreed to in writing,
1:330bc7e:  * software distributed under the License is distributed on an
1:330bc7e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:330bc7e:  * KIND, either express or implied.  See the License for the
1:330bc7e:  * specific language governing permissions and limitations
1:330bc7e:  * under the License.
1:330bc7e:  */
1:330bc7e: package org.apache.aries.subsystem.itests.defect;
1:330bc7e: 
1:330bc7e: import static org.junit.Assert.assertNotNull;
1:330bc7e: import static org.junit.Assert.assertTrue;
1:330bc7e: import static org.junit.Assert.fail;
1:330bc7e: 
1:330bc7e: import java.io.File;
1:330bc7e: import java.io.FileWriter;
1:330bc7e: import java.net.URL;
1:330bc7e: 
1:330bc7e: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1:330bc7e: import org.apache.aries.subsystem.itests.SubsystemTest;
1:330bc7e: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1:330bc7e: import org.apache.felix.bundlerepository.DataModelHelper;
1:330bc7e: import org.apache.felix.bundlerepository.Repository;
1:330bc7e: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:330bc7e: import org.apache.felix.bundlerepository.Resource;
1:330bc7e: import org.junit.Test;
1:330bc7e: import org.osgi.framework.BundleContext;
1:330bc7e: import org.osgi.framework.ServiceReference;
1:330bc7e: import org.osgi.service.subsystem.Subsystem;
1:330bc7e: import org.osgi.service.subsystem.SubsystemConstants;
1:330bc7e: import org.osgi.service.subsystem.SubsystemException;
1:330bc7e: 
1:330bc7e: public class Aries1608Test extends SubsystemTest {
1:330bc7e: 	private RepositoryAdmin repositoryAdmin;
1:330bc7e: 	private URL url;
1:330bc7e: 	
1:330bc7e: 	@Override
1:330bc7e:     public void setUp() throws Exception {
1:330bc7e:         super.setUp();
1:330bc7e:         BundleContext context = context();
1:330bc7e:         ServiceReference<RepositoryAdmin> ref = context.getServiceReference(RepositoryAdmin.class);
1:330bc7e:         assertNotNull("The RepositoryAdmin service does not exist", ref);
1:330bc7e:         try {
1:330bc7e:         	repositoryAdmin = (RepositoryAdmin)context.getService(ref);
1:330bc7e:         	DataModelHelper helper = repositoryAdmin.getHelper();
1:330bc7e:         	url = createRepositoryXml(helper);
1:330bc7e:         	Repository repository = repositoryAdmin.addRepository(url);
1:330bc7e:         	Resource resource = repository.getResources()[0];
1:330bc7e:         	System.out.println(resource.getURI());
1:330bc7e:         }
1:330bc7e:         finally {
1:330bc7e:         	context.ungetService(ref);
1:330bc7e:         }
1:330bc7e:     }
1:330bc7e: 	
1:330bc7e: 	@Override
1:330bc7e: 	public void tearDown() throws Exception {
1:330bc7e: 		repositoryAdmin.removeRepository(url.toString());
1:330bc7e: 		super.tearDown();
1:330bc7e: 	}
1:330bc7e: 	
1:330bc7e: 	@Test
1:330bc7e: 	public void testApacheAriesProvisionDependenciesInstall() throws Exception {
1:330bc7e: 		test(AriesProvisionDependenciesDirective.INSTALL);
1:330bc7e: 	}
1:330bc7e: 	
1:330bc7e: 	@Test
1:330bc7e: 	public void testApacheAriesProvisionDependenciesResolve() throws Exception {
1:330bc7e: 		test(AriesProvisionDependenciesDirective.RESOLVE);
1:330bc7e: 	}
1:330bc7e: 	
1:330bc7e: 	private void test(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1:330bc7e: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1:330bc7e: 		Subsystem root = getRootSubsystem();
1:330bc7e: 		try {
1:330bc7e: 			Subsystem subsystem = installSubsystem(
1:330bc7e: 					root,
1:330bc7e: 					"subsystem", 
1:330bc7e: 					new SubsystemArchiveBuilder()
1:330bc7e: 							.symbolicName("subsystem")
1:330bc7e: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1:330bc7e: 										+ provisionDependencies.toString())
1:330bc7e: 							.content("org.apache.aries.subsystem.itests.aries1608provider,org.apache.aries.subsystem.itests.aries1608required")
1:330bc7e: 							.bundle(
1:330bc7e: 									"aries1608required", 
1:330bc7e: 									getClass().getClassLoader().getResourceAsStream("aries1608/aries1608required.jar"))
1:330bc7e: 							.build(),
1:330bc7e: 					flag
1:330bc7e: 			);
1:330bc7e: 			try {
1:330bc7e: 				startSubsystem(subsystem, flag);
1:330bc7e: 				stopSubsystem(subsystem);
1:330bc7e: 			}
1:330bc7e: 			catch (SubsystemException e) {
1:330bc7e: 				e.printStackTrace();
1:330bc7e: 				fail("Subsystem should have started");
1:330bc7e: 			}
1:330bc7e: 			finally {
1:330bc7e: 				uninstallSubsystemSilently(subsystem);
1:330bc7e: 			}
1:330bc7e: 		}
1:330bc7e: 		catch (SubsystemException e) {
1:330bc7e: 			e.printStackTrace();
1:330bc7e: 			fail("Subsystem should have installed");
1:330bc7e: 		}
1:330bc7e: 	}
1:330bc7e: 	
1:330bc7e: 	private URL createRepositoryXml(DataModelHelper helper) throws Exception {
1:330bc7e: 		File dir;
1:330bc7e: 		String cwd = new File("").getAbsolutePath();
1:330bc7e: 		if (cwd.endsWith(File.separator + "target")) {
1:330bc7e: 			dir = new File("test-classes/aries1608");
1:330bc7e: 		}
1:330bc7e: 		else {
1:330bc7e: 			dir = new File("target/test-classes/aries1608");
1:330bc7e: 		}
1:330bc7e: 		File jar = new File(dir, "aries1608provider.jar");
1:330bc7e: 		assertTrue("The bundle jar does not exist: " + jar.getAbsolutePath(), jar.exists());
1:330bc7e: 		Resource resource = helper.createResource(jar.toURI().toURL());
1:330bc7e: 		Repository repository = helper.repository(new Resource[] {resource});
1:330bc7e: 		File file = new File(dir, "repository.xml");
1:330bc7e: 		FileWriter fw = new FileWriter(file);
1:330bc7e: 		try {
1:330bc7e: 			helper.writeRepository(repository, fw);
1:330bc7e: 			return file.toURI().toURL();
1:330bc7e: 		}
1:330bc7e: 		finally {
1:330bc7e: 			fw.close();
1:330bc7e: 		}
1:330bc7e: 	}
1:330bc7e: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:330bc7e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.net.URL;
1: 
1: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1: import org.apache.felix.bundlerepository.DataModelHelper;
1: import org.apache.felix.bundlerepository.Repository;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class Aries1608Test extends SubsystemTest {
1: 	private RepositoryAdmin repositoryAdmin;
1: 	private URL url;
1: 	
1: 	@Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         BundleContext context = context();
1:         ServiceReference<RepositoryAdmin> ref = context.getServiceReference(RepositoryAdmin.class);
1:         assertNotNull("The RepositoryAdmin service does not exist", ref);
1:         try {
1:         	repositoryAdmin = (RepositoryAdmin)context.getService(ref);
1:         	DataModelHelper helper = repositoryAdmin.getHelper();
1:         	url = createRepositoryXml(helper);
1:         	Repository repository = repositoryAdmin.addRepository(url);
1:         	Resource resource = repository.getResources()[0];
1:         	System.out.println(resource.getURI());
1:         }
1:         finally {
1:         	context.ungetService(ref);
1:         }
1:     }
1: 	
1: 	@Override
1: 	public void tearDown() throws Exception {
1: 		repositoryAdmin.removeRepository(url.toString());
1: 		super.tearDown();
1: 	}
1: 	
1: 	@Test
1: 	public void testApacheAriesProvisionDependenciesInstall() throws Exception {
1: 		test(AriesProvisionDependenciesDirective.INSTALL);
1: 	}
1: 	
1: 	@Test
1: 	public void testApacheAriesProvisionDependenciesResolve() throws Exception {
1: 		test(AriesProvisionDependenciesDirective.RESOLVE);
1: 	}
1: 	
1: 	private void test(AriesProvisionDependenciesDirective provisionDependencies) throws Exception {
1: 		boolean flag = AriesProvisionDependenciesDirective.INSTALL.equals(provisionDependencies);
1: 		Subsystem root = getRootSubsystem();
1: 		try {
1: 			Subsystem subsystem = installSubsystem(
1: 					root,
1: 					"subsystem", 
1: 					new SubsystemArchiveBuilder()
1: 							.symbolicName("subsystem")
1: 							.type(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION + ';' 
1: 										+ provisionDependencies.toString())
1: 							.content("org.apache.aries.subsystem.itests.aries1608provider,org.apache.aries.subsystem.itests.aries1608required")
1: 							.bundle(
1: 									"aries1608required", 
1: 									getClass().getClassLoader().getResourceAsStream("aries1608/aries1608required.jar"))
1: 							.build(),
1: 					flag
1: 			);
1: 			try {
1: 				startSubsystem(subsystem, flag);
1: 				stopSubsystem(subsystem);
1: 			}
1: 			catch (SubsystemException e) {
1: 				e.printStackTrace();
1: 				fail("Subsystem should have started");
1: 			}
1: 			finally {
1: 				uninstallSubsystemSilently(subsystem);
1: 			}
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Subsystem should have installed");
1: 		}
1: 	}
1: 	
1: 	private URL createRepositoryXml(DataModelHelper helper) throws Exception {
1: 		File dir;
1: 		String cwd = new File("").getAbsolutePath();
1: 		if (cwd.endsWith(File.separator + "target")) {
1: 			dir = new File("test-classes/aries1608");
1: 		}
1: 		else {
1: 			dir = new File("target/test-classes/aries1608");
1: 		}
1: 		File jar = new File(dir, "aries1608provider.jar");
1: 		assertTrue("The bundle jar does not exist: " + jar.getAbsolutePath(), jar.exists());
1: 		Resource resource = helper.createResource(jar.toURI().toURL());
1: 		Repository repository = helper.repository(new Resource[] {resource});
1: 		File file = new File(dir, "repository.xml");
1: 		FileWriter fw = new FileWriter(file);
1: 		try {
1: 			helper.writeRepository(repository, fw);
1: 			return file.toURI().toURL();
1: 		}
1: 		finally {
1: 			fw.close();
1: 		}
1: 	}
1: }
============================================================================