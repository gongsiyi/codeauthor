1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
2:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.beans;
2:628add4: 
1:628add4: import java.io.Serializable;
1:628add4: import java.math.BigDecimal;
1:628add4: import java.sql.Timestamp;
1:628add4: import java.util.Collection;
1:628add4: import java.util.Date;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.util.Log;
1:56a6860: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1:628add4: 
1:628add4: 
1:628add4: public class AccountDataBeanImpl implements AccountDataBean, Serializable {
1:628add4:     
1:628add4:     private Integer accountID;              /* accountID */
1:628add4:     
1:628add4:     
1:628add4:     private int loginCount;                 /* loginCount */
1:628add4:     
1:628add4:     
1:628add4:     private int logoutCount;                /* logoutCount */
1:628add4:     
1:628add4:     
1:628add4:     private Date lastLogin;                 /* lastLogin Date */
1:628add4:     
1:628add4:     
1:628add4:     private Date creationDate;              /* creationDate */
1:628add4:     
1:628add4:     
1:628add4:     private BigDecimal balance;             /* balance */
1:628add4:     
1:628add4:     
1:628add4:     private BigDecimal openBalance;         /* open balance */
1:628add4:     
1:628add4:     
1:628add4:     private Collection<OrderDataBean> orders;
1:628add4:     
1:628add4:     
1:628add4:     private Collection<HoldingDataBean> holdings;
1:628add4:     
1:628add4:     
1:628add4:     private AccountProfileDataBean profile;
1:628add4: 
1:628add4: 
1:628add4:     /* Accessor methods for relationship fields are only included for the AccountProfile profileID */
1:628add4:     
1:628add4:     private String profileID;
1:628add4: 
1:628add4:     public AccountDataBeanImpl() {
2:628add4:     }
1:628add4: 
1:628add4:     public AccountDataBeanImpl(Integer accountID,
1:628add4:             int loginCount,
1:628add4:             int logoutCount,
1:628add4:             Date lastLogin,
1:628add4:             Date creationDate,
1:628add4:             BigDecimal balance,
1:628add4:             BigDecimal openBalance,
1:628add4:             String profileID) {
1:628add4:         setAccountID(accountID);
1:628add4:         setLoginCount(loginCount);
1:628add4:         setLogoutCount(logoutCount);
1:628add4:         setLastLogin(lastLogin);
1:628add4:         setCreationDate(creationDate);
1:628add4:         setBalance(balance);
1:628add4:         setOpenBalance(openBalance);
1:628add4:         setProfileID(profileID);
1:628add4:     }
1:628add4: 
1:628add4:     public AccountDataBeanImpl(int loginCount,
1:628add4:             int logoutCount,
1:628add4:             Date lastLogin,
1:628add4:             Date creationDate,
1:628add4:             BigDecimal balance,
1:628add4:             BigDecimal openBalance,
1:628add4:             String profileID) {
1:628add4:         setLoginCount(loginCount);
1:628add4:         setLogoutCount(logoutCount);
1:628add4:         setLastLogin(lastLogin);
1:628add4:         setCreationDate(creationDate);
1:628add4:         setBalance(balance);
1:628add4:         setOpenBalance(openBalance);
1:628add4:         setProfileID(profileID);
1:628add4:     }
1:628add4: 
1:628add4:     public static AccountDataBean getRandomInstance() {
1:628add4:         return new AccountDataBeanImpl(new Integer(TradeConfig.rndInt(100000)), //accountID
1:628add4:                 TradeConfig.rndInt(10000), //loginCount
1:628add4:                 TradeConfig.rndInt(10000), //logoutCount
1:628add4:                 new java.util.Date(), //lastLogin
1:628add4:                 new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //creationDate
1:628add4:                 TradeConfig.rndBigDecimal(1000000.0f), //balance
1:628add4:                 TradeConfig.rndBigDecimal(1000000.0f), //openBalance
1:628add4:                 TradeConfig.rndUserID() //profileID
1:628add4:         );
1:628add4:     }
1:628add4: 
1:628add4:     public String toString() {
1:628add4:         return "\n\tAccount Data for account: " + getAccountID()
1:628add4:                 + "\n\t\t   loginCount:" + getLoginCount()
1:628add4:                 + "\n\t\t  logoutCount:" + getLogoutCount()
1:628add4:                 + "\n\t\t    lastLogin:" + getLastLogin()
1:628add4:                 + "\n\t\t creationDate:" + getCreationDate()
1:628add4:                 + "\n\t\t      balance:" + getBalance()
1:628add4:                 + "\n\t\t  openBalance:" + getOpenBalance()
1:628add4:                 + "\n\t\t    profileID:" + getProfileID()
1:628add4:                 ;
1:628add4:     }
1:628add4: 
1:628add4:     public String toHTML() {
1:628add4:         return "<BR>Account Data for account: <B>" + getAccountID() + "</B>"
1:628add4:                 + "<LI>   loginCount:" + getLoginCount() + "</LI>"
1:628add4:                 + "<LI>  logoutCount:" + getLogoutCount() + "</LI>"
1:628add4:                 + "<LI>    lastLogin:" + getLastLogin() + "</LI>"
1:628add4:                 + "<LI> creationDate:" + getCreationDate() + "</LI>"
1:628add4:                 + "<LI>      balance:" + getBalance() + "</LI>"
1:628add4:                 + "<LI>  openBalance:" + getOpenBalance() + "</LI>"
1:628add4:                 + "<LI>    profileID:" + getProfileID() + "</LI>"
1:628add4:                 ;
1:628add4:     }
1:628add4: 
1:628add4:     public void print() {
1:628add4:         Log.log(this.toString());
1:628add4:     }
1:628add4: 
1:628add4:     public Integer getAccountID() {
1:628add4:         return accountID;
1:628add4:     }
1:628add4: 
1:628add4:     public void setAccountID(Integer accountID) {
1:628add4:         this.accountID = accountID;
1:628add4:     }
1:628add4: 
1:628add4:     public int getLoginCount() {
1:628add4:         return loginCount;
1:628add4:     }
1:628add4: 
1:628add4:     public void setLoginCount(int loginCount) {
1:628add4:         this.loginCount = loginCount;
1:628add4:     }
1:628add4: 
1:628add4:     public int getLogoutCount() {
1:628add4:         return logoutCount;
1:628add4:     }
1:628add4: 
1:628add4:     public void setLogoutCount(int logoutCount) {
1:628add4:         this.logoutCount = logoutCount;
1:628add4:     }
1:628add4: 
1:628add4:     public Date getLastLogin() {
1:628add4:         return lastLogin;
1:628add4:     }
1:628add4: 
1:628add4:     public void setLastLogin(Date lastLogin) {
1:628add4:         this.lastLogin = lastLogin;
1:628add4:     }
1:628add4: 
1:628add4:     public Date getCreationDate() {
1:628add4:         return creationDate;
1:628add4:     }
1:628add4: 
1:628add4:     public void setCreationDate(Date creationDate) {
1:628add4:         this.creationDate = creationDate;
1:628add4:     }
1:628add4: 
1:628add4:     public BigDecimal getBalance() {
1:628add4:         return balance;
1:628add4:     }
1:628add4: 
1:628add4:     public void setBalance(BigDecimal balance) {
1:628add4:         this.balance = balance;
1:628add4:     }
1:628add4: 
1:628add4:     public BigDecimal getOpenBalance() {
1:628add4:         return openBalance;
1:628add4:     }
1:628add4: 
1:628add4:     public void setOpenBalance(BigDecimal openBalance) {
1:628add4:         this.openBalance = openBalance;
1:628add4:     }
1:628add4: 
1:628add4:     public String getProfileID() {
1:628add4:         return profileID;
1:628add4:     }
1:628add4: 
1:628add4:     public void setProfileID(String profileID) {
1:628add4:         this.profileID = profileID;
1:628add4:     }
1:628add4: 
1:628add4:     public Collection<OrderDataBean> getOrders() {
1:628add4:         return orders;
1:628add4:     }
1:628add4: 
1:628add4:     public void setOrders(Collection<OrderDataBean> orders) {
1:628add4:         this.orders = orders;
1:628add4:     }
1:628add4:     
1:628add4:     public Collection<HoldingDataBean> getHoldings() {
1:628add4:         return holdings;
1:628add4:     }
1:628add4: 
1:628add4:     public void setHoldings(Collection<HoldingDataBean> holdings) {
1:628add4:         this.holdings = holdings;
1:628add4:     }
1:628add4: 
1:628add4:     public AccountProfileDataBean getProfile() {
1:628add4:         return profile;
1:628add4:     }
1:628add4: 
1:628add4:     public void setProfile(AccountProfileDataBean profile) {
1:628add4:         this.profile = profile;
1:628add4:     }
1:628add4: 
1:628add4:     public void login(String password) {
1:628add4:         AccountProfileDataBean profile = getProfile();
1:628add4:         if ((profile == null) || (profile.getPassword().equals(password) == false)) {
1:628add4:             String error = "AccountBean:Login failure for account: " + getAccountID() +
1:628add4:                     ((profile == null) ? "null AccountProfile" :
1:628add4:                             "\n\tIncorrect password-->" + profile.getUserID() + ":" + profile.getPassword());
1:628add4:             throw new RuntimeException(error);
1:628add4:             
1:628add4:         }
1:628add4: 
1:628add4:         setLastLogin(new Timestamp(System.currentTimeMillis()));
1:628add4:         setLoginCount(getLoginCount() + 1);
1:628add4:     }
1:628add4: 
1:628add4:     public void logout() {
1:628add4:         setLogoutCount(getLogoutCount() + 1);
1:628add4:     }
1:628add4: 
1:628add4:     @Override
1:628add4:     public int hashCode() {
1:628add4:         int hash = 0;
1:628add4:         hash += (this.accountID != null ? this.accountID.hashCode() : 0);
1:628add4:         return hash;
1:628add4:     }
1:628add4: 
1:628add4:     @Override
1:628add4:     public boolean equals(Object object) {
1:628add4:         // TODO: Warning - this method won't work in the case the id fields are not set
1:628add4:         if (!(object instanceof AccountDataBeanImpl)) {
1:628add4:             return false;
1:628add4:         }
1:628add4:         AccountDataBeanImpl other = (AccountDataBeanImpl)object;
1:628add4:         if (this.accountID != other.accountID && (this.accountID == null || !this.accountID.equals(other.accountID))) return false;
1:628add4:         return true;
1:628add4:     }
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.beans;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountProfileDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.OrderDataBean;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.beans;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.daytrader.util.Log;
0: import org.apache.aries.samples.daytrader.util.TradeConfig;
0: import org.apache.aries.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.AccountProfileDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.OrderDataBean;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.beans;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: import java.sql.Timestamp;
1: import java.util.Collection;
1: import java.util.Date;
1: 
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountProfileDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.OrderDataBean;
1: 
1: 
1: public class AccountDataBeanImpl implements AccountDataBean, Serializable {
1:     
1:     private Integer accountID;              /* accountID */
1:     
1:     
1:     private int loginCount;                 /* loginCount */
1:     
1:     
1:     private int logoutCount;                /* logoutCount */
1:     
1:     
1:     private Date lastLogin;                 /* lastLogin Date */
1:     
1:     
1:     private Date creationDate;              /* creationDate */
1:     
1:     
1:     private BigDecimal balance;             /* balance */
1:     
1:     
1:     private BigDecimal openBalance;         /* open balance */
1:     
1:     
1:     private Collection<OrderDataBean> orders;
1:     
1:     
1:     private Collection<HoldingDataBean> holdings;
1:     
1:     
1:     private AccountProfileDataBean profile;
1: 
0: //    @Version
0: //    private Integer optLock;
1: 
1:     /* Accessor methods for relationship fields are only included for the AccountProfile profileID */
1:     
1:     private String profileID;
1: 
1:     public AccountDataBeanImpl() {
1:     }
1: 
1:     public AccountDataBeanImpl(Integer accountID,
1:             int loginCount,
1:             int logoutCount,
1:             Date lastLogin,
1:             Date creationDate,
1:             BigDecimal balance,
1:             BigDecimal openBalance,
1:             String profileID) {
1:         setAccountID(accountID);
1:         setLoginCount(loginCount);
1:         setLogoutCount(logoutCount);
1:         setLastLogin(lastLogin);
1:         setCreationDate(creationDate);
1:         setBalance(balance);
1:         setOpenBalance(openBalance);
1:         setProfileID(profileID);
1:     }
1: 
1:     public AccountDataBeanImpl(int loginCount,
1:             int logoutCount,
1:             Date lastLogin,
1:             Date creationDate,
1:             BigDecimal balance,
1:             BigDecimal openBalance,
1:             String profileID) {
1:         setLoginCount(loginCount);
1:         setLogoutCount(logoutCount);
1:         setLastLogin(lastLogin);
1:         setCreationDate(creationDate);
1:         setBalance(balance);
1:         setOpenBalance(openBalance);
1:         setProfileID(profileID);
1:     }
1: 
1:     public static AccountDataBean getRandomInstance() {
1:         return new AccountDataBeanImpl(new Integer(TradeConfig.rndInt(100000)), //accountID
1:                 TradeConfig.rndInt(10000), //loginCount
1:                 TradeConfig.rndInt(10000), //logoutCount
1:                 new java.util.Date(), //lastLogin
1:                 new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), //creationDate
1:                 TradeConfig.rndBigDecimal(1000000.0f), //balance
1:                 TradeConfig.rndBigDecimal(1000000.0f), //openBalance
1:                 TradeConfig.rndUserID() //profileID
1:         );
1:     }
1: 
1:     public String toString() {
1:         return "\n\tAccount Data for account: " + getAccountID()
1:                 + "\n\t\t   loginCount:" + getLoginCount()
1:                 + "\n\t\t  logoutCount:" + getLogoutCount()
1:                 + "\n\t\t    lastLogin:" + getLastLogin()
1:                 + "\n\t\t creationDate:" + getCreationDate()
1:                 + "\n\t\t      balance:" + getBalance()
1:                 + "\n\t\t  openBalance:" + getOpenBalance()
1:                 + "\n\t\t    profileID:" + getProfileID()
1:                 ;
1:     }
1: 
1:     public String toHTML() {
1:         return "<BR>Account Data for account: <B>" + getAccountID() + "</B>"
1:                 + "<LI>   loginCount:" + getLoginCount() + "</LI>"
1:                 + "<LI>  logoutCount:" + getLogoutCount() + "</LI>"
1:                 + "<LI>    lastLogin:" + getLastLogin() + "</LI>"
1:                 + "<LI> creationDate:" + getCreationDate() + "</LI>"
1:                 + "<LI>      balance:" + getBalance() + "</LI>"
1:                 + "<LI>  openBalance:" + getOpenBalance() + "</LI>"
1:                 + "<LI>    profileID:" + getProfileID() + "</LI>"
1:                 ;
1:     }
1: 
1:     public void print() {
1:         Log.log(this.toString());
1:     }
1: 
1:     public Integer getAccountID() {
1:         return accountID;
1:     }
1: 
1:     public void setAccountID(Integer accountID) {
1:         this.accountID = accountID;
1:     }
1: 
1:     public int getLoginCount() {
1:         return loginCount;
1:     }
1: 
1:     public void setLoginCount(int loginCount) {
1:         this.loginCount = loginCount;
1:     }
1: 
1:     public int getLogoutCount() {
1:         return logoutCount;
1:     }
1: 
1:     public void setLogoutCount(int logoutCount) {
1:         this.logoutCount = logoutCount;
1:     }
1: 
1:     public Date getLastLogin() {
1:         return lastLogin;
1:     }
1: 
1:     public void setLastLogin(Date lastLogin) {
1:         this.lastLogin = lastLogin;
1:     }
1: 
1:     public Date getCreationDate() {
1:         return creationDate;
1:     }
1: 
1:     public void setCreationDate(Date creationDate) {
1:         this.creationDate = creationDate;
1:     }
1: 
1:     public BigDecimal getBalance() {
1:         return balance;
1:     }
1: 
1:     public void setBalance(BigDecimal balance) {
1:         this.balance = balance;
1:     }
1: 
1:     public BigDecimal getOpenBalance() {
1:         return openBalance;
1:     }
1: 
1:     public void setOpenBalance(BigDecimal openBalance) {
1:         this.openBalance = openBalance;
1:     }
1: 
1:     public String getProfileID() {
1:         return profileID;
1:     }
1: 
1:     public void setProfileID(String profileID) {
1:         this.profileID = profileID;
1:     }
1: 
0:     /* Disabled for D185273
0:      public String getUserID() {
0:          return getProfileID();
1:      }
1:      */
1: 
1:     public Collection<OrderDataBean> getOrders() {
1:         return orders;
1:     }
1: 
1:     public void setOrders(Collection<OrderDataBean> orders) {
1:         this.orders = orders;
1:     }
1:     
1:     public Collection<HoldingDataBean> getHoldings() {
1:         return holdings;
1:     }
1: 
1:     public void setHoldings(Collection<HoldingDataBean> holdings) {
1:         this.holdings = holdings;
1:     }
1: 
1:     public AccountProfileDataBean getProfile() {
1:         return profile;
1:     }
1: 
1:     public void setProfile(AccountProfileDataBean profile) {
1:         this.profile = profile;
1:     }
1: 
1:     public void login(String password) {
1:         AccountProfileDataBean profile = getProfile();
1:         if ((profile == null) || (profile.getPassword().equals(password) == false)) {
1:             String error = "AccountBean:Login failure for account: " + getAccountID() +
1:                     ((profile == null) ? "null AccountProfile" :
1:                             "\n\tIncorrect password-->" + profile.getUserID() + ":" + profile.getPassword());
1:             throw new RuntimeException(error);
1:             
1:         }
1: 
1:         setLastLogin(new Timestamp(System.currentTimeMillis()));
1:         setLoginCount(getLoginCount() + 1);
1:     }
1: 
1:     public void logout() {
1:         setLogoutCount(getLogoutCount() + 1);
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         int hash = 0;
1:         hash += (this.accountID != null ? this.accountID.hashCode() : 0);
1:         return hash;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object object) {
1:         // TODO: Warning - this method won't work in the case the id fields are not set
1:         if (!(object instanceof AccountDataBeanImpl)) {
1:             return false;
1:         }
1:         AccountDataBeanImpl other = (AccountDataBeanImpl)object;
1:         if (this.accountID != other.accountID && (this.accountID == null || !this.accountID.equals(other.accountID))) return false;
1:         return true;
1:     }
1: }
============================================================================