1:1c43780: /**
1:1c43780:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c43780:  * or more contributor license agreements.  See the NOTICE file
1:1c43780:  * distributed with this work for additional information
1:1c43780:  * regarding copyright ownership.  The ASF licenses this file
1:1c43780:  * to you under the Apache License, Version 2.0 (the
1:1c43780:  * "License"); you may not use this file except in compliance
1:1c43780:  * with the License.  You may obtain a copy of the License at
1:1c43780:  *
1:1c43780:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c43780:  *
1:1c43780:  * Unless required by applicable law or agreed to in writing,
1:1c43780:  * software distributed under the License is distributed on an
1:1c43780:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c43780:  * KIND, either express or implied.  See the License for the
1:1c43780:  * specific language governing permissions and limitations
1:1c43780:  * under the License.
1:1c43780:  */
1:1c43780: package org.apache.aries.spifly;
12:1c43780: 
1:1c43780: import java.util.ArrayList;
1:1c43780: import java.util.HashMap;
1:1c43780: import java.util.List;
1:1c43780: import java.util.Map;
1:1c43780: 
1:1c43780: /**
1:1c43780:  * Utility class to parse a standard OSGi header with paths.
1:1c43780:  *
1:3595044:  * Stolen from Aries Blueprint Core (blueprint.utils). Need to give it back!
1:1c43780:  */
1:1c43780: public class HeaderParser  {
1:1c43780:     private HeaderParser() {}
1:3595044: 
1:1c43780:     /**
1:1c43780:      * Parse a given OSGi header into a list of paths
1:1c43780:      *
1:1c43780:      * @param header the OSGi header to parse
1:1c43780:      * @return the list of paths extracted from this header
1:1c43780:      */
1:1c43780:     public static List<PathElement> parseHeader(String header) {
1:1c43780:         List<PathElement> elements = new ArrayList<PathElement>();
1:1c43780:         if (header == null || header.trim().length() == 0) {
1:1c43780:             return elements;
2:1c43780:         }
1:3595044:         String[] clauses = header.split(",(?![^\\(\\)]*(\\)))");
1:1c43780:         for (String clause : clauses) {
1:1c43780:             String[] tokens = clause.split(";");
1:1c43780:             if (tokens.length < 1) {
1:1c43780:                 throw new IllegalArgumentException("Invalid header clause: " + clause);
1:1c43780:             }
1:1c43780:             PathElement elem = new PathElement(tokens[0].trim());
1:1c43780:             elements.add(elem);
1:1c43780:             for (int i = 1; i < tokens.length; i++) {
1:1c43780:                 int pos = tokens[i].indexOf('=');
1:1c43780:                 if (pos != -1) {
1:1c43780:                     if (pos > 0 && tokens[i].charAt(pos - 1) == ':') {
1:1c43780:                         String name = tokens[i].substring(0, pos - 1).trim();
1:1c43780:                         String value = tokens[i].substring(pos + 1).trim();
1:1c43780:                         elem.addDirective(name, value);
1:1c43780:                     } else {
1:1c43780:                         String name = tokens[i].substring(0, pos).trim();
1:1c43780:                         String value = tokens[i].substring(pos + 1).trim();
1:1c43780:                         elem.addAttribute(name, value);
1:1c43780:                     }
1:1c43780:                 } else {
1:1c43780:                     elem = new PathElement(tokens[i].trim());
1:1c43780:                     elements.add(elem);
1:1c43780:                 }
1:1c43780:             }
1:1c43780:         }
1:1c43780:         return elements;
1:1c43780:     }
1:1c43780: 
1:1c43780:     public static class PathElement {
1:3595044: 
1:1c43780:         private String path;
1:1c43780:         private Map<String, String> attributes;
1:1c43780:         private Map<String, String> directives;
1:3595044: 
1:1c43780:         public PathElement(String path) {
1:1c43780:             this.path = path;
1:1c43780:             this.attributes = new HashMap<String, String>();
1:1c43780:             this.directives = new HashMap<String, String>();
1:1c43780:         }
1:3595044: 
1:1c43780:         public String getName() {
1:1c43780:             return this.path;
1:1c43780:         }
1:3595044: 
1:1c43780:         public Map<String, String> getAttributes() {
1:1c43780:             return attributes;
1:1c43780:         }
1:3595044: 
1:1c43780:         public String getAttribute(String name) {
1:1c43780:             return attributes.get(name);
1:1c43780:         }
1:3595044: 
1:1c43780:         public void addAttribute(String name, String value) {
1:1c43780:             attributes.put(name, value);
1:1c43780:         }
1:3595044: 
1:1c43780:         public Map<String, String> getDirectives() {
1:1c43780:             return directives;
1:1c43780:         }
1:3595044: 
1:1c43780:         public String getDirective(String name) {
1:1c43780:             return directives.get(name);
1:1c43780:         }
1:3595044: 
1:1c43780:         public void addDirective(String name, String value) {
1:1c43780:             directives.put(name, value);
1:3595044:         }
1:3595044: 
1:1c43780:     }
1:1c43780: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:3595044
/////////////////////////////////////////////////////////////////////////
1:  * Stolen from Aries Blueprint Core (blueprint.utils). Need to give it back!
1: 
/////////////////////////////////////////////////////////////////////////
1:         String[] clauses = header.split(",(?![^\\(\\)]*(\\)))");
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:         }
1: 
commit:1c43780
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * Utility class to parse a standard OSGi header with paths.
1:  *
0:  * Stolen from Aries Blueprint Core (blueprint.utils). Need to give it back! 
1:  */
1: public class HeaderParser  {
1:     private HeaderParser() {}
1:     
1:     /**
1:      * Parse a given OSGi header into a list of paths
1:      *
1:      * @param header the OSGi header to parse
1:      * @return the list of paths extracted from this header
1:      */
1:     public static List<PathElement> parseHeader(String header) {
1:         List<PathElement> elements = new ArrayList<PathElement>();
1:         if (header == null || header.trim().length() == 0) {
1:             return elements;
1:         }
0:         String[] clauses = header.split(",");
1:         for (String clause : clauses) {
1:             String[] tokens = clause.split(";");
1:             if (tokens.length < 1) {
1:                 throw new IllegalArgumentException("Invalid header clause: " + clause);
1:             }
1:             PathElement elem = new PathElement(tokens[0].trim());
1:             elements.add(elem);
1:             for (int i = 1; i < tokens.length; i++) {
1:                 int pos = tokens[i].indexOf('=');
1:                 if (pos != -1) {
1:                     if (pos > 0 && tokens[i].charAt(pos - 1) == ':') {
1:                         String name = tokens[i].substring(0, pos - 1).trim();
1:                         String value = tokens[i].substring(pos + 1).trim();
1:                         elem.addDirective(name, value);
1:                     } else {
1:                         String name = tokens[i].substring(0, pos).trim();
1:                         String value = tokens[i].substring(pos + 1).trim();
1:                         elem.addAttribute(name, value);
1:                     }
1:                 } else {
1:                     elem = new PathElement(tokens[i].trim());
1:                     elements.add(elem);
1:                 }
1:             }
1:         }
1:         return elements;
1:     }
1: 
1:     public static class PathElement {
1:         
1:         private String path;
1:         private Map<String, String> attributes;
1:         private Map<String, String> directives;
1:         
1:         public PathElement(String path) {
1:             this.path = path;
1:             this.attributes = new HashMap<String, String>();
1:             this.directives = new HashMap<String, String>();
1:         }
1:         
1:         public String getName() {
1:             return this.path;
1:         }
1:         
1:         public Map<String, String> getAttributes() {
1:             return attributes;
1:         }
1:         
1:         public String getAttribute(String name) {
1:             return attributes.get(name);
1:         }
1:         
1:         public void addAttribute(String name, String value) {
1:             attributes.put(name, value);
1:         }
1:         
1:         public Map<String, String> getDirectives() {
1:             return directives;
1:         }
1:         
1:         public String getDirective(String name) {
1:             return directives.get(name);
1:         }
1:         
1:         public void addDirective(String name, String value) {
1:             directives.put(name, value);
1:         }        
1:         
1:     }
1: }
commit:07a09cd
commit:a786feb
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.spifly;
0: 
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: 
0: /**
0:  * Utility class to parse a standard OSGi header with paths.
0:  *
0:  * Stolen from Aries Blueprint Core (blueprint.utils). Need to give it back! 
0:  */
0: public class HeaderParser  {
0: 
0:     /**
0:      * Parse a given OSGi header into a list of paths
0:      *
0:      * @param header the OSGi header to parse
0:      * @return the list of paths extracted from this header
0:      */
0:     public static List<PathElement> parseHeader(String header) {
0:         List<PathElement> elements = new ArrayList<PathElement>();
0:         if (header == null || header.trim().length() == 0) {
0:             return elements;
0:         }
0:         String[] clauses = header.split(",");
0:         for (String clause : clauses) {
0:             String[] tokens = clause.split(";");
0:             if (tokens.length < 1) {
0:                 throw new IllegalArgumentException("Invalid header clause: " + clause);
0:             }
0:             PathElement elem = new PathElement(tokens[0].trim());
0:             elements.add(elem);
0:             for (int i = 1; i < tokens.length; i++) {
0:                 int pos = tokens[i].indexOf('=');
0:                 if (pos != -1) {
0:                     if (pos > 0 && tokens[i].charAt(pos - 1) == ':') {
0:                         String name = tokens[i].substring(0, pos - 1).trim();
0:                         String value = tokens[i].substring(pos + 1).trim();
0:                         elem.addDirective(name, value);
0:                     } else {
0:                         String name = tokens[i].substring(0, pos).trim();
0:                         String value = tokens[i].substring(pos + 1).trim();
0:                         elem.addAttribute(name, value);
0:                     }
0:                 } else {
0:                     elem = new PathElement(tokens[i].trim());
0:                     elements.add(elem);
0:                 }
0:             }
0:         }
0:         return elements;
0:     }
0: 
0:     public static class PathElement {
0:         
0:         private String path;
0:         private Map<String, String> attributes;
0:         private Map<String, String> directives;
0:         
0:         public PathElement(String path) {
0:             this.path = path;
0:             this.attributes = new HashMap<String, String>();
0:             this.directives = new HashMap<String, String>();
0:         }
0:         
0:         public String getName() {
0:             return this.path;
0:         }
0:         
0:         public Map<String, String> getAttributes() {
0:             return attributes;
0:         }
0:         
0:         public String getAttribute(String name) {
0:             return attributes.get(name);
0:         }
0:         
0:         public void addAttribute(String name, String value) {
0:             attributes.put(name, value);
0:         }
0:         
0:         public Map<String, String> getDirectives() {
0:             return directives;
0:         }
0:         
0:         public String getDirective(String name) {
0:             return directives.get(name);
0:         }
0:         
0:         public void addDirective(String name, String value) {
0:             directives.put(name, value);
0:         }        
0:         
0:     }
0: }
============================================================================