1:0d78661: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:0d78661:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
2:0d78661: 
1:0d78661: import java.util.ArrayList;
1:0d78661: import java.util.Collection;
1:0d78661: 
1:0d78661: import org.apache.aries.application.modelling.ModellerException;
1:0d78661: import org.apache.aries.application.modelling.ParsedServiceElements;
1:0d78661: import org.apache.aries.application.modelling.ServiceModeller;
1:0d78661: import org.apache.aries.ejb.modelling.EJBLocator;
1:0d78661: import org.apache.aries.util.filesystem.IDirectory;
1:0d78661: import org.apache.aries.util.manifest.BundleManifest;
1:0d78661: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:0d78661: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1:0d78661: import org.slf4j.Logger;
1:0d78661: import org.slf4j.LoggerFactory;
1:0d78661: 
1:0d78661: public class EJBModeller implements ServiceModeller {
1:0d78661: 
1:0d78661:   private static final Logger logger = LoggerFactory.getLogger(EJBModeller.class);
1:0d78661:   
1:e021d37:   private EJBLocator locator;  
1:0d78661:   public void setLocator(EJBLocator locator) {
1:0d78661:     this.locator = locator;
1:0d78661:   }
1:0d78661:   
1:4134a37:   /**
1:4134a37:    * This modeller only searches for EJBs if there is an Export-EJB header with
1:f8bfaf6:    * a value other than NONE (the default empty string value means ALL exported).
1:4134a37:    */
1:0d78661:   public ParsedServiceElements modelServices(BundleManifest manifest, IDirectory bundle) 
1:0d78661:     throws ModellerException {
1:690564b:     logger.debug("modelServices", new Object[] {manifest, bundle});
1:0d78661:     ParsedEJBServices ejbServices = new ParsedEJBServices();
1:0d78661:     
1:0d78661:     String header = manifest.getRawAttributes().getValue("Export-EJB");
1:0d78661:     logger.debug("Export-EJB header is " + header);
1:f8bfaf6:     
1:0d78661:    
1:f8bfaf6:     if(header == null)
1:0d78661:       return ejbServices;
1:0d78661:     
1:f8bfaf6:     Collection<String> allowedNames = getNames(header.trim());
1:0d78661:     
1:0d78661:     if(allowedNames.contains("NONE"))
1:0d78661:       return ejbServices;
1:0d78661: 
1:0d78661:     ejbServices.setAllowedNames(allowedNames);
1:0d78661:     locator.findEJBs(manifest, bundle, ejbServices);
1:0d78661:     
1:690564b:     logger.debug("ejbServices", ejbServices);
1:0d78661:     return ejbServices;
1:0d78661:   }
1:0d78661: 
1:0d78661:   private Collection<String> getNames(String header) {
1:0d78661:     Collection<String> names = new ArrayList<String>();
1:0d78661:     for(NameValuePair nvp: ManifestHeaderProcessor.parseExportString(header)){
1:0d78661:       names.add(nvp.getName().trim());
1:0d78661:     }
1:0d78661:     return names;
1:0d78661:   }
1:0d78661: 
1:0d78661: }
============================================================================
author:Emily Jiang
-------------------------------------------------------------------------------
commit:690564b
/////////////////////////////////////////////////////////////////////////
1:     logger.debug("modelServices", new Object[] {manifest, bundle});
/////////////////////////////////////////////////////////////////////////
1:     logger.debug("ejbServices", ejbServices);
commit:3002360
/////////////////////////////////////////////////////////////////////////
0:     logger.debug("modelServices() Entry>> Manifest: " + manifest + " Bundle: " + bundle);
/////////////////////////////////////////////////////////////////////////
0:     logger.debug("modelServices() Exit<< ejbServices: " + ejbServices);
commit:e021d37
/////////////////////////////////////////////////////////////////////////
1:   private EJBLocator locator;  
/////////////////////////////////////////////////////////////////////////
0:     logger.debug("modelServices", new Object[] {manifest, bundle});
/////////////////////////////////////////////////////////////////////////
0:     logger.debug("modelServices", ejbServices);
commit:f14997d
/////////////////////////////////////////////////////////////////////////
0:   private final static String LOG_ENTRY = "Method entry: {}, args {}";
0:   private final static String LOG_EXIT = "Method exit: {}, returning {}";
/////////////////////////////////////////////////////////////////////////
0:     logger.debug(LOG_ENTRY, "modelServices", new Object[] {manifest, bundle});
/////////////////////////////////////////////////////////////////////////
0:     logger.debug(LOG_EXIT, "modelServices", ejbServices);
commit:f8bfaf6
/////////////////////////////////////////////////////////////////////////
1:    * a value other than NONE (the default empty string value means ALL exported).
0:     logger.debug("modelServices", new Object[] {manifest, bundle});
1:    
1:     if(header == null)
1:     Collection<String> allowedNames = getNames(header.trim());
/////////////////////////////////////////////////////////////////////////
0:     logger.debug("modelServices", ejbServices);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4134a37
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This modeller only searches for EJBs if there is an Export-EJB header with
0:    * a value other than NONE (which is also the default).
1:    */
commit:0d78661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: 
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.application.modelling.ParsedServiceElements;
1: import org.apache.aries.application.modelling.ServiceModeller;
1: import org.apache.aries.ejb.modelling.EJBLocator;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class EJBModeller implements ServiceModeller {
1: 
1:   private static final Logger logger = LoggerFactory.getLogger(EJBModeller.class);
1:   
0:   private EJBLocator locator;
1:   
1:   public void setLocator(EJBLocator locator) {
1:     this.locator = locator;
1:   }
1:   
1:   public ParsedServiceElements modelServices(BundleManifest manifest, IDirectory bundle) 
1:     throws ModellerException {
0:     logger.trace("modelServices", new Object[] {manifest, bundle});
1:     ParsedEJBServices ejbServices = new ParsedEJBServices();
1:     
1:     String header = manifest.getRawAttributes().getValue("Export-EJB");
1:     logger.debug("Export-EJB header is " + header);
1:     
0:     if(header == null || "".equals(header))
1:       return ejbServices;
1:     
0:     Collection<String> allowedNames = getNames(header);
1:     
1:     if(allowedNames.contains("NONE"))
1:       return ejbServices;
1: 
1:     ejbServices.setAllowedNames(allowedNames);
1:     locator.findEJBs(manifest, bundle, ejbServices);
1:     
0:     logger.trace("modelServices", ejbServices);
1:     return ejbServices;
1:   }
1: 
1:   private Collection<String> getNames(String header) {
1:     Collection<String> names = new ArrayList<String>();
1:     for(NameValuePair nvp: ManifestHeaderProcessor.parseExportString(header)){
1:       names.add(nvp.getName().trim());
1:     }
1:     return names;
1:   }
1: 
1: }
============================================================================