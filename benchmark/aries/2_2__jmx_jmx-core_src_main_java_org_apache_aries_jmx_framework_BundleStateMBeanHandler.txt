1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
8:fdf3952: 
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.OBJECTNAME;
1:fdf3952: 
1:fdf3952: import javax.management.NotCompliantMBeanException;
1:fdf3952: import javax.management.StandardMBean;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.Logger;
1:fdf3952: import org.apache.aries.jmx.MBeanHandler;
1:f5398b2: import org.apache.aries.jmx.agent.JMXAgentContext;
1:7186eab: import org.apache.aries.jmx.util.ObjectNameUtils;
1:fdf3952: import org.apache.aries.jmx.util.shared.RegistrableStandardEmitterMBean;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.jmx.framework.BundleStateMBean;
1:fdf3952: import org.osgi.service.log.LogService;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.startlevel.StartLevel;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * Implementation of <code>MBeanHandler</code> which manages the <code>BundleState</code>
1:fdf3952:  * MBean implementation
1:fdf3952:  * @see MBeanHandler
1:7186eab:  * </p>
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class BundleStateMBeanHandler implements MBeanHandler {
1:fdf3952: 
1:f5398b2:     private JMXAgentContext agentContext;
1:a0df2a3:     private StateConfig stateConfig;
1:fdf3952:     private Logger logger;
1:fdf3952:     private String name;
1:fdf3952:     private StandardMBean mbean;
1:fdf3952:     private BundleState bundleStateMBean;
1:fdf3952:     private BundleContext bundleContext;
1:fdf3952:     private ServiceReference packageAdminRef;
1:fdf3952:     private ServiceReference startLevelRef;
1:7186eab: 
1:7186eab: 
1:a0df2a3:     public BundleStateMBeanHandler(JMXAgentContext agentContext, StateConfig stateConfig) {
1:f5398b2:         this.agentContext = agentContext;
1:a0df2a3:         this.stateConfig = stateConfig;
1:f5398b2:         this.bundleContext = agentContext.getBundleContext();
1:f5398b2:         this.logger = agentContext.getLogger();
1:7186eab:         this.name = ObjectNameUtils.createFullObjectName(bundleContext, OBJECTNAME);
1:fdf3952:     }
1:7186eab: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.MBeanHandler#open()
1:fdf3952:      */
1:fdf3952:     public void open() {
1:fdf3952:         packageAdminRef = bundleContext.getServiceReference(PackageAdmin.class.getName());
1:fdf3952:         PackageAdmin packageAdmin = (PackageAdmin) bundleContext.getService(packageAdminRef);
1:fdf3952:         startLevelRef = bundleContext.getServiceReference(StartLevel.class.getName());
1:fdf3952:         StartLevel startLevel = (StartLevel) bundleContext.getService(startLevelRef);
1:a0df2a3:         bundleStateMBean = new BundleState(bundleContext, packageAdmin, startLevel, stateConfig, logger);
1:fdf3952:         try {
1:fdf3952:             mbean = new RegistrableStandardEmitterMBean(bundleStateMBean, BundleStateMBean.class);
1:fdf3952:         } catch (NotCompliantMBeanException e) {
1:fdf3952:             logger.log(LogService.LOG_ERROR, "Failed to instantiate MBean for " + BundleStateMBean.class.getName(), e);
1:fdf3952:         }
1:f5398b2:         agentContext.registerMBean(this);
1:fdf3952:     }
1:7186eab: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.MBeanHandler#getMbean()
1:fdf3952:      */
1:fdf3952:     public StandardMBean getMbean() {
1:fdf3952:        return mbean;
1:fdf3952:     }
1:7186eab: 
1:7186eab: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.MBeanHandler#getName()
1:fdf3952:      */
1:fdf3952:     public String getName() {
1:fdf3952:         return name;
1:fdf3952:     }
1:7186eab: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.MBeanHandler#close()
1:fdf3952:      */
1:fdf3952:     public void close() {
1:f5398b2:         agentContext.unregisterMBean(this);
1:fdf3952:         if (packageAdminRef != null) {
1:fdf3952:             try {
1:fdf3952:                 bundleContext.ungetService(packageAdminRef);
1:fdf3952:             } catch (RuntimeException e) {
1:fdf3952:                 logger.log(LogService.LOG_WARNING, "Exception occured during cleanup", e);
1:fdf3952:             }
1:fdf3952:             packageAdminRef = null;
1:fdf3952:         }
1:fdf3952:         if (startLevelRef != null) {
1:fdf3952:             try {
1:fdf3952:                 bundleContext.ungetService(startLevelRef);
1:fdf3952:             } catch (RuntimeException e) {
1:fdf3952:                 logger.log(LogService.LOG_WARNING, "Exception occured during cleanup", e);
1:fdf3952:             }
1:fdf3952:             startLevelRef = null;
1:fdf3952:         }
1:fdf3952:         // ensure dispatcher is shutdown even if postDeRegister is not honored
1:fdf3952:         if (bundleStateMBean != null) {
1:fdf3952:             bundleStateMBean.shutDownDispatcher();
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: 
1:fdf3952: 
1:fdf3952: 
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:a0df2a3
/////////////////////////////////////////////////////////////////////////
1:     private StateConfig stateConfig;
/////////////////////////////////////////////////////////////////////////
1:     public BundleStateMBeanHandler(JMXAgentContext agentContext, StateConfig stateConfig) {
1:         this.stateConfig = stateConfig;
/////////////////////////////////////////////////////////////////////////
1:         bundleStateMBean = new BundleState(bundleContext, packageAdmin, startLevel, stateConfig, logger);
commit:0273964
commit:7186eab
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.util.ObjectNameUtils;
/////////////////////////////////////////////////////////////////////////
1:  * </p>
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         this.name = ObjectNameUtils.createFullObjectName(bundleContext, OBJECTNAME);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import static org.osgi.jmx.framework.BundleStateMBean.OBJECTNAME;
1: 
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.StandardMBean;
1: 
1: import org.apache.aries.jmx.Logger;
1: import org.apache.aries.jmx.MBeanHandler;
1: import org.apache.aries.jmx.util.shared.RegistrableStandardEmitterMBean;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.jmx.framework.BundleStateMBean;
1: import org.osgi.service.log.LogService;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.startlevel.StartLevel;
1: 
1: /**
1:  * <p>
1:  * Implementation of <code>MBeanHandler</code> which manages the <code>BundleState</code>
1:  * MBean implementation
1:  * @see MBeanHandler
0:  * </p> 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class BundleStateMBeanHandler implements MBeanHandler {
1: 
1:     private Logger logger;
1:     private String name;
1:     private StandardMBean mbean;
1:     private BundleState bundleStateMBean;
1:     private BundleContext bundleContext;
1:     private ServiceReference packageAdminRef;
1:     private ServiceReference startLevelRef;
1:     
1:     
0:     public BundleStateMBeanHandler(BundleContext bundleContext, Logger logger) {
0:         this.bundleContext = bundleContext;
0:         this.logger = logger;
0:         this.name = OBJECTNAME;
1:     }
1:     
1:     /**
1:      * @see org.apache.aries.jmx.MBeanHandler#open()
1:      */
1:     public void open() {
1:         packageAdminRef = bundleContext.getServiceReference(PackageAdmin.class.getName());
1:         PackageAdmin packageAdmin = (PackageAdmin) bundleContext.getService(packageAdminRef);
1:         startLevelRef = bundleContext.getServiceReference(StartLevel.class.getName());
1:         StartLevel startLevel = (StartLevel) bundleContext.getService(startLevelRef);
0:         bundleStateMBean = new BundleState(bundleContext, packageAdmin, startLevel, logger);
1:         try {
1:             mbean = new RegistrableStandardEmitterMBean(bundleStateMBean, BundleStateMBean.class);
1:         } catch (NotCompliantMBeanException e) {
1:             logger.log(LogService.LOG_ERROR, "Failed to instantiate MBean for " + BundleStateMBean.class.getName(), e);
1:         }
1:     }
1:     
1:     /**
1:      * @see org.apache.aries.jmx.MBeanHandler#getMbean()
1:      */
1:     public StandardMBean getMbean() {
1:        return mbean;
1:     }
1:     
1: 
1:     /**
1:      * @see org.apache.aries.jmx.MBeanHandler#getName()
1:      */
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     /**
1:      * @see org.apache.aries.jmx.MBeanHandler#close()
1:      */
1:     public void close() {
1:         if (packageAdminRef != null) {
1:             try {
1:                 bundleContext.ungetService(packageAdminRef);
1:             } catch (RuntimeException e) {
1:                 logger.log(LogService.LOG_WARNING, "Exception occured during cleanup", e);
1:             }
1:             packageAdminRef = null;
1:         }
1:         if (startLevelRef != null) {
1:             try {
1:                 bundleContext.ungetService(startLevelRef);
1:             } catch (RuntimeException e) {
1:                 logger.log(LogService.LOG_WARNING, "Exception occured during cleanup", e);
1:             }
1:             startLevelRef = null;
1:         }
1:         // ensure dispatcher is shutdown even if postDeRegister is not honored
1:         if (bundleStateMBean != null) {
1:             bundleStateMBean.shutDownDispatcher();
1:         }
1:     }
1: 
1:    
1: 
1:    
1: 
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.agent.JMXAgentContext;
/////////////////////////////////////////////////////////////////////////
1:     private JMXAgentContext agentContext;
/////////////////////////////////////////////////////////////////////////
0:     public BundleStateMBeanHandler(JMXAgentContext agentContext) {
1:         this.agentContext = agentContext;
1:         this.bundleContext = agentContext.getBundleContext();
1:         this.logger = agentContext.getLogger();
/////////////////////////////////////////////////////////////////////////
1:         agentContext.registerMBean(this);
/////////////////////////////////////////////////////////////////////////
1:         agentContext.unregisterMBean(this);
============================================================================