1:8f852b6: /*
1:8f852b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:8f852b6:  * or more contributor license agreements.  See the NOTICE file
1:8f852b6:  * distributed with this work for additional information
1:8f852b6:  * regarding copyright ownership.  The ASF licenses this file
1:8f852b6:  * to you under the Apache License, Version 2.0 (the
1:8f852b6:  * "License"); you may not use this file except in compliance
1:8f852b6:  * with the License.  You may obtain a copy of the License at
1:8f852b6:  *
1:8f852b6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8f852b6:  *
1:8f852b6:  * Unless required by applicable law or agreed to in writing,
1:8f852b6:  * software distributed under the License is distributed on an
1:8f852b6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8f852b6:  * KIND, either express or implied.  See the License for the
1:8f852b6:  * specific language governing permissions and limitations
1:8f852b6:  * under the License.
1:8f852b6:  */
1:8f852b6: package org.apache.aries.blueprint.proxy;
3:8f852b6: 
1:8f852b6: import static org.junit.Assert.assertEquals;
1:8f852b6: import static org.junit.Assert.assertFalse;
1:8f852b6: import static org.junit.Assert.assertTrue;
1:8f852b6: 
1:8f852b6: import java.lang.reflect.Constructor;
1:8f852b6: import java.lang.reflect.Method;
1:8f852b6: import java.lang.reflect.Modifier;
1:8f852b6: import java.util.ArrayList;
1:8f852b6: import java.util.Arrays;
1:8f852b6: import java.util.Collections;
1:8f852b6: import java.util.HashMap;
1:8f852b6: import java.util.Iterator;
1:8f852b6: import java.util.List;
1:8f852b6: import java.util.Map;
1:8f852b6: import java.util.concurrent.Callable;
1:8f852b6: 
1:8f852b6: import org.apache.aries.proxy.FinalModifierException;
1:8f852b6: import org.apache.aries.proxy.InvocationListener;
1:8f852b6: import org.apache.aries.proxy.UnableToProxyException;
1:8f852b6: import org.apache.aries.proxy.impl.SingleInstanceDispatcher;
1:8f852b6: import org.apache.aries.proxy.impl.gen.ProxySubclassGenerator;
1:8f852b6: import org.apache.aries.proxy.impl.gen.ProxySubclassMethodHashSet;
1:8f852b6: import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
1:8f852b6: import org.apache.aries.proxy.weaving.WovenProxy;
1:8f852b6: import org.apache.aries.unittest.mocks.MethodCall;
1:8f852b6: import org.apache.aries.unittest.mocks.Skeleton;
1:8f852b6: import org.apache.aries.util.ClassLoaderProxy;
1:8f852b6: import org.junit.Before;
1:8f852b6: import org.junit.BeforeClass;
1:8f852b6: import org.junit.Test;
1:8f852b6: import org.osgi.framework.Bundle;
1:760dac8: import org.osgi.framework.wiring.BundleWiring;
1:8f852b6: 
1:8f852b6: /**
1:8f852b6:  * This class uses the {@link ProxySubclassGenerator} to test
1:8f852b6:  */
1:8f852b6: public class WovenProxyPlusSubclassGeneratorTest extends WovenProxyGeneratorTest
1:8f852b6: {
1:8f852b6:   private static final Class<?> FINAL_METHOD_CLASS = ProxyTestClassFinalMethod.class;
1:8f852b6:   private static final Class<?> FINAL_CLASS = ProxyTestClassFinal.class;
1:8f852b6:   private static final Class<?> GENERIC_CLASS = ProxyTestClassGeneric.class;
1:8f852b6:   private static final Class<?> COVARIANT_CLASS = ProxyTestClassCovariantOverride.class;
1:8f852b6:   private static ProxySubclassMethodHashSet<String> expectedMethods = new ProxySubclassMethodHashSet<String>(
1:8f852b6:       12);
1:8f852b6:   private Callable<Object> testCallable = null;
1:8f852b6:   
1:8f852b6:   private static Bundle testBundle;
1:760dac8:   private static BundleWiring testBundleWiring;
1:760dac8: 
1:8f852b6:   @BeforeClass
1:8f852b6:   public static void createTestBundle() {
1:8f852b6: 	  testBundle = (Bundle) Skeleton.newMock(new Class<?>[] {Bundle.class, ClassLoaderProxy.class});
1:760dac8: 	  testBundleWiring = (BundleWiring) Skeleton.newMock(BundleWiring.class);
1:760dac8: 
1:8f852b6: 	    Skeleton.getSkeleton(testBundle).setReturnValue(new MethodCall(
1:8f852b6: 	        ClassLoaderProxy.class, "getClassLoader"), weavingLoader);
1:760dac8: 	    Skeleton.getSkeleton(testBundle).setReturnValue(new MethodCall(
1:760dac8: 	        ClassLoaderProxy.class, "adapt", BundleWiring.class), testBundleWiring);
1:8f852b6:   }
1:8f852b6: 
1:8f852b6:   //Avoid running four weaving tests that don't apply to us
1:8f852b6:   public void testUnweavableSuperWithNoNoargsAllTheWay() {}
1:8f852b6:   public void testUnweavableSuperWithFinalMethod() {}
1:8f852b6:   public void testUnweavableSuperWithDefaultMethodInWrongPackage() {}
1:8f852b6:   public void testInnerWithNoParentNoArgs() {}
1:8f852b6:   
1:8f852b6:   
1:8f852b6:   @Test(expected=NoSuchFieldException.class)
1:8f852b6:   public void testGeneratedSVUIDisSynthetic() throws Exception {
1:8f852b6:     super.testGeneratedSVUIDisSynthetic();
1:8f852b6:   }
1:8f852b6:   
1:8f852b6:   
1:8f852b6: //
1:8f852b6: //  /**
1:8f852b6: //   * Test that the methods found declared on the generated proxy subclass are
1:8f852b6: //   * the ones that we expect.
1:8f852b6: //   */
1:8f852b6: //  @Test
1:8f852b6: //  public void testExpectedMethods() throws Exception
1:8f852b6: //  {
1:8f852b6: //    Class<?> superclass = getTestClass();
1:8f852b6: //
1:8f852b6: //    do {
1:8f852b6: //      Method[] declaredMethods = superclass.getDeclaredMethods();
1:8f852b6: //      List<Method> listOfDeclaredMethods = new ArrayList<Method>();
1:8f852b6: //      for (Method m : declaredMethods) {
1:8f852b6: //    	
1:8f852b6: //        if(m.getName().equals("clone") || m.getName().equals("finalize"))
1:8f852b6: //        	continue;
1:8f852b6: //    	
1:8f852b6: //        int i = m.getModifiers();
1:8f852b6: //        if (Modifier.isPrivate(i) || Modifier.isFinal(i)) {
1:8f852b6: //          // private or final don't get added
1:8f852b6: //        } else if (!(Modifier.isPublic(i) || Modifier.isPrivate(i) || Modifier.isProtected(i))) {
1:8f852b6: //          // the method is default visibility, check the package
1:8f852b6: //          if (m.getDeclaringClass().getPackage().equals(getTestClass().getPackage())) {
1:8f852b6: //            // default vis with same package gets added
1:8f852b6: //            listOfDeclaredMethods.add(m);
1:8f852b6: //          }
1:8f852b6: //        } else {
1:8f852b6: //          listOfDeclaredMethods.add(m);
1:8f852b6: //        }
1:8f852b6: //      }
1:8f852b6: //
1:8f852b6: //      declaredMethods = listOfDeclaredMethods.toArray(new Method[] {});
1:8f852b6: //      ProxySubclassMethodHashSet<String> foundMethods = new ProxySubclassMethodHashSet<String>(
1:8f852b6: //          declaredMethods.length);
1:8f852b6: //      foundMethods.addMethodArray(declaredMethods);
1:8f852b6: //      // as we are using a set we shouldn't get duplicates
1:8f852b6: //      expectedMethods.addAll(foundMethods);
1:8f852b6: //      superclass = superclass.getSuperclass();
1:8f852b6: //    } while (superclass != null);
1:8f852b6: //
1:8f852b6: //    
1:8f852b6: //    
1:8f852b6: //    Method[] subclassMethods = getProxyClass(getTestClass()).getDeclaredMethods();
1:8f852b6: //    List<Method> listOfDeclaredMethods = new ArrayList<Method>();
1:8f852b6: //    for (Method m : subclassMethods) {
1:8f852b6: //      if(m.getName().startsWith(WovenProxy.class.getName().replace('.', '_')))
1:8f852b6: //        continue;
1:8f852b6: //      
1:8f852b6: //      listOfDeclaredMethods.add(m);
1:8f852b6: //    }
1:8f852b6: //    subclassMethods = listOfDeclaredMethods.toArray(new Method[] {});
1:8f852b6: //    
1:8f852b6: //    ProxySubclassMethodHashSet<String> generatedMethods = new ProxySubclassMethodHashSet<String>(
1:8f852b6: //    		subclassMethods.length);
1:8f852b6: //        generatedMethods.addMethodArray(subclassMethods);
1:8f852b6: //        
1:8f852b6: //    // check that all the methods we have generated were expected
1:8f852b6: //    for (String gen : generatedMethods) {
1:8f852b6: //      assertTrue("Unexpected method: " + gen, expectedMethods.contains(gen));
1:8f852b6: //    }
1:8f852b6: //    // check that all the expected methods were generated
1:8f852b6: //    for (String exp : expectedMethods) {
1:8f852b6: //      assertTrue("Method was not generated: " + exp, generatedMethods.contains(exp));
1:8f852b6: //    }
1:8f852b6: //    // check the sets were the same
1:8f852b6: //    assertEquals("Sets were not the same", expectedMethods, generatedMethods);
1:8f852b6: //
1:8f852b6: //  }
1:8f852b6: //
1:8f852b6:   
1:8f852b6:   
1:8f852b6:   /**
1:8f852b6:    * Test a covariant override method
1:8f852b6:    */
1:8f852b6:   @Test
1:8f852b6:   public void testCovariant() throws Exception
1:8f852b6:   {
1:8f852b6:     Class<?> proxy = getProxyClass(ProxyTestClassCovariantOverride.class);
1:8f852b6:     
1:8f852b6:     Method m = getDeclaredMethod(ProxyTestClassCovariantOverride.class, "getCovariant", new Class[] {});
1:8f852b6:     Object returned = m.invoke(getProxyInstance(proxy));
1:8f852b6:     assertTrue("Object was of wrong type: " + returned.getClass().getSimpleName(),
1:8f852b6:         proxy.getSuperclass().isInstance(returned));
1:8f852b6:   }
1:8f852b6:   
1:8f852b6:   /**
1:8f852b6:    * Test a method marked final
1:8f852b6:    */
1:8f852b6:   @Test
1:8f852b6:   public void testFinalMethod() throws Exception
1:8f852b6:   {
1:8f852b6:     try {
1:8f852b6:       InterfaceProxyGenerator.getProxyInstance(null, FINAL_METHOD_CLASS, Collections.EMPTY_SET, 
1:8f852b6:           new Callable<Object>() {
1:8f852b6:         public Object call() throws Exception {
1:8f852b6:           return null;
1:8f852b6:         }} , null).getClass();
1:8f852b6:     } catch (RuntimeException re) {
1:8f852b6:       FinalModifierException e = (FinalModifierException) re.getCause();
1:8f852b6:       assertFalse("Should have found final method not final class", e.isFinalClass());
1:8f852b6:     }
1:8f852b6:   }
1:8f852b6: 
1:8f852b6:   /**
1:8f852b6:    * Test a class marked final
1:8f852b6:    */
1:8f852b6:   @Test
1:8f852b6:   public void testFinalClass() throws Exception
1:8f852b6:   {
1:8f852b6:     try {
1:8f852b6:       InterfaceProxyGenerator.getProxyInstance(null, FINAL_CLASS, Collections.EMPTY_SET, 
1:8f852b6:           new Callable() {
1:8f852b6:         public Object call() throws Exception {
1:8f852b6:           return null;
1:8f852b6:         }} , null).getClass();
1:8f852b6:     } catch (FinalModifierException e) {
1:8f852b6:       assertTrue("Should have found final class", e.isFinalClass());
1:8f852b6:     }
1:8f852b6:   }
1:8f852b6: 
1:8f852b6: 
1:8f852b6:   
1:8f852b6:   @Test
1:8f852b6:   public void testAddingInterfacesToClass() throws Exception {
1:8f852b6:     Object proxy = InterfaceProxyGenerator.getProxyInstance(testBundle, super.getProxyClass(getTestClass()), Arrays.asList(Map.class, Iterable.class), new Callable<Object>() {
1:8f852b6: 
1:8f852b6:         int calls = 0;
1:8f852b6:         private Map<String, String> map = new HashMap<String, String>();
1:8f852b6:         
1:8f852b6:         {
1:8f852b6:           map.put("key", "value");
1:8f852b6:         }
1:8f852b6: 
1:8f852b6:         public Object call() throws Exception {
1:8f852b6:           switch(++calls) {
1:8f852b6:             case 1 :
1:8f852b6:               return WovenProxyPlusSubclassGeneratorTest.super.getProxyInstance(weavingLoader.loadClass(getTestClass().getName()));
1:8f852b6:             case 2 :
1:8f852b6:               return map;
1:8f852b6:             default :
1:8f852b6:               return map.values();
1:8f852b6:           }
1:8f852b6: 		}
1:8f852b6:     	
1:8f852b6:     }, null);
1:8f852b6:     
1:8f852b6:     Method m = weavingLoader.loadClass(ProxyTestClassGeneral.class.getName()).getDeclaredMethod("testReturnInt");
1:8f852b6:     m.setAccessible(true);
1:8f852b6:     assertEquals(17, m.invoke(proxy));
1:8f852b6:     assertEquals("value", ((Map<String, String>)proxy).put("key", "value2"));
1:8f852b6:     Iterator<?> it = ((Iterable<?>)proxy).iterator();
1:8f852b6:     assertEquals("value2", it.next());
1:8f852b6:     assertFalse(it.hasNext());
1:8f852b6: 	  
1:8f852b6:   }
1:8f852b6:   
1:8f852b6:   
1:8f852b6:   
1:8f852b6:   
1:8f852b6:   @Override
1:8f852b6:   protected Method getDeclaredMethod(Class<?> testClass, String name,
1:8f852b6: 		Class<?>... classes) {
1:8f852b6: 
1:8f852b6: 	  Class<?> proxy = getProxyClass(testClass);
1:8f852b6: 	  
1:8f852b6: 	  while(proxy != null) {
1:8f852b6: 	    try {
1:8f852b6: 			return proxy.getDeclaredMethod(name, classes);
1:8f852b6: 		} catch (Exception e) {
1:8f852b6: 			proxy = proxy.getSuperclass();
1:8f852b6: 		}
1:8f852b6: 	  }
1:8f852b6: 	  return null;
1:8f852b6:   }
1:8f852b6: 
1:8f852b6:   @Override
1:8f852b6:   protected Object getProxyInstance(Class<?> proxyClass) {
1:8f852b6: 	 
1:8f852b6:     if(proxyClass == ProxyTestClassChildOfAbstract.class) {
1:8f852b6:     	return super.getProxyInstance(super.getProxyClass(proxyClass));
1:8f852b6:     }
1:8f852b6: 	  
1:8f852b6:     try {
1:8f852b6:       Constructor<?> con = proxyClass.getDeclaredConstructor(Callable.class, InvocationListener.class);
1:8f852b6:       con.setAccessible(true);
1:8f852b6:       return con.newInstance((testCallable == null) ? new SingleInstanceDispatcher(super.getProxyInstance(proxyClass.getSuperclass())) : testCallable, null);
1:8f852b6:     } catch (Exception e) {
1:8f852b6:       return null;
1:8f852b6:     }
1:8f852b6:   }
1:8f852b6: 
1:8f852b6:   @Override
1:8f852b6:   protected Class<?> getProxyClass(Class<?> clazz) {
1:8f852b6:     try {
1:8f852b6:       return InterfaceProxyGenerator.getProxyInstance(testBundle, super.getProxyClass(clazz), Collections.EMPTY_SET, 
1:8f852b6:           new Callable<Object>() {
1:8f852b6:         public Object call() throws Exception {
1:8f852b6:           return null;
1:8f852b6:         }} , null).getClass();
1:8f852b6:     } catch (UnableToProxyException e) {
1:8f852b6:       return null;
1:8f852b6:     } catch (RuntimeException re) {
1:8f852b6:       if(re.getCause() instanceof UnableToProxyException)
1:8f852b6:         return null;
1:8f852b6:       else
1:8f852b6:         throw re;
1:8f852b6:     }
1:8f852b6:   }
1:8f852b6: 
1:8f852b6:   @Override
1:8f852b6:   protected Object getProxyInstance(Class<?> proxyClass,
1:8f852b6:       InvocationListener listener) {
1:8f852b6:     WovenProxy proxy = (WovenProxy) getProxyInstance(proxyClass);
1:8f852b6:     proxy = proxy.org_apache_aries_proxy_weaving_WovenProxy_createNewProxyInstance(
1:8f852b6:         new SingleInstanceDispatcher(proxy), listener);
1:8f852b6:     return proxy;
1:8f852b6:   }
1:8f852b6: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:760dac8
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
1:   private static BundleWiring testBundleWiring;
1: 
1: 	  testBundleWiring = (BundleWiring) Skeleton.newMock(BundleWiring.class);
1: 
1: 	    Skeleton.getSkeleton(testBundle).setReturnValue(new MethodCall(
1: 	        ClassLoaderProxy.class, "adapt", BundleWiring.class), testBundleWiring);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.proxy;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Modifier;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.aries.proxy.FinalModifierException;
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.apache.aries.proxy.impl.SingleInstanceDispatcher;
1: import org.apache.aries.proxy.impl.gen.ProxySubclassGenerator;
1: import org.apache.aries.proxy.impl.gen.ProxySubclassMethodHashSet;
1: import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
1: import org.apache.aries.proxy.weaving.WovenProxy;
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.apache.aries.util.ClassLoaderProxy;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: 
1: /**
1:  * This class uses the {@link ProxySubclassGenerator} to test
1:  */
1: public class WovenProxyPlusSubclassGeneratorTest extends WovenProxyGeneratorTest
1: {
1:   private static final Class<?> FINAL_METHOD_CLASS = ProxyTestClassFinalMethod.class;
1:   private static final Class<?> FINAL_CLASS = ProxyTestClassFinal.class;
1:   private static final Class<?> GENERIC_CLASS = ProxyTestClassGeneric.class;
1:   private static final Class<?> COVARIANT_CLASS = ProxyTestClassCovariantOverride.class;
1:   private static ProxySubclassMethodHashSet<String> expectedMethods = new ProxySubclassMethodHashSet<String>(
1:       12);
1:   private Callable<Object> testCallable = null;
1:   
1:   private static Bundle testBundle;
1:   
1:   @BeforeClass
1:   public static void createTestBundle() {
1: 	  testBundle = (Bundle) Skeleton.newMock(new Class<?>[] {Bundle.class, ClassLoaderProxy.class});
1: 	    
1: 	    Skeleton.getSkeleton(testBundle).setReturnValue(new MethodCall(
1: 	        ClassLoaderProxy.class, "getClassLoader"), weavingLoader);
1:   }
1: 
1:   //Avoid running four weaving tests that don't apply to us
1:   public void testUnweavableSuperWithNoNoargsAllTheWay() {}
1:   public void testUnweavableSuperWithFinalMethod() {}
1:   public void testUnweavableSuperWithDefaultMethodInWrongPackage() {}
1:   public void testInnerWithNoParentNoArgs() {}
1:   
1:   
1:   @Test(expected=NoSuchFieldException.class)
1:   public void testGeneratedSVUIDisSynthetic() throws Exception {
1:     super.testGeneratedSVUIDisSynthetic();
1:   }
1:   
1:   
1: //
1: //  /**
1: //   * Test that the methods found declared on the generated proxy subclass are
1: //   * the ones that we expect.
1: //   */
1: //  @Test
1: //  public void testExpectedMethods() throws Exception
1: //  {
1: //    Class<?> superclass = getTestClass();
1: //
1: //    do {
1: //      Method[] declaredMethods = superclass.getDeclaredMethods();
1: //      List<Method> listOfDeclaredMethods = new ArrayList<Method>();
1: //      for (Method m : declaredMethods) {
1: //    	
1: //        if(m.getName().equals("clone") || m.getName().equals("finalize"))
1: //        	continue;
1: //    	
1: //        int i = m.getModifiers();
1: //        if (Modifier.isPrivate(i) || Modifier.isFinal(i)) {
1: //          // private or final don't get added
1: //        } else if (!(Modifier.isPublic(i) || Modifier.isPrivate(i) || Modifier.isProtected(i))) {
1: //          // the method is default visibility, check the package
1: //          if (m.getDeclaringClass().getPackage().equals(getTestClass().getPackage())) {
1: //            // default vis with same package gets added
1: //            listOfDeclaredMethods.add(m);
1: //          }
1: //        } else {
1: //          listOfDeclaredMethods.add(m);
1: //        }
1: //      }
1: //
1: //      declaredMethods = listOfDeclaredMethods.toArray(new Method[] {});
1: //      ProxySubclassMethodHashSet<String> foundMethods = new ProxySubclassMethodHashSet<String>(
1: //          declaredMethods.length);
1: //      foundMethods.addMethodArray(declaredMethods);
1: //      // as we are using a set we shouldn't get duplicates
1: //      expectedMethods.addAll(foundMethods);
1: //      superclass = superclass.getSuperclass();
1: //    } while (superclass != null);
1: //
1: //    
1: //    
1: //    Method[] subclassMethods = getProxyClass(getTestClass()).getDeclaredMethods();
1: //    List<Method> listOfDeclaredMethods = new ArrayList<Method>();
1: //    for (Method m : subclassMethods) {
1: //      if(m.getName().startsWith(WovenProxy.class.getName().replace('.', '_')))
1: //        continue;
1: //      
1: //      listOfDeclaredMethods.add(m);
1: //    }
1: //    subclassMethods = listOfDeclaredMethods.toArray(new Method[] {});
1: //    
1: //    ProxySubclassMethodHashSet<String> generatedMethods = new ProxySubclassMethodHashSet<String>(
1: //    		subclassMethods.length);
1: //        generatedMethods.addMethodArray(subclassMethods);
1: //        
1: //    // check that all the methods we have generated were expected
1: //    for (String gen : generatedMethods) {
1: //      assertTrue("Unexpected method: " + gen, expectedMethods.contains(gen));
1: //    }
1: //    // check that all the expected methods were generated
1: //    for (String exp : expectedMethods) {
1: //      assertTrue("Method was not generated: " + exp, generatedMethods.contains(exp));
1: //    }
1: //    // check the sets were the same
1: //    assertEquals("Sets were not the same", expectedMethods, generatedMethods);
1: //
1: //  }
1: //
1:   
1:   
1:   /**
1:    * Test a covariant override method
1:    */
1:   @Test
1:   public void testCovariant() throws Exception
1:   {
1:     Class<?> proxy = getProxyClass(ProxyTestClassCovariantOverride.class);
1:     
1:     Method m = getDeclaredMethod(ProxyTestClassCovariantOverride.class, "getCovariant", new Class[] {});
1:     Object returned = m.invoke(getProxyInstance(proxy));
1:     assertTrue("Object was of wrong type: " + returned.getClass().getSimpleName(),
1:         proxy.getSuperclass().isInstance(returned));
1:   }
1:   
1:   /**
1:    * Test a method marked final
1:    */
1:   @Test
1:   public void testFinalMethod() throws Exception
1:   {
1:     try {
1:       InterfaceProxyGenerator.getProxyInstance(null, FINAL_METHOD_CLASS, Collections.EMPTY_SET, 
1:           new Callable<Object>() {
1:         public Object call() throws Exception {
1:           return null;
1:         }} , null).getClass();
1:     } catch (RuntimeException re) {
1:       FinalModifierException e = (FinalModifierException) re.getCause();
1:       assertFalse("Should have found final method not final class", e.isFinalClass());
1:     }
1:   }
1: 
1:   /**
1:    * Test a class marked final
1:    */
1:   @Test
1:   public void testFinalClass() throws Exception
1:   {
1:     try {
1:       InterfaceProxyGenerator.getProxyInstance(null, FINAL_CLASS, Collections.EMPTY_SET, 
1:           new Callable() {
1:         public Object call() throws Exception {
1:           return null;
1:         }} , null).getClass();
1:     } catch (FinalModifierException e) {
1:       assertTrue("Should have found final class", e.isFinalClass());
1:     }
1:   }
1: 
1: 
1:   
1:   @Test
1:   public void testAddingInterfacesToClass() throws Exception {
1:     Object proxy = InterfaceProxyGenerator.getProxyInstance(testBundle, super.getProxyClass(getTestClass()), Arrays.asList(Map.class, Iterable.class), new Callable<Object>() {
1: 
1:         int calls = 0;
1:         private Map<String, String> map = new HashMap<String, String>();
1:         
1:         {
1:           map.put("key", "value");
1:         }
1: 
1:         public Object call() throws Exception {
1:           switch(++calls) {
1:             case 1 :
1:               return WovenProxyPlusSubclassGeneratorTest.super.getProxyInstance(weavingLoader.loadClass(getTestClass().getName()));
1:             case 2 :
1:               return map;
1:             default :
1:               return map.values();
1:           }
1: 		}
1:     	
1:     }, null);
1:     
1:     Method m = weavingLoader.loadClass(ProxyTestClassGeneral.class.getName()).getDeclaredMethod("testReturnInt");
1:     m.setAccessible(true);
1:     assertEquals(17, m.invoke(proxy));
1:     assertEquals("value", ((Map<String, String>)proxy).put("key", "value2"));
1:     Iterator<?> it = ((Iterable<?>)proxy).iterator();
1:     assertEquals("value2", it.next());
1:     assertFalse(it.hasNext());
1: 	  
1:   }
1:   
1:   
1:   
1:   
1:   @Override
1:   protected Method getDeclaredMethod(Class<?> testClass, String name,
1: 		Class<?>... classes) {
1: 
1: 	  Class<?> proxy = getProxyClass(testClass);
1: 	  
1: 	  while(proxy != null) {
1: 	    try {
1: 			return proxy.getDeclaredMethod(name, classes);
1: 		} catch (Exception e) {
1: 			proxy = proxy.getSuperclass();
1: 		}
1: 	  }
1: 	  return null;
1:   }
1: 
1:   @Override
1:   protected Object getProxyInstance(Class<?> proxyClass) {
1: 	 
1:     if(proxyClass == ProxyTestClassChildOfAbstract.class) {
1:     	return super.getProxyInstance(super.getProxyClass(proxyClass));
1:     }
1: 	  
1:     try {
1:       Constructor<?> con = proxyClass.getDeclaredConstructor(Callable.class, InvocationListener.class);
1:       con.setAccessible(true);
1:       return con.newInstance((testCallable == null) ? new SingleInstanceDispatcher(super.getProxyInstance(proxyClass.getSuperclass())) : testCallable, null);
1:     } catch (Exception e) {
1:       return null;
1:     }
1:   }
1: 
1:   @Override
1:   protected Class<?> getProxyClass(Class<?> clazz) {
1:     try {
1:       return InterfaceProxyGenerator.getProxyInstance(testBundle, super.getProxyClass(clazz), Collections.EMPTY_SET, 
1:           new Callable<Object>() {
1:         public Object call() throws Exception {
1:           return null;
1:         }} , null).getClass();
1:     } catch (UnableToProxyException e) {
1:       return null;
1:     } catch (RuntimeException re) {
1:       if(re.getCause() instanceof UnableToProxyException)
1:         return null;
1:       else
1:         throw re;
1:     }
1:   }
1: 
1:   @Override
1:   protected Object getProxyInstance(Class<?> proxyClass,
1:       InvocationListener listener) {
1:     WovenProxy proxy = (WovenProxy) getProxyInstance(proxyClass);
1:     proxy = proxy.org_apache_aries_proxy_weaving_WovenProxy_createNewProxyInstance(
1:         new SingleInstanceDispatcher(proxy), listener);
1:     return proxy;
1:   }
1: }
============================================================================