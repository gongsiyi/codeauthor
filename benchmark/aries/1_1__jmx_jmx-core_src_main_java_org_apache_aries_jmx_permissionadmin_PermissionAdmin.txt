1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.permissionadmin;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.service.permissionadmin.PermissionAdminMBean;
1:fdf3952: import org.osgi.service.permissionadmin.PermissionInfo;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>PermissionAdmin</tt> represents implementation of PermissionAdminMBean.
1:fdf3952:  * </p>
1:fdf3952:  * @see PermissionAdminMBean
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PermissionAdmin implements PermissionAdminMBean {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * {@link org.osgi.service.permissionadmin.PermissionAdmin} service.
1:fdf3952:      */
1:fdf3952:     private org.osgi.service.permissionadmin.PermissionAdmin permAdmin;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new PermissionAdmin MBean. 
1:fdf3952:      * 
1:fdf3952:      * @param permAdmin {@link org.osgi.service.permissionadmin.PermissionAdmin} service reference.
1:fdf3952:      */
1:fdf3952:     public PermissionAdmin(org.osgi.service.permissionadmin.PermissionAdmin permAdmin) {
1:fdf3952:         this.permAdmin = permAdmin;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#getPermissions(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getPermissions(String location) throws IOException {
1:fdf3952:         if (location == null) {
1:fdf3952:             throw new IOException("Location cannot be null");
1:fdf3952:         }
1:fdf3952:         PermissionInfo[] permissions = permAdmin.getPermissions(location);
1:fdf3952:         if (permissions != null) {
1:fdf3952:             String[] encoded = new String[permissions.length];
1:fdf3952:             for (int i = 0; i < permissions.length; i++) {
1:fdf3952:                 PermissionInfo info = permissions[i];
1:fdf3952:                 encoded[i] = info.getEncoded();
1:fdf3952:             }
1:fdf3952:             return encoded;
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#listDefaultPermissions()
1:fdf3952:      */
1:fdf3952:     public String[] listDefaultPermissions() throws IOException {
1:fdf3952:         PermissionInfo[] permissions = permAdmin.getDefaultPermissions();
1:fdf3952:         if (permissions != null) {
1:fdf3952:             String[] encoded = new String[permissions.length];
1:fdf3952:             for (int i = 0; i < permissions.length; i++) {
1:fdf3952:                 PermissionInfo info = permissions[i];
1:fdf3952:                 encoded[i] = info.getEncoded();
1:fdf3952:             }
1:fdf3952:             return encoded;
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#listLocations()
1:fdf3952:      */
1:fdf3952:     public String[] listLocations() throws IOException {
1:fdf3952:         return permAdmin.getLocations();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#setDefaultPermissions(java.lang.String[])
1:fdf3952:      */
1:fdf3952:     public void setDefaultPermissions(String[] encodedPermissions) throws IOException {
1:fdf3952:         PermissionInfo[] permissions = toPermissionInfo(encodedPermissions);
1:fdf3952:         permAdmin.setDefaultPermissions(permissions);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#setPermissions(java.lang.String,
1:fdf3952:      *      java.lang.String[])
1:fdf3952:      */
1:fdf3952:     public void setPermissions(String location, String[] encodedPermissions) throws IOException {
1:fdf3952:         if (location == null) {
1:fdf3952:             throw new IOException("Location cannot be null");
1:fdf3952:         }
1:fdf3952:         PermissionInfo[] permissions = toPermissionInfo(encodedPermissions);
1:fdf3952:         permAdmin.setPermissions(location, permissions);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private static PermissionInfo[] toPermissionInfo(String[] encodedPermissions) throws IOException {
1:fdf3952:         if (encodedPermissions == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         PermissionInfo[] permissions = new PermissionInfo[encodedPermissions.length];
1:fdf3952:         for (int i = 0; i < encodedPermissions.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 permissions[i] = new PermissionInfo(encodedPermissions[i]);
1:fdf3952:             } catch (Exception e) {
1:fdf3952:                 IOException ex = new IOException("Invalid encoded permission: " + encodedPermissions[i]);
1:fdf3952:                 ex.initCause(e);
1:fdf3952:                 throw ex;
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return permissions;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.permissionadmin;
1: 
1: import java.io.IOException;
1: 
1: import org.osgi.jmx.service.permissionadmin.PermissionAdminMBean;
1: import org.osgi.service.permissionadmin.PermissionInfo;
1: 
1: /**
1:  * <p>
1:  * <tt>PermissionAdmin</tt> represents implementation of PermissionAdminMBean.
1:  * </p>
1:  * @see PermissionAdminMBean
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class PermissionAdmin implements PermissionAdminMBean {
1: 
1:     /**
1:      * {@link org.osgi.service.permissionadmin.PermissionAdmin} service.
1:      */
1:     private org.osgi.service.permissionadmin.PermissionAdmin permAdmin;
1: 
1:     /**
1:      * Constructs new PermissionAdmin MBean. 
1:      * 
1:      * @param permAdmin {@link org.osgi.service.permissionadmin.PermissionAdmin} service reference.
1:      */
1:     public PermissionAdmin(org.osgi.service.permissionadmin.PermissionAdmin permAdmin) {
1:         this.permAdmin = permAdmin;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#getPermissions(java.lang.String)
1:      */
1:     public String[] getPermissions(String location) throws IOException {
1:         if (location == null) {
1:             throw new IOException("Location cannot be null");
1:         }
1:         PermissionInfo[] permissions = permAdmin.getPermissions(location);
1:         if (permissions != null) {
1:             String[] encoded = new String[permissions.length];
1:             for (int i = 0; i < permissions.length; i++) {
1:                 PermissionInfo info = permissions[i];
1:                 encoded[i] = info.getEncoded();
1:             }
1:             return encoded;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#listDefaultPermissions()
1:      */
1:     public String[] listDefaultPermissions() throws IOException {
1:         PermissionInfo[] permissions = permAdmin.getDefaultPermissions();
1:         if (permissions != null) {
1:             String[] encoded = new String[permissions.length];
1:             for (int i = 0; i < permissions.length; i++) {
1:                 PermissionInfo info = permissions[i];
1:                 encoded[i] = info.getEncoded();
1:             }
1:             return encoded;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#listLocations()
1:      */
1:     public String[] listLocations() throws IOException {
1:         return permAdmin.getLocations();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#setDefaultPermissions(java.lang.String[])
1:      */
1:     public void setDefaultPermissions(String[] encodedPermissions) throws IOException {
1:         PermissionInfo[] permissions = toPermissionInfo(encodedPermissions);
1:         permAdmin.setDefaultPermissions(permissions);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.permissionadmin.PermissionAdminMBean#setPermissions(java.lang.String,
1:      *      java.lang.String[])
1:      */
1:     public void setPermissions(String location, String[] encodedPermissions) throws IOException {
1:         if (location == null) {
1:             throw new IOException("Location cannot be null");
1:         }
1:         PermissionInfo[] permissions = toPermissionInfo(encodedPermissions);
1:         permAdmin.setPermissions(location, permissions);
1:     }
1: 
1:     private static PermissionInfo[] toPermissionInfo(String[] encodedPermissions) throws IOException {
1:         if (encodedPermissions == null) {
1:             return null;
1:         }
1:         PermissionInfo[] permissions = new PermissionInfo[encodedPermissions.length];
1:         for (int i = 0; i < encodedPermissions.length; i++) {
1:             try {
1:                 permissions[i] = new PermissionInfo(encodedPermissions[i]);
1:             } catch (Exception e) {
1:                 IOException ex = new IOException("Invalid encoded permission: " + encodedPermissions[i]);
1:                 ex.initCause(e);
1:                 throw ex;
1:             }
1:         }
1:         return permissions;
1:     }
1: }
============================================================================