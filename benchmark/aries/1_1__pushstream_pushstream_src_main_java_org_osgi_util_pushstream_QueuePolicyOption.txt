1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * {@link QueuePolicyOption} provides a standard set of simple
1:7fa86e8:  * {@link QueuePolicy} implementations.
1:7fa86e8:  * 
1:7fa86e8:  * @see QueuePolicy
1:7fa86e8:  */
1:7fa86e8: public enum QueuePolicyOption {
1:7fa86e8: 	/**
1:7fa86e8: 	 * Attempt to add the supplied event to the queue. If the queue is unable to
1:7fa86e8: 	 * immediately accept the value then discard the value at the head of the
1:7fa86e8: 	 * queue and try again. Repeat this process until the event is enqueued.
1:7fa86e8: 	 */
1:7fa86e8: 	DISCARD_OLDEST {
1:7fa86e8: 		@Override
1:7fa86e8: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy() {
1:7fa86e8: 			return (queue, event) -> {
1:7fa86e8: 				while (!queue.offer(event)) {
1:7fa86e8: 					queue.poll();
1:7fa86e8: 				}
1:7fa86e8: 			};
1:7fa86e8: 		}
1:7fa86e8: 	},
1:7fa86e8: 	/**
1:7fa86e8: 	 * Attempt to add the supplied event to the queue, blocking until the
1:7fa86e8: 	 * enqueue is successful.
1:7fa86e8: 	 */
1:7fa86e8: 	BLOCK {
1:7fa86e8: 		@Override
1:7fa86e8: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy() {
1:7fa86e8: 			return (queue, event) -> {
1:7fa86e8: 				try {
1:7fa86e8: 					queue.put(event);
1:7fa86e8: 				} catch (InterruptedException e) {
1:7fa86e8: 					// TODO Auto-generated catch block
1:7fa86e8: 					e.printStackTrace();
1:7fa86e8: 				}
1:7fa86e8: 			};
1:7fa86e8: 		}
1:7fa86e8: 	},
1:7fa86e8: 	/**
1:7fa86e8: 	 * Attempt to add the supplied event to the queue, throwing an exception if
1:7fa86e8: 	 * the queue is full.
1:7fa86e8: 	 */
1:7fa86e8: 	FAIL {
1:7fa86e8: 		@Override
1:7fa86e8: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy() {
1:7fa86e8: 			return (queue, event) -> queue.add(event);
1:7fa86e8: 		}
1:7fa86e8: 	};
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * @return a {@link QueuePolicy} implementation
1:7fa86e8: 	 */
1:7fa86e8: 	public abstract <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy();
1:7fa86e8: 
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.util.pushstream;
1: 
1: import java.util.concurrent.BlockingQueue;
1: 
1: /**
1:  * {@link QueuePolicyOption} provides a standard set of simple
1:  * {@link QueuePolicy} implementations.
1:  * 
1:  * @see QueuePolicy
1:  */
1: public enum QueuePolicyOption {
1: 	/**
1: 	 * Attempt to add the supplied event to the queue. If the queue is unable to
1: 	 * immediately accept the value then discard the value at the head of the
1: 	 * queue and try again. Repeat this process until the event is enqueued.
1: 	 */
1: 	DISCARD_OLDEST {
1: 		@Override
1: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy() {
1: 			return (queue, event) -> {
1: 				while (!queue.offer(event)) {
1: 					queue.poll();
1: 				}
1: 			};
1: 		}
1: 	},
1: 	/**
1: 	 * Attempt to add the supplied event to the queue, blocking until the
1: 	 * enqueue is successful.
1: 	 */
1: 	BLOCK {
1: 		@Override
1: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy() {
1: 			return (queue, event) -> {
1: 				try {
1: 					queue.put(event);
1: 				} catch (InterruptedException e) {
1: 					// TODO Auto-generated catch block
1: 					e.printStackTrace();
1: 				}
1: 			};
1: 		}
1: 	},
1: 	/**
1: 	 * Attempt to add the supplied event to the queue, throwing an exception if
1: 	 * the queue is full.
1: 	 */
1: 	FAIL {
1: 		@Override
1: 		public <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy() {
1: 			return (queue, event) -> queue.add(event);
1: 		}
1: 	};
1: 
1: 	/**
1: 	 * @return a {@link QueuePolicy} implementation
1: 	 */
1: 	public abstract <T, U extends BlockingQueue<PushEvent<? extends T>>> QueuePolicy<T, U> getPolicy();
1: 
1: }
============================================================================