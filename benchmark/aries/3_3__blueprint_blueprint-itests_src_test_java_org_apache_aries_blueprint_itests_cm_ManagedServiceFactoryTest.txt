1:fc74a12: /**
1:fc74a12:  * Licensed to the Apache Software Foundation (ASF) under one
1:fc74a12:  * or more contributor license agreements.  See the NOTICE file
1:fc74a12:  * distributed with this work for additional information
1:fc74a12:  * regarding copyright ownership.  The ASF licenses this file
1:fc74a12:  * to you under the Apache License, Version 2.0 (the
1:fc74a12:  * "License"); you may not use this file except in compliance
1:fc74a12:  * with the License.  You may obtain a copy of the License at
1:fc74a12:  *
1:fc74a12:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fc74a12:  *
1:fc74a12:  * Unless required by applicable law or agreed to in writing,
1:fc74a12:  * software distributed under the License is distributed on an
1:fc74a12:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fc74a12:  * KIND, either express or implied.  See the License for the
1:fc74a12:  * specific language governing permissions and limitations
1:fc74a12:  * under the License.
1:fc74a12:  */
1:eab22c1: package org.apache.aries.blueprint.itests.cm;
4:bb2cca8: 
1:fc74a12: import static org.junit.Assert.assertEquals;
1:fc74a12: import static org.junit.Assert.assertNotNull;
1:fc74a12: import static org.junit.Assert.assertNull;
1:48189a5: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1:48189a5: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:bb2cca8: 
1:eab22c1: import java.io.InputStream;
1:eab22c1: import java.util.Hashtable;
1:bb2cca8: 
1:eab22c1: import javax.inject.Inject;
1:eab22c1: 
1:eab22c1: import org.apache.aries.blueprint.itests.AbstractBlueprintIntegrationTest;
1:eab22c1: import org.apache.aries.blueprint.itests.Helper;
1:eab22c1: import org.apache.aries.blueprint.itests.cm.service.Foo;
1:eab22c1: import org.apache.aries.blueprint.itests.cm.service.FooFactory;
1:eab22c1: import org.apache.aries.blueprint.itests.cm.service.FooInterface;
1:eab22c1: import org.junit.Test;
1:eab22c1: import org.ops4j.pax.exam.Option;
1:eab22c1: import org.ops4j.pax.exam.ProbeBuilder;
1:eab22c1: import org.ops4j.pax.exam.TestProbeBuilder;
1:eab22c1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:eab22c1: import org.osgi.framework.Constants;
1:eab22c1: import org.osgi.framework.InvalidSyntaxException;
1:eab22c1: import org.osgi.framework.ServiceReference;
1:eab22c1: import org.osgi.service.cm.Configuration;
1:eab22c1: import org.osgi.service.cm.ConfigurationAdmin;
1:eab22c1: 
1:eab22c1: public class ManagedServiceFactoryTest extends AbstractBlueprintIntegrationTest {
1:48189a5:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.cm.test.b1";
1:48189a5: 
1:2e39b46:     @Inject
1:2e39b46:     ConfigurationAdmin ca;
1:2e39b46: 
1:2e39b46:     @ProbeBuilder
1:2e39b46:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:2e39b46:         probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
1:2e39b46:         probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
1:2e39b46:         return probe;
1:2e39b46:     }
1:eab22c1: 
1:eab22c1:     @org.ops4j.pax.exam.Configuration
1:eab22c1:     public Option[] config() {
1:2e39b46:         return new Option[] {
1:48189a5:             baseOptions(), 
1:48189a5:             Helper.blueprintBundles(), 
1:48189a5:             keepCaches(),
1:48189a5:             streamBundle(testBundle())
1:2e39b46:         };
1:eab22c1:     }
1:eab22c1: 
1:48189a5:     protected InputStream testBundle() {
1:48189a5:         return TinyBundles.bundle() //
1:48189a5:             .add(FooInterface.class) //
1:48189a5:             .add(Foo.class) //
1:48189a5:             .add(FooFactory.class) //
1:48189a5:             .add("OSGI-INF/blueprint/context.xml", getResource("ManagedServiceFactoryTest.xml"))
1:48189a5:             .set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE) //
1:48189a5:             .set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName()) //
1:48189a5:             .set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName()) //
1:48189a5:             .build(TinyBundles.withBnd());
1:48189a5:     }
1:48189a5: 
1:1a2aa53:     @Test
1:fc74a12:     public void test1() throws Exception {
1:fc74a12:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory", null);
1:2e39b46:         Hashtable<String, String> props = new Hashtable<String, String>();
1:1a2aa53:         props.put("a", "5");
1:1a2aa53:         cf.update(props);
1:2e39b46: 
1:2e39b46:         @SuppressWarnings("rawtypes")
1:2e39b46:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo1)");
1:eab22c1:         Foo foo = (Foo)context().getService(sr);
1:bb2cca8:         assertNotNull(foo);
1:bb2cca8:         assertEquals(5, foo.getA());
1:406b7d6:         assertEquals("default", foo.getB());
2:bb2cca8:         assertEquals("5", sr.getProperty("a"));
1:406b7d6:         assertNull(sr.getProperty("b"));
1:eab22c1: 
1:2e39b46:         props = new Hashtable<String, String>();
1:406b7d6:         props.put("a", "5");
1:bb2cca8:         props.put("b", "foo");
1:406b7d6:         cf.update(props);
3:fc74a12:         Thread.sleep(500);
1:eab22c1: 
1:1a2aa53:         // No update of bean after creation
1:bb2cca8:         assertEquals(5, foo.getA());
1:bb2cca8:         assertEquals("default", foo.getB());
1:eab22c1: 
1:1a2aa53:         // Only initial update of service properties
1:bb2cca8:         assertEquals("5", sr.getProperty("a"));
1:bb2cca8:         assertNull(sr.getProperty("b"));
1:eab22c1:     }
1:eab22c1: 
1:2e39b46:     @Test
1:fc74a12:     public void test2() throws Exception {
1:fc74a12:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory2", null);
1:2e39b46:         Hashtable<String, String> props = new Hashtable<String, String>();
1:bb2cca8:         props.put("a", "5");
1:bb2cca8:         cf.update(props);
1:eab22c1: 
1:eab22c1:         @SuppressWarnings("rawtypes")
1:2e39b46:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo2)");
1:2e39b46:         Foo foo = (Foo)context().getService(sr);
1:bb2cca8:         assertNotNull(foo);
6:fc74a12:         assertEquals(5, foo.getA());
1:bb2cca8:         assertEquals("default", foo.getB());
1:fc74a12:         assertNull(sr.getProperty("a"));
1:bb2cca8:         assertNull(sr.getProperty("b"));
1:eab22c1: 
1:2e39b46:         props = new Hashtable<String, String>();
1:e9215e0:         props.put("a", "5");
3:fc74a12:         props.put("b", "foo");
6:fc74a12:         cf.update(props);
1:406b7d6: 
2:fc74a12:         // Update after creation
1:bb2cca8:         Thread.sleep(500);
1:bb2cca8:         assertEquals(5, foo.getA());
2:fc74a12:         assertEquals("foo", foo.getB());
1:406b7d6: 
1:fc74a12:         // No update of service properties
1:fc74a12:         assertNull(sr.getProperty("a"));
5:fc74a12:         assertNull(sr.getProperty("b"));
1:eab22c1:     }
1:406b7d6: 
1:eab22c1:     @Test
1:fc74a12:     public void test3() throws Exception {
1:bb2cca8:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
1:2e39b46:         Hashtable<String, String> props = new Hashtable<String, String>();
1:bb2cca8:         props.put("a", "5");
1:bb2cca8:         cf.update(props);
1:bb2cca8: 
1:eab22c1:         @SuppressWarnings("rawtypes")
1:2e39b46:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
1:1a2aa53:         assertNotNull(sr);
1:2e39b46:         Foo foo = (Foo)context().getService(sr);
1:1a2aa53:         assertNotNull(foo);
1:406b7d6:         assertEquals(5, foo.getA());
1:1a2aa53:         assertEquals("default", foo.getB());
1:406b7d6:         assertEquals("5", sr.getProperty("a"));
1:1a2aa53:         assertNull(sr.getProperty("b"));
1:bb2cca8: 
1:2e39b46:         props = new Hashtable<String, String>();
1:406b7d6:         props.put("a", "5");
1:406b7d6:         props.put("b", "foo");
1:406b7d6:         cf.update(props);
1:bb2cca8: 
1:bb2cca8:         // Update after creation
1:406b7d6:         Thread.sleep(500);
1:406b7d6:         assertEquals(5, foo.getA());
1:bb2cca8:         assertEquals("foo", foo.getB());
1:bb2cca8: 
1:bb2cca8:         // Update of service properties
1:406b7d6:         assertEquals("5", sr.getProperty("a"));
1:bb2cca8:         assertEquals("foo", sr.getProperty("b"));
1:eab22c1:         cf.delete();
1:406b7d6:     }
1:bb2cca8: 
1:eab22c1:     @SuppressWarnings("rawtypes")
1:eab22c1:     @Test
1:bb2cca8:     public void testCreateAndUpdate() throws Exception {
1:bb2cca8:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
1:2e39b46:         Hashtable<String, String> props = new Hashtable<String, String>();
1:bb2cca8:         props.put("a", "5");
1:bb2cca8:         cf.update(props);
1:bb2cca8: 
2:bb2cca8:         Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
1:2e39b46:         Hashtable<String, String> props2 = new Hashtable<String, String>();
1:406b7d6:         props2.put("a", "7");
1:406b7d6:         cf2.update(props2);
1:bb2cca8: 
1:eab22c1:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
1:eab22c1:         ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo3)(a=7))");
1:bb2cca8: 
1:2e39b46:         Foo foo = (Foo)context().getService(sr);
1:406b7d6:         assertNotNull(foo);
1:2e39b46:         assertEquals(5, foo.getA());
1:1a2aa53:         assertEquals("default", foo.getB());
1:2e39b46:         assertEquals("5", sr.getProperty("a"));
1:1a2aa53:         assertNull(sr.getProperty("b"));
1:bb2cca8: 
1:2e39b46:         Foo foo2 = (Foo)context().getService(sr2);
1:406b7d6:         assertNotNull(foo2);
1:2e39b46:         assertEquals(7, foo2.getA());
1:406b7d6:         assertEquals("default", foo2.getB());
1:406b7d6:         assertEquals("7", sr2.getProperty("a"));
1:406b7d6:         assertNull(sr2.getProperty("b"));
1:406b7d6: 
1:2e39b46:         props = new Hashtable<String, String>();
1:1a2aa53:         props.put("a", "5");
1:1a2aa53:         props.put("b", "foo");
1:1a2aa53:         cf.update(props);
1:406b7d6: 
1:2e39b46:         props2 = new Hashtable<String, String>();
1:406b7d6:         props2.put("a", "7");
1:406b7d6:         props2.put("b", "foo2");
1:406b7d6:         cf2.update(props2);
1:406b7d6: 
1:406b7d6:         // Update after creation
1:1a2aa53:         Thread.sleep(500);
1:1a2aa53:         assertEquals(5, foo.getA());
1:406b7d6:         assertEquals("foo", foo.getB());
1:406b7d6: 
1:406b7d6:         // Update of service properties
1:1a2aa53:         assertEquals("5", sr.getProperty("a"));
1:406b7d6:         assertEquals("foo", sr.getProperty("b"));
1:406b7d6: 
1:406b7d6:         // 2a Update after creation
1:406b7d6:         assertEquals(7, foo2.getA());
1:406b7d6:         assertEquals("foo2", foo2.getB());
1:406b7d6: 
1:406b7d6:         // 2b Update of service properties
1:406b7d6:         assertEquals("7", sr2.getProperty("a"));
1:406b7d6:         assertEquals("foo2", sr2.getProperty("b"));
1:eab22c1:         cf.delete();
1:eab22c1:         cf2.delete();
1:1a2aa53:     }
1:1a2aa53: 
1:2e39b46:     @SuppressWarnings("rawtypes")
1:2e39b46:     @Test
1:2e39b46:     public void testCreateAndUpdateUsingUpdateMethod() throws Exception {
1:2e39b46:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
1:2e39b46:         Hashtable<String, String> props = new Hashtable<String, String>();
1:2e39b46:         props.put("a", "5");
1:2e39b46:         cf.update(props);
1:1a2aa53: 
1:2e39b46:         Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
1:2e39b46:         Hashtable<String, String> props2 = new Hashtable<String, String>();
1:2e39b46:         props2.put("a", "7");
1:2e39b46:         cf2.update(props2);
1:1a2aa53: 
1:2e39b46:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo4)(a=5))");
1:2e39b46:         ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo4)(a=7))");
1:2e39b46: 
1:2e39b46:         Foo foo = (Foo)context().getService(sr);
1:2e39b46:         assertNotNull(foo);
1:2e39b46:         assertEquals(5, foo.getA());
1:2e39b46:         assertEquals("default", foo.getB());
1:2e39b46:         assertEquals("5", sr.getProperty("a"));
1:2e39b46:         assertNull(sr.getProperty("b"));
1:2e39b46: 
1:2e39b46:         Foo foo2 = (Foo)context().getService(sr2);
1:2e39b46:         assertNotNull(foo2);
1:2e39b46:         assertEquals(7, foo2.getA());
1:2e39b46:         assertEquals("default", foo2.getB());
1:2e39b46:         assertEquals("7", sr2.getProperty("a"));
1:2e39b46:         assertNull(sr2.getProperty("b"));
1:1a2aa53: 
1:2e39b46:         props = new Hashtable<String, String>();
1:2e39b46:         props.put("a", "5");
1:2e39b46:         props.put("b", "foo");
1:2e39b46:         cf.update(props);
1:406b7d6: 
1:2e39b46:         props2 = new Hashtable<String, String>();
1:2e39b46:         props2.put("a", "7");
1:2e39b46:         props2.put("b", "foo2");
1:2e39b46:         cf2.update(props2);
1:406b7d6: 
1:2e39b46:         // Update after creation
1:2e39b46:         Thread.sleep(500);
1:2e39b46:         assertEquals(5, foo.getA());
1:2e39b46:         assertEquals("foo", foo.getB());
1:406b7d6: 
1:2e39b46:         // Update of service properties
1:1a2aa53:         assertEquals("5", sr.getProperty("a"));
1:2e39b46:         assertEquals("foo", sr.getProperty("b"));
1:406b7d6: 
1:2e39b46:         // 2a Update after creation
1:406b7d6:         assertEquals(7, foo2.getA());
1:2e39b46:         assertEquals("foo2", foo2.getB());
1:bb2cca8: 
1:2e39b46:         // 2b Update of service properties
1:2e39b46:         assertEquals("7", sr2.getProperty("a"));
1:2e39b46:         assertEquals("foo2", sr2.getProperty("b"));
1:2e39b46:     }
1:bb2cca8: 
1:2e39b46:     @Test
1:2e39b46:     public void testFactoryCreation() throws Exception {
1:2e39b46:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory5", null);
1:2e39b46:         Hashtable<String, String> props = new Hashtable<String, String>();
1:2e39b46:         props.put("a", "5");
1:2e39b46:         cf.update(props);
1:2e39b46: 
1:2e39b46:         @SuppressWarnings("rawtypes")
1:2e39b46:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo5)");
1:2e39b46:         Foo foo = (Foo)context().getService(sr);
1:2e39b46:         assertNotNull(foo);
1:2e39b46:         assertEquals(5, foo.getA());
1:2e39b46:         assertEquals("default", foo.getB());
1:2e39b46:         assertEquals("5", sr.getProperty("a"));
1:2e39b46:         assertNull(sr.getProperty("b"));
1:2e39b46: 
1:2e39b46:         props = new Hashtable<String, String>();
1:2e39b46:         props.put("a", "5");
1:2e39b46:         props.put("b", "foo");
1:2e39b46:         cf.update(props);
1:2e39b46:         Thread.sleep(500);
1:2e39b46: 
1:2e39b46:         // No update of bean after creation
1:1a2aa53:         assertEquals(5, foo.getA());
1:2e39b46:         assertEquals("default", foo.getB());
1:1a2aa53: 
1:2e39b46:         // Only initial update of service properties
1:2e39b46:         assertEquals("5", sr.getProperty("a"));
1:2e39b46:         assertNull(sr.getProperty("b"));
1:2e39b46:     }
1:bb2cca8: 
1:eab22c1:     @SuppressWarnings("rawtypes")
1:2e39b46:     private ServiceReference getServiceRef(Class serviceInterface, String filter)
1:2e39b46:         throws InvalidSyntaxException {
1:2e39b46:         int tries = 0;
1:2e39b46:         do {
1:2e39b46:             ServiceReference[] srAr = bundleContext.getServiceReferences(serviceInterface.getName(), filter);
1:2e39b46:             if (srAr != null && srAr.length > 0) {
1:2e39b46:                 return (ServiceReference)srAr[0];
1:2e39b46:             }
1:2e39b46:             tries++;
1:2e39b46:             try {
1:2e39b46:                 Thread.sleep(100);
1:2e39b46:             } catch (InterruptedException e) {
1:2e39b46:                 // Ignore
1:2e39b46:             }
1:2e39b46:         } while (tries < 100);
1:2e39b46:         throw new RuntimeException("Could not find service " + serviceInterface.getName() + ", " + filter);
1:2e39b46:     }
1:eab22c1: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:48189a5
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.keepCaches;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String TEST_BUNDLE = "org.apache.aries.blueprint.cm.test.b1";
1: 
/////////////////////////////////////////////////////////////////////////
1:             baseOptions(), 
1:             Helper.blueprintBundles(), 
1:             keepCaches(),
1:             streamBundle(testBundle())
1:     protected InputStream testBundle() {
1:         return TinyBundles.bundle() //
1:             .add(FooInterface.class) //
1:             .add(Foo.class) //
1:             .add(FooFactory.class) //
1:             .add("OSGI-INF/blueprint/context.xml", getResource("ManagedServiceFactoryTest.xml"))
1:             .set(Constants.BUNDLE_SYMBOLICNAME, TEST_BUNDLE) //
1:             .set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName()) //
1:             .set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName()) //
1:             .build(TinyBundles.withBnd());
1:     }
1: 
commit:2e39b46
/////////////////////////////////////////////////////////////////////////
1:     @Inject
1:     ConfigurationAdmin ca;
1: 
1:     @ProbeBuilder
1:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:         probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
1:         probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
1:         return probe;
1:     }
0:         InputStream testBundle = TinyBundles.bundle().add(FooInterface.class).add(Foo.class)
0:             .add(FooFactory.class)
0:             .add("OSGI-INF/blueprint/context.xml", getResource("ManagedServiceFactoryTest.xml"))
0:             .set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName())
0:             .set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName()).build(TinyBundles.withBnd());
1:         return new Option[] {
0:             baseOptions(), Helper.blueprintBundles(), CoreOptions.keepCaches(),
0:             CoreOptions.streamBundle(testBundle)
1:         };
1:         Hashtable<String, String> props = new Hashtable<String, String>();
1: 
1:         @SuppressWarnings("rawtypes")
1:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo1)");
/////////////////////////////////////////////////////////////////////////
1:         props = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
1:         Hashtable<String, String> props = new Hashtable<String, String>();
1:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo2)");
1:         Foo foo = (Foo)context().getService(sr);
1:         props = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
1:         Hashtable<String, String> props = new Hashtable<String, String>();
1:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
1:         Foo foo = (Foo)context().getService(sr);
1:         props = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:         Hashtable<String, String> props = new Hashtable<String, String>();
1:         Hashtable<String, String> props2 = new Hashtable<String, String>();
1:         Foo foo = (Foo)context().getService(sr);
1:         Foo foo2 = (Foo)context().getService(sr2);
1:         props = new Hashtable<String, String>();
1:         props2 = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:     @Test
1:     public void testCreateAndUpdateUsingUpdateMethod() throws Exception {
1:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
1:         Hashtable<String, String> props = new Hashtable<String, String>();
1:         props.put("a", "5");
1:         cf.update(props);
1:         Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
1:         Hashtable<String, String> props2 = new Hashtable<String, String>();
1:         props2.put("a", "7");
1:         cf2.update(props2);
1:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo4)(a=5))");
1:         ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo4)(a=7))");
1:         Foo foo = (Foo)context().getService(sr);
1:         assertNotNull(foo);
1:         assertEquals(5, foo.getA());
1:         assertEquals("default", foo.getB());
1:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
1:         Foo foo2 = (Foo)context().getService(sr2);
1:         assertNotNull(foo2);
1:         assertEquals(7, foo2.getA());
1:         assertEquals("default", foo2.getB());
1:         assertEquals("7", sr2.getProperty("a"));
1:         assertNull(sr2.getProperty("b"));
1:         props = new Hashtable<String, String>();
1:         props.put("a", "5");
1:         props.put("b", "foo");
1:         cf.update(props);
1:         props2 = new Hashtable<String, String>();
1:         props2.put("a", "7");
1:         props2.put("b", "foo2");
1:         cf2.update(props2);
1:         // Update after creation
1:         Thread.sleep(500);
1:         assertEquals(5, foo.getA());
1:         assertEquals("foo", foo.getB());
1:         // Update of service properties
1:         assertEquals("5", sr.getProperty("a"));
1:         assertEquals("foo", sr.getProperty("b"));
1:         // 2a Update after creation
1:         assertEquals(7, foo2.getA());
1:         assertEquals("foo2", foo2.getB());
1:         // 2b Update of service properties
1:         assertEquals("7", sr2.getProperty("a"));
1:         assertEquals("foo2", sr2.getProperty("b"));
1:     }
1: 
1:     @Test
1:     public void testFactoryCreation() throws Exception {
1:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory5", null);
1:         Hashtable<String, String> props = new Hashtable<String, String>();
1:         props.put("a", "5");
1:         cf.update(props);
1: 
1:         @SuppressWarnings("rawtypes")
1:         ServiceReference sr = getServiceRef(Foo.class, "(key=foo5)");
1:         Foo foo = (Foo)context().getService(sr);
1:         assertNotNull(foo);
1:         assertEquals(5, foo.getA());
1:         assertEquals("default", foo.getB());
1:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
1: 
1:         props = new Hashtable<String, String>();
1:         props.put("a", "5");
1:         props.put("b", "foo");
1:         cf.update(props);
1:         Thread.sleep(500);
1: 
1:         // No update of bean after creation
1:         assertEquals(5, foo.getA());
1:         assertEquals("default", foo.getB());
1: 
1:         // Only initial update of service properties
1:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
1:     }
1:     private ServiceReference getServiceRef(Class serviceInterface, String filter)
1:         throws InvalidSyntaxException {
1:         int tries = 0;
1:         do {
1:             ServiceReference[] srAr = bundleContext.getServiceReferences(serviceInterface.getName(), filter);
1:             if (srAr != null && srAr.length > 0) {
1:                 return (ServiceReference)srAr[0];
1:             }
1:             tries++;
1:             try {
1:                 Thread.sleep(100);
1:             } catch (InterruptedException e) {
1:                 // Ignore
1:             }
1:         } while (tries < 100);
1:         throw new RuntimeException("Could not find service " + serviceInterface.getName() + ", " + filter);
1:     }
commit:eab22c1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.itests.cm;
1: import java.io.InputStream;
1: import java.util.Hashtable;
1: import javax.inject.Inject;
1: 
1: import org.apache.aries.blueprint.itests.AbstractBlueprintIntegrationTest;
1: import org.apache.aries.blueprint.itests.Helper;
1: import org.apache.aries.blueprint.itests.cm.service.Foo;
1: import org.apache.aries.blueprint.itests.cm.service.FooFactory;
1: import org.apache.aries.blueprint.itests.cm.service.FooInterface;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.ProbeBuilder;
1: import org.ops4j.pax.exam.TestProbeBuilder;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: 
1: public class ManagedServiceFactoryTest extends AbstractBlueprintIntegrationTest {
0: 	@Inject
0: 	ConfigurationAdmin ca;
1: 	
0: 	@ProbeBuilder
0: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
0: 		probe.setHeader(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName());
0:     	probe.setHeader(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName());
0: 		return probe;
1: 	}
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] config() {
0:     	InputStream testBundle = TinyBundles.bundle()
0:     		.add(FooInterface.class)
0:     		.add(Foo.class)
0:     		.add(FooFactory.class)
0:     		.add("OSGI-INF/blueprint/context.xml", 
0:     				getResource("ManagedServiceFactoryTest.xml"))
0:     		.set(Constants.EXPORT_PACKAGE, Foo.class.getPackage().getName())
0:     		.set(Constants.IMPORT_PACKAGE, Foo.class.getPackage().getName())
0:     		.build(TinyBundles.withBnd());
0:     	return new Option[] {
0:     			baseOptions(),
0:     			Helper.blueprintBundles(),
0:     			CoreOptions.keepCaches(),
0:     			CoreOptions.streamBundle(testBundle)
0:     	};
1:     
1: 
1:         
1: 		@SuppressWarnings("rawtypes")
0: 		ServiceReference sr = getServiceRef(Foo.class, "(key=foo1)");
1:         Foo foo = (Foo)context().getService(sr);
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("rawtypes")
0: 		ServiceReference sr = getServiceRef(Foo.class, "(key=foo2)");
0: 		Foo foo = (Foo)context().getService(sr);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         @SuppressWarnings("rawtypes")
1: 		ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
0:         Foo foo = (Foo) context().getService(sr);
/////////////////////////////////////////////////////////////////////////
1:         cf.delete();
1:     @SuppressWarnings("rawtypes")
1: 	@Test
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo3)(a=5))");
1:         ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo3)(a=7))");
0:         Foo foo = (Foo) context().getService(sr);
0:         Foo foo2 = (Foo) context().getService(sr2);
/////////////////////////////////////////////////////////////////////////
1:         cf.delete();
1:         cf2.delete();
0:   @SuppressWarnings("rawtypes")
1: @Test
/////////////////////////////////////////////////////////////////////////
0:     ServiceReference sr = getServiceRef(Foo.class, "(&(key=foo4)(a=5))");
0:     ServiceReference sr2 = getServiceRef(Foo.class, "(&(key=foo4)(a=7))");
0:     Foo foo = (Foo) context().getService(sr);
0:     Foo foo2 = (Foo) context().getService(sr2);
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("rawtypes")
0: 	ServiceReference sr = getServiceRef(Foo.class, "(key=foo5)");
0:     Foo foo = (Foo) context().getService(sr);
/////////////////////////////////////////////////////////////////////////
1:   
0: 	@SuppressWarnings("rawtypes")
0: 	private ServiceReference getServiceRef(Class serviceInterface, String filter) throws InvalidSyntaxException {
0: 		int tries = 0;
0: 		do {
0: 			 ServiceReference[] srAr = bundleContext.getServiceReferences(serviceInterface.getName(), filter);
0: 			 if (srAr != null && srAr.length > 0) {
0: 				 return (ServiceReference) srAr[0];
1: 			 }
0: 			 tries ++;
0: 			 try {
0: 				Thread.sleep(100);
0: 			} catch (InterruptedException e) {
0: 				// Ignore
1: 			}
0: 		}  while (tries < 100);
0:       throw new RuntimeException("Could not find service " + serviceInterface.getName() + ", " + filter);
1: 	}
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:1a2aa53
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test
0:   public void testFactoryCreation() throws Exception {
0:     ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
0:     Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory5", null);
0:     Hashtable<String, String> props = new Hashtable<String, String>();
1:     props.put("a", "5");
1:     cf.update(props);
1: 
0:     BundleContext context = getBundleContext();
0:     ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(key=foo5)", Helper.DEFAULT_TIMEOUT);
1:     assertNotNull(sr);
0:     Foo foo = (Foo) context.getService(sr);
1:     assertNotNull(foo);
1:     assertEquals(5, foo.getA());
1:     assertEquals("default", foo.getB());
1:     assertEquals("5", sr.getProperty("a"));
1:     assertNull(sr.getProperty("b"));
1: 
0:     props = new Hashtable<String, String>();
1:     props.put("a", "5");
1:     props.put("b", "foo");
1:     cf.update(props);
1:     Thread.sleep(500);
1: 
1:     // No update of bean after creation
1:     assertEquals(5, foo.getA());
1:     assertEquals("default", foo.getB());
1: 
1:     // Only initial update of service properties
1:     assertEquals("5", sr.getProperty("a"));
1:     assertNull(sr.getProperty("b"));
1:   }
commit:406b7d6
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Test
0:   public void testCreateAndUpdateUsingUpdateMethod() throws Exception {
0:     ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
1: 
0:     Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
0:     Hashtable<String, String> props = new Hashtable<String, String>();
1:     props.put("a", "5");
1:     cf.update(props);
1: 
0:     Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory4", null);
0:     Hashtable<String, String> props2 = new Hashtable<String, String>();
1:     props2.put("a", "7");
1:     cf2.update(props2);
1: 
0:     BundleContext context = getBundleContext();
0:     ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(&(key=foo4)(a=5))", Helper.DEFAULT_TIMEOUT);
0:     assertNotNull(sr);
1: 
0:     ServiceReference sr2 = Helper.getOsgiServiceReference(context, Foo.class, "(&(key=foo4)(a=7))", Helper.DEFAULT_TIMEOUT);
0:     assertNotNull(sr2);
1: 
0:     Foo foo = (Foo) context.getService(sr);
1:     assertNotNull(foo);
1:     assertEquals(5, foo.getA());
1:     assertEquals("default", foo.getB());
1:     assertEquals("5", sr.getProperty("a"));
1:     assertNull(sr.getProperty("b"));
1: 
0:     Foo foo2 = (Foo) context.getService(sr2);
1:     assertNotNull(foo2);
1:     assertEquals(7, foo2.getA());
1:     assertEquals("default", foo2.getB());
1:     assertEquals("7", sr2.getProperty("a"));
1:     assertNull(sr2.getProperty("b"));
1: 
0:     props = new Hashtable<String, String>();
1:     props.put("a", "5");
1:     props.put("b", "foo");
1:     cf.update(props);
1: 
0:     props2 = new Hashtable<String, String>();
1:     props2.put("a", "7");
1:     props2.put("b", "foo2");
1:     cf2.update(props2);
1: 
1:     // Update after creation
1:     Thread.sleep(500);
1:     assertEquals(5, foo.getA());
1:     assertEquals("foo", foo.getB());
1: 
1:     // Update of service properties
1:     assertEquals("5", sr.getProperty("a"));
1:     assertEquals("foo", sr.getProperty("b"));
1: 
1:     // 2a Update after creation
1:     assertEquals(7, foo2.getA());
1:     assertEquals("foo2", foo2.getB());
1: 
1:     // 2b Update of service properties
1:     assertEquals("7", sr2.getProperty("a"));
1:     assertEquals("foo2", sr2.getProperty("b"));
1:   }
commit:bb2cca8
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(&(key=foo3)(a=5))", Helper.DEFAULT_TIMEOUT);
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:     public void testCreateServices() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
1:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
1:         props.put("a", "5");
1:         cf.update(props);
1: 
1:         Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props2 = new Hashtable<String,String>();
0:         props2.put("a", "7");
0:         cf2.update(props2);
1: 
0:         BundleContext context = getBundleContext();
0:         ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(&(key=foo3)(a=5))", Helper.DEFAULT_TIMEOUT);
0:         assertNotNull(sr);
1: 
0:         ServiceReference sr2 = Helper.getOsgiServiceReference(context, Foo.class, "(&(key=foo3)(a=7))", Helper.DEFAULT_TIMEOUT);
0:         assertNotNull(sr2);
1: 
0:         Foo foo = (Foo) context.getService(sr);
1:         assertNotNull(foo);
1:         assertEquals(5, foo.getA());
1:         assertEquals("default", foo.getB());
1:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
1: 
0:         Foo foo2 = (Foo) context.getService(sr2);
0:         assertNotNull(foo2);
0:         assertEquals(7, foo2.getA());
0:         assertEquals("default", foo2.getB());
0:         assertEquals("7", sr2.getProperty("a"));
0:         assertNull(sr2.getProperty("b"));
0:     }
1: 
0:     @Test
1:     public void testCreateAndUpdate() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
1: 
1:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
1:         props.put("a", "5");
1:         cf.update(props);
1: 
1:         Configuration cf2 = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props2 = new Hashtable<String,String>();
0:         props2.put("a", "7");
0:         cf2.update(props2);
1: 
0:         BundleContext context = getBundleContext();
0:         ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(&(key=foo3)(a=5))", Helper.DEFAULT_TIMEOUT);
0:         assertNotNull(sr);
1: 
0:         ServiceReference sr2 = Helper.getOsgiServiceReference(context, Foo.class, "(&(key=foo3)(a=7))", Helper.DEFAULT_TIMEOUT);
0:         assertNotNull(sr2);
1: 
0:         Foo foo = (Foo) context.getService(sr);
1:         assertNotNull(foo);
1:         assertEquals(5, foo.getA());
1:         assertEquals("default", foo.getB());
1:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
1: 
0:         Foo foo2 = (Foo) context.getService(sr2);
0:         assertNotNull(foo2);
0:         assertEquals(7, foo2.getA());
0:         assertEquals("default", foo2.getB());
0:         assertEquals("7", sr2.getProperty("a"));
0:         assertNull(sr2.getProperty("b"));
1: 
0:         props = new Hashtable<String,String>();
1:         props.put("a", "5");
1:         props.put("b", "foo");
1:         cf.update(props);
1: 
0:         props2 = new Hashtable<String,String>();
0:         props2.put("a", "7");
0:         props2.put("b", "foo2");
0:         cf2.update(props2);
1: 
1:         // Update after creation
1:         Thread.sleep(500);
1:         assertEquals(5, foo.getA());
1:         assertEquals("foo", foo.getB());
1: 
1:         // Update of service properties
1:         assertEquals("5", sr.getProperty("a"));
1:         assertEquals("foo", sr.getProperty("b"));
1: 
0:         // 2a Update after creation
0:         assertEquals(7, foo2.getA());
0:         assertEquals("foo2", foo2.getB());
1: 
0:         // 2b Update of service properties
0:         assertEquals("7", sr2.getProperty("a"));
0:         assertEquals("foo2", sr2.getProperty("b"));
0:     }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e9215e0
/////////////////////////////////////////////////////////////////////////
1:         props.put("a", "5");
/////////////////////////////////////////////////////////////////////////
0:         props.put("a", "5");
/////////////////////////////////////////////////////////////////////////
0:         props.put("a", "5");
commit:fc74a12
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.blueprint.compendium.cm;
0: 
0: import java.util.Hashtable;
0: 
0: import org.junit.Test;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
0: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
0: 
0: public class ManagedServiceFactoryTest extends BaseTest {
0: 
0:     @Override
0:     protected String getBlueprintDescriptor() {
0:         return "org/apache/aries/blueprint/compendium/cm/ManagedServiceFactoryTest.xml";
0:     }
0: 
0:     @Test
1:     public void test1() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
1:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
1:         cf.update(props);
0: 
0:         BundleContext context = getBundleContext();
0:         ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(key=foo1)", Helper.DEFAULT_TIMEOUT);
0:         assertNotNull(sr);
0:         Foo foo = (Foo) context.getService(sr);
0:         assertNotNull(foo);
1:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
0: 
0:         props = new Hashtable<String,String>();
1:         props.put("b", "foo");
1:         cf.update(props);
1:         Thread.sleep(500);
0: 
0:         // No update of bean after creation
1:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0: 
0:         // Only initial update of service properties
0:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
0:     }
0: 
0:     @Test
1:     public void test2() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
1:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory2", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
1:         cf.update(props);
0: 
0:         BundleContext context = getBundleContext();
0:         ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(key=foo2)", Helper.DEFAULT_TIMEOUT);
0:         assertNotNull(sr);
0: 
0:         Foo foo = (Foo) context.getService(sr);
0:         assertNotNull(foo);
1:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
1:         assertNull(sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
0: 
0:         props = new Hashtable<String,String>();
1:         props.put("b", "foo");
1:         cf.update(props);
0: 
1:         // Update after creation
1:         Thread.sleep(500);
1:         assertEquals(5, foo.getA());
1:         assertEquals("foo", foo.getB());
0: 
1:         // No update of service properties
1:         assertNull(sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
0:     }
0: 
0:     @Test
1:     public void test3() throws Exception {
0:         ConfigurationAdmin ca = getOsgiService(ConfigurationAdmin.class);
0:         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory3", null);
0:         Hashtable<String,String> props = new Hashtable<String,String>();
0:         props.put("a", "5");
1:         cf.update(props);
0: 
0:         BundleContext context = getBundleContext();
0:         ServiceReference sr = Helper.getOsgiServiceReference(context, Foo.class, "(key=foo3)", Helper.DEFAULT_TIMEOUT);
0:         assertNotNull(sr);
0: 
0:         Foo foo = (Foo) context.getService(sr);
0:         assertNotNull(foo);
1:         assertEquals(5, foo.getA());
0:         assertEquals("default", foo.getB());
0:         assertEquals("5", sr.getProperty("a"));
1:         assertNull(sr.getProperty("b"));
0: 
0:         props = new Hashtable<String,String>();
1:         props.put("b", "foo");
1:         cf.update(props);
0: 
1:         // Update after creation
1:         Thread.sleep(500);
1:         assertEquals(5, foo.getA());
1:         assertEquals("foo", foo.getB());
0: 
0:         // Update of service properties
0:         assertEquals("5", sr.getProperty("a"));
0:         assertEquals("foo", sr.getProperty("b"));
0:     }
0: 
0: }
============================================================================