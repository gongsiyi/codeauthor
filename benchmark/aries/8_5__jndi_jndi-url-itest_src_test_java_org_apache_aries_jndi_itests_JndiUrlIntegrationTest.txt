3:9325284: /*
1:9325284:  * Licensed to the Apache Software Foundation (ASF) under one
1:9325284:  * or more contributor license agreements.  See the NOTICE file
1:9325284:  * distributed with this work for additional information
1:9325284:  * regarding copyright ownership.  The ASF licenses this file
1:9325284:  * to you under the Apache License, Version 2.0 (the
1:9325284:  * "License"); you may not use this file except in compliance
1:9325284:  * with the License.  You may obtain a copy of the License at
1:9325284:  *
1:9325284:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9325284:  *
1:9325284:  * Unless required by applicable law or agreed to in writing,
1:9325284:  * software distributed under the License is distributed on an
1:9325284:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:9325284:  * KIND, either express or implied.  See the License for the
1:9325284:  * specific language governing permissions and limitations
1:9325284:  * under the License.
1:2643d3d:  */
1:614e830: 
1:9325284: package org.apache.aries.jndi.itests;
1:6263fd0: 
1:9325284: import static org.junit.Assert.assertEquals;
1:9325284: import static org.junit.Assert.assertNotNull;
1:c5363d2: import static org.ops4j.pax.exam.CoreOptions.composite;
1:c5363d2: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:c5363d2: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:c5363d2: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:c5363d2: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:c5363d2: import static org.ops4j.pax.exam.CoreOptions.when;
1:6263fd0: 
1:86224ba: import java.io.BufferedReader;
1:ebbb346: import java.io.IOException;
1:86224ba: import java.io.InputStreamReader;
1:9325284: import java.net.HttpURLConnection;
1:86224ba: import java.net.URL;
1:614e830: 
1:86224ba: import org.apache.aries.itest.AbstractIntegrationTest;
1:9325284: import org.junit.Test;
1:9325284: import org.junit.runner.RunWith;
1:c5363d2: import org.ops4j.pax.exam.Configuration;
1:c5363d2: import org.ops4j.pax.exam.CoreOptions;
1:9325284: import org.ops4j.pax.exam.Option;
1:c5363d2: import org.ops4j.pax.exam.junit.PaxExam;
1:c5363d2: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:c5363d2: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:9325284: import org.osgi.framework.Bundle;
1:614e830: 
1:c5363d2: @RunWith(PaxExam.class)
1:c5363d2: @ExamReactorStrategy(PerClass.class)
1:9325284: public class JndiUrlIntegrationTest extends AbstractIntegrationTest {
1:614e830: 
1:86224ba:   private static final int CONNECTION_TIMEOUT = 10000;
1:c5363d2:   
1:c5363d2: 
1:6263fd0:     
1:f71dfc0:   /**
1:f71dfc0:    * This test exercises the blueprint:comp/ jndi namespace by driving
1:f71dfc0:    * a Servlet which then looks up some blueprint components from its own
1:6263fd0:    * bundle, including a reference which it uses to call a service from a 
1:6263fd0:    * second bundle.  
1:f71dfc0:    * @throws Exception
1:f71dfc0:    */
1:9325284:   @Test
1:6263fd0:   public void testBlueprintCompNamespaceWorks() throws Exception { 
1:6263fd0: 
1:86224ba:     Bundle bBiz = context().getBundleByName("org.apache.aries.jndi.url.itest.biz");
1:f71dfc0:     assertNotNull(bBiz);
1:6263fd0:     
1:86224ba:     Bundle bweb = context().getBundleByName("org.apache.aries.jndi.url.itest.web");
1:9325284:     assertNotNull(bweb);
1:c5363d2:     context().getBundleByName("org.ops4j.pax.web.pax-web-extender-war").start();
1:2643d3d:     printBundleStatus ("Before making web request");
1:6263fd0:     try { 
1:aef4f5c:       Thread.sleep(5000);
1:aef4f5c:     } catch (InterruptedException ix) {}
1:6263fd0:     
1:9325284:     System.out.println("In test and trying to get connection....");
1:ebbb346:     String response = getTestServletResponse();
1:2643d3d:     System.out.println("Got response `" + response + "`");
1:ebbb346:     assertEquals("ITest servlet response wrong", "Mark.2.0.three", response);
1:37ecf18:   }
1:6263fd0:   
1:6263fd0:   private void printBundleStatus (String msg) { 
1:e2b0edb:     System.out.println("-----\nprintBundleStatus: " + msg + "\n-----");
1:c5363d2:     for (Bundle b : bundleContext.getBundles()) {
1:e2b0edb:       System.out.println (b.getSymbolicName() + " " + "state=" + formatState(b.getState()));
1:e2b0edb:     }
1:e2b0edb:     System.out.println();
1:e2b0edb:   }
1:6263fd0:   
1:e2b0edb:   private String formatState (int state) {
1:e2b0edb:     String result = Integer.toString(state);
1:6263fd0:     switch (state) { 
1:6263fd0:     case Bundle.ACTIVE: 
1:e2b0edb:       result = "Active";
1:e2b0edb:       break;
1:6263fd0:     case Bundle.INSTALLED: 
1:e2b0edb:       result = "Installed";
1:e2b0edb:       break;
1:6263fd0:     case Bundle.RESOLVED: 
1:e2b0edb:       result = "Resolved";
1:e2b0edb:       break;
1:e2b0edb:     }
1:e2b0edb:     return result;
1:e2b0edb:   }
1:6263fd0:   
1:6263fd0:   private String getTestServletResponse() throws IOException { 
1:2643d3d:     HttpURLConnection conn = makeConnection("http://localhost:8080/jndiUrlItest/ITestServlet");
1:9325284:     String response = getHTTPResponse(conn).trim();
1:ebbb346:     return response;
1:ebbb346:   }
1:6263fd0:   
1:86224ba:   private static HttpURLConnection makeConnection(String contextPath) throws IOException
1:86224ba:   {
1:86224ba:     URL url = new URL(contextPath);
1:86224ba:     HttpURLConnection conn = (HttpURLConnection) url.openConnection();
1:6263fd0: 
1:86224ba:     conn.setConnectTimeout(CONNECTION_TIMEOUT);
1:86224ba:     conn.connect();
1:614e830: 
1:86224ba:     return conn;
1:86224ba:   }
1:6263fd0:   
1:86224ba:   private static String getHTTPResponse(HttpURLConnection conn) throws IOException
1:86224ba:   {
1:86224ba:     StringBuilder response = new StringBuilder();
1:86224ba:     BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), "ISO-8859-1"));
1:614e830:     try {
1:86224ba:       for (String s = reader.readLine(); s != null; s = reader.readLine()) {
1:86224ba:         response.append(s).append("\r\n");
1:86224ba:       }
1:86224ba:     } finally {
1:86224ba:       reader.close();
1:86224ba:     }
1:614e830: 
1:86224ba:     return response.toString();
1:86224ba:   }
1:6263fd0:   
1:c5363d2:   public Option baseOptions() {
1:c5363d2:       String localRepo = System.getProperty("maven.repo.local");
1:c5363d2:       if (localRepo == null) {
1:c5363d2:           localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:c5363d2:       }
1:c5363d2:       return composite(
1:c5363d2:               junitBundles(),
1:c5363d2:               // this is how you set the default log level when using pax
1:c5363d2:               // logging (logProfile)
1:c5363d2:               systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:c5363d2:               when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:c5363d2:        );
1:c5363d2:   }
1:c5363d2:   
1:c5363d2:   @Configuration
1:c5363d2:   public Option[] configuration()
1:9325284:   {
1:c5363d2:     return CoreOptions.options(
1:c5363d2:     	baseOptions(),
1:614e830:         
1:9325284:         // Bundles
1:c5363d2:         mavenBundle("org.eclipse.equinox", "cm").versionAsInProject(),
1:c5363d2:         mavenBundle("org.eclipse.osgi", "services").versionAsInProject(),
1:c5363d2:         mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec").versionAsInProject(),
1:614e830: 
1:c5363d2:         mavenBundle("org.ops4j.pax.web", "pax-web-extender-war").versionAsInProject(),
1:c5363d2:         mavenBundle("org.ops4j.pax.web", "pax-web-jetty-bundle").versionAsInProject(),
1:614e830:         
1:c5363d2:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").versionAsInProject(),
1:c5363d2:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core").versionAsInProject(),
1:c5363d2:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:c5363d2:         mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:c5363d2:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi").versionAsInProject(),
1:c5363d2:         
1:c5363d2:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url.itest.web").versionAsInProject(),
1:c5363d2:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url.itest.biz").versionAsInProject(),
1:4e31f10:         mavenBundle("org.ow2.asm", "asm-debug-all").versionAsInProject(),
1:ef96a03:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:ef96a03: 
1:ef96a03:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:ef96a03:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:c5363d2:         );
2:614e830: 
1:614e830:         // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
1:614e830:         // org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup(),
2:9325284:   }
1:9325284: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4e31f10
/////////////////////////////////////////////////////////////////////////
1:         mavenBundle("org.ow2.asm", "asm-debug-all").versionAsInProject(),
commit:ef96a03
/////////////////////////////////////////////////////////////////////////
1:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 
1:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
author:Christian Schneider
-------------------------------------------------------------------------------
commit:c5363d2
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1:   
1: 
/////////////////////////////////////////////////////////////////////////
1:     context().getBundleByName("org.ops4j.pax.web.pax-web-extender-war").start();
/////////////////////////////////////////////////////////////////////////
1:     for (Bundle b : bundleContext.getBundles()) {
/////////////////////////////////////////////////////////////////////////
1:   public Option baseOptions() {
1:       String localRepo = System.getProperty("maven.repo.local");
1:       if (localRepo == null) {
1:           localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:       }
1:       return composite(
1:               junitBundles(),
1:               // this is how you set the default log level when using pax
1:               // logging (logProfile)
1:               systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:               when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:        );
1:   }
1:   
1:   @Configuration
1:   public Option[] configuration()
1:     return CoreOptions.options(
1:     	baseOptions(),
1:         mavenBundle("org.eclipse.equinox", "cm").versionAsInProject(),
1:         mavenBundle("org.eclipse.osgi", "services").versionAsInProject(),
1:         mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec").versionAsInProject(),
1:         mavenBundle("org.ops4j.pax.web", "pax-web-extender-war").versionAsInProject(),
1:         mavenBundle("org.ops4j.pax.web", "pax-web-jetty-bundle").versionAsInProject(),
1:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").versionAsInProject(),
1:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core").versionAsInProject(),
1:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:         mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi").versionAsInProject(),
1:         
1:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url.itest.web").versionAsInProject(),
1:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url.itest.biz").versionAsInProject(),
0:         mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject()
1:         );
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:6263fd0
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
/////////////////////////////////////////////////////////////////////////
1:     
1:    * bundle, including a reference which it uses to call a service from a 
1:    * second bundle.  
1:   public void testBlueprintCompNamespaceWorks() throws Exception { 
1:     
1:     
1:     try { 
1:     
1:   
1:   private void printBundleStatus (String msg) { 
0:     for (Bundle b : bundleContext.getBundles()) { 
1:   
1:     switch (state) { 
1:     case Bundle.ACTIVE: 
1:     case Bundle.INSTALLED: 
1:     case Bundle.RESOLVED: 
1:   
1:   private String getTestServletResponse() throws IOException { 
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
0:         transactionBootDelegation(), 
1:         
/////////////////////////////////////////////////////////////////////////
1:         
1:       
commit:614e830
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
0: import static org.apache.aries.itest.ExtraOptions.transactionBootDelegation;
/////////////////////////////////////////////////////////////////////////
1: 
0:    * bundle, including a reference which it uses to call a service from a
0:    * second bundle.
0:   public void testBlueprintCompNamespaceWorks() throws Exception {
1: 
1: 
1:     try {
1: 
1: 
0:   private void printBundleStatus (String msg) {
0:     for (Bundle b : bundleContext.getBundles()) {
1: 
0:     switch (state) {
0:     case Bundle.ACTIVE:
0:     case Bundle.INSTALLED:
0:     case Bundle.RESOLVED:
1: 
0:   private String getTestServletResponse() throws IOException {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         transactionBootDelegation(),
1: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
1:         // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
1:         // org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup(),
commit:3256dd0
/////////////////////////////////////////////////////////////////////////
author:Emily Jiang
-------------------------------------------------------------------------------
commit:71e1cec
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:2e80d18
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core"),
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
1: import java.net.URL;
1: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
1:   private static final int CONNECTION_TIMEOUT = 10000;
0:     
/////////////////////////////////////////////////////////////////////////
1:     Bundle bBiz = context().getBundleByName("org.apache.aries.jndi.url.itest.biz");
1:     Bundle bweb = context().getBundleByName("org.apache.aries.jndi.url.itest.web");
/////////////////////////////////////////////////////////////////////////
1:   private static HttpURLConnection makeConnection(String contextPath) throws IOException
1:   {
1:     URL url = new URL(contextPath);
1:     HttpURLConnection conn = (HttpURLConnection) url.openConnection();
0: 
1:     conn.setConnectTimeout(CONNECTION_TIMEOUT);
1:     conn.connect();
0: 
1:     return conn;
1:   }
0:   
1:   private static String getHTTPResponse(HttpURLConnection conn) throws IOException
1:   {
1:     StringBuilder response = new StringBuilder();
1:     BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), "ISO-8859-1"));
0:     try {
1:       for (String s = reader.readLine(); s != null; s = reader.readLine()) {
1:         response.append(s).append("\r\n");
1:       }
1:     } finally {
1:       reader.close();
1:     }
0: 
1:     return response.toString();
1:   }
0:   
0:     return testOptions(
0:         paxLogging("DEBUG"),
0:         transactionBootDelegation(), 
0:         
/////////////////////////////////////////////////////////////////////////
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:aef4f5c
/////////////////////////////////////////////////////////////////////////
0:     try { 
1:       Thread.sleep(5000);
1:     } catch (InterruptedException ix) {}
commit:26c966f
/////////////////////////////////////////////////////////////////////////
commit:2643d3d
/////////////////////////////////////////////////////////////////////////
0:     /*printBundleStatus("Before first request");
/////////////////////////////////////////////////////////////////////////
1:     */
1:     printBundleStatus ("Before making web request");
1:     System.out.println("Got response `" + response + "`");
/////////////////////////////////////////////////////////////////////////
1:     HttpURLConnection conn = makeConnection("http://localhost:8080/jndiUrlItest/ITestServlet");
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec"),
0:         
0:       
0:         mavenBundle("asm", "asm-all"),
0:         
0:         // vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0:         // waitForFrameworkStartup(),
0:          * For debugging, add these imports: 
0:          * import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup; 
0:          * import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
commit:e2b0edb
/////////////////////////////////////////////////////////////////////////
0:     
0:     // Let's see what's going on
0:     printBundleStatus("Before first request");
0:     } catch (IOException iox) {}
0:       Thread.sleep(5000);
0:     printBundleStatus ("After workaround, before test proper");
0:   private void printBundleStatus (String msg) { 
1:     System.out.println("-----\nprintBundleStatus: " + msg + "\n-----");
0:     for (Bundle b : bundleContext.getBundles()) { 
1:       System.out.println (b.getSymbolicName() + " " + "state=" + formatState(b.getState()));
1:     }
1:     System.out.println();
1:   }
0:   
1:   private String formatState (int state) {
1:     String result = Integer.toString(state);
0:     switch (state) { 
0:     case Bundle.ACTIVE: 
1:       result = "Active";
1:       break;
0:     case Bundle.INSTALLED: 
1:       result = "Installed";
1:       break;
0:     case Bundle.RESOLVED: 
1:       result = "Resolved";
1:       break;
1:     }
1:     return result;
1:   }
0:   
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url"),
commit:37ecf18
/////////////////////////////////////////////////////////////////////////
1:     } 
0:     catch (InterruptedException ix) {}
0:     catch (IOException iox) {}
0:     try { 
0:     } catch (InterruptedException iox) {}
0:     
commit:ebbb346
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:     // We've had intermittent problems in which Jetty only seems to start after a bundle
0:     // receives an HTTP request. This next block is here to prevent Hudson failures. 
0:       Thread.sleep(2000);
0:       getTestServletResponse();
0:       Thread.sleep(3000);
1:     String response = getTestServletResponse();
1:     assertEquals("ITest servlet response wrong", "Mark.2.0.three", response);
1:   }
0:   
0:   private String getTestServletResponse() throws IOException { 
1:     return response;
commit:f71dfc0
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This test exercises the blueprint:comp/ jndi namespace by driving
1:    * a Servlet which then looks up some blueprint components from its own
0:    * bundle, including a reference which it uses to call a service from a 
0:    * second bundle.  
1:    * @throws Exception
1:    */
0:   public void testBlueprintCompNamespaceWorks() throws Exception { 
0: 
0:     Bundle bBiz = getInstalledBundle("org.apache.aries.jndi.url.itest.biz");
1:     assertNotNull(bBiz);
0:     bBiz.start();
0:     bweb.start();
0:     // Short wait in order to give the blueprint and web containers a chance
0:     // to initialise
0:     try { 
0:       Thread.sleep(5000);
0:     } catch (InterruptedException ix) {}
commit:9325284
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
0: 
1: package org.apache.aries.jndi.itests;
0: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: 
1: import java.net.HttpURLConnection;
0: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
0: 
0: @RunWith(JUnit4TestRunner.class)
1: public class JndiUrlIntegrationTest extends AbstractIntegrationTest {
0: 
1:   @Test
0:   public void sniffTest() throws Exception { 
0:     
0:     Bundle bweb = getInstalledBundle("org.apache.aries.jndi.url.itest.web");
1:     assertNotNull(bweb);
0: 
0:     Bundle bBiz = getInstalledBundle("org.apache.aries.jndi.url.itest.web");
0:     assertNotNull(bBiz);
0:     
1:     System.out.println("In test and trying to get connection....");
0:     HttpURLConnection conn = makeConnection("http://localhost:8080/org.apache.aries.jndi.url.itest.web/ITestServlet");
1:     String response = getHTTPResponse(conn).trim();
0:     
0:     assertEquals("ITest servlet response wrong", "Mark.2.0.three", response);
1:   }
0:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration()
1:   {
0:     Option[] options = options(
0:         vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix mvn url handler - do we need this?
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
1:         // Bundles
0:         mavenBundle("org.eclipse.equinox", "cm"),
0:         mavenBundle("org.eclipse.osgi", "services"),
0: 
0:         mavenBundle("org.apache.felix", "org.apache.felix.fileinstall" ),
0:         mavenBundle("org.ops4j.pax.web", "pax-web-extender-war"),
0:         mavenBundle("org.ops4j.pax.web", "pax-web-jetty-bundle"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi"),
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.fileinstall"),
0:         
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url.itest.web"),
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url.itest.biz"),
0:         /* For debugging, uncomment the next two lines */
1:         /*
0:          * vmOption
0:          * ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0:          * waitForFrameworkStartup(),
0:          */
1:         /*
0:          * For debugging, add these imports: import static
0:          * org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup; import static
0:          * org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:          */
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
1:   }
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:         mavenBundle("asm", "asm-all"),
0: //        vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
============================================================================