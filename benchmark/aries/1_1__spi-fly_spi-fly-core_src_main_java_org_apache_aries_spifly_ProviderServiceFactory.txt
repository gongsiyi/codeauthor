1:c69c410: /**
1:c69c410:  * Licensed to the Apache Software Foundation (ASF) under one
1:c69c410:  * or more contributor license agreements.  See the NOTICE file
1:c69c410:  * distributed with this work for additional information
1:c69c410:  * regarding copyright ownership.  The ASF licenses this file
1:c69c410:  * to you under the Apache License, Version 2.0 (the
1:c69c410:  * "License"); you may not use this file except in compliance
1:c69c410:  * with the License.  You may obtain a copy of the License at
1:c69c410:  *
1:c69c410:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c69c410:  *
1:c69c410:  * Unless required by applicable law or agreed to in writing,
1:c69c410:  * software distributed under the License is distributed on an
1:c69c410:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c69c410:  * KIND, either express or implied.  See the License for the
1:c69c410:  * specific language governing permissions and limitations
1:c69c410:  * under the License.
1:c69c410:  */
1:c69c410: package org.apache.aries.spifly;
1:c69c410: 
1:c69c410: import org.osgi.framework.Bundle;
1:c69c410: import org.osgi.framework.ServiceFactory;
1:c69c410: import org.osgi.framework.ServiceRegistration;
1:c69c410: 
1:c69c410: public class ProviderServiceFactory implements ServiceFactory {
1:c69c410:     private final Class<?> providerClass;
1:c69c410: 
1:c69c410:     public ProviderServiceFactory(Class<?> cls) {
1:c69c410:         providerClass = cls;
1:c69c410:     }
1:c69c410: 
1:c69c410:     @Override
1:c69c410:     public Object getService(Bundle bundle, ServiceRegistration registration) {
1:c69c410:         try {
1:c69c410:             return providerClass.newInstance();
1:c69c410:         } catch (Exception e) {
1:c69c410:             throw new RuntimeException("Unable to instantiate class " + providerClass +
1:c69c410:                 " Does it have a public no-arg constructor?", e);
1:c69c410:         }
1:c69c410:     }
1:c69c410: 
1:c69c410:     @Override
1:c69c410:     public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {
1:c69c410:         // nothing to do
1:c69c410:     }
1:c69c410: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:c69c410
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceFactory;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: public class ProviderServiceFactory implements ServiceFactory {
1:     private final Class<?> providerClass;
1: 
1:     public ProviderServiceFactory(Class<?> cls) {
1:         providerClass = cls;
1:     }
1: 
1:     @Override
1:     public Object getService(Bundle bundle, ServiceRegistration registration) {
1:         try {
1:             return providerClass.newInstance();
1:         } catch (Exception e) {
1:             throw new RuntimeException("Unable to instantiate class " + providerClass +
1:                 " Does it have a public no-arg constructor?", e);
1:         }
1:     }
1: 
1:     @Override
1:     public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {
1:         // nothing to do
1:     }
1: }
============================================================================