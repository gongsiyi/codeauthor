1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi;
1:5a4dcb4: 
1:5a4dcb4: import javax.enterprise.context.ApplicationScoped;
1:5a4dcb4: import javax.enterprise.event.Observes;
1:5a4dcb4: import javax.enterprise.inject.spi.AfterBeanDiscovery;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedMethod;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedType;
1:5a4dcb4: import javax.enterprise.inject.spi.BeanManager;
1:5a4dcb4: import javax.enterprise.inject.spi.BeforeBeanDiscovery;
1:5a4dcb4: import javax.enterprise.inject.spi.Extension;
1:5a4dcb4: import javax.enterprise.inject.spi.ProcessManagedBean;
1:5a4dcb4: import javax.transaction.Transactional;
1:5a4dcb4: import java.lang.reflect.Method;
1:5a4dcb4: import java.util.HashMap;
1:5a4dcb4: import java.util.Map;
1:5a4dcb4: 
1:5a4dcb4: @ApplicationScoped
1:5a4dcb4: public class TransactionExtension implements Extension {
1:5a4dcb4: 
1:5a4dcb4:     private Map<Method, Transactional> transactionAttributes;
1:5a4dcb4: 
1:5a4dcb4:     public TransactionExtension() {
1:5a4dcb4:         transactionAttributes = new HashMap<>();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     <X> void processBean(@Observes ProcessManagedBean<X> event) {
1:5a4dcb4:         AnnotatedType<X> annotatedType = event.getAnnotatedBeanClass();
1:5a4dcb4:         Transactional classTx = annotatedType.getAnnotation(Transactional.class);
1:5a4dcb4:         for (AnnotatedMethod<? super X> am : annotatedType.getMethods()) {
1:5a4dcb4:             Transactional methodTx = am.getAnnotation(Transactional.class);
1:5a4dcb4:             if (classTx != null || methodTx != null) {
1:5a4dcb4:                 Method method = am.getJavaMember();
1:5a4dcb4:                 Transactional attrType = mergeTransactionAttributes(classTx, methodTx);
1:5a4dcb4:                 transactionAttributes.put(method, attrType);
1:5a4dcb4:             }
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     void beforeBeanDiscovery(@Observes BeforeBeanDiscovery event, BeanManager manager) {
1:5a4dcb4:         event.addAnnotatedType(manager.createAnnotatedType(TransactionSupport.class));
1:5a4dcb4:         event.addAnnotatedType(manager.createAnnotatedType(TransactionalInterceptor.class));
1:5a4dcb4:         event.addInterceptorBinding(Transactional.class);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     void afterBeanDiscovered(@Observes AfterBeanDiscovery event, BeanManager beanManager) {
1:5a4dcb4:         event.addContext(new TransactionalContext(beanManager));
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private Transactional mergeTransactionAttributes(Transactional classAttribute, Transactional methodAttribute) {
1:5a4dcb4:         return methodAttribute != null ? methodAttribute : classAttribute;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     Transactional getTransactionAttribute(Method method) {
1:5a4dcb4:         return transactionAttributes.get(method);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi;
1: 
1: import javax.enterprise.context.ApplicationScoped;
1: import javax.enterprise.event.Observes;
1: import javax.enterprise.inject.spi.AfterBeanDiscovery;
1: import javax.enterprise.inject.spi.AnnotatedMethod;
1: import javax.enterprise.inject.spi.AnnotatedType;
1: import javax.enterprise.inject.spi.BeanManager;
1: import javax.enterprise.inject.spi.BeforeBeanDiscovery;
1: import javax.enterprise.inject.spi.Extension;
1: import javax.enterprise.inject.spi.ProcessManagedBean;
1: import javax.transaction.Transactional;
1: import java.lang.reflect.Method;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: @ApplicationScoped
1: public class TransactionExtension implements Extension {
1: 
1:     private Map<Method, Transactional> transactionAttributes;
1: 
1:     public TransactionExtension() {
1:         transactionAttributes = new HashMap<>();
1:     }
1: 
1:     <X> void processBean(@Observes ProcessManagedBean<X> event) {
1:         AnnotatedType<X> annotatedType = event.getAnnotatedBeanClass();
1:         Transactional classTx = annotatedType.getAnnotation(Transactional.class);
1:         for (AnnotatedMethod<? super X> am : annotatedType.getMethods()) {
1:             Transactional methodTx = am.getAnnotation(Transactional.class);
1:             if (classTx != null || methodTx != null) {
1:                 Method method = am.getJavaMember();
1:                 Transactional attrType = mergeTransactionAttributes(classTx, methodTx);
1:                 transactionAttributes.put(method, attrType);
1:             }
1:         }
1:     }
1: 
1:     void beforeBeanDiscovery(@Observes BeforeBeanDiscovery event, BeanManager manager) {
1:         event.addAnnotatedType(manager.createAnnotatedType(TransactionSupport.class));
1:         event.addAnnotatedType(manager.createAnnotatedType(TransactionalInterceptor.class));
1:         event.addInterceptorBinding(Transactional.class);
1:     }
1: 
1:     void afterBeanDiscovered(@Observes AfterBeanDiscovery event, BeanManager beanManager) {
1:         event.addContext(new TransactionalContext(beanManager));
1:     }
1: 
1:     private Transactional mergeTransactionAttributes(Transactional classAttribute, Transactional methodAttribute) {
1:         return methodAttribute != null ? methodAttribute : classAttribute;
1:     }
1: 
1:     Transactional getTransactionAttribute(Method method) {
1:         return transactionAttributes.get(method);
1:     }
1: 
1: }
============================================================================