1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.permissionadmin;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import org.junit.Assert;
1:fdf3952: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.Mock;
1:fdf3952: import org.mockito.Mockito;
1:fdf3952: import org.mockito.MockitoAnnotations;
1:fdf3952: import org.osgi.jmx.service.permissionadmin.PermissionAdminMBean;
1:fdf3952: import org.osgi.service.permissionadmin.PermissionInfo;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * {@link PermissionAdminMBean} test case.
1:fdf3952:  * 
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PermissionAdminTest {
1:fdf3952: 
1:fdf3952:     @Mock
1:fdf3952:     private org.osgi.service.permissionadmin.PermissionAdmin permAdmin;
1:fdf3952:     private PermissionAdminMBean mbean;
1:fdf3952: 
1:fdf3952:     @Before
1:fdf3952:     public void setUp() {
1:fdf3952:         MockitoAnnotations.initMocks(this);
1:fdf3952:         mbean = new PermissionAdmin(permAdmin);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testGetPermissions() throws IOException {
1:fdf3952:         PermissionInfo info = new PermissionInfo("Admin", "test", "get");
1:fdf3952:         PermissionInfo[] permInfos = new PermissionInfo[] { info, info };
1:fdf3952: 
1:fdf3952:         Mockito.when(permAdmin.getPermissions(Mockito.anyString())).thenReturn(permInfos);
1:fdf3952:         String[] permissions = mbean.getPermissions("test");
1:fdf3952: 
1:fdf3952:         Assert.assertNotNull(permissions);
1:fdf3952:         Assert.assertEquals(2, permissions.length);
1:fdf3952:         Assert.assertArrayEquals("Checks encoded permissions", new String[] { info.getEncoded(), info.getEncoded() },
1:fdf3952:                 permissions);
1:fdf3952:         
1:fdf3952:         Mockito.reset(permAdmin);
1:fdf3952:         Mockito.when(permAdmin.getPermissions(Mockito.anyString())).thenReturn(null);
1:fdf3952:         String[] permissions2 = mbean.getPermissions("test");
1:fdf3952: 
1:fdf3952:         Assert.assertNull(permissions2);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testListDefaultPermissions() throws IOException {
1:fdf3952:         PermissionInfo info = new PermissionInfo("Admin", "test", "get");
1:fdf3952:         PermissionInfo[] permInfos = new PermissionInfo[] { info, info };
1:fdf3952: 
1:fdf3952:         Mockito.when(permAdmin.getDefaultPermissions()).thenReturn(permInfos);
1:fdf3952:         String[] permissions = mbean.listDefaultPermissions();
1:fdf3952: 
1:fdf3952:         Assert.assertNotNull(permissions);
1:fdf3952:         Assert.assertEquals(2, permissions.length);
1:fdf3952:         Assert.assertArrayEquals("Checks encoded default permissions", new String[] { info.getEncoded(), info.getEncoded() },
1:fdf3952:                 permissions);
1:fdf3952:         
1:fdf3952:         Mockito.reset(permAdmin);
1:fdf3952:         Mockito.when(permAdmin.getDefaultPermissions()).thenReturn(null);
1:fdf3952:         String[] permissions2 = mbean.listDefaultPermissions();
1:fdf3952: 
1:fdf3952:         Assert.assertNull(permissions2);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testListLocations() throws IOException {
1:fdf3952:         String[] locations1 = new String[] { "test1", "test2" };
1:fdf3952:         Mockito.when(permAdmin.getLocations()).thenReturn(locations1);
1:fdf3952:         String[] locations2 = mbean.listLocations();
1:fdf3952:         Assert.assertNotNull(locations2);
1:fdf3952:         Assert.assertEquals(2, locations2.length);
1:fdf3952:         Assert.assertSame(locations1, locations2);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testSetDefaultPermissions() throws IOException {
1:fdf3952:         PermissionInfo info1 = new PermissionInfo("Admin", "test", "get");
1:fdf3952:         PermissionInfo info2 = new PermissionInfo("Admin", "test2", "get");
1:fdf3952:         PermissionInfo[] permInfos = new PermissionInfo[] { info1, info2 };
1:fdf3952:         String[] encodedPermissions = new String[2];
1:fdf3952:         int i = 0;
1:fdf3952:         for (PermissionInfo info : permInfos) {
1:fdf3952:             encodedPermissions[i++] = info.getEncoded();
1:fdf3952:         }
1:fdf3952:         mbean.setDefaultPermissions(encodedPermissions);
1:fdf3952:         Mockito.verify(permAdmin).setDefaultPermissions(permInfos);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testSetPermissions() throws IOException {
1:fdf3952:         PermissionInfo info1 = new PermissionInfo("Admin", "test", "set");
1:fdf3952:         PermissionInfo info2 = new PermissionInfo("Admin", "test2", "set");
1:fdf3952:         PermissionInfo[] permInfos = new PermissionInfo[] { info1, info2 };
1:fdf3952:         String[] encodedPermissions = new String[2];
1:fdf3952:         int i = 0;
1:fdf3952:         for (PermissionInfo info : permInfos) {
1:fdf3952:             encodedPermissions[i++] = info.getEncoded();
1:fdf3952:         }
1:fdf3952:         mbean.setPermissions("test", encodedPermissions);
1:fdf3952:         Mockito.verify(permAdmin).setPermissions("test", permInfos);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.permissionadmin;
1: 
1: import java.io.IOException;
1: 
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.MockitoAnnotations;
1: import org.osgi.jmx.service.permissionadmin.PermissionAdminMBean;
1: import org.osgi.service.permissionadmin.PermissionInfo;
1: 
1: /**
1:  * {@link PermissionAdminMBean} test case.
1:  * 
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class PermissionAdminTest {
1: 
1:     @Mock
1:     private org.osgi.service.permissionadmin.PermissionAdmin permAdmin;
1:     private PermissionAdminMBean mbean;
1: 
1:     @Before
1:     public void setUp() {
1:         MockitoAnnotations.initMocks(this);
1:         mbean = new PermissionAdmin(permAdmin);
1:     }
1: 
1:     @Test
1:     public void testGetPermissions() throws IOException {
1:         PermissionInfo info = new PermissionInfo("Admin", "test", "get");
1:         PermissionInfo[] permInfos = new PermissionInfo[] { info, info };
1: 
1:         Mockito.when(permAdmin.getPermissions(Mockito.anyString())).thenReturn(permInfos);
1:         String[] permissions = mbean.getPermissions("test");
1: 
1:         Assert.assertNotNull(permissions);
1:         Assert.assertEquals(2, permissions.length);
1:         Assert.assertArrayEquals("Checks encoded permissions", new String[] { info.getEncoded(), info.getEncoded() },
1:                 permissions);
1:         
1:         Mockito.reset(permAdmin);
1:         Mockito.when(permAdmin.getPermissions(Mockito.anyString())).thenReturn(null);
1:         String[] permissions2 = mbean.getPermissions("test");
1: 
1:         Assert.assertNull(permissions2);
1:     }
1: 
1:     @Test
1:     public void testListDefaultPermissions() throws IOException {
1:         PermissionInfo info = new PermissionInfo("Admin", "test", "get");
1:         PermissionInfo[] permInfos = new PermissionInfo[] { info, info };
1: 
1:         Mockito.when(permAdmin.getDefaultPermissions()).thenReturn(permInfos);
1:         String[] permissions = mbean.listDefaultPermissions();
1: 
1:         Assert.assertNotNull(permissions);
1:         Assert.assertEquals(2, permissions.length);
1:         Assert.assertArrayEquals("Checks encoded default permissions", new String[] { info.getEncoded(), info.getEncoded() },
1:                 permissions);
1:         
1:         Mockito.reset(permAdmin);
1:         Mockito.when(permAdmin.getDefaultPermissions()).thenReturn(null);
1:         String[] permissions2 = mbean.listDefaultPermissions();
1: 
1:         Assert.assertNull(permissions2);
1:     }
1: 
1:     @Test
1:     public void testListLocations() throws IOException {
1:         String[] locations1 = new String[] { "test1", "test2" };
1:         Mockito.when(permAdmin.getLocations()).thenReturn(locations1);
1:         String[] locations2 = mbean.listLocations();
1:         Assert.assertNotNull(locations2);
1:         Assert.assertEquals(2, locations2.length);
1:         Assert.assertSame(locations1, locations2);
1:     }
1: 
1:     @Test
1:     public void testSetDefaultPermissions() throws IOException {
1:         PermissionInfo info1 = new PermissionInfo("Admin", "test", "get");
1:         PermissionInfo info2 = new PermissionInfo("Admin", "test2", "get");
1:         PermissionInfo[] permInfos = new PermissionInfo[] { info1, info2 };
1:         String[] encodedPermissions = new String[2];
1:         int i = 0;
1:         for (PermissionInfo info : permInfos) {
1:             encodedPermissions[i++] = info.getEncoded();
1:         }
1:         mbean.setDefaultPermissions(encodedPermissions);
1:         Mockito.verify(permAdmin).setDefaultPermissions(permInfos);
1:     }
1: 
1:     @Test
1:     public void testSetPermissions() throws IOException {
1:         PermissionInfo info1 = new PermissionInfo("Admin", "test", "set");
1:         PermissionInfo info2 = new PermissionInfo("Admin", "test2", "set");
1:         PermissionInfo[] permInfos = new PermissionInfo[] { info1, info2 };
1:         String[] encodedPermissions = new String[2];
1:         int i = 0;
1:         for (PermissionInfo info : permInfos) {
1:             encodedPermissions[i++] = info.getEncoded();
1:         }
1:         mbean.setPermissions("test", encodedPermissions);
1:         Mockito.verify(permAdmin).setPermissions("test", permInfos);
1:     }
1: 
1: }
============================================================================