1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:35094c6: package org.apache.aries.subsystem.core.internal;
1:35094c6: 
1:35094c6: import java.util.Collection;
1:35094c6: import java.util.HashSet;
1:35094c6: 
1:35094c6: import org.eclipse.equinox.region.Region;
1:35094c6: import org.eclipse.equinox.region.RegionDigraphVisitor;
1:35094c6: import org.eclipse.equinox.region.RegionFilter;
1:e179326: import org.osgi.framework.wiring.BundleCapability;
1:b75f264: import org.osgi.namespace.service.ServiceNamespace;
1:35094c6: import org.osgi.resource.Capability;
1:35094c6: 
1:35094c6: public class SharingPolicyValidator {
1:35094c6: 	private static class Visitor implements RegionDigraphVisitor {
1:e179326: 		private final Capability capability;
1:35094c6: 		private final Collection<Region> visited;
1:35094c6: 		
1:e179326: 		public Visitor(Capability capability) {
1:e179326: 			this.capability = capability;
1:35094c6: 			visited = new HashSet<Region>();
1:35094c6: 		}
1:35094c6: 		
1:35094c6: 		public boolean contains(Region region) {
1:35094c6: 			return visited.contains(region);
1:35094c6: 		}
1:35094c6: 		
1:35094c6: 		@Override
1:35094c6: 		public void postEdgeTraverse(RegionFilter filter) {
1:35094c6: 			// noop
1:35094c6: 		}
1:35094c6: 
1:35094c6: 		@Override
1:35094c6: 		public boolean preEdgeTraverse(RegionFilter filter) {
1:e179326: 			if (filter
1:e179326: 					.isAllowed(
1:e179326: 							// The osgi.service namespace must be translated into the
1:e179326: 							// org.eclipse.equinox.allow.service namespace in order to validate
1:e179326: 							// service sharing policies.
1:e179326: 							ServiceNamespace.SERVICE_NAMESPACE
1:e179326: 									.equals(capability.getNamespace()) ? RegionFilter.VISIBLE_SERVICE_NAMESPACE
1:e179326: 									: capability.getNamespace(), capability
1:e179326: 									.getAttributes()))
1:e179326: 				return true;
1:e179326: 			if (capability instanceof BundleCapability)
1:e179326: 				return filter.isAllowed(((BundleCapability) capability).getRevision());
1:e179326: 			return false;
1:35094c6: 		}
1:35094c6: 
1:35094c6: 		@Override
1:35094c6: 		public boolean visit(Region region) {
1:35094c6: 			visited.add(region);
1:35094c6: 			return true;
1:35094c6: 		}
1:35094c6: 	}
1:35094c6: 	
1:35094c6: 	private final Region from;
1:35094c6: 	private final Region to;
1:35094c6: 	
1:35094c6: 	public SharingPolicyValidator(Region from, Region to) {
1:35094c6: 		this.from = from;
1:35094c6: 		this.to = to;
1:35094c6: 	}
1:35094c6: 	
1:35094c6: 	public boolean isValid(Capability capability) {
1:e179326: 		Visitor visitor = new Visitor(capability);
1:35094c6: 		to.visitSubgraph(visitor);
1:35094c6: 		return visitor.contains(from);
1:35094c6: 	}
1:35094c6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:e179326
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleCapability;
1: 		private final Capability capability;
1: 		public Visitor(Capability capability) {
1: 			this.capability = capability;
/////////////////////////////////////////////////////////////////////////
1: 			if (filter
1: 					.isAllowed(
1: 							// The osgi.service namespace must be translated into the
1: 							// org.eclipse.equinox.allow.service namespace in order to validate
1: 							// service sharing policies.
1: 							ServiceNamespace.SERVICE_NAMESPACE
1: 									.equals(capability.getNamespace()) ? RegionFilter.VISIBLE_SERVICE_NAMESPACE
1: 									: capability.getNamespace(), capability
1: 									.getAttributes()))
1: 				return true;
1: 			if (capability instanceof BundleCapability)
1: 				return filter.isAllowed(((BundleCapability) capability).getRevision());
1: 			return false;
/////////////////////////////////////////////////////////////////////////
1: 		Visitor visitor = new Visitor(capability);
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.namespace.service.ServiceNamespace;
/////////////////////////////////////////////////////////////////////////
0: 		// The osgi.service namespace must be translated into the
0: 		// org.eclipse.equinox.allow.service namespace in order to validate
0: 		// service sharing policies.
0: 		Visitor visitor = new Visitor(
0: 				ServiceNamespace.SERVICE_NAMESPACE.equals(capability
0: 						.getNamespace()) ? RegionFilter.VISIBLE_SERVICE_NAMESPACE
0: 						: capability.getNamespace(), capability.getAttributes());
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:35094c6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collection;
1: import java.util.HashSet;
0: import java.util.Map;
1: 
1: import org.eclipse.equinox.region.Region;
1: import org.eclipse.equinox.region.RegionDigraphVisitor;
1: import org.eclipse.equinox.region.RegionFilter;
1: import org.osgi.resource.Capability;
1: 
1: public class SharingPolicyValidator {
1: 	private static class Visitor implements RegionDigraphVisitor {
0: 		private final Map<String, ?> attributes;
0: 		private final String namespace;
1: 		private final Collection<Region> visited;
1: 		
0: 		public Visitor(String namespace, Map<String, ?> attributes) {
0: 			this.namespace = namespace;
0: 			this.attributes = attributes;
1: 			visited = new HashSet<Region>();
1: 		}
1: 		
1: 		public boolean contains(Region region) {
1: 			return visited.contains(region);
1: 		}
1: 		
1: 		@Override
1: 		public void postEdgeTraverse(RegionFilter filter) {
1: 			// noop
1: 		}
1: 
1: 		@Override
1: 		public boolean preEdgeTraverse(RegionFilter filter) {
0: 			return filter.isAllowed(namespace, attributes);
1: 		}
1: 
1: 		@Override
1: 		public boolean visit(Region region) {
1: 			visited.add(region);
1: 			return true;
1: 		}
1: 	}
1: 	
1: 	private final Region from;
1: 	private final Region to;
1: 	
1: 	public SharingPolicyValidator(Region from, Region to) {
1: 		this.from = from;
1: 		this.to = to;
1: 	}
1: 	
1: 	public boolean isValid(Capability capability) {
0: 		Visitor visitor = new Visitor(capability.getNamespace(), capability.getAttributes());
1: 		to.visitSubgraph(visitor);
1: 		return visitor.contains(from);
1: 	}
1: }
============================================================================