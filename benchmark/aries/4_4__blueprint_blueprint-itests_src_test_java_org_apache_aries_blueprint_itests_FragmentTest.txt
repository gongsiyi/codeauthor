1:05af84e: /*
1:05af84e:  * Licensed to the Apache Software Foundation (ASF) under one
1:05af84e:  * or more contributor license agreements.  See the NOTICE file
1:05af84e:  * distributed with this work for additional information
1:05af84e:  * regarding copyright ownership.  The ASF licenses this file
1:05af84e:  * to you under the Apache License, Version 2.0 (the
1:05af84e:  * "License"); you may not use this file except in compliance
1:05af84e:  * with the License.  You may obtain a copy of the License at
1:05af84e:  *
1:05af84e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:05af84e:  *
1:05af84e:  * Unless required by applicable law or agreed to in writing,
1:05af84e:  * software distributed under the License is distributed on an
1:05af84e:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:05af84e:  * KIND, either express or implied.  See the License for the
1:05af84e:  * specific language governing permissions and limitations
1:05af84e:  * under the License.
1:05af84e:  */
1:05af84e: package org.apache.aries.blueprint.itests;
15:05af84e: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:d251156: 
1:d251156: import java.io.InputStream;
1:d251156: 
1:d251156: import org.junit.Assert;
1:05af84e: import org.junit.Test;
1:05af84e: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:05af84e: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:d251156: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:05af84e: import org.osgi.framework.Constants;
1:05af84e: import org.osgi.service.blueprint.container.BlueprintContainer;
1:86224ba: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: public class FragmentTest extends AbstractBlueprintIntegrationTest
2:05af84e: {
1:d251156:     
2:05af84e:   @Test
1:05af84e:   public void testFragmentProvidesBlueprintFile() throws Exception
1:05af84e:   {
1:86224ba:     Runnable r = context().getService(Runnable.class);
1:d251156:     Assert.assertNotNull("Could not find blueprint registered service", r);
1:86224ba:     BlueprintContainer bc = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.test.host");
1:d251156:     Assert.assertNotNull("Could not find blueprint container for bundle", bc);
2:05af84e:   }
1:86224ba:   
1:d251156:   @Configuration
1:d251156:   public Option[] configuration() {
1:d251156:       InputStream hostJar = TinyBundles.bundle()
1:d251156:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:d251156:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.host").build();
1:d251156:       
1:d251156:       InputStream fragmentJar = TinyBundles.bundle()
1:d251156:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:d251156:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.fragment")
1:d251156:               .set(Constants.FRAGMENT_HOST, "org.apache.aries.test.host")
1:d251156:               .add("OSGI-INF/blueprint/bp.xml", this.getClass().getResourceAsStream("/bp.xml"))
1:d251156:               .build();
1:d251156:       
1:d251156:       return new Option[] {
1:d251156:           baseOptions(),
1:86224ba:           Helper.blueprintBundles(),
1:d251156:           streamBundle(fragmentJar).noStart(),
1:d251156:           streamBundle(hostJar),
1:c185a5a:           mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false)
1:d251156:       };
1:05af84e:   }
1:05af84e: 
1:05af84e: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:           mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false)
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: 
1: import java.io.InputStream;
1: 
1: import org.junit.Assert;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: @RunWith(PaxExam.class)
1: public class FragmentTest extends AbstractBlueprintIntegrationTest
1:     
1:     Assert.assertNotNull("Could not find blueprint registered service", r);
1:     Assert.assertNotNull("Could not find blueprint container for bundle", bc);
1:   @Configuration
1:   public Option[] configuration() {
1:       InputStream hostJar = TinyBundles.bundle()
1:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.host").build();
1:       
1:       InputStream fragmentJar = TinyBundles.bundle()
1:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.fragment")
1:               .set(Constants.FRAGMENT_HOST, "org.apache.aries.test.host")
1:               .add("OSGI-INF/blueprint/bp.xml", this.getClass().getResourceAsStream("/bp.xml"))
1:               .build();
1:       
1:       return new Option[] {
1:           baseOptions(),
1:           streamBundle(fragmentJar).noStart(),
1:           streamBundle(hostJar),
0:           mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart()
1:       };
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
/////////////////////////////////////////////////////////////////////////
1:     Runnable r = context().getService(Runnable.class);
1:     BlueprintContainer bc = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.test.host");
/////////////////////////////////////////////////////////////////////////
0:     Runnable r = context().getService(Runnable.class);
0:     BlueprintContainer bc = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.test.host");
0:       return testOptions(
0:           paxLogging("DEBUG"),
1:           Helper.blueprintBundles(),
1:           
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:05af84e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
0: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class FragmentTest extends AbstractIntegrationTest
1: {
1:   @Test
1:   public void testFragmentProvidesBlueprintFile() throws Exception
1:   {
0:     ZipFixture hostJar = ArchiveFixture.newJar().manifest().attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.host").end();
1:     
0:     ZipFixture fragmentJar = ArchiveFixture.newJar().manifest().attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:       .attribute(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.fragment")
0:       .attribute(Constants.FRAGMENT_HOST, "org.apache.aries.test.host").end()
0:       .binary("OSGI-INF/blueprint/bp.xml", this.getClass().getResourceAsStream("/bp.xml")).end();
1:     
0:     bundleContext.installBundle("fragment", fragmentJar.getInputStream());
0:     bundleContext.installBundle("host", hostJar.getInputStream()).start();
1:     
0:     Runnable r = getOsgiService(Runnable.class);
0:     assertNotNull("Could not find blueprint registered service", r);
0:     BlueprintContainer bc = getBlueprintContainerForBundle("org.apache.aries.test.host");
0:     assertNotNull("Could not find blueprint container for bundle", bc);
1:   }
1:   
1:   @Test
0:   public void testFragmentWithOverriddenHeader() throws Exception
1:   {
0:     ZipFixture hostJar = ArchiveFixture.newJar().manifest().attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.host")
0:     .attribute("Bundle-Blueprint", "META-INF/bp/*.xml").end();
1:     
0:     ZipFixture fragmentJar = ArchiveFixture.newJar().manifest().attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:       .attribute(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.fragment")
0:       .attribute(Constants.FRAGMENT_HOST, "org.apache.aries.test.host").end()
0:       .binary("META-INF/bp/bp.xml", this.getClass().getResourceAsStream("/bp.xml")).end();
1:     
0:     bundleContext.installBundle("fragment", fragmentJar.getInputStream());
0:     bundleContext.installBundle("host", hostJar.getInputStream()).start();
1:     
0:     Runnable r = getOsgiService(Runnable.class);
0:     assertNotNull("Could not find blueprint registered service", r);
0:     BlueprintContainer bc = getBlueprintContainerForBundle("org.apache.aries.test.host");
0:     assertNotNull("Could not find blueprint container for bundle", bc);
1:   }
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:       Option[] options = options(
0:           // Log
0:           mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:           mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:           // Felix Config Admin
0:           mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:           // Felix mvn url handler
0:           mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1: 
0:           // this is how you set the default log level when using pax logging (logProfile)
0:           systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:           // Bundles
0:           mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:           mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:           mavenBundle("asm", "asm-all"),
0:           mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:           mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
0:           mavenBundle("org.osgi", "org.osgi.compendium"),
0:           mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0: //          org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:           equinox().version("3.5.0")
0:       );
0:       options = updateOptions(options);
0:       return options;
1:   }
1: 
1: }
============================================================================