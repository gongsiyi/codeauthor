1:2d72200: /*
1:2d72200:  * Licensed to the Apache Software Foundation (ASF) under one
1:2d72200:  * or more contributor license agreements.  See the NOTICE file
1:2d72200:  * distributed with this work for additional information
1:2d72200:  * regarding copyright ownership.  The ASF licenses this file
1:2d72200:  * to you under the Apache License, Version 2.0 (the
1:2d72200:  * "License"); you may not use this file except in compliance
1:2d72200:  * with the License.  You may obtain a copy of the License at
1:2d72200:  *
1:2d72200:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2d72200:  *
1:2d72200:  * Unless required by applicable law or agreed to in writing,
1:2d72200:  * software distributed under the License is distributed on an
1:2d72200:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2d72200:  * KIND, either express or implied.  See the License for the
1:2d72200:  * specific language governing permissions and limitations
1:2d72200:  * under the License.
1:2d72200:  */
1:8914925: package org.apache.aries.application.utils.manifest;
1:8914925: 
1:8914925: import java.io.File;
1:8914925: import java.util.Map;
1:8914925: import java.util.jar.Manifest;
1:8914925: 
1:8914925: import org.apache.aries.application.utils.AppConstants;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:910fec0: import org.apache.aries.util.manifest.BundleManifest;
1:910fec0: import org.apache.aries.util.manifest.ManifestProcessor;
1:8914925: import org.osgi.framework.Version;
1:8914925: 
1:8914925: public class ManifestDefaultsInjector
1:8914925: {
1:8914925:   /**
1:8914925:    * Quick adapter to update a Manifest, using content of a Zip File.
1:8914925:    * <p>
1:8914925:    * This is really a wrapper of updateManifest(Manifest,String,IDirectory), with the
1:8914925:    * IDirectory being being created from the Zip File. This method avoids other Bundles
1:8914925:    * requiring IDirectory solely for calling updateManifest.
1:8914925:    * <p>
1:8914925:    * @param mf Manifest to be updated
1:8914925:    * @param appName The name to use for this app, if the name contains 
1:8914925:    * a '_' char then the portion after the '_' is used, if possible, as 
1:8914925:    * the application version.
1:8914925:    * @param zip Content to use for application.
1:8914925:    * @return true if manifest modified, false otherwise.
1:8914925:    */
1:8914925:   public static boolean updateManifest(Manifest mf, String appName, File zip){
1:8914925:     IDirectory appPathIDir = FileSystem.getFSRoot(zip);
1:8914925:     boolean result = updateManifest(mf, appName, appPathIDir);
1:8914925:     return result;
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Tests the supplied manifest for the presence of expected 
1:8914925:    * attributes, and where missing, adds them, and defaults 
1:8914925:    * their values appropriately.
1:8914925:    * 
1:8914925:    * @param mf The manifest to test & update if needed.
1:8914925:    * @param appName The name to use for this app, if the name contains 
1:8914925:    * a '_' char then the portion after the '_' is used, if possible, as 
1:8914925:    * the application version.
1:8914925:    * @param appDir The IDirectory to scan to build application content
1:8914925:    * property
1:8914925:    * @return true if manifest modified, false otherwise.
1:8914925:    */
1:8914925:   public static boolean updateManifest(Manifest mf, String appName, IDirectory appDir){ 
1:8914925:     Map<String, String> props = ManifestProcessor.readManifestIntoMap(mf);
1:8914925:     String extracted[] = extractAppNameAndVersionFromNameIfPossible(appName);
1:8914925:     String name = extracted[0];
1:8914925:     String version = extracted[1];
1:8914925: 
1:8914925:     boolean updated = false;
1:8914925:     updated |= defaultAppSymbolicName(mf, props, name);
1:8914925:     updated |= defaultAppName(mf, props, name);
1:8914925:     updated |= defaultVersion(mf, props, version);
1:8914925:     updated |= defaultAppScope(mf, props, name, version);
1:8914925:     updated |= defaultAppContent(mf, props, appDir);
1:8914925:     
1:8914925:     return updated;
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Takes a compound name_version string, and returns the Name & Version information. 
1:8914925:    * <p>
1:8914925:    * @param name Contains name data related to this app. Expected format is   name_version  
1:8914925:    * @return Array of String, index 0 is appName, index 1 is Version. 
1:8914925:    * <br> Name will be the appname retrieved from the 'name' argument, Version will be the 
1:8914925:    * version if found and valid, otherwise will be defaulted.
1:8914925:    */
1:8914925:   private static String[] extractAppNameAndVersionFromNameIfPossible(String name){
1:8914925:     String retval[] = new String[2];
1:8914925:     String appName = name;
1:8914925:     String defaultedVersion;
1:8914925: 
1:8914925:     int index = name.indexOf('_');
1:8914925: 
1:8914925:     if (index != -1) {
1:8914925:       appName = name.substring(0, index);
1:8914925:       defaultedVersion = name.substring(index + 1);
1:8914925: 
1:8914925:       try {
1:8914925:         new Version(defaultedVersion);
1:8914925:       } catch (IllegalArgumentException e) {
1:8914925:         // this is not an error condition
1:8914925:         defaultedVersion = AppConstants.DEFAULT_VERSION;
1:8914925:       }
1:8914925:     } else {
1:8914925:       defaultedVersion = AppConstants.DEFAULT_VERSION;
1:8914925:     }
1:8914925: 
1:8914925:     retval[0] = appName;
1:8914925:     retval[1] = defaultedVersion;
1:8914925:     
1:8914925:     return retval;  
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Sets the app symbolic name into the manifest, if not already present.
1:8914925:    * 
1:8914925:    * @param mf manifest to update
1:8914925:    * @param props parsed manifest used to test if already present. 
1:8914925:    * @param appName used for name if missing
1:8914925:    * @return true if manifest is modified, false otherwise.
1:8914925:    */
1:8914925:   private static boolean defaultAppSymbolicName(Manifest mf, Map<String, String> props, String appName){
1:8914925:     boolean updated = false;
1:8914925:     if (!props.containsKey(AppConstants.APPLICATION_SYMBOLIC_NAME)) {
1:8914925:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_SYMBOLIC_NAME, appName);
1:8914925:       updated = true;
1:8914925:     }
1:8914925:     return updated;    
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Sets the app name into the manifest, if not already present.
1:8914925:    * 
1:8914925:    * @param mf manifest to update
1:8914925:    * @param props parsed manifest used to test if already present. 
1:8914925:    * @param appName used for name if missing
1:8914925:    * @return true if manifest is modified, false otherwise.
1:8914925:    */  
1:8914925:   private static boolean defaultAppName(Manifest mf, Map<String, String> props, String appName){
1:8914925:     boolean updated = false;
1:8914925:     if (!props.containsKey(AppConstants.APPLICATION_NAME)) {
1:8914925:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_NAME, appName);
1:8914925:       updated = true;
1:8914925:     }
1:8914925:     return updated;    
1:8914925:   }
1:8914925:     
1:8914925:   /**
1:8914925:    * Sets the app version into the manifest, if not already present.
1:8914925:    * 
1:8914925:    * @param mf manifest to update
1:8914925:    * @param props parsed manifest used to test if already present. 
1:8914925:    * @param appVersion used for version if missing
1:8914925:    * @return true if manifest is modified, false otherwise.
1:8914925:    */  
1:8914925:   private static boolean defaultVersion(Manifest mf, Map<String, String> props, String appVersion){
1:8914925:     boolean updated = false;
1:8914925:     if (!props.containsKey(AppConstants.APPLICATION_VERSION)) {
1:8914925:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_VERSION, appVersion);
1:8914925:       updated = true;
1:8914925:     }
1:8914925:     return updated;
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Sets the app scope into the manifest, if not already present.
1:8914925:    * 
1:8914925:    * @param mf manifest to update
1:8914925:    * @param props parsed manifest used to test if already present. 
1:8914925:    * @param name used to build appScope if app symbolic name not set.
1:8914925:    * @param version used to build appScope if app version missing.
1:8914925:    * @return true if manifest is modified, false otherwise.
1:8914925:    */   
1:8914925:   private static boolean defaultAppScope(Manifest mf, Map<String, String> props, String name, String version){
1:8914925:     boolean updated = false;
1:8914925:     if (!props.containsKey(AppConstants.APPLICATION_SCOPE)) {
1:8914925: 
1:8914925:       String appSymbolicName;
1:8914925:       if (props.containsKey(AppConstants.APPLICATION_SYMBOLIC_NAME)) {
1:8914925:         appSymbolicName = props.get(AppConstants.APPLICATION_SYMBOLIC_NAME);
1:8914925:       } else {
1:8914925:         appSymbolicName = name;
1:8914925:       }
1:8914925: 
1:8914925:       String appVersion;
1:8914925:       if (props.containsKey(AppConstants.APPLICATION_VERSION)) {
1:8914925:         appVersion = props.get(AppConstants.APPLICATION_VERSION);
1:8914925:       } else {
1:8914925:         appVersion = version;
1:8914925:       }
1:8914925: 
1:8914925:       String appScope = appSymbolicName + '_' + appVersion;
1:8914925:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_SCOPE, appScope);
1:8914925:       updated = true;
1:8914925:     }
1:8914925:     return updated;
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Sets the app content into the manifest, if not already present.
1:8914925:    * <p>
1:8914925:    * This method will NOT set the appcontent if it is unable to build it.
1:8914925:    * This is important, as the absence of appcontent is used by some callers
1:8914925:    * to test if a manifest contains all required content.
1:8914925:    * 
1:8914925:    * @param mf manifest to update
1:8914925:    * @param props parsed manifest used to test if already present. 
1:8914925:    * @param appDir used to build app content if missing.
1:8914925:    * @return true if manifest is modified, false otherwise.
1:8914925:    */    
1:8914925:   private static boolean defaultAppContent(Manifest mf, Map<String, String> props, IDirectory appDir){
1:8914925:     boolean updated = false;
1:8914925:     if (!props.containsKey(AppConstants.APPLICATION_CONTENT)) {
1:8914925:       String appContent = calculateAppContent(appDir);
1:8914925:       if (appContent != null) {
1:8914925:         mf.getMainAttributes().putValue(AppConstants.APPLICATION_CONTENT, appContent);
1:8914925:         updated = true;
1:8914925:       }
1:8914925:     }
1:8914925:     return updated;    
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Processes an IDirectory to find targets that require adding to the application content attrib.
1:8914925:    * 
1:8914925:    * @param appDir The IDirectory to scan
1:8914925:    * @return AppContent string, or null if no content was found.
1:8914925:    */
1:8914925:   private static String calculateAppContent(IDirectory appDir){
1:8914925:     StringBuilder builder = new StringBuilder();
1:8914925:     for (IFile file : appDir) {
1:8914925:       processPossibleBundle(file, builder);
1:8914925:     }
1:8914925:     String returnVal = null;
1:8914925:     if (builder.length() > 0) {
1:8914925:       builder.deleteCharAt(builder.length() - 1);
1:8914925:       returnVal = builder.toString();
1:8914925:     }
1:8914925:     return returnVal;
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * This method works out if the given IFile represents an OSGi bundle and if
1:8914925:    * it is then we append a matching rule to the String builder.
1:8914925:    * 
1:8914925:    * @param file    to file to check.
1:8914925:    * @param builder the builder to append to.
1:8914925:    */
1:8914925:   private static void processPossibleBundle(IFile file, StringBuilder builder)
1:8914925:   {
1:8914925:     if (file.isDirectory() || (file.isFile() && (file.getName().endsWith(".jar") || file.getName().endsWith(".war")))) {
1:8914925:       BundleManifest bundleMf = BundleManifest.fromBundle(file);
1:8914925:       if (bundleMf != null) {
1:8914925:         String manifestVersion = bundleMf.getManifestVersion();
1:8914925:         String name = bundleMf.getSymbolicName();
1:8914925:         String version = bundleMf.getVersion().toString();
1:8914925: 
1:8914925:         // if the bundle manifest version is 2 AND a symbolic name is specified we have a valid bundle
1:8914925:         if ("2".equals(manifestVersion) && name != null) {
1:8914925: 
1:8914925:           builder.append(name);
1:8914925: 
1:8914925:           // bundle version is not a required manifest header
1:8914925:           if (version != null) {
1:8914925:             builder.append(";version=\"[");
1:8914925:             builder.append(version);
1:8914925:             builder.append(',');
1:8914925:             builder.append(version);
1:8914925:             builder.append("]\"");
1:8914925:           }
1:8914925: 
1:8914925:           // the last comma will be removed once all content has been added
1:8914925:           builder.append(",");
1:8914925:         }
1:8914925:       }
1:8914925:     }
1:8914925:   }
1:8914925: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.apache.aries.util.manifest.ManifestProcessor;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:2d72200
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.utils.manifest;
1: 
1: import java.io.File;
1: import java.util.Map;
1: import java.util.jar.Manifest;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
1: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
1: import org.osgi.framework.Version;
1: 
1: public class ManifestDefaultsInjector
1: {
1:   /**
1:    * Quick adapter to update a Manifest, using content of a Zip File.
1:    * <p>
1:    * This is really a wrapper of updateManifest(Manifest,String,IDirectory), with the
1:    * IDirectory being being created from the Zip File. This method avoids other Bundles
1:    * requiring IDirectory solely for calling updateManifest.
1:    * <p>
1:    * @param mf Manifest to be updated
1:    * @param appName The name to use for this app, if the name contains 
1:    * a '_' char then the portion after the '_' is used, if possible, as 
1:    * the application version.
1:    * @param zip Content to use for application.
1:    * @return true if manifest modified, false otherwise.
1:    */
1:   public static boolean updateManifest(Manifest mf, String appName, File zip){
1:     IDirectory appPathIDir = FileSystem.getFSRoot(zip);
1:     boolean result = updateManifest(mf, appName, appPathIDir);
1:     return result;
1:   }
1:   
1:   /**
1:    * Tests the supplied manifest for the presence of expected 
1:    * attributes, and where missing, adds them, and defaults 
1:    * their values appropriately.
1:    * 
1:    * @param mf The manifest to test & update if needed.
1:    * @param appName The name to use for this app, if the name contains 
1:    * a '_' char then the portion after the '_' is used, if possible, as 
1:    * the application version.
1:    * @param appDir The IDirectory to scan to build application content
1:    * property
1:    * @return true if manifest modified, false otherwise.
1:    */
1:   public static boolean updateManifest(Manifest mf, String appName, IDirectory appDir){ 
1:     Map<String, String> props = ManifestProcessor.readManifestIntoMap(mf);
1:     String extracted[] = extractAppNameAndVersionFromNameIfPossible(appName);
1:     String name = extracted[0];
1:     String version = extracted[1];
1: 
1:     boolean updated = false;
1:     updated |= defaultAppSymbolicName(mf, props, name);
1:     updated |= defaultAppName(mf, props, name);
1:     updated |= defaultVersion(mf, props, version);
1:     updated |= defaultAppScope(mf, props, name, version);
1:     updated |= defaultAppContent(mf, props, appDir);
1:     
1:     return updated;
1:   }
1:   
1:   /**
1:    * Takes a compound name_version string, and returns the Name & Version information. 
1:    * <p>
1:    * @param name Contains name data related to this app. Expected format is   name_version  
1:    * @return Array of String, index 0 is appName, index 1 is Version. 
1:    * <br> Name will be the appname retrieved from the 'name' argument, Version will be the 
1:    * version if found and valid, otherwise will be defaulted.
1:    */
1:   private static String[] extractAppNameAndVersionFromNameIfPossible(String name){
1:     String retval[] = new String[2];
1:     String appName = name;
1:     String defaultedVersion;
1: 
1:     int index = name.indexOf('_');
1: 
1:     if (index != -1) {
1:       appName = name.substring(0, index);
1:       defaultedVersion = name.substring(index + 1);
1: 
1:       try {
1:         new Version(defaultedVersion);
1:       } catch (IllegalArgumentException e) {
1:         // this is not an error condition
1:         defaultedVersion = AppConstants.DEFAULT_VERSION;
1:       }
1:     } else {
1:       defaultedVersion = AppConstants.DEFAULT_VERSION;
1:     }
1: 
1:     retval[0] = appName;
1:     retval[1] = defaultedVersion;
1:     
1:     return retval;  
1:   }
1:   
1:   /**
1:    * Sets the app symbolic name into the manifest, if not already present.
1:    * 
1:    * @param mf manifest to update
1:    * @param props parsed manifest used to test if already present. 
1:    * @param appName used for name if missing
1:    * @return true if manifest is modified, false otherwise.
1:    */
1:   private static boolean defaultAppSymbolicName(Manifest mf, Map<String, String> props, String appName){
1:     boolean updated = false;
1:     if (!props.containsKey(AppConstants.APPLICATION_SYMBOLIC_NAME)) {
1:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_SYMBOLIC_NAME, appName);
1:       updated = true;
1:     }
1:     return updated;    
1:   }
1:   
1:   /**
1:    * Sets the app name into the manifest, if not already present.
1:    * 
1:    * @param mf manifest to update
1:    * @param props parsed manifest used to test if already present. 
1:    * @param appName used for name if missing
1:    * @return true if manifest is modified, false otherwise.
1:    */  
1:   private static boolean defaultAppName(Manifest mf, Map<String, String> props, String appName){
1:     boolean updated = false;
1:     if (!props.containsKey(AppConstants.APPLICATION_NAME)) {
1:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_NAME, appName);
1:       updated = true;
1:     }
1:     return updated;    
1:   }
1:     
1:   /**
1:    * Sets the app version into the manifest, if not already present.
1:    * 
1:    * @param mf manifest to update
1:    * @param props parsed manifest used to test if already present. 
1:    * @param appVersion used for version if missing
1:    * @return true if manifest is modified, false otherwise.
1:    */  
1:   private static boolean defaultVersion(Manifest mf, Map<String, String> props, String appVersion){
1:     boolean updated = false;
1:     if (!props.containsKey(AppConstants.APPLICATION_VERSION)) {
1:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_VERSION, appVersion);
1:       updated = true;
1:     }
1:     return updated;
1:   }
1:   
1:   /**
1:    * Sets the app scope into the manifest, if not already present.
1:    * 
1:    * @param mf manifest to update
1:    * @param props parsed manifest used to test if already present. 
1:    * @param name used to build appScope if app symbolic name not set.
1:    * @param version used to build appScope if app version missing.
1:    * @return true if manifest is modified, false otherwise.
1:    */   
1:   private static boolean defaultAppScope(Manifest mf, Map<String, String> props, String name, String version){
1:     boolean updated = false;
1:     if (!props.containsKey(AppConstants.APPLICATION_SCOPE)) {
1: 
1:       String appSymbolicName;
1:       if (props.containsKey(AppConstants.APPLICATION_SYMBOLIC_NAME)) {
1:         appSymbolicName = props.get(AppConstants.APPLICATION_SYMBOLIC_NAME);
1:       } else {
1:         appSymbolicName = name;
1:       }
1: 
1:       String appVersion;
1:       if (props.containsKey(AppConstants.APPLICATION_VERSION)) {
1:         appVersion = props.get(AppConstants.APPLICATION_VERSION);
1:       } else {
1:         appVersion = version;
1:       }
1: 
1:       String appScope = appSymbolicName + '_' + appVersion;
1:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_SCOPE, appScope);
1:       updated = true;
1:     }
1:     return updated;
1:   }
1:   
1:   /**
1:    * Sets the app content into the manifest, if not already present.
1:    * <p>
1:    * This method will NOT set the appcontent if it is unable to build it.
1:    * This is important, as the absence of appcontent is used by some callers
1:    * to test if a manifest contains all required content.
1:    * 
1:    * @param mf manifest to update
1:    * @param props parsed manifest used to test if already present. 
1:    * @param appDir used to build app content if missing.
1:    * @return true if manifest is modified, false otherwise.
1:    */    
1:   private static boolean defaultAppContent(Manifest mf, Map<String, String> props, IDirectory appDir){
1:     boolean updated = false;
1:     if (!props.containsKey(AppConstants.APPLICATION_CONTENT)) {
1:       String appContent = calculateAppContent(appDir);
1:       if (appContent != null) {
1:         mf.getMainAttributes().putValue(AppConstants.APPLICATION_CONTENT, appContent);
1:         updated = true;
1:       }
1:     }
1:     return updated;    
1:   }
1:   
1:   /**
1:    * Processes an IDirectory to find targets that require adding to the application content attrib.
1:    * 
1:    * @param appDir The IDirectory to scan
1:    * @return AppContent string, or null if no content was found.
1:    */
1:   private static String calculateAppContent(IDirectory appDir){
1:     StringBuilder builder = new StringBuilder();
1:     for (IFile file : appDir) {
1:       processPossibleBundle(file, builder);
1:     }
1:     String returnVal = null;
1:     if (builder.length() > 0) {
1:       builder.deleteCharAt(builder.length() - 1);
1:       returnVal = builder.toString();
1:     }
1:     return returnVal;
1:   }
1:   
1:   /**
1:    * This method works out if the given IFile represents an OSGi bundle and if
1:    * it is then we append a matching rule to the String builder.
1:    * 
1:    * @param file    to file to check.
1:    * @param builder the builder to append to.
1:    */
1:   private static void processPossibleBundle(IFile file, StringBuilder builder)
1:   {
1:     if (file.isDirectory() || (file.isFile() && (file.getName().endsWith(".jar") || file.getName().endsWith(".war")))) {
1:       BundleManifest bundleMf = BundleManifest.fromBundle(file);
1:       if (bundleMf != null) {
1:         String manifestVersion = bundleMf.getManifestVersion();
1:         String name = bundleMf.getSymbolicName();
1:         String version = bundleMf.getVersion().toString();
1: 
1:         // if the bundle manifest version is 2 AND a symbolic name is specified we have a valid bundle
1:         if ("2".equals(manifestVersion) && name != null) {
1: 
1:           builder.append(name);
1: 
1:           // bundle version is not a required manifest header
1:           if (version != null) {
1:             builder.append(";version=\"[");
1:             builder.append(version);
1:             builder.append(',');
1:             builder.append(version);
1:             builder.append("]\"");
1:           }
1: 
1:           // the last comma will be removed once all content has been added
1:           builder.append(",");
1:         }
1:       }
1:     }
1:   }
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.filesystem.FileSystem;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.manifest;
0: 
0: import java.io.File;
0: import java.util.Map;
0: import java.util.jar.Manifest;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.filesystem.utils.FileSystem;
0: import org.apache.aries.application.utils.AppConstants;
0: import org.osgi.framework.Version;
0: 
0: public class ManifestDefaultsInjector
0: {
0:   /**
0:    * Quick adapter to update a Manifest, using content of a Zip File.
0:    * <p>
0:    * This is really a wrapper of updateManifest(Manifest,String,IDirectory), with the
0:    * IDirectory being being created from the Zip File. This method avoids other Bundles
0:    * requiring IDirectory solely for calling updateManifest.
0:    * <p>
0:    * @param mf Manifest to be updated
0:    * @param appName The name to use for this app, if the name contains 
0:    * a '_' char then the portion after the '_' is used, if possible, as 
0:    * the application version.
0:    * @param zip Content to use for application.
0:    * @return true if manifest modified, false otherwise.
0:    */
0:   public static boolean updateManifest(Manifest mf, String appName, File zip){
0:     IDirectory appPathIDir = FileSystem.getFSRoot(zip);
0:     boolean result = updateManifest(mf, appName, appPathIDir);
0:     return result;
0:   }
0:   
0:   /**
0:    * Tests the supplied manifest for the presence of expected 
0:    * attributes, and where missing, adds them, and defaults 
0:    * their values appropriately.
0:    * 
0:    * @param mf The manifest to test & update if needed.
0:    * @param appName The name to use for this app, if the name contains 
0:    * a '_' char then the portion after the '_' is used, if possible, as 
0:    * the application version.
0:    * @param appDir The IDirectory to scan to build application content
0:    * property
0:    * @return true if manifest modified, false otherwise.
0:    */
0:   public static boolean updateManifest(Manifest mf, String appName, IDirectory appDir){ 
0:     Map<String, String> props = ManifestProcessor.readManifestIntoMap(mf);
0:     String extracted[] = extractAppNameAndVersionFromNameIfPossible(appName);
0:     String name = extracted[0];
0:     String version = extracted[1];
0: 
0:     boolean updated = false;
0:     updated |= defaultAppSymbolicName(mf, props, name);
0:     updated |= defaultAppName(mf, props, name);
0:     updated |= defaultVersion(mf, props, version);
0:     updated |= defaultAppScope(mf, props, name, version);
0:     updated |= defaultAppContent(mf, props, appDir);
0:     
0:     return updated;
0:   }
0:   
0:   /**
0:    * Takes a compound name_version string, and returns the Name & Version information. 
0:    * <p>
0:    * @param name Contains name data related to this app. Expected format is   name_version  
0:    * @return Array of String, index 0 is appName, index 1 is Version. 
0:    * <br> Name will be the appname retrieved from the 'name' argument, Version will be the 
0:    * version if found and valid, otherwise will be defaulted.
0:    */
0:   private static String[] extractAppNameAndVersionFromNameIfPossible(String name){
0:     String retval[] = new String[2];
0:     String appName = name;
0:     String defaultedVersion;
0: 
0:     int index = name.indexOf('_');
0: 
0:     if (index != -1) {
0:       appName = name.substring(0, index);
0:       defaultedVersion = name.substring(index + 1);
0: 
0:       try {
0:         new Version(defaultedVersion);
0:       } catch (IllegalArgumentException e) {
0:         // this is not an error condition
0:         defaultedVersion = AppConstants.DEFAULT_VERSION;
0:       }
0:     } else {
0:       defaultedVersion = AppConstants.DEFAULT_VERSION;
0:     }
0: 
0:     retval[0] = appName;
0:     retval[1] = defaultedVersion;
0:     
0:     return retval;  
0:   }
0:   
0:   /**
0:    * Sets the app symbolic name into the manifest, if not already present.
0:    * 
0:    * @param mf manifest to update
0:    * @param props parsed manifest used to test if already present. 
0:    * @param appName used for name if missing
0:    * @return true if manifest is modified, false otherwise.
0:    */
0:   private static boolean defaultAppSymbolicName(Manifest mf, Map<String, String> props, String appName){
0:     boolean updated = false;
0:     if (!props.containsKey(AppConstants.APPLICATION_SYMBOLIC_NAME)) {
0:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_SYMBOLIC_NAME, appName);
0:       updated = true;
0:     }
0:     return updated;    
0:   }
0:   
0:   /**
0:    * Sets the app name into the manifest, if not already present.
0:    * 
0:    * @param mf manifest to update
0:    * @param props parsed manifest used to test if already present. 
0:    * @param appName used for name if missing
0:    * @return true if manifest is modified, false otherwise.
0:    */  
0:   private static boolean defaultAppName(Manifest mf, Map<String, String> props, String appName){
0:     boolean updated = false;
0:     if (!props.containsKey(AppConstants.APPLICATION_NAME)) {
0:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_NAME, appName);
0:       updated = true;
0:     }
0:     return updated;    
0:   }
0:     
0:   /**
0:    * Sets the app version into the manifest, if not already present.
0:    * 
0:    * @param mf manifest to update
0:    * @param props parsed manifest used to test if already present. 
0:    * @param appVersion used for version if missing
0:    * @return true if manifest is modified, false otherwise.
0:    */  
0:   private static boolean defaultVersion(Manifest mf, Map<String, String> props, String appVersion){
0:     boolean updated = false;
0:     if (!props.containsKey(AppConstants.APPLICATION_VERSION)) {
0:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_VERSION, appVersion);
0:       updated = true;
0:     }
0:     return updated;
0:   }
0:   
0:   /**
0:    * Sets the app scope into the manifest, if not already present.
0:    * 
0:    * @param mf manifest to update
0:    * @param props parsed manifest used to test if already present. 
0:    * @param name used to build appScope if app symbolic name not set.
0:    * @param version used to build appScope if app version missing.
0:    * @return true if manifest is modified, false otherwise.
0:    */   
0:   private static boolean defaultAppScope(Manifest mf, Map<String, String> props, String name, String version){
0:     boolean updated = false;
0:     if (!props.containsKey(AppConstants.APPLICATION_SCOPE)) {
0: 
0:       String appSymbolicName;
0:       if (props.containsKey(AppConstants.APPLICATION_SYMBOLIC_NAME)) {
0:         appSymbolicName = props.get(AppConstants.APPLICATION_SYMBOLIC_NAME);
0:       } else {
0:         appSymbolicName = name;
0:       }
0: 
0:       String appVersion;
0:       if (props.containsKey(AppConstants.APPLICATION_VERSION)) {
0:         appVersion = props.get(AppConstants.APPLICATION_VERSION);
0:       } else {
0:         appVersion = version;
0:       }
0: 
0:       String appScope = appSymbolicName + '_' + appVersion;
0:       mf.getMainAttributes().putValue(AppConstants.APPLICATION_SCOPE, appScope);
0:       updated = true;
0:     }
0:     return updated;
0:   }
0:   
0:   /**
0:    * Sets the app content into the manifest, if not already present.
0:    * <p>
0:    * This method will NOT set the appcontent if it is unable to build it.
0:    * This is important, as the absence of appcontent is used by some callers
0:    * to test if a manifest contains all required content.
0:    * 
0:    * @param mf manifest to update
0:    * @param props parsed manifest used to test if already present. 
0:    * @param appDir used to build app content if missing.
0:    * @return true if manifest is modified, false otherwise.
0:    */    
0:   private static boolean defaultAppContent(Manifest mf, Map<String, String> props, IDirectory appDir){
0:     boolean updated = false;
0:     if (!props.containsKey(AppConstants.APPLICATION_CONTENT)) {
0:       String appContent = calculateAppContent(appDir);
0:       if (appContent != null) {
0:         mf.getMainAttributes().putValue(AppConstants.APPLICATION_CONTENT, appContent);
0:         updated = true;
0:       }
0:     }
0:     return updated;    
0:   }
0:   
0:   /**
0:    * Processes an IDirectory to find targets that require adding to the application content attrib.
0:    * 
0:    * @param appDir The IDirectory to scan
0:    * @return AppContent string, or null if no content was found.
0:    */
0:   private static String calculateAppContent(IDirectory appDir){
0:     StringBuilder builder = new StringBuilder();
0:     for (IFile file : appDir) {
0:       processPossibleBundle(file, builder);
0:     }
0:     String returnVal = null;
0:     if (builder.length() > 0) {
0:       builder.deleteCharAt(builder.length() - 1);
0:       returnVal = builder.toString();
0:     }
0:     return returnVal;
0:   }
0:   
0:   /**
0:    * This method works out if the given IFile represents an OSGi bundle and if
0:    * it is then we append a matching rule to the String builder.
0:    * 
0:    * @param file    to file to check.
0:    * @param builder the builder to append to.
0:    */
0:   private static void processPossibleBundle(IFile file, StringBuilder builder)
0:   {
0:     if (file.isDirectory() || (file.isFile() && (file.getName().endsWith(".jar") || file.getName().endsWith(".war")))) {
0:       BundleManifest bundleMf = BundleManifest.fromBundle(file);
0:       if (bundleMf != null) {
0:         String manifestVersion = bundleMf.getManifestVersion();
0:         String name = bundleMf.getSymbolicName();
0:         String version = bundleMf.getVersion().toString();
0: 
0:         // if the bundle manifest version is 2 AND a symbolic name is specified we have a valid bundle
0:         if ("2".equals(manifestVersion) && name != null) {
0: 
0:           builder.append(name);
0: 
0:           // bundle version is not a required manifest header
0:           if (version != null) {
0:             builder.append(";version=\"[");
0:             builder.append(version);
0:             builder.append(',');
0:             builder.append(version);
0:             builder.append("]\"");
0:           }
0: 
0:           // the last comma will be removed once all content has been added
0:           builder.append(",");
0:         }
0:       }
0:     }
0:   }
0: }
============================================================================