1:3162c07: /*
1:95e4847:  * Licensed to the Apache Software Foundation (ASF) under one
1:95e4847:  * or more contributor license agreements.  See the NOTICE file
1:95e4847:  * distributed with this work for additional information
1:95e4847:  * regarding copyright ownership.  The ASF licenses this file
1:95e4847:  * to you under the Apache License, Version 2.0 (the
1:95e4847:  * "License"); you may not use this file except in compliance
1:95e4847:  * with the License.  You may obtain a copy of the License at
1:95e4847:  *
1:95e4847:  *   http://www.apache.org/licenses/LICENSE-2.0
1:95e4847:  *
1:95e4847:  * Unless required by applicable law or agreed to in writing,
1:95e4847:  * software distributed under the License is distributed on an
1:95e4847:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:95e4847:  * KIND, either express or implied.  See the License for the
1:95e4847:  * specific language governing permissions and limitations
1:95e4847:  * under the License.
1:3162c07:  */
1:5297b83: package org.apache.aries.application.impl;
1:3162c07: 
1:d04041b: import static org.junit.Assert.*;
1:d04041b: 
1:3162c07: import java.io.IOException;
1:de5b346: import java.util.HashMap;
1:d04041b: import java.util.List;
1:de5b346: import java.util.Map;
1:3162c07: 
1:3162c07: import junit.framework.Assert;
1:3162c07: 
1:3162c07: import org.apache.aries.application.ApplicationMetadata;
1:beeb1d7: import org.apache.aries.application.ApplicationMetadataFactory;
1:d04041b: import org.apache.aries.application.Content;
1:d04041b: import org.apache.aries.application.ServiceDeclaration;
1:beeb1d7: import org.apache.aries.application.impl.ApplicationMetadataFactoryImpl;
1:3162c07: import org.junit.Test;
1:d04041b: import org.osgi.framework.Version;
1:3162c07: 
1:3162c07: public class ApplicationMetadataImplTest
1:3162c07: {
1:3162c07:   @Test
1:3162c07:   public void testBasicMetadataCreation() throws IOException
1:3162c07:   {
1:beeb1d7:     ApplicationMetadataFactory manager = new ApplicationMetadataFactoryImpl();
1:d7dcea4:     ApplicationMetadata app = manager.parseApplicationMetadata(getClass().getResourceAsStream("/META-INF/APPLICATION.MF"));
1:3162c07:     
1:3162c07:     Assert.assertEquals("Travel Reservation", app.getApplicationName());
2:3162c07:   }
1:d04041b:   @Test
1:d04041b:   public void testMetadataCreation() throws Exception
1:d04041b:   {
1:d04041b:     ApplicationMetadataFactory manager = new ApplicationMetadataFactoryImpl();
1:d04041b:     ApplicationMetadata app = manager.parseApplicationMetadata(getClass().getResourceAsStream("/META-INF/APPLICATION4.MF"));
1:d04041b:     assertEquals("Travel Reservation", app.getApplicationName());
1:d04041b:     assertEquals("com.travel.reservation", app.getApplicationSymbolicName());
1:d04041b:     assertEquals(Version.parseVersion("1.2.0"), app.getApplicationVersion());
1:d04041b:     List<Content> appContents = app.getApplicationContents();
1:d04041b:     assertEquals(2, appContents.size());
1:d04041b:     Content appContent1 = new ContentImpl("com.travel.reservation.business");
1:de5b346:     Map<String, String> attrs = new HashMap<String, String>();
1:de5b346:     attrs.put("version", "\"[1.1.0,1.2.0)\"");
1:d04041b:     Content appContent2 = new ContentImpl("com.travel.reservation.web", attrs);
1:d04041b:     assertTrue(appContents.contains(appContent2));
1:d04041b:     assertTrue(appContents.contains(appContent1));
1:d04041b:     List<ServiceDeclaration> importedService = app.getApplicationImportServices();
1:d04041b:     assertEquals(2, importedService.size());
1:d04041b:     assertTrue(importedService.contains(new ServiceDeclarationImpl("com.travel.flight.api")));
1:d04041b:     assertTrue(importedService.contains(new ServiceDeclarationImpl("com.travel.rail.api")));
1:d04041b:     List<ServiceDeclaration> exportedService = app.getApplicationExportServices();
1:d04041b:     assertTrue(exportedService.contains(new ServiceDeclarationImpl("com.travel.reservation")));
1:d04041b:     
1:d04041b:     
1:d04041b:   }
1:95e4847: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Map<String, String> attrs = new HashMap<String, String>();
1:     attrs.put("version", "\"[1.1.0,1.2.0)\"");
commit:910fec0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:d04041b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
1: 
1: import java.util.List;
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.ServiceDeclaration;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.osgi.framework.Version;
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testMetadataCreation() throws Exception
1:   {
1:     ApplicationMetadataFactory manager = new ApplicationMetadataFactoryImpl();
1:     ApplicationMetadata app = manager.parseApplicationMetadata(getClass().getResourceAsStream("/META-INF/APPLICATION4.MF"));
1:     assertEquals("Travel Reservation", app.getApplicationName());
1:     assertEquals("com.travel.reservation", app.getApplicationSymbolicName());
1:     assertEquals(Version.parseVersion("1.2.0"), app.getApplicationVersion());
1:     List<Content> appContents = app.getApplicationContents();
1:     assertEquals(2, appContents.size());
1:     Content appContent1 = new ContentImpl("com.travel.reservation.business");
0:     NameValueMap<String, String> attrs = new NameValueMap<String, String>();
0:     attrs.addToCollection("version", "\"[1.1.0,1.2.0)\"");
1:     Content appContent2 = new ContentImpl("com.travel.reservation.web", attrs);
1:     assertTrue(appContents.contains(appContent2));
1:     assertTrue(appContents.contains(appContent1));
1:     List<ServiceDeclaration> importedService = app.getApplicationImportServices();
1:     assertEquals(2, importedService.size());
1:     assertTrue(importedService.contains(new ServiceDeclarationImpl("com.travel.flight.api")));
1:     assertTrue(importedService.contains(new ServiceDeclarationImpl("com.travel.rail.api")));
1:     List<ServiceDeclaration> exportedService = app.getApplicationExportServices();
1:     assertTrue(exportedService.contains(new ServiceDeclarationImpl("com.travel.reservation")));
1:     
1:     
1:   }
commit:beeb1d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.ApplicationMetadataFactory;
1: import org.apache.aries.application.impl.ApplicationMetadataFactoryImpl;
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadataFactory manager = new ApplicationMetadataFactoryImpl();
commit:5297b83
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.impl;
commit:d7dcea4
/////////////////////////////////////////////////////////////////////////
1:     ApplicationMetadata app = manager.parseApplicationMetadata(getClass().getResourceAsStream("/META-INF/APPLICATION.MF"));
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:95e4847
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
/////////////////////////////////////////////////////////////////////////
1: }
commit:3162c07
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * IBM Confidential
0:  * 
0:  * OCO Source Materials
0:  * 
0:  * Copyright IBM Corp. 2009
0:  * 
0:  * The source code for this program is not published or other-
0:  * wise divested of its trade secrets, irrespective of what has
0:  * been deposited with the U.S. Copyright Office.
0:  * 
0:  * Change activity:
0:  * 
0:  * Issue       Date        Name     Description
0:  * ----------- ----------- -------- ------------------------------------
1:  */
0: package org.apache.aries.application.utils;
1: 
1: import java.io.IOException;
1: 
1: import junit.framework.Assert;
1: 
1: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.ApplicationMetadataManager;
0: import org.apache.aries.application.impl.ApplicationMetadataManagerImpl;
1: import org.junit.Test;
1: 
1: public class ApplicationMetadataImplTest
1: {
1:   @Test
1:   public void testBasicMetadataCreation() throws IOException
1:   {
0:     ApplicationMetadataManager manager = new ApplicationMetadataManagerImpl();
0:     ApplicationMetadata app = manager.parseApplication(getClass().getResourceAsStream("/META-INF/APPLICATION.MF"));
1:     
1:     Assert.assertEquals("Travel Reservation", app.getApplicationName());
1:   }
1: }
============================================================================