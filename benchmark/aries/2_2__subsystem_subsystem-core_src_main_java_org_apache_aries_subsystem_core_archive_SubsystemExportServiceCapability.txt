1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:097d28b: package org.apache.aries.subsystem.core.archive;
1:097d28b: 
1:097d28b: import java.util.Collections;
1:097d28b: import java.util.HashMap;
1:097d28b: import java.util.Map;
1:097d28b: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.AbstractCapability;
1:097d28b: import org.osgi.framework.Constants;
1:d6eb080: import org.osgi.namespace.service.ServiceNamespace;
1:097d28b: import org.osgi.resource.Namespace;
1:097d28b: import org.osgi.resource.Resource;
1:097d28b: 
1:097d28b: public class SubsystemExportServiceCapability extends AbstractCapability {
1:097d28b: 	public static final String DIRECTIVE_FILTER = Namespace.REQUIREMENT_FILTER_DIRECTIVE;
1:d6eb080: 	public static final String NAMESPACE = ServiceNamespace.SERVICE_NAMESPACE;
1:097d28b: 	
1:097d28b: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1:097d28b: 	private final Map<String, String> directives = new HashMap<String, String>();
1:097d28b: 	private final Resource resource;
1:097d28b: 	
1:097d28b: 	public SubsystemExportServiceCapability(SubsystemExportServiceHeader.Clause clause, Resource resource) {
1:097d28b: 		StringBuilder builder = new StringBuilder("(&(")
1:097d28b: 				.append(Constants.OBJECTCLASS).append('=')
1:097d28b: 				.append(clause.getObjectClass()).append(')');
1:097d28b: 		Directive filter = clause
1:d6eb080: 				.getDirective(SubsystemExportServiceHeader.Clause.DIRECTIVE_FILTER);
1:097d28b: 		if (filter != null)
1:097d28b: 			builder.append(filter.getValue());
1:097d28b: 		directives.put(DIRECTIVE_FILTER, builder.append(')').toString());
1:097d28b: 		this.resource = resource;
1:097d28b: 	}
1:097d28b: 
1:097d28b: 	@Override
1:097d28b: 	public Map<String, Object> getAttributes() {
1:097d28b: 		return Collections.unmodifiableMap(attributes);
1:097d28b: 	}
1:097d28b: 
1:097d28b: 	@Override
1:097d28b: 	public Map<String, String> getDirectives() {
1:097d28b: 		return Collections.unmodifiableMap(directives);
1:097d28b: 	}
1:097d28b: 
1:097d28b: 	@Override
1:097d28b: 	public String getNamespace() {
1:097d28b: 		return NAMESPACE;
1:097d28b: 	}
1:097d28b: 
1:097d28b: 	@Override
1:097d28b: 	public Resource getResource() {
1:097d28b: 		return resource;
1:097d28b: 	}
1:097d28b: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.namespace.service.ServiceNamespace;
1: 	public static final String NAMESPACE = ServiceNamespace.SERVICE_NAMESPACE;
/////////////////////////////////////////////////////////////////////////
1: 				.getDirective(SubsystemExportServiceHeader.Clause.DIRECTIVE_FILTER);
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.AbstractCapability;
commit:097d28b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.resource.AbstractCapability;
1: import org.osgi.framework.Constants;
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Resource;
1: 
1: public class SubsystemExportServiceCapability extends AbstractCapability {
1: 	public static final String DIRECTIVE_FILTER = Namespace.REQUIREMENT_FILTER_DIRECTIVE;
0: 	// TODO Replace value with ServiceNamspace.SERVICE_NAMESPACE constant when available.
0: 	public static final String NAMESPACE = "osgi.service";
1: 	
1: 	private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 	private final Map<String, String> directives = new HashMap<String, String>();
1: 	private final Resource resource;
1: 	
1: 	public SubsystemExportServiceCapability(SubsystemExportServiceHeader.Clause clause, Resource resource) {
1: 		StringBuilder builder = new StringBuilder("(&(")
1: 				.append(Constants.OBJECTCLASS).append('=')
1: 				.append(clause.getObjectClass()).append(')');
1: 		Directive filter = clause
0: 				.getDirective(SubsystemImportServiceHeader.Clause.DIRECTIVE_FILTER);
1: 		if (filter != null)
1: 			builder.append(filter.getValue());
1: 		directives.put(DIRECTIVE_FILTER, builder.append(')').toString());
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.unmodifiableMap(attributes);
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================