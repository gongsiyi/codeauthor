1:f13c6ac: /**
1:f13c6ac:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  *  contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  *  this work for additional information regarding copyright ownership.
1:f13c6ac:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  *  (the "License"); you may not use this file except in compliance with
1:f13c6ac:  *  the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint;
1:f13c6ac: 
1:47d3353: import java.net.URI;
1:47d3353: 
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Metadata;
1:f13c6ac: import org.w3c.dom.Element;
1:f13c6ac: import org.w3c.dom.Node;
1:f13c6ac: 
1:f13c6ac: public interface ParserContext  {
1:85ec6f7:     /**
1:85ec6f7:      * Returns the DOM Node that was passed to the NamespaceHandler call for which
1:85ec6f7:      * this ParserContext instance was created.
1:85ec6f7:      */
1:f13c6ac:     Node getSourceNode();
1:f13c6ac: 
1:f13c6ac:     ComponentDefinitionRegistry getComponentDefinitionRegistry();
1:f13c6ac:     
1:85ec6f7:     /**
1:85ec6f7:      * Retrieve the <code>ComponentMetadata</code> of the component that
1:85ec6f7:      * encloses the current <code>Node</code> that is to be parsed by a 
1:85ec6f7:      * namespace handler.
1:85ec6f7:      * 
1:85ec6f7:      * In case of top-level components this method will return <code>null</code>.
1:baa10f5:      * @return the enclosing component's metadata or null if there is no enclosing component
1:85ec6f7:      */
1:f13c6ac:     ComponentMetadata getEnclosingComponent();
1:f13c6ac:     
1:85ec6f7:     /**
1:85ec6f7:      * Create a new metadata instance of the given type. The returned
1:85ec6f7:      * object will also implement the appropriate <code>MutableComponentMetadata</code>
1:85ec6f7:      * interface, so as to allow the caller to set the properties of the 
1:85ec6f7:      * metadata.
1:85ec6f7:      *
1:85ec6f7:      * Note that the returned object may not be initialised, so callers
1:85ec6f7:      * should take care to assure every property needed by the blueprint
1:85ec6f7:      * extender is set.
1:85ec6f7:      *
1:85ec6f7:      * @param type the class of the Metadata object to create
1:85ec6f7:      * @param <T> The expected Metadata type to be created
1:85ec6f7:      * @return a new instance
1:85ec6f7:      */
1:f13c6ac:     <T extends Metadata> T createMetadata(Class<T> type);
1:f13c6ac: 
1:85ec6f7:     /**
1:85ec6f7:      * Invoke the blueprint parser to parse a DOM element.
1:85ec6f7:      * @param type the class of the Metadata type to be parsed
1:85ec6f7:      * @param enclosingComponent The component metadata that contains the Element
1:85ec6f7:      * to be parsed
1:85ec6f7:      * @param element The DOM element that is to be parsed
1:85ec6f7:      * @param <T> The expected metadata type to be parsed
1:85ec6f7:      */
1:f13c6ac:     <T> T parseElement(Class<T> type, ComponentMetadata enclosingComponent, Element element);
1:f13c6ac: 
1:1cfd24a:     /** 
1:1cfd24a:      * Generate a unique id following the same scheme that the blueprint container
1:1cfd24a:      * uses internally
1:1cfd24a:      */
1:1cfd24a:     String generateId();
1:f13c6ac:     
1:85ec6f7:     /**
1:85ec6f7:      * Get the default activation setting for the current blueprint file
1:85ec6f7:      */
1:1cfd24a:     String getDefaultActivation();
1:f13c6ac:     
1:85ec6f7:     /**
1:85ec6f7:      * Get the default availability setting for the current blueprint file
1:85ec6f7:      */
1:1cfd24a:     String getDefaultAvailability();
3:1cfd24a:     
1:85ec6f7:     /**
1:85ec6f7:      * Get the default timeout setting for the current blueprint file
1:85ec6f7:      */
1:1cfd24a:     String getDefaultTimeout();
1:47d3353: 
1:47d3353:     /**
1:47d3353:      * Retrieve the namespace handler for the given uri
1:47d3353:      */
1:47d3353:     NamespaceHandler getNamespaceHandler(URI namespaceUri);
1:f13c6ac: }
1:1cfd24a: 
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:47d3353
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Retrieve the namespace handler for the given uri
1:      */
1:     NamespaceHandler getNamespaceHandler(URI namespaceUri);
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint;
1: 
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: 
1: public interface ParserContext  {
1:     
1:     Node getSourceNode();
1: 
1:     ComponentDefinitionRegistry getComponentDefinitionRegistry();
1:     
1:     ComponentMetadata getEnclosingComponent();
1:     
1:     <T extends Metadata> T createMetadata(Class<T> type);
1: 
1:     <T> T parseElement(Class<T> type, ComponentMetadata enclosingComponent, Element element);
1: 
1: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:baa10f5
/////////////////////////////////////////////////////////////////////////
1:      * @return the enclosing component's metadata or null if there is no enclosing component
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
commit:85ec6f7
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the DOM Node that was passed to the NamespaceHandler call for which
1:      * this ParserContext instance was created.
1:      */
1:     /**
1:      * Retrieve the <code>ComponentMetadata</code> of the component that
1:      * encloses the current <code>Node</code> that is to be parsed by a 
1:      * namespace handler.
1:      * 
1:      * In case of top-level components this method will return <code>null</code>.
0:      * @returns the enclosing component's metadata or null if there is no enclosing component
1:      */
1:     /**
1:      * Create a new metadata instance of the given type. The returned
1:      * object will also implement the appropriate <code>MutableComponentMetadata</code>
1:      * interface, so as to allow the caller to set the properties of the 
1:      * metadata.
1:      *
1:      * Note that the returned object may not be initialised, so callers
1:      * should take care to assure every property needed by the blueprint
1:      * extender is set.
1:      *
1:      * @param type the class of the Metadata object to create
1:      * @param <T> The expected Metadata type to be created
1:      * @return a new instance
1:      */
1:     /**
1:      * Invoke the blueprint parser to parse a DOM element.
1:      * @param type the class of the Metadata type to be parsed
1:      * @param enclosingComponent The component metadata that contains the Element
1:      * to be parsed
1:      * @param element The DOM element that is to be parsed
1:      * @param <T> The expected metadata type to be parsed
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get the default activation setting for the current blueprint file
1:      */
1:     /**
1:      * Get the default availability setting for the current blueprint file
1:      */
1:     /**
1:      * Get the default timeout setting for the current blueprint file
1:      */
commit:1cfd24a
/////////////////////////////////////////////////////////////////////////
0: import org.w3c.dom.Element;
0: import org.w3c.dom.Node;
/////////////////////////////////////////////////////////////////////////
1:     /** 
1:      * Generate a unique id following the same scheme that the blueprint container
1:      * uses internally
1:      */
1:     String generateId();
1:     
1:     String getDefaultActivation();
1:     
1:     String getDefaultAvailability();
1:     
1:     String getDefaultTimeout();
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint;
============================================================================