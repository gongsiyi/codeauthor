1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.whiteboard.integration.helper;
4:fdf3952: 
1:29dd67e: import static org.ops4j.pax.exam.CoreOptions.*;
1:fdf3952: import static org.ops4j.pax.exam.OptionUtils.combine;
1:fdf3952: 
1:fdf3952: import java.io.File;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: 
1:29dd67e: import javax.inject.Inject;
1:fdf3952: import javax.management.InstanceNotFoundException;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.MBeanServerFactory;
1:fdf3952: import javax.management.ObjectInstance;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: 
1:fdf3952: import junit.framework.TestCase;
1:fdf3952: 
1:fdf3952: import org.junit.After;
1:fdf3952: import org.junit.Before;
1:29dd67e: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.CoreOptions;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.ServiceRegistration;
1:fdf3952: 
1:fdf3952: public class IntegrationTestBase {
1:fdf3952: 
1:fdf3952:     // the name of the system property providing the bundle file to be installed
1:fdf3952:     // and tested
1:fdf3952:     protected static final String BUNDLE_JAR_SYS_PROP = "project.bundle.file";
1:fdf3952: 
1:fdf3952:     // the default bundle jar file name
1:fdf3952:     protected static final String BUNDLE_JAR_DEFAULT = "target/jmx-whiteboard.jar";
1:fdf3952: 
1:fdf3952:     // the JVM option to set to enable remote debugging
1:fdf3952:     protected static final String DEBUG_VM_OPTION = "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=30303";
1:fdf3952: 
1:fdf3952:     private static MBeanServer staticServer;
1:fdf3952: 
1:fdf3952:     private MBeanServer server;
1:fdf3952: 
1:fdf3952:     @Inject
1:fdf3952:     protected BundleContext bundleContext;
1:fdf3952: 
1:fdf3952:     private ServiceRegistration staticServerRegistration;
1:fdf3952: 
1:fdf3952:     protected static final String PROP_NAME = "theValue";
1:fdf3952: 
1:fdf3952:     protected static final Dictionary<String, String> theConfig;
1:fdf3952: 
1:fdf3952:     static {
1:fdf3952:         theConfig = new Hashtable<String, String>();
1:fdf3952:         theConfig.put(PROP_NAME, PROP_NAME);
3:fdf3952:     }
1:fdf3952: 
1:29dd67e:     @Configuration
1:fdf3952:     public static Option[] configuration() {
1:fdf3952:         final String bundleFileName = System.getProperty(BUNDLE_JAR_SYS_PROP,
1:fdf3952:             BUNDLE_JAR_DEFAULT);
1:fdf3952:         final File bundleFile = new File(bundleFileName);
1:fdf3952:         if (!bundleFile.canRead()) {
1:fdf3952:             throw new IllegalArgumentException("Cannot read from bundle file "
1:fdf3952:                 + bundleFileName + " specified in the " + BUNDLE_JAR_SYS_PROP
1:fdf3952:                 + " system property");
1:fdf3952:         }
1:fdf3952: 
1:29dd67e:         final Option[] options = options(
1:29dd67e:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:29dd67e: 
1:29dd67e:                 junitBundles(),
1:29dd67e: 
1:29dd67e:                 bundle(bundleFile.toURI().toString()),
1:29dd67e:                 mavenBundle("org.ops4j.pax.tinybundles", "tinybundles", "2.0.0"),
1:29dd67e:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin", "1.2.8"),
1:29dd67e:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:29dd67e:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"));
1:29dd67e: 
1:29dd67e:         return options;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Before
1:fdf3952:     public void setUp() {
1:fdf3952:         staticServerRegistration = registerMBeanServer(getStaticMBeanServer());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @After
1:fdf3952:     public void tearDown() {
1:fdf3952:         staticServerRegistration.unregister();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected MBeanServer getStaticMBeanServer() {
1:fdf3952:         if (staticServer == null) {
1:fdf3952:             staticServer = MBeanServerFactory.createMBeanServer("StaticServerDomain");
1:fdf3952:         }
1:fdf3952:         return staticServer;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected MBeanServer getMBeanServer() {
1:fdf3952:         return server;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected MBeanServer getOrCreateMBeanServer() {
1:fdf3952:         if (server == null) {
1:fdf3952:             server = MBeanServerFactory.createMBeanServer("DynamicServerDomain");
1:fdf3952:         }
1:fdf3952:         return server;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected void dropMBeanServer() {
1:fdf3952:         if (server != null) {
1:fdf3952:             MBeanServerFactory.releaseMBeanServer(server);
1:fdf3952:             server = null;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected ServiceRegistration registerMBeanServer(final MBeanServer server) {
1:fdf3952:         return registerService(MBeanServer.class.getName(), server, null);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected ServiceRegistration registerService(final String clazz,
1:fdf3952:             final Object service, final String objectName) {
1:fdf3952:         Hashtable<String, String> properties;
1:fdf3952:         if (objectName != null) {
1:fdf3952:             properties = new Hashtable<String, String>();
1:fdf3952:             properties.put("jmx.objectname", objectName);
1:fdf3952:         } else {
1:fdf3952:             properties = null;
1:fdf3952:         }
1:fdf3952:         return bundleContext.registerService(clazz, service, properties);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected void assertRegistered(final MBeanServer server,
1:fdf3952:             final ObjectName objectName) {
1:fdf3952:         try {
1:fdf3952:             ObjectInstance instance = server.getObjectInstance(objectName);
1:fdf3952:             TestCase.assertNotNull(instance);
1:fdf3952:             TestCase.assertEquals(objectName, instance.getObjectName());
1:fdf3952:         } catch (InstanceNotFoundException nfe) {
1:fdf3952:             TestCase.fail("Expected instance of " + objectName
1:fdf3952:                 + " registered with MBeanServer");
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected void assertNotRegistered(final MBeanServer server,
1:fdf3952:             final ObjectName objectName) {
1:fdf3952:         try {
1:fdf3952:             server.getObjectInstance(objectName);
1:fdf3952:             TestCase.fail("Unexpected instance of " + objectName
1:fdf3952:                 + " registered with MBeanServer");
1:fdf3952:         } catch (InstanceNotFoundException nfe) {
1:fdf3952:             // expected, ignore
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:29dd67e
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.*;
1: import javax.inject.Inject;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Configuration
/////////////////////////////////////////////////////////////////////////
1:         final Option[] options = options(
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 
1:                 junitBundles(),
1: 
1:                 bundle(bundleFile.toURI().toString()),
1:                 mavenBundle("org.ops4j.pax.tinybundles", "tinybundles", "2.0.0"),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin", "1.2.8"),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"));
1: 
1:         return options;
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.whiteboard.integration.helper;
1: 
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.provision;
0: import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
1: import static org.ops4j.pax.exam.OptionUtils.combine;
1: 
1: import java.io.File;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerFactory;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Inject;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: public class IntegrationTestBase {
1: 
1:     // the name of the system property providing the bundle file to be installed
1:     // and tested
1:     protected static final String BUNDLE_JAR_SYS_PROP = "project.bundle.file";
1: 
1:     // the default bundle jar file name
1:     protected static final String BUNDLE_JAR_DEFAULT = "target/jmx-whiteboard.jar";
1: 
1:     // the JVM option to set to enable remote debugging
1:     protected static final String DEBUG_VM_OPTION = "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=30303";
1: 
0:     // the actual JVM option set, extensions may implement a static
0:     // initializer overwriting this value to have the configuration()
0:     // method include it when starting the OSGi framework JVM
0:     protected static String paxRunnerVmOption = null;
1: 
1:     private static MBeanServer staticServer;
1: 
1:     private MBeanServer server;
1: 
1:     @Inject
1:     protected BundleContext bundleContext;
1: 
1:     private ServiceRegistration staticServerRegistration;
1: 
1:     protected static final String PROP_NAME = "theValue";
1: 
1:     protected static final Dictionary<String, String> theConfig;
1: 
1:     static {
1:         theConfig = new Hashtable<String, String>();
1:         theConfig.put(PROP_NAME, PROP_NAME);
1:     }
1: 
0:     @org.ops4j.pax.exam.junit.Configuration
1:     public static Option[] configuration() {
1:         final String bundleFileName = System.getProperty(BUNDLE_JAR_SYS_PROP,
1:             BUNDLE_JAR_DEFAULT);
1:         final File bundleFile = new File(bundleFileName);
1:         if (!bundleFile.canRead()) {
1:             throw new IllegalArgumentException("Cannot read from bundle file "
1:                 + bundleFileName + " specified in the " + BUNDLE_JAR_SYS_PROP
1:                 + " system property");
1:         }
1: 
0:         final Option[] base = options(
0:             provision(
0:                 CoreOptions.bundle(bundleFile.toURI().toString()),
0:                 mavenBundle("org.ops4j.pax.swissbox",
0:                     "pax-swissbox-tinybundles", "1.0.0"),
0:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin",
0:                     "1.2.8"), mavenBundle("org.slf4j", "slf4j-api", "1.5.2"),
0:                 mavenBundle("org.slf4j", "slf4j-simple", "1.5.2")),
0:             waitForFrameworkStartup());
0:         final Option vmOption = (paxRunnerVmOption != null)
0:                 ? PaxRunnerOptions.vmOption(paxRunnerVmOption)
0:                 : null;
1:         
0:         Option[] options = combine(base, vmOption);
0:         return updateOptions (options);
1:     }
1:     
0:     // This method is copied from AbstractIntegrationTest 
0:     // in org.apache.aries.jmx.itests
0:     protected static Option[] updateOptions(Option[] options) {
0:       // We need to add pax-exam-junit here when running with the ibm
0:       // jdk to avoid the following exception during the test run:
0:       // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
0:       if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
0:           Option[] ibmOptions = options(
0:               wrappedBundle(mavenBundle("org.ops4j.pax.exam", "pax-exam-junit"))
0:           );
0:           options = combine(ibmOptions, options);
1:       }
0:       return options;
1:   }
1: 
1:     @Before
1:     public void setUp() {
1:         staticServerRegistration = registerMBeanServer(getStaticMBeanServer());
1:     }
1: 
1:     @After
1:     public void tearDown() {
1:         staticServerRegistration.unregister();
1:     }
1: 
1:     protected MBeanServer getStaticMBeanServer() {
1:         if (staticServer == null) {
1:             staticServer = MBeanServerFactory.createMBeanServer("StaticServerDomain");
1:         }
1:         return staticServer;
1:     }
1: 
1:     protected MBeanServer getMBeanServer() {
1:         return server;
1:     }
1: 
1:     protected MBeanServer getOrCreateMBeanServer() {
1:         if (server == null) {
1:             server = MBeanServerFactory.createMBeanServer("DynamicServerDomain");
1:         }
1:         return server;
1:     }
1: 
1:     protected void dropMBeanServer() {
1:         if (server != null) {
1:             MBeanServerFactory.releaseMBeanServer(server);
1:             server = null;
1:         }
1:     }
1: 
1:     protected ServiceRegistration registerMBeanServer(final MBeanServer server) {
1:         return registerService(MBeanServer.class.getName(), server, null);
1:     }
1: 
1:     protected ServiceRegistration registerService(final String clazz,
1:             final Object service, final String objectName) {
1:         Hashtable<String, String> properties;
1:         if (objectName != null) {
1:             properties = new Hashtable<String, String>();
1:             properties.put("jmx.objectname", objectName);
1:         } else {
1:             properties = null;
1:         }
1:         return bundleContext.registerService(clazz, service, properties);
1:     }
1: 
1:     protected void assertRegistered(final MBeanServer server,
1:             final ObjectName objectName) {
1:         try {
1:             ObjectInstance instance = server.getObjectInstance(objectName);
1:             TestCase.assertNotNull(instance);
1:             TestCase.assertEquals(objectName, instance.getObjectName());
1:         } catch (InstanceNotFoundException nfe) {
1:             TestCase.fail("Expected instance of " + objectName
1:                 + " registered with MBeanServer");
1:         }
1:     }
1: 
1:     protected void assertNotRegistered(final MBeanServer server,
1:             final ObjectName objectName) {
1:         try {
1:             server.getObjectInstance(objectName);
1:             TestCase.fail("Unexpected instance of " + objectName
1:                 + " registered with MBeanServer");
1:         } catch (InstanceNotFoundException nfe) {
1:             // expected, ignore
1:         }
1:     }
1: 
1: }
============================================================================