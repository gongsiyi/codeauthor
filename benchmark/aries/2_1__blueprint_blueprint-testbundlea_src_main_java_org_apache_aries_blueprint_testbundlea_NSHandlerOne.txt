1:76b662a: /**
1:76b662a:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:76b662a:  *  contributor license agreements.  See the NOTICE file distributed with
1:76b662a:  *  this work for additional information regarding copyright ownership.
1:76b662a:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:76b662a:  *  (the "License"); you may not use this file except in compliance with
1:76b662a:  *  the License.  You may obtain a copy of the License at
1:76b662a:  *
1:76b662a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:76b662a:  *
1:76b662a:  *  Unless required by applicable law or agreed to in writing, software
1:76b662a:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:76b662a:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:76b662a:  *  See the License for the specific language governing permissions and
1:76b662a:  *  limitations under the License.
1:76b662a:  */
1:76b662a: package org.apache.aries.blueprint.testbundlea;
1:76b662a: 
1:76b662a: import java.net.URL;
1:76b662a: import java.util.List;
1:76b662a: import java.util.Set;
1:76b662a: 
1:76b662a: import org.apache.aries.blueprint.NamespaceHandler;
1:76b662a: import org.apache.aries.blueprint.ParserContext;
1:76b662a: import org.apache.aries.blueprint.PassThroughMetadata;
1:76b662a: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:76b662a: import org.apache.aries.blueprint.mutable.MutableRefMetadata;
1:76b662a: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:76b662a: import org.osgi.service.blueprint.reflect.Metadata;
1:76b662a: import org.osgi.service.blueprint.reflect.RefMetadata;
1:76b662a: import org.w3c.dom.Attr;
1:76b662a: import org.w3c.dom.Element;
1:76b662a: import org.w3c.dom.Node;
1:76b662a: 
1:76b662a: /**
1:76b662a:  * A simple example namespace handler, that understands an element, and 2 attributes
1:76b662a:  * 
1:76b662a:  * When the element is encountered in a top level blueprint element, the handler will add a 
1:76b662a:  * passthroughmetadata with it's id as the contained attribone.
1:76b662a:  * The passthroughmetadata will return a string with the value from the contained 
1:76b662a:  * attrib two.
1:76b662a:  * 
1:76b662a:  * If the element is encountered during processing of a bean, it will add a property to the 
1:76b662a:  * bean with the name of the attribone value, and a value of the passthroughmetadata with id
1:76b662a:  * matching attribtwo
1:76b662a:  * 
1:76b662a:  * This handler is designed to exercise aspects of the NamespaceHandler capability set.
1:76b662a:  *
1:76b662a:  */
1:76b662a: public class NSHandlerOne implements NamespaceHandler {
1:76b662a:     
1:76b662a:     public static String NSURI = "http://ns.handler.one";
1:76b662a:     
1:76b662a:     private static String ELT_NAME = "nshandlerone";
1:76b662a:     private static String ATTRIB_ONE = "attribone";
1:76b662a:     private static String ATTRIB_TWO = "attribtwo";
1:76b662a: 
1:76b662a:     //process attributes
1:76b662a:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:76b662a:             ParserContext context) {
1:76b662a:         
1:76b662a:         //this test makes use of the 'Mutable' implementations
1:76b662a:         //without which the code would need to implement our own BeanMetadata,
1:76b662a:         //and RefMetadata.
1:76b662a:         if(component !=null && component instanceof MutableBeanMetadata){
1:76b662a:             MutableBeanMetadata mbm = (MutableBeanMetadata)component;
1:76b662a:             
1:76b662a:             Attr a = (Attr)node;
1:76b662a:             Element bean = a.getOwnerElement();            
1:76b662a:             
1:76b662a:             String propname = bean.getAttributeNS(NSURI,ATTRIB_ONE);
1:76b662a:             
1:76b662a:             //if this were not a test, we might attempt to ensure this ref existed
1:76b662a:             String passthruref = bean.getAttributeNS(NSURI,ATTRIB_TWO);
1:76b662a:             
1:76b662a:             MutableRefMetadata ref = (MutableRefMetadata)context.createMetadata(RefMetadata.class);
1:76b662a:             ref.setComponentId(passthruref);
1:76b662a:             
1:76b662a:             mbm.addProperty(propname, ref);
1:76b662a:         }
1:76b662a:         return component;
1:76b662a:     }
1:76b662a:     
1:76b662a:     //process elements
1:76b662a:     public Metadata parse(Element element, ParserContext context) {
1:76b662a:         Metadata retval = null;       
1:76b662a:         if( element.getLocalName().equals(ELT_NAME) ) {
1:76b662a:             
1:76b662a:             final String id = element.getAttributeNS(NSURI,ATTRIB_ONE);
1:76b662a:             final String value = element.getAttributeNS(NSURI,ATTRIB_TWO);
1:76b662a:             
1:76b662a:             PassThroughMetadata ptm = new PassThroughMetadata() {
1:76b662a:                 
1:76b662a:                 public String getId() {
1:76b662a:                     return id;
1:76b662a:                 }
1:76b662a:                 
1:76b662a:                 //not used currently
1:76b662a:                 public List<String> getDependsOn() {
1:76b662a:                     return null;
1:76b662a:                 }
1:76b662a:                 
1:76b662a:                 //also not used currently
1:76b662a:                 public int getActivation() {
1:76b662a:                     return 0;
1:76b662a:                 }
1:76b662a:                 
1:76b662a:                 public Object getObject() {
1:76b662a:                     return value;
1:76b662a:                 }
1:76b662a:             };
1:76b662a:             
1:76b662a:             retval = ptm;
1:76b662a:         }
1:76b662a:         return retval;
1:76b662a:     }    
1:76b662a: 
1:76b662a:     //supply schema back to blueprint.
1:76b662a:     public URL getSchemaLocation(String namespace) {
1:76b662a:         return this.getClass().getResource("nshandlerone.xsd");
1:76b662a:     }
1:76b662a: 
1:76b662a:     public Set<Class> getManagedClasses() {
1:76b662a:         return null;
1:76b662a:     }
1:76b662a:     
1:76b662a: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.testbundlea;
1: 
1: import java.net.URL;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.PassThroughMetadata;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1: import org.apache.aries.blueprint.mutable.MutableRefMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.RefMetadata;
1: import org.w3c.dom.Attr;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: /**
1:  * A simple example namespace handler, that understands an element, and 2 attributes
1:  * 
1:  * When the element is encountered in a top level blueprint element, the handler will add a 
1:  * passthroughmetadata with it's id as the contained attribone.
1:  * The passthroughmetadata will return a string with the value from the contained 
1:  * attrib two.
1:  * 
1:  * If the element is encountered during processing of a bean, it will add a property to the 
1:  * bean with the name of the attribone value, and a value of the passthroughmetadata with id
1:  * matching attribtwo
1:  * 
1:  * This handler is designed to exercise aspects of the NamespaceHandler capability set.
1:  *
1:  */
1: public class NSHandlerOne implements NamespaceHandler {
1:     
1:     public static String NSURI = "http://ns.handler.one";
1:     
1:     private static String ELT_NAME = "nshandlerone";
1:     private static String ATTRIB_ONE = "attribone";
1:     private static String ATTRIB_TWO = "attribtwo";
1: 
1:     //process attributes
1:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:             ParserContext context) {
1:         
1:         //this test makes use of the 'Mutable' implementations
1:         //without which the code would need to implement our own BeanMetadata,
1:         //and RefMetadata.
1:         if(component !=null && component instanceof MutableBeanMetadata){
1:             MutableBeanMetadata mbm = (MutableBeanMetadata)component;
1:             
1:             Attr a = (Attr)node;
1:             Element bean = a.getOwnerElement();            
1:             
1:             String propname = bean.getAttributeNS(NSURI,ATTRIB_ONE);
1:             
1:             //if this were not a test, we might attempt to ensure this ref existed
1:             String passthruref = bean.getAttributeNS(NSURI,ATTRIB_TWO);
1:             
1:             MutableRefMetadata ref = (MutableRefMetadata)context.createMetadata(RefMetadata.class);
1:             ref.setComponentId(passthruref);
1:             
1:             mbm.addProperty(propname, ref);
1:         }
1:         return component;
1:     }
1:     
1:     //process elements
1:     public Metadata parse(Element element, ParserContext context) {
1:         Metadata retval = null;       
1:         if( element.getLocalName().equals(ELT_NAME) ) {
1:             
1:             final String id = element.getAttributeNS(NSURI,ATTRIB_ONE);
1:             final String value = element.getAttributeNS(NSURI,ATTRIB_TWO);
1:             
1:             PassThroughMetadata ptm = new PassThroughMetadata() {
1:                 
1:                 public String getId() {
1:                     return id;
1:                 }
1:                 
1:                 //not used currently
1:                 public List<String> getDependsOn() {
1:                     return null;
1:                 }
1:                 
1:                 //also not used currently
1:                 public int getActivation() {
1:                     return 0;
1:                 }
1:                 
1:                 public Object getObject() {
1:                     return value;
1:                 }
1:             };
1:             
1:             retval = ptm;
1:         }
1:         return retval;
1:     }    
1: 
1:     //supply schema back to blueprint.
1:     public URL getSchemaLocation(String namespace) {
1:         return this.getClass().getResource("nshandlerone.xsd");
1:     }
1: 
1:     public Set<Class> getManagedClasses() {
1:         return null;
1:     }
1:     
1: }
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:4f67549
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  */
0: package org.apache.aries.blueprint.testbundlea;
0: 
0: import java.net.URL;
0: import java.util.List;
0: import java.util.Set;
0: 
0: import org.apache.aries.blueprint.NamespaceHandler;
0: import org.apache.aries.blueprint.ParserContext;
0: import org.apache.aries.blueprint.PassThroughMetadata;
0: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
0: import org.apache.aries.blueprint.mutable.MutableRefMetadata;
0: import org.osgi.service.blueprint.reflect.ComponentMetadata;
0: import org.osgi.service.blueprint.reflect.Metadata;
0: import org.osgi.service.blueprint.reflect.RefMetadata;
0: import org.w3c.dom.Attr;
0: import org.w3c.dom.Element;
0: import org.w3c.dom.Node;
0: 
0: /**
0:  * A simple example namespace handler, that understands an element, and 2 attributes
0:  * 
0:  * When the element is encountered in a top level blueprint element, the handler will add a 
0:  * passthroughmetadata with it's id as the contained attribone.
0:  * The passthroughmetadata will return a string with the value from the contained 
0:  * attrib two.
0:  * 
0:  * If the element is encountered during processing of a bean, it will add a property to the 
0:  * bean with the name of the attribone value, and a value of the passthroughmetadata with id
0:  * matching attribtwo
0:  * 
0:  * This handler is designed to exercise aspects of the NamespaceHandler capability set.
0:  *
0:  */
0: public class NSHandlerOne implements NamespaceHandler {
0:     
0:     public static String NSURI = "http://ns.handler.one";
0:     
0:     private static String ELT_NAME = "nshandlerone";
0:     private static String ATTRIB_ONE = "attribone";
0:     private static String ATTRIB_TWO = "attribtwo";
0: 
0:     //process attributes
0:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
0:             ParserContext context) {
0:         
0:         //this test makes use of the 'Mutable' implementations
0:         //without which the code would need to implement our own BeanMetadata,
0:         //and RefMetadata.
0:         if(component !=null && component instanceof MutableBeanMetadata){
0:             MutableBeanMetadata mbm = (MutableBeanMetadata)component;
0:             
0:             Attr a = (Attr)node;
0:             Element bean = a.getOwnerElement();            
0:             
0:             String propname = bean.getAttributeNS(NSURI,ATTRIB_ONE);
0:             
0:             //if this were not a test, we might attempt to ensure this ref existed
0:             String passthruref = bean.getAttributeNS(NSURI,ATTRIB_TWO);
0:             
0:             MutableRefMetadata ref = (MutableRefMetadata)context.createMetadata(RefMetadata.class);
0:             ref.setComponentId(passthruref);
0:             
0:             mbm.addProperty(propname, ref);
0:         }
0:         return component;
0:     }
0:     
0:     //process elements
0:     public Metadata parse(Element element, ParserContext context) {
0:         Metadata retval = null;       
0:         if( element.getLocalName().equals(ELT_NAME) ) {
0:             
0:             final String id = element.getAttributeNS(NSURI,ATTRIB_ONE);
0:             final String value = element.getAttributeNS(NSURI,ATTRIB_TWO);
0:             
0:             PassThroughMetadata ptm = new PassThroughMetadata() {
0:                 
0:                 public String getId() {
0:                     return id;
0:                 }
0:                 
0:                 //not used currently
0:                 public List<String> getDependsOn() {
0:                     return null;
0:                 }
0:                 
0:                 //also not used currently
0:                 public int getActivation() {
0:                     return 0;
0:                 }
0:                 
0:                 public Object getObject() {
0:                     return value;
0:                 }
0:             };
0:             
0:             retval = ptm;
0:         }
0:         return retval;
0:     }    
0: 
0:     //supply schema back to blueprint.
0:     public URL getSchemaLocation(String namespace) {
0:         return this.getClass().getResource("nshandlerone.xsd");
0:     }
0: 
0:     public Set<Class> getManagedClasses() {
0:         return null;
0:     }
0:     
0: }
============================================================================