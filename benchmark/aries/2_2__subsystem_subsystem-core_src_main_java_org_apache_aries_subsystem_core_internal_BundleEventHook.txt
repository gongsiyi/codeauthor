1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:28c3eb7: package org.apache.aries.subsystem.core.internal;
4:28c3eb7: 
1:f59e428: import java.util.ArrayList;
1:28c3eb7: import java.util.Collection;
1:f59e428: import java.util.List;
1:f59e428: import java.util.concurrent.ConcurrentHashMap;
1:28c3eb7: 
1:b75f264: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
1:28c3eb7: import org.eclipse.equinox.region.Region;
1:28c3eb7: import org.eclipse.equinox.region.RegionDigraph;
1:28c3eb7: import org.osgi.framework.Bundle;
1:28c3eb7: import org.osgi.framework.BundleContext;
1:28c3eb7: import org.osgi.framework.BundleEvent;
1:28c3eb7: import org.osgi.framework.hooks.bundle.EventHook;
1:28c3eb7: import org.osgi.framework.wiring.BundleRevision;
1:7f94d4b: import org.osgi.resource.Resource;
1:28c3eb7: 
1:28c3eb7: public class BundleEventHook implements EventHook {
1:7b50945: 	private final Activator activator;
1:f59e428: 	private final ConcurrentHashMap<Bundle, BundleRevision> bundleToRevision;
1:f59e428: 	
1:f59e428: 	private boolean active;
1:f59e428: 	private List<BundleEvent> events;
1:28c3eb7: 	
1:28c3eb7: 	public BundleEventHook() {
1:7b50945: 		activator = Activator.getInstance();
1:f59e428: 		bundleToRevision = new ConcurrentHashMap<Bundle, BundleRevision>();
4:28c3eb7: 	}
1:28c3eb7: 	
1:28c3eb7: 	@Override
1:28c3eb7: 	public void event(BundleEvent event, Collection<BundleContext> contexts) {
1:7b50945: 		if ((event.getType() & (BundleEvent.INSTALLED | BundleEvent.UNINSTALLED)) == 0)
1:7b50945: 			return;
1:c49d412: 		// Protect against deadlock when the bundle event hook receives an
1:f59e428: 		// event before subsystems has fully initialized, in which case the
1:f59e428: 		// events are queued and processed once initialization is complete.
1:7b50945: 		synchronized (this) {
1:f59e428: 			if (!active) {
1:f59e428: 				if (events == null)
1:f59e428: 					events = new ArrayList<BundleEvent>();
1:f59e428: 				events.add(event);
1:f59e428: 				return;
1:7b50945: 			}
1:7b50945: 		}
1:7b50945: 		handleEvent(event);
1:7b50945: 	}
1:7b50945: 	
1:7b50945: 	// Events must be processed in order. Don't allow events to go through
1:7b50945: 	// synchronously before all pending events have been processed.
1:7b50945: 	synchronized void activate() {
1:7b50945: 		active = true;
1:7b50945: 		processPendingEvents();
1:7b50945: 	}
1:7b50945: 	
1:7b50945: 	synchronized void deactivate() {
1:7b50945: 		active = false;
1:7b50945: 	}
1:7b50945: 	
1:7b50945: 	synchronized void processPendingEvents() {
1:7b50945: 		if (events == null)
1:7b50945: 			return;
1:7b50945: 		for (BundleEvent event : events)
1:7b50945: 			handleEvent(event);
1:7b50945: 		events = null;
1:7b50945: 	}
1:7b50945: 	
1:7b50945: 	private Subsystems getSubsystems() {
1:74ef56e: 		return activator.getSubsystems();
1:7b50945: 	}
1:7b50945: 	
1:c49d412: 	/*
1:c49d412: 	 * Note that because some events may be processed asynchronously, we can no
1:c49d412: 	 * longer rely on the guarantees that a synchronous event brings. For
1:c49d412: 	 * example, bundle revisions adapted from bundles included in events may be
1:c49d412: 	 * null.
1:c49d412: 	 */
1:7b50945: 	private void handleEvent(BundleEvent event) {
1:28c3eb7: 		switch (event.getType()) {
1:28c3eb7: 			case BundleEvent.INSTALLED:
1:28c3eb7: 				handleInstalledEvent(event);
1:28c3eb7: 				break;
1:28c3eb7: 			// TODO I think updates will play a role here as well. Need to keep
1:28c3eb7: 			// track of the most current bundle revision?
1:28c3eb7: 			case BundleEvent.UNINSTALLED:
1:28c3eb7: 				handleUninstalledEvent(event);
1:28c3eb7: 				break;
1:f59e428: 		}
1:f59e428: 	}
1:f59e428: 	
1:c49d412: 	/*
1:c49d412: 	 * This method guards against an uninstalled origin bundle. Guards against a
1:c49d412: 	 * null bundle revision are done elsewhere. It is assumed the bundle
1:c49d412: 	 * revision is never null once we get here.
1:c49d412: 	 */
1:225bcae: 	private void handleExplicitlyInstalledBundleBundleContext(BundleRevision originRevision, BundleRevision bundleRevision) {
1:7f94d4b: 		/* 
1:7f94d4b: 		 * The newly installed bundle must become a constituent of all the Subsystems of which the bundle
1:7f94d4b: 		 * whose context was used to perform the install is a constituent (OSGI.enterprise spec. 134.10.1.1).
1:7f94d4b: 		 */
1:7b50945: 		Collection<BasicSubsystem> subsystems = getSubsystems().getSubsystemsReferencing(originRevision);
1:7f94d4b: 		boolean bundleRevisionInstalled=false;
1:7f94d4b: 		for (BasicSubsystem s : subsystems) {
1:7f94d4b: 			for (Resource constituent : s.getConstituents()) {
1:7f94d4b: 				if (constituent instanceof BundleConstituent) {
1:7f94d4b: 					BundleRevision rev = ((BundleConstituent) constituent).getRevision();
1:7f94d4b: 					if (originRevision.equals(rev)) {
1:777b216: 						Utils.installResource(bundleRevision, s);
1:7f94d4b: 						bundleRevisionInstalled=true;
1:f59e428: 					}
1:28c3eb7: 				}
1:28c3eb7: 			}
1:28c3eb7: 		}
1:7f94d4b: 		/* if the bundle is not made constituent of any subsystem then make it constituent of root */
1:7f94d4b: 		if (!bundleRevisionInstalled) {
1:7f94d4b: 			Utils.installResource(bundleRevision, getSubsystems().getRootSubsystem());
1:28c3eb7: 		}
1:28c3eb7: 	}	
1:225bcae: 	private void handleExplicitlyInstalledBundleRegionDigraph(Bundle origin, BundleRevision bundleRevision) {
1:225bcae: 			// The bundle needs to be associated with the scoped subsystem of 
1:225bcae: 			// the region used to install the bundle.
1:7b50945: 			RegionDigraph digraph = activator.getRegionDigraph();
1:28c3eb7: 			Region region = digraph.getRegion(origin);
1:7b50945: 			for (BasicSubsystem s : getSubsystems().getSubsystems()) {
1:28c3eb7: 				if ((s.isApplication() || s.isComposite())
1:28c3eb7: 						&& region.equals(s.getRegion())) {
1:777b216: 					Utils.installResource(bundleRevision, s);
1:f59e428: 					return;
1:28c3eb7: 				}
1:28c3eb7: 			}
1:28c3eb7: 			throw new IllegalStateException("No subsystem found for bundle " + bundleRevision + " in region " + region);
1:28c3eb7: 	}
1:28c3eb7: 	
1:28c3eb7: 	private void handleInstalledEvent(BundleEvent event) {
1:28c3eb7: 		Bundle origin = event.getOrigin();
1:28c3eb7: 		BundleRevision originRevision = origin.adapt(BundleRevision.class);
1:28c3eb7: 		Bundle bundle = event.getBundle();
1:28c3eb7: 		BundleRevision bundleRevision = bundle.adapt(BundleRevision.class);
1:6ea98a2: 		if (bundleRevision == null) {
1:c49d412: 			// The event is being processed asynchronously and the installed
1:c49d412: 			// bundle has been uninstalled. Nothing we can do.
1:c49d412: 			return;
1:6ea98a2: 		}
1:28c3eb7: 		bundleToRevision.put(bundle, bundleRevision);
1:225bcae: 		// Only handle explicitly installed bundles. An explicitly installed
1:225bcae: 		// bundle is a bundle that was installed using some other bundle's
1:225bcae: 		// BundleContext or using RegionDigraph.
1:6ea98a2: 		if (ThreadLocalSubsystem.get() != null
1:6ea98a2: 				// Region context bundles must be treated as explicit installations.
1:6ea98a2: 				|| bundleRevision.getSymbolicName().startsWith(Constants.RegionContextBundleSymbolicNamePrefix)) {
1:225bcae: 			return;
1:6ea98a2: 		}
1:6ea98a2: 		// Indicate that a bundle is being explicitly installed on this thread.
1:6ea98a2: 		// This protects against attempts to resolve the bundle as part of
1:6ea98a2: 		// processing the explicit installation.
1:6ea98a2: 		ThreadLocalBundleRevision.set(bundleRevision);
1:6ea98a2: 		try {
1:6ea98a2: 			if ("org.eclipse.equinox.region".equals(origin.getSymbolicName())) {
1:6ea98a2: 				// The bundle was installed using RegionDigraph.
1:6ea98a2: 				handleExplicitlyInstalledBundleRegionDigraph(origin, bundleRevision);
1:6ea98a2: 			}
1:6ea98a2: 			else {
1:6ea98a2: 				// The bundle was installed using some other bundle's BundleContext.
1:6ea98a2: 				handleExplicitlyInstalledBundleBundleContext(originRevision, bundleRevision);
1:6ea98a2: 			}
1:6ea98a2: 		}
1:6ea98a2: 		finally {
1:6ea98a2: 			// Always remove the bundle so that it can be resolved no matter
1:6ea98a2: 			// what happens here.
1:6ea98a2: 			ThreadLocalBundleRevision.remove();
1:6ea98a2: 		}
1:28c3eb7: 	}
1:28c3eb7: 	
1:5c35e50: 	@SuppressWarnings("unchecked")
1:28c3eb7: 	private void handleUninstalledEvent(BundleEvent event) {
1:28c3eb7: 		Bundle bundle = event.getBundle();
1:28c3eb7: 		BundleRevision revision = bundleToRevision.remove(bundle);
1:6ea98a2: 		if (ThreadLocalSubsystem.get() != null
1:6ea98a2: 				|| (revision == null ? false : 
1:6ea98a2: 					// Region context bundles must be treated as explicit installations.
1:6ea98a2: 					revision.getSymbolicName().startsWith(Constants.RegionContextBundleSymbolicNamePrefix))) {
2:225bcae: 			return;
1:6ea98a2: 		}
1:5c35e50: 		Collection<BasicSubsystem> subsystems;
1:5c35e50: 		if (revision == null) {
1:5c35e50: 			// The bundle was installed while the bundle event hook was unregistered.
1:66992c9: 			Object[] o = activator.getSubsystems().getSubsystemsByBundle(bundle);
1:5c35e50: 			if (o == null)
1:5c35e50: 				return;
1:5c35e50: 			revision = (BundleRevision)o[0];
1:5c35e50: 			subsystems = (Collection<BasicSubsystem>)o[1];
1:5c35e50: 		}
1:6ea98a2: 		else {
1:66992c9: 			subsystems = activator.getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision));
1:6ea98a2: 		}
1:6ea98a2: 		for (BasicSubsystem subsystem : subsystems) {
1:225bcae: 			ResourceUninstaller.newInstance(revision, subsystem).uninstall();
1:6ea98a2: 		}
1:28c3eb7: 	}
1:28c3eb7: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:6ea98a2
/////////////////////////////////////////////////////////////////////////
1: 		if (bundleRevision == null) {
1: 		}
1: 		if (ThreadLocalSubsystem.get() != null
1: 				// Region context bundles must be treated as explicit installations.
1: 				|| bundleRevision.getSymbolicName().startsWith(Constants.RegionContextBundleSymbolicNamePrefix)) {
1: 		}
1: 		// Indicate that a bundle is being explicitly installed on this thread.
1: 		// This protects against attempts to resolve the bundle as part of
1: 		// processing the explicit installation.
1: 		ThreadLocalBundleRevision.set(bundleRevision);
1: 		try {
1: 			if ("org.eclipse.equinox.region".equals(origin.getSymbolicName())) {
1: 				// The bundle was installed using RegionDigraph.
1: 				handleExplicitlyInstalledBundleRegionDigraph(origin, bundleRevision);
1: 			}
1: 			else {
1: 				// The bundle was installed using some other bundle's BundleContext.
1: 				handleExplicitlyInstalledBundleBundleContext(originRevision, bundleRevision);
1: 			}
1: 		}
1: 		finally {
1: 			// Always remove the bundle so that it can be resolved no matter
1: 			// what happens here.
1: 			ThreadLocalBundleRevision.remove();
1: 		}
1: 		if (ThreadLocalSubsystem.get() != null
1: 				|| (revision == null ? false : 
1: 					// Region context bundles must be treated as explicit installations.
1: 					revision.getSymbolicName().startsWith(Constants.RegionContextBundleSymbolicNamePrefix))) {
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		else {
1: 		}
1: 		for (BasicSubsystem subsystem : subsystems) {
1: 		}
commit:66992c9
/////////////////////////////////////////////////////////////////////////
1: 			Object[] o = activator.getSubsystems().getSubsystemsByBundle(bundle);
1: 			subsystems = activator.getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision));
commit:3f524ae
/////////////////////////////////////////////////////////////////////////
commit:c49d412
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: 		// Protect against deadlock when the bundle event hook receives an
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Note that because some events may be processed asynchronously, we can no
1: 	 * longer rely on the guarantees that a synchronous event brings. For
1: 	 * example, bundle revisions adapted from bundles included in events may be
1: 	 * null.
1: 	 */
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * This method guards against an uninstalled origin bundle. Guards against a
1: 	 * null bundle revision are done elsewhere. It is assumed the bundle
1: 	 * revision is never null once we get here.
1: 	 */
0: 			// If subsystems does not know about the origin bundle for some
0: 			// reason (e.g., the event is being processed asynchronously
0: 			// and the origin bundle has been uninstalled), associate the
0: 			// installed bundle with the root subsystem.
0: 			subsystems = Collections.singleton(getSubsystems().getRootSubsystem());
/////////////////////////////////////////////////////////////////////////
0: 		if (bundleRevision == null)
1: 			// The event is being processed asynchronously and the installed
1: 			// bundle has been uninstalled. Nothing we can do.
1: 			return;
0: 		if ("org.eclipse.equinox.region".equals(origin.getSymbolicName()))
commit:74ef56e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		return activator.getSubsystems();
commit:7b50945
/////////////////////////////////////////////////////////////////////////
1: 	private final Activator activator;
0: 	private volatile Subsystems subsystems;
1: 		activator = Activator.getInstance();
1: 		if ((event.getType() & (BundleEvent.INSTALLED | BundleEvent.UNINSTALLED)) == 0)
1: 			return;
/////////////////////////////////////////////////////////////////////////
1: 		handleEvent(event);
1: 	}
1: 	
1: 	// Events must be processed in order. Don't allow events to go through
1: 	// synchronously before all pending events have been processed.
1: 	synchronized void activate() {
1: 		active = true;
1: 		processPendingEvents();
1: 	}
1: 	
1: 	synchronized void deactivate() {
1: 		active = false;
1: 	}
1: 	
1: 	synchronized void processPendingEvents() {
1: 		if (events == null)
1: 			return;
1: 		for (BundleEvent event : events)
1: 			handleEvent(event);
1: 		events = null;
1: 	}
1: 	
1: 	private Subsystems getSubsystems() {
0: 		if (subsystems == null) {
1: 			synchronized (this) {
0: 				if (subsystems == null)
0: 					subsystems = activator.getSubsystems();
1: 			}
1: 		}
0: 		return subsystems;
1: 	}
1: 	
1: 	private void handleEvent(BundleEvent event) {
/////////////////////////////////////////////////////////////////////////
1: 		Collection<BasicSubsystem> subsystems = getSubsystems().getSubsystemsReferencing(originRevision);
/////////////////////////////////////////////////////////////////////////
1: 			RegionDigraph digraph = activator.getRegionDigraph();
1: 			for (BasicSubsystem s : getSubsystems().getSubsystems()) {
commit:f59e428
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: 	private final ConcurrentHashMap<Bundle, BundleRevision> bundleToRevision;
1: 	
1: 	private boolean active;
1: 	private List<BundleEvent> events;
1: 		bundleToRevision = new ConcurrentHashMap<Bundle, BundleRevision>();
0: 		// Protected against deadlock when the bundle event hook receives an
1: 		// event before subsystems has fully initialized, in which case the
1: 		// events are queued and processed once initialization is complete.
0: 		synchronized (this) {
1: 			if (!active) {
1: 				if (events == null)
1: 					events = new ArrayList<BundleEvent>();
1: 				events.add(event);
1: 				return;
1: 			}
1: 		}
/////////////////////////////////////////////////////////////////////////
0: 	synchronized void activate() {
0: 		active = true;
0: 		if (events == null)
1: 			return;
0: 		for (BundleEvent event : events)
0: 			event(event, null);
0: 		events = null;
1: 	}
1: 	
commit:5c35e50
/////////////////////////////////////////////////////////////////////////
1: 	@SuppressWarnings("unchecked")
1: 		Collection<BasicSubsystem> subsystems;
1: 		if (revision == null) {
1: 			// The bundle was installed while the bundle event hook was unregistered.
0: 			Object[] o = Activator.getInstance().getSubsystems().getSubsystemsByBundle(bundle);
1: 			if (o == null)
1: 				return;
1: 			revision = (BundleRevision)o[0];
1: 			subsystems = (Collection<BasicSubsystem>)o[1];
1: 		}
0: 		else
0: 			subsystems = Activator.getInstance().getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision));
0: 		for (BasicSubsystem subsystem : subsystems)
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
0: 		Collection<BasicSubsystem> subsystems = Activator.getInstance().getSubsystems().getSubsystemsReferencing(originRevision);
0: 		for (BasicSubsystem s : subsystems)
/////////////////////////////////////////////////////////////////////////
0: 			for (BasicSubsystem s : Activator.getInstance().getSubsystems().getSubsystems()) {
/////////////////////////////////////////////////////////////////////////
0: 		for (BasicSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision)))
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
/////////////////////////////////////////////////////////////////////////
0: 		for (AriesSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision)))
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: 			Utils.installResource(bundleRevision, s);
/////////////////////////////////////////////////////////////////////////
1: 					Utils.installResource(bundleRevision, s);
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: 	private void handleExplicitlyInstalledBundleBundleContext(BundleRevision originRevision, BundleRevision bundleRevision) {
0: 		// The bundle needs to be associated with all subsystems that are 
0: 		// associated with the bundle whose context was used to install the 
0: 		// bundle.
0: 		Collection<AriesSubsystem> subsystems = Activator.getInstance().getSubsystems().getSubsystemsReferencing(originRevision);
0: 			s.installResource(bundleRevision);
1: 	private void handleExplicitlyInstalledBundleRegionDigraph(Bundle origin, BundleRevision bundleRevision) {
1: 			// The bundle needs to be associated with the scoped subsystem of 
1: 			// the region used to install the bundle.
0: 			for (AriesSubsystem s : Activator.getInstance().getSubsystems().getSubsystems()) {
0: 					s.installResource(bundleRevision);
1: 					return;
/////////////////////////////////////////////////////////////////////////
1: 		// Only handle explicitly installed bundles. An explicitly installed
1: 		// bundle is a bundle that was installed using some other bundle's
1: 		// BundleContext or using RegionDigraph.
0: 		if (ThreadLocalSubsystem.get() != null)
1: 			return;
0: 		if ("org.eclipse.equionox.region".equals(origin.getSymbolicName()))
0: 			// The bundle was installed using RegionDigraph.
0: 			handleExplicitlyInstalledBundleRegionDigraph(origin, bundleRevision);
0: 		else
0: 			// The bundle was installed using some other bundle's BundleContext.
0: 			handleExplicitlyInstalledBundleBundleContext(originRevision, bundleRevision);
0: 		if (ThreadLocalSubsystem.get() != null)
1: 			return;
0: 		for (AriesSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsByConstituent(revision))
1: 			ResourceUninstaller.newInstance(revision, subsystem).uninstall();
commit:3e4b2d5
/////////////////////////////////////////////////////////////////////////
0: 			RegionDigraph digraph = Activator.getInstance().getRegionDigraph();
commit:28c3eb7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Map;
1: 
1: import org.eclipse.equinox.region.Region;
1: import org.eclipse.equinox.region.RegionDigraph;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.hooks.bundle.EventHook;
1: import org.osgi.framework.wiring.BundleRevision;
1: 
1: public class BundleEventHook implements EventHook {
0: 	private final Map<Bundle, BundleRevision> bundleToRevision;
1: 	
1: 	public BundleEventHook() {
0: 		bundleToRevision = Collections.synchronizedMap(new HashMap<Bundle, BundleRevision>());
1: 	}
1: 	
1: 	@Override
1: 	public void event(BundleEvent event, Collection<BundleContext> contexts) {
1: 		switch (event.getType()) {
1: 			case BundleEvent.INSTALLED:
1: 				handleInstalledEvent(event);
1: 				break;
1: 			// TODO I think updates will play a role here as well. Need to keep
1: 			// track of the most current bundle revision?
1: 			case BundleEvent.UNINSTALLED:
1: 				handleUninstalledEvent(event);
1: 				break;
1: 		}
1: 	}
1: 	
0: 	private boolean handleExplicitlyInstalledBundleBundleContext(BundleRevision originRevision, BundleRevision bundleRevision) {
0: 		// This means that some other bundle's context was used. The bundle
0: 		// needs to be associated with all subsystems that are associated with
0: 		// the bundle whose context was used to install the bundle.
0: 		Collection<AriesSubsystem> subsystems = AriesSubsystem.getSubsystems(originRevision);
0: 		if (subsystems.isEmpty())
0: 			throw new IllegalStateException("Orphaned bundle revision detected: " + originRevision);
0: 		for (AriesSubsystem s : subsystems)
0: 			s.bundleInstalled(bundleRevision);
0: 		return true;
1: 	}
1: 	
0: 	private boolean handleExplicitlyInstalledBundleRegionDigraph(Bundle origin, BundleRevision bundleRevision) {
0: 		// Otherwise, this is an explicitly installed bundle. That is, the
0: 		// bundle is being installed outside of the Subsystem API using Region
0: 		// Digraph or some other bundle's context.
0: 		if ("org.eclipse.equionox.region".equals(origin.getSymbolicName())) {
0: 			// This means Region Digraph was used to install the bundle. The
0: 			// bundle needs to be associated with the scoped subsystem of the
0: 			// region used to install the bundle.
0: 			RegionDigraph digraph = Activator.getInstance().getServiceProvider().getService(RegionDigraph.class);
1: 			Region region = digraph.getRegion(origin);
0: 			for (AriesSubsystem s : AriesSubsystem.getSubsystems(null)) {
1: 				if ((s.isApplication() || s.isComposite())
1: 						&& region.equals(s.getRegion())) {
0: 					s.bundleInstalled(bundleRevision);
0: 					return true;
1: 				}
1: 			}
1: 			throw new IllegalStateException("No subsystem found for bundle " + bundleRevision + " in region " + region);
1: 		}
0: 		return false;
1: 	}
1: 	
0: 	private boolean handleImplicitlyInstalledResource(BundleRevision bundleRevision) {
0: 		// If the thread local variable is set, this is an implicitly installed
0: 		// bundle and needs to be associated with the subsystem installing it.
0: 		AriesSubsystem subsystem = ThreadLocalSubsystem.get();
0: 		if (subsystem != null) {
0: 			subsystem.bundleInstalled(bundleRevision);
0: 			return true;
1: 		}
0: 		return false;
1: 	}
1: 	
1: 	private void handleInstalledEvent(BundleEvent event) {
1: 		Bundle origin = event.getOrigin();
1: 		BundleRevision originRevision = origin.adapt(BundleRevision.class);
1: 		Bundle bundle = event.getBundle();
1: 		BundleRevision bundleRevision = bundle.adapt(BundleRevision.class);
0: 		if (!handleImplicitlyInstalledResource(bundleRevision)) {
0: 			if (!handleExplicitlyInstalledBundleRegionDigraph(origin, bundleRevision)) {
0: 				handleExplicitlyInstalledBundleBundleContext(originRevision, bundleRevision);
1: 			}
1: 		}
1: 		bundleToRevision.put(bundle, bundleRevision);
1: 	}
1: 	
1: 	private void handleUninstalledEvent(BundleEvent event) {
1: 		Bundle bundle = event.getBundle();
1: 		BundleRevision revision = bundleToRevision.remove(bundle);
0: 		Collection<AriesSubsystem> subsystems = AriesSubsystem.getSubsystems(revision);
0: 		if (subsystems.isEmpty())
0: 			throw new IllegalStateException("Orphaned bundle revision detected: " + revision);
0: 		for (AriesSubsystem subsystem : subsystems)
0: 			subsystem.bundleUninstalled(revision);
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:7f94d4b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
/////////////////////////////////////////////////////////////////////////
1: 		/* 
1: 		 * The newly installed bundle must become a constituent of all the Subsystems of which the bundle
1: 		 * whose context was used to perform the install is a constituent (OSGI.enterprise spec. 134.10.1.1).
1: 		 */
1: 		boolean bundleRevisionInstalled=false;
1: 		for (BasicSubsystem s : subsystems) {
1: 			for (Resource constituent : s.getConstituents()) {
1: 				if (constituent instanceof BundleConstituent) {
1: 					BundleRevision rev = ((BundleConstituent) constituent).getRevision();
1: 					if (originRevision.equals(rev)) {
0: 						Utils.installResource(bundleRevision, s);
1: 						bundleRevisionInstalled=true;
0: 					}
0: 				}
0: 			}
0: 		}
1: 		/* if the bundle is not made constituent of any subsystem then make it constituent of root */
1: 		if (!bundleRevisionInstalled) {
1: 			Utils.installResource(bundleRevision, getSubsystems().getRootSubsystem());
0: 		}
0: 	}	
============================================================================