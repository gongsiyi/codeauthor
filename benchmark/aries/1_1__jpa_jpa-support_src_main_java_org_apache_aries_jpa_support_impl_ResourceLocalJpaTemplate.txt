1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.support.impl;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.supplier.EmSupplier;
1:2cfdf52: import org.apache.aries.jpa.template.EmFunction;
1:2cfdf52: import org.apache.aries.jpa.template.TransactionType;
1:0d59ccb: import org.osgi.service.coordinator.Coordination;
1:0d59ccb: import org.osgi.service.coordinator.Coordinator;
1:c845cbf: import org.slf4j.Logger;
1:c845cbf: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: public class ResourceLocalJpaTemplate extends AbstractJpaTemplate {
1:c845cbf:     private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLocalJpaTemplate.class);
1:2cfdf52:     private EmSupplier emSupplier;
1:0d59ccb:     private Coordinator coordinator;
1:2cfdf52: 
1:0d59ccb:     public ResourceLocalJpaTemplate(EmSupplier emSupplier, Coordinator coordinator) {
1:2cfdf52:         this.emSupplier = emSupplier;
1:0d59ccb:         this.coordinator = coordinator;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public <R> R txExpr(TransactionType type, EmFunction<R> code) {
1:2cfdf52:         EntityManager em = null;
1:2cfdf52:         boolean weControlTx = false;
1:2cfdf52:         if (type != TransactionType.Required) {
1:2cfdf52:             throw new IllegalStateException("Only transation propagation type REQUIRED is supported");
1:2cfdf52:         }
1:ec3ea65:         Coordination coord = coordinator.begin(this.getClass().getName(), 0);
1:2cfdf52:         try {
1:2cfdf52:             em = emSupplier.get();
1:2cfdf52:             weControlTx = !em.getTransaction().isActive();
1:2cfdf52:             if (weControlTx) {
1:2cfdf52:                 em.getTransaction().begin();
1:2cfdf52:             }
1:2cfdf52:             R result = (R)code.apply(em);
1:2cfdf52:             if (weControlTx) {
1:2cfdf52:                 em.getTransaction().commit();
1:2cfdf52:             }
1:2cfdf52:             return result;
1:2cfdf52:         } catch (Exception e) {
1:2cfdf52:             if (weControlTx) {
1:ec3ea65:                 safeRollback(em);
1:2cfdf52:             }
1:da68ac2:             throw wrapThrowable(e, "Exception occured in transactional code");
1:2cfdf52:         } finally {
1:0d59ccb:             coord.end();
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static void safeRollback(EntityManager em) {
1:2cfdf52:         if (em != null) {
1:2cfdf52:             try {
1:2cfdf52:                 em.getTransaction().rollback();
1:ec3ea65:             } catch (Exception e) {
1:ec3ea65:                 LOGGER.warn("Exception during transaction rollback", e);
1:2cfdf52:             }
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:         Coordination coord = coordinator.begin(this.getClass().getName(), 0);
/////////////////////////////////////////////////////////////////////////
1:                 safeRollback(em);
/////////////////////////////////////////////////////////////////////////
1:     private static void safeRollback(EntityManager em) {
1:             } catch (Exception e) {
1:                 LOGGER.warn("Exception during transaction rollback", e);
commit:da68ac2
/////////////////////////////////////////////////////////////////////////
1:             throw wrapThrowable(e, "Exception occured in transactional code");
commit:c845cbf
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLocalJpaTemplate.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOGGER.warn("Exception during transaction rollback", e1);
commit:65669d0
/////////////////////////////////////////////////////////////////////////
0:             throw wrapThrowable(e);
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Coordinator;
1:     private Coordinator coordinator;
1:     public ResourceLocalJpaTemplate(EmSupplier emSupplier, Coordinator coordinator) {
1:         this.coordinator = coordinator;
/////////////////////////////////////////////////////////////////////////
0:         Coordination coord = null;
0:             coord = coordinator.begin(this.getClass().getName(), 0);
/////////////////////////////////////////////////////////////////////////
1:             coord.end();
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.impl;
1: 
1: import javax.persistence.EntityManager;
1: 
1: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.apache.aries.jpa.template.EmFunction;
1: import org.apache.aries.jpa.template.TransactionType;
1: 
1: public class ResourceLocalJpaTemplate extends AbstractJpaTemplate {
1:     private EmSupplier emSupplier;
1: 
0:     public ResourceLocalJpaTemplate(EmSupplier emSupplier) {
1:         this.emSupplier = emSupplier;
1:     }
1: 
1:     @Override
1:     public <R> R txExpr(TransactionType type, EmFunction<R> code) {
1:         EntityManager em = null;
1:         boolean weControlTx = false;
1:         if (type != TransactionType.Required) {
1:             throw new IllegalStateException("Only transation propagation type REQUIRED is supported");
1:         }
1:         try {
0:             emSupplier.preCall();
1:             em = emSupplier.get();
1:             weControlTx = !em.getTransaction().isActive();
1:             if (weControlTx) {
1:                 em.getTransaction().begin();
1:             }
1:             R result = (R)code.apply(em);
1:             if (weControlTx) {
1:                 em.getTransaction().commit();
1:             }
1:             return result;
1:         } catch (Exception e) {
1:             if (weControlTx) {
0:                 safeRollback(em, e);
1:             }
0:             throw new RuntimeException(e);
1:         } finally {
0:             emSupplier.postCall();
1:         }
1:     }
1: 
0:     private void safeRollback(EntityManager em, Exception e) {
1:         if (em != null) {
1:             try {
1:                 em.getTransaction().rollback();
0:             } catch (Exception e1) {
1:             }
1:         }
1:     }
1: 
1: }
============================================================================