1:14ceeb1: /*
1:14ceeb1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:14ceeb1:  *
1:14ceeb1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:14ceeb1:  * you may not use this file except in compliance with the License.
1:14ceeb1:  * You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing, software
1:14ceeb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14ceeb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14ceeb1:  * See the License for the specific language governing permissions and
1:14ceeb1:  * limitations under the License.
1:14ceeb1:  */
1:0d3d319: package org.osgi.util.promise;
1:0d3d319: 
1:0d3d319: /**
1:0d3d319:  * Failure callback for a Promise.
1:0d3d319:  * <p>
1:0d3d319:  * A Failure callback is registered with a Promise using the Promise.then(Success, Failure) method and is called if the Promise is resolved with a failure.
1:0d3d319:  * <p>
1:0d3d319:  * This is a functional interface and can be used as the assignment target for a lambda expression or method reference.
1:0d3d319:  */
1:14ceeb1: @org.osgi.annotation.versioning.ConsumerType
1:0d3d319: public interface Failure {
1:0d3d319:     /**
1:0d3d319:      * Failure callback for a Promise.
1:0d3d319:      * <p>
1:0d3d319:      * This method is called if the Promise with which it is registered resolves with a failure.
1:0d3d319:      * <p>
1:0d3d319:      * In the remainder of this description we will refer to the Promise returned by Promise.then(Success, Failure) when this Failure callback was registered as the chained Promise.
1:0d3d319:      * <p>
1:0d3d319:      * If this method completes normally, the chained Promise will be failed with the same exception which failed the resolved Promise. If this method throws an exception, the chained Promise will be failed with the thrown exception.
1:0d3d319:      *
1:0d3d319:      * @param resolved The failed resolved Promise.
1:0d3d319:      * @throws Exception The chained Promise will be failed with the thrown exception.
1:0d3d319:      */
1:0d3d319:     void fail(Promise<?> resolved) throws Exception;
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: @org.osgi.annotation.versioning.ConsumerType
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.osgi.util.promise;
1: 
1: /**
1:  * Failure callback for a Promise.
1:  * <p>
1:  * A Failure callback is registered with a Promise using the Promise.then(Success, Failure) method and is called if the Promise is resolved with a failure.
1:  * <p>
1:  * This is a functional interface and can be used as the assignment target for a lambda expression or method reference.
1:  */
0: //@org.osgi.annotation.versioning.ConsumerType
1: public interface Failure {
1:     /**
1:      * Failure callback for a Promise.
1:      * <p>
1:      * This method is called if the Promise with which it is registered resolves with a failure.
1:      * <p>
1:      * In the remainder of this description we will refer to the Promise returned by Promise.then(Success, Failure) when this Failure callback was registered as the chained Promise.
1:      * <p>
1:      * If this method completes normally, the chained Promise will be failed with the same exception which failed the resolved Promise. If this method throws an exception, the chained Promise will be failed with the thrown exception.
1:      *
1:      * @param resolved The failed resolved Promise.
1:      * @throws Exception The chained Promise will be failed with the thrown exception.
1:      */
1:     void fail(Promise<?> resolved) throws Exception;
1: }
============================================================================