1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:fdf3952: 
1:fdf3952: public abstract class BPComponentMetadata implements BPNonNullMetadata {
1:fdf3952:     private int activation;
1:fdf3952: 
1:fdf3952:     private String[] dependsOn;
1:fdf3952: 
1:fdf3952:     private String id;
1:fdf3952: 
1:fdf3952:     @SuppressWarnings("boxing")
1:fdf3952:     protected BPComponentMetadata(CompositeData component) {
1:fdf3952:         activation = (Integer) component.get(BlueprintMetadataMBean.ACTIVATION);
1:fdf3952:         dependsOn = (String[]) component.get(BlueprintMetadataMBean.DEPENDS_ON);
1:fdf3952:         id = (String) component.get(BlueprintMetadataMBean.ID);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected BPComponentMetadata(ComponentMetadata component) {
1:fdf3952:         activation = component.getActivation();
1:fdf3952:         dependsOn =  (String[])component.getDependsOn().toArray(new String[0]);
1:fdf3952:         id = (String) component.getId();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected Map<String, Object> getItemsMap() {
1:fdf3952:         HashMap<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(BlueprintMetadataMBean.ACTIVATION, activation);
1:fdf3952:         items.put(BlueprintMetadataMBean.DEPENDS_ON, dependsOn);
1:fdf3952:         items.put(BlueprintMetadataMBean.ID, id);
1:fdf3952: 
1:fdf3952:         return items;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getActivation() {
1:fdf3952:         return activation;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String[] getDependsOn() {
1:fdf3952:         return dependsOn;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getId() {
1:fdf3952:         return id;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: 
1: public abstract class BPComponentMetadata implements BPNonNullMetadata {
1:     private int activation;
1: 
1:     private String[] dependsOn;
1: 
1:     private String id;
1: 
1:     @SuppressWarnings("boxing")
1:     protected BPComponentMetadata(CompositeData component) {
1:         activation = (Integer) component.get(BlueprintMetadataMBean.ACTIVATION);
1:         dependsOn = (String[]) component.get(BlueprintMetadataMBean.DEPENDS_ON);
1:         id = (String) component.get(BlueprintMetadataMBean.ID);
1:     }
1: 
1:     protected BPComponentMetadata(ComponentMetadata component) {
1:         activation = component.getActivation();
1:         dependsOn =  (String[])component.getDependsOn().toArray(new String[0]);
1:         id = (String) component.getId();
1:     }
1: 
1:     protected Map<String, Object> getItemsMap() {
1:         HashMap<String, Object> items = new HashMap<String, Object>();
1:         items.put(BlueprintMetadataMBean.ACTIVATION, activation);
1:         items.put(BlueprintMetadataMBean.DEPENDS_ON, dependsOn);
1:         items.put(BlueprintMetadataMBean.ID, id);
1: 
1:         return items;
1:     }
1: 
1:     public int getActivation() {
1:         return activation;
1:     }
1: 
1:     public String[] getDependsOn() {
1:         return dependsOn;
1:     }
1: 
1:     public String getId() {
1:         return id;
1:     }
1: }
============================================================================