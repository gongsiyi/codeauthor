1:35b5b11: /*
1:ec3ea65:  * Licensed to the Apache Software Foundation (ASF) under one
1:35b5b11:  * or more contributor license agreements.  See the NOTICE file
1:35b5b11:  * distributed with this work for additional information
1:35b5b11:  * regarding copyright ownership.  The ASF licenses this file
1:35b5b11:  * to you under the Apache License, Version 2.0 (the
1:35b5b11:  * "License"); you may not use this file except in compliance
1:35b5b11:  * with the License.  You may obtain a copy of the License at
1:35b5b11:  *
1:35b5b11:  *   http://www.apache.org/licenses/LICENSE-2.0
1:35b5b11:  *
1:35b5b11:  * Unless required by applicable law or agreed to in writing,
1:35b5b11:  * software distributed under the License is distributed on an
1:35b5b11:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:35b5b11:  * KIND, either express or implied.  See the License for the
1:35b5b11:  * specific language governing permissions and limitations
1:35b5b11:  * under the License.
1:35b5b11:  */
1:35b5b11: package org.apache.aries.jpa.eclipselink.adapter;
1:35b5b11: 
1:35b5b11: import java.net.URL;
1:35b5b11: import java.util.List;
1:06491b0: import java.util.Map;
1:35b5b11: import java.util.Properties;
1:35b5b11: 
1:35b5b11: import javax.persistence.SharedCacheMode;
1:35b5b11: import javax.persistence.ValidationMode;
1:35b5b11: import javax.persistence.spi.ClassTransformer;
1:35b5b11: import javax.persistence.spi.PersistenceUnitInfo;
1:35b5b11: import javax.persistence.spi.PersistenceUnitTransactionType;
1:35b5b11: import javax.sql.DataSource;
1:35b5b11: 
1:35b5b11: import org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer;
1:35b5b11: import org.osgi.framework.Bundle;
1:35b5b11: import org.osgi.framework.FrameworkUtil;
1:35b5b11: 
1:35b5b11: /**
1:35b5b11:  * Wrapper {@link PersistenceUnitInfo} object that adds the eclipselink.target-server setting (if not present)
1:35b5b11:  * and makes sure we can load {@link OSGiTSServer} from the unit's classloader.
1:35b5b11:  */
1:35b5b11: public class PersistenceUnitProxyWithTargetServer implements PersistenceUnitInfo {
1:35b5b11:   private final PersistenceUnitInfo delegate;
1:35b5b11:     private final ClassLoader unionClassLoader; 
1:35b5b11:     
1:06491b0:     public PersistenceUnitProxyWithTargetServer(PersistenceUnitInfo info, Bundle b, Map<String, Object> arg1) {
1:35b5b11:         delegate = info;
1:35b5b11:         unionClassLoader = new UnionClassLoader(delegate.getClassLoader(), b, 
1:06491b0:             FrameworkUtil.getBundle(getClass()), arg1);
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public void addTransformer(ClassTransformer arg0) {
1:35b5b11:         delegate.addTransformer(arg0);
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public boolean excludeUnlistedClasses() {
1:35b5b11:         return delegate.excludeUnlistedClasses();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public ClassLoader getClassLoader() {
1:35b5b11:         return unionClassLoader;
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public List<URL> getJarFileUrls() {
1:35b5b11:         return delegate.getJarFileUrls();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public DataSource getJtaDataSource() {
1:35b5b11:         return delegate.getJtaDataSource();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public List<String> getManagedClassNames() {
1:35b5b11:         return delegate.getManagedClassNames();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public List<String> getMappingFileNames() {
1:35b5b11:         return delegate.getMappingFileNames();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public ClassLoader getNewTempClassLoader() {
1:35b5b11:         return delegate.getNewTempClassLoader();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public DataSource getNonJtaDataSource() {
1:35b5b11:         return delegate.getNonJtaDataSource();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public String getPersistenceProviderClassName() {
1:35b5b11:         return delegate.getPersistenceProviderClassName();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public String getPersistenceUnitName() {
1:35b5b11:         return delegate.getPersistenceUnitName();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public URL getPersistenceUnitRootUrl() {
1:35b5b11:         return delegate.getPersistenceUnitRootUrl();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public String getPersistenceXMLSchemaVersion() {
1:35b5b11:         return delegate.getPersistenceXMLSchemaVersion();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public Properties getProperties() {
1:35b5b11:         Properties props = delegate.getProperties();
1:35b5b11:         
1:35b5b11:         if (props == null) {
1:35b5b11:             props = new Properties();
1:35b5b11:         }
1:35b5b11:         
1:ec3ea65:         if (!props.containsKey("eclipselink.target-server")) {
1:35b5b11:             props.put("eclipselink.target-server", 
1:35b5b11:                 "org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer");
1:35b5b11:         }
1:35b5b11:         
1:35b5b11:         return props;
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public SharedCacheMode getSharedCacheMode() {
1:35b5b11:         return delegate.getSharedCacheMode();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public PersistenceUnitTransactionType getTransactionType() {
1:35b5b11:         return delegate.getTransactionType();
1:35b5b11:     }
1:35b5b11: 
1:ec3ea65:     @Override
1:35b5b11:     public ValidationMode getValidationMode() {
1:35b5b11:         return delegate.getValidationMode();
1:35b5b11:     }
1:35b5b11: }
1:35b5b11:   
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:06491b0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     public PersistenceUnitProxyWithTargetServer(PersistenceUnitInfo info, Bundle b, Map<String, Object> arg1) {
1:             FrameworkUtil.getBundle(getClass()), arg1);
commit:35b5b11
/////////////////////////////////////////////////////////////////////////
1: /*
0: // * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.eclipselink.adapter;
1: 
1: import java.net.URL;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: import javax.persistence.SharedCacheMode;
1: import javax.persistence.ValidationMode;
1: import javax.persistence.spi.ClassTransformer;
1: import javax.persistence.spi.PersistenceUnitInfo;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: import javax.sql.DataSource;
1: 
1: import org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.FrameworkUtil;
1: 
1: /**
1:  * Wrapper {@link PersistenceUnitInfo} object that adds the eclipselink.target-server setting (if not present)
1:  * and makes sure we can load {@link OSGiTSServer} from the unit's classloader.
1:  */
1: public class PersistenceUnitProxyWithTargetServer implements PersistenceUnitInfo {
1:   private final PersistenceUnitInfo delegate;
1:     private final ClassLoader unionClassLoader; 
1:     
0:     public PersistenceUnitProxyWithTargetServer(PersistenceUnitInfo info, Bundle b) {
1:         delegate = info;
1:         unionClassLoader = new UnionClassLoader(delegate.getClassLoader(), b, 
0:             FrameworkUtil.getBundle(getClass()));
1:     }
1: 
1:     public void addTransformer(ClassTransformer arg0) {
1:         delegate.addTransformer(arg0);
1:     }
1: 
1:     public boolean excludeUnlistedClasses() {
1:         return delegate.excludeUnlistedClasses();
1:     }
1: 
1:     public ClassLoader getClassLoader() {
1:         return unionClassLoader;
1:     }
1: 
1:     public List<URL> getJarFileUrls() {
1:         return delegate.getJarFileUrls();
1:     }
1: 
1:     public DataSource getJtaDataSource() {
1:         return delegate.getJtaDataSource();
1:     }
1: 
1:     public List<String> getManagedClassNames() {
1:         return delegate.getManagedClassNames();
1:     }
1: 
1:     public List<String> getMappingFileNames() {
1:         return delegate.getMappingFileNames();
1:     }
1: 
1:     public ClassLoader getNewTempClassLoader() {
1:         return delegate.getNewTempClassLoader();
1:     }
1: 
1:     public DataSource getNonJtaDataSource() {
1:         return delegate.getNonJtaDataSource();
1:     }
1: 
1:     public String getPersistenceProviderClassName() {
1:         return delegate.getPersistenceProviderClassName();
1:     }
1: 
1:     public String getPersistenceUnitName() {
1:         return delegate.getPersistenceUnitName();
1:     }
1: 
1:     public URL getPersistenceUnitRootUrl() {
1:         return delegate.getPersistenceUnitRootUrl();
1:     }
1: 
1:     public String getPersistenceXMLSchemaVersion() {
1:         return delegate.getPersistenceXMLSchemaVersion();
1:     }
1: 
1:     public Properties getProperties() {
1:         Properties props = delegate.getProperties();
1:         
1:         if (props == null) {
1:             props = new Properties();
1:         }
1:         
0:         if (!!!props.containsKey("eclipselink.target-server")) {
1:             props.put("eclipselink.target-server", 
1:                 "org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer");
1:         }
1:         
1:         return props;
1:     }
1: 
1:     public SharedCacheMode getSharedCacheMode() {
1:         return delegate.getSharedCacheMode();
1:     }
1: 
1:     public PersistenceUnitTransactionType getTransactionType() {
1:         return delegate.getTransactionType();
1:     }
1: 
1:     public ValidationMode getValidationMode() {
1:         return delegate.getValidationMode();
1:     }
1: }
1:   
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         if (!props.containsKey("eclipselink.target-server")) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
============================================================================