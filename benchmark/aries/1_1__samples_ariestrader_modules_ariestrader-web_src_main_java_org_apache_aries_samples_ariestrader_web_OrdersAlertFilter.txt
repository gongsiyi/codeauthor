1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web;
1:628add4: 
1:628add4: import java.io.IOException;
1:628add4: import javax.servlet.*;
1:628add4: import javax.servlet.http.*;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServices;
1:56a6860: import org.apache.aries.samples.ariestrader.util.*;
1:628add4: 
1:628add4: public class OrdersAlertFilter implements Filter {
1:628add4: 
1:628add4:     private static TradeServicesManager tradeServicesManager = null;
1:628add4: 
1:628add4:     /**
1:628add4:      * Constructor for CompletedOrdersAlertFilter
1:628add4:      */
1:628add4:     public OrdersAlertFilter() {
1:628add4:         super();
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * @see Filter#init(FilterConfig)
1:628add4:      */
1:628add4:     private FilterConfig filterConfig = null;
1:628add4:     public void init(FilterConfig filterConfig) throws ServletException {
1:628add4:         this.filterConfig = filterConfig;
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
1:628add4:      */
1:628add4:     public void doFilter(
1:628add4:                         ServletRequest req,
1:628add4:                         ServletResponse resp,
1:628add4:                         FilterChain chain)
1:628add4:     throws IOException, ServletException {
1:628add4:         if (filterConfig == null)
1:628add4:             return;
1:628add4: 
1:628add4:         if (tradeServicesManager == null) {
1:628add4:             tradeServicesManager = TradeServiceUtilities.getTradeServicesManager();
1:628add4:         }
1:628add4:         TradeServices tradeServices = tradeServicesManager.getTradeServices();
1:628add4: 
1:628add4:         try {
1:628add4:             String action = req.getParameter("action");
1:628add4:             if ( action != null ) {
1:628add4:                 action = action.trim();
1:628add4:                 if ( (action.length() > 0) && (!action.equals("logout")) ) {
1:628add4:                     String userID;
1:628add4:                     if ( action.equals("login") )
1:628add4:                         userID = req.getParameter("uid");
1:628add4:                     else
1:628add4:                         userID = (String) ((HttpServletRequest) req).getSession().getAttribute("uidBean");
1:628add4:                     if ( (userID != null) && (userID.trim().length()>0) ) {
1:628add4: 
1:628add4:                         java.util.Collection closedOrders = tradeServices.getClosedOrders(userID);
1:628add4:                         if ( (closedOrders!=null) && (closedOrders.size() > 0) ) {
1:628add4:                             req.setAttribute("closedOrders", closedOrders);
1:628add4:                         }
1:628add4:                         if (Log.doTrace()) {
1:628add4:                             Log.printCollection("OrdersAlertFilter: userID="+userID+" closedOrders=", closedOrders);
1:628add4:                         }
1:628add4:                     }
1:628add4:                 }
1:628add4:             }
1:628add4:         }
1:628add4:         catch (Exception e) {
1:628add4:             Log.error(e, "OrdersAlertFilter - Error checking for closedOrders");
1:628add4:         }
1:628add4: 
1:628add4:         ServletContext sc = filterConfig.getServletContext();
1:628add4:         chain.doFilter(req, resp/*wrapper*/);        
1:628add4: 
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * @see Filter#destroy()
1:628add4:      */
1:628add4:     public void destroy() {
1:628add4:         this.filterConfig = null;   
1:628add4:     }
1:628add4: 
1:628add4: }
1:628add4: 
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web;
1: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1: import org.apache.aries.samples.ariestrader.api.TradeServices;
1: import org.apache.aries.samples.ariestrader.util.*;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web;
0: import org.apache.aries.samples.daytrader.api.TradeServicesManager;
0: import org.apache.aries.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.aries.samples.daytrader.api.TradeServices;
0: import org.apache.aries.samples.daytrader.util.*;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web;
1: 
1: import java.io.IOException;
1: import javax.servlet.*;
1: import javax.servlet.http.*;
1: 
0: import org.apache.geronimo.samples.daytrader.api.TradeServicesManager;
0: import org.apache.geronimo.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.geronimo.samples.daytrader.api.TradeServices;
0: import org.apache.geronimo.samples.daytrader.util.*;
1: 
1: public class OrdersAlertFilter implements Filter {
1: 
1:     private static TradeServicesManager tradeServicesManager = null;
1: 
1:     /**
1:      * Constructor for CompletedOrdersAlertFilter
1:      */
1:     public OrdersAlertFilter() {
1:         super();
1:     }
1: 
1:     /**
1:      * @see Filter#init(FilterConfig)
1:      */
1:     private FilterConfig filterConfig = null;
1:     public void init(FilterConfig filterConfig) throws ServletException {
1:         this.filterConfig = filterConfig;
1:     }
1: 
1:     /**
1:      * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
1:      */
1:     public void doFilter(
1:                         ServletRequest req,
1:                         ServletResponse resp,
1:                         FilterChain chain)
1:     throws IOException, ServletException {
1:         if (filterConfig == null)
1:             return;
1: 
1:         if (tradeServicesManager == null) {
1:             tradeServicesManager = TradeServiceUtilities.getTradeServicesManager();
1:         }
1:         TradeServices tradeServices = tradeServicesManager.getTradeServices();
1: 
1:         try {
1:             String action = req.getParameter("action");
1:             if ( action != null ) {
1:                 action = action.trim();
1:                 if ( (action.length() > 0) && (!action.equals("logout")) ) {
1:                     String userID;
1:                     if ( action.equals("login") )
1:                         userID = req.getParameter("uid");
1:                     else
1:                         userID = (String) ((HttpServletRequest) req).getSession().getAttribute("uidBean");
1:                     if ( (userID != null) && (userID.trim().length()>0) ) {
1: 
1:                         java.util.Collection closedOrders = tradeServices.getClosedOrders(userID);
1:                         if ( (closedOrders!=null) && (closedOrders.size() > 0) ) {
1:                             req.setAttribute("closedOrders", closedOrders);
1:                         }
1:                         if (Log.doTrace()) {
1:                             Log.printCollection("OrdersAlertFilter: userID="+userID+" closedOrders=", closedOrders);
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:         catch (Exception e) {
1:             Log.error(e, "OrdersAlertFilter - Error checking for closedOrders");
1:         }
1: 
1:         ServletContext sc = filterConfig.getServletContext();
0:         //String xyz = (String) sc.getAttribute("hitCounter");
1:         chain.doFilter(req, resp/*wrapper*/);        
1: 
1:     }
1: 
1:     /**
1:      * @see Filter#destroy()
1:      */
1:     public void destroy() {
1:         this.filterConfig = null;   
1:     }
1: 
1: }
1: 
============================================================================