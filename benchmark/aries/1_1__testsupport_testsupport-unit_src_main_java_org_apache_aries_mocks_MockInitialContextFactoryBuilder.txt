1:264011e: /*
1:264011e:  * Licensed to the Apache Software Foundation (ASF) under one
1:264011e:  * or more contributor license agreements.  See the NOTICE file
1:264011e:  * distributed with this work for additional information
1:264011e:  * regarding copyright ownership.  The ASF licenses this file
1:264011e:  * to you under the Apache License, Version 2.0 (the
1:264011e:  * "License"); you may not use this file except in compliance
1:264011e:  * with the License.  You may obtain a copy of the License at
1:264011e:  *
1:264011e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:264011e:  *
1:264011e:  * Unless required by applicable law or agreed to in writing,
1:264011e:  * software distributed under the License is distributed on an
1:264011e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:264011e:  * KIND, either express or implied.  See the License for the
1:264011e:  * specific language governing permissions and limitations
1:264011e:  * under the License.
1:264011e:  */
1:264011e: package org.apache.aries.mocks;
1:264011e: 
1:264011e: import java.util.Hashtable;
1:264011e: 
1:264011e: import javax.naming.Context;
1:264011e: import javax.naming.NamingException;
1:264011e: import javax.naming.spi.InitialContextFactory;
1:264011e: import javax.naming.spi.InitialContextFactoryBuilder;
1:264011e: import javax.naming.spi.NamingManager;
1:264011e: 
1:264011e: import org.apache.aries.unittest.mocks.MethodCall;
1:264011e: import org.apache.aries.unittest.mocks.Skeleton;
1:264011e: 
1:264011e: public class MockInitialContextFactoryBuilder implements InitialContextFactoryBuilder
1:264011e: {
1:264011e:   private static InitialContextFactory icf;
1:264011e:   
1:264011e:   public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
1:264011e:       throws NamingException
1:264011e:   {
1:264011e:     return icf;
1:264011e:   }
1:264011e:   
1:264011e:   public static void start(Context ctx) throws NamingException
1:264011e:   {
1:264011e:     if (icf == null) {
1:264011e:       NamingManager.setInitialContextFactoryBuilder(new MockInitialContextFactoryBuilder());
1:264011e:     }
1:264011e:     
1:264011e:     icf = Skeleton.newMock(InitialContextFactory.class);
1:264011e:     getSkeleton().setReturnValue(new MethodCall(InitialContextFactory.class, "getInitialContext", Hashtable.class), ctx);
1:264011e:   }
1:264011e:   
1:264011e:   public static Skeleton getSkeleton()
1:264011e:   {
1:264011e:     return Skeleton.getSkeleton(icf);
1:264011e:   }
5:4e2fb0c: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:264011e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.mocks;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: import javax.naming.spi.InitialContextFactoryBuilder;
1: import javax.naming.spi.NamingManager;
1: 
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: 
1: public class MockInitialContextFactoryBuilder implements InitialContextFactoryBuilder
1: {
1:   private static InitialContextFactory icf;
1:   
1:   public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
1:       throws NamingException
1:   {
1:     return icf;
1:   }
1:   
1:   public static void start(Context ctx) throws NamingException
1:   {
1:     if (icf == null) {
1:       NamingManager.setInitialContextFactoryBuilder(new MockInitialContextFactoryBuilder());
1:     }
1:     
1:     icf = Skeleton.newMock(InitialContextFactory.class);
1:     getSkeleton().setReturnValue(new MethodCall(InitialContextFactory.class, "getInitialContext", Hashtable.class), ctx);
1:   }
1:   
1:   public static Skeleton getSkeleton()
1:   {
1:     return Skeleton.getSkeleton(icf);
1:   }
commit:4e2fb0c
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.mocks;
0: 
0: import java.util.Hashtable;
0: 
0: import javax.naming.Context;
0: import javax.naming.NamingException;
0: import javax.naming.spi.InitialContextFactory;
0: import javax.naming.spi.InitialContextFactoryBuilder;
0: import javax.naming.spi.NamingManager;
0: 
0: import org.apache.aries.unittest.mocks.MethodCall;
0: import org.apache.aries.unittest.mocks.Skeleton;
0: 
0: public class MockInitialContextFactoryBuilder implements InitialContextFactoryBuilder
0: {
0:   private static InitialContextFactory icf;
0:   
0:   public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
0:       throws NamingException
0:   {
0:     return icf;
1:   }
0:   
0:   public static void start(Context ctx) throws NamingException
0:   {
0:     if (icf == null) {
0:       NamingManager.setInitialContextFactoryBuilder(new MockInitialContextFactoryBuilder());
1:     }
0:     
0:     icf = Skeleton.newMock(InitialContextFactory.class);
0:     getSkeleton().setReturnValue(new MethodCall(InitialContextFactory.class, "getInitialContext", Hashtable.class), ctx);
1:   }
0:   
0:   public static Skeleton getSkeleton()
0:   {
0:     return Skeleton.getSkeleton(icf);
1:   }
1: }
============================================================================