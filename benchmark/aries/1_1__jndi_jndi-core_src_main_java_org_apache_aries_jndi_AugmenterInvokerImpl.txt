1:d90eeba: /*
1:d90eeba:  * Licensed to the Apache Software Foundation (ASF) under one
1:d90eeba:  * or more contributor license agreements.  See the NOTICE file
1:d90eeba:  * distributed with this work for additional information
1:d90eeba:  * regarding copyright ownership.  The ASF licenses this file
1:d90eeba:  * to you under the Apache License, Version 2.0 (the
1:d90eeba:  * "License"); you may not use this file except in compliance
1:d90eeba:  * with the License.  You may obtain a copy of the License at
1:d90eeba:  *
1:d90eeba:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d90eeba:  *
1:d90eeba:  * Unless required by applicable law or agreed to in writing,
1:d90eeba:  * software distributed under the License is distributed on an
1:d90eeba:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d90eeba:  * KIND, either express or implied.  See the License for the
1:d90eeba:  * specific language governing permissions and limitations
1:d90eeba:  * under the License.
1:d90eeba:  */
1:d90eeba: package org.apache.aries.jndi;
1:d90eeba: 
1:d90eeba: import java.util.Hashtable;
1:d90eeba: 
1:d90eeba: import org.apache.aries.jndi.spi.EnvironmentAugmentation;
1:d90eeba: import org.apache.aries.jndi.spi.EnvironmentUnaugmentation;
1:d90eeba: import org.apache.aries.jndi.spi.AugmenterInvoker;
1:d90eeba: import org.apache.aries.jndi.startup.Activator;
1:d90eeba: 
1:d90eeba: 
1:d90eeba: public class AugmenterInvokerImpl implements AugmenterInvoker {
1:d90eeba:   
1:d90eeba:     private static AugmenterInvokerImpl instance = null;
1:d90eeba:     
1:d90eeba:     public static AugmenterInvokerImpl getInstance() {
1:d90eeba:       if (instance == null) {
1:d90eeba:         instance = new AugmenterInvokerImpl();
1:d90eeba:       }
1:d90eeba:       return instance;
1:d90eeba:     }
1:d90eeba: 
1:d90eeba: 
1:d90eeba:     public void augmentEnvironment(Hashtable<?, ?> environment) 
1:d90eeba:     {
1:d90eeba:       Object[] objects = Activator.getEnvironmentAugmentors();
1:d90eeba:       
1:d90eeba:       if (objects != null) {
1:d90eeba:         for (Object obj : objects) {
1:d90eeba:           if (obj instanceof EnvironmentAugmentation) {
1:d90eeba:             ((EnvironmentAugmentation)obj).augmentEnvironment(environment);
1:d90eeba:           }
1:d90eeba:         }
1:d90eeba:       }
1:d90eeba:     }
1:d90eeba:     
1:d90eeba:     public void unaugmentEnvironment(Hashtable<?, ?> environment) 
1:d90eeba:     {
1:d90eeba:       Object[] objects = Activator.getEnvironmentUnaugmentors();
1:d90eeba:       
1:d90eeba:       if (objects != null) {
1:d90eeba:         for (Object obj : objects) {
1:d90eeba:           if (obj instanceof EnvironmentUnaugmentation) {
1:d90eeba:             ((EnvironmentUnaugmentation)obj).unaugmentEnvironment(environment);
1:d90eeba:           }
1:d90eeba:         }
1:d90eeba:       }
1:d90eeba:     }
1:d90eeba: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:d90eeba
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.util.Hashtable;
1: 
1: import org.apache.aries.jndi.spi.EnvironmentAugmentation;
1: import org.apache.aries.jndi.spi.EnvironmentUnaugmentation;
1: import org.apache.aries.jndi.spi.AugmenterInvoker;
1: import org.apache.aries.jndi.startup.Activator;
1: 
1: 
1: public class AugmenterInvokerImpl implements AugmenterInvoker {
1:   
1:     private static AugmenterInvokerImpl instance = null;
1:     
1:     public static AugmenterInvokerImpl getInstance() {
1:       if (instance == null) {
1:         instance = new AugmenterInvokerImpl();
1:       }
1:       return instance;
1:     }
1: 
1: 
1:     public void augmentEnvironment(Hashtable<?, ?> environment) 
1:     {
1:       Object[] objects = Activator.getEnvironmentAugmentors();
1:       
1:       if (objects != null) {
1:         for (Object obj : objects) {
1:           if (obj instanceof EnvironmentAugmentation) {
1:             ((EnvironmentAugmentation)obj).augmentEnvironment(environment);
1:           }
1:         }
1:       }
1:     }
1:     
1:     public void unaugmentEnvironment(Hashtable<?, ?> environment) 
1:     {
1:       Object[] objects = Activator.getEnvironmentUnaugmentors();
1:       
1:       if (objects != null) {
1:         for (Object obj : objects) {
1:           if (obj instanceof EnvironmentUnaugmentation) {
1:             ((EnvironmentUnaugmentation)obj).unaugmentEnvironment(environment);
1:           }
1:         }
1:       }
1:     }
1: }
============================================================================