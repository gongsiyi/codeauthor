1:d251156: /*
1:d251156:  * Licensed to the Apache Software Foundation (ASF) under one
1:d251156:  * or more contributor license agreements.  See the NOTICE file
1:d251156:  * distributed with this work for additional information
1:d251156:  * regarding copyright ownership.  The ASF licenses this file
1:d251156:  * to you under the Apache License, Version 2.0 (the
1:d251156:  * "License"); you may not use this file except in compliance
1:d251156:  * with the License.  You may obtain a copy of the License at
1:d251156:  *
1:d251156:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d251156:  *
1:d251156:  * Unless required by applicable law or agreed to in writing,
1:d251156:  * software distributed under the License is distributed on an
1:d251156:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d251156:  * KIND, either express or implied.  See the License for the
1:d251156:  * specific language governing permissions and limitations
1:d251156:  * under the License.
1:d251156:  */
1:d251156: package org.apache.aries.blueprint.itests;
1:d251156: 
1:d251156: import static org.junit.Assert.assertTrue;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.provision;
1:d251156: 
1:d251156: import java.io.InputStream;
1:d251156: 
1:d251156: import org.junit.Test;
1:d251156: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:d251156: import org.osgi.framework.Bundle;
1:d251156: import org.osgi.framework.Constants;
1:d251156: 
1:d251156: public class MemoryLeakTest extends AbstractBlueprintIntegrationTest {
1:d251156: 
1:d251156:     @Test
1:d251156:     public void testScheduledExecMemoryLeak() throws Exception {
1:d251156:         Bundle b = context().getBundleByName("test.bundle");
1:d251156:         
1:d251156:         long startFreeMemory = getFreeMemory();
1:d251156:         
1:d251156:         // 3000 iterations on a Mac 1.6 JVM leaks 30+ mb, 2000 leaks a bit more than 20, 
1:d251156:         // 10000 iterations would be close to OutOfMemory however by that stage the test runs very slowly
1:d251156:         for (int i=0; i<1500; i++) {
1:d251156:             b.start();
1:d251156:             // give the container some time to operate, otherwise it probably won't even get to create a future
1:d251156:             Thread.sleep(10);
1:d251156:             b.stop();
1:d251156:         }
1:d251156:         
1:d251156:         long endFreeMemory = getFreeMemory();
1:d251156:         
1:d251156:         long lossage = startFreeMemory - endFreeMemory;
1:d251156:         System.out.println("We lost: " + lossage);
1:943aa8c:         // increase the lossage value as it may depends of the JDK
1:943aa8c:         assertTrue("We lost: " + lossage, lossage < 77000000);
1:d251156:     }
1:d251156: 
1:d251156:     private long getFreeMemory() {
1:d251156:         for (int i=0; i<16; i++) System.gc();
1:d251156:         return Runtime.getRuntime().freeMemory();
1:d251156:     }
1:d251156: 
1:d251156:     private InputStream memoryLeakTestBundle() {
1:d251156:         return TinyBundles.bundle()
1:d251156:         .add("OSGI-INF/blueprint/blueprint.xml", this.getClass().getResource("/bp2.xml"))
1:d251156:         .set(Constants.BUNDLE_SYMBOLICNAME, "test.bundle")
1:d251156:         .build();
1:d251156:     }
1:d251156: 
1:d251156:     @org.ops4j.pax.exam.Configuration
1:d251156:     public Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:             baseOptions(),
1:d251156:             Helper.blueprintBundles(),
1:d251156:             provision(memoryLeakTestBundle())
1:d251156:         };
1:d251156:     }
1:d251156: 
1:d251156: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:943aa8c
/////////////////////////////////////////////////////////////////////////
1:         // increase the lossage value as it may depends of the JDK
1:         assertTrue("We lost: " + lossage, lossage < 77000000);
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.ops4j.pax.exam.CoreOptions.provision;
1: 
1: import java.io.InputStream;
1: 
1: import org.junit.Test;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: 
1: public class MemoryLeakTest extends AbstractBlueprintIntegrationTest {
1: 
1:     @Test
1:     public void testScheduledExecMemoryLeak() throws Exception {
1:         Bundle b = context().getBundleByName("test.bundle");
1:         
1:         long startFreeMemory = getFreeMemory();
1:         
1:         // 3000 iterations on a Mac 1.6 JVM leaks 30+ mb, 2000 leaks a bit more than 20, 
1:         // 10000 iterations would be close to OutOfMemory however by that stage the test runs very slowly
1:         for (int i=0; i<1500; i++) {
1:             b.start();
1:             // give the container some time to operate, otherwise it probably won't even get to create a future
1:             Thread.sleep(10);
1:             b.stop();
1:         }
1:         
1:         long endFreeMemory = getFreeMemory();
1:         
1:         long lossage = startFreeMemory - endFreeMemory;
1:         System.out.println("We lost: " + lossage);
0:         assertTrue("We lost: " + lossage, lossage < 25000000);
1:     }
1: 
1:     private long getFreeMemory() {
1:         for (int i=0; i<16; i++) System.gc();
1:         return Runtime.getRuntime().freeMemory();
1:     }
1: 
1:     private InputStream memoryLeakTestBundle() {
1:         return TinyBundles.bundle()
1:         .add("OSGI-INF/blueprint/blueprint.xml", this.getClass().getResource("/bp2.xml"))
1:         .set(Constants.BUNDLE_SYMBOLICNAME, "test.bundle")
1:         .build();
1:     }
1: 
1:     @org.ops4j.pax.exam.Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(),
1:             Helper.blueprintBundles(),
1:             provision(memoryLeakTestBundle())
1:         };
1:     }
1: 
1: }
============================================================================