1:868c96f: /**
1:868c96f:  * Licensed to the Apache Software Foundation (ASF) under one
1:868c96f:  * or more contributor license agreements.  See the NOTICE file
1:868c96f:  * distributed with this work for additional information
1:868c96f:  * regarding copyright ownership.  The ASF licenses this file
1:868c96f:  * to you under the Apache License, Version 2.0 (the
1:868c96f:  * "License"); you may not use this file except in compliance
1:868c96f:  * with the License.  You may obtain a copy of the License at
1:868c96f:  * <p>
1:868c96f:  * http://www.apache.org/licenses/LICENSE-2.0
1:868c96f:  * <p>
1:868c96f:  * Unless required by applicable law or agreed to in writing,
1:868c96f:  * software distributed under the License is distributed on an
1:868c96f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:868c96f:  * KIND, either express or implied.  See the License for the
1:868c96f:  * specific language governing permissions and limitations
1:868c96f:  * under the License.
1:868c96f:  */
1:868c96f: package org.apache.aries.blueprint.plugin.pax;
1:868c96f: 
1:868c96f: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:868c96f: import org.apache.aries.blueprint.plugin.spi.CustomDependencyAnnotationHandler;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:868c96f: import org.ops4j.pax.cdi.api.OsgiService;
1:868c96f: 
1:868c96f: import javax.xml.stream.XMLStreamException;
1:868c96f: import javax.xml.stream.XMLStreamWriter;
1:868c96f: import java.lang.reflect.AnnotatedElement;
1:868c96f: import java.lang.reflect.Field;
1:868c96f: import java.lang.reflect.Method;
1:868c96f: 
1:868c96f: public class OsgiServiceHandler implements CustomDependencyAnnotationHandler<OsgiService> {
1:868c96f:     @Override
1:868c96f:     public Class<OsgiService> getAnnotation() {
1:868c96f:         return OsgiService.class;
1:868c96f:     }
1:868c96f: 
1:868c96f:     @Override
1:868c96f:     public String handleDependencyAnnotation(AnnotatedElement annotatedElement, String name, ContextEnricher contextEnricher) {
1:868c96f:         final ServiceFilter serviceFilter = extractServiceFilter(annotatedElement);
1:868c96f:         final String id = name != null ? name : generateReferenceId(getClass(annotatedElement), serviceFilter);
1:868c96f:         final Class<?> clazz = getClass(annotatedElement);
1:868c96f: 
1:868c96f:         contextEnricher.addBean(id, getClass(annotatedElement));
1:0d2c0ec:         contextEnricher.addBlueprintContentWriter("osgiService/" + clazz.getName() + "/" + id, new XmlWriter() {
1:868c96f:             @Override
1:868c96f:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:868c96f:                 writer.writeEmptyElement("reference");
1:868c96f:                 writer.writeAttribute("id", id);
1:868c96f:                 writer.writeAttribute("interface", clazz.getName());
1:868c96f:                 if (serviceFilter.filter != null && !"".equals(serviceFilter.filter)) {
1:868c96f:                     writer.writeAttribute("filter", serviceFilter.filter);
1:868c96f:                 }
1:868c96f:                 if (serviceFilter.compName != null && !"".equals(serviceFilter.compName)) {
1:868c96f:                     writer.writeAttribute("component-name", serviceFilter.compName);
1:868c96f:                 }
1:868c96f:             }
1:868c96f:         });
1:868c96f:         return id;
1:868c96f:     }
1:868c96f: 
1:868c96f:     @Override
1:868c96f:     public String handleDependencyAnnotation(final Class<?> clazz, OsgiService annotation, String name, ContextEnricher contextEnricher) {
1:868c96f:         final ServiceFilter serviceFilter = extractServiceFilter(annotation);
1:868c96f:         final String id = name != null ? name : generateReferenceId(clazz, serviceFilter);
1:868c96f: 
1:868c96f:         contextEnricher.addBean(id, clazz);
1:0d2c0ec:         contextEnricher.addBlueprintContentWriter("osgiService/" + clazz.getName() + "/" + id, new XmlWriter() {
1:868c96f:             @Override
1:868c96f:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:868c96f:                 writer.writeEmptyElement("reference");
1:868c96f:                 writer.writeAttribute("id", id);
1:868c96f:                 writer.writeAttribute("interface", clazz.getName());
1:868c96f:                 if (serviceFilter.filter != null && !"".equals(serviceFilter.filter)) {
1:868c96f:                     writer.writeAttribute("filter", serviceFilter.filter);
1:868c96f:                 }
1:868c96f:                 if (serviceFilter.compName != null && !"".equals(serviceFilter.compName)) {
1:868c96f:                     writer.writeAttribute("component-name", serviceFilter.compName);
1:868c96f:                 }
1:868c96f:             }
1:868c96f:         });
1:868c96f:         return id;
1:868c96f:     }
1:868c96f: 
1:868c96f:     private Class<?> getClass(AnnotatedElement annotatedElement) {
1:868c96f:         if (annotatedElement instanceof Class<?>) {
1:868c96f:             return (Class<?>) annotatedElement;
1:868c96f:         }
1:868c96f:         if (annotatedElement instanceof Method) {
1:868c96f:             return ((Method) annotatedElement).getParameterTypes()[0];
1:868c96f:         }
1:868c96f:         if (annotatedElement instanceof Field) {
1:868c96f:             return ((Field) annotatedElement).getType();
1:868c96f:         }
1:868c96f:         throw new RuntimeException("Unknown annotated element");
1:868c96f:     }
1:868c96f: 
1:868c96f:     private ServiceFilter extractServiceFilter(AnnotatedElement annotatedElement) {
1:868c96f:         OsgiService osgiService = annotatedElement.getAnnotation(OsgiService.class);
1:868c96f:         return extractServiceFilter(osgiService);
1:868c96f:     }
1:868c96f: 
1:868c96f:     private ServiceFilter extractServiceFilter(OsgiService osgiService) {
1:868c96f:         String filterValue = osgiService.filter();
1:868c96f:         return new ServiceFilter(filterValue);
1:868c96f:     }
1:868c96f: 
1:868c96f:     private String generateReferenceId(Class clazz, ServiceFilter serviceFilter) {
1:868c96f:         String prefix = getBeanNameFromSimpleName(clazz.getSimpleName());
1:868c96f:         String suffix = createIdSuffix(serviceFilter);
1:868c96f:         return prefix + suffix;
1:868c96f:     }
1:868c96f: 
1:868c96f:     protected static String getBeanNameFromSimpleName(String name) {
1:868c96f:         return name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
1:868c96f:     }
1:868c96f: 
1:868c96f:     private String createIdSuffix(ServiceFilter serviceFilter) {
1:868c96f:         if (serviceFilter.filter != null) {
1:868c96f:             return "-" + getId(serviceFilter.filter);
1:868c96f:         }
1:868c96f:         if (serviceFilter.compName != null) {
1:868c96f:             return "-" + serviceFilter.compName;
1:868c96f:         }
1:868c96f:         return "";
1:868c96f:     }
1:868c96f: 
1:868c96f:     private String getId(String raw) {
1:868c96f:         StringBuilder builder = new StringBuilder();
1:868c96f:         for (int c = 0; c < raw.length(); c++) {
1:868c96f:             char ch = raw.charAt(c);
1:868c96f:             if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9') {
1:868c96f:                 builder.append(ch);
1:868c96f:             }
1:868c96f:         }
1:868c96f:         return builder.toString();
1:868c96f:     }
1:868c96f: 
1:868c96f:     private static class ServiceFilter {
1:868c96f:         final public String filter;
1:868c96f:         final public String compName;
1:868c96f: 
1:868c96f:         public ServiceFilter(String filterValue) {
1:868c96f:             if (filterValue == null) {
1:868c96f:                 filter = null;
1:868c96f:                 compName = null;
1:868c96f:             } else if (filterValue.contains("(")) {
1:868c96f:                 filter = filterValue;
1:868c96f:                 compName = null;
1:868c96f:             } else {
1:868c96f:                 filter = null;
1:868c96f:                 compName = filterValue;
1:868c96f:             }
1:868c96f:         }
1:868c96f:     }
1:868c96f: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:6aac545
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
/////////////////////////////////////////////////////////////////////////
1:         contextEnricher.addBlueprintContentWriter("osgiService/" + clazz.getName() + "/" + id, new XmlWriter() {
/////////////////////////////////////////////////////////////////////////
1:         contextEnricher.addBlueprintContentWriter("osgiService/" + clazz.getName() + "/" + id, new XmlWriter() {
commit:868c96f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.pax;
1: 
0: import org.apache.aries.blueprint.plugin.spi.BlueprintWriter;
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1: import org.apache.aries.blueprint.plugin.spi.CustomDependencyAnnotationHandler;
1: import org.ops4j.pax.cdi.api.OsgiService;
1: 
1: import javax.xml.stream.XMLStreamException;
1: import javax.xml.stream.XMLStreamWriter;
1: import java.lang.reflect.AnnotatedElement;
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Method;
1: 
1: public class OsgiServiceHandler implements CustomDependencyAnnotationHandler<OsgiService> {
1:     @Override
1:     public Class<OsgiService> getAnnotation() {
1:         return OsgiService.class;
1:     }
1: 
1:     @Override
1:     public String handleDependencyAnnotation(AnnotatedElement annotatedElement, String name, ContextEnricher contextEnricher) {
1:         final ServiceFilter serviceFilter = extractServiceFilter(annotatedElement);
1:         final String id = name != null ? name : generateReferenceId(getClass(annotatedElement), serviceFilter);
1:         final Class<?> clazz = getClass(annotatedElement);
1: 
1:         contextEnricher.addBean(id, getClass(annotatedElement));
0:         contextEnricher.addBlueprintWriter(id, new BlueprintWriter() {
1:             @Override
1:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:                 writer.writeEmptyElement("reference");
1:                 writer.writeAttribute("id", id);
1:                 writer.writeAttribute("interface", clazz.getName());
1:                 if (serviceFilter.filter != null && !"".equals(serviceFilter.filter)) {
1:                     writer.writeAttribute("filter", serviceFilter.filter);
1:                 }
1:                 if (serviceFilter.compName != null && !"".equals(serviceFilter.compName)) {
1:                     writer.writeAttribute("component-name", serviceFilter.compName);
1:                 }
0:                 writer.writeCharacters("\n");
1:             }
1:         });
1:         return id;
1:     }
1: 
1:     @Override
1:     public String handleDependencyAnnotation(final Class<?> clazz, OsgiService annotation, String name, ContextEnricher contextEnricher) {
1:         final ServiceFilter serviceFilter = extractServiceFilter(annotation);
1:         final String id = name != null ? name : generateReferenceId(clazz, serviceFilter);
1: 
1:         contextEnricher.addBean(id, clazz);
0:         contextEnricher.addBlueprintWriter(id, new BlueprintWriter() {
1:             @Override
1:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:                 writer.writeEmptyElement("reference");
1:                 writer.writeAttribute("id", id);
1:                 writer.writeAttribute("interface", clazz.getName());
1:                 if (serviceFilter.filter != null && !"".equals(serviceFilter.filter)) {
1:                     writer.writeAttribute("filter", serviceFilter.filter);
1:                 }
1:                 if (serviceFilter.compName != null && !"".equals(serviceFilter.compName)) {
1:                     writer.writeAttribute("component-name", serviceFilter.compName);
1:                 }
0:                 writer.writeCharacters("\n");
1:             }
1:         });
1:         return id;
1:     }
1: 
1:     private Class<?> getClass(AnnotatedElement annotatedElement) {
1:         if (annotatedElement instanceof Class<?>) {
1:             return (Class<?>) annotatedElement;
1:         }
1:         if (annotatedElement instanceof Method) {
1:             return ((Method) annotatedElement).getParameterTypes()[0];
1:         }
1:         if (annotatedElement instanceof Field) {
1:             return ((Field) annotatedElement).getType();
1:         }
1:         throw new RuntimeException("Unknown annotated element");
1:     }
1: 
1:     private ServiceFilter extractServiceFilter(AnnotatedElement annotatedElement) {
1:         OsgiService osgiService = annotatedElement.getAnnotation(OsgiService.class);
1:         return extractServiceFilter(osgiService);
1:     }
1: 
1:     private ServiceFilter extractServiceFilter(OsgiService osgiService) {
1:         String filterValue = osgiService.filter();
1:         return new ServiceFilter(filterValue);
1:     }
1: 
1:     private String generateReferenceId(Class clazz, ServiceFilter serviceFilter) {
1:         String prefix = getBeanNameFromSimpleName(clazz.getSimpleName());
1:         String suffix = createIdSuffix(serviceFilter);
1:         return prefix + suffix;
1:     }
1: 
1:     protected static String getBeanNameFromSimpleName(String name) {
1:         return name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
1:     }
1: 
1:     private String createIdSuffix(ServiceFilter serviceFilter) {
1:         if (serviceFilter.filter != null) {
1:             return "-" + getId(serviceFilter.filter);
1:         }
1:         if (serviceFilter.compName != null) {
1:             return "-" + serviceFilter.compName;
1:         }
1:         return "";
1:     }
1: 
1:     private String getId(String raw) {
1:         StringBuilder builder = new StringBuilder();
1:         for (int c = 0; c < raw.length(); c++) {
1:             char ch = raw.charAt(c);
1:             if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9') {
1:                 builder.append(ch);
1:             }
1:         }
1:         return builder.toString();
1:     }
1: 
1:     private static class ServiceFilter {
1:         final public String filter;
1:         final public String compName;
1: 
1:         public ServiceFilter(String filterValue) {
1:             if (filterValue == null) {
1:                 filter = null;
1:                 compName = null;
1:             } else if (filterValue.contains("(")) {
1:                 filter = filterValue;
1:                 compName = null;
1:             } else {
1:                 filter = null;
1:                 compName = filterValue;
1:             }
1:         }
1:     }
1: }
============================================================================