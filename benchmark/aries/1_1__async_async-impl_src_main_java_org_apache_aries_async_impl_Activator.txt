1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:39cd3f4: package org.apache.aries.async.impl;
1:39cd3f4: 
1:39cd3f4: import java.security.AccessController;
1:39cd3f4: import java.security.PrivilegedAction;
1:39cd3f4: import java.util.Hashtable;
1:39cd3f4: import java.util.concurrent.ExecutorService;
1:39cd3f4: import java.util.concurrent.Executors;
1:8b05938: import java.util.concurrent.ScheduledExecutorService;
1:39cd3f4: import java.util.concurrent.ThreadFactory;
1:39cd3f4: import java.util.concurrent.atomic.AtomicInteger;
1:39cd3f4: 
1:39cd3f4: import org.osgi.framework.BundleActivator;
1:39cd3f4: import org.osgi.framework.BundleContext;
1:39cd3f4: import org.osgi.service.async.Async;
1:39cd3f4: import org.osgi.service.log.LogService;
1:39cd3f4: import org.osgi.util.tracker.ServiceTracker;
1:39cd3f4: 
1:39cd3f4: public class Activator implements BundleActivator {
1:39cd3f4: 	
1:39cd3f4: 	private final ExecutorService executor = Executors.newFixedThreadPool(10, new ThreadFactory() {
1:39cd3f4: 		
1:39cd3f4: 		private final AtomicInteger count = new AtomicInteger();
1:39cd3f4: 		
1:39cd3f4: 		public Thread newThread(final Runnable r) {
1:39cd3f4: 			Thread t = new Thread(new Runnable(){
1:39cd3f4: 				public void run() {
1:39cd3f4: 					AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:39cd3f4: 						public Void run() {
1:39cd3f4: 							r.run();
1:39cd3f4: 							return null;
1:39cd3f4: 						}
1:39cd3f4: 					});
1:39cd3f4: 				}
1:39cd3f4: 			}, "Asynchronous Execution Service Thread " + count.incrementAndGet());
1:39cd3f4: 			return t;
1:39cd3f4: 		}
1:39cd3f4: 	});
1:8b05938: 
1:8b05938: 	private final ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
1:8b05938: 		
1:8b05938: 		private final AtomicInteger count = new AtomicInteger();
1:8b05938: 		
1:8b05938: 		public Thread newThread(final Runnable r) {
1:8b05938: 			Thread t = new Thread(new Runnable(){
1:8b05938: 				public void run() {
1:8b05938: 					AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:8b05938: 						public Void run() {
1:8b05938: 							r.run();
1:8b05938: 							return null;
1:8b05938: 						}
1:8b05938: 					});
1:8b05938: 				}
1:8b05938: 			}, "Asynchronous Execution Service Timing Thread " + count.incrementAndGet());
1:8b05938: 			return t;
1:8b05938: 		}
1:8b05938: 	});
1:39cd3f4: 	
1:39cd3f4: 	private volatile ServiceTracker<LogService, LogService> logServiceTracker;
1:39cd3f4: 	
1:39cd3f4: 	public void start(BundleContext context) throws Exception {
1:39cd3f4: 		logServiceTracker = new ServiceTracker<LogService, LogService>(context, LogService.class, null);
1:39cd3f4: 		logServiceTracker.open();
1:39cd3f4: 		
1:8b05938: 		context.registerService(Async.class.getName(), new AsyncServiceFactory(executor, ses, logServiceTracker), new Hashtable<String, Object>());
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	public void stop(BundleContext context) throws Exception {
1:8b05938: 		ses.shutdownNow();
1:39cd3f4: 		executor.shutdownNow();
1:39cd3f4: 		logServiceTracker.close();
1:39cd3f4: 	}
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8b05938
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ScheduledExecutorService;
/////////////////////////////////////////////////////////////////////////
1: 
1: 	private final ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
1: 		
1: 		private final AtomicInteger count = new AtomicInteger();
1: 		
1: 		public Thread newThread(final Runnable r) {
1: 			Thread t = new Thread(new Runnable(){
1: 				public void run() {
1: 					AccessController.doPrivileged(new PrivilegedAction<Void>() {
1: 						public Void run() {
1: 							r.run();
1: 							return null;
1: 						}
1: 					});
1: 				}
1: 			}, "Asynchronous Execution Service Timing Thread " + count.incrementAndGet());
1: 			return t;
1: 		}
1: 	});
/////////////////////////////////////////////////////////////////////////
1: 		context.registerService(Async.class.getName(), new AsyncServiceFactory(executor, ses, logServiceTracker), new Hashtable<String, Object>());
1: 		ses.shutdownNow();
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.impl;
1: 
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.util.Hashtable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.async.Async;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class Activator implements BundleActivator {
1: 	
1: 	private final ExecutorService executor = Executors.newFixedThreadPool(10, new ThreadFactory() {
1: 		
1: 		private final AtomicInteger count = new AtomicInteger();
1: 		
1: 		public Thread newThread(final Runnable r) {
1: 			Thread t = new Thread(new Runnable(){
1: 				public void run() {
1: 					AccessController.doPrivileged(new PrivilegedAction<Void>() {
1: 						public Void run() {
1: 							r.run();
1: 							return null;
1: 						}
1: 					});
1: 				}
1: 			}, "Asynchronous Execution Service Thread " + count.incrementAndGet());
1: 			return t;
1: 		}
1: 	});
1: 	
1: 	private volatile ServiceTracker<LogService, LogService> logServiceTracker;
1: 	
1: 	public void start(BundleContext context) throws Exception {
1: 		logServiceTracker = new ServiceTracker<LogService, LogService>(context, LogService.class, null);
1: 		logServiceTracker.open();
1: 		
0: 		context.registerService(Async.class.getName(), new AsyncServiceFactory(executor, logServiceTracker), new Hashtable<String, Object>());
1: 	}
1: 
1: 	public void stop(BundleContext context) throws Exception {
1: 		executor.shutdownNow();
1: 		logServiceTracker.close();
1: 	}
1: }
============================================================================