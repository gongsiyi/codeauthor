1:552587b: /*
1:552587b:  * Licensed under the Apache License, Version 2.0 (the "License");
1:552587b:  * you may not use this file except in compliance with the License.
1:552587b:  * You may obtain a copy of the License at
1:552587b:  *
1:552587b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:552587b:  *
1:552587b:  * Unless required by applicable law or agreed to in writing, software
1:552587b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:552587b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:552587b:  * See the License for the specific language governing permissions and
1:552587b:  * limitations under the License.
1:552587b:  */
1:a68e051: package org.apache.aries.subsystem.core.archive;
1:a68e051: 
1:a68e051: import static org.junit.Assert.assertEquals;
1:a68e051: import static org.junit.Assert.fail;
1:a68e051: 
1:a68e051: import org.junit.Test;
1:a68e051: import org.osgi.framework.VersionRange;
1:a68e051: 
1:a68e051: public class ImportPackageHeaderTest {
1:a68e051: 	@Test
1:a68e051: 	public void testVersionAttributeWithMultiplePackages() {
1:a68e051: 		String headerStr = "org.foo;org.bar;org.foo.bar;version=1.3";
1:a68e051: 		ImportPackageHeader header = new ImportPackageHeader(headerStr);
1:2ffcfb9: 		ImportPackageHeader header2 = new ImportPackageHeader(headerStr);
1:a68e051: 		assertClauses(header, 1);
1:a68e051: 		assertVersionAttribute(header, "org.foo;org.bar;org.foo.bar", "1.3");
1:2ffcfb9: 		assertEquals(header, header2);
1:a68e051: 	}
1:a68e051: 	
1:a68e051: 	@Test
1:a68e051: 	public void testVersionAttributeWithoutMultiplePackages() {
1:a68e051: 		String headerStr = "org.foo,org.bar,org.foo.bar;version=1.3";
1:a68e051: 		ImportPackageHeader header = new ImportPackageHeader(headerStr);
1:a68e051: 		assertClauses(header, 3);
1:a68e051: 		assertVersionAttribute(header, "org.foo", "0");
1:a68e051: 		assertVersionAttribute(header, "org.bar", "0.0");
1:a68e051: 		assertVersionAttribute(header, "org.foo.bar", "1.3");
1:a68e051: 	}
1:a68e051: 	
1:a68e051: 	private void assertClauses(ImportPackageHeader header, int expectedClauses) {
1:a68e051: 		assertEquals("Wrong number of clauses", expectedClauses, header.getClauses().size());
1:a68e051: 	}
1:a68e051: 	
1:a68e051: 	private void assertVersionAttribute(ImportPackageHeader header, String path, String expectedVersion) {
1:a68e051: 		for (ImportPackageHeader.Clause clause : header.getClauses())
1:a68e051: 			if (path.equals(clause.getPath())) {
1:a68e051: 				assertVersionAttribute(clause, expectedVersion);
1:a68e051: 				return;
1:a68e051: 			}
1:a68e051: 		fail("Path not found: " + path);
1:a68e051: 	}
1:a68e051: 	
1:a68e051: 	private void assertVersionAttribute(ImportPackageHeader.Clause clause, String expectedVersion) {
1:a68e051: 		assertVersionAttribute(clause, new VersionRange(expectedVersion));
1:a68e051: 	}
1:a68e051: 	
1:a68e051: 	private void assertVersionAttribute(ImportPackageHeader.Clause clause, VersionRange expectedVersion) {
1:a68e051: 		assertEquals("Wrong version attribute", expectedVersion, clause.getVersionRangeAttribute().getVersionRange());
1:a68e051: 	}
1:a68e051: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 		ImportPackageHeader header2 = new ImportPackageHeader(headerStr);
1: 		assertEquals(header, header2);
commit:552587b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:a68e051
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.VersionRange;
1: 
1: public class ImportPackageHeaderTest {
1: 	@Test
1: 	public void testVersionAttributeWithMultiplePackages() {
1: 		String headerStr = "org.foo;org.bar;org.foo.bar;version=1.3";
1: 		ImportPackageHeader header = new ImportPackageHeader(headerStr);
1: 		assertClauses(header, 1);
1: 		assertVersionAttribute(header, "org.foo;org.bar;org.foo.bar", "1.3");
1: 	}
1: 	
1: 	@Test
1: 	public void testVersionAttributeWithoutMultiplePackages() {
1: 		String headerStr = "org.foo,org.bar,org.foo.bar;version=1.3";
1: 		ImportPackageHeader header = new ImportPackageHeader(headerStr);
1: 		assertClauses(header, 3);
1: 		assertVersionAttribute(header, "org.foo", "0");
1: 		assertVersionAttribute(header, "org.bar", "0.0");
1: 		assertVersionAttribute(header, "org.foo.bar", "1.3");
1: 	}
1: 	
1: 	private void assertClauses(ImportPackageHeader header, int expectedClauses) {
1: 		assertEquals("Wrong number of clauses", expectedClauses, header.getClauses().size());
1: 	}
1: 	
1: 	private void assertVersionAttribute(ImportPackageHeader header, String path, String expectedVersion) {
1: 		for (ImportPackageHeader.Clause clause : header.getClauses())
1: 			if (path.equals(clause.getPath())) {
1: 				assertVersionAttribute(clause, expectedVersion);
1: 				return;
1: 			}
1: 		fail("Path not found: " + path);
1: 	}
1: 	
1: 	private void assertVersionAttribute(ImportPackageHeader.Clause clause, String expectedVersion) {
1: 		assertVersionAttribute(clause, new VersionRange(expectedVersion));
1: 	}
1: 	
1: 	private void assertVersionAttribute(ImportPackageHeader.Clause clause, VersionRange expectedVersion) {
1: 		assertEquals("Wrong version attribute", expectedVersion, clause.getVersionRangeAttribute().getVersionRange());
1: 	}
1: }
============================================================================