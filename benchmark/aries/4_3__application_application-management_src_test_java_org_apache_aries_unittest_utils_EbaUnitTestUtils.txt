1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
3:8914925: 
1:8914925: package org.apache.aries.unittest.utils;
1:8914925: 
1:8914925: import java.io.File;
1:8914925: import java.io.FileInputStream;
1:8914925: import java.io.IOException;
1:8914925: import java.util.jar.Attributes;
1:8914925: import java.util.jar.Manifest;
1:8914925: 
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:8914925: 
1:8914925: public class EbaUnitTestUtils {
1:8914925: 
1:8914925: private static final String TEMP_DIR = "unittest/tmpEbaContent";
1:8914925:   
1:8914925:   public static void createEba(String rootFolder, String outputFile) throws IOException
4:8914925:   {
1:8914925:     File tempDir = new File(TEMP_DIR);
1:8914925:     tempDir.mkdirs();
1:8914925:     
1:8914925:     createEbaRecursive(new File(rootFolder), tempDir, "");
1:8914925:     IOUtils.zipUp(tempDir, new File(outputFile));
1:8914925:     IOUtils.deleteRecursive(tempDir);
4:8914925:   }
1:8914925:   
1:8914925:   private static void createEbaRecursive(File folder, File tempDir, String prefix) throws IOException
1:8914925:   {
1:ad46961:     File[] files = folder.listFiles();
1:ad46961:     
1:ad46961:     if (files != null) {
1:ad46961:       for (File f : files)
1:8914925:       {
1:ad46961:         if ((f.getName().endsWith(".jar") || f.getName().endsWith(".war")) && f.isDirectory())
1:8914925:         {
1:ad46961:           File manifestFile = new File(f, "META-INF/MANIFEST.MF");
1:ad46961:           Manifest m;
1:8914925:           
1:ad46961:           if (manifestFile.isFile())
1:ad46961:             m = new Manifest(new FileInputStream(manifestFile));
1:ad46961:           else
1:ad46961:           {
1:ad46961:             m = new Manifest();
1:ad46961:             m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:ad46961:           }
1:ad46961:             
1:ad46961:           File jarFile = new File(tempDir, prefix + f.getName());
1:ad46961:           jarFile.getParentFile().mkdirs();
1:ad46961:           
1:ad46961:           IOUtils.jarUp(f, jarFile, m); 
1:ad46961:         }
1:ad46961:         else if (f.isFile())
1:ad46961:         {
1:ad46961:           IOUtils.writeOut(tempDir, prefix + f.getName(), new FileInputStream(f));
1:ad46961:         }
1:ad46961:         else if (f.isDirectory())
1:ad46961:         {
1:ad46961:           createEbaRecursive(f, tempDir, prefix + f.getName() + File.separator);
1:ad46961:         }
1:8914925:       }
1:8914925:     }
1:8914925:   }
1:8914925:   
1:8914925:   public static void cleanupEba(String outputFile)
1:8914925:   {
1:8914925:     new File(outputFile).delete();
1:8914925:   }
1:8914925: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.filesystem.IOUtils;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ad46961
/////////////////////////////////////////////////////////////////////////
1:     File[] files = folder.listFiles();
1:     
1:     if (files != null) {
1:       for (File f : files)
1:         if ((f.getName().endsWith(".jar") || f.getName().endsWith(".war")) && f.isDirectory())
1:           File manifestFile = new File(f, "META-INF/MANIFEST.MF");
1:           Manifest m;
1:           if (manifestFile.isFile())
1:             m = new Manifest(new FileInputStream(manifestFile));
1:           else
1:           {
1:             m = new Manifest();
1:             m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:           }
1:             
1:           File jarFile = new File(tempDir, prefix + f.getName());
1:           jarFile.getParentFile().mkdirs();
1:           
1:           IOUtils.jarUp(f, jarFile, m); 
1:         }
1:         else if (f.isFile())
1:         {
1:           IOUtils.writeOut(tempDir, prefix + f.getName(), new FileInputStream(f));
1:         }
1:         else if (f.isDirectory())
1:         {
1:           createEbaRecursive(f, tempDir, prefix + f.getName() + File.separator);
1:         }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.unittest.utils;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.util.jar.Attributes;
1: import java.util.jar.Manifest;
1: 
0: import org.apache.aries.application.utils.filesystem.IOUtils;
1: 
1: public class EbaUnitTestUtils {
1: 
1: private static final String TEMP_DIR = "unittest/tmpEbaContent";
1:   
1:   public static void createEba(String rootFolder, String outputFile) throws IOException
1:   {
1:     File tempDir = new File(TEMP_DIR);
1:     tempDir.mkdirs();
1:     
1:     createEbaRecursive(new File(rootFolder), tempDir, "");
1:     IOUtils.zipUp(tempDir, new File(outputFile));
1:     IOUtils.deleteRecursive(tempDir);
1:   }
1:   
1:   private static void createEbaRecursive(File folder, File tempDir, String prefix) throws IOException
1:   {
0:     for (File f : folder.listFiles())
1:     {
0:       if ((f.getName().endsWith(".jar") || f.getName().endsWith(".war")) && f.isDirectory())
1:       {
0:         File manifestFile = new File(f, "META-INF/MANIFEST.MF");
0:         Manifest m;
1:         
0:         if (manifestFile.isFile())
0:           m = new Manifest(new FileInputStream(manifestFile));
0:         else
1:         {
0:           m = new Manifest();
0:           m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:         }
1:           
0:         File jarFile = new File(tempDir, prefix + f.getName());
0:         jarFile.getParentFile().mkdirs();
1:         
0:         IOUtils.jarUp(f, jarFile, m); 
1:       }
0:       else if (f.isFile())
1:       {
0:         IOUtils.writeOut(tempDir, prefix + f.getName(), new FileInputStream(f));
1:       }
0:       else if (f.isDirectory())
1:       {
0:         createEbaRecursive(f, tempDir, prefix + f.getName() + File.separator);
1:       }
1:     }
1:   }
1:   
1:   public static void cleanupEba(String outputFile)
1:   {
1:     new File(outputFile).delete();
1:   }
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:5297b83
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.unittest.utils;
0: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: import java.util.jar.Attributes;
0: import java.util.jar.Manifest;
0: 
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: 
0: public class EbaUnitTestUtils {
0: 
0: private static final String TEMP_DIR = "unittest/tmpEbaContent";
0:   
0:   public static void createEba(String rootFolder, String outputFile) throws IOException
0:   {
0:     File tempDir = new File(TEMP_DIR);
0:     tempDir.mkdirs();
0:     
0:     createEbaRecursive(new File(rootFolder), tempDir, "");
0:     IOUtils.zipUp(tempDir, new File(outputFile));
0:     IOUtils.deleteRecursive(tempDir);
0:   }
0:   
0:   private static void createEbaRecursive(File folder, File tempDir, String prefix) throws IOException
0:   {
0:     for (File f : folder.listFiles())
0:     {
0:       if ((f.getName().endsWith(".jar") || f.getName().endsWith(".war")) && f.isDirectory())
0:       {
0:         File manifestFile = new File(f, "META-INF/MANIFEST.MF");
0:         Manifest m;
0:         
0:         if (manifestFile.isFile())
0:           m = new Manifest(new FileInputStream(manifestFile));
0:         else
0:         {
0:           m = new Manifest();
0:           m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
0:         }
0:           
0:         File jarFile = new File(tempDir, prefix + f.getName());
0:         jarFile.getParentFile().mkdirs();
0:         
0:         IOUtils.jarUp(f, jarFile, m); 
0:       }
0:       else if (f.isFile())
0:       {
0:         IOUtils.writeOut(tempDir, prefix + f.getName(), new FileInputStream(f));
0:       }
0:       else if (f.isDirectory())
0:       {
0:         createEbaRecursive(f, tempDir, prefix + f.getName() + File.separator);
0:       }
0:     }
0:   }
0:   
0:   public static void cleanupEba(String outputFile)
0:   {
0:     new File(outputFile).delete();
0:   }
0: }
============================================================================