1:530e211: /*
1:530e211:  * Licensed to the Apache Software Foundation (ASF) under one
1:530e211:  * or more contributor license agreements.  See the NOTICE file
1:530e211:  * distributed with this work for additional information
1:530e211:  * regarding copyright ownership.  The ASF licenses this file
1:530e211:  * to you under the Apache License, Version 2.0 (the
1:530e211:  * "License"); you may not use this file except in compliance
1:530e211:  * with the License.  You may obtain a copy of the License at
1:530e211:  *
1:530e211:  *   http://www.apache.org/licenses/LICENSE-2.0
1:530e211:  *
1:530e211:  * Unless required by applicable law or agreed to in writing,
1:530e211:  * software distributed under the License is distributed on an
1:530e211:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:530e211:  * KIND, either express or implied.  See the License for the
1:530e211:  * specific language governing permissions and limitations
1:530e211:  * under the License.
1:530e211:  */
1:530e211: package org.apache.aries.util;
5:530e211: 
1:530e211: import org.apache.aries.unittest.mocks.MethodCall;
1:530e211: import org.apache.aries.unittest.mocks.Skeleton;
1:530e211: import org.apache.aries.util.tracker.BundleTrackerFactory;
1:530e211: import org.apache.aries.util.tracker.InternalRecursiveBundleTracker;
1:530e211: import org.apache.aries.util.tracker.RecursiveBundleTracker;
1:530e211: import org.junit.After;
1:530e211: import org.junit.Before;
1:530e211: import org.junit.Test;
1:530e211: import org.osgi.framework.Bundle;
1:530e211: import org.osgi.framework.BundleContext;
1:530e211: import org.osgi.framework.BundleEvent;
1:530e211: import org.osgi.framework.ServiceReference;
1:530e211: import org.osgi.framework.Version;
1:530e211: import org.osgi.service.framework.CompositeBundle;
1:530e211: import org.osgi.util.tracker.BundleTrackerCustomizer;
1:530e211: 
1:530e211: import static org.junit.Assert.*;
1:530e211: 
1:530e211: public class RecursiveBundleTrackerTest {
1:530e211:     BundleContext context;
1:886154c:     InternalRecursiveBundleTracker sut;
1:530e211:     
1:530e211:     @Before
1:530e211:     public void setup() {
1:530e211:         context = Skeleton.newMock(BundleContext.class);
1:530e211:         Skeleton.getSkeleton(context).setReturnValue(
1:530e211:                 new MethodCall(BundleContext.class, "getServiceReference", "org.osgi.service.framework.CompositeBundleFactory"), 
1:530e211:                 Skeleton.newMock(ServiceReference.class));
1:530e211:     }
1:530e211:     
1:530e211:     @After
1:530e211:     public void closeTrackes() {
1:530e211:         BundleTrackerFactory.unregisterAndCloseBundleTracker("test");
1:530e211:     }
1:530e211:     
1:530e211:     @Test
1:530e211:     public void testCompositeLifeCycle() {
1:886154c:         makeSUT();
1:886154c:         CompositeBundle  cb = composite("test.composite", "1.0.0");
1:886154c:         assertNoTrackers();
1:530e211:         
1:886154c:         // full lifecycle
1:530e211:         
1:530e211:         sut.addingBundle(cb, new BundleEvent(BundleEvent.INSTALLED, cb));
1:886154c:         assertTracker(cb);
1:886154c: 
1:886154c:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.RESOLVED, cb), cb);
1:886154c:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.STARTING, cb), cb);
1:886154c:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.STARTED, cb), cb);
1:886154c:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.STOPPING, cb), cb);
1:530e211:         sut.removedBundle(cb, new BundleEvent(BundleEvent.STOPPED, cb), cb);
1:886154c:         assertNoTrackers();
1:886154c:         
1:886154c:         // short lifecycle
1:886154c:         
1:886154c:         sut.addingBundle(cb, new BundleEvent(BundleEvent.INSTALLED, cb));
1:886154c:         assertTracker(cb);
1:886154c:         
1:886154c:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.RESOLVED, cb), cb);        
1:886154c:         sut.removedBundle(cb, new BundleEvent(BundleEvent.UNRESOLVED, cb), cb);
1:886154c:         assertNoTrackers();
1:886154c:         
1:886154c:         // shortest lifecycle
1:886154c:         
1:886154c:         sut.addingBundle(cb, new BundleEvent(BundleEvent.INSTALLED, cb));
1:886154c:         assertTracker(cb);
1:886154c:         
1:886154c:         sut.removedBundle(cb, new BundleEvent(BundleEvent.UNINSTALLED, cb), cb);
1:886154c:         assertNoTrackers();
1:530e211:     }
1:886154c:     
1:530e211:     
1:530e211:     @Test(expected=IllegalArgumentException.class)
1:530e211:     public void testMissingStopping() {
1:530e211:         new RecursiveBundleTracker(null, Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE, null);
1:530e211:     }
1:530e211:     
1:530e211:     @Test(expected=IllegalArgumentException.class)
1:530e211:     public void testMissingStarting() {
1:530e211:         new RecursiveBundleTracker(null, Bundle.INSTALLED | Bundle.RESOLVED | Bundle.ACTIVE | Bundle.STOPPING, null);        
1:530e211:     }
1:530e211: 
1:530e211:     @Test(expected=IllegalArgumentException.class)
1:530e211:     public void testMissingInstalled() {
1:530e211:         new RecursiveBundleTracker(null, Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, null);        
1:530e211:     }
1:886154c:     
1:886154c:     private void assertNoTrackers() {
1:886154c:         assertTrue(BundleTrackerFactory.getAllBundleTracker().isEmpty());        
1:886154c:     }
1:886154c:     
1:886154c:     private void assertTracker(CompositeBundle cb) {
1:886154c:         assertEquals(1, BundleTrackerFactory.getAllBundleTracker().size());
1:886154c:         assertEquals(1, BundleTrackerFactory.getBundleTrackerList(cb.getSymbolicName()+"_"+cb.getVersion()).size());        
1:886154c:     }
1:886154c:     
1:886154c:     private void makeSUT() {
1:886154c:         BundleTrackerCustomizer customizer = Skeleton.newMock(BundleTrackerCustomizer.class);
1:886154c: 
1:886154c:         sut = new InternalRecursiveBundleTracker(context, 
1:8069959:                 Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, customizer, true);
1:886154c:         
1:886154c:         sut.open();
1:886154c:     }
1:886154c:     
1:886154c:     private CompositeBundle composite(String symbolicName, String version) {
1:886154c:         CompositeBundle cb = Skeleton.newMock(CompositeBundle.class);
1:886154c:         Skeleton cbSkel = Skeleton.getSkeleton(cb);
1:886154c:         cbSkel.setReturnValue(new MethodCall(CompositeBundle.class, "getSymbolicName"), symbolicName);
1:886154c:         cbSkel.setReturnValue(new MethodCall(CompositeBundle.class, "getVersion"), new Version(version));
1:886154c:         return cb;
1:886154c:     }
1:530e211: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
1:                 Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, customizer, true);
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:886154c
/////////////////////////////////////////////////////////////////////////
1:     InternalRecursiveBundleTracker sut;
/////////////////////////////////////////////////////////////////////////
1:         makeSUT();
1:         CompositeBundle  cb = composite("test.composite", "1.0.0");
1:         assertNoTrackers();
1:         // full lifecycle
1:         assertTracker(cb);
1: 
1:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.RESOLVED, cb), cb);
1:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.STARTING, cb), cb);
1:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.STARTED, cb), cb);
1:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.STOPPING, cb), cb);
1:         assertNoTrackers();
1:         
1:         // short lifecycle
1:         
1:         sut.addingBundle(cb, new BundleEvent(BundleEvent.INSTALLED, cb));
1:         assertTracker(cb);
1:         
1:         sut.modifiedBundle(cb, new BundleEvent(BundleEvent.RESOLVED, cb), cb);        
1:         sut.removedBundle(cb, new BundleEvent(BundleEvent.UNRESOLVED, cb), cb);
1:         assertNoTrackers();
1:         
1:         // shortest lifecycle
1:         
1:         sut.addingBundle(cb, new BundleEvent(BundleEvent.INSTALLED, cb));
1:         assertTracker(cb);
1:         
1:         sut.removedBundle(cb, new BundleEvent(BundleEvent.UNINSTALLED, cb), cb);
1:         assertNoTrackers();
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     private void assertNoTrackers() {
1:         assertTrue(BundleTrackerFactory.getAllBundleTracker().isEmpty());        
1:     }
1:     
1:     private void assertTracker(CompositeBundle cb) {
1:         assertEquals(1, BundleTrackerFactory.getAllBundleTracker().size());
1:         assertEquals(1, BundleTrackerFactory.getBundleTrackerList(cb.getSymbolicName()+"_"+cb.getVersion()).size());        
1:     }
1:     
1:     private void makeSUT() {
1:         BundleTrackerCustomizer customizer = Skeleton.newMock(BundleTrackerCustomizer.class);
1: 
1:         sut = new InternalRecursiveBundleTracker(context, 
0:                 Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, customizer);
1:         
1:         sut.open();
1:     }
1:     
1:     private CompositeBundle composite(String symbolicName, String version) {
1:         CompositeBundle cb = Skeleton.newMock(CompositeBundle.class);
1:         Skeleton cbSkel = Skeleton.getSkeleton(cb);
1:         cbSkel.setReturnValue(new MethodCall(CompositeBundle.class, "getSymbolicName"), symbolicName);
1:         cbSkel.setReturnValue(new MethodCall(CompositeBundle.class, "getVersion"), new Version(version));
1:         return cb;
1:     }
commit:530e211
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util;
1: 
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.apache.aries.util.tracker.BundleTrackerFactory;
1: import org.apache.aries.util.tracker.InternalRecursiveBundleTracker;
1: import org.apache.aries.util.tracker.RecursiveBundleTracker;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
1: import org.osgi.service.framework.CompositeBundle;
0: import org.osgi.service.framework.CompositeBundleFactory;
1: import org.osgi.util.tracker.BundleTrackerCustomizer;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class RecursiveBundleTrackerTest {
1:     BundleContext context;
1:     
1:     @Before
1:     public void setup() {
1:         context = Skeleton.newMock(BundleContext.class);
1:         Skeleton.getSkeleton(context).setReturnValue(
1:                 new MethodCall(BundleContext.class, "getServiceReference", "org.osgi.service.framework.CompositeBundleFactory"), 
1:                 Skeleton.newMock(ServiceReference.class));
1:     }
1:     
1:     @After
1:     public void closeTrackes() {
1:         BundleTrackerFactory.unregisterAndCloseBundleTracker("test");
1:     }
1:     
1:     @Test
1:     public void testCompositeLifeCycle() {
0:         BundleTrackerCustomizer customizer = Skeleton.newMock(BundleTrackerCustomizer.class);
1: 
0:         InternalRecursiveBundleTracker sut = new InternalRecursiveBundleTracker(context, 
0:                 Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, customizer);
1:         
0:         sut.open();
1:         
0:         CompositeBundle cb = Skeleton.newMock(CompositeBundle.class);
0:         Skeleton cbSkel = Skeleton.getSkeleton(cb);
0:         cbSkel.setReturnValue(new MethodCall(CompositeBundle.class, "getSymbolicName"), "test.composite");
0:         cbSkel.setReturnValue(new MethodCall(CompositeBundle.class, "getVersion"), new Version("1.0.0"));
1:         
0:         assertTrue(BundleTrackerFactory.getAllBundleTracker().isEmpty());
1:         
1:         sut.addingBundle(cb, new BundleEvent(BundleEvent.INSTALLED, cb));
0:         assertEquals(1, BundleTrackerFactory.getAllBundleTracker().size());
0:         assertEquals(1, BundleTrackerFactory.getBundleTrackerList("test.composite_1.0.0").size());
1:         
1:         sut.removedBundle(cb, new BundleEvent(BundleEvent.STOPPED, cb), cb);
0:         assertTrue(BundleTrackerFactory.getAllBundleTracker().isEmpty());        
1:     }
1:     
1:     @Test(expected=IllegalArgumentException.class)
1:     public void testMissingStopping() {
1:         new RecursiveBundleTracker(null, Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE, null);
1:     }
1:     
1:     @Test(expected=IllegalArgumentException.class)
1:     public void testMissingStarting() {
1:         new RecursiveBundleTracker(null, Bundle.INSTALLED | Bundle.RESOLVED | Bundle.ACTIVE | Bundle.STOPPING, null);        
1:     }
1: 
1:     @Test(expected=IllegalArgumentException.class)
1:     public void testMissingInstalled() {
1:         new RecursiveBundleTracker(null, Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, null);        
1:     }
1: }
============================================================================