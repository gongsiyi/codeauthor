1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:c1afebc: package org.apache.aries.subsystem.core.archive;
1:c1afebc: 
1:c1afebc: import org.osgi.framework.Constants;
1:c1afebc: 
1:c1afebc: public class EffectiveDirective extends AbstractDirective {
1:c1afebc: 	public static final String NAME = Constants.EFFECTIVE_DIRECTIVE;
1:c1afebc: 	public static final String VALUE_ACTIVE = Constants.EFFECTIVE_ACTIVE;
1:c1afebc: 	public static final String VALUE_RESOLVE = Constants.EFFECTIVE_RESOLVE;
1:c1afebc: 	
1:c1afebc: 	public static final EffectiveDirective ACTIVE = new EffectiveDirective(VALUE_ACTIVE);
1:c1afebc: 	public static final EffectiveDirective RESOLVE = new EffectiveDirective(VALUE_RESOLVE);
1:c1afebc: 	
1:26123d8: 	public static final EffectiveDirective DEFAULT = RESOLVE;
1:26123d8: 	
1:c1afebc: 	public static EffectiveDirective getInstance(String value) {
1:c1afebc: 		if (VALUE_ACTIVE.equals(value))
1:c1afebc: 			return ACTIVE;
1:c1afebc: 		if (VALUE_RESOLVE.equals(value))
1:c1afebc: 			return RESOLVE;
1:c1afebc: 		return new EffectiveDirective(value);
1:c1afebc: 	}
1:c1afebc: 	
1:c1afebc: 	public EffectiveDirective() {
1:c1afebc: 		this(Constants.EFFECTIVE_RESOLVE);
1:c1afebc: 	}
1:c1afebc: 	
1:c1afebc: 	public EffectiveDirective(String value) {
1:c1afebc: 		super(NAME, value);
1:c1afebc: 	}
1:c1afebc: 	
1:c1afebc: 	public boolean isActive() {
1:c1afebc: 		return ACTIVE == this || Constants.EFFECTIVE_ACTIVE.equals(getValue());
1:c1afebc: 	}
1:c1afebc: 	
1:c1afebc: 	public boolean isResolve() {
1:c1afebc: 		return RESOLVE == this || Constants.EFFECTIVE_RESOLVE.equals(getValue());
1:c1afebc: 	}
1:c1afebc: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:26123d8
/////////////////////////////////////////////////////////////////////////
1: 	public static final EffectiveDirective DEFAULT = RESOLVE;
1: 	
commit:c1afebc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import org.osgi.framework.Constants;
1: 
1: public class EffectiveDirective extends AbstractDirective {
1: 	public static final String NAME = Constants.EFFECTIVE_DIRECTIVE;
1: 	public static final String VALUE_ACTIVE = Constants.EFFECTIVE_ACTIVE;
1: 	public static final String VALUE_RESOLVE = Constants.EFFECTIVE_RESOLVE;
1: 	
1: 	public static final EffectiveDirective ACTIVE = new EffectiveDirective(VALUE_ACTIVE);
1: 	public static final EffectiveDirective RESOLVE = new EffectiveDirective(VALUE_RESOLVE);
1: 	
1: 	public static EffectiveDirective getInstance(String value) {
1: 		if (VALUE_ACTIVE.equals(value))
1: 			return ACTIVE;
1: 		if (VALUE_RESOLVE.equals(value))
1: 			return RESOLVE;
1: 		return new EffectiveDirective(value);
1: 	}
1: 	
1: 	public EffectiveDirective() {
1: 		this(Constants.EFFECTIVE_RESOLVE);
1: 	}
1: 	
1: 	public EffectiveDirective(String value) {
1: 		super(NAME, value);
1: 	}
1: 	
1: 	public boolean isActive() {
1: 		return ACTIVE == this || Constants.EFFECTIVE_ACTIVE.equals(getValue());
1: 	}
1: 	
1: 	public boolean isResolve() {
1: 		return RESOLVE == this || Constants.EFFECTIVE_RESOLVE.equals(getValue());
1: 	}
1: }
============================================================================