1:06e67d9: /*
1:06e67d9:  * Licensed under the Apache License, Version 2.0 (the "License");
1:06e67d9:  * you may not use this file except in compliance with the License.
1:06e67d9:  * You may obtain a copy of the License at
1:06e67d9:  *
1:06e67d9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:06e67d9:  *
1:06e67d9:  * Unless required by applicable law or agreed to in writing, software
1:06e67d9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:06e67d9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:06e67d9:  * See the License for the specific language governing permissions and
1:06e67d9:  * limitations under the License.
1:06e67d9:  */
1:06e67d9: package org.apache.aries.subsystem.core.internal;
1:06e67d9: 
1:06e67d9: import static org.junit.Assert.assertEquals;
1:d6eb080: import static org.easymock.EasyMock.*;
1:06e67d9: 
1:06e67d9: import java.lang.reflect.Field;
1:d6eb080: import java.util.Collections;
1:06e67d9: 
1:06e67d9: import org.easymock.EasyMock;
1:06e67d9: import org.junit.After;
1:06e67d9: import org.junit.Before;
1:06e67d9: import org.junit.Test;
1:06e67d9: import org.osgi.framework.wiring.BundleRevision;
1:d6eb080: import org.osgi.resource.Capability;
1:d6eb080: import org.osgi.resource.Requirement;
1:06e67d9: 
1:06e67d9: public class BundleRevisionResourceTest {
1:06e67d9:     Activator storedActivator;
1:06e67d9: 
1:06e67d9:     @Before
1:06e67d9:     public void setUp() throws Exception {
1:06e67d9:         Field field = Activator.class.getDeclaredField("instance");
1:06e67d9:         field.setAccessible(true);
1:06e67d9:         storedActivator = (Activator) field.get(null);
1:06e67d9:         field.set(null, new Activator());
1:06e67d9:     }
1:06e67d9: 
1:06e67d9:     @After
1:06e67d9:     public void tearDown() throws Exception {
1:06e67d9:         Field field = Activator.class.getDeclaredField("instance");
1:06e67d9:         field.setAccessible(true);
1:06e67d9:         field.set(null, storedActivator);
1:06e67d9:         storedActivator = null;
1:06e67d9:     }
1:06e67d9: 
1:06e67d9:     @Test
1:36d1a1d:     public void testNoModellerServiceCapabilities() {
1:d6eb080:         BundleRevision br = createNiceMock(BundleRevision.class);
1:d6eb080:         expect(br.getCapabilities(anyObject(String.class))).andReturn(Collections.<Capability>emptyList());
1:b597cdd:         expect(br.getRequirements(anyObject(String.class))).andReturn(Collections.<Requirement>emptyList());
1:d6eb080:         replay(br);
1:06e67d9:         BundleRevisionResource brr = new BundleRevisionResource(br);
1:06e67d9:         assertEquals(0, brr.getCapabilities("osgi.service").size());
1:06e67d9:     }
1:36d1a1d: 
1:36d1a1d:     @Test
1:36d1a1d:     public void testNoModellerServiceRequirements() {
1:36d1a1d:         BundleRevision br = EasyMock.createNiceMock(BundleRevision.class);
1:d6eb080:         expect(br.getRequirements(anyObject(String.class))).andReturn(Collections.<Requirement>emptyList());
1:b597cdd:         expect(br.getCapabilities(anyObject(String.class))).andReturn(Collections.<Capability>emptyList());
1:d6eb080:         replay(br);
1:36d1a1d:         BundleRevisionResource brr = new BundleRevisionResource(br);
1:36d1a1d:         assertEquals(0, brr.getRequirements("osgi.service").size());
1:36d1a1d:     }
1:06e67d9: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:b597cdd
/////////////////////////////////////////////////////////////////////////
1:         expect(br.getRequirements(anyObject(String.class))).andReturn(Collections.<Requirement>emptyList());
/////////////////////////////////////////////////////////////////////////
1:         expect(br.getCapabilities(anyObject(String.class))).andReturn(Collections.<Capability>emptyList());
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: import static org.easymock.EasyMock.*;
1: import java.util.Collections;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
/////////////////////////////////////////////////////////////////////////
1:         BundleRevision br = createNiceMock(BundleRevision.class);
1:         expect(br.getCapabilities(anyObject(String.class))).andReturn(Collections.<Capability>emptyList());
1:         replay(br);
/////////////////////////////////////////////////////////////////////////
1:         expect(br.getRequirements(anyObject(String.class))).andReturn(Collections.<Requirement>emptyList());
1:         replay(br);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:36d1a1d
/////////////////////////////////////////////////////////////////////////
1:     public void testNoModellerServiceCapabilities() {
1: 
1:     @Test
1:     public void testNoModellerServiceRequirements() {
1:         BundleRevision br = EasyMock.createNiceMock(BundleRevision.class);
1:         BundleRevisionResource brr = new BundleRevisionResource(br);
1:         assertEquals(0, brr.getRequirements("osgi.service").size());
1:     }
commit:06e67d9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.lang.reflect.Field;
1: 
1: import org.easymock.EasyMock;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.wiring.BundleRevision;
1: 
1: public class BundleRevisionResourceTest {
1:     Activator storedActivator;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         Field field = Activator.class.getDeclaredField("instance");
1:         field.setAccessible(true);
1:         storedActivator = (Activator) field.get(null);
1:         field.set(null, new Activator());
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         Field field = Activator.class.getDeclaredField("instance");
1:         field.setAccessible(true);
1:         field.set(null, storedActivator);
1:         storedActivator = null;
1:     }
1: 
1:     @Test
0:     public void testNoServiceCapabilities() {
0:         BundleRevision br = EasyMock.createNiceMock(BundleRevision.class);
1:         BundleRevisionResource brr = new BundleRevisionResource(br);
1:         assertEquals(0, brr.getCapabilities("osgi.service").size());
1:     }
1: }
============================================================================