1:dc979a0: /*
1:dc979a0:  * Licensed to the Apache Software Foundation (ASF) under one
1:dc979a0:  * or more contributor license agreements.  See the NOTICE file
1:dc979a0:  * distributed with this work for additional information
1:dc979a0:  * regarding copyright ownership.  The ASF licenses this file
1:dc979a0:  * to you under the Apache License, Version 2.0 (the
1:dc979a0:  * "License"); you may not use this file except in compliance
1:dc979a0:  * with the License.  You may obtain a copy of the License at
1:dc979a0:  *
1:dc979a0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:dc979a0:  *
1:dc979a0:  * Unless required by applicable law or agreed to in writing,
1:dc979a0:  * software distributed under the License is distributed on an
1:dc979a0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:dc979a0:  * KIND, either express or implied.  See the License for the
1:dc979a0:  * specific language governing permissions and limitations
1:dc979a0:  * under the License.
1:dc979a0:  */
1:dc979a0: package org.apache.aries.subsystem.itests.defect;
1:dc979a0: 
1:dc979a0: import static org.junit.Assert.fail;
1:dc979a0: 
1:dc979a0: import java.io.ByteArrayOutputStream;
1:dc979a0: import java.io.IOException;
1:dc979a0: import java.util.HashMap;
1:dc979a0: import java.util.Map;
1:dc979a0: import java.util.jar.Attributes;
1:dc979a0: import java.util.jar.JarOutputStream;
1:dc979a0: import java.util.jar.Manifest;
1:dc979a0: 
1:dc979a0: import org.apache.aries.subsystem.itests.Header;
1:dc979a0: import org.apache.aries.subsystem.itests.SubsystemTest;
1:dc979a0: import org.apache.aries.subsystem.itests.util.TestCapability;
1:dc979a0: import org.apache.aries.subsystem.itests.util.TestRepository;
1:dc979a0: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1:dc979a0: import org.apache.aries.subsystem.itests.util.TestRequirement;
1:dc979a0: import org.junit.Before;
1:dc979a0: import org.junit.Test;
1:dc979a0: import org.osgi.framework.Bundle;
1:dc979a0: import org.osgi.framework.Constants;
1:dc979a0: import org.osgi.framework.Version;
1:dc979a0: import org.osgi.framework.namespace.IdentityNamespace;
1:dc979a0: import org.osgi.resource.Resource;
1:dc979a0: import org.osgi.service.repository.Repository;
1:dc979a0: import org.osgi.service.subsystem.Subsystem;
1:dc979a0: import org.osgi.service.subsystem.SubsystemConstants;
1:dc979a0: import org.osgi.service.subsystem.SubsystemException;
1:dc979a0: 
1:dc979a0: /*
1:dc979a0:  * https://issues.apache.org/jira/browse/ARIES-1408
1:dc979a0:  * 
1:dc979a0:  * The RequireCapabilityHeader currently only supports requirements defined by 
1:dc979a0:  * the Aries implementation
1:dc979a0:  */
1:dc979a0: public class Aries1408Test extends SubsystemTest {
1:dc979a0:     /*
1:dc979a0:      * Subsystem-SymbolicName: application.a.esa
1:dc979a0:      * Subsystem-Content: bundle.a.jar
1:dc979a0:      */
1:dc979a0:     private static final String APPLICATION_A = "application.a.esa";
1:dc979a0: 	/*
1:dc979a0: 	 * Bundle-SymbolicName: bundle.a.jar
1:dc979a0: 	 * Require-Capability: foo
1:dc979a0: 	 */
1:dc979a0: 	private static final String BUNDLE_A = "bundle.a.jar";
1:dc979a0: 	/*
1:dc979a0: 	 * Bundle-SymbolicName: bundle.b.jar
1:dc979a0: 	 * Provide-Capability: foo
1:dc979a0: 	 */
1:dc979a0: 	private static final String BUNDLE_B = "bundle.b.jar";
1:dc979a0: 	
1:dc979a0: 	private static boolean createdTestFiles;
1:dc979a0: 	
1:dc979a0: 	@Before
1:dc979a0: 	public void createTestFiles() throws Exception {
1:dc979a0: 		if (createdTestFiles)
1:dc979a0: 			return;
1:dc979a0: 		createBundleB();
1:dc979a0: 		createApplicationA();
1:dc979a0: 		createdTestFiles = true;
1:dc979a0: 	}
1:dc979a0: 	
1:dc979a0: 	private void createBundleB() throws IOException {
1:dc979a0: 		createBundle(name(BUNDLE_B), new Header(Constants.PROVIDE_CAPABILITY, "foo;foo=bar"));
1:dc979a0: 	}
1:dc979a0:     
1:dc979a0:     private static void createApplicationA() throws IOException {
1:dc979a0:         createApplicationAManifest();
1:dc979a0:         createSubsystem(APPLICATION_A);
1:dc979a0:     }
1:dc979a0:     
1:dc979a0:     private static void createApplicationAManifest() throws IOException {
1:dc979a0:         Map<String, String> attributes = new HashMap<String, String>();
1:dc979a0:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:dc979a0:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:dc979a0:         createManifest(APPLICATION_A + ".mf", attributes);
1:dc979a0:     }
1:dc979a0:     
1:dc979a0:     @Test
1:dc979a0:     public void testRequirementFromRemoteRepositoryConvertsToRequireCapability() throws Exception {
1:dc979a0:         Bundle bundleB = installBundleFromFile(BUNDLE_B);
1:dc979a0:         try {
1:dc979a0:             Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:dc979a0:             uninstallSubsystemSilently(applicationA);
1:dc979a0:         }
1:dc979a0:         catch (SubsystemException e) {
1:dc979a0:             e.printStackTrace();
1:dc979a0:             fail("Subsystem should have installed");
1:dc979a0:         }
1:dc979a0:         finally {
1:dc979a0:             uninstallSilently(bundleB);
1:dc979a0:         }
1:dc979a0:     }
1:dc979a0:     
1:dc979a0:     @Override
1:dc979a0:     public void setUp() throws Exception {
1:dc979a0:         super.setUp();
1:dc979a0:         try {
1:dc979a0: 			serviceRegistrations.add(
1:dc979a0: 					bundleContext.registerService(
1:dc979a0: 							Repository.class, 
1:dc979a0: 							createTestRepository(), 
1:dc979a0: 							null));
1:dc979a0: 		}
1:dc979a0: 		catch (IOException e) {
1:dc979a0: 			throw new RuntimeException(e);
1:dc979a0: 		}
1:dc979a0:     }
1:dc979a0:     
1:dc979a0:     private byte[] createBundleAContent() throws IOException {
1:dc979a0:     	Manifest manifest = new Manifest();
1:dc979a0:     	manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:dc979a0:     	manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1:dc979a0:     	manifest.getMainAttributes().putValue(Constants.REQUIRE_CAPABILITY, "foo;filter:=\'(foo=bar)\"");
1:dc979a0:     	ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:dc979a0:     	JarOutputStream jos = new JarOutputStream(baos, manifest);
1:dc979a0:     	jos.close();
1:dc979a0:     	return baos.toByteArray();
1:dc979a0:     }
1:dc979a0:     
1:dc979a0:     private Resource createBundleAResource() throws IOException {
1:dc979a0:     	return new TestRepositoryContent.Builder()
1:dc979a0:     	.capability(
1:dc979a0:     			new TestCapability.Builder()
1:dc979a0:     			.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:dc979a0:     			.attribute(IdentityNamespace.IDENTITY_NAMESPACE, BUNDLE_A)
1:dc979a0:     			.attribute(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion)
1:dc979a0:     			.attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_BUNDLE))
1:dc979a0:     	.requirement(
1:dc979a0:     			new TestRequirement.Builder()
1:dc979a0:     			.namespace("foo")
1:dc979a0:     			.directive(Constants.FILTER_DIRECTIVE, "(foo=bar)"))
1:dc979a0:     	.content(createBundleAContent())
1:dc979a0:     	.build();
1:dc979a0:     }
1:dc979a0:     
1:dc979a0:     private Repository createTestRepository() throws IOException {
1:dc979a0:     	return new TestRepository.Builder()
1:dc979a0:     	.resource(createBundleAResource())
1:dc979a0:     	.build();
1:dc979a0:     }
1:dc979a0: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:dc979a0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.subsystem.itests.Header;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.TestCapability;
1: import org.apache.aries.subsystem.itests.util.TestRepository;
1: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1: import org.apache.aries.subsystem.itests.util.TestRequirement;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1408
1:  * 
1:  * The RequireCapabilityHeader currently only supports requirements defined by 
1:  * the Aries implementation
1:  */
1: public class Aries1408Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * Subsystem-Content: bundle.a.jar
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: foo
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Provide-Capability: foo
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleB();
1: 		createApplicationA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), new Header(Constants.PROVIDE_CAPABILITY, "foo;foo=bar"));
1: 	}
1:     
1:     private static void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A);
1:     }
1:     
1:     private static void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testRequirementFromRemoteRepositoryConvertsToRequireCapability() throws Exception {
1:         Bundle bundleB = installBundleFromFile(BUNDLE_B);
1:         try {
1:             Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:             uninstallSubsystemSilently(applicationA);
1:         }
1:         catch (SubsystemException e) {
1:             e.printStackTrace();
1:             fail("Subsystem should have installed");
1:         }
1:         finally {
1:             uninstallSilently(bundleB);
1:         }
1:     }
1:     
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         try {
1: 			serviceRegistrations.add(
1: 					bundleContext.registerService(
1: 							Repository.class, 
1: 							createTestRepository(), 
1: 							null));
1: 		}
1: 		catch (IOException e) {
1: 			throw new RuntimeException(e);
1: 		}
1:     }
1:     
1:     private byte[] createBundleAContent() throws IOException {
1:     	Manifest manifest = new Manifest();
1:     	manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:     	manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_A);
1:     	manifest.getMainAttributes().putValue(Constants.REQUIRE_CAPABILITY, "foo;filter:=\'(foo=bar)\"");
1:     	ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     	JarOutputStream jos = new JarOutputStream(baos, manifest);
1:     	jos.close();
1:     	return baos.toByteArray();
1:     }
1:     
1:     private Resource createBundleAResource() throws IOException {
1:     	return new TestRepositoryContent.Builder()
1:     	.capability(
1:     			new TestCapability.Builder()
1:     			.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:     			.attribute(IdentityNamespace.IDENTITY_NAMESPACE, BUNDLE_A)
1:     			.attribute(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion)
1:     			.attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_BUNDLE))
1:     	.requirement(
1:     			new TestRequirement.Builder()
1:     			.namespace("foo")
1:     			.directive(Constants.FILTER_DIRECTIVE, "(foo=bar)"))
1:     	.content(createBundleAContent())
1:     	.build();
1:     }
1:     
1:     private Repository createTestRepository() throws IOException {
1:     	return new TestRepository.Builder()
1:     	.resource(createBundleAResource())
1:     	.build();
1:     }
1: }
============================================================================