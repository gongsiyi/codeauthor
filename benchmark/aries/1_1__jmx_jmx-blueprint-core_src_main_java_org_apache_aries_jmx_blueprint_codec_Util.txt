1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.io.ByteArrayInputStream;
1:fdf3952: import java.io.ByteArrayOutputStream;
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.io.ObjectInputStream;
1:fdf3952: import java.io.ObjectOutputStream;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.IdRefMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.MapMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.Metadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.NullMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.PropsMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.RefMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:fdf3952: 
1:fdf3952: public class Util {
1:fdf3952: 
1:fdf3952:     public static BPMetadata metadata2BPMetadata(Metadata metadata) {
1:fdf3952:         if(null == metadata)
1:fdf3952:             return null;
1:fdf3952:         // target first
1:fdf3952:         if (metadata instanceof BeanMetadata)
1:fdf3952:             return new BPBeanMetadata((BeanMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof ReferenceMetadata)
1:fdf3952:             return new BPReferenceMetadata((ReferenceMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof RefMetadata)
1:fdf3952:             return new BPRefMetadata((RefMetadata) metadata);
1:fdf3952: 
1:fdf3952:         // others
1:fdf3952:         if (metadata instanceof CollectionMetadata)
1:fdf3952:             return new BPCollectionMetadata((CollectionMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof ServiceMetadata)
1:fdf3952:             return new BPServiceMetadata((ServiceMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof ReferenceListMetadata)
1:fdf3952:             return new BPReferenceListMetadata((ReferenceListMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof IdRefMetadata)
1:fdf3952:             return new BPIdRefMetadata((IdRefMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof MapMetadata)
1:fdf3952:             return new BPMapMetadata((MapMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof PropsMetadata)
1:fdf3952:             return new BPPropsMetadata((PropsMetadata) metadata);
1:fdf3952: 
1:fdf3952:         if (metadata instanceof ValueMetadata)
1:fdf3952:             return new BPValueMetadata((ValueMetadata) metadata);
1:fdf3952: 
1:fdf3952:         // null last
1:fdf3952:         if (metadata instanceof NullMetadata)
1:fdf3952:             return new BPNullMetadata((NullMetadata) metadata);
1:fdf3952: 
1:fdf3952:         throw new RuntimeException("Unknown metadata type");
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public static BPMetadata binary2BPMetadata(byte[] buf) {
1:fdf3952:         if(null == buf)
1:fdf3952:             return null;
1:fdf3952: 
1:fdf3952:         ByteArrayInputStream inBytes = new ByteArrayInputStream(buf);
1:fdf3952:         ObjectInputStream inObject;
1:fdf3952:         CompositeData metadata;
1:fdf3952:         try {
1:fdf3952:             inObject = new ObjectInputStream(inBytes);
1:fdf3952:             metadata = (CompositeData) inObject.readObject();
1:fdf3952:             inObject.close();
1:fdf3952:         } catch (IOException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         } catch (ClassNotFoundException e) {
1:fdf3952:             e.printStackTrace();
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         String typename = metadata.getCompositeType().getTypeName();
1:fdf3952: 
1:fdf3952:         // target first
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.BEAN_METADATA))
1:fdf3952:             return new BPBeanMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.REFERENCE_METADATA))
1:fdf3952:             return new BPReferenceMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.REF_METADATA))
1:fdf3952:             return new BPRefMetadata(metadata);
1:fdf3952: 
1:fdf3952:         // others
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.COLLECTION_METADATA))
1:fdf3952:             return new BPCollectionMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.SERVICE_METADATA))
1:fdf3952:             return new BPServiceMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.REFERENCE_LIST_METADATA))
1:fdf3952:             return new BPReferenceListMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.ID_REF_METADATA))
1:fdf3952:             return new BPIdRefMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.MAP_METADATA))
1:fdf3952:             return new BPMapMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.PROPS_METADATA))
1:fdf3952:             return new BPPropsMetadata(metadata);
1:fdf3952: 
1:fdf3952:         if (typename.equals(BlueprintMetadataMBean.VALUE_METADATA))
1:fdf3952:             return new BPValueMetadata(metadata);
1:fdf3952: 
1:fdf3952:         // null last
1:fdf3952:         if (metadata instanceof NullMetadata)
1:fdf3952:             return new BPNullMetadata(metadata);
1:fdf3952: 
1:fdf3952:         throw new RuntimeException("Unknown metadata type");
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public static byte[] bpMetadata2Binary(BPMetadata metadata) {
1:fdf3952:         if(null == metadata)
1:fdf3952:             return null;
1:fdf3952: 
1:fdf3952:         ByteArrayOutputStream outBytes = new ByteArrayOutputStream();
1:fdf3952:         ObjectOutputStream outObject;
1:fdf3952:         try {
1:fdf3952:             outObject = new ObjectOutputStream(outBytes);
1:fdf3952:             outObject.writeObject(metadata.asCompositeData());
1:fdf3952:             outObject.close();
1:fdf3952:         } catch (IOException e) {// there is no io op
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return outBytes.toByteArray();
1:fdf3952:     }
1:fdf3952:     public static Byte[] bpMetadata2BoxedBinary(BPMetadata metadata)
1:fdf3952:     {
1:fdf3952:         if(null == metadata)
1:fdf3952:             return null;
1:fdf3952: 
1:fdf3952:         byte [] src = bpMetadata2Binary(metadata);
1:fdf3952:         Byte [] res = new Byte[src.length];
1:fdf3952:         for(int i=0;i<src.length;i++)
1:fdf3952:         {
1:fdf3952:             res[i] = src[i];
1:fdf3952:         }
1:fdf3952:         return res;
1:fdf3952:     }
1:fdf3952:     public static BPMetadata boxedBinary2BPMetadata(Byte[] buf) {
1:fdf3952:         if(null == buf)
1:fdf3952:             return null;
1:fdf3952: 
1:fdf3952:         byte [] unbox = new byte[buf.length];
1:fdf3952:         for(int i=0;i<buf.length;i++)
1:fdf3952:         {
1:fdf3952:             unbox[i] = buf[i];
1:fdf3952:         }
1:fdf3952:         return binary2BPMetadata(unbox);
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1: import org.osgi.service.blueprint.reflect.IdRefMetadata;
1: import org.osgi.service.blueprint.reflect.MapMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.NullMetadata;
1: import org.osgi.service.blueprint.reflect.PropsMetadata;
1: import org.osgi.service.blueprint.reflect.RefMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
1: 
1: public class Util {
1: 
1:     public static BPMetadata metadata2BPMetadata(Metadata metadata) {
1:         if(null == metadata)
1:             return null;
1:         // target first
1:         if (metadata instanceof BeanMetadata)
1:             return new BPBeanMetadata((BeanMetadata) metadata);
1: 
1:         if (metadata instanceof ReferenceMetadata)
1:             return new BPReferenceMetadata((ReferenceMetadata) metadata);
1: 
1:         if (metadata instanceof RefMetadata)
1:             return new BPRefMetadata((RefMetadata) metadata);
1: 
1:         // others
1:         if (metadata instanceof CollectionMetadata)
1:             return new BPCollectionMetadata((CollectionMetadata) metadata);
1: 
1:         if (metadata instanceof ServiceMetadata)
1:             return new BPServiceMetadata((ServiceMetadata) metadata);
1: 
1:         if (metadata instanceof ReferenceListMetadata)
1:             return new BPReferenceListMetadata((ReferenceListMetadata) metadata);
1: 
1:         if (metadata instanceof IdRefMetadata)
1:             return new BPIdRefMetadata((IdRefMetadata) metadata);
1: 
1:         if (metadata instanceof MapMetadata)
1:             return new BPMapMetadata((MapMetadata) metadata);
1: 
1:         if (metadata instanceof PropsMetadata)
1:             return new BPPropsMetadata((PropsMetadata) metadata);
1: 
1:         if (metadata instanceof ValueMetadata)
1:             return new BPValueMetadata((ValueMetadata) metadata);
1: 
1:         // null last
1:         if (metadata instanceof NullMetadata)
1:             return new BPNullMetadata((NullMetadata) metadata);
1: 
1:         throw new RuntimeException("Unknown metadata type");
1:     }
1: 
1:     public static BPMetadata binary2BPMetadata(byte[] buf) {
1:         if(null == buf)
1:             return null;
1: 
1:         ByteArrayInputStream inBytes = new ByteArrayInputStream(buf);
1:         ObjectInputStream inObject;
1:         CompositeData metadata;
1:         try {
1:             inObject = new ObjectInputStream(inBytes);
1:             metadata = (CompositeData) inObject.readObject();
1:             inObject.close();
1:         } catch (IOException e) {
1:             throw new RuntimeException(e);
1:         } catch (ClassNotFoundException e) {
1:             e.printStackTrace();
1:             return null;
1:         }
1: 
1:         String typename = metadata.getCompositeType().getTypeName();
1: 
1:         // target first
1:         if (typename.equals(BlueprintMetadataMBean.BEAN_METADATA))
1:             return new BPBeanMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.REFERENCE_METADATA))
1:             return new BPReferenceMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.REF_METADATA))
1:             return new BPRefMetadata(metadata);
1: 
1:         // others
1:         if (typename.equals(BlueprintMetadataMBean.COLLECTION_METADATA))
1:             return new BPCollectionMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.SERVICE_METADATA))
1:             return new BPServiceMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.REFERENCE_LIST_METADATA))
1:             return new BPReferenceListMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.ID_REF_METADATA))
1:             return new BPIdRefMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.MAP_METADATA))
1:             return new BPMapMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.PROPS_METADATA))
1:             return new BPPropsMetadata(metadata);
1: 
1:         if (typename.equals(BlueprintMetadataMBean.VALUE_METADATA))
1:             return new BPValueMetadata(metadata);
1: 
1:         // null last
1:         if (metadata instanceof NullMetadata)
1:             return new BPNullMetadata(metadata);
1: 
1:         throw new RuntimeException("Unknown metadata type");
1:     }
1: 
1:     public static byte[] bpMetadata2Binary(BPMetadata metadata) {
1:         if(null == metadata)
1:             return null;
1: 
1:         ByteArrayOutputStream outBytes = new ByteArrayOutputStream();
1:         ObjectOutputStream outObject;
1:         try {
1:             outObject = new ObjectOutputStream(outBytes);
1:             outObject.writeObject(metadata.asCompositeData());
1:             outObject.close();
1:         } catch (IOException e) {// there is no io op
1:             throw new RuntimeException(e);
1:         }
1: 
1:         return outBytes.toByteArray();
1:     }
1:     public static Byte[] bpMetadata2BoxedBinary(BPMetadata metadata)
1:     {
1:         if(null == metadata)
1:             return null;
1: 
1:         byte [] src = bpMetadata2Binary(metadata);
1:         Byte [] res = new Byte[src.length];
1:         for(int i=0;i<src.length;i++)
1:         {
1:             res[i] = src[i];
1:         }
1:         return res;
1:     }
1:     public static BPMetadata boxedBinary2BPMetadata(Byte[] buf) {
1:         if(null == buf)
1:             return null;
1: 
1:         byte [] unbox = new byte[buf.length];
1:         for(int i=0;i<buf.length;i++)
1:         {
1:             unbox[i] = buf[i];
1:         }
1:         return binary2BPMetadata(unbox);
1:     }
1: }
============================================================================