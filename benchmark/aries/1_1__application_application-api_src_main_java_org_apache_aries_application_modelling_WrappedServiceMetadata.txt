1:58f55bd: /*
1:58f55bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:58f55bd:  * or more contributor license agreements.  See the NOTICE file
1:58f55bd:  * distributed with this work for additional information
1:58f55bd:  * regarding copyright ownership.  The ASF licenses this file
1:58f55bd:  * to you under the Apache License, Version 2.0 (the
1:58f55bd:  * "License"); you may not use this file except in compliance
1:58f55bd:  * with the License.  You may obtain a copy of the License at
1:58f55bd:  *
1:58f55bd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:58f55bd:  *
1:58f55bd:  * Unless required by applicable law or agreed to in writing,
1:58f55bd:  * software distributed under the License is distributed on an
1:58f55bd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:58f55bd:  * KIND, either express or implied.  See the License for the
1:58f55bd:  * specific language governing permissions and limitations
1:58f55bd:  * under the License.
1:58f55bd:  */
1:58f55bd: 
1:a5079e5: package org.apache.aries.application.modelling;
1:a5079e5: 
1:a5079e5: 
1:a5079e5: import java.util.Collection;
1:a5079e5: import java.util.Map;
1:a5079e5: 
1:a5079e5: /**
1:a5079e5:  * A proxy for org.osgi.service.blueprint.reflect.ServiceMetadata, which we cannot
1:a5079e5:  * pass to clients in the outer framework. We'll just expose the methods that we 
1:a5079e5:  * know we're going to need. 
1:a5079e5:  *
1:a5079e5:  */
1:a5079e5: public interface WrappedServiceMetadata extends Comparable<WrappedServiceMetadata> {
1:a5079e5: 
1:a5079e5:   /**
1:a5079e5:    * Get the properties of the associated blueprint service
1:a5079e5:    * @return Service properties. The values in the Map will be either String or String[]. 
1:a5079e5:    */
1:a5079e5:   Map<String, Object> getServiceProperties();
1:a5079e5:   
1:a5079e5:   /**
1:a5079e5:    * Get the interfaces implemented by the service
1:a5079e5:    * @return List of interfaces
1:a5079e5:    */
1:a5079e5:   Collection<String> getInterfaces();
1:a5079e5:   
1:a5079e5:   /**
1:a5079e5:    * Get the service name. This we hope will be short, human-readable, and unique.
1:a5079e5:    * @return Service name 
1:a5079e5:    */
1:a5079e5:   String getName();
1:a5079e5:   
1:a5079e5:   /**
1:a5079e5:    * Get the service ranking
1:a5079e5:    * @return ranking
1:a5079e5:    */
1:a5079e5:   int getRanking();
1:a5079e5:   
1:a5079e5:   /**
1:a5079e5:    * Sometimes we want to know if two services are identical except for their names
1:a5079e5:    * @param w A wrapped service metadata for comparison.
1:a5079e5:    * @return true if the two services are indistinguishable (in the OSGi service registry) - 
1:a5079e5:    * this will be true if only their names are different, and their interfaces and service 
1:a5079e5:    * properties the same. 
1:a5079e5:    */
1:a5079e5:   boolean identicalOrDiffersOnlyByName (WrappedServiceMetadata w);
1:a5079e5: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
commit:a5079e5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.modelling;
1: 
1: 
1: import java.util.Collection;
1: import java.util.Map;
1: 
1: /**
1:  * A proxy for org.osgi.service.blueprint.reflect.ServiceMetadata, which we cannot
1:  * pass to clients in the outer framework. We'll just expose the methods that we 
1:  * know we're going to need. 
1:  *
1:  */
1: public interface WrappedServiceMetadata extends Comparable<WrappedServiceMetadata> {
1: 
1:   /**
1:    * Get the properties of the associated blueprint service
1:    * @return Service properties. The values in the Map will be either String or String[]. 
1:    */
1:   Map<String, Object> getServiceProperties();
1:   
1:   /**
1:    * Get the interfaces implemented by the service
1:    * @return List of interfaces
1:    */
1:   Collection<String> getInterfaces();
1:   
1:   /**
1:    * Get the service name. This we hope will be short, human-readable, and unique.
1:    * @return Service name 
1:    */
1:   String getName();
1:   
1:   /**
1:    * Get the service ranking
1:    * @return ranking
1:    */
1:   int getRanking();
1:   
1:   /**
1:    * Sometimes we want to know if two services are identical except for their names
1:    * @param w A wrapped service metadata for comparison.
1:    * @return true if the two services are indistinguishable (in the OSGi service registry) - 
1:    * this will be true if only their names are different, and their interfaces and service 
1:    * properties the same. 
1:    */
1:   boolean identicalOrDiffersOnlyByName (WrappedServiceMetadata w);
1: }
============================================================================