1:6a4e3c8: /*
1:6a4e3c8:  * Licensed to the Apache Software Foundation (ASF) under one
1:6a4e3c8:  * or more contributor license agreements.  See the NOTICE file
1:6a4e3c8:  * distributed with this work for additional information
1:6a4e3c8:  * regarding copyright ownership.  The ASF licenses this file
1:6a4e3c8:  * to you under the Apache License, Version 2.0 (the
1:6a4e3c8:  * "License"); you may not use this file except in compliance
1:6a4e3c8:  * with the License.  You may obtain a copy of the License at
1:6a4e3c8:  *
1:6a4e3c8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6a4e3c8:  *
1:6a4e3c8:  * Unless required by applicable law or agreed to in writing,
1:6a4e3c8:  * software distributed under the License is distributed on an
1:6a4e3c8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6a4e3c8:  * KIND, either express or implied.  See the License for the
1:6a4e3c8:  * specific language governing permissions and limitations
1:6a4e3c8:  * under the License.
1:6a4e3c8:  */
1:24455ce: package org.apache.aries.proxy.impl.gen;
1:6a4e3c8: 
1:6a4e3c8: import java.util.HashSet;
1:6a4e3c8: 
1:6a4e3c8: import org.objectweb.asm.Type;
1:6a4e3c8: import org.slf4j.Logger;
1:6a4e3c8: import org.slf4j.LoggerFactory;
1:6a4e3c8: 
1:6a4e3c8: public class ProxySubclassMethodHashSet<E> extends HashSet<String>
1:6a4e3c8: {
1:6a4e3c8:   private static final long serialVersionUID = 7674408912532811084L;
1:6a4e3c8: 
1:6a4e3c8:   private static Logger LOGGER = LoggerFactory.getLogger(ProxySubclassMethodHashSet.class);
1:6a4e3c8: 
1:6a4e3c8:   public ProxySubclassMethodHashSet(int i)
1:6a4e3c8:   {
1:6a4e3c8:     super(i);
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public void addMethodArray(java.lang.reflect.Method[] arrayOfEntries)
1:6a4e3c8:   {
1:24455ce:     LOGGER.debug(Constants.LOG_ENTRY, "addMethodArray", new Object[] { arrayOfEntries });
1:6a4e3c8: 
1:6a4e3c8:     for (java.lang.reflect.Method entry : arrayOfEntries) {
1:6a4e3c8:       String methodName = entry.getName();
1:6a4e3c8: 
1:6a4e3c8:       LOGGER.debug("Method name: {}", methodName);
1:6a4e3c8: 
1:6a4e3c8:       Type[] methodArgTypes = Type.getArgumentTypes(entry);
1:6a4e3c8:       String argDescriptor = typeArrayToStringArgDescriptor(methodArgTypes);
1:6a4e3c8: 
1:6a4e3c8:       LOGGER.debug("Descriptor: {}", argDescriptor);
1:6a4e3c8: 
1:6a4e3c8:       boolean added = super.add(methodName + argDescriptor);
1:6a4e3c8: 
1:6a4e3c8:       LOGGER.debug("Added: {}", added);
1:6a4e3c8:     }
1:6a4e3c8: 
1:24455ce:     LOGGER.debug(Constants.LOG_EXIT, "addMethodArray");
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   static String typeArrayToStringArgDescriptor(Type[] argTypes)
1:6a4e3c8:   {
1:6a4e3c8:     StringBuilder descriptor = new StringBuilder();
1:6a4e3c8:     for (Type t : argTypes) {
1:6a4e3c8:       descriptor.append(t.toString());
1:6a4e3c8:     }
1:6a4e3c8:     return descriptor.toString();
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.gen;
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.debug(Constants.LOG_ENTRY, "addMethodArray", new Object[] { arrayOfEntries });
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.debug(Constants.LOG_EXIT, "addMethodArray");
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:6a4e3c8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.blueprint.proxy;
1: 
1: import java.util.HashSet;
1: 
1: import org.objectweb.asm.Type;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ProxySubclassMethodHashSet<E> extends HashSet<String>
1: {
1:   private static final long serialVersionUID = 7674408912532811084L;
1: 
1:   private static Logger LOGGER = LoggerFactory.getLogger(ProxySubclassMethodHashSet.class);
1: 
1:   public ProxySubclassMethodHashSet(int i)
1:   {
1:     super(i);
1:   }
1: 
1:   public void addMethodArray(java.lang.reflect.Method[] arrayOfEntries)
1:   {
0:     LOGGER.debug(AsmInterceptorWrapper.LOG_ENTRY, "addMethodArray", new Object[] { arrayOfEntries });
1: 
1:     for (java.lang.reflect.Method entry : arrayOfEntries) {
1:       String methodName = entry.getName();
1: 
1:       LOGGER.debug("Method name: {}", methodName);
1: 
1:       Type[] methodArgTypes = Type.getArgumentTypes(entry);
1:       String argDescriptor = typeArrayToStringArgDescriptor(methodArgTypes);
1: 
1:       LOGGER.debug("Descriptor: {}", argDescriptor);
1: 
1:       boolean added = super.add(methodName + argDescriptor);
1: 
1:       LOGGER.debug("Added: {}", added);
1:     }
1: 
0:     LOGGER.debug(AsmInterceptorWrapper.LOG_EXIT, "addMethodArray");
1:   }
1: 
1:   static String typeArrayToStringArgDescriptor(Type[] argTypes)
1:   {
1:     StringBuilder descriptor = new StringBuilder();
1:     for (Type t : argTypes) {
1:       descriptor.append(t.toString());
1:     }
1:     return descriptor.toString();
1:   }
1: 
1: }
============================================================================