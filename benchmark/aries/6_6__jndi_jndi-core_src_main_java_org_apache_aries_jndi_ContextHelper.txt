1:fc02f66: /*
1:fc02f66:  * Licensed to the Apache Software Foundation (ASF) under one
1:fc02f66:  * or more contributor license agreements.  See the NOTICE file
1:fc02f66:  * distributed with this work for additional information
1:fc02f66:  * regarding copyright ownership.  The ASF licenses this file
1:fc02f66:  * to you under the Apache License, Version 2.0 (the
1:fc02f66:  * "License"); you may not use this file except in compliance
1:fc02f66:  * with the License.  You may obtain a copy of the License at
3:fc02f66:  *
1:fc02f66:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fc02f66:  *
1:fc02f66:  * Unless required by applicable law or agreed to in writing,
1:fc02f66:  * software distributed under the License is distributed on an
1:3c19a77:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fc02f66:  * KIND, either express or implied.  See the License for the
1:fc02f66:  * specific language governing permissions and limitations
1:fc02f66:  * under the License.
3:fc02f66:  */
1:fc02f66: package org.apache.aries.jndi;
1:7b2544b: 
1:e04b9ae: import java.security.AccessController;
1:e04b9ae: import java.security.PrivilegedAction;
1:fc02f66: import java.util.Hashtable;
1:746fcd2: import java.util.logging.Level;
1:746fcd2: import java.util.logging.Logger;
1:e04b9ae: 
1:fc02f66: import javax.naming.Context;
1:fc02f66: import javax.naming.NamingException;
1:fc02f66: import javax.naming.NoInitialContextException;
1:fc02f66: import javax.naming.spi.InitialContextFactory;
1:fc02f66: import javax.naming.spi.InitialContextFactoryBuilder;
1:fc02f66: import javax.naming.spi.ObjectFactory;
1:7b2544b: 
1:4b48331: import org.apache.aries.jndi.startup.Activator;
1:4b48331: import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
1:b756d71: import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
1:7bde01a: import org.apache.aries.util.service.registry.ServicePair;
1:6fd3303: import org.osgi.framework.Bundle;
1:fc02f66: import org.osgi.framework.BundleContext;
1:6fd3303: import org.osgi.framework.FrameworkUtil;
1:fc02f66: import org.osgi.framework.ServiceReference;
1:7b2544b: 
3:fc02f66: /**
1:fc02f66:  * Provides helper methods for the DelegateContext. This provides the methods so
1:fc02f66:  * there can be many DelegateContexts, but few service trackers.
1:fc02f66:  */
1:9e140bf: public final class ContextHelper {
1:7b2544b: 
1:ab9dcae:     /** Ensure no one constructs us */
1:ab9dcae:     private ContextHelper() {
1:ab9dcae:         throw new RuntimeException();
2:9e140bf:     }
1:6fd3303: 
1:ab9dcae:     /**
1:ab9dcae:      * This method is used to create a URL Context. It does this by looking for
1:ab9dcae:      * the URL context's ObjectFactory in the service registry.
1:ab9dcae:      * 
1:e04b9ae:      * @param context
1:ab9dcae:      * @param urlScheme
1:ab9dcae:      * @param env
1:ab9dcae:      * @return a Context
1:ab9dcae:      * @throws NamingException
1:ab9dcae:      */
1:4b48331:     public static ContextProvider createURLContext(final BundleContext context,
1:e04b9ae:                                            final String urlScheme, 
1:e04b9ae:                                            final Hashtable<?, ?> env)
1:7b2544b:         throws NamingException {
1:b756d71:       
1:b756d71:         ServicePair<ObjectFactory> urlObjectFactory = getURLObjectFactory(context, urlScheme, env);
1:e04b9ae:         
1:b756d71:         if (urlObjectFactory != null) {
1:b756d71:             ObjectFactory factory = urlObjectFactory.get();
1:b756d71:             
1:b756d71:             if (factory != null) {
1:1f6db42:                 return new URLContextProvider(context, urlObjectFactory.getReference(), factory, env);
1:b756d71:             }
1:7b2544b:         }
1:b756d71: 
1:b756d71:         // if we got here then we couldn't find a URL context factory so return null.
1:b756d71:         return null;
1:b756d71:     }
1:b756d71:     
1:e04b9ae:     public static final ServicePair<ObjectFactory> getURLObjectFactory(final BundleContext ctx, String urlScheme, Hashtable<?, ?> environment)
1:b756d71:       throws NamingException
1:b756d71:     {
1:b756d71:       ServicePair<ObjectFactory> result = null;
1:b756d71:       
1:4b48331:       ServiceReference ref = ServiceTrackerCustomizers.URL_FACTORY_CACHE.find(urlScheme);
1:4b48331:       
1:4b48331:       if (ref == null) {
1:e04b9ae:         ServiceReference[] refs = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
1:6fd3303:             public ServiceReference[] run() {
1:6fd3303:                 return Activator.getURLObectFactoryFinderServices();
1:6fd3303:             }
1:6fd3303:         });        
1:4b48331:         
1:4b48331:         if (refs != null) {
1:e04b9ae:           for (final ServiceReference finderRef : refs) {
1:7f6baa5:             URLObjectFactoryFinder finder = (URLObjectFactoryFinder) Utils.getServicePrivileged(ctx, finderRef);
1:6fd3303:                 
1:4b48331:             if (finder != null) {
1:4b48331:               ObjectFactory f = finder.findFactory(urlScheme, environment);
1:4b48331:               
1:4b48331:               if (f != null) {
1:4b48331:                 result = new ServicePair<ObjectFactory>(ctx, finderRef, f);
1:aa7e7e0:                 break;
1:7f6baa5:               } else {
1:7f6baa5:                 ctx.ungetService(finderRef);
1:b756d71:               }
1:e04b9ae:             }
1:e04b9ae:           }
1:e04b9ae:         }
1:4b48331:       } else {
1:4b48331:         result = new ServicePair<ObjectFactory>(ctx, ref);
1:7b2544b:       }
1:b756d71:       
1:b756d71:       return result;
1:7b2544b:     }
1:b756d71:         
1:4bf53f2:     public static Context getInitialContext(BundleContext context, Hashtable<?, ?> environment)
1:7b2544b:         throws NamingException {
1:6fd3303:       
1:937bdfe:       final Bundle jndiBundle = FrameworkUtil.getBundle(ContextHelper.class);
1:6fd3303:       // if we are outside OSGi (like in our unittests) then we would get Null back here, so just make sure we don't.
1:6fd3303:       if (jndiBundle != null) {
1:937bdfe:         
1:937bdfe:         BundleContext jndiBundleContext = AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
1:937bdfe:           public BundleContext run()
1:937bdfe:           {
1:937bdfe:             return jndiBundle.getBundleContext();
1:937bdfe:           }
1:937bdfe:         });
1:937bdfe:         
1:6fd3303:         if (!!!jndiBundleContext.getClass().equals(context.getClass())){
1:6fd3303:           //the context passed in must have come from a child framework
1:6fd3303:           //use the parent context instead
1:6fd3303:           context = jndiBundleContext;
1:6fd3303:         }
1:6fd3303:       }
1:6fd3303:       
1:4bf53f2:         ContextProvider provider = getContextProvider(context, environment);
1:4b48331:         
1:4b48331:         if (provider != null) {
1:4b48331:           return new DelegateContext(context, provider);
1:4b48331:         } else {
1:4b48331:           String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1:4b48331:           if (contextFactoryClass == null) {
1:4b48331:             return new DelegateContext(context, environment);
1:4b48331:           } else {
1:9c42dfb:             throw new NoInitialContextException(Utils.MESSAGES.getMessage("no.initial.context.factory", contextFactoryClass));
1:4b48331:           }
1:ab9dcae:         }
1:ab9dcae:     }
1:e04b9ae:     
1:e04b9ae:     public static ContextProvider getContextProvider(BundleContext context,
1:e04b9ae:                                                      Hashtable<?, ?> environment)
1:7b2544b:         throws NamingException {
1:6fd3303:         
1:4bf53f2:         ContextProvider provider = null;
2:4bf53f2:         String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
2:4bf53f2:         if (contextFactoryClass == null) {
1:4bf53f2:             // 1. get ContextFactory using builder
1:4bf53f2:             provider = getInitialContextUsingBuilder(context, environment);
1:e04b9ae: 
1:4bf53f2:             // 2. lookup all ContextFactory services
3:4bf53f2:             if (provider == null) {
1:6fd3303:                 
1:6fd3303:                 ServiceReference[] references = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
1:6fd3303:                     public ServiceReference[] run() {
1:6fd3303:                         return Activator.getInitialContextFactoryServices();
1:6fd3303:                     }
1:6fd3303:                 });
1:e04b9ae:                 
1:4bf53f2:                 if (references != null) {
2:4bf53f2:                     Context initialContext = null;
1:4bf53f2:                     for (ServiceReference reference : references) {
1:7f6baa5:                         InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, reference);
1:7f6baa5:                         try {
1:7f6baa5:                             initialContext = factory.getInitialContext(environment);
1:7f6baa5:                             if (initialContext != null) {
1:7f6baa5:                               provider = new SingleContextProvider(context, reference, initialContext);
1:7f6baa5:                               break;
1:7f6baa5:                           }
1:7f6baa5:                         } finally {
1:7f6baa5:                             if (provider == null) context.ungetService(reference);
1:aa7e7e0:                         }
1:4b48331:                     }
1:b756d71:                 }
1:b756d71:             }
1:aa7e7e0:         } else {
1:4b48331:             ServiceReference ref = ServiceTrackerCustomizers.ICF_CACHE.find(contextFactoryClass);
1:4b48331:             
1:4b48331:             if (ref != null) {
1:4b48331:               Context initialContext = null;
1:7f6baa5:               InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, ref);
1:4b48331:               if (factory != null) {
1:7f6baa5:                 try {
1:7f6baa5:                     initialContext = factory.getInitialContext(environment);
1:7f6baa5:                     provider = new SingleContextProvider(context, ref, initialContext);
1:7f6baa5:                 } finally {
1:7f6baa5:                     if (provider == null) context.ungetService(ref);
1:7f6baa5:                 }
1:4b48331:               }
1:b756d71:             }
1:4b48331:             
1:4bf53f2:             // 2. get ContextFactory using builder
1:4bf53f2:             if (provider == null) {
1:4bf53f2:                 provider = getInitialContextUsingBuilder(context, environment);
1:b756d71:             }
1:b756d71:         }
1:4b48331:         
1:4bf53f2:         return provider;
1:b756d71:     }
1:b756d71: 
1:746fcd2:     private static final Logger logger = Logger.getLogger(ContextHelper.class.getName());
1:746fcd2:     
1:4bf53f2:     private static ContextProvider getInitialContextUsingBuilder(BundleContext context,
1:7b2544b:                                                                  Hashtable<?, ?> environment)
2:ab9dcae:             throws NamingException {
1:6fd3303:         
1:4bf53f2:         ContextProvider provider = null;
1:e04b9ae:         ServiceReference[] refs = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
1:6fd3303:             public ServiceReference[] run() {
1:6fd3303:                 return Activator.getInitialContextFactoryBuilderServices();
1:6fd3303:             }            
1:6fd3303:         });
1:6fd3303:             
1:4b48331:         if (refs != null) {
1:4b48331:             InitialContextFactory factory = null;
1:4b48331:             for (ServiceReference ref : refs) {                    
1:7f6baa5:                 InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) Utils.getServicePrivileged(context, ref);
1:7f6baa5:                 try {
1:aa7e7e0:                   factory = builder.createInitialContextFactory(environment);
1:aa7e7e0:                 } catch (NamingException ne) {
1:aa7e7e0:                   // TODO: log
1:aa7e7e0:                   // ignore this, if the builder fails we want to move onto the next one
1:746fcd2:                 } catch (NullPointerException npe) { 
1:746fcd2:                 	logger.log(Level.SEVERE,  "NPE caught in ContextHelper.getInitialContextUsingBuilder. context=" + context + " ref=" + ref);
1:746fcd2:                 	throw npe;
1:aa7e7e0:                 }
1:aa7e7e0:                 
1:aa7e7e0:                 if (factory != null) {
1:aa7e7e0:                   try {
1:7f6baa5:                     provider = new SingleContextProvider(context, ref, factory.getInitialContext(environment));
1:7f6baa5:                   } finally {
1:7f6baa5:                     if (provider == null) context.ungetService(ref); // we didn't get something back, so this was no good.
1:7f6baa5:                   }
1:31b19f1:                   break;
1:7f6baa5:                 } else {
1:7f6baa5:                   context.ungetService(ref); // we didn't get something back, so this was no good.
1:b756d71:                 }
1:ab9dcae:             }
1:ab9dcae:         }
1:4bf53f2:         return provider;
1:ab9dcae:     }
1:e04b9ae: 
1:9e140bf: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:7f6baa5
/////////////////////////////////////////////////////////////////////////
1:             URLObjectFactoryFinder finder = (URLObjectFactoryFinder) Utils.getServicePrivileged(ctx, finderRef);
/////////////////////////////////////////////////////////////////////////
1:               } else {
1:                 ctx.ungetService(finderRef);
/////////////////////////////////////////////////////////////////////////
1:                         InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, reference);
1:                         try {
1:                             initialContext = factory.getInitialContext(environment);
1:                             if (initialContext != null) {
1:                               provider = new SingleContextProvider(context, reference, initialContext);
1:                               break;
1:                           }
1:                         } finally {
1:                             if (provider == null) context.ungetService(reference);
/////////////////////////////////////////////////////////////////////////
1:               InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, ref);
1:                 try {
1:                     initialContext = factory.getInitialContext(environment);
1:                     provider = new SingleContextProvider(context, ref, initialContext);
1:                 } finally {
1:                     if (provider == null) context.ungetService(ref);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) Utils.getServicePrivileged(context, ref);
/////////////////////////////////////////////////////////////////////////
1:                   try {
1:                     provider = new SingleContextProvider(context, ref, factory.getInitialContext(environment));
1:                   } finally {
1:                     if (provider == null) context.ungetService(ref); // we didn't get something back, so this was no good.
1:                   }
1:                 } else {
1:                   context.ungetService(ref); // we didn't get something back, so this was no good.
commit:31b19f1
/////////////////////////////////////////////////////////////////////////
0:             URLObjectFactoryFinder finder = (URLObjectFactoryFinder) ServiceTrackerCustomizers.URLOBJFACTORYFINDER_CACHE.getServiceFromRef(ctx,finderRef);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                         InitialContextFactory factory = (InitialContextFactory) ServiceTrackerCustomizers.ICF_CACHE.getServiceFromRef(context, reference);
0:                         initialContext = factory.getInitialContext(environment);
0:                         if (initialContext != null) {
0:                           provider = new SingleContextProvider(context, reference, initialContext);
1:                           break;
/////////////////////////////////////////////////////////////////////////
0:               InitialContextFactory factory = (InitialContextFactory) ServiceTrackerCustomizers.ICF_CACHE.getServiceFromRef(context, ref);
0:                 initialContext = factory.getInitialContext(environment);
0:                 provider = new SingleContextProvider(context, ref, initialContext);
/////////////////////////////////////////////////////////////////////////
0:                 InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) ServiceTrackerCustomizers.ICFB_CACHE.getServiceFromRef(context, ref);
/////////////////////////////////////////////////////////////////////////
0:                   provider = new SingleContextProvider(context, ref, factory.getInitialContext(environment));
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:746fcd2
/////////////////////////////////////////////////////////////////////////
1: import java.util.logging.Level;
1: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = Logger.getLogger(ContextHelper.class.getName());
1:     
/////////////////////////////////////////////////////////////////////////
1:                 } catch (NullPointerException npe) { 
1:                 	logger.log(Level.SEVERE,  "NPE caught in ContextHelper.getInitialContextUsingBuilder. context=" + context + " ref=" + ref);
1:                 	throw npe;
author:Emily Jiang
-------------------------------------------------------------------------------
commit:937bdfe
/////////////////////////////////////////////////////////////////////////
1:       final Bundle jndiBundle = FrameworkUtil.getBundle(ContextHelper.class);
1:         
1:         BundleContext jndiBundleContext = AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {
1:           public BundleContext run()
1:           {
1:             return jndiBundle.getBundleContext();
1:           }
1:         });
1:         
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:6fd3303
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.FrameworkUtil;
/////////////////////////////////////////////////////////////////////////
1:             public ServiceReference[] run() {
1:                 return Activator.getURLObectFactoryFinderServices();
1:             }
1:         });        
1:                 
/////////////////////////////////////////////////////////////////////////
1:       
0:       Bundle jndiBundle = FrameworkUtil.getBundle(ContextHelper.class);
1:       // if we are outside OSGi (like in our unittests) then we would get Null back here, so just make sure we don't.
1:       if (jndiBundle != null) {
0:         BundleContext jndiBundleContext = jndiBundle.getBundleContext();
1:         if (!!!jndiBundleContext.getClass().equals(context.getClass())){
1:           //the context passed in must have come from a child framework
1:           //use the parent context instead
1:           context = jndiBundleContext;
1:         }
1:       }
1:       
/////////////////////////////////////////////////////////////////////////
1:     
1:         
/////////////////////////////////////////////////////////////////////////
1:                 
1:                 ServiceReference[] references = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
1:                     public ServiceReference[] run() {
1:                         return Activator.getInitialContextFactoryServices();
1:                     }
1:                 });
/////////////////////////////////////////////////////////////////////////
1:         
1:             public ServiceReference[] run() {
1:                 return Activator.getInitialContextFactoryBuilderServices();
1:             }            
1:         });
1:             
commit:9c42dfb
/////////////////////////////////////////////////////////////////////////
1:             throw new NoInitialContextException(Utils.MESSAGES.getMessage("no.initial.context.factory", contextFactoryClass));
commit:7bde01a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.service.registry.ServicePair;
commit:4dd1b23
/////////////////////////////////////////////////////////////////////////
0:                     if (provider == null) context.ungetService(ref); // we didn't get something back, so this was no good.
commit:aa7e7e0
/////////////////////////////////////////////////////////////////////////
0:             throw new NoInitialContextException("We could not find a provider for the InitialContextFactory " + contextFactoryClass);
/////////////////////////////////////////////////////////////////////////
1:                   factory = builder.createInitialContextFactory(environment);
1:                 } catch (NamingException ne) {
1:                   // TODO: log
1:                   // ignore this, if the builder fails we want to move onto the next one
1:                 }
1:                 
1:                 if (factory != null) {
1:                   try {
0:                     provider = new ContextProvider(context, ref, factory.getInitialContext(environment));
0:                   } finally {
0:                     context.ungetService(ref); // we didn't get something back, so this was no good.
1:                   }
1:                   break;
1:                 } else {
0:                   context.ungetService(ref); // we didn't get something back, so this was no good.
commit:4b48331
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jndi.startup.Activator;
1: import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
/////////////////////////////////////////////////////////////////////////
1:     public static ContextProvider createURLContext(final BundleContext context,
0:         return Utils.doPrivilegedNaming(new PrivilegedExceptionAction<ContextProvider>() {
0:             public ContextProvider run() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     private static ContextProvider doCreateURLContext(BundleContext context, String urlScheme, Hashtable<?, ?> env)
/////////////////////////////////////////////////////////////////////////
0:                     Context ctx = (Context) factory.getObjectInstance(null, null, null, env);
1:                     
0:                     return new ContextProvider(context, urlObjectFactory.getReference(), ctx);
0:                     urlObjectFactory.unget();
/////////////////////////////////////////////////////////////////////////
1:       ServiceReference ref = ServiceTrackerCustomizers.URL_FACTORY_CACHE.find(urlScheme);
1:       
1:       if (ref == null) {
0:         ServiceReference[] refs = Activator.getURLObectFactoryFinderServices();
1:         
1:         if (refs != null) {
0:           for (ServiceReference finderRef : refs) {
0:             URLObjectFactoryFinder finder = (URLObjectFactoryFinder) ctx.getService(finderRef);
1:             if (finder != null) {
1:               ObjectFactory f = finder.findFactory(urlScheme, environment);
1:               
1:               if (f != null) {
1:                 result = new ServicePair<ObjectFactory>(ctx, finderRef, f);
0:                 break;
1:               } else {
0:                 ctx.ungetService(finderRef);
1:       } else {
1:         result = new ServicePair<ObjectFactory>(ctx, ref);
/////////////////////////////////////////////////////////////////////////
1:         
1:         if (provider != null) {
1:           return new DelegateContext(context, provider);
1:           String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1:           if (contextFactoryClass == null) {
1:             return new DelegateContext(context, environment);
1:           } else {
0:             throw new NoInitialContextException("We could not find an InitialContextFactory to use");
1:           }
/////////////////////////////////////////////////////////////////////////
0:                 ServiceReference[] references = Activator.getInitialContextFactoryServices();
0:                             if (initialContext != null) {
0:                               provider = new ContextProvider(context, reference, initialContext);
0:                               break;
1:                           }
0:                             if (provider == null) context.ungetService(reference);
1:             ServiceReference ref = ServiceTrackerCustomizers.ICF_CACHE.find(contextFactoryClass);
1:             
1:             if (ref != null) {
1:               Context initialContext = null;
0:               InitialContextFactory factory = (InitialContextFactory) context.getService(ref);
1:               if (factory != null) {
0:                     provider = new ContextProvider(context, ref, initialContext);
0:                     if (provider == null) context.ungetService(ref);
1:               }
1:             
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference[] refs = Activator.getInitialContextFactoryBuilderServices();
1:         if (refs != null) {
1:             InitialContextFactory factory = null;
1:             for (ServiceReference ref : refs) {                    
0:                 InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
0:                 try {
0:                     factory = builder.createInitialContextFactory(environment);
0:                       provider = new ContextProvider(context, ref, factory.getInitialContext(environment));
0:                       break;
0:                     } else {
0:                       context.ungetService(ref); // we didn't get something back, so this was no good.
0:                 } catch (NamingException e) {
0:                     // TODO: log
0:                     // ignore
0:                     context.ungetService(ref);
commit:b756d71
/////////////////////////////////////////////////////////////////////////
0: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
/////////////////////////////////////////////////////////////////////////
1:       
1:         ServicePair<ObjectFactory> urlObjectFactory = getURLObjectFactory(context, urlScheme, env);
1:         if (urlObjectFactory != null) {
1:             ObjectFactory factory = urlObjectFactory.get();
1:             
1:             if (factory != null) {
0:                 try {
0:                     return (Context) factory.getObjectInstance(null, null, null, env);
0:                 } catch (Exception e) {
0:                     NamingException e2 = new NamingException();
0:                     e2.initCause(e);
0:                     throw e2;
0:                 } finally {
0:                     urlObjectFactory.unget();
1:         // if we got here then we couldn't find a URL context factory so return null.
1:         return null;
1:     }
1:     
0:     public static final ServicePair<ObjectFactory> getURLObjectFactory(BundleContext ctx, String urlScheme, Hashtable<?, ?> environment)
1:       throws NamingException
1:     {
1:       ServicePair<ObjectFactory> result = null;
0:       try {
0:           ServiceReference[] services = ctx.getServiceReferences(ObjectFactory.class.getName(), 
0:                                                                      "(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme.trim() + ")");
1: 
0:           if (services != null) {
0:               Arrays.sort(services);
0:               result = new ServicePair<ObjectFactory>(ctx, services[services.length - 1]);
1:           }
0:       } catch (InvalidSyntaxException e1) {
0:           NamingException e = new NamingException("Argh this should never happen :)");
0:           e.initCause(e1);
0:           throw e;
1:       }
1:       
0:       if (result == null) {
0:         ServiceReference[] refs;
0:         try {
0:           refs = ctx.getServiceReferences(URLObjectFactoryFinder.class.getName(), null);
0:           if (refs != null) {
0:             // need a reverse sort.
0:             Arrays.sort(refs, new Comparator<ServiceReference>() {
0:               public int compare(ServiceReference o1, ServiceReference o2) {
0:                 return o2.compareTo(o1);
1:               }
0:             });
1:             
0:             for (ServiceReference finderRef : refs) {
0:               URLObjectFactoryFinder finder = (URLObjectFactoryFinder) ctx.getService(finderRef);
0:               if (finder != null) {
0:                 ObjectFactory f = finder.findFactory(urlScheme);
1:                 
0:                 if (f != null) {
0:                   result = new ServicePair<ObjectFactory>(ctx, finderRef, f);
0:                   break;
0:                 } else {
0:                   ctx.ungetService(finderRef);
1:                 }
1:               }
1:             }
1:           }
0:         } catch (InvalidSyntaxException e) {
0:           // Since the filter is null this cannot happen (famous last words).
1:         }
1:       }
1:       
1:       return result;
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:e04b9ae
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:      * @param context
0:     public static ContextProvider createURLContext(final BundleContext context,
1:                                            final String urlScheme, 
1:                                            final Hashtable<?, ?> env)
/////////////////////////////////////////////////////////////////////////
1:     public static final ServicePair<ObjectFactory> getURLObjectFactory(final BundleContext ctx, String urlScheme, Hashtable<?, ?> environment)
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
0:         	public ServiceReference[] run() {
0:         		return Activator.getURLObectFactoryFinderServices();
1:         	}
0: 		});        
1:           for (final ServiceReference finderRef : refs) {
0:             URLObjectFactoryFinder finder = (URLObjectFactoryFinder) Utils.getServicePrivileged(ctx, finderRef);
1:             	
/////////////////////////////////////////////////////////////////////////
1:     public static ContextProvider getContextProvider(BundleContext context,
1:                                                      Hashtable<?, ?> environment)
1:     	
/////////////////////////////////////////////////////////////////////////
1:             	
0:             	ServiceReference[] references = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
0: 					public ServiceReference[] run() {
0: 						return Activator.getInitialContextFactoryServices();
1: 					}
0: 				});
1:                 
0:                         InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, reference);
/////////////////////////////////////////////////////////////////////////
0:               InitialContextFactory factory = (InitialContextFactory) Utils.getServicePrivileged(context, ref);
/////////////////////////////////////////////////////////////////////////
1:     	
1:         ServiceReference[] refs = AccessController.doPrivileged(new PrivilegedAction<ServiceReference[]>() {
0: 			public ServiceReference[] run() {
0: 				return Activator.getInitialContextFactoryBuilderServices();
1: 			}        	
0: 		});
1:         	
0:                 InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) Utils.getServicePrivileged(context, ref);
commit:1f6db42
/////////////////////////////////////////////////////////////////////////
1:                 return new URLContextProvider(context, urlObjectFactory.getReference(), factory, env);
/////////////////////////////////////////////////////////////////////////
0:                               provider = new SingleContextProvider(context, reference, initialContext);
/////////////////////////////////////////////////////////////////////////
0:                     provider = new SingleContextProvider(context, ref, initialContext);
/////////////////////////////////////////////////////////////////////////
0:                     provider = new SingleContextProvider(context, ref, factory.getInitialContext(environment));
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
0: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
0:     public static Context createURLContext(final BundleContext context,
0:                                            final String urlScheme, 
0:                                            final Hashtable<?, ?> env)
1:         throws NamingException {
0:         return Utils.doPrivilegedNaming(new PrivilegedExceptionAction<Context>() {
0:             public Context run() throws Exception {
0:                 return doCreateURLContext(context, urlScheme, env);
1:             }
0:         });
1:     
/////////////////////////////////////////////////////////////////////////
0:     private static Context doCreateURLContext(BundleContext context, String urlScheme, Hashtable<?, ?> env)
0:                                                                        "(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme.trim() + ")");
/////////////////////////////////////////////////////////////////////////
0:                 return (Context) factory.getObjectInstance(null, null, null, env);
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
0:     public static ContextProvider getContextProvider(final BundleContext context,
0:                                                      final Hashtable<?, ?> environment)
1:         throws NamingException {
0:         return Utils.doPrivilegedNaming(new PrivilegedExceptionAction<ContextProvider>() {
0:             public ContextProvider run() throws Exception {
0:                 return doGetContextProvider(context, environment);
1:             }
0:         });
1:     }
1:     
0:     private static ContextProvider doGetContextProvider(BundleContext context,
1:                                                         Hashtable<?, ?> environment)
1:         throws NamingException {
/////////////////////////////////////////////////////////////////////////
0:                     Arrays.sort(references, Utils.SERVICE_REFERENCE_COMPARATOR);
/////////////////////////////////////////////////////////////////////////
0:                 Arrays.sort(references, Utils.SERVICE_REFERENCE_COMPARATOR);
/////////////////////////////////////////////////////////////////////////
0:                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
/////////////////////////////////////////////////////////////////////////
1: 
commit:ab9dcae
/////////////////////////////////////////////////////////////////////////
0:     /** The bundle context we use for accessing the SR */
0:     private static BundleContext context;
1:     /** Ensure no one constructs us */
1:     private ContextHelper() {
1:         throw new RuntimeException();
0:     public static void setBundleContext(BundleContext ctx) {
0:         context = ctx;
1:     /**
1:      * This method is used to create a URL Context. It does this by looking for
1:      * the URL context's ObjectFactory in the service registry.
1:      * 
1:      * @param urlScheme
1:      * @param env
1:      * @return a Context
1:      * @throws NamingException
1:      */
0:     public static Context createURLContext(String urlScheme, Hashtable<?, ?> env)
1:         throws NamingException {
0:         ServiceReference ref = null;
0:         try {
0:             ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(), 
0:                                                                        "(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme + ")");
0: 
0:             if (services != null) {
0:                 ref = services[0];
1:             }
0:         } catch (InvalidSyntaxException e1) {
0:             NamingException e = new NamingException("Argh this should never happen :)");
0:             e.initCause(e1);
0:             throw e;
1:         }
0: 
0:         Context ctx = null; 
0:         
0:         if (ref != null) {
0:             ObjectFactory factory = (ObjectFactory) context.getService(ref);
0:             try {
0:                 ctx = (Context) factory.getObjectInstance(null, null, null, env);
0:             } catch (Exception e) {
0:                 NamingException e2 = new NamingException();
0:                 e2.initCause(e);
0:                 throw e2;
0:             } finally {
0:                 if (ref != null) {
0:                     context.ungetService(ref);
1:                 }
1:             }
1:         }
0: 
0:         return ctx;
1:         throws NamingException {
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: public final class ContextHelper {
0: 
0:     public static final Comparator<ServiceReference> SERVICE_REFERENCE_COMPARATOR = 
0:         new ServiceReferenceComparator();
0:     
/////////////////////////////////////////////////////////////////////////
0:                     Arrays.sort(references, SERVICE_REFERENCE_COMPARATOR);
/////////////////////////////////////////////////////////////////////////
0:                 Arrays.sort(references, SERVICE_REFERENCE_COMPARATOR);
/////////////////////////////////////////////////////////////////////////
0:                 Arrays.sort(refs, SERVICE_REFERENCE_COMPARATOR);
/////////////////////////////////////////////////////////////////////////
0:     private static class ServiceReferenceComparator implements Comparator<ServiceReference> {        
0:     
0:     public static Hashtable toHashtable(Map map) {
0:         Hashtable env;
0:         if (map instanceof Hashtable) {
0:             env = (Hashtable) map;
0:         } else {
0:             env = new Hashtable();
0:             if (map != null) {
0:                 env.putAll(map);
1:             }
1:         }
0:         return env;
1:     }
commit:4bf53f2
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   
1:     public static Context getInitialContext(BundleContext context, Hashtable<?, ?> environment)
0:             throws NamingException {
1:         ContextProvider provider = getContextProvider(context, environment);
1:         String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1:         if (contextFactoryClass == null) {
1:             if (provider == null) {
0:                 return new DelegateContext(context, environment);
0:             } else {
0:                 return new DelegateContext(context, provider);
0:             }
0:         } else {
1:             if (provider == null) {
0:                 throw new NoInitialContextException("We could not find an InitialContextFactory to use");
0:             } else {
0:                 return new DelegateContext(context, provider);
0:             }
0:         }
0:     }
0: 
0:     public static ContextProvider getContextProvider(BundleContext context,
0:                                                      Hashtable<?, ?> environment)
0:             throws NamingException {
1:         ContextProvider provider = null;
1:         String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1:         if (contextFactoryClass == null) {
1:             // 1. get ContextFactory using builder
1:             provider = getInitialContextUsingBuilder(context, environment);
0: 
1:             // 2. lookup all ContextFactory services
1:             if (provider == null) {
0:                 String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory))";
0:                 ServiceReference[] references = null;
0:                 try {
0:                     references = context.getAllServiceReferences(InitialContextFactory.class.getName(), filter);
0:                 } catch (InvalidSyntaxException e) {
0:                     NamingException ex = new NamingException("Bad filter: " + filter);
0:                     ex.initCause(e);
0:                     throw ex;
0:                 }
1:                 if (references != null) {
1:                     Context initialContext = null;
0:                     Arrays.sort(references, new ServiceReferenceComparator());
1:                     for (ServiceReference reference : references) {
0:                         InitialContextFactory factory = (InitialContextFactory) context.getService(reference);
0:                         try {
0:                             initialContext = factory.getInitialContext(environment);
0:                         } finally {
0:                             context.ungetService(reference);
0:                         }
0:                         if (initialContext != null) {
0:                             provider = new ContextProvider(reference, initialContext);
0:                             break;
0:                         }
0:                     }
0:                 }
0:             }
0:         } else {
0:             // 1. lookup ContextFactory using the factory class
0:             String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory)(objectClass="+ contextFactoryClass + "))";
0:             ServiceReference[] references = null;
0:             try {
0:                 references = context.getServiceReferences(InitialContextFactory.class.getName(), filter);
0:             } catch (InvalidSyntaxException e) {
0:                 NamingException ex = new NamingException("Bad filter: " + filter);
0:                 ex.initCause(e);
0:                 throw ex;
0:             }
0: 
0:             if (references != null && references.length > 0) {
1:                 Context initialContext = null;
0:                 Arrays.sort(references, new ServiceReferenceComparator());
0:                 ServiceReference reference = references[0];
0:                 InitialContextFactory factory = (InitialContextFactory) context.getService(reference);
0:                 try {
0:                     initialContext = factory.getInitialContext(environment);
0:                 } finally {
0:                     context.ungetService(reference);
0:                 }
0:                 if (initialContext != null) {
0:                     provider = new ContextProvider(reference, initialContext);                    
0:                 }
0:             }
0: 
1:             // 2. get ContextFactory using builder
1:             if (provider == null) {
1:                 provider = getInitialContextUsingBuilder(context, environment);
0:             }
0:         }
0:         
1:         return provider;
0:     }
0: 
1:     private static ContextProvider getInitialContextUsingBuilder(BundleContext context,
0:                                                                  Hashtable<?, ?> environment)
0:             throws NamingException {
1:         ContextProvider provider = null;
0:         try {
0:             ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
0:             if (refs != null) {
0:                 InitialContextFactory factory = null;
0:                 Arrays.sort(refs, new ServiceReferenceComparator());
0:                 for (ServiceReference ref : refs) {                    
0:                     InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
0:                     try {
0:                         factory = builder.createInitialContextFactory(environment);
0:                     } catch (NamingException e) {
0:                         // TODO: log
0:                         // ignore
0:                     } finally {
0:                         context.ungetService(ref);
0:                     }
0:                     if (factory != null) {
0:                         provider = new ContextProvider(ref, factory.getInitialContext(environment));
0:                         break;
0:                     }
0:                 }
0:             }
0:         } catch (InvalidSyntaxException e) {
0:             // ignore - should never happen
0:         }
1:         return provider;
0:     }
0:     
0:     public static class ContextProvider {
0:         
0:         ServiceReference reference;
0:         Context context;
0:         
0:         public ContextProvider(ServiceReference reference, Context context) {
0:             this.reference = reference;
0:             this.context = context;
0:         }        
0:         
0:         public boolean isValid() {
0:             return (reference.getBundle() != null);
0:         }
0:     }
0:     
0:     public static class ServiceReferenceComparator implements Comparator<ServiceReference> {
0:         public int compare(ServiceReference o1, ServiceReference o2) {        
0:           return o2.compareTo(o1);
0:         }
0:     }
0: }
commit:696374b
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.jndi.JNDIConstants;
/////////////////////////////////////////////////////////////////////////
0:                                                                  "(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme + ")");
commit:3c19a77
/////////////////////////////////////////////////////////////////////////
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
commit:e6f69cc
commit:fc02f66
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
0: 
1: import java.util.Hashtable;
0: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.NoInitialContextException;
1: import javax.naming.spi.InitialContextFactory;
1: import javax.naming.spi.InitialContextFactoryBuilder;
1: import javax.naming.spi.ObjectFactory;
0: 
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
0: 
1: /**
1:  * Provides helper methods for the DelegateContext. This provides the methods so
1:  * there can be many DelegateContexts, but few service trackers.
1:  */
0: public final class ContextHelper
0: {
0: 	/** The bundle context we use for accessing the SR */
0:   private static BundleContext context;
0:   
0:   /** Ensure no one constructs us */
0:   private ContextHelper() { throw new RuntimeException(); }
0:   
0:   public static void setBundleContext(BundleContext ctx)
0:   {
0:   	context = ctx;
0:   }
0:   
1:   /**
0:    * This class creates a Context from an InitialContextFactory that may be
0:    * named in the provided env. If no name is set the first InitialContextFactory
0:    * returned from the service registry is used.
1:    * 
0:    * @param env
0:    * @return the context.
0:    * @throws NamingException
1:    */
0:   public static Context createContext(Hashtable<?,?> env)
0:     throws NamingException
0:   {
0:   	
0:     InitialContextFactory icf = null;
0:     ServiceReference ref = null;
0: 
0:     String icfFactory = (String) env.get(Context.INITIAL_CONTEXT_FACTORY);
0:     
0:     boolean icfFactorySet = true;
0: 
0:     if (icfFactory == null) {
0:       icfFactory = InitialContextFactory.class.getName();
0:       icfFactorySet = false;
0:     }
0:     
0:     try {
0:       ServiceReference[] refs = context.getAllServiceReferences(icfFactory, null);
0:       if (refs != null) {
0:         ref = refs[0];
0:         icf = (InitialContextFactory) context.getService(ref);
0:       }
0:     } catch (InvalidSyntaxException e) {
0:       // TODO nls enable this.
0:       NamingException e4 = new NamingException("Argh this should never happen :)");
0:       e4.initCause(e);
0:       
0:       throw e4;
0:     }
0: 
0:     if (icf == null) {
0:       try {
0:         ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
0: 
0:         if (refs != null) {
0:           for (ServiceReference icfbRef : refs) {
0:             InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(icfbRef);
0: 
0:             icf = builder.createInitialContextFactory(env);
0:             
0:             context.ungetService(icfbRef);
0:             if (icf != null) {
0:               break;
0:             }
0:           }
0:         }
0:       } catch (InvalidSyntaxException e) {
0:         // TODO nls enable this.
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e);    
0:         throw e4;
0:       }
0:     }
0: 
0:     if (icf == null && icfFactorySet) {
0:       try {
0:         Class<?> clazz = Class.forName(icfFactory, true, null);
0:         icf = (InitialContextFactory) clazz.newInstance();
0:       } catch (ClassNotFoundException e11) {
0:         // TODO nls enable this.
0:         NamingException e = new NamingException("Argh this should never happen :)");
0:         e.initCause(e11);    
0:         throw e;
0:       } catch (InstantiationException e2) {
0:         // TODO nls enable this.
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e2);    
0:         throw e4;
0:       } catch (IllegalAccessException e1) {
0:         // TODO nls enable this.
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e1);    
0:         throw e4;
0:       }
0:     }
0: 
0:     if (icf == null) {
0: 
0:       // TODO nls enable this.
0:       NamingException e3 = new NoInitialContextException("We could not find an InitialContextFactory to use");
0:       
0:       throw e3;
0:     }
0: 
0:     Context ctx = icf.getInitialContext(env);
0: 
0:     if (ref != null) context.ungetService(ref);
0: 
0:     if (ctx == null) {
0:       // TODO nls enable this
0:       NamingException e = new NamingException("The ICF returned a null context");
0:       throw e;
0:     }
0: 
0:     return ctx;
0:   }
0:   
0:   
0:   private static Context createIcfContext(Hashtable<?,?> env) throws NamingException
0:   {
0:     String icfFactory = (String) env.get(Context.INITIAL_CONTEXT_FACTORY);
0:     InitialContextFactory icf = null;
0: 
0:     if (icfFactory != null) {
0:       try {
0:         Class<?> clazz = Class.forName(icfFactory, true, Thread.currentThread()
0:             .getContextClassLoader());
0:         icf = (InitialContextFactory) clazz.newInstance();
0: 
0:       } catch (ClassNotFoundException e11) {
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e11);
0:         throw e4;
0:       } catch (InstantiationException e2) {
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e2);
0:         throw e4;
0:       } catch (IllegalAccessException e1) {
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e1);
0:         throw e4;
0:       }
0:     }
0:     Context ctx = null;
0: 
0:     if (icf != null) {
0:       ctx = icf.getInitialContext(env);
0:     }    
0:     
0:     return ctx;
0:   }
0:   
1:   /**
0:    * This method is used to create a URL Context. It does this by looking for 
0:    * the URL context's ObjectFactory in the service registry.
1:    * 
0:    * @param urlScheme
0:    * @param env
0:    * @return a Context
0:    * @throws NamingException
1:    */
0:   public static Context createURLContext(String urlScheme, Hashtable<?, ?> env)
0:       throws NamingException
0:   {
0:     ObjectFactory factory = null;
0:     ServiceReference ref = null;
0: 
0:     Context ctx = null;
0: 
0:     try {
0:       ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(),
0:           "(|(osgi.jndi.urlScheme=" + urlScheme + ")(urlScheme=" + urlScheme + "))");
0: 
0:       if (services != null) {
0:         ref = services[0];
0:         factory = (ObjectFactory) context.getService(ref);
0:       }
0:     } catch (InvalidSyntaxException e1) {
0:       // TODO nls enable this.
0:       NamingException e = new NamingException("Argh this should never happen :)");
0:       e.initCause(e1);
0:       throw e;
0:     }
0: 
0:     if (factory != null) {
0:       try {
0:         ctx = (Context) factory.getObjectInstance(null, null, null, env);
0:       } catch (Exception e) {
0:         NamingException e2 = new NamingException();
0:         e2.initCause(e);
0:         throw e2;
0:       } finally {
0:         if (ref != null) context.ungetService(ref);
0:       }
0:     }
0: 
0:     // TODO: This works for WAS - we believe - but is incorrect behaviour. We should not use an icf to generate the URLContext.
0:     // Rather, the missing URLContext factories should be exported on behalf of WAS.
0:     if (ctx == null) {
0:       ctx = createIcfContext(env);
0:     }
0:     
0:     if (ctx == null && factory == null) {
0:       NamingException e = new NamingException("We could not find an ObjectFactory to use");
0:       throw e;
0:     } else if (ctx == null && factory != null) {
0:       NamingException e = new NamingException("The ICF returned a null context");
0:       throw e;
0:     }
0: 
0:     return ctx;
0:   }
commit:1a3015d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.jndi;
0: 
0: import java.util.Hashtable;
0: 
0: import javax.naming.Context;
0: import javax.naming.NamingException;
0: import javax.naming.NoInitialContextException;
0: import javax.naming.spi.InitialContextFactory;
0: import javax.naming.spi.InitialContextFactoryBuilder;
0: import javax.naming.spi.ObjectFactory;
0: 
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.ServiceReference;
0: 
0: /**
0:  * Provides helper methods for the DelegateContext. This provides the methods so
0:  * there can be many DelegateContexts, but few service trackers.
0:  */
0: public final class ContextHelper
0: {
0: 	/** The bundle context we use for accessing the SR */
0:   private static BundleContext context;
0:   
0:   /** Ensure no one constructs us */
0:   private ContextHelper() { throw new RuntimeException(); }
0:   
0:   public static void setBundleContext(BundleContext ctx)
0:   {
0:   	context = ctx;
0:   }
0:   
0:   /**
0:    * This class creates a Context from an InitialContextFactory that may be
0:    * named in the provided env. If no name is set the first InitialContextFactory
0:    * returned from the service registry is used.
0:    * 
0:    * @param env
0:    * @return the context.
0:    * @throws NamingException
0:    */
0:   public static Context createContext(Hashtable<?,?> env)
0:     throws NamingException
0:   {
0:   	
0:     InitialContextFactory icf = null;
0:     ServiceReference ref = null;
0: 
0:     String icfFactory = (String) env.get(Context.INITIAL_CONTEXT_FACTORY);
0:     
0:     boolean icfFactorySet = true;
0: 
0:     if (icfFactory == null) {
0:       icfFactory = InitialContextFactory.class.getName();
0:       icfFactorySet = false;
0:     }
0:     
0:     try {
0:       ServiceReference[] refs = context.getAllServiceReferences(icfFactory, null);
0:       if (refs != null) {
0:         ref = refs[0];
0:         icf = (InitialContextFactory) context.getService(ref);
0:       }
0:     } catch (InvalidSyntaxException e) {
0:       // TODO nls enable this.
0:       NamingException e4 = new NamingException("Argh this should never happen :)");
0:       e4.initCause(e);
0:       
0:       throw e4;
0:     }
0: 
0:     if (icf == null) {
0:       try {
0:         ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
0: 
0:         if (refs != null) {
0:           for (ServiceReference icfbRef : refs) {
0:             InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(icfbRef);
0: 
0:             icf = builder.createInitialContextFactory(env);
0:             
0:             context.ungetService(icfbRef);
0:             if (icf != null) {
0:               break;
0:             }
0:           }
0:         }
0:       } catch (InvalidSyntaxException e) {
0:         // TODO nls enable this.
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e);    
0:         throw e4;
0:       }
0:     }
0: 
0:     if (icf == null && icfFactorySet) {
0:       try {
0:         Class<?> clazz = Class.forName(icfFactory, true, null);
0:         icf = (InitialContextFactory) clazz.newInstance();
0:       } catch (ClassNotFoundException e11) {
0:         // TODO nls enable this.
0:         NamingException e = new NamingException("Argh this should never happen :)");
0:         e.initCause(e11);    
0:         throw e;
0:       } catch (InstantiationException e2) {
0:         // TODO nls enable this.
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e2);    
0:         throw e4;
0:       } catch (IllegalAccessException e1) {
0:         // TODO nls enable this.
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e1);    
0:         throw e4;
0:       }
0:     }
0: 
0:     if (icf == null) {
0: 
0:       // TODO nls enable this.
0:       NamingException e3 = new NoInitialContextException("We could not find an InitialContextFactory to use");
0:       
0:       throw e3;
0:     }
0: 
0:     Context ctx = icf.getInitialContext(env);
0: 
0:     if (ref != null) context.ungetService(ref);
0: 
0:     if (ctx == null) {
0:       // TODO nls enable this
0:       NamingException e = new NamingException("The ICF returned a null context");
0:       throw e;
0:     }
0: 
0:     return ctx;
0:   }
0:   
0:   
0:   private static Context createIcfContext(Hashtable<?,?> env) throws NamingException
0:   {
0:     String icfFactory = (String) env.get(Context.INITIAL_CONTEXT_FACTORY);
0:     InitialContextFactory icf = null;
0: 
0:     if (icfFactory != null) {
0:       try {
0:         Class<?> clazz = Class.forName(icfFactory, true, Thread.currentThread()
0:             .getContextClassLoader());
0:         icf = (InitialContextFactory) clazz.newInstance();
0: 
0:       } catch (ClassNotFoundException e11) {
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e11);
0:         throw e4;
0:       } catch (InstantiationException e2) {
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e2);
0:         throw e4;
0:       } catch (IllegalAccessException e1) {
0:         NamingException e4 = new NamingException("Argh this should never happen :)");
0:         e4.initCause(e1);
0:         throw e4;
0:       }
0:     }
0:     Context ctx = null;
0: 
0:     if (icf != null) {
0:       ctx = icf.getInitialContext(env);
0:     }    
0:     
0:     return ctx;
0:   }
0:   
0:   /**
0:    * This method is used to create a URL Context. It does this by looking for 
0:    * the URL context's ObjectFactory in the service registry.
0:    * 
0:    * @param urlScheme
0:    * @param env
0:    * @return a Context
0:    * @throws NamingException
0:    */
0:   public static Context createURLContext(String urlScheme, Hashtable<?, ?> env)
0:       throws NamingException
0:   {
0:     ObjectFactory factory = null;
0:     ServiceReference ref = null;
0: 
0:     Context ctx = null;
0: 
0:     try {
0:       ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(),
0:           "(|(osgi.jndi.urlScheme=" + urlScheme + ")(urlScheme=" + urlScheme + "))");
0: 
0:       if (services != null) {
0:         ref = services[0];
0:         factory = (ObjectFactory) context.getService(ref);
0:       }
0:     } catch (InvalidSyntaxException e1) {
0:       // TODO nls enable this.
0:       NamingException e = new NamingException("Argh this should never happen :)");
0:       e.initCause(e1);
0:       throw e;
0:     }
0: 
0:     if (factory != null) {
0:       try {
0:         ctx = (Context) factory.getObjectInstance(null, null, null, env);
0:       } catch (Exception e) {
0:         NamingException e2 = new NamingException();
0:         e2.initCause(e);
0:         throw e2;
0:       } finally {
0:         if (ref != null) context.ungetService(ref);
0:       }
0:     }
0: 
0:     // TODO: This works for WAS - we believe - but is incorrect behaviour. We should not use an icf to generate the URLContext.
0:     // Rather, the missing URLContext factories should be exported on behalf of WAS.
0:     if (ctx == null) {
0:       ctx = createIcfContext(env);
0:     }
0:     
0:     if (ctx == null && factory == null) {
0:       NamingException e = new NamingException("We could not find an ObjectFactory to use");
0:       throw e;
0:     } else if (ctx == null && factory != null) {
0:       NamingException e = new NamingException("The ICF returned a null context");
0:       throw e;
0:     }
0: 
0:     return ctx;
0:   }
0: }
============================================================================