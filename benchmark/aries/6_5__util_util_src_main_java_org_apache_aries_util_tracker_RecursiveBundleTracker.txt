2:c0ed8e5: /**
1:537d4ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:537d4ee:  * or more contributor license agreements.  See the NOTICE file
1:537d4ee:  * distributed with this work for additional information
1:537d4ee:  * regarding copyright ownership.  The ASF licenses this file
1:537d4ee:  * to you under the Apache License, Version 2.0 (the
1:537d4ee:  * "License"); you may not use this file except in compliance
1:537d4ee:  * with the License.  You may obtain a copy of the License at
3:81d8073:  *
1:537d4ee:  *   http://www.apache.org/licenses/LICENSE-2.0
1:81d8073:  *
1:537d4ee:  * Unless required by applicable law or agreed to in writing,
1:537d4ee:  * software distributed under the License is distributed on an
1:537d4ee:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:537d4ee:  * KIND, either express or implied.  See the License for the
1:537d4ee:  * specific language governing permissions and limitations
1:537d4ee:  * under the License.
2:c0ed8e5:  */
1:537d4ee: package org.apache.aries.util.tracker;
3:81d8073: 
1:6df3ad3: import org.apache.aries.util.tracker.hook.BundleHookBundleTracker;
1:537d4ee: import org.osgi.framework.Bundle;
1:537d4ee: import org.osgi.framework.BundleContext;
1:537d4ee: import org.osgi.framework.ServiceReference;
1:537d4ee: import org.osgi.util.tracker.BundleTracker;
1:537d4ee: import org.osgi.util.tracker.BundleTrackerCustomizer;
1:81d8073: 
1:c0ed8e5: /**
1:537d4ee:  * <p>This class supports the tracking of composite bundles. It allows clients to ignore any
1:537d4ee:  * events related to framework bundles, as it will automatically handle these events. In
1:537d4ee:  * order to use this class clients must create a subclass and implement the methods of the
1:537d4ee:  * <code>BundleTrackerCustomizer</code> interface. In spite of this, instances of this class
1:6df3ad3:  * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p>
1:6df3ad3:  * <p/>
1:537d4ee:  * The model for using this is that classes should instantiate it
1:537d4ee:  * and pass it a 'vanilla' bundle tracker.
1:81d8073:  *
1:6df3ad3:  * @author pradine
1:c0ed8e5:  */
1:6df3ad3: public final class RecursiveBundleTracker {
1:81d8073:     private static final int COMPOSITE_BUNDLE_MASK =
1:6df3ad3:             Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING;
1:6df3ad3: 
1:81d8073:     private final BundleTracker tracker;
1:8069959:     private final BundleTracker compositeTracker;
1:6df3ad3: 
1:81d8073:     /**
1:81d8073:      * Constructor
1:6df3ad3:      *
1:6df3ad3:      * @param context   - The <code>BundleContext</code> against which the tracking is done.
1:81d8073:      * @param stateMask - The bit mask of the ORing of the bundle states to be tracked. The
1:f7d538d:      *                  mask must contain the flags <code>Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
1:6df3ad3:      *                  as a minimum.
1:81d8073:      * @throws IllegalArgumentException - If the provided bit mask does not contain required
1:6df3ad3:      *                                  flags
1:81d8073:      */
1:81d8073:     public RecursiveBundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer customizer) {
1:8069959:         //This test only makes sense for composite bundles, but in the interests of more consistent behavior lets leave it.
1:6df3ad3:         // We always need INSTALLED events so we can recursively listen to the frameworks
1:6df3ad3:         if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
1:81d8073:             throw new IllegalArgumentException();
1:6df3ad3:         BundleTracker tracker = null;
1:6df3ad3:         try {
1:6df3ad3:             //R43, equinox composite bundles seem to produce appropriate bundle event hook notifications
1:6df3ad3:             tracker = new BundleHookBundleTracker(context, stateMask, customizer);
1:6df3ad3:         } catch (Throwable e) {
3:c0ed8e5:         }
1:8069959:         if (areMultipleFrameworksAvailable(context)) {
1:8069959:             compositeTracker = new InternalRecursiveBundleTracker(context, stateMask, customizer, tracker == null);
1:8069959:         } else {
1:8069959:             compositeTracker = null;
1:8069959:         }
1:8069959:         if (tracker == null && compositeTracker == null) {
1:8069959:             //R42
1:8069959:             tracker = new BundleTracker(context, stateMask, customizer);
1:6df3ad3:         }
1:6df3ad3:         this.tracker = tracker;
1:6df3ad3:     }
1:6df3ad3: 
1:3877732:     /*
1:3877732:      * Checks whether or not the framework supports composite bundles. The only
1:3877732:      * known supporting framework is Equinox. When the Equinox specific
1:3877732:      * framework property osgi.resolverMode is set to "strict", the
1:3877732:      * CompositeBundleFactory service is registered, but the x-internal
1:3877732:      * org.osgi.service.framework package is not exported, thus the need for
1:3877732:      * the additional Class.forName check.
1:3877732:      */
1:81d8073:     private static boolean areMultipleFrameworksAvailable(BundleContext context) {
1:3877732:     	String compositeBundleFactory = "org.osgi.service.framework.CompositeBundleFactory";
1:3877732:     	try {
1:3877732:     		Class.forName(compositeBundleFactory);
1:3877732:     	} catch (ClassNotFoundException e) {
1:3877732:     		return false;
1:3877732:     	}
1:3877732:         ServiceReference sr = context.getServiceReference(compositeBundleFactory);
1:6df3ad3:         return sr != null;
1:81d8073:     }
1:6df3ad3: 
1:81d8073:     /**
1:81d8073:      * Start tracking bundles that match the bit mask provided at creation time.
1:6df3ad3:      *
1:81d8073:      * @see BundleTracker#open()
1:81d8073:      */
1:81d8073:     public void open() {
1:8069959:         if (tracker != null) {
1:8069959:             tracker.open();
1:8069959:         }
1:8069959:         if (compositeTracker != null) {
1:8069959:             compositeTracker.open();
1:8069959:         }
1:81d8073:     }
1:6df3ad3: 
1:81d8073:     /**
1:81d8073:      * Stop the tracking of bundles
1:6df3ad3:      *
1:81d8073:      * @see BundleTracker#close()
1:81d8073:      */
1:81d8073:     public void close() {
1:8069959:         if (tracker != null) {
1:8069959:             tracker.close();
1:8069959:         }
1:8069959:         if (compositeTracker != null) {
1:8069959:             compositeTracker.close();
1:8069959:         }
1:81d8073:     }
1:81d8073: 
1:c0ed8e5: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3877732
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * Checks whether or not the framework supports composite bundles. The only
1:      * known supporting framework is Equinox. When the Equinox specific
1:      * framework property osgi.resolverMode is set to "strict", the
1:      * CompositeBundleFactory service is registered, but the x-internal
1:      * org.osgi.service.framework package is not exported, thus the need for
1:      * the additional Class.forName check.
1:      */
1:     	String compositeBundleFactory = "org.osgi.service.framework.CompositeBundleFactory";
1:     	try {
1:     		Class.forName(compositeBundleFactory);
1:     	} catch (ClassNotFoundException e) {
1:     		return false;
1:     	}
1:         ServiceReference sr = context.getServiceReference(compositeBundleFactory);
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
1:     private final BundleTracker compositeTracker;
/////////////////////////////////////////////////////////////////////////
1:         //This test only makes sense for composite bundles, but in the interests of more consistent behavior lets leave it.
/////////////////////////////////////////////////////////////////////////
1:         if (areMultipleFrameworksAvailable(context)) {
1:             compositeTracker = new InternalRecursiveBundleTracker(context, stateMask, customizer, tracker == null);
1:         } else {
1:             compositeTracker = null;
1:         }
1:         if (tracker == null && compositeTracker == null) {
1:             //R42
1:             tracker = new BundleTracker(context, stateMask, customizer);
/////////////////////////////////////////////////////////////////////////
1:         if (tracker != null) {
1:             tracker.open();
1:         }
1:         if (compositeTracker != null) {
1:             compositeTracker.open();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (tracker != null) {
1:             tracker.close();
1:         }
1:         if (compositeTracker != null) {
1:             compositeTracker.close();
1:         }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:f7d538d
/////////////////////////////////////////////////////////////////////////
1:      *                  mask must contain the flags <code>Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.tracker.hook.BundleHookBundleTracker;
/////////////////////////////////////////////////////////////////////////
1:  * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p>
1:  * <p/>
1:  * @author pradine
1: public final class RecursiveBundleTracker {
1:             Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING;
1: 
1: 
1:      *
1:      * @param context   - The <code>BundleContext</code> against which the tracking is done.
0:      *                  mask must contain the flags <code>Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
1:      *                  as a minimum.
1:      *                                  flags
1:         // We always need INSTALLED events so we can recursively listen to the frameworks
1:         if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
1:         BundleTracker tracker = null;
1:         try {
1:             //R43, equinox composite bundles seem to produce appropriate bundle event hook notifications
1:             tracker = new BundleHookBundleTracker(context, stateMask, customizer);
1:         } catch (Throwable e) {
0:         if (tracker == null) {
0:             if (areMultipleFrameworksAvailable(context)) {
0:                 //not sure if this ever happens, non R43 composite bundles
0:                 tracker = new InternalRecursiveBundleTracker(context, stateMask, customizer);
0:             } else {
0:                 //R42
0:                 tracker = new BundleTracker(context, stateMask, customizer);
1:             }
1:         }
1:         this.tracker = tracker;
1: 
0:         ServiceReference sr = context.getServiceReference("org.osgi.service.framework.CompositeBundleFactory");
1:         return sr != null;
1: 
1:      *
1: 
1:      *
commit:81d8073
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p> 
1:  * 
1:  *
0: public final class RecursiveBundleTracker  {
1:     private static final int COMPOSITE_BUNDLE_MASK =
1:     
1:     private final BundleTracker tracker;
1:         
1:     /**
1:      * Constructor
1:      * 
0:      * @param context - The <code>BundleContext</code> against which the tracking is done.
1:      * @param stateMask - The bit mask of the ORing of the bundle states to be tracked. The
0:      * mask must contain the flags <code>Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
0:      * as a minimum.
1:      * @throws IllegalArgumentException - If the provided bit mask does not contain required
0:      * flags
1:      */
1:     public RecursiveBundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer customizer) {
0:       // We always need INSTALLED events so we can recursively listen to the frameworks
0:       if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
1:             throw new IllegalArgumentException();
0:        if (areMultipleFrameworksAvailable(context)) {
0:           tracker = new InternalRecursiveBundleTracker(context, stateMask, customizer);
0:         } else {
0:          tracker = new BundleTracker(context, stateMask, customizer);
1:         }
1:     
1:     private static boolean areMultipleFrameworksAvailable(BundleContext context) {
0:       ServiceReference sr = context.getServiceReference("org.osgi.service.framework.CompositeBundleFactory");
0:       return sr != null;
1:     
1:     /**
1:      * Start tracking bundles that match the bit mask provided at creation time.
1:      * 
1:      * @see BundleTracker#open()
1:      */
1:     public void open() {
0:         tracker.open();
1:     }
1:     
1:     /**
1:      * Stop the tracking of bundles
1:      * 
1:      * @see BundleTracker#close()
1:      */
1:     public void close() {
0:         tracker.close();
1:     }
commit:c0ed8e5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.tracker.hook.BundleHookBundleTracker;
/////////////////////////////////////////////////////////////////////////
0:  * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p>
0:  * <p/>
0:  * @author pradine
0: public final class RecursiveBundleTracker {
0:   private static final int COMPOSITE_BUNDLE_MASK =
0: 
0:   private final BundleTracker tracker;
0: 
1:   /**
0:    * Constructor
0:    *
0:    * @param context   - The <code>BundleContext</code> against which the tracking is done.
0:    * @param stateMask - The bit mask of the ORing of the bundle states to be tracked. The
0:    *                  mask must contain the flags <code>Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
0:    *                  as a minimum.
0:    * @throws IllegalArgumentException - If the provided bit mask does not contain required
0:    *                                  flags
1:    */
0:   public RecursiveBundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer customizer) {
0:     // We always need INSTALLED events so we can recursively listen to the frameworks
0:     if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
0:       throw new IllegalArgumentException();
0: 
0:     BundleTracker tracker = null;
0:     try {
0:       tracker = new BundleHookBundleTracker(context, stateMask, customizer);
0:     } catch (Throwable e) {
0:     if (tracker == null && areMultipleFrameworksAvailable(context)) {
0:       tracker = new InternalRecursiveBundleTracker(context, stateMask, customizer);
0:     } else {
0:       tracker = new BundleTracker(context, stateMask, customizer);
0:     this.tracker = tracker;
1:   }
0: 
0:   private static boolean areMultipleFrameworksAvailable(BundleContext context) {
0:     ServiceReference sr = context.getServiceReference("org.osgi.service.framework.CompositeBundleFactory");
0:     return sr != null;
1:   }
0: 
1:   /**
0:    * Start tracking bundles that match the bit mask provided at creation time.
0:    *
0:    * @see BundleTracker#open()
1:    */
0:   public void open() {
0:     tracker.open();
1:   }
0: 
1:   /**
0:    * Stop the tracking of bundles
0:    *
0:    * @see BundleTracker#close()
1:    */
0:   public void close() {
0:     tracker.close();
1:   }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:886154c
/////////////////////////////////////////////////////////////////////////
0:       Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING;
commit:530e211
/////////////////////////////////////////////////////////////////////////
0:      * mask must contain the flags <code>Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
author:Lin Sun
-------------------------------------------------------------------------------
commit:537d4ee
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.util.tracker;
0: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.BundleTracker;
1: import org.osgi.util.tracker.BundleTrackerCustomizer;
0: 
0: /**
1:  * <p>This class supports the tracking of composite bundles. It allows clients to ignore any
1:  * events related to framework bundles, as it will automatically handle these events. In
1:  * order to use this class clients must create a subclass and implement the methods of the
1:  * <code>BundleTrackerCustomizer</code> interface. In spite of this, instances of this class
0:  * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p> 
0:  * 
1:  * The model for using this is that classes should instantiate it
1:  * and pass it a 'vanilla' bundle tracker.
0:  * @author pradine
0:  *
0:  */
0: public final class RecursiveBundleTracker  {
0:     private static final int COMPOSITE_BUNDLE_MASK =
0:       Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING;
0:     
0:     private final BundleTracker tracker;
0:         
0:     /**
0:      * Constructor
0:      * 
0:      * @param context - The <code>BundleContext</code> against which the tracking is done.
0:      * @param stateMask - The bit mask of the ORing of the bundle states to be tracked. The
0:      * mask must contain the flags <code>Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
0:      * as a minimum.
0:      * @throws IllegalArgumentException - If the provided bit mask does not contain required
0:      * flags
0:      */
0:     public RecursiveBundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer customizer) {
0:       // We always need INSTALLED events so we can recursively listen to the frameworks
0:       if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
0:             throw new IllegalArgumentException();
0:        if (areMultipleFrameworksAvailable(context)) {
0:           tracker = new InternalRecursiveBundleTracker(context, stateMask, customizer);
0:         } else {
0:          tracker = new BundleTracker(context, stateMask, customizer);
0:         }
0:     }
0:     
0:     private static boolean areMultipleFrameworksAvailable(BundleContext context) {
0:       ServiceReference sr = context.getServiceReference("org.osgi.service.framework.CompositeBundleFactory");
0:       return sr != null;
0:     }
0:     
0:     /**
0:      * Start tracking bundles that match the bit mask provided at creation time.
0:      * 
0:      * @see BundleTracker#open()
0:      */
0:     public void open() {
0:         tracker.open();
0:     }
0:     
0:     /**
0:      * Stop the tracking of bundles
0:      * 
0:      * @see BundleTracker#close()
0:      */
0:     public void close() {
0:         tracker.close();
0:     }
0: 
0: }
============================================================================