1:8ad6b99: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:8ad6b99:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ad6b99:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:8ad6b99:  */
1:8ad6b99: package org.apache.aries.subsystem.itests.util;
1:8ad6b99: 
1:8ad6b99: import java.util.Collections;
1:8ad6b99: import java.util.HashMap;
1:8ad6b99: import java.util.Map;
1:8ad6b99: 
1:8ad6b99: import org.osgi.resource.Requirement;
1:8ad6b99: import org.osgi.resource.Resource;
1:8ad6b99: 
1:8ad6b99: public class TestRequirement implements Requirement {
1:8ad6b99: 	public static class Builder {
1:8ad6b99: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1:8ad6b99: 		private final Map<String, String> directives = new HashMap<String, String>();
1:8ad6b99: 		
1:8ad6b99: 		private String namespace;
1:8ad6b99: 		private Resource resource;
1:8ad6b99: 		
1:8ad6b99: 		public Builder attribute(String name, Object value) {
1:8ad6b99: 			attributes.put(name,  value);
1:8ad6b99: 			return this;
1:8ad6b99: 		}
1:8ad6b99: 		
1:8ad6b99: 		public TestRequirement build() {
1:8ad6b99: 			return new TestRequirement(namespace, attributes, directives, resource);
1:8ad6b99: 		}
1:8ad6b99: 		
1:8ad6b99: 		public Builder directive(String name, String value) {
1:8ad6b99: 			directives.put(name, value);
1:8ad6b99: 			return this;
1:8ad6b99: 		}
1:8ad6b99: 		
1:8ad6b99: 		public Builder namespace(String value) {
1:8ad6b99: 			namespace = value;
1:8ad6b99: 			return this;
1:8ad6b99: 		}
1:8ad6b99: 		
1:8ad6b99: 		public Builder resource(Resource value) {
1:8ad6b99: 			resource = value;
1:8ad6b99: 			return this;
1:8ad6b99: 		}
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private final Map<String, Object> attributes;
1:8ad6b99: 	private final Map<String, String> directives;
1:8ad6b99: 	private final String namespace;
1:8ad6b99: 	private final Resource resource;
1:8ad6b99: 	
1:8ad6b99: 	public TestRequirement(
1:8ad6b99: 			String namespace,
1:8ad6b99: 			Map<String, Object> attributes,
1:8ad6b99: 			Map<String, String> directives,
1:8ad6b99: 			Resource resource) {
1:8ad6b99: 		this.namespace = namespace;
1:8ad6b99: 		this.attributes = new HashMap<String, Object>(attributes);
1:8ad6b99: 		this.directives = new HashMap<String, String>(directives);
1:8ad6b99: 		this.resource = resource;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Map<String, Object> getAttributes() {
1:8ad6b99: 		return Collections.unmodifiableMap(attributes);
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Map<String, String> getDirectives() {
1:8ad6b99: 		return Collections.unmodifiableMap(directives);
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public String getNamespace() {
1:8ad6b99: 		return namespace;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Resource getResource() {
1:8ad6b99: 		return resource;
1:8ad6b99: 	}
1:8ad6b99: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: public class TestRequirement implements Requirement {
1: 	public static class Builder {
1: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 		private final Map<String, String> directives = new HashMap<String, String>();
1: 		
1: 		private String namespace;
1: 		private Resource resource;
1: 		
1: 		public Builder attribute(String name, Object value) {
1: 			attributes.put(name,  value);
1: 			return this;
1: 		}
1: 		
1: 		public TestRequirement build() {
1: 			return new TestRequirement(namespace, attributes, directives, resource);
1: 		}
1: 		
1: 		public Builder directive(String name, String value) {
1: 			directives.put(name, value);
1: 			return this;
1: 		}
1: 		
1: 		public Builder namespace(String value) {
1: 			namespace = value;
1: 			return this;
1: 		}
1: 		
1: 		public Builder resource(Resource value) {
1: 			resource = value;
1: 			return this;
1: 		}
1: 	}
1: 	
1: 	private final Map<String, Object> attributes;
1: 	private final Map<String, String> directives;
1: 	private final String namespace;
1: 	private final Resource resource;
1: 	
1: 	public TestRequirement(
1: 			String namespace,
1: 			Map<String, Object> attributes,
1: 			Map<String, String> directives,
1: 			Resource resource) {
1: 		this.namespace = namespace;
1: 		this.attributes = new HashMap<String, Object>(attributes);
1: 		this.directives = new HashMap<String, String>(directives);
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.unmodifiableMap(attributes);
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return namespace;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================