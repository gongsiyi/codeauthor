1:30bb255: /*
1:30bb255:  * Licensed to the Apache Software Foundation (ASF) under one
1:30bb255:  * or more contributor license agreements.  See the NOTICE file
1:30bb255:  * distributed with this work for additional information
1:30bb255:  * regarding copyright ownership.  The ASF licenses this file
1:30bb255:  * to you under the Apache License, Version 2.0 (the
1:30bb255:  * "License"); you may not use this file except in compliance
1:30bb255:  * with the License.  You may obtain a copy of the License at
1:30bb255:  *
1:30bb255:  *     http://www.apache.org/licenses/LICENSE-2.0
1:30bb255:  *
1:30bb255:  * Unless required by applicable law or agreed to in writing, software
1:30bb255:  * distributed under the License is distributed on an "AS IS" BASIS,
1:30bb255:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:30bb255:  * See the License for the specific language governing permissions and
1:30bb255:  * limitations under the License.
1:30bb255:  */
2:30bb255: 
1:30bb255: package org.apache.cassandra.io.util;
1:30bb255: 
1:30bb255: import java.nio.ByteBuffer;
1:30bb255: 
1:30bb255: import org.apache.cassandra.io.compress.BufferType;
1:30bb255: 
1:30bb255: class SimpleChunkReader extends AbstractReaderFileProxy implements ChunkReader
2:30bb255: {
1:30bb255:     private final int bufferSize;
1:30bb255:     private final BufferType bufferType;
1:30bb255: 
1:b4133f3:     SimpleChunkReader(ChannelProxy channel, long fileLength, BufferType bufferType, int bufferSize)
1:30bb255:     {
1:30bb255:         super(channel, fileLength);
1:30bb255:         this.bufferSize = bufferSize;
1:30bb255:         this.bufferType = bufferType;
2:30bb255:     }
1:30bb255: 
2:30bb255:     @Override
1:30bb255:     public void readChunk(long position, ByteBuffer buffer)
1:30bb255:     {
1:30bb255:         buffer.clear();
1:30bb255:         channel.read(buffer, position);
1:30bb255:         buffer.flip();
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public int chunkSize()
1:30bb255:     {
1:30bb255:         return bufferSize;
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public BufferType preferredBufferType()
1:30bb255:     {
1:30bb255:         return bufferType;
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public Rebufferer instantiateRebufferer()
1:30bb255:     {
1:b4133f3:         return new BufferManagingRebufferer.Unaligned(this);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     public String toString()
1:30bb255:     {
1:30bb255:         return String.format("%s(%s - chunk length %d, data length %d)",
1:30bb255:                              getClass().getSimpleName(),
1:30bb255:                              channel.filePath(),
1:30bb255:                              bufferSize,
1:30bb255:                              fileLength());
1:30bb255:     }
1:30bb255: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1:     SimpleChunkReader(ChannelProxy channel, long fileLength, BufferType bufferType, int bufferSize)
/////////////////////////////////////////////////////////////////////////
1:         return new BufferManagingRebufferer.Unaligned(this);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.io.compress.BufferType;
1: 
1: class SimpleChunkReader extends AbstractReaderFileProxy implements ChunkReader
1: {
1:     private final int bufferSize;
1:     private final BufferType bufferType;
1: 
0:     public SimpleChunkReader(ChannelProxy channel, long fileLength, BufferType bufferType, int bufferSize)
1:     {
1:         super(channel, fileLength);
1:         this.bufferSize = bufferSize;
1:         this.bufferType = bufferType;
1:     }
1: 
1:     @Override
1:     public void readChunk(long position, ByteBuffer buffer)
1:     {
1:         buffer.clear();
1:         channel.read(buffer, position);
1:         buffer.flip();
1:     }
1: 
1:     @Override
1:     public int chunkSize()
1:     {
1:         return bufferSize;
1:     }
1: 
1:     @Override
1:     public BufferType preferredBufferType()
1:     {
1:         return bufferType;
1:     }
1: 
1:     @Override
0:     public boolean alignmentRequired()
1:     {
0:         return false;
1:     }
1: 
1:     @Override
1:     public Rebufferer instantiateRebufferer()
1:     {
0:         return BufferManagingRebufferer.on(this);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("%s(%s - chunk length %d, data length %d)",
1:                              getClass().getSimpleName(),
1:                              channel.filePath(),
1:                              bufferSize,
1:                              fileLength());
1:     }
1: }
============================================================================