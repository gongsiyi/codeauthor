1:e5a76bd: /*
1:e5a76bd: * Licensed to the Apache Software Foundation (ASF) under one
1:e5a76bd: * or more contributor license agreements.  See the NOTICE file
1:e5a76bd: * distributed with this work for additional information
1:e5a76bd: * regarding copyright ownership.  The ASF licenses this file
1:e5a76bd: * to you under the Apache License, Version 2.0 (the
1:e5a76bd: * "License"); you may not use this file except in compliance
1:e5a76bd: * with the License.  You may obtain a copy of the License at
1:e5a76bd: *
1:e5a76bd: *    http://www.apache.org/licenses/LICENSE-2.0
1:e5a76bd: *
1:e5a76bd: * Unless required by applicable law or agreed to in writing,
1:e5a76bd: * software distributed under the License is distributed on an
1:e5a76bd: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e5a76bd: * KIND, either express or implied.  See the License for the
1:e5a76bd: * specific language governing permissions and limitations
1:e5a76bd: * under the License.
1:e5a76bd: */
1:e5a76bd: package org.apache.cassandra.db.lifecycle;
1:e5a76bd: 
1:b09e60f: import java.util.ArrayList;
1:b09e60f: import java.util.List;
1:e5a76bd: import java.util.Map;
1:e5a76bd: import java.util.Set;
1:e5a76bd: 
1:e5a76bd: import com.google.common.collect.ImmutableMap;
1:e5a76bd: import com.google.common.collect.ImmutableSet;
1:e5a76bd: import com.google.common.collect.Lists;
1:e5a76bd: 
1:99a84bc: import org.junit.BeforeClass;
1:e5a76bd: import org.junit.Test;
1:e5a76bd: 
1:e5a76bd: import junit.framework.Assert;
1:e5a76bd: import org.apache.cassandra.MockSchema;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:99da210: import org.apache.cassandra.db.ColumnFamilyStore;
1:b09e60f: import org.apache.cassandra.db.compaction.OperationType;
1:e5a76bd: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:e5a76bd: 
1:b09e60f: import static junit.framework.Assert.assertEquals;
1:b09e60f: import static junit.framework.Assert.assertNotNull;
1:b09e60f: 
1:e5a76bd: public class HelpersTest
1:e5a76bd: {
1:e5a76bd: 
1:99a84bc:     @BeforeClass
1:99a84bc:     public static void setUp()
1:99a84bc:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:99a84bc:         MockSchema.cleanup();
1:99a84bc:     }
1:99a84bc: 
1:e5a76bd:     static Set<Integer> a = set(1, 2, 3);
1:e5a76bd:     static Set<Integer> b = set(4, 5, 6);
1:e5a76bd:     static Set<Integer> c = set(7, 8, 9);
1:e5a76bd:     static Set<Integer> abc = set(1, 2, 3, 4, 5, 6, 7, 8, 9);
1:e5a76bd: 
1:e5a76bd:     // this also tests orIn
1:e5a76bd:     @Test
1:e5a76bd:     public void testFilterIn()
1:e5a76bd:     {
1:e5a76bd:         check(Helpers.filterIn(abc, a), a);
1:e5a76bd:         check(Helpers.filterIn(abc, a, c), set(1, 2, 3, 7, 8, 9));
1:e5a76bd:         check(Helpers.filterIn(a, c), set());
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     // this also tests notIn
1:e5a76bd:     @Test
1:e5a76bd:     public void testFilterOut()
1:e5a76bd:     {
1:e5a76bd:         check(Helpers.filterOut(abc, a), set(4, 5, 6, 7, 8, 9));
1:e5a76bd:         check(Helpers.filterOut(abc, b), set(1, 2, 3, 7, 8, 9));
1:e5a76bd:         check(Helpers.filterOut(a, a), set());
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     @Test
1:e5a76bd:     public void testConcatUniq()
1:e5a76bd:     {
1:e5a76bd:         check(Helpers.concatUniq(a, b, a, c, b, a), abc);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     @Test
1:e5a76bd:     public void testIdentityMap()
1:e5a76bd:     {
1:e5a76bd:         Integer one = new Integer(1);
1:e5a76bd:         Integer two = new Integer(2);
1:e5a76bd:         Integer three = new Integer(3);
1:e5a76bd:         Map<Integer, Integer> identity = Helpers.identityMap(set(one, two, three));
1:e5a76bd:         Assert.assertEquals(3, identity.size());
1:e5a76bd:         Assert.assertSame(one, identity.get(1));
1:e5a76bd:         Assert.assertSame(two, identity.get(2));
1:e5a76bd:         Assert.assertSame(three, identity.get(3));
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     @Test
1:e5a76bd:     public void testReplace()
1:e5a76bd:     {
1:e5a76bd:         boolean failure;
1:e5a76bd:         failure = false;
1:e5a76bd:         try
1:e5a76bd:         {
1:e5a76bd:             Helpers.replace(abc, a, c);
1:e5a76bd:         }
1:e5a76bd:         catch (AssertionError e)
1:e5a76bd:         {
1:e5a76bd:             failure = true;
1:e5a76bd:         }
1:e5a76bd:         Assert.assertTrue(failure);
1:e5a76bd: 
1:e5a76bd:         failure = false;
1:e5a76bd:         try
1:e5a76bd:         {
1:e5a76bd:             Helpers.replace(a, abc, c);
1:e5a76bd:         }
1:e5a76bd:         catch (AssertionError e)
1:e5a76bd:         {
1:e5a76bd:             failure = true;
1:e5a76bd:         }
1:e5a76bd:         Assert.assertTrue(failure);
1:e5a76bd: 
1:e5a76bd:         failure = false;
1:e5a76bd:         try
1:e5a76bd:         {
1:e5a76bd:             Map<Integer, Integer> notIdentity = ImmutableMap.of(1, new Integer(1), 2, 2, 3, 3);
1:e5a76bd:             Helpers.replace(notIdentity, a, b);
1:e5a76bd:         }
1:e5a76bd:         catch (AssertionError e)
1:e5a76bd:         {
1:e5a76bd:             failure = true;
1:e5a76bd:         }
1:e5a76bd:         Assert.assertTrue(failure);
1:e5a76bd: 
1:e5a76bd:         // check it actually works when correct values provided
1:e5a76bd:         check(Helpers.replace(a, a, b), b);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     private static Set<Integer> set(Integer ... contents)
1:e5a76bd:     {
1:e5a76bd:         return ImmutableSet.copyOf(contents);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     private static void check(Iterable<Integer> check, Set<Integer> expected)
1:e5a76bd:     {
1:e5a76bd:         Assert.assertEquals(expected, ImmutableSet.copyOf(check));
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     @Test
1:e5a76bd:     public void testSetupDeletionNotification()
1:e5a76bd:     {
1:99da210:         ColumnFamilyStore cfs = MockSchema.newCFS();
1:99da210:         Iterable<SSTableReader> readers = Lists.newArrayList(MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs));
1:e5a76bd:         Throwable accumulate = Helpers.setReplaced(readers, null);
1:e5a76bd:         Assert.assertNull(accumulate);
1:e5a76bd:         for (SSTableReader reader : readers)
1:e5a76bd:             Assert.assertTrue(reader.isReplaced());
1:e5a76bd:         accumulate = Helpers.setReplaced(readers, null);
1:b09e60f:         assertNotNull(accumulate);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     @Test
1:e5a76bd:     public void testMarkObsolete()
1:e5a76bd:     {
1:99da210:         ColumnFamilyStore cfs = MockSchema.newCFS();
1:73781a9:         LogTransaction txnLogs = new LogTransaction(OperationType.UNKNOWN);
1:99da210:         Iterable<SSTableReader> readers = Lists.newArrayList(MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs));
1:b09e60f: 
1:351c7ca:         List<LogTransaction.Obsoletion> obsoletions = new ArrayList<>();
1:b09e60f:         Assert.assertNull(Helpers.prepareForObsoletion(readers, txnLogs, obsoletions, null));
1:b09e60f:         assertNotNull(obsoletions);
1:b09e60f:         assertEquals(2, obsoletions.size());
1:b09e60f: 
1:b09e60f:         Throwable accumulate = Helpers.markObsolete(obsoletions, null);
1:e5a76bd:         Assert.assertNull(accumulate);
1:e5a76bd:         for (SSTableReader reader : readers)
1:e5a76bd:             Assert.assertTrue(reader.isMarkedCompacted());
1:b09e60f: 
1:b09e60f:         accumulate = Helpers.markObsolete(obsoletions, null);
1:b09e60f:         assertNotNull(accumulate);
1:b09e60f: 
1:b09e60f:         txnLogs.finish();
1:e5a76bd:     }
1:e5a76bd: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:73781a9
/////////////////////////////////////////////////////////////////////////
1:         LogTransaction txnLogs = new LogTransaction(OperationType.UNKNOWN);
commit:351c7ca
/////////////////////////////////////////////////////////////////////////
0:         LogTransaction txnLogs = new LogTransaction(OperationType.UNKNOWN, cfs.metadata);
1:         List<LogTransaction.Obsoletion> obsoletions = new ArrayList<>();
commit:5726625
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         TransactionLog txnLogs = new TransactionLog(OperationType.UNKNOWN, cfs.metadata);
0:         List<TransactionLog.Obsoletion> obsoletions = new ArrayList<>();
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.compaction.OperationType;
0: import org.apache.cassandra.utils.Pair;
1: import static junit.framework.Assert.assertEquals;
1: import static junit.framework.Assert.assertNotNull;
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(accumulate);
0:         TransactionLogs txnLogs = new TransactionLogs(OperationType.UNKNOWN, cfs.metadata);
1: 
0:         List<TransactionLogs.Obsoletion> obsoletions = new ArrayList<>();
1:         Assert.assertNull(Helpers.prepareForObsoletion(readers, txnLogs, obsoletions, null));
1:         assertNotNull(obsoletions);
1:         assertEquals(2, obsoletions.size());
1: 
1:         Throwable accumulate = Helpers.markObsolete(obsoletions, null);
1: 
1:         accumulate = Helpers.markObsolete(obsoletions, null);
1:         assertNotNull(accumulate);
1: 
1:         txnLogs.finish();
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2357589
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db.lifecycle;
1: 
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.collect.ImmutableSet;
1: import com.google.common.collect.Lists;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.MockSchema;
0: import org.apache.cassandra.Util;
0: import org.apache.cassandra.io.sstable.Descriptor;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
0: import org.apache.cassandra.io.sstable.format.big.BigTableReader;
0: import org.apache.cassandra.utils.concurrent.Refs;
1: 
1: public class HelpersTest
1: {
1: 
1:     static Set<Integer> a = set(1, 2, 3);
1:     static Set<Integer> b = set(4, 5, 6);
1:     static Set<Integer> c = set(7, 8, 9);
1:     static Set<Integer> abc = set(1, 2, 3, 4, 5, 6, 7, 8, 9);
1: 
1:     // this also tests orIn
1:     @Test
1:     public void testFilterIn()
1:     {
1:         check(Helpers.filterIn(abc, a), a);
1:         check(Helpers.filterIn(abc, a, c), set(1, 2, 3, 7, 8, 9));
1:         check(Helpers.filterIn(a, c), set());
1:     }
1: 
1:     // this also tests notIn
1:     @Test
1:     public void testFilterOut()
1:     {
1:         check(Helpers.filterOut(abc, a), set(4, 5, 6, 7, 8, 9));
1:         check(Helpers.filterOut(abc, b), set(1, 2, 3, 7, 8, 9));
1:         check(Helpers.filterOut(a, a), set());
1:     }
1: 
1:     @Test
1:     public void testConcatUniq()
1:     {
1:         check(Helpers.concatUniq(a, b, a, c, b, a), abc);
1:     }
1: 
1:     @Test
1:     public void testIdentityMap()
1:     {
1:         Integer one = new Integer(1);
1:         Integer two = new Integer(2);
1:         Integer three = new Integer(3);
1:         Map<Integer, Integer> identity = Helpers.identityMap(set(one, two, three));
1:         Assert.assertEquals(3, identity.size());
1:         Assert.assertSame(one, identity.get(1));
1:         Assert.assertSame(two, identity.get(2));
1:         Assert.assertSame(three, identity.get(3));
1:     }
1: 
1:     @Test
1:     public void testReplace()
1:     {
1:         boolean failure;
1:         failure = false;
1:         try
1:         {
1:             Helpers.replace(abc, a, c);
1:         }
1:         catch (AssertionError e)
1:         {
1:             failure = true;
1:         }
1:         Assert.assertTrue(failure);
1: 
1:         failure = false;
1:         try
1:         {
1:             Helpers.replace(a, abc, c);
1:         }
1:         catch (AssertionError e)
1:         {
1:             failure = true;
1:         }
1:         Assert.assertTrue(failure);
1: 
1:         failure = false;
1:         try
1:         {
1:             Map<Integer, Integer> notIdentity = ImmutableMap.of(1, new Integer(1), 2, 2, 3, 3);
1:             Helpers.replace(notIdentity, a, b);
1:         }
1:         catch (AssertionError e)
1:         {
1:             failure = true;
1:         }
1:         Assert.assertTrue(failure);
1: 
1:         // check it actually works when correct values provided
1:         check(Helpers.replace(a, a, b), b);
1:     }
1: 
1:     private static Set<Integer> set(Integer ... contents)
1:     {
1:         return ImmutableSet.copyOf(contents);
1:     }
1: 
1:     private static void check(Iterable<Integer> check, Set<Integer> expected)
1:     {
1:         Assert.assertEquals(expected, ImmutableSet.copyOf(check));
1:     }
1: 
1:     @Test
1:     public void testSetupDeletionNotification()
1:     {
0:         Iterable<SSTableReader> readers = Lists.newArrayList(MockSchema.sstable(1), MockSchema.sstable(2));
1:         Throwable accumulate = Helpers.setReplaced(readers, null);
1:         Assert.assertNull(accumulate);
1:         for (SSTableReader reader : readers)
1:             Assert.assertTrue(reader.isReplaced());
1:         accumulate = Helpers.setReplaced(readers, null);
0:         Assert.assertNotNull(accumulate);
1:     }
1: 
1:     @Test
1:     public void testMarkObsolete()
1:     {
0:         Iterable<SSTableReader> readers = Lists.newArrayList(MockSchema.sstable(1), MockSchema.sstable(2));
0:         Throwable accumulate = Helpers.markObsolete(readers, null);
1:         Assert.assertNull(accumulate);
1:         for (SSTableReader reader : readers)
1:             Assert.assertTrue(reader.isMarkedCompacted());
0:         accumulate = Helpers.markObsolete(readers, null);
0:         Assert.assertNotNull(accumulate);
1:     }
1: }
author:stefania
-------------------------------------------------------------------------------
commit:99a84bc
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setUp()
1:     {
1:         MockSchema.cleanup();
1:     }
1: 
commit:99da210
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.ColumnFamilyStore;
/////////////////////////////////////////////////////////////////////////
1:         ColumnFamilyStore cfs = MockSchema.newCFS();
1:         Iterable<SSTableReader> readers = Lists.newArrayList(MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs));
/////////////////////////////////////////////////////////////////////////
1:         ColumnFamilyStore cfs = MockSchema.newCFS();
1:         Iterable<SSTableReader> readers = Lists.newArrayList(MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs));
============================================================================