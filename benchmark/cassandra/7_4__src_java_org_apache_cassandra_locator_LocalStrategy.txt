1:4ad3252: /*
1:07cf56f:  * Licensed to the Apache Software Foundation (ASF) under one
1:07cf56f:  * or more contributor license agreements.  See the NOTICE file
1:07cf56f:  * distributed with this work for additional information
1:07cf56f:  * regarding copyright ownership.  The ASF licenses this file
1:07cf56f:  * to you under the Apache License, Version 2.0 (the
1:07cf56f:  * "License"); you may not use this file except in compliance
1:07cf56f:  * with the License.  You may obtain a copy of the License at
1:07cf56f:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cf56f:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:07cf56f:  */
1:4ad3252: package org.apache.cassandra.locator;
2:4ad3252: 
1:4ad3252: import java.net.InetAddress;
1:8ea2d2a: import java.util.ArrayList;
1:8ea2d2a: import java.util.Collections;
1:c315745: import java.util.Collection;
1:e98eb1c: import java.util.List;
1:e98eb1c: import java.util.Map;
1:4ad3252: 
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:8ea2d2a: import org.apache.cassandra.dht.RingPosition;
1:4ad3252: import org.apache.cassandra.dht.Token;
1:e98eb1c: import org.apache.cassandra.utils.FBUtilities;
1:4ad3252: 
1:4ad3252: public class LocalStrategy extends AbstractReplicationStrategy
1:4ad3252: {
1:0e96e58:     public LocalStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
1:4ad3252:     {
1:0e96e58:         super(keyspaceName, tokenMetadata, snitch, configOptions);
1:4ad3252:     }
1:8c7bc2f: 
1:8ea2d2a:     /**
1:8ea2d2a:      * We need to override this even if we override calculateNaturalEndpoints,
1:8ea2d2a:      * because the default implementation depends on token calculations but
1:8ea2d2a:      * LocalStrategy may be used before tokens are set up.
1:8ea2d2a:      */
1:8ea2d2a:     @Override
1:8ea2d2a:     public ArrayList<InetAddress> getNaturalEndpoints(RingPosition searchPosition)
1:8ea2d2a:     {
1:8ea2d2a:         ArrayList<InetAddress> l = new ArrayList<InetAddress>(1);
1:8ea2d2a:         l.add(FBUtilities.getBroadcastAddress());
1:8ea2d2a:         return l;
1:8ea2d2a:     }
1:8ea2d2a: 
1:ce9179e:     public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:4ad3252:     {
1:8ea2d2a:         return Collections.singletonList(FBUtilities.getBroadcastAddress());
1:4ad3252:     }
1:4ad3252: 
1:8c7bc2f:     public int getReplicationFactor()
1:8c7bc2f:     {
1:8c7bc2f:         return 1;
1:8c7bc2f:     }
1:8c7bc2f: 
1:8c7bc2f:     public void validateOptions() throws ConfigurationException
1:8c7bc2f:     {
1:c315745:     }
1:c315745: 
1:c315745:     public Collection<String> recognizedOptions()
1:c315745:     {
1:8c7bc2f:         // LocalStrategy doesn't expect any options.
1:c315745:         return Collections.<String>emptySet();
1:8c7bc2f:     }
1:4ad3252: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1:     public LocalStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
1:         super(keyspaceName, tokenMetadata, snitch, configOptions);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c315745
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     public Collection<String> recognizedOptions()
1:     {
1:         return Collections.<String>emptySet();
commit:5267112
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Table;
commit:dc94f37
/////////////////////////////////////////////////////////////////////////
0:         validateExpectedOptions(Collections.<String>emptySet());
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8ea2d2a
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import org.apache.cassandra.dht.RingPosition;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * We need to override this even if we override calculateNaturalEndpoints,
1:      * because the default implementation depends on token calculations but
1:      * LocalStrategy may be used before tokens are set up.
1:      */
1:     @Override
1:     public ArrayList<InetAddress> getNaturalEndpoints(RingPosition searchPosition)
1:     {
1:         ArrayList<InetAddress> l = new ArrayList<InetAddress>(1);
1:         l.add(FBUtilities.getBroadcastAddress());
1:         return l;
1:     }
1: 
1:         return Collections.singletonList(FBUtilities.getBroadcastAddress());
/////////////////////////////////////////////////////////////////////////
0:         warnOnUnexpectedOptions(Collections.<String>emptySet());
commit:1bb2f32
commit:fd66ccf
/////////////////////////////////////////////////////////////////////////
0:         warnOnUnexpectedOptions(Arrays.<String>asList());
commit:8c7bc2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getReplicationFactor()
1:     {
1:         return 1;
1:     }
1: 
1:     public void validateOptions() throws ConfigurationException
1:     {
1:         // LocalStrategy doesn't expect any options.
1:     }
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: import org.apache.cassandra.utils.FBUtilities;
commit:ce9179e
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:     public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
0:         return Arrays.asList(FBUtilities.getLocalAddress());
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         return Arrays.asList(FBUtilities.getBroadcastAddress());
author:Eric Evans
-------------------------------------------------------------------------------
commit:df8a933
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     public LocalStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
0:         super(table, tokenMetadata, snitch, configOptions);
0:     public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ad3252
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
1: 
1: package org.apache.cassandra.locator;
1: 
1: import java.net.InetAddress;
0: import java.util.HashSet;
0: import java.util.Set;
1: 
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.dht.Token;
1: 
1: public class LocalStrategy extends AbstractReplicationStrategy
1: {
0:     public LocalStrategy(TokenMetadata tokenMetadata, IEndpointSnitch snitch)
1:     {
0:         super(tokenMetadata, snitch);
1:     }
1: 
0:     public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata, String table)
1:     {
0:         Set<InetAddress> endpoints = new HashSet<InetAddress>(1);
0:         InetAddress local = FBUtilities.getLocalAddress();
0:         endpoints.add(local);
0:         return endpoints;
1:     }
1: }
============================================================================