1:6618bd8: /*
1:6618bd8:  * Licensed to the Apache Software Foundation (ASF) under one
1:6618bd8:  * or more contributor license agreements.  See the NOTICE file
1:6618bd8:  * distributed with this work for additional information
1:6618bd8:  * regarding copyright ownership.  The ASF licenses this file
1:6618bd8:  * to you under the Apache License, Version 2.0 (the
1:6618bd8:  * "License"); you may not use this file except in compliance
1:6618bd8:  * with the License.  You may obtain a copy of the License at
1:6618bd8:  *
1:6618bd8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6618bd8:  *
1:6618bd8:  * Unless required by applicable law or agreed to in writing, software
1:6618bd8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6618bd8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6618bd8:  * See the License for the specific language governing permissions and
1:6618bd8:  * limitations under the License.
1:6618bd8:  */
1:01115f7: package org.apache.cassandra.cql3.validation.miscellaneous;
1:6618bd8: 
1:6618bd8: import org.junit.Test;
1:6618bd8: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:6618bd8: import org.apache.cassandra.exceptions.SyntaxException;
1:6618bd8: 
1:6618bd8: public class PgStringTest extends CQLTester
1:6618bd8: {
1:6618bd8:     @Test
1:6618bd8:     public void testPgSyleFunction() throws Throwable
1:6618bd8:     {
1:1937bed:         execute("create or replace function "+KEYSPACE+".pgfun1 ( input double ) called on null input returns text language java\n" +
1:6618bd8:                 "AS $$return \"foobar\";$$");
1:6618bd8:     }
1:6618bd8: 
1:6618bd8:     @Test
1:6618bd8:     public void testPgSyleInsert() throws Throwable
1:6618bd8:     {
1:6618bd8:         createTable("CREATE TABLE %s (key ascii primary key, val text)");
1:6618bd8: 
1:6618bd8:         // some non-terminated pg-strings
1:6618bd8:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($ $key_empty$$, $$'' value for empty$$)");
1:6618bd8:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($$key_empty$$, $$'' value for empty$ $)");
1:6618bd8:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($$key_empty$ $, $$'' value for empty$$)");
1:6618bd8: 
1:6618bd8:         // different pg-style markers for multiple strings
1:6618bd8:         execute("INSERT INTO %s (key, val) VALUES ($$prim$ $ $key$$, $$some '' arbitrary value$$)");
1:6618bd8:         // same empty pg-style marker for multiple strings
1:6618bd8:         execute("INSERT INTO %s (key, val) VALUES ($$key_empty$$, $$'' value for empty$$)");
1:6618bd8:         // stange but valid pg-style
1:6618bd8:         execute("INSERT INTO %s (key, val) VALUES ($$$foo$_$foo$$, $$$'' value for empty$$)");
1:6618bd8:         // these are conventional quoted strings
1:6618bd8:         execute("INSERT INTO %s (key, val) VALUES ('$txt$key$$$$txt$', '$txt$'' other value$txt$')");
1:6618bd8: 
1:6618bd8:         assertRows(execute("SELECT key, val FROM %s WHERE key='prim$ $ $key'"),
1:6618bd8:                    row("prim$ $ $key", "some '' arbitrary value")
1:6618bd8:         );
1:6618bd8:         assertRows(execute("SELECT key, val FROM %s WHERE key='key_empty'"),
1:6618bd8:                    row("key_empty", "'' value for empty")
1:6618bd8:         );
1:6618bd8:         assertRows(execute("SELECT key, val FROM %s WHERE key='$foo$_$foo'"),
1:6618bd8:                    row("$foo$_$foo", "$'' value for empty")
1:6618bd8:         );
1:6618bd8:         assertRows(execute("SELECT key, val FROM %s WHERE key='$txt$key$$$$txt$'"),
1:6618bd8:                    row("$txt$key$$$$txt$", "$txt$' other value$txt$")
1:6618bd8:         );
1:6618bd8: 
1:6618bd8:         // invalid syntax
1:6618bd8:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($ascii$prim$$$key$invterm$, $txt$some '' arbitrary value$txt$)");
1:6618bd8:     }
1:6618bd8: 
1:6618bd8:     @Test(expected = SyntaxException.class)
1:6618bd8:     public void testMarkerPgFail() throws Throwable
1:6618bd8:     {
1:6618bd8:         // must throw SyntaxException - not StringIndexOutOfBoundsException or similar
1:1937bed:         execute("create function "+KEYSPACE+".pgfun1 ( input double ) called on null input returns bigint language java\n" +
1:6618bd8:                 "AS $javasrc$return 0L;$javasrc$;");
1:6618bd8:     }
1:6618bd8: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.validation.miscellaneous;
1: import org.apache.cassandra.cql3.CQLTester;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:1937bed
/////////////////////////////////////////////////////////////////////////
1:         execute("create or replace function "+KEYSPACE+".pgfun1 ( input double ) called on null input returns text language java\n" +
/////////////////////////////////////////////////////////////////////////
1:         execute("create function "+KEYSPACE+".pgfun1 ( input double ) called on null input returns bigint language java\n" +
commit:b4d7f3b
/////////////////////////////////////////////////////////////////////////
0:         execute("create or replace function "+KEYSPACE+".pgfun1 ( input double ) returns text language java\n" +
/////////////////////////////////////////////////////////////////////////
0:         execute("create function "+KEYSPACE+".pgfun1 ( input double ) returns text language java\n" +
commit:6618bd8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.cql3;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.exceptions.SyntaxException;
1: 
1: public class PgStringTest extends CQLTester
1: {
1:     @Test
1:     public void testPgSyleFunction() throws Throwable
1:     {
0:         execute("create or replace function pg::pgfun1 ( input double ) returns text language java\n" +
1:                 "AS $$return \"foobar\";$$");
1:     }
1: 
1:     @Test
1:     public void testPgSyleInsert() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key ascii primary key, val text)");
1: 
1:         // some non-terminated pg-strings
1:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($ $key_empty$$, $$'' value for empty$$)");
1:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($$key_empty$$, $$'' value for empty$ $)");
1:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($$key_empty$ $, $$'' value for empty$$)");
1: 
1:         // different pg-style markers for multiple strings
1:         execute("INSERT INTO %s (key, val) VALUES ($$prim$ $ $key$$, $$some '' arbitrary value$$)");
1:         // same empty pg-style marker for multiple strings
1:         execute("INSERT INTO %s (key, val) VALUES ($$key_empty$$, $$'' value for empty$$)");
1:         // stange but valid pg-style
1:         execute("INSERT INTO %s (key, val) VALUES ($$$foo$_$foo$$, $$$'' value for empty$$)");
1:         // these are conventional quoted strings
1:         execute("INSERT INTO %s (key, val) VALUES ('$txt$key$$$$txt$', '$txt$'' other value$txt$')");
1: 
1:         assertRows(execute("SELECT key, val FROM %s WHERE key='prim$ $ $key'"),
1:                    row("prim$ $ $key", "some '' arbitrary value")
1:         );
1:         assertRows(execute("SELECT key, val FROM %s WHERE key='key_empty'"),
1:                    row("key_empty", "'' value for empty")
1:         );
1:         assertRows(execute("SELECT key, val FROM %s WHERE key='$foo$_$foo'"),
1:                    row("$foo$_$foo", "$'' value for empty")
1:         );
1:         assertRows(execute("SELECT key, val FROM %s WHERE key='$txt$key$$$$txt$'"),
1:                    row("$txt$key$$$$txt$", "$txt$' other value$txt$")
1:         );
1: 
1:         // invalid syntax
1:         assertInvalidSyntax("INSERT INTO %s (key, val) VALUES ($ascii$prim$$$key$invterm$, $txt$some '' arbitrary value$txt$)");
1:     }
1: 
1:     @Test(expected = SyntaxException.class)
1:     public void testMarkerPgFail() throws Throwable
1:     {
1:         // must throw SyntaxException - not StringIndexOutOfBoundsException or similar
0:         execute("create function foo::pgfun1 ( input double ) returns text language java\n" +
1:                 "AS $javasrc$return 0L;$javasrc$;");
1:     }
1: }
============================================================================