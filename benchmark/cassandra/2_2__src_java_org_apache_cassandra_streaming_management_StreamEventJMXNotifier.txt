1:a0d6ed1: /*
1:a0d6ed1:  * Licensed to the Apache Software Foundation (ASF) under one
1:a0d6ed1:  * or more contributor license agreements.  See the NOTICE file
1:a0d6ed1:  * distributed with this work for additional information
1:a0d6ed1:  * regarding copyright ownership.  The ASF licenses this file
1:a0d6ed1:  * to you under the Apache License, Version 2.0 (the
1:a0d6ed1:  * "License"); you may not use this file except in compliance
1:a0d6ed1:  * with the License.  You may obtain a copy of the License at
1:a0d6ed1:  *
1:a0d6ed1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a0d6ed1:  *
1:a0d6ed1:  * Unless required by applicable law or agreed to in writing, software
1:a0d6ed1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0d6ed1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0d6ed1:  * See the License for the specific language governing permissions and
1:a0d6ed1:  * limitations under the License.
1:a0d6ed1:  */
1:a0d6ed1: package org.apache.cassandra.streaming.management;
1:a0d6ed1: 
1:a0d6ed1: import java.util.concurrent.atomic.AtomicLong;
1:a0d6ed1: import javax.management.Notification;
1:a0d6ed1: import javax.management.NotificationBroadcasterSupport;
1:a0d6ed1: 
1:a347900: import org.apache.cassandra.streaming.*;
1:a0d6ed1: 
1:a0d6ed1: /**
1:a0d6ed1:  */
1:a0d6ed1: public class StreamEventJMXNotifier extends NotificationBroadcasterSupport implements StreamEventHandler
1:a0d6ed1: {
1:a347900:     // interval in millisec to use for progress notification
1:a347900:     private static final long PROGRESS_NOTIFICATION_INTERVAL = 1000;
1:a347900: 
1:a0d6ed1:     private final AtomicLong seq = new AtomicLong();
1:a0d6ed1: 
1:a347900:     private long progressLastSent;
1:a347900: 
1:a0d6ed1:     public void handleStreamEvent(StreamEvent event)
1:a0d6ed1:     {
1:a0d6ed1:         Notification notif = null;
1:68d2526:         switch (event.eventType)
1:68d2526:         {
1:a0d6ed1:             case STREAM_PREPARED:
1:a0d6ed1:                 notif = new Notification(StreamEvent.SessionPreparedEvent.class.getCanonicalName(),
2:a0d6ed1:                                                 StreamManagerMBean.OBJECT_NAME,
2:a0d6ed1:                                                 seq.getAndIncrement());
1:a0d6ed1:                 notif.setUserData(SessionInfoCompositeData.toCompositeData(event.planId, ((StreamEvent.SessionPreparedEvent) event).session));
1:a0d6ed1:                 break;
1:a0d6ed1:             case STREAM_COMPLETE:
1:a0d6ed1:                 notif = new Notification(StreamEvent.SessionCompleteEvent.class.getCanonicalName(),
1:a0d6ed1:                                                 StreamManagerMBean.OBJECT_NAME,
1:a0d6ed1:                                                 seq.getAndIncrement());
1:a0d6ed1:                 notif.setUserData(SessionCompleteEventCompositeData.toCompositeData((StreamEvent.SessionCompleteEvent) event));
1:a0d6ed1:                 break;
1:a0d6ed1:             case FILE_PROGRESS:
1:a347900:                 ProgressInfo progress = ((StreamEvent.ProgressEvent) event).progress;
1:a347900:                 long current = System.currentTimeMillis();
1:a347900:                 if (current - progressLastSent >= PROGRESS_NOTIFICATION_INTERVAL || progress.isCompleted())
1:a347900:                 {
1:a347900:                     notif = new Notification(StreamEvent.ProgressEvent.class.getCanonicalName(),
1:a347900:                                              StreamManagerMBean.OBJECT_NAME,
1:a347900:                                              seq.getAndIncrement());
1:a347900:                     notif.setUserData(ProgressInfoCompositeData.toCompositeData(event.planId, progress));
1:a347900:                     progressLastSent = System.currentTimeMillis();
1:68d2526:                 }
1:68d2526:                 else
1:68d2526:                 {
1:a347900:                     return;
1:a347900:                 }
1:a0d6ed1:                 break;
1:a0d6ed1:         }
1:a0d6ed1:         sendNotification(notif);
1:a0d6ed1:     }
1:a0d6ed1: 
1:a0d6ed1:     public void onSuccess(StreamState result)
1:a0d6ed1:     {
1:a0d6ed1:         Notification notif = new Notification(StreamEvent.class.getCanonicalName() + ".success",
1:a0d6ed1:                                               StreamManagerMBean.OBJECT_NAME,
1:a0d6ed1:                                               seq.getAndIncrement());
1:a0d6ed1:         notif.setUserData(StreamStateCompositeData.toCompositeData(result));
1:a0d6ed1:         sendNotification(notif);
1:a0d6ed1:     }
1:a0d6ed1: 
1:a0d6ed1:     public void onFailure(Throwable t)
1:a0d6ed1:     {
1:a0d6ed1:         Notification notif = new Notification(StreamEvent.class.getCanonicalName() + ".failure",
1:a0d6ed1:                                               StreamManagerMBean.OBJECT_NAME,
1:a0d6ed1:                                               seq.getAndIncrement());
1:a0d6ed1:         notif.setUserData(t.fillInStackTrace().toString());
1:a0d6ed1:         sendNotification(notif);
1:a0d6ed1:     }
1:a0d6ed1: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:         switch (event.eventType)
1:         {
/////////////////////////////////////////////////////////////////////////
1:                 }
1:                 else
1:                 {
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:a347900
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.streaming.*;
1:     // interval in millisec to use for progress notification
1:     private static final long PROGRESS_NOTIFICATION_INTERVAL = 1000;
1: 
1:     private long progressLastSent;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 ProgressInfo progress = ((StreamEvent.ProgressEvent) event).progress;
1:                 long current = System.currentTimeMillis();
1:                 if (current - progressLastSent >= PROGRESS_NOTIFICATION_INTERVAL || progress.isCompleted())
1:                 {
1:                     notif = new Notification(StreamEvent.ProgressEvent.class.getCanonicalName(),
1:                                              StreamManagerMBean.OBJECT_NAME,
1:                                              seq.getAndIncrement());
1:                     notif.setUserData(ProgressInfoCompositeData.toCompositeData(event.planId, progress));
1:                     progressLastSent = System.currentTimeMillis();
0:                 } else {
1:                     return;
1:                 }
commit:a0d6ed1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.management;
1: 
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.management.Notification;
1: import javax.management.NotificationBroadcasterSupport;
1: 
0: import org.apache.cassandra.streaming.StreamEvent;
0: import org.apache.cassandra.streaming.StreamEventHandler;
0: import org.apache.cassandra.streaming.StreamManagerMBean;
0: import org.apache.cassandra.streaming.StreamState;
1: 
1: /**
1:  */
1: public class StreamEventJMXNotifier extends NotificationBroadcasterSupport implements StreamEventHandler
1: {
1:     private final AtomicLong seq = new AtomicLong();
1: 
1:     public void handleStreamEvent(StreamEvent event)
1:     {
1:         Notification notif = null;
0:         switch (event.eventType) {
1:             case STREAM_PREPARED:
1:                 notif = new Notification(StreamEvent.SessionPreparedEvent.class.getCanonicalName(),
1:                                                 StreamManagerMBean.OBJECT_NAME,
1:                                                 seq.getAndIncrement());
1:                 notif.setUserData(SessionInfoCompositeData.toCompositeData(event.planId, ((StreamEvent.SessionPreparedEvent) event).session));
1:                 break;
1:             case STREAM_COMPLETE:
1:                 notif = new Notification(StreamEvent.SessionCompleteEvent.class.getCanonicalName(),
1:                                                 StreamManagerMBean.OBJECT_NAME,
1:                                                 seq.getAndIncrement());
1:                 notif.setUserData(SessionCompleteEventCompositeData.toCompositeData((StreamEvent.SessionCompleteEvent) event));
1:                 break;
1:             case FILE_PROGRESS:
0:                 notif = new Notification(StreamEvent.ProgressEvent.class.getCanonicalName(),
1:                                          StreamManagerMBean.OBJECT_NAME,
1:                                          seq.getAndIncrement());
0:                 notif.setUserData(ProgressInfoCompositeData.toCompositeData(event.planId, ((StreamEvent.ProgressEvent) event).progress));
1:                 break;
1:         }
1:         sendNotification(notif);
1:     }
1: 
1:     public void onSuccess(StreamState result)
1:     {
1:         Notification notif = new Notification(StreamEvent.class.getCanonicalName() + ".success",
1:                                               StreamManagerMBean.OBJECT_NAME,
1:                                               seq.getAndIncrement());
1:         notif.setUserData(StreamStateCompositeData.toCompositeData(result));
1:         sendNotification(notif);
1:     }
1: 
1:     public void onFailure(Throwable t)
1:     {
1:         Notification notif = new Notification(StreamEvent.class.getCanonicalName() + ".failure",
1:                                               StreamManagerMBean.OBJECT_NAME,
1:                                               seq.getAndIncrement());
1:         notif.setUserData(t.fillInStackTrace().toString());
1:         sendNotification(notif);
1:     }
1: }
============================================================================