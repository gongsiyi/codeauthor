1:07cf56f: /*
1:c8afd76:  * Licensed to the Apache Software Foundation (ASF) under one
1:c8afd76:  * or more contributor license agreements.  See the NOTICE file
1:c8afd76:  * distributed with this work for additional information
1:c8afd76:  * regarding copyright ownership.  The ASF licenses this file
1:c8afd76:  * to you under the Apache License, Version 2.0 (the
1:c8afd76:  * "License"); you may not use this file except in compliance
1:c8afd76:  * with the License.  You may obtain a copy of the License at
1:c8afd76:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c8afd76:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
2:c8afd76:  */
1:c8afd76: package org.apache.cassandra.io.compress;
4:c8afd76: 
1:c8afd76: import java.io.IOException;
1:895ec3e: import java.nio.ByteBuffer;
1:820411f: import java.util.Set;
1:820411f: 
1:c8afd76: public interface ICompressor
3:c8afd76: {
1:c8afd76:     public int initialCompressedBufferLength(int chunkLength);
1:c8afd76: 
1:c8afd76:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException;
1:895ec3e: 
1:895ec3e:     /**
1:3adfd15:      * Compression for ByteBuffers.
1:3adfd15:      *
1:3adfd15:      * The data between input.position() and input.limit() is compressed and placed into output starting from output.position().
1:3adfd15:      * Positions in both buffers are moved to reflect the bytes read and written. Limits are not changed.
1:bc7941c:      */
1:3adfd15:     public void compress(ByteBuffer input, ByteBuffer output) throws IOException;
1:bc7941c: 
1:bc7941c:     /**
1:3adfd15:      * Decompression for DirectByteBuffers.
1:3adfd15:      *
1:3adfd15:      * The data between input.position() and input.limit() is uncompressed and placed into output starting from output.position().
1:3adfd15:      * Positions in both buffers are moved to reflect the bytes read and written. Limits are not changed.
1:895ec3e:      */
1:3adfd15:     public void uncompress(ByteBuffer input, ByteBuffer output) throws IOException;
1:895ec3e: 
1:895ec3e:     /**
1:3adfd15:      * Returns the preferred (most efficient) buffer type for this compressor.
1:895ec3e:      */
1:3adfd15:     public BufferType preferredBufferType();
1:3adfd15: 
1:3adfd15:     /**
1:ac53b72:      * Checks if the given buffer would be supported by the compressor. If a type is supported, the compressor must be
1:3adfd15:      * able to use it in combination with all other supported types.
1:3adfd15:      *
1:3adfd15:      * Direct and memory-mapped buffers must be supported by all compressors.
1:3adfd15:      */
1:3adfd15:     public boolean supports(BufferType bufferType);
1:c8afd76: 
1:820411f:     public Set<String> supportedOptions();
3:c8afd76: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:ac53b72
/////////////////////////////////////////////////////////////////////////
1:      * Checks if the given buffer would be supported by the compressor. If a type is supported, the compressor must be
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
1:      * Compression for ByteBuffers.
1:      *
1:      * The data between input.position() and input.limit() is compressed and placed into output starting from output.position().
1:      * Positions in both buffers are moved to reflect the bytes read and written. Limits are not changed.
1:     public void compress(ByteBuffer input, ByteBuffer output) throws IOException;
1:      * Decompression for DirectByteBuffers.
1:      *
1:      * The data between input.position() and input.limit() is uncompressed and placed into output starting from output.position().
1:      * Positions in both buffers are moved to reflect the bytes read and written. Limits are not changed.
1:     public void uncompress(ByteBuffer input, ByteBuffer output) throws IOException;
1:      * Returns the preferred (most efficient) buffer type for this compressor.
1:     public BufferType preferredBufferType();
1: 
1:     /**
0:      * Checks if the given buffer would be supported by the compressor. If a type is supported the compressor must be
1:      * able to use it in combination with all other supported types.
1:      *
1:      * Direct and memory-mapped buffers must be supported by all compressors.
1:      */
1:     public boolean supports(BufferType bufferType);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bc7941c
/////////////////////////////////////////////////////////////////////////
0:      * Compression for ByteBuffers
1:      */
0:     public int compress(ByteBuffer input, WrappedByteBuffer output) throws IOException;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:      * A simple wrapped Bytebuffer.
0:      * Not all implementations allow us to know the maximum size after
0:      * compression. This makes it hard to size the output buffer for compression
0:      * (and we want to reuse the buffer).  Instead we use this wrapped ByteBuffer
0:      * so that compress(...) can have the liberty to resize the underlying array if
0:      * necessary.
0:     public static class WrappedByteBuffer
0:         public ByteBuffer buffer;
0:         public WrappedByteBuffer(ByteBuffer buffer)
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:895ec3e
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Decompression for DirectByteBuffers
1:      */
0:     public int uncompress(ByteBuffer input, ByteBuffer output) throws IOException;
1: 
1:     /**
0:      * Notifies user if this compressor will wants/requires a direct byte buffers to
0:      * decompress direct byteBuffers
1:      */
0:     public boolean useDirectOutputByteBuffers();
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6e8c237
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:820411f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     public Set<String> supportedOptions();
1: 
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.io.compress;
1: 
1: import java.io.IOException;
0: import java.util.Map;
1: 
1: public interface ICompressor
1: {
1:     public int initialCompressedBufferLength(int chunkLength);
1: 
0:     public int compress(byte[] input, int inputOffset, int inputLength, WrappedArray output, int outputOffset) throws IOException;
1: 
1:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException;
1: 
0:     /**
0:      * A simple wrapper of a byte array.
0:      * Not all implementation allows to know what is the maximum size after
0:      * compression. This make it hard to size the ouput buffer for compress
0:      * (and we want to reuse the buffer).  Instead we use this wrapped buffer
0:      * so that compress can have the liberty to resize underlying array if
0:      * need be.
1:      */
0:     public static class WrappedArray
1:     {
0:         public byte[] buffer;
1: 
0:         public WrappedArray(byte[] buffer)
1:         {
0:             this.buffer = buffer;
1:         }
1:     }
1: }
============================================================================