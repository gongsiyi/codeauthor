1:5786b32: /*
1:5786b32: * Licensed to the Apache Software Foundation (ASF) under one
1:5786b32: * or more contributor license agreements.  See the NOTICE file
1:5786b32: * distributed with this work for additional information
1:5786b32: * regarding copyright ownership.  The ASF licenses this file
1:5786b32: * to you under the Apache License, Version 2.0 (the
1:5786b32: * "License"); you may not use this file except in compliance
1:5786b32: * with the License.  You may obtain a copy of the License at
1:5786b32: *
1:5786b32: *    http://www.apache.org/licenses/LICENSE-2.0
1:5786b32: *
1:5786b32: * Unless required by applicable law or agreed to in writing,
1:5786b32: * software distributed under the License is distributed on an
1:5786b32: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5786b32: * KIND, either express or implied.  See the License for the
1:5786b32: * specific language governing permissions and limitations
1:5786b32: * under the License.
1:5786b32: */
1:5786b32: package org.apache.cassandra.cql3;
1:5786b32: 
1:5786b32: import java.util.ArrayList;
1:5786b32: import java.util.List;
1:5786b32: import java.util.concurrent.ThreadLocalRandom;
1:5786b32: 
1:5786b32: import org.junit.Test;
1:5786b32: 
1:5786b32: import junit.framework.Assert;
1:5786b32: 
1:5786b32: public class SerializationMirrorTest extends CQLTester
1:5786b32: {
1:5786b32: 
1:5786b32:     @Test
1:5786b32:     public void testManyClusterings() throws Throwable
1:5786b32:     {
1:5786b32:         StringBuilder table = new StringBuilder("CREATE TABLE %s (a TEXT");
1:5786b32:         StringBuilder cols = new StringBuilder();
1:5786b32:         StringBuilder args = new StringBuilder("?");
1:5786b32:         List<Object> vals = new ArrayList<>();
1:5786b32:         vals.add("a");
1:5786b32:         for (int i = 0 ; i < 40 ; i++)
1:5786b32:         {
1:5786b32:             table.append(", c").append(i).append(" text");
1:5786b32:             cols.append(", c").append(i);
1:5786b32:             if (ThreadLocalRandom.current().nextBoolean())
1:5786b32:                 vals.add(Integer.toString(i));
1:5786b32:             else
1:5786b32:                 vals.add("");
1:5786b32:             args.append(",?");
1:5786b32:         }
1:5786b32:         args.append(",?");
1:5786b32:         vals.add("value");
1:5786b32:         table.append(", v text, PRIMARY KEY ((a)").append(cols).append("))");
1:5786b32:         createTable(table.toString());
1:5786b32: 
1:5786b32:         execute("INSERT INTO %s (a" + cols + ", v) VALUES (" + args+ ")", vals.toArray());
1:5786b32:         flush();
1:5786b32:         UntypedResultSet.Row row = execute("SELECT * FROM %s").one();
1:5786b32:         for (int i = 0 ; i < row.getColumns().size() ; i++)
1:5786b32:             Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"));
1:5786b32:     }
1:5786b32: 
1:5786b32: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:5786b32
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class SerializationMirrorTest extends CQLTester
1: {
1: 
1:     @Test
1:     public void testManyClusterings() throws Throwable
1:     {
1:         StringBuilder table = new StringBuilder("CREATE TABLE %s (a TEXT");
1:         StringBuilder cols = new StringBuilder();
1:         StringBuilder args = new StringBuilder("?");
1:         List<Object> vals = new ArrayList<>();
1:         vals.add("a");
1:         for (int i = 0 ; i < 40 ; i++)
1:         {
1:             table.append(", c").append(i).append(" text");
1:             cols.append(", c").append(i);
1:             if (ThreadLocalRandom.current().nextBoolean())
1:                 vals.add(Integer.toString(i));
1:             else
1:                 vals.add("");
1:             args.append(",?");
1:         }
1:         args.append(",?");
1:         vals.add("value");
1:         table.append(", v text, PRIMARY KEY ((a)").append(cols).append("))");
1:         createTable(table.toString());
1: 
1:         execute("INSERT INTO %s (a" + cols + ", v) VALUES (" + args+ ")", vals.toArray());
1:         flush();
1:         UntypedResultSet.Row row = execute("SELECT * FROM %s").one();
1:         for (int i = 0 ; i < row.getColumns().size() ; i++)
1:             Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"));
1:     }
1: 
1: }
============================================================================