1:2385dc2: /*
1:2385dc2:  * Licensed to the Apache Software Foundation (ASF) under one
1:2385dc2:  * or more contributor license agreements.  See the NOTICE file
1:2385dc2:  * distributed with this work for additional information
1:2385dc2:  * regarding copyright ownership.  The ASF licenses this file
1:2385dc2:  * to you under the Apache License, Version 2.0 (the
1:2385dc2:  * "License"); you may not use this file except in compliance
1:2385dc2:  * with the License.  You may obtain a copy of the License at
1:2385dc2:  *
1:2385dc2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2385dc2:  *
1:2385dc2:  * Unless required by applicable law or agreed to in writing, software
1:2385dc2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2385dc2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2385dc2:  * See the License for the specific language governing permissions and
1:2385dc2:  * limitations under the License.
1:2385dc2:  */
1:2385dc2: package org.apache.cassandra.utils;
6:2385dc2: 
1:01d26dd: import java.lang.reflect.InvocationTargetException;
1:01d26dd: import java.lang.reflect.Method;
1:01d26dd: import java.util.Arrays;
1:2385dc2: import org.junit.Test;
1:2385dc2: 
1:01d26dd: import static org.junit.Assert.assertArrayEquals;
1:8af61ac: import static org.junit.Assert.assertEquals;
1:01d26dd: import static org.junit.Assert.assertThat;
1:2385dc2: import static org.junit.Assert.assertTrue;
1:5347d72: import static org.junit.Assert.fail;
1:01d26dd: import static org.junit.matchers.JUnitMatchers.containsString;
1:2385dc2: 
1:2385dc2: public class CassandraVersionTest
1:2385dc2: {
1:2385dc2:     @Test
1:2385dc2:     public void testParsing()
1:2385dc2:     {
1:2385dc2:         CassandraVersion version;
1:2385dc2: 
1:2385dc2:         version = new CassandraVersion("1.2.3");
1:5347d72:         assertTrue(version.major == 1 && version.minor == 2 && version.patch == 3);
1:2385dc2: 
1:2385dc2:         version = new CassandraVersion("1.2.3-foo.2+Bar");
1:5347d72:         assertTrue(version.major == 1 && version.minor == 2 && version.patch == 3);
1:2385dc2: 
1:2385dc2:         // CassandraVersion can parse 4th '.' as build number
1:2385dc2:         version = new CassandraVersion("1.2.3.456");
1:5347d72:         assertTrue(version.major == 1 && version.minor == 2 && version.patch == 3);
1:5347d72: 
1:5347d72:         // support for tick-tock release
1:5347d72:         version = new CassandraVersion("3.2");
1:5347d72:         assertTrue(version.major == 3 && version.minor == 2 && version.patch == 0);
1:2385dc2:     }
1:01d26dd: 
1:2385dc2:     @Test
1:2385dc2:     public void testComparison()
1:2385dc2:     {
1:2385dc2:         CassandraVersion v1, v2;
1:01d26dd: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.2.4");
1:5347d72:         assertTrue(v1.compareTo(v2) == -1);
1:01d26dd: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.2.3");
1:5347d72:         assertTrue(v1.compareTo(v2) == 0);
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("2.0.0");
1:5347d72:         assertTrue(v1.compareTo(v2) == -1);
1:5347d72:         assertTrue(v2.compareTo(v1) == 1);
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.2.3-alpha");
1:5347d72:         assertTrue(v1.compareTo(v2) == 1);
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.2.3+foo");
1:5347d72:         assertTrue(v1.compareTo(v2) == -1);
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.2.3-alpha+foo");
1:5347d72:         assertTrue(v1.compareTo(v2) == 1);
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3-alpha+1");
1:2385dc2:         v2 = new CassandraVersion("1.2.3-alpha+2");
1:5347d72:         assertTrue(v1.compareTo(v2) == -1);
1:2385dc2:     }
1:2385dc2: 
1:2385dc2:     @Test
1:2385dc2:     public void testIsSupportedBy()
1:2385dc2:     {
1:2385dc2:         CassandraVersion v1, v2;
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("3.0.2");
1:5347d72:         assertTrue(v1.isSupportedBy(v1));
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.2.4");
1:5347d72:         assertTrue(v1.isSupportedBy(v2));
1:5347d72:         assertTrue(!v2.isSupportedBy(v1));
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("1.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.3.3");
1:5347d72:         assertTrue(v1.isSupportedBy(v2));
1:5347d72:         assertTrue(!v2.isSupportedBy(v1));
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("2.2.3");
1:2385dc2:         v2 = new CassandraVersion("1.3.3");
1:5347d72:         assertTrue(!v1.isSupportedBy(v2));
1:5347d72:         assertTrue(!v2.isSupportedBy(v1));
1:2385dc2: 
1:2385dc2:         v1 = new CassandraVersion("3.1.0");
1:2385dc2:         v2 = new CassandraVersion("3.0.1");
1:5347d72:         assertTrue(!v1.isSupportedBy(v2));
1:5347d72:         assertTrue(v2.isSupportedBy(v1));
1:8af61ac: 
1:8af61ac:         v1 = new CassandraVersion("3.7");
1:8af61ac:         v2 = new CassandraVersion("3.8");
1:8af61ac:         assertTrue(v1.isSupportedBy(v2));
1:8af61ac:         assertTrue(!v2.isSupportedBy(v1));
1:8af61ac: 
1:8af61ac:         v1 = new CassandraVersion("3.0.8");
1:8af61ac:         v2 = new CassandraVersion("3.8");
1:8af61ac:         assertTrue(v1.isSupportedBy(v2));
1:8af61ac:         assertTrue(!v2.isSupportedBy(v1));
1:8af61ac:         assertTrue(v2.isSupportedBy(v2));
1:8af61ac: 
1:8af61ac:         v1 = new CassandraVersion("3.8");
1:8af61ac:         v2 = new CassandraVersion("3.8-SNAPSHOT");
1:8af61ac:         assertTrue(v1.isSupportedBy(v2));
1:8af61ac:         assertTrue(v2.isSupportedBy(v1));
1:2385dc2:     }
1:2385dc2: 
1:2385dc2:     @Test
1:2385dc2:     public void testInvalid()
1:2385dc2:     {
1:2385dc2:         assertThrows("1.0.0a");
1:2385dc2:         assertThrows("1.a.4");
1:2385dc2:         assertThrows("1.0.0-foo&");
1:2385dc2:     }
1:2385dc2: 
1:2385dc2:     @Test
1:2385dc2:     public void testSnapshot()
1:2385dc2:     {
1:2385dc2:         CassandraVersion prev, next;
1:2385dc2: 
1:2385dc2:         prev = new CassandraVersion("2.1.5");
1:2385dc2:         next = new CassandraVersion("2.1.5.123");
1:2385dc2:         assertTrue(prev.compareTo(next) < 0);
1:01d26dd: 
1:2385dc2:         prev = next;
1:2385dc2:         next = new CassandraVersion("2.2.0-beta1-SNAPSHOT");
1:2385dc2:         assertTrue(prev.compareTo(next) < 0);
1:2385dc2: 
1:2385dc2:         prev = new CassandraVersion("2.2.0-beta1");
1:2385dc2:         next = new CassandraVersion("2.2.0-rc1-SNAPSHOT");
1:2385dc2:         assertTrue(prev.compareTo(next) < 0);
1:2385dc2: 
1:2385dc2:         prev = next;
1:2385dc2:         next = new CassandraVersion("2.2.0");
1:2385dc2:         assertTrue(prev.compareTo(next) < 0);
1:5347d72: 
1:5347d72:         prev = next;
1:5347d72:         next = new CassandraVersion("3.1");
1:5347d72:         assertTrue(prev.compareTo(next) < 0);
1:5347d72: 
1:5347d72:         prev = next;
1:5347d72:         next = new CassandraVersion("3.1.1");
1:5347d72:         assertTrue(prev.compareTo(next) < 0);
1:5347d72: 
1:5347d72:         prev = next;
1:5347d72:         next = new CassandraVersion("3.2-rc1-SNAPSHOT");
1:5347d72:         assertTrue(prev.compareTo(next) < 0);
1:5347d72: 
1:5347d72:         prev = next;
1:5347d72:         next = new CassandraVersion("3.2");
1:5347d72:         assertTrue(prev.compareTo(next) < 0);
1:2385dc2:     }
1:e0adc16: 
1:2385dc2:     private static void assertThrows(String str)
1:2385dc2:     {
1:01d26dd:         try
1:2385dc2:         {
1:2385dc2:             new CassandraVersion(str);
1:5347d72:             fail();
1:2385dc2:         }
1:2385dc2:         catch (IllegalArgumentException e) {}
1:2385dc2:     }
1:e0adc16: 
1:01d26dd:     @Test
1:01d26dd:     public void testParseIdentifiersPositive() throws Throwable
1:01d26dd:     {
1:01d26dd:         String[] result = parseIdentifiers("DUMMY", "+a.b.cde.f_g.");
1:01d26dd:         String[] expected = {"a", "b", "cde", "f_g"};
1:01d26dd:         assertArrayEquals(expected, result);
1:01d26dd:     }
1:e0adc16: 
1:01d26dd:     @Test
1:01d26dd:     public void testParseIdentifiersNegative() throws Throwable
1:01d26dd:     {
1:01d26dd:         String version = "DUMMY";
1:01d26dd:         try
1:01d26dd:         {
1:01d26dd:             parseIdentifiers(version, "+a. .b");
1:e0adc16: 
1:01d26dd:         }
1:01d26dd:         catch (IllegalArgumentException e)
1:01d26dd:         {
1:01d26dd:             assertThat(e.getMessage(), containsString(version));
1:01d26dd:         }
1:01d26dd:     }
1:01d26dd:     private static String[] parseIdentifiers(String version, String str) throws Throwable
1:01d26dd:     {
1:01d26dd:         String name = "parseIdentifiers";
1:01d26dd:         Class[] args = {String.class, String.class};
1:01d26dd:         for (Method m: CassandraVersion.class.getDeclaredMethods())
1:01d26dd:         {
1:e0adc16:             if (name.equals(m.getName()) &&
1:01d26dd:                     Arrays.equals(args, m.getParameterTypes()))
1:01d26dd:             {
1:01d26dd:                 m.setAccessible(true);
1:e0adc16:                 try
1:01d26dd:                 {
1:e0adc16:                 return (String[]) m.invoke(null, version, str);
1:01d26dd:                 } catch (InvocationTargetException e){
1:01d26dd:                     throw e.getTargetException();
1:01d26dd:                 }
1:01d26dd:             }
1:01d26dd:         }
1:01d26dd:         throw new NoSuchMethodException(CassandraVersion.class + "." + name + Arrays.toString(args));
1:01d26dd:     }
1:2385dc2: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (name.equals(m.getName()) &&
1:                 try
1:                 return (String[]) m.invoke(null, version, str);
author:Paulo Motta
-------------------------------------------------------------------------------
commit:8af61ac
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: 
1:         v1 = new CassandraVersion("3.7");
1:         v2 = new CassandraVersion("3.8");
1:         assertTrue(v1.isSupportedBy(v2));
1:         assertTrue(!v2.isSupportedBy(v1));
1: 
1:         v1 = new CassandraVersion("3.0.8");
1:         v2 = new CassandraVersion("3.8");
1:         assertTrue(v1.isSupportedBy(v2));
1:         assertTrue(!v2.isSupportedBy(v1));
1:         assertTrue(v2.isSupportedBy(v2));
1: 
1:         v1 = new CassandraVersion("3.8");
1:         v2 = new CassandraVersion("3.8-SNAPSHOT");
1:         assertTrue(v1.isSupportedBy(v2));
1:         assertTrue(v2.isSupportedBy(v1));
author:Alexander Shopov
-------------------------------------------------------------------------------
commit:01d26dd
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.util.Arrays;
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertThat;
1: import static org.junit.matchers.JUnitMatchers.containsString;
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testParseIdentifiersPositive() throws Throwable
1:     {
1:         String[] result = parseIdentifiers("DUMMY", "+a.b.cde.f_g.");
1:         String[] expected = {"a", "b", "cde", "f_g"};
1:         assertArrayEquals(expected, result);
1:     }
1:     
1:     @Test
1:     public void testParseIdentifiersNegative() throws Throwable
1:     {
1:         String version = "DUMMY";
1:         try
1:         {
1:             parseIdentifiers(version, "+a. .b");
1:             
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             assertThat(e.getMessage(), containsString(version));
1:         }
1:     }
1:     private static String[] parseIdentifiers(String version, String str) throws Throwable
1:     {
1:         String name = "parseIdentifiers";
1:         Class[] args = {String.class, String.class};
1:         for (Method m: CassandraVersion.class.getDeclaredMethods())
1:         {
0:             if (name.equals(m.getName()) && 
1:                     Arrays.equals(args, m.getParameterTypes()))
1:             {
1:                 m.setAccessible(true);
1:                 try 
1:                 {
0:                 return (String[]) m.invoke(null, version, str); 
1:                 } catch (InvocationTargetException e){
1:                     throw e.getTargetException();
1:                 }
1:             }
1:         }
1:         throw new NoSuchMethodException(CassandraVersion.class + "." + name + Arrays.toString(args));
1:     }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:5347d72
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(version.major == 1 && version.minor == 2 && version.patch == 3);
1:         assertTrue(version.major == 1 && version.minor == 2 && version.patch == 3);
1:         assertTrue(version.major == 1 && version.minor == 2 && version.patch == 3);
1: 
1:         // support for tick-tock release
1:         version = new CassandraVersion("3.2");
1:         assertTrue(version.major == 3 && version.minor == 2 && version.patch == 0);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(v1.compareTo(v2) == -1);
1:         assertTrue(v1.compareTo(v2) == 0);
1:         assertTrue(v1.compareTo(v2) == -1);
1:         assertTrue(v2.compareTo(v1) == 1);
1:         assertTrue(v1.compareTo(v2) == 1);
1:         assertTrue(v1.compareTo(v2) == -1);
1:         assertTrue(v1.compareTo(v2) == 1);
1:         assertTrue(v1.compareTo(v2) == -1);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(v1.isSupportedBy(v1));
1:         assertTrue(v1.isSupportedBy(v2));
1:         assertTrue(!v2.isSupportedBy(v1));
1:         assertTrue(v1.isSupportedBy(v2));
1:         assertTrue(!v2.isSupportedBy(v1));
1:         assertTrue(!v1.isSupportedBy(v2));
1:         assertTrue(!v2.isSupportedBy(v1));
1:         assertTrue(!v1.isSupportedBy(v2));
1:         assertTrue(v2.isSupportedBy(v1));
/////////////////////////////////////////////////////////////////////////
1: 
1:         prev = next;
1:         next = new CassandraVersion("3.1");
1:         assertTrue(prev.compareTo(next) < 0);
1: 
1:         prev = next;
1:         next = new CassandraVersion("3.1.1");
1:         assertTrue(prev.compareTo(next) < 0);
1: 
1:         prev = next;
1:         next = new CassandraVersion("3.2-rc1-SNAPSHOT");
1:         assertTrue(prev.compareTo(next) < 0);
1: 
1:         prev = next;
1:         next = new CassandraVersion("3.2");
1:         assertTrue(prev.compareTo(next) < 0);
/////////////////////////////////////////////////////////////////////////
1:             fail();
commit:2385dc2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class CassandraVersionTest
1: {
1:     @Test
1:     public void testParsing()
1:     {
1:         CassandraVersion version;
1: 
1:         version = new CassandraVersion("1.2.3");
0:         assert version.major == 1 && version.minor == 2 && version.patch == 3;
1: 
1:         version = new CassandraVersion("1.2.3-foo.2+Bar");
0:         assert version.major == 1 && version.minor == 2 && version.patch == 3;
1: 
1:         // CassandraVersion can parse 4th '.' as build number
1:         version = new CassandraVersion("1.2.3.456");
0:         assert version.major == 1 && version.minor == 2 && version.patch == 3;
1:     }
1: 
1:     @Test
1:     public void testComparison()
1:     {
1:         CassandraVersion v1, v2;
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("1.2.4");
0:         assert v1.compareTo(v2) == -1;
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("1.2.3");
0:         assert v1.compareTo(v2) == 0;
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("2.0.0");
0:         assert v1.compareTo(v2) == -1;
0:         assert v2.compareTo(v1) == 1;
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("1.2.3-alpha");
0:         assert v1.compareTo(v2) == 1;
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("1.2.3+foo");
0:         assert v1.compareTo(v2) == -1;
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("1.2.3-alpha+foo");
0:         assert v1.compareTo(v2) == 1;
1: 
1:         v1 = new CassandraVersion("1.2.3-alpha+1");
1:         v2 = new CassandraVersion("1.2.3-alpha+2");
0:         assert v1.compareTo(v2) == -1;
1:     }
1: 
1:     @Test
1:     public void testIsSupportedBy()
1:     {
1:         CassandraVersion v1, v2;
1: 
1:         v1 = new CassandraVersion("3.0.2");
0:         assert v1.isSupportedBy(v1);
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("1.2.4");
0:         assert v1.isSupportedBy(v2);
0:         assert !v2.isSupportedBy(v1);
1: 
1:         v1 = new CassandraVersion("1.2.3");
1:         v2 = new CassandraVersion("1.3.3");
0:         assert v1.isSupportedBy(v2);
0:         assert !v2.isSupportedBy(v1);
1: 
1:         v1 = new CassandraVersion("2.2.3");
1:         v2 = new CassandraVersion("1.3.3");
0:         assert !v1.isSupportedBy(v2);
0:         assert !v2.isSupportedBy(v1);
1: 
1:         v1 = new CassandraVersion("3.1.0");
1:         v2 = new CassandraVersion("3.0.1");
0:         assert !v1.isSupportedBy(v2);
0:         assert v2.isSupportedBy(v1);
1:     }
1: 
1:     @Test
1:     public void testInvalid()
1:     {
0:         assertThrows("1.0");
1:         assertThrows("1.0.0a");
1:         assertThrows("1.a.4");
1:         assertThrows("1.0.0-foo&");
1:     }
1: 
1:     @Test
1:     public void testSnapshot()
1:     {
1:         CassandraVersion prev, next;
1: 
1:         prev = new CassandraVersion("2.1.5");
1:         next = new CassandraVersion("2.1.5.123");
1:         assertTrue(prev.compareTo(next) < 0);
1: 
1:         prev = next;
1:         next = new CassandraVersion("2.2.0-beta1-SNAPSHOT");
1:         assertTrue(prev.compareTo(next) < 0);
1: 
1:         prev = new CassandraVersion("2.2.0-beta1");
1:         next = new CassandraVersion("2.2.0-rc1-SNAPSHOT");
1:         assertTrue(prev.compareTo(next) < 0);
1: 
1:         prev = next;
1:         next = new CassandraVersion("2.2.0");
1:         assertTrue(prev.compareTo(next) < 0);
1:     }
1: 
1:     private static void assertThrows(String str)
1:     {
0:         try
1:         {
1:             new CassandraVersion(str);
0:             assert false;
1:         }
1:         catch (IllegalArgumentException e) {}
1:     }
1: }
============================================================================