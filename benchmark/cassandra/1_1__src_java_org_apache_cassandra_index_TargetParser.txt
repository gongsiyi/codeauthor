1:f8e86eb: /*
1:f8e86eb:  * Licensed to the Apache Software Foundation (ASF) under one
1:f8e86eb:  * or more contributor license agreements.  See the NOTICE file
1:f8e86eb:  * distributed with this work for additional information
1:f8e86eb:  * regarding copyright ownership.  The ASF licenses this file
1:f8e86eb:  * to you under the Apache License, Version 2.0 (the
1:f8e86eb:  * "License"); you may not use this file except in compliance
1:f8e86eb:  * with the License.  You may obtain a copy of the License at
1:f8e86eb:  *
1:f8e86eb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f8e86eb:  *
1:f8e86eb:  * Unless required by applicable law or agreed to in writing, software
1:f8e86eb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f8e86eb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f8e86eb:  * See the License for the specific language governing permissions and
1:f8e86eb:  * limitations under the License.
1:f8e86eb:  */
1:f8e86eb: package org.apache.cassandra.index;
1:f8e86eb: 
1:f8e86eb: import java.util.regex.Matcher;
1:f8e86eb: import java.util.regex.Pattern;
1:f8e86eb: 
1:f8e86eb: import org.apache.commons.lang3.StringUtils;
1:f8e86eb: 
1:f8e86eb: import org.apache.cassandra.config.CFMetaData;
1:f8e86eb: import org.apache.cassandra.config.ColumnDefinition;
1:f8e86eb: import org.apache.cassandra.cql3.ColumnIdentifier;
1:f8e86eb: import org.apache.cassandra.cql3.statements.IndexTarget;
1:f8e86eb: import org.apache.cassandra.exceptions.ConfigurationException;
1:f8e86eb: import org.apache.cassandra.schema.IndexMetadata;
1:f8e86eb: import org.apache.cassandra.utils.Pair;
1:f8e86eb: 
1:f8e86eb: public class TargetParser
1:f8e86eb: {
1:f8e86eb:     private static final Pattern TARGET_REGEX = Pattern.compile("^(keys|entries|values|full)\\((.+)\\)$");
1:f8e86eb:     private static final Pattern TWO_QUOTES = Pattern.compile("\"\"");
1:f8e86eb:     private static final String QUOTE = "\"";
1:f8e86eb: 
1:f8e86eb:     public static Pair<ColumnDefinition, IndexTarget.Type> parse(CFMetaData cfm, IndexMetadata indexDef)
1:f8e86eb:     {
1:f8e86eb:         String target = indexDef.options.get("target");
1:f8e86eb:         assert target != null : String.format("No target definition found for index %s", indexDef.name);
1:f8e86eb:         Pair<ColumnDefinition, IndexTarget.Type> result = parse(cfm, target);
1:f8e86eb:         if (result == null)
1:f8e86eb:             throw new ConfigurationException(String.format("Unable to parse targets for index %s (%s)", indexDef.name, target));
1:f8e86eb:         return result;
1:f8e86eb:     }
1:f8e86eb: 
1:f8e86eb:     public static Pair<ColumnDefinition, IndexTarget.Type> parse(CFMetaData cfm, String target)
1:f8e86eb:     {
1:f8e86eb:         // if the regex matches then the target is in the form "keys(foo)", "entries(bar)" etc
1:f8e86eb:         // if not, then it must be a simple column name and implictly its type is VALUES
1:f8e86eb:         Matcher matcher = TARGET_REGEX.matcher(target);
1:f8e86eb:         String columnName;
1:f8e86eb:         IndexTarget.Type targetType;
1:f8e86eb:         if (matcher.matches())
1:f8e86eb:         {
1:f8e86eb:             targetType = IndexTarget.Type.fromString(matcher.group(1));
1:f8e86eb:             columnName = matcher.group(2);
1:f8e86eb:         }
1:f8e86eb:         else
1:f8e86eb:         {
1:f8e86eb:             columnName = target;
1:f8e86eb:             targetType = IndexTarget.Type.VALUES;
1:f8e86eb:         }
1:f8e86eb: 
1:f8e86eb:         // in the case of a quoted column name the name in the target string
1:f8e86eb:         // will be enclosed in quotes, which we need to unwrap. It may also
1:f8e86eb:         // include quote characters internally, escaped like so:
1:f8e86eb:         //      abc"def -> abc""def.
1:f8e86eb:         // Because the target string is stored in a CQL compatible form, we
1:f8e86eb:         // need to un-escape any such quotes to get the actual column name
1:f8e86eb:         if (columnName.startsWith(QUOTE))
1:f8e86eb:         {
1:f8e86eb:             columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1);
1:f8e86eb:             columnName = TWO_QUOTES.matcher(columnName).replaceAll(QUOTE);
1:f8e86eb:         }
1:f8e86eb: 
1:f8e86eb:         // if it's not a CQL table, we can't assume that the column name is utf8, so
1:f8e86eb:         // in that case we have to do a linear scan of the cfm's columns to get the matching one
1:f8e86eb:         if (cfm.isCQLTable())
1:f8e86eb:             return Pair.create(cfm.getColumnDefinition(new ColumnIdentifier(columnName, true)), targetType);
1:f8e86eb:         else
1:f8e86eb:             for (ColumnDefinition column : cfm.allColumns())
1:f8e86eb:                 if (column.name.toString().equals(columnName))
1:f8e86eb:                     return Pair.create(column, targetType);
1:f8e86eb: 
1:f8e86eb:         return null;
1:f8e86eb:     }
1:f8e86eb: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:f8e86eb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index;
1: 
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.commons.lang3.StringUtils;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.cql3.statements.IndexTarget;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.schema.IndexMetadata;
1: import org.apache.cassandra.utils.Pair;
1: 
1: public class TargetParser
1: {
1:     private static final Pattern TARGET_REGEX = Pattern.compile("^(keys|entries|values|full)\\((.+)\\)$");
1:     private static final Pattern TWO_QUOTES = Pattern.compile("\"\"");
1:     private static final String QUOTE = "\"";
1: 
1:     public static Pair<ColumnDefinition, IndexTarget.Type> parse(CFMetaData cfm, IndexMetadata indexDef)
1:     {
1:         String target = indexDef.options.get("target");
1:         assert target != null : String.format("No target definition found for index %s", indexDef.name);
1:         Pair<ColumnDefinition, IndexTarget.Type> result = parse(cfm, target);
1:         if (result == null)
1:             throw new ConfigurationException(String.format("Unable to parse targets for index %s (%s)", indexDef.name, target));
1:         return result;
1:     }
1: 
1:     public static Pair<ColumnDefinition, IndexTarget.Type> parse(CFMetaData cfm, String target)
1:     {
1:         // if the regex matches then the target is in the form "keys(foo)", "entries(bar)" etc
1:         // if not, then it must be a simple column name and implictly its type is VALUES
1:         Matcher matcher = TARGET_REGEX.matcher(target);
1:         String columnName;
1:         IndexTarget.Type targetType;
1:         if (matcher.matches())
1:         {
1:             targetType = IndexTarget.Type.fromString(matcher.group(1));
1:             columnName = matcher.group(2);
1:         }
1:         else
1:         {
1:             columnName = target;
1:             targetType = IndexTarget.Type.VALUES;
1:         }
1: 
1:         // in the case of a quoted column name the name in the target string
1:         // will be enclosed in quotes, which we need to unwrap. It may also
1:         // include quote characters internally, escaped like so:
1:         //      abc"def -> abc""def.
1:         // Because the target string is stored in a CQL compatible form, we
1:         // need to un-escape any such quotes to get the actual column name
1:         if (columnName.startsWith(QUOTE))
1:         {
1:             columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1);
1:             columnName = TWO_QUOTES.matcher(columnName).replaceAll(QUOTE);
1:         }
1: 
1:         // if it's not a CQL table, we can't assume that the column name is utf8, so
1:         // in that case we have to do a linear scan of the cfm's columns to get the matching one
1:         if (cfm.isCQLTable())
1:             return Pair.create(cfm.getColumnDefinition(new ColumnIdentifier(columnName, true)), targetType);
1:         else
1:             for (ColumnDefinition column : cfm.allColumns())
1:                 if (column.name.toString().equals(columnName))
1:                     return Pair.create(column, targetType);
1: 
1:         return null;
1:     }
1: }
============================================================================