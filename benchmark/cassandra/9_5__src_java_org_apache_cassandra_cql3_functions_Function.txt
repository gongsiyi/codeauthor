1:31e669a: /*
1:31e669a:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e669a:  * or more contributor license agreements.  See the NOTICE file
1:31e669a:  * distributed with this work for additional information
1:31e669a:  * regarding copyright ownership.  The ASF licenses this file
1:31e669a:  * to you under the Apache License, Version 2.0 (the
1:31e669a:  * "License"); you may not use this file except in compliance
1:31e669a:  * with the License.  You may obtain a copy of the License at
1:269c5d4:  *
1:31e669a:  *     http://www.apache.org/licenses/LICENSE-2.0
2:31e669a:  *
1:31e669a:  * Unless required by applicable law or agreed to in writing, software
1:31e669a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e669a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e669a:  * See the License for the specific language governing permissions and
1:31e669a:  * limitations under the License.
1:0cad81a:  */
1:31e669a: package org.apache.cassandra.cql3.functions;
4:31e669a: 
1:31e669a: import java.util.List;
1:cb5897f: 
1:1de8e39: import org.apache.cassandra.cql3.AssignmentTestable;
1:31e669a: import org.apache.cassandra.db.marshal.AbstractType;
1:1bb2dd9: import org.github.jamm.Unmetered;
1:b853630: 
1:1bb2dd9: @Unmetered
1:1de8e39: public interface Function extends AssignmentTestable
2:31e669a: {
1:44fa12e:     public FunctionName name();
1:44fa12e:     public List<AbstractType<?>> argTypes();
1:31e669a:     public AbstractType<?> returnType();
1:31e669a: 
1:0cad81a:     /**
1:0cad81a:      * Checks whether the function is a native/hard coded one or not.
1:0cad81a:      *
1:0cad81a:      * @return <code>true</code> if the function is a native/hard coded one, <code>false</code> otherwise.
1:0cad81a:      */
1:44fa12e:     public boolean isNative();
1:0cad81a: 
1:0cad81a:     /**
1:0cad81a:      * Checks whether the function is an aggregate function or not.
1:0cad81a:      *
1:0cad81a:      * @return <code>true</code> if the function is an aggregate function, <code>false</code> otherwise.
1:0cad81a:      */
1:0cad81a:     public boolean isAggregate();
1:e2f35c7: 
1:89464ea:     public void addFunctionsTo(List<Function> functions);
1:e2f35c7: 
1:1de8e39:     public boolean hasReferenceTo(Function function);
1:269c5d4: 
1:0cad81a:     /**
1:269c5d4:      * Returns the name of the function to use within a ResultSet.
1:0cad81a:      *
1:269c5d4:      * @param columnNames the names of the columns used to call the function
1:269c5d4:      * @return the name of the function to use within a ResultSet
1:269c5d4:      */
1:269c5d4:     public String columnName(List<String> columnNames);
2:31e669a: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4edd9ed
commit:89464ea
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions);
commit:0cad81a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Checks whether the function is a pure function (as in doesn't depend on, nor produce side effects) or not.
1:      *
0:      * @return <code>true</code> if the function is a pure function, <code>false</code> otherwise.
1:      */
1:     /**
1:      * Checks whether the function is a native/hard coded one or not.
1:      *
1:      * @return <code>true</code> if the function is a native/hard coded one, <code>false</code> otherwise.
1:      */
1: 
1:     /**
1:      * Checks whether the function is an aggregate function or not.
1:      *
1:      * @return <code>true</code> if the function is an aggregate function, <code>false</code> otherwise.
1:      */
1:     public boolean isAggregate();
author:blerer
-------------------------------------------------------------------------------
commit:269c5d4
/////////////////////////////////////////////////////////////////////////
1: 
0:     /**
1:      * Returns the name of the function to use within a ResultSet.
1:      *
1:      * @param columnNames the names of the columns used to call the function
1:      * @return the name of the function to use within a ResultSet
1:      */
1:     public String columnName(List<String> columnNames);
commit:1de8e39
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.AssignmentTestable;
1: public interface Function extends AssignmentTestable
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<Function> getFunctions();
1:     public boolean hasReferenceTo(Function function);
commit:1bb2dd9
/////////////////////////////////////////////////////////////////////////
1: import org.github.jamm.Unmetered;
1: @Unmetered
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:b2abcb7
/////////////////////////////////////////////////////////////////////////
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:d9836e0
/////////////////////////////////////////////////////////////////////////
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     Iterable<Function> getFunctions();
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e2f35c7
/////////////////////////////////////////////////////////////////////////
1: 
0:     boolean usesFunction(String ksName, String functionName);
1: 
0:     boolean hasReferenceTo(Function function);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:699a69d
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1:     public FunctionName name();
1:     public List<AbstractType<?>> argTypes();
/////////////////////////////////////////////////////////////////////////
0:     // Whether the function is a native/harcoded one.
1:     public boolean isNative();
commit:b853630
/////////////////////////////////////////////////////////////////////////
0:     // Whether the function is a pure function (as in doesn't depend on, nor produce side effects).
0:     public boolean isPure();
1: 
commit:31e669a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.cassandra.cql3.functions;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
0: public interface Function
1: {
0:     public String name();
0:     public List<AbstractType<?>> argsType();
1:     public AbstractType<?> returnType();
1: 
0:     public ByteBuffer execute(List<ByteBuffer> parameters) throws InvalidRequestException;
1: 
0:     public interface Factory
1:     {
0:         // We allow the function to be parametered by the table it is part of because the
0:         // "token" function needs it (the argument depends on the keyValidator). However,
0:         // for most function, the factory will just always the same function object (see
0:         // AbstractFunction).
0:         public Function create(String ksName, String cfName);
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0:         // We allow the function to be parametered by the keyspace it is part of because the
============================================================================