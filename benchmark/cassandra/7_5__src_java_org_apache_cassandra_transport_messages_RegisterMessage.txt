1:f199fa3: /*
1:f199fa3:  * Licensed to the Apache Software Foundation (ASF) under one
1:f199fa3:  * or more contributor license agreements.  See the NOTICE file
1:f199fa3:  * distributed with this work for additional information
1:f199fa3:  * regarding copyright ownership.  The ASF licenses this file
1:f199fa3:  * to you under the Apache License, Version 2.0 (the
1:f199fa3:  * "License"); you may not use this file except in compliance
1:f199fa3:  * with the License.  You may obtain a copy of the License at
1:f199fa3:  *
1:f199fa3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f199fa3:  *
1:f199fa3:  * Unless required by applicable law or agreed to in writing, software
1:f199fa3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f199fa3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f199fa3:  * See the License for the specific language governing permissions and
1:f199fa3:  * limitations under the License.
1:f199fa3:  */
1:f199fa3: package org.apache.cassandra.transport.messages;
2:f199fa3: 
1:f199fa3: import java.util.ArrayList;
1:f199fa3: import java.util.List;
1:f199fa3: 
1:cbf304e: import io.netty.buffer.ByteBuf;
1:f199fa3: 
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:f199fa3: import org.apache.cassandra.transport.*;
1:f199fa3: 
1:f199fa3: public class RegisterMessage extends Message.Request
2:f199fa3: {
1:f199fa3:     public static final Message.Codec<RegisterMessage> codec = new Message.Codec<RegisterMessage>()
1:f199fa3:     {
1:e0adc16:         public RegisterMessage decode(ByteBuf body, ProtocolVersion version)
1:f199fa3:         {
1:e27a955:             int length = body.readUnsignedShort();
1:f6217ae:             List<Event.Type> eventTypes = new ArrayList<>(length);
1:e27a955:             for (int i = 0; i < length; ++i)
1:e27a955:                 eventTypes.add(CBUtil.readEnumValue(Event.Type.class, body));
1:f199fa3:             return new RegisterMessage(eventTypes);
2:f199fa3:         }
1:f199fa3: 
1:e0adc16:         public void encode(RegisterMessage msg, ByteBuf dest, ProtocolVersion version)
1:f199fa3:         {
1:f8be23a:             dest.writeShort(msg.eventTypes.size());
1:e27a955:             for (Event.Type type : msg.eventTypes)
1:f8be23a:                 CBUtil.writeEnumValue(type, dest);
1:f8be23a:         }
1:f8be23a: 
1:e0adc16:         public int encodedSize(RegisterMessage msg, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:             int size = 2;
1:f8be23a:             for (Event.Type type : msg.eventTypes)
1:06dc4d0:                 size += CBUtil.sizeOfEnumValue(type);
1:f8be23a:             return size;
1:f199fa3:         }
1:f199fa3:     };
1:f199fa3: 
1:f199fa3:     public final List<Event.Type> eventTypes;
1:f199fa3: 
1:f199fa3:     public RegisterMessage(List<Event.Type> eventTypes)
1:f199fa3:     {
1:f199fa3:         super(Message.Type.REGISTER);
1:f199fa3:         this.eventTypes = eventTypes;
1:f199fa3:     }
1:f199fa3: 
1:aa83c94:     public Response execute(QueryState state, long queryStartNanoTime)
1:f199fa3:     {
1:f199fa3:         assert connection instanceof ServerConnection;
1:f6217ae:         Connection.Tracker tracker = connection.getTracker();
1:f199fa3:         assert tracker instanceof Server.ConnectionTracker;
1:f199fa3:         for (Event.Type type : eventTypes)
1:f6217ae:         {
1:e0adc16:             if (type.minimumVersion.isGreaterThan(connection.getVersion()))
1:f6217ae:                 throw new ProtocolException("Event " + type.name() + " not valid for protocol version " + connection.getVersion());
1:f6217ae:             ((Server.ConnectionTracker) tracker).register(type, connection().channel());
1:f6217ae:         }
1:f199fa3:         return new ReadyMessage();
1:f199fa3:     }
1:f199fa3: 
1:f199fa3:     @Override
1:f199fa3:     public String toString()
1:f199fa3:     {
1:f199fa3:         return "REGISTER " + eventTypes;
1:f199fa3:     }
1:f199fa3: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:         public RegisterMessage decode(ByteBuf body, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:         public void encode(RegisterMessage msg, ByteBuf dest, ProtocolVersion version)
1:         public int encodedSize(RegisterMessage msg, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:             if (type.minimumVersion.isGreaterThan(connection.getVersion()))
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public Response execute(QueryState state, long queryStartNanoTime)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:f6217ae
/////////////////////////////////////////////////////////////////////////
1:             List<Event.Type> eventTypes = new ArrayList<>(length);
/////////////////////////////////////////////////////////////////////////
1:         Connection.Tracker tracker = connection.getTracker();
1:         {
0:             if (type.minimumVersion > connection.getVersion())
1:                 throw new ProtocolException("Event " + type.name() + " not valid for protocol version " + connection.getVersion());
1:             ((Server.ConnectionTracker) tracker).register(type, connection().channel());
1:         }
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public RegisterMessage decode(ByteBuf body, int version)
/////////////////////////////////////////////////////////////////////////
0:         public void encode(RegisterMessage msg, ByteBuf dest, int version)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:06dc4d0
/////////////////////////////////////////////////////////////////////////
1:                 size += CBUtil.sizeOfEnumValue(type);
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
0:         public void encode(RegisterMessage msg, ChannelBuffer dest, int version)
1:             dest.writeShort(msg.eventTypes.size());
1:                 CBUtil.writeEnumValue(type, dest);
1:         }
1: 
0:         public int encodedSize(RegisterMessage msg, int version)
1:         {
1:             int size = 2;
1:             for (Event.Type type : msg.eventTypes)
0:                 CBUtil.sizeOfEnumValue(type);
1:             return size;
/////////////////////////////////////////////////////////////////////////
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:         public ChannelBuffer encode(RegisterMessage msg, int version)
/////////////////////////////////////////////////////////////////////////
0:         return codec.encode(this, getVersion());
commit:e27a955
/////////////////////////////////////////////////////////////////////////
1:             int length = body.readUnsignedShort();
0:             List<Event.Type> eventTypes = new ArrayList<Event.Type>(length);
1:             for (int i = 0; i < length; ++i)
1:                 eventTypes.add(CBUtil.readEnumValue(Event.Type.class, body));
0:             cb.writeShort(msg.eventTypes.size());
1:             for (Event.Type type : msg.eventTypes)
0:                 cb.writeBytes(CBUtil.enumValueToCB(type));
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.QueryState;
/////////////////////////////////////////////////////////////////////////
0:     public Response execute(QueryState state)
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.jboss.netty.buffer.ChannelBuffer;
0: import org.jboss.netty.buffer.ChannelBuffers;
1: 
1: import org.apache.cassandra.transport.*;
1: 
1: public class RegisterMessage extends Message.Request
1: {
1:     public static final Message.Codec<RegisterMessage> codec = new Message.Codec<RegisterMessage>()
1:     {
0:         public RegisterMessage decode(ChannelBuffer body)
1:         {
0:             List<String> l = CBUtil.readStringList(body);
0:             List<Event.Type> eventTypes = new ArrayList<Event.Type>(l.size());
0:             for (String s : l)
0:                 eventTypes.add(Enum.valueOf(Event.Type.class, s.toUpperCase()));
1:             return new RegisterMessage(eventTypes);
1:         }
1: 
0:         public ChannelBuffer encode(RegisterMessage msg)
1:         {
0:             List<String> l = new ArrayList<String>(msg.eventTypes.size());
0:             for (Event.Type type : msg.eventTypes)
0:                 l.add(type.toString());
0:             ChannelBuffer cb = ChannelBuffers.dynamicBuffer();
0:             CBUtil.writeStringList(cb, l);
0:             return cb;
1:         }
1:     };
1: 
1:     public final List<Event.Type> eventTypes;
1: 
1:     public RegisterMessage(List<Event.Type> eventTypes)
1:     {
1:         super(Message.Type.REGISTER);
1:         this.eventTypes = eventTypes;
1:     }
1: 
0:     public Response execute()
1:     {
1:         assert connection instanceof ServerConnection;
0:         Connection.Tracker tracker = ((ServerConnection)connection).getTracker();
1:         assert tracker instanceof Server.ConnectionTracker;
1:         for (Event.Type type : eventTypes)
0:             ((Server.ConnectionTracker)tracker).register(type, connection().channel());
1:         return new ReadyMessage();
1:     }
1: 
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "REGISTER " + eventTypes;
1:     }
1: }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:bf2ee04
/////////////////////////////////////////////////////////////////////////
0:         public RegisterMessage decode(ChannelBuffer body, int version)
============================================================================