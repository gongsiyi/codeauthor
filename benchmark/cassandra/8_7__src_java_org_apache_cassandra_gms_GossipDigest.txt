1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
1:066ef58:  */
1:066ef58: package org.apache.cassandra.gms;
4:066ef58: 
1:84eeb28: import java.io.*;
1:e98eb1c: import java.net.InetAddress;
1:066ef58: 
1:2ae5272: import org.apache.cassandra.db.TypeSizes;
1:84eeb28: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:2e1b1a5: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1:066ef58: 
2:066ef58: /**
1:7a4a709:  * Contains information about a specified list of Endpoints and the largest version
1:066ef58:  * of the state they have generated as known by the local endpoint.
1:066ef58:  */
1:066ef58: public class GossipDigest implements Comparable<GossipDigest>
3:066ef58: {
1:587cb58:     public static final IVersionedSerializer<GossipDigest> serializer = new GossipDigestSerializer();
1:066ef58: 
1:5a6e2b0:     final InetAddress endpoint;
1:5a6e2b0:     final int generation;
1:5a6e2b0:     final int maxVersion;
1:066ef58: 
1:0a03819:     GossipDigest(InetAddress ep, int gen, int version)
1:066ef58:     {
1:0a03819:         endpoint = ep;
1:0a03819:         generation = gen;
1:0a03819:         maxVersion = version;
3:066ef58:     }
1:066ef58: 
1:18b2a16:     InetAddress getEndpoint()
1:066ef58:     {
1:0a03819:         return endpoint;
1:066ef58:     }
1:066ef58: 
1:066ef58:     int getGeneration()
1:066ef58:     {
1:0a03819:         return generation;
1:066ef58:     }
1:066ef58: 
1:066ef58:     int getMaxVersion()
1:066ef58:     {
1:0a03819:         return maxVersion;
1:066ef58:     }
1:066ef58: 
1:066ef58:     public int compareTo(GossipDigest gDigest)
1:066ef58:     {
1:b207956:         if (generation != gDigest.generation)
1:b207956:             return (generation - gDigest.generation);
1:0a03819:         return (maxVersion - gDigest.maxVersion);
1:066ef58:     }
1:066ef58: 
1:066ef58:     public String toString()
1:066ef58:     {
1:066ef58:         StringBuilder sb = new StringBuilder();
1:0a03819:         sb.append(endpoint);
1:066ef58:         sb.append(":");
1:0a03819:         sb.append(generation);
1:066ef58:         sb.append(":");
1:0a03819:         sb.append(maxVersion);
1:066ef58:         return sb.toString();
1:066ef58:     }
1:066ef58: }
1:066ef58: 
1:84eeb28: class GossipDigestSerializer implements IVersionedSerializer<GossipDigest>
1:066ef58: {
1:75508ec:     public void serialize(GossipDigest gDigest, DataOutputPlus out, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         CompactEndpointSerializationHelper.serialize(gDigest.endpoint, out);
1:60d9c7f:         out.writeInt(gDigest.generation);
1:60d9c7f:         out.writeInt(gDigest.maxVersion);
1:066ef58:     }
1:066ef58: 
1:03f72ac:     public GossipDigest deserialize(DataInputPlus in, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         InetAddress endpoint = CompactEndpointSerializationHelper.deserialize(in);
1:60d9c7f:         int generation = in.readInt();
1:60d9c7f:         int maxVersion = in.readInt();
1:1ecdd7f:         return new GossipDigest(endpoint, generation, maxVersion);
1:84eeb28:     }
1:84eeb28: 
1:5b9fc26:     public long serializedSize(GossipDigest gDigest, int version)
1:84eeb28:     {
1:5b9fc26:         long size = CompactEndpointSerializationHelper.serializedSize(gDigest.endpoint);
1:03f72ac:         size += TypeSizes.sizeof(gDigest.generation);
1:03f72ac:         size += TypeSizes.sizeof(gDigest.maxVersion);
1:5b9fc26:         return size;
1:066ef58:     }
1:066ef58: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public GossipDigest deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         size += TypeSizes.sizeof(gDigest.generation);
1:         size += TypeSizes.sizeof(gDigest.maxVersion);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public void serialize(GossipDigest gDigest, DataOutputPlus out, int version) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(GossipDigest gDigest, DataOutput out, int version) throws IOException
1:         CompactEndpointSerializationHelper.serialize(gDigest.endpoint, out);
1:         out.writeInt(gDigest.generation);
1:         out.writeInt(gDigest.maxVersion);
0:     public GossipDigest deserialize(DataInput in, int version) throws IOException
1:         InetAddress endpoint = CompactEndpointSerializationHelper.deserialize(in);
1:         int generation = in.readInt();
1:         int maxVersion = in.readInt();
commit:b207956
/////////////////////////////////////////////////////////////////////////
1:         if (generation != gDigest.generation)
1:             return (generation - gDigest.generation);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         size += TypeSizes.NATIVE.sizeof(gDigest.generation);
0:         size += TypeSizes.NATIVE.sizeof(gDigest.maxVersion);
commit:5b9fc26
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:     public long serializedSize(GossipDigest gDigest, int version)
1:         long size = CompactEndpointSerializationHelper.serializedSize(gDigest.endpoint);
0:         size += DBTypeSizes.NATIVE.sizeof(gDigest.generation);
0:         size += DBTypeSizes.NATIVE.sizeof(gDigest.maxVersion);
1:         return size;
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
1: import org.apache.cassandra.io.IVersionedSerializer;
/////////////////////////////////////////////////////////////////////////
0:     private static IVersionedSerializer<GossipDigest> serializer;
/////////////////////////////////////////////////////////////////////////
0:     public static IVersionedSerializer<GossipDigest> serializer()
/////////////////////////////////////////////////////////////////////////
1: class GossipDigestSerializer implements IVersionedSerializer<GossipDigest>
0:     public void serialize(GossipDigest gDigest, DataOutput dos, int version) throws IOException
0:     public GossipDigest deserialize(DataInput dis, int version) throws IOException
1: 
0:     public long serializedSize(GossipDigest gossipDigest, int version)
1:     {
0:         throw new UnsupportedOperationException();
1:     }
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
commit:7a4a709
/////////////////////////////////////////////////////////////////////////
1:  * Contains information about a specified list of Endpoints and the largest version 
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
/////////////////////////////////////////////////////////////////////////
0:         CompactEndpointSerializationHelper.serialize(gDigest.endpoint_, dos);
0:         InetAddress endpoint = CompactEndpointSerializationHelper.deserialize(dis);
commit:18b2a16
/////////////////////////////////////////////////////////////////////////
0:     InetAddress endpoint_;
/////////////////////////////////////////////////////////////////////////
0:     GossipDigest(InetAddress endpoint, int generation, int maxVersion)
0:         endpoint_ = endpoint;
1:     InetAddress getEndpoint()
0:         return endpoint_;
/////////////////////////////////////////////////////////////////////////
0:         sb.append(endpoint_);
/////////////////////////////////////////////////////////////////////////
0:         CompactEndPointSerializationHelper.serialize(gDigest.endpoint_, dos);
0:         InetAddress endpoint = CompactEndPointSerializationHelper.deserialize(dis);
0:         return new GossipDigest(endpoint, generation, version);
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
0:     InetAddress endPoint_;
/////////////////////////////////////////////////////////////////////////
0:     GossipDigest(InetAddress endPoint, int generation, int maxVersion)
0:     InetAddress getEndPoint()
/////////////////////////////////////////////////////////////////////////
0:         InetAddress endPoint = CompactEndPointSerializationHelper.deserialize(dis);
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
1: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.CompactEndPointSerializationHelper;
0: import org.apache.cassandra.net.EndPoint;
0: import org.apache.cassandra.net.*;
1: 
1: /**
0:  * Contains information about a specified list of EndPoints and the largest version 
1:  * of the state they have generated as known by the local endpoint.
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
1: 
1: public class GossipDigest implements Comparable<GossipDigest>
1: {
0:     private static ICompactSerializer<GossipDigest> serializer_;
0:     static
1:     {
0:         serializer_ = new GossipDigestSerializer();
1:     }
1:     
0:     EndPoint endPoint_;
0:     int generation_;
0:     int maxVersion_;
1: 
0:     public static ICompactSerializer<GossipDigest> serializer()
1:     {
0:         return serializer_;
1:     }
1:     
0:     GossipDigest(EndPoint endPoint, int generation, int maxVersion)
1:     {
0:         endPoint_ = endPoint;
0:         generation_ = generation; 
0:         maxVersion_ = maxVersion;
1:     }
1:     
0:     EndPoint getEndPoint()
1:     {
0:         return endPoint_;
1:     }
1:     
1:     int getGeneration()
1:     {
0:         return generation_;
1:     }
1:     
1:     int getMaxVersion()
1:     {
0:         return maxVersion_;
1:     }
1:     
1:     public int compareTo(GossipDigest gDigest)
1:     {
0:         if ( generation_ != gDigest.generation_ )
0:             return ( generation_ - gDigest.generation_ );
0:         return (maxVersion_ - gDigest.maxVersion_);
1:     }
1:     
1:     public String toString()
1:     {
1:         StringBuilder sb = new StringBuilder();
0:         sb.append(endPoint_);
1:         sb.append(":");
0:         sb.append(generation_);
1:         sb.append(":");
0:         sb.append(maxVersion_);
1:         return sb.toString();
1:     }
1: }
1: 
0: class GossipDigestSerializer implements ICompactSerializer<GossipDigest>
1: {       
0:     public void serialize(GossipDigest gDigest, DataOutputStream dos) throws IOException
1:     {        
0:         CompactEndPointSerializationHelper.serialize(gDigest.endPoint_, dos);
0:         dos.writeInt(gDigest.generation_);
0:         dos.writeInt(gDigest.maxVersion_);
1:     }
1: 
0:     public GossipDigest deserialize(DataInputStream dis) throws IOException
1:     {
0:         EndPoint endPoint = CompactEndPointSerializationHelper.deserialize(dis);
0:         int generation = dis.readInt();
0:         int version = dis.readInt();
0:         return new GossipDigest(endPoint, generation, version);
1:     }
1: }
commit:71739ef
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:     public static final IVersionedSerializer<GossipDigest> serializer = new GossipDigestSerializer();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  * Contains information about a specified list of Endpoints and the largest version
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: {
0:     {
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  * Contains information about a specified list of Endpoints and the largest version
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: {
0:     {
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private static final IVersionedSerializer<GossipDigest> serializer;
1:     final InetAddress endpoint;
1:     final int generation;
1:     final int maxVersion;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(GossipDigest gDigest, DataOutputStream dos, int version) throws IOException
0:     public GossipDigest deserialize(DataInputStream dis, int version) throws IOException
0:         int maxVersion = dis.readInt();
1:         return new GossipDigest(endpoint, generation, maxVersion);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:0a03819
/////////////////////////////////////////////////////////////////////////
0:     private static ICompactSerializer<GossipDigest> serializer;
0:         serializer = new GossipDigestSerializer();
0:     InetAddress endpoint;
0:     int generation;
0:     int maxVersion;
0:         return serializer;
1:     GossipDigest(InetAddress ep, int gen, int version)
1:         endpoint = ep;
1:         generation = gen;
1:         maxVersion = version;
1:         return endpoint;
1:         return generation;
1:         return maxVersion;
0:         if ( generation != gDigest.generation )
0:             return ( generation - gDigest.generation );
1:         return (maxVersion - gDigest.maxVersion);
1:         sb.append(endpoint);
1:         sb.append(generation);
1:         sb.append(maxVersion);
/////////////////////////////////////////////////////////////////////////
0:         CompactEndpointSerializationHelper.serialize(gDigest.endpoint, dos);
0:         dos.writeInt(gDigest.generation);
0:         dos.writeInt(gDigest.maxVersion);
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.gms;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.CompactEndPointSerializationHelper;
0: import org.apache.cassandra.net.EndPoint;
0: import org.apache.cassandra.net.*;
0: 
0: /**
0:  * Contains information about a specified list of EndPoints and the largest version 
0:  * of the state they have generated as known by the local endpoint.
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: public class GossipDigest implements Comparable<GossipDigest>
0: {
0:     private static ICompactSerializer<GossipDigest> serializer_;
0:     static
0:     {
0:         serializer_ = new GossipDigestSerializer();
0:     }
0:     
0:     EndPoint endPoint_;
0:     int generation_;
0:     int maxVersion_;
0: 
0:     public static ICompactSerializer<GossipDigest> serializer()
0:     {
0:         return serializer_;
0:     }
0:     
0:     GossipDigest(EndPoint endPoint, int generation, int maxVersion)
0:     {
0:         endPoint_ = endPoint;
0:         generation_ = generation; 
0:         maxVersion_ = maxVersion;
0:     }
0:     
0:     EndPoint getEndPoint()
0:     {
0:         return endPoint_;
0:     }
0:     
0:     int getGeneration()
0:     {
0:         return generation_;
0:     }
0:     
0:     int getMaxVersion()
0:     {
0:         return maxVersion_;
0:     }
0:     
0:     public int compareTo(GossipDigest gDigest)
0:     {
0:         if ( generation_ != gDigest.generation_ )
0:             return ( generation_ - gDigest.generation_ );
0:         return (maxVersion_ - gDigest.maxVersion_);
0:     }
0:     
0:     public String toString()
0:     {
0:         StringBuilder sb = new StringBuilder();
0:         sb.append(endPoint_);
0:         sb.append(":");
0:         sb.append(generation_);
0:         sb.append(":");
0:         sb.append(maxVersion_);
0:         return sb.toString();
0:     }
0: }
0: 
0: class GossipDigestSerializer implements ICompactSerializer<GossipDigest>
0: {       
0:     public void serialize(GossipDigest gDigest, DataOutputStream dos) throws IOException
0:     {        
0:         CompactEndPointSerializationHelper.serialize(gDigest.endPoint_, dos);
0:         dos.writeInt(gDigest.generation_);
0:         dos.writeInt(gDigest.maxVersion_);
0:     }
0: 
0:     public GossipDigest deserialize(DataInputStream dis) throws IOException
0:     {
0:         EndPoint endPoint = CompactEndPointSerializationHelper.deserialize(dis);
0:         int generation = dis.readInt();
0:         int version = dis.readInt();
0:         return new GossipDigest(endPoint, generation, version);
0:     }
0: }
============================================================================