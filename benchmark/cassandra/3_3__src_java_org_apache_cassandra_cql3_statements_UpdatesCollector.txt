1:2e3727e: /*
1:2e3727e:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e3727e:  * or more contributor license agreements.  See the NOTICE file
1:2e3727e:  * distributed with this work for additional information
1:2e3727e:  * regarding copyright ownership.  The ASF licenses this file
1:2e3727e:  * to you under the Apache License, Version 2.0 (the
1:2e3727e:  * "License"); you may not use this file except in compliance
1:2e3727e:  * with the License.  You may obtain a copy of the License at
1:2e3727e:  *
1:2e3727e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e3727e:  *
1:2e3727e:  * Unless required by applicable law or agreed to in writing, software
1:2e3727e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e3727e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e3727e:  * See the License for the specific language governing permissions and
1:2e3727e:  * limitations under the License.
1:2e3727e:  */
1:2e3727e: package org.apache.cassandra.cql3.statements;
2:2e3727e: 
1:2e3727e: import java.nio.ByteBuffer;
1:2e3727e: import java.util.*;
1:2e3727e: 
1:2e3727e: import org.apache.cassandra.config.CFMetaData;
1:2e3727e: import org.apache.cassandra.db.*;
1:aad3ae2: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:2e3727e: 
1:2e3727e: /**
1:2e3727e:  * Utility class to collect updates.
1:2e3727e:  *
1:2e3727e:  * <p>In a batch statement we don't want to recreate mutations every time as this is particularly inefficient when
1:2e3727e:  * applying multiple batch to the same partition (see #6737). </p>
1:2e3727e:  *
1:2e3727e:  */
1:2e3727e: final class UpdatesCollector
1:2e3727e: {
1:2e3727e:     /**
1:f901a74:      * The columns that will be updated for each table (keyed by the table ID).
1:2e3727e:      */
1:f901a74:     private final Map<UUID, PartitionColumns> updatedColumns;
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * The estimated number of updated row.
1:2e3727e:      */
1:2e3727e:     private final int updatedRows;
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * The mutations per keyspace.
1:2e3727e:      */
1:2e3727e:     private final Map<String, Map<ByteBuffer, IMutation>> mutations = new HashMap<>();
1:2e3727e: 
1:f901a74:     public UpdatesCollector(Map<UUID, PartitionColumns> updatedColumns, int updatedRows)
1:2e3727e:     {
1:2e3727e:         super();
1:2e3727e:         this.updatedColumns = updatedColumns;
1:2e3727e:         this.updatedRows = updatedRows;
2:2e3727e:     }
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Gets the <code>PartitionUpdate</code> for the specified column family and key. If the update does not
1:2e3727e:      * exist it will be created.
1:2e3727e:      *
1:2e3727e:      * @param cfm the column family meta data
1:2e3727e:      * @param dk the partition key
1:2e3727e:      * @param consistency the consistency level
1:2e3727e:      * @return the <code>PartitionUpdate</code> for the specified column family and key
1:2e3727e:      */
1:2e3727e:     public PartitionUpdate getPartitionUpdate(CFMetaData cfm, DecoratedKey dk, ConsistencyLevel consistency)
1:2e3727e:     {
1:2e3727e:         Mutation mut = getMutation(cfm, dk, consistency);
1:2e3727e:         PartitionUpdate upd = mut.get(cfm);
1:2e3727e:         if (upd == null)
1:2e3727e:         {
1:f901a74:             PartitionColumns columns = updatedColumns.get(cfm.cfId);
1:f901a74:             assert columns != null;
1:f901a74:             upd = new PartitionUpdate(cfm, dk, columns, updatedRows);
1:2e3727e:             mut.add(upd);
1:2e3727e:         }
1:2e3727e:         return upd;
1:2e3727e:     }
1:2e3727e: 
1:aad3ae2:     /**
1:aad3ae2:      * Check all partition updates contain only valid values for any
1:aad3ae2:      * indexed columns.
1:aad3ae2:      */
1:aad3ae2:     public void validateIndexedColumns()
1:aad3ae2:     {
1:aad3ae2:         for (Map<ByteBuffer, IMutation> perKsMutations : mutations.values())
1:aad3ae2:             for (IMutation mutation : perKsMutations.values())
1:aad3ae2:                 for (PartitionUpdate update : mutation.getPartitionUpdates())
1:aad3ae2:                     Keyspace.openAndGetStore(update.metadata()).indexManager.validate(update);
1:aad3ae2:     }
1:aad3ae2: 
1:2e3727e:     private Mutation getMutation(CFMetaData cfm, DecoratedKey dk, ConsistencyLevel consistency)
1:2e3727e:     {
1:2e3727e:         String ksName = cfm.ksName;
1:2e3727e:         IMutation mutation = keyspaceMap(ksName).get(dk.getKey());
1:2e3727e:         if (mutation == null)
1:2e3727e:         {
1:2e3727e:             Mutation mut = new Mutation(ksName, dk);
1:2e3727e:             mutation = cfm.isCounter() ? new CounterMutation(mut, consistency) : mut;
1:2e3727e:             keyspaceMap(ksName).put(dk.getKey(), mutation);
1:2e3727e:             return mut;
1:2e3727e:         }
1:2e3727e:         return cfm.isCounter() ? ((CounterMutation) mutation).getMutation() : (Mutation) mutation;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Returns a collection containing all the mutations.
1:2e3727e:      * @return a collection containing all the mutations.
1:2e3727e:      */
1:2e3727e:     public Collection<IMutation> toMutations()
1:2e3727e:     {
1:2e3727e:         // The case where all statement where on the same keyspace is pretty common
1:2e3727e:         if (mutations.size() == 1)
1:2e3727e:             return mutations.values().iterator().next().values();
1:2e3727e: 
1:2e3727e:         List<IMutation> ms = new ArrayList<>();
1:2e3727e:         for (Map<ByteBuffer, IMutation> ksMap : mutations.values())
1:2e3727e:             ms.addAll(ksMap.values());
1:2e3727e: 
1:2e3727e:         return ms;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Returns the key-mutation mappings for the specified keyspace.
1:2e3727e:      *
1:2e3727e:      * @param ksName the keyspace name
1:2e3727e:      * @return the key-mutation mappings for the specified keyspace.
1:2e3727e:      */
1:2e3727e:     private Map<ByteBuffer, IMutation> keyspaceMap(String ksName)
1:2e3727e:     {
1:2e3727e:         Map<ByteBuffer, IMutation> ksMap = mutations.get(ksName);
1:2e3727e:         if (ksMap == null)
1:2e3727e:         {
1:2e3727e:             ksMap = new HashMap<>();
1:2e3727e:             mutations.put(ksName, ksMap);
1:2e3727e:         }
1:2e3727e:         return ksMap;
1:aad3ae2:     }
1:2e3727e: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f901a74
/////////////////////////////////////////////////////////////////////////
1:      * The columns that will be updated for each table (keyed by the table ID).
1:     private final Map<UUID, PartitionColumns> updatedColumns;
/////////////////////////////////////////////////////////////////////////
1:     public UpdatesCollector(Map<UUID, PartitionColumns> updatedColumns, int updatedRows)
/////////////////////////////////////////////////////////////////////////
1:             PartitionColumns columns = updatedColumns.get(cfm.cfId);
1:             assert columns != null;
1:             upd = new PartitionUpdate(cfm, dk, columns, updatedRows);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:aad3ae2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Check all partition updates contain only valid values for any
1:      * indexed columns.
1:      */
1:     public void validateIndexedColumns()
1:     {
1:         for (Map<ByteBuffer, IMutation> perKsMutations : mutations.values())
1:             for (IMutation mutation : perKsMutations.values())
1:                 for (PartitionUpdate update : mutation.getPartitionUpdates())
1:                     Keyspace.openAndGetStore(update.metadata()).indexManager.validate(update);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: }
author:blerer
-------------------------------------------------------------------------------
commit:2e3727e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
0: import org.apache.cassandra.db.CounterMutation;
1: 
0: import org.apache.cassandra.db.Mutation;
0: import org.apache.cassandra.db.partitions.PartitionUpdate;
0: import org.apache.cassandra.db.PartitionColumns;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * Utility class to collect updates.
1:  *
1:  * <p>In a batch statement we don't want to recreate mutations every time as this is particularly inefficient when
1:  * applying multiple batch to the same partition (see #6737). </p>
1:  *
1:  */
1: final class UpdatesCollector
1: {
1:     /**
0:      * The columns that will be updated.
1:      */
0:     private final PartitionColumns updatedColumns;
1: 
1:     /**
1:      * The estimated number of updated row.
1:      */
1:     private final int updatedRows;
1: 
1:     /**
1:      * The mutations per keyspace.
1:      */
1:     private final Map<String, Map<ByteBuffer, IMutation>> mutations = new HashMap<>();
1: 
0:     public UpdatesCollector(PartitionColumns updatedColumns, int updatedRows)
1:     {
1:         super();
1:         this.updatedColumns = updatedColumns;
1:         this.updatedRows = updatedRows;
1:     }
1: 
1:     /**
1:      * Gets the <code>PartitionUpdate</code> for the specified column family and key. If the update does not
1:      * exist it will be created.
1:      *
1:      * @param cfm the column family meta data
1:      * @param dk the partition key
1:      * @param consistency the consistency level
1:      * @return the <code>PartitionUpdate</code> for the specified column family and key
1:      */
1:     public PartitionUpdate getPartitionUpdate(CFMetaData cfm, DecoratedKey dk, ConsistencyLevel consistency)
1:     {
1:         Mutation mut = getMutation(cfm, dk, consistency);
1:         PartitionUpdate upd = mut.get(cfm);
1:         if (upd == null)
1:         {
0:             upd = new PartitionUpdate(cfm, dk, updatedColumns, updatedRows);
1:             mut.add(upd);
1:         }
1:         return upd;
1:     }
1: 
1:     private Mutation getMutation(CFMetaData cfm, DecoratedKey dk, ConsistencyLevel consistency)
1:     {
1:         String ksName = cfm.ksName;
1:         IMutation mutation = keyspaceMap(ksName).get(dk.getKey());
1:         if (mutation == null)
1:         {
1:             Mutation mut = new Mutation(ksName, dk);
1:             mutation = cfm.isCounter() ? new CounterMutation(mut, consistency) : mut;
1:             keyspaceMap(ksName).put(dk.getKey(), mutation);
1:             return mut;
1:         }
1:         return cfm.isCounter() ? ((CounterMutation) mutation).getMutation() : (Mutation) mutation;
1:     }
1: 
1:     /**
1:      * Returns a collection containing all the mutations.
1:      * @return a collection containing all the mutations.
1:      */
1:     public Collection<IMutation> toMutations()
1:     {
1:         // The case where all statement where on the same keyspace is pretty common
1:         if (mutations.size() == 1)
1:             return mutations.values().iterator().next().values();
1: 
1:         List<IMutation> ms = new ArrayList<>();
1:         for (Map<ByteBuffer, IMutation> ksMap : mutations.values())
1:             ms.addAll(ksMap.values());
1: 
1:         return ms;
1:     }
1: 
1:     /**
1:      * Returns the key-mutation mappings for the specified keyspace.
1:      *
1:      * @param ksName the keyspace name
1:      * @return the key-mutation mappings for the specified keyspace.
1:      */
1:     private Map<ByteBuffer, IMutation> keyspaceMap(String ksName)
1:     {
1:         Map<ByteBuffer, IMutation> ksMap = mutations.get(ksName);
1:         if (ksMap == null)
1:         {
1:             ksMap = new HashMap<>();
1:             mutations.put(ksName, ksMap);
1:         }
1:         return ksMap;
1:     }
1: }
============================================================================