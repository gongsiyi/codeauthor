1:765ab3f: /*
1:765ab3f:  * Licensed to the Apache Software Foundation (ASF) under one
1:765ab3f:  * or more contributor license agreements.  See the NOTICE file
1:765ab3f:  * distributed with this work for additional information
1:765ab3f:  * regarding copyright ownership.  The ASF licenses this file
1:765ab3f:  * to you under the Apache License, Version 2.0 (the
1:765ab3f:  * "License"); you may not use this file except in compliance
1:765ab3f:  * with the License.  You may obtain a copy of the License at
1:765ab3f:  *
1:765ab3f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:765ab3f:  *
1:765ab3f:  * Unless required by applicable law or agreed to in writing, software
1:765ab3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:765ab3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:765ab3f:  * See the License for the specific language governing permissions and
1:765ab3f:  * limitations under the License.
1:765ab3f:  */
1:765ab3f: package org.apache.cassandra.security;
1:765ab3f: 
1:765ab3f: import java.io.IOException;
1:765ab3f: 
1:765ab3f: import org.junit.Assert;
1:765ab3f: import org.junit.Before;
1:765ab3f: import org.junit.Test;
1:765ab3f: 
1:765ab3f: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1:765ab3f: 
1:765ab3f: public class JKSKeyProviderTest
1:765ab3f: {
1:765ab3f:     JKSKeyProvider jksKeyProvider;
1:765ab3f:     TransparentDataEncryptionOptions tdeOptions;
1:765ab3f: 
1:765ab3f:     @Before
1:765ab3f:     public void setup()
1:765ab3f:     {
1:765ab3f:         tdeOptions = EncryptionContextGenerator.createEncryptionOptions();
1:765ab3f:         jksKeyProvider = new JKSKeyProvider(tdeOptions);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     @Test
1:765ab3f:     public void getSecretKey_WithKeyPassword() throws IOException
1:765ab3f:     {
1:765ab3f:         Assert.assertNotNull(jksKeyProvider.getSecretKey(tdeOptions.key_alias));
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     @Test
1:765ab3f:     public void getSecretKey_WithoutKeyPassword() throws IOException
1:765ab3f:     {
1:765ab3f:         tdeOptions.remove("key_password");
1:765ab3f:         Assert.assertNotNull(jksKeyProvider.getSecretKey(tdeOptions.key_alias));
1:765ab3f:     }
1:765ab3f: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ef59624
/////////////////////////////////////////////////////////////////////////
author:Jason Brown
-------------------------------------------------------------------------------
commit:765ab3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.security;
1: 
1: import java.io.IOException;
1: 
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1: 
1: public class JKSKeyProviderTest
1: {
1:     JKSKeyProvider jksKeyProvider;
1:     TransparentDataEncryptionOptions tdeOptions;
1: 
1:     @Before
1:     public void setup()
1:     {
1:         tdeOptions = EncryptionContextGenerator.createEncryptionOptions();
1:         jksKeyProvider = new JKSKeyProvider(tdeOptions);
1:     }
1: 
1:     @Test
1:     public void getSecretKey_WithKeyPassword() throws IOException
1:     {
1:         Assert.assertNotNull(jksKeyProvider.getSecretKey(tdeOptions.key_alias));
1:     }
1: 
1:     @Test
1:     public void getSecretKey_WithoutKeyPassword() throws IOException
1:     {
1:         tdeOptions.remove("key_password");
1:         Assert.assertNotNull(jksKeyProvider.getSecretKey(tdeOptions.key_alias));
1:     }
1: }
commit:72f5fbd
/////////////////////////////////////////////////////////////////////////
commit:37160e1
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.security;
0: 
0: import java.io.IOException;
0: 
0: import org.junit.Assert;
0: import org.junit.Before;
0: import org.junit.Test;
0: 
0: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
0: 
0: public class JKSKeyProviderTest
0: {
0:     JKSKeyProvider jksKeyProvider;
0:     TransparentDataEncryptionOptions tdeOptions;
0: 
0:     @Before
0:     public void setup()
0:     {
0:         tdeOptions = EncryptionContextGenerator.createEncryptionOptions();
0:         jksKeyProvider = new JKSKeyProvider(tdeOptions);
0:     }
0: 
0:     @Test
0:     public void getSecretKey_WithKeyPassword() throws IOException
0:     {
0:         Assert.assertNotNull(jksKeyProvider.getSecretKey(tdeOptions.key_alias));
0:     }
0: 
0:     @Test
0:     public void getSecretKey_WithoutKeyPassword() throws IOException
0:     {
0:         tdeOptions.remove("key_password");
0:         Assert.assertNotNull(jksKeyProvider.getSecretKey(tdeOptions.key_alias));
0:     }
0: }
============================================================================