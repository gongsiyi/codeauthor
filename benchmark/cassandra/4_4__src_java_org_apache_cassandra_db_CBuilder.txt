1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
1:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.util.Arrays;
1:a991b64: import java.util.List;
1:a991b64: 
1:a991b64: import org.apache.cassandra.db.marshal.AbstractType;
1:a991b64: 
1:a991b64: /**
1:2cc26eb:  * Allows to build ClusteringPrefixes, either Clustering or ClusteringBound.
1:a991b64:  */
1:a991b64: public abstract class CBuilder
1:a991b64: {
1:a991b64:     public static CBuilder STATIC_BUILDER = new CBuilder()
1:a991b64:     {
1:a991b64:         public int count()
1:a991b64:         {
1:a991b64:             return 0;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public int remainingCount()
1:a991b64:         {
1:a991b64:             return 0;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public ClusteringComparator comparator()
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public CBuilder add(ByteBuffer value)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public CBuilder add(Object value)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Clustering build()
1:a991b64:         {
1:a991b64:             return Clustering.STATIC_CLUSTERING;
1:a991b64:         }
1:a991b64: 
1:2cc26eb:         public ClusteringBound buildBound(boolean isStart, boolean isInclusive)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Slice buildSlice()
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Clustering buildWith(ByteBuffer value)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Clustering buildWith(List<ByteBuffer> newValues)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:2cc26eb:         public ClusteringBound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64: 
1:2cc26eb:         public ClusteringBound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:a991b64:         }
1:a991b64:     };
1:a991b64: 
1:a991b64:     public static CBuilder create(ClusteringComparator comparator)
1:a991b64:     {
1:a991b64:         return new ArrayBackedBuilder(comparator);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public abstract int count();
1:a991b64:     public abstract int remainingCount();
1:a991b64:     public abstract ClusteringComparator comparator();
1:a991b64:     public abstract CBuilder add(ByteBuffer value);
1:a991b64:     public abstract CBuilder add(Object value);
1:a991b64:     public abstract Clustering build();
1:2cc26eb:     public abstract ClusteringBound buildBound(boolean isStart, boolean isInclusive);
1:a991b64:     public abstract Slice buildSlice();
1:a991b64:     public abstract Clustering buildWith(ByteBuffer value);
1:a991b64:     public abstract Clustering buildWith(List<ByteBuffer> newValues);
1:2cc26eb:     public abstract ClusteringBound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive);
1:2cc26eb:     public abstract ClusteringBound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive);
1:a991b64: 
1:a991b64:     private static class ArrayBackedBuilder extends CBuilder
1:a991b64:     {
1:a991b64:         private final ClusteringComparator type;
1:a991b64:         private final ByteBuffer[] values;
1:a991b64:         private int size;
1:a991b64:         private boolean built;
1:a991b64: 
1:a991b64:         public ArrayBackedBuilder(ClusteringComparator type)
1:a991b64:         {
1:a991b64:             this.type = type;
1:a991b64:             this.values = new ByteBuffer[type.size()];
1:a991b64:         }
1:a991b64: 
1:a991b64:         public int count()
1:a991b64:         {
1:a991b64:             return size;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public int remainingCount()
1:a991b64:         {
1:a991b64:             return values.length - size;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public ClusteringComparator comparator()
1:a991b64:         {
1:a991b64:             return type;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public CBuilder add(ByteBuffer value)
1:a991b64:         {
1:a991b64:             if (isDone())
1:a991b64:                 throw new IllegalStateException();
1:a991b64:             values[size++] = value;
1:a991b64:             return this;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public CBuilder add(Object value)
1:a991b64:         {
1:a991b64:             return add(((AbstractType)type.subtype(size)).decompose(value));
1:a991b64:         }
1:a991b64: 
1:a991b64:         private boolean isDone()
1:a991b64:         {
1:a991b64:             return remainingCount() == 0 || built;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Clustering build()
1:a991b64:         {
1:a991b64:             // We don't allow to add more element to a builder that has been built so
1:a991b64:             // that we don't have to copy values.
1:a991b64:             built = true;
1:a991b64: 
1:a991b64:             // Currently, only dense table can leave some clustering column out (see #7990)
1:2f41243:             return size == 0 ? Clustering.EMPTY : Clustering.make(values);
1:a991b64:         }
1:a991b64: 
1:2cc26eb:         public ClusteringBound buildBound(boolean isStart, boolean isInclusive)
1:a991b64:         {
1:a991b64:             // We don't allow to add more element to a builder that has been built so
1:a991b64:             // that we don't have to copy values (even though we have to do it in most cases).
1:a991b64:             built = true;
1:a991b64: 
1:a991b64:             if (size == 0)
1:2cc26eb:                 return isStart ? ClusteringBound.BOTTOM : ClusteringBound.TOP;
1:a991b64: 
1:2cc26eb:             return ClusteringBound.create(ClusteringBound.boundKind(isStart, isInclusive),
1:2cc26eb:                                 size == values.length ? values : Arrays.copyOfRange(values, 0, size));
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Slice buildSlice()
1:a991b64:         {
1:a991b64:             // We don't allow to add more element to a builder that has been built so
1:a991b64:             // that we don't have to copy values.
1:a991b64:             built = true;
1:a991b64: 
1:a991b64:             if (size == 0)
1:a991b64:                 return Slice.ALL;
1:a991b64: 
1:a991b64:             return Slice.make(buildBound(true, true), buildBound(false, true));
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Clustering buildWith(ByteBuffer value)
1:a991b64:         {
1:2e3727e:             assert size+1 <= type.size();
1:a991b64: 
1:2e3727e:             ByteBuffer[] newValues = Arrays.copyOf(values, type.size());
1:a991b64:             newValues[size] = value;
1:2f41243:             return Clustering.make(newValues);
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Clustering buildWith(List<ByteBuffer> newValues)
1:a991b64:         {
1:2e3727e:             assert size + newValues.size() <= type.size();
1:2e3727e:             ByteBuffer[] buffers = Arrays.copyOf(values, type.size());
1:a991b64:             int newSize = size;
1:a991b64:             for (ByteBuffer value : newValues)
1:a991b64:                 buffers[newSize++] = value;
1:a991b64: 
1:2f41243:             return Clustering.make(buffers);
1:a991b64:         }
1:a991b64: 
1:2cc26eb:         public ClusteringBound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive)
1:a991b64:         {
2:a991b64:             ByteBuffer[] newValues = Arrays.copyOf(values, size+1);
1:a991b64:             newValues[size] = value;
1:2cc26eb:             return ClusteringBound.create(ClusteringBound.boundKind(isStart, isInclusive), newValues);
1:a991b64:         }
1:a991b64: 
1:2cc26eb:         public ClusteringBound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive)
1:a991b64:         {
2:a991b64:             ByteBuffer[] buffers = Arrays.copyOf(values, size + newValues.size());
1:a991b64:             int newSize = size;
1:a991b64:             for (ByteBuffer value : newValues)
1:a991b64:                 buffers[newSize++] = value;
1:a991b64: 
1:2cc26eb:             return ClusteringBound.create(ClusteringBound.boundKind(isStart, isInclusive), buffers);
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:2cc26eb
/////////////////////////////////////////////////////////////////////////
1:  * Allows to build ClusteringPrefixes, either Clustering or ClusteringBound.
/////////////////////////////////////////////////////////////////////////
1:         public ClusteringBound buildBound(boolean isStart, boolean isInclusive)
/////////////////////////////////////////////////////////////////////////
1:         public ClusteringBound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive)
1:         public ClusteringBound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive)
/////////////////////////////////////////////////////////////////////////
1:     public abstract ClusteringBound buildBound(boolean isStart, boolean isInclusive);
1:     public abstract ClusteringBound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive);
1:     public abstract ClusteringBound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive);
/////////////////////////////////////////////////////////////////////////
1:         public ClusteringBound buildBound(boolean isStart, boolean isInclusive)
1:                 return isStart ? ClusteringBound.BOTTOM : ClusteringBound.TOP;
1:             return ClusteringBound.create(ClusteringBound.boundKind(isStart, isInclusive),
1:                                 size == values.length ? values : Arrays.copyOfRange(values, 0, size));
/////////////////////////////////////////////////////////////////////////
1:         public ClusteringBound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive)
1:             return ClusteringBound.create(ClusteringBound.boundKind(isStart, isInclusive), newValues);
1:         public ClusteringBound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive)
1:             return ClusteringBound.create(ClusteringBound.boundKind(isStart, isInclusive), buffers);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1:             return size == 0 ? Clustering.EMPTY : Clustering.make(values);
/////////////////////////////////////////////////////////////////////////
1:             return Clustering.make(newValues);
/////////////////////////////////////////////////////////////////////////
1:             return Clustering.make(buffers);
author:blerer
-------------------------------------------------------------------------------
commit:2e3727e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             assert size+1 <= type.size();
1:             ByteBuffer[] newValues = Arrays.copyOf(values, type.size());
1:             assert size + newValues.size() <= type.size();
1:             ByteBuffer[] buffers = Arrays.copyOf(values, type.size());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
0:             return size == 0 ? Clustering.EMPTY : new Clustering(values);
/////////////////////////////////////////////////////////////////////////
0:             return new Clustering(newValues);
/////////////////////////////////////////////////////////////////////////
0:             return new Clustering(buffers);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: /**
0:  * Allows to build ClusteringPrefixes, either Clustering or Slice.Bound.
1:  */
1: public abstract class CBuilder
1: {
1:     public static CBuilder STATIC_BUILDER = new CBuilder()
1:     {
1:         public int count()
1:         {
1:             return 0;
1:         }
1: 
1:         public int remainingCount()
1:         {
1:             return 0;
1:         }
1: 
1:         public ClusteringComparator comparator()
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public CBuilder add(ByteBuffer value)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public CBuilder add(Object value)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public Clustering build()
1:         {
1:             return Clustering.STATIC_CLUSTERING;
1:         }
1: 
0:         public Slice.Bound buildBound(boolean isStart, boolean isInclusive)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public Slice buildSlice()
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public Clustering buildWith(ByteBuffer value)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public Clustering buildWith(List<ByteBuffer> newValues)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
0:         public Slice.Bound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
0:         public Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1:     };
1: 
1:     public static CBuilder create(ClusteringComparator comparator)
1:     {
1:         return new ArrayBackedBuilder(comparator);
1:     }
1: 
1:     public abstract int count();
1:     public abstract int remainingCount();
1:     public abstract ClusteringComparator comparator();
1:     public abstract CBuilder add(ByteBuffer value);
1:     public abstract CBuilder add(Object value);
1:     public abstract Clustering build();
0:     public abstract Slice.Bound buildBound(boolean isStart, boolean isInclusive);
1:     public abstract Slice buildSlice();
1:     public abstract Clustering buildWith(ByteBuffer value);
1:     public abstract Clustering buildWith(List<ByteBuffer> newValues);
0:     public abstract Slice.Bound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive);
0:     public abstract Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive);
1: 
1:     private static class ArrayBackedBuilder extends CBuilder
1:     {
1:         private final ClusteringComparator type;
1:         private final ByteBuffer[] values;
1:         private int size;
1:         private boolean built;
1: 
1:         public ArrayBackedBuilder(ClusteringComparator type)
1:         {
1:             this.type = type;
1:             this.values = new ByteBuffer[type.size()];
1:         }
1: 
1:         public int count()
1:         {
1:             return size;
1:         }
1: 
1:         public int remainingCount()
1:         {
1:             return values.length - size;
1:         }
1: 
1:         public ClusteringComparator comparator()
1:         {
1:             return type;
1:         }
1: 
1:         public CBuilder add(ByteBuffer value)
1:         {
1:             if (isDone())
1:                 throw new IllegalStateException();
1:             values[size++] = value;
1:             return this;
1:         }
1: 
1:         public CBuilder add(Object value)
1:         {
1:             return add(((AbstractType)type.subtype(size)).decompose(value));
1:         }
1: 
1:         private boolean isDone()
1:         {
1:             return remainingCount() == 0 || built;
1:         }
1: 
1:         public Clustering build()
1:         {
1:             // We don't allow to add more element to a builder that has been built so
1:             // that we don't have to copy values.
1:             built = true;
1: 
1:             // Currently, only dense table can leave some clustering column out (see #7990)
0:             return size == 0 ? Clustering.EMPTY : new SimpleClustering(values);
1:         }
1: 
0:         public Slice.Bound buildBound(boolean isStart, boolean isInclusive)
1:         {
1:             // We don't allow to add more element to a builder that has been built so
1:             // that we don't have to copy values (even though we have to do it in most cases).
1:             built = true;
1: 
1:             if (size == 0)
0:                 return isStart ? Slice.Bound.BOTTOM : Slice.Bound.TOP;
1: 
0:             return Slice.Bound.create(Slice.Bound.boundKind(isStart, isInclusive),
0:                                       size == values.length ? values : Arrays.copyOfRange(values, 0, size));
1:         }
1: 
1:         public Slice buildSlice()
1:         {
1:             // We don't allow to add more element to a builder that has been built so
1:             // that we don't have to copy values.
1:             built = true;
1: 
1:             if (size == 0)
1:                 return Slice.ALL;
1: 
1:             return Slice.make(buildBound(true, true), buildBound(false, true));
1:         }
1: 
1:         public Clustering buildWith(ByteBuffer value)
1:         {
0:             assert size+1 == type.size();
1: 
1:             ByteBuffer[] newValues = Arrays.copyOf(values, size+1);
1:             newValues[size] = value;
0:             return new SimpleClustering(newValues);
1:         }
1: 
1:         public Clustering buildWith(List<ByteBuffer> newValues)
1:         {
0:             assert size + newValues.size() == type.size();
1:             ByteBuffer[] buffers = Arrays.copyOf(values, size + newValues.size());
1:             int newSize = size;
1:             for (ByteBuffer value : newValues)
1:                 buffers[newSize++] = value;
1: 
0:             return new SimpleClustering(buffers);
1:         }
1: 
0:         public Slice.Bound buildBoundWith(ByteBuffer value, boolean isStart, boolean isInclusive)
1:         {
1:             ByteBuffer[] newValues = Arrays.copyOf(values, size+1);
1:             newValues[size] = value;
0:             return Slice.Bound.create(Slice.Bound.boundKind(isStart, isInclusive), newValues);
1:         }
1: 
0:         public Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive)
1:         {
1:             ByteBuffer[] buffers = Arrays.copyOf(values, size + newValues.size());
1:             int newSize = size;
1:             for (ByteBuffer value : newValues)
1:                 buffers[newSize++] = value;
1: 
0:             return Slice.Bound.create(Slice.Bound.boundKind(isStart, isInclusive), buffers);
1:         }
1:     }
1: }
============================================================================