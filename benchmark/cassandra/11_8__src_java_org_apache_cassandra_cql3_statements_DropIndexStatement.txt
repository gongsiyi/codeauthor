1:655ccc3: /*
1:655ccc3:  * Licensed to the Apache Software Foundation (ASF) under one
1:655ccc3:  * or more contributor license agreements.  See the NOTICE file
1:655ccc3:  * distributed with this work for additional information
1:655ccc3:  * regarding copyright ownership.  The ASF licenses this file
1:655ccc3:  * to you under the Apache License, Version 2.0 (the
1:655ccc3:  * "License"); you may not use this file except in compliance
1:655ccc3:  * with the License.  You may obtain a copy of the License at
1:655ccc3:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:655ccc3:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:655ccc3:  */
1:655ccc3: package org.apache.cassandra.cql3.statements;
10:655ccc3: 
1:bcec7a5: import org.apache.cassandra.auth.Permission;
1:bcec7a5: import org.apache.cassandra.config.CFMetaData;
1:bcec7a5: import org.apache.cassandra.config.Schema;
1:06c130e: import org.apache.cassandra.cql3.IndexName;
1:06c130e: import org.apache.cassandra.cql3.QueryOptions;
1:dceed39: import org.apache.cassandra.db.KeyspaceNotDefinedException;
1:3a2faf9: import org.apache.cassandra.exceptions.*;
1:a89597d: import org.apache.cassandra.schema.KeyspaceMetadata;
1:bcec7a5: import org.apache.cassandra.service.ClientState;
1:438acfc: import org.apache.cassandra.service.MigrationManager;
1:dceed39: import org.apache.cassandra.service.QueryState;
1:2fe6de6: import org.apache.cassandra.transport.Event;
1:11f7d72: import org.apache.cassandra.transport.messages.ResultMessage;
1:11f7d72: 
1:655ccc3: public class DropIndexStatement extends SchemaAlteringStatement
1:5a3eb1a: {
1:f58a51b:     public final String indexName;
1:b73f9d4:     public final boolean ifExists;
1:655ccc3: 
1:6a4144b:     public DropIndexStatement(IndexName indexName, boolean ifExists)
1:11f7d72:     {
1:6a4144b:         super(indexName.getCfName());
1:6a4144b:         this.indexName = indexName.getIdx();
1:b73f9d4:         this.ifExists = ifExists;
1:11f7d72:     }
1:5a3eb1a: 
1:b2a2d46:     public String columnFamily()
1:5a3eb1a:     {
1:2cbd776:         CFMetaData cfm = lookupIndexedTable();
1:2cbd776:         return cfm == null ? null : cfm.cfName;
1:5a3eb1a:     }
1:5a3eb1a: 
1:bcec7a5:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:5a3eb1a:     {
1:06c130e:         CFMetaData cfm = lookupIndexedTable();
1:b73f9d4:         if (cfm == null)
1:b73f9d4:             return;
1:5a3eb1a: 
1:b73f9d4:         state.hasColumnFamilyAccess(cfm.ksName, cfm.cfName, Permission.ALTER);
1:5a3eb1a:     }
1:b73f9d4: 
1:663bdfb:     public void validate(ClientState state)
1:663bdfb:     {
1:06c130e:         // validated in lookupIndexedTable()
1:663bdfb:     }
1:663bdfb: 
1:bd0eafd:     @Override
1:aa83c94:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime) throws RequestValidationException
1:5a3eb1a:     {
1:2cbd776:         Event.SchemaChange ce = announceMigration(false);
1:2cbd776:         return ce == null ? null : new ResultMessage.SchemaChange(ce);
1:5a3eb1a:     }
1:b73f9d4: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
1:5a3eb1a:     {
1:06c130e:         CFMetaData cfm = lookupIndexedTable();
1:b73f9d4:         if (cfm == null)
1:2cbd776:             return null;
1:b73f9d4: 
1:06c130e:         CFMetaData updatedCfm = cfm.copy();
1:06c130e:         updatedCfm.indexes(updatedCfm.getIndexes().without(indexName));
1:e5c4027:         MigrationManager.announceColumnFamilyUpdate(updatedCfm, isLocalOnly);
1:2cbd776:         // Dropping an index is akin to updating the CF
1:2cbd776:         // Note that we shouldn't call columnFamily() at this point because the index has been dropped and the call to lookupIndexedTable()
1:2cbd776:         // in that method would now throw.
1:2cbd776:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, cfm.ksName, cfm.cfName);
1:5a3eb1a:     }
1:5a3eb1a: 
1:2cbd776:     /**
1:2cbd776:      * The table for which the index should be dropped, or null if the index doesn't exist
1:2cbd776:      *
1:2cbd776:      * @return the metadata for the table containing the dropped index, or {@code null}
1:2cbd776:      * if the index to drop cannot be found but "IF EXISTS" is set on the statement.
1:2cbd776:      *
1:2cbd776:      * @throws InvalidRequestException if the index cannot be found and "IF EXISTS" is not
1:2cbd776:      * set on the statement.
1:2cbd776:      */
1:06c130e:     private CFMetaData lookupIndexedTable()
1:5a3eb1a:     {
1:a89597d:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(keyspace());
1:dceed39:         if (ksm == null)
1:dceed39:             throw new KeyspaceNotDefinedException("Keyspace " + keyspace() + " does not exist");
1:6e1033b: 
1:06c130e:         return ksm.findIndexedTable(indexName)
1:06c130e:                   .orElseGet(() -> {
1:b73f9d4:                       if (ifExists)
1:5a3eb1a:                           return null;
1:b73f9d4:                       else
1:06c130e:                           throw new InvalidRequestException(String.format("Index '%s' could not be found in any " +
1:06c130e:                                                                           "of the tables of keyspace '%s'",
1:06c130e:                                                                           indexName, keyspace()));
1:06c130e:                   });
1:5a3eb1a:     }
1:5a3eb1a: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime) throws RequestValidationException
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3079ae6
commit:e5c4027
/////////////////////////////////////////////////////////////////////////
1:         MigrationManager.announceColumnFamilyUpdate(updatedCfm, isLocalOnly);
commit:a89597d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceMetadata;
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(keyspace());
commit:6e1033b
/////////////////////////////////////////////////////////////////////////
1: 
0:         for (CFMetaData cfm : ksm.tables)
commit:054f0a1
commit:5cf61e7
commit:69bfca0
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData cloned = cfm.copy();
commit:663bdfb
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state)
1:     {
0:         // validated in findIndexedCf()
1:     }
1: 
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         state.hasColumnFamilyAccess(keyspace(), findIndexedCF().cfName, Permission.ALTER);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void announceMigration() throws InvalidRequestException, ConfigurationException
1:     {
0:         CFMetaData updatedCfm = updateCFMetadata(findIndexedCF());
0:         MigrationManager.announceColumnFamilyUpdate(updatedCfm);
1:     }
1: 
0:     private CFMetaData updateCFMetadata(CFMetaData cfm) throws InvalidRequestException
1:     {
0:         ColumnDefinition column = findIndexedColumn(cfm);
0:         assert column != null;
0:         CFMetaData cloned = cfm.clone();
0:         ColumnDefinition toChange = cloned.getColumn_metadata().get(column.name);
0:         assert toChange.getIndexName() != null && toChange.getIndexName().equals(indexName);
0:         toChange.setIndexName(null);
0:         toChange.setIndexType(null, null);
0:         return cloned;
1:     }
1: 
0:     private CFMetaData findIndexedCF() throws InvalidRequestException
1:     {
0:         KSMetaData ksm = Schema.instance.getTableDefinition(keyspace());
0:         for (CFMetaData cfm : ksm.cfMetaData().values())
1:         {
0:             if (findIndexedColumn(cfm) != null)
0:                 return cfm;
1:         }
0:         throw new InvalidRequestException("Index '" + indexName + "' could not be found in any of the column families of keyspace '" + keyspace() + "'");
1:     }
1: 
0:     private ColumnDefinition findIndexedColumn(CFMetaData cfm)
1:     {
0:         for (ColumnDefinition column : cfm.getColumn_metadata().values())
1:         {
0:             if (column.getIndexType() != null && column.getIndexName() != null && column.getIndexName().equals(indexName))
0:                 return column;
1:         }
1:         return null;
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData cfm = lookupIndexedTable();
1:         return cfm == null ? null : cfm.cfName;
/////////////////////////////////////////////////////////////////////////
1:         Event.SchemaChange ce = announceMigration(false);
1:         return ce == null ? null : new ResultMessage.SchemaChange(ce);
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
1:             return null;
1:         // Dropping an index is akin to updating the CF
1:         // Note that we shouldn't call columnFamily() at this point because the index has been dropped and the call to lookupIndexedTable()
1:         // in that method would now throw.
1:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, cfm.ksName, cfm.cfName);
1:     /**
1:      * The table for which the index should be dropped, or null if the index doesn't exist
1:      *
1:      * @return the metadata for the table containing the dropped index, or {@code null}
1:      * if the index to drop cannot be found but "IF EXISTS" is set on the statement.
1:      *
1:      * @throws InvalidRequestException if the index cannot be found and "IF EXISTS" is not
1:      * set on the statement.
1:      */
commit:2fe6de6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.Event;
/////////////////////////////////////////////////////////////////////////
0:     public Event.SchemaChange changeEvent()
0:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
commit:78e91c4
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
0:         MigrationManager.announceColumnFamilyUpdate(updatedCfm, false, isLocalOnly);
commit:b73f9d4
/////////////////////////////////////////////////////////////////////////
1:     public final boolean ifExists;
0:     public DropIndexStatement(String indexName, boolean ifExists)
1:         this.ifExists = ifExists;
0:         CFMetaData cfm = findIndexedCF();
1:         if (cfm == null)
1:             return;
1: 
1:         state.hasColumnFamilyAccess(cfm.ksName, cfm.cfName, Permission.ALTER);
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData cfm = findIndexedCF();
1:         if (cfm == null)
0:             return;
1: 
0:         CFMetaData updatedCfm = updateCFMetadata(cfm);
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (ifExists)
0:             return null;
1:         else
0:             throw new InvalidRequestException("Index '" + indexName + "' could not be found in any of the column families of keyspace '" + keyspace() + "'");
commit:a950b92
/////////////////////////////////////////////////////////////////////////
0:         MigrationManager.announceColumnFamilyUpdate(updatedCfm, false);
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition toChange = cloned.getColumnDefinition(column.name);
/////////////////////////////////////////////////////////////////////////
0:         for (ColumnDefinition column : cfm.allColumns())
commit:11f7d72
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.messages.ResultMessage;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ResultMessage.SchemaChange.Change changeType()
1:     {
0:         // Dropping an index is akin to updating the CF
0:         return ResultMessage.SchemaChange.Change.UPDATED;
1:     }
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.*;
commit:f58a51b
/////////////////////////////////////////////////////////////////////////
1:     public final String indexName;
0:         this.indexName = indexName;
/////////////////////////////////////////////////////////////////////////
0:             throw new InvalidRequestException("Index '" + indexName + "' could not be found in any of the column families of keyspace '" + keyspace() + "'");
/////////////////////////////////////////////////////////////////////////
0:             if (column.getIndexType() != null && column.getIndexName() != null && column.getIndexName().equals(indexName))
0:                 CFMetaData cloned = cfm.clone();
0:                 ColumnDefinition toChange = cloned.getColumn_metadata().get(column.name);
0:                 assert toChange.getIndexName() != null && toChange.getIndexName().equals(indexName);
0:                 toChange.setIndexName(null);
0:                 toChange.setIndexType(null, null);
0:                 return cloned;
commit:ad4541e
commit:86f5eaa
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData updatedCfm = null;
0:             updatedCfm = getUpdatedCFMetadata(cfm);
0:             if (updatedCfm != null)
0:         if (updatedCfm == null)
0:         MigrationManager.announceColumnFamilyUpdate(updatedCfm);
0:     private CFMetaData getUpdatedCFMetadata(CFMetaData cfm) throws InvalidRequestException
0:         for (ColumnDefinition column : cfm.getColumn_metadata().values())
0:             if (column.getIndexType() != null && column.getIndexName() != null && column.getIndexName().equals(index))
0:                 column.setIndexName(null);
0:                 column.setIndexType(null, null);
0:                 return cfm;
commit:15ae2f6
commit:438acfc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.MigrationManager;
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration() throws InvalidRequestException, ConfigurationException
/////////////////////////////////////////////////////////////////////////
0:         MigrationManager.announceColumnFamilyUpdate(CFMetaData.fromThrift(cfDef));
commit:bc577ba
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:655ccc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.io.IOException;
1: 
0: import org.apache.cassandra.cql3.*;
0: import org.apache.cassandra.config.*;
0: import org.apache.cassandra.db.migration.Migration;
0: import org.apache.cassandra.db.migration.UpdateColumnFamily;
0: import org.apache.cassandra.thrift.CfDef;
0: import org.apache.cassandra.thrift.ColumnDef;
0: import org.apache.cassandra.thrift.InvalidRequestException;
1: 
1: public class DropIndexStatement extends SchemaAlteringStatement
0: {
0:     public final CharSequence index;
1: 
0:     public DropIndexStatement(String indexName)
0:     {
0:         super(new CFName());
0:         index = indexName;
0:     }
1: 
0:     public Migration getMigration() throws InvalidRequestException, ConfigurationException, IOException
0:     {
0:         CfDef cfDef = null;
1: 
0:         KSMetaData ksm = Schema.instance.getTableDefinition(keyspace());
1: 
0:         for (CFMetaData cfm : ksm.cfMetaData().values())
0:         {
0:             cfDef = getUpdatedCFDef(cfm.toThrift());
0:             if (cfDef != null)
0:                 break;
0:         }
1: 
0:         if (cfDef == null)
0:             throw new InvalidRequestException("Index '" + index + "' could not be found in any of the column families of keyspace '" + keyspace() + "'");
1: 
0:         return new UpdateColumnFamily(cfDef);
0:     }
1: 
0:     private CfDef getUpdatedCFDef(CfDef cfDef) throws InvalidRequestException
0:     {
0:         for (ColumnDef column : cfDef.column_metadata)
0:         {
0:             if (column.index_type != null && column.index_name != null && column.index_name.equals(index))
0:             {
0:                 column.index_name = null;
0:                 column.index_type = null;
0:                 return cfDef;
0:             }
0:         }
1: 
0:         return null;
0:     }
0: }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:06c130e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.IndexName;
1: import org.apache.cassandra.cql3.QueryOptions;
/////////////////////////////////////////////////////////////////////////
0:     private CFMetaData indexedTable;
/////////////////////////////////////////////////////////////////////////
0:         if (indexedTable != null)
0:             return indexedTable.cfName;
0:         indexedTable = lookupIndexedTable();
0:         return indexedTable == null ? null : indexedTable.cfName;
1:         CFMetaData cfm = lookupIndexedTable();
/////////////////////////////////////////////////////////////////////////
1:         // validated in lookupIndexedTable()
/////////////////////////////////////////////////////////////////////////
0:         return announceMigration(false) ? new ResultMessage.SchemaChange(changeEvent()) : null;
1:         CFMetaData cfm = lookupIndexedTable();
0:         indexedTable = cfm;
1:         CFMetaData updatedCfm = cfm.copy();
1:         updatedCfm.indexes(updatedCfm.getIndexes().without(indexName));
1:     private CFMetaData lookupIndexedTable()
0:         if (indexedTable != null)
0:             return indexedTable;
1:         return ksm.findIndexedTable(indexName)
1:                   .orElseGet(() -> {
0:                       if (ifExists)
0:                           return null;
0:                       else
1:                           throw new InvalidRequestException(String.format("Index '%s' could not be found in any " +
1:                                                                           "of the tables of keyspace '%s'",
1:                                                                           indexName, keyspace()));
1:                   });
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:b2a2d46
/////////////////////////////////////////////////////////////////////////
0:     // initialized in announceMigration()
0:     private String indexedCF;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public String columnFamily()
0:         if (indexedCF != null)
0:             return indexedCF;
0: 
0:         try
0:         {
0:             CFMetaData cfm = findIndexedCF();
0:             return cfm == null ? null : cfm.cfName;
0:         }
0:         catch (InvalidRequestException ire)
0:         {
0:             throw new RuntimeException(ire);
0:         }
/////////////////////////////////////////////////////////////////////////
0:         indexedCF = updatedCfm.cfName;
author:Ulises Cervino Beresi
-------------------------------------------------------------------------------
commit:5fd4a01
/////////////////////////////////////////////////////////////////////////
0:     // We don't override CFStatement#columnFamily as this'd change the
0:     // protocol for returned events when we drop an index. We need it
0:     // to return null so that SchemaMigrations remain a keyspace,
0:     // rather than table, level event (see SchemaAlteringStatement#execute).
0:     public String getColumnFamily() throws InvalidRequestException
0:     {
0:         CFMetaData cfm = findIndexedCF();
0:         return cfm == null ? null : cfm.cfName;
0:     }
0: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:664efd4
commit:e4d5eda
/////////////////////////////////////////////////////////////////////////
0:     public boolean announceMigration() throws InvalidRequestException, ConfigurationException
0:             return false;
0:         return true;
commit:bd0eafd
/////////////////////////////////////////////////////////////////////////
0:     // initialized in announceMigration()
0:     private String indexedCF;
0: 
/////////////////////////////////////////////////////////////////////////
0:         indexedCF = updatedCfm.cfName;
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
0:     public String columnFamily()
0:     {
0:         assert indexedCF != null;
0:         return indexedCF;
0:     }
commit:6a4144b
/////////////////////////////////////////////////////////////////////////
1:     public DropIndexStatement(IndexName indexName, boolean ifExists)
1:         super(indexName.getCfName());
1:         this.indexName = indexName.getIdx();
author:Robert Stupp
-------------------------------------------------------------------------------
commit:dceed39
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.KeyspaceNotDefinedException;
1: import org.apache.cassandra.service.QueryState;
0: import org.apache.cassandra.transport.messages.ResultMessage;
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public ResultMessage execute(QueryState state, QueryOptions options) throws RequestValidationException
0:     {
0:         announceMigration(false);
0:         return indexedCF == null ? null : new ResultMessage.SchemaChange(changeEvent());
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:         if (ksm == null)
1:             throw new KeyspaceNotDefinedException("Keyspace " + keyspace() + " does not exist");
/////////////////////////////////////////////////////////////////////////
0:             throw new InvalidRequestException("Index '" + indexName + "' could not be found in any of the tables of keyspace '" + keyspace() + '\'');
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f1c9bc6
/////////////////////////////////////////////////////////////////////////
0:     private CFMetaData updateCFMetadata(CFMetaData cfm)
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:853456d
/////////////////////////////////////////////////////////////////////////
0:         KSMetaData ksm = Schema.instance.getKSMetaData(keyspace());
commit:f32110c
/////////////////////////////////////////////////////////////////////////
0:         state.hasColumnFamilyAccess(keyspace(), columnFamily(), Permission.WRITE);
commit:19ce000
commit:ccb0028
/////////////////////////////////////////////////////////////////////////
0:         return new UpdateColumnFamily(CFMetaData.fromThrift(cfDef));
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:bcec7a5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.service.ClientState;
/////////////////////////////////////////////////////////////////////////
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
0:     {
0:         state.hasColumnFamilyAccess(keyspace(), columnFamily(), Permission.ALTER);
0:     }
0: 
commit:aba5a37
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.service.ClientState;
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws InvalidRequestException
0:     {
0:         state.hasColumnFamilyAccess(keyspace(), columnFamily(), Permission.ALTER);
0:     }
0: 
============================================================================