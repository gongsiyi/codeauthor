1:e31e216: /*
1:e31e216:  * Licensed to the Apache Software Foundation (ASF) under one
1:e31e216:  * or more contributor license agreements.  See the NOTICE file
1:e31e216:  * distributed with this work for additional information
1:e31e216:  * regarding copyright ownership.  The ASF licenses this file
1:e31e216:  * to you under the Apache License, Version 2.0 (the
1:e31e216:  * "License"); you may not use this file except in compliance
1:e31e216:  * with the License.  You may obtain a copy of the License at
1:e31e216:  *
1:e31e216:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e31e216:  *
1:e31e216:  * Unless required by applicable law or agreed to in writing, software
1:e31e216:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e31e216:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e31e216:  * See the License for the specific language governing permissions and
1:e31e216:  * limitations under the License.
1:e31e216:  */
1:e31e216: 
1:e31e216: package org.apache.cassandra.test.microbench;
1:e31e216: 
1:e31e216: import java.io.File;
1:e31e216: import java.io.IOException;
1:e31e216: import java.io.PrintWriter;
1:e31e216: import java.nio.file.Files;
1:e31e216: import java.util.Arrays;
1:e31e216: import java.util.UUID;
1:e31e216: import java.util.concurrent.TimeUnit;
1:e31e216: 
1:e31e216: import org.apache.cassandra.io.util.FileUtils;
1:e31e216: import org.apache.cassandra.utils.DirectorySizeCalculator;
1:e31e216: import org.openjdk.jmh.annotations.*;
1:e31e216: import org.openjdk.jmh.infra.Blackhole;
1:e31e216: 
1:e31e216: @BenchmarkMode(Mode.AverageTime)
1:e31e216: @OutputTimeUnit(TimeUnit.MILLISECONDS)
1:e31e216: @Warmup(iterations = 1)
1:e31e216: @Measurement(iterations = 30)
1:e31e216: @Fork(value = 1,jvmArgsAppend = "-Xmx512M")
1:e31e216: @Threads(1)
1:e31e216: @State(Scope.Benchmark)
1:e31e216: public class DirectorySizerBench
1:e31e216: {
1:e31e216:     private File tempDir;
1:e31e216:     private DirectorySizeCalculator sizer;
1:e31e216: 
1:e31e216:     @Setup(Level.Trial)
1:e31e216:     public void setUp() throws IOException
1:e31e216:     {
1:e31e216:         tempDir = Files.createTempDirectory(randString()).toFile();
1:e31e216: 
1:e31e216:         // Since #'s on laptops and commodity desktops are so useful in considering enterprise virtualized server environments...
1:e31e216: 
1:e31e216:         // Spinning disk 7200rpm 1TB, win10, ntfs, i6600 skylake, 256 files:
1:e31e216:         // [java] Result: 0.581 â–?(99.9%) 0.003 ms/op [Average]
1:e31e216:         // [java]   Statistics: (min, avg, max) = (0.577, 0.581, 0.599), stdev = 0.005
1:e31e216:         // [java]   Confidence interval (99.9%): [0.577, 0.584]
1:e31e216: 
1:e31e216:         // Same hardware, 25600 files:
1:e31e216:         // [java] Result: 56.990 â–?(99.9%) 0.374 ms/op [Average]
1:e31e216:         // [java]   Statistics: (min, avg, max) = (56.631, 56.990, 59.829), stdev = 0.560
1:e31e216:         // [java]   Confidence interval (99.9%): [56.616, 57.364]
1:e31e216: 
1:e31e216:         // #'s on a rmbp, 2014, SSD, ubuntu 15.10, ext4, i7-4850HQ @ 2.3, 25600 samples
1:e31e216:         // [java] Result: 74.714 Â±(99.9%) 0.558 ms/op [Average]
1:e31e216:         // [java]   Statistics: (min, avg, max) = (73.687, 74.714, 76.872), stdev = 0.835
1:e31e216:         // [java]   Confidence interval (99.9%): [74.156, 75.272]
1:e31e216: 
1:e31e216:         // Throttle CPU on the Windows box to .87GHZ from 4.3GHZ turbo single-core, and #'s for 25600:
1:e31e216:         // [java] Result: 298.628 â–?(99.9%) 14.755 ms/op [Average]
1:e31e216:         // [java]   Statistics: (min, avg, max) = (291.245, 298.628, 412.881), stdev = 22.085
1:e31e216:         // [java]   Confidence interval (99.9%): [283.873, 313.383]
1:e31e216: 
1:e31e216:         // Test w/25,600 files, 100x the load of a full default CommitLog (8192) divided by size (32 per)
1:e31e216:         populateRandomFiles(tempDir, 25600);
1:e31e216:         sizer = new DirectorySizeCalculator(tempDir);
1:e31e216:     }
1:e31e216: 
1:e31e216:     @TearDown
1:e31e216:     public void tearDown()
1:e31e216:     {
1:e31e216:         FileUtils.deleteRecursive(tempDir);
1:e31e216:     }
1:e31e216: 
1:e31e216:     private void populateRandomFiles(File dir, int count) throws IOException
1:e31e216:     {
1:e31e216:         for (int i = 0; i < count; i++)
1:e31e216:         {
1:e31e216:             PrintWriter pw = new PrintWriter(dir + File.separator + randString(), "UTF-8");
1:e31e216:             pw.write(randString());
1:e31e216:             pw.close();
1:e31e216:         }
1:e31e216:     }
1:e31e216: 
1:e31e216:     private String randString()
1:e31e216:     {
1:e31e216:         return UUID.randomUUID().toString();
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Benchmark
1:e31e216:     public void countFiles(final Blackhole bh) throws IOException
1:e31e216:     {
1:e31e216:         Files.walkFileTree(tempDir.toPath(), sizer);
1:e31e216:     }
1:e31e216: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:1f74142
/////////////////////////////////////////////////////////////////////////
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.test.microbench;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.nio.file.Files;
1: import java.util.Arrays;
1: import java.util.UUID;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.DirectorySizeCalculator;
1: import org.openjdk.jmh.annotations.*;
1: import org.openjdk.jmh.infra.Blackhole;
1: 
1: @BenchmarkMode(Mode.AverageTime)
1: @OutputTimeUnit(TimeUnit.MILLISECONDS)
1: @Warmup(iterations = 1)
1: @Measurement(iterations = 30)
1: @Fork(value = 1,jvmArgsAppend = "-Xmx512M")
1: @Threads(1)
1: @State(Scope.Benchmark)
1: public class DirectorySizerBench
1: {
1:     private File tempDir;
1:     private DirectorySizeCalculator sizer;
1: 
1:     @Setup(Level.Trial)
1:     public void setUp() throws IOException
1:     {
1:         tempDir = Files.createTempDirectory(randString()).toFile();
1: 
1:         // Since #'s on laptops and commodity desktops are so useful in considering enterprise virtualized server environments...
1: 
1:         // Spinning disk 7200rpm 1TB, win10, ntfs, i6600 skylake, 256 files:
1:         // [java] Result: 0.581 â–?(99.9%) 0.003 ms/op [Average]
1:         // [java]   Statistics: (min, avg, max) = (0.577, 0.581, 0.599), stdev = 0.005
1:         // [java]   Confidence interval (99.9%): [0.577, 0.584]
1: 
1:         // Same hardware, 25600 files:
1:         // [java] Result: 56.990 â–?(99.9%) 0.374 ms/op [Average]
1:         // [java]   Statistics: (min, avg, max) = (56.631, 56.990, 59.829), stdev = 0.560
1:         // [java]   Confidence interval (99.9%): [56.616, 57.364]
1: 
1:         // #'s on a rmbp, 2014, SSD, ubuntu 15.10, ext4, i7-4850HQ @ 2.3, 25600 samples
1:         // [java] Result: 74.714 Â±(99.9%) 0.558 ms/op [Average]
1:         // [java]   Statistics: (min, avg, max) = (73.687, 74.714, 76.872), stdev = 0.835
1:         // [java]   Confidence interval (99.9%): [74.156, 75.272]
1: 
1:         // Throttle CPU on the Windows box to .87GHZ from 4.3GHZ turbo single-core, and #'s for 25600:
1:         // [java] Result: 298.628 â–?(99.9%) 14.755 ms/op [Average]
1:         // [java]   Statistics: (min, avg, max) = (291.245, 298.628, 412.881), stdev = 22.085
1:         // [java]   Confidence interval (99.9%): [283.873, 313.383]
1: 
1:         // Test w/25,600 files, 100x the load of a full default CommitLog (8192) divided by size (32 per)
1:         populateRandomFiles(tempDir, 25600);
1:         sizer = new DirectorySizeCalculator(tempDir);
1:     }
1: 
1:     @TearDown
1:     public void tearDown()
1:     {
1:         FileUtils.deleteRecursive(tempDir);
1:     }
1: 
1:     private void populateRandomFiles(File dir, int count) throws IOException
1:     {
1:         for (int i = 0; i < count; i++)
1:         {
1:             PrintWriter pw = new PrintWriter(dir + File.separator + randString(), "UTF-8");
1:             pw.write(randString());
1:             pw.close();
1:         }
1:     }
1: 
1:     private String randString()
1:     {
1:         return UUID.randomUUID().toString();
1:     }
1: 
1:     @Benchmark
1:     public void countFiles(final Blackhole bh) throws IOException
1:     {
0:         sizer.rebuildFileList();
1:         Files.walkFileTree(tempDir.toPath(), sizer);
1:     }
1: }
============================================================================