1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.Int32Type;
1:72790dc: import org.apache.cassandra.db.marshal.UTF8Type;
1:72790dc: import org.apache.cassandra.utils.ByteBufferUtil;
1:72790dc: 
1:72790dc: import org.junit.Assert;
1:72790dc: import org.junit.Test;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Tests for the non-tokenizing analyzer
1:72790dc:  */
1:72790dc: public class NonTokenizingAnalyzerTest
1:72790dc: {
1:72790dc:     @Test
1:72790dc:     public void caseInsensitiveAnalizer() throws Exception
1:72790dc:     {
1:72790dc:         NonTokenizingAnalyzer analyzer = new NonTokenizingAnalyzer();
1:72790dc:         NonTokenizingOptions options = NonTokenizingOptions.getDefaultOptions();
1:72790dc:         options.setCaseSensitive(false);
1:72790dc:         analyzer.init(options, UTF8Type.instance);
1:72790dc: 
1:72790dc:         String testString = "Nip it in the bud";
1:72790dc:         ByteBuffer toAnalyze = ByteBuffer.wrap(testString.getBytes());
1:72790dc:         analyzer.reset(toAnalyze);
1:72790dc:         ByteBuffer analyzed = null;
1:72790dc:         while (analyzer.hasNext())
1:72790dc:             analyzed = analyzer.next();
1:72790dc:         Assert.assertTrue(testString.toLowerCase().equals(ByteBufferUtil.string(analyzed)));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void caseSensitiveAnalizer() throws Exception
1:72790dc:     {
1:72790dc:         NonTokenizingAnalyzer analyzer = new NonTokenizingAnalyzer();
1:72790dc:         NonTokenizingOptions options = NonTokenizingOptions.getDefaultOptions();
1:72790dc:         analyzer.init(options, UTF8Type.instance);
1:72790dc: 
1:72790dc:         String testString = "Nip it in the bud";
1:72790dc:         ByteBuffer toAnalyze = ByteBuffer.wrap(testString.getBytes());
1:72790dc:         analyzer.reset(toAnalyze);
1:72790dc:         ByteBuffer analyzed = null;
1:72790dc:         while (analyzer.hasNext())
1:72790dc:             analyzed = analyzer.next();
1:72790dc:         Assert.assertFalse(testString.toLowerCase().equals(ByteBufferUtil.string(analyzed)));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void ensureIncompatibleInputSkipped() throws Exception
1:72790dc:     {
1:72790dc:         NonTokenizingAnalyzer analyzer = new NonTokenizingAnalyzer();
1:72790dc:         NonTokenizingOptions options = NonTokenizingOptions.getDefaultOptions();
1:72790dc:         analyzer.init(options, Int32Type.instance);
1:72790dc: 
1:72790dc:         ByteBuffer toAnalyze = ByteBufferUtil.bytes(1);
1:72790dc:         analyzer.reset(toAnalyze);
1:72790dc:         Assert.assertTrue(!analyzer.hasNext());
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: /**
1:  * Tests for the non-tokenizing analyzer
1:  */
1: public class NonTokenizingAnalyzerTest
1: {
1:     @Test
1:     public void caseInsensitiveAnalizer() throws Exception
1:     {
1:         NonTokenizingAnalyzer analyzer = new NonTokenizingAnalyzer();
1:         NonTokenizingOptions options = NonTokenizingOptions.getDefaultOptions();
1:         options.setCaseSensitive(false);
1:         analyzer.init(options, UTF8Type.instance);
1: 
1:         String testString = "Nip it in the bud";
1:         ByteBuffer toAnalyze = ByteBuffer.wrap(testString.getBytes());
1:         analyzer.reset(toAnalyze);
1:         ByteBuffer analyzed = null;
1:         while (analyzer.hasNext())
1:             analyzed = analyzer.next();
1:         Assert.assertTrue(testString.toLowerCase().equals(ByteBufferUtil.string(analyzed)));
1:     }
1: 
1:     @Test
1:     public void caseSensitiveAnalizer() throws Exception
1:     {
1:         NonTokenizingAnalyzer analyzer = new NonTokenizingAnalyzer();
1:         NonTokenizingOptions options = NonTokenizingOptions.getDefaultOptions();
1:         analyzer.init(options, UTF8Type.instance);
1: 
1:         String testString = "Nip it in the bud";
1:         ByteBuffer toAnalyze = ByteBuffer.wrap(testString.getBytes());
1:         analyzer.reset(toAnalyze);
1:         ByteBuffer analyzed = null;
1:         while (analyzer.hasNext())
1:             analyzed = analyzer.next();
1:         Assert.assertFalse(testString.toLowerCase().equals(ByteBufferUtil.string(analyzed)));
1:     }
1: 
1:     @Test
1:     public void ensureIncompatibleInputSkipped() throws Exception
1:     {
1:         NonTokenizingAnalyzer analyzer = new NonTokenizingAnalyzer();
1:         NonTokenizingOptions options = NonTokenizingOptions.getDefaultOptions();
1:         analyzer.init(options, Int32Type.instance);
1: 
1:         ByteBuffer toAnalyze = ByteBufferUtil.bytes(1);
1:         analyzer.reset(toAnalyze);
1:         Assert.assertTrue(!analyzer.hasNext());
1:     }
1: }
============================================================================