1:69cedbf: /*
1:69cedbf:  * Licensed to the Apache Software Foundation (ASF) under one
1:69cedbf:  * or more contributor license agreements.  See the NOTICE file
1:69cedbf:  * distributed with this work for additional information
1:69cedbf:  * regarding copyright ownership.  The ASF licenses this file
1:69cedbf:  * to you under the Apache License, Version 2.0 (the
1:69cedbf:  * "License"); you may not use this file except in compliance
1:69cedbf:  * with the License.  You may obtain a copy of the License at
1:69cedbf:  *
1:69cedbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69cedbf:  *
1:69cedbf:  * Unless required by applicable law or agreed to in writing, software
1:69cedbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:69cedbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69cedbf:  * See the License for the specific language governing permissions and
1:69cedbf:  * limitations under the License.
1:69cedbf:  */
1:69cedbf: package org.apache.cassandra.metrics;
3:69cedbf: 
1:69cedbf: import java.net.InetAddress;
1:69cedbf: 
1:8896a70: import com.codahale.metrics.Gauge;
1:8896a70: import com.codahale.metrics.Meter;
1:8896a70: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:69cedbf: 
1:69cedbf: import org.apache.cassandra.net.OutboundTcpConnectionPool;
1:69cedbf: 
1:69cedbf: /**
1:69cedbf:  * Metrics for {@link OutboundTcpConnectionPool}.
1:69cedbf:  */
1:69cedbf: public class ConnectionMetrics
3:69cedbf: {
1:69cedbf:     public static final String TYPE_NAME = "Connection";
1:69cedbf: 
1:69cedbf:     /** Total number of timeouts happened on this node */
1:8896a70:     public static final Meter totalTimeouts = Metrics.meter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalTimeouts", null));
1:69cedbf: 
1:69cedbf:     public final String address;
1:144644b:     /** Pending tasks for large message TCP Connections */
1:144644b:     public final Gauge<Integer> largeMessagePendingTasks;
1:144644b:     /** Completed tasks for large message TCP Connections */
1:144644b:     public final Gauge<Long> largeMessageCompletedTasks;
1:144644b:     /** Dropped tasks for large message TCP Connections */
1:144644b:     public final Gauge<Long> largeMessageDroppedTasks;
1:144644b:     /** Pending tasks for small message TCP Connections */
1:144644b:     public final Gauge<Integer> smallMessagePendingTasks;
1:144644b:     /** Completed tasks for small message TCP Connections */
1:144644b:     public final Gauge<Long> smallMessageCompletedTasks;
1:144644b:     /** Dropped tasks for small message TCP Connections */
1:144644b:     public final Gauge<Long> smallMessageDroppedTasks;
1:9a6ee93:     /** Pending tasks for gossip message TCP Connections */
1:9a6ee93:     public final Gauge<Integer> gossipMessagePendingTasks;
1:9a6ee93:     /** Completed tasks for gossip message TCP Connections */
1:9a6ee93:     public final Gauge<Long> gossipMessageCompletedTasks;
1:9a6ee93:     /** Dropped tasks for gossip message TCP Connections */
1:9a6ee93:     public final Gauge<Long> gossipMessageDroppedTasks;
1:144644b: 
1:69cedbf:     /** Number of timeouts for specific IP */
1:69cedbf:     public final Meter timeouts;
1:69cedbf: 
1:eb390d0:     private final MetricNameFactory factory;
1:eb390d0: 
1:69cedbf:     /**
1:69cedbf:      * Create metrics for given connection pool.
1:69cedbf:      *
1:69cedbf:      * @param ip IP address to use for metrics label
1:69cedbf:      * @param connectionPool Connection pool
1:69cedbf:      */
1:69cedbf:     public ConnectionMetrics(InetAddress ip, final OutboundTcpConnectionPool connectionPool)
1:69cedbf:     {
1:3a3f1d9:         // ipv6 addresses will contain colons, which are invalid in a JMX ObjectName
1:495ae9c:         address = ip.getHostAddress().replace(':', '.');
1:69cedbf: 
1:eb390d0:         factory = new DefaultNameFactory("Connection", address);
1:eb390d0: 
1:144644b:         largeMessagePendingTasks = Metrics.register(factory.createMetricName("LargeMessagePendingTasks"), new Gauge<Integer>()
1:69cedbf:         {
1:8896a70:             public Integer getValue()
1:69cedbf:             {
1:144644b:                 return connectionPool.largeMessages.getPendingMessages();
3:69cedbf:             }
1:69cedbf:         });
1:144644b:         largeMessageCompletedTasks = Metrics.register(factory.createMetricName("LargeMessageCompletedTasks"), new Gauge<Long>()
1:69cedbf:         {
1:8896a70:             public Long getValue()
1:69cedbf:             {
1:144644b:                 return connectionPool.largeMessages.getCompletedMesssages();
1:69cedbf:             }
1:69cedbf:         });
1:144644b:         largeMessageDroppedTasks = Metrics.register(factory.createMetricName("LargeMessageDroppedTasks"), new Gauge<Long>()
1:69cedbf:         {
1:8896a70:             public Long getValue()
1:69cedbf:             {
1:144644b:                 return connectionPool.largeMessages.getDroppedMessages();
1:69cedbf:             }
1:69cedbf:         });
1:144644b:         smallMessagePendingTasks = Metrics.register(factory.createMetricName("SmallMessagePendingTasks"), new Gauge<Integer>()
1:69cedbf:         {
1:8896a70:             public Integer getValue()
1:69cedbf:             {
1:144644b:                 return connectionPool.smallMessages.getPendingMessages();
1:69cedbf:             }
1:69cedbf:         });
1:144644b:         smallMessageCompletedTasks = Metrics.register(factory.createMetricName("SmallMessageCompletedTasks"), new Gauge<Long>()
1:69cedbf:         {
1:8896a70:             public Long getValue()
1:69cedbf:             {
1:144644b:                 return connectionPool.smallMessages.getCompletedMesssages();
1:144644b:             }
1:144644b:         });
1:144644b:         smallMessageDroppedTasks = Metrics.register(factory.createMetricName("SmallMessageDroppedTasks"), new Gauge<Long>()
1:144644b:         {
1:144644b:             public Long getValue()
1:144644b:             {
1:144644b:                 return connectionPool.smallMessages.getDroppedMessages();
1:69cedbf:             }
1:69cedbf:         });
1:9a6ee93:         gossipMessagePendingTasks = Metrics.register(factory.createMetricName("GossipMessagePendingTasks"), new Gauge<Integer>()
1:9a6ee93:         {
1:9a6ee93:             public Integer getValue()
1:9a6ee93:             {
1:9a6ee93:                 return connectionPool.gossipMessages.getPendingMessages();
1:9a6ee93:             }
1:9a6ee93:         });
1:9a6ee93:         gossipMessageCompletedTasks = Metrics.register(factory.createMetricName("GossipMessageCompletedTasks"), new Gauge<Long>()
1:9a6ee93:         {
1:9a6ee93:             public Long getValue()
1:9a6ee93:             {
1:9a6ee93:                 return connectionPool.gossipMessages.getCompletedMesssages();
1:9a6ee93:             }
1:9a6ee93:         });
1:9a6ee93:         gossipMessageDroppedTasks = Metrics.register(factory.createMetricName("GossipMessageDroppedTasks"), new Gauge<Long>()
1:9a6ee93:         {
1:9a6ee93:             public Long getValue()
1:9a6ee93:             {
1:9a6ee93:                 return connectionPool.gossipMessages.getDroppedMessages();
1:9a6ee93:             }
1:9a6ee93:         });
1:8896a70:         timeouts = Metrics.meter(factory.createMetricName("Timeouts"));
1:69cedbf:     }
1:69cedbf: 
1:69cedbf:     public void release()
1:69cedbf:     {
1:144644b:         Metrics.remove(factory.createMetricName("LargeMessagePendingTasks"));
1:144644b:         Metrics.remove(factory.createMetricName("LargeMessageCompletedTasks"));
1:144644b:         Metrics.remove(factory.createMetricName("LargeMessageDroppedTasks"));
1:144644b:         Metrics.remove(factory.createMetricName("SmallMessagePendingTasks"));
1:144644b:         Metrics.remove(factory.createMetricName("SmallMessageCompletedTasks"));
1:144644b:         Metrics.remove(factory.createMetricName("SmallMessageDroppedTasks"));
1:9a6ee93:         Metrics.remove(factory.createMetricName("GossipMessagePendingTasks"));
1:9a6ee93:         Metrics.remove(factory.createMetricName("GossipMessageCompletedTasks"));
1:9a6ee93:         Metrics.remove(factory.createMetricName("GossipMessageDroppedTasks"));
1:8896a70:         Metrics.remove(factory.createMetricName("Timeouts"));
1:69cedbf:     }
1:69cedbf: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:9a6ee93
/////////////////////////////////////////////////////////////////////////
1:     /** Pending tasks for gossip message TCP Connections */
1:     public final Gauge<Integer> gossipMessagePendingTasks;
1:     /** Completed tasks for gossip message TCP Connections */
1:     public final Gauge<Long> gossipMessageCompletedTasks;
1:     /** Dropped tasks for gossip message TCP Connections */
1:     public final Gauge<Long> gossipMessageDroppedTasks;
/////////////////////////////////////////////////////////////////////////
1:         gossipMessagePendingTasks = Metrics.register(factory.createMetricName("GossipMessagePendingTasks"), new Gauge<Integer>()
1:         {
1:             public Integer getValue()
1:             {
1:                 return connectionPool.gossipMessages.getPendingMessages();
1:             }
1:         });
1:         gossipMessageCompletedTasks = Metrics.register(factory.createMetricName("GossipMessageCompletedTasks"), new Gauge<Long>()
1:         {
1:             public Long getValue()
1:             {
1:                 return connectionPool.gossipMessages.getCompletedMesssages();
1:             }
1:         });
1:         gossipMessageDroppedTasks = Metrics.register(factory.createMetricName("GossipMessageDroppedTasks"), new Gauge<Long>()
1:         {
1:             public Long getValue()
1:             {
1:                 return connectionPool.gossipMessages.getDroppedMessages();
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:         Metrics.remove(factory.createMetricName("GossipMessagePendingTasks"));
1:         Metrics.remove(factory.createMetricName("GossipMessageCompletedTasks"));
1:         Metrics.remove(factory.createMetricName("GossipMessageDroppedTasks"));
author:Robert Stupp
-------------------------------------------------------------------------------
commit:c15ac66
author:Erik Forsberg
-------------------------------------------------------------------------------
commit:495ae9c
/////////////////////////////////////////////////////////////////////////
1:         address = ip.getHostAddress().replace(':', '.');
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:144644b
/////////////////////////////////////////////////////////////////////////
1:     /** Pending tasks for large message TCP Connections */
1:     public final Gauge<Integer> largeMessagePendingTasks;
1:     /** Completed tasks for large message TCP Connections */
1:     public final Gauge<Long> largeMessageCompletedTasks;
1:     /** Dropped tasks for large message TCP Connections */
1:     public final Gauge<Long> largeMessageDroppedTasks;
1:     /** Pending tasks for small message TCP Connections */
1:     public final Gauge<Integer> smallMessagePendingTasks;
1:     /** Completed tasks for small message TCP Connections */
1:     public final Gauge<Long> smallMessageCompletedTasks;
1:     /** Dropped tasks for small message TCP Connections */
1:     public final Gauge<Long> smallMessageDroppedTasks;
1: 
/////////////////////////////////////////////////////////////////////////
1:         largeMessagePendingTasks = Metrics.register(factory.createMetricName("LargeMessagePendingTasks"), new Gauge<Integer>()
1:                 return connectionPool.largeMessages.getPendingMessages();
1:         largeMessageCompletedTasks = Metrics.register(factory.createMetricName("LargeMessageCompletedTasks"), new Gauge<Long>()
1:                 return connectionPool.largeMessages.getCompletedMesssages();
1:         largeMessageDroppedTasks = Metrics.register(factory.createMetricName("LargeMessageDroppedTasks"), new Gauge<Long>()
1:                 return connectionPool.largeMessages.getDroppedMessages();
1:         smallMessagePendingTasks = Metrics.register(factory.createMetricName("SmallMessagePendingTasks"), new Gauge<Integer>()
1:                 return connectionPool.smallMessages.getPendingMessages();
1:         smallMessageCompletedTasks = Metrics.register(factory.createMetricName("SmallMessageCompletedTasks"), new Gauge<Long>()
1:                 return connectionPool.smallMessages.getCompletedMesssages();
1:             }
1:         });
1:         smallMessageDroppedTasks = Metrics.register(factory.createMetricName("SmallMessageDroppedTasks"), new Gauge<Long>()
1:         {
1:             public Long getValue()
1:             {
1:                 return connectionPool.smallMessages.getDroppedMessages();
/////////////////////////////////////////////////////////////////////////
1:         Metrics.remove(factory.createMetricName("LargeMessagePendingTasks"));
1:         Metrics.remove(factory.createMetricName("LargeMessageCompletedTasks"));
1:         Metrics.remove(factory.createMetricName("LargeMessageDroppedTasks"));
1:         Metrics.remove(factory.createMetricName("SmallMessagePendingTasks"));
1:         Metrics.remove(factory.createMetricName("SmallMessageCompletedTasks"));
1:         Metrics.remove(factory.createMetricName("SmallMessageDroppedTasks"));
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Gauge;
1: import com.codahale.metrics.Meter;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static final Meter totalTimeouts = Metrics.meter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalTimeouts", null));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         commandPendingTasks = Metrics.register(factory.createMetricName("CommandPendingTasks"), new Gauge<Integer>()
1:             public Integer getValue()
0:         commandCompletedTasks = Metrics.register(factory.createMetricName("CommandCompletedTasks"), new Gauge<Long>()
1:             public Long getValue()
0:         commandDroppedTasks = Metrics.register(factory.createMetricName("CommandDroppedTasks"), new Gauge<Long>()
1:             public Long getValue()
0:         responsePendingTasks = Metrics.register(factory.createMetricName("ResponsePendingTasks"), new Gauge<Integer>()
1:             public Integer getValue()
0:         responseCompletedTasks = Metrics.register(factory.createMetricName("ResponseCompletedTasks"), new Gauge<Long>()
1:             public Long getValue()
1:         timeouts = Metrics.meter(factory.createMetricName("Timeouts"));
0:         Metrics.remove(factory.createMetricName("CommandPendingTasks"));
0:         Metrics.remove(factory.createMetricName("CommandCompletedTasks"));
0:         Metrics.remove(factory.createMetricName("CommandDroppedTasks"));
0:         Metrics.remove(factory.createMetricName("ResponsePendingTasks"));
0:         Metrics.remove(factory.createMetricName("ResponseCompletedTasks"));
1:         Metrics.remove(factory.createMetricName("Timeouts"));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public static final Meter totalTimeouts = Metrics.newMeter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalTimeouts", null), "total timeouts", TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:     private final MetricNameFactory factory;
1: 
/////////////////////////////////////////////////////////////////////////
1:         factory = new DefaultNameFactory("Connection", address);
1: 
0:         commandPendingTasks = Metrics.newGauge(factory.createMetricName("CommandPendingTasks"), new Gauge<Integer>()
0:         commandCompletedTasks = Metrics.newGauge(factory.createMetricName("CommandCompletedTasks"), new Gauge<Long>()
0:         commandDroppedTasks = Metrics.newGauge(factory.createMetricName("CommandDroppedTasks"), new Gauge<Long>()
0:         responsePendingTasks = Metrics.newGauge(factory.createMetricName("ResponsePendingTasks"), new Gauge<Integer>()
0:         responseCompletedTasks = Metrics.newGauge(factory.createMetricName("ResponseCompletedTasks"), new Gauge<Long>()
0:         timeouts = Metrics.newMeter(factory.createMetricName("Timeouts"), "timeouts", TimeUnit.SECONDS);
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("CommandPendingTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("CommandCompletedTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("CommandDroppedTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("ResponsePendingTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("ResponseCompletedTasks"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("Timeouts"));
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import java.net.InetAddress;
0: import java.util.concurrent.TimeUnit;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Gauge;
0: import com.yammer.metrics.core.Meter;
0: import com.yammer.metrics.core.MetricName;
1: 
1: import org.apache.cassandra.net.OutboundTcpConnectionPool;
1: 
1: /**
1:  * Metrics for {@link OutboundTcpConnectionPool}.
1:  */
1: public class ConnectionMetrics
1: {
0:     public static final String GROUP_NAME = "org.apache.cassandra.metrics";
1:     public static final String TYPE_NAME = "Connection";
1: 
1:     /** Total number of timeouts happened on this node */
0:     public static final Meter totalTimeouts = Metrics.newMeter(new MetricName(GROUP_NAME, TYPE_NAME, "TotalTimeouts"), "total timeouts", TimeUnit.SECONDS);
0:     private static long recentTimeouts;
1: 
1:     public final String address;
0:     /** Pending tasks for Command(Mutations, Read etc) TCP Connections */
0:     public final Gauge<Integer> commandPendingTasks;
0:     /** Completed tasks for Command(Mutations, Read etc) TCP Connections */
0:     public final Gauge<Long> commandCompletedTasks;
0:     /** Dropped tasks for Command(Mutations, Read etc) TCP Connections */
0:     public final Gauge<Long> commandDroppedTasks;
0:     /** Pending tasks for Response(GOSSIP & RESPONSE) TCP Connections */
0:     public final Gauge<Integer> responsePendingTasks;
0:     /** Completed tasks for Response(GOSSIP & RESPONSE) TCP Connections */
0:     public final Gauge<Long> responseCompletedTasks;
1:     /** Number of timeouts for specific IP */
1:     public final Meter timeouts;
1: 
0:     private long recentTimeoutCount;
1: 
1:     /**
1:      * Create metrics for given connection pool.
1:      *
1:      * @param ip IP address to use for metrics label
1:      * @param connectionPool Connection pool
1:      */
1:     public ConnectionMetrics(InetAddress ip, final OutboundTcpConnectionPool connectionPool)
1:     {
0:         address = ip.getHostAddress();
0:         commandPendingTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "CommandPendingTasks", address), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
0:                 return connectionPool.cmdCon.getPendingMessages();
1:             }
1:         });
0:         commandCompletedTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "CommandCompletedTasks", address), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return connectionPool.cmdCon.getCompletedMesssages();
1:             }
1:         });
0:         commandDroppedTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "CommandDroppedTasks", address), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return connectionPool.cmdCon.getDroppedMessages();
1:             }
1:         });
0:         responsePendingTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "ResponsePendingTasks", address), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
0:                 return connectionPool.ackCon.getPendingMessages();
1:             }
1:         });
0:         responseCompletedTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "ResponseCompletedTasks", address), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return connectionPool.ackCon.getCompletedMesssages();
1:             }
1:         });
0:         timeouts = Metrics.newMeter(new MetricName(GROUP_NAME, TYPE_NAME, "Timeouts", address), "timeouts", TimeUnit.SECONDS);
1:     }
1: 
1:     public void release()
1:     {
0:         Metrics.defaultRegistry().removeMetric(new MetricName(GROUP_NAME, TYPE_NAME, "CommandPendingTasks", address));
0:         Metrics.defaultRegistry().removeMetric(new MetricName(GROUP_NAME, TYPE_NAME, "CommandCompletedTasks", address));
0:         Metrics.defaultRegistry().removeMetric(new MetricName(GROUP_NAME, TYPE_NAME, "CommandDroppedTasks", address));
0:         Metrics.defaultRegistry().removeMetric(new MetricName(GROUP_NAME, TYPE_NAME, "ResponsePendingTasks", address));
0:         Metrics.defaultRegistry().removeMetric(new MetricName(GROUP_NAME, TYPE_NAME, "ResponseCompletedTasks", address));
0:         Metrics.defaultRegistry().removeMetric(new MetricName(GROUP_NAME, TYPE_NAME, "Timeouts", address));
1:     }
1: 
0:     @Deprecated
0:     public static long getRecentTotalTimeout()
1:     {
0:         long total = totalTimeouts.count();
0:         long recent = total - recentTimeouts;
0:         recentTimeouts = total;
0:         return recent;
1:     }
1: 
0:     @Deprecated
0:     public long getRecentTimeout()
1:     {
0:         long timeoutCount = timeouts.count();
0:         long recent = timeoutCount - recentTimeoutCount;
0:         recentTimeoutCount = timeoutCount;
0:         return recent;
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:3a3f1d9
/////////////////////////////////////////////////////////////////////////
1:         // ipv6 addresses will contain colons, which are invalid in a JMX ObjectName
0:         address = ip.getHostAddress().replaceAll(":", ".");
0: 
============================================================================