1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
6:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.security.MessageDigest;
1:a991b64: import java.util.Objects;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:2457599: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * A range tombstone marker that indicates the bound of a range tombstone (start or end).
1:a991b64:  */
1:2cc26eb: public class RangeTombstoneBoundMarker extends AbstractRangeTombstoneMarker<ClusteringBound>
6:a991b64: {
1:a991b64:     private final DeletionTime deletion;
1:a991b64: 
1:2cc26eb:     public RangeTombstoneBoundMarker(ClusteringBound bound, DeletionTime deletion)
1:a991b64:     {
1:a991b64:         super(bound);
1:a991b64:         this.deletion = deletion;
6:a991b64:     }
1:a991b64: 
1:a991b64:     public static RangeTombstoneBoundMarker inclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:a991b64:     {
1:2cc26eb:         ClusteringBound bound = ClusteringBound.inclusiveOpen(reversed, boundValues);
1:a991b64:         return new RangeTombstoneBoundMarker(bound, deletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static RangeTombstoneBoundMarker exclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:a991b64:     {
1:2cc26eb:         ClusteringBound bound = ClusteringBound.exclusiveOpen(reversed, boundValues);
1:a991b64:         return new RangeTombstoneBoundMarker(bound, deletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static RangeTombstoneBoundMarker inclusiveClose(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:a991b64:     {
1:2cc26eb:         ClusteringBound bound = ClusteringBound.inclusiveClose(reversed, boundValues);
1:a991b64:         return new RangeTombstoneBoundMarker(bound, deletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static RangeTombstoneBoundMarker exclusiveClose(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:a991b64:     {
1:2cc26eb:         ClusteringBound bound = ClusteringBound.exclusiveClose(reversed, boundValues);
1:a991b64:         return new RangeTombstoneBoundMarker(bound, deletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isBoundary()
1:a991b64:     {
1:a991b64:         return false;
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The deletion time for the range tombstone this is a bound of.
1:a991b64:      */
1:a991b64:     public DeletionTime deletionTime()
1:a991b64:     {
1:a991b64:         return deletion;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DeletionTime openDeletionTime(boolean reversed)
1:a991b64:     {
1:a991b64:         if (!isOpen(reversed))
1:a991b64:             throw new IllegalStateException();
1:a991b64:         return deletion;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DeletionTime closeDeletionTime(boolean reversed)
1:a991b64:     {
1:a991b64:         if (isOpen(reversed))
1:a991b64:             throw new IllegalStateException();
1:a991b64:         return deletion;
1:a991b64:     }
1:a991b64: 
1:7813dee:     public boolean openIsInclusive(boolean reversed)
1:7813dee:     {
1:7813dee:         if (!isOpen(reversed))
1:7813dee:             throw new IllegalStateException();
1:7813dee:         return bound.isInclusive();
1:7813dee:     }
1:7813dee: 
1:7813dee:     public boolean closeIsInclusive(boolean reversed)
1:7813dee:     {
1:7813dee:         if (isOpen(reversed))
1:7813dee:             throw new IllegalStateException();
1:7813dee:         return bound.isInclusive();
1:7813dee:     }
1:7813dee: 
1:2cc26eb:     public ClusteringBound openBound(boolean reversed)
1:a991b64:     {
1:2457599:         return isOpen(reversed) ? clustering() : null;
1:2457599:     }
1:2457599: 
1:2cc26eb:     public ClusteringBound closeBound(boolean reversed)
1:2457599:     {
1:2457599:         return isClose(reversed) ? clustering() : null;
1:2457599:     }
1:2457599: 
1:2457599:     public RangeTombstoneBoundMarker copy(AbstractAllocator allocator)
1:2457599:     {
1:2457599:         return new RangeTombstoneBoundMarker(clustering().copy(allocator), deletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void digest(MessageDigest digest)
1:a991b64:     {
1:a991b64:         bound.digest(digest);
1:a991b64:         deletion.digest(digest);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public String toString(CFMetaData metadata)
1:a991b64:     {
1:2457599:         return "Marker " + bound.toString(metadata) + '@' + deletion.markedForDeleteAt();
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public boolean equals(Object other)
1:a991b64:     {
1:a991b64:         if(!(other instanceof RangeTombstoneBoundMarker))
1:a991b64:             return false;
1:a991b64: 
1:a991b64:         RangeTombstoneBoundMarker that = (RangeTombstoneBoundMarker)other;
1:a991b64:         return this.bound.equals(that.bound)
1:a991b64:             && this.deletion.equals(that.deletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public int hashCode()
1:a991b64:     {
1:a991b64:         return Objects.hash(bound, deletion);
1:a991b64:     }
1:a991b64: }
1:a991b64: 
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:2cc26eb
/////////////////////////////////////////////////////////////////////////
1: public class RangeTombstoneBoundMarker extends AbstractRangeTombstoneMarker<ClusteringBound>
1:     public RangeTombstoneBoundMarker(ClusteringBound bound, DeletionTime deletion)
1:         ClusteringBound bound = ClusteringBound.inclusiveOpen(reversed, boundValues);
1:         ClusteringBound bound = ClusteringBound.exclusiveOpen(reversed, boundValues);
1:         ClusteringBound bound = ClusteringBound.inclusiveClose(reversed, boundValues);
1:         ClusteringBound bound = ClusteringBound.exclusiveClose(reversed, boundValues);
/////////////////////////////////////////////////////////////////////////
1:     public ClusteringBound openBound(boolean reversed)
1:     public ClusteringBound closeBound(boolean reversed)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
/////////////////////////////////////////////////////////////////////////
0:         assert !bound.isBoundary();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public RangeTombstone.Bound openBound(boolean reversed)
1:         return isOpen(reversed) ? clustering() : null;
1:     }
1: 
0:     public RangeTombstone.Bound closeBound(boolean reversed)
1:     {
1:         return isClose(reversed) ? clustering() : null;
1:     }
1: 
1:     public RangeTombstoneBoundMarker copy(AbstractAllocator allocator)
1:     {
1:         return new RangeTombstoneBoundMarker(clustering().copy(allocator), deletion);
/////////////////////////////////////////////////////////////////////////
1:         return "Marker " + bound.toString(metadata) + '@' + deletion.markedForDeleteAt();
commit:7813dee
/////////////////////////////////////////////////////////////////////////
1:     public boolean openIsInclusive(boolean reversed)
1:     {
1:         if (!isOpen(reversed))
1:             throw new IllegalStateException();
1:         return bound.isInclusive();
1:     }
1: 
1:     public boolean closeIsInclusive(boolean reversed)
1:     {
1:         if (isOpen(reversed))
1:             throw new IllegalStateException();
1:         return bound.isInclusive();
1:     }
1: 
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.nio.ByteBuffer;
1: import java.security.MessageDigest;
1: import java.util.Objects;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * A range tombstone marker that indicates the bound of a range tombstone (start or end).
1:  */
0: public class RangeTombstoneBoundMarker extends AbstractRangeTombstoneMarker
1: {
1:     private final DeletionTime deletion;
1: 
0:     public RangeTombstoneBoundMarker(RangeTombstone.Bound bound, DeletionTime deletion)
1:     {
1:         super(bound);
0:         assert bound.kind().isBound();
1:         this.deletion = deletion;
1:     }
1: 
0:     public RangeTombstoneBoundMarker(Slice.Bound bound, DeletionTime deletion)
1:     {
0:         this(new RangeTombstone.Bound(bound.kind(), bound.getRawValues()), deletion);
1:     }
1: 
0:     public static RangeTombstoneBoundMarker inclusiveStart(ClusteringPrefix clustering, DeletionTime deletion)
1:     {
0:         return new RangeTombstoneBoundMarker(new RangeTombstone.Bound(RangeTombstone.Bound.Kind.INCL_START_BOUND, clustering.getRawValues()), deletion);
1:     }
1: 
0:     public static RangeTombstoneBoundMarker inclusiveEnd(ClusteringPrefix clustering, DeletionTime deletion)
1:     {
0:         return new RangeTombstoneBoundMarker(new RangeTombstone.Bound(RangeTombstone.Bound.Kind.INCL_END_BOUND, clustering.getRawValues()), deletion);
1:     }
1: 
1:     public static RangeTombstoneBoundMarker inclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:     {
0:         RangeTombstone.Bound bound = RangeTombstone.Bound.inclusiveOpen(reversed, boundValues);
1:         return new RangeTombstoneBoundMarker(bound, deletion);
1:     }
1: 
1:     public static RangeTombstoneBoundMarker exclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:     {
0:         RangeTombstone.Bound bound = RangeTombstone.Bound.exclusiveOpen(reversed, boundValues);
1:         return new RangeTombstoneBoundMarker(bound, deletion);
1:     }
1: 
1:     public static RangeTombstoneBoundMarker inclusiveClose(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:     {
0:         RangeTombstone.Bound bound = RangeTombstone.Bound.inclusiveClose(reversed, boundValues);
1:         return new RangeTombstoneBoundMarker(bound, deletion);
1:     }
1: 
1:     public static RangeTombstoneBoundMarker exclusiveClose(boolean reversed, ByteBuffer[] boundValues, DeletionTime deletion)
1:     {
0:         RangeTombstone.Bound bound = RangeTombstone.Bound.exclusiveClose(reversed, boundValues);
1:         return new RangeTombstoneBoundMarker(bound, deletion);
1:     }
1: 
1:     public boolean isBoundary()
1:     {
1:         return false;
1:     }
1: 
1:     /**
1:      * The deletion time for the range tombstone this is a bound of.
1:      */
1:     public DeletionTime deletionTime()
1:     {
1:         return deletion;
1:     }
1: 
0:     public boolean isOpen(boolean reversed)
1:     {
0:         return bound.kind().isOpen(reversed);
1:     }
1: 
0:     public boolean isClose(boolean reversed)
1:     {
0:         return bound.kind().isClose(reversed);
1:     }
1: 
1:     public DeletionTime openDeletionTime(boolean reversed)
1:     {
1:         if (!isOpen(reversed))
1:             throw new IllegalStateException();
1:         return deletion;
1:     }
1: 
1:     public DeletionTime closeDeletionTime(boolean reversed)
1:     {
1:         if (isOpen(reversed))
1:             throw new IllegalStateException();
1:         return deletion;
1:     }
1: 
0:     public void copyTo(RangeTombstoneMarker.Writer writer)
1:     {
0:         copyBoundTo(writer);
0:         writer.writeBoundDeletion(deletion);
0:         writer.endOfMarker();
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         bound.digest(digest);
1:         deletion.digest(digest);
1:     }
1: 
1:     public String toString(CFMetaData metadata)
1:     {
0:         StringBuilder sb = new StringBuilder();
0:         sb.append("Marker ");
0:         sb.append(bound.toString(metadata));
0:         sb.append("@").append(deletion.markedForDeleteAt());
0:         return sb.toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if(!(other instanceof RangeTombstoneBoundMarker))
1:             return false;
1: 
1:         RangeTombstoneBoundMarker that = (RangeTombstoneBoundMarker)other;
1:         return this.bound.equals(that.bound)
1:             && this.deletion.equals(that.deletion);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hash(bound, deletion);
1:     }
1: }
1: 
============================================================================