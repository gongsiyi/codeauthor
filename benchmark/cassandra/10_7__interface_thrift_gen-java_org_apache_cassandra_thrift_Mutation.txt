1:beba91e: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
5:beba91e:  *
1:beba91e:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:beba91e:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:beba91e: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:beba91e: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:beba91e: import java.util.List;
1:beba91e: import java.util.ArrayList;
1:beba91e: import java.util.Map;
1:beba91e: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:beba91e: import java.util.Set;
1:beba91e: import java.util.HashSet;
1:04d5ec3: import java.util.EnumSet;
1:beba91e: import java.util.Collections;
1:beba91e: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:beba91e: import java.util.Arrays;
1:beba91e: import org.slf4j.Logger;
1:beba91e: import org.slf4j.LoggerFactory;
1:beba91e: 
1:beba91e: /**
1:9a0bbc5:  * A Mutation is either an insert (represented by filling column_or_supercolumn) or a deletion (represented by filling the deletion attribute).
1:9a0bbc5:  * @param column_or_supercolumn. An insert to a column or supercolumn (possibly counter column or supercolumn)
1:beba91e:  * @param deletion. A deletion of a column or supercolumn
1:beba91e:  */
1:bffd9ea: public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fields>, java.io.Serializable, Cloneable, Comparable<Mutation> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mutation");
1:beba91e: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField COLUMN_OR_SUPERCOLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("column_or_supercolumn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField DELETION_FIELD_DESC = new org.apache.thrift.protocol.TField("deletion", org.apache.thrift.protocol.TType.STRUCT, (short)2);
1:beba91e: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new MutationStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new MutationTupleSchemeFactory());
1:beba91e:   }
1:beba91e: 
1:b153d45:   public ColumnOrSuperColumn column_or_supercolumn; // optional
1:b153d45:   public Deletion deletion; // optional
1:beba91e: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:04d5ec3:     COLUMN_OR_SUPERCOLUMN((short)1, "column_or_supercolumn"),
1:9a0bbc5:     DELETION((short)2, "deletion");
1:beba91e: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:beba91e: 
1:04d5ec3:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:b153d45:       }
5:b153d45:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:beba91e:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // COLUMN_OR_SUPERCOLUMN
1:d849c69:           return COLUMN_OR_SUPERCOLUMN;
1:d849c69:         case 2: // DELETION
1:d849c69:           return DELETION;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:beba91e:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:beba91e:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
3:04d5ec3:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:b153d45: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:b153d45:     }
1:b153d45:   }
5:3bbfb06: 
1:beba91e:   // isset id assignments
1:b153d45:   private _Fields optionals[] = {_Fields.COLUMN_OR_SUPERCOLUMN,_Fields.DELETION};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:beba91e:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.COLUMN_OR_SUPERCOLUMN, new org.apache.thrift.meta_data.FieldMetaData("column_or_supercolumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnOrSuperColumn.class)));
1:4ec9511:     tmpMap.put(_Fields.DELETION, new org.apache.thrift.meta_data.FieldMetaData("deletion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Deletion.class)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mutation.class, metaDataMap);
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Mutation() {
1:beba91e:   }
1:beba91e: 
1:beba91e:   /**
1:beba91e:    * Performs a deep copy on <i>other</i>.
1:beba91e:    */
1:beba91e:   public Mutation(Mutation other) {
1:beba91e:     if (other.isSetColumn_or_supercolumn()) {
1:beba91e:       this.column_or_supercolumn = new ColumnOrSuperColumn(other.column_or_supercolumn);
1:beba91e:     }
1:beba91e:     if (other.isSetDeletion()) {
1:beba91e:       this.deletion = new Deletion(other.deletion);
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Mutation deepCopy() {
2:beba91e:     return new Mutation(this);
1:beba91e:   }
1:beba91e: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.column_or_supercolumn = null;
1:e7a385a:     this.deletion = null;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public ColumnOrSuperColumn getColumn_or_supercolumn() {
1:beba91e:     return this.column_or_supercolumn;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Mutation setColumn_or_supercolumn(ColumnOrSuperColumn column_or_supercolumn) {
2:beba91e:     this.column_or_supercolumn = column_or_supercolumn;
1:beba91e:     return this;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void unsetColumn_or_supercolumn() {
1:beba91e:     this.column_or_supercolumn = null;
1:beba91e:   }
1:beba91e: 
1:4ec9511:   /** Returns true if field column_or_supercolumn is set (has been assigned a value) and false otherwise */
1:beba91e:   public boolean isSetColumn_or_supercolumn() {
1:beba91e:     return this.column_or_supercolumn != null;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void setColumn_or_supercolumnIsSet(boolean value) {
1:beba91e:     if (!value) {
1:beba91e:       this.column_or_supercolumn = null;
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Deletion getDeletion() {
1:beba91e:     return this.deletion;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Mutation setDeletion(Deletion deletion) {
2:beba91e:     this.deletion = deletion;
1:beba91e:     return this;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void unsetDeletion() {
1:beba91e:     this.deletion = null;
1:beba91e:   }
1:beba91e: 
1:4ec9511:   /** Returns true if field deletion is set (has been assigned a value) and false otherwise */
1:beba91e:   public boolean isSetDeletion() {
1:beba91e:     return this.deletion != null;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void setDeletionIsSet(boolean value) {
1:beba91e:     if (!value) {
1:beba91e:       this.deletion = null;
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
2:beba91e:     case COLUMN_OR_SUPERCOLUMN:
1:beba91e:       if (value == null) {
1:beba91e:         unsetColumn_or_supercolumn();
3:beba91e:       } else {
1:beba91e:         setColumn_or_supercolumn((ColumnOrSuperColumn)value);
1:beba91e:       }
4:beba91e:       break;
1:beba91e: 
2:beba91e:     case DELETION:
1:beba91e:       if (value == null) {
1:beba91e:         unsetDeletion();
1:2b69c40:       } else {
1:beba91e:         setDeletion((Deletion)value);
1:2b69c40:       }
1:2b69c40:       break;
1:beba91e: 
1:2b69c40:     }
1:beba91e:   }
1:beba91e: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:beba91e:     case COLUMN_OR_SUPERCOLUMN:
1:beba91e:       return getColumn_or_supercolumn();
1:beba91e: 
1:beba91e:     case DELETION:
1:beba91e:       return getDeletion();
1:beba91e: 
1:beba91e:     }
1:04d5ec3:     throw new IllegalStateException();
1:beba91e:   }
1:beba91e: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:beba91e:     case COLUMN_OR_SUPERCOLUMN:
1:beba91e:       return isSetColumn_or_supercolumn();
1:beba91e:     case DELETION:
1:beba91e:       return isSetDeletion();
1:beba91e:     }
1:04d5ec3:     throw new IllegalStateException();
1:beba91e:   }
1:beba91e: 
1:beba91e:   @Override
1:beba91e:   public boolean equals(Object that) {
1:beba91e:     if (that == null)
1:beba91e:       return false;
1:beba91e:     if (that instanceof Mutation)
1:beba91e:       return this.equals((Mutation)that);
1:beba91e:     return false;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public boolean equals(Mutation that) {
1:beba91e:     if (that == null)
1:beba91e:       return false;
1:beba91e: 
1:beba91e:     boolean this_present_column_or_supercolumn = true && this.isSetColumn_or_supercolumn();
1:beba91e:     boolean that_present_column_or_supercolumn = true && that.isSetColumn_or_supercolumn();
1:beba91e:     if (this_present_column_or_supercolumn || that_present_column_or_supercolumn) {
1:beba91e:       if (!(this_present_column_or_supercolumn && that_present_column_or_supercolumn))
1:beba91e:         return false;
1:beba91e:       if (!this.column_or_supercolumn.equals(that.column_or_supercolumn))
1:beba91e:         return false;
1:beba91e:     }
1:beba91e: 
1:beba91e:     boolean this_present_deletion = true && this.isSetDeletion();
1:beba91e:     boolean that_present_deletion = true && that.isSetDeletion();
1:beba91e:     if (this_present_deletion || that_present_deletion) {
1:beba91e:       if (!(this_present_deletion && that_present_deletion))
1:beba91e:         return false;
1:beba91e:       if (!this.deletion.equals(that.deletion))
1:beba91e:         return false;
1:beba91e:     }
1:beba91e: 
1:beba91e:     return true;
1:beba91e:   }
1:beba91e: 
1:beba91e:   @Override
1:beba91e:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_column_or_supercolumn = true && (isSetColumn_or_supercolumn());
1:d966ed0:     builder.append(present_column_or_supercolumn);
1:d966ed0:     if (present_column_or_supercolumn)
1:d966ed0:       builder.append(column_or_supercolumn);
1:d966ed0: 
1:d966ed0:     boolean present_deletion = true && (isSetDeletion());
1:d966ed0:     builder.append(present_deletion);
1:d966ed0:     if (present_deletion)
1:d966ed0:       builder.append(deletion);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:beba91e:   }
1:beba91e: 
1:bffd9ea:   @Override
1:beba91e:   public int compareTo(Mutation other) {
1:beba91e:     if (!getClass().equals(other.getClass())) {
1:beba91e:       return getClass().getName().compareTo(other.getClass().getName());
1:beba91e:     }
1:beba91e: 
1:beba91e:     int lastComparison = 0;
1:beba91e: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetColumn_or_supercolumn()).compareTo(other.isSetColumn_or_supercolumn());
3:beba91e:     if (lastComparison != 0) {
3:beba91e:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetColumn_or_supercolumn()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_or_supercolumn, other.column_or_supercolumn);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetDeletion()).compareTo(other.isSetDeletion());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:beba91e:     }
1:e7a385a:     if (isSetDeletion()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletion, other.deletion);
1:beba91e:       if (lastComparison != 0) {
1:beba91e:         return lastComparison;
1:beba91e:       }
1:beba91e:     }
2:beba91e:     return 0;
1:beba91e:   }
1:beba91e: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:beba91e:   }
1:beba91e: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:beba91e:   }
1:beba91e: 
1:beba91e:   @Override
1:beba91e:   public String toString() {
1:beba91e:     StringBuilder sb = new StringBuilder("Mutation(");
1:beba91e:     boolean first = true;
1:beba91e: 
2:beba91e:     if (isSetColumn_or_supercolumn()) {
1:beba91e:       sb.append("column_or_supercolumn:");
1:beba91e:       if (this.column_or_supercolumn == null) {
1:beba91e:         sb.append("null");
1:2b69c40:       } else {
1:beba91e:         sb.append(this.column_or_supercolumn);
1:beba91e:       }
1:beba91e:       first = false;
1:beba91e:     }
2:beba91e:     if (isSetDeletion()) {
1:beba91e:       if (!first) sb.append(", ");
1:beba91e:       sb.append("deletion:");
1:beba91e:       if (this.deletion == null) {
1:beba91e:         sb.append("null");
1:beba91e:       } else {
1:beba91e:         sb.append(this.deletion);
1:beba91e:       }
1:beba91e:       first = false;
1:beba91e:     }
1:beba91e:     sb.append(")");
1:beba91e:     return sb.toString();
1:beba91e:   }
1:beba91e: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:beba91e:     // check for required fields
1:b153d45:     // check for sub-struct validity
1:b153d45:     if (column_or_supercolumn != null) {
1:b153d45:       column_or_supercolumn.validate();
1:beba91e:     }
1:b153d45:     if (deletion != null) {
1:b153d45:       deletion.validate();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class MutationStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public MutationStandardScheme getScheme() {
1:b153d45:       return new MutationStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class MutationStandardScheme extends StandardScheme<Mutation> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, Mutation struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:beba91e:       iprot.readStructBegin();
1:beba91e:       while (true)
3:beba91e:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:2b69c40:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // COLUMN_OR_SUPERCOLUMN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.column_or_supercolumn = new ColumnOrSuperColumn();
1:b153d45:               struct.column_or_supercolumn.read(iprot);
1:b153d45:               struct.setColumn_or_supercolumnIsSet(true);
1:beba91e:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:beba91e:             break;
1:2b69c40:           case 2: // DELETION
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.deletion = new Deletion();
1:b153d45:               struct.deletion.read(iprot);
1:b153d45:               struct.setDeletionIsSet(true);
1:beba91e:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:beba91e:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:beba91e:       iprot.readStructEnd();
1:b153d45: 
1:beba91e:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, Mutation struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:beba91e:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.column_or_supercolumn != null) {
1:b153d45:         if (struct.isSetColumn_or_supercolumn()) {
1:beba91e:           oprot.writeFieldBegin(COLUMN_OR_SUPERCOLUMN_FIELD_DESC);
1:b153d45:           struct.column_or_supercolumn.write(oprot);
1:beba91e:           oprot.writeFieldEnd();
1:beba91e:         }
1:beba91e:       }
1:b153d45:       if (struct.deletion != null) {
1:b153d45:         if (struct.isSetDeletion()) {
1:beba91e:           oprot.writeFieldBegin(DELETION_FIELD_DESC);
1:b153d45:           struct.deletion.write(oprot);
1:beba91e:           oprot.writeFieldEnd();
1:beba91e:         }
1:b153d45:       }
1:beba91e:       oprot.writeFieldStop();
1:beba91e:       oprot.writeStructEnd();
1:beba91e:     }
1:beba91e: 
1:beba91e:   }
1:beba91e: 
1:b153d45:   private static class MutationTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public MutationTupleScheme getScheme() {
1:b153d45:       return new MutationTupleScheme();
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:b153d45:   private static class MutationTupleScheme extends TupleScheme<Mutation> {
1:beba91e: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, Mutation struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetColumn_or_supercolumn()) {
1:b153d45:         optionals.set(0);
1:beba91e:       }
1:b153d45:       if (struct.isSetDeletion()) {
1:b153d45:         optionals.set(1);
1:beba91e:       }
1:b153d45:       oprot.writeBitSet(optionals, 2);
1:b153d45:       if (struct.isSetColumn_or_supercolumn()) {
1:b153d45:         struct.column_or_supercolumn.write(oprot);
1:beba91e:       }
1:b153d45:       if (struct.isSetDeletion()) {
1:b153d45:         struct.deletion.write(oprot);
1:beba91e:       }
1:b153d45:     }
1:beba91e: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, Mutation struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       BitSet incoming = iprot.readBitSet(2);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.column_or_supercolumn = new ColumnOrSuperColumn();
1:b153d45:         struct.column_or_supercolumn.read(iprot);
1:b153d45:         struct.setColumn_or_supercolumnIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.deletion = new Deletion();
1:b153d45:         struct.deletion.read(iprot);
1:b153d45:         struct.setDeletionIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fields>, java.io.Serializable, Cloneable, Comparable<Mutation> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetColumn_or_supercolumn()).compareTo(other.isSetColumn_or_supercolumn());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_or_supercolumn, other.column_or_supercolumn);
1:     lastComparison = Boolean.valueOf(isSetDeletion()).compareTo(other.isSetDeletion());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletion, other.deletion);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.column_or_supercolumn = null;
1:     this.deletion = null;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (isSetColumn_or_supercolumn()) {
0:       lastComparison = TBaseHelper.compareTo(this.column_or_supercolumn, typedOther.column_or_supercolumn);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetDeletion()) {
0:       lastComparison = TBaseHelper.compareTo(this.deletion, typedOther.deletion);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_column_or_supercolumn = true && (isSetColumn_or_supercolumn());
1:     builder.append(present_column_or_supercolumn);
1:     if (present_column_or_supercolumn)
1:       builder.append(column_or_supercolumn);
1: 
1:     boolean present_deletion = true && (isSetDeletion());
1:     builder.append(present_deletion);
1:     if (present_deletion)
1:       builder.append(deletion);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class Mutation implements TBase<Mutation, Mutation._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // COLUMN_OR_SUPERCOLUMN
1:           return COLUMN_OR_SUPERCOLUMN;
1:         case 2: // DELETION
1:           return DELETION;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.COLUMN_OR_SUPERCOLUMN, new FieldMetaData("column_or_supercolumn", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, ColumnOrSuperColumn.class)));
0:     tmpMap.put(_Fields.DELETION, new FieldMetaData("deletion", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, Deletion.class)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetColumn_or_supercolumn()) {      lastComparison = TBaseHelper.compareTo(this.column_or_supercolumn, typedOther.column_or_supercolumn);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetDeletion()) {      lastComparison = TBaseHelper.compareTo(this.deletion, typedOther.deletion);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetColumn_or_supercolumn()).compareTo(typedOther.isSetColumn_or_supercolumn());
0:     if (isSetColumn_or_supercolumn()) {      lastComparison = TBaseHelper.compareTo(column_or_supercolumn, typedOther.column_or_supercolumn);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetDeletion()).compareTo(typedOther.isSetDeletion());
0:     if (isSetDeletion()) {      lastComparison = TBaseHelper.compareTo(deletion, typedOther.deletion);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // COLUMN_OR_SUPERCOLUMN
0:           if (field.type == TType.STRUCT) {
0:             this.column_or_supercolumn = new ColumnOrSuperColumn();
0:             this.column_or_supercolumn.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // DELETION
0:           if (field.type == TType.STRUCT) {
0:             this.deletion = new Deletion();
0:             this.deletion.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:beba91e
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
1: /**
0:  * A Mutation is either an insert, represented by filling column_or_supercolumn, or a deletion, represented by filling the deletion attribute.
0:  * @param column_or_supercolumn. An insert to a column or supercolumn
1:  * @param deletion. A deletion of a column or supercolumn
1:  */
0: public class Mutation implements TBase, java.io.Serializable, Cloneable, Comparable<Mutation> {
0:   private static final TStruct STRUCT_DESC = new TStruct("Mutation");
0:   private static final TField COLUMN_OR_SUPERCOLUMN_FIELD_DESC = new TField("column_or_supercolumn", TType.STRUCT, (short)1);
0:   private static final TField DELETION_FIELD_DESC = new TField("deletion", TType.STRUCT, (short)2);
1: 
0:   public ColumnOrSuperColumn column_or_supercolumn;
0:   public Deletion deletion;
0:   public static final int COLUMN_OR_SUPERCOLUMN = 1;
0:   public static final int DELETION = 2;
1: 
1:   // isset id assignments
1: 
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(COLUMN_OR_SUPERCOLUMN, new FieldMetaData("column_or_supercolumn", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, ColumnOrSuperColumn.class)));
0:     put(DELETION, new FieldMetaData("deletion", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, Deletion.class)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(Mutation.class, metaDataMap);
1:   }
1: 
1:   public Mutation() {
1:   }
1: 
0:   public Mutation(
0:     ColumnOrSuperColumn column_or_supercolumn,
0:     Deletion deletion)
1:   {
0:     this();
1:     this.column_or_supercolumn = column_or_supercolumn;
1:     this.deletion = deletion;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public Mutation(Mutation other) {
1:     if (other.isSetColumn_or_supercolumn()) {
1:       this.column_or_supercolumn = new ColumnOrSuperColumn(other.column_or_supercolumn);
1:     }
1:     if (other.isSetDeletion()) {
1:       this.deletion = new Deletion(other.deletion);
1:     }
1:   }
1: 
1:   public Mutation deepCopy() {
1:     return new Mutation(this);
1:   }
1: 
0:   @Deprecated
0:   public Mutation clone() {
1:     return new Mutation(this);
1:   }
1: 
1:   public ColumnOrSuperColumn getColumn_or_supercolumn() {
1:     return this.column_or_supercolumn;
1:   }
1: 
1:   public Mutation setColumn_or_supercolumn(ColumnOrSuperColumn column_or_supercolumn) {
1:     this.column_or_supercolumn = column_or_supercolumn;
1:     return this;
1:   }
1: 
1:   public void unsetColumn_or_supercolumn() {
1:     this.column_or_supercolumn = null;
1:   }
1: 
0:   // Returns true if field column_or_supercolumn is set (has been asigned a value) and false otherwise
1:   public boolean isSetColumn_or_supercolumn() {
1:     return this.column_or_supercolumn != null;
1:   }
1: 
1:   public void setColumn_or_supercolumnIsSet(boolean value) {
1:     if (!value) {
1:       this.column_or_supercolumn = null;
1:     }
1:   }
1: 
1:   public Deletion getDeletion() {
1:     return this.deletion;
1:   }
1: 
1:   public Mutation setDeletion(Deletion deletion) {
1:     this.deletion = deletion;
1:     return this;
1:   }
1: 
1:   public void unsetDeletion() {
1:     this.deletion = null;
1:   }
1: 
0:   // Returns true if field deletion is set (has been asigned a value) and false otherwise
1:   public boolean isSetDeletion() {
1:     return this.deletion != null;
1:   }
1: 
1:   public void setDeletionIsSet(boolean value) {
1:     if (!value) {
1:       this.deletion = null;
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
1:     case COLUMN_OR_SUPERCOLUMN:
1:       if (value == null) {
1:         unsetColumn_or_supercolumn();
1:       } else {
1:         setColumn_or_supercolumn((ColumnOrSuperColumn)value);
1:       }
1:       break;
1: 
1:     case DELETION:
1:       if (value == null) {
1:         unsetDeletion();
1:       } else {
1:         setDeletion((Deletion)value);
1:       }
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
1:     case COLUMN_OR_SUPERCOLUMN:
1:       return getColumn_or_supercolumn();
1: 
1:     case DELETION:
1:       return getDeletion();
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
1:     case COLUMN_OR_SUPERCOLUMN:
1:       return isSetColumn_or_supercolumn();
1:     case DELETION:
1:       return isSetDeletion();
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof Mutation)
1:       return this.equals((Mutation)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(Mutation that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_column_or_supercolumn = true && this.isSetColumn_or_supercolumn();
1:     boolean that_present_column_or_supercolumn = true && that.isSetColumn_or_supercolumn();
1:     if (this_present_column_or_supercolumn || that_present_column_or_supercolumn) {
1:       if (!(this_present_column_or_supercolumn && that_present_column_or_supercolumn))
1:         return false;
1:       if (!this.column_or_supercolumn.equals(that.column_or_supercolumn))
1:         return false;
1:     }
1: 
1:     boolean this_present_deletion = true && this.isSetDeletion();
1:     boolean that_present_deletion = true && that.isSetDeletion();
1:     if (this_present_deletion || that_present_deletion) {
1:       if (!(this_present_deletion && that_present_deletion))
1:         return false;
1:       if (!this.deletion.equals(that.deletion))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(Mutation other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     Mutation typedOther = (Mutation)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetColumn_or_supercolumn()).compareTo(isSetColumn_or_supercolumn());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(column_or_supercolumn, typedOther.column_or_supercolumn);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetDeletion()).compareTo(isSetDeletion());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(deletion, typedOther.deletion);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id)
1:       {
1:         case COLUMN_OR_SUPERCOLUMN:
0:           if (field.type == TType.STRUCT) {
0:             this.column_or_supercolumn = new ColumnOrSuperColumn();
0:             this.column_or_supercolumn.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case DELETION:
0:           if (field.type == TType.STRUCT) {
0:             this.deletion = new Deletion();
0:             this.deletion.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:           break;
1:       }
0:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.column_or_supercolumn != null) {
1:       if (isSetColumn_or_supercolumn()) {
1:         oprot.writeFieldBegin(COLUMN_OR_SUPERCOLUMN_FIELD_DESC);
0:         this.column_or_supercolumn.write(oprot);
1:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.deletion != null) {
1:       if (isSetDeletion()) {
1:         oprot.writeFieldBegin(DELETION_FIELD_DESC);
0:         this.deletion.write(oprot);
1:         oprot.writeFieldEnd();
1:       }
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("Mutation(");
1:     boolean first = true;
1: 
1:     if (isSetColumn_or_supercolumn()) {
1:       sb.append("column_or_supercolumn:");
1:       if (this.column_or_supercolumn == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.column_or_supercolumn);
1:       }
1:       first = false;
1:     }
1:     if (isSetDeletion()) {
1:       if (!first) sb.append(", ");
1:       sb.append("deletion:");
1:       if (this.deletion == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.deletion);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
0:     // check that fields of type enum have valid values
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new MutationStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new MutationTupleSchemeFactory());
1:   }
1: 
1:   public ColumnOrSuperColumn column_or_supercolumn; // optional
1:   public Deletion deletion; // optional
/////////////////////////////////////////////////////////////////////////
1:   private _Fields optionals[] = {_Fields.COLUMN_OR_SUPERCOLUMN,_Fields.DELETION};
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
1:     if (column_or_supercolumn != null) {
1:       column_or_supercolumn.validate();
1:     }
1:     if (deletion != null) {
1:       deletion.validate();
1:     }
/////////////////////////////////////////////////////////////////////////
1:   private static class MutationStandardSchemeFactory implements SchemeFactory {
1:     public MutationStandardScheme getScheme() {
1:       return new MutationStandardScheme();
1:     }
1:   }
1: 
1:   private static class MutationStandardScheme extends StandardScheme<Mutation> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, Mutation struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // COLUMN_OR_SUPERCOLUMN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.column_or_supercolumn = new ColumnOrSuperColumn();
1:               struct.column_or_supercolumn.read(iprot);
1:               struct.setColumn_or_supercolumnIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // DELETION
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.deletion = new Deletion();
1:               struct.deletion.read(iprot);
1:               struct.setDeletionIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, Mutation struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.column_or_supercolumn != null) {
1:         if (struct.isSetColumn_or_supercolumn()) {
0:           oprot.writeFieldBegin(COLUMN_OR_SUPERCOLUMN_FIELD_DESC);
1:           struct.column_or_supercolumn.write(oprot);
0:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.deletion != null) {
1:         if (struct.isSetDeletion()) {
0:           oprot.writeFieldBegin(DELETION_FIELD_DESC);
1:           struct.deletion.write(oprot);
0:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class MutationTupleSchemeFactory implements SchemeFactory {
1:     public MutationTupleScheme getScheme() {
1:       return new MutationTupleScheme();
1:     }
1:   }
1: 
1:   private static class MutationTupleScheme extends TupleScheme<Mutation> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, Mutation struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetColumn_or_supercolumn()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetDeletion()) {
1:         optionals.set(1);
1:       }
1:       oprot.writeBitSet(optionals, 2);
1:       if (struct.isSetColumn_or_supercolumn()) {
1:         struct.column_or_supercolumn.write(oprot);
1:       }
1:       if (struct.isSetDeletion()) {
1:         struct.deletion.write(oprot);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, Mutation struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       BitSet incoming = iprot.readBitSet(2);
1:       if (incoming.get(0)) {
1:         struct.column_or_supercolumn = new ColumnOrSuperColumn();
1:         struct.column_or_supercolumn.read(iprot);
1:         struct.setColumn_or_supercolumnIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.deletion = new Deletion();
1:         struct.deletion.read(iprot);
1:         struct.setDeletionIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
0:   public ColumnOrSuperColumn column_or_supercolumn; // required
0:   public Deletion deletion; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9a0bbc5
/////////////////////////////////////////////////////////////////////////
1:  * A Mutation is either an insert (represented by filling column_or_supercolumn) or a deletion (represented by filling the deletion attribute).
1:  * @param column_or_supercolumn. An insert to a column or supercolumn (possibly counter column or supercolumn)
/////////////////////////////////////////////////////////////////////////
1:     DELETION((short)2, "deletion");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3bbfb06
/////////////////////////////////////////////////////////////////////////
0:  * A Mutation is either an insert (represented by filling column_or_supercolumn), a deletion (represented by filling the deletion attribute),
0:  * a counter addition (represented by filling counter), or a counter deletion (represented by filling counter_deletion).
/////////////////////////////////////////////////////////////////////////
0:   private static final TField COUNTER_FIELD_DESC = new TField("counter", TType.STRUCT, (short)3);
0:   public Counter counter;
0:     DELETION((short)2, "deletion"),
0:     COUNTER((short)3, "counter");
/////////////////////////////////////////////////////////////////////////
0:         case 3: // COUNTER
0:           return COUNTER;
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.COUNTER, new FieldMetaData("counter", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, Counter.class)));
/////////////////////////////////////////////////////////////////////////
0:     if (other.isSetCounter()) {
0:       this.counter = new Counter(other.counter);
0:     }
/////////////////////////////////////////////////////////////////////////
0:     this.counter = null;
/////////////////////////////////////////////////////////////////////////
0:   public Counter getCounter() {
0:     return this.counter;
0:   }
1: 
0:   public Mutation setCounter(Counter counter) {
0:     this.counter = counter;
0:     return this;
0:   }
1: 
0:   public void unsetCounter() {
0:     this.counter = null;
0:   }
1: 
0:   /** Returns true if field counter is set (has been asigned a value) and false otherwise */
0:   public boolean isSetCounter() {
0:     return this.counter != null;
0:   }
1: 
0:   public void setCounterIsSet(boolean value) {
0:     if (!value) {
0:       this.counter = null;
0:     }
0:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     case COUNTER:
0:       if (value == null) {
0:         unsetCounter();
0:       } else {
0:         setCounter((Counter)value);
0:       }
0:       break;
0: 
/////////////////////////////////////////////////////////////////////////
0:     case COUNTER:
0:       return getCounter();
0: 
/////////////////////////////////////////////////////////////////////////
0:     case COUNTER:
0:       return isSetCounter();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_counter = true && this.isSetCounter();
0:     boolean that_present_counter = true && that.isSetCounter();
0:     if (this_present_counter || that_present_counter) {
0:       if (!(this_present_counter && that_present_counter))
0:         return false;
0:       if (!this.counter.equals(that.counter))
0:         return false;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:     boolean present_counter = true && (isSetCounter());
0:     builder.append(present_counter);
0:     if (present_counter)
0:       builder.append(counter);
0: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetCounter()).compareTo(typedOther.isSetCounter());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetCounter()) {
0:       lastComparison = TBaseHelper.compareTo(this.counter, typedOther.counter);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
/////////////////////////////////////////////////////////////////////////
0:         case 3: // COUNTER
0:           if (field.type == TType.STRUCT) {
0:             this.counter = new Counter();
0:             this.counter.read(iprot);
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (this.counter != null) {
0:       if (isSetCounter()) {
0:         oprot.writeFieldBegin(COUNTER_FIELD_DESC);
0:         this.counter.write(oprot);
0:         oprot.writeFieldEnd();
0:       }
0:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetCounter()) {
0:       if (!first) sb.append(", ");
0:       sb.append("counter:");
0:       if (this.counter == null) {
0:         sb.append("null");
0:       } else {
0:         sb.append(this.counter);
0:       }
0:       first = false;
0:     }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mutation");
1:   private static final org.apache.thrift.protocol.TField COLUMN_OR_SUPERCOLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("column_or_supercolumn", org.apache.thrift.protocol.TType.STRUCT, (short)1);
1:   private static final org.apache.thrift.protocol.TField DELETION_FIELD_DESC = new org.apache.thrift.protocol.TField("deletion", org.apache.thrift.protocol.TType.STRUCT, (short)2);
0:   private static final org.apache.thrift.protocol.TField COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("counter", org.apache.thrift.protocol.TType.STRUCT, (short)3);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.COLUMN_OR_SUPERCOLUMN, new org.apache.thrift.meta_data.FieldMetaData("column_or_supercolumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnOrSuperColumn.class)));
1:     tmpMap.put(_Fields.DELETION, new org.apache.thrift.meta_data.FieldMetaData("deletion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Deletion.class)));
0:     tmpMap.put(_Fields.COUNTER, new org.apache.thrift.meta_data.FieldMetaData("counter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Counter.class)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mutation.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field column_or_supercolumn is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field deletion is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field counter is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_or_supercolumn, typedOther.column_or_supercolumn);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletion, typedOther.deletion);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter, typedOther.counter);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class Mutation implements TBase<Mutation._Fields>, java.io.Serializable, Cloneable, Comparable<Mutation> {
0: 
0: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     COLUMN_OR_SUPERCOLUMN((short)1, "column_or_supercolumn"),
0:     DELETION((short)2, "deletion");
0: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
0: 
1:     private final short _thriftId;
1:     private final String _fieldName;
0: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
0: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
0: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.COLUMN_OR_SUPERCOLUMN, new FieldMetaData("column_or_supercolumn", TFieldRequirementType.OPTIONAL, 
0:     put(_Fields.DELETION, new FieldMetaData("deletion", TFieldRequirementType.OPTIONAL, 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field column_or_supercolumn is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field deletion is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
0: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   }
0: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case COLUMN_OR_SUPERCOLUMN:
0:             if (field.type == TType.STRUCT) {
0:               this.column_or_supercolumn = new ColumnOrSuperColumn();
0:               this.column_or_supercolumn.read(iprot);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case DELETION:
0:             if (field.type == TType.STRUCT) {
0:               this.deletion = new Deletion();
0:               this.deletion.read(iprot);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
============================================================================