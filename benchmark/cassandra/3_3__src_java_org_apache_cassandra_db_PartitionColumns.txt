1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
1:a991b64: 
1:a991b64: import java.util.*;
1:a991b64: 
1:a991b64: import com.google.common.collect.Iterators;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:5250d7f: import org.apache.cassandra.utils.btree.BTreeSet;
1:a991b64: 
1:5250d7f: import static java.util.Comparator.naturalOrder;
1:c3bc856: 
1:a991b64: /**
1:a991b64:  * Columns (or a subset of the columns) that a partition contains.
1:a991b64:  * This mainly groups both static and regular columns for convenience.
1:a991b64:  */
1:a991b64: public class PartitionColumns implements Iterable<ColumnDefinition>
1:a991b64: {
1:a991b64:     public static PartitionColumns NONE = new PartitionColumns(Columns.NONE, Columns.NONE);
1:a991b64: 
1:a991b64:     public final Columns statics;
1:a991b64:     public final Columns regulars;
1:a991b64: 
1:a991b64:     public PartitionColumns(Columns statics, Columns regulars)
1:a991b64:     {
1:c3bc856:         assert statics != null && regulars != null;
1:a991b64:         this.statics = statics;
1:a991b64:         this.regulars = regulars;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static PartitionColumns of(ColumnDefinition column)
1:a991b64:     {
1:a991b64:         return new PartitionColumns(column.isStatic() ? Columns.of(column) : Columns.NONE,
1:a991b64:                                     column.isStatic() ? Columns.NONE : Columns.of(column));
1:a991b64:     }
1:a991b64: 
1:a991b64:     public PartitionColumns without(ColumnDefinition column)
1:a991b64:     {
1:a991b64:         return new PartitionColumns(column.isStatic() ? statics.without(column) : statics,
1:a991b64:                                     column.isStatic() ? regulars : regulars.without(column));
1:a991b64:     }
1:a991b64: 
1:a991b64:     public PartitionColumns withoutStatics()
1:a991b64:     {
1:a991b64:         return statics.isEmpty() ? this : new PartitionColumns(Columns.NONE, regulars);
1:a991b64:     }
1:a991b64: 
1:c3bc856:     public PartitionColumns mergeTo(PartitionColumns that)
1:a991b64:     {
1:c3bc856:         if (this == that)
1:c3bc856:             return this;
1:c3bc856:         Columns statics = this.statics.mergeTo(that.statics);
1:c3bc856:         Columns regulars = this.regulars.mergeTo(that.regulars);
1:c3bc856:         if (statics == this.statics && regulars == this.regulars)
1:c3bc856:             return this;
1:c3bc856:         if (statics == that.statics && regulars == that.regulars)
1:c3bc856:             return that;
1:c3bc856:         return new PartitionColumns(statics, regulars);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isEmpty()
1:a991b64:     {
1:a991b64:         return statics.isEmpty() && regulars.isEmpty();
1:a991b64:     }
1:a991b64: 
1:2457599:     public Columns columns(boolean isStatic)
1:2457599:     {
1:2457599:         return isStatic ? statics : regulars;
1:2457599:     }
1:2457599: 
1:a991b64:     public boolean contains(ColumnDefinition column)
1:a991b64:     {
1:a991b64:         return column.isStatic() ? statics.contains(column) : regulars.contains(column);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean includes(PartitionColumns columns)
1:a991b64:     {
1:0d74c3e:         return statics.containsAll(columns.statics) && regulars.containsAll(columns.regulars);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public Iterator<ColumnDefinition> iterator()
1:a991b64:     {
1:a991b64:         return Iterators.concat(statics.iterator(), regulars.iterator());
1:a991b64:     }
1:a991b64: 
1:a991b64:     public Iterator<ColumnDefinition> selectOrderIterator()
1:a991b64:     {
1:a991b64:         return Iterators.concat(statics.selectOrderIterator(), regulars.selectOrderIterator());
1:a991b64:     }
1:a991b64: 
1:8c64cef:     /** * Returns the total number of static and regular columns. */
1:8c64cef:     public int size()
1:a991b64:     {
1:0d74c3e:         return regulars.size() + statics.size();
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public String toString()
1:a991b64:     {
1:a991b64:         StringBuilder sb = new StringBuilder();
1:a991b64:         sb.append("[").append(statics).append(" | ").append(regulars).append("]");
1:a991b64:         return sb.toString();
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public boolean equals(Object other)
1:a991b64:     {
1:a991b64:         if (!(other instanceof PartitionColumns))
1:a991b64:             return false;
1:a991b64: 
1:a991b64:         PartitionColumns that = (PartitionColumns)other;
1:a991b64:         return this.statics.equals(that.statics)
1:a991b64:             && this.regulars.equals(that.regulars);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public int hashCode()
1:a991b64:     {
1:a991b64:         return Objects.hash(statics, regulars);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static Builder builder()
1:a991b64:     {
1:a991b64:         return new Builder();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static class Builder
1:a991b64:     {
1:a991b64:         // Note that we do want to use sorted sets because we want the column definitions to be compared
1:a991b64:         // through compareTo, not equals. The former basically check it's the same column name, while the latter
1:a991b64:         // check it's the same object, including the same type.
1:5250d7f:         private BTreeSet.Builder<ColumnDefinition> regularColumns;
1:5250d7f:         private BTreeSet.Builder<ColumnDefinition> staticColumns;
1:a991b64: 
1:a991b64:         public Builder add(ColumnDefinition c)
1:a991b64:         {
1:a991b64:             if (c.isStatic())
1:a991b64:             {
1:a991b64:                 if (staticColumns == null)
1:5250d7f:                     staticColumns = BTreeSet.builder(naturalOrder());
1:a991b64:                 staticColumns.add(c);
1:a991b64:             }
1:a991b64:             else
1:a991b64:             {
1:a991b64:                 assert c.isRegular();
1:a991b64:                 if (regularColumns == null)
1:5250d7f:                     regularColumns = BTreeSet.builder(naturalOrder());
1:a991b64:                 regularColumns.add(c);
1:a991b64:             }
1:a991b64:             return this;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Builder addAll(Iterable<ColumnDefinition> columns)
1:a991b64:         {
1:a991b64:             for (ColumnDefinition c : columns)
1:a991b64:                 add(c);
1:a991b64:             return this;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Builder addAll(PartitionColumns columns)
1:a991b64:         {
1:a991b64:             if (regularColumns == null && !columns.regulars.isEmpty())
1:5250d7f:                 regularColumns = BTreeSet.builder(naturalOrder());
1:a991b64: 
1:a991b64:             for (ColumnDefinition c : columns.regulars)
1:a991b64:                 regularColumns.add(c);
1:a991b64: 
1:a991b64:             if (staticColumns == null && !columns.statics.isEmpty())
1:5250d7f:                 staticColumns = BTreeSet.builder(naturalOrder());
1:a991b64: 
1:a991b64:             for (ColumnDefinition c : columns.statics)
1:a991b64:                 staticColumns.add(c);
1:a991b64: 
1:a991b64:             return this;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public PartitionColumns build()
1:a991b64:         {
1:5250d7f:             return new PartitionColumns(staticColumns == null ? Columns.NONE : Columns.from(staticColumns.build()),
1:5250d7f:                                         regularColumns == null ? Columns.NONE : Columns.from(regularColumns.build()));
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4f14bc5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2457599
/////////////////////////////////////////////////////////////////////////
1:     public Columns columns(boolean isStatic)
1:     {
1:         return isStatic ? statics : regulars;
1:     }
1: 
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.util.*;
0: import java.security.MessageDigest;
1: 
1: import com.google.common.collect.Iterators;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: 
1: /**
1:  * Columns (or a subset of the columns) that a partition contains.
1:  * This mainly groups both static and regular columns for convenience.
1:  */
1: public class PartitionColumns implements Iterable<ColumnDefinition>
1: {
1:     public static PartitionColumns NONE = new PartitionColumns(Columns.NONE, Columns.NONE);
1: 
1:     public final Columns statics;
1:     public final Columns regulars;
1: 
1:     public PartitionColumns(Columns statics, Columns regulars)
1:     {
1:         this.statics = statics;
1:         this.regulars = regulars;
1:     }
1: 
1:     public static PartitionColumns of(ColumnDefinition column)
1:     {
1:         return new PartitionColumns(column.isStatic() ? Columns.of(column) : Columns.NONE,
1:                                     column.isStatic() ? Columns.NONE : Columns.of(column));
1:     }
1: 
1:     public PartitionColumns without(ColumnDefinition column)
1:     {
1:         return new PartitionColumns(column.isStatic() ? statics.without(column) : statics,
1:                                     column.isStatic() ? regulars : regulars.without(column));
1:     }
1: 
1:     public PartitionColumns withoutStatics()
1:     {
1:         return statics.isEmpty() ? this : new PartitionColumns(Columns.NONE, regulars);
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return statics.isEmpty() && regulars.isEmpty();
1:     }
1: 
1:     public boolean contains(ColumnDefinition column)
1:     {
1:         return column.isStatic() ? statics.contains(column) : regulars.contains(column);
1:     }
1: 
1:     public boolean includes(PartitionColumns columns)
1:     {
0:         return statics.contains(columns.statics) && regulars.contains(columns.regulars);
1:     }
1: 
1:     public Iterator<ColumnDefinition> iterator()
1:     {
1:         return Iterators.concat(statics.iterator(), regulars.iterator());
1:     }
1: 
1:     public Iterator<ColumnDefinition> selectOrderIterator()
1:     {
1:         return Iterators.concat(statics.selectOrderIterator(), regulars.selectOrderIterator());
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append("[").append(statics).append(" | ").append(regulars).append("]");
1:         return sb.toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if (!(other instanceof PartitionColumns))
1:             return false;
1: 
1:         PartitionColumns that = (PartitionColumns)other;
1:         return this.statics.equals(that.statics)
1:             && this.regulars.equals(that.regulars);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hash(statics, regulars);
1:     }
1: 
0:     public void digest(MessageDigest digest)
1:     {
0:         regulars.digest(digest);
0:         statics.digest(digest);
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static class Builder
1:     {
1:         // Note that we do want to use sorted sets because we want the column definitions to be compared
1:         // through compareTo, not equals. The former basically check it's the same column name, while the latter
1:         // check it's the same object, including the same type.
0:         private SortedSet<ColumnDefinition> regularColumns;
0:         private SortedSet<ColumnDefinition> staticColumns;
1: 
1:         public Builder add(ColumnDefinition c)
1:         {
1:             if (c.isStatic())
1:             {
1:                 if (staticColumns == null)
0:                     staticColumns = new TreeSet<>();
1:                 staticColumns.add(c);
1:             }
1:             else
1:             {
1:                 assert c.isRegular();
1:                 if (regularColumns == null)
0:                     regularColumns = new TreeSet<>();
1:                 regularColumns.add(c);
1:             }
1:             return this;
1:         }
1: 
0:         public int added()
1:         {
0:             return (regularColumns == null ? 0 : regularColumns.size())
0:                  + (staticColumns == null ? 0 : staticColumns.size());
1:         }
1: 
1:         public Builder addAll(Iterable<ColumnDefinition> columns)
1:         {
1:             for (ColumnDefinition c : columns)
1:                 add(c);
1:             return this;
1:         }
1: 
1:         public Builder addAll(PartitionColumns columns)
1:         {
1:             if (regularColumns == null && !columns.regulars.isEmpty())
0:                 regularColumns = new TreeSet<>();
1: 
1:             for (ColumnDefinition c : columns.regulars)
1:                 regularColumns.add(c);
1: 
1:             if (staticColumns == null && !columns.statics.isEmpty())
0:                 staticColumns = new TreeSet<>();
1: 
1:             for (ColumnDefinition c : columns.statics)
1:                 staticColumns.add(c);
1: 
1:             return this;
1:         }
1: 
1:         public PartitionColumns build()
1:         {
0:             return new PartitionColumns(staticColumns == null ? Columns.NONE : Columns.from(staticColumns),
0:                                         regularColumns == null ? Columns.NONE : Columns.from(regularColumns));
1:         }
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:c3bc856
/////////////////////////////////////////////////////////////////////////
1:         assert statics != null && regulars != null;
/////////////////////////////////////////////////////////////////////////
1:     public PartitionColumns mergeTo(PartitionColumns that)
0:     {
1:         if (this == that)
1:             return this;
1:         Columns statics = this.statics.mergeTo(that.statics);
1:         Columns regulars = this.regulars.mergeTo(that.regulars);
1:         if (statics == this.statics && regulars == this.regulars)
1:             return this;
1:         if (statics == that.statics && regulars == that.regulars)
1:             return that;
1:         return new PartitionColumns(statics, regulars);
0:     }
1: 
commit:0d74c3e
/////////////////////////////////////////////////////////////////////////
1:         return statics.containsAll(columns.statics) && regulars.containsAll(columns.regulars);
/////////////////////////////////////////////////////////////////////////
1:         return regulars.size() + statics.size();
commit:5250d7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.btree.BTreeSet;
0: 
1: import static java.util.Comparator.naturalOrder;
/////////////////////////////////////////////////////////////////////////
1:         private BTreeSet.Builder<ColumnDefinition> regularColumns;
1:         private BTreeSet.Builder<ColumnDefinition> staticColumns;
1:                     staticColumns = BTreeSet.builder(naturalOrder());
1:                     regularColumns = BTreeSet.builder(naturalOrder());
/////////////////////////////////////////////////////////////////////////
1:                 regularColumns = BTreeSet.builder(naturalOrder());
1:                 staticColumns = BTreeSet.builder(naturalOrder());
/////////////////////////////////////////////////////////////////////////
1:             return new PartitionColumns(staticColumns == null ? Columns.NONE : Columns.from(staticColumns.build()),
1:                                         regularColumns == null ? Columns.NONE : Columns.from(regularColumns.build()));
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:8c64cef
/////////////////////////////////////////////////////////////////////////
1:     /** * Returns the total number of static and regular columns. */
1:     public int size()
0:     {
0:         return regulars.columnCount() + statics.columnCount();
0:     }
0: 
============================================================================