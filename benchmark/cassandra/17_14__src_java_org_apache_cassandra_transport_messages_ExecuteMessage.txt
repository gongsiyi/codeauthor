1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport.messages;
1:dad2f11: 
1:45b4fd8: import java.util.UUID;
1:dad2f11: 
1:e48ff29: import com.google.common.collect.ImmutableMap;
1:cbf304e: import io.netty.buffer.ByteBuf;
1:dad2f11: 
1:6d3a3ee: import org.apache.cassandra.cql3.CQLStatement;
1:9530b27: import org.apache.cassandra.cql3.ColumnSpecification;
1:485feef: import org.apache.cassandra.cql3.QueryHandler;
1:bfd73be: import org.apache.cassandra.cql3.QueryOptions;
1:9872b74: import org.apache.cassandra.cql3.statements.ParsedStatement;
1:ccca5f1: import org.apache.cassandra.exceptions.PreparedQueryNotFoundException;
1:789aa72: import org.apache.cassandra.service.ClientState;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:45b4fd8: import org.apache.cassandra.tracing.Tracing;
1:6d3a3ee: import org.apache.cassandra.transport.*;
1:f25da97: import org.apache.cassandra.utils.JVMStabilityInspector;
1:ccca5f1: import org.apache.cassandra.utils.MD5Digest;
1:45b4fd8: import org.apache.cassandra.utils.UUIDGen;
1:8c062d8: 
1:6d3a3ee: public class ExecuteMessage extends Message.Request
1:dad2f11: {
1:6d3a3ee:     public static final Message.Codec<ExecuteMessage> codec = new Message.Codec<ExecuteMessage>()
1:dad2f11:     {
1:e0adc16:         public ExecuteMessage decode(ByteBuf body, ProtocolVersion version)
1:dad2f11:         {
1:ccca5f1:             byte[] id = CBUtil.readBytes(body);
1:8439e74:             return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.codec.decode(body, version));
1:dad2f11:         }
1:bfd73be: 
1:e0adc16:         public void encode(ExecuteMessage msg, ByteBuf dest, ProtocolVersion version)
1:dad2f11:         {
1:f8be23a:             CBUtil.writeBytes(msg.statementId.bytes, dest);
1:e0adc16:             if (version == ProtocolVersion.V1)
1:dad2f11:             {
1:f8be23a:                 CBUtil.writeValueList(msg.options.getValues(), dest);
1:f8be23a:                 CBUtil.writeConsistencyLevel(msg.options.getConsistency(), dest);
1:dad2f11:             }
2:bfd73be:             else
1:bfd73be:             {
1:f8be23a:                 QueryOptions.codec.encode(msg.options, dest, version);
1:f8be23a:             }
1:bfd73be:         }
1:f8be23a: 
1:e0adc16:         public int encodedSize(ExecuteMessage msg, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:             int size = 0;
1:f8be23a:             size += CBUtil.sizeOfBytes(msg.statementId.bytes);
1:e0adc16:             if (version == ProtocolVersion.V1)
1:f8be23a:             {
1:f8be23a:                 size += CBUtil.sizeOfValueList(msg.options.getValues());
1:f8be23a:                 size += CBUtil.sizeOfConsistencyLevel(msg.options.getConsistency());
1:f8be23a:             }
1:f8be23a:             else
1:f8be23a:             {
1:f8be23a:                 size += QueryOptions.codec.encodedSize(msg.options, version);
1:f8be23a:             }
1:f8be23a:             return size;
1:dad2f11:         }
1:6d3a3ee:     };
1:bfd73be: 
1:ccca5f1:     public final MD5Digest statementId;
1:bfd73be:     public final QueryOptions options;
1:bfd73be: 
1:bfd73be:     public ExecuteMessage(MD5Digest statementId, QueryOptions options)
1:dad2f11:     {
1:6d3a3ee:         super(Message.Type.EXECUTE);
1:6d3a3ee:         this.statementId = statementId;
1:bfd73be:         this.options = options;
1:dad2f11:     }
1:dad2f11: 
1:aa83c94:     public Message.Response execute(QueryState state, long queryStartNanoTime)
1:dad2f11:     {
1:6d3a3ee:         try
1:ccca5f1:         {
1:789aa72:             QueryHandler handler = ClientState.getCQLQueryHandler();
1:9872b74:             ParsedStatement.Prepared prepared = handler.getPrepared(statementId);
1:9c1782d:             if (prepared == null)
1:9c1782d:                 throw new PreparedQueryNotFoundException(statementId);
1:9c1782d: 
1:9872b74:             options.prepare(prepared.boundNames);
1:9872b74:             CQLStatement statement = prepared.statement;
1:12c694e: 
1:bfd73be:             if (options.getPageSize() == 0)
1:e48ff29:                 throw new ProtocolException("The page size cannot be 0");
1:dad2f11: 
1:45b4fd8:             UUID tracingId = null;
1:45b4fd8:             if (isTracingRequested())
1:45b4fd8:             {
1:7442fc0:                 tracingId = UUIDGen.getTimeUUID();
1:45b4fd8:                 state.prepareTracingSession(tracingId);
1:dad2f11:             }
1:dad2f11: 
1:45b4fd8:             if (state.traceNextQuery())
1:45b4fd8:             {
1:bf25e66:                 state.createTracingSession(getCustomPayload());
1:8c062d8: 
1:e48ff29:                 ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
1:bfd73be:                 if (options.getPageSize() > 0)
1:bfd73be:                     builder.put("page_size", Integer.toString(options.getPageSize()));
1:9dbf32c:                 if(options.getConsistency() != null)
1:9dbf32c:                     builder.put("consistency_level", options.getConsistency().name());
1:9dbf32c:                 if(options.getSerialConsistency() != null)
1:9dbf32c:                     builder.put("serial_consistency_level", options.getSerialConsistency().name());
1:07385b6:                 builder.put("query", prepared.rawCQLStatement);
1:e48ff29: 
1:9530b27:                 for(int i=0;i<prepared.boundNames.size();i++)
1:9530b27:                 {
1:9530b27:                     ColumnSpecification cs = prepared.boundNames.get(i);
1:9530b27:                     String boundName = cs.name.toString();
1:9530b27:                     String boundValue = cs.type.asCQL3Type().toCQLLiteral(options.getValues().get(i), options.getProtocolVersion());
1:9530b27:                     if ( boundValue.length() > 1000 )
1:9530b27:                     {
1:9530b27:                         boundValue = boundValue.substring(0, 1000) + "...'";
1:9530b27:                     }
1:9530b27: 
1:9530b27:                     //Here we prefix boundName with the index to avoid possible collission in builder keys due to
1:9530b27:                     //having multiple boundValues for the same variable
1:9530b27:                     builder.put("bound_var_" + Integer.toString(i) + "_" + boundName, boundValue);
1:9530b27:                 }
1:9530b27: 
1:814bd32:                 Tracing.instance.begin("Execute CQL3 prepared query", state.getClientAddress(), builder.build());
1:dad2f11:             }
1:e48ff29: 
1:a90de7c:             // Some custom QueryHandlers are interested by the bound names. We provide them this information
1:a90de7c:             // by wrapping the QueryOptions.
1:a90de7c:             QueryOptions queryOptions = QueryOptions.addColumnSpecifications(options, prepared.boundNames);
1:aa83c94:             Message.Response response = handler.processPrepared(statement, state, queryOptions, getCustomPayload(), queryStartNanoTime);
1:bfd73be:             if (options.skipMetadata() && response instanceof ResultMessage.Rows)
1:57769f6:                 ((ResultMessage.Rows)response).result.metadata.setSkipMetadata();
1:e48ff29: 
1:45b4fd8:             if (tracingId != null)
1:45b4fd8:                 response.setTracingId(tracingId);
3:45b4fd8: 
1:45b4fd8:             return response;
1:dad2f11:         }
1:6d3a3ee:         catch (Exception e)
9:6d3a3ee:         {
1:f25da97:             JVMStabilityInspector.inspectThrowable(e);
1:6d3a3ee:             return ErrorMessage.fromException(e);
1:45b4fd8:         }
1:45b4fd8:         finally
1:45b4fd8:         {
1:15df669:             Tracing.instance.stopSession();
1:45b4fd8:         }
1:45b4fd8:     }
1:45b4fd8: 
1:6d3a3ee:     @Override
1:6d3a3ee:     public String toString()
1:6d3a3ee:     {
1:bfd73be:         return "EXECUTE " + statementId + " with " + options.getValues().size() + " values at consistency " + options.getConsistency();
1:ccca5f1:     }
9:6d3a3ee: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:         public ExecuteMessage decode(ByteBuf body, ProtocolVersion version)
1:         public void encode(ExecuteMessage msg, ByteBuf dest, ProtocolVersion version)
1:             if (version == ProtocolVersion.V1)
/////////////////////////////////////////////////////////////////////////
1:         public int encodedSize(ExecuteMessage msg, ProtocolVersion version)
1:             if (version == ProtocolVersion.V1)
commit:814bd32
/////////////////////////////////////////////////////////////////////////
1:                 Tracing.instance.begin("Execute CQL3 prepared query", state.getClientAddress(), builder.build());
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public Message.Response execute(QueryState state, long queryStartNanoTime)
/////////////////////////////////////////////////////////////////////////
1:             Message.Response response = handler.processPrepared(statement, state, queryOptions, getCustomPayload(), queryStartNanoTime);
author:Mahdi Mohammadi
-------------------------------------------------------------------------------
commit:9530b27
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.ColumnSpecification;
/////////////////////////////////////////////////////////////////////////
1:                 for(int i=0;i<prepared.boundNames.size();i++)
1:                 {
1:                     ColumnSpecification cs = prepared.boundNames.get(i);
1:                     String boundName = cs.name.toString();
1:                     String boundValue = cs.type.asCQL3Type().toCQLLiteral(options.getValues().get(i), options.getProtocolVersion());
1:                     if ( boundValue.length() > 1000 )
1:                     {
1:                         boundValue = boundValue.substring(0, 1000) + "...'";
1:                     }
1: 
1:                     //Here we prefix boundName with the index to avoid possible collission in builder keys due to
1:                     //having multiple boundValues for the same variable
1:                     builder.put("bound_var_" + Integer.toString(i) + "_" + boundName, boundValue);
1:                 }
1: 
author:Yasuharu Goto
-------------------------------------------------------------------------------
commit:07385b6
/////////////////////////////////////////////////////////////////////////
1:                 builder.put("query", prepared.rawCQLStatement);
author:Mick Semb Wever
-------------------------------------------------------------------------------
commit:bf25e66
/////////////////////////////////////////////////////////////////////////
1:                 state.createTracingSession(getCustomPayload());
author:blerer
-------------------------------------------------------------------------------
commit:a90de7c
/////////////////////////////////////////////////////////////////////////
1:             // Some custom QueryHandlers are interested by the bound names. We provide them this information
1:             // by wrapping the QueryOptions.
1:             QueryOptions queryOptions = QueryOptions.addColumnSpecifications(options, prepared.boundNames);
0:             Message.Response response = handler.processPrepared(statement, state, queryOptions, getCustomPayload());
commit:8439e74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.codec.decode(body, version));
author:Robert Stupp
-------------------------------------------------------------------------------
commit:fcb5bd6
commit:e4eba25
/////////////////////////////////////////////////////////////////////////
0:                 state.createTracingSession();
commit:f6217ae
/////////////////////////////////////////////////////////////////////////
0:                 state.createTracingSession(connection);
commit:789aa72
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.ClientState;
/////////////////////////////////////////////////////////////////////////
1:             QueryHandler handler = ClientState.getCQLQueryHandler();
/////////////////////////////////////////////////////////////////////////
0:             Message.Response response = handler.processPrepared(statement, state, options, getCustomPayload());
author:Alec Grieser
-------------------------------------------------------------------------------
commit:9dbf32c
/////////////////////////////////////////////////////////////////////////
1:                 if(options.getConsistency() != null)
1:                     builder.put("consistency_level", options.getConsistency().name());
1:                 if(options.getSerialConsistency() != null)
1:                     builder.put("serial_consistency_level", options.getSerialConsistency().name());
author:Oded Peer
-------------------------------------------------------------------------------
commit:48f6446
/////////////////////////////////////////////////////////////////////////
0:                 List<ByteBuffer> values = CBUtil.readValueList(body, version);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
/////////////////////////////////////////////////////////////////////////
1:             JVMStabilityInspector.inspectThrowable(e);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:9c1782d
/////////////////////////////////////////////////////////////////////////
1:             if (prepared == null)
1:                 throw new PreparedQueryNotFoundException(statementId);
1: 
commit:12c694e
/////////////////////////////////////////////////////////////////////////
0:             if (prepared == null)
0:                 throw new PreparedQueryNotFoundException(statementId);
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9872b74
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.statements.ParsedStatement;
/////////////////////////////////////////////////////////////////////////
1:             ParsedStatement.Prepared prepared = handler.getPrepared(statementId);
1:             options.prepare(prepared.boundNames);
1:             CQLStatement statement = prepared.statement;
commit:eefa14f
commit:4169aa3
/////////////////////////////////////////////////////////////////////////
0:                 return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.fromProtocolV1(consistency, values));
/////////////////////////////////////////////////////////////////////////
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
0:                 List<ByteBuffer> values = CBUtil.readValueList(body);
/////////////////////////////////////////////////////////////////////////
0:         public void encode(ExecuteMessage msg, ChannelBuffer dest, int version)
1:             CBUtil.writeBytes(msg.statementId.bytes, dest);
1:                 CBUtil.writeValueList(msg.options.getValues(), dest);
1:                 CBUtil.writeConsistencyLevel(msg.options.getConsistency(), dest);
1:                 QueryOptions.codec.encode(msg.options, dest, version);
1:         }
1: 
0:         public int encodedSize(ExecuteMessage msg, int version)
1:         {
1:             int size = 0;
1:             size += CBUtil.sizeOfBytes(msg.statementId.bytes);
0:             if (version == 1)
1:             {
1:                 size += CBUtil.sizeOfValueList(msg.options.getValues());
1:                 size += CBUtil.sizeOfConsistencyLevel(msg.options.getConsistency());
1:             }
1:             else
1:             {
1:                 size += QueryOptions.codec.encodedSize(msg.options, version);
1:             }
1:             return size;
/////////////////////////////////////////////////////////////////////////
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
0: import org.jboss.netty.buffer.ChannelBuffers;
1: import org.apache.cassandra.cql3.QueryOptions;
/////////////////////////////////////////////////////////////////////////
0:             if (version == 1)
0:                 int count = body.readUnsignedShort();
0:                 List<ByteBuffer> values = new ArrayList<ByteBuffer>(count);
0:                 for (int i = 0; i < count; i++)
0:                     values.add(CBUtil.readValue(body));
1: 
0:                 ConsistencyLevel consistency = CBUtil.readConsistencyLevel(body);
0:                 return new ExecuteMessage(id, values, consistency);
1:             else
1:             {
0:                 return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.codec.decode(body, version));
1:             }
0:             ChannelBuffer idBuffer = CBUtil.bytesToCB(msg.statementId.bytes);
0:             ChannelBuffer optBuffer;
0:             if (version == 1)
0:                 CBUtil.BufferBuilder builder = new CBUtil.BufferBuilder(2, 0, msg.options.getValues().size());
0:                 builder.add(CBUtil.shortToCB(msg.options.getValues().size()));
1: 
0:                 // Values
0:                 for (ByteBuffer value : msg.options.getValues())
0:                     builder.addValue(value);
1: 
0:                 builder.add(CBUtil.consistencyLevelToCB(msg.options.getConsistency()));
0:                 optBuffer = builder.build();
1:             else
0:                 optBuffer = QueryOptions.codec.encode(msg.options, version);
0:             return ChannelBuffers.wrappedBuffer(idBuffer, optBuffer);
1:     public final QueryOptions options;
0:     public ExecuteMessage(byte[] statementId, List<ByteBuffer> values, ConsistencyLevel consistency)
0:         this(MD5Digest.wrap(statementId), new QueryOptions(consistency, values));
1:     public ExecuteMessage(MD5Digest statementId, QueryOptions options)
1:         this.options = options;
/////////////////////////////////////////////////////////////////////////
1:             if (options.getPageSize() == 0)
/////////////////////////////////////////////////////////////////////////
1:                 if (options.getPageSize() > 0)
1:                     builder.put("page_size", Integer.toString(options.getPageSize()));
0:             Message.Response response = QueryProcessor.processPrepared(statement, state, options);
1:             if (options.skipMetadata() && response instanceof ResultMessage.Rows)
/////////////////////////////////////////////////////////////////////////
1:         return "EXECUTE " + statementId + " with " + options.getValues().size() + " values at consistency " + options.getConsistency();
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:57769f6
/////////////////////////////////////////////////////////////////////////
0:             if (skipMetadata && response instanceof ResultMessage.Rows)
1:                 ((ResultMessage.Rows)response).result.metadata.setSkipMetadata();
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.pager.PagingState;
/////////////////////////////////////////////////////////////////////////
0:         SKIP_METADATA,
0:         PAGING_STATE;
/////////////////////////////////////////////////////////////////////////
0:             PagingState pagingState = null;
0:                 if (flags.contains(Flag.PAGING_STATE))
0:                     pagingState = PagingState.deserialize(CBUtil.readValue(body));
0:             return new ExecuteMessage(MD5Digest.wrap(id), values, consistency, resultPageSize, skipMetadata, pagingState);
/////////////////////////////////////////////////////////////////////////
0:             if (msg.pagingState != null)
0:                 flags.add(Flag.PAGING_STATE);
/////////////////////////////////////////////////////////////////////////
0:             CBUtil.BufferBuilder builder = new CBUtil.BufferBuilder(nbBuff, 0, vs + (flags.contains(Flag.PAGING_STATE) ? 1 : 0));
/////////////////////////////////////////////////////////////////////////
0:                 if (flags.contains(Flag.PAGING_STATE))
0:                     builder.addValue(msg.pagingState == null ? null : msg.pagingState.serialize());
/////////////////////////////////////////////////////////////////////////
0:     public final PagingState pagingState;
0:         this(MD5Digest.wrap(statementId), values, consistency, resultPageSize, false, null);
0:     public ExecuteMessage(MD5Digest statementId, List<ByteBuffer> values, ConsistencyLevel consistency, int resultPageSize, boolean skipMetadata, PagingState pagingState)
/////////////////////////////////////////////////////////////////////////
0:         this.pagingState = pagingState;
/////////////////////////////////////////////////////////////////////////
0:             Message.Response response = QueryProcessor.processPrepared(statement, consistency, state, values, resultPageSize, pagingState);
/////////////////////////////////////////////////////////////////////////
commit:dad2f11
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0:     public static enum Flag
1:     {
0:         // The order of that enum matters!!
0:         PAGE_SIZE,
0:         SKIP_METADATA;
1: 
0:         public static EnumSet<Flag> deserialize(int flags)
1:         {
0:             EnumSet<Flag> set = EnumSet.noneOf(Flag.class);
0:             Flag[] values = Flag.values();
0:             for (int n = 0; n < values.length; n++)
1:             {
0:                 if ((flags & (1 << n)) != 0)
0:                     set.add(values[n]);
1:             }
0:             return set;
1:         }
1: 
0:         public static int serialize(EnumSet<Flag> flags)
1:         {
0:             int i = 0;
0:             for (Flag flag : flags)
0:                 i |= 1 << flag.ordinal();
0:             return i;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             boolean skipMetadata = false;
1:             {
0:                 EnumSet<Flag> flags = Flag.deserialize((int)body.readByte());
0:                 if (flags.contains(Flag.PAGE_SIZE))
0:                     resultPageSize = body.readInt();
0:                 skipMetadata = flags.contains(Flag.SKIP_METADATA);
1:             }
0:             return new ExecuteMessage(MD5Digest.wrap(id), values, consistency, resultPageSize, skipMetadata);
/////////////////////////////////////////////////////////////////////////
1: 
0:             EnumSet<Flag> flags = EnumSet.noneOf(Flag.class);
0:             if (msg.resultPageSize >= 0)
0:                 flags.add(Flag.PAGE_SIZE);
0:             if (msg.skipMetadata)
0:                 flags.add(Flag.SKIP_METADATA);
1: 
0:             assert flags.isEmpty() || version >= 2;
1: 
0:             int nbBuff = 3;
0:             if (version >= 2)
1:             {
0:                 nbBuff++; // the flags themselves
0:                 if (flags.contains(Flag.PAGE_SIZE))
0:                     nbBuff++;
1:             }
0:             CBUtil.BufferBuilder builder = new CBUtil.BufferBuilder(nbBuff, 0, vs);
/////////////////////////////////////////////////////////////////////////
1:             {
0:                 builder.add(CBUtil.byteToCB((byte)Flag.serialize(flags)));
0:                 if (flags.contains(Flag.PAGE_SIZE))
0:                     builder.add(CBUtil.intToCB(msg.resultPageSize));
1:             }
/////////////////////////////////////////////////////////////////////////
0:     public final boolean skipMetadata;
0:         this(MD5Digest.wrap(statementId), values, consistency, resultPageSize, false);
0:     public ExecuteMessage(MD5Digest statementId, List<ByteBuffer> values, ConsistencyLevel consistency, int resultPageSize, boolean skipMetadata)
0:         this.skipMetadata = skipMetadata;
commit:8c062d8
/////////////////////////////////////////////////////////////////////////
1: 
0:             int resultPageSize = -1;
0:             if (version >= 2)
0:                 resultPageSize = body.readInt();
/////////////////////////////////////////////////////////////////////////
1: 
0:             assert msg.resultPageSize == -1 || version >= 2;
0:             if (version >= 2)
0:                 builder.add(CBUtil.intToCB(msg.resultPageSize));
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.ImmutableMap;
/////////////////////////////////////////////////////////////////////////
0:             int resultPageSize = body.readInt();
0:             return new ExecuteMessage(id, values, consistency, resultPageSize);
0:         public ChannelBuffer encode(ExecuteMessage msg, int version)
/////////////////////////////////////////////////////////////////////////
0:             CBUtil.BufferBuilder builder = new CBUtil.BufferBuilder(4, 0, vs);
/////////////////////////////////////////////////////////////////////////
0:             builder.add(CBUtil.intToCB(msg.resultPageSize));
/////////////////////////////////////////////////////////////////////////
0:     public final int resultPageSize;
0:     public ExecuteMessage(byte[] statementId, List<ByteBuffer> values, ConsistencyLevel consistency, int resultPageSize)
0:         this(MD5Digest.wrap(statementId), values, consistency, resultPageSize);
0:     public ExecuteMessage(MD5Digest statementId, List<ByteBuffer> values, ConsistencyLevel consistency, int resultPageSize)
0:         this.resultPageSize = resultPageSize;
0:         return codec.encode(this, getVersion());
/////////////////////////////////////////////////////////////////////////
0:             if (resultPageSize == 0)
1:                 throw new ProtocolException("The page size cannot be 0");
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
0:                 if (resultPageSize > 0)
0:                     builder.put("page_size", Integer.toString(resultPageSize));
1: 
0:                 Tracing.instance.begin("Execute CQL3 prepared query", builder.build());
0:             Message.Response response = QueryProcessor.processPrepared(statement, consistency, state, values, resultPageSize);
/////////////////////////////////////////////////////////////////////////
0:             // Trash the current session id if we won't need it anymore
0:             if (!state.hasPager())
0:                 state.getAndResetCurrentTracingSession();
commit:7442fc0
/////////////////////////////////////////////////////////////////////////
1:                 tracingId = UUIDGen.getTimeUUID();
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.tracing.Tracing;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.UUIDGen;
/////////////////////////////////////////////////////////////////////////
0:     public Message.Response execute(QueryState state)
1:             UUID tracingId = null;
1:             if (isTracingRequested())
1:             {
0:                 tracingId = UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress());
1:                 state.prepareTracingSession(tracingId);
1:             }
1: 
1:             if (state.traceNextQuery())
1:             {
0:                 state.createTracingSession();
0:                 // TODO we don't have [typed] access to CQL bind variables here.  CASSANDRA-4560 is open to add support.
0:                 Tracing.instance().begin("Execute CQL3 prepared query", Collections.<String, String>emptyMap());
1:             }
1: 
0:             Message.Response response = QueryProcessor.processPrepared(statement, consistency, state, values);
1: 
1:             if (tracingId != null)
1:                 response.setTracingId(tracingId);
1: 
1:             return response;
1:         finally
1:         {
0:             Tracing.instance().stopSession();
1:         }
commit:297f530
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ConsistencyLevel;
/////////////////////////////////////////////////////////////////////////
0:             ConsistencyLevel consistency = CBUtil.readConsistencyLevel(body);
0:             return new ExecuteMessage(id, values, consistency);
/////////////////////////////////////////////////////////////////////////
0:             CBUtil.BufferBuilder builder = new CBUtil.BufferBuilder(3, 0, vs);
/////////////////////////////////////////////////////////////////////////
0:             builder.add(CBUtil.consistencyLevelToCB(msg.consistency));
0:     public final ConsistencyLevel consistency;
0:     public ExecuteMessage(byte[] statementId, List<ByteBuffer> values, ConsistencyLevel consistency)
0:         this(MD5Digest.wrap(statementId), values, consistency);
0:     public ExecuteMessage(MD5Digest statementId, List<ByteBuffer> values, ConsistencyLevel consistency)
0:         this.consistency = consistency;
/////////////////////////////////////////////////////////////////////////
0:             return QueryProcessor.processPrepared(statement, consistency, c.clientState(), values);
/////////////////////////////////////////////////////////////////////////
0:         return "EXECUTE " + statementId + " with " + values.size() + " values at consistency " + consistency;
commit:ccca5f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.PreparedQueryNotFoundException;
1: import org.apache.cassandra.utils.MD5Digest;
/////////////////////////////////////////////////////////////////////////
1:             byte[] id = CBUtil.readBytes(body);
/////////////////////////////////////////////////////////////////////////
0:             builder.add(CBUtil.bytesToCB(msg.statementId.bytes));
/////////////////////////////////////////////////////////////////////////
1:     public final MD5Digest statementId;
0:     public ExecuteMessage(byte[] statementId, List<ByteBuffer> values)
1:     {
0:         this(MD5Digest.wrap(statementId), values);
1:     }
0: 
0:     public ExecuteMessage(MD5Digest statementId, List<ByteBuffer> values)
/////////////////////////////////////////////////////////////////////////
0:             CQLStatement statement = QueryProcessor.getPrepared(statementId);
0:                 throw new PreparedQueryNotFoundException(statementId);
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
0:             ServerConnection c = (ServerConnection)connection;
0:             CQLStatement statement = c.clientState().getCQL3Prepared().get(statementId);
0:             return QueryProcessor.processPrepared(statement, c.clientState(), values);
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.InvalidRequestException;
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
0: 
0: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Map;
0: 
0: import org.jboss.netty.buffer.ChannelBuffer;
0: import org.jboss.netty.buffer.ChannelBuffers;
0: 
1: import org.apache.cassandra.cql3.CQLStatement;
0: import org.apache.cassandra.cql3.QueryProcessor;
1: import org.apache.cassandra.transport.*;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: 
1: public class ExecuteMessage extends Message.Request
1: {
1:     public static final Message.Codec<ExecuteMessage> codec = new Message.Codec<ExecuteMessage>()
1:     {
0:         public ExecuteMessage decode(ChannelBuffer body)
1:         {
0:             int id = body.readInt();
0: 
0:             int count = body.readUnsignedShort();
0:             List<ByteBuffer> values = new ArrayList<ByteBuffer>(count);
0:             for (int i = 0; i < count; i++)
0:                 values.add(CBUtil.readValue(body));
0: 
0:             return new ExecuteMessage(id, values);
1:         }
0: 
0:         public ChannelBuffer encode(ExecuteMessage msg)
1:         {
0:             // We have:
0:             //   - statementId
0:             //   - Number of values
0:             //   - The values
0:             //   - options
0:             int vs = msg.values.size();
0:             CBUtil.BufferBuilder builder = new CBUtil.BufferBuilder(2, 0, vs);
0:             builder.add(CBUtil.intToCB(msg.statementId));
0:             builder.add(CBUtil.shortToCB(vs));
0: 
0:             // Values
0:             for (ByteBuffer value : msg.values)
0:                 builder.addValue(value);
0: 
0:             return builder.build();
1:         }
1:     };
0: 
0:     public final int statementId;
0:     public final List<ByteBuffer> values;
0: 
0:     public ExecuteMessage(int statementId, List<ByteBuffer> values)
1:     {
1:         super(Message.Type.EXECUTE);
1:         this.statementId = statementId;
0:         this.values = values;
1:     }
0: 
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
0: 
0:     public Message.Response execute()
1:     {
1:         try
1:         {
0:             CQLStatement statement = connection.clientState().getCQL3Prepared().get(statementId);
0: 
0:             if (statement == null)
0:                 throw new InvalidRequestException(String.format("Prepared query with ID %d not found", statementId));
0: 
0:             return QueryProcessor.processPrepared(statement, connection.clientState(), values);
1:         }
1:         catch (Exception e)
1:         {
1:             return ErrorMessage.fromException(e);
1:         }
1:     }
0: 
1:     @Override
1:     public String toString()
1:     {
0:         return "EXECUTE " + statementId + " with " + values.size() + " values";
1:     }
1: }
author:beobal
-------------------------------------------------------------------------------
commit:485feef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.QueryHandler;
/////////////////////////////////////////////////////////////////////////
0:             QueryHandler handler = state.getClientState().getCQLQueryHandler();
0:             CQLStatement statement = handler.getPrepared(statementId);
/////////////////////////////////////////////////////////////////////////
0:             Message.Response response = handler.processPrepared(statement, state, options);
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public ExecuteMessage decode(ByteBuf body, int version)
/////////////////////////////////////////////////////////////////////////
0:         public void encode(ExecuteMessage msg, ByteBuf dest, int version)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:56f35db
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:15df669
/////////////////////////////////////////////////////////////////////////
0:                 Tracing.instance.begin("Execute CQL3 prepared query", Collections.<String, String>emptyMap());
/////////////////////////////////////////////////////////////////////////
1:             Tracing.instance.stopSession();
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:bf2ee04
/////////////////////////////////////////////////////////////////////////
0:         public ExecuteMessage decode(ChannelBuffer body, int version)
============================================================================