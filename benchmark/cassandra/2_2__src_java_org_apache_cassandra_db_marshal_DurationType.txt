1:ecf05b8: /*
1:ecf05b8:  * Licensed to the Apache Software Foundation (ASF) under one
1:ecf05b8:  * or more contributor license agreements.  See the NOTICE file
1:ecf05b8:  * distributed with this work for additional information
1:ecf05b8:  * regarding copyright ownership.  The ASF licenses this file
1:ecf05b8:  * to you under the Apache License, Version 2.0 (the
1:ecf05b8:  * "License"); you may not use this file except in compliance
1:ecf05b8:  * with the License.  You may obtain a copy of the License at
1:ecf05b8:  *
1:ecf05b8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ecf05b8:  *
1:ecf05b8:  * Unless required by applicable law or agreed to in writing, software
1:ecf05b8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ecf05b8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ecf05b8:  * See the License for the specific language governing permissions and
1:ecf05b8:  * limitations under the License.
1:ecf05b8:  */
1:ecf05b8: package org.apache.cassandra.db.marshal;
1:ecf05b8: 
1:ecf05b8: import java.nio.ByteBuffer;
1:ecf05b8: 
1:ecf05b8: import org.apache.cassandra.cql3.CQL3Type;
1:ecf05b8: import org.apache.cassandra.cql3.Constants;
1:ecf05b8: import org.apache.cassandra.cql3.Duration;
1:ecf05b8: import org.apache.cassandra.cql3.Term;
1:ecf05b8: import org.apache.cassandra.serializers.DurationSerializer;
1:ecf05b8: import org.apache.cassandra.serializers.MarshalException;
1:ecf05b8: import org.apache.cassandra.serializers.TypeSerializer;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:ecf05b8: import org.apache.cassandra.utils.ByteBufferUtil;
1:ecf05b8: 
1:ecf05b8: /**
1:ecf05b8:  * Represents a duration. The duration is stored as  months, days, and nanoseconds. This is done
1:ecf05b8:  * <p>Internally he duration is stored as months (unsigned integer), days (unsigned integer), and nanoseconds.</p>
1:ecf05b8:  */
1:ecf05b8: public class DurationType extends AbstractType<Duration>
1:ecf05b8: {
1:ecf05b8:     public static final DurationType instance = new DurationType();
1:ecf05b8: 
1:ecf05b8:     DurationType()
1:ecf05b8:     {
1:ecf05b8:         super(ComparisonType.NOT_COMPARABLE);
1:ecf05b8:     } // singleton
1:ecf05b8: 
1:ecf05b8:     public ByteBuffer fromString(String source) throws MarshalException
1:ecf05b8:     {
1:ecf05b8:         // Return an empty ByteBuffer for an empty string.
1:ecf05b8:         if (source.isEmpty())
1:ecf05b8:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:ecf05b8: 
1:ecf05b8:         return decompose(Duration.from(source));
1:ecf05b8:     }
1:ecf05b8: 
1:ecf05b8:     @Override
1:ecf05b8:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:ecf05b8:     {
1:ecf05b8:         return this == otherType;
1:ecf05b8:     }
1:ecf05b8: 
1:ecf05b8:     public Term fromJSONObject(Object parsed) throws MarshalException
1:ecf05b8:     {
1:ecf05b8:         try
1:ecf05b8:         {
1:ecf05b8:             return new Constants.Value(fromString((String) parsed));
1:ecf05b8:         }
1:ecf05b8:         catch (ClassCastException exc)
1:ecf05b8:         {
1:ecf05b8:             throw new MarshalException(String.format("Expected a string representation of a duration, but got a %s: %s",
1:ecf05b8:                                                      parsed.getClass().getSimpleName(), parsed));
1:ecf05b8:         }
1:ecf05b8:     }
1:ecf05b8: 
1:ecf05b8:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:ecf05b8:     {
1:ecf05b8:         return getSerializer().deserialize(buffer).toString();
1:ecf05b8:     }
1:ecf05b8: 
1:ecf05b8:     @Override
1:ecf05b8:     public TypeSerializer<Duration> getSerializer()
1:ecf05b8:     {
1:ecf05b8:         return DurationSerializer.instance;
1:ecf05b8:     }
1:ecf05b8: 
1:ecf05b8:     @Override
1:ecf05b8:     public CQL3Type asCQL3Type()
1:ecf05b8:     {
1:ecf05b8:         return CQL3Type.Native.DURATION;
1:ecf05b8:     }
1:ecf05b8: 
1:ecf05b8:     @Override
1:ecf05b8:     public boolean referencesDuration()
1:ecf05b8:     {
1:ecf05b8:         return true;
1:ecf05b8:     }
1:ecf05b8: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:ecf05b8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Duration;
1: import org.apache.cassandra.cql3.Term;
1: import org.apache.cassandra.serializers.DurationSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * Represents a duration. The duration is stored as  months, days, and nanoseconds. This is done
1:  * <p>Internally he duration is stored as months (unsigned integer), days (unsigned integer), and nanoseconds.</p>
1:  */
1: public class DurationType extends AbstractType<Duration>
1: {
1:     public static final DurationType instance = new DurationType();
1: 
1:     DurationType()
1:     {
1:         super(ComparisonType.NOT_COMPARABLE);
1:     } // singleton
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         // Return an empty ByteBuffer for an empty string.
1:         if (source.isEmpty())
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
1:         return decompose(Duration.from(source));
1:     }
1: 
1:     @Override
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:     {
1:         return this == otherType;
1:     }
1: 
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             return new Constants.Value(fromString((String) parsed));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format("Expected a string representation of a duration, but got a %s: %s",
1:                                                      parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return getSerializer().deserialize(buffer).toString();
1:     }
1: 
1:     @Override
1:     public TypeSerializer<Duration> getSerializer()
1:     {
1:         return DurationSerializer.instance;
1:     }
1: 
1:     @Override
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.DURATION;
1:     }
1: 
1:     @Override
1:     public boolean referencesDuration()
1:     {
1:         return true;
1:     }
1: }
============================================================================