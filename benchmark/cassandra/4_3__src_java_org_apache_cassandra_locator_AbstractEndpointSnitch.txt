1:34e241a: /*
1:07cf56f:  * Licensed to the Apache Software Foundation (ASF) under one
1:07cf56f:  * or more contributor license agreements.  See the NOTICE file
1:07cf56f:  * distributed with this work for additional information
1:07cf56f:  * regarding copyright ownership.  The ASF licenses this file
1:07cf56f:  * to you under the Apache License, Version 2.0 (the
1:07cf56f:  * "License"); you may not use this file except in compliance
1:07cf56f:  * with the License.  You may obtain a copy of the License at
1:07cf56f:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cf56f:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:07cf56f:  */
1:34e241a: package org.apache.cassandra.locator;
4:34e241a: 
1:34e241a: import java.net.InetAddress;
1:31f4e62: import java.util.*;
1:ef25537: 
1:5267112: import org.apache.cassandra.config.DatabaseDescriptor;
1:5267112: 
1:34e241a: public abstract class AbstractEndpointSnitch implements IEndpointSnitch
1:34e241a: {
1:31f4e62:     public abstract int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2);
1:34e241a: 
1:31f4e62:     /**
1:31f4e62:      * Sorts the <tt>Collection</tt> of node addresses by proximity to the given address
1:31f4e62:      * @param address the address to sort by proximity to
1:31f4e62:      * @param unsortedAddress the nodes to sort
1:31f4e62:      * @return a new sorted <tt>List</tt>
1:31f4e62:      */
1:31f4e62:     public List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress)
1:34e241a:     {
1:31f4e62:         List<InetAddress> preferred = new ArrayList<InetAddress>(unsortedAddress);
1:31f4e62:         sortByProximity(address, preferred);
1:31f4e62:         return preferred;
1:31f4e62:     }
1:31f4e62: 
1:31f4e62:     /**
1:31f4e62:      * Sorts the <tt>List</tt> of node addresses, in-place, by proximity to the given address
1:31f4e62:      * @param address the address to sort the proximity by
1:31f4e62:      * @param addresses the nodes to sort
1:31f4e62:      */
1:31f4e62:     public void sortByProximity(final InetAddress address, List<InetAddress> addresses)
1:31f4e62:     {
1:31f4e62:         Collections.sort(addresses, new Comparator<InetAddress>()
1:31f4e62:         {
1:31f4e62:             public int compare(InetAddress a1, InetAddress a2)
1:31f4e62:             {
1:31f4e62:                 return compareEndpoints(address, a1, a2);
1:31f4e62:             }
1:31f4e62:         });
1:34e241a:     }
1:34e241a: 
1:f6f5e0e:     public void gossiperStarting()
1:34e241a:     {
1:a19f7f1:         // noop by default
1:34e241a:     }
1:5267112: 
1:5267112:     public boolean isWorthMergingForRangeQuery(List<InetAddress> merged, List<InetAddress> l1, List<InetAddress> l2)
1:5267112:     {
1:5267112:         // Querying remote DC is likely to be an order of magnitude slower than
1:5267112:         // querying locally, so 2 queries to local nodes is likely to still be
1:5267112:         // faster than 1 query involving remote ones
1:5267112:         boolean mergedHasRemote = hasRemoteNode(merged);
1:5267112:         return mergedHasRemote
1:5267112:              ? hasRemoteNode(l1) || hasRemoteNode(l2)
1:5267112:              : true;
1:5267112:     }
1:5267112: 
1:5267112:     private boolean hasRemoteNode(List<InetAddress> l)
1:5267112:     {
1:5267112:         String localDc = DatabaseDescriptor.getLocalDataCenter();
1:5267112:         for (InetAddress ep : l)
1:5267112:         {
1:5267112:             if (!localDc.equals(getDatacenter(ep)))
1:5267112:                 return true;
1:5267112:         }
1:5267112:         return false;
1:5267112:     }
1:34e241a: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5267112
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isWorthMergingForRangeQuery(List<InetAddress> merged, List<InetAddress> l1, List<InetAddress> l2)
1:     {
1:         // Querying remote DC is likely to be an order of magnitude slower than
1:         // querying locally, so 2 queries to local nodes is likely to still be
1:         // faster than 1 query involving remote ones
1:         boolean mergedHasRemote = hasRemoteNode(merged);
1:         return mergedHasRemote
1:              ? hasRemoteNode(l1) || hasRemoteNode(l2)
1:              : true;
1:     }
1: 
1:     private boolean hasRemoteNode(List<InetAddress> l)
1:     {
1:         String localDc = DatabaseDescriptor.getLocalDataCenter();
1:         for (InetAddress ep : l)
1:         {
1:             if (!localDc.equals(getDatacenter(ep)))
1:                 return true;
1:         }
1:         return false;
1:     }
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:31f4e62
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1:     public abstract int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2);
1:     /**
1:      * Sorts the <tt>Collection</tt> of node addresses by proximity to the given address
1:      * @param address the address to sort by proximity to
1:      * @param unsortedAddress the nodes to sort
1:      * @return a new sorted <tt>List</tt>
1:      */
1:     public List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress)
1:         List<InetAddress> preferred = new ArrayList<InetAddress>(unsortedAddress);
1:         sortByProximity(address, preferred);
1:         return preferred;
1:     }
1: 
1:     /**
1:      * Sorts the <tt>List</tt> of node addresses, in-place, by proximity to the given address
1:      * @param address the address to sort the proximity by
1:      * @param addresses the nodes to sort
1:      */
1:     public void sortByProximity(final InetAddress address, List<InetAddress> addresses)
1:     {
1:         Collections.sort(addresses, new Comparator<InetAddress>()
1:         {
1:             public int compare(InetAddress a1, InetAddress a2)
1:             {
1:                 return compareEndpoints(address, a1, a2);
1:             }
1:         });
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a19f7f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // noop by default
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
commit:00554e9
/////////////////////////////////////////////////////////////////////////
commit:7aac793
/////////////////////////////////////////////////////////////////////////
0:     public abstract void sortByProximity(InetAddress address, List<InetAddress> addresses);
commit:f5ed28f
/////////////////////////////////////////////////////////////////////////
0:     private final Map<Token, ArrayList<InetAddress>> cachedEndpoints = new NonBlockingHashMap<Token, ArrayList<InetAddress>>();
commit:34e241a
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
1: 
1: package org.apache.cassandra.locator;
1: 
1: import java.net.InetAddress;
0: import java.util.Collection;
0: import java.util.List;
0: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: public abstract class AbstractEndpointSnitch implements IEndpointSnitch
1: {
0:     /* list of subscribers that are notified when cached values from this snitch are invalidated */
0:     protected List<AbstractReplicationStrategy> subscribers = new CopyOnWriteArrayList<AbstractReplicationStrategy>();
1: 
0:     public void register(AbstractReplicationStrategy subscriber)
1:     {
0:         subscribers.add(subscriber);
1:     }
1: 
0:     protected void invalidateCachedSnitchValues()
1:     {
0:         for (AbstractReplicationStrategy subscriber : subscribers)
0:             subscriber.invalidateCachedSnitchValues();
1:     }
1: 
0:     public abstract List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress);
0:     public abstract List<InetAddress> sortByProximity(InetAddress address, List<InetAddress> addresses);
1: }
commit:1a904da
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
0: public abstract class AbstractEndpointSnitch implements IEndpointSnitch
commit:9c0f845
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * An endpoint snitch tells Cassandra information about network topology that it can use to route
0:  * requests more efficiently (with "sortByProximity").  Of the abstract methods, isOnSameRack
0:  * and isInSameDataCenter are always required; getLocation is only used by DatacenterShardStrategy.
0:  */
0:      * Determines if 2 nodes are in the same rack in the data center.
/////////////////////////////////////////////////////////////////////////
0:      * Determines if 2 nodes are in the same data center.
/////////////////////////////////////////////////////////////////////////
0:      * Determines the name of the datacenter this endpoint lives in.
0:      * @param endpoint
0:      * @return the name of the datacenter the endpoint lives in
commit:6e5e284
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
commit:0eea213
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.locator;
0: 
0: import java.net.InetAddress;
0: import java.net.UnknownHostException;
0: import java.util.*;
0: 
0: public abstract class AbstractEndpointSnitch implements IEndPointSnitch
0: {
0:     /**
0:      * Helps determine if 2 nodes are in the same rack in the data center.
0:      * @param host a specified endpoint
0:      * @param host2 another specified endpoint
0:      * @return true if on the same rack false otherwise
0:      * @throws UnknownHostException
0:      */
0:     abstract public boolean isOnSameRack(InetAddress host, InetAddress host2) throws UnknownHostException;
0: 
0:     /**
0:      * Helps determine if 2 nodes are in the same data center.
0:      * @param host a specified endpoint
0:      * @param host2 another specified endpoint
0:      * @return true if in the same data center false otherwise
0:      * @throws UnknownHostException
0:      */
0:     abstract public boolean isInSameDataCenter(InetAddress host, InetAddress host2) throws UnknownHostException;
0: 
0:     /**
0:      * Given endpoints this method will help us know the datacenter name where the node is located at.
0:      */
0:     abstract public String getLocation(InetAddress endpoint) throws UnknownHostException;
0: 
0:     public List<InetAddress> getSortedListByProximity(final InetAddress address, Collection<InetAddress> unsortedAddress)
0:     {
0:         List<InetAddress> preferred = new ArrayList<InetAddress>(unsortedAddress);
0:         sortByProximity(address, preferred);
0:         return preferred;
0:     }
0: 
0:     public List<InetAddress> sortByProximity(final InetAddress address, List<InetAddress> addresses)
0:     {
0:         Collections.sort(addresses, new Comparator<InetAddress>()
0:         {
0:             public int compare(InetAddress a1, InetAddress a2)
0:             {
0:                 try
0:                 {
0:                     if (address.equals(a1) && !address.equals(a2))
0:                         return -1;
0:                     if (address.equals(a2) && !address.equals(a1))
0:                         return 1;
0:                     if (isOnSameRack(address, a1) && !isOnSameRack(address, a2))
0:                         return -1;
0:                     if (isOnSameRack(address, a2) && !isOnSameRack(address, a1))
0:                         return 1;
0:                     if (isInSameDataCenter(address, a1) && !isInSameDataCenter(address, a2))
0:                         return -1;
0:                     if (isInSameDataCenter(address, a2) && !isInSameDataCenter(address, a1))
0:                         return 1;
0:                     return 0;
0:                 }
0:                 catch (UnknownHostException e)
0:                 {
0:                     throw new RuntimeException(e);
0:                 }
0:             }
0:         });
0:         return addresses;
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:f6f5e0e
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void gossiperStarting()
0:     {
0:         //noop by default
0:     }
commit:67c5720
/////////////////////////////////////////////////////////////////////////
0: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
0:     {
0:         return a1.getHostAddress().compareTo(a2.getHostAddress());
0:     }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:c8f6619
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.Token;
0: import org.cliffc.high_scale_lib.NonBlockingHashMap;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: import java.util.ArrayList;
0: import java.util.Map;
0:     private static final Logger logger = LoggerFactory.getLogger(AbstractEndpointSnitch.class);
0:     
0:     
0:     private volatile Map<Token, ArrayList<InetAddress>> cachedEndpoints = new NonBlockingHashMap<Token, ArrayList<InetAddress>>();
0:     
0:     public ArrayList<InetAddress> getCachedEndpoints(Token t)
0:         return cachedEndpoints.get(t);
0:     public void cacheEndpoint(Token t, ArrayList<InetAddress> addr)
0:         cachedEndpoints.put(t, addr);
0:     }
0: 
0:     public void clearEndpointCache()
0:     {
0:         logger.debug("clearing cached endpoints");
0:         cachedEndpoints.clear();
============================================================================