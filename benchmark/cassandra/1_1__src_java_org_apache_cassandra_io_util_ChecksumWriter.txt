1:fb22109: /*
1:fb22109:  * Licensed to the Apache Software Foundation (ASF) under one
1:fb22109:  * or more contributor license agreements.  See the NOTICE file
1:fb22109:  * distributed with this work for additional information
1:fb22109:  * regarding copyright ownership.  The ASF licenses this file
1:fb22109:  * to you under the Apache License, Version 2.0 (the
1:fb22109:  * "License"); you may not use this file except in compliance
1:fb22109:  * with the License.  You may obtain a copy of the License at
1:fb22109:  *
1:fb22109:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fb22109:  *
1:fb22109:  * Unless required by applicable law or agreed to in writing, software
1:fb22109:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fb22109:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fb22109:  * See the License for the specific language governing permissions and
1:fb22109:  * limitations under the License.
1:fb22109:  */
1:fb22109: 
1:fb22109: package org.apache.cassandra.io.util;
1:fb22109: 
1:fb22109: import java.io.*;
1:fb22109: import java.nio.ByteBuffer;
1:fb22109: import java.nio.file.Files;
1:fb22109: import java.util.zip.CRC32;
1:fb22109: 
1:fb22109: import javax.annotation.Nonnull;
1:fb22109: 
1:fb22109: import com.google.common.base.Charsets;
1:fb22109: 
1:fb22109: import org.apache.cassandra.io.FSWriteError;
1:fb22109: 
1:fb22109: public class ChecksumWriter
1:fb22109: {
1:fb22109:     private final CRC32 incrementalChecksum = new CRC32();
1:fb22109:     private final DataOutput incrementalOut;
1:fb22109:     private final CRC32 fullChecksum = new CRC32();
1:fb22109: 
1:fb22109:     public ChecksumWriter(DataOutput incrementalOut)
1:fb22109:     {
1:fb22109:         this.incrementalOut = incrementalOut;
1:fb22109:     }
1:fb22109: 
1:fb22109:     public void writeChunkSize(int length)
1:fb22109:     {
1:fb22109:         try
1:fb22109:         {
1:fb22109:             incrementalOut.writeInt(length);
1:fb22109:         }
1:fb22109:         catch (IOException e)
1:fb22109:         {
1:fb22109:             throw new IOError(e);
1:fb22109:         }
1:fb22109:     }
1:fb22109: 
1:fb22109:     // checksumIncrementalResult indicates if the checksum we compute for this buffer should itself be
1:fb22109:     // included in the full checksum, translating to if the partial checksum is serialized along with the
1:fb22109:     // data it checksums (in which case the file checksum as calculated by external tools would mismatch if
1:fb22109:     // we did not include it), or independently.
1:fb22109: 
1:fb22109:     // CompressedSequentialWriters serialize the partial checksums inline with the compressed data chunks they
1:fb22109:     // corroborate, whereas ChecksummedSequentialWriters serialize them to a different file.
1:fb22109:     public void appendDirect(ByteBuffer bb, boolean checksumIncrementalResult)
1:fb22109:     {
1:fb22109:         try
1:fb22109:         {
1:fb22109:             ByteBuffer toAppend = bb.duplicate();
1:fb22109:             toAppend.mark();
1:fb22109:             incrementalChecksum.update(toAppend);
1:fb22109:             toAppend.reset();
1:fb22109: 
1:fb22109:             int incrementalChecksumValue = (int) incrementalChecksum.getValue();
1:fb22109:             incrementalOut.writeInt(incrementalChecksumValue);
1:fb22109: 
1:fb22109:             fullChecksum.update(toAppend);
1:fb22109:             if (checksumIncrementalResult)
1:fb22109:             {
1:fb22109:                 ByteBuffer byteBuffer = ByteBuffer.allocate(4);
1:fb22109:                 byteBuffer.putInt(incrementalChecksumValue);
1:fb22109:                 assert byteBuffer.arrayOffset() == 0;
1:fb22109:                 fullChecksum.update(byteBuffer.array(), 0, byteBuffer.array().length);
1:fb22109:             }
1:fb22109:             incrementalChecksum.reset();
1:fb22109: 
1:fb22109:         }
1:fb22109:         catch (IOException e)
1:fb22109:         {
1:fb22109:             throw new IOError(e);
1:fb22109:         }
1:fb22109:     }
1:fb22109: 
1:fb22109:     public void writeFullChecksum(@Nonnull File digestFile)
1:fb22109:     {
1:fb22109:         try (BufferedWriter out = Files.newBufferedWriter(digestFile.toPath(), Charsets.UTF_8))
1:fb22109:         {
1:fb22109:             out.write(String.valueOf(fullChecksum.getValue()));
1:fb22109:         }
1:fb22109:         catch (IOException e)
1:fb22109:         {
1:fb22109:             throw new FSWriteError(e, digestFile);
1:fb22109:         }
1:fb22109:     }
1:fb22109: }
1:fb22109: 
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:fb22109
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.*;
1: import java.nio.ByteBuffer;
1: import java.nio.file.Files;
1: import java.util.zip.CRC32;
1: 
1: import javax.annotation.Nonnull;
1: 
1: import com.google.common.base.Charsets;
1: 
1: import org.apache.cassandra.io.FSWriteError;
1: 
1: public class ChecksumWriter
1: {
1:     private final CRC32 incrementalChecksum = new CRC32();
1:     private final DataOutput incrementalOut;
1:     private final CRC32 fullChecksum = new CRC32();
1: 
1:     public ChecksumWriter(DataOutput incrementalOut)
1:     {
1:         this.incrementalOut = incrementalOut;
1:     }
1: 
1:     public void writeChunkSize(int length)
1:     {
1:         try
1:         {
1:             incrementalOut.writeInt(length);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new IOError(e);
1:         }
1:     }
1: 
1:     // checksumIncrementalResult indicates if the checksum we compute for this buffer should itself be
1:     // included in the full checksum, translating to if the partial checksum is serialized along with the
1:     // data it checksums (in which case the file checksum as calculated by external tools would mismatch if
1:     // we did not include it), or independently.
1: 
1:     // CompressedSequentialWriters serialize the partial checksums inline with the compressed data chunks they
1:     // corroborate, whereas ChecksummedSequentialWriters serialize them to a different file.
1:     public void appendDirect(ByteBuffer bb, boolean checksumIncrementalResult)
1:     {
1:         try
1:         {
1:             ByteBuffer toAppend = bb.duplicate();
1:             toAppend.mark();
1:             incrementalChecksum.update(toAppend);
1:             toAppend.reset();
1: 
1:             int incrementalChecksumValue = (int) incrementalChecksum.getValue();
1:             incrementalOut.writeInt(incrementalChecksumValue);
1: 
1:             fullChecksum.update(toAppend);
1:             if (checksumIncrementalResult)
1:             {
1:                 ByteBuffer byteBuffer = ByteBuffer.allocate(4);
1:                 byteBuffer.putInt(incrementalChecksumValue);
1:                 assert byteBuffer.arrayOffset() == 0;
1:                 fullChecksum.update(byteBuffer.array(), 0, byteBuffer.array().length);
1:             }
1:             incrementalChecksum.reset();
1: 
1:         }
1:         catch (IOException e)
1:         {
1:             throw new IOError(e);
1:         }
1:     }
1: 
1:     public void writeFullChecksum(@Nonnull File digestFile)
1:     {
1:         try (BufferedWriter out = Files.newBufferedWriter(digestFile.toPath(), Charsets.UTF_8))
1:         {
1:             out.write(String.valueOf(fullChecksum.getValue()));
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSWriteError(e, digestFile);
1:         }
1:     }
1: }
1: 
============================================================================