1:faf9181: /*
1:faf9181:  * Licensed to the Apache Software Foundation (ASF) under one
1:faf9181:  * or more contributor license agreements.  See the NOTICE file
1:faf9181:  * distributed with this work for additional information
1:faf9181:  * regarding copyright ownership.  The ASF licenses this file
1:faf9181:  * to you under the Apache License, Version 2.0 (the
1:faf9181:  * "License"); you may not use this file except in compliance
1:faf9181:  * with the License.  You may obtain a copy of the License at
1:faf9181:  *
1:faf9181:  *     http://www.apache.org/licenses/LICENSE-2.0
1:faf9181:  *
1:faf9181:  * Unless required by applicable law or agreed to in writing, software
1:faf9181:  * distributed under the License is distributed on an "AS IS" BASIS,
1:faf9181:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:faf9181:  * See the License for the specific language governing permissions and
1:faf9181:  * limitations under the License.
1:faf9181:  */
1:faf9181: package org.apache.cassandra.utils;
1:faf9181: 
1:faf9181: import java.io.Serializable;
1:faf9181: import java.util.*;
1:faf9181: import java.util.concurrent.*;
1:faf9181: 
1:faf9181: import org.apache.cassandra.concurrent.*;
1:faf9181: import org.slf4j.*;
1:faf9181: 
1:faf9181: import com.clearspring.analytics.stream.*;
1:faf9181: import com.clearspring.analytics.stream.cardinality.HyperLogLogPlus;
1:faf9181: import com.google.common.annotations.VisibleForTesting;
1:faf9181: 
1:faf9181: public class TopKSampler<T>
1:faf9181: {
1:faf9181:     private static final Logger logger = LoggerFactory.getLogger(TopKSampler.class);
1:faf9181:     private volatile boolean enabled = false;
1:faf9181: 
1:faf9181:     @VisibleForTesting
1:faf9181:     static final ThreadPoolExecutor samplerExecutor = new JMXEnabledThreadPoolExecutor(1, 1,
1:faf9181:             TimeUnit.SECONDS,
1:faf9181:             new LinkedBlockingQueue<Runnable>(),
1:faf9181:             new NamedThreadFactory("Sampler"),
1:faf9181:             "internal");
1:faf9181: 
1:faf9181:     private StreamSummary<T> summary;
1:faf9181:     @VisibleForTesting
1:faf9181:     HyperLogLogPlus hll;
1:faf9181: 
1:faf9181:     /**
1:faf9181:      * Start to record samples
1:faf9181:      *
1:faf9181:      * @param capacity
1:faf9181:      *            Number of sample items to keep in memory, the lower this is
1:faf9181:      *            the less accurate results are. For best results use value
1:faf9181:      *            close to cardinality, but understand the memory trade offs.
1:faf9181:      */
1:faf9181:     public synchronized void beginSampling(int capacity)
1:faf9181:     {
1:faf9181:         if (!enabled)
1:faf9181:         {
1:faf9181:             summary = new StreamSummary<T>(capacity);
1:faf9181:             hll = new HyperLogLogPlus(14);
1:faf9181:             enabled = true;
1:faf9181:         }
1:faf9181:     }
1:faf9181: 
1:faf9181:     /**
1:faf9181:      * Call to stop collecting samples, and gather the results
1:faf9181:      * @param count Number of most frequent items to return
1:faf9181:      */
1:faf9181:     public synchronized SamplerResult<T> finishSampling(int count)
1:faf9181:     {
1:faf9181:         List<Counter<T>> results = Collections.EMPTY_LIST;
1:faf9181:         long cardinality = 0;
1:faf9181:         if (enabled)
1:faf9181:         {
1:faf9181:             enabled = false;
1:faf9181:             results = summary.topK(count);
1:faf9181:             cardinality = hll.cardinality();
1:faf9181:         }
1:faf9181:         return new SamplerResult<T>(results, cardinality);
1:faf9181:     }
1:faf9181: 
1:faf9181:     public void addSample(T item)
1:faf9181:     {
1:0127b69:         addSample(item, item.hashCode(), 1);
1:faf9181:     }
1:faf9181: 
1:faf9181:     /**
1:faf9181:      * Adds a sample to statistics collection. This method is non-blocking and will
1:faf9181:      * use the "Sampler" thread pool to record results if the sampler is enabled.  If not
1:faf9181:      * sampling this is a NOOP
1:faf9181:      */
1:0127b69:     public void addSample(final T item, final long hash, final int value)
1:faf9181:     {
1:faf9181:         if (enabled)
1:faf9181:         {
1:faf9181:             final Object lock = this;
1:faf9181:             samplerExecutor.execute(new Runnable()
1:faf9181:             {
1:faf9181:                 public void run()
1:faf9181:                 {
1:faf9181:                     // samplerExecutor is single threaded but still need
1:faf9181:                     // synchronization against jmx calls to finishSampling
1:faf9181:                     synchronized (lock)
1:faf9181:                     {
1:faf9181:                         if (enabled)
1:faf9181:                         {
1:faf9181:                             try
1:faf9181:                             {
1:faf9181:                                 summary.offer(item, value);
1:0127b69:                                 hll.offerHashed(hash);
1:faf9181:                             } catch (Exception e)
1:faf9181:                             {
1:4a849ef:                                 logger.trace("Failure to offer sample", e);
1:faf9181:                             }
1:faf9181:                         }
1:faf9181:                     }
1:faf9181:                 }
1:faf9181:             });
1:faf9181:         }
1:faf9181:     }
1:faf9181: 
1:faf9181:     /**
1:faf9181:      * Represents the cardinality and the topK ranked items collected during a
1:faf9181:      * sample period
1:faf9181:      */
1:faf9181:     public static class SamplerResult<S> implements Serializable
1:faf9181:     {
1:faf9181:         public final List<Counter<S>> topK;
1:faf9181:         public final long cardinality;
1:faf9181: 
1:faf9181:         public SamplerResult(List<Counter<S>> topK, long cardinality)
1:faf9181:         {
1:faf9181:             this.topK = topK;
1:faf9181:             this.cardinality = cardinality;
1:faf9181:         }
1:faf9181:     }
1:faf9181: 
1:faf9181: }
1:faf9181: 
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:                                 logger.trace("Failure to offer sample", e);
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:0127b69
/////////////////////////////////////////////////////////////////////////
1:         addSample(item, item.hashCode(), 1);
/////////////////////////////////////////////////////////////////////////
1:     public void addSample(final T item, final long hash, final int value)
/////////////////////////////////////////////////////////////////////////
1:                                 hll.offerHashed(hash);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:faf9181
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.io.Serializable;
1: import java.util.*;
1: import java.util.concurrent.*;
1: 
1: import org.apache.cassandra.concurrent.*;
1: import org.slf4j.*;
1: 
1: import com.clearspring.analytics.stream.*;
1: import com.clearspring.analytics.stream.cardinality.HyperLogLogPlus;
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: public class TopKSampler<T>
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(TopKSampler.class);
1:     private volatile boolean enabled = false;
1: 
1:     @VisibleForTesting
1:     static final ThreadPoolExecutor samplerExecutor = new JMXEnabledThreadPoolExecutor(1, 1,
1:             TimeUnit.SECONDS,
1:             new LinkedBlockingQueue<Runnable>(),
1:             new NamedThreadFactory("Sampler"),
1:             "internal");
1: 
1:     private StreamSummary<T> summary;
1:     @VisibleForTesting
1:     HyperLogLogPlus hll;
1: 
1:     /**
1:      * Start to record samples
1:      *
1:      * @param capacity
1:      *            Number of sample items to keep in memory, the lower this is
1:      *            the less accurate results are. For best results use value
1:      *            close to cardinality, but understand the memory trade offs.
1:      */
1:     public synchronized void beginSampling(int capacity)
1:     {
1:         if (!enabled)
1:         {
1:             summary = new StreamSummary<T>(capacity);
1:             hll = new HyperLogLogPlus(14);
1:             enabled = true;
1:         }
1:     }
1: 
1:     /**
1:      * Call to stop collecting samples, and gather the results
1:      * @param count Number of most frequent items to return
1:      */
1:     public synchronized SamplerResult<T> finishSampling(int count)
1:     {
1:         List<Counter<T>> results = Collections.EMPTY_LIST;
1:         long cardinality = 0;
1:         if (enabled)
1:         {
1:             enabled = false;
1:             results = summary.topK(count);
1:             cardinality = hll.cardinality();
1:         }
1:         return new SamplerResult<T>(results, cardinality);
1:     }
1: 
1:     public void addSample(T item)
1:     {
0:         addSample(item, 1);
1:     }
1: 
1:     /**
1:      * Adds a sample to statistics collection. This method is non-blocking and will
1:      * use the "Sampler" thread pool to record results if the sampler is enabled.  If not
1:      * sampling this is a NOOP
1:      */
0:     public void addSample(final T item, final int value)
1:     {
1:         if (enabled)
1:         {
1:             final Object lock = this;
1:             samplerExecutor.execute(new Runnable()
1:             {
1:                 public void run()
1:                 {
1:                     // samplerExecutor is single threaded but still need
1:                     // synchronization against jmx calls to finishSampling
1:                     synchronized (lock)
1:                     {
1:                         if (enabled)
1:                         {
1:                             try
1:                             {
1:                                 summary.offer(item, value);
0:                                 hll.offer(item);
1:                             } catch (Exception e)
1:                             {
0:                                 logger.debug("Failure to offer sample", e);
1:                             }
1:                         }
1:                     }
1:                 }
1:             });
1:         }
1:     }
1: 
1:     /**
1:      * Represents the cardinality and the topK ranked items collected during a
1:      * sample period
1:      */
1:     public static class SamplerResult<S> implements Serializable
1:     {
1:         public final List<Counter<S>> topK;
1:         public final long cardinality;
1: 
1:         public SamplerResult(List<Counter<S>> topK, long cardinality)
1:         {
1:             this.topK = topK;
1:             this.cardinality = cardinality;
1:         }
1:     }
1: 
1: }
1: 
============================================================================