1:e2a0d75: /*
1:e2a0d75:  * Licensed to the Apache Software Foundation (ASF) under one
1:e2a0d75:  * or more contributor license agreements.  See the NOTICE file
1:e2a0d75:  * distributed with this work for additional information
1:e2a0d75:  * regarding copyright ownership.  The ASF licenses this file
1:e2a0d75:  * to you under the Apache License, Version 2.0 (the
1:e2a0d75:  * "License"); you may not use this file except in compliance
1:e2a0d75:  * with the License.  You may obtain a copy of the License at
1:e2a0d75:  *
1:e2a0d75:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e2a0d75:  *
1:e2a0d75:  * Unless required by applicable law or agreed to in writing, software
1:e2a0d75:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2a0d75:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2a0d75:  * See the License for the specific language governing permissions and
1:e2a0d75:  * limitations under the License.
1:e2a0d75:  */
1:e2a0d75: 
1:e2a0d75: package org.apache.cassandra.dht.tokenallocator;
1:e2a0d75: 
1:e2a0d75: import java.util.Map;
1:e2a0d75: import java.util.NavigableMap;
1:e2a0d75: 
1:e2a0d75: import com.google.common.collect.Maps;
1:e2a0d75: 
1:e2a0d75: import org.apache.cassandra.dht.IPartitioner;
1:e2a0d75: import org.apache.cassandra.dht.Token;
1:e2a0d75: 
1:e2a0d75: public abstract class TokenAllocatorBase<Unit> implements TokenAllocator<Unit>
1:e2a0d75: {
1:e2a0d75:     final NavigableMap<Token, Unit> sortedTokens;
1:e2a0d75:     final ReplicationStrategy<Unit> strategy;
1:e2a0d75:     final IPartitioner partitioner;
1:e2a0d75: 
1:e2a0d75:     protected TokenAllocatorBase(NavigableMap<Token, Unit> sortedTokens,
1:e2a0d75:                              ReplicationStrategy<Unit> strategy,
1:e2a0d75:                              IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         this.sortedTokens = sortedTokens;
1:e2a0d75:         this.strategy = strategy;
1:e2a0d75:         this.partitioner = partitioner;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     public abstract int getReplicas();
1:e2a0d75: 
1:e2a0d75:     protected Map<Unit, UnitInfo<Unit>> createUnitInfos(Map<Object, GroupInfo> groups)
1:e2a0d75:     {
1:e2a0d75:         Map<Unit, UnitInfo<Unit>> map = Maps.newHashMap();
1:e2a0d75:         for (Unit n : sortedTokens.values())
1:e2a0d75:         {
1:e2a0d75:             UnitInfo<Unit> ni = map.get(n);
1:e2a0d75:             if (ni == null)
1:e2a0d75:                 map.put(n, ni = new UnitInfo<>(n, 0, groups, strategy));
1:e2a0d75:             ni.tokenCount++;
1:e2a0d75:         }
1:e2a0d75:         return map;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private Map.Entry<Token, Unit> mapEntryFor(Token t)
1:e2a0d75:     {
1:e2a0d75:         Map.Entry<Token, Unit> en = sortedTokens.floorEntry(t);
1:e2a0d75:         if (en == null)
1:e2a0d75:             en = sortedTokens.lastEntry();
1:e2a0d75:         return en;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     Unit unitFor(Token t)
1:e2a0d75:     {
1:e2a0d75:         return mapEntryFor(t).getValue();
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     // get or initialise the shared GroupInfo associated with the unit
1:e2a0d75:     private static <Unit> GroupInfo getGroup(Unit unit, Map<Object, GroupInfo> groupMap, ReplicationStrategy<Unit> strategy)
1:e2a0d75:     {
1:e2a0d75:         Object groupClass = strategy.getGroup(unit);
1:e2a0d75:         GroupInfo group = groupMap.get(groupClass);
1:e2a0d75:         if (group == null)
1:e2a0d75:             groupMap.put(groupClass, group = new GroupInfo(groupClass));
1:e2a0d75:         return group;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     /**
1:e2a0d75:      * Unique group object that one or more UnitInfo objects link to.
1:e2a0d75:      */
1:e2a0d75:     static class GroupInfo
1:e2a0d75:     {
1:e2a0d75:         /**
1:e2a0d75:          * Group identifier given by ReplicationStrategy.getGroup(Unit).
1:e2a0d75:          */
1:e2a0d75:         final Object group;
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Seen marker. When non-null, the group is already seen in replication walks.
1:e2a0d75:          * Also points to previous seen group to enable walking the seen groups and clearing the seen markers.
1:e2a0d75:          */
1:e2a0d75:         GroupInfo prevSeen = null;
1:e2a0d75:         /**
1:e2a0d75:          * Same marker/chain used by populateTokenInfo.
1:e2a0d75:          */
1:e2a0d75:         GroupInfo prevPopulate = null;
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Value used as terminator for seen chains.
1:e2a0d75:          */
1:e2a0d75:         static GroupInfo TERMINATOR = new GroupInfo(null);
1:e2a0d75: 
1:e2a0d75:         public GroupInfo(Object group)
1:e2a0d75:         {
1:e2a0d75:             this.group = group;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public String toString()
1:e2a0d75:         {
1:e2a0d75:             return group.toString() + (prevSeen != null ? "*" : "");
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     /**
1:e2a0d75:      * Unit information created and used by ReplicationAwareTokenDistributor. Contained vnodes all point to the same
1:e2a0d75:      * instance.
1:e2a0d75:      */
1:e2a0d75:     static class UnitInfo<Unit>
1:e2a0d75:     {
1:e2a0d75:         final Unit unit;
1:e2a0d75:         final GroupInfo group;
1:e2a0d75:         double ownership;
1:e2a0d75:         int tokenCount;
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * During evaluateImprovement this is used to form a chain of units affected by the candidate insertion.
1:e2a0d75:          */
1:e2a0d75:         UnitInfo<Unit> prevUsed;
1:e2a0d75:         /**
1:e2a0d75:          * During evaluateImprovement this holds the ownership after the candidate insertion.
1:e2a0d75:          */
1:e2a0d75:         double adjustedOwnership;
1:e2a0d75: 
1:e2a0d75:         private UnitInfo(Unit unit, GroupInfo group)
1:e2a0d75:         {
1:e2a0d75:             this.unit = unit;
1:e2a0d75:             this.group = group;
1:e2a0d75:             this.tokenCount = 0;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public UnitInfo(Unit unit, double ownership, Map<Object, GroupInfo> groupMap, ReplicationStrategy<Unit> strategy)
1:e2a0d75:         {
1:e2a0d75:             this(unit, getGroup(unit, groupMap, strategy));
1:e2a0d75:             this.ownership = ownership;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public String toString()
1:e2a0d75:         {
1:e2a0d75:             return String.format("%s%s(%.2e)%s",
1:e2a0d75:                                  unit, unit == group.group ? (group.prevSeen != null ? "*" : "") : ":" + group.toString(),
1:e2a0d75:                                  ownership, prevUsed != null ? (prevUsed == this ? "#" : "->" + prevUsed.toString()) : "");
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private static class CircularList<T extends CircularList<T>>
1:e2a0d75:     {
1:e2a0d75:         T prev;
1:e2a0d75:         T next;
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Inserts this after unit in the circular list which starts at head. Returns the new head of the list, which
1:e2a0d75:          * only changes if head was null.
1:e2a0d75:          */
1:e2a0d75:         @SuppressWarnings("unchecked")
1:e2a0d75:         T insertAfter(T head, T unit)
1:e2a0d75:         {
1:e2a0d75:             if (head == null)
1:e2a0d75:             {
1:e2a0d75:                 return prev = next = (T) this;
1:e2a0d75:             }
1:e2a0d75:             assert unit != null;
1:e2a0d75:             assert unit.next != null;
1:e2a0d75:             prev = unit;
1:e2a0d75:             next = unit.next;
1:e2a0d75:             prev.next = (T) this;
1:e2a0d75:             next.prev = (T) this;
1:e2a0d75:             return head;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Removes this from the list that starts at head. Returns the new head of the list, which only changes if the
1:e2a0d75:          * head was removed.
1:e2a0d75:          */
1:e2a0d75:         T removeFrom(T head)
1:e2a0d75:         {
1:e2a0d75:             next.prev = prev;
1:e2a0d75:             prev.next = next;
1:e2a0d75:             return this == head ? (this == next ? null : next) : head;
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     static class BaseTokenInfo<Unit, T extends BaseTokenInfo<Unit, T>> extends CircularList<T>
1:e2a0d75:     {
1:e2a0d75:         final Token token;
1:e2a0d75:         final UnitInfo<Unit> owningUnit;
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Start of the replication span for the vnode, i.e. the first token of the RF'th group seen before the token.
1:e2a0d75:          * The replicated ownership of the unit is the range between {@code replicationStart} and {@code token}.
1:e2a0d75:          */
1:e2a0d75:         Token replicationStart;
1:e2a0d75:         /**
1:e2a0d75:          * The closest position that the new candidate can take to become the new replication start. If candidate is
1:e2a0d75:          * closer, the start moves to this position. Used to determine replicationStart after insertion of new token.
1:e2a0d75:          *
1:e2a0d75:          * Usually the RF minus one boundary, i.e. the first token of the RF-1'th group seen before the token.
1:e2a0d75:          */
1:e2a0d75:         Token replicationThreshold;
1:e2a0d75:         /**
1:e2a0d75:          * Current replicated ownership. This number is reflected in the owning unit's ownership.
1:e2a0d75:          */
1:e2a0d75:         double replicatedOwnership = 0;
1:e2a0d75: 
1:e2a0d75:         public BaseTokenInfo(Token token, UnitInfo<Unit> owningUnit)
1:e2a0d75:         {
1:e2a0d75:             this.token = token;
1:e2a0d75:             this.owningUnit = owningUnit;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public String toString()
1:e2a0d75:         {
1:e2a0d75:             return String.format("%s(%s)", token, owningUnit);
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Previous unit in the token ring. For existing tokens this is prev,
1:e2a0d75:          * for candidates it's "split".
1:e2a0d75:          */
1:e2a0d75:         TokenInfo<Unit> prevInRing()
1:e2a0d75:         {
1:e2a0d75:             return null;
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     /**
1:e2a0d75:      * TokenInfo about existing tokens/vnodes.
1:e2a0d75:      */
1:e2a0d75:     static class TokenInfo<Unit> extends BaseTokenInfo<Unit, TokenInfo<Unit>>
1:e2a0d75:     {
1:e2a0d75:         public TokenInfo(Token token, UnitInfo<Unit> owningUnit)
1:e2a0d75:         {
1:e2a0d75:             super(token, owningUnit);
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         TokenInfo<Unit> prevInRing()
1:e2a0d75:         {
1:e2a0d75:             return prev;
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     static class Weighted<T> implements Comparable<Weighted<T>>
1:e2a0d75:     {
1:e2a0d75:         final double weight;
1:e2a0d75:         final T value;
1:e2a0d75: 
1:e2a0d75:         public Weighted(double weight, T value)
1:e2a0d75:         {
1:e2a0d75:             this.weight = weight;
1:e2a0d75:             this.value = value;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         @Override
1:e2a0d75:         public int compareTo(Weighted<T> o)
1:e2a0d75:         {
1:e2a0d75:             int cmp = Double.compare(o.weight, this.weight);
1:e2a0d75:             return cmp;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         @Override
1:e2a0d75:         public String toString()
1:e2a0d75:         {
1:e2a0d75:             return String.format("%s<%s>", value, weight);
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.dht.tokenallocator;
1: 
1: import java.util.Map;
1: import java.util.NavigableMap;
1: 
1: import com.google.common.collect.Maps;
1: 
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.Token;
1: 
1: public abstract class TokenAllocatorBase<Unit> implements TokenAllocator<Unit>
1: {
1:     final NavigableMap<Token, Unit> sortedTokens;
1:     final ReplicationStrategy<Unit> strategy;
1:     final IPartitioner partitioner;
1: 
1:     protected TokenAllocatorBase(NavigableMap<Token, Unit> sortedTokens,
1:                              ReplicationStrategy<Unit> strategy,
1:                              IPartitioner partitioner)
1:     {
1:         this.sortedTokens = sortedTokens;
1:         this.strategy = strategy;
1:         this.partitioner = partitioner;
1:     }
1: 
1:     public abstract int getReplicas();
1: 
1:     protected Map<Unit, UnitInfo<Unit>> createUnitInfos(Map<Object, GroupInfo> groups)
1:     {
1:         Map<Unit, UnitInfo<Unit>> map = Maps.newHashMap();
1:         for (Unit n : sortedTokens.values())
1:         {
1:             UnitInfo<Unit> ni = map.get(n);
1:             if (ni == null)
1:                 map.put(n, ni = new UnitInfo<>(n, 0, groups, strategy));
1:             ni.tokenCount++;
1:         }
1:         return map;
1:     }
1: 
1:     private Map.Entry<Token, Unit> mapEntryFor(Token t)
1:     {
1:         Map.Entry<Token, Unit> en = sortedTokens.floorEntry(t);
1:         if (en == null)
1:             en = sortedTokens.lastEntry();
1:         return en;
1:     }
1: 
1:     Unit unitFor(Token t)
1:     {
1:         return mapEntryFor(t).getValue();
1:     }
1: 
1:     // get or initialise the shared GroupInfo associated with the unit
1:     private static <Unit> GroupInfo getGroup(Unit unit, Map<Object, GroupInfo> groupMap, ReplicationStrategy<Unit> strategy)
1:     {
1:         Object groupClass = strategy.getGroup(unit);
1:         GroupInfo group = groupMap.get(groupClass);
1:         if (group == null)
1:             groupMap.put(groupClass, group = new GroupInfo(groupClass));
1:         return group;
1:     }
1: 
1:     /**
1:      * Unique group object that one or more UnitInfo objects link to.
1:      */
1:     static class GroupInfo
1:     {
1:         /**
1:          * Group identifier given by ReplicationStrategy.getGroup(Unit).
1:          */
1:         final Object group;
1: 
1:         /**
1:          * Seen marker. When non-null, the group is already seen in replication walks.
1:          * Also points to previous seen group to enable walking the seen groups and clearing the seen markers.
1:          */
1:         GroupInfo prevSeen = null;
1:         /**
1:          * Same marker/chain used by populateTokenInfo.
1:          */
1:         GroupInfo prevPopulate = null;
1: 
1:         /**
1:          * Value used as terminator for seen chains.
1:          */
1:         static GroupInfo TERMINATOR = new GroupInfo(null);
1: 
1:         public GroupInfo(Object group)
1:         {
1:             this.group = group;
1:         }
1: 
1:         public String toString()
1:         {
1:             return group.toString() + (prevSeen != null ? "*" : "");
1:         }
1:     }
1: 
1:     /**
1:      * Unit information created and used by ReplicationAwareTokenDistributor. Contained vnodes all point to the same
1:      * instance.
1:      */
1:     static class UnitInfo<Unit>
1:     {
1:         final Unit unit;
1:         final GroupInfo group;
1:         double ownership;
1:         int tokenCount;
1: 
1:         /**
1:          * During evaluateImprovement this is used to form a chain of units affected by the candidate insertion.
1:          */
1:         UnitInfo<Unit> prevUsed;
1:         /**
1:          * During evaluateImprovement this holds the ownership after the candidate insertion.
1:          */
1:         double adjustedOwnership;
1: 
1:         private UnitInfo(Unit unit, GroupInfo group)
1:         {
1:             this.unit = unit;
1:             this.group = group;
1:             this.tokenCount = 0;
1:         }
1: 
1:         public UnitInfo(Unit unit, double ownership, Map<Object, GroupInfo> groupMap, ReplicationStrategy<Unit> strategy)
1:         {
1:             this(unit, getGroup(unit, groupMap, strategy));
1:             this.ownership = ownership;
1:         }
1: 
1:         public String toString()
1:         {
1:             return String.format("%s%s(%.2e)%s",
1:                                  unit, unit == group.group ? (group.prevSeen != null ? "*" : "") : ":" + group.toString(),
1:                                  ownership, prevUsed != null ? (prevUsed == this ? "#" : "->" + prevUsed.toString()) : "");
1:         }
1:     }
1: 
1:     private static class CircularList<T extends CircularList<T>>
1:     {
1:         T prev;
1:         T next;
1: 
1:         /**
1:          * Inserts this after unit in the circular list which starts at head. Returns the new head of the list, which
1:          * only changes if head was null.
1:          */
1:         @SuppressWarnings("unchecked")
1:         T insertAfter(T head, T unit)
1:         {
1:             if (head == null)
1:             {
1:                 return prev = next = (T) this;
1:             }
1:             assert unit != null;
1:             assert unit.next != null;
1:             prev = unit;
1:             next = unit.next;
1:             prev.next = (T) this;
1:             next.prev = (T) this;
1:             return head;
1:         }
1: 
1:         /**
1:          * Removes this from the list that starts at head. Returns the new head of the list, which only changes if the
1:          * head was removed.
1:          */
1:         T removeFrom(T head)
1:         {
1:             next.prev = prev;
1:             prev.next = next;
1:             return this == head ? (this == next ? null : next) : head;
1:         }
1:     }
1: 
1:     static class BaseTokenInfo<Unit, T extends BaseTokenInfo<Unit, T>> extends CircularList<T>
1:     {
1:         final Token token;
1:         final UnitInfo<Unit> owningUnit;
1: 
1:         /**
1:          * Start of the replication span for the vnode, i.e. the first token of the RF'th group seen before the token.
1:          * The replicated ownership of the unit is the range between {@code replicationStart} and {@code token}.
1:          */
1:         Token replicationStart;
1:         /**
1:          * The closest position that the new candidate can take to become the new replication start. If candidate is
1:          * closer, the start moves to this position. Used to determine replicationStart after insertion of new token.
1:          *
1:          * Usually the RF minus one boundary, i.e. the first token of the RF-1'th group seen before the token.
1:          */
1:         Token replicationThreshold;
1:         /**
1:          * Current replicated ownership. This number is reflected in the owning unit's ownership.
1:          */
1:         double replicatedOwnership = 0;
1: 
1:         public BaseTokenInfo(Token token, UnitInfo<Unit> owningUnit)
1:         {
1:             this.token = token;
1:             this.owningUnit = owningUnit;
1:         }
1: 
1:         public String toString()
1:         {
1:             return String.format("%s(%s)", token, owningUnit);
1:         }
1: 
1:         /**
1:          * Previous unit in the token ring. For existing tokens this is prev,
1:          * for candidates it's "split".
1:          */
1:         TokenInfo<Unit> prevInRing()
1:         {
1:             return null;
1:         }
1:     }
1: 
1:     /**
1:      * TokenInfo about existing tokens/vnodes.
1:      */
1:     static class TokenInfo<Unit> extends BaseTokenInfo<Unit, TokenInfo<Unit>>
1:     {
1:         public TokenInfo(Token token, UnitInfo<Unit> owningUnit)
1:         {
1:             super(token, owningUnit);
1:         }
1: 
1:         TokenInfo<Unit> prevInRing()
1:         {
1:             return prev;
1:         }
1:     }
1: 
1:     static class Weighted<T> implements Comparable<Weighted<T>>
1:     {
1:         final double weight;
1:         final T value;
1: 
1:         public Weighted(double weight, T value)
1:         {
1:             this.weight = weight;
1:             this.value = value;
1:         }
1: 
1:         @Override
1:         public int compareTo(Weighted<T> o)
1:         {
1:             int cmp = Double.compare(o.weight, this.weight);
1:             return cmp;
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
1:             return String.format("%s<%s>", value, weight);
1:         }
1:     }
1: }
============================================================================