1:dbf6e62: /*
1:dbf6e62:  * Licensed to the Apache Software Foundation (ASF) under one
1:dbf6e62:  * or more contributor license agreements.  See the NOTICE file
1:dbf6e62:  * distributed with this work for additional information
1:dbf6e62:  * regarding copyright ownership.  The ASF licenses this file
1:dbf6e62:  * to you under the Apache License, Version 2.0 (the
1:dbf6e62:  * "License"); you may not use this file except in compliance
1:dbf6e62:  * with the License.  You may obtain a copy of the License at
1:dbf6e62:  *
1:dbf6e62:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dbf6e62:  *
1:dbf6e62:  * Unless required by applicable law or agreed to in writing, software
1:dbf6e62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dbf6e62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dbf6e62:  * See the License for the specific language governing permissions and
1:dbf6e62:  * limitations under the License.
1:dbf6e62:  */
1:dbf6e62: 
1:dbf6e62: package org.apache.cassandra.concurrent;
1:dbf6e62: 
1:dbf6e62: import java.util.Arrays;
1:dbf6e62: 
1:dbf6e62: import org.apache.cassandra.service.ClientWarn;
1:dbf6e62: import org.apache.cassandra.tracing.TraceState;
1:dbf6e62: import org.apache.cassandra.tracing.Tracing;
1:dbf6e62: 
1:dbf6e62: /*
1:dbf6e62:  * This class only knows about Tracing and ClientWarn, so if any different executor locals are added, it must be
1:dbf6e62:  * updated.
1:dbf6e62:  *
1:dbf6e62:  * We don't enumerate the ExecutorLocal.all array each time because it would be much slower.
1:dbf6e62:  */
1:dbf6e62: public class ExecutorLocals
1:dbf6e62: {
1:dbf6e62:     private static final ExecutorLocal<TraceState> tracing = Tracing.instance;
1:dbf6e62:     private static final ExecutorLocal<ClientWarn.State> clientWarn = ClientWarn.instance;
1:dbf6e62: 
1:dbf6e62:     public final TraceState traceState;
1:dbf6e62:     public final ClientWarn.State clientWarnState;
1:dbf6e62: 
1:dbf6e62:     private ExecutorLocals(TraceState traceState, ClientWarn.State clientWarnState)
1:dbf6e62:     {
1:dbf6e62:         this.traceState = traceState;
1:dbf6e62:         this.clientWarnState = clientWarnState;
1:dbf6e62:     }
1:dbf6e62: 
1:dbf6e62:     static
1:dbf6e62:     {
1:dbf6e62:         assert Arrays.equals(ExecutorLocal.all, new ExecutorLocal[]{ tracing, clientWarn })
1:dbf6e62:         : "ExecutorLocals has not been updated to reflect new ExecutorLocal.all";
1:dbf6e62:     }
1:dbf6e62: 
1:dbf6e62:     /**
1:dbf6e62:      * This creates a new ExecutorLocals object based on what is already set.
1:dbf6e62:      *
1:dbf6e62:      * @return an ExecutorLocals object which has the trace state and client warn state captured if either has been set,
1:dbf6e62:      *         or null if both are unset. The null result short-circuits logic in
1:dbf6e62:      *         {@link AbstractLocalAwareExecutorService#newTaskFor(Runnable, Object, ExecutorLocals)}, preventing
1:dbf6e62:      *         unnecessarily calling {@link ExecutorLocals#set(ExecutorLocals)}.
1:dbf6e62:      */
1:dbf6e62:     public static ExecutorLocals create()
1:dbf6e62:     {
1:dbf6e62:         TraceState traceState = tracing.get();
1:dbf6e62:         ClientWarn.State clientWarnState = clientWarn.get();
1:dbf6e62:         if (traceState == null && clientWarnState == null)
1:dbf6e62:             return null;
1:dbf6e62:         else
1:dbf6e62:             return new ExecutorLocals(traceState, clientWarnState);
1:dbf6e62:     }
1:dbf6e62: 
1:dbf6e62:     public static ExecutorLocals create(TraceState traceState)
1:dbf6e62:     {
1:dbf6e62:         ClientWarn.State clientWarnState = clientWarn.get();
1:dbf6e62:         return new ExecutorLocals(traceState, clientWarnState);
1:dbf6e62:     }
1:dbf6e62: 
1:dbf6e62:     public static void set(ExecutorLocals locals)
1:dbf6e62:     {
1:dbf6e62:         TraceState traceState = locals == null ? null : locals.traceState;
1:dbf6e62:         ClientWarn.State clientWarnState = locals == null ? null : locals.clientWarnState;
1:dbf6e62:         tracing.set(traceState);
1:dbf6e62:         clientWarn.set(clientWarnState);
1:dbf6e62:     }
1:dbf6e62: }
============================================================================
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:dbf6e62
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.concurrent;
1: 
1: import java.util.Arrays;
1: 
1: import org.apache.cassandra.service.ClientWarn;
1: import org.apache.cassandra.tracing.TraceState;
1: import org.apache.cassandra.tracing.Tracing;
1: 
1: /*
1:  * This class only knows about Tracing and ClientWarn, so if any different executor locals are added, it must be
1:  * updated.
1:  *
1:  * We don't enumerate the ExecutorLocal.all array each time because it would be much slower.
1:  */
1: public class ExecutorLocals
1: {
1:     private static final ExecutorLocal<TraceState> tracing = Tracing.instance;
1:     private static final ExecutorLocal<ClientWarn.State> clientWarn = ClientWarn.instance;
1: 
1:     public final TraceState traceState;
1:     public final ClientWarn.State clientWarnState;
1: 
1:     private ExecutorLocals(TraceState traceState, ClientWarn.State clientWarnState)
1:     {
1:         this.traceState = traceState;
1:         this.clientWarnState = clientWarnState;
1:     }
1: 
1:     static
1:     {
1:         assert Arrays.equals(ExecutorLocal.all, new ExecutorLocal[]{ tracing, clientWarn })
1:         : "ExecutorLocals has not been updated to reflect new ExecutorLocal.all";
1:     }
1: 
1:     /**
1:      * This creates a new ExecutorLocals object based on what is already set.
1:      *
1:      * @return an ExecutorLocals object which has the trace state and client warn state captured if either has been set,
1:      *         or null if both are unset. The null result short-circuits logic in
1:      *         {@link AbstractLocalAwareExecutorService#newTaskFor(Runnable, Object, ExecutorLocals)}, preventing
1:      *         unnecessarily calling {@link ExecutorLocals#set(ExecutorLocals)}.
1:      */
1:     public static ExecutorLocals create()
1:     {
1:         TraceState traceState = tracing.get();
1:         ClientWarn.State clientWarnState = clientWarn.get();
1:         if (traceState == null && clientWarnState == null)
1:             return null;
1:         else
1:             return new ExecutorLocals(traceState, clientWarnState);
1:     }
1: 
1:     public static ExecutorLocals create(TraceState traceState)
1:     {
1:         ClientWarn.State clientWarnState = clientWarn.get();
1:         return new ExecutorLocals(traceState, clientWarnState);
1:     }
1: 
1:     public static void set(ExecutorLocals locals)
1:     {
1:         TraceState traceState = locals == null ? null : locals.traceState;
1:         ClientWarn.State clientWarnState = locals == null ? null : locals.clientWarnState;
1:         tracing.set(traceState);
1:         clientWarn.set(clientWarnState);
1:     }
1: }
============================================================================