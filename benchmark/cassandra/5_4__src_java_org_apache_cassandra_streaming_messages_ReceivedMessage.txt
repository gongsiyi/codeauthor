1:dfc9faf: /*
1:dfc9faf:  * Licensed to the Apache Software Foundation (ASF) under one
1:dfc9faf:  * or more contributor license agreements.  See the NOTICE file
1:dfc9faf:  * distributed with this work for additional information
1:dfc9faf:  * regarding copyright ownership.  The ASF licenses this file
1:dfc9faf:  * to you under the Apache License, Version 2.0 (the
1:dfc9faf:  * "License"); you may not use this file except in compliance
1:dfc9faf:  * with the License.  You may obtain a copy of the License at
1:dfc9faf:  *
1:dfc9faf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dfc9faf:  *
1:dfc9faf:  * Unless required by applicable law or agreed to in writing, software
1:dfc9faf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dfc9faf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dfc9faf:  * See the License for the specific language governing permissions and
1:dfc9faf:  * limitations under the License.
1:dfc9faf:  */
1:dfc9faf: package org.apache.cassandra.streaming.messages;
1:dfc9faf: 
1:dfc9faf: import java.io.*;
1:dfc9faf: import java.nio.channels.Channels;
1:dfc9faf: import java.nio.channels.ReadableByteChannel;
1:dfc9faf: import java.util.UUID;
1:dfc9faf: 
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
1:16499ca: import org.apache.cassandra.io.util.DataOutputStreamPlus;
1:dfc9faf: import org.apache.cassandra.net.MessagingService;
1:dfc9faf: import org.apache.cassandra.streaming.StreamSession;
1:dfc9faf: import org.apache.cassandra.utils.UUIDSerializer;
1:dfc9faf: 
1:dfc9faf: public class ReceivedMessage extends StreamMessage
1:dfc9faf: {
1:dfc9faf:     public static Serializer<ReceivedMessage> serializer = new Serializer<ReceivedMessage>()
1:dfc9faf:     {
1:127f7c5:         @SuppressWarnings("resource") // Not closing constructed DataInputPlus's as the channel needs to remain open.
1:dfc9faf:         public ReceivedMessage deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException
1:dfc9faf:         {
1:03f72ac:             DataInputPlus input = new DataInputStreamPlus(Channels.newInputStream(in));
1:dfc9faf:             return new ReceivedMessage(UUIDSerializer.serializer.deserialize(input, MessagingService.current_version), input.readInt());
1:dfc9faf:         }
1:dfc9faf: 
1:16499ca:         public void serialize(ReceivedMessage message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException
1:dfc9faf:         {
1:75508ec:             UUIDSerializer.serializer.serialize(message.cfId, out, MessagingService.current_version);
1:75508ec:             out.writeInt(message.sequenceNumber);
1:dfc9faf:         }
1:dfc9faf:     };
1:dfc9faf: 
1:dfc9faf:     public final UUID cfId;
1:dfc9faf:     public final int sequenceNumber;
1:dfc9faf: 
1:dfc9faf:     public ReceivedMessage(UUID cfId, int sequenceNumber)
1:dfc9faf:     {
1:dfc9faf:         super(Type.RECEIVED);
1:dfc9faf:         this.cfId = cfId;
1:dfc9faf:         this.sequenceNumber = sequenceNumber;
1:dfc9faf:     }
1:1e73b33: 
1:1e73b33:     @Override
1:1e73b33:     public String toString()
1:1e73b33:     {
1:1e73b33:         final StringBuilder sb = new StringBuilder("Received (");
1:1e73b33:         sb.append(cfId).append(", #").append(sequenceNumber).append(')');
1:1e73b33:         return sb.toString();
1:1e73b33:     }
1:dfc9faf: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:127f7c5
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource") // Not closing constructed DataInputPlus's as the channel needs to remain open.
commit:e777301
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings("resource") // Not closing constructed DataInputPlus's as the channel needs to remain open.
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
/////////////////////////////////////////////////////////////////////////
1:             DataInputPlus input = new DataInputStreamPlus(Channels.newInputStream(in));
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputStreamPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(ReceivedMessage message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataOutputPlus;
0: import org.apache.cassandra.io.util.DataOutputStreamAndChannel;
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(ReceivedMessage message, DataOutputStreamAndChannel out, int version, StreamSession session) throws IOException
1:             UUIDSerializer.serializer.serialize(message.cfId, out, MessagingService.current_version);
1:             out.writeInt(message.sequenceNumber);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:1e73b33
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
1:         final StringBuilder sb = new StringBuilder("Received (");
1:         sb.append(cfId).append(", #").append(sequenceNumber).append(')');
1:         return sb.toString();
1:     }
commit:dfc9faf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.messages;
1: 
1: import java.io.*;
1: import java.nio.channels.Channels;
1: import java.nio.channels.ReadableByteChannel;
0: import java.nio.channels.WritableByteChannel;
1: import java.util.UUID;
1: 
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.streaming.StreamSession;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: public class ReceivedMessage extends StreamMessage
1: {
1:     public static Serializer<ReceivedMessage> serializer = new Serializer<ReceivedMessage>()
1:     {
1:         public ReceivedMessage deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException
1:         {
0:             DataInput input = new DataInputStream(Channels.newInputStream(in));
1:             return new ReceivedMessage(UUIDSerializer.serializer.deserialize(input, MessagingService.current_version), input.readInt());
1:         }
1: 
0:         public void serialize(ReceivedMessage message, WritableByteChannel out, int version, StreamSession session) throws IOException
1:         {
0:             DataOutput output = new DataOutputStream(Channels.newOutputStream(out));
0:             UUIDSerializer.serializer.serialize(message.cfId, output, MessagingService.current_version);
0:             output.writeInt(message.sequenceNumber);
1:         }
1:     };
1: 
1:     public final UUID cfId;
1:     public final int sequenceNumber;
1: 
1:     public ReceivedMessage(UUID cfId, int sequenceNumber)
1:     {
1:         super(Type.RECEIVED);
1:         this.cfId = cfId;
1:         this.sequenceNumber = sequenceNumber;
1:     }
1: }
============================================================================