1:9797511: /*
1:9797511:  * Licensed to the Apache Software Foundation (ASF) under one
1:9797511:  * or more contributor license agreements.  See the NOTICE file
1:9797511:  * distributed with this work for additional information
1:9797511:  * regarding copyright ownership.  The ASF licenses this file
1:9797511:  * to you under the Apache License, Version 2.0 (the
1:9797511:  * "License"); you may not use this file except in compliance
1:9797511:  * with the License.  You may obtain a copy of the License at
1:9797511:  *
1:9797511:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9797511:  *
1:9797511:  * Unless required by applicable law or agreed to in writing, software
1:9797511:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9797511:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9797511:  * See the License for the specific language governing permissions and
1:9797511:  * limitations under the License.
1:9797511:  */
1:9797511: 
1:9797511: package org.apache.cassandra.auth;
1:9797511: 
1:9797511: import org.slf4j.Logger;
1:9797511: import org.slf4j.LoggerFactory;
1:9797511: 
1:9797511: import org.apache.cassandra.config.Config;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: import org.apache.cassandra.exceptions.ConfigurationException;
1:9797511: import org.apache.cassandra.utils.FBUtilities;
1:9797511: 
1:9797511: /**
1:f56c0c6:  * Only purpose is to Initialize authentication/authorization via {@link #applyAuth()}.
1:9797511:  * This is in this separate class as it implicitly initializes schema stuff (via classes referenced in here).
1:9797511:  */
1:9797511: public final class AuthConfig
1:9797511: {
1:9797511:     private static final Logger logger = LoggerFactory.getLogger(AuthConfig.class);
1:9797511: 
1:9797511:     private static boolean initialized;
1:9797511: 
1:f56c0c6:     public static void applyAuth()
1:9797511:     {
1:9797511:         // some tests need this
1:9797511:         if (initialized)
1:9797511:             return;
1:9797511: 
1:9797511:         initialized = true;
1:9797511: 
1:9797511:         Config conf = DatabaseDescriptor.getRawConfig();
1:9797511: 
1:9797511:         IAuthenticator authenticator = new AllowAllAuthenticator();
1:9797511: 
1:9797511:         /* Authentication, authorization and role management backend, implementing IAuthenticator, IAuthorizer & IRoleMapper*/
1:9797511:         if (conf.authenticator != null)
1:9797511:             authenticator = FBUtilities.newAuthenticator(conf.authenticator);
1:9797511: 
1:9797511:         // the configuration options regarding credentials caching are only guaranteed to
1:9797511:         // work with PasswordAuthenticator, so log a message if some other authenticator
1:9797511:         // is in use and non-default values are detected
1:9797511:         if (!(authenticator instanceof PasswordAuthenticator)
1:9797511:             && (conf.credentials_update_interval_in_ms != -1
1:9797511:                 || conf.credentials_validity_in_ms != 2000
1:9797511:                 || conf.credentials_cache_max_entries != 1000))
1:9797511:         {
1:9797511:             logger.info("Configuration options credentials_update_interval_in_ms, credentials_validity_in_ms and " +
1:9797511:                         "credentials_cache_max_entries may not be applicable for the configured authenticator ({})",
1:9797511:                         authenticator.getClass().getName());
1:9797511:         }
1:9797511: 
1:9797511:         DatabaseDescriptor.setAuthenticator(authenticator);
1:9797511: 
1:9797511:         // authorizer
1:9797511: 
1:9797511:         IAuthorizer authorizer = new AllowAllAuthorizer();
1:9797511: 
1:9797511:         if (conf.authorizer != null)
1:9797511:             authorizer = FBUtilities.newAuthorizer(conf.authorizer);
1:9797511: 
1:9797511:         if (!authenticator.requireAuthentication() && authorizer.requireAuthorization())
1:9797511:             throw new ConfigurationException(conf.authenticator + " can't be used with " + conf.authorizer, false);
1:9797511: 
1:9797511:         DatabaseDescriptor.setAuthorizer(authorizer);
1:9797511: 
1:9797511:         // role manager
1:9797511: 
1:9797511:         IRoleManager roleManager;
1:9797511:         if (conf.role_manager != null)
1:9797511:             roleManager = FBUtilities.newRoleManager(conf.role_manager);
1:9797511:         else
1:9797511:             roleManager = new CassandraRoleManager();
1:9797511: 
1:9797511:         if (authenticator instanceof PasswordAuthenticator && !(roleManager instanceof CassandraRoleManager))
1:9797511:             throw new ConfigurationException("CassandraRoleManager must be used with PasswordAuthenticator", false);
1:9797511: 
1:9797511:         DatabaseDescriptor.setRoleManager(roleManager);
1:9797511: 
1:9797511:         // authenticator
1:9797511: 
1:9797511:         IInternodeAuthenticator internodeAuthenticator;
1:9797511:         if (conf.internode_authenticator != null)
1:9797511:             internodeAuthenticator = FBUtilities.construct(conf.internode_authenticator, "internode_authenticator");
1:9797511:         else
1:9797511:             internodeAuthenticator = new AllowAllInternodeAuthenticator();
1:9797511: 
1:9797511:         DatabaseDescriptor.setInternodeAuthenticator(internodeAuthenticator);
1:9797511: 
1:9797511:         // Validate at last to have authenticator, authorizer, role-manager and internode-auth setup
1:9797511:         // in case these rely on each other.
1:9797511: 
1:9797511:         authenticator.validateConfiguration();
1:9797511:         authorizer.validateConfiguration();
1:9797511:         roleManager.validateConfiguration();
1:9797511:         internodeAuthenticator.validateConfiguration();
1:9797511:     }
1:9797511: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:f56c0c6
/////////////////////////////////////////////////////////////////////////
1:  * Only purpose is to Initialize authentication/authorization via {@link #applyAuth()}.
/////////////////////////////////////////////////////////////////////////
1:     public static void applyAuth()
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.auth;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
0:  * Only purpose is to Initialize authentication/authorization via {@link #applyAuthz()}.
1:  * This is in this separate class as it implicitly initializes schema stuff (via classes referenced in here).
1:  */
1: public final class AuthConfig
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(AuthConfig.class);
1: 
1:     private static boolean initialized;
1: 
0:     public static void applyAuthz()
1:     {
1:         // some tests need this
1:         if (initialized)
1:             return;
1: 
1:         initialized = true;
1: 
1:         Config conf = DatabaseDescriptor.getRawConfig();
1: 
1:         IAuthenticator authenticator = new AllowAllAuthenticator();
1: 
1:         /* Authentication, authorization and role management backend, implementing IAuthenticator, IAuthorizer & IRoleMapper*/
1:         if (conf.authenticator != null)
1:             authenticator = FBUtilities.newAuthenticator(conf.authenticator);
1: 
1:         // the configuration options regarding credentials caching are only guaranteed to
1:         // work with PasswordAuthenticator, so log a message if some other authenticator
1:         // is in use and non-default values are detected
1:         if (!(authenticator instanceof PasswordAuthenticator)
1:             && (conf.credentials_update_interval_in_ms != -1
1:                 || conf.credentials_validity_in_ms != 2000
1:                 || conf.credentials_cache_max_entries != 1000))
1:         {
1:             logger.info("Configuration options credentials_update_interval_in_ms, credentials_validity_in_ms and " +
1:                         "credentials_cache_max_entries may not be applicable for the configured authenticator ({})",
1:                         authenticator.getClass().getName());
1:         }
1: 
1:         DatabaseDescriptor.setAuthenticator(authenticator);
1: 
1:         // authorizer
1: 
1:         IAuthorizer authorizer = new AllowAllAuthorizer();
1: 
1:         if (conf.authorizer != null)
1:             authorizer = FBUtilities.newAuthorizer(conf.authorizer);
1: 
1:         if (!authenticator.requireAuthentication() && authorizer.requireAuthorization())
1:             throw new ConfigurationException(conf.authenticator + " can't be used with " + conf.authorizer, false);
1: 
1:         DatabaseDescriptor.setAuthorizer(authorizer);
1: 
1:         // role manager
1: 
1:         IRoleManager roleManager;
1:         if (conf.role_manager != null)
1:             roleManager = FBUtilities.newRoleManager(conf.role_manager);
1:         else
1:             roleManager = new CassandraRoleManager();
1: 
1:         if (authenticator instanceof PasswordAuthenticator && !(roleManager instanceof CassandraRoleManager))
1:             throw new ConfigurationException("CassandraRoleManager must be used with PasswordAuthenticator", false);
1: 
1:         DatabaseDescriptor.setRoleManager(roleManager);
1: 
1:         // authenticator
1: 
1:         IInternodeAuthenticator internodeAuthenticator;
1:         if (conf.internode_authenticator != null)
1:             internodeAuthenticator = FBUtilities.construct(conf.internode_authenticator, "internode_authenticator");
1:         else
1:             internodeAuthenticator = new AllowAllInternodeAuthenticator();
1: 
1:         DatabaseDescriptor.setInternodeAuthenticator(internodeAuthenticator);
1: 
1:         // Validate at last to have authenticator, authorizer, role-manager and internode-auth setup
1:         // in case these rely on each other.
1: 
1:         authenticator.validateConfiguration();
1:         authorizer.validateConfiguration();
1:         roleManager.validateConfiguration();
1:         internodeAuthenticator.validateConfiguration();
1:     }
1: }
============================================================================