1:7b0c716: /*
1:7b0c716:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b0c716:  * or more contributor license agreements.  See the NOTICE file
1:7b0c716:  * distributed with this work for additional information
1:7b0c716:  * regarding copyright ownership.  The ASF licenses this file
1:7b0c716:  * to you under the Apache License, Version 2.0 (the
1:7b0c716:  * "License"); you may not use this file except in compliance
1:7b0c716:  * with the License.  You may obtain a copy of the License at
1:7b0c716:  *
1:7b0c716:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7b0c716:  *
1:7b0c716:  * Unless required by applicable law or agreed to in writing, software
1:7b0c716:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7b0c716:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7b0c716:  * See the License for the specific language governing permissions and
1:7b0c716:  * limitations under the License.
1:7b0c716:  */
1:7b0c716: package org.apache.cassandra.auth;
1:7b0c716: 
1:7b0c716: import java.lang.management.ManagementFactory;
1:7b0c716: import java.util.Set;
1:7b0c716: import javax.management.MBeanServer;
1:7b0c716: import javax.management.MalformedObjectNameException;
1:7b0c716: import javax.management.ObjectName;
1:7b0c716: 
1:7b0c716: import com.google.common.base.Objects;
1:7b0c716: import com.google.common.collect.Sets;
1:7b0c716: import org.apache.commons.lang3.StringUtils;
1:7b0c716: 
1:7b0c716: public class JMXResource implements IResource
1:7b0c716: {
1:7b0c716:     enum Level
1:7b0c716:     {
1:7b0c716:         ROOT, MBEAN
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private static final String ROOT_NAME = "mbean";
1:7b0c716:     private static final JMXResource ROOT_RESOURCE = new JMXResource();
1:7b0c716:     private final Level level;
1:7b0c716:     private final String name;
1:7b0c716: 
1:7b0c716:     // permissions which may be granted on Mbeans
1:7b0c716:     private static final Set<Permission> JMX_PERMISSIONS = Sets.immutableEnumSet(Permission.AUTHORIZE,
1:7b0c716:                                                                                  Permission.DESCRIBE,
1:7b0c716:                                                                                  Permission.EXECUTE,
1:7b0c716:                                                                                  Permission.MODIFY,
1:7b0c716:                                                                                  Permission.SELECT);
1:7b0c716: 
1:7b0c716:     private JMXResource()
1:7b0c716:     {
1:7b0c716:         level = Level.ROOT;
1:7b0c716:         name = null;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private JMXResource(String name)
1:7b0c716:     {
1:7b0c716:         this.name = name;
1:7b0c716:         level = Level.MBEAN;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public static JMXResource mbean(String name)
1:7b0c716:     {
1:7b0c716:         return new JMXResource(name);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Parses a role resource name into a RoleResource instance.
1:7b0c716:      *
1:7b0c716:      * @param name Name of the data resource.
1:7b0c716:      * @return RoleResource instance matching the name.
1:7b0c716:      */
1:7b0c716:     public static JMXResource fromName(String name)
1:7b0c716:     {
1:7b0c716:         String[] parts = StringUtils.split(name, '/');
1:7b0c716: 
1:7b0c716:         if (!parts[0].equals(ROOT_NAME) || parts.length > 2)
1:7b0c716:             throw new IllegalArgumentException(String.format("%s is not a valid JMX resource name", name));
1:7b0c716: 
1:7b0c716:         if (parts.length == 1)
1:7b0c716:             return root();
1:7b0c716: 
1:7b0c716:         return mbean(parts[1]);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Override
1:7b0c716:     public String getName()
1:7b0c716:     {
1:7b0c716:         if (level == Level.ROOT)
1:7b0c716:             return ROOT_NAME;
1:7b0c716:         else if (level == Level.MBEAN)
1:7b0c716:             return String.format("%s/%s", ROOT_NAME, name);
1:7b0c716:         throw new AssertionError();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * @return for a non-root resource, return the short form of the resource name which represents an ObjectName
1:7b0c716:      * (which may be of the pattern or exact kind). i.e. not the full "root/name" version returned by getName().
1:7b0c716:      * Throws IllegalStateException if called on the root-level resource.
1:7b0c716:      */
1:7b0c716:     public String getObjectName()
1:7b0c716:     {
1:7b0c716:         if (level == Level.ROOT)
1:7b0c716:             throw new IllegalStateException(String.format("%s JMX resource has no object name", level));
1:7b0c716:         return name;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * @return the root-level resource.
1:7b0c716:      */
1:7b0c716:     public static JMXResource root()
1:7b0c716:     {
1:7b0c716:         return ROOT_RESOURCE;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Override
1:7b0c716:     public IResource getParent()
1:7b0c716:     {
1:7b0c716:         if (level == Level.MBEAN)
1:7b0c716:             return root();
1:7b0c716:         throw new IllegalStateException("Root-level resource can't have a parent");
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * @return Whether or not the resource has a parent in the hierarchy.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public boolean hasParent()
1:7b0c716:     {
1:7b0c716:         return !level.equals(Level.ROOT);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Override
1:7b0c716:     public boolean exists()
1:7b0c716:     {
1:7b0c716:         if (!hasParent())
1:7b0c716:             return true;
1:7b0c716:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:7b0c716:         try
1:7b0c716:         {
1:7b0c716:             return !(mbs.queryNames(new ObjectName(name), null).isEmpty());
1:7b0c716:         }
1:7b0c716:         catch (MalformedObjectNameException e)
1:7b0c716:         {
1:7b0c716:             return false;
1:7b0c716:         }
1:7b0c716:         catch (NullPointerException e)
1:7b0c716:         {
1:7b0c716:             return false;
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Override
1:7b0c716:     public Set<Permission> applicablePermissions()
1:7b0c716:     {
1:7b0c716:         return JMX_PERMISSIONS;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Override
1:7b0c716:     public String toString()
1:7b0c716:     {
1:7b0c716:         return level == Level.ROOT ? "<all mbeans>" : String.format("<mbean %s>", name);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Override
1:7b0c716:     public boolean equals(Object o)
1:7b0c716:     {
1:7b0c716:         if (this == o)
1:7b0c716:             return true;
1:7b0c716: 
1:7b0c716:         if (!(o instanceof JMXResource))
1:7b0c716:             return false;
1:7b0c716: 
1:7b0c716:         JMXResource j = (JMXResource) o;
1:7b0c716: 
1:7b0c716:         return Objects.equal(level, j.level) && Objects.equal(name, j.name);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Override
1:7b0c716:     public int hashCode()
1:7b0c716:     {
1:7b0c716:         return Objects.hashCode(level, name);
1:7b0c716:     }
1:7b0c716: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.lang.management.ManagementFactory;
1: import java.util.Set;
1: import javax.management.MBeanServer;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import com.google.common.base.Objects;
1: import com.google.common.collect.Sets;
1: import org.apache.commons.lang3.StringUtils;
1: 
1: public class JMXResource implements IResource
1: {
1:     enum Level
1:     {
1:         ROOT, MBEAN
1:     }
1: 
1:     private static final String ROOT_NAME = "mbean";
1:     private static final JMXResource ROOT_RESOURCE = new JMXResource();
1:     private final Level level;
1:     private final String name;
1: 
1:     // permissions which may be granted on Mbeans
1:     private static final Set<Permission> JMX_PERMISSIONS = Sets.immutableEnumSet(Permission.AUTHORIZE,
1:                                                                                  Permission.DESCRIBE,
1:                                                                                  Permission.EXECUTE,
1:                                                                                  Permission.MODIFY,
1:                                                                                  Permission.SELECT);
1: 
1:     private JMXResource()
1:     {
1:         level = Level.ROOT;
1:         name = null;
1:     }
1: 
1:     private JMXResource(String name)
1:     {
1:         this.name = name;
1:         level = Level.MBEAN;
1:     }
1: 
1:     public static JMXResource mbean(String name)
1:     {
1:         return new JMXResource(name);
1:     }
1: 
1:     /**
1:      * Parses a role resource name into a RoleResource instance.
1:      *
1:      * @param name Name of the data resource.
1:      * @return RoleResource instance matching the name.
1:      */
1:     public static JMXResource fromName(String name)
1:     {
1:         String[] parts = StringUtils.split(name, '/');
1: 
1:         if (!parts[0].equals(ROOT_NAME) || parts.length > 2)
1:             throw new IllegalArgumentException(String.format("%s is not a valid JMX resource name", name));
1: 
1:         if (parts.length == 1)
1:             return root();
1: 
1:         return mbean(parts[1]);
1:     }
1: 
1:     @Override
1:     public String getName()
1:     {
1:         if (level == Level.ROOT)
1:             return ROOT_NAME;
1:         else if (level == Level.MBEAN)
1:             return String.format("%s/%s", ROOT_NAME, name);
1:         throw new AssertionError();
1:     }
1: 
1:     /**
1:      * @return for a non-root resource, return the short form of the resource name which represents an ObjectName
1:      * (which may be of the pattern or exact kind). i.e. not the full "root/name" version returned by getName().
1:      * Throws IllegalStateException if called on the root-level resource.
1:      */
1:     public String getObjectName()
1:     {
1:         if (level == Level.ROOT)
1:             throw new IllegalStateException(String.format("%s JMX resource has no object name", level));
1:         return name;
1:     }
1: 
1:     /**
1:      * @return the root-level resource.
1:      */
1:     public static JMXResource root()
1:     {
1:         return ROOT_RESOURCE;
1:     }
1: 
1:     @Override
1:     public IResource getParent()
1:     {
1:         if (level == Level.MBEAN)
1:             return root();
1:         throw new IllegalStateException("Root-level resource can't have a parent");
1:     }
1: 
1:     /**
1:      * @return Whether or not the resource has a parent in the hierarchy.
1:      */
1:     @Override
1:     public boolean hasParent()
1:     {
1:         return !level.equals(Level.ROOT);
1:     }
1: 
1:     @Override
1:     public boolean exists()
1:     {
1:         if (!hasParent())
1:             return true;
1:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:         try
1:         {
1:             return !(mbs.queryNames(new ObjectName(name), null).isEmpty());
1:         }
1:         catch (MalformedObjectNameException e)
1:         {
1:             return false;
1:         }
1:         catch (NullPointerException e)
1:         {
1:             return false;
1:         }
1:     }
1: 
1:     @Override
1:     public Set<Permission> applicablePermissions()
1:     {
1:         return JMX_PERMISSIONS;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return level == Level.ROOT ? "<all mbeans>" : String.format("<mbean %s>", name);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof JMXResource))
1:             return false;
1: 
1:         JMXResource j = (JMXResource) o;
1: 
1:         return Objects.equal(level, j.level) && Objects.equal(name, j.name);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(level, name);
1:     }
1: }
============================================================================