1:b851792: /*
1:b851792:  * Licensed to the Apache Software Foundation (ASF) under one
1:b851792:  * or more contributor license agreements.  See the NOTICE file
1:b851792:  * distributed with this work for additional information
1:b851792:  * regarding copyright ownership.  The ASF licenses this file
1:b851792:  * to you under the Apache License, Version 2.0 (the
1:b851792:  * "License"); you may not use this file except in compliance
1:b851792:  * with the License.  You may obtain a copy of the License at
1:b851792:  *
1:b851792:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b851792:  *
1:b851792:  * Unless required by applicable law or agreed to in writing, software
1:b851792:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b851792:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b851792:  * See the License for the specific language governing permissions and
1:b851792:  * limitations under the License.
1:b851792:  */
1:b851792: 
1:b851792: package org.apache.cassandra.service;
1:b851792: 
1:b851792: import java.io.File;
1:b851792: 
1:b851792: import org.slf4j.Logger;
1:b851792: import org.slf4j.LoggerFactory;
1:b851792: 
1:b851792: import org.apache.cassandra.config.DatabaseDescriptor;
1:b851792: import org.apache.cassandra.db.BlacklistedDirectories;
1:b851792: import org.apache.cassandra.db.Keyspace;
1:b851792: import org.apache.cassandra.io.FSError;
1:b851792: import org.apache.cassandra.io.FSErrorHandler;
1:b851792: import org.apache.cassandra.io.FSReadError;
1:b851792: import org.apache.cassandra.io.sstable.CorruptSSTableException;
1:b851792: import org.apache.cassandra.utils.JVMStabilityInspector;
1:b851792: 
1:b851792: public class DefaultFSErrorHandler implements FSErrorHandler
1:b851792: {
1:b851792:     private static final Logger logger = LoggerFactory.getLogger(DefaultFSErrorHandler.class);
1:b851792: 
1:b851792:     @Override
1:b851792:     public void handleCorruptSSTable(CorruptSSTableException e)
1:b851792:     {
1:1dd33ec:         if (!StorageService.instance.isDaemonSetupCompleted())
1:b851792:             handleStartupFSError(e);
1:b851792: 
1:b851792:         JVMStabilityInspector.inspectThrowable(e);
1:b851792:         switch (DatabaseDescriptor.getDiskFailurePolicy())
1:b851792:         {
1:b851792:             case stop_paranoid:
1:b851792:                 StorageService.instance.stopTransports();
1:b851792:                 break;
1:b851792:         }
1:b851792:     }
1:b851792: 
1:b851792:     @Override
1:b851792:     public void handleFSError(FSError e)
1:b851792:     {
1:1dd33ec:         if (!StorageService.instance.isDaemonSetupCompleted())
1:b851792:             handleStartupFSError(e);
1:b851792: 
1:b851792:         JVMStabilityInspector.inspectThrowable(e);
1:b851792:         switch (DatabaseDescriptor.getDiskFailurePolicy())
1:b851792:         {
1:b851792:             case stop_paranoid:
1:b851792:             case stop:
1:b851792:                 StorageService.instance.stopTransports();
1:b851792:                 break;
1:b851792:             case best_effort:
1:b851792:                 // for both read and write errors mark the path as unwritable.
1:b851792:                 BlacklistedDirectories.maybeMarkUnwritable(e.path);
1:b851792:                 if (e instanceof FSReadError)
1:b851792:                 {
1:b851792:                     File directory = BlacklistedDirectories.maybeMarkUnreadable(e.path);
1:b851792:                     if (directory != null)
1:b851792:                         Keyspace.removeUnreadableSSTables(directory);
1:b851792:                 }
1:b851792:                 break;
1:b851792:             case ignore:
1:b851792:                 // already logged, so left nothing to do
1:b851792:                 break;
1:b851792:             default:
1:b851792:                 throw new IllegalStateException();
1:b851792:         }
1:b851792:     }
1:b851792: 
1:b851792:     private static void handleStartupFSError(Throwable t)
1:b851792:     {
1:b851792:         switch (DatabaseDescriptor.getDiskFailurePolicy())
1:b851792:         {
1:b851792:             case stop_paranoid:
1:b851792:             case stop:
1:b851792:             case die:
1:b851792:                 logger.error("Exiting forcefully due to file system exception on startup, disk failure policy \"{}\"",
1:b851792:                              DatabaseDescriptor.getDiskFailurePolicy(),
1:b851792:                              t);
1:b851792:                 JVMStabilityInspector.killCurrentJVM(t, true);
1:b851792:                 break;
1:b851792:             default:
1:b851792:                 break;
1:b851792:         }
1:b851792:     }
1:b851792: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b851792
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.service;
1: 
1: import java.io.File;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.db.BlacklistedDirectories;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.io.FSError;
1: import org.apache.cassandra.io.FSErrorHandler;
1: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.io.sstable.CorruptSSTableException;
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: 
1: public class DefaultFSErrorHandler implements FSErrorHandler
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(DefaultFSErrorHandler.class);
1: 
1:     @Override
1:     public void handleCorruptSSTable(CorruptSSTableException e)
1:     {
0:         if (!StorageService.instance.isSetupCompleted())
1:             handleStartupFSError(e);
1: 
1:         JVMStabilityInspector.inspectThrowable(e);
1:         switch (DatabaseDescriptor.getDiskFailurePolicy())
1:         {
1:             case stop_paranoid:
1:                 StorageService.instance.stopTransports();
1:                 break;
1:         }
1:     }
1: 
1:     @Override
1:     public void handleFSError(FSError e)
1:     {
0:         if (!StorageService.instance.isSetupCompleted())
1:             handleStartupFSError(e);
1: 
1:         JVMStabilityInspector.inspectThrowable(e);
1:         switch (DatabaseDescriptor.getDiskFailurePolicy())
1:         {
1:             case stop_paranoid:
1:             case stop:
1:                 StorageService.instance.stopTransports();
1:                 break;
1:             case best_effort:
1:                 // for both read and write errors mark the path as unwritable.
1:                 BlacklistedDirectories.maybeMarkUnwritable(e.path);
1:                 if (e instanceof FSReadError)
1:                 {
1:                     File directory = BlacklistedDirectories.maybeMarkUnreadable(e.path);
1:                     if (directory != null)
1:                         Keyspace.removeUnreadableSSTables(directory);
1:                 }
1:                 break;
1:             case ignore:
1:                 // already logged, so left nothing to do
1:                 break;
1:             default:
1:                 throw new IllegalStateException();
1:         }
1:     }
1: 
1:     private static void handleStartupFSError(Throwable t)
1:     {
1:         switch (DatabaseDescriptor.getDiskFailurePolicy())
1:         {
1:             case stop_paranoid:
1:             case stop:
1:             case die:
1:                 logger.error("Exiting forcefully due to file system exception on startup, disk failure policy \"{}\"",
1:                              DatabaseDescriptor.getDiskFailurePolicy(),
1:                              t);
1:                 JVMStabilityInspector.killCurrentJVM(t, true);
1:                 break;
1:             default:
1:                 break;
1:         }
1:     }
1: }
commit:1dd33ec
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.service;
0: 
0: import java.io.File;
0: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.BlacklistedDirectories;
0: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.io.FSError;
0: import org.apache.cassandra.io.FSErrorHandler;
0: import org.apache.cassandra.io.FSReadError;
0: import org.apache.cassandra.io.sstable.CorruptSSTableException;
0: import org.apache.cassandra.utils.JVMStabilityInspector;
0: 
0: public class DefaultFSErrorHandler implements FSErrorHandler
0: {
0:     private static final Logger logger = LoggerFactory.getLogger(DefaultFSErrorHandler.class);
0: 
0:     @Override
0:     public void handleCorruptSSTable(CorruptSSTableException e)
0:     {
1:         if (!StorageService.instance.isDaemonSetupCompleted())
0:             handleStartupFSError(e);
0: 
0:         JVMStabilityInspector.inspectThrowable(e);
0:         switch (DatabaseDescriptor.getDiskFailurePolicy())
0:         {
0:             case stop_paranoid:
0:                 StorageService.instance.stopTransports();
0:                 break;
0:         }
0:     }
0: 
0:     @Override
0:     public void handleFSError(FSError e)
0:     {
1:         if (!StorageService.instance.isDaemonSetupCompleted())
0:             handleStartupFSError(e);
0: 
0:         JVMStabilityInspector.inspectThrowable(e);
0:         switch (DatabaseDescriptor.getDiskFailurePolicy())
0:         {
0:             case stop_paranoid:
0:             case stop:
0:                 StorageService.instance.stopTransports();
0:                 break;
0:             case best_effort:
0:                 // for both read and write errors mark the path as unwritable.
0:                 BlacklistedDirectories.maybeMarkUnwritable(e.path);
0:                 if (e instanceof FSReadError)
0:                 {
0:                     File directory = BlacklistedDirectories.maybeMarkUnreadable(e.path);
0:                     if (directory != null)
0:                         Keyspace.removeUnreadableSSTables(directory);
0:                 }
0:                 break;
0:             case ignore:
0:                 // already logged, so left nothing to do
0:                 break;
0:             default:
0:                 throw new IllegalStateException();
0:         }
0:     }
0: 
0:     private static void handleStartupFSError(Throwable t)
0:     {
0:         switch (DatabaseDescriptor.getDiskFailurePolicy())
0:         {
0:             case stop_paranoid:
0:             case stop:
0:             case die:
0:                 logger.error("Exiting forcefully due to file system exception on startup, disk failure policy \"{}\"",
0:                              DatabaseDescriptor.getDiskFailurePolicy(),
0:                              t);
0:                 JVMStabilityInspector.killCurrentJVM(t, true);
0:                 break;
0:             default:
0:                 break;
0:         }
0:     }
0: }
============================================================================