1:f45e4a5: /**
1:f45e4a5:  * Autogenerated by Thrift Compiler (0.9.1)
1:f45e4a5:  *
1:f45e4a5:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:f45e4a5:  *  @generated
1:f45e4a5:  */
1:f45e4a5: package org.apache.cassandra.thrift;
1:f45e4a5: /*
1:f45e4a5:  * 
1:f45e4a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:f45e4a5:  * or more contributor license agreements.  See the NOTICE file
1:f45e4a5:  * distributed with this work for additional information
1:f45e4a5:  * regarding copyright ownership.  The ASF licenses this file
1:f45e4a5:  * to you under the Apache License, Version 2.0 (the
1:f45e4a5:  * "License"); you may not use this file except in compliance
1:f45e4a5:  * with the License.  You may obtain a copy of the License at
1:f45e4a5:  * 
1:f45e4a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f45e4a5:  * 
1:f45e4a5:  * Unless required by applicable law or agreed to in writing,
1:f45e4a5:  * software distributed under the License is distributed on an
1:f45e4a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f45e4a5:  * KIND, either express or implied.  See the License for the
1:f45e4a5:  * specific language governing permissions and limitations
1:f45e4a5:  * under the License.
1:f45e4a5:  * 
1:f45e4a5:  */
1:f45e4a5: 
1:f45e4a5: 
1:f45e4a5: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:f45e4a5: import org.apache.thrift.scheme.IScheme;
1:f45e4a5: import org.apache.thrift.scheme.SchemeFactory;
1:f45e4a5: import org.apache.thrift.scheme.StandardScheme;
1:f45e4a5: 
1:f45e4a5: import org.apache.thrift.scheme.TupleScheme;
1:f45e4a5: import org.apache.thrift.protocol.TTupleProtocol;
1:f45e4a5: import org.apache.thrift.protocol.TProtocolException;
1:f45e4a5: import org.apache.thrift.EncodingUtils;
1:f45e4a5: import org.apache.thrift.TException;
1:f45e4a5: import org.apache.thrift.async.AsyncMethodCallback;
1:f45e4a5: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:f45e4a5: import java.util.List;
1:f45e4a5: import java.util.ArrayList;
1:f45e4a5: import java.util.Map;
1:f45e4a5: import java.util.HashMap;
1:f45e4a5: import java.util.EnumMap;
1:f45e4a5: import java.util.Set;
1:f45e4a5: import java.util.HashSet;
1:f45e4a5: import java.util.EnumSet;
1:f45e4a5: import java.util.Collections;
1:f45e4a5: import java.util.BitSet;
1:f45e4a5: import java.nio.ByteBuffer;
1:f45e4a5: import java.util.Arrays;
1:f45e4a5: import org.slf4j.Logger;
1:f45e4a5: import org.slf4j.LoggerFactory;
1:f45e4a5: 
1:f45e4a5: /**
1:f45e4a5:  * The ColumnSlice is used to select a set of columns from inside a row.
1:f45e4a5:  * If start or finish are unspecified they will default to the start-of
1:f45e4a5:  * end-of value.
1:f45e4a5:  * @param start. The start of the ColumnSlice inclusive
1:f45e4a5:  * @param finish. The end of the ColumnSlice inclusive
1:f45e4a5:  */
1:f45e4a5: public class ColumnSlice implements org.apache.thrift.TBase<ColumnSlice, ColumnSlice._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnSlice> {
1:f45e4a5:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnSlice");
1:f45e4a5: 
1:f45e4a5:   private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRING, (short)1);
1:f45e4a5:   private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRING, (short)2);
1:f45e4a5: 
1:f45e4a5:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:f45e4a5:   static {
1:f45e4a5:     schemes.put(StandardScheme.class, new ColumnSliceStandardSchemeFactory());
1:f45e4a5:     schemes.put(TupleScheme.class, new ColumnSliceTupleSchemeFactory());
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ByteBuffer start; // optional
1:f45e4a5:   public ByteBuffer finish; // optional
1:f45e4a5: 
1:f45e4a5:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:f45e4a5:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:f45e4a5:     START((short)1, "start"),
1:f45e4a5:     FINISH((short)2, "finish");
1:f45e4a5: 
1:f45e4a5:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:f45e4a5: 
1:f45e4a5:     static {
1:f45e4a5:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:f45e4a5:         byName.put(field.getFieldName(), field);
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     /**
1:f45e4a5:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:f45e4a5:      */
1:f45e4a5:     public static _Fields findByThriftId(int fieldId) {
1:f45e4a5:       switch(fieldId) {
1:f45e4a5:         case 1: // START
1:f45e4a5:           return START;
1:f45e4a5:         case 2: // FINISH
1:f45e4a5:           return FINISH;
1:f45e4a5:         default:
1:f45e4a5:           return null;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     /**
1:f45e4a5:      * Find the _Fields constant that matches fieldId, throwing an exception
1:f45e4a5:      * if it is not found.
1:f45e4a5:      */
1:f45e4a5:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:f45e4a5:       _Fields fields = findByThriftId(fieldId);
1:f45e4a5:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:f45e4a5:       return fields;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     /**
1:f45e4a5:      * Find the _Fields constant that matches name, or null if its not found.
1:f45e4a5:      */
1:f45e4a5:     public static _Fields findByName(String name) {
1:f45e4a5:       return byName.get(name);
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     private final short _thriftId;
1:f45e4a5:     private final String _fieldName;
1:f45e4a5: 
1:f45e4a5:     _Fields(short thriftId, String fieldName) {
1:f45e4a5:       _thriftId = thriftId;
1:f45e4a5:       _fieldName = fieldName;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     public short getThriftFieldId() {
1:f45e4a5:       return _thriftId;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     public String getFieldName() {
1:f45e4a5:       return _fieldName;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   // isset id assignments
1:f45e4a5:   private _Fields optionals[] = {_Fields.START,_Fields.FINISH};
1:f45e4a5:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:f45e4a5:   static {
1:f45e4a5:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:f45e4a5:     tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:f45e4a5:     tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:f45e4a5:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:f45e4a5:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnSlice.class, metaDataMap);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ColumnSlice() {
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /**
1:f45e4a5:    * Performs a deep copy on <i>other</i>.
1:f45e4a5:    */
1:f45e4a5:   public ColumnSlice(ColumnSlice other) {
1:f45e4a5:     if (other.isSetStart()) {
1:f45e4a5:       this.start = org.apache.thrift.TBaseHelper.copyBinary(other.start);
1:f45e4a5: ;
1:f45e4a5:     }
1:f45e4a5:     if (other.isSetFinish()) {
1:f45e4a5:       this.finish = org.apache.thrift.TBaseHelper.copyBinary(other.finish);
1:f45e4a5: ;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ColumnSlice deepCopy() {
1:f45e4a5:     return new ColumnSlice(this);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public void clear() {
1:f45e4a5:     this.start = null;
1:f45e4a5:     this.finish = null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public byte[] getStart() {
1:f45e4a5:     setStart(org.apache.thrift.TBaseHelper.rightSize(start));
1:f45e4a5:     return start == null ? null : start.array();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ByteBuffer bufferForStart() {
1:f45e4a5:     return start;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ColumnSlice setStart(byte[] start) {
1:f45e4a5:     setStart(start == null ? (ByteBuffer)null : ByteBuffer.wrap(start));
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ColumnSlice setStart(ByteBuffer start) {
1:f45e4a5:     this.start = start;
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetStart() {
1:f45e4a5:     this.start = null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field start is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetStart() {
1:f45e4a5:     return this.start != null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setStartIsSet(boolean value) {
1:f45e4a5:     if (!value) {
1:f45e4a5:       this.start = null;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public byte[] getFinish() {
1:f45e4a5:     setFinish(org.apache.thrift.TBaseHelper.rightSize(finish));
1:f45e4a5:     return finish == null ? null : finish.array();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ByteBuffer bufferForFinish() {
1:f45e4a5:     return finish;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ColumnSlice setFinish(byte[] finish) {
1:f45e4a5:     setFinish(finish == null ? (ByteBuffer)null : ByteBuffer.wrap(finish));
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ColumnSlice setFinish(ByteBuffer finish) {
1:f45e4a5:     this.finish = finish;
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetFinish() {
1:f45e4a5:     this.finish = null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field finish is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetFinish() {
1:f45e4a5:     return this.finish != null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setFinishIsSet(boolean value) {
1:f45e4a5:     if (!value) {
1:f45e4a5:       this.finish = null;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setFieldValue(_Fields field, Object value) {
1:f45e4a5:     switch (field) {
1:f45e4a5:     case START:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetStart();
1:f45e4a5:       } else {
1:f45e4a5:         setStart((ByteBuffer)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     case FINISH:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetFinish();
1:f45e4a5:       } else {
1:f45e4a5:         setFinish((ByteBuffer)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public Object getFieldValue(_Fields field) {
1:f45e4a5:     switch (field) {
1:f45e4a5:     case START:
1:f45e4a5:       return getStart();
1:f45e4a5: 
1:f45e4a5:     case FINISH:
1:f45e4a5:       return getFinish();
1:f45e4a5: 
1:f45e4a5:     }
1:f45e4a5:     throw new IllegalStateException();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSet(_Fields field) {
1:f45e4a5:     if (field == null) {
1:f45e4a5:       throw new IllegalArgumentException();
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     switch (field) {
1:f45e4a5:     case START:
1:f45e4a5:       return isSetStart();
1:f45e4a5:     case FINISH:
1:f45e4a5:       return isSetFinish();
1:f45e4a5:     }
1:f45e4a5:     throw new IllegalStateException();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public boolean equals(Object that) {
1:f45e4a5:     if (that == null)
1:f45e4a5:       return false;
1:f45e4a5:     if (that instanceof ColumnSlice)
1:f45e4a5:       return this.equals((ColumnSlice)that);
1:f45e4a5:     return false;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public boolean equals(ColumnSlice that) {
1:f45e4a5:     if (that == null)
1:f45e4a5:       return false;
1:f45e4a5: 
1:f45e4a5:     boolean this_present_start = true && this.isSetStart();
1:f45e4a5:     boolean that_present_start = true && that.isSetStart();
1:f45e4a5:     if (this_present_start || that_present_start) {
1:f45e4a5:       if (!(this_present_start && that_present_start))
1:f45e4a5:         return false;
1:f45e4a5:       if (!this.start.equals(that.start))
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     boolean this_present_finish = true && this.isSetFinish();
1:f45e4a5:     boolean that_present_finish = true && that.isSetFinish();
1:f45e4a5:     if (this_present_finish || that_present_finish) {
1:f45e4a5:       if (!(this_present_finish && that_present_finish))
1:f45e4a5:         return false;
1:f45e4a5:       if (!this.finish.equals(that.finish))
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     return true;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public int hashCode() {
1:f45e4a5:     HashCodeBuilder builder = new HashCodeBuilder();
1:f45e4a5: 
1:f45e4a5:     boolean present_start = true && (isSetStart());
1:f45e4a5:     builder.append(present_start);
1:f45e4a5:     if (present_start)
1:f45e4a5:       builder.append(start);
1:f45e4a5: 
1:f45e4a5:     boolean present_finish = true && (isSetFinish());
1:f45e4a5:     builder.append(present_finish);
1:f45e4a5:     if (present_finish)
1:f45e4a5:       builder.append(finish);
1:f45e4a5: 
1:f45e4a5:     return builder.toHashCode();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public int compareTo(ColumnSlice other) {
1:f45e4a5:     if (!getClass().equals(other.getClass())) {
1:f45e4a5:       return getClass().getName().compareTo(other.getClass().getName());
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     int lastComparison = 0;
1:f45e4a5: 
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetStart()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetFinish()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     return 0;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public _Fields fieldForId(int fieldId) {
1:f45e4a5:     return _Fields.findByThriftId(fieldId);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:f45e4a5:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:f45e4a5:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public String toString() {
1:f45e4a5:     StringBuilder sb = new StringBuilder("ColumnSlice(");
1:f45e4a5:     boolean first = true;
1:f45e4a5: 
1:f45e4a5:     if (isSetStart()) {
1:f45e4a5:       sb.append("start:");
1:f45e4a5:       if (this.start == null) {
1:f45e4a5:         sb.append("null");
1:f45e4a5:       } else {
1:f45e4a5:         org.apache.thrift.TBaseHelper.toString(this.start, sb);
1:f45e4a5:       }
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     if (isSetFinish()) {
1:f45e4a5:       if (!first) sb.append(", ");
1:f45e4a5:       sb.append("finish:");
1:f45e4a5:       if (this.finish == null) {
1:f45e4a5:         sb.append("null");
1:f45e4a5:       } else {
1:f45e4a5:         org.apache.thrift.TBaseHelper.toString(this.finish, sb);
1:f45e4a5:       }
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     sb.append(")");
1:f45e4a5:     return sb.toString();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void validate() throws org.apache.thrift.TException {
1:f45e4a5:     // check for required fields
1:f45e4a5:     // check for sub-struct validity
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:f45e4a5:     try {
1:f45e4a5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:f45e4a5:     } catch (org.apache.thrift.TException te) {
1:f45e4a5:       throw new java.io.IOException(te);
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:f45e4a5:     try {
1:f45e4a5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:f45e4a5:     } catch (org.apache.thrift.TException te) {
1:f45e4a5:       throw new java.io.IOException(te);
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class ColumnSliceStandardSchemeFactory implements SchemeFactory {
1:f45e4a5:     public ColumnSliceStandardScheme getScheme() {
1:f45e4a5:       return new ColumnSliceStandardScheme();
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class ColumnSliceStandardScheme extends StandardScheme<ColumnSlice> {
1:f45e4a5: 
1:f45e4a5:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnSlice struct) throws org.apache.thrift.TException {
1:f45e4a5:       org.apache.thrift.protocol.TField schemeField;
1:f45e4a5:       iprot.readStructBegin();
1:f45e4a5:       while (true)
1:f45e4a5:       {
1:f45e4a5:         schemeField = iprot.readFieldBegin();
1:f45e4a5:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:f45e4a5:           break;
1:f45e4a5:         }
1:f45e4a5:         switch (schemeField.id) {
1:f45e4a5:           case 1: // START
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:f45e4a5:               struct.start = iprot.readBinary();
1:f45e4a5:               struct.setStartIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           case 2: // FINISH
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:f45e4a5:               struct.finish = iprot.readBinary();
1:f45e4a5:               struct.setFinishIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           default:
1:f45e4a5:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:         }
1:f45e4a5:         iprot.readFieldEnd();
1:f45e4a5:       }
1:f45e4a5:       iprot.readStructEnd();
1:f45e4a5: 
1:f45e4a5:       // check for required fields of primitive type, which can't be checked in the validate method
1:f45e4a5:       struct.validate();
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnSlice struct) throws org.apache.thrift.TException {
1:f45e4a5:       struct.validate();
1:f45e4a5: 
1:f45e4a5:       oprot.writeStructBegin(STRUCT_DESC);
1:f45e4a5:       if (struct.start != null) {
1:f45e4a5:         if (struct.isSetStart()) {
1:f45e4a5:           oprot.writeFieldBegin(START_FIELD_DESC);
1:f45e4a5:           oprot.writeBinary(struct.start);
1:f45e4a5:           oprot.writeFieldEnd();
1:f45e4a5:         }
1:f45e4a5:       }
1:f45e4a5:       if (struct.finish != null) {
1:f45e4a5:         if (struct.isSetFinish()) {
1:f45e4a5:           oprot.writeFieldBegin(FINISH_FIELD_DESC);
1:f45e4a5:           oprot.writeBinary(struct.finish);
1:f45e4a5:           oprot.writeFieldEnd();
1:f45e4a5:         }
1:f45e4a5:       }
1:f45e4a5:       oprot.writeFieldStop();
1:f45e4a5:       oprot.writeStructEnd();
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class ColumnSliceTupleSchemeFactory implements SchemeFactory {
1:f45e4a5:     public ColumnSliceTupleScheme getScheme() {
1:f45e4a5:       return new ColumnSliceTupleScheme();
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class ColumnSliceTupleScheme extends TupleScheme<ColumnSlice> {
1:f45e4a5: 
1:f45e4a5:     @Override
1:f45e4a5:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
1:f45e4a5:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:f45e4a5:       BitSet optionals = new BitSet();
1:f45e4a5:       if (struct.isSetStart()) {
1:f45e4a5:         optionals.set(0);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetFinish()) {
1:f45e4a5:         optionals.set(1);
1:f45e4a5:       }
1:f45e4a5:       oprot.writeBitSet(optionals, 2);
1:f45e4a5:       if (struct.isSetStart()) {
1:f45e4a5:         oprot.writeBinary(struct.start);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetFinish()) {
1:f45e4a5:         oprot.writeBinary(struct.finish);
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     @Override
1:f45e4a5:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
1:f45e4a5:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:f45e4a5:       BitSet incoming = iprot.readBitSet(2);
1:f45e4a5:       if (incoming.get(0)) {
1:f45e4a5:         struct.start = iprot.readBinary();
1:f45e4a5:         struct.setStartIsSet(true);
1:f45e4a5:       }
1:f45e4a5:       if (incoming.get(1)) {
1:f45e4a5:         struct.finish = iprot.readBinary();
1:f45e4a5:         struct.setFinishIsSet(true);
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5: }
1:f45e4a5: 
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f45e4a5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Autogenerated by Thrift Compiler (0.9.1)
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  *  @generated
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * The ColumnSlice is used to select a set of columns from inside a row.
1:  * If start or finish are unspecified they will default to the start-of
1:  * end-of value.
1:  * @param start. The start of the ColumnSlice inclusive
1:  * @param finish. The end of the ColumnSlice inclusive
1:  */
1: public class ColumnSlice implements org.apache.thrift.TBase<ColumnSlice, ColumnSlice._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnSlice> {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnSlice");
1: 
1:   private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRING, (short)2);
1: 
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new ColumnSliceStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new ColumnSliceTupleSchemeFactory());
1:   }
1: 
1:   public ByteBuffer start; // optional
1:   public ByteBuffer finish; // optional
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     START((short)1, "start"),
1:     FINISH((short)2, "finish");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // START
1:           return START;
1:         case 2: // FINISH
1:           return FINISH;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private _Fields optionals[] = {_Fields.START,_Fields.FINISH};
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnSlice.class, metaDataMap);
1:   }
1: 
1:   public ColumnSlice() {
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public ColumnSlice(ColumnSlice other) {
1:     if (other.isSetStart()) {
1:       this.start = org.apache.thrift.TBaseHelper.copyBinary(other.start);
1: ;
1:     }
1:     if (other.isSetFinish()) {
1:       this.finish = org.apache.thrift.TBaseHelper.copyBinary(other.finish);
1: ;
1:     }
1:   }
1: 
1:   public ColumnSlice deepCopy() {
1:     return new ColumnSlice(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.start = null;
1:     this.finish = null;
1:   }
1: 
1:   public byte[] getStart() {
1:     setStart(org.apache.thrift.TBaseHelper.rightSize(start));
1:     return start == null ? null : start.array();
1:   }
1: 
1:   public ByteBuffer bufferForStart() {
1:     return start;
1:   }
1: 
1:   public ColumnSlice setStart(byte[] start) {
1:     setStart(start == null ? (ByteBuffer)null : ByteBuffer.wrap(start));
1:     return this;
1:   }
1: 
1:   public ColumnSlice setStart(ByteBuffer start) {
1:     this.start = start;
1:     return this;
1:   }
1: 
1:   public void unsetStart() {
1:     this.start = null;
1:   }
1: 
1:   /** Returns true if field start is set (has been assigned a value) and false otherwise */
1:   public boolean isSetStart() {
1:     return this.start != null;
1:   }
1: 
1:   public void setStartIsSet(boolean value) {
1:     if (!value) {
1:       this.start = null;
1:     }
1:   }
1: 
1:   public byte[] getFinish() {
1:     setFinish(org.apache.thrift.TBaseHelper.rightSize(finish));
1:     return finish == null ? null : finish.array();
1:   }
1: 
1:   public ByteBuffer bufferForFinish() {
1:     return finish;
1:   }
1: 
1:   public ColumnSlice setFinish(byte[] finish) {
1:     setFinish(finish == null ? (ByteBuffer)null : ByteBuffer.wrap(finish));
1:     return this;
1:   }
1: 
1:   public ColumnSlice setFinish(ByteBuffer finish) {
1:     this.finish = finish;
1:     return this;
1:   }
1: 
1:   public void unsetFinish() {
1:     this.finish = null;
1:   }
1: 
1:   /** Returns true if field finish is set (has been assigned a value) and false otherwise */
1:   public boolean isSetFinish() {
1:     return this.finish != null;
1:   }
1: 
1:   public void setFinishIsSet(boolean value) {
1:     if (!value) {
1:       this.finish = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case START:
1:       if (value == null) {
1:         unsetStart();
1:       } else {
1:         setStart((ByteBuffer)value);
1:       }
1:       break;
1: 
1:     case FINISH:
1:       if (value == null) {
1:         unsetFinish();
1:       } else {
1:         setFinish((ByteBuffer)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case START:
1:       return getStart();
1: 
1:     case FINISH:
1:       return getFinish();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case START:
1:       return isSetStart();
1:     case FINISH:
1:       return isSetFinish();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof ColumnSlice)
1:       return this.equals((ColumnSlice)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(ColumnSlice that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_start = true && this.isSetStart();
1:     boolean that_present_start = true && that.isSetStart();
1:     if (this_present_start || that_present_start) {
1:       if (!(this_present_start && that_present_start))
1:         return false;
1:       if (!this.start.equals(that.start))
1:         return false;
1:     }
1: 
1:     boolean this_present_finish = true && this.isSetFinish();
1:     boolean that_present_finish = true && that.isSetFinish();
1:     if (this_present_finish || that_present_finish) {
1:       if (!(this_present_finish && that_present_finish))
1:         return false;
1:       if (!this.finish.equals(that.finish))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_start = true && (isSetStart());
1:     builder.append(present_start);
1:     if (present_start)
1:       builder.append(start);
1: 
1:     boolean present_finish = true && (isSetFinish());
1:     builder.append(present_finish);
1:     if (present_finish)
1:       builder.append(finish);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   @Override
1:   public int compareTo(ColumnSlice other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
1: 
1:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetStart()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetFinish()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("ColumnSlice(");
1:     boolean first = true;
1: 
1:     if (isSetStart()) {
1:       sb.append("start:");
1:       if (this.start == null) {
1:         sb.append("null");
1:       } else {
1:         org.apache.thrift.TBaseHelper.toString(this.start, sb);
1:       }
1:       first = false;
1:     }
1:     if (isSetFinish()) {
1:       if (!first) sb.append(", ");
1:       sb.append("finish:");
1:       if (this.finish == null) {
1:         sb.append("null");
1:       } else {
1:         org.apache.thrift.TBaseHelper.toString(this.finish, sb);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:     // check for sub-struct validity
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private static class ColumnSliceStandardSchemeFactory implements SchemeFactory {
1:     public ColumnSliceStandardScheme getScheme() {
1:       return new ColumnSliceStandardScheme();
1:     }
1:   }
1: 
1:   private static class ColumnSliceStandardScheme extends StandardScheme<ColumnSlice> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnSlice struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // START
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.start = iprot.readBinary();
1:               struct.setStartIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // FINISH
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.finish = iprot.readBinary();
1:               struct.setFinishIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnSlice struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.start != null) {
1:         if (struct.isSetStart()) {
1:           oprot.writeFieldBegin(START_FIELD_DESC);
1:           oprot.writeBinary(struct.start);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.finish != null) {
1:         if (struct.isSetFinish()) {
1:           oprot.writeFieldBegin(FINISH_FIELD_DESC);
1:           oprot.writeBinary(struct.finish);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class ColumnSliceTupleSchemeFactory implements SchemeFactory {
1:     public ColumnSliceTupleScheme getScheme() {
1:       return new ColumnSliceTupleScheme();
1:     }
1:   }
1: 
1:   private static class ColumnSliceTupleScheme extends TupleScheme<ColumnSlice> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetStart()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetFinish()) {
1:         optionals.set(1);
1:       }
1:       oprot.writeBitSet(optionals, 2);
1:       if (struct.isSetStart()) {
1:         oprot.writeBinary(struct.start);
1:       }
1:       if (struct.isSetFinish()) {
1:         oprot.writeBinary(struct.finish);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       BitSet incoming = iprot.readBitSet(2);
1:       if (incoming.get(0)) {
1:         struct.start = iprot.readBinary();
1:         struct.setStartIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.finish = iprot.readBinary();
1:         struct.setFinishIsSet(true);
1:       }
1:     }
1:   }
1: 
1: }
1: 
commit:3f07025
/////////////////////////////////////////////////////////////////////////
commit:60fb923
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Autogenerated by Thrift Compiler (0.9.1)
0:  *
0:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
0:  *  @generated
0:  */
0: package org.apache.cassandra.thrift;
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
0: 
0: import org.apache.commons.lang3.builder.HashCodeBuilder;
0: import org.apache.thrift.scheme.IScheme;
0: import org.apache.thrift.scheme.SchemeFactory;
0: import org.apache.thrift.scheme.StandardScheme;
0: 
0: import org.apache.thrift.scheme.TupleScheme;
0: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
0: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.EnumSet;
0: import java.util.Collections;
0: import java.util.BitSet;
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * The ColumnSlice is used to select a set of columns from inside a row.
0:  * If start or finish are unspecified they will default to the start-of
0:  * end-of value.
0:  * @param start. The start of the ColumnSlice inclusive
0:  * @param finish. The end of the ColumnSlice inclusive
0:  */
0: public class ColumnSlice implements org.apache.thrift.TBase<ColumnSlice, ColumnSlice._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnSlice> {
0:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnSlice");
0: 
0:   private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRING, (short)1);
0:   private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRING, (short)2);
0: 
0:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
0:   static {
0:     schemes.put(StandardScheme.class, new ColumnSliceStandardSchemeFactory());
0:     schemes.put(TupleScheme.class, new ColumnSliceTupleSchemeFactory());
0:   }
0: 
0:   public ByteBuffer start; // optional
0:   public ByteBuffer finish; // optional
0: 
0:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
0:     START((short)1, "start"),
0:     FINISH((short)2, "finish");
0: 
0:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
0:     static {
0:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, or null if its not found.
0:      */
0:     public static _Fields findByThriftId(int fieldId) {
0:       switch(fieldId) {
0:         case 1: // START
0:           return START;
0:         case 2: // FINISH
0:           return FINISH;
0:         default:
0:           return null;
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, throwing an exception
0:      * if it is not found.
0:      */
0:     public static _Fields findByThriftIdOrThrow(int fieldId) {
0:       _Fields fields = findByThriftId(fieldId);
0:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
0:       return fields;
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches name, or null if its not found.
0:      */
0:     public static _Fields findByName(String name) {
0:       return byName.get(name);
0:     }
0: 
0:     private final short _thriftId;
0:     private final String _fieldName;
0: 
0:     _Fields(short thriftId, String fieldName) {
0:       _thriftId = thriftId;
0:       _fieldName = fieldName;
0:     }
0: 
0:     public short getThriftFieldId() {
0:       return _thriftId;
0:     }
0: 
0:     public String getFieldName() {
0:       return _fieldName;
0:     }
0:   }
0: 
0:   // isset id assignments
0:   private _Fields optionals[] = {_Fields.START,_Fields.FINISH};
0:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
0:   static {
0:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnSlice.class, metaDataMap);
0:   }
0: 
0:   public ColumnSlice() {
0:   }
0: 
0:   /**
0:    * Performs a deep copy on <i>other</i>.
0:    */
0:   public ColumnSlice(ColumnSlice other) {
0:     if (other.isSetStart()) {
0:       this.start = org.apache.thrift.TBaseHelper.copyBinary(other.start);
0: ;
0:     }
0:     if (other.isSetFinish()) {
0:       this.finish = org.apache.thrift.TBaseHelper.copyBinary(other.finish);
0: ;
0:     }
0:   }
0: 
0:   public ColumnSlice deepCopy() {
0:     return new ColumnSlice(this);
0:   }
0: 
0:   @Override
0:   public void clear() {
0:     this.start = null;
0:     this.finish = null;
0:   }
0: 
0:   public byte[] getStart() {
0:     setStart(org.apache.thrift.TBaseHelper.rightSize(start));
0:     return start == null ? null : start.array();
0:   }
0: 
0:   public ByteBuffer bufferForStart() {
0:     return start;
0:   }
0: 
0:   public ColumnSlice setStart(byte[] start) {
0:     setStart(start == null ? (ByteBuffer)null : ByteBuffer.wrap(start));
0:     return this;
0:   }
0: 
0:   public ColumnSlice setStart(ByteBuffer start) {
0:     this.start = start;
0:     return this;
0:   }
0: 
0:   public void unsetStart() {
0:     this.start = null;
0:   }
0: 
0:   /** Returns true if field start is set (has been assigned a value) and false otherwise */
0:   public boolean isSetStart() {
0:     return this.start != null;
0:   }
0: 
0:   public void setStartIsSet(boolean value) {
0:     if (!value) {
0:       this.start = null;
0:     }
0:   }
0: 
0:   public byte[] getFinish() {
0:     setFinish(org.apache.thrift.TBaseHelper.rightSize(finish));
0:     return finish == null ? null : finish.array();
0:   }
0: 
0:   public ByteBuffer bufferForFinish() {
0:     return finish;
0:   }
0: 
0:   public ColumnSlice setFinish(byte[] finish) {
0:     setFinish(finish == null ? (ByteBuffer)null : ByteBuffer.wrap(finish));
0:     return this;
0:   }
0: 
0:   public ColumnSlice setFinish(ByteBuffer finish) {
0:     this.finish = finish;
0:     return this;
0:   }
0: 
0:   public void unsetFinish() {
0:     this.finish = null;
0:   }
0: 
0:   /** Returns true if field finish is set (has been assigned a value) and false otherwise */
0:   public boolean isSetFinish() {
0:     return this.finish != null;
0:   }
0: 
0:   public void setFinishIsSet(boolean value) {
0:     if (!value) {
0:       this.finish = null;
0:     }
0:   }
0: 
0:   public void setFieldValue(_Fields field, Object value) {
0:     switch (field) {
0:     case START:
0:       if (value == null) {
0:         unsetStart();
0:       } else {
0:         setStart((ByteBuffer)value);
0:       }
0:       break;
0: 
0:     case FINISH:
0:       if (value == null) {
0:         unsetFinish();
0:       } else {
0:         setFinish((ByteBuffer)value);
0:       }
0:       break;
0: 
0:     }
0:   }
0: 
0:   public Object getFieldValue(_Fields field) {
0:     switch (field) {
0:     case START:
0:       return getStart();
0: 
0:     case FINISH:
0:       return getFinish();
0: 
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
0:   public boolean isSet(_Fields field) {
0:     if (field == null) {
0:       throw new IllegalArgumentException();
0:     }
0: 
0:     switch (field) {
0:     case START:
0:       return isSetStart();
0:     case FINISH:
0:       return isSetFinish();
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   @Override
0:   public boolean equals(Object that) {
0:     if (that == null)
0:       return false;
0:     if (that instanceof ColumnSlice)
0:       return this.equals((ColumnSlice)that);
0:     return false;
0:   }
0: 
0:   public boolean equals(ColumnSlice that) {
0:     if (that == null)
0:       return false;
0: 
0:     boolean this_present_start = true && this.isSetStart();
0:     boolean that_present_start = true && that.isSetStart();
0:     if (this_present_start || that_present_start) {
0:       if (!(this_present_start && that_present_start))
0:         return false;
0:       if (!this.start.equals(that.start))
0:         return false;
0:     }
0: 
0:     boolean this_present_finish = true && this.isSetFinish();
0:     boolean that_present_finish = true && that.isSetFinish();
0:     if (this_present_finish || that_present_finish) {
0:       if (!(this_present_finish && that_present_finish))
0:         return false;
0:       if (!this.finish.equals(that.finish))
0:         return false;
0:     }
0: 
0:     return true;
0:   }
0: 
0:   @Override
0:   public int hashCode() {
0:     HashCodeBuilder builder = new HashCodeBuilder();
0: 
0:     boolean present_start = true && (isSetStart());
0:     builder.append(present_start);
0:     if (present_start)
0:       builder.append(start);
0: 
0:     boolean present_finish = true && (isSetFinish());
0:     builder.append(present_finish);
0:     if (present_finish)
0:       builder.append(finish);
0: 
0:     return builder.toHashCode();
0:   }
0: 
0:   @Override
0:   public int compareTo(ColumnSlice other) {
0:     if (!getClass().equals(other.getClass())) {
0:       return getClass().getName().compareTo(other.getClass().getName());
0:     }
0: 
0:     int lastComparison = 0;
0: 
0:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetStart()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetFinish()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     return 0;
0:   }
0: 
0:   public _Fields fieldForId(int fieldId) {
0:     return _Fields.findByThriftId(fieldId);
0:   }
0: 
0:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
0:   }
0: 
0:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
0:   }
0: 
0:   @Override
0:   public String toString() {
0:     StringBuilder sb = new StringBuilder("ColumnSlice(");
0:     boolean first = true;
0: 
0:     if (isSetStart()) {
0:       sb.append("start:");
0:       if (this.start == null) {
0:         sb.append("null");
0:       } else {
0:         org.apache.thrift.TBaseHelper.toString(this.start, sb);
0:       }
0:       first = false;
0:     }
0:     if (isSetFinish()) {
0:       if (!first) sb.append(", ");
0:       sb.append("finish:");
0:       if (this.finish == null) {
0:         sb.append("null");
0:       } else {
0:         org.apache.thrift.TBaseHelper.toString(this.finish, sb);
0:       }
0:       first = false;
0:     }
0:     sb.append(")");
0:     return sb.toString();
0:   }
0: 
0:   public void validate() throws org.apache.thrift.TException {
0:     // check for required fields
0:     // check for sub-struct validity
0:   }
0: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private static class ColumnSliceStandardSchemeFactory implements SchemeFactory {
0:     public ColumnSliceStandardScheme getScheme() {
0:       return new ColumnSliceStandardScheme();
0:     }
0:   }
0: 
0:   private static class ColumnSliceStandardScheme extends StandardScheme<ColumnSlice> {
0: 
0:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
0:         schemeField = iprot.readFieldBegin();
0:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
0:         }
0:         switch (schemeField.id) {
0:           case 1: // START
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
0:               struct.start = iprot.readBinary();
0:               struct.setStartIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 2: // FINISH
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
0:               struct.finish = iprot.readBinary();
0:               struct.setFinishIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           default:
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:         }
0:         iprot.readFieldEnd();
0:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
0:       struct.validate();
0:     }
0: 
0:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
0:       if (struct.start != null) {
0:         if (struct.isSetStart()) {
0:           oprot.writeFieldBegin(START_FIELD_DESC);
0:           oprot.writeBinary(struct.start);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.finish != null) {
0:         if (struct.isSetFinish()) {
0:           oprot.writeFieldBegin(FINISH_FIELD_DESC);
0:           oprot.writeBinary(struct.finish);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
0:     }
0: 
0:   }
0: 
0:   private static class ColumnSliceTupleSchemeFactory implements SchemeFactory {
0:     public ColumnSliceTupleScheme getScheme() {
0:       return new ColumnSliceTupleScheme();
0:     }
0:   }
0: 
0:   private static class ColumnSliceTupleScheme extends TupleScheme<ColumnSlice> {
0: 
0:     @Override
0:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       TTupleProtocol oprot = (TTupleProtocol) prot;
0:       BitSet optionals = new BitSet();
0:       if (struct.isSetStart()) {
0:         optionals.set(0);
0:       }
0:       if (struct.isSetFinish()) {
0:         optionals.set(1);
0:       }
0:       oprot.writeBitSet(optionals, 2);
0:       if (struct.isSetStart()) {
0:         oprot.writeBinary(struct.start);
0:       }
0:       if (struct.isSetFinish()) {
0:         oprot.writeBinary(struct.finish);
0:       }
0:     }
0: 
0:     @Override
0:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       TTupleProtocol iprot = (TTupleProtocol) prot;
0:       BitSet incoming = iprot.readBitSet(2);
0:       if (incoming.get(0)) {
0:         struct.start = iprot.readBinary();
0:         struct.setStartIsSet(true);
0:       }
0:       if (incoming.get(1)) {
0:         struct.finish = iprot.readBinary();
0:         struct.setFinishIsSet(true);
0:       }
0:     }
0:   }
0: 
0: }
0: 
author:Jake Luciani
-------------------------------------------------------------------------------
commit:7f63b1f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Autogenerated by Thrift Compiler (0.9.1)
0:  *
0:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
0:  *  @generated
0:  */
0: package org.apache.cassandra.thrift;
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
0: 
0: import org.apache.commons.lang3.builder.HashCodeBuilder;
0: import org.apache.thrift.scheme.IScheme;
0: import org.apache.thrift.scheme.SchemeFactory;
0: import org.apache.thrift.scheme.StandardScheme;
0: 
0: import org.apache.thrift.scheme.TupleScheme;
0: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
0: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.EnumSet;
0: import java.util.Collections;
0: import java.util.BitSet;
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * The ColumnSlice is used to select a set of columns from inside a row.
0:  * If start or finish are unspecified they will default to the start-of
0:  * end-of value.
0:  * @param start. The start of the ColumnSlice inclusive
0:  * @param finish. The end of the ColumnSlice inclusive
0:  */
0: public class ColumnSlice implements org.apache.thrift.TBase<ColumnSlice, ColumnSlice._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnSlice> {
0:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnSlice");
0: 
0:   private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRING, (short)1);
0:   private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRING, (short)2);
0: 
0:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
0:   static {
0:     schemes.put(StandardScheme.class, new ColumnSliceStandardSchemeFactory());
0:     schemes.put(TupleScheme.class, new ColumnSliceTupleSchemeFactory());
0:   }
0: 
0:   public ByteBuffer start; // optional
0:   public ByteBuffer finish; // optional
0: 
0:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
0:     START((short)1, "start"),
0:     FINISH((short)2, "finish");
0: 
0:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
0:     static {
0:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, or null if its not found.
0:      */
0:     public static _Fields findByThriftId(int fieldId) {
0:       switch(fieldId) {
0:         case 1: // START
0:           return START;
0:         case 2: // FINISH
0:           return FINISH;
0:         default:
0:           return null;
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, throwing an exception
0:      * if it is not found.
0:      */
0:     public static _Fields findByThriftIdOrThrow(int fieldId) {
0:       _Fields fields = findByThriftId(fieldId);
0:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
0:       return fields;
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches name, or null if its not found.
0:      */
0:     public static _Fields findByName(String name) {
0:       return byName.get(name);
0:     }
0: 
0:     private final short _thriftId;
0:     private final String _fieldName;
0: 
0:     _Fields(short thriftId, String fieldName) {
0:       _thriftId = thriftId;
0:       _fieldName = fieldName;
0:     }
0: 
0:     public short getThriftFieldId() {
0:       return _thriftId;
0:     }
0: 
0:     public String getFieldName() {
0:       return _fieldName;
0:     }
0:   }
0: 
0:   // isset id assignments
0:   private _Fields optionals[] = {_Fields.START,_Fields.FINISH};
0:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
0:   static {
0:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnSlice.class, metaDataMap);
0:   }
0: 
0:   public ColumnSlice() {
0:   }
0: 
0:   /**
0:    * Performs a deep copy on <i>other</i>.
0:    */
0:   public ColumnSlice(ColumnSlice other) {
0:     if (other.isSetStart()) {
0:       this.start = org.apache.thrift.TBaseHelper.copyBinary(other.start);
0: ;
0:     }
0:     if (other.isSetFinish()) {
0:       this.finish = org.apache.thrift.TBaseHelper.copyBinary(other.finish);
0: ;
0:     }
0:   }
0: 
0:   public ColumnSlice deepCopy() {
0:     return new ColumnSlice(this);
0:   }
0: 
0:   @Override
0:   public void clear() {
0:     this.start = null;
0:     this.finish = null;
0:   }
0: 
0:   public byte[] getStart() {
0:     setStart(org.apache.thrift.TBaseHelper.rightSize(start));
0:     return start == null ? null : start.array();
0:   }
0: 
0:   public ByteBuffer bufferForStart() {
0:     return start;
0:   }
0: 
0:   public ColumnSlice setStart(byte[] start) {
0:     setStart(start == null ? (ByteBuffer)null : ByteBuffer.wrap(start));
0:     return this;
0:   }
0: 
0:   public ColumnSlice setStart(ByteBuffer start) {
0:     this.start = start;
0:     return this;
0:   }
0: 
0:   public void unsetStart() {
0:     this.start = null;
0:   }
0: 
0:   /** Returns true if field start is set (has been assigned a value) and false otherwise */
0:   public boolean isSetStart() {
0:     return this.start != null;
0:   }
0: 
0:   public void setStartIsSet(boolean value) {
0:     if (!value) {
0:       this.start = null;
0:     }
0:   }
0: 
0:   public byte[] getFinish() {
0:     setFinish(org.apache.thrift.TBaseHelper.rightSize(finish));
0:     return finish == null ? null : finish.array();
0:   }
0: 
0:   public ByteBuffer bufferForFinish() {
0:     return finish;
0:   }
0: 
0:   public ColumnSlice setFinish(byte[] finish) {
0:     setFinish(finish == null ? (ByteBuffer)null : ByteBuffer.wrap(finish));
0:     return this;
0:   }
0: 
0:   public ColumnSlice setFinish(ByteBuffer finish) {
0:     this.finish = finish;
0:     return this;
0:   }
0: 
0:   public void unsetFinish() {
0:     this.finish = null;
0:   }
0: 
0:   /** Returns true if field finish is set (has been assigned a value) and false otherwise */
0:   public boolean isSetFinish() {
0:     return this.finish != null;
0:   }
0: 
0:   public void setFinishIsSet(boolean value) {
0:     if (!value) {
0:       this.finish = null;
0:     }
0:   }
0: 
0:   public void setFieldValue(_Fields field, Object value) {
0:     switch (field) {
0:     case START:
0:       if (value == null) {
0:         unsetStart();
0:       } else {
0:         setStart((ByteBuffer)value);
0:       }
0:       break;
0: 
0:     case FINISH:
0:       if (value == null) {
0:         unsetFinish();
0:       } else {
0:         setFinish((ByteBuffer)value);
0:       }
0:       break;
0: 
0:     }
0:   }
0: 
0:   public Object getFieldValue(_Fields field) {
0:     switch (field) {
0:     case START:
0:       return getStart();
0: 
0:     case FINISH:
0:       return getFinish();
0: 
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
0:   public boolean isSet(_Fields field) {
0:     if (field == null) {
0:       throw new IllegalArgumentException();
0:     }
0: 
0:     switch (field) {
0:     case START:
0:       return isSetStart();
0:     case FINISH:
0:       return isSetFinish();
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   @Override
0:   public boolean equals(Object that) {
0:     if (that == null)
0:       return false;
0:     if (that instanceof ColumnSlice)
0:       return this.equals((ColumnSlice)that);
0:     return false;
0:   }
0: 
0:   public boolean equals(ColumnSlice that) {
0:     if (that == null)
0:       return false;
0: 
0:     boolean this_present_start = true && this.isSetStart();
0:     boolean that_present_start = true && that.isSetStart();
0:     if (this_present_start || that_present_start) {
0:       if (!(this_present_start && that_present_start))
0:         return false;
0:       if (!this.start.equals(that.start))
0:         return false;
0:     }
0: 
0:     boolean this_present_finish = true && this.isSetFinish();
0:     boolean that_present_finish = true && that.isSetFinish();
0:     if (this_present_finish || that_present_finish) {
0:       if (!(this_present_finish && that_present_finish))
0:         return false;
0:       if (!this.finish.equals(that.finish))
0:         return false;
0:     }
0: 
0:     return true;
0:   }
0: 
0:   @Override
0:   public int hashCode() {
0:     HashCodeBuilder builder = new HashCodeBuilder();
0: 
0:     boolean present_start = true && (isSetStart());
0:     builder.append(present_start);
0:     if (present_start)
0:       builder.append(start);
0: 
0:     boolean present_finish = true && (isSetFinish());
0:     builder.append(present_finish);
0:     if (present_finish)
0:       builder.append(finish);
0: 
0:     return builder.toHashCode();
0:   }
0: 
0:   @Override
0:   public int compareTo(ColumnSlice other) {
0:     if (!getClass().equals(other.getClass())) {
0:       return getClass().getName().compareTo(other.getClass().getName());
0:     }
0: 
0:     int lastComparison = 0;
0: 
0:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetStart()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetFinish()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     return 0;
0:   }
0: 
0:   public _Fields fieldForId(int fieldId) {
0:     return _Fields.findByThriftId(fieldId);
0:   }
0: 
0:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
0:   }
0: 
0:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
0:   }
0: 
0:   @Override
0:   public String toString() {
0:     StringBuilder sb = new StringBuilder("ColumnSlice(");
0:     boolean first = true;
0: 
0:     if (isSetStart()) {
0:       sb.append("start:");
0:       if (this.start == null) {
0:         sb.append("null");
0:       } else {
0:         org.apache.thrift.TBaseHelper.toString(this.start, sb);
0:       }
0:       first = false;
0:     }
0:     if (isSetFinish()) {
0:       if (!first) sb.append(", ");
0:       sb.append("finish:");
0:       if (this.finish == null) {
0:         sb.append("null");
0:       } else {
0:         org.apache.thrift.TBaseHelper.toString(this.finish, sb);
0:       }
0:       first = false;
0:     }
0:     sb.append(")");
0:     return sb.toString();
0:   }
0: 
0:   public void validate() throws org.apache.thrift.TException {
0:     // check for required fields
0:     // check for sub-struct validity
0:   }
0: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private static class ColumnSliceStandardSchemeFactory implements SchemeFactory {
0:     public ColumnSliceStandardScheme getScheme() {
0:       return new ColumnSliceStandardScheme();
0:     }
0:   }
0: 
0:   private static class ColumnSliceStandardScheme extends StandardScheme<ColumnSlice> {
0: 
0:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
0:         schemeField = iprot.readFieldBegin();
0:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
0:         }
0:         switch (schemeField.id) {
0:           case 1: // START
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
0:               struct.start = iprot.readBinary();
0:               struct.setStartIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 2: // FINISH
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
0:               struct.finish = iprot.readBinary();
0:               struct.setFinishIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           default:
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:         }
0:         iprot.readFieldEnd();
0:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
0:       struct.validate();
0:     }
0: 
0:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
0:       if (struct.start != null) {
0:         if (struct.isSetStart()) {
0:           oprot.writeFieldBegin(START_FIELD_DESC);
0:           oprot.writeBinary(struct.start);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.finish != null) {
0:         if (struct.isSetFinish()) {
0:           oprot.writeFieldBegin(FINISH_FIELD_DESC);
0:           oprot.writeBinary(struct.finish);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
0:     }
0: 
0:   }
0: 
0:   private static class ColumnSliceTupleSchemeFactory implements SchemeFactory {
0:     public ColumnSliceTupleScheme getScheme() {
0:       return new ColumnSliceTupleScheme();
0:     }
0:   }
0: 
0:   private static class ColumnSliceTupleScheme extends TupleScheme<ColumnSlice> {
0: 
0:     @Override
0:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       TTupleProtocol oprot = (TTupleProtocol) prot;
0:       BitSet optionals = new BitSet();
0:       if (struct.isSetStart()) {
0:         optionals.set(0);
0:       }
0:       if (struct.isSetFinish()) {
0:         optionals.set(1);
0:       }
0:       oprot.writeBitSet(optionals, 2);
0:       if (struct.isSetStart()) {
0:         oprot.writeBinary(struct.start);
0:       }
0:       if (struct.isSetFinish()) {
0:         oprot.writeBinary(struct.finish);
0:       }
0:     }
0: 
0:     @Override
0:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnSlice struct) throws org.apache.thrift.TException {
0:       TTupleProtocol iprot = (TTupleProtocol) prot;
0:       BitSet incoming = iprot.readBitSet(2);
0:       if (incoming.get(0)) {
0:         struct.start = iprot.readBinary();
0:         struct.setStartIsSet(true);
0:       }
0:       if (incoming.get(1)) {
0:         struct.finish = iprot.readBinary();
0:         struct.setFinishIsSet(true);
0:       }
0:     }
0:   }
0: 
0: }
0: 
============================================================================