1:c2ecfe7: /*
1:c2ecfe7:  * Licensed to the Apache Software Foundation (ASF) under one
1:c2ecfe7:  * or more contributor license agreements.  See the NOTICE file
1:c2ecfe7:  * distributed with this work for additional information
1:c2ecfe7:  * regarding copyright ownership.  The ASF licenses this file
1:c2ecfe7:  * to you under the Apache License, Version 2.0 (the
1:c2ecfe7:  * "License"); you may not use this file except in compliance
1:c2ecfe7:  * with the License.  You may obtain a copy of the License at
1:c2ecfe7:  *
1:c2ecfe7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c2ecfe7:  *
1:c2ecfe7:  * Unless required by applicable law or agreed to in writing, software
1:c2ecfe7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c2ecfe7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c2ecfe7:  * See the License for the specific language governing permissions and
1:c2ecfe7:  * limitations under the License.
1:c2ecfe7:  */
1:c2ecfe7: package org.apache.cassandra.io.util;
1:c2ecfe7: 
1:c2ecfe7: import java.io.IOException;
1:c2ecfe7: import java.nio.BufferOverflowException;
1:c2ecfe7: import java.nio.ByteBuffer;
1:c2ecfe7: 
1:c2ecfe7: 
1:c2ecfe7: /**
1:c2ecfe7:  * An implementation of the DataOutputStream interface using a FastByteArrayOutputStream and exposing
1:c2ecfe7:  * its buffer so copies can be avoided. This version does not expand if it runs out of capacity and
1:c2ecfe7:  * throws BufferOverflowException instead.
1:c2ecfe7:  *
1:c2ecfe7:  * This class is completely thread unsafe.
1:c2ecfe7:  */
1:c2ecfe7: public class DataOutputBufferFixed extends DataOutputBuffer
1:c2ecfe7: {
1:c2ecfe7:     public DataOutputBufferFixed()
1:c2ecfe7:     {
1:c2ecfe7:         this(128);
1:c2ecfe7:     }
1:c2ecfe7: 
1:c2ecfe7:     public DataOutputBufferFixed(int size)
1:c2ecfe7:     {
1:dc9ed46:         super(size);
1:c2ecfe7:     }
1:c2ecfe7: 
1:c2ecfe7:     public DataOutputBufferFixed(ByteBuffer buffer)
1:c2ecfe7:     {
1:dc9ed46:         super(buffer);
1:c2ecfe7:     }
1:c2ecfe7: 
1:c2ecfe7:     @Override
1:f7aaea0:     protected void doFlush(int count) throws IOException
1:c2ecfe7:     {
1:c2ecfe7:         throw new BufferOverflowException();
1:c2ecfe7:     }
1:72790dc: 
1:c2ecfe7:     /*
1:c2ecfe7:      * Not currently reachable (all paths hit doFLush first), but in the spirit of things this should throw
1:c2ecfe7:      * if it is called.
1:c2ecfe7:      * @see org.apache.cassandra.io.util.DataOutputBuffer#reallocate(long)
1:c2ecfe7:      */
1:c2ecfe7:     @Override
1:c2ecfe7:     protected void reallocate(long newSize)
1:c2ecfe7:     {
1:c2ecfe7:         throw new BufferOverflowException();
1:c2ecfe7:     }
1:c2ecfe7: 
1:72790dc:     public void clear()
1:72790dc:     {
1:72790dc:         buffer.clear();
1:72790dc:     }
1:c2ecfe7: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
1:         super(size);
1:         super(buffer);
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
0:         super(size, null);
0:         super(buffer, null);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void clear()
1:     {
1:         buffer.clear();
1:     }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:f7aaea0
/////////////////////////////////////////////////////////////////////////
1:     protected void doFlush(int count) throws IOException
commit:c2ecfe7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.IOException;
1: import java.nio.BufferOverflowException;
1: import java.nio.ByteBuffer;
1: 
1: 
1: /**
1:  * An implementation of the DataOutputStream interface using a FastByteArrayOutputStream and exposing
1:  * its buffer so copies can be avoided. This version does not expand if it runs out of capacity and
1:  * throws BufferOverflowException instead.
1:  *
1:  * This class is completely thread unsafe.
1:  */
1: public class DataOutputBufferFixed extends DataOutputBuffer
1: {
1:     public DataOutputBufferFixed()
1:     {
1:         this(128);
1:     }
1: 
1:     public DataOutputBufferFixed(int size)
1:     {
0:         super(ByteBuffer.allocate(size));
1:     }
1: 
1:     public DataOutputBufferFixed(ByteBuffer buffer)
1:     {
0:         super(buffer);
1:     }
1: 
1:     @Override
0:     protected void doFlush() throws IOException
1:     {
1:         throw new BufferOverflowException();
1:     }
1: 
1:     /*
1:      * Not currently reachable (all paths hit doFLush first), but in the spirit of things this should throw
1:      * if it is called.
1:      * @see org.apache.cassandra.io.util.DataOutputBuffer#reallocate(long)
1:      */
1:     @Override
1:     protected void reallocate(long newSize)
1:     {
1:         throw new BufferOverflowException();
1:     }
1: }
============================================================================