1:5a3eb1a: /*
1:5a3eb1a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a3eb1a:  * or more contributor license agreements.  See the NOTICE file
1:5a3eb1a:  * distributed with this work for additional information
1:5a3eb1a:  * regarding copyright ownership.  The ASF licenses this file
1:5a3eb1a:  * to you under the Apache License, Version 2.0 (the
1:5a3eb1a:  * "License"); you may not use this file except in compliance
1:5a3eb1a:  * with the License.  You may obtain a copy of the License at
1:5a3eb1a:  *
1:5a3eb1a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a3eb1a:  *
1:5a3eb1a:  * Unless required by applicable law or agreed to in writing, software
1:5a3eb1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a3eb1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a3eb1a:  * See the License for the specific language governing permissions and
1:5a3eb1a:  * limitations under the License.
1:5a3eb1a:  */
1:5a3eb1a: package org.apache.cassandra.auth;
1:5a3eb1a: 
1:217721a: import java.util.Set;
1:217721a: 
1:5a3eb1a: /**
1:5a3eb1a:  * The interface at the core of Cassandra authorization.
1:5a3eb1a:  *
1:5a3eb1a:  * Represents a resource in the hierarchy.
1:5a3eb1a:  * Currently just one resource type is supported by Cassandra
1:5a3eb1a:  * @see DataResource
1:5a3eb1a:  */
1:5a3eb1a: public interface IResource
1:5a3eb1a: {
1:5a3eb1a:     /**
1:5a3eb1a:      * @return printable name of the resource.
1:5a3eb1a:      */
1:bddfa9e:     String getName();
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Gets next resource in the hierarchy. Call hasParent first to make sure there is one.
1:5a3eb1a:      *
1:5a3eb1a:      * @return Resource parent (or IllegalStateException if there is none). Never a null.
1:5a3eb1a:      */
1:bddfa9e:     IResource getParent();
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Indicates whether or not this resource has a parent in the hierarchy.
1:5a3eb1a:      *
1:5a3eb1a:      * Please perform this check before calling getParent() method.
1:5a3eb1a:      * @return Whether or not the resource has a parent.
1:5a3eb1a:      */
1:bddfa9e:     boolean hasParent();
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * @return Whether or not this resource exists in Cassandra.
1:5a3eb1a:      */
1:bddfa9e:     boolean exists();
1:217721a: 
1:217721a:     /**
1:217721a:      * Returns the set of Permissions that may be applied to this resource
1:217721a:      *
1:217721a:      * Certain permissions are not applicable to particular types of resources.
1:217721a:      * For instance, it makes no sense to talk about CREATE permission on table, or SELECT on a Role.
1:217721a:      * Here we filter a set of permissions depending on the specific resource they're being applied to.
1:217721a:      * This is necessary because the CQL syntax supports ALL as wildcard, but the set of permissions that
1:217721a:      * should resolve to varies by IResource.
1:217721a:      *
1:217721a:      * @return the permissions that may be granted on the specific resource
1:217721a:      */
1:217721a:     Set<Permission> applicablePermissions();
1:5a3eb1a: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns the set of Permissions that may be applied to this resource
1:      *
1:      * Certain permissions are not applicable to particular types of resources.
1:      * For instance, it makes no sense to talk about CREATE permission on table, or SELECT on a Role.
1:      * Here we filter a set of permissions depending on the specific resource they're being applied to.
1:      * This is necessary because the CQL syntax supports ALL as wildcard, but the set of permissions that
1:      * should resolve to varies by IResource.
1:      *
1:      * @return the permissions that may be granted on the specific resource
1:      */
1:     Set<Permission> applicablePermissions();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1:     String getName();
1:     IResource getParent();
/////////////////////////////////////////////////////////////////////////
1:     boolean hasParent();
1:     boolean exists();
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: /**
1:  * The interface at the core of Cassandra authorization.
1:  *
1:  * Represents a resource in the hierarchy.
1:  * Currently just one resource type is supported by Cassandra
1:  * @see DataResource
1:  */
1: public interface IResource
1: {
1:     /**
1:      * @return printable name of the resource.
1:      */
0:     public String getName();
1: 
1:     /**
1:      * Gets next resource in the hierarchy. Call hasParent first to make sure there is one.
1:      *
1:      * @return Resource parent (or IllegalStateException if there is none). Never a null.
1:      */
0:     public IResource getParent();
1: 
1:     /**
1:      * Indicates whether or not this resource has a parent in the hierarchy.
1:      *
1:      * Please perform this check before calling getParent() method.
1:      * @return Whether or not the resource has a parent.
1:      */
0:     public boolean hasParent();
1: 
1:     /**
1:      * @return Whether or not this resource exists in Cassandra.
1:      */
0:     public boolean exists();
1: }
============================================================================