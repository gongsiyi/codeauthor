1:3a044a9: /*
1:3a044a9:  * Licensed to the Apache Software Foundation (ASF) under one
1:3a044a9:  * or more contributor license agreements.  See the NOTICE file
1:3a044a9:  * distributed with this work for additional information
1:3a044a9:  * regarding copyright ownership.  The ASF licenses this file
1:3a044a9:  * to you under the Apache License, Version 2.0 (the
1:3a044a9:  * "License"); you may not use this file except in compliance
1:3a044a9:  * with the License.  You may obtain a copy of the License at
1:3a044a9:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3a044a9:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:3a044a9:  */
1:3a044a9: package org.apache.cassandra.db.marshal;
15:3a044a9: 
1:ad38251: import java.math.BigInteger;
1:e7a385a: import java.nio.ByteBuffer;
1:ab8da95: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.IntegerSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:5e8361b: import org.apache.cassandra.utils.ByteBufferUtil;
1:e7a385a: 
1:5e8361b: public final class IntegerType extends AbstractType<BigInteger>
1:2d95cb4: {
1:3a044a9:     public static final IntegerType instance = new IntegerType();
1:a67f779: 
1:e7a385a:     private static int findMostSignificantByte(ByteBuffer bytes)
1:835669a:     {
1:e7a385a:         int len = bytes.remaining() - 1;
1:3a044a9:         int i = 0;
1:3a044a9:         for (; i < len; i++)
2:ad38251:         {
1:3787d6c:             byte b0 = bytes.get(bytes.position() + i);
1:3a044a9:             if (b0 != 0 && b0 != -1)
1:3a044a9:                 break;
1:3787d6c:             byte b1 = bytes.get(bytes.position() + i + 1);
1:3a044a9:             if (b0 == 0 && b1 != 0)
1:ad38251:             {
1:3a044a9:                 if (b1 > 0)
1:3a044a9:                     i++;
1:3a044a9:                 break;
1:2d95cb4:             }
1:3a044a9:             if (b0 == -1 && b1 != -1)
1:a67f779:             {
1:3a044a9:                 if (b1 < 0)
1:3a044a9:                     i++;
1:3a044a9:                 break;
1:a67f779:             }
1:835669a:         }
1:3a044a9:         return i;
1:835669a:     }
1:a67f779: 
1:07594ee:     IntegerType() {super(ComparisonType.CUSTOM);}/* singleton */
1:a67f779: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:4df4f79:     {
1:4df4f79:         return true;
1:4df4f79:     }
1:4df4f79: 
1:07594ee:     public int compareCustom(ByteBuffer lhs, ByteBuffer rhs)
1:835669a:     {
1:107545b:         return IntegerType.compareIntegers(lhs, rhs);
1:107545b:     }
1:107545b: 
1:107545b:     public static int compareIntegers(ByteBuffer lhs, ByteBuffer rhs)
1:107545b:     {
1:e7a385a:         int lhsLen = lhs.remaining();
1:e7a385a:         int rhsLen = rhs.remaining();
1:835669a: 
1:3a044a9:         if (lhsLen == 0)
1:3a044a9:             return rhsLen == 0 ? 0 : -1;
1:3a044a9:         if (rhsLen == 0)
1:3a044a9:             return 1;
1:835669a: 
1:3a044a9:         int lhsMsbIdx = findMostSignificantByte(lhs);
1:3a044a9:         int rhsMsbIdx = findMostSignificantByte(rhs);
1:835669a: 
1:3a044a9:         //diffs contain number of "meaningful" bytes (i.e. ignore padding)
1:3a044a9:         int lhsLenDiff = lhsLen - lhsMsbIdx;
1:3a044a9:         int rhsLenDiff = rhsLen - rhsMsbIdx;
1:835669a: 
1:3787d6c:         byte lhsMsb = lhs.get(lhs.position() + lhsMsbIdx);
1:3787d6c:         byte rhsMsb = rhs.get(rhs.position() + rhsMsbIdx);
1:835669a: 
1:3a044a9:         /*         +    -
1:3a044a9:          *      -----------
1:3a044a9:          *    + | -d |  1 |
1:3a044a9:          * LHS  -----------
1:3a044a9:          *    - | -1 |  d |
1:3a044a9:          *      -----------
1:3a044a9:          *          RHS
1:3a044a9:          *
1:3a044a9:          * d = difference of length in significant bytes
1:3a044a9:          */
1:3a044a9:         if (lhsLenDiff != rhsLenDiff)
1:835669a:         {
1:3a044a9:             if (lhsMsb < 0)
1:3a044a9:                 return rhsMsb < 0 ? rhsLenDiff - lhsLenDiff : -1;
1:3a044a9:             if (rhsMsb < 0)
1:3a044a9:                 return 1;
1:3a044a9:             return lhsLenDiff - rhsLenDiff;
1:835669a:         }
1:2d95cb4: 
1:3a044a9:         // msb uses signed comparison
1:3a044a9:         if (lhsMsb != rhsMsb)
1:3a044a9:             return lhsMsb - rhsMsb;
1:3a044a9:         lhsMsbIdx++;
1:3a044a9:         rhsMsbIdx++;
1:ad38251: 
1:3a044a9:         // remaining bytes are compared unsigned
1:3a044a9:         while (lhsMsbIdx < lhsLen)
1:835669a:         {
1:3787d6c:             lhsMsb = lhs.get(lhs.position() + lhsMsbIdx++);
1:3787d6c:             rhsMsb = rhs.get(rhs.position() + rhsMsbIdx++);
1:ad38251: 
1:3a044a9:             if (lhsMsb != rhsMsb)
1:3a044a9:                 return (lhsMsb & 0xFF) - (rhsMsb & 0xFF);
1:835669a:         }
1:ad38251: 
1:835669a:         return 0;
1:835669a:     }
1:835669a: 
1:4417e22:     public ByteBuffer fromString(String source) throws MarshalException
1:835669a:     {
1:99661fb:         // Return an empty ByteBuffer for an empty string.
1:99661fb:         if (source.isEmpty())
1:456c989:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:07cdfd0: 
1:ad38251:         BigInteger integerType;
1:2fd3268: 
1:ad38251:         try
1:835669a:         {
1:ad38251:             integerType = new BigInteger(source);
1:835669a:         }
1:ad38251:         catch (Exception e)
1:835669a:         {
1:4417e22:             throw new MarshalException(String.format("unable to make int from '%s'", source), e);
1:835669a:         }
1:99661fb: 
1:2d95cb4:         return decompose(integerType);
2:ad38251:     }
1:835669a: 
1:9da742d:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             return new Constants.Value(getSerializer().serialize(new BigInteger(parsed.toString())));
1:c7b02d1:         }
1:c7b02d1:         catch (NumberFormatException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Value '%s' is not a valid representation of a varint value", parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return getSerializer().deserialize(buffer).toString();
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:9da742d:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:9da742d:     {
1:9da742d:         return this == otherType || Int32Type.instance.isValueCompatibleWith(otherType) || LongType.instance.isValueCompatibleWith(otherType);
1:9da742d:     }
1:9da742d: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.VARINT;
1:a67f779:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<BigInteger> getSerializer()
1:e9c6742:     {
1:e9c6742:         return IntegerSerializer.instance;
1:e9c6742:     }
1:ad38251: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     IntegerType() {super(ComparisonType.CUSTOM);}/* singleton */
1:     public int compareCustom(ByteBuffer lhs, ByteBuffer rhs)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return true;
1:     }
1: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             return new Constants.Value(getSerializer().serialize(new BigInteger(parsed.toString())));
1:         }
1:         catch (NumberFormatException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Value '%s' is not a valid representation of a varint value", parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return getSerializer().deserialize(buffer).toString();
1:     }
1: 
1:     @Override
commit:9da742d
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:     {
1:         return this == otherType || Int32Type.instance.isValueCompatibleWith(otherType) || LongType.instance.isValueCompatibleWith(otherType);
1:     }
1: 
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1:         return IntegerType.compareIntegers(lhs, rhs);
1:     }
1: 
1:     public static int compareIntegers(ByteBuffer lhs, ByteBuffer rhs)
1:     {
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.IntegerSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<BigInteger> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.IntegerSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         return IntegerSerializer.instance.serialize(bytes);
0:         return IntegerSerializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         return IntegerSerializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         IntegerSerializer.instance.validate(bytes);
1: 
0:     @Override
0:     public AbstractSerializer<BigInteger> asComposer()
1:     {
1:         return IntegerSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.cql3.Term;
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.INTEGER);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.VARINT;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:         return JdbcInteger.instance.decompose(value);
commit:2395fb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.term.IntegerTerm;
/////////////////////////////////////////////////////////////////////////
0:         return IntegerTerm.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return IntegerTerm.instance.getString(bytes);
0:         return IntegerTerm.instance.toString(bi);
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
commit:99661fb
/////////////////////////////////////////////////////////////////////////
1:         // Return an empty ByteBuffer for an empty string.
1:         if (source.isEmpty())
0:             return ByteBuffer.allocate(0);
1:         
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.JdbcInteger;
/////////////////////////////////////////////////////////////////////////
0:         return JdbcInteger.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return JdbcInteger.instance.getString(bytes);
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:4629648
/////////////////////////////////////////////////////////////////////////
commit:70c0ed8
commit:ed7f7e8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return new java.math.BigInteger(ByteBufferUtil.getArray(bytes)).toString(10);
commit:835669a
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isSigned()
1:     {
0:         return true;
1:     }
1: 
0:     public boolean isCaseSensitive()
1:     {
0:         return false;
1:     }
1: 
0:     public boolean isCurrency()
1:     {
0:         return false;
1:     }
1: 
0:     public int getPrecision(BigInteger obj)
1:     {
0:         return obj.toString().length();
1:     }
1: 
0:     public int getScale(BigInteger obj)
1:     {
1:         return 0;
1:     }
1: 
0:     public int getJdbcType()
1:     {
0:         return Types.BIGINT;
1:     }
1: 
0:     public boolean needsQuotes()
1:     {
0:         return false;
1:     }
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer decompose(BigInteger value)
1:     {
0:         return ByteBuffer.wrap(value.toByteArray());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return decompose(integerType);
commit:3c93525
/////////////////////////////////////////////////////////////////////////
commit:456c989
/////////////////////////////////////////////////////////////////////////
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
commit:5e75a7f
/////////////////////////////////////////////////////////////////////////
commit:ad38251
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigInteger;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ByteBuffer fromString(String source)
1:     {
1:         BigInteger integerType;
1: 
1:         try
1:         {
1:             integerType = new BigInteger(source);
1:         }
1:         catch (Exception e)
1:         {
0:             throw new RuntimeException("'" + source + "' could not be translated into an IntegerType.");
1:         }
1: 
0:         return ByteBuffer.wrap(integerType.toByteArray());
1:     }
commit:ab8da95
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.TBaseHelper;
1: 
/////////////////////////////////////////////////////////////////////////
0:         return new java.math.BigInteger(TBaseHelper.byteBufferToByteArray(bytes)).toString(10);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
1:     private static int findMostSignificantByte(ByteBuffer bytes)
1:         int len = bytes.remaining() - 1;
0:             byte b0 = bytes.array()[bytes.position()+bytes.arrayOffset()+i];
0:             byte b1 = bytes.array()[bytes.position()+bytes.arrayOffset()+ i + 1];
/////////////////////////////////////////////////////////////////////////
0:     public int compare(ByteBuffer lhs, ByteBuffer rhs)
1:         int lhsLen = lhs.remaining();
1:         int rhsLen = rhs.remaining();
/////////////////////////////////////////////////////////////////////////
0:         byte lhsMsb = lhs.array()[lhs.position()+lhs.arrayOffset()+lhsMsbIdx];
0:         byte rhsMsb = rhs.array()[rhs.position()+rhs.arrayOffset()+rhsMsbIdx];
/////////////////////////////////////////////////////////////////////////
0:             lhsMsb = lhs.array()[lhs.position()+lhs.arrayOffset()+lhsMsbIdx++];
0:             rhsMsb = rhs.array()[rhs.position()+rhs.arrayOffset()+rhsMsbIdx++];
/////////////////////////////////////////////////////////////////////////
0:     public String getString(ByteBuffer bytes)
0:         if (bytes.remaining() == 0)
0:         return new java.math.BigInteger(bytes.array()).toString(10);
commit:3a044a9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.cassandra.db.marshal;
1: 
0: public final class IntegerType extends AbstractType
0: {
1:     public static final IntegerType instance = new IntegerType();
1: 
0:     private static int findMostSignificantByte(byte[] bytes)
0:     {
0:         int len = bytes.length - 1;
1:         int i = 0;
1:         for (; i < len; i++)
0:         {
0:             byte b0 = bytes[i];
1:             if (b0 != 0 && b0 != -1)
1:                 break;
0:             byte b1 = bytes[i + 1];
1:             if (b0 == 0 && b1 != 0)
0:             {
1:                 if (b1 > 0)
1:                     i++;
1:                 break;
0:             }
1:             if (b0 == -1 && b1 != -1)
0:             {
1:                 if (b1 < 0)
1:                     i++;
1:                 break;
0:             }
0:         }
1:         return i;
0:     }
1: 
0:     IntegerType() {/* singleton */}
1: 
0:     public int compare(byte[] lhs, byte[] rhs)
0:     {
0:         int lhsLen = lhs.length;
0:         int rhsLen = rhs.length;
1: 
1:         if (lhsLen == 0)
1:             return rhsLen == 0 ? 0 : -1;
1:         if (rhsLen == 0)
1:             return 1;
1: 
1:         int lhsMsbIdx = findMostSignificantByte(lhs);
1:         int rhsMsbIdx = findMostSignificantByte(rhs);
1: 
1:         //diffs contain number of "meaningful" bytes (i.e. ignore padding)
1:         int lhsLenDiff = lhsLen - lhsMsbIdx;
1:         int rhsLenDiff = rhsLen - rhsMsbIdx;
1: 
0:         byte lhsMsb = lhs[lhsMsbIdx];
0:         byte rhsMsb = rhs[rhsMsbIdx];
1: 
1:         /*         +    -
1:          *      -----------
1:          *    + | -d |  1 |
1:          * LHS  -----------
1:          *    - | -1 |  d |
1:          *      -----------
1:          *          RHS
1:          *
1:          * d = difference of length in significant bytes
1:          */
1:         if (lhsLenDiff != rhsLenDiff)
0:         {
1:             if (lhsMsb < 0)
1:                 return rhsMsb < 0 ? rhsLenDiff - lhsLenDiff : -1;
1:             if (rhsMsb < 0)
1:                 return 1;
1:             return lhsLenDiff - rhsLenDiff;
0:         }
1: 
1:         // msb uses signed comparison
1:         if (lhsMsb != rhsMsb)
1:             return lhsMsb - rhsMsb;
1:         lhsMsbIdx++;
1:         rhsMsbIdx++;
1: 
1:         // remaining bytes are compared unsigned
1:         while (lhsMsbIdx < lhsLen)
0:         {
0:             lhsMsb = lhs[lhsMsbIdx++];
0:             rhsMsb = rhs[rhsMsbIdx++];
1:             if (lhsMsb != rhsMsb)
1:                 return (lhsMsb & 0xFF) - (rhsMsb & 0xFF);
0:         }
1: 
0:         return 0;
0:     }
1: 
0:     @Override
0:     public String getString(byte[] bytes)
0:     {
0:         if (bytes == null)
0:             return "null";
0:         if (bytes.length == 0)
0:             return "empty";
1: 
0:         return new java.math.BigInteger(bytes).toString(10);
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:5e8361b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: public final class IntegerType extends AbstractType<BigInteger>
0:     public static IntegerType getInstance()
0:     {
0:         return instance;
0:     }
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:     public BigInteger compose(ByteBuffer bytes)
0:     {
0:         return new BigInteger(ByteBufferUtil.getArray(bytes));
0:     }
0: 
0:     public ByteBuffer decompose(BigInteger value)
0:     {
0:         return ByteBuffer.wrap(value.toByteArray());
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         return decompose(integerType);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
0:     
0:     public String toString(BigInteger bi)
0:     {
0:         return bi.toString();
0:     }
commit:d4c800b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Class<BigInteger> getType()
0:     {
0:         return BigInteger.class;
0:     }
commit:4417e22
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer fromString(String source) throws MarshalException
/////////////////////////////////////////////////////////////////////////
1:             throw new MarshalException(String.format("unable to make int from '%s'", source), e);
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: public final class IntegerType extends AbstractType<BigInteger>
/////////////////////////////////////////////////////////////////////////
0:     public BigInteger compose(ByteBuffer bytes)
0:     {
0:         return new BigInteger(ByteBufferUtil.getArray(bytes));
0:     }
0: 
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         // no invalid integers.
0:     }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
1:             byte b0 = bytes.get(bytes.position() + i);
1:             byte b1 = bytes.get(bytes.position() + i + 1);
/////////////////////////////////////////////////////////////////////////
1:         byte lhsMsb = lhs.get(lhs.position() + lhsMsbIdx);
1:         byte rhsMsb = rhs.get(rhs.position() + rhsMsbIdx);
/////////////////////////////////////////////////////////////////////////
1:             lhsMsb = lhs.get(lhs.position() + lhsMsbIdx++);
1:             rhsMsb = rhs.get(rhs.position() + rhsMsbIdx++);
0: 
============================================================================