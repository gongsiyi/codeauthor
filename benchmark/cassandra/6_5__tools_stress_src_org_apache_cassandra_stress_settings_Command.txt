1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
1:92381fd: 
1:6c579a0: import java.util.ArrayList;
1:6c579a0: import java.util.HashMap;
1:6c579a0: import java.util.List;
1:6c579a0: import java.util.Map;
2:2e1e98a: 
1:92381fd: import com.google.common.collect.ImmutableList;
1:2e1e98a: 
1:2e1e98a: public enum Command
1:2e1e98a: {
1:2e1e98a: 
1:6bbfb55:     READ(false, "standard1",
1:2e1e98a:             "Multiple concurrent reads - the cluster must first be populated by a write test",
2:2e1e98a:             CommandCategory.BASIC
4:2e1e98a:     ),
1:6bbfb55:     WRITE(true, "standard1",
1:2e1e98a:             "insert",
1:2e1e98a:             "Multiple concurrent writes against the cluster",
1:3e2c610:             CommandCategory.BASIC
1:2e1e98a:     ),
1:6bbfb55:     MIXED(true, null,
1:2e1e98a:             "Interleaving of any basic commands, with configurable ratio and distribution - the cluster must first be populated by a write test",
1:2e1e98a:             CommandCategory.MIXED
1:2e1e98a:     ),
1:6bbfb55:     COUNTER_WRITE(true, "counter1",
1:2e1e98a:             "counter_add",
1:2e1e98a:             "Multiple concurrent updates of counters.",
1:2e1e98a:             CommandCategory.BASIC
1:2e1e98a:     ),
1:6bbfb55:     COUNTER_READ(false, "counter1",
1:2e1e98a:             "counter_get",
1:2e1e98a:             "Multiple concurrent reads of counters. The cluster must first be populated by a counterwrite test.",
1:2e1e98a:             CommandCategory.BASIC
1:2e1e98a:     ),
1:6bbfb55:     USER(true, null,
1:7536429:           "Interleaving of user provided queries, with configurable ratio and distribution",
1:7536429:           CommandCategory.USER
1:7536429:     ),
1:2e1e98a: 
1:6bbfb55:     HELP(false, null, "-?", "Print help for a command or option", null),
1:6bbfb55:     PRINT(false, null, "Inspect the output of a distribution definition", null),
1:eaf4b91:     LEGACY(false, null, "Legacy support mode", null),
1:eaf4b91:     VERSION(false, null, "Print the version of cassandra stress", null)
1:2e1e98a:     ;
1:2e1e98a: 
1:2e1e98a:     private static final Map<String, Command> LOOKUP;
1:2e1e98a:     static
1:2e1e98a:     {
1:2e1e98a:         final Map<String, Command> lookup = new HashMap<>();
1:2e1e98a:         for (Command cmd : values())
1:2e1e98a:         {
1:92381fd:             for (String name : cmd.names)
1:92381fd:                 lookup.put(name, cmd);
2:2e1e98a:         }
1:2e1e98a:         LOOKUP = lookup;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static Command get(String command)
1:2e1e98a:     {
1:2e1e98a:         return LOOKUP.get(command.toLowerCase());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public final boolean updates;
1:2e1e98a:     public final CommandCategory category;
1:92381fd:     public final List<String> names;
1:2e1e98a:     public final String description;
1:3e2c610:     public final String table;
1:3e2c610: 
1:6bbfb55:     Command(boolean updates, String table, String description, CommandCategory category)
1:2e1e98a:     {
1:6bbfb55:         this(updates, table, null, description, category);
1:2e1e98a:     }
1:2e1e98a: 
1:6bbfb55:     Command(boolean updates, String table, String extra, String description, CommandCategory category)
1:2e1e98a:     {
1:3e2c610:         this.table = table;
1:2e1e98a:         this.updates = updates;
1:2e1e98a:         this.category = category;
1:92381fd:         List<String> names = new ArrayList<>();
1:92381fd:         names.add(this.toString().toLowerCase());
1:92381fd:         names.add(this.toString().replaceAll("_", "").toLowerCase());
1:92381fd:         if (extra != null)
1:92381fd:         {
1:92381fd:             names.add(extra.toLowerCase());
1:92381fd:             names.add(extra.replaceAll("_", "").toLowerCase());
1:92381fd:         }
1:92381fd:         this.names = ImmutableList.copyOf(names);
1:2e1e98a:         this.description = description;
1:2e1e98a:     }
1:3e2c610: 
1:2e1e98a:     public void printHelp()
1:2e1e98a:     {
1:3e2c610:         helpPrinter().run();
1:2e1e98a:     }
1:2e1e98a: 
1:3e2c610:     public final Runnable helpPrinter()
1:3e2c610:     {
1:3e2c610:         switch (this)
1:3e2c610:         {
1:3e2c610:             case PRINT:
1:3e2c610:                 return SettingsMisc.printHelpPrinter();
1:3e2c610:             case HELP:
1:3e2c610:                 return SettingsMisc.helpHelpPrinter();
1:3e2c610:             case LEGACY:
1:3e2c610:                 return Legacy.helpPrinter();
1:3e2c610:         }
1:3e2c610:         switch (category)
1:3e2c610:         {
1:7536429:             case USER:
1:7536429:                 return SettingsCommandUser.helpPrinter();
1:3e2c610:             case BASIC:
1:7536429:                 return SettingsCommandPreDefined.helpPrinter(this);
1:3e2c610:             case MIXED:
1:7536429:                 return SettingsCommandPreDefinedMixed.helpPrinter();
1:3e2c610:         }
1:3e2c610:         throw new AssertionError();
1:3e2c610:     }
1:3e2c610: 
1:3e2c610: }
============================================================================
author:Chris Batey
-------------------------------------------------------------------------------
commit:eaf4b91
/////////////////////////////////////////////////////////////////////////
1:     LEGACY(false, null, "Legacy support mode", null),
1:     VERSION(false, null, "Print the version of cassandra stress", null)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
1:     READ(false, "standard1",
1:     WRITE(true, "standard1",
1:     MIXED(true, null,
1:     COUNTER_WRITE(true, "counter1",
1:     COUNTER_READ(false, "counter1",
1:     USER(true, null,
1:     HELP(false, null, "-?", "Print help for a command or option", null),
1:     PRINT(false, null, "Inspect the output of a distribution definition", null),
0:     LEGACY(false, null, "Legacy support mode", null)
/////////////////////////////////////////////////////////////////////////
1:     Command(boolean updates, String table, String description, CommandCategory category)
1:         this(updates, table, null, description, category);
1:     Command(boolean updates, String table, String extra, String description, CommandCategory category)
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
commit:7536429
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     USER(true, null, null,
1:           "Interleaving of user provided queries, with configurable ratio and distribution",
1:           CommandCategory.USER
1:     ),
/////////////////////////////////////////////////////////////////////////
1:             case USER:
1:                 return SettingsCommandUser.helpPrinter();
1:                 return SettingsCommandPreDefined.helpPrinter(this);
1:                 return SettingsCommandPreDefinedMixed.helpPrinter();
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:f0767fd
/////////////////////////////////////////////////////////////////////////
0:     READ(false, "standard1", "Super1",
0:     WRITE(true, "standard1", "Super1",
/////////////////////////////////////////////////////////////////////////
0:     COUNTER_WRITE(true, "counter1", "SuperCounter1",
0:     COUNTER_READ(false, "counter1", "SuperCounter1",
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:92381fd
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
1: 
1: import com.google.common.collect.ImmutableList;
/////////////////////////////////////////////////////////////////////////
0:     RANGE_SLICE(false, "Standard1", "Super1",
0:     INDEXED_RANGE_SLICE(false, "Standard1", "Super1",
0:     READ_MULTI(false, "Standard1", "Super1",
0:     COUNTER_WRITE(true, "Counter1", "SuperCounter1",
0:     COUNTER_READ(false, "Counter1", "SuperCounter1",
/////////////////////////////////////////////////////////////////////////
1:             for (String name : cmd.names)
1:                 lookup.put(name, cmd);
/////////////////////////////////////////////////////////////////////////
1:     public final List<String> names;
/////////////////////////////////////////////////////////////////////////
1:         List<String> names = new ArrayList<>();
1:         names.add(this.toString().toLowerCase());
1:         names.add(this.toString().replaceAll("_", "").toLowerCase());
1:         if (extra != null)
1:         {
1:             names.add(extra.toLowerCase());
1:             names.add(extra.replaceAll("_", "").toLowerCase());
1:         }
1:         this.names = ImmutableList.copyOf(names);
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
0:     READ(false, "Standard1", "Super1",
0:     WRITE(true, "Standard1", "Super1",
0:     MIXED(true, null, null,
0:     RANGESLICE(false, "Standard1", "Super1",
0:     IRANGESLICE(false, "Standard1", "Super1",
1:             CommandCategory.BASIC
0:     READMULTI(false, "Standard1", "Super1",
0:     COUNTERWRITE(true, "Counter1", "SuperCounter1",
0:     COUNTERREAD(false, "Counter1", "SuperCounter1",
0:     HELP(false, null, null, "-?", "Print help for a command or option", null),
0:     PRINT(false, null, null, "Inspect the output of a distribution definition", null),
0:     LEGACY(false, null, null, "Legacy support mode", null)
/////////////////////////////////////////////////////////////////////////
1:     public final String table;
0:     public final String supertable;
0:     Command(boolean updates, String table, String supertable, String description, CommandCategory category)
0:         this(updates, table, supertable, null, description, category);
1: 
0:     Command(boolean updates, String table, String supertable, String extra, String description, CommandCategory category)
1:         this.table = table;
0:         this.supertable = supertable;
1: 
1:         helpPrinter().run();
1:     public final Runnable helpPrinter()
1:     {
1:         switch (this)
1:         {
1:             case PRINT:
1:                 return SettingsMisc.printHelpPrinter();
1:             case HELP:
1:                 return SettingsMisc.helpHelpPrinter();
1:             case LEGACY:
1:                 return Legacy.helpPrinter();
1:         }
1:         switch (category)
1:         {
1:             case BASIC:
0:             case MULTI:
0:                 return SettingsCommand.helpPrinter(this);
1:             case MIXED:
0:                 return SettingsCommandMixed.helpPrinter();
1:         }
1:         throw new AssertionError();
1:     }
1: 
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
0: import java.util.HashMap;
0: import java.util.Map;
1: 
1: public enum Command
1: {
1: 
0:     READ(false,
0:             SettingsCommand.helpPrinter("read"),
1:             "Multiple concurrent reads - the cluster must first be populated by a write test",
1:             CommandCategory.BASIC
1:     ),
0:     WRITE(true,
0:             SettingsCommand.helpPrinter("write"),
1:             "insert",
1:             "Multiple concurrent writes against the cluster",
1:             CommandCategory.BASIC
1:     ),
0:     MIXED(true,
0:             SettingsCommandMixed.helpPrinter(),
1:             "Interleaving of any basic commands, with configurable ratio and distribution - the cluster must first be populated by a write test",
1:             CommandCategory.MIXED
1:     ),
0:     RANGESLICE(false,
0:             SettingsCommandMulti.helpPrinter("range_slice"),
0:             "Range slice queries - the cluster must first be populated by a write test",
0:             CommandCategory.MULTI
1:     ),
0:     IRANGESLICE(false,
0:             SettingsCommandMulti.helpPrinter("indexed_range_slice"),
0:             "Range slice queries through a secondary index. The cluster must first be populated by a write test, with indexing enabled.",
0:             CommandCategory.MULTI
1:     ),
0:     READMULTI(false,
0:             SettingsCommandMulti.helpPrinter("readmulti"),
0:             "multi_read",
0:             "Multiple concurrent reads fetching multiple rows at once. The cluster must first be populated by a write test.",
0:             CommandCategory.MULTI
1:     ),
0:     COUNTERWRITE(true,
0:             SettingsCommand.helpPrinter("counteradd"),
1:             "counter_add",
1:             "Multiple concurrent updates of counters.",
1:             CommandCategory.BASIC
1:     ),
0:     COUNTERREAD(false,
0:             SettingsCommand.helpPrinter("counterread"),
1:             "counter_get",
1:             "Multiple concurrent reads of counters. The cluster must first be populated by a counterwrite test.",
1:             CommandCategory.BASIC
1:     ),
1: 
0:     HELP(false, SettingsMisc.helpHelpPrinter(), "-?", "Print help for a command or option", null),
0:     PRINT(false, SettingsMisc.printHelpPrinter(), "Inspect the output of a distribution definition", null),
0:     LEGACY(false, Legacy.helpPrinter(), "Legacy support mode", null)
1: 
1:     ;
1: 
1:     private static final Map<String, Command> LOOKUP;
1:     static
1:     {
1:         final Map<String, Command> lookup = new HashMap<>();
1:         for (Command cmd : values())
1:         {
0:             lookup.put(cmd.toString().toLowerCase(), cmd);
0:             if (cmd.extraName != null)
0:                 lookup.put(cmd.extraName, cmd);
1:         }
1:         LOOKUP = lookup;
1:     }
1: 
1:     public static Command get(String command)
1:     {
1:         return LOOKUP.get(command.toLowerCase());
1:     }
1: 
1:     public final boolean updates;
1:     public final CommandCategory category;
0:     public final String extraName;
1:     public final String description;
0:     public final Runnable helpPrinter;
1: 
0:     Command(boolean updates, Runnable helpPrinter, String description, CommandCategory category)
1:     {
0:         this(updates, helpPrinter, null, description, category);
1:     }
0:     Command(boolean updates, Runnable helpPrinter, String extra, String description, CommandCategory category)
1:     {
1:         this.updates = updates;
1:         this.category = category;
0:         this.helpPrinter = helpPrinter;
0:         this.extraName = extra;
1:         this.description = description;
1:     }
1:     public void printHelp()
1:     {
0:         helpPrinter.run();
1:     }
1: 
1: }
============================================================================