1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming;
1:5151169: 
1:5151169: import java.io.Serializable;
1:5151169: import java.net.InetAddress;
1:5151169: import java.util.Collection;
1:5151169: import java.util.Map;
1:468cc72: import java.util.concurrent.ConcurrentHashMap;
1:5151169: 
1:5151169: import com.google.common.base.Predicate;
1:5151169: import com.google.common.collect.ImmutableSet;
1:5151169: import com.google.common.collect.Iterables;
1:5151169: 
1:5151169: /**
1:5151169:  * Stream session info.
1:5151169:  */
1:5151169: public final class SessionInfo implements Serializable
1:5151169: {
1:5151169:     public final InetAddress peer;
1:44fa2cd:     public final int sessionIndex;
1:c6867c2:     public final InetAddress connecting;
1:5151169:     /** Immutable collection of receiving summaries */
1:5151169:     public final Collection<StreamSummary> receivingSummaries;
1:5151169:     /** Immutable collection of sending summaries*/
1:5151169:     public final Collection<StreamSummary> sendingSummaries;
1:5151169:     /** Current session state */
1:5151169:     public final StreamSession.State state;
1:5151169: 
1:5151169:     private final Map<String, ProgressInfo> receivingFiles;
1:5151169:     private final Map<String, ProgressInfo> sendingFiles;
1:5151169: 
1:5151169:     public SessionInfo(InetAddress peer,
1:44fa2cd:                        int sessionIndex,
1:c6867c2:                        InetAddress connecting,
1:5151169:                        Collection<StreamSummary> receivingSummaries,
1:5151169:                        Collection<StreamSummary> sendingSummaries,
1:5151169:                        StreamSession.State state)
1:5151169:     {
1:5151169:         this.peer = peer;
1:44fa2cd:         this.sessionIndex = sessionIndex;
1:c6867c2:         this.connecting = connecting;
1:5151169:         this.receivingSummaries = ImmutableSet.copyOf(receivingSummaries);
1:5151169:         this.sendingSummaries = ImmutableSet.copyOf(sendingSummaries);
1:468cc72:         this.receivingFiles = new ConcurrentHashMap<>();
1:468cc72:         this.sendingFiles = new ConcurrentHashMap<>();
1:5151169:         this.state = state;
1:5151169:     }
1:5151169: 
1:5151169:     public boolean isFailed()
1:5151169:     {
1:5151169:         return state == StreamSession.State.FAILED;
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * Update progress of receiving/sending file.
1:5151169:      *
1:5151169:      * @param newProgress new progress info
1:5151169:      */
1:468cc72:     public void updateProgress(ProgressInfo newProgress)
1:5151169:     {
1:5151169:         assert peer.equals(newProgress.peer);
1:5151169: 
1:5151169:         Map<String, ProgressInfo> currentFiles = newProgress.direction == ProgressInfo.Direction.IN
1:5151169:                                                     ? receivingFiles : sendingFiles;
1:5151169:         currentFiles.put(newProgress.fileName, newProgress);
1:5151169:     }
1:5151169: 
1:5151169:     public Collection<ProgressInfo> getReceivingFiles()
1:5151169:     {
1:5151169:         return receivingFiles.values();
1:5151169:     }
1:5151169: 
1:5151169:     public Collection<ProgressInfo> getSendingFiles()
1:5151169:     {
1:5151169:         return sendingFiles.values();
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total number of files already received.
1:5151169:      */
1:5151169:     public long getTotalFilesReceived()
1:5151169:     {
1:5151169:         return getTotalFilesCompleted(receivingFiles.values());
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total number of files already sent.
1:5151169:      */
1:5151169:     public long getTotalFilesSent()
1:5151169:     {
1:5151169:         return getTotalFilesCompleted(sendingFiles.values());
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total size(in bytes) already received.
1:5151169:      */
1:5151169:     public long getTotalSizeReceived()
1:5151169:     {
1:5151169:         return getTotalSizeInProgress(receivingFiles.values());
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total size(in bytes) already sent.
1:5151169:      */
1:5151169:     public long getTotalSizeSent()
1:5151169:     {
1:5151169:         return getTotalSizeInProgress(sendingFiles.values());
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total number of files to receive in the session
1:5151169:      */
1:5151169:     public long getTotalFilesToReceive()
1:5151169:     {
1:5151169:         return getTotalFiles(receivingSummaries);
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total number of files to send in the session
1:5151169:      */
1:5151169:     public long getTotalFilesToSend()
1:5151169:     {
1:5151169:         return getTotalFiles(sendingSummaries);
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total size(in bytes) to receive in the session
1:5151169:      */
1:5151169:     public long getTotalSizeToReceive()
1:5151169:     {
1:5151169:         return getTotalSizes(receivingSummaries);
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total size(in bytes) to send in the session
1:5151169:      */
1:5151169:     public long getTotalSizeToSend()
1:5151169:     {
1:5151169:         return getTotalSizes(sendingSummaries);
1:5151169:     }
1:5151169: 
1:5151169:     private long getTotalSizeInProgress(Collection<ProgressInfo> files)
1:5151169:     {
1:5151169:         long total = 0;
1:5151169:         for (ProgressInfo file : files)
1:5151169:             total += file.currentBytes;
1:5151169:         return total;
1:5151169:     }
1:5151169: 
1:5151169:     private long getTotalFiles(Collection<StreamSummary> summaries)
1:5151169:     {
1:5151169:         long total = 0;
1:5151169:         for (StreamSummary summary : summaries)
1:5151169:             total += summary.files;
1:5151169:         return total;
1:5151169:     }
1:5151169: 
1:5151169:     private long getTotalSizes(Collection<StreamSummary> summaries)
1:5151169:     {
1:5151169:         long total = 0;
1:5151169:         for (StreamSummary summary : summaries)
1:5151169:             total += summary.totalSize;
1:5151169:         return total;
1:5151169:     }
1:5151169: 
1:5151169:     private long getTotalFilesCompleted(Collection<ProgressInfo> files)
1:5151169:     {
1:5151169:         Iterable<ProgressInfo> completed = Iterables.filter(files, new Predicate<ProgressInfo>()
1:5151169:         {
1:5151169:             public boolean apply(ProgressInfo input)
1:5151169:             {
1:5151169:                 return input.isCompleted();
1:5151169:             }
1:5151169:         });
1:5151169:         return Iterables.size(completed);
1:5151169:     }
1:5151169: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:6cca24f
commit:c6867c2
/////////////////////////////////////////////////////////////////////////
1:     public final InetAddress connecting;
/////////////////////////////////////////////////////////////////////////
1:                        InetAddress connecting,
1:         this.connecting = connecting;
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming;
1: 
1: import java.io.Serializable;
1: import java.net.InetAddress;
1: import java.util.Collection;
0: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import com.google.common.base.Predicate;
1: import com.google.common.collect.ImmutableSet;
1: import com.google.common.collect.Iterables;
1: 
1: /**
1:  * Stream session info.
1:  */
1: public final class SessionInfo implements Serializable
1: {
1:     public final InetAddress peer;
1:     /** Immutable collection of receiving summaries */
1:     public final Collection<StreamSummary> receivingSummaries;
1:     /** Immutable collection of sending summaries*/
1:     public final Collection<StreamSummary> sendingSummaries;
1:     /** Current session state */
1:     public final StreamSession.State state;
1: 
1:     private final Map<String, ProgressInfo> receivingFiles;
1:     private final Map<String, ProgressInfo> sendingFiles;
1: 
1:     public SessionInfo(InetAddress peer,
1:                        Collection<StreamSummary> receivingSummaries,
1:                        Collection<StreamSummary> sendingSummaries,
1:                        StreamSession.State state)
1:     {
1:         this.peer = peer;
1:         this.receivingSummaries = ImmutableSet.copyOf(receivingSummaries);
1:         this.sendingSummaries = ImmutableSet.copyOf(sendingSummaries);
0:         this.receivingFiles = new HashMap<>();
0:         this.sendingFiles = new HashMap<>();
1:         this.state = state;
1:     }
1: 
1:     public boolean isFailed()
1:     {
1:         return state == StreamSession.State.FAILED;
1:     }
1: 
1:     /**
1:      * Update progress of receiving/sending file.
1:      *
1:      * @param newProgress new progress info
1:      */
0:     public synchronized void updateProgress(ProgressInfo newProgress)
1:     {
1:         assert peer.equals(newProgress.peer);
1: 
1:         Map<String, ProgressInfo> currentFiles = newProgress.direction == ProgressInfo.Direction.IN
1:                                                     ? receivingFiles : sendingFiles;
1:         currentFiles.put(newProgress.fileName, newProgress);
1:     }
1: 
1:     public Collection<ProgressInfo> getReceivingFiles()
1:     {
1:         return receivingFiles.values();
1:     }
1: 
1:     public Collection<ProgressInfo> getSendingFiles()
1:     {
1:         return sendingFiles.values();
1:     }
1: 
1:     /**
1:      * @return total number of files already received.
1:      */
1:     public long getTotalFilesReceived()
1:     {
1:         return getTotalFilesCompleted(receivingFiles.values());
1:     }
1: 
1:     /**
1:      * @return total number of files already sent.
1:      */
1:     public long getTotalFilesSent()
1:     {
1:         return getTotalFilesCompleted(sendingFiles.values());
1:     }
1: 
1:     /**
1:      * @return total size(in bytes) already received.
1:      */
1:     public long getTotalSizeReceived()
1:     {
1:         return getTotalSizeInProgress(receivingFiles.values());
1:     }
1: 
1:     /**
1:      * @return total size(in bytes) already sent.
1:      */
1:     public long getTotalSizeSent()
1:     {
1:         return getTotalSizeInProgress(sendingFiles.values());
1:     }
1: 
1:     /**
1:      * @return total number of files to receive in the session
1:      */
1:     public long getTotalFilesToReceive()
1:     {
1:         return getTotalFiles(receivingSummaries);
1:     }
1: 
1:     /**
1:      * @return total number of files to send in the session
1:      */
1:     public long getTotalFilesToSend()
1:     {
1:         return getTotalFiles(sendingSummaries);
1:     }
1: 
1:     /**
1:      * @return total size(in bytes) to receive in the session
1:      */
1:     public long getTotalSizeToReceive()
1:     {
1:         return getTotalSizes(receivingSummaries);
1:     }
1: 
1:     /**
1:      * @return total size(in bytes) to send in the session
1:      */
1:     public long getTotalSizeToSend()
1:     {
1:         return getTotalSizes(sendingSummaries);
1:     }
1: 
1:     private long getTotalSizeInProgress(Collection<ProgressInfo> files)
1:     {
1:         long total = 0;
1:         for (ProgressInfo file : files)
1:             total += file.currentBytes;
1:         return total;
1:     }
1: 
1:     private long getTotalFiles(Collection<StreamSummary> summaries)
1:     {
1:         long total = 0;
1:         for (StreamSummary summary : summaries)
1:             total += summary.files;
1:         return total;
1:     }
1: 
1:     private long getTotalSizes(Collection<StreamSummary> summaries)
1:     {
1:         long total = 0;
1:         for (StreamSummary summary : summaries)
1:             total += summary.totalSize;
1:         return total;
1:     }
1: 
1:     private long getTotalFilesCompleted(Collection<ProgressInfo> files)
1:     {
1:         Iterable<ProgressInfo> completed = Iterables.filter(files, new Predicate<ProgressInfo>()
1:         {
1:             public boolean apply(ProgressInfo input)
1:             {
1:                 return input.isCompleted();
1:             }
1:         });
1:         return Iterables.size(completed);
1:     }
1: }
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:44fa2cd
/////////////////////////////////////////////////////////////////////////
1:     public final int sessionIndex;
/////////////////////////////////////////////////////////////////////////
1:                        int sessionIndex,
1:         this.sessionIndex = sessionIndex;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:468cc72
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1:         this.receivingFiles = new ConcurrentHashMap<>();
1:         this.sendingFiles = new ConcurrentHashMap<>();
/////////////////////////////////////////////////////////////////////////
1:     public void updateProgress(ProgressInfo newProgress)
============================================================================