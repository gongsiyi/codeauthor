1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
2:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.util.*;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.marshal.*;
1:a991b64: import org.apache.cassandra.utils.ByteBufferUtil;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Small utility methods pertaining to the encoding of COMPACT STORAGE tables.
1:a991b64:  *
1:a991b64:  * COMPACT STORAGE tables exists mainly for the sake of encoding internally thrift tables (as well as
1:a991b64:  * exposing those tables through CQL). Note that due to these constraints, the internal representation
1:a991b64:  * of compact tables does *not* correspond exactly to their CQL definition.
1:a991b64:  *
1:a991b64:  * The internal layout of such tables is such that it can encode any thrift table. That layout is as follow:
1:a991b64:  *   CREATE TABLE compact (
1:a991b64:  *      key [key_validation_class],
1:a991b64:  *      [column_metadata_1] [type1] static,
1:a991b64:  *      ...,
1:a991b64:  *      [column_metadata_n] [type1] static,
1:a991b64:  *      column [comparator],
1:a991b64:  *      value [default_validation_class]
1:a991b64:  *      PRIMARY KEY (key, column)
1:a991b64:  *   )
1:a991b64:  * More specifically, the table:
1:a991b64:  *  - always has a clustering column and a regular value, which are used to store the "dynamic" thrift columns name and value.
1:a991b64:  *    Those are always present because we have no way to know in advance if "dynamic" columns will be inserted or not. Note
1:a991b64:  *    that when declared from CQL, compact tables may not have any clustering: in that case, we still have a clustering
1:a991b64:  *    defined internally, it is just ignored as far as interacting from CQL is concerned.
1:a991b64:  *  - have a static column for every "static" column defined in the thrift "column_metadata". Note that when declaring a compact
1:a991b64:  *    table from CQL without any clustering (but some non-PK columns), the columns ends up static internally even though they are
1:a991b64:  *    not in the declaration
1:a991b64:  *
1:a991b64:  * On variation is that if the table comparator is a CompositeType, then the underlying table will have one clustering column by
1:a991b64:  * element of the CompositeType, but the rest of the layout is as above.
1:a991b64:  *
1:a991b64:  * As far as thrift is concerned, one exception to this is super column families, which have a different layout. Namely, a super
1:a991b64:  * column families is encoded with:
1:6b7db8a:  * {@code
1:a991b64:  *   CREATE TABLE super (
1:a991b64:  *      key [key_validation_class],
1:a991b64:  *      super_column_name [comparator],
1:a991b64:  *      [column_metadata_1] [type1],
1:a991b64:  *      ...,
1:a991b64:  *      [column_metadata_n] [type1],
1:a991b64:  *      "" map<[sub_comparator], [default_validation_class]>
1:a991b64:  *      PRIMARY KEY (key, super_column_name)
1:a991b64:  *   )
1:6b7db8a:  * }
1:a991b64:  * In other words, every super column is encoded by a row. That row has one column for each defined "column_metadata", but it also
1:a991b64:  * has a special map column (whose name is the empty string as this is guaranteed to never conflict with a user-defined
1:a991b64:  * "column_metadata") which stores the super column "dynamic" sub-columns.
1:a991b64:  */
1:a991b64: public abstract class CompactTables
1:a991b64: {
1:a991b64:     // We use an empty value for the 1) this can't conflict with a user-defined column and 2) this actually
1:a991b64:     // validate with any comparator which makes it convenient for columnDefinitionComparator().
1:a991b64:     public static final ByteBuffer SUPER_COLUMN_MAP_COLUMN = ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:a991b64:     public static final String SUPER_COLUMN_MAP_COLUMN_STR = UTF8Type.instance.compose(SUPER_COLUMN_MAP_COLUMN);
1:a991b64: 
1:a991b64:     private CompactTables() {}
1:a991b64: 
1:a991b64:     public static ColumnDefinition getCompactValueColumn(PartitionColumns columns, boolean isSuper)
1:a991b64:     {
2:a991b64:         if (isSuper)
1:a991b64:         {
1:a991b64:             for (ColumnDefinition column : columns.regulars)
1:a991b64:                 if (column.name.bytes.equals(SUPER_COLUMN_MAP_COLUMN))
1:a991b64:                     return column;
1:a991b64:             throw new AssertionError("Invalid super column table definition, no 'dynamic' map column");
1:a991b64:         }
1:a991b64:         assert columns.regulars.simpleColumnCount() == 1 && columns.regulars.complexColumnCount() == 0;
1:a991b64:         return columns.regulars.getSimple(0);
1:a991b64:     }
1:a991b64: 
1:b671522:     public static AbstractType<?> columnDefinitionComparator(String kind, boolean isSuper, AbstractType<?> rawComparator, AbstractType<?> rawSubComparator)
1:a991b64:     {
1:4d7141f:         if (!"regular".equals(kind))
1:b671522:             return UTF8Type.instance;
1:b671522: 
1:4d7141f:         return isSuper ? rawSubComparator : rawComparator;
1:a991b64:     }
1:b671522: 
1:a991b64:     public static boolean hasEmptyCompactValue(CFMetaData metadata)
1:a991b64:     {
1:a991b64:         return metadata.compactValueColumn().type instanceof EmptyType;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static boolean isSuperColumnMapColumn(ColumnDefinition column)
1:a991b64:     {
1:a991b64:         return column.kind == ColumnDefinition.Kind.REGULAR && column.name.bytes.equals(SUPER_COLUMN_MAP_COLUMN);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static DefaultNames defaultNameGenerator(Set<String> usedNames)
1:a991b64:     {
1:a991b64:         return new DefaultNames(new HashSet<String>(usedNames));
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static DefaultNames defaultNameGenerator(Iterable<ColumnDefinition> defs)
1:a991b64:     {
1:a991b64:         Set<String> usedNames = new HashSet<>();
1:a991b64:         for (ColumnDefinition def : defs)
1:a991b64:             usedNames.add(def.name.toString());
1:a991b64:         return new DefaultNames(usedNames);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static class DefaultNames
1:a991b64:     {
1:a991b64:         private static final String DEFAULT_PARTITION_KEY_NAME = "key";
1:a991b64:         private static final String DEFAULT_CLUSTERING_NAME = "column";
1:a991b64:         private static final String DEFAULT_COMPACT_VALUE_NAME = "value";
1:a991b64: 
1:a991b64:         private final Set<String> usedNames;
1:a991b64:         private int partitionIndex = 0;
1:a991b64:         private int clusteringIndex = 1;
1:a991b64:         private int compactIndex = 0;
1:a991b64: 
1:a991b64:         private DefaultNames(Set<String> usedNames)
1:a991b64:         {
1:a991b64:             this.usedNames = usedNames;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public String defaultPartitionKeyName()
1:a991b64:         {
1:a991b64:             while (true)
1:a991b64:             {
1:a991b64:                 // For compatibility sake, we call the first alias 'key' rather than 'key1'. This
1:a991b64:                 // is inconsistent with column alias, but it's probably not worth risking breaking compatibility now.
1:a991b64:                 String candidate = partitionIndex == 0 ? DEFAULT_PARTITION_KEY_NAME : DEFAULT_PARTITION_KEY_NAME + (partitionIndex + 1);
1:a991b64:                 ++partitionIndex;
1:a991b64:                 if (usedNames.add(candidate))
1:a991b64:                     return candidate;
1:a991b64:             }
1:a991b64:         }
1:a991b64: 
1:a991b64:         public String defaultClusteringName()
1:a991b64:         {
1:a991b64:             while (true)
1:a991b64:             {
1:a991b64:                 String candidate = DEFAULT_CLUSTERING_NAME + clusteringIndex;
1:a991b64:                 ++clusteringIndex;
1:a991b64:                 if (usedNames.add(candidate))
1:a991b64:                     return candidate;
1:a991b64:             }
1:a991b64:         }
1:a991b64: 
1:a991b64:         public String defaultCompactValueName()
1:a991b64:         {
1:a991b64:             while (true)
1:a991b64:             {
1:a991b64:                 String candidate = compactIndex == 0 ? DEFAULT_COMPACT_VALUE_NAME : DEFAULT_COMPACT_VALUE_NAME + compactIndex;
1:a991b64:                 ++compactIndex;
1:a991b64:                 if (usedNames.add(candidate))
1:a991b64:                     return candidate;
1:a991b64:             }
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:371a147
commit:4d7141f
/////////////////////////////////////////////////////////////////////////
1:         if (!"regular".equals(kind))
1:         return isSuper ? rawSubComparator : rawComparator;
commit:fb781c9
commit:b671522
/////////////////////////////////////////////////////////////////////////
1:     public static AbstractType<?> columnDefinitionComparator(String kind, boolean isSuper, AbstractType<?> rawComparator, AbstractType<?> rawSubComparator)
0:         if ("compact_value".equals(kind))
1:             return UTF8Type.instance;
1: 
0:             return "regular".equals(kind) ? rawSubComparator : UTF8Type.instance;
1: 
0:         return "static".equals(kind) ? rawComparator : UTF8Type.instance;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:  * {@code
/////////////////////////////////////////////////////////////////////////
1:  * }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * Small utility methods pertaining to the encoding of COMPACT STORAGE tables.
1:  *
1:  * COMPACT STORAGE tables exists mainly for the sake of encoding internally thrift tables (as well as
1:  * exposing those tables through CQL). Note that due to these constraints, the internal representation
1:  * of compact tables does *not* correspond exactly to their CQL definition.
1:  *
1:  * The internal layout of such tables is such that it can encode any thrift table. That layout is as follow:
1:  *   CREATE TABLE compact (
1:  *      key [key_validation_class],
1:  *      [column_metadata_1] [type1] static,
1:  *      ...,
1:  *      [column_metadata_n] [type1] static,
1:  *      column [comparator],
1:  *      value [default_validation_class]
1:  *      PRIMARY KEY (key, column)
1:  *   )
1:  * More specifically, the table:
1:  *  - always has a clustering column and a regular value, which are used to store the "dynamic" thrift columns name and value.
1:  *    Those are always present because we have no way to know in advance if "dynamic" columns will be inserted or not. Note
1:  *    that when declared from CQL, compact tables may not have any clustering: in that case, we still have a clustering
1:  *    defined internally, it is just ignored as far as interacting from CQL is concerned.
1:  *  - have a static column for every "static" column defined in the thrift "column_metadata". Note that when declaring a compact
1:  *    table from CQL without any clustering (but some non-PK columns), the columns ends up static internally even though they are
1:  *    not in the declaration
1:  *
1:  * On variation is that if the table comparator is a CompositeType, then the underlying table will have one clustering column by
1:  * element of the CompositeType, but the rest of the layout is as above.
1:  *
1:  * As far as thrift is concerned, one exception to this is super column families, which have a different layout. Namely, a super
1:  * column families is encoded with:
1:  *   CREATE TABLE super (
1:  *      key [key_validation_class],
1:  *      super_column_name [comparator],
1:  *      [column_metadata_1] [type1],
1:  *      ...,
1:  *      [column_metadata_n] [type1],
1:  *      "" map<[sub_comparator], [default_validation_class]>
1:  *      PRIMARY KEY (key, super_column_name)
1:  *   )
1:  * In other words, every super column is encoded by a row. That row has one column for each defined "column_metadata", but it also
1:  * has a special map column (whose name is the empty string as this is guaranteed to never conflict with a user-defined
1:  * "column_metadata") which stores the super column "dynamic" sub-columns.
1:  */
1: public abstract class CompactTables
1: {
1:     // We use an empty value for the 1) this can't conflict with a user-defined column and 2) this actually
1:     // validate with any comparator which makes it convenient for columnDefinitionComparator().
1:     public static final ByteBuffer SUPER_COLUMN_MAP_COLUMN = ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:     public static final String SUPER_COLUMN_MAP_COLUMN_STR = UTF8Type.instance.compose(SUPER_COLUMN_MAP_COLUMN);
1: 
1:     private CompactTables() {}
1: 
1:     public static ColumnDefinition getCompactValueColumn(PartitionColumns columns, boolean isSuper)
1:     {
1:         if (isSuper)
1:         {
1:             for (ColumnDefinition column : columns.regulars)
1:                 if (column.name.bytes.equals(SUPER_COLUMN_MAP_COLUMN))
1:                     return column;
1:             throw new AssertionError("Invalid super column table definition, no 'dynamic' map column");
1:         }
1:         assert columns.regulars.simpleColumnCount() == 1 && columns.regulars.complexColumnCount() == 0;
1:         return columns.regulars.getSimple(0);
1:     }
1: 
0:     public static AbstractType<?> columnDefinitionComparator(ColumnDefinition.Kind kind, boolean isSuper, AbstractType<?> rawComparator, AbstractType<?> rawSubComparator)
1:     {
1:         if (isSuper)
0:             return kind == ColumnDefinition.Kind.REGULAR ? rawSubComparator : UTF8Type.instance;
0:         else
0:             return kind == ColumnDefinition.Kind.STATIC ? rawComparator : UTF8Type.instance;
1:     }
1: 
1:     public static boolean hasEmptyCompactValue(CFMetaData metadata)
1:     {
1:         return metadata.compactValueColumn().type instanceof EmptyType;
1:     }
1: 
1:     public static boolean isSuperColumnMapColumn(ColumnDefinition column)
1:     {
1:         return column.kind == ColumnDefinition.Kind.REGULAR && column.name.bytes.equals(SUPER_COLUMN_MAP_COLUMN);
1:     }
1: 
1:     public static DefaultNames defaultNameGenerator(Set<String> usedNames)
1:     {
1:         return new DefaultNames(new HashSet<String>(usedNames));
1:     }
1: 
1:     public static DefaultNames defaultNameGenerator(Iterable<ColumnDefinition> defs)
1:     {
1:         Set<String> usedNames = new HashSet<>();
1:         for (ColumnDefinition def : defs)
1:             usedNames.add(def.name.toString());
1:         return new DefaultNames(usedNames);
1:     }
1: 
1:     public static class DefaultNames
1:     {
1:         private static final String DEFAULT_PARTITION_KEY_NAME = "key";
1:         private static final String DEFAULT_CLUSTERING_NAME = "column";
1:         private static final String DEFAULT_COMPACT_VALUE_NAME = "value";
1: 
1:         private final Set<String> usedNames;
1:         private int partitionIndex = 0;
1:         private int clusteringIndex = 1;
1:         private int compactIndex = 0;
1: 
1:         private DefaultNames(Set<String> usedNames)
1:         {
1:             this.usedNames = usedNames;
1:         }
1: 
1:         public String defaultPartitionKeyName()
1:         {
1:             while (true)
1:             {
1:                 // For compatibility sake, we call the first alias 'key' rather than 'key1'. This
1:                 // is inconsistent with column alias, but it's probably not worth risking breaking compatibility now.
1:                 String candidate = partitionIndex == 0 ? DEFAULT_PARTITION_KEY_NAME : DEFAULT_PARTITION_KEY_NAME + (partitionIndex + 1);
1:                 ++partitionIndex;
1:                 if (usedNames.add(candidate))
1:                     return candidate;
1:             }
1:         }
1: 
1:         public String defaultClusteringName()
1:         {
1:             while (true)
1:             {
1:                 String candidate = DEFAULT_CLUSTERING_NAME + clusteringIndex;
1:                 ++clusteringIndex;
1:                 if (usedNames.add(candidate))
1:                     return candidate;
1:             }
1:         }
1: 
1:         public String defaultCompactValueName()
1:         {
1:             while (true)
1:             {
1:                 String candidate = compactIndex == 0 ? DEFAULT_COMPACT_VALUE_NAME : DEFAULT_COMPACT_VALUE_NAME + compactIndex;
1:                 ++compactIndex;
1:                 if (usedNames.add(candidate))
1:                     return candidate;
1:             }
1:         }
1:     }
1: }
============================================================================