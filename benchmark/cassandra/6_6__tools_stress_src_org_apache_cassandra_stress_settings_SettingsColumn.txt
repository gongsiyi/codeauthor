1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
5:2e1e98a: 
1:a182ea0: import java.io.IOException;
1:a182ea0: import java.io.ObjectInputStream;
1:a182ea0: import java.io.ObjectOutputStream;
1:6c579a0: import java.io.Serializable;
1:2e1e98a: import java.nio.ByteBuffer;
1:7536429: import java.nio.charset.CharacterCodingException;
1:6c579a0: import java.util.*;
1:2e1e98a: 
1:2e1e98a: import org.apache.cassandra.db.marshal.*;
1:6c579a0: import org.apache.cassandra.stress.generate.Distribution;
1:6c579a0: import org.apache.cassandra.stress.generate.DistributionFactory;
1:6c579a0: import org.apache.cassandra.stress.generate.DistributionFixed;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:3e2c610: import org.apache.cassandra.utils.ByteBufferUtil;
1:2e1e98a: 
1:2e1e98a: /**
1:2e1e98a:  * For parsing column options
1:2e1e98a:  */
1:2e1e98a: public class SettingsColumn implements Serializable
3:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     public final int maxColumnsPerKey;
1:a182ea0:     public transient List<ByteBuffer> names;
1:3e2c610:     public final List<String> namestrs;
1:2e1e98a:     public final String comparator;
1:530c9f5:     public final String timestamp;
1:2e1e98a:     public final boolean variableColumnCount;
1:3e2c610:     public final boolean slice;
1:7536429:     public final DistributionFactory sizeDistribution;
1:7536429:     public final DistributionFactory countDistribution;
1:2e1e98a: 
1:2e1e98a:     public SettingsColumn(GroupedOptions options)
1:2e1e98a:     {
1:2e1e98a:         this((Options) options,
1:2e1e98a:                 options instanceof NameOptions ? (NameOptions) options : null,
1:2e1e98a:                 options instanceof CountOptions ? (CountOptions) options : null
1:2e1e98a:         );
2:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public SettingsColumn(Options options, NameOptions name, CountOptions count)
1:2e1e98a:     {
1:2e1e98a:         sizeDistribution = options.size.get();
1:2e1e98a:         {
1:530c9f5:             timestamp = options.timestamp.value();
1:2e1e98a:             comparator = options.comparator.value();
1:2e1e98a:             AbstractType parsed = null;
1:2e1e98a: 
1:2e1e98a:             try
1:2e1e98a:             {
1:2e1e98a:                 parsed = TypeParser.parse(comparator);
1:2e1e98a:             }
1:2e1e98a:             catch (Exception e)
1:2e1e98a:             {
1:2e1e98a:                 System.err.println(e.getMessage());
1:2e1e98a:                 System.exit(1);
1:2e1e98a:             }
1:2e1e98a: 
1:2e1e98a:             if (!(parsed instanceof TimeUUIDType || parsed instanceof AsciiType || parsed instanceof UTF8Type))
1:2e1e98a:             {
1:2e1e98a:                 System.err.println("Currently supported types are: TimeUUIDType, AsciiType, UTF8Type.");
1:2e1e98a:                 System.exit(1);
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:         if (name != null)
1:2e1e98a:         {
1:2e1e98a:             assert count == null;
1:2e1e98a: 
1:2e1e98a:             AbstractType comparator;
1:2e1e98a:             try
1:2e1e98a:             {
1:2e1e98a:                 comparator = TypeParser.parse(this.comparator);
1:2e1e98a:             } catch (Exception e)
1:2e1e98a:             {
1:3e2c610:                 throw new IllegalArgumentException(this.comparator + " is not a valid type");
1:2e1e98a:             }
1:2e1e98a: 
1:2e1e98a:             final String[] names = name.name.value().split(",");
1:2e1e98a:             this.names = new ArrayList<>(names.length);
1:2e1e98a: 
1:2e1e98a:             for (String columnName : names)
1:2e1e98a:                 this.names.add(comparator.fromString(columnName));
1:7536429:             Collections.sort(this.names, BytesType.instance);
1:7536429:             this.namestrs = new ArrayList<>();
1:7536429:             for (ByteBuffer columnName : this.names)
1:7536429:                 this.namestrs.add(comparator.getString(columnName));
1:2e1e98a: 
1:2e1e98a:             final int nameCount = this.names.size();
1:2e1e98a:             countDistribution = new DistributionFactory()
1:2e1e98a:             {
1:2e1e98a:                 @Override
1:2e1e98a:                 public Distribution get()
1:2e1e98a:                 {
1:2e1e98a:                     return new DistributionFixed(nameCount);
1:2e1e98a:                 }
1:938faa2:                 @Override
1:938faa2:                 public String getConfigAsString(){return String.format("Count:  fixed=%d", nameCount);}
1:2e1e98a:             };
1:2e1e98a:         }
1:2e1e98a:         else
1:3e2c610:         {
1:2e1e98a:             this.countDistribution = count.count.get();
1:3e2c610:             ByteBuffer[] names = new ByteBuffer[(int) countDistribution.get().maxValue()];
1:3e2c610:             String[] namestrs = new String[(int) countDistribution.get().maxValue()];
1:3e2c610:             for (int i = 0 ; i < names.length ; i++)
1:3e2c610:                 names[i] = ByteBufferUtil.bytes("C" + i);
1:7536429:             Arrays.sort(names, BytesType.instance);
1:7536429:             try
1:7536429:             {
1:7536429:                 for (int i = 0 ; i < names.length ; i++)
1:7536429:                     namestrs[i] = ByteBufferUtil.string(names[i]);
1:3e2c610:             }
1:7536429:             catch (CharacterCodingException e)
1:7536429:             {
1:7536429:                 throw new RuntimeException(e);
1:7536429:             }
1:3e2c610:             this.names = Arrays.asList(names);
1:3e2c610:             this.namestrs = Arrays.asList(namestrs);
1:2e1e98a:         }
1:2e1e98a:         maxColumnsPerKey = (int) countDistribution.get().maxValue();
1:2e1e98a:         variableColumnCount = countDistribution.get().minValue() < maxColumnsPerKey;
1:7536429:         slice = options.slice.setByUser();
1:2e1e98a:     }
1:a182ea0: 
1:2e1e98a:     // Option Declarations
1:7536429: 
1:2e1e98a:     private static abstract class Options extends GroupedOptions
1:2e1e98a:     {
1:2e1e98a:         final OptionSimple superColumns = new OptionSimple("super=", "[0-9]+", "0", "Number of super columns to use (no super columns used if not specified)", false);
1:2e1e98a:         final OptionSimple comparator = new OptionSimple("comparator=", "TimeUUIDType|AsciiType|UTF8Type", "AsciiType", "Column Comparator to use", false);
1:3e2c610:         final OptionSimple slice = new OptionSimple("slice", "", null, "If set, range slices will be used for reads, otherwise a names query will be", false);
1:530c9f5:         final OptionSimple timestamp = new OptionSimple("timestamp=", "[0-9]+", null, "If set, all columns will be written with the given timestamp", false);
1:3e2c610:         final OptionDistribution size = new OptionDistribution("size=", "FIXED(34)", "Cell size distribution");
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     private static final class NameOptions extends Options
1:2e1e98a:     {
1:2e1e98a:         final OptionSimple name = new OptionSimple("names=", ".*", null, "Column names", true);
1:2e1e98a: 
1:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:530c9f5:             return Arrays.asList(name, slice, superColumns, comparator, timestamp, size);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     private static final class CountOptions extends Options
1:2e1e98a:     {
1:3e2c610:         final OptionDistribution count = new OptionDistribution("n=", "FIXED(5)", "Cell count distribution, per operation");
1:2e1e98a: 
1:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:530c9f5:             return Arrays.asList(count, slice, superColumns, comparator, timestamp, size);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // CLI Utility Methods
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.printf("  Max Columns Per Key: %d%n",maxColumnsPerKey);
1:938faa2:         out.printf("  Column Names: %s%n",namestrs);
1:938faa2:         out.printf("  Comparator: %s%n", comparator);
1:938faa2:         out.printf("  Timestamp: %s%n", timestamp);
1:938faa2:         out.printf("  Variable Column Count: %b%n", variableColumnCount);
1:938faa2:         out.printf("  Slice: %b%n", slice);
1:938faa2:         if (sizeDistribution != null){
1:938faa2:             out.println("  Size Distribution: " + sizeDistribution.getConfigAsString());
1:938faa2:         };
1:938faa2:         if (sizeDistribution != null){
1:938faa2:             out.println("  Count Distribution: " + countDistribution.getConfigAsString());
1:938faa2:         };
1:938faa2:     }
1:938faa2: 
1:2e1e98a: 
1:2e1e98a:     static SettingsColumn get(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         String[] params = clArgs.remove("-col");
1:2e1e98a:         if (params == null)
1:2e1e98a:             return new SettingsColumn(new CountOptions());
1:2e1e98a: 
1:2e1e98a:         GroupedOptions options = GroupedOptions.select(params, new NameOptions(), new CountOptions());
1:2e1e98a:         if (options == null)
1:2e1e98a:         {
1:2e1e98a:             printHelp();
1:2e1e98a:             System.out.println("Invalid -col options provided, see output for valid options");
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a:         return new SettingsColumn(options);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     static void printHelp()
1:2e1e98a:     {
1:2e1e98a:         GroupedOptions.printOptions(System.out, "-col", new NameOptions(), new CountOptions());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     static Runnable helpPrinter()
1:2e1e98a:     {
1:2e1e98a:         return new Runnable()
1:2e1e98a:         {
1:2e1e98a:             @Override
1:2e1e98a:             public void run()
1:2e1e98a:             {
1:2e1e98a:                 printHelp();
1:2e1e98a:             }
1:2e1e98a:         };
1:2e1e98a:     }
1:2e1e98a: 
1:a182ea0:     /* Custom serializaiton invoked here to make legacy thrift based table creation work with StressD. This code requires
1:a182ea0:      * the names attribute to be populated. Since the names attribute is set as a List[ByteBuffer] we switch it
1:a182ea0:      * to an array on the way out and back to a buffer when it's being read in.
1:a182ea0:      */
1:a182ea0: 
1:a182ea0:     private void writeObject(ObjectOutputStream oos) throws IOException
1:a182ea0:     {
1:a182ea0:         oos.defaultWriteObject();
1:a182ea0:         ArrayList<byte[]> namesBytes = new ArrayList<>();
1:a182ea0:         for (ByteBuffer buffer : this.names)
1:a182ea0:             namesBytes.add(ByteBufferUtil.getArray(buffer));
1:a182ea0:         oos.writeObject(namesBytes);
1:a182ea0:     }
1:a182ea0: 
1:a182ea0:     private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException
1:a182ea0:     {
1:a182ea0:         ois.defaultReadObject();
1:a182ea0:         List<ByteBuffer> namesBuffer = new ArrayList<>();
1:a182ea0:         List<byte[]> namesBytes = (List<byte[]>) ois.readObject();
1:a182ea0:         for (byte[] bytes : namesBytes)
1:a182ea0:             namesBuffer.add(ByteBuffer.wrap(bytes));
1:a182ea0:         this.names = new ArrayList<>(namesBuffer);
1:a182ea0:     }
1:a182ea0: 
1:2e1e98a: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
1:                 @Override
1:                 public String getConfigAsString(){return String.format("Count:  fixed=%d", nameCount);}
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.printf("  Max Columns Per Key: %d%n",maxColumnsPerKey);
1:         out.printf("  Column Names: %s%n",namestrs);
1:         out.printf("  Comparator: %s%n", comparator);
1:         out.printf("  Timestamp: %s%n", timestamp);
1:         out.printf("  Variable Column Count: %b%n", variableColumnCount);
1:         out.printf("  Slice: %b%n", slice);
1:         if (sizeDistribution != null){
1:             out.println("  Size Distribution: " + sizeDistribution.getConfigAsString());
1:         };
1:         if (sizeDistribution != null){
1:             out.println("  Count Distribution: " + countDistribution.getConfigAsString());
1:         };
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: import java.util.*;
1: import org.apache.cassandra.stress.generate.Distribution;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.DistributionFixed;
commit:530c9f5
/////////////////////////////////////////////////////////////////////////
1:     public final String timestamp;
/////////////////////////////////////////////////////////////////////////
1:             timestamp = options.timestamp.value();
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple timestamp = new OptionSimple("timestamp=", "[0-9]+", null, "If set, all columns will be written with the given timestamp", false);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(name, slice, superColumns, comparator, timestamp, size);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(count, slice, superColumns, comparator, timestamp, size);
commit:a182ea0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
/////////////////////////////////////////////////////////////////////////
1:     public transient List<ByteBuffer> names;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* Custom serializaiton invoked here to make legacy thrift based table creation work with StressD. This code requires
1:      * the names attribute to be populated. Since the names attribute is set as a List[ByteBuffer] we switch it
1:      * to an array on the way out and back to a buffer when it's being read in.
1:      */
1: 
1:     private void writeObject(ObjectOutputStream oos) throws IOException
1:     {
1:         oos.defaultWriteObject();
1:         ArrayList<byte[]> namesBytes = new ArrayList<>();
1:         for (ByteBuffer buffer : this.names)
1:             namesBytes.add(ByteBufferUtil.getArray(buffer));
1:         oos.writeObject(namesBytes);
1:     }
1: 
1:     private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException
1:     {
1:         ois.defaultReadObject();
1:         List<ByteBuffer> namesBuffer = new ArrayList<>();
1:         List<byte[]> namesBytes = (List<byte[]>) ois.readObject();
1:         for (byte[] bytes : namesBytes)
1:             namesBuffer.add(ByteBuffer.wrap(bytes));
1:         this.names = new ArrayList<>(namesBuffer);
1:     }
1: 
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.CharacterCodingException;
0: import java.util.Collections;
0: import org.apache.cassandra.stress.generate.*;
/////////////////////////////////////////////////////////////////////////
0:     public transient final List<ByteBuffer> names;
1:     public final DistributionFactory sizeDistribution;
1:     public final DistributionFactory countDistribution;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Collections.sort(this.names, BytesType.instance);
1:             this.namestrs = new ArrayList<>();
1:             for (ByteBuffer columnName : this.names)
1:                 this.namestrs.add(comparator.getString(columnName));
/////////////////////////////////////////////////////////////////////////
1:             Arrays.sort(names, BytesType.instance);
1:             try
1:             {
1:                 for (int i = 0 ; i < names.length ; i++)
1:                     namestrs[i] = ByteBufferUtil.string(names[i]);
1:             catch (CharacterCodingException e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1: 
1:         slice = options.slice.setByUser();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return Arrays.asList(name, slice, superColumns, comparator, size);
/////////////////////////////////////////////////////////////////////////
0:             return Arrays.asList(count, slice, superColumns, comparator, size);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:     public final List<String> namestrs;
1:     public final boolean slice;
/////////////////////////////////////////////////////////////////////////
1:                 throw new IllegalArgumentException(this.comparator + " is not a valid type");
0:             this.namestrs = Arrays.asList(names);
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer[] names = new ByteBuffer[(int) countDistribution.get().maxValue()];
1:             String[] namestrs = new String[(int) countDistribution.get().maxValue()];
1:             for (int i = 0 ; i < names.length ; i++)
1:             {
1:                 names[i] = ByteBufferUtil.bytes("C" + i);
0:                 namestrs[i] = "C" + i;
1:             }
1:             this.names = Arrays.asList(names);
1:             this.namestrs = Arrays.asList(namestrs);
0:         // TODO: should warn that we always slice for useTimeUUIDComparator?
0:         slice = options.slice.setByUser() || useTimeUUIDComparator;
0:         // TODO: with useTimeUUIDCOmparator, should we still try to select a random start for reads if possible?
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple slice = new OptionSimple("slice", "", null, "If set, range slices will be used for reads, otherwise a names query will be", false);
1:         final OptionDistribution size = new OptionDistribution("size=", "FIXED(34)", "Cell size distribution");
/////////////////////////////////////////////////////////////////////////
0:             return Arrays.asList(name, slice, superColumns, comparator, size, generator);
1:         final OptionDistribution count = new OptionDistribution("n=", "FIXED(5)", "Cell count distribution, per operation");
0:             return Arrays.asList(count, slice, superColumns, comparator, size, generator);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
0: import java.io.Serializable;
1: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
0: import java.util.Map;
1: 
1: import org.apache.cassandra.db.marshal.*;
0: import org.apache.cassandra.stress.generatedata.*;
1: 
1: /**
1:  * For parsing column options
1:  */
1: public class SettingsColumn implements Serializable
1: {
1: 
1:     public final int maxColumnsPerKey;
0:     public final List<ByteBuffer> names;
1:     public final String comparator;
0:     public final boolean useTimeUUIDComparator;
0:     public final int superColumns;
0:     public final boolean useSuperColumns;
1:     public final boolean variableColumnCount;
1: 
0:     private final DistributionFactory sizeDistribution;
0:     private final DistributionFactory countDistribution;
0:     private final DataGenFactory dataGenFactory;
1: 
1:     public SettingsColumn(GroupedOptions options)
1:     {
1:         this((Options) options,
1:                 options instanceof NameOptions ? (NameOptions) options : null,
1:                 options instanceof CountOptions ? (CountOptions) options : null
1:         );
1:     }
1: 
1:     public SettingsColumn(Options options, NameOptions name, CountOptions count)
1:     {
1:         sizeDistribution = options.size.get();
0:         superColumns = Integer.parseInt(options.superColumns.value());
0:         dataGenFactory = options.generator.get();
0:         useSuperColumns = superColumns > 0;
1:         {
1:             comparator = options.comparator.value();
1:             AbstractType parsed = null;
1: 
1:             try
1:             {
1:                 parsed = TypeParser.parse(comparator);
1:             }
1:             catch (Exception e)
1:             {
1:                 System.err.println(e.getMessage());
1:                 System.exit(1);
1:             }
1: 
0:             useTimeUUIDComparator = parsed instanceof TimeUUIDType;
1: 
1:             if (!(parsed instanceof TimeUUIDType || parsed instanceof AsciiType || parsed instanceof UTF8Type))
1:             {
1:                 System.err.println("Currently supported types are: TimeUUIDType, AsciiType, UTF8Type.");
1:                 System.exit(1);
1:             }
1:         }
1:         if (name != null)
1:         {
1:             assert count == null;
1: 
1:             AbstractType comparator;
1:             try
1:             {
1:                 comparator = TypeParser.parse(this.comparator);
1:             } catch (Exception e)
1:             {
0:                 throw new IllegalStateException(e);
1:             }
1: 
1:             final String[] names = name.name.value().split(",");
1:             this.names = new ArrayList<>(names.length);
1: 
1:             for (String columnName : names)
1:                 this.names.add(comparator.fromString(columnName));
1: 
1:             final int nameCount = this.names.size();
1:             countDistribution = new DistributionFactory()
1:             {
1:                 @Override
1:                 public Distribution get()
1:                 {
1:                     return new DistributionFixed(nameCount);
1:                 }
1:             };
1:         }
1:         else
1:         {
1:             this.countDistribution = count.count.get();
0:             this.names = null;
1:         }
1:         maxColumnsPerKey = (int) countDistribution.get().maxValue();
1:         variableColumnCount = countDistribution.get().minValue() < maxColumnsPerKey;
1:     }
1: 
0:     public RowGen newRowGen()
1:     {
0:         return new RowGenDistributedSize(dataGenFactory.get(), countDistribution.get(), sizeDistribution.get());
1:     }
1: 
1:     // Option Declarations
1: 
1:     private static abstract class Options extends GroupedOptions
1:     {
1:         final OptionSimple superColumns = new OptionSimple("super=", "[0-9]+", "0", "Number of super columns to use (no super columns used if not specified)", false);
1:         final OptionSimple comparator = new OptionSimple("comparator=", "TimeUUIDType|AsciiType|UTF8Type", "AsciiType", "Column Comparator to use", false);
0:         final OptionDistribution size = new OptionDistribution("size=", "FIXED(34)");
0:         final OptionDataGen generator = new OptionDataGen("data=", "REPEAT(50)");
1:     }
1: 
1:     private static final class NameOptions extends Options
1:     {
1:         final OptionSimple name = new OptionSimple("names=", ".*", null, "Column names", true);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(name, superColumns, comparator, size, generator);
1:         }
1:     }
1: 
1:     private static final class CountOptions extends Options
1:     {
0:         final OptionDistribution count = new OptionDistribution("n=", "FIXED(5)");
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(count, superColumns, comparator, size, generator);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     static SettingsColumn get(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-col");
1:         if (params == null)
1:             return new SettingsColumn(new CountOptions());
1: 
1:         GroupedOptions options = GroupedOptions.select(params, new NameOptions(), new CountOptions());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -col options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsColumn(options);
1:     }
1: 
1:     static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-col", new NameOptions(), new CountOptions());
1:     }
1: 
1:     static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
============================================================================