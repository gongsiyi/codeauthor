2:16499ca: /*
1:16499ca:  * Licensed to the Apache Software Foundation (ASF) under one
1:16499ca:  * or more contributor license agreements.  See the NOTICE file
1:16499ca:  * distributed with this work for additional information
1:16499ca:  * regarding copyright ownership.  The ASF licenses this file
1:16499ca:  * to you under the Apache License, Version 2.0 (the
1:16499ca:  * "License"); you may not use this file except in compliance
1:16499ca:  * with the License.  You may obtain a copy of the License at
1:16499ca:  *
1:16499ca:  *     http://www.apache.org/licenses/LICENSE-2.0
1:16499ca:  *
1:16499ca:  * Unless required by applicable law or agreed to in writing, software
1:16499ca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:16499ca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:16499ca:  * See the License for the specific language governing permissions and
1:16499ca:  * limitations under the License.
2:16499ca:  */
1:16499ca: package org.apache.cassandra.io.util;
1:16499ca: 
1:16499ca: import java.io.DataOutput;
1:16499ca: import java.io.IOException;
1:16499ca: import java.io.UTFDataFormatException;
1:16499ca: import java.nio.ByteBuffer;
1:16499ca: import java.nio.channels.WritableByteChannel;
1:16499ca: 
1:16499ca: import org.apache.cassandra.utils.memory.MemoryUtil;
1:16499ca: 
1:16499ca: import com.google.common.base.Function;
1:16499ca: 
1:16499ca: /**
1:16499ca:  * Base class for DataOutput implementations that does not have an optimized implementations of Plus methods
1:16499ca:  * and does no buffering.
1:246f07b:  * <p>
1:16499ca:  * Unlike BufferedDataOutputStreamPlus this is capable of operating as an unbuffered output stream.
1:16499ca:  * Currently necessary because SequentialWriter implements its own buffering along with mark/reset/truncate.
1:246f07b:  * </p>
1:16499ca:  */
1:16499ca: public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlus
2:16499ca: {
1:27bc7a5:     private static final byte[] zeroBytes = new byte[2];
1:27bc7a5: 
1:16499ca:     protected UnbufferedDataOutputStreamPlus()
1:16499ca:     {
1:16499ca:         super();
2:16499ca:     }
1:16499ca: 
1:16499ca:     protected UnbufferedDataOutputStreamPlus(WritableByteChannel channel)
1:16499ca:     {
1:16499ca:         super(channel);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /*
1:16499ca:     !! DataOutput methods below are copied from the implementation in Apache Harmony RandomAccessFile.
1:16499ca:     */
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the entire contents of the byte array <code>buffer</code> to
1:16499ca:      * this RandomAccessFile starting at the current file pointer.
1:16499ca:      *
1:16499ca:      * @param buffer the buffer to be written.
1:16499ca:      * @throws IOException If an error occurs trying to write to this RandomAccessFile.
1:16499ca:      */
1:16499ca:     public void write(byte[] buffer) throws IOException
1:16499ca:     {
1:16499ca:         write(buffer, 0, buffer.length);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes <code>count</code> bytes from the byte array <code>buffer</code>
1:16499ca:      * starting at <code>offset</code> to this RandomAccessFile starting at
1:16499ca:      * the current file pointer..
1:16499ca:      *
1:16499ca:      * @param buffer the bytes to be written
1:16499ca:      * @param offset offset in buffer to get bytes
1:16499ca:      * @param count  number of bytes in buffer to write
1:16499ca:      * @throws IOException               If an error occurs attempting to write to this
1:16499ca:      *                                   RandomAccessFile.
1:16499ca:      * @throws IndexOutOfBoundsException If offset or count are outside of bounds.
1:16499ca:      */
1:16499ca:     public abstract void write(byte[] buffer, int offset, int count) throws IOException;
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the specified byte <code>oneByte</code> to this RandomAccessFile
1:16499ca:      * starting at the current file pointer. Only the low order byte of
1:16499ca:      * <code>oneByte</code> is written.
1:16499ca:      *
1:16499ca:      * @param oneByte the byte to be written
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     RandomAccessFile.
1:16499ca:      */
1:16499ca:     public abstract void write(int oneByte) throws IOException;
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes a boolean to this output stream.
1:16499ca:      *
1:16499ca:      * @param val the boolean value to write to the OutputStream
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeBoolean(boolean val) throws IOException
1:16499ca:     {
1:16499ca:         write(val ? 1 : 0);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes a 8-bit byte to this output stream.
1:16499ca:      *
1:16499ca:      * @param val the byte value to write to the OutputStream
1:16499ca:      * @throws java.io.IOException If an error occurs attempting to write to this
1:16499ca:      *                             DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeByte(int val) throws IOException
1:16499ca:     {
1:16499ca:         write(val & 0xFF);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the low order 8-bit bytes from a String to this output stream.
1:16499ca:      *
1:16499ca:      * @param str the String containing the bytes to write to the OutputStream
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeBytes(String str) throws IOException
1:16499ca:     {
1:16499ca:         byte bytes[] = new byte[str.length()];
1:16499ca:         for (int index = 0; index < str.length(); index++)
1:16499ca:         {
1:16499ca:             bytes[index] = (byte) (str.charAt(index) & 0xFF);
1:16499ca:         }
1:16499ca:         write(bytes);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the specified 16-bit character to the OutputStream. Only the lower
1:16499ca:      * 2 bytes are written with the higher of the 2 bytes written first. This
1:16499ca:      * represents the Unicode value of val.
1:16499ca:      *
1:16499ca:      * @param val the character to be written
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeChar(int val) throws IOException
1:16499ca:     {
1:16499ca:         write((val >>> 8) & 0xFF);
1:16499ca:         write((val >>> 0) & 0xFF);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the specified 16-bit characters contained in str to the
1:16499ca:      * OutputStream. Only the lower 2 bytes of each character are written with
1:16499ca:      * the higher of the 2 bytes written first. This represents the Unicode
1:16499ca:      * value of each character in str.
1:16499ca:      *
1:16499ca:      * @param str the String whose characters are to be written.
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeChars(String str) throws IOException
1:16499ca:     {
1:16499ca:         byte newBytes[] = new byte[str.length() * 2];
1:16499ca:         for (int index = 0; index < str.length(); index++)
1:16499ca:         {
1:16499ca:             int newIndex = index == 0 ? index : index * 2;
1:16499ca:             newBytes[newIndex] = (byte) ((str.charAt(index) >> 8) & 0xFF);
1:16499ca:             newBytes[newIndex + 1] = (byte) (str.charAt(index) & 0xFF);
1:16499ca:         }
1:16499ca:         write(newBytes);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes a 64-bit double to this output stream. The resulting output is the
1:16499ca:      * 8 bytes resulting from calling Double.doubleToLongBits().
1:16499ca:      *
1:16499ca:      * @param val the double to be written.
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeDouble(double val) throws IOException
1:16499ca:     {
1:16499ca:         writeLong(Double.doubleToLongBits(val));
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes a 32-bit float to this output stream. The resulting output is the
1:16499ca:      * 4 bytes resulting from calling Float.floatToIntBits().
1:16499ca:      *
1:16499ca:      * @param val the float to be written.
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeFloat(float val) throws IOException
1:16499ca:     {
1:16499ca:         writeInt(Float.floatToIntBits(val));
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes a 32-bit int to this output stream. The resulting output is the 4
1:16499ca:      * bytes, highest order first, of val.
1:16499ca:      *
1:16499ca:      * @param val the int to be written.
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public void writeInt(int val) throws IOException
1:16499ca:     {
1:16499ca:         write((val >>> 24) & 0xFF);
1:16499ca:         write((val >>> 16) & 0xFF);
1:16499ca:         write((val >>> 8) & 0xFF);
1:16499ca:         write((val >>> 0) & 0xFF);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes a 64-bit long to this output stream. The resulting output is the 8
1:16499ca:      * bytes, highest order first, of val.
1:16499ca:      *
1:16499ca:      * @param val the long to be written.
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public void writeLong(long val) throws IOException
1:16499ca:     {
1:16499ca:         write((int) (val >>> 56) & 0xFF);
1:16499ca:         write((int) (val >>> 48) & 0xFF);
1:16499ca:         write((int) (val >>> 40) & 0xFF);
1:16499ca:         write((int) (val >>> 32) & 0xFF);
1:16499ca:         write((int) (val >>> 24) & 0xFF);
1:16499ca:         write((int) (val >>> 16) & 0xFF);
1:16499ca:         write((int) (val >>> 8) & 0xFF);
1:16499ca:         write((int) (val >>> 0) & 0xFF);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the specified 16-bit short to the OutputStream. Only the lower 2
1:16499ca:      * bytes are written with the higher of the 2 bytes written first.
1:16499ca:      *
1:16499ca:      * @param val the short to be written
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public void writeShort(int val) throws IOException
1:16499ca:     {
1:16499ca:         writeChar(val);
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the specified String out in UTF format to the provided DataOutput
1:16499ca:      *
1:16499ca:      * @param str the String to be written in UTF format.
1:16499ca:      * @param out the DataOutput to write the UTF encoded string to
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public static void writeUTF(String str, DataOutput out) throws IOException
1:16499ca:     {
1:16499ca:         int length = str.length();
1:27bc7a5:         if (length == 0)
1:27bc7a5:         {
1:27bc7a5:             out.write(zeroBytes);
1:27bc7a5:             return;
1:27bc7a5:         }
1:27bc7a5: 
1:0352a15:         int utfCount = 0;
1:5c55b7d:         int maxSize = 2;
1:0352a15:         for (int i = 0 ; i < length ; i++)
1:0352a15:         {
1:0352a15:             int ch = str.charAt(i);
2:0352a15:             if ((ch > 0) & (ch <= 127))
1:0352a15:                 utfCount += 1;
1:0352a15:             else if (ch <= 2047)
1:0352a15:                 utfCount += 2;
1:0352a15:             else
1:5c55b7d:                 utfCount += maxSize = 3;
1:0352a15:         }
1:16499ca: 
1:16499ca:         if (utfCount > 65535)
1:16499ca:             throw new UTFDataFormatException(); //$NON-NLS-1$
1:16499ca: 
1:16499ca:         byte[] utfBytes = retrieveTemporaryBuffer(utfCount + 2);
1:16499ca: 
1:16499ca:         int bufferLength = utfBytes.length;
1:0352a15:         if (utfCount == length)
1:16499ca:         {
1:0352a15:             utfBytes[0] = (byte) (utfCount >> 8);
1:0352a15:             utfBytes[1] = (byte) utfCount;
1:0352a15:             int firstIndex = 2;
1:0352a15:             for (int offset = 0 ; offset < length ; offset += bufferLength)
1:0352a15:             {
1:0352a15:                 int runLength = Math.min(bufferLength - firstIndex, length - offset) + firstIndex;
1:0352a15:                 offset -= firstIndex;
1:0352a15:                 for (int i = firstIndex ; i < runLength; i++)
1:0352a15:                     utfBytes[i] = (byte) str.charAt(offset + i);
1:0352a15:                 out.write(utfBytes, 0, runLength);
1:0352a15:                 firstIndex = 0;
1:0352a15:             }
1:16499ca:         }
1:16499ca:         else
1:16499ca:         {
1:0352a15:             int utfIndex = 2;
1:5c55b7d:             int offset = 0;
1:0352a15:             utfBytes[0] = (byte) (utfCount >> 8);
1:0352a15:             utfBytes[1] = (byte) utfCount;
1:16499ca: 
1:5c55b7d:             while (length > 0)
1:16499ca:             {
1:5c55b7d:                 int charRunLength = (utfBytes.length - utfIndex) / maxSize;
1:5c55b7d:                 if (charRunLength < 128 && charRunLength < length)
1:16499ca:                 {
2:16499ca:                     out.write(utfBytes, 0, utfIndex);
1:16499ca:                     utfIndex = 0;
1:16499ca:                 }
1:5c55b7d:                 if (charRunLength > length)
1:5c55b7d:                     charRunLength = length;
1:16499ca: 
1:5c55b7d:                 for (int i = 0 ; i < charRunLength ; i++)
1:16499ca:                 {
1:5c55b7d:                     char ch = str.charAt(offset + i);
1:4c4c432:                     if ((ch > 0) && (ch <= 127))
1:16499ca:                     {
1:0352a15:                         utfBytes[utfIndex++] = (byte) ch;
1:16499ca:                     }
1:0352a15:                     else if (ch <= 2047)
1:0352a15:                     {
1:0352a15:                         utfBytes[utfIndex++] = (byte) (0xc0 | (0x1f & (ch >> 6)));
1:0352a15:                         utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & ch));
1:0352a15:                     }
1:0352a15:                     else
1:0352a15:                     {
1:0352a15:                         utfBytes[utfIndex++] = (byte) (0xe0 | (0x0f & (ch >> 12)));
1:0352a15:                         utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & (ch >> 6)));
1:0352a15:                         utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & ch));
1:0352a15:                     }
1:16499ca:                 }
1:16499ca: 
1:5c55b7d:                 offset += charRunLength;
1:5c55b7d:                 length -= charRunLength;
1:16499ca:             }
1:16499ca: 
1:0352a15:             out.write(utfBytes, 0, utfIndex);
1:16499ca:         }
1:16499ca:     }
1:16499ca: 
1:16499ca:     /**
1:16499ca:      * Writes the specified String out in UTF format.
1:16499ca:      *
1:16499ca:      * @param str the String to be written in UTF format.
1:16499ca:      * @throws IOException If an error occurs attempting to write to this
1:16499ca:      *                     DataOutputStream.
1:16499ca:      */
1:16499ca:     public final void writeUTF(String str) throws IOException
1:16499ca:     {
1:16499ca:         writeUTF(str, this);
1:16499ca:     }
1:16499ca: 
1:16499ca:     // ByteBuffer to use for defensive copies
1:16499ca:     private final ByteBuffer hollowBufferD = MemoryUtil.getHollowDirectByteBuffer();
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void write(ByteBuffer buf) throws IOException
1:16499ca:     {
1:16499ca:         if (buf.hasArray())
1:16499ca:         {
1:16499ca:             write(buf.array(), buf.arrayOffset() + buf.position(), buf.remaining());
1:16499ca:         }
1:16499ca:         else
1:16499ca:         {
1:16499ca:             assert buf.isDirect();
1:16499ca:             MemoryUtil.duplicateDirectByteBuffer(buf, hollowBufferD);
1:16499ca:             while (hollowBufferD.hasRemaining())
1:16499ca:                 channel.write(hollowBufferD);
1:16499ca:         }
1:16499ca:     }
1:16499ca: 
1:16499ca:     public void write(Memory memory, long offset, long length) throws IOException
1:16499ca:     {
1:16499ca:         for (ByteBuffer buffer : memory.asByteBuffers(offset, length))
1:16499ca:             write(buffer);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public <R> R applyToChannel(Function<WritableByteChannel, R> f) throws IOException
1:16499ca:     {
1:16499ca:         return f.apply(channel);
1:16499ca:     }
1:16499ca: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e3baf28
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:27bc7a5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final byte[] zeroBytes = new byte[2];
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (length == 0)
1:         {
1:             out.write(zeroBytes);
1:             return;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
commit:1491a40
/////////////////////////////////////////////////////////////////////////
commit:0352a15
/////////////////////////////////////////////////////////////////////////
1:         int utfCount = 0;
1:         for (int i = 0 ; i < length ; i++)
1:         {
1:             int ch = str.charAt(i);
1:             if ((ch > 0) & (ch <= 127))
1:                 utfCount += 1;
1:             else if (ch <= 2047)
1:                 utfCount += 2;
1:             else
0:                 utfCount += 3;
1:         }
1:         if (utfCount == length)
1:             utfBytes[0] = (byte) (utfCount >> 8);
1:             utfBytes[1] = (byte) utfCount;
1:             int firstIndex = 2;
1:             for (int offset = 0 ; offset < length ; offset += bufferLength)
1:             {
1:                 int runLength = Math.min(bufferLength - firstIndex, length - offset) + firstIndex;
1:                 offset -= firstIndex;
1:                 for (int i = firstIndex ; i < runLength; i++)
1:                     utfBytes[i] = (byte) str.charAt(offset + i);
1:                 out.write(utfBytes, 0, runLength);
0:                 offset += firstIndex;
1:                 firstIndex = 0;
1:             }
1:             int utfIndex = 2;
1:             utfBytes[0] = (byte) (utfCount >> 8);
1:             utfBytes[1] = (byte) utfCount;
0:             for (int charIndex = 0 ; charIndex < length ; charIndex++)
0:                 if (utfIndex + 3 > bufferLength)
0:                 char ch = str.charAt(charIndex);
1:                 if ((ch > 0) & (ch <= 127))
1:                     utfBytes[utfIndex++] = (byte) ch;
1:                 else if (ch <= 2047)
1:                 {
1:                     utfBytes[utfIndex++] = (byte) (0xc0 | (0x1f & (ch >> 6)));
1:                     utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & ch));
1:                 }
1:                 else
1:                 {
1:                     utfBytes[utfIndex++] = (byte) (0xe0 | (0x0f & (ch >> 12)));
1:                     utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & (ch >> 6)));
1:                     utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & ch));
1:                 }
1:             out.write(utfBytes, 0, utfIndex);
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.UTFDataFormatException;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.WritableByteChannel;
1: 
0: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.utils.memory.MemoryUtil;
1: 
1: import com.google.common.base.Function;
1: 
1: /**
1:  * Base class for DataOutput implementations that does not have an optimized implementations of Plus methods
1:  * and does no buffering.
0:  * <p/>
1:  * Unlike BufferedDataOutputStreamPlus this is capable of operating as an unbuffered output stream.
1:  * Currently necessary because SequentialWriter implements its own buffering along with mark/reset/truncate.
1:  */
1: public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlus
1: {
1:     protected UnbufferedDataOutputStreamPlus()
1:     {
1:         super();
1:     }
1: 
1:     protected UnbufferedDataOutputStreamPlus(WritableByteChannel channel)
1:     {
1:         super(channel);
1:     }
1: 
1:     /*
1:     !! DataOutput methods below are copied from the implementation in Apache Harmony RandomAccessFile.
1:     */
1: 
1:     /**
1:      * Writes the entire contents of the byte array <code>buffer</code> to
1:      * this RandomAccessFile starting at the current file pointer.
1:      *
1:      * @param buffer the buffer to be written.
1:      * @throws IOException If an error occurs trying to write to this RandomAccessFile.
1:      */
1:     public void write(byte[] buffer) throws IOException
1:     {
1:         write(buffer, 0, buffer.length);
1:     }
1: 
1:     /**
1:      * Writes <code>count</code> bytes from the byte array <code>buffer</code>
1:      * starting at <code>offset</code> to this RandomAccessFile starting at
1:      * the current file pointer..
1:      *
1:      * @param buffer the bytes to be written
1:      * @param offset offset in buffer to get bytes
1:      * @param count  number of bytes in buffer to write
1:      * @throws IOException               If an error occurs attempting to write to this
1:      *                                   RandomAccessFile.
1:      * @throws IndexOutOfBoundsException If offset or count are outside of bounds.
1:      */
1:     public abstract void write(byte[] buffer, int offset, int count) throws IOException;
1: 
1:     /**
1:      * Writes the specified byte <code>oneByte</code> to this RandomAccessFile
1:      * starting at the current file pointer. Only the low order byte of
1:      * <code>oneByte</code> is written.
1:      *
1:      * @param oneByte the byte to be written
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     RandomAccessFile.
1:      */
1:     public abstract void write(int oneByte) throws IOException;
1: 
1:     /**
1:      * Writes a boolean to this output stream.
1:      *
1:      * @param val the boolean value to write to the OutputStream
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public final void writeBoolean(boolean val) throws IOException
1:     {
1:         write(val ? 1 : 0);
1:     }
1: 
1:     /**
1:      * Writes a 8-bit byte to this output stream.
1:      *
1:      * @param val the byte value to write to the OutputStream
1:      * @throws java.io.IOException If an error occurs attempting to write to this
1:      *                             DataOutputStream.
1:      */
1:     public final void writeByte(int val) throws IOException
1:     {
1:         write(val & 0xFF);
1:     }
1: 
1:     /**
1:      * Writes the low order 8-bit bytes from a String to this output stream.
1:      *
1:      * @param str the String containing the bytes to write to the OutputStream
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public final void writeBytes(String str) throws IOException
1:     {
1:         byte bytes[] = new byte[str.length()];
1:         for (int index = 0; index < str.length(); index++)
1:         {
1:             bytes[index] = (byte) (str.charAt(index) & 0xFF);
1:         }
1:         write(bytes);
1:     }
1: 
1:     /**
1:      * Writes the specified 16-bit character to the OutputStream. Only the lower
1:      * 2 bytes are written with the higher of the 2 bytes written first. This
1:      * represents the Unicode value of val.
1:      *
1:      * @param val the character to be written
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public final void writeChar(int val) throws IOException
1:     {
1:         write((val >>> 8) & 0xFF);
1:         write((val >>> 0) & 0xFF);
1:     }
1: 
1:     /**
1:      * Writes the specified 16-bit characters contained in str to the
1:      * OutputStream. Only the lower 2 bytes of each character are written with
1:      * the higher of the 2 bytes written first. This represents the Unicode
1:      * value of each character in str.
1:      *
1:      * @param str the String whose characters are to be written.
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public final void writeChars(String str) throws IOException
1:     {
1:         byte newBytes[] = new byte[str.length() * 2];
1:         for (int index = 0; index < str.length(); index++)
1:         {
1:             int newIndex = index == 0 ? index : index * 2;
1:             newBytes[newIndex] = (byte) ((str.charAt(index) >> 8) & 0xFF);
1:             newBytes[newIndex + 1] = (byte) (str.charAt(index) & 0xFF);
1:         }
1:         write(newBytes);
1:     }
1: 
1:     /**
1:      * Writes a 64-bit double to this output stream. The resulting output is the
1:      * 8 bytes resulting from calling Double.doubleToLongBits().
1:      *
1:      * @param val the double to be written.
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public final void writeDouble(double val) throws IOException
1:     {
1:         writeLong(Double.doubleToLongBits(val));
1:     }
1: 
1:     /**
1:      * Writes a 32-bit float to this output stream. The resulting output is the
1:      * 4 bytes resulting from calling Float.floatToIntBits().
1:      *
1:      * @param val the float to be written.
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public final void writeFloat(float val) throws IOException
1:     {
1:         writeInt(Float.floatToIntBits(val));
1:     }
1: 
1:     /**
1:      * Writes a 32-bit int to this output stream. The resulting output is the 4
1:      * bytes, highest order first, of val.
1:      *
1:      * @param val the int to be written.
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public void writeInt(int val) throws IOException
1:     {
1:         write((val >>> 24) & 0xFF);
1:         write((val >>> 16) & 0xFF);
1:         write((val >>> 8) & 0xFF);
1:         write((val >>> 0) & 0xFF);
1:     }
1: 
1:     /**
1:      * Writes a 64-bit long to this output stream. The resulting output is the 8
1:      * bytes, highest order first, of val.
1:      *
1:      * @param val the long to be written.
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public void writeLong(long val) throws IOException
1:     {
1:         write((int) (val >>> 56) & 0xFF);
1:         write((int) (val >>> 48) & 0xFF);
1:         write((int) (val >>> 40) & 0xFF);
1:         write((int) (val >>> 32) & 0xFF);
1:         write((int) (val >>> 24) & 0xFF);
1:         write((int) (val >>> 16) & 0xFF);
1:         write((int) (val >>> 8) & 0xFF);
1:         write((int) (val >>> 0) & 0xFF);
1:     }
1: 
1:     /**
1:      * Writes the specified 16-bit short to the OutputStream. Only the lower 2
1:      * bytes are written with the higher of the 2 bytes written first.
1:      *
1:      * @param val the short to be written
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public void writeShort(int val) throws IOException
1:     {
1:         writeChar(val);
1:     }
1: 
1:     /**
1:      * Writes the specified String out in UTF format to the provided DataOutput
1:      *
1:      * @param str the String to be written in UTF format.
1:      * @param out the DataOutput to write the UTF encoded string to
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public static void writeUTF(String str, DataOutput out) throws IOException
1:     {
1:         int length = str.length();
0:         int utfCount = calculateUTFLength(str, length);
1: 
1:         if (utfCount > 65535)
1:             throw new UTFDataFormatException(); //$NON-NLS-1$
1: 
1:         byte[] utfBytes = retrieveTemporaryBuffer(utfCount + 2);
1: 
0:         int utfIndex = 2;
0:         utfBytes[0] = (byte) (utfCount >> 8);
0:         utfBytes[1] = (byte) utfCount;
1:         int bufferLength = utfBytes.length;
1: 
0:         if (utfCount == length && utfCount + utfIndex < bufferLength)
1:         {
0:             for (int charIndex = 0 ; charIndex < length ; charIndex++)
0:                 utfBytes[utfIndex++] = (byte) str.charAt(charIndex);
1:         }
1:         else
1:         {
0:             int charIndex = 0;
0:             while (charIndex < length)
1:             {
0:                 char ch = str.charAt(charIndex);
0:                 int sizeOfChar = sizeOfChar(ch);
0:                 if (utfIndex + sizeOfChar > bufferLength)
1:                 {
1:                     out.write(utfBytes, 0, utfIndex);
1:                     utfIndex = 0;
1:                 }
1: 
0:                 switch (sizeOfChar)
1:                 {
0:                     case 3:
0:                         utfBytes[utfIndex] = (byte) (0xe0 | (0x0f & (ch >> 12)));
0:                         utfBytes[utfIndex + 1] = (byte) (0x80 | (0x3f & (ch >> 6)));
0:                         utfBytes[utfIndex + 2] = (byte) (0x80 | (0x3f & ch));
0:                         break;
0:                     case 2:
0:                         utfBytes[utfIndex] = (byte) (0xc0 | (0x1f & (ch >> 6)));
0:                         utfBytes[utfIndex + 1] = (byte) (0x80 | (0x3f & ch));
0:                         break;
0:                     case 1:
0:                         utfBytes[utfIndex] = (byte) ch;
0:                         break;
0:                     default:
0:                         throw new IllegalStateException();
1:                 }
0:                 utfIndex += sizeOfChar;
0:                 charIndex++;
1:             }
1:         }
1:         out.write(utfBytes, 0, utfIndex);
1:     }
1: 
1:     /*
0:      * Factored out into separate method to create more flexibility around inlining
1:      */
0:     private static int calculateUTFLength(String str, int length)
1:     {
0:         int utfCount = 0;
0:         for (int i = 0; i < length; i++)
0:             utfCount += sizeOfChar(str.charAt(i));
0:         return utfCount;
1:     }
1: 
0:     private static int sizeOfChar(int ch)
1:     {
0:         // wrap 0 around to max, because it requires 3 bytes
0:         return 1
0:                // if >= 128, we need an extra byte, so we divide by 128 and check the value is > 0
0:                // (by negating it and taking the sign bit)
0:                + (-(ch / 128) >>> 31)
0:                // if >= 2048, or == 0, we need another extra byte; we subtract one and wrap around,
0:                // so we only then need to confirm it is greater than 2047
0:                + (-(((ch - 1) & 0xffff) / 2047) >>> 31);
1:     }
1: 
1:     /**
1:      * Writes the specified String out in UTF format.
1:      *
1:      * @param str the String to be written in UTF format.
1:      * @throws IOException If an error occurs attempting to write to this
1:      *                     DataOutputStream.
1:      */
1:     public final void writeUTF(String str) throws IOException
1:     {
1:         writeUTF(str, this);
1:     }
1: 
1:     // ByteBuffer to use for defensive copies
1:     private final ByteBuffer hollowBufferD = MemoryUtil.getHollowDirectByteBuffer();
1: 
1:     @Override
1:     public void write(ByteBuffer buf) throws IOException
1:     {
1:         if (buf.hasArray())
1:         {
1:             write(buf.array(), buf.arrayOffset() + buf.position(), buf.remaining());
1:         }
1:         else
1:         {
1:             assert buf.isDirect();
1:             MemoryUtil.duplicateDirectByteBuffer(buf, hollowBufferD);
1:             while (hollowBufferD.hasRemaining())
1:                 channel.write(hollowBufferD);
1:         }
1:     }
1: 
1:     public void write(Memory memory, long offset, long length) throws IOException
1:     {
1:         for (ByteBuffer buffer : memory.asByteBuffers(offset, length))
1:             write(buffer);
1:     }
1: 
1:     @Override
1:     public <R> R applyToChannel(Function<WritableByteChannel, R> f) throws IOException
1:     {
1:         return f.apply(channel);
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:7392fb9
/////////////////////////////////////////////////////////////////////////
0:             if ((ch > 0) & (ch <= 127))
commit:5c55b7d
/////////////////////////////////////////////////////////////////////////
1:         int maxSize = 2;
0:             if ((ch > 0) & (ch <= 127))
1:                 utfCount += maxSize = 3;
/////////////////////////////////////////////////////////////////////////
1:             int offset = 0;
0: 
1:             while (length > 0)
1:                 int charRunLength = (utfBytes.length - utfIndex) / maxSize;
1:                 if (charRunLength < 128 && charRunLength < length)
1:                 if (charRunLength > length)
1:                     charRunLength = length;
1:                 for (int i = 0 ; i < charRunLength ; i++)
1:                     char ch = str.charAt(offset + i);
0:                     if ((ch > 0) & (ch <= 127))
0:                     {
0:                         utfBytes[utfIndex++] = (byte) ch;
0:                     }
0:                     else if (ch <= 2047)
0:                     {
0:                         utfBytes[utfIndex++] = (byte) (0xc0 | (0x1f & (ch >> 6)));
0:                         utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & ch));
0:                     }
0:                     else
0:                     {
0:                         utfBytes[utfIndex++] = (byte) (0xe0 | (0x0f & (ch >> 12)));
0:                         utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & (ch >> 6)));
0:                         utfBytes[utfIndex++] = (byte) (0x80 | (0x3f & ch));
0:                     }
0: 
1:                 offset += charRunLength;
1:                 length -= charRunLength;
0: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:4c4c432
/////////////////////////////////////////////////////////////////////////
1:                     if ((ch > 0) && (ch <= 127))
commit:622e001
/////////////////////////////////////////////////////////////////////////
0:             if ((ch > 0) && (ch <= 127))
commit:246f07b
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * </p>
commit:2f1be5d
/////////////////////////////////////////////////////////////////////////
0:                 if ((ch > 0) && (ch <= 127))
commit:87ef146
/////////////////////////////////////////////////////////////////////////
0:             if ((ch > 0) && (ch <= 127))
============================================================================