1:5805a76: /*
1:5805a76:  * Licensed to the Apache Software Foundation (ASF) under one
1:5805a76:  * or more contributor license agreements.  See the NOTICE file
1:5805a76:  * distributed with this work for additional information
1:5805a76:  * regarding copyright ownership.  The ASF licenses this file
1:5805a76:  * to you under the Apache License, Version 2.0 (the
1:5805a76:  * "License"); you may not use this file except in compliance
1:5805a76:  * with the License.  You may obtain a copy of the License at
1:5805a76:  *
1:5805a76:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5805a76:  *
1:5805a76:  * Unless required by applicable law or agreed to in writing, software
1:5805a76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5805a76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5805a76:  * See the License for the specific language governing permissions and
1:5805a76:  * limitations under the License.
1:5805a76:  */
1:5805a76: 
1:5805a76: package org.apache.cassandra.tools.nodetool.stats;
1:5805a76: 
1:5805a76: import java.util.ArrayList;
1:5805a76: import java.util.List;
1:5805a76: 
1:5805a76: import org.apache.cassandra.db.ColumnFamilyStoreMBean;
1:5805a76: import org.apache.cassandra.metrics.CassandraMetricsRegistry;
1:5805a76: import org.apache.cassandra.tools.NodeProbe;
1:5805a76: 
1:5805a76: public class StatsKeyspace
1:5805a76: {
1:5805a76:     public List<StatsTable> tables = new ArrayList<>();
1:5805a76:     private final NodeProbe probe;
1:5805a76: 
1:5805a76:     public String name;
1:5805a76:     public long readCount;
1:5805a76:     public long writeCount;
1:5805a76:     public int pendingFlushes;
1:5805a76:     private double totalReadTime;
1:5805a76:     private double totalWriteTime;
1:5805a76: 
1:5805a76:     public StatsKeyspace(NodeProbe probe, String keyspaceName)
1:5805a76:     {
1:5805a76:         this.probe = probe;
1:5805a76:         this.name = keyspaceName;
1:5805a76:     }
1:5805a76: 
1:5805a76:     public void add(ColumnFamilyStoreMBean table)
1:5805a76:     {
1:5805a76:         String tableName = table.getTableName();
1:5805a76:         long tableWriteCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(name, tableName, "WriteLatency")).getCount();
1:5805a76:         long tableReadCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(name, tableName, "ReadLatency")).getCount();
1:5805a76: 
1:5805a76:         if (tableReadCount > 0)
1:5805a76:         {
1:5805a76:             readCount += tableReadCount;
1:5805a76:             totalReadTime += (long) probe.getColumnFamilyMetric(name, tableName, "ReadTotalLatency");
1:5805a76:         }
1:5805a76:         if (tableWriteCount > 0)
1:5805a76:         {
1:5805a76:             writeCount += tableWriteCount;
1:5805a76:             totalWriteTime += (long) probe.getColumnFamilyMetric(name, tableName, "WriteTotalLatency");
1:5805a76:         }
1:5805a76:         pendingFlushes += (long) probe.getColumnFamilyMetric(name, tableName, "PendingFlushes");
1:5805a76:     }
1:5805a76: 
1:5805a76:     public double readLatency()
1:5805a76:     {
1:5805a76:         return readCount > 0
1:5805a76:                ? totalReadTime / readCount / 1000
1:5805a76:                : Double.NaN;
1:5805a76:     }
1:5805a76: 
1:5805a76:     public double writeLatency()
1:5805a76:     {
1:5805a76:         return writeCount > 0
1:5805a76:                ? totalWriteTime / writeCount / 1000
1:5805a76:                : Double.NaN;
1:5805a76:     }
1:5805a76: }
============================================================================
author:Shogo Hoshii
-------------------------------------------------------------------------------
commit:5805a76
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.stats;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.ColumnFamilyStoreMBean;
1: import org.apache.cassandra.metrics.CassandraMetricsRegistry;
1: import org.apache.cassandra.tools.NodeProbe;
1: 
1: public class StatsKeyspace
1: {
1:     public List<StatsTable> tables = new ArrayList<>();
1:     private final NodeProbe probe;
1: 
1:     public String name;
1:     public long readCount;
1:     public long writeCount;
1:     public int pendingFlushes;
1:     private double totalReadTime;
1:     private double totalWriteTime;
1: 
1:     public StatsKeyspace(NodeProbe probe, String keyspaceName)
1:     {
1:         this.probe = probe;
1:         this.name = keyspaceName;
1:     }
1: 
1:     public void add(ColumnFamilyStoreMBean table)
1:     {
1:         String tableName = table.getTableName();
1:         long tableWriteCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(name, tableName, "WriteLatency")).getCount();
1:         long tableReadCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(name, tableName, "ReadLatency")).getCount();
1: 
1:         if (tableReadCount > 0)
1:         {
1:             readCount += tableReadCount;
1:             totalReadTime += (long) probe.getColumnFamilyMetric(name, tableName, "ReadTotalLatency");
1:         }
1:         if (tableWriteCount > 0)
1:         {
1:             writeCount += tableWriteCount;
1:             totalWriteTime += (long) probe.getColumnFamilyMetric(name, tableName, "WriteTotalLatency");
1:         }
1:         pendingFlushes += (long) probe.getColumnFamilyMetric(name, tableName, "PendingFlushes");
1:     }
1: 
1:     public double readLatency()
1:     {
1:         return readCount > 0
1:                ? totalReadTime / readCount / 1000
1:                : Double.NaN;
1:     }
1: 
1:     public double writeLatency()
1:     {
1:         return writeCount > 0
1:                ? totalWriteTime / writeCount / 1000
1:                : Double.NaN;
1:     }
1: }
============================================================================