1:94cc9a4: /*
1:94cc9a4:  * Licensed to the Apache Software Foundation (ASF) under one
1:94cc9a4:  * or more contributor license agreements.  See the NOTICE file
1:94cc9a4:  * distributed with this work for additional information
1:94cc9a4:  * regarding copyright ownership.  The ASF licenses this file
1:94cc9a4:  * to you under the Apache License, Version 2.0 (the
1:94cc9a4:  * "License"); you may not use this file except in compliance
1:94cc9a4:  * with the License.  You may obtain a copy of the License at
2:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:94cc9a4:  */
1:07cf56f: package org.apache.cassandra.utils;
1:94cc9a4: 
1:5152a59: import java.lang.management.ManagementFactory;
1:5152a59: import javax.management.MBeanServer;
1:5152a59: import javax.management.ObjectName;
3:5152a59: 
1:5152a59: import org.slf4j.Logger;
1:5152a59: import org.slf4j.LoggerFactory;
1:5152a59: 
1:5152a59: /**
1:5152a59:  * If mx4j-tools is in the classpath call maybeLoad to load the HTTP interface of mx4j.
1:07cdfd0:  *
1:5152a59:  * The default port is 8081. To override that provide e.g. -Dmx4jport=8082
1:5152a59:  * The default listen address is 0.0.0.0. To override that provide -Dmx4jaddress=127.0.0.1
1:5152a59:  */
1:5152a59: public class Mx4jTool
1:5152a59: {
1:5152a59:     private static final Logger logger = LoggerFactory.getLogger(Mx4jTool.class);
1:5152a59: 
1:5152a59:     /**
1:5152a59:      * Starts a JMX over http interface if and mx4j-tools.jar is in the classpath.
1:5152a59:      * @return true if successfully loaded.
1:5152a59:      */
1:5152a59:     public static boolean maybeLoad()
1:5152a59:     {
1:5152a59:         try
1:5152a59:         {
1:4a849ef:             logger.trace("Will try to load mx4j now, if it's in the classpath");
1:5152a59:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:5152a59:             ObjectName processorName = new ObjectName("Server:name=XSLTProcessor");
1:5152a59: 
1:5152a59:             Class<?> httpAdaptorClass = Class.forName("mx4j.tools.adaptor.http.HttpAdaptor");
1:5152a59:             Object httpAdaptor = httpAdaptorClass.newInstance();
1:5152a59:             httpAdaptorClass.getMethod("setHost", String.class).invoke(httpAdaptor, getAddress());
1:5152a59:             httpAdaptorClass.getMethod("setPort", Integer.TYPE).invoke(httpAdaptor, getPort());
1:5152a59: 
1:5152a59:             ObjectName httpName = new ObjectName("system:name=http");
1:5152a59:             mbs.registerMBean(httpAdaptor, httpName);
1:5152a59: 
1:5152a59:             Class<?> xsltProcessorClass = Class.forName("mx4j.tools.adaptor.http.XSLTProcessor");
1:5152a59:             Object xsltProcessor = xsltProcessorClass.newInstance();
1:5152a59:             httpAdaptorClass.getMethod("setProcessor", Class.forName("mx4j.tools.adaptor.http.ProcessorMBean")).
1:5152a59:                     invoke(httpAdaptor, xsltProcessor);
1:5152a59:             mbs.registerMBean(xsltProcessor, processorName);
1:5152a59:             httpAdaptorClass.getMethod("start").invoke(httpAdaptor);
1:5152a59:             logger.info("mx4j successfuly loaded");
1:5152a59:             return true;
1:5152a59:         }
1:5152a59:         catch (ClassNotFoundException e)
1:5152a59:         {
1:4a849ef:             logger.trace("Will not load MX4J, mx4j-tools.jar is not in the classpath");
1:5152a59:         }
1:5152a59:         catch(Exception e)
1:5152a59:         {
1:5152a59:             logger.warn("Could not start register mbean in JMX", e);
1:5152a59:         }
1:5152a59:         return false;
1:5152a59:     }
1:5152a59: 
1:5152a59:     private static String getAddress()
1:5152a59:     {
1:127c028:         return System.getProperty("mx4jaddress", FBUtilities.getBroadcastAddress().getHostAddress());
1:5152a59:     }
1:5152a59: 
1:5152a59:     private static int getPort()
1:5152a59:     {
1:5152a59:         int port = 8081;
1:5152a59:         String sPort = System.getProperty("mx4jport");
1:5152a59:         if (sPort != null && !sPort.equals(""))
1:5152a59:         {
1:5152a59:             port = Integer.parseInt(sPort);
1:5152a59:         }
1:5152a59:         return port;
1:5152a59:     }
1:5152a59: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Will try to load mx4j now, if it's in the classpath");
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Will not load MX4J, mx4j-tools.jar is not in the classpath");
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:bbfab66
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("Will not load MX4J, mx4j-tools.jar is not in the classpath");
commit:b8ca84c
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("Will not load MX4J, mx4j-tools.jar is not in the classpath");
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.utils;
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
1:         return System.getProperty("mx4jaddress", FBUtilities.getBroadcastAddress().getHostAddress());
author:Eric Evans
-------------------------------------------------------------------------------
commit:94cc9a4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:5152a59
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.utils;
1: 
1: import java.lang.management.ManagementFactory;
1: 
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * If mx4j-tools is in the classpath call maybeLoad to load the HTTP interface of mx4j.
0:  *
1:  * The default port is 8081. To override that provide e.g. -Dmx4jport=8082
1:  * The default listen address is 0.0.0.0. To override that provide -Dmx4jaddress=127.0.0.1
1:  */
1: public class Mx4jTool
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(Mx4jTool.class);
1: 
1:     /**
1:      * Starts a JMX over http interface if and mx4j-tools.jar is in the classpath.
1:      * @return true if successfully loaded.
1:      */
1:     public static boolean maybeLoad()
1:     {
1:         try
1:         {
0:             logger.debug("Will try to load mx4j now, if it's in the classpath");
1:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:             ObjectName processorName = new ObjectName("Server:name=XSLTProcessor");
1: 
1:             Class<?> httpAdaptorClass = Class.forName("mx4j.tools.adaptor.http.HttpAdaptor");
1:             Object httpAdaptor = httpAdaptorClass.newInstance();
1:             httpAdaptorClass.getMethod("setHost", String.class).invoke(httpAdaptor, getAddress());
1:             httpAdaptorClass.getMethod("setPort", Integer.TYPE).invoke(httpAdaptor, getPort());
1: 
1:             ObjectName httpName = new ObjectName("system:name=http");
1:             mbs.registerMBean(httpAdaptor, httpName);
1: 
1:             Class<?> xsltProcessorClass = Class.forName("mx4j.tools.adaptor.http.XSLTProcessor");
1:             Object xsltProcessor = xsltProcessorClass.newInstance();
1:             httpAdaptorClass.getMethod("setProcessor", Class.forName("mx4j.tools.adaptor.http.ProcessorMBean")).
1:                     invoke(httpAdaptor, xsltProcessor);
1:             mbs.registerMBean(xsltProcessor, processorName);
1:             httpAdaptorClass.getMethod("start").invoke(httpAdaptor);
1:             logger.info("mx4j successfuly loaded");
1:             return true;
1:         }
1:         catch (ClassNotFoundException e)
1:         {
0:             logger.info("Will not load MX4J, mx4j-tools.jar is not in the classpath");
1:         }
1:         catch(Exception e)
1:         {
1:             logger.warn("Could not start register mbean in JMX", e);
1:         }
1:         return false;
1:     }
1: 
1:     private static String getAddress()
1:     {
0:         return System.getProperty("mx4jaddress", FBUtilities.getLocalAddress().getHostAddress());
1:     }
1: 
1:     private static int getPort()
1:     {
1:         int port = 8081;
1:         String sPort = System.getProperty("mx4jport");
1:         if (sPort != null && !sPort.equals(""))
1:         {
1:             port = Integer.parseInt(sPort);
1:         }
1:         return port;
1:     }
1: }
============================================================================