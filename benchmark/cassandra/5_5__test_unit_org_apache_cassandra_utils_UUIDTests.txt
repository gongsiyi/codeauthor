1:937d5c5: package org.apache.cassandra.utils;
1:c613fea: /*
1:07cdfd0:  *
1:c613fea:  * Licensed to the Apache Software Foundation (ASF) under one
1:c613fea:  * or more contributor license agreements.  See the NOTICE file
1:c613fea:  * distributed with this work for additional information
1:c613fea:  * regarding copyright ownership.  The ASF licenses this file
1:c613fea:  * to you under the Apache License, Version 2.0 (the
1:c613fea:  * "License"); you may not use this file except in compliance
1:c613fea:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:c613fea:  *   http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:c613fea:  * Unless required by applicable law or agreed to in writing,
1:c613fea:  * software distributed under the License is distributed on an
1:c613fea:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c613fea:  * KIND, either express or implied.  See the License for the
1:c613fea:  * specific language governing permissions and limitations
1:c613fea:  * under the License.
1:07cdfd0:  *
1:c613fea:  */
1:c613fea: 
6:937d5c5: 
1:e7a385a: import java.nio.ByteBuffer;
1:d9083a9: import java.util.Set;
1:937d5c5: import java.util.UUID;
1:d9083a9: import java.util.concurrent.ExecutorService;
1:d9083a9: import java.util.concurrent.Executors;
1:d9083a9: import java.util.concurrent.TimeUnit;
1:d9083a9: import java.util.concurrent.atomic.AtomicBoolean;
1:937d5c5: 
1:a991b64: import org.junit.Test;
1:a991b64: 
1:d9083a9: import com.google.common.collect.Sets;
1:d9083a9: 
1:a991b64: import org.apache.cassandra.db.marshal.TimeUUIDType;
1:a991b64: import org.apache.cassandra.utils.UUIDGen;
1:d9083a9: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1:a991b64: 
1:937d5c5: 
1:937d5c5: public class UUIDTests
2:937d5c5: {
1:937d5c5:     @Test
1:9639f95:     public void verifyType1()
1:937d5c5:     {
1:07cdfd0: 
1:7442fc0:         UUID uuid = UUIDGen.getTimeUUID();
1:937d5c5:         assert uuid.version() == 1;
2:937d5c5:     }
1:2fd3268: 
1:937d5c5:     @Test
1:9639f95:     public void verifyOrdering1()
1:937d5c5:     {
1:7442fc0:         UUID one = UUIDGen.getTimeUUID();
1:7442fc0:         UUID two = UUIDGen.getTimeUUID();
1:937d5c5:         assert one.timestamp() < two.timestamp();
1:937d5c5:     }
1:937d5c5: 
1:937d5c5:     @Test
1:9639f95:     public void testDecomposeAndRaw()
1:937d5c5:     {
1:7442fc0:         UUID a = UUIDGen.getTimeUUID();
1:937d5c5:         byte[] decomposed = UUIDGen.decompose(a);
1:9b5c44c:         UUID b = UUIDGen.getUUID(ByteBuffer.wrap(decomposed));
1:937d5c5:         assert a.equals(b);
1:937d5c5:     }
1:937d5c5: 
1:937d5c5:     @Test
1:2d991a7:     public void testToFromByteBuffer()
1:2d991a7:     {
1:2d991a7:         UUID a = UUIDGen.getTimeUUID();
1:2d991a7:         ByteBuffer bb = UUIDGen.toByteBuffer(a);
1:2d991a7:         UUID b = UUIDGen.getUUID(bb);
1:2d991a7:         assert a.equals(b);
1:2d991a7:     }
1:2d991a7: 
1:2d991a7:     @Test
1:9639f95:     public void testTimeUUIDType()
1:937d5c5:     {
1:242b717:         TimeUUIDType comp = TimeUUIDType.instance;
1:7442fc0:         ByteBuffer first = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
1:7442fc0:         ByteBuffer second = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
1:937d5c5:         assert comp.compare(first, second) < 0;
1:937d5c5:         assert comp.compare(second, first) > 0;
1:9b5c44c:         ByteBuffer sameAsFirst = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.getUUID(first)));
1:937d5c5:         assert comp.compare(first, sameAsFirst) == 0;
1:937d5c5:     }
1:f726cb2: 
1:f726cb2:     @Test
1:9639f95:     public void testUUIDTimestamp()
1:f726cb2:     {
1:f726cb2:         long now = System.currentTimeMillis();
1:7442fc0:         UUID uuid = UUIDGen.getTimeUUID();
1:f726cb2:         long tstamp = UUIDGen.getAdjustedTimestamp(uuid);
1:f726cb2: 
1:f726cb2:         // I'll be damn is the uuid timestamp is more than 10ms after now
1:f726cb2:         assert now <= tstamp && now >= tstamp - 10 : "now = " + now + ", timestamp = " + tstamp;
1:f726cb2:     }
1:d9083a9: 
1:d9083a9:     /*
1:d9083a9:      * Don't ignore spurious failures of this test since it is testing concurrent access
1:d9083a9:      * and might not fail reliably.
1:d9083a9:      */
1:d9083a9:     @Test
1:d9083a9:     public void verifyConcurrentUUIDGeneration() throws Throwable
1:d9083a9:     {
1:d9083a9:         long iterations = 250000;
1:d9083a9:         int threads = 4;
1:d9083a9:         ExecutorService es = Executors.newFixedThreadPool(threads);
1:d9083a9:         try
1:d9083a9:         {
1:d9083a9:             AtomicBoolean failedOrdering = new AtomicBoolean(false);
1:d9083a9:             AtomicBoolean failedDuplicate = new AtomicBoolean(false);
1:d9083a9:             Set<UUID> generated = Sets.newSetFromMap(new NonBlockingHashMap<>());
1:d9083a9:             Runnable task = () -> {
1:d9083a9:                 long lastTimestamp = 0;
1:d9083a9:                 long newTimestamp = 0;
1:d9083a9: 
1:d9083a9:                 for (long i = 0; i < iterations; i++)
1:d9083a9:                 {
1:d9083a9:                     UUID uuid = UUIDGen.getTimeUUID();
1:d9083a9:                     newTimestamp = uuid.timestamp();
1:d9083a9: 
1:d9083a9:                     if (lastTimestamp >= newTimestamp)
1:d9083a9:                         failedOrdering.set(true);
1:d9083a9:                     if (!generated.add(uuid))
1:d9083a9:                         failedDuplicate.set(true);
1:d9083a9: 
1:d9083a9:                     lastTimestamp = newTimestamp;
1:d9083a9:                 }
1:d9083a9:             };
1:d9083a9: 
1:d9083a9:             for (int i = 0; i < threads; i++)
1:d9083a9:             {
1:d9083a9:                 es.execute(task);
1:d9083a9:             }
1:d9083a9:             es.shutdown();
1:d9083a9:             es.awaitTermination(10, TimeUnit.MINUTES);
1:d9083a9: 
1:d9083a9:             assert !failedOrdering.get();
1:d9083a9:             assert !failedDuplicate.get();
1:d9083a9:         }
1:d9083a9:         finally
1:d9083a9:         {
1:d9083a9:             es.shutdown();
1:d9083a9:         }
1:d9083a9:     }
1:937d5c5: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:d9083a9
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import com.google.common.collect.Sets;
1: 
1: import org.cliffc.high_scale_lib.NonBlockingHashMap;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /*
1:      * Don't ignore spurious failures of this test since it is testing concurrent access
1:      * and might not fail reliably.
1:      */
1:     @Test
1:     public void verifyConcurrentUUIDGeneration() throws Throwable
1:     {
1:         long iterations = 250000;
1:         int threads = 4;
1:         ExecutorService es = Executors.newFixedThreadPool(threads);
1:         try
1:         {
1:             AtomicBoolean failedOrdering = new AtomicBoolean(false);
1:             AtomicBoolean failedDuplicate = new AtomicBoolean(false);
1:             Set<UUID> generated = Sets.newSetFromMap(new NonBlockingHashMap<>());
1:             Runnable task = () -> {
1:                 long lastTimestamp = 0;
1:                 long newTimestamp = 0;
1: 
1:                 for (long i = 0; i < iterations; i++)
1:                 {
1:                     UUID uuid = UUIDGen.getTimeUUID();
1:                     newTimestamp = uuid.timestamp();
1: 
1:                     if (lastTimestamp >= newTimestamp)
1:                         failedOrdering.set(true);
1:                     if (!generated.add(uuid))
1:                         failedDuplicate.set(true);
1: 
1:                     lastTimestamp = newTimestamp;
1:                 }
1:             };
1: 
1:             for (int i = 0; i < threads; i++)
1:             {
1:                 es.execute(task);
1:             }
1:             es.shutdown();
1:             es.awaitTermination(10, TimeUnit.MINUTES);
1: 
1:             assert !failedOrdering.get();
1:             assert !failedDuplicate.get();
1:         }
1:         finally
1:         {
1:             es.shutdown();
1:         }
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2d991a7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testToFromByteBuffer()
1:     {
1:         UUID a = UUIDGen.getTimeUUID();
1:         ByteBuffer bb = UUIDGen.toByteBuffer(a);
1:         UUID b = UUIDGen.getUUID(bb);
1:         assert a.equals(b);
1:     }
1: 
1:     @Test
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.db.marshal.TimeUUIDType;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
commit:7442fc0
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid = UUIDGen.getTimeUUID();
1:         UUID one = UUIDGen.getTimeUUID();
1:         UUID two = UUIDGen.getTimeUUID();
/////////////////////////////////////////////////////////////////////////
1:         UUID a = UUIDGen.getTimeUUID();
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer first = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
1:         ByteBuffer second = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid = UUIDGen.getTimeUUID();
commit:f726cb2
/////////////////////////////////////////////////////////////////////////
1:     @Test
0:     public void testUUIDTimestamp() throws UnknownHostException
1:     {
0:         InetAddress addr = InetAddress.getByName("127.0.0.1");
1:         long now = System.currentTimeMillis();
0:         UUID uuid = UUIDGen.makeType1UUIDFromHost(addr);
1:         long tstamp = UUIDGen.getAdjustedTimestamp(uuid);
1: 
1:         // I'll be damn is the uuid timestamp is more than 10ms after now
1:         assert now <= tstamp && now >= tstamp - 10 : "now = " + now + ", timestamp = " + tstamp;
1:     }
1: 
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9639f95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void verifyType1()
/////////////////////////////////////////////////////////////////////////
1:     public void verifyOrdering1()
/////////////////////////////////////////////////////////////////////////
1:     public void testDecomposeAndRaw()
/////////////////////////////////////////////////////////////////////////
1:     public void testTimeUUIDType()
/////////////////////////////////////////////////////////////////////////
1:     public void testUUIDTimestamp()
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9b5c44c
/////////////////////////////////////////////////////////////////////////
1:         UUID b = UUIDGen.getUUID(ByteBuffer.wrap(decomposed));
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer sameAsFirst = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.getUUID(first)));
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:         UUID b = UUIDGen.makeType1UUID(ByteBuffer.wrap(decomposed));
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer first = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"))));
0:         ByteBuffer second = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"))));
0:         ByteBuffer sameAsFirst = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUID(first)));
commit:242b717
/////////////////////////////////////////////////////////////////////////
1:         TimeUUIDType comp = TimeUUIDType.instance;
commit:c613fea
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:937d5c5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
0: import org.apache.cassandra.db.marshal.TimeUUIDType;
0: import org.junit.Test;
1: 
0: import java.math.BigInteger;
0: import java.net.InetAddress;
0: import java.net.UnknownHostException;
1: import java.util.UUID;
1: 
1: 
1: public class UUIDTests
1: {
1:     @Test
0:     public void verifyType1() throws UnknownHostException
1:     {
1:         
0:         UUID uuid = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"));
1:         assert uuid.version() == 1;
1:     }
1: 
1:     @Test
0:     public void verifyOrdering1() throws UnknownHostException
1:     {
0:         UUID one = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"));
0:         UUID two = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.2"));
1:         assert one.timestamp() < two.timestamp();
1:     }
1: 
1: 
1:     @Test
0:     public void testDecomposeAndRaw() throws UnknownHostException
1:     {
0:         UUID a = UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1"));
1:         byte[] decomposed = UUIDGen.decompose(a);
0:         UUID b = UUIDGen.makeType1UUID(decomposed);
1:         assert a.equals(b);
1:     }
1: 
1:     @Test
0:     public void testTimeUUIDType() throws UnknownHostException
1:     {
0:         TimeUUIDType comp = new TimeUUIDType();
0:         byte[] first = UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1")));
0:         byte[] second = UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(InetAddress.getByName("127.0.0.1")));
1:         assert comp.compare(first, second) < 0;
1:         assert comp.compare(second, first) > 0;
0:         byte[] sameAsFirst = UUIDGen.decompose(UUIDGen.makeType1UUID(first));
1:         assert comp.compare(first, sameAsFirst) == 0;
1:     }
1: 
0:     private void assertNonZero(BigInteger i)
1:     {
0:         assert i.toString(2).indexOf("1") > -1;
1:     }
1: }
============================================================================