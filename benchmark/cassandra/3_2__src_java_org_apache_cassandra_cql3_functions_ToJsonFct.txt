1:c7b02d1: /*
1:c7b02d1:  * Licensed to the Apache Software Foundation (ASF) under one
1:c7b02d1:  * or more contributor license agreements.  See the NOTICE file
1:c7b02d1:  * distributed with this work for additional information
1:c7b02d1:  * regarding copyright ownership.  The ASF licenses this file
1:c7b02d1:  * to you under the Apache License, Version 2.0 (the
1:c7b02d1:  * "License"); you may not use this file except in compliance
1:c7b02d1:  * with the License.  You may obtain a copy of the License at
1:c7b02d1:  *
1:c7b02d1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c7b02d1:  *
1:c7b02d1:  * Unless required by applicable law or agreed to in writing, software
1:c7b02d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c7b02d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7b02d1:  * See the License for the specific language governing permissions and
1:c7b02d1:  * limitations under the License.
1:c7b02d1:  */
1:c7b02d1: package org.apache.cassandra.cql3.functions;
1:c7b02d1: 
1:c7b02d1: import org.apache.cassandra.db.marshal.AbstractType;
1:c7b02d1: import org.apache.cassandra.db.marshal.UTF8Type;
1:c7b02d1: import org.apache.cassandra.exceptions.InvalidRequestException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:c7b02d1: import org.apache.cassandra.utils.ByteBufferUtil;
1:c7b02d1: 
1:c7b02d1: import java.nio.ByteBuffer;
1:c7b02d1: import java.util.List;
1:c7b02d1: import java.util.Map;
1:c7b02d1: import java.util.concurrent.ConcurrentHashMap;
1:c7b02d1: 
1:c7b02d1: public class ToJsonFct extends NativeScalarFunction
1:c7b02d1: {
1:c7b02d1:     public static final FunctionName NAME = FunctionName.nativeFunction("tojson");
1:c7b02d1: 
1:c7b02d1:     private static final Map<AbstractType<?>, ToJsonFct> instances = new ConcurrentHashMap<>();
1:c7b02d1: 
1:c7b02d1:     public static ToJsonFct getInstance(List<AbstractType<?>> argTypes) throws InvalidRequestException
1:c7b02d1:     {
1:c7b02d1:         if (argTypes.size() != 1)
1:c7b02d1:             throw new InvalidRequestException(String.format("toJson() only accepts one argument (got %d)", argTypes.size()));
1:c7b02d1: 
1:c7b02d1:         AbstractType<?> fromType = argTypes.get(0);
1:c7b02d1:         ToJsonFct func = instances.get(fromType);
1:c7b02d1:         if (func == null)
1:c7b02d1:         {
1:c7b02d1:             func = new ToJsonFct(fromType);
1:c7b02d1:             instances.put(fromType, func);
1:c7b02d1:         }
1:c7b02d1:         return func;
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     private ToJsonFct(AbstractType<?> argType)
1:c7b02d1:     {
1:c7b02d1:         super("tojson", UTF8Type.instance, argType);
1:c7b02d1:     }
1:c7b02d1: 
1:e0adc16:     public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
1:c7b02d1:     {
1:c7b02d1:         assert parameters.size() == 1 : "Expected 1 argument for toJson(), but got " + parameters.size();
1:c7b02d1:         ByteBuffer parameter = parameters.get(0);
1:c7b02d1:         if (parameter == null)
1:c7b02d1:             return ByteBufferUtil.bytes("null");
1:c7b02d1: 
1:c7b02d1:         return ByteBufferUtil.bytes(argTypes.get(0).toJSONString(parameter, protocolVersion));
1:c7b02d1:     }
1:c7b02d1: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.Collections;
0: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: public class ToJsonFct extends NativeScalarFunction
1: {
1:     public static final FunctionName NAME = FunctionName.nativeFunction("tojson");
1: 
1:     private static final Map<AbstractType<?>, ToJsonFct> instances = new ConcurrentHashMap<>();
1: 
1:     public static ToJsonFct getInstance(List<AbstractType<?>> argTypes) throws InvalidRequestException
1:     {
1:         if (argTypes.size() != 1)
1:             throw new InvalidRequestException(String.format("toJson() only accepts one argument (got %d)", argTypes.size()));
1: 
1:         AbstractType<?> fromType = argTypes.get(0);
1:         ToJsonFct func = instances.get(fromType);
1:         if (func == null)
1:         {
1:             func = new ToJsonFct(fromType);
1:             instances.put(fromType, func);
1:         }
1:         return func;
1:     }
1: 
1:     private ToJsonFct(AbstractType<?> argType)
1:     {
1:         super("tojson", UTF8Type.instance, argType);
1:     }
1: 
0:     public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
1:     {
1:         assert parameters.size() == 1 : "Expected 1 argument for toJson(), but got " + parameters.size();
1:         ByteBuffer parameter = parameters.get(0);
1:         if (parameter == null)
1:             return ByteBufferUtil.bytes("null");
1: 
1:         return ByteBufferUtil.bytes(argTypes.get(0).toJSONString(parameter, protocolVersion));
1:     }
1: }
============================================================================