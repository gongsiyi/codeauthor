1:5a3eb1a: /*
1:5a3eb1a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a3eb1a:  * or more contributor license agreements.  See the NOTICE file
1:5a3eb1a:  * distributed with this work for additional information
1:5a3eb1a:  * regarding copyright ownership.  The ASF licenses this file
1:5a3eb1a:  * to you under the Apache License, Version 2.0 (the
1:5a3eb1a:  * "License"); you may not use this file except in compliance
1:5a3eb1a:  * with the License.  You may obtain a copy of the License at
1:5a3eb1a:  *
1:5a3eb1a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a3eb1a:  *
1:5a3eb1a:  * Unless required by applicable law or agreed to in writing, software
1:5a3eb1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a3eb1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a3eb1a:  * See the License for the specific language governing permissions and
1:5a3eb1a:  * limitations under the License.
1:5a3eb1a:  */
1:5a3eb1a: package org.apache.cassandra.auth;
5:5a3eb1a: 
1:5a3eb1a: import java.util.Collections;
1:5a3eb1a: import java.util.Set;
1:5a3eb1a: 
1:5a3eb1a: public class AllowAllAuthorizer implements IAuthorizer
4:5a3eb1a: {
1:f54eab7:     @Override
1:f54eab7:     public boolean requireAuthorization()
1:f54eab7:     {
1:f54eab7:         return false;
1:f54eab7:     }
1:7b0c716: 
1:5a3eb1a:     public Set<Permission> authorize(AuthenticatedUser user, IResource resource)
1:bddfa9e:     {
1:9072757:         return resource.applicablePermissions();
4:5a3eb1a:     }
1:f54eab7: 
1:217721a:     public void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource to)
1:5a3eb1a:     {
1:9072757:         throw new UnsupportedOperationException("GRANT operation is not supported by AllowAllAuthorizer");
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     public void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource from)
1:5a3eb1a:     {
1:9072757:         throw new UnsupportedOperationException("REVOKE operation is not supported by AllowAllAuthorizer");
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     public void revokeAllFrom(RoleResource droppedRole)
1:5a3eb1a:     {
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     public void revokeAllOn(IResource droppedResource)
1:5a3eb1a:     {
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     public Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource of)
1:5a3eb1a:     {
1:9072757:         throw new UnsupportedOperationException("LIST PERMISSIONS operation is not supported by AllowAllAuthorizer");
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     public Set<IResource> protectedResources()
1:5a3eb1a:     {
1:5a3eb1a:         return Collections.emptySet();
1:5a3eb1a:     }
1:bddfa9e: 
1:bddfa9e:     public void validateConfiguration()
1:bddfa9e:     {
1:bddfa9e:     }
1:bddfa9e: 
1:bddfa9e:     public void setup()
1:7b0c716:     {
1:7b0c716:     }
1:bddfa9e: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:3078903
/////////////////////////////////////////////////////////////////////////
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Permission> authorizeJMX(AuthenticatedUser parUser, IResource parResource)
1:     {
0:         return Permission.ALL;
1:     }
commit:9072757
/////////////////////////////////////////////////////////////////////////
1:         return resource.applicablePermissions();
1:         throw new UnsupportedOperationException("GRANT operation is not supported by AllowAllAuthorizer");
1:         throw new UnsupportedOperationException("REVOKE operation is not supported by AllowAllAuthorizer");
/////////////////////////////////////////////////////////////////////////
1:         throw new UnsupportedOperationException("LIST PERMISSIONS operation is not supported by AllowAllAuthorizer");
commit:217721a
/////////////////////////////////////////////////////////////////////////
1:     public void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource to)
1:     public void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource from)
1:     public void revokeAllFrom(RoleResource droppedRole)
1:     public void revokeAllOn(IResource droppedResource)
1:     public Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource of)
author:Mike Adamson
-------------------------------------------------------------------------------
commit:f54eab7
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean requireAuthorization()
1:     {
1:         return false;
1:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String of)
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void validateConfiguration()
1:     {
1:     }
1: 
1:     public void setup()
1:     {
1:     }
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.Collections;
1: import java.util.Set;
1: 
0: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: public class AllowAllAuthorizer implements IAuthorizer
1: {
1:     public Set<Permission> authorize(AuthenticatedUser user, IResource resource)
1:     {
0:         return Permission.ALL;
1:     }
1: 
0:     public void validateConfiguration()
1:     {
1:     }
1: 
0:     public void setup()
1:     {
1:     }
1: 
0:     public void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String to)
0:     throws InvalidRequestException
1:     {
0:         throw new InvalidRequestException("GRANT operation is not supported by AllowAllAuthorizer");
1:     }
1: 
0:     public void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String from)
0:     throws InvalidRequestException
1:     {
0:         throw new InvalidRequestException("REVOKE operation is not supported by AllowAllAuthorizer");
1:     }
1: 
0:     public void revokeAll(String droppedUser)
1:     {
1:     }
1: 
0:     public void revokeAll(IResource droppedResource)
1:     {
1:     }
1: 
0:     public Set<PermissionDetails> listPermissions(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String of)
0:     throws InvalidRequestException
1:     {
0:         throw new InvalidRequestException("LIST PERMISSIONS operation is not supported by AllowAllAuthorizer");
1:     }
1: 
1:     public Set<IResource> protectedResources()
1:     {
1:         return Collections.emptySet();
1:     }
1: }
============================================================================