1:7b0c716: /*
1:7b0c716:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b0c716:  * or more contributor license agreements.  See the NOTICE file
1:7b0c716:  * distributed with this work for additional information
1:7b0c716:  * regarding copyright ownership.  The ASF licenses this file
1:7b0c716:  * to you under the Apache License, Version 2.0 (the
1:7b0c716:  * "License"); you may not use this file except in compliance
1:7b0c716:  * with the License.  You may obtain a copy of the License at
1:7b0c716:  *
1:7b0c716:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7b0c716:  *
1:7b0c716:  * Unless required by applicable law or agreed to in writing, software
1:7b0c716:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7b0c716:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7b0c716:  * See the License for the specific language governing permissions and
1:7b0c716:  * limitations under the License.
1:7b0c716:  */
1:7b0c716: 
1:7b0c716: package org.apache.cassandra.auth.jmx;
1:7b0c716: 
1:7b0c716: import java.security.AccessController;
1:7b0c716: import java.security.PrivilegedAction;
1:7b0c716: import javax.management.remote.JMXAuthenticator;
1:7b0c716: import javax.security.auth.Subject;
1:7b0c716: import javax.security.auth.callback.*;
1:7b0c716: import javax.security.auth.login.LoginContext;
1:7b0c716: import javax.security.auth.login.LoginException;
1:7b0c716: 
1:7b0c716: import org.slf4j.Logger;
1:7b0c716: import org.slf4j.LoggerFactory;
1:7b0c716: 
1:7b0c716: import org.apache.cassandra.exceptions.ConfigurationException;
1:7b0c716: 
1:7b0c716: /**
1:7b0c716:  * An alternative to the JAAS based implementation of JMXAuthenticator provided
1:7b0c716:  * by the JDK (JMXPluggableAuthenticator).
1:7b0c716:  *
1:7b0c716:  * Authentication is performed via delegation to a LoginModule. The JAAS login
1:7b0c716:  * config is specified by passing its identifier in a custom system property:
1:7b0c716:  *     cassandra.jmx.remote.login.config
1:7b0c716:  *
1:7b0c716:  * The location of the JAAS configuration file containing that config is
1:7b0c716:  * specified in the standard way, using the java.security.auth.login.config
1:7b0c716:  * system property.
1:7b0c716:  *
1:7b0c716:  * If authentication is successful then a Subject containing one or more
1:7b0c716:  * Principals is returned. This Subject may then be used during authorization
1:7b0c716:  * if a JMX authorization is enabled.
1:7b0c716:  */
1:7b0c716: public final class AuthenticationProxy implements JMXAuthenticator
1:7b0c716: {
1:7b0c716:     private static Logger logger = LoggerFactory.getLogger(AuthenticationProxy.class);
1:7b0c716: 
1:7b0c716:     // Identifier of JAAS configuration to be used for subject authentication
1:7b0c716:     private final String loginConfigName;
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Creates an instance of <code>JMXPluggableAuthenticator</code>
1:7b0c716:      * and initializes it with a {@link LoginContext}.
1:7b0c716:      *
1:7b0c716:      * @param loginConfigName name of the specifig JAAS login configuration to
1:7b0c716:      *                        use when authenticating JMX connections
1:7b0c716:      * @throws SecurityException if the authentication mechanism cannot be
1:7b0c716:      *         initialized.
1:7b0c716:      */
1:7b0c716:     public AuthenticationProxy(String loginConfigName)
1:7b0c716:     {
1:7b0c716:         if (loginConfigName == null)
1:7b0c716:             throw new ConfigurationException("JAAS login configuration missing for JMX authenticator setup");
1:7b0c716: 
1:7b0c716:         this.loginConfigName = loginConfigName;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Perform authentication of the client opening the {@code}MBeanServerConnection{@code}
1:7b0c716:      *
1:7b0c716:      * @param credentials optionally these credentials may be supplied by the JMX user.
1:7b0c716:      *                    Out of the box, the JDK's {@code}RMIServerImpl{@code} is capable
1:fe7eee0:      *                    of supplying a two element String[], containing username and password.
1:7b0c716:      *                    If present, these credentials will be made available to configured
1:7b0c716:      *                    {@code}LoginModule{@code}s via {@code}JMXCallbackHandler{@code}.
1:7b0c716:      *
1:7b0c716:      * @return the authenticated subject containing any {@code}Principal{@code}s added by
1:7b0c716:      *the {@code}LoginModule{@code}s
1:7b0c716:      *
1:7b0c716:      * @throws SecurityException if the server cannot authenticate the user
1:7b0c716:      *         with the provided credentials.
1:7b0c716:      */
1:7b0c716:     public Subject authenticate(Object credentials)
1:7b0c716:     {
1:7b0c716:         // The credentials object is expected to be a string array holding the subject's
1:7b0c716:         // username & password. Those values are made accessible to LoginModules via the
1:7b0c716:         // JMXCallbackHandler.
1:7b0c716:         JMXCallbackHandler callbackHandler = new JMXCallbackHandler(credentials);
1:7b0c716:         try
1:7b0c716:         {
1:7b0c716:             LoginContext loginContext = new LoginContext(loginConfigName, callbackHandler);
1:7b0c716:             loginContext.login();
1:7b0c716:             final Subject subject = loginContext.getSubject();
1:7b0c716:             if (!subject.isReadOnly())
1:7b0c716:             {
1:7b0c716:                 AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
1:7b0c716:                     subject.setReadOnly();
1:7b0c716:                     return null;
1:7b0c716:                 });
1:7b0c716:             }
1:7b0c716: 
1:7b0c716:             return subject;
1:7b0c716:         }
1:7b0c716:         catch (LoginException e)
1:7b0c716:         {
1:7b0c716:             logger.trace("Authentication exception", e);
1:7b0c716:             throw new SecurityException("Authentication error", e);
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * This callback handler supplies the username and password (which was
1:7b0c716:      * optionally supplied by the JMX user) to the JAAS login module performing
1:7b0c716:      * the authentication, should it require them . No interactive user
1:7b0c716:      * prompting is necessary because the credentials are already available to
1:7b0c716:      * this class (via its enclosing class).
1:7b0c716:      */
1:b83b084:     private static final class JMXCallbackHandler implements CallbackHandler
1:7b0c716:     {
1:7b0c716:         private char[] username;
1:7b0c716:         private char[] password;
1:7b0c716:         private JMXCallbackHandler(Object credentials)
1:7b0c716:         {
1:7b0c716:             // if username/password credentials were supplied, store them in
1:7b0c716:             // the relevant variables to make them accessible to LoginModules
1:7b0c716:             // via JMXCallbackHandler
1:7b0c716:             if (credentials instanceof String[])
1:7b0c716:             {
1:7b0c716:                 String[] strings = (String[]) credentials;
1:7b0c716:                 if (strings[0] != null)
1:7b0c716:                     username = strings[0].toCharArray();
1:7b0c716:                 if (strings[1] != null)
1:7b0c716:                     password = strings[1].toCharArray();
1:7b0c716:             }
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         public void handle(Callback[] callbacks) throws UnsupportedCallbackException
1:7b0c716:         {
1:7b0c716:             for (int i = 0; i < callbacks.length; i++)
1:7b0c716:             {
1:7b0c716:                 if (callbacks[i] instanceof NameCallback)
1:7b0c716:                     ((NameCallback)callbacks[i]).setName(username == null ? null : new String(username));
1:7b0c716:                 else if (callbacks[i] instanceof PasswordCallback)
1:7b0c716:                     ((PasswordCallback)callbacks[i]).setPassword(password == null ? null : password);
1:7b0c716:                 else
1:7b0c716:                     throw new UnsupportedCallbackException(callbacks[i], "Unrecognized Callback: " + callbacks[i].getClass().getName());
1:7b0c716:             }
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: }
1:7b0c716: 
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b83b084
/////////////////////////////////////////////////////////////////////////
1:     private static final class JMXCallbackHandler implements CallbackHandler
commit:fe7eee0
/////////////////////////////////////////////////////////////////////////
1:      *                    of supplying a two element String[], containing username and password.
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.auth.jmx;
1: 
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import javax.management.remote.JMXAuthenticator;
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.*;
1: import javax.security.auth.login.LoginContext;
1: import javax.security.auth.login.LoginException;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: /**
1:  * An alternative to the JAAS based implementation of JMXAuthenticator provided
1:  * by the JDK (JMXPluggableAuthenticator).
1:  *
1:  * Authentication is performed via delegation to a LoginModule. The JAAS login
1:  * config is specified by passing its identifier in a custom system property:
1:  *     cassandra.jmx.remote.login.config
1:  *
1:  * The location of the JAAS configuration file containing that config is
1:  * specified in the standard way, using the java.security.auth.login.config
1:  * system property.
1:  *
1:  * If authentication is successful then a Subject containing one or more
1:  * Principals is returned. This Subject may then be used during authorization
1:  * if a JMX authorization is enabled.
1:  */
1: public final class AuthenticationProxy implements JMXAuthenticator
1: {
1:     private static Logger logger = LoggerFactory.getLogger(AuthenticationProxy.class);
1: 
1:     // Identifier of JAAS configuration to be used for subject authentication
1:     private final String loginConfigName;
1: 
1:     /**
1:      * Creates an instance of <code>JMXPluggableAuthenticator</code>
1:      * and initializes it with a {@link LoginContext}.
1:      *
1:      * @param loginConfigName name of the specifig JAAS login configuration to
1:      *                        use when authenticating JMX connections
1:      * @throws SecurityException if the authentication mechanism cannot be
1:      *         initialized.
1:      */
1:     public AuthenticationProxy(String loginConfigName)
1:     {
1:         if (loginConfigName == null)
1:             throw new ConfigurationException("JAAS login configuration missing for JMX authenticator setup");
1: 
1:         this.loginConfigName = loginConfigName;
1:     }
1: 
1:     /**
1:      * Perform authentication of the client opening the {@code}MBeanServerConnection{@code}
1:      *
1:      * @param credentials optionally these credentials may be supplied by the JMX user.
1:      *                    Out of the box, the JDK's {@code}RMIServerImpl{@code} is capable
0:      *                    of supplying a two element String[], containing username & password.
1:      *                    If present, these credentials will be made available to configured
1:      *                    {@code}LoginModule{@code}s via {@code}JMXCallbackHandler{@code}.
1:      *
1:      * @return the authenticated subject containing any {@code}Principal{@code}s added by
1:      *the {@code}LoginModule{@code}s
1:      *
1:      * @throws SecurityException if the server cannot authenticate the user
1:      *         with the provided credentials.
1:      */
1:     public Subject authenticate(Object credentials)
1:     {
1:         // The credentials object is expected to be a string array holding the subject's
1:         // username & password. Those values are made accessible to LoginModules via the
1:         // JMXCallbackHandler.
1:         JMXCallbackHandler callbackHandler = new JMXCallbackHandler(credentials);
1:         try
1:         {
1:             LoginContext loginContext = new LoginContext(loginConfigName, callbackHandler);
1:             loginContext.login();
1:             final Subject subject = loginContext.getSubject();
1:             if (!subject.isReadOnly())
1:             {
1:                 AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
1:                     subject.setReadOnly();
1:                     return null;
1:                 });
1:             }
1: 
1:             return subject;
1:         }
1:         catch (LoginException e)
1:         {
1:             logger.trace("Authentication exception", e);
1:             throw new SecurityException("Authentication error", e);
1:         }
1:     }
1: 
1:     /**
1:      * This callback handler supplies the username and password (which was
1:      * optionally supplied by the JMX user) to the JAAS login module performing
1:      * the authentication, should it require them . No interactive user
1:      * prompting is necessary because the credentials are already available to
1:      * this class (via its enclosing class).
1:      */
0:     private final class JMXCallbackHandler implements CallbackHandler
1:     {
1:         private char[] username;
1:         private char[] password;
1:         private JMXCallbackHandler(Object credentials)
1:         {
1:             // if username/password credentials were supplied, store them in
1:             // the relevant variables to make them accessible to LoginModules
1:             // via JMXCallbackHandler
1:             if (credentials instanceof String[])
1:             {
1:                 String[] strings = (String[]) credentials;
1:                 if (strings[0] != null)
1:                     username = strings[0].toCharArray();
1:                 if (strings[1] != null)
1:                     password = strings[1].toCharArray();
1:             }
1:         }
1: 
1:         public void handle(Callback[] callbacks) throws UnsupportedCallbackException
1:         {
1:             for (int i = 0; i < callbacks.length; i++)
1:             {
1:                 if (callbacks[i] instanceof NameCallback)
1:                     ((NameCallback)callbacks[i]).setName(username == null ? null : new String(username));
1:                 else if (callbacks[i] instanceof PasswordCallback)
1:                     ((PasswordCallback)callbacks[i]).setPassword(password == null ? null : password);
1:                 else
1:                     throw new UnsupportedCallbackException(callbacks[i], "Unrecognized Callback: " + callbacks[i].getClass().getName());
1:             }
1:         }
1:     }
1: }
1: 
============================================================================