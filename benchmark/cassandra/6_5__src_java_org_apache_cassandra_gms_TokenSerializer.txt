1:b475bc6: /*
1:b475bc6:  * Licensed to the Apache Software Foundation (ASF) under one
1:b475bc6:  * or more contributor license agreements.  See the NOTICE file
1:b475bc6:  * distributed with this work for additional information
1:b475bc6:  * regarding copyright ownership.  The ASF licenses this file
1:b475bc6:  * to you under the Apache License, Version 2.0 (the
1:b475bc6:  * "License"); you may not use this file except in compliance
1:b475bc6:  * with the License.  You may obtain a copy of the License at
1:b475bc6:  *
1:b475bc6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b475bc6:  *
1:b475bc6:  * Unless required by applicable law or agreed to in writing, software
1:b475bc6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b475bc6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b475bc6:  * See the License for the specific language governing permissions and
1:b475bc6:  * limitations under the License.
1:b475bc6:  */
1:b475bc6: package org.apache.cassandra.gms;
1:b207956: 
1:b475bc6: import org.apache.cassandra.dht.IPartitioner;
1:b475bc6: import org.apache.cassandra.dht.Token;
1:1db386e: import org.apache.cassandra.utils.ByteBufferUtil;
1:db68ac9: import org.apache.cassandra.utils.FBUtilities;
1:db68ac9: 
1:b475bc6: import org.slf4j.Logger;
1:b475bc6: import org.slf4j.LoggerFactory;
3:b475bc6: 
1:b475bc6: import java.io.*;
1:b475bc6: import java.nio.ByteBuffer;
1:b475bc6: import java.util.ArrayList;
1:b475bc6: import java.util.Collection;
1:b475bc6: 
1:b475bc6: 
1:b475bc6: public class TokenSerializer
2:b475bc6: {
1:b475bc6:     private static final Logger logger = LoggerFactory.getLogger(TokenSerializer.class);
1:b475bc6: 
1:60d9c7f:     public static void serialize(IPartitioner partitioner, Collection<Token> tokens, DataOutput out) throws IOException
1:b475bc6:     {
1:ad84e4d:         for (Token token : tokens)
1:b475bc6:         {
1:1db386e:             ByteBuffer tokenBuffer = partitioner.getTokenFactory().toByteArray(token);
1:1db386e:             assert tokenBuffer.arrayOffset() == 0;
1:1db386e:             ByteBufferUtil.writeWithLength(tokenBuffer.array(), out);
2:b475bc6:         }
1:60d9c7f:         out.writeInt(0);
1:b475bc6:     }
1:b475bc6: 
1:60d9c7f:     public static Collection<Token> deserialize(IPartitioner partitioner, DataInput in) throws IOException
1:b475bc6:     {
1:b475bc6:         Collection<Token> tokens = new ArrayList<Token>();
1:b475bc6:         while (true)
1:b475bc6:         {
1:60d9c7f:             int size = in.readInt();
1:b475bc6:             if (size < 1)
1:b475bc6:                 break;
1:db68ac9:             logger.trace("Reading token of {}", FBUtilities.prettyPrintMemory(size));
1:b475bc6:             byte[] bintoken = new byte[size];
1:60d9c7f:             in.readFully(bintoken);
1:b475bc6:             tokens.add(partitioner.getTokenFactory().fromByteArray(ByteBuffer.wrap(bintoken)));
1:b475bc6:         }
1:b475bc6:         return tokens;
1:b475bc6:     }
1:b475bc6: }
============================================================================
author:Giampaolo Trapasso
-------------------------------------------------------------------------------
commit:db68ac9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.FBUtilities;
1: 
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Reading token of {}", FBUtilities.prettyPrintMemory(size));
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:1db386e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer tokenBuffer = partitioner.getTokenFactory().toByteArray(token);
1:             assert tokenBuffer.arrayOffset() == 0;
1:             ByteBufferUtil.writeWithLength(tokenBuffer.array(), out);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1:         for (Token token : tokens)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
commit:1187c7a
commit:df188cc
/////////////////////////////////////////////////////////////////////////
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
1:     public static void serialize(IPartitioner partitioner, Collection<Token> tokens, DataOutput out) throws IOException
0:             out.writeInt(bintoken.length);
0:             out.write(bintoken);
1:         out.writeInt(0);
1:     public static Collection<Token> deserialize(IPartitioner partitioner, DataInput in) throws IOException
1:             int size = in.readInt();
1:             in.readFully(bintoken);
commit:b207956
/////////////////////////////////////////////////////////////////////////
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:b475bc6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.gms;
1: 
0: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.io.ISerializer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.*;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: 
1: 
1: public class TokenSerializer
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(TokenSerializer.class);
1: 
0:     public static void serialize(IPartitioner partitioner, Collection<Token> tokens, DataOutput dos) throws IOException
1:     {
0:         for (Token<?> token : tokens)
1:         {
0:             byte[] bintoken = partitioner.getTokenFactory().toByteArray(token).array();
0:             dos.writeInt(bintoken.length);
0:             dos.write(bintoken);
1:         }
0:         dos.writeInt(0);
1:     }
1: 
0:     public static Collection<Token> deserialize(IPartitioner partitioner, DataInput dis) throws IOException
1:     {
1:         Collection<Token> tokens = new ArrayList<Token>();
1:         while (true)
1:         {
0:             int size = dis.readInt();
1:             if (size < 1)
1:                 break;
0:             logger.trace("Reading token of {} bytes", size);
1:             byte[] bintoken = new byte[size];
0:             dis.readFully(bintoken);
1:             tokens.add(partitioner.getTokenFactory().fromByteArray(ByteBuffer.wrap(bintoken)));
1:         }
1:         return tokens;
1:     }
1: 
0:     public static long serializedSize(Collection<Token> tokens, TypeSizes typeSizes)
1:     {
0:         throw new UnsupportedOperationException();
1:     }
1: }
============================================================================