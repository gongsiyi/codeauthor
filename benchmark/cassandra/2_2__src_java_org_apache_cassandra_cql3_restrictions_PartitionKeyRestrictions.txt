1:831bebd: /*
1:831bebd:  * Licensed to the Apache Software Foundation (ASF) under one
1:831bebd:  * or more contributor license agreements.  See the NOTICE file
1:831bebd:  * distributed with this work for additional information
1:831bebd:  * regarding copyright ownership.  The ASF licenses this file
1:831bebd:  * to you under the Apache License, Version 2.0 (the
1:831bebd:  * "License"); you may not use this file except in compliance
1:831bebd:  * with the License.  You may obtain a copy of the License at
1:831bebd:  *
1:831bebd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:831bebd:  *
1:831bebd:  * Unless required by applicable law or agreed to in writing, software
1:831bebd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:831bebd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:831bebd:  * See the License for the specific language governing permissions and
1:831bebd:  * limitations under the License.
1:831bebd:  */
1:831bebd: package org.apache.cassandra.cql3.restrictions;
1:831bebd: 
1:831bebd: import java.nio.ByteBuffer;
1:831bebd: import java.util.List;
1:831bebd: 
1:3f49c32: import org.apache.cassandra.config.CFMetaData;
1:831bebd: import org.apache.cassandra.cql3.QueryOptions;
1:831bebd: import org.apache.cassandra.cql3.statements.Bound;
1:831bebd: 
1:831bebd: /**
1:831bebd:  * A set of restrictions on the partition key.
1:831bebd:  *
1:831bebd:  */
1:831bebd: interface PartitionKeyRestrictions extends Restrictions
1:831bebd: {
1:831bebd:     public PartitionKeyRestrictions mergeWith(Restriction restriction);
1:831bebd: 
1:831bebd:     public List<ByteBuffer> values(QueryOptions options);
1:831bebd: 
1:831bebd:     public List<ByteBuffer> bounds(Bound b, QueryOptions options);
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Checks if the specified bound is set or not.
1:831bebd:      * @param b the bound type
1:831bebd:      * @return <code>true</code> if the specified bound is set, <code>false</code> otherwise
1:831bebd:      */
1:831bebd:     public boolean hasBound(Bound b);
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Checks if the specified bound is inclusive or not.
1:831bebd:      * @param b the bound type
1:831bebd:      * @return <code>true</code> if the specified bound is inclusive, <code>false</code> otherwise
1:831bebd:      */
1:831bebd:     public boolean isInclusive(Bound b);
1:3f49c32: 
1:3f49c32:     /**
1:3f49c32:      * checks if specified restrictions require filtering
1:3f49c32:      *
1:3f49c32:      * @param cfm column family metadata
1:3f49c32:      * @return <code>true</code> if filtering is required, <code>false</code> otherwise
1:3f49c32:      */
1:3f49c32:     public boolean needFiltering(CFMetaData cfm);
1:3f49c32: 
1:3f49c32:     /**
1:3f49c32:      * Checks if the partition key has unrestricted components.
1:3f49c32:      *
1:3f49c32:      * @param cfm column family metadata
1:3f49c32:      * @return <code>true</code> if the partition key has unrestricted components, <code>false</code> otherwise.
1:3f49c32:      */
1:3f49c32:     public boolean hasUnrestrictedPartitionKeyComponents(CFMetaData cfm);
1:831bebd: }
============================================================================
author:ZhaoYang
-------------------------------------------------------------------------------
commit:3f49c32
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * checks if specified restrictions require filtering
1:      *
1:      * @param cfm column family metadata
1:      * @return <code>true</code> if filtering is required, <code>false</code> otherwise
1:      */
1:     public boolean needFiltering(CFMetaData cfm);
1: 
1:     /**
1:      * Checks if the partition key has unrestricted components.
1:      *
1:      * @param cfm column family metadata
1:      * @return <code>true</code> if the partition key has unrestricted components, <code>false</code> otherwise.
1:      */
1:     public boolean hasUnrestrictedPartitionKeyComponents(CFMetaData cfm);
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:831bebd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.restrictions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.cassandra.cql3.QueryOptions;
1: import org.apache.cassandra.cql3.statements.Bound;
1: 
1: /**
1:  * A set of restrictions on the partition key.
1:  *
1:  */
1: interface PartitionKeyRestrictions extends Restrictions
1: {
1:     public PartitionKeyRestrictions mergeWith(Restriction restriction);
1: 
1:     public List<ByteBuffer> values(QueryOptions options);
1: 
1:     public List<ByteBuffer> bounds(Bound b, QueryOptions options);
1: 
1:     /**
1:      * Checks if the specified bound is set or not.
1:      * @param b the bound type
1:      * @return <code>true</code> if the specified bound is set, <code>false</code> otherwise
1:      */
1:     public boolean hasBound(Bound b);
1: 
1:     /**
1:      * Checks if the specified bound is inclusive or not.
1:      * @param b the bound type
1:      * @return <code>true</code> if the specified bound is inclusive, <code>false</code> otherwise
1:      */
1:     public boolean isInclusive(Bound b);
1: }
============================================================================