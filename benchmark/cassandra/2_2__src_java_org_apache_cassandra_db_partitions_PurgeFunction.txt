1:6094974: /*
1:6094974:  * Licensed to the Apache Software Foundation (ASF) under one
1:6094974:  * or more contributor license agreements.  See the NOTICE file
1:6094974:  * distributed with this work for additional information
1:6094974:  * regarding copyright ownership.  The ASF licenses this file
1:6094974:  * to you under the Apache License, Version 2.0 (the
1:6094974:  * "License"); you may not use this file except in compliance
1:6094974:  * with the License.  You may obtain a copy of the License at
1:6094974:  *
1:6094974:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6094974:  *
1:6094974:  * Unless required by applicable law or agreed to in writing, software
1:6094974:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6094974:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6094974:  * See the License for the specific language governing permissions and
1:6094974:  * limitations under the License.
1:6094974:  */
1:6094974: package org.apache.cassandra.db.partitions;
1:6094974: 
1:6094974: import org.apache.cassandra.db.*;
1:6094974: import org.apache.cassandra.db.rows.*;
1:6094974: import org.apache.cassandra.db.transform.Transformation;
1:6094974: 
1:6094974: public abstract class PurgeFunction extends Transformation<UnfilteredRowIterator>
1:6094974: {
1:6094974:     private final boolean isForThrift;
1:6094974:     private final DeletionPurger purger;
1:1d7bacc:     private final int nowInSec;
1:6094974:     private boolean isReverseOrder;
1:6094974: 
1:1d7bacc:     public PurgeFunction(boolean isForThrift, int nowInSec, int gcBefore, int oldestUnrepairedTombstone, boolean onlyPurgeRepairedTombstones)
1:6094974:     {
1:6094974:         this.isForThrift = isForThrift;
1:1d7bacc:         this.nowInSec = nowInSec;
1:6094974:         this.purger = (timestamp, localDeletionTime) ->
1:6094974:                       !(onlyPurgeRepairedTombstones && localDeletionTime >= oldestUnrepairedTombstone)
1:6094974:                       && localDeletionTime < gcBefore
1:6094974:                       && timestamp < getMaxPurgeableTimestamp();
2:6094974:     }
1:6094974: 
1:6094974:     protected abstract long getMaxPurgeableTimestamp();
1:6094974: 
1:6094974:     // Called at the beginning of each new partition
1:6094974:     protected void onNewPartition(DecoratedKey partitionKey)
1:6094974:     {
1:6094974:     }
1:6094974: 
1:6094974:     // Called for each partition that had only purged infos and are empty post-purge.
1:6094974:     protected void onEmptyPartitionPostPurge(DecoratedKey partitionKey)
1:6094974:     {
1:6094974:     }
1:6094974: 
1:6094974:     // Called for every unfiltered. Meant for CompactionIterator to update progress
1:6094974:     protected void updateProgress()
1:6094974:     {
1:6094974:     }
1:6094974: 
1:979e559:     @Override
1:979e559:     protected UnfilteredRowIterator applyToPartition(UnfilteredRowIterator partition)
1:6094974:     {
1:6094974:         onNewPartition(partition.partitionKey());
1:6094974: 
1:6094974:         isReverseOrder = partition.isReverseOrder();
1:6094974:         UnfilteredRowIterator purged = Transformation.apply(partition, this);
1:6094974:         if (!isForThrift && purged.isEmpty())
1:6094974:         {
1:6094974:             onEmptyPartitionPostPurge(purged.partitionKey());
1:6094974:             purged.close();
1:6094974:             return null;
1:6094974:         }
1:6094974: 
1:6094974:         return purged;
1:6094974:     }
1:6094974: 
1:979e559:     @Override
1:979e559:     protected DeletionTime applyToDeletion(DeletionTime deletionTime)
1:6094974:     {
1:6094974:         return purger.shouldPurge(deletionTime) ? DeletionTime.LIVE : deletionTime;
1:6094974:     }
1:6094974: 
1:979e559:     @Override
1:979e559:     protected Row applyToStatic(Row row)
1:6094974:     {
1:6094974:         updateProgress();
1:1d7bacc:         return row.purge(purger, nowInSec);
1:6094974:     }
1:6094974: 
1:979e559:     @Override
1:979e559:     protected Row applyToRow(Row row)
1:6094974:     {
1:6094974:         updateProgress();
1:1d7bacc:         return row.purge(purger, nowInSec);
1:6094974:     }
1:6094974: 
1:979e559:     @Override
1:979e559:     protected RangeTombstoneMarker applyToMarker(RangeTombstoneMarker marker)
1:6094974:     {
1:6094974:         updateProgress();
1:6094974:         boolean reversed = isReverseOrder;
1:6094974:         if (marker.isBoundary())
1:6094974:         {
1:6094974:             // We can only skip the whole marker if both deletion time are purgeable.
1:6094974:             // If only one of them is, filterTombstoneMarker will deal with it.
1:6094974:             RangeTombstoneBoundaryMarker boundary = (RangeTombstoneBoundaryMarker)marker;
1:6094974:             boolean shouldPurgeClose = purger.shouldPurge(boundary.closeDeletionTime(reversed));
1:6094974:             boolean shouldPurgeOpen = purger.shouldPurge(boundary.openDeletionTime(reversed));
1:6094974: 
1:6094974:             if (shouldPurgeClose)
1:6094974:             {
1:6094974:                 if (shouldPurgeOpen)
1:6094974:                     return null;
1:6094974: 
1:6094974:                 return boundary.createCorrespondingOpenMarker(reversed);
1:6094974:             }
1:6094974: 
1:6094974:             return shouldPurgeOpen
1:6094974:                    ? boundary.createCorrespondingCloseMarker(reversed)
1:6094974:                    : marker;
1:6094974:         }
1:6094974:         else
1:6094974:         {
1:6094974:             return purger.shouldPurge(((RangeTombstoneBoundMarker)marker).deletionTime()) ? null : marker;
1:1d7bacc:         }
1:6094974:     }
1:6094974: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:979e559
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected UnfilteredRowIterator applyToPartition(UnfilteredRowIterator partition)
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected DeletionTime applyToDeletion(DeletionTime deletionTime)
1:     @Override
1:     protected Row applyToStatic(Row row)
1:     @Override
1:     protected Row applyToRow(Row row)
1:     @Override
1:     protected RangeTombstoneMarker applyToMarker(RangeTombstoneMarker marker)
commit:1d7bacc
/////////////////////////////////////////////////////////////////////////
1:     private final int nowInSec;
1:     public PurgeFunction(boolean isForThrift, int nowInSec, int gcBefore, int oldestUnrepairedTombstone, boolean onlyPurgeRepairedTombstones)
1:         this.nowInSec = nowInSec;
/////////////////////////////////////////////////////////////////////////
1:         return row.purge(purger, nowInSec);
1:         return row.purge(purger, nowInSec);
/////////////////////////////////////////////////////////////////////////
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.partitions;
1: 
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.transform.Transformation;
1: 
1: public abstract class PurgeFunction extends Transformation<UnfilteredRowIterator>
1: {
1:     private final boolean isForThrift;
1:     private final DeletionPurger purger;
0:     private final int gcBefore;
1:     private boolean isReverseOrder;
1: 
0:     public PurgeFunction(boolean isForThrift, int gcBefore, int oldestUnrepairedTombstone, boolean onlyPurgeRepairedTombstones)
1:     {
1:         this.isForThrift = isForThrift;
0:         this.gcBefore = gcBefore;
1:         this.purger = (timestamp, localDeletionTime) ->
1:                       !(onlyPurgeRepairedTombstones && localDeletionTime >= oldestUnrepairedTombstone)
1:                       && localDeletionTime < gcBefore
1:                       && timestamp < getMaxPurgeableTimestamp();
1:     }
1: 
1:     protected abstract long getMaxPurgeableTimestamp();
1: 
1:     // Called at the beginning of each new partition
1:     protected void onNewPartition(DecoratedKey partitionKey)
1:     {
1:     }
1: 
1:     // Called for each partition that had only purged infos and are empty post-purge.
1:     protected void onEmptyPartitionPostPurge(DecoratedKey partitionKey)
1:     {
1:     }
1: 
1:     // Called for every unfiltered. Meant for CompactionIterator to update progress
1:     protected void updateProgress()
1:     {
1:     }
1: 
0:     public UnfilteredRowIterator applyToPartition(UnfilteredRowIterator partition)
1:     {
1:         onNewPartition(partition.partitionKey());
1: 
1:         isReverseOrder = partition.isReverseOrder();
1:         UnfilteredRowIterator purged = Transformation.apply(partition, this);
1:         if (!isForThrift && purged.isEmpty())
1:         {
1:             onEmptyPartitionPostPurge(purged.partitionKey());
1:             purged.close();
1:             return null;
1:         }
1: 
1:         return purged;
1:     }
1: 
0:     public DeletionTime applyToDeletion(DeletionTime deletionTime)
1:     {
1:         return purger.shouldPurge(deletionTime) ? DeletionTime.LIVE : deletionTime;
1:     }
1: 
0:     public Row applyToStatic(Row row)
1:     {
1:         updateProgress();
0:         return row.purge(purger, gcBefore);
1:     }
1: 
0:     public Row applyToRow(Row row)
1:     {
1:         updateProgress();
0:         return row.purge(purger, gcBefore);
1:     }
1: 
0:     public RangeTombstoneMarker applyToMarker(RangeTombstoneMarker marker)
1:     {
1:         updateProgress();
1:         boolean reversed = isReverseOrder;
1:         if (marker.isBoundary())
1:         {
1:             // We can only skip the whole marker if both deletion time are purgeable.
1:             // If only one of them is, filterTombstoneMarker will deal with it.
1:             RangeTombstoneBoundaryMarker boundary = (RangeTombstoneBoundaryMarker)marker;
1:             boolean shouldPurgeClose = purger.shouldPurge(boundary.closeDeletionTime(reversed));
1:             boolean shouldPurgeOpen = purger.shouldPurge(boundary.openDeletionTime(reversed));
1: 
1:             if (shouldPurgeClose)
1:             {
1:                 if (shouldPurgeOpen)
1:                     return null;
1: 
1:                 return boundary.createCorrespondingOpenMarker(reversed);
1:             }
1: 
1:             return shouldPurgeOpen
1:                    ? boundary.createCorrespondingCloseMarker(reversed)
1:                    : marker;
1:         }
1:         else
1:         {
1:             return purger.shouldPurge(((RangeTombstoneBoundMarker)marker).deletionTime()) ? null : marker;
1:         }
1:     }
1: }
============================================================================