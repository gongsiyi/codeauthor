1:9b8e187: /*
1:9b8e187:  * Licensed to the Apache Software Foundation (ASF) under one
1:9b8e187:  * or more contributor license agreements.  See the NOTICE file
1:9b8e187:  * distributed with this work for additional information
1:9b8e187:  * regarding copyright ownership.  The ASF licenses this file
1:9b8e187:  * to you under the Apache License, Version 2.0 (the
1:9b8e187:  * "License"); you may not use this file except in compliance
1:9b8e187:  * with the License.  You may obtain a copy of the License at
1:9b8e187:  *
1:9b8e187:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9b8e187:  *
1:9b8e187:  * Unless required by applicable law or agreed to in writing, software
1:9b8e187:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9b8e187:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9b8e187:  * See the License for the specific language governing permissions and
1:9b8e187:  * limitations under the License.
1:9b8e187:  */
1:9b8e187: 
1:9b8e187: package org.apache.cassandra.io.sstable;
1:9b8e187: 
1:9b8e187: import java.io.File;
1:7b083a4: import java.util.Queue;
1:7b083a4: import java.util.concurrent.ConcurrentLinkedQueue;
1:9b8e187: 
1:9b8e187: import com.google.common.annotations.VisibleForTesting;
1:9b8e187: import org.slf4j.Logger;
1:9b8e187: import org.slf4j.LoggerFactory;
1:9b8e187: 
1:9b8e187: import org.apache.cassandra.concurrent.ScheduledExecutors;
1:9b8e187: import org.apache.cassandra.db.WindowsFailedSnapshotTracker;
1:9b8e187: import org.apache.cassandra.io.FSWriteError;
1:9b8e187: import org.apache.cassandra.io.util.FileUtils;
1:9b8e187: 
1:9b8e187: public class SnapshotDeletingTask implements Runnable
2:9b8e187: {
1:9b8e187:     private static final Logger logger = LoggerFactory.getLogger(SnapshotDeletingTask.class);
1:9b8e187: 
1:9b8e187:     public final File path;
1:7b083a4:     private static final Queue<Runnable> failedTasks = new ConcurrentLinkedQueue<>();
1:9b8e187: 
1:9b8e187:     public static void addFailedSnapshot(File path)
1:9b8e187:     {
1:9b8e187:         logger.warn("Failed to delete snapshot [{}]. Will retry after further sstable deletions. Folder will be deleted on JVM shutdown or next node restart on crash.", path);
1:9b8e187:         WindowsFailedSnapshotTracker.handleFailedSnapshot(path);
1:9b8e187:         failedTasks.add(new SnapshotDeletingTask(path));
2:9b8e187:     }
1:9b8e187: 
1:9b8e187:     private SnapshotDeletingTask(File path)
1:9b8e187:     {
1:9b8e187:         this.path = path;
1:9b8e187:     }
1:9b8e187: 
1:9b8e187:     public void run()
1:9b8e187:     {
1:9b8e187:         try
1:9b8e187:         {
1:9b8e187:             FileUtils.deleteRecursive(path);
1:9b8e187:             logger.info("Successfully deleted snapshot {}.", path);
1:9b8e187:         }
1:9b8e187:         catch (FSWriteError e)
1:9b8e187:         {
1:9b8e187:             failedTasks.add(this);
1:9b8e187:         }
1:9b8e187:     }
1:9b8e187: 
1:9b8e187:     /**
1:9b8e187:      * Retry all failed deletions.
1:9b8e187:      */
1:9b8e187:     public static void rescheduleFailedTasks()
1:9b8e187:     {
1:7b083a4:         Runnable task;
1:7b083a4:         while ( null != (task = failedTasks.poll()))
1:9b8e187:             ScheduledExecutors.nonPeriodicTasks.submit(task);
1:9b8e187:     }
1:9b8e187: 
1:9b8e187:     @VisibleForTesting
1:9b8e187:     public static int pendingDeletionCount()
1:9b8e187:     {
1:9b8e187:         return failedTasks.size();
1:9b8e187:     }
1:9b8e187: }
============================================================================
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:7b083a4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Queue;
1: import java.util.concurrent.ConcurrentLinkedQueue;
/////////////////////////////////////////////////////////////////////////
1:     private static final Queue<Runnable> failedTasks = new ConcurrentLinkedQueue<>();
/////////////////////////////////////////////////////////////////////////
1:         Runnable task;
1:         while ( null != (task = failedTasks.poll()))
commit:9b8e187
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.io.File;
0: import java.util.Set;
0: import java.util.concurrent.CopyOnWriteArraySet;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.concurrent.ScheduledExecutors;
1: import org.apache.cassandra.db.WindowsFailedSnapshotTracker;
1: import org.apache.cassandra.io.FSWriteError;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: public class SnapshotDeletingTask implements Runnable
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(SnapshotDeletingTask.class);
1: 
1:     public final File path;
0:     private static final Set<SnapshotDeletingTask> failedTasks = new CopyOnWriteArraySet<>();
1: 
1:     public static void addFailedSnapshot(File path)
1:     {
1:         logger.warn("Failed to delete snapshot [{}]. Will retry after further sstable deletions. Folder will be deleted on JVM shutdown or next node restart on crash.", path);
1:         WindowsFailedSnapshotTracker.handleFailedSnapshot(path);
1:         failedTasks.add(new SnapshotDeletingTask(path));
1:     }
1: 
1:     private SnapshotDeletingTask(File path)
1:     {
1:         this.path = path;
1:     }
1: 
1:     public void run()
1:     {
1:         try
1:         {
1:             FileUtils.deleteRecursive(path);
1:             logger.info("Successfully deleted snapshot {}.", path);
1:         }
1:         catch (FSWriteError e)
1:         {
1:             failedTasks.add(this);
1:         }
1:     }
1: 
1:     /**
1:      * Retry all failed deletions.
1:      */
1:     public static void rescheduleFailedTasks()
1:     {
0:         for (SnapshotDeletingTask task : failedTasks)
1:         {
0:             failedTasks.remove(task);
1:             ScheduledExecutors.nonPeriodicTasks.submit(task);
1:         }
1:     }
1: 
1:     @VisibleForTesting
1:     public static int pendingDeletionCount()
1:     {
1:         return failedTasks.size();
1:     }
1: }
============================================================================