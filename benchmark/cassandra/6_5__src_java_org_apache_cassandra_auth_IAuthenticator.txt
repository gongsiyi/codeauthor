1:0160ad5: /*
1:0160ad5:  * Licensed to the Apache Software Foundation (ASF) under one
1:0160ad5:  * or more contributor license agreements.  See the NOTICE file
1:0160ad5:  * distributed with this work for additional information
1:0160ad5:  * regarding copyright ownership.  The ASF licenses this file
1:0160ad5:  * to you under the Apache License, Version 2.0 (the
1:0160ad5:  * "License"); you may not use this file except in compliance
1:0160ad5:  * with the License.  You may obtain a copy of the License at
3:bddfa9e:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bddfa9e:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
5:bddfa9e:  */
1:07cf56f: package org.apache.cassandra.auth;
4:bddfa9e: 
1:8a8427d: import java.net.InetAddress;
1:f8f6fb2: import java.util.Map;
1:bddfa9e: import java.util.Set;
1:bddfa9e: 
1:bddfa9e: import org.apache.cassandra.exceptions.AuthenticationException;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:bddfa9e: 
1:2f0e62c: public interface IAuthenticator
1:bddfa9e: {
6:bddfa9e:     /**
1:bddfa9e:      * Whether or not the authenticator requires explicit login.
1:bddfa9e:      * If false will instantiate user with AuthenticatedUser.ANONYMOUS_USER.
1:bddfa9e:      */
1:bddfa9e:     boolean requireAuthentication();
1:bddfa9e: 
1:bddfa9e:      /**
1:bddfa9e:      * Set of resources that should be made inaccessible to users and only accessible internally.
1:bddfa9e:      *
1:0b83682:      * @return Keyspaces, column families that will be unmodifiable by users; other resources.
1:bddfa9e:      */
1:bddfa9e:     Set<? extends IResource> protectedResources();
1:bddfa9e: 
1:bddfa9e:     /**
1:bddfa9e:      * Validates configuration of IAuthenticator implementation (if configurable).
1:bddfa9e:      *
1:bddfa9e:      * @throws ConfigurationException when there is a configuration error.
1:bddfa9e:      */
1:bddfa9e:     void validateConfiguration() throws ConfigurationException;
1:bddfa9e: 
1:bddfa9e:     /**
1:bddfa9e:      * Setup is called once upon system startup to initialize the IAuthenticator.
1:bddfa9e:      *
1:bddfa9e:      * For example, use this method to create any required keyspaces/column families.
1:bddfa9e:      */
1:bddfa9e:     void setup();
1:879b694: 
1:879b694:     /**
1:879b694:      * Provide a SASL handler to perform authentication for an single connection. SASL
1:879b694:      * is a stateful protocol, so a new instance must be used for each authentication
1:879b694:      * attempt.
1:8a8427d:      * @param clientAddress the IP address of the client whom we wish to authenticate, or null
1:8a8427d:      *                      if an internal client (one not connected over the remote transport).
1:879b694:      * @return org.apache.cassandra.auth.IAuthenticator.SaslNegotiator implementation
1:879b694:      * (see {@link org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator})
1:879b694:      */
1:8a8427d:     SaslNegotiator newSaslNegotiator(InetAddress clientAddress);
1:879b694: 
1:879b694:     /**
1:879b694:      * For implementations which support the Thrift login method that accepts arbitrary
1:879b694:      * key/value pairs containing credentials data.
1:879b694:      * Also used by CQL native protocol v1, in which username and password are sent from
1:879b694:      * client to server in a {@link org.apache.cassandra.transport.messages.CredentialsMessage}
1:879b694:      * Implementations where support for Thrift and CQL protocol v1 is not required should make
1:879b694:      * this an unsupported operation.
1:879b694:      *
1:879b694:      * Should never return null - always throw AuthenticationException instead.
1:879b694:      * Returning AuthenticatedUser.ANONYMOUS_USER is an option as well if authentication is not required.
1:879b694:      *
1:879b694:      * @param credentials implementation specific key/value pairs
1:879b694:      * @return non-null representation of the authenticated subject
1:879b694:      * @throws AuthenticationException
1:879b694:      */
1:879b694:     AuthenticatedUser legacyAuthenticate(Map<String, String> credentials) throws AuthenticationException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Performs the actual SASL negotiation for a single authentication attempt.
1:879b694:      * SASL is stateful, so a new instance should be used for each attempt.
1:879b694:      * Non-trivial implementations may delegate to an instance of {@link javax.security.sasl.SaslServer}
1:879b694:      */
1:879b694:     public interface SaslNegotiator
1:879b694:     {
1:879b694:         /**
1:879b694:          * Evaluates the client response data and generates a byte[] reply which may be a further challenge or purely
1:879b694:          * informational in the case that the negotiation is completed on this round.
1:879b694:          *
1:879b694:          * This method is called each time a {@link org.apache.cassandra.transport.messages.AuthResponse} is received
1:879b694:          * from a client. After it is called, {@link isComplete()} is checked to determine whether the negotiation has
1:879b694:          * finished. If so, an AuthenticatedUser is obtained by calling {@link getAuthenticatedUser()} and that user
1:879b694:          * associated with the active connection and the byte[] sent back to the client via an
1:879b694:          * {@link org.apache.cassandra.transport.messages.AuthSuccess} message. If the negotiation is not yet complete,
1:879b694:          * the byte[] is returned to the client as a further challenge in an
1:879b694:          * {@link org.apache.cassandra.transport.messages.AuthChallenge} message. This continues until the negotiation
1:879b694:          * does complete or an error is encountered.
1:879b694:          *
1:879b694:          * @param clientResponse The non-null (but possibly empty) response sent by the client
1:879b694:          * @return The possibly null response to send to the client.
1:879b694:          * @throws AuthenticationException
1:879b694:          * see {@link javax.security.sasl.SaslServer#evaluateResponse(byte[])}
1:879b694:          */
1:879b694:         public byte[] evaluateResponse(byte[] clientResponse) throws AuthenticationException;
1:879b694: 
1:879b694:         /**
1:879b694:          * Called after each invocation of {@link evaluateResponse(byte[])} to determine whether the  authentication has
1:879b694:          * completed successfully or should be continued.
1:879b694:          *
1:879b694:          * @return true if the authentication exchange has completed; false otherwise.
1:879b694:          * see {@link javax.security.sasl.SaslServer#isComplete()}
1:879b694:          */
1:879b694:         public boolean isComplete();
1:879b694: 
1:879b694:         /**
1:879b694:          * Following a sucessful negotiation, get the AuthenticatedUser representing the logged in subject.
1:879b694:          * This method should only be called if {@link isComplete()} returns true.
1:879b694:          * Should never return null - always throw AuthenticationException instead.
1:879b694:          * Returning AuthenticatedUser.ANONYMOUS_USER is an option if authentication is not required.
1:879b694:          *
1:879b694:          * @return non-null representation of the authenticated subject
1:879b694:          * @throws AuthenticationException
1:879b694:          */
1:879b694:         public AuthenticatedUser getAuthenticatedUser() throws AuthenticationException;
1:879b694:     }
1:bddfa9e: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:8a8427d
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
1:      * @param clientAddress the IP address of the client whom we wish to authenticate, or null
1:      *                      if an internal client (one not connected over the remote transport).
1:     SaslNegotiator newSaslNegotiator(InetAddress clientAddress);
commit:879b694
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Provide a SASL handler to perform authentication for an single connection. SASL
1:      * is a stateful protocol, so a new instance must be used for each authentication
1:      * attempt.
1:      * @return org.apache.cassandra.auth.IAuthenticator.SaslNegotiator implementation
1:      * (see {@link org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator})
1:      */
0:     SaslNegotiator newSaslNegotiator();
1: 
1:     /**
1:      * For implementations which support the Thrift login method that accepts arbitrary
1:      * key/value pairs containing credentials data.
1:      * Also used by CQL native protocol v1, in which username and password are sent from
1:      * client to server in a {@link org.apache.cassandra.transport.messages.CredentialsMessage}
1:      * Implementations where support for Thrift and CQL protocol v1 is not required should make
1:      * this an unsupported operation.
1:      *
1:      * Should never return null - always throw AuthenticationException instead.
1:      * Returning AuthenticatedUser.ANONYMOUS_USER is an option as well if authentication is not required.
1:      *
1:      * @param credentials implementation specific key/value pairs
1:      * @return non-null representation of the authenticated subject
1:      * @throws AuthenticationException
1:      */
1:     AuthenticatedUser legacyAuthenticate(Map<String, String> credentials) throws AuthenticationException;
1: 
1:     /**
1:      * Performs the actual SASL negotiation for a single authentication attempt.
1:      * SASL is stateful, so a new instance should be used for each attempt.
1:      * Non-trivial implementations may delegate to an instance of {@link javax.security.sasl.SaslServer}
1:      */
1:     public interface SaslNegotiator
1:     {
1:         /**
1:          * Evaluates the client response data and generates a byte[] reply which may be a further challenge or purely
1:          * informational in the case that the negotiation is completed on this round.
1:          *
1:          * This method is called each time a {@link org.apache.cassandra.transport.messages.AuthResponse} is received
1:          * from a client. After it is called, {@link isComplete()} is checked to determine whether the negotiation has
1:          * finished. If so, an AuthenticatedUser is obtained by calling {@link getAuthenticatedUser()} and that user
1:          * associated with the active connection and the byte[] sent back to the client via an
1:          * {@link org.apache.cassandra.transport.messages.AuthSuccess} message. If the negotiation is not yet complete,
1:          * the byte[] is returned to the client as a further challenge in an
1:          * {@link org.apache.cassandra.transport.messages.AuthChallenge} message. This continues until the negotiation
1:          * does complete or an error is encountered.
1:          *
1:          * @param clientResponse The non-null (but possibly empty) response sent by the client
1:          * @return The possibly null response to send to the client.
1:          * @throws AuthenticationException
1:          * see {@link javax.security.sasl.SaslServer#evaluateResponse(byte[])}
1:          */
1:         public byte[] evaluateResponse(byte[] clientResponse) throws AuthenticationException;
1: 
1:         /**
1:          * Called after each invocation of {@link evaluateResponse(byte[])} to determine whether the  authentication has
1:          * completed successfully or should be continued.
1:          *
1:          * @return true if the authentication exchange has completed; false otherwise.
1:          * see {@link javax.security.sasl.SaslServer#isComplete()}
1:          */
1:         public boolean isComplete();
1: 
1:         /**
1:          * Following a sucessful negotiation, get the AuthenticatedUser representing the logged in subject.
1:          * This method should only be called if {@link isComplete()} returns true.
1:          * Should never return null - always throw AuthenticationException instead.
1:          * Returning AuthenticatedUser.ANONYMOUS_USER is an option if authentication is not required.
1:          *
1:          * @return non-null representation of the authenticated subject
1:          * @throws AuthenticationException
1:          */
1:         public AuthenticatedUser getAuthenticatedUser() throws AuthenticationException;
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0b83682
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.RequestExecutionException;
0: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
0:      * @throws RequestValidationException
0:      * @throws RequestExecutionException
0:     void create(String username, Map<Option, Object> options) throws RequestValidationException, RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
0:      * @throws RequestValidationException
0:      * @throws RequestExecutionException
0:     void alter(String username, Map<Option, Object> options) throws RequestValidationException, RequestExecutionException;
0:      * @throws RequestValidationException
0:      * @throws RequestExecutionException
0:     void drop(String username) throws RequestValidationException, RequestExecutionException;
1:      * @return Keyspaces, column families that will be unmodifiable by users; other resources.
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import org.apache.cassandra.exceptions.AuthenticationException;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0:     static final String USERNAME_KEY = "username";
0:     static final String PASSWORD_KEY = "password";
0:      * Supported CREATE USER/ALTER USER options.
0:      * Currently only PASSWORD is available.
0:     enum Option
1:     {
0:         PASSWORD
1:     }
1:      * Whether or not the authenticator requires explicit login.
1:      * If false will instantiate user with AuthenticatedUser.ANONYMOUS_USER.
1:     boolean requireAuthentication();
1:     /**
0:      * Set of options supported by CREATE USER and ALTER USER queries.
0:      * Should never return null - always return an empty set instead.
1:      */
0:     Set<Option> supportedOptions();
1: 
1:     /**
0:      * Subset of supportedOptions that users are allowed to alter when performing ALTER USER [themselves].
0:      * Should never return null - always return an empty set instead.
1:      */
0:     Set<Option> alterableOptions();
1: 
1:     /**
0:      * Authenticates a user given a Map<String, String> of credentials.
0:      * Should never return null - always throw AuthenticationException instead.
0:      * Returning AuthenticatedUser.ANONYMOUS_USER is an option as well if authentication is not required.
1:      *
0:      * @throws AuthenticationException if credentials don't match any known user.
1:      */
0:     AuthenticatedUser authenticate(Map<String, String> credentials) throws AuthenticationException;
1: 
1:     /**
0:      * Called during execution of CREATE USER query (also may be called on startup, see seedSuperuserOptions method).
0:      * If authenticator is static then the body of the method should be left blank, but don't throw an exception.
0:      * options are guaranteed to be a subset of supportedOptions().
1:      *
0:      * @param username Username of the user to create.
0:      * @param options Options the user will be created with.
0:      * @throws InvalidRequestException
1:      */
0:     void create(String username, Map<Option, Object> options) throws InvalidRequestException;
1: 
1:     /**
0:      * Called during execution of ALTER USER query.
0:      * options are always guaranteed to be a subset of supportedOptions(). Furthermore, if the user performing the query
0:      * is not a superuser and is altering himself, then options are guaranteed to be a subset of alterableOptions().
0:      * Keep the body of the method blank if your implementation doesn't support any options.
1:      *
0:      * @param username Username of the user that will be altered.
0:      * @param options Options to alter.
0:      * @throws InvalidRequestException
1:      */
0:     void alter(String username, Map<Option, Object> options) throws InvalidRequestException;
1: 
1: 
1:     /**
0:      * Called during execution of DROP USER query.
1:      *
0:      * @param username Username of the user that will be dropped.
0:      * @throws InvalidRequestException
1:      */
0:     void drop(String username) throws InvalidRequestException;
1: 
1:      /**
1:      * Set of resources that should be made inaccessible to users and only accessible internally.
1:      *
0:      * @return Keyspaces, column families that will be unreadable and unmodifiable by users; other resources.
1:      */
1:     Set<? extends IResource> protectedResources();
1: 
1:     /**
1:      * Validates configuration of IAuthenticator implementation (if configurable).
1:      *
1:      * @throws ConfigurationException when there is a configuration error.
1:      */
1:     void validateConfiguration() throws ConfigurationException;
1: 
1:     /**
1:      * Setup is called once upon system startup to initialize the IAuthenticator.
1:      *
1:      * For example, use this method to create any required keyspaces/column families.
1:      */
1:     void setup();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.auth;
commit:0d9fdad
/////////////////////////////////////////////////////////////////////////
0:     public static final String USERNAME_KEY = "username";
0:     public static final String PASSWORD_KEY = "password";
0: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:94c45e7
/////////////////////////////////////////////////////////////////////////
0:     public AuthenticatedUser authenticate(Map<? extends CharSequence,? extends CharSequence> credentials) throws AuthenticationException;
commit:f8f6fb2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
0:     /**
0:      * @return The user that a connection is initialized with, or 'null' if a user must call login().
0:      */
0:     public AuthenticatedUser defaultUser();
0: 
0:     /**
0:      * @param credentials An implementation specific collection of identifying information.
0:      * @return A successfully authenticated user: should throw AuthenticationException rather than ever returning null.
0:      */
0:     public AuthenticatedUser authenticate(Map<String,String> credentials) throws AuthenticationException;
commit:9f65dd4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void validateConfiguration() throws ConfigurationException;
commit:059b006
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AccessLevel;
0:     public AccessLevel login(String keyspace, AuthenticationRequest auth_request) throws AuthenticationException, AuthorizationException;
commit:542bd79
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AuthenticationException;
0: import org.apache.cassandra.thrift.AuthenticationRequest;
0: import org.apache.cassandra.thrift.AuthorizationException;
commit:2f0e62c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.auth;
0: 
0: import org.apache.cassandra.service.AuthenticationException;
0: import org.apache.cassandra.service.AuthenticationRequest;
0: import org.apache.cassandra.service.AuthorizationException;
0: 
1: public interface IAuthenticator
0: {
0:     public void login(String keyspace, AuthenticationRequest auth_request) throws AuthenticationException, AuthorizationException;
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:de5715e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AccessLevel;
0: import org.apache.cassandra.thrift.AuthenticationRequest;
0:     public AccessLevel login(String keyspace, AuthenticationRequest auth_request) throws AuthenticationException, AuthorizationException;
commit:3f9f507
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0:     /**
0:      * @return The user that a connection is initialized with, or 'null' if a user must call login().
0:      */
0:     public AuthenticatedUser defaultUser();
0: 
0:     public AuthenticatedUser login(Map<String,String> credentials) throws AuthenticationException, AuthorizationException;
commit:4d4ef96
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:0160ad5
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
============================================================================