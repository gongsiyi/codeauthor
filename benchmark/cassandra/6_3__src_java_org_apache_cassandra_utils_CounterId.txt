1:07cf56f: /*
1:ab5a8c7:  * Licensed to the Apache Software Foundation (ASF) under one
1:ab5a8c7:  * or more contributor license agreements.  See the NOTICE file
1:ab5a8c7:  * distributed with this work for additional information
1:ab5a8c7:  * regarding copyright ownership.  The ASF licenses this file
1:ab5a8c7:  * to you under the Apache License, Version 2.0 (the
1:ab5a8c7:  * "License"); you may not use this file except in compliance
1:ab5a8c7:  * with the License.  You may obtain a copy of the License at
1:ab5a8c7:  *
1:ab5a8c7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ab5a8c7:  *
1:ab5a8c7:  * Unless required by applicable law or agreed to in writing, software
1:ab5a8c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ab5a8c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ab5a8c7:  * See the License for the specific language governing permissions and
1:ab5a8c7:  * limitations under the License.
3:ab5a8c7:  */
1:ab5a8c7: package org.apache.cassandra.utils;
19:ab5a8c7: 
1:ab5a8c7: import java.nio.ByteBuffer;
1:ab5a8c7: import java.util.concurrent.atomic.AtomicReference;
1:ab5a8c7: 
1:0e96e58: import org.apache.cassandra.db.SystemKeyspace;
1:ab5a8c7: 
1:3b13457: public class CounterId implements Comparable<CounterId>
16:ab5a8c7: {
1:3b13457:     public static final int LENGTH = 16; // we assume a fixed length size for all CounterIds
1:ab5a8c7: 
1:0e96e58:     // Lazy holder because this opens the system keyspace and we want to avoid
1:7dedd60:     // having this triggered during class initialization
1:714c423:     private static class LocalId
1:7dedd60:     {
1:714c423:         static final LocalCounterIdHolder instance = new LocalCounterIdHolder();
1:7dedd60:     }
1:7dedd60: 
1:5a6e2b0:     private final ByteBuffer id;
1:cc69205: 
1:714c423:     private static LocalCounterIdHolder localId()
1:7dedd60:     {
1:714c423:         return LocalId.instance;
1:7dedd60:     }
1:ab5a8c7: 
1:3b13457:     public static CounterId getLocalId()
1:cc69205:     {
1:714c423:         return localId().get();
1:cc69205:     }
1:ab5a8c7: 
4:ab5a8c7:     /**
1:ab5a8c7:      * Function for test purposes, do not use otherwise.
1:3b13457:      * Pack an int in a valid CounterId so that the resulting ids respects the
1:ab5a8c7:      * numerical ordering. Used for creating handcrafted but easy to
1:ab5a8c7:      * understand contexts in unit tests (see CounterContextTest).
1:ab5a8c7:      */
1:3b13457:     public static CounterId fromInt(int n)
1:ab5a8c7:     {
1:ab5a8c7:         long lowBits = 0xC000000000000000L | n;
1:3b13457:         return new CounterId(ByteBuffer.allocate(16).putLong(0, 0).putLong(8, lowBits));
16:ab5a8c7:     }
1:ab5a8c7: 
1:ab5a8c7:     /*
1:ab5a8c7:      * For performance reasons, this function interns the provided ByteBuffer.
1:ab5a8c7:      */
1:3b13457:     public static CounterId wrap(ByteBuffer id)
1:ab5a8c7:     {
1:3b13457:         return new CounterId(id);
1:ab5a8c7:     }
1:ab5a8c7: 
1:3b13457:     public static CounterId wrap(ByteBuffer bb, int offset)
1:ab5a8c7:     {
1:ab5a8c7:         ByteBuffer dup = bb.duplicate();
1:ab5a8c7:         dup.position(offset);
1:ab5a8c7:         dup.limit(dup.position() + LENGTH);
1:ab5a8c7:         return wrap(dup);
1:ab5a8c7:     }
1:ab5a8c7: 
1:3b13457:     private CounterId(ByteBuffer id)
1:ab5a8c7:     {
1:ab5a8c7:         if (id.remaining() != LENGTH)
1:3b13457:             throw new IllegalArgumentException("A CounterId representation is exactly " + LENGTH + " bytes");
1:ab5a8c7: 
2:ab5a8c7:         this.id = id;
1:ab5a8c7:     }
1:cc69205: 
1:3b13457:     public static CounterId generate()
1:ab5a8c7:     {
1:7442fc0:         return new CounterId(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()));
1:ab5a8c7:     }
1:ab5a8c7: 
1:ab5a8c7:     /*
1:ab5a8c7:      * For performance reasons, this function returns a reference to the internal ByteBuffer. Clients not modify the
1:ab5a8c7:      * result of this function.
1:ab5a8c7:      */
1:ab5a8c7:     public ByteBuffer bytes()
1:ab5a8c7:     {
1:ab5a8c7:         return id;
1:ab5a8c7:     }
1:ab5a8c7: 
1:ab5a8c7:     public boolean isLocalId()
1:ab5a8c7:     {
1:ab5a8c7:         return equals(getLocalId());
1:ab5a8c7:     }
1:ab5a8c7: 
1:3b13457:     public int compareTo(CounterId o)
1:ab5a8c7:     {
1:3b13457:         return ByteBufferUtil.compareSubArrays(id, id.position(), o.id, o.id.position(), CounterId.LENGTH);
1:ab5a8c7:     }
1:ab5a8c7: 
1:6ea00a3:     @Override
1:cc69205:     public String toString()
1:cc69205:     {
1:ab5a8c7:         return UUIDGen.getUUID(id).toString();
1:cc69205:     }
1:ab5a8c7: 
1:640deaa:     @Override
1:640deaa:     public boolean equals(Object o)
1:640deaa:     {
1:640deaa:         if (this == o)
1:640deaa:             return true;
1:640deaa:         if (o == null || getClass() != o.getClass())
1:640deaa:             return false;
1:640deaa: 
1:3b13457:         CounterId otherId = (CounterId)o;
1:ab5a8c7:         return id.equals(otherId.id);
1:640deaa:     }
1:640deaa: 
3:ab5a8c7:     @Override
1:6ea00a3:     public int hashCode()
1:6ea00a3:     {
1:ab5a8c7:         return id.hashCode();
1:6ea00a3:     }
1:714c423: 
1:714c423:     private static class LocalCounterIdHolder
1:ab5a8c7:     {
1:3b13457:         private final AtomicReference<CounterId> current;
1:714c423: 
1:714c423:         LocalCounterIdHolder()
1:ab5a8c7:         {
1:99594cd:             current = new AtomicReference<>(wrap(ByteBufferUtil.bytes(SystemKeyspace.getLocalHostId())));
1:ab5a8c7:         }
1:6ea00a3: 
1:714c423:         CounterId get()
1:ab5a8c7:         {
1:714c423:             return current.get();
1:ab5a8c7:         }
1:ab5a8c7:     }
1:ab5a8c7: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:99594cd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             current = new AtomicReference<>(wrap(ByteBufferUtil.bytes(SystemKeyspace.getLocalHostId())));
commit:714c423
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static class LocalId
1:         static final LocalCounterIdHolder instance = new LocalCounterIdHolder();
1:     private static LocalCounterIdHolder localId()
1:         return LocalId.instance;
1:         return localId().get();
/////////////////////////////////////////////////////////////////////////
0:     public static synchronized void renewLocalId()
0:         localId().renew(FBUtilities.timestampMicros());
/////////////////////////////////////////////////////////////////////////
1:     private static class LocalCounterIdHolder
1:         LocalCounterIdHolder()
1: 
0:                 logger.info("Using saved local counter id: {}", id);
1: 
0:             current = new AtomicReference<>(id);
0:         synchronized void renew(long now)
1:         CounterId get()
1:             return current.get();
commit:1c686b2
/////////////////////////////////////////////////////////////////////////
0:                 SystemKeyspace.writeCurrentLocalCounterId(id, FBUtilities.timestampMicros());
0:                 current = new AtomicReference<>(id);
0:                 olds = new CopyOnWriteArrayList<>();
0:                 current = new AtomicReference<>(id);
0:                 olds = new CopyOnWriteArrayList<>(SystemKeyspace.getOldLocalCounterIds());
/////////////////////////////////////////////////////////////////////////
0:             SystemKeyspace.writeCurrentLocalCounterId(newCounterId, now);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.SystemKeyspace;
/////////////////////////////////////////////////////////////////////////
1:     // Lazy holder because this opens the system keyspace and we want to avoid
/////////////////////////////////////////////////////////////////////////
0:             CounterId id = SystemKeyspace.getCurrentLocalCounterId();
0:                 SystemKeyspace.writeCurrentLocalCounterId(null, id, FBUtilities.timestampMicros());
/////////////////////////////////////////////////////////////////////////
0:                 olds = new CopyOnWriteArrayList<CounterIdRecord>(SystemKeyspace.getOldLocalCounterIds());
/////////////////////////////////////////////////////////////////////////
0:             SystemKeyspace.writeCurrentLocalCounterId(old, newCounterId, now);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.CounterCell;
/////////////////////////////////////////////////////////////////////////
0:         public void maybeRenew(CounterCell column)
commit:7442fc0
/////////////////////////////////////////////////////////////////////////
1:         return new CounterId(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()));
commit:3b13457
/////////////////////////////////////////////////////////////////////////
1: public class CounterId implements Comparable<CounterId>
0:     private static final Logger logger = LoggerFactory.getLogger(CounterId.class);
1:     public static final int LENGTH = 16; // we assume a fixed length size for all CounterIds
0:         static final LocalCounterIdHistory instance = new LocalCounterIdHistory();
0:     private static LocalCounterIdHistory localIds()
1:     public static CounterId getLocalId()
0:      * Renew the local counter id.
/////////////////////////////////////////////////////////////////////////
0:      * Return the list of old local counter id of this node.
0:      * It is guaranteed that the returned list is sorted by growing counter id
0:      * (and hence the first item will be the oldest counter id for this host)
0:     public static List<CounterIdRecord> getOldLocalCounterIds()
1:      * Pack an int in a valid CounterId so that the resulting ids respects the
1:     public static CounterId fromInt(int n)
1:         return new CounterId(ByteBuffer.allocate(16).putLong(0, 0).putLong(8, lowBits));
1:     public static CounterId wrap(ByteBuffer id)
1:         return new CounterId(id);
1:     public static CounterId wrap(ByteBuffer bb, int offset)
/////////////////////////////////////////////////////////////////////////
1:     private CounterId(ByteBuffer id)
1:             throw new IllegalArgumentException("A CounterId representation is exactly " + LENGTH + " bytes");
1:     public static CounterId generate()
0:         return new CounterId(ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress()))));
/////////////////////////////////////////////////////////////////////////
1:     public int compareTo(CounterId o)
1:         return ByteBufferUtil.compareSubArrays(id, id.position(), o.id, o.id.position(), CounterId.LENGTH);
/////////////////////////////////////////////////////////////////////////
1:         CounterId otherId = (CounterId)o;
/////////////////////////////////////////////////////////////////////////
0:         private final CounterId initialId;
/////////////////////////////////////////////////////////////////////////
0:             if (!renewed && column.hasCounterId(initialId))
/////////////////////////////////////////////////////////////////////////
0:     private static class LocalCounterIdHistory
1:         private final AtomicReference<CounterId> current;
0:         private final List<CounterIdRecord> olds;
0:         LocalCounterIdHistory()
0:             CounterId id = SystemTable.getCurrentLocalCounterId();
0:                 // no recorded local counter id, generating a new one and saving it
0:                 logger.info("No saved local counter id, using newly generated: {}", id);
0:                 SystemTable.writeCurrentLocalCounterId(null, id, FBUtilities.timestampMicros());
0:                 current = new AtomicReference<CounterId>(id);
0:                 olds = new CopyOnWriteArrayList<CounterIdRecord>();
0:                 logger.info("Saved local counter id: {}", id);
0:                 current = new AtomicReference<CounterId>(id);
0:                 olds = new CopyOnWriteArrayList<CounterIdRecord>(SystemTable.getOldLocalCounterIds());
0:             CounterId newCounterId = generate();
0:             CounterId old = current.get();
0:             SystemTable.writeCurrentLocalCounterId(old, newCounterId, now);
0:             current.set(newCounterId);
0:             olds.add(new CounterIdRecord(old, now));
0:     public static class CounterIdRecord
0:         public final CounterId id;
0:         public CounterIdRecord(CounterId id, long timestamp)
/////////////////////////////////////////////////////////////////////////
0:             CounterIdRecord otherRecord = (CounterIdRecord)o;
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     private final ByteBuffer id;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:6ea00a3
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Objects;
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public int hashCode()
1:         {
0:             return Objects.hashCode(id, timestamp);
1:         }
1: 
commit:640deaa
/////////////////////////////////////////////////////////////////////////
0:                 SystemTable.writeCurrentLocalNodeId(null, id, System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
0:             SystemTable.writeCurrentLocalNodeId(old, newNodeId, now);
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public boolean equals(Object o)
1:         {
1:             if (this == o)
1:                 return true;
1:             if (o == null || getClass() != o.getClass())
1:                 return false;
1: 
0:             NodeIdRecord otherRecord = (NodeIdRecord)o;
0:             return id.equals(otherRecord.id) && timestamp == otherRecord.timestamp;
1:         }
1: 
commit:7dedd60
/////////////////////////////////////////////////////////////////////////
0:     // Lazy holder because this opens the system table and we want to avoid
1:     // having this triggered during class initialization
0:     private static class LocalIds
1:     {
0:         static final LocalNodeIdHistory instance = new LocalNodeIdHistory();
1:     }
0:     private static LocalNodeIdHistory localIds()
1:     {
0:         return LocalIds.instance;
1:     }
1: 
0:         return localIds().current.get();
/////////////////////////////////////////////////////////////////////////
0:         localIds().renewCurrent(now);
/////////////////////////////////////////////////////////////////////////
0:         return localIds().olds;
commit:cc69205
/////////////////////////////////////////////////////////////////////////
0:     public static void renewLocalId()
0:         renewLocalId(System.currentTimeMillis());
1:     }
1: 
0:     public static synchronized void renewLocalId(long now)
1:     {
0:         localIds.renewCurrent(now);
/////////////////////////////////////////////////////////////////////////
0:         synchronized void renewCurrent(long now)
0:             olds.add(new NodeIdRecord(old, now));
/////////////////////////////////////////////////////////////////////////
1: 
1:         public String toString()
1:         {
0:             return String.format("(%s, %d)", id.toString(), timestamp);
1:         }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7588f74
/////////////////////////////////////////////////////////////////////////
0:                 olds = new CopyOnWriteArrayList<NodeIdRecord>();
0:                 olds = new CopyOnWriteArrayList<NodeIdRecord>(SystemTable.getOldLocalNodeIds());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:cf0b69f
/////////////////////////////////////////////////////////////////////////
0:         renewLocalId(FBUtilities.timestampMicros());
/////////////////////////////////////////////////////////////////////////
0:                 SystemTable.writeCurrentLocalNodeId(null, id, FBUtilities.timestampMicros());
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         return new NodeId(ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress()))));
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:ab5a8c7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.utils;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.List;
1: import java.util.concurrent.atomic.AtomicReference;
0: import java.util.concurrent.CopyOnWriteArrayList;
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.db.CounterColumn;
0: import org.apache.cassandra.db.SystemTable;
1: 
0: public class NodeId implements Comparable<NodeId>
1: {
0:     private static final Logger logger = LoggerFactory.getLogger(NodeId.class);
1: 
0:     public static final int LENGTH = 16; // we assume a fixed length size for all NodeIds
1: 
0:     private static final LocalNodeIdHistory localIds = new LocalNodeIdHistory();
1: 
0:     private ByteBuffer id;
1: 
0:     public static NodeId getLocalId()
1:     {
0:         return localIds.current.get();
1:     }
1: 
1:     /**
0:      * Renew the local node id.
0:      * To use only when this strictly necessary, as using this will make all
0:      * counter context grow with time.
1:      */
0:     public static synchronized void renewLocalId()
1:     {
0:         localIds.renewCurrent();
1:     }
1: 
1:     /**
0:      * Return the list of old local node id of this node.
0:      * It is guaranteed that the returned list is sorted by growing node id
0:      * (and hence the first item will be the oldest node id for this host)
1:      */
0:     public static List<NodeIdRecord> getOldLocalNodeIds()
1:     {
0:         return localIds.olds;
1:     }
1: 
1:     /**
1:      * Function for test purposes, do not use otherwise.
0:      * Pack an int in a valid NodeId so that the resulting ids respects the
1:      * numerical ordering. Used for creating handcrafted but easy to
1:      * understand contexts in unit tests (see CounterContextTest).
1:      */
0:     public static NodeId fromInt(int n)
1:     {
1:         long lowBits = 0xC000000000000000L | n;
0:         return new NodeId(ByteBuffer.allocate(16).putLong(0, 0).putLong(8, lowBits));
1:     }
1: 
1:     /*
1:      * For performance reasons, this function interns the provided ByteBuffer.
1:      */
0:     public static NodeId wrap(ByteBuffer id)
1:     {
0:         return new NodeId(id);
1:     }
1: 
0:     public static NodeId wrap(ByteBuffer bb, int offset)
1:     {
1:         ByteBuffer dup = bb.duplicate();
1:         dup.position(offset);
1:         dup.limit(dup.position() + LENGTH);
1:         return wrap(dup);
1:     }
1: 
0:     private NodeId(ByteBuffer id)
1:     {
1:         if (id.remaining() != LENGTH)
0:             throw new IllegalArgumentException("A NodeId representation is exactly " + LENGTH + " bytes");
1: 
1:         this.id = id;
1:     }
1: 
0:     public static NodeId generate()
1:     {
0:         return new NodeId(ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()))));
1:     }
1: 
1:     /*
1:      * For performance reasons, this function returns a reference to the internal ByteBuffer. Clients not modify the
1:      * result of this function.
1:      */
1:     public ByteBuffer bytes()
1:     {
1:         return id;
1:     }
1: 
1:     public boolean isLocalId()
1:     {
1:         return equals(getLocalId());
1:     }
1: 
0:     public int compareTo(NodeId o)
1:     {
0:         return ByteBufferUtil.compareSubArrays(id, id.position(), o.id, o.id.position(), NodeId.LENGTH);
1:     }
1: 
1:     @Override
0:     public String toString()
1:     {
1:         return UUIDGen.getUUID(id).toString();
1:     }
1: 
1:     @Override
0:     public boolean equals(Object o)
1:     {
0:         if (this == o)
0:             return true;
0:         if (o == null || getClass() != o.getClass())
0:             return false;
1: 
0:         NodeId otherId = (NodeId)o;
1:         return id.equals(otherId.id);
1:     }
1: 
1:     @Override
0:     public int hashCode()
1:     {
1:         return id.hashCode();
1:     }
1: 
0:     public static class OneShotRenewer
1:     {
0:         private boolean renewed;
0:         private final NodeId initialId;
1: 
0:         public OneShotRenewer()
1:         {
0:             renewed = false;
0:             initialId = getLocalId();
1:         }
1: 
0:         public void maybeRenew(CounterColumn column)
1:         {
0:             if (!renewed && column.hasNodeId(initialId))
1:             {
0:                 renewLocalId();
0:                 renewed = true;
1:             }
1:         }
1:     }
1: 
0:     private static class LocalNodeIdHistory
1:     {
0:         private final AtomicReference<NodeId> current;
0:         private final List<NodeIdRecord> olds;
1: 
0:         LocalNodeIdHistory()
1:         {
0:             NodeId id = SystemTable.getCurrentLocalNodeId();
0:             if (id == null)
1:             {
0:                 // no recorded local node id, generating a new one and saving it
0:                 id = generate();
0:                 logger.info("No saved local node id, using newly generated: {}", id);
0:                 SystemTable.writeCurrentLocalNodeId(null, id);
0:                 current = new AtomicReference<NodeId>(id);
0:                 olds = new CopyOnWriteArrayList();
1:             }
0:             else
1:             {
0:                 logger.info("Saved local node id: {}", id);
0:                 current = new AtomicReference<NodeId>(id);
0:                 olds = new CopyOnWriteArrayList(SystemTable.getOldLocalNodeIds());
1:             }
1:         }
1: 
0:         synchronized void renewCurrent()
1:         {
0:             NodeId newNodeId = generate();
0:             NodeId old = current.get();
0:             SystemTable.writeCurrentLocalNodeId(old, newNodeId);
0:             current.set(newNodeId);
0:             olds.add(new NodeIdRecord(old));
1:         }
1:     }
1: 
0:     public static class NodeIdRecord
1:     {
0:         public final NodeId id;
0:         public final long timestamp;
1: 
0:         public NodeIdRecord(NodeId id)
1:         {
0:             this(id, System.currentTimeMillis());
1:         }
1: 
0:         public NodeIdRecord(NodeId id, long timestamp)
1:         {
1:             this.id = id;
0:             this.timestamp = timestamp;
1:         }
1:     }
1: }
============================================================================