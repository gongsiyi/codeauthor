1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
2:066ef58:  */
1:066ef58: package org.apache.cassandra.net;
1:ef25537: 
1:1d2c122: import java.util.concurrent.TimeUnit;
1:1d2c122: 
1:0095f0c: import org.slf4j.Logger;
1:0095f0c: import org.slf4j.LoggerFactory;
1:14d0647: 
1:d7ff10d: import org.apache.cassandra.tracing.Tracing;
1:ef25537: 
1:745fb44: public class ResponseVerbHandler implements IVerbHandler
1:88c94a7: {
1:910b663:     private static final Logger logger = LoggerFactory.getLogger( ResponseVerbHandler.class );
1:14d0647: 
1:1936648:     public void doVerb(MessageIn message, int id)
1:8a5b90e:     {
1:1d2c122:         long latency = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - MessagingService.instance().getRegisteredCallbackAge(id));
1:3893f24:         CallbackInfo callbackInfo = MessagingService.instance().removeRegisteredCallback(id);
1:3893f24:         if (callbackInfo == null)
2:bdb7bda:         {
1:d7ff10d:             String msg = "Callback already removed for {} (from {})";
1:4a849ef:             logger.trace(msg, id, message.from);
1:d7ff10d:             Tracing.trace(msg, id, message.from);
1:14d0647:             return;
1:88c94a7:         }
1:4722fe7: 
1:aebe612:         Tracing.trace("Processing response from {}", message.from);
1:3d4c2f9:         IAsyncCallback cb = callbackInfo.callback;
1:8a5b90e:         if (message.isFailureResponse())
1:4722fe7:         {
1:39df31a:             ((IAsyncCallbackWithFailure) cb).onFailure(message.from, message.getFailureReason());
1:8a5b90e:         }
1:8a5b90e:         else
1:8a5b90e:         {
1:8a5b90e:             //TODO: Should we add latency only in success cases?
1:8a5b90e:             MessagingService.instance().maybeAddLatency(cb, message.from, latency);
1:8a5b90e:             cb.response(message);
1:4722fe7:         }
1:d43b9ce: 
1:d43b9ce:         if (callbackInfo.callback.supportsBackPressure())
1:d43b9ce:         {
1:d43b9ce:             MessagingService.instance().updateBackPressureOnReceive(message.from, cb, false);
1:d43b9ce:         }
1:8a5b90e:     }
1:bdb7bda: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (callbackInfo.callback.supportsBackPressure())
1:         {
1:             MessagingService.instance().updateBackPressureOnReceive(message.from, cb, false);
1:         }
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:39df31a
/////////////////////////////////////////////////////////////////////////
1:             ((IAsyncCallbackWithFailure) cb).onFailure(message.from, message.getFailureReason());
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:             logger.trace(msg, id, message.from);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:3ca9576
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:a1348aa
/////////////////////////////////////////////////////////////////////////
commit:4722fe7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.IMutation;
/////////////////////////////////////////////////////////////////////////
1: 
0:         // We don't need to track the mutation anymore since write succeeded
0:         if (callbackInfo instanceof WriteCallbackInfo)
1:         {
0:             ((IMutation)((WriteCallbackInfo) callbackInfo).sentMessage.payload).release();
1:         }
author:sankalp kohli
-------------------------------------------------------------------------------
commit:8a5b90e
/////////////////////////////////////////////////////////////////////////
1:         if (message.isFailureResponse())
1:         {
0:             ((IAsyncCallbackWithFailure) cb).onFailure(message.from);
1:         }
1:         else
1:         {
1:             //TODO: Should we add latency only in success cases?
1:             MessagingService.instance().maybeAddLatency(cb, message.from, latency);
1:             cb.response(message);
1:         }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1:         long latency = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - MessagingService.instance().getRegisteredCallbackAge(id));
commit:aebe612
/////////////////////////////////////////////////////////////////////////
1:         Tracing.trace("Processing response from {}", message.from);
0:         cb.response(message);
commit:2923123
/////////////////////////////////////////////////////////////////////////
0:             ((AsyncOneResponse) cb).response(message);
commit:3d4c2f9
/////////////////////////////////////////////////////////////////////////
1:         IAsyncCallback cb = callbackInfo.callback;
/////////////////////////////////////////////////////////////////////////
0:             ((AsyncResult) cb).response(message);
commit:e2ecb8a
/////////////////////////////////////////////////////////////////////////
0:             ((AsyncResult) cb).result(message);
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn message, int id)
commit:36b40be
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("Processing response from {}", message.from);
0:             logger.debug("Processing result from {}", message.from);
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().maybeAddLatency(cb, message.from, age);
0:                 logger.debug("Processing response on a callback from " + id + "@" + message.from);
0:                 logger.debug("Processing response on an async result from " + id + "@" + message.from);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(MessageIn message, String id)
commit:3893f24
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         CallbackInfo callbackInfo = MessagingService.instance().removeRegisteredCallback(id);
1:         if (callbackInfo == null)
0:         IMessageCallback cb = callbackInfo.callback;
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
0:         double age = System.currentTimeMillis() - MessagingService.instance().getRegisteredCallbackAge(id);
0:         Pair<InetAddress, IMessageCallback> pair = MessagingService.instance().removeRegisteredCallback(id);
0:             logger_.debug("Callback already removed for {}", id);
/////////////////////////////////////////////////////////////////////////
0:                 logger_.debug("Processing response on a callback from " + id + "@" + message.getFrom());
0:                 logger_.debug("Processing response on an async result from " + id + "@" + message.getFrom());
commit:88c94a7
/////////////////////////////////////////////////////////////////////////
1:         {
0:             logger_.debug("Callback already removed for {}", messageId);
1:         }
commit:745fb44
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.Pair;
1: public class ResponseVerbHandler implements IVerbHandler
0:         Pair<InetAddress, IMessageCallback> pair = MessagingService.instance().removeRegisteredCallback(messageId);
0:         if (pair == null)
0:         IMessageCallback cb = pair.right;
0:         MessagingService.instance().maybeAddLatency(cb, message.getFrom(), age);
/////////////////////////////////////////////////////////////////////////
commit:a043125
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().responseReceivedFrom(messageId, message.getFrom());
0:         double age = System.currentTimeMillis() - MessagingService.instance().getRegisteredCallbackAge(messageId);
0:         IMessageCallback cb = MessagingService.instance().getRegisteredCallback(messageId);
commit:14d0647
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         String messageId = message.getMessageId();
0:         MessagingService.responseReceivedFrom(messageId, message.getFrom());
0:         double age = System.currentTimeMillis() - MessagingService.getRegisteredCallbackAge(messageId);
0:         IMessageCallback cb = MessagingService.getRegisteredCallback(messageId);
0:         if (cb == null)
1:             return;
1: 
0:         // if cb is not null, then age will be valid
0:         for (ILatencySubscriber subscriber : subscribers)
0:             subscriber.receiveTiming(message.getFrom(), age);
1: 
0:         if (cb instanceof IAsyncCallback)
0:             ((IAsyncCallback) cb).response(message);
0:             if (logger_.isDebugEnabled())
0:                 logger_.debug("Processing response on an async result from " + message.getMessageId() + "@" + message.getFrom());
0:             ((IAsyncResult) cb).result(message);
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
1: 
1: 
commit:944a2a1
/////////////////////////////////////////////////////////////////////////
0: public class ResponseVerbHandler implements IVerbHandler
commit:bdb7bda
/////////////////////////////////////////////////////////////////////////
0:         if (cb != null)
0:                 logger_.debug("Processing response on a callback from " + message.getMessageId() + "@" + message.getFrom());
0:             synchronized (cb)
1:             {
0:                 cb.response(message);
1:             }
1:         {
0:             if (ar != null)
0:                     logger_.debug("Processing response on an async result from " + message.getMessageId() + "@" + message.getFrom());
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.net;
0: 
0: import org.apache.log4j.Logger;
0: 
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
0: 
0: class ResponseVerbHandler implements IVerbHandler
0: {
0:     private static final Logger logger_ = Logger.getLogger( ResponseVerbHandler.class );
0:     
0:     public void doVerb(Message message)
0:     {     
0:         String messageId = message.getMessageId();        
0:         IAsyncCallback cb = MessagingService.getRegisteredCallback(messageId);
0:         if ( cb != null )
0:         {
0:             if (logger_.isDebugEnabled())
0:               logger_.debug("Processing response on a callback from " + message.getMessageId() + "@" + message.getFrom());
0:             cb.response(message);
0:         }
0:         else
0:         {            
0:             IAsyncResult ar = MessagingService.getAsyncResult(messageId);
0:             if ( ar != null )
0:             {
0:                 if (logger_.isDebugEnabled())
0:                   logger_.debug("Processing response on an async result from " + message.getMessageId() + "@" + message.getFrom());
0:                 ar.result(message);
0:             }
0:         }
0:     }
0: }
commit:0077af4
/////////////////////////////////////////////////////////////////////////
0:             if (logger_.isDebugEnabled())
0:               logger_.debug("Processing response on a callback from " + message.getMessageId() + "@" + message.getFrom());
/////////////////////////////////////////////////////////////////////////
0:                 if (logger_.isDebugEnabled())
0:                   logger_.debug("Processing response on an async result from " + message.getMessageId() + "@" + message.getFrom());
commit:735008d
/////////////////////////////////////////////////////////////////////////
0:             logger_.debug("Processing response on a callback from " + message.getMessageId() + "@" + message.getFrom());
/////////////////////////////////////////////////////////////////////////
0:                 logger_.debug("Processing response on an async result from " + message.getMessageId() + "@" + message.getFrom());
commit:c129b6d
/////////////////////////////////////////////////////////////////////////
0:             logger_.info("Processing response on a callback from " + message.getMessageId() + "@" + message.getFrom());
/////////////////////////////////////////////////////////////////////////
0:                 logger_.info("Processing response on an async result from " + message.getMessageId() + "@" + message.getFrom());
commit:71739ef
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d7ff10d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.tracing.Tracing;
0: 
/////////////////////////////////////////////////////////////////////////
1:             String msg = "Callback already removed for {} (from {})";
0:             logger.debug(msg, id, message.from);
1:             Tracing.trace(msg, id, message.from);
/////////////////////////////////////////////////////////////////////////
0:             Tracing.trace("Processing response from {}", message.from);
0:             Tracing.trace("Processing result from {}", message.from);
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:     {
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:     {
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:910b663
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger( ResponseVerbHandler.class );
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("Callback already removed for {}", id);
/////////////////////////////////////////////////////////////////////////
0:             if (logger.isDebugEnabled())
0:                 logger.debug("Processing response on a callback from " + id + "@" + message.getFrom());
0:             if (logger.isDebugEnabled())
0:                 logger.debug("Processing response on an async result from " + id + "@" + message.getFrom());
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:652ae9a
/////////////////////////////////////////////////////////////////////////
0:         long latency = System.currentTimeMillis() - MessagingService.instance().getRegisteredCallbackAge(id);
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().maybeAddLatency(cb, message.from, latency);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:67c5720
/////////////////////////////////////////////////////////////////////////
0: 
0: import java.util.*;
0: import java.net.InetAddress;
0: import org.apache.cassandra.locator.ILatencyPublisher;
0: import org.apache.cassandra.locator.ILatencySubscriber;
0: public class ResponseVerbHandler implements IVerbHandler, ILatencyPublisher
0:     private List<ILatencySubscriber>  subscribers = new ArrayList<ILatencySubscriber>();
0: 
0: 
0:         double age = 0;
0:             age = System.currentTimeMillis() - MessagingService.getRegisteredCallbackAge(messageId);
/////////////////////////////////////////////////////////////////////////
0:                 age = System.currentTimeMillis() - MessagingService.getAsyncResultAge(messageId);
0:         notifySubscribers(message.getFrom(), age);
0:     }
0: 
0:     private void notifySubscribers(InetAddress host, double latency)
0:     {
0:         for (ILatencySubscriber subscriber : subscribers)
0:         {
0:             subscriber.receiveTiming(host, latency);
0:         }
0:     }
0: 
0:     public void register(ILatencySubscriber subscriber)
0:     {
0:         subscribers.add(subscriber);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:0095f0c
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0:     private static final Logger logger_ = LoggerFactory.getLogger( ResponseVerbHandler.class );
commit:443d534
/////////////////////////////////////////////////////////////////////////
0:             cb.response(message);
author:Avinash Lakshman
-------------------------------------------------------------------------------
commit:5206290
/////////////////////////////////////////////////////////////////////////
0:             IAsyncResult ar = MessagingService.getAsyncResult(messageId);
0:                 ar.result(message);
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.net;
0: 
0: import org.apache.log4j.Logger;
0: 
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: class ResponseVerbHandler implements IVerbHandler
0: {
0:     private static final Logger logger_ = Logger.getLogger( ResponseVerbHandler.class );
0:     
0:     public void doVerb(Message message)
0:     {     
0:         String messageId = message.getMessageId();        
0:         IAsyncCallback cb = MessagingService.getRegisteredCallback(messageId);
0:         if ( cb != null )
0:         {
0:             logger_.info("Processing response on a callback from " + message.getFrom());
0:             cb.response(message);
0:         }
0:         else
0:         {            
0:             AsyncResult ar = (AsyncResult)MessagingService.getAsyncResult(messageId);
0:             if ( ar != null )
0:             {
0:                 logger_.info("Processing response on an async result from " + message.getFrom());
0:                 ar.result(message.getMessageBody());
0:             }
0:         }
0:     }
0: }
============================================================================