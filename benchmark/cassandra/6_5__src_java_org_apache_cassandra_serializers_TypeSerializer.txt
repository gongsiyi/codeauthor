1:f35a6b5: /*
1:f35a6b5:  * Licensed to the Apache Software Foundation (ASF) under one
1:f35a6b5:  * or more contributor license agreements.  See the NOTICE file
1:f35a6b5:  * distributed with this work for additional information
1:f35a6b5:  * regarding copyright ownership.  The ASF licenses this file
1:f35a6b5:  * to you under the Apache License, Version 2.0 (the
1:f35a6b5:  * "License"); you may not use this file except in compliance
1:f35a6b5:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:f35a6b5:  */
1:e9c6742: 
1:fc8b76f: package org.apache.cassandra.serializers;
4:f35a6b5: 
1:f35a6b5: import java.nio.ByteBuffer;
1:e9c6742: 
1:fc8b76f: public interface TypeSerializer<T>
2:f35a6b5: {
1:daff1fc:     public ByteBuffer serialize(T value);
1:1db386e: 
1:1db386e:     /*
1:1db386e:      * Does not modify the position or limit of the buffer even temporarily.
1:1db386e:      */
1:daff1fc:     public T deserialize(ByteBuffer bytes);
1:e9c6742: 
1:daff1fc:     /*
1:daff1fc:      * Validate that the byte array is a valid sequence for the type this represents.
1:daff1fc:      * This guarantees deserialize() can be called without errors.
1:1db386e:      *
1:1db386e:      * Does not modify the position or limit of the buffer even temporarily
1:daff1fc:      */
1:fc8b76f:     public void validate(ByteBuffer bytes) throws MarshalException;
1:e9c6742: 
1:fc8b76f:     public String toString(T value);
1:e9c6742: 
1:fc8b76f:     public Class<T> getType();
1:e94032a: 
1:c6ed2e0:     public default String toCQLLiteral(ByteBuffer buffer)
1:e94032a:     {
1:c6ed2e0:         return buffer == null || !buffer.hasRemaining()
1:c6ed2e0:              ? "null"
1:c6ed2e0:              : toString(deserialize(buffer));
1:e94032a:     }
2:f35a6b5: }
1:107545b: 
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:6237022
commit:c6ed2e0
/////////////////////////////////////////////////////////////////////////
1:     public default String toCQLLiteral(ByteBuffer buffer)
1:         return buffer == null || !buffer.hasRemaining()
1:              ? "null"
1:              : toString(deserialize(buffer));
commit:fb9e75e
commit:e94032a
/////////////////////////////////////////////////////////////////////////
1: 
0:     public default void toCQLLiteral(ByteBuffer buffer, StringBuilder target)
1:     {
0:         if (buffer == null || !buffer.hasRemaining())
0:             target.append("null");
0:         else
0:             target.append(toString(deserialize(buffer)));
1:     }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:1db386e
/////////////////////////////////////////////////////////////////////////
1: 
1:     /*
1:      * Does not modify the position or limit of the buffer even temporarily.
1:      */
1:      *
1:      * Does not modify the position or limit of the buffer even temporarily
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer serialize(T value);
1:     public T deserialize(ByteBuffer bytes);
1:     /*
1:      * Validate that the byte array is a valid sequence for the type this represents.
1:      * This guarantees deserialize() can be called without errors.
1:      */
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
1: public interface TypeSerializer<T>
0:     public T serialize(ByteBuffer bytes);
0:     public ByteBuffer deserialize(T value);
1:     public void validate(ByteBuffer bytes) throws MarshalException;
0:     public String getString(ByteBuffer bytes);
1:     public String toString(T value);
1:     public Class<T> getType();
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: 
0: package org.apache.cassandra.type;
0: public abstract class AbstractSerializer<T>
0:     public abstract T serialize(ByteBuffer bytes);
0:     public abstract ByteBuffer deserialize(T value);
1: 
1: 
0:     /* validate that the byte array is a valid sequence for the type we are supposed to be comparing */
0:     public abstract void validate(ByteBuffer bytes) throws MarshalException;
1: 
0:     public abstract String toString(T value);
1: 
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.cql.jdbc;
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:     public abstract ByteBuffer decompose(T obj);
commit:f35a6b5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql.term;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
1: 
1: import java.nio.ByteBuffer;
1: 
0: public abstract class AbstractTerm<T>
1: {
0:     public abstract boolean isCaseSensitive();
0:     public abstract int getScale(T obj);
0:     public abstract int getPrecision(T obj);
0:     public abstract boolean isCurrency();
0:     public abstract boolean isSigned();
0:     public abstract String toString(T obj);
0:     public abstract boolean needsQuotes();
0:     public abstract String getString(ByteBuffer bytes);
0:     public abstract Class<T> getType();
0:     public abstract int getJdbcType();
0:     public abstract T compose(ByteBuffer bytes);
1:     
0:     public boolean isCommutative()
1:     {
0:         return false;
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql.jdbc;
/////////////////////////////////////////////////////////////////////////
0: public abstract class AbstractJdbcType<T>
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
============================================================================