1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import io.airlift.command.Arguments;
1:c5a8190: import io.airlift.command.Command;
1:95d927d: import io.airlift.command.Option;
1:c5a8190: 
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:c5a8190: 
1:c5a8190: @Command(name = "rebuild", description = "Rebuild data by streaming from other nodes (similarly to bootstrap)")
1:c5a8190: public class Rebuild extends NodeToolCmd
1:c5a8190: {
1:95d927d:     @Arguments(usage = "<src-dc-name>",
1:95d927d:                description = "Name of DC from which to select sources for streaming. By default, pick any DC")
1:c5a8190:     private String sourceDataCenterName = null;
1:c5a8190: 
1:95d927d:     @Option(title = "specific_keyspace",
1:95d927d:             name = {"-ks", "--keyspace"},
1:95d927d:             description = "Use -ks to rebuild specific keyspace.")
1:95d927d:     private String keyspace = null;
1:95d927d: 
1:95d927d:     @Option(title = "specific_tokens",
1:95d927d:             name = {"-ts", "--tokens"},
1:95d927d:             description = "Use -ts to rebuild specific token ranges, in the format of \"(start_token_1,end_token_1],(start_token_2,end_token_2],...(start_token_n,end_token_n]\".")
1:95d927d:     private String tokens = null;
1:95d927d: 
1:824cb76:     @Option(title = "specific_sources",
1:824cb76:             name = {"-s", "--sources"},
1:824cb76:             description = "Use -s to specify hosts that this node should stream from when -ts is used. Multiple hosts should be separated using commas (e.g. 127.0.0.1,127.0.0.2,...)")
1:824cb76:     private String specificSources = null;
1:824cb76: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:95d927d:         // check the arguments
1:95d927d:         if (keyspace == null && tokens != null)
1:95d927d:         {
1:95d927d:             throw new IllegalArgumentException("Cannot specify tokens without keyspace.");
1:95d927d:         }
1:95d927d: 
1:824cb76:         probe.rebuild(sourceDataCenterName, keyspace, tokens, specificSources);
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:824cb76
/////////////////////////////////////////////////////////////////////////
1:     @Option(title = "specific_sources",
1:             name = {"-s", "--sources"},
1:             description = "Use -s to specify hosts that this node should stream from when -ts is used. Multiple hosts should be separated using commas (e.g. 127.0.0.1,127.0.0.2,...)")
1:     private String specificSources = null;
1: 
/////////////////////////////////////////////////////////////////////////
1:         probe.rebuild(sourceDataCenterName, keyspace, tokens, specificSources);
author:Dikang Gu
-------------------------------------------------------------------------------
commit:95d927d
/////////////////////////////////////////////////////////////////////////
1: import io.airlift.command.Option;
/////////////////////////////////////////////////////////////////////////
1:     @Arguments(usage = "<src-dc-name>",
1:                description = "Name of DC from which to select sources for streaming. By default, pick any DC")
1:     @Option(title = "specific_keyspace",
1:             name = {"-ks", "--keyspace"},
1:             description = "Use -ks to rebuild specific keyspace.")
1:     private String keyspace = null;
1: 
1:     @Option(title = "specific_tokens",
1:             name = {"-ts", "--tokens"},
1:             description = "Use -ts to rebuild specific token ranges, in the format of \"(start_token_1,end_token_1],(start_token_2,end_token_2],...(start_token_n,end_token_n]\".")
1:     private String tokens = null;
1: 
1:         // check the arguments
1:         if (keyspace == null && tokens != null)
1:         {
1:             throw new IllegalArgumentException("Cannot specify tokens without keyspace.");
1:         }
1: 
0:         probe.rebuild(sourceDataCenterName, keyspace, tokens);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "rebuild", description = "Rebuild data by streaming from other nodes (similarly to bootstrap)")
1: public class Rebuild extends NodeToolCmd
1: {
0:     @Arguments(usage = "<src-dc-name>", description = "Name of DC from which to select sources for streaming. By default, pick any DC")
1:     private String sourceDataCenterName = null;
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
0:         probe.rebuild(sourceDataCenterName);
1:     }
1: }
============================================================================