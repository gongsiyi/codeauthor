1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.DataInput;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.io.RandomAccessFile;
1:96d41f0: import java.nio.charset.StandardCharsets;
1:96d41f0: import java.nio.file.Path;
1:90033b9: import java.util.HashMap;
1:96d41f0: import java.util.Map;
1:96d41f0: import java.util.UUID;
1:96d41f0: import java.util.regex.Pattern;
1:96d41f0: import java.util.zip.CRC32;
1:90033b9: import javax.crypto.Cipher;
1:96d41f0: 
1:96d41f0: import com.google.common.base.MoreObjects;
1:96d41f0: import com.google.common.base.Objects;
1:96d41f0: import com.google.common.collect.ImmutableMap;
1:90033b9: import org.slf4j.Logger;
1:90033b9: import org.slf4j.LoggerFactory;
1:96d41f0: 
1:90033b9: import org.apache.cassandra.config.DatabaseDescriptor;
1:c20566f: import org.apache.cassandra.config.ParameterizedClass;
1:96d41f0: import org.apache.cassandra.db.TypeSizes;
1:96d41f0: import org.apache.cassandra.io.FSReadError;
1:c20566f: import org.apache.cassandra.io.compress.ICompressor;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputPlus;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:c20566f: import org.apache.cassandra.schema.CompressionParams;
1:90033b9: import org.apache.cassandra.security.EncryptionContext;
1:90033b9: import org.apache.cassandra.utils.Hex;
1:96d41f0: import org.json.simple.JSONValue;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1:96d41f0: 
1:96d41f0: /**
1:96d41f0:  * Describes the host id, the version, the timestamp of creation, and an arbitrary map of JSON-encoded parameters of a
1:96d41f0:  * hints file.
1:96d41f0:  *
1:96d41f0:  * Written in the beginning of each hints file.
1:96d41f0:  */
1:96d41f0: final class HintsDescriptor
1:96d41f0: {
1:90033b9:     private static final Logger logger = LoggerFactory.getLogger(HintsDescriptor.class);
1:90033b9: 
1:96d41f0:     static final int VERSION_30 = 1;
1:96d41f0:     static final int CURRENT_VERSION = VERSION_30;
1:96d41f0: 
1:c20566f:     static final String COMPRESSION = "compression";
1:90033b9:     static final String ENCRYPTION = "encryption";
1:c20566f: 
1:96d41f0:     static final Pattern pattern =
1:96d41f0:         Pattern.compile("^[a-fA-F0-9]{8}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{12}\\-(\\d+)\\-(\\d+)\\.hints$");
1:96d41f0: 
1:96d41f0:     final UUID hostId;
1:96d41f0:     final int version;
1:96d41f0:     final long timestamp;
1:96d41f0: 
1:96d41f0:     final ImmutableMap<String, Object> parameters;
1:c20566f:     final ParameterizedClass compressionConfig;
1:96d41f0: 
1:90033b9:     private final Cipher cipher;
1:90033b9:     private final ICompressor compressor;
1:90033b9: 
1:96d41f0:     HintsDescriptor(UUID hostId, int version, long timestamp, ImmutableMap<String, Object> parameters)
1:96d41f0:     {
1:96d41f0:         this.hostId = hostId;
1:96d41f0:         this.version = version;
1:96d41f0:         this.timestamp = timestamp;
1:c20566f:         compressionConfig = createCompressionConfig(parameters);
1:90033b9: 
1:90033b9:         EncryptionData encryption = createEncryption(parameters);
1:90033b9:         if (encryption == null)
1:90033b9:         {
1:90033b9:             cipher = null;
1:90033b9:             compressor = null;
1:90033b9:         }
1:90033b9:         else
1:90033b9:         {
1:90033b9:             if (compressionConfig != null)
1:90033b9:                 throw new IllegalStateException("a hints file cannot be configured for both compression and encryption");
1:90033b9:             cipher = encryption.cipher;
1:90033b9:             compressor = encryption.compressor;
1:90033b9:             parameters = encryption.params;
1:90033b9:         }
1:90033b9: 
1:90033b9:         this.parameters = parameters;
1:c20566f:     }
1:c20566f: 
1:c20566f:     HintsDescriptor(UUID hostId, long timestamp, ImmutableMap<String, Object> parameters)
1:c20566f:     {
1:c20566f:         this(hostId, CURRENT_VERSION, timestamp, parameters);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     HintsDescriptor(UUID hostId, long timestamp)
1:96d41f0:     {
1:96d41f0:         this(hostId, CURRENT_VERSION, timestamp, ImmutableMap.<String, Object>of());
1:96d41f0:     }
1:96d41f0: 
1:c20566f:     @SuppressWarnings("unchecked")
1:c20566f:     static ParameterizedClass createCompressionConfig(Map<String, Object> params)
1:c20566f:     {
1:c20566f:         if (params.containsKey(COMPRESSION))
1:c20566f:         {
1:c20566f:             Map<String, Object> compressorConfig = (Map<String, Object>) params.get(COMPRESSION);
1:c20566f:             return new ParameterizedClass((String) compressorConfig.get(ParameterizedClass.CLASS_NAME),
1:c20566f:                                           (Map<String, String>) compressorConfig.get(ParameterizedClass.PARAMETERS));
1:c20566f:         }
1:c20566f:         else
1:c20566f:         {
1:c20566f:             return null;
1:c20566f:         }
1:c20566f:     }
1:c20566f: 
1:90033b9:     /**
1:90033b9:      * Create, if necessary, the required encryption components (for either decrpyt or encrypt operations).
1:90033b9:      * Note that in the case of encyption (this is, when writing out a new hints file), we need to write
1:90033b9:      * the cipher's IV out to the header so it can be used when decrypting. Thus, we need to add an additional
1:90033b9:      * entry to the {@code params} map.
1:90033b9:      *
1:90033b9:      * @param params the base parameters into the descriptor.
1:90033b9:      * @return null if not using encryption; else, the initialized {@link Cipher} and a possibly updated version
1:90033b9:      * of the {@code params} map.
1:90033b9:      */
1:90033b9:     @SuppressWarnings("unchecked")
1:90033b9:     static EncryptionData createEncryption(ImmutableMap<String, Object> params)
1:90033b9:     {
1:90033b9:         if (params.containsKey(ENCRYPTION))
1:90033b9:         {
1:90033b9:             Map<?, ?> encryptionConfig = (Map<?, ?>) params.get(ENCRYPTION);
1:90033b9:             EncryptionContext encryptionContext = EncryptionContext.createFromMap(encryptionConfig, DatabaseDescriptor.getEncryptionContext());
1:90033b9: 
1:90033b9:             try
1:90033b9:             {
1:90033b9:                 Cipher cipher;
1:90033b9:                 if (encryptionConfig.containsKey(EncryptionContext.ENCRYPTION_IV))
1:90033b9:                 {
1:90033b9:                     cipher = encryptionContext.getDecryptor();
1:90033b9:                 }
1:90033b9:                 else
1:90033b9:                 {
1:90033b9:                     cipher = encryptionContext.getEncryptor();
1:90033b9:                     ImmutableMap<String, Object> encParams = ImmutableMap.<String, Object>builder()
1:90033b9:                                                                  .putAll(encryptionContext.toHeaderParameters())
1:90033b9:                                                                  .put(EncryptionContext.ENCRYPTION_IV, Hex.bytesToHex(cipher.getIV()))
1:90033b9:                                                                  .build();
1:90033b9: 
1:90033b9:                     Map<String, Object> map = new HashMap<>(params);
1:90033b9:                     map.put(ENCRYPTION, encParams);
1:90033b9:                     params = ImmutableMap.<String, Object>builder().putAll(map).build();
1:90033b9:                 }
1:90033b9:                 return new EncryptionData(cipher, encryptionContext.getCompressor(), params);
1:90033b9:             }
1:90033b9:             catch (IOException ioe)
1:90033b9:             {
1:90033b9:                 logger.warn("failed to create encyption context for hints file. ignoring encryption for hints.", ioe);
1:90033b9:                 return null;
1:90033b9:             }
1:90033b9:         }
1:90033b9:         else
1:90033b9:         {
1:90033b9:             return null;
1:90033b9:         }
1:90033b9:     }
1:90033b9: 
1:90033b9:     private static final class EncryptionData
1:90033b9:     {
1:90033b9:         final Cipher cipher;
1:90033b9:         final ICompressor compressor;
1:90033b9:         final ImmutableMap<String, Object> params;
1:90033b9: 
1:90033b9:         private EncryptionData(Cipher cipher, ICompressor compressor, ImmutableMap<String, Object> params)
1:90033b9:         {
1:90033b9:             this.cipher = cipher;
1:90033b9:             this.compressor = compressor;
1:90033b9:             this.params = params;
1:90033b9:         }
1:90033b9:     }
1:90033b9: 
1:96d41f0:     String fileName()
1:96d41f0:     {
1:96d41f0:         return String.format("%s-%s-%s.hints", hostId, timestamp, version);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     String checksumFileName()
1:96d41f0:     {
1:96d41f0:         return String.format("%s-%s-%s.crc32", hostId, timestamp, version);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     int messagingVersion()
1:96d41f0:     {
1:96d41f0:         return messagingVersion(version);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     static int messagingVersion(int hintsVersion)
1:96d41f0:     {
1:96d41f0:         switch (hintsVersion)
1:96d41f0:         {
1:96d41f0:             case VERSION_30:
1:96d41f0:                 return MessagingService.VERSION_30;
1:96d41f0:             default:
1:96d41f0:                 throw new AssertionError();
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     static boolean isHintFileName(Path path)
1:96d41f0:     {
1:96d41f0:         return pattern.matcher(path.getFileName().toString()).matches();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     static HintsDescriptor readFromFile(Path path)
1:96d41f0:     {
1:96d41f0:         try (RandomAccessFile raf = new RandomAccessFile(path.toFile(), "r"))
1:96d41f0:         {
1:96d41f0:             return deserialize(raf);
1:96d41f0:         }
1:96d41f0:         catch (IOException e)
1:96d41f0:         {
1:96d41f0:             throw new FSReadError(e, path.toFile());
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:c20566f:     public boolean isCompressed()
1:c20566f:     {
1:c20566f:         return compressionConfig != null;
1:c20566f:     }
1:c20566f: 
1:90033b9:     public boolean isEncrypted()
1:90033b9:     {
1:90033b9:         return cipher != null;
1:90033b9:     }
1:90033b9: 
1:c20566f:     public ICompressor createCompressor()
1:c20566f:     {
1:90033b9:         if (isCompressed())
1:90033b9:             return CompressionParams.createCompressor(compressionConfig);
1:90033b9:         if (isEncrypted())
1:90033b9:             return compressor;
1:90033b9:         return null;
1:90033b9:     }
1:90033b9: 
1:90033b9:     public Cipher getCipher()
1:90033b9:     {
1:90033b9:         return isEncrypted() ? cipher : null;
1:c20566f:     }
1:c20566f: 
1:96d41f0:     @Override
1:96d41f0:     public String toString()
1:96d41f0:     {
1:96d41f0:         return MoreObjects.toStringHelper(this)
1:96d41f0:                           .add("hostId", hostId)
1:96d41f0:                           .add("version", version)
1:96d41f0:                           .add("timestamp", timestamp)
1:96d41f0:                           .add("parameters", parameters)
1:96d41f0:                           .toString();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Override
1:96d41f0:     public boolean equals(Object o)
1:96d41f0:     {
1:96d41f0:         if (this == o)
1:96d41f0:             return true;
1:96d41f0: 
1:96d41f0:         if (!(o instanceof HintsDescriptor))
1:96d41f0:             return false;
1:96d41f0: 
1:96d41f0:         HintsDescriptor hd = (HintsDescriptor) o;
1:96d41f0: 
1:96d41f0:         return Objects.equal(hostId, hd.hostId)
1:96d41f0:             && Objects.equal(version, hd.version)
1:96d41f0:             && Objects.equal(timestamp, hd.timestamp)
1:96d41f0:             && Objects.equal(parameters, hd.parameters);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Override
1:96d41f0:     public int hashCode()
1:96d41f0:     {
1:96d41f0:         return Objects.hashCode(hostId, version, timestamp, parameters);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     void serialize(DataOutputPlus out) throws IOException
1:96d41f0:     {
1:96d41f0:         CRC32 crc = new CRC32();
1:96d41f0: 
1:96d41f0:         out.writeInt(version);
1:96d41f0:         updateChecksumInt(crc, version);
1:96d41f0: 
1:96d41f0:         out.writeLong(timestamp);
1:96d41f0:         updateChecksumLong(crc, timestamp);
1:96d41f0: 
1:96d41f0:         out.writeLong(hostId.getMostSignificantBits());
1:96d41f0:         updateChecksumLong(crc, hostId.getMostSignificantBits());
1:96d41f0:         out.writeLong(hostId.getLeastSignificantBits());
1:96d41f0:         updateChecksumLong(crc, hostId.getLeastSignificantBits());
1:96d41f0: 
1:96d41f0:         byte[] paramsBytes = JSONValue.toJSONString(parameters).getBytes(StandardCharsets.UTF_8);
1:96d41f0:         out.writeInt(paramsBytes.length);
1:96d41f0:         updateChecksumInt(crc, paramsBytes.length);
1:96d41f0:         out.writeInt((int) crc.getValue());
1:96d41f0: 
1:96d41f0:         out.write(paramsBytes);
1:96d41f0:         crc.update(paramsBytes, 0, paramsBytes.length);
1:96d41f0: 
1:96d41f0:         out.writeInt((int) crc.getValue());
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     int serializedSize()
1:96d41f0:     {
1:96d41f0:         int size = TypeSizes.sizeof(version);
1:96d41f0:         size += TypeSizes.sizeof(timestamp);
1:96d41f0: 
1:96d41f0:         size += TypeSizes.sizeof(hostId.getMostSignificantBits());
1:96d41f0:         size += TypeSizes.sizeof(hostId.getLeastSignificantBits());
1:96d41f0: 
1:96d41f0:         byte[] paramsBytes = JSONValue.toJSONString(parameters).getBytes(StandardCharsets.UTF_8);
1:96d41f0:         size += TypeSizes.sizeof(paramsBytes.length);
1:96d41f0:         size += 4; // size checksum
1:96d41f0:         size += paramsBytes.length;
1:96d41f0:         size += 4; // total checksum
1:96d41f0: 
1:96d41f0:         return size;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     static HintsDescriptor deserialize(DataInput in) throws IOException
1:96d41f0:     {
1:96d41f0:         CRC32 crc = new CRC32();
1:96d41f0: 
1:96d41f0:         int version = in.readInt();
1:96d41f0:         updateChecksumInt(crc, version);
1:96d41f0: 
1:96d41f0:         long timestamp = in.readLong();
1:96d41f0:         updateChecksumLong(crc, timestamp);
1:96d41f0: 
1:96d41f0:         long msb = in.readLong();
1:96d41f0:         updateChecksumLong(crc, msb);
1:96d41f0:         long lsb = in.readLong();
1:96d41f0:         updateChecksumLong(crc, lsb);
1:96d41f0: 
1:96d41f0:         UUID hostId = new UUID(msb, lsb);
1:96d41f0: 
1:96d41f0:         int paramsLength = in.readInt();
1:96d41f0:         updateChecksumInt(crc, paramsLength);
1:96d41f0:         validateCRC(in.readInt(), (int) crc.getValue());
1:96d41f0: 
1:96d41f0:         byte[] paramsBytes = new byte[paramsLength];
1:96d41f0:         in.readFully(paramsBytes, 0, paramsLength);
1:96d41f0:         crc.update(paramsBytes, 0, paramsLength);
1:96d41f0:         validateCRC(in.readInt(), (int) crc.getValue());
1:96d41f0: 
1:96d41f0:         return new HintsDescriptor(hostId, version, timestamp, decodeJSONBytes(paramsBytes));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @SuppressWarnings("unchecked")
1:96d41f0:     private static ImmutableMap<String, Object> decodeJSONBytes(byte[] bytes)
1:96d41f0:     {
1:96d41f0:         return ImmutableMap.copyOf((Map<String, Object>) JSONValue.parse(new String(bytes, StandardCharsets.UTF_8)));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void updateChecksumLong(CRC32 crc, long value)
1:96d41f0:     {
1:96d41f0:         updateChecksumInt(crc, (int) (value & 0xFFFFFFFFL));
1:96d41f0:         updateChecksumInt(crc, (int) (value >>> 32));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void validateCRC(int expected, int actual) throws IOException
1:96d41f0:     {
1:96d41f0:         if (expected != actual)
1:96d41f0:             throw new IOException("Hints Descriptor CRC Mismatch");
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import javax.crypto.Cipher;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.security.EncryptionContext;
1: import org.apache.cassandra.utils.Hex;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(HintsDescriptor.class);
1: 
1:     static final String ENCRYPTION = "encryption";
/////////////////////////////////////////////////////////////////////////
1:     private final Cipher cipher;
1:     private final ICompressor compressor;
1: 
1: 
1:         EncryptionData encryption = createEncryption(parameters);
1:         if (encryption == null)
1:         {
1:             cipher = null;
1:             compressor = null;
1:         }
1:         else
1:         {
1:             if (compressionConfig != null)
1:                 throw new IllegalStateException("a hints file cannot be configured for both compression and encryption");
1:             cipher = encryption.cipher;
1:             compressor = encryption.compressor;
1:             parameters = encryption.params;
1:         }
1: 
1:         this.parameters = parameters;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Create, if necessary, the required encryption components (for either decrpyt or encrypt operations).
1:      * Note that in the case of encyption (this is, when writing out a new hints file), we need to write
1:      * the cipher's IV out to the header so it can be used when decrypting. Thus, we need to add an additional
1:      * entry to the {@code params} map.
1:      *
1:      * @param params the base parameters into the descriptor.
1:      * @return null if not using encryption; else, the initialized {@link Cipher} and a possibly updated version
1:      * of the {@code params} map.
1:      */
1:     @SuppressWarnings("unchecked")
1:     static EncryptionData createEncryption(ImmutableMap<String, Object> params)
1:     {
1:         if (params.containsKey(ENCRYPTION))
1:         {
1:             Map<?, ?> encryptionConfig = (Map<?, ?>) params.get(ENCRYPTION);
1:             EncryptionContext encryptionContext = EncryptionContext.createFromMap(encryptionConfig, DatabaseDescriptor.getEncryptionContext());
1: 
1:             try
1:             {
1:                 Cipher cipher;
1:                 if (encryptionConfig.containsKey(EncryptionContext.ENCRYPTION_IV))
1:                 {
1:                     cipher = encryptionContext.getDecryptor();
1:                 }
1:                 else
1:                 {
1:                     cipher = encryptionContext.getEncryptor();
1:                     ImmutableMap<String, Object> encParams = ImmutableMap.<String, Object>builder()
1:                                                                  .putAll(encryptionContext.toHeaderParameters())
1:                                                                  .put(EncryptionContext.ENCRYPTION_IV, Hex.bytesToHex(cipher.getIV()))
1:                                                                  .build();
1: 
1:                     Map<String, Object> map = new HashMap<>(params);
1:                     map.put(ENCRYPTION, encParams);
1:                     params = ImmutableMap.<String, Object>builder().putAll(map).build();
1:                 }
1:                 return new EncryptionData(cipher, encryptionContext.getCompressor(), params);
1:             }
1:             catch (IOException ioe)
1:             {
1:                 logger.warn("failed to create encyption context for hints file. ignoring encryption for hints.", ioe);
1:                 return null;
1:             }
1:         }
1:         else
1:         {
1:             return null;
1:         }
1:     }
1: 
1:     private static final class EncryptionData
1:     {
1:         final Cipher cipher;
1:         final ICompressor compressor;
1:         final ImmutableMap<String, Object> params;
1: 
1:         private EncryptionData(Cipher cipher, ICompressor compressor, ImmutableMap<String, Object> params)
1:         {
1:             this.cipher = cipher;
1:             this.compressor = compressor;
1:             this.params = params;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEncrypted()
1:     {
1:         return cipher != null;
1:     }
1: 
1:         if (isCompressed())
1:             return CompressionParams.createCompressor(compressionConfig);
1:         if (isEncrypted())
1:             return compressor;
1:         return null;
1:     }
1: 
1:     public Cipher getCipher()
1:     {
1:         return isEncrypted() ? cipher : null;
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.ParameterizedClass;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.schema.CompressionParams;
/////////////////////////////////////////////////////////////////////////
1:     static final String COMPRESSION = "compression";
1: 
/////////////////////////////////////////////////////////////////////////
1:     final ParameterizedClass compressionConfig;
/////////////////////////////////////////////////////////////////////////
1:         compressionConfig = createCompressionConfig(parameters);
1:     }
1: 
1:     HintsDescriptor(UUID hostId, long timestamp, ImmutableMap<String, Object> parameters)
1:     {
1:         this(hostId, CURRENT_VERSION, timestamp, parameters);
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     static ParameterizedClass createCompressionConfig(Map<String, Object> params)
1:     {
1:         if (params.containsKey(COMPRESSION))
1:         {
1:             Map<String, Object> compressorConfig = (Map<String, Object>) params.get(COMPRESSION);
1:             return new ParameterizedClass((String) compressorConfig.get(ParameterizedClass.CLASS_NAME),
1:                                           (Map<String, String>) compressorConfig.get(ParameterizedClass.PARAMETERS));
1:         }
1:         else
1:         {
1:             return null;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCompressed()
1:     {
1:         return compressionConfig != null;
1:     }
1: 
1:     public ICompressor createCompressor()
1:     {
0:         return isCompressed() ? CompressionParams.createCompressor(compressionConfig) : null;
1:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.DataInput;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.charset.StandardCharsets;
1: import java.nio.file.Path;
1: import java.util.Map;
1: import java.util.UUID;
1: import java.util.regex.Pattern;
1: import java.util.zip.CRC32;
1: 
1: import com.google.common.base.MoreObjects;
1: import com.google.common.base.Objects;
1: import com.google.common.collect.ImmutableMap;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.net.MessagingService;
1: import org.json.simple.JSONValue;
1: 
1: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1: 
1: /**
1:  * Describes the host id, the version, the timestamp of creation, and an arbitrary map of JSON-encoded parameters of a
1:  * hints file.
1:  *
1:  * Written in the beginning of each hints file.
1:  */
1: final class HintsDescriptor
1: {
1:     static final int VERSION_30 = 1;
1:     static final int CURRENT_VERSION = VERSION_30;
1: 
1:     static final Pattern pattern =
1:         Pattern.compile("^[a-fA-F0-9]{8}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{12}\\-(\\d+)\\-(\\d+)\\.hints$");
1: 
1:     final UUID hostId;
1:     final int version;
1:     final long timestamp;
1: 
0:     // implemented for future compression support - see CASSANDRA-9428
1:     final ImmutableMap<String, Object> parameters;
1: 
1:     HintsDescriptor(UUID hostId, int version, long timestamp, ImmutableMap<String, Object> parameters)
1:     {
1:         this.hostId = hostId;
1:         this.version = version;
1:         this.timestamp = timestamp;
0:         this.parameters = parameters;
1:     }
1: 
1:     HintsDescriptor(UUID hostId, long timestamp)
1:     {
1:         this(hostId, CURRENT_VERSION, timestamp, ImmutableMap.<String, Object>of());
1:     }
1: 
1:     String fileName()
1:     {
1:         return String.format("%s-%s-%s.hints", hostId, timestamp, version);
1:     }
1: 
1:     String checksumFileName()
1:     {
1:         return String.format("%s-%s-%s.crc32", hostId, timestamp, version);
1:     }
1: 
1:     int messagingVersion()
1:     {
1:         return messagingVersion(version);
1:     }
1: 
1:     static int messagingVersion(int hintsVersion)
1:     {
1:         switch (hintsVersion)
1:         {
1:             case VERSION_30:
1:                 return MessagingService.VERSION_30;
1:             default:
1:                 throw new AssertionError();
1:         }
1:     }
1: 
1:     static boolean isHintFileName(Path path)
1:     {
1:         return pattern.matcher(path.getFileName().toString()).matches();
1:     }
1: 
1:     static HintsDescriptor readFromFile(Path path)
1:     {
1:         try (RandomAccessFile raf = new RandomAccessFile(path.toFile(), "r"))
1:         {
1:             return deserialize(raf);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, path.toFile());
1:         }
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return MoreObjects.toStringHelper(this)
1:                           .add("hostId", hostId)
1:                           .add("version", version)
1:                           .add("timestamp", timestamp)
1:                           .add("parameters", parameters)
1:                           .toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof HintsDescriptor))
1:             return false;
1: 
1:         HintsDescriptor hd = (HintsDescriptor) o;
1: 
1:         return Objects.equal(hostId, hd.hostId)
1:             && Objects.equal(version, hd.version)
1:             && Objects.equal(timestamp, hd.timestamp)
1:             && Objects.equal(parameters, hd.parameters);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(hostId, version, timestamp, parameters);
1:     }
1: 
1:     void serialize(DataOutputPlus out) throws IOException
1:     {
1:         CRC32 crc = new CRC32();
1: 
1:         out.writeInt(version);
1:         updateChecksumInt(crc, version);
1: 
1:         out.writeLong(timestamp);
1:         updateChecksumLong(crc, timestamp);
1: 
1:         out.writeLong(hostId.getMostSignificantBits());
1:         updateChecksumLong(crc, hostId.getMostSignificantBits());
1:         out.writeLong(hostId.getLeastSignificantBits());
1:         updateChecksumLong(crc, hostId.getLeastSignificantBits());
1: 
1:         byte[] paramsBytes = JSONValue.toJSONString(parameters).getBytes(StandardCharsets.UTF_8);
1:         out.writeInt(paramsBytes.length);
1:         updateChecksumInt(crc, paramsBytes.length);
1:         out.writeInt((int) crc.getValue());
1: 
1:         out.write(paramsBytes);
1:         crc.update(paramsBytes, 0, paramsBytes.length);
1: 
1:         out.writeInt((int) crc.getValue());
1:     }
1: 
1:     int serializedSize()
1:     {
1:         int size = TypeSizes.sizeof(version);
1:         size += TypeSizes.sizeof(timestamp);
1: 
1:         size += TypeSizes.sizeof(hostId.getMostSignificantBits());
1:         size += TypeSizes.sizeof(hostId.getLeastSignificantBits());
1: 
1:         byte[] paramsBytes = JSONValue.toJSONString(parameters).getBytes(StandardCharsets.UTF_8);
1:         size += TypeSizes.sizeof(paramsBytes.length);
1:         size += 4; // size checksum
1:         size += paramsBytes.length;
1:         size += 4; // total checksum
1: 
1:         return size;
1:     }
1: 
1:     static HintsDescriptor deserialize(DataInput in) throws IOException
1:     {
1:         CRC32 crc = new CRC32();
1: 
1:         int version = in.readInt();
1:         updateChecksumInt(crc, version);
1: 
1:         long timestamp = in.readLong();
1:         updateChecksumLong(crc, timestamp);
1: 
1:         long msb = in.readLong();
1:         updateChecksumLong(crc, msb);
1:         long lsb = in.readLong();
1:         updateChecksumLong(crc, lsb);
1: 
1:         UUID hostId = new UUID(msb, lsb);
1: 
1:         int paramsLength = in.readInt();
1:         updateChecksumInt(crc, paramsLength);
1:         validateCRC(in.readInt(), (int) crc.getValue());
1: 
1:         byte[] paramsBytes = new byte[paramsLength];
1:         in.readFully(paramsBytes, 0, paramsLength);
1:         crc.update(paramsBytes, 0, paramsLength);
1:         validateCRC(in.readInt(), (int) crc.getValue());
1: 
1:         return new HintsDescriptor(hostId, version, timestamp, decodeJSONBytes(paramsBytes));
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private static ImmutableMap<String, Object> decodeJSONBytes(byte[] bytes)
1:     {
1:         return ImmutableMap.copyOf((Map<String, Object>) JSONValue.parse(new String(bytes, StandardCharsets.UTF_8)));
1:     }
1: 
1:     private static void updateChecksumLong(CRC32 crc, long value)
1:     {
1:         updateChecksumInt(crc, (int) (value & 0xFFFFFFFFL));
1:         updateChecksumInt(crc, (int) (value >>> 32));
1:     }
1: 
1:     private static void validateCRC(int expected, int actual) throws IOException
1:     {
1:         if (expected != actual)
1:             throw new IOException("Hints Descriptor CRC Mismatch");
1:     }
1: }
============================================================================