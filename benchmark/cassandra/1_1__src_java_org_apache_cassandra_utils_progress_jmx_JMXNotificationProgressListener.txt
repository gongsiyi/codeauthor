1:4adb981: /*
1:4adb981:  * Licensed to the Apache Software Foundation (ASF) under one
1:4adb981:  * or more contributor license agreements.  See the NOTICE file
1:4adb981:  * distributed with this work for additional information
1:4adb981:  * regarding copyright ownership.  The ASF licenses this file
1:4adb981:  * to you under the Apache License, Version 2.0 (the
1:4adb981:  * "License"); you may not use this file except in compliance
1:4adb981:  * with the License.  You may obtain a copy of the License at
1:4adb981:  *
1:4adb981:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4adb981:  *
1:4adb981:  * Unless required by applicable law or agreed to in writing, software
1:4adb981:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4adb981:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4adb981:  * See the License for the specific language governing permissions and
1:4adb981:  * limitations under the License.
1:4adb981:  */
1:4adb981: package org.apache.cassandra.utils.progress.jmx;
1:4adb981: 
1:4adb981: import java.util.Map;
1:4adb981: import javax.management.Notification;
1:4adb981: import javax.management.NotificationListener;
1:4adb981: import javax.management.remote.JMXConnectionNotification;
1:4adb981: 
1:4adb981: import org.apache.cassandra.utils.progress.ProgressEvent;
1:4adb981: import org.apache.cassandra.utils.progress.ProgressEventType;
1:4adb981: import org.apache.cassandra.utils.progress.ProgressListener;
1:4adb981: 
1:4adb981: /**
1:4adb981:  * JMXNotificationProgressListener uses JMX Notification API to convert JMX Notification message to progress event
1:4adb981:  * and notifies its {@link ProgressListener}s.
1:4adb981:  *
1:4adb981:  * This is to be implemented in client tools side.
1:4adb981:  */
1:4adb981: public abstract class JMXNotificationProgressListener implements ProgressListener, NotificationListener
1:4adb981: {
1:4adb981:     /**
1:4adb981:      * @param tag tag name to be checked
1:4adb981:      * @return true if given tag for ProgressEvent is a target to consume. If this returns false, then
1:4adb981:      *         {@link #progress} is not called for that event.
1:4adb981:      */
1:4adb981:     public abstract boolean isInterestedIn(String tag);
1:4adb981: 
1:4adb981:     /**
1:4adb981:      * Called when receiving {@link JMXConnectionNotification#NOTIFS_LOST} message.
1:4adb981:      */
1:4adb981:     public void handleNotificationLost(long timestamp, String message) {}
1:4adb981: 
1:4adb981:     /**
1:4adb981:      * Called when JMX connection is closed.
1:4adb981:      * Specifically when {@link JMXConnectionNotification#CLOSED} message is received.
1:4adb981:      */
1:4adb981:     public void handleConnectionClosed(long timestamp, String message) {}
1:4adb981: 
1:4adb981:     /**
1:4adb981:      * Called when JMX connection is failed.
1:4adb981:      * Specifically when {@link JMXConnectionNotification#FAILED} message is received.
1:4adb981:      */
1:4adb981:     public void handleConnectionFailed(long timestamp, String message) {}
1:4adb981: 
1:4adb981:     @SuppressWarnings("unchecked")
1:4adb981:     @Override
1:4adb981:     public void handleNotification(Notification notification, Object handback)
1:4adb981:     {
1:4adb981:         switch (notification.getType())
1:4adb981:         {
1:4adb981:             case "progress":
1:4adb981:                 String tag = (String) notification.getSource();
1:4adb981:                 if (this.isInterestedIn(tag))
1:4adb981:                 {
1:4adb981:                     Map<String, Integer> progress = (Map<String, Integer>) notification.getUserData();
1:4adb981:                     String message = notification.getMessage();
1:4adb981:                     ProgressEvent event = new ProgressEvent(ProgressEventType.values()[progress.get("type")],
1:4adb981:                                                             progress.get("progressCount"),
1:4adb981:                                                             progress.get("total"),
1:4adb981:                                                             message);
1:4adb981:                     this.progress(tag, event);
1:4adb981:                 }
1:4adb981:                 break;
1:4adb981: 
1:4adb981:             case JMXConnectionNotification.NOTIFS_LOST:
1:4adb981:                 handleNotificationLost(notification.getTimeStamp(), notification.getMessage());
1:4adb981:                 break;
1:4adb981: 
1:4adb981:             case JMXConnectionNotification.FAILED:
1:4adb981:                 handleConnectionFailed(notification.getTimeStamp(), notification.getMessage());
1:4adb981:                 break;
1:4adb981: 
1:4adb981:             case JMXConnectionNotification.CLOSED:
1:4adb981:                 handleConnectionClosed(notification.getTimeStamp(), notification.getMessage());
1:4adb981:                 break;
1:4adb981:         }
1:4adb981:     }
1:4adb981: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:4adb981
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils.progress.jmx;
1: 
1: import java.util.Map;
1: import javax.management.Notification;
1: import javax.management.NotificationListener;
1: import javax.management.remote.JMXConnectionNotification;
1: 
1: import org.apache.cassandra.utils.progress.ProgressEvent;
1: import org.apache.cassandra.utils.progress.ProgressEventType;
1: import org.apache.cassandra.utils.progress.ProgressListener;
1: 
1: /**
1:  * JMXNotificationProgressListener uses JMX Notification API to convert JMX Notification message to progress event
1:  * and notifies its {@link ProgressListener}s.
1:  *
1:  * This is to be implemented in client tools side.
1:  */
1: public abstract class JMXNotificationProgressListener implements ProgressListener, NotificationListener
1: {
1:     /**
1:      * @param tag tag name to be checked
1:      * @return true if given tag for ProgressEvent is a target to consume. If this returns false, then
1:      *         {@link #progress} is not called for that event.
1:      */
1:     public abstract boolean isInterestedIn(String tag);
1: 
1:     /**
1:      * Called when receiving {@link JMXConnectionNotification#NOTIFS_LOST} message.
1:      */
1:     public void handleNotificationLost(long timestamp, String message) {}
1: 
1:     /**
1:      * Called when JMX connection is closed.
1:      * Specifically when {@link JMXConnectionNotification#CLOSED} message is received.
1:      */
1:     public void handleConnectionClosed(long timestamp, String message) {}
1: 
1:     /**
1:      * Called when JMX connection is failed.
1:      * Specifically when {@link JMXConnectionNotification#FAILED} message is received.
1:      */
1:     public void handleConnectionFailed(long timestamp, String message) {}
1: 
1:     @SuppressWarnings("unchecked")
1:     @Override
1:     public void handleNotification(Notification notification, Object handback)
1:     {
1:         switch (notification.getType())
1:         {
1:             case "progress":
1:                 String tag = (String) notification.getSource();
1:                 if (this.isInterestedIn(tag))
1:                 {
1:                     Map<String, Integer> progress = (Map<String, Integer>) notification.getUserData();
1:                     String message = notification.getMessage();
1:                     ProgressEvent event = new ProgressEvent(ProgressEventType.values()[progress.get("type")],
1:                                                             progress.get("progressCount"),
1:                                                             progress.get("total"),
1:                                                             message);
1:                     this.progress(tag, event);
1:                 }
1:                 break;
1: 
1:             case JMXConnectionNotification.NOTIFS_LOST:
1:                 handleNotificationLost(notification.getTimeStamp(), notification.getMessage());
1:                 break;
1: 
1:             case JMXConnectionNotification.FAILED:
1:                 handleConnectionFailed(notification.getTimeStamp(), notification.getMessage());
1:                 break;
1: 
1:             case JMXConnectionNotification.CLOSED:
1:                 handleConnectionClosed(notification.getTimeStamp(), notification.getMessage());
1:                 break;
1:         }
1:     }
1: }
============================================================================