1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.nio.ByteBuffer;
1:96d41f0: import java.util.*;
1:96d41f0: import java.util.concurrent.TimeUnit;
1:96d41f0: import java.util.zip.CRC32;
1:96d41f0: 
1:96d41f0: import com.google.common.collect.Iterables;
1:96d41f0: import org.junit.BeforeClass;
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.SchemaLoader;
1:96d41f0: import org.apache.cassandra.config.CFMetaData;
1:96d41f0: import org.apache.cassandra.config.Schema;
1:96d41f0: import org.apache.cassandra.db.Mutation;
1:96d41f0: import org.apache.cassandra.db.RowUpdateBuilder;
1:96d41f0: import org.apache.cassandra.db.rows.Cell;
1:96d41f0: import org.apache.cassandra.db.rows.Row;
1:96d41f0: import org.apache.cassandra.io.util.DataInputBuffer;
1:96d41f0: import org.apache.cassandra.io.util.DataInputPlus;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:96d41f0: import org.apache.cassandra.schema.KeyspaceParams;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.*;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:96d41f0: import static org.apache.cassandra.utils.FBUtilities.updateChecksum;
1:96d41f0: 
1:96d41f0: public class HintsBufferTest
1:96d41f0: {
1:96d41f0:     private static final String KEYSPACE = "hints_buffer_test";
1:96d41f0:     private static final String TABLE = "table";
1:96d41f0: 
1:96d41f0:     private static final int HINTS_COUNT = 300_000;
1:96d41f0:     private static final int HINT_THREADS_COUNT = 10;
1:96d41f0:     private static final int HOST_ID_COUNT = 10;
1:96d41f0: 
1:96d41f0:     @BeforeClass
1:96d41f0:     public static void defineSchema()
1:96d41f0:     {
1:96d41f0:         SchemaLoader.prepareServer();
1:96d41f0:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     @SuppressWarnings("resource")
1:96d41f0:     public void testOverlyLargeAllocation()
1:96d41f0:     {
1:96d41f0:         // create a small, 128 bytes buffer
1:96d41f0:         HintsBuffer buffer = HintsBuffer.create(128);
1:96d41f0: 
1:96d41f0:         // try allocating an entry of 65 bytes (53 bytes hint + 12 bytes of overhead)
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             buffer.allocate(65 - HintsBuffer.ENTRY_OVERHEAD_SIZE);
1:96d41f0:             fail("Allocation of the buffer should have failed but hasn't");
1:96d41f0:         }
1:96d41f0:         catch (IllegalArgumentException e)
1:96d41f0:         {
1:96d41f0:             assertEquals(String.format("Hint of %s bytes is too large - the maximum size is 64", 65 - HintsBuffer.ENTRY_OVERHEAD_SIZE),
1:96d41f0:                          e.getMessage());
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         // assert that a 1-byte smaller allocation fits properly
1:96d41f0:         try (HintsBuffer.Allocation allocation = buffer.allocate(64 - HintsBuffer.ENTRY_OVERHEAD_SIZE))
1:96d41f0:         {
1:96d41f0:             assertNotNull(allocation);
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testWrite() throws IOException, InterruptedException
1:96d41f0:     {
1:96d41f0:         // generate 10 random host ids to choose from
1:96d41f0:         UUID[] hostIds = new UUID[HOST_ID_COUNT];
1:96d41f0:         for (int i = 0; i < hostIds.length; i++)
1:96d41f0:             hostIds[i] = UUID.randomUUID();
1:96d41f0: 
1:96d41f0:         // map each index to one random UUID from the previously created UUID array
1:96d41f0:         Random random = new Random(System.currentTimeMillis());
1:96d41f0:         UUID[] load = new UUID[HINTS_COUNT];
1:96d41f0:         for (int i = 0; i < load.length; i++)
1:96d41f0:             load[i] = hostIds[random.nextInt(HOST_ID_COUNT)];
1:96d41f0: 
1:96d41f0:         // calculate the size of a single hint (they will all have an equal size in this test)
1:96d41f0:         int hintSize = (int) Hint.serializer.serializedSize(createHint(0, System.currentTimeMillis()), MessagingService.current_version);
1:96d41f0:         int entrySize = hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE;
1:96d41f0: 
1:96d41f0:         // allocate a slab to fit *precisely* HINTS_COUNT hints
1:96d41f0:         int slabSize = entrySize * HINTS_COUNT;
1:96d41f0:         HintsBuffer buffer = HintsBuffer.create(slabSize);
1:96d41f0: 
1:96d41f0:         // use a fixed timestamp base for all mutation timestamps
1:96d41f0:         long baseTimestamp = System.currentTimeMillis();
1:96d41f0: 
1:96d41f0:         // create HINT_THREADS_COUNT, start them, and wait for them to finish
1:96d41f0:         List<Thread> threads = new ArrayList<>(HINT_THREADS_COUNT);
1:96d41f0:         for (int i = 0; i < HINT_THREADS_COUNT; i ++)
1:96d41f0:             threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)));
1:96d41f0:         threads.forEach(java.lang.Thread::start);
1:96d41f0:         for (Thread thread : threads)
1:96d41f0:             thread.join();
1:96d41f0: 
1:96d41f0:         // sanity check that we are full
1:96d41f0:         assertEquals(slabSize, buffer.capacity());
1:96d41f0:         assertEquals(0, buffer.remaining());
1:96d41f0: 
1:96d41f0:         // try to allocate more bytes, ensure that the allocation fails
1:96d41f0:         assertNull(buffer.allocate(1));
1:96d41f0: 
1:96d41f0:         // a failed allocation should automatically close the oporder
1:96d41f0:         buffer.waitForModifications();
1:96d41f0: 
1:96d41f0:         // a failed allocation should also automatically make the buffer as closed
1:96d41f0:         assertTrue(buffer.isClosed());
1:96d41f0: 
1:96d41f0:         // assert that host id set in the buffer equals to hostIds
1:96d41f0:         assertEquals(HOST_ID_COUNT, buffer.hostIds().size());
1:96d41f0:         assertEquals(new HashSet<>(Arrays.asList(hostIds)), buffer.hostIds());
1:96d41f0: 
1:96d41f0:         // iterate over *every written hint*, validate its content
1:96d41f0:         for (UUID hostId : hostIds)
1:96d41f0:         {
1:96d41f0:             Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId);
1:96d41f0:             while (iter.hasNext())
1:96d41f0:             {
1:96d41f0:                 int idx = validateEntry(hostId, iter.next(), baseTimestamp, load);
1:96d41f0:                 load[idx] = null; // nullify each visited entry
1:96d41f0:             }
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         // assert that all the entries in load array have been visited and nullified
1:96d41f0:         for (UUID hostId : load)
1:96d41f0:             assertNull(hostId);
1:96d41f0: 
1:96d41f0:         // free the buffer
1:96d41f0:         buffer.free();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException
1:96d41f0:     {
1:96d41f0:         CRC32 crc = new CRC32();
1:96d41f0:         DataInputPlus di = new DataInputBuffer(buffer, true);
1:96d41f0: 
1:96d41f0:         // read and validate size
1:96d41f0:         int hintSize = di.readInt();
1:96d41f0:         assertEquals(hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE, buffer.remaining());
1:96d41f0: 
1:96d41f0:         // read and validate size crc
1:96d41f0:         updateChecksum(crc, buffer, buffer.position(), 4);
1:96d41f0:         assertEquals((int) crc.getValue(), di.readInt());
1:96d41f0: 
1:96d41f0:         // read the hint and update/validate overall crc
1:96d41f0:         Hint hint = Hint.serializer.deserialize(di, MessagingService.current_version);
1:96d41f0:         updateChecksum(crc, buffer, buffer.position() + 8, hintSize);
1:96d41f0:         assertEquals((int) crc.getValue(), di.readInt());
1:96d41f0: 
1:96d41f0:         // further validate hint correctness
1:96d41f0:         int idx = (int) (hint.creationTime - baseTimestamp);
1:96d41f0:         assertEquals(hostId, load[idx]);
1:96d41f0: 
1:96d41f0:         Row row = hint.mutation.getPartitionUpdates().iterator().next().iterator().next();
1:96d41f0:         assertEquals(1, Iterables.size(row.cells()));
1:96d41f0: 
1:96d41f0:         assertEquals(bytes(idx), row.clustering().get(0));
1:96d41f0:         Cell cell = row.cells().iterator().next();
1:96d41f0:         assertEquals(TimeUnit.MILLISECONDS.toMicros(baseTimestamp + idx), cell.timestamp());
1:96d41f0:         assertEquals(bytes(idx), cell.value());
1:96d41f0: 
1:96d41f0:         return idx;
1:96d41f0:     }
1:96d41f0: 
1:037d24e:     static Hint createHint(int idx, long baseTimestamp)
1:96d41f0:     {
1:96d41f0:         long timestamp = baseTimestamp + idx;
1:96d41f0:         return Hint.create(createMutation(idx, TimeUnit.MILLISECONDS.toMicros(timestamp)), timestamp);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static Mutation createMutation(int index, long timestamp)
1:96d41f0:     {
1:96d41f0:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:96d41f0:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:96d41f0:                    .clustering(bytes(index))
1:96d41f0:                    .add("val", bytes(index))
1:96d41f0:                    .build();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     static class Writer implements Runnable
1:96d41f0:     {
1:96d41f0:         final HintsBuffer buffer;
1:96d41f0:         final UUID[] load;
1:96d41f0:         final int hintSize;
1:96d41f0:         final int index;
1:96d41f0:         final long baseTimestamp;
1:96d41f0: 
1:96d41f0:         Writer(HintsBuffer buffer, UUID[] load, int hintSize, int index, long baseTimestamp)
1:96d41f0:         {
1:96d41f0:             this.buffer = buffer;
1:96d41f0:             this.load = load;
1:96d41f0:             this.hintSize = hintSize;
1:96d41f0:             this.index = index;
1:96d41f0:             this.baseTimestamp = baseTimestamp;
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         public void run()
1:96d41f0:         {
1:96d41f0:             int hintsPerThread = HINTS_COUNT / HINT_THREADS_COUNT;
1:96d41f0:             for (int i = index * hintsPerThread; i < (index + 1) * hintsPerThread; i++)
1:96d41f0:             {
1:96d41f0:                 try (HintsBuffer.Allocation allocation = buffer.allocate(hintSize))
1:96d41f0:                 {
1:96d41f0:                     Hint hint = createHint(i, baseTimestamp);
1:96d41f0:                     allocation.write(Collections.singleton(load[i]), hint);
1:96d41f0:                 }
1:96d41f0:             }
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:037d24e
/////////////////////////////////////////////////////////////////////////
1:     static Hint createHint(int idx, long baseTimestamp)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: import java.util.concurrent.TimeUnit;
1: import java.util.zip.CRC32;
1: 
1: import com.google.common.collect.Iterables;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: 
1: import static junit.framework.Assert.*;
1: 
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: import static org.apache.cassandra.utils.FBUtilities.updateChecksum;
1: 
1: public class HintsBufferTest
1: {
1:     private static final String KEYSPACE = "hints_buffer_test";
1:     private static final String TABLE = "table";
1: 
1:     private static final int HINTS_COUNT = 300_000;
1:     private static final int HINT_THREADS_COUNT = 10;
1:     private static final int HOST_ID_COUNT = 10;
1: 
1:     @BeforeClass
1:     public static void defineSchema()
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:     }
1: 
1:     @Test
1:     @SuppressWarnings("resource")
1:     public void testOverlyLargeAllocation()
1:     {
1:         // create a small, 128 bytes buffer
1:         HintsBuffer buffer = HintsBuffer.create(128);
1: 
1:         // try allocating an entry of 65 bytes (53 bytes hint + 12 bytes of overhead)
1:         try
1:         {
1:             buffer.allocate(65 - HintsBuffer.ENTRY_OVERHEAD_SIZE);
1:             fail("Allocation of the buffer should have failed but hasn't");
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             assertEquals(String.format("Hint of %s bytes is too large - the maximum size is 64", 65 - HintsBuffer.ENTRY_OVERHEAD_SIZE),
1:                          e.getMessage());
1:         }
1: 
1:         // assert that a 1-byte smaller allocation fits properly
1:         try (HintsBuffer.Allocation allocation = buffer.allocate(64 - HintsBuffer.ENTRY_OVERHEAD_SIZE))
1:         {
1:             assertNotNull(allocation);
1:         }
1:     }
1: 
1:     @Test
1:     public void testWrite() throws IOException, InterruptedException
1:     {
1:         // generate 10 random host ids to choose from
1:         UUID[] hostIds = new UUID[HOST_ID_COUNT];
1:         for (int i = 0; i < hostIds.length; i++)
1:             hostIds[i] = UUID.randomUUID();
1: 
1:         // map each index to one random UUID from the previously created UUID array
1:         Random random = new Random(System.currentTimeMillis());
1:         UUID[] load = new UUID[HINTS_COUNT];
1:         for (int i = 0; i < load.length; i++)
1:             load[i] = hostIds[random.nextInt(HOST_ID_COUNT)];
1: 
1:         // calculate the size of a single hint (they will all have an equal size in this test)
1:         int hintSize = (int) Hint.serializer.serializedSize(createHint(0, System.currentTimeMillis()), MessagingService.current_version);
1:         int entrySize = hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE;
1: 
1:         // allocate a slab to fit *precisely* HINTS_COUNT hints
1:         int slabSize = entrySize * HINTS_COUNT;
1:         HintsBuffer buffer = HintsBuffer.create(slabSize);
1: 
1:         // use a fixed timestamp base for all mutation timestamps
1:         long baseTimestamp = System.currentTimeMillis();
1: 
1:         // create HINT_THREADS_COUNT, start them, and wait for them to finish
1:         List<Thread> threads = new ArrayList<>(HINT_THREADS_COUNT);
1:         for (int i = 0; i < HINT_THREADS_COUNT; i ++)
1:             threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)));
1:         threads.forEach(java.lang.Thread::start);
1:         for (Thread thread : threads)
1:             thread.join();
1: 
1:         // sanity check that we are full
1:         assertEquals(slabSize, buffer.capacity());
1:         assertEquals(0, buffer.remaining());
1: 
1:         // try to allocate more bytes, ensure that the allocation fails
1:         assertNull(buffer.allocate(1));
1: 
1:         // a failed allocation should automatically close the oporder
1:         buffer.waitForModifications();
1: 
1:         // a failed allocation should also automatically make the buffer as closed
1:         assertTrue(buffer.isClosed());
1: 
1:         // assert that host id set in the buffer equals to hostIds
1:         assertEquals(HOST_ID_COUNT, buffer.hostIds().size());
1:         assertEquals(new HashSet<>(Arrays.asList(hostIds)), buffer.hostIds());
1: 
1:         // iterate over *every written hint*, validate its content
1:         for (UUID hostId : hostIds)
1:         {
1:             Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId);
1:             while (iter.hasNext())
1:             {
1:                 int idx = validateEntry(hostId, iter.next(), baseTimestamp, load);
1:                 load[idx] = null; // nullify each visited entry
1:             }
1:         }
1: 
1:         // assert that all the entries in load array have been visited and nullified
1:         for (UUID hostId : load)
1:             assertNull(hostId);
1: 
1:         // free the buffer
1:         buffer.free();
1:     }
1: 
1:     private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException
1:     {
1:         CRC32 crc = new CRC32();
1:         DataInputPlus di = new DataInputBuffer(buffer, true);
1: 
1:         // read and validate size
1:         int hintSize = di.readInt();
1:         assertEquals(hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE, buffer.remaining());
1: 
1:         // read and validate size crc
1:         updateChecksum(crc, buffer, buffer.position(), 4);
1:         assertEquals((int) crc.getValue(), di.readInt());
1: 
1:         // read the hint and update/validate overall crc
1:         Hint hint = Hint.serializer.deserialize(di, MessagingService.current_version);
1:         updateChecksum(crc, buffer, buffer.position() + 8, hintSize);
1:         assertEquals((int) crc.getValue(), di.readInt());
1: 
1:         // further validate hint correctness
1:         int idx = (int) (hint.creationTime - baseTimestamp);
1:         assertEquals(hostId, load[idx]);
1: 
1:         Row row = hint.mutation.getPartitionUpdates().iterator().next().iterator().next();
1:         assertEquals(1, Iterables.size(row.cells()));
1: 
1:         assertEquals(bytes(idx), row.clustering().get(0));
1:         Cell cell = row.cells().iterator().next();
1:         assertEquals(TimeUnit.MILLISECONDS.toMicros(baseTimestamp + idx), cell.timestamp());
1:         assertEquals(bytes(idx), cell.value());
1: 
1:         return idx;
1:     }
1: 
0:     private static Hint createHint(int idx, long baseTimestamp)
1:     {
1:         long timestamp = baseTimestamp + idx;
1:         return Hint.create(createMutation(idx, TimeUnit.MILLISECONDS.toMicros(timestamp)), timestamp);
1:     }
1: 
1:     private static Mutation createMutation(int index, long timestamp)
1:     {
1:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:                    .clustering(bytes(index))
1:                    .add("val", bytes(index))
1:                    .build();
1:     }
1: 
1:     static class Writer implements Runnable
1:     {
1:         final HintsBuffer buffer;
1:         final UUID[] load;
1:         final int hintSize;
1:         final int index;
1:         final long baseTimestamp;
1: 
1:         Writer(HintsBuffer buffer, UUID[] load, int hintSize, int index, long baseTimestamp)
1:         {
1:             this.buffer = buffer;
1:             this.load = load;
1:             this.hintSize = hintSize;
1:             this.index = index;
1:             this.baseTimestamp = baseTimestamp;
1:         }
1: 
1:         public void run()
1:         {
1:             int hintsPerThread = HINTS_COUNT / HINT_THREADS_COUNT;
1:             for (int i = index * hintsPerThread; i < (index + 1) * hintsPerThread; i++)
1:             {
1:                 try (HintsBuffer.Allocation allocation = buffer.allocate(hintSize))
1:                 {
1:                     Hint hint = createHint(i, baseTimestamp);
1:                     allocation.write(Collections.singleton(load[i]), hint);
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================