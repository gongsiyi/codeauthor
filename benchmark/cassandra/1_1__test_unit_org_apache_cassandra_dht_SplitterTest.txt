1:e2c6341: /*
1:e2c6341:  * Licensed to the Apache Software Foundation (ASF) under one
1:e2c6341:  * or more contributor license agreements.  See the NOTICE file
1:e2c6341:  * distributed with this work for additional information
1:e2c6341:  * regarding copyright ownership.  The ASF licenses this file
1:e2c6341:  * to you under the Apache License, Version 2.0 (the
1:e2c6341:  * "License"); you may not use this file except in compliance
1:e2c6341:  * with the License.  You may obtain a copy of the License at
1:e2c6341:  *
1:e2c6341:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e2c6341:  *
1:e2c6341:  * Unless required by applicable law or agreed to in writing, software
1:e2c6341:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2c6341:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2c6341:  * See the License for the specific language governing permissions and
1:e2c6341:  * limitations under the License.
1:e2c6341:  */
1:e2c6341: package org.apache.cassandra.dht;
1:e2c6341: 
1:e2c6341: import java.math.BigDecimal;
1:e2c6341: import java.math.BigInteger;
1:e2c6341: import java.util.ArrayList;
1:e2c6341: import java.util.Collections;
1:e2c6341: import java.util.List;
1:e2c6341: import java.util.Random;
1:e2c6341: import java.util.Set;
1:e2c6341: 
1:e2c6341: import org.junit.Test;
1:e2c6341: 
1:e2c6341: import static org.junit.Assert.assertTrue;
1:e2c6341: import static org.junit.Assert.fail;
1:e2c6341: 
1:e2c6341: public class SplitterTest
1:e2c6341: {
1:e2c6341: 
1:e2c6341:     @Test
1:e2c6341:     public void randomSplitTestNoVNodesRandomPartitioner()
1:e2c6341:     {
1:e2c6341:         randomSplitTestNoVNodes(new RandomPartitioner());
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     @Test
1:e2c6341:     public void randomSplitTestNoVNodesMurmur3Partitioner()
1:e2c6341:     {
1:e2c6341:         randomSplitTestNoVNodes(new Murmur3Partitioner());
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     @Test
1:e2c6341:     public void randomSplitTestVNodesRandomPartitioner()
1:e2c6341:     {
1:e2c6341:         randomSplitTestVNodes(new RandomPartitioner());
1:e2c6341:     }
1:e2c6341:     @Test
1:e2c6341:     public void randomSplitTestVNodesMurmur3Partitioner()
1:e2c6341:     {
1:e2c6341:         randomSplitTestVNodes(new Murmur3Partitioner());
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     public void randomSplitTestNoVNodes(IPartitioner partitioner)
1:e2c6341:     {
1:e2c6341:         Splitter splitter = partitioner.splitter().get();
1:e2c6341:         Random r = new Random();
1:e2c6341:         for (int i = 0; i < 10000; i++)
1:e2c6341:         {
1:e2c6341:             List<Range<Token>> localRanges = generateLocalRanges(1, r.nextInt(4)+1, splitter, r, partitioner instanceof RandomPartitioner);
1:e2c6341:             List<Token> boundaries = splitter.splitOwnedRanges(r.nextInt(9) + 1, localRanges, false);
1:e2c6341:             assertTrue("boundaries = "+boundaries+" ranges = "+localRanges, assertRangeSizeEqual(localRanges, boundaries, partitioner, splitter, true));
1:e2c6341:         }
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     public void randomSplitTestVNodes(IPartitioner partitioner)
1:e2c6341:     {
1:e2c6341:         Splitter splitter = partitioner.splitter().get();
1:e2c6341:         Random r = new Random();
1:e2c6341:         for (int i = 0; i < 10000; i++)
1:e2c6341:         {
1:e2c6341:             // we need many tokens to be able to split evenly over the disks
1:e2c6341:             int numTokens = 172 + r.nextInt(128);
1:e2c6341:             int rf = r.nextInt(4) + 2;
1:e2c6341:             int parts = r.nextInt(5)+1;
1:e2c6341:             List<Range<Token>> localRanges = generateLocalRanges(numTokens, rf, splitter, r, partitioner instanceof RandomPartitioner);
1:e2c6341:             List<Token> boundaries = splitter.splitOwnedRanges(parts, localRanges, true);
1:e2c6341:             if (!assertRangeSizeEqual(localRanges, boundaries, partitioner, splitter, false))
1:e2c6341:                 fail(String.format("Could not split %d tokens with rf=%d into %d parts (localRanges=%s, boundaries=%s)", numTokens, rf, parts, localRanges, boundaries));
1:e2c6341:         }
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     private boolean assertRangeSizeEqual(List<Range<Token>> localRanges, List<Token> tokens, IPartitioner partitioner, Splitter splitter, boolean splitIndividualRanges)
1:e2c6341:     {
1:e2c6341:         Token start = partitioner.getMinimumToken();
1:e2c6341:         List<BigInteger> splits = new ArrayList<>();
1:e2c6341: 
1:e2c6341:         for (int i = 0; i < tokens.size(); i++)
1:e2c6341:         {
1:e2c6341:             Token end = i == tokens.size() - 1 ? partitioner.getMaximumToken() : tokens.get(i);
1:e2c6341:             splits.add(sumOwnedBetween(localRanges, start, end, splitter, splitIndividualRanges));
1:e2c6341:             start = end;
1:e2c6341:         }
1:e2c6341:         // when we dont need to keep around full ranges, the difference is small between the partitions
1:e2c6341:         BigDecimal delta = splitIndividualRanges ? BigDecimal.valueOf(0.001) : BigDecimal.valueOf(0.2);
1:e2c6341:         boolean allBalanced = true;
1:e2c6341:         for (BigInteger b : splits)
1:e2c6341:         {
1:e2c6341:             for (BigInteger i : splits)
1:e2c6341:             {
1:e2c6341:                 BigDecimal bdb = new BigDecimal(b);
1:e2c6341:                 BigDecimal bdi = new BigDecimal(i);
1:e2c6341:                 BigDecimal q = bdb.divide(bdi, 2, BigDecimal.ROUND_HALF_DOWN);
1:e2c6341:                 if (q.compareTo(BigDecimal.ONE.add(delta)) > 0 || q.compareTo(BigDecimal.ONE.subtract(delta)) < 0)
1:e2c6341:                     allBalanced = false;
1:e2c6341:             }
1:e2c6341:         }
1:e2c6341:         return allBalanced;
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     private BigInteger sumOwnedBetween(List<Range<Token>> localRanges, Token start, Token end, Splitter splitter, boolean splitIndividualRanges)
1:e2c6341:     {
1:e2c6341:         BigInteger sum = BigInteger.ZERO;
1:e2c6341:         for (Range<Token> range : localRanges)
1:e2c6341:         {
1:e2c6341:             if (splitIndividualRanges)
1:e2c6341:             {
1:e2c6341:                 Set<Range<Token>> intersections = new Range<>(start, end).intersectionWith(range);
1:e2c6341:                 for (Range<Token> intersection : intersections)
1:e2c6341:                     sum = sum.add(splitter.valueForToken(intersection.right).subtract(splitter.valueForToken(intersection.left)));
1:e2c6341:             }
1:e2c6341:             else
1:e2c6341:             {
1:e2c6341:                 if (new Range<>(start, end).contains(range.left))
1:e2c6341:                     sum = sum.add(splitter.valueForToken(range.right).subtract(splitter.valueForToken(range.left)));
1:e2c6341:             }
1:e2c6341:         }
1:e2c6341:         return sum;
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     private List<Range<Token>> generateLocalRanges(int numTokens, int rf, Splitter splitter, Random r, boolean randomPartitioner)
1:e2c6341:     {
1:e2c6341:         int localTokens = numTokens * rf;
1:e2c6341:         List<Token> randomTokens = new ArrayList<>();
1:e2c6341: 
1:e2c6341:         for (int i = 0; i < localTokens * 2; i++)
1:e2c6341:         {
1:e2c6341:             Token t = splitter.tokenForValue(randomPartitioner ? new BigInteger(127, r) : BigInteger.valueOf(r.nextLong()));
1:e2c6341:             randomTokens.add(t);
1:e2c6341:         }
1:e2c6341: 
1:e2c6341:         Collections.sort(randomTokens);
1:e2c6341: 
1:e2c6341:         List<Range<Token>> localRanges = new ArrayList<>(localTokens);
1:e2c6341:         for (int i = 0; i < randomTokens.size() - 1; i++)
1:e2c6341:         {
1:e2c6341:             assert randomTokens.get(i).compareTo(randomTokens.get(i+1)) < 0;
1:e2c6341:             localRanges.add(new Range<>(randomTokens.get(i), randomTokens.get(i+1)));
1:e2c6341:             i++;
1:e2c6341:         }
1:e2c6341:         return localRanges;
1:e2c6341:     }
1:e2c6341: }
============================================================================
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.dht;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Random;
1: import java.util.Set;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: public class SplitterTest
1: {
1: 
1:     @Test
1:     public void randomSplitTestNoVNodesRandomPartitioner()
1:     {
1:         randomSplitTestNoVNodes(new RandomPartitioner());
1:     }
1: 
1:     @Test
1:     public void randomSplitTestNoVNodesMurmur3Partitioner()
1:     {
1:         randomSplitTestNoVNodes(new Murmur3Partitioner());
1:     }
1: 
1:     @Test
1:     public void randomSplitTestVNodesRandomPartitioner()
1:     {
1:         randomSplitTestVNodes(new RandomPartitioner());
1:     }
1:     @Test
1:     public void randomSplitTestVNodesMurmur3Partitioner()
1:     {
1:         randomSplitTestVNodes(new Murmur3Partitioner());
1:     }
1: 
1:     public void randomSplitTestNoVNodes(IPartitioner partitioner)
1:     {
1:         Splitter splitter = partitioner.splitter().get();
1:         Random r = new Random();
1:         for (int i = 0; i < 10000; i++)
1:         {
1:             List<Range<Token>> localRanges = generateLocalRanges(1, r.nextInt(4)+1, splitter, r, partitioner instanceof RandomPartitioner);
1:             List<Token> boundaries = splitter.splitOwnedRanges(r.nextInt(9) + 1, localRanges, false);
1:             assertTrue("boundaries = "+boundaries+" ranges = "+localRanges, assertRangeSizeEqual(localRanges, boundaries, partitioner, splitter, true));
1:         }
1:     }
1: 
1:     public void randomSplitTestVNodes(IPartitioner partitioner)
1:     {
1:         Splitter splitter = partitioner.splitter().get();
1:         Random r = new Random();
1:         for (int i = 0; i < 10000; i++)
1:         {
1:             // we need many tokens to be able to split evenly over the disks
1:             int numTokens = 172 + r.nextInt(128);
1:             int rf = r.nextInt(4) + 2;
1:             int parts = r.nextInt(5)+1;
1:             List<Range<Token>> localRanges = generateLocalRanges(numTokens, rf, splitter, r, partitioner instanceof RandomPartitioner);
1:             List<Token> boundaries = splitter.splitOwnedRanges(parts, localRanges, true);
1:             if (!assertRangeSizeEqual(localRanges, boundaries, partitioner, splitter, false))
1:                 fail(String.format("Could not split %d tokens with rf=%d into %d parts (localRanges=%s, boundaries=%s)", numTokens, rf, parts, localRanges, boundaries));
1:         }
1:     }
1: 
1:     private boolean assertRangeSizeEqual(List<Range<Token>> localRanges, List<Token> tokens, IPartitioner partitioner, Splitter splitter, boolean splitIndividualRanges)
1:     {
1:         Token start = partitioner.getMinimumToken();
1:         List<BigInteger> splits = new ArrayList<>();
1: 
1:         for (int i = 0; i < tokens.size(); i++)
1:         {
1:             Token end = i == tokens.size() - 1 ? partitioner.getMaximumToken() : tokens.get(i);
1:             splits.add(sumOwnedBetween(localRanges, start, end, splitter, splitIndividualRanges));
1:             start = end;
1:         }
1:         // when we dont need to keep around full ranges, the difference is small between the partitions
1:         BigDecimal delta = splitIndividualRanges ? BigDecimal.valueOf(0.001) : BigDecimal.valueOf(0.2);
1:         boolean allBalanced = true;
1:         for (BigInteger b : splits)
1:         {
1:             for (BigInteger i : splits)
1:             {
1:                 BigDecimal bdb = new BigDecimal(b);
1:                 BigDecimal bdi = new BigDecimal(i);
1:                 BigDecimal q = bdb.divide(bdi, 2, BigDecimal.ROUND_HALF_DOWN);
1:                 if (q.compareTo(BigDecimal.ONE.add(delta)) > 0 || q.compareTo(BigDecimal.ONE.subtract(delta)) < 0)
1:                     allBalanced = false;
1:             }
1:         }
1:         return allBalanced;
1:     }
1: 
1:     private BigInteger sumOwnedBetween(List<Range<Token>> localRanges, Token start, Token end, Splitter splitter, boolean splitIndividualRanges)
1:     {
1:         BigInteger sum = BigInteger.ZERO;
1:         for (Range<Token> range : localRanges)
1:         {
1:             if (splitIndividualRanges)
1:             {
1:                 Set<Range<Token>> intersections = new Range<>(start, end).intersectionWith(range);
1:                 for (Range<Token> intersection : intersections)
1:                     sum = sum.add(splitter.valueForToken(intersection.right).subtract(splitter.valueForToken(intersection.left)));
1:             }
1:             else
1:             {
1:                 if (new Range<>(start, end).contains(range.left))
1:                     sum = sum.add(splitter.valueForToken(range.right).subtract(splitter.valueForToken(range.left)));
1:             }
1:         }
1:         return sum;
1:     }
1: 
1:     private List<Range<Token>> generateLocalRanges(int numTokens, int rf, Splitter splitter, Random r, boolean randomPartitioner)
1:     {
1:         int localTokens = numTokens * rf;
1:         List<Token> randomTokens = new ArrayList<>();
1: 
1:         for (int i = 0; i < localTokens * 2; i++)
1:         {
1:             Token t = splitter.tokenForValue(randomPartitioner ? new BigInteger(127, r) : BigInteger.valueOf(r.nextLong()));
1:             randomTokens.add(t);
1:         }
1: 
1:         Collections.sort(randomTokens);
1: 
1:         List<Range<Token>> localRanges = new ArrayList<>(localTokens);
1:         for (int i = 0; i < randomTokens.size() - 1; i++)
1:         {
1:             assert randomTokens.get(i).compareTo(randomTokens.get(i+1)) < 0;
1:             localRanges.add(new Range<>(randomTokens.get(i), randomTokens.get(i+1)));
1:             i++;
1:         }
1:         return localRanges;
1:     }
1: }
============================================================================