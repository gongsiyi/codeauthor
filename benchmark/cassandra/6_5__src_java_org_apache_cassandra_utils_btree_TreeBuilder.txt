1:9f14856: /*
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  */
1:412b053: package org.apache.cassandra.utils.btree;
2:412b053: 
1:412b053: import java.util.Comparator;
1:412b053: 
1:1e92ce4: import io.netty.util.Recycler;
1:1e92ce4: 
1:412b053: import static org.apache.cassandra.utils.btree.BTree.EMPTY_LEAF;
1:412b053: import static org.apache.cassandra.utils.btree.BTree.FAN_SHIFT;
1:412b053: import static org.apache.cassandra.utils.btree.BTree.POSITIVE_INFINITY;
1:412b053: 
1:412b053: /**
1:412b053:  * A class for constructing a new BTree, either from an existing one and some set of modifications
1:412b053:  * or a new tree from a sorted collection of items.
1:412b053:  * <p/>
1:1e92ce4:  * This is a fairly heavy-weight object, so a Recycled instance is created for making modifications to a tree
1:412b053:  */
1:5250d7f: final class TreeBuilder
1:412b053: {
1:1e92ce4: 
1:1e92ce4:     private final static Recycler<TreeBuilder> builderRecycler = new Recycler<TreeBuilder>()
1:1e92ce4:     {
1:1e92ce4:         protected TreeBuilder newObject(Handle handle)
1:1e92ce4:         {
1:1e92ce4:             return new TreeBuilder(handle);
1:1e92ce4:         }
1:1e92ce4:     };
1:1e92ce4: 
1:1e92ce4:     public static TreeBuilder newInstance()
1:1e92ce4:     {
1:1e92ce4:         return builderRecycler.get();
1:1e92ce4:     }
1:1e92ce4: 
1:1e92ce4:     private final Recycler.Handle recycleHandle;
1:412b053:     private final NodeBuilder rootBuilder = new NodeBuilder();
1:5f82aa3: 
1:1e92ce4:     private TreeBuilder(Recycler.Handle handle)
1:1e92ce4:     {
1:1e92ce4:         this.recycleHandle = handle;
1:1e92ce4:     }
1:1e92ce4: 
1:412b053:     /**
1:412b053:      * At the highest level, we adhere to the classic b-tree insertion algorithm:
1:412b053:      *
1:412b053:      * 1. Add to the appropriate leaf
1:412b053:      * 2. Split the leaf if necessary, add the median to the parent
1:412b053:      * 3. Split the parent if necessary, etc.
1:412b053:      *
1:412b053:      * There is one important difference: we don't actually modify the original tree, but copy each node that we
1:412b053:      * modify.  Note that every node on the path to the key being inserted or updated will be modified; this
1:412b053:      * implies that at a minimum, the root node will be modified for every update, so every root is a "snapshot"
1:412b053:      * of a tree that can be iterated or sliced without fear of concurrent modifications.
1:412b053:      *
1:412b053:      * The NodeBuilder class handles the details of buffering the copied contents of the original tree and
1:412b053:      * adding in our changes.  Since NodeBuilder maintains parent/child references, it also handles parent-splitting
1:412b053:      * (easy enough, since any node affected by the split will already be copied into a NodeBuilder).
1:412b053:      *
1:412b053:      * One other difference from the simple algorithm is that we perform modifications in bulk;
1:412b053:      * we assume @param source has been sorted, e.g. by BTree.update, so the update of each key resumes where
1:412b053:      * the previous left off.
1:412b053:      */
1:a991b64:     public <C, K extends C, V extends C> Object[] update(Object[] btree, Comparator<C> comparator, Iterable<K> source, UpdateFunction<K, V> updateF)
1:412b053:     {
1:5f82aa3:         assert updateF != null;
1:0cb1e3d: 
1:412b053:         NodeBuilder current = rootBuilder;
1:4b54b8a:         current.reset(btree, POSITIVE_INFINITY, updateF, comparator);
1:412b053: 
1:a991b64:         for (K key : source)
1:412b053:         {
1:412b053:             while (true)
1:412b053:             {
1:5f82aa3:                 if (updateF.abortEarly())
1:412b053:                 {
1:412b053:                     rootBuilder.clear();
1:412b053:                     return null;
2:412b053:                 }
1:4b54b8a:                 NodeBuilder next = current.update(key);
1:412b053:                 if (next == null)
1:412b053:                     break;
1:412b053:                 // we were in a subtree from a previous key that didn't contain this new key;
1:412b053:                 // retry against the correct subtree
1:412b053:                 current = next;
1:412b053:             }
1:412b053:         }
1:412b053: 
1:412b053:         // finish copying any remaining keys from the original btree
1:412b053:         while (true)
1:412b053:         {
1:acf1b18:             NodeBuilder next = current.finish();
1:412b053:             if (next == null)
1:412b053:                 break;
1:412b053:             current = next;
1:412b053:         }
1:412b053: 
1:412b053:         // updating with POSITIVE_INFINITY means that current should be back to the root
1:412b053:         assert current.isRoot();
1:412b053: 
1:412b053:         Object[] r = current.toNode();
1:412b053:         current.clear();
1:1e92ce4: 
1:1e92ce4:         builderRecycler.recycle(this, recycleHandle);
1:1e92ce4: 
1:412b053:         return r;
1:9f14856:     }
1:1e92ce4: 
1:a991b64:     public <C, K extends C, V extends C> Object[] build(Iterable<K> source, UpdateFunction<K, V> updateF, int size)
1:412b053:     {
1:0cb1e3d:         assert updateF != null;
1:1e92ce4: 
1:412b053:         NodeBuilder current = rootBuilder;
1:412b053:         // we descend only to avoid wasting memory; in update() we will often descend into existing trees
1:412b053:         // so here we want to descend also, so we don't have lg max(N) depth in both directions
1:412b053:         while ((size >>= FAN_SHIFT) > 0)
1:412b053:             current = current.ensureChild();
1:412b053: 
1:0cb1e3d:         current.reset(EMPTY_LEAF, POSITIVE_INFINITY, updateF, null);
1:a991b64:         for (K key : source)
1:4b54b8a:             current.addNewKey(key);
1:412b053: 
1:412b053:         current = current.ascendToRoot();
1:412b053: 
1:412b053:         Object[] r = current.toNode();
1:412b053:         current.clear();
1:412b053: 
1:1e92ce4:         builderRecycler.recycle(this, recycleHandle);
1:412b053: 
1:412b053:         return r;
1:412b053:     }
1:412b053: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.Recycler;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * This is a fairly heavy-weight object, so a Recycled instance is created for making modifications to a tree
1: 
1:     private final static Recycler<TreeBuilder> builderRecycler = new Recycler<TreeBuilder>()
1:     {
1:         protected TreeBuilder newObject(Handle handle)
1:         {
1:             return new TreeBuilder(handle);
1:         }
1:     };
1: 
1:     public static TreeBuilder newInstance()
1:     {
1:         return builderRecycler.get();
1:     }
1: 
1:     private final Recycler.Handle recycleHandle;
1:     private TreeBuilder(Recycler.Handle handle)
1:     {
1:         this.recycleHandle = handle;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         builderRecycler.recycle(this, recycleHandle);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         builderRecycler.recycle(this, recycleHandle);
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:79f230f
commit:5250d7f
/////////////////////////////////////////////////////////////////////////
1: final class TreeBuilder
commit:a604b14
commit:5ab1d95
/////////////////////////////////////////////////////////////////////////
0:             current.addNewKey(updateF.apply(key));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     public <C, K extends C, V extends C> Object[] update(Object[] btree, Comparator<C> comparator, Iterable<K> source, UpdateFunction<K, V> updateF)
1:         for (K key : source)
/////////////////////////////////////////////////////////////////////////
1:     public <C, K extends C, V extends C> Object[] build(Iterable<K> source, UpdateFunction<K, V> updateF, int size)
/////////////////////////////////////////////////////////////////////////
1:         for (K key : source)
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
1:             NodeBuilder next = current.finish();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:0cb1e3d
/////////////////////////////////////////////////////////////////////////
0:     public <V> Object[] update(Object[] btree, Comparator<V> comparator, Iterable<V> source, UpdateFunction<V> updateF)
/////////////////////////////////////////////////////////////////////////
0:     public <V> Object[] build(Iterable<V> source, UpdateFunction<V> updateF, int size)
1:         assert updateF != null;
1: 
1:         current.reset(EMPTY_LEAF, POSITIVE_INFINITY, updateF, null);
commit:5f82aa3
/////////////////////////////////////////////////////////////////////////
1:         assert updateF != null;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 if (updateF.abortEarly())
/////////////////////////////////////////////////////////////////////////
0:         current.reset(EMPTY_LEAF, POSITIVE_INFINITY, UpdateFunction.NoOp.instance(), null);
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public <V> Object[] update(Object[] btree, Comparator<V> comparator, Collection<V> source, UpdateFunction<V> updateF)
1:         current.reset(btree, POSITIVE_INFINITY, updateF, comparator);
0:                 if (updateF != null && updateF.abortEarly())
1:                 NodeBuilder next = current.update(key);
/////////////////////////////////////////////////////////////////////////
0:             NodeBuilder next = current.update(POSITIVE_INFINITY);
/////////////////////////////////////////////////////////////////////////
0:         current.reset(EMPTY_LEAF, POSITIVE_INFINITY, null, null);
1:             current.addNewKey(key);
commit:412b053
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.btree;
1: 
0: import java.util.Collection;
1: import java.util.Comparator;
1: 
0: import com.google.common.base.Function;
1: 
0: import static org.apache.cassandra.utils.btree.BTree.EMPTY_BRANCH;
1: import static org.apache.cassandra.utils.btree.BTree.EMPTY_LEAF;
1: import static org.apache.cassandra.utils.btree.BTree.FAN_SHIFT;
1: import static org.apache.cassandra.utils.btree.BTree.POSITIVE_INFINITY;
1: 
1: /**
1:  * A class for constructing a new BTree, either from an existing one and some set of modifications
1:  * or a new tree from a sorted collection of items.
1:  * <p/>
0:  * This is a fairly heavy-weight object, so a ThreadLocal instance is created for making modifications to a tree
1:  */
0: final class Builder
1: {
1:     private final NodeBuilder rootBuilder = new NodeBuilder();
1: 
1:     /**
1:      * At the highest level, we adhere to the classic b-tree insertion algorithm:
1:      *
1:      * 1. Add to the appropriate leaf
1:      * 2. Split the leaf if necessary, add the median to the parent
1:      * 3. Split the parent if necessary, etc.
1:      *
1:      * There is one important difference: we don't actually modify the original tree, but copy each node that we
1:      * modify.  Note that every node on the path to the key being inserted or updated will be modified; this
1:      * implies that at a minimum, the root node will be modified for every update, so every root is a "snapshot"
1:      * of a tree that can be iterated or sliced without fear of concurrent modifications.
1:      *
1:      * The NodeBuilder class handles the details of buffering the copied contents of the original tree and
1:      * adding in our changes.  Since NodeBuilder maintains parent/child references, it also handles parent-splitting
1:      * (easy enough, since any node affected by the split will already be copied into a NodeBuilder).
1:      *
1:      * One other difference from the simple algorithm is that we perform modifications in bulk;
1:      * we assume @param source has been sorted, e.g. by BTree.update, so the update of each key resumes where
1:      * the previous left off.
1:      */
0:     public <V> Object[] update(Object[] btree, Comparator<V> comparator, Collection<V> source, ReplaceFunction<V> replaceF, Function<?, Boolean> terminateEarly)
1:     {
1:         NodeBuilder current = rootBuilder;
0:         current.reset(btree, POSITIVE_INFINITY);
1: 
0:         for (V key : source)
1:         {
1:             while (true)
1:             {
0:                 if (terminateEarly != null && terminateEarly.apply(null) == Boolean.TRUE)
1:                 {
1:                     rootBuilder.clear();
1:                     return null;
1:                 }
0:                 NodeBuilder next = current.update(key, comparator, replaceF);
1:                 if (next == null)
1:                     break;
1:                 // we were in a subtree from a previous key that didn't contain this new key;
1:                 // retry against the correct subtree
1:                 current = next;
1:             }
1:         }
1: 
1:         // finish copying any remaining keys from the original btree
1:         while (true)
1:         {
0:             NodeBuilder next = current.update(POSITIVE_INFINITY, comparator, replaceF);
1:             if (next == null)
1:                 break;
1:             current = next;
1:         }
1: 
1:         // updating with POSITIVE_INFINITY means that current should be back to the root
1:         assert current.isRoot();
1: 
1:         Object[] r = current.toNode();
1:         current.clear();
1:         return r;
1:     }
1: 
0:     public <V> Object[] build(Collection<V> source, int size)
1:     {
1:         NodeBuilder current = rootBuilder;
1:         // we descend only to avoid wasting memory; in update() we will often descend into existing trees
1:         // so here we want to descend also, so we don't have lg max(N) depth in both directions
1:         while ((size >>= FAN_SHIFT) > 0)
1:             current = current.ensureChild();
1: 
0:         current.reset(EMPTY_LEAF, POSITIVE_INFINITY);
0:         for (V key : source)
0:             current.addNewKey(key, null);
1: 
1:         current = current.ascendToRoot();
1: 
1:         Object[] r = current.toNode();
1:         current.clear();
1:         return r;
1:     }
1: }
============================================================================