1:a3e0418: /*
1:a3e0418:  * Licensed to the Apache Software Foundation (ASF) under one
1:a3e0418:  * or more contributor license agreements.  See the NOTICE file
1:a3e0418:  * distributed with this work for additional information
1:a3e0418:  * regarding copyright ownership.  The ASF licenses this file
1:a3e0418:  * to you under the Apache License, Version 2.0 (the
1:a3e0418:  * "License"); you may not use this file except in compliance
1:a3e0418:  * with the License.  You may obtain a copy of the License at
1:a3e0418:  *
1:a3e0418:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a3e0418:  *
1:a3e0418:  * Unless required by applicable law or agreed to in writing, software
1:a3e0418:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a3e0418:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3e0418:  * See the License for the specific language governing permissions and
1:a3e0418:  * limitations under the License.
1:a3e0418:  */
1:a3e0418: package org.apache.cassandra.concurrent;
1:a3e0418: 
1:a3e0418: import java.util.BitSet;
1:a3e0418: import java.util.TreeSet;
1:a3e0418: import java.util.concurrent.ExecutionException;
1:a3e0418: import java.util.concurrent.ExecutorService;
1:a3e0418: import java.util.concurrent.Future;
1:a3e0418: import java.util.concurrent.TimeUnit;
1:a3e0418: import java.util.concurrent.TimeoutException;
1:a3e0418: import java.util.concurrent.locks.LockSupport;
1:a3e0418: 
1:a3e0418: import com.google.common.util.concurrent.Uninterruptibles;
1:a3e0418: import org.apache.commons.math3.distribution.WeibullDistribution;
1:a3e0418: import org.junit.Test;
1:a3e0418: 
1:a3e0418: public class LongSharedExecutorPoolTest
1:a3e0418: {
1:a3e0418: 
1:a3e0418:     private static final class WaitTask implements Runnable
1:a3e0418:     {
1:a3e0418:         final long nanos;
1:a3e0418: 
1:a3e0418:         private WaitTask(long nanos)
1:a3e0418:         {
1:a3e0418:             this.nanos = nanos;
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:         public void run()
1:a3e0418:         {
1:a3e0418:             LockSupport.parkNanos(nanos);
1:a3e0418:         }
1:a3e0418:     }
1:a3e0418: 
1:a3e0418:     private static final class Result implements Comparable<Result>
1:a3e0418:     {
1:a3e0418:         final Future<?> future;
1:a3e0418:         final long forecastedCompletion;
1:a3e0418: 
1:a3e0418:         private Result(Future<?> future, long forecastedCompletion)
1:a3e0418:         {
1:a3e0418:             this.future = future;
1:a3e0418:             this.forecastedCompletion = forecastedCompletion;
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:         public int compareTo(Result that)
1:a3e0418:         {
1:a3e0418:             int c = Long.compare(this.forecastedCompletion, that.forecastedCompletion);
1:a3e0418:             if (c != 0)
1:a3e0418:                 return c;
1:a3e0418:             c = Integer.compare(this.hashCode(), that.hashCode());
1:a3e0418:             if (c != 0)
1:a3e0418:                 return c;
1:a3e0418:             return Integer.compare(this.future.hashCode(), that.future.hashCode());
1:a3e0418:         }
1:a3e0418:     }
1:a3e0418: 
1:a3e0418:     private static final class Batch implements Comparable<Batch>
1:a3e0418:     {
1:a3e0418:         final TreeSet<Result> results;
1:a3e0418:         final long timeout;
1:a3e0418:         final int executorIndex;
1:a3e0418: 
1:a3e0418:         private Batch(TreeSet<Result> results, long timeout, int executorIndex)
1:a3e0418:         {
1:a3e0418:             this.results = results;
1:a3e0418:             this.timeout = timeout;
1:a3e0418:             this.executorIndex = executorIndex;
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:         public int compareTo(Batch that)
1:a3e0418:         {
1:a3e0418:             int c = Long.compare(this.timeout, that.timeout);
1:a3e0418:             if (c != 0)
1:a3e0418:                 return c;
1:a3e0418:             c = Integer.compare(this.results.size(), that.results.size());
1:a3e0418:             if (c != 0)
1:a3e0418:                 return c;
1:a3e0418:             return Integer.compare(this.hashCode(), that.hashCode());
1:a3e0418:         }
1:a3e0418:     }
1:a3e0418: 
1:a3e0418:     @Test
1:a3e0418:     public void testPromptnessOfExecution() throws InterruptedException, ExecutionException
1:a3e0418:     {
1:a3e0418:         testPromptnessOfExecution(TimeUnit.MINUTES.toNanos(2L), 0.5f);
1:a3e0418:     }
1:a3e0418: 
1:a3e0418:     private void testPromptnessOfExecution(long intervalNanos, float loadIncrement) throws InterruptedException, ExecutionException
1:a3e0418:     {
1:a3e0418:         final int executorCount = 4;
1:a3e0418:         int threadCount = 8;
1:a3e0418:         int maxQueued = 1024;
1:a3e0418:         final WeibullDistribution workTime = new WeibullDistribution(3, 200000);
1:a3e0418:         final long minWorkTime = TimeUnit.MICROSECONDS.toNanos(1);
1:a3e0418:         final long maxWorkTime = TimeUnit.MILLISECONDS.toNanos(1);
1:a3e0418: 
1:a3e0418:         final int[] threadCounts = new int[executorCount];
1:a3e0418:         final WeibullDistribution[] workCount = new WeibullDistribution[executorCount];
1:a3e0418:         final ExecutorService[] executors = new ExecutorService[executorCount];
1:a3e0418:         for (int i = 0 ; i < executors.length ; i++)
1:a3e0418:         {
1:a3e0418:             executors[i] = SharedExecutorPool.SHARED.newExecutor(threadCount, maxQueued, "test" + i, "test" + i);
1:a3e0418:             threadCounts[i] = threadCount;
1:a3e0418:             workCount[i] = new WeibullDistribution(2, maxQueued);
1:a3e0418:             threadCount *= 2;
1:a3e0418:             maxQueued *= 2;
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:         long runs = 0;
1:a3e0418:         long events = 0;
1:a3e0418:         final TreeSet<Batch> pending = new TreeSet<>();
1:a3e0418:         final BitSet executorsWithWork = new BitSet(executorCount);
1:a3e0418:         long until = 0;
1:a3e0418:         // basic idea is to go through different levels of load on the executor service; initially is all small batches
1:a3e0418:         // (mostly within max queue size) of very short operations, moving to progressively larger batches
1:a3e0418:         // (beyond max queued size), and longer operations
1:a3e0418:         for (float multiplier = 0f ; multiplier < 2.01f ; )
1:a3e0418:         {
1:a3e0418:             if (System.nanoTime() > until)
1:a3e0418:             {
1:a3e0418:                 System.out.println(String.format("Completed %.0fK batches with %.1fM events", runs * 0.001f, events * 0.000001f));
1:a3e0418:                 events = 0;
1:a3e0418:                 until = System.nanoTime() + intervalNanos;
1:a3e0418:                 multiplier += loadIncrement;
1:a3e0418:                 System.out.println(String.format("Running for %ds with load multiplier %.1f", TimeUnit.NANOSECONDS.toSeconds(intervalNanos), multiplier));
1:a3e0418:             }
1:a3e0418: 
1:a3e0418:             // wait a random amount of time so we submit new tasks in various stages of
1:a3e0418:             long timeout;
1:a3e0418:             if (pending.isEmpty()) timeout = 0;
1:a3e0418:             else if (Math.random() > 0.98) timeout = Long.MAX_VALUE;
1:a3e0418:             else if (pending.size() == executorCount) timeout = pending.first().timeout;
1:a3e0418:             else timeout = (long) (Math.random() * pending.last().timeout);
1:a3e0418: 
1:a3e0418:             while (!pending.isEmpty() && timeout > System.nanoTime())
1:a3e0418:             {
1:a3e0418:                 Batch first = pending.first();
1:a3e0418:                 boolean complete = false;
1:a3e0418:                 try
1:a3e0418:                 {
1:a3e0418:                     for (Result result : first.results.descendingSet())
1:a3e0418:                         result.future.get(timeout - System.nanoTime(), TimeUnit.NANOSECONDS);
1:a3e0418:                     complete = true;
1:a3e0418:                 }
1:a3e0418:                 catch (TimeoutException e)
1:a3e0418:                 {
1:a3e0418:                 }
1:a3e0418:                 if (!complete && System.nanoTime() > first.timeout)
1:a3e0418:                 {
1:a3e0418:                     for (Result result : first.results)
1:a3e0418:                         if (!result.future.isDone())
1:a3e0418:                             throw new AssertionError();
1:a3e0418:                     complete = true;
1:a3e0418:                 }
1:a3e0418:                 if (complete)
1:a3e0418:                 {
1:a3e0418:                     pending.pollFirst();
1:a3e0418:                     executorsWithWork.clear(first.executorIndex);
1:a3e0418:                 }
1:a3e0418:             }
1:a3e0418: 
1:a3e0418:             // if we've emptied the executors, give all our threads an opportunity to spin down
1:a3e0418:             if (timeout == Long.MAX_VALUE)
1:a3e0418:                 Uninterruptibles.sleepUninterruptibly(10, TimeUnit.MILLISECONDS);
1:a3e0418: 
1:a3e0418:             // submit a random batch to the first free executor service
1:a3e0418:             int executorIndex = executorsWithWork.nextClearBit(0);
1:a3e0418:             if (executorIndex >= executorCount)
1:a3e0418:                 continue;
1:a3e0418:             executorsWithWork.set(executorIndex);
1:a3e0418:             ExecutorService executor = executors[executorIndex];
1:a3e0418:             TreeSet<Result> results = new TreeSet<>();
1:a3e0418:             int count = (int) (workCount[executorIndex].sample() * multiplier);
1:a3e0418:             long targetTotalElapsed = 0;
1:a3e0418:             long start = System.nanoTime();
1:a3e0418:             long baseTime;
1:a3e0418:             if (Math.random() > 0.5) baseTime = 2 * (long) (workTime.sample() * multiplier);
1:a3e0418:             else  baseTime = 0;
1:a3e0418:             for (int j = 0 ; j < count ; j++)
1:a3e0418:             {
1:a3e0418:                 long time;
1:a3e0418:                 if (baseTime == 0) time = (long) (workTime.sample() * multiplier);
1:a3e0418:                 else time = (long) (baseTime * Math.random());
1:a3e0418:                 if (time < minWorkTime)
1:a3e0418:                     time = minWorkTime;
1:a3e0418:                 if (time > maxWorkTime)
1:a3e0418:                     time = maxWorkTime;
1:a3e0418:                 targetTotalElapsed += time;
1:a3e0418:                 Future<?> future = executor.submit(new WaitTask(time));
1:a3e0418:                 results.add(new Result(future, System.nanoTime() + time));
1:a3e0418:             }
1:a3e0418:             long end = start + (long) Math.ceil(targetTotalElapsed / (double) threadCounts[executorIndex])
1:a3e0418:                        + TimeUnit.MILLISECONDS.toNanos(100L);
1:a3e0418:             long now = System.nanoTime();
1:a3e0418:             if (runs++ > executorCount && now > end)
1:a3e0418:                 throw new AssertionError();
1:a3e0418:             events += results.size();
1:a3e0418:             pending.add(new Batch(results, end, executorIndex));
1:a3e0418: //            System.out.println(String.format("Submitted batch to executor %d with %d items and %d permitted millis", executorIndex, count, TimeUnit.NANOSECONDS.toMillis(end - start)));
1:a3e0418:         }
1:a3e0418:     }
1:a3e0418: 
1:a3e0418:     public static void main(String[] args) throws InterruptedException, ExecutionException
1:a3e0418:     {
1:a3e0418:         // do longer test
1:a3e0418:         new LongSharedExecutorPoolTest().testPromptnessOfExecution(TimeUnit.MINUTES.toNanos(10L), 0.1f);
1:a3e0418:     }
1:a3e0418: 
1:a3e0418: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:a3e0418
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.concurrent;
1: 
1: import java.util.BitSet;
1: import java.util.TreeSet;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import java.util.concurrent.locks.LockSupport;
1: 
1: import com.google.common.util.concurrent.Uninterruptibles;
1: import org.apache.commons.math3.distribution.WeibullDistribution;
1: import org.junit.Test;
1: 
1: public class LongSharedExecutorPoolTest
1: {
1: 
1:     private static final class WaitTask implements Runnable
1:     {
1:         final long nanos;
1: 
1:         private WaitTask(long nanos)
1:         {
1:             this.nanos = nanos;
1:         }
1: 
1:         public void run()
1:         {
1:             LockSupport.parkNanos(nanos);
1:         }
1:     }
1: 
1:     private static final class Result implements Comparable<Result>
1:     {
1:         final Future<?> future;
1:         final long forecastedCompletion;
1: 
1:         private Result(Future<?> future, long forecastedCompletion)
1:         {
1:             this.future = future;
1:             this.forecastedCompletion = forecastedCompletion;
1:         }
1: 
1:         public int compareTo(Result that)
1:         {
1:             int c = Long.compare(this.forecastedCompletion, that.forecastedCompletion);
1:             if (c != 0)
1:                 return c;
1:             c = Integer.compare(this.hashCode(), that.hashCode());
1:             if (c != 0)
1:                 return c;
1:             return Integer.compare(this.future.hashCode(), that.future.hashCode());
1:         }
1:     }
1: 
1:     private static final class Batch implements Comparable<Batch>
1:     {
1:         final TreeSet<Result> results;
1:         final long timeout;
1:         final int executorIndex;
1: 
1:         private Batch(TreeSet<Result> results, long timeout, int executorIndex)
1:         {
1:             this.results = results;
1:             this.timeout = timeout;
1:             this.executorIndex = executorIndex;
1:         }
1: 
1:         public int compareTo(Batch that)
1:         {
1:             int c = Long.compare(this.timeout, that.timeout);
1:             if (c != 0)
1:                 return c;
1:             c = Integer.compare(this.results.size(), that.results.size());
1:             if (c != 0)
1:                 return c;
1:             return Integer.compare(this.hashCode(), that.hashCode());
1:         }
1:     }
1: 
1:     @Test
1:     public void testPromptnessOfExecution() throws InterruptedException, ExecutionException
1:     {
1:         testPromptnessOfExecution(TimeUnit.MINUTES.toNanos(2L), 0.5f);
1:     }
1: 
1:     private void testPromptnessOfExecution(long intervalNanos, float loadIncrement) throws InterruptedException, ExecutionException
1:     {
1:         final int executorCount = 4;
1:         int threadCount = 8;
1:         int maxQueued = 1024;
1:         final WeibullDistribution workTime = new WeibullDistribution(3, 200000);
1:         final long minWorkTime = TimeUnit.MICROSECONDS.toNanos(1);
1:         final long maxWorkTime = TimeUnit.MILLISECONDS.toNanos(1);
1: 
1:         final int[] threadCounts = new int[executorCount];
1:         final WeibullDistribution[] workCount = new WeibullDistribution[executorCount];
1:         final ExecutorService[] executors = new ExecutorService[executorCount];
1:         for (int i = 0 ; i < executors.length ; i++)
1:         {
1:             executors[i] = SharedExecutorPool.SHARED.newExecutor(threadCount, maxQueued, "test" + i, "test" + i);
1:             threadCounts[i] = threadCount;
1:             workCount[i] = new WeibullDistribution(2, maxQueued);
1:             threadCount *= 2;
1:             maxQueued *= 2;
1:         }
1: 
1:         long runs = 0;
1:         long events = 0;
1:         final TreeSet<Batch> pending = new TreeSet<>();
1:         final BitSet executorsWithWork = new BitSet(executorCount);
1:         long until = 0;
1:         // basic idea is to go through different levels of load on the executor service; initially is all small batches
1:         // (mostly within max queue size) of very short operations, moving to progressively larger batches
1:         // (beyond max queued size), and longer operations
1:         for (float multiplier = 0f ; multiplier < 2.01f ; )
1:         {
1:             if (System.nanoTime() > until)
1:             {
1:                 System.out.println(String.format("Completed %.0fK batches with %.1fM events", runs * 0.001f, events * 0.000001f));
1:                 events = 0;
1:                 until = System.nanoTime() + intervalNanos;
1:                 multiplier += loadIncrement;
1:                 System.out.println(String.format("Running for %ds with load multiplier %.1f", TimeUnit.NANOSECONDS.toSeconds(intervalNanos), multiplier));
1:             }
1: 
1:             // wait a random amount of time so we submit new tasks in various stages of
1:             long timeout;
1:             if (pending.isEmpty()) timeout = 0;
1:             else if (Math.random() > 0.98) timeout = Long.MAX_VALUE;
1:             else if (pending.size() == executorCount) timeout = pending.first().timeout;
1:             else timeout = (long) (Math.random() * pending.last().timeout);
1: 
1:             while (!pending.isEmpty() && timeout > System.nanoTime())
1:             {
1:                 Batch first = pending.first();
1:                 boolean complete = false;
1:                 try
1:                 {
1:                     for (Result result : first.results.descendingSet())
1:                         result.future.get(timeout - System.nanoTime(), TimeUnit.NANOSECONDS);
1:                     complete = true;
1:                 }
1:                 catch (TimeoutException e)
1:                 {
1:                 }
1:                 if (!complete && System.nanoTime() > first.timeout)
1:                 {
1:                     for (Result result : first.results)
1:                         if (!result.future.isDone())
1:                             throw new AssertionError();
1:                     complete = true;
1:                 }
1:                 if (complete)
1:                 {
1:                     pending.pollFirst();
1:                     executorsWithWork.clear(first.executorIndex);
1:                 }
1:             }
1: 
1:             // if we've emptied the executors, give all our threads an opportunity to spin down
1:             if (timeout == Long.MAX_VALUE)
1:                 Uninterruptibles.sleepUninterruptibly(10, TimeUnit.MILLISECONDS);
1: 
1:             // submit a random batch to the first free executor service
1:             int executorIndex = executorsWithWork.nextClearBit(0);
1:             if (executorIndex >= executorCount)
1:                 continue;
1:             executorsWithWork.set(executorIndex);
1:             ExecutorService executor = executors[executorIndex];
1:             TreeSet<Result> results = new TreeSet<>();
1:             int count = (int) (workCount[executorIndex].sample() * multiplier);
1:             long targetTotalElapsed = 0;
1:             long start = System.nanoTime();
1:             long baseTime;
1:             if (Math.random() > 0.5) baseTime = 2 * (long) (workTime.sample() * multiplier);
1:             else  baseTime = 0;
1:             for (int j = 0 ; j < count ; j++)
1:             {
1:                 long time;
1:                 if (baseTime == 0) time = (long) (workTime.sample() * multiplier);
1:                 else time = (long) (baseTime * Math.random());
1:                 if (time < minWorkTime)
1:                     time = minWorkTime;
1:                 if (time > maxWorkTime)
1:                     time = maxWorkTime;
1:                 targetTotalElapsed += time;
1:                 Future<?> future = executor.submit(new WaitTask(time));
1:                 results.add(new Result(future, System.nanoTime() + time));
1:             }
1:             long end = start + (long) Math.ceil(targetTotalElapsed / (double) threadCounts[executorIndex])
1:                        + TimeUnit.MILLISECONDS.toNanos(100L);
1:             long now = System.nanoTime();
1:             if (runs++ > executorCount && now > end)
1:                 throw new AssertionError();
1:             events += results.size();
1:             pending.add(new Batch(results, end, executorIndex));
1: //            System.out.println(String.format("Submitted batch to executor %d with %d items and %d permitted millis", executorIndex, count, TimeUnit.NANOSECONDS.toMillis(end - start)));
1:         }
1:     }
1: 
1:     public static void main(String[] args) throws InterruptedException, ExecutionException
1:     {
1:         // do longer test
1:         new LongSharedExecutorPoolTest().testPromptnessOfExecution(TimeUnit.MINUTES.toNanos(10L), 0.1f);
1:     }
1: 
1: }
============================================================================