1:6094974: /*
1:6094974: * Licensed to the Apache Software Foundation (ASF) under one
1:6094974: * or more contributor license agreements.  See the NOTICE file
1:6094974: * distributed with this work for additional information
1:6094974: * regarding copyright ownership.  The ASF licenses this file
1:6094974: * to you under the Apache License, Version 2.0 (the
1:6094974: * "License"); you may not use this file except in compliance
1:6094974: * with the License.  You may obtain a copy of the License at
1:6094974: *
1:6094974: *    http://www.apache.org/licenses/LICENSE-2.0
1:6094974: *
1:6094974: * Unless required by applicable law or agreed to in writing,
1:6094974: * software distributed under the License is distributed on an
1:6094974: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6094974: * KIND, either express or implied.  See the License for the
1:6094974: * specific language governing permissions and limitations
1:6094974: * under the License.
1:6094974: */
1:6094974: package org.apache.cassandra.db;
1:6094974: 
1:6094974: import java.util.ArrayList;
1:6094974: import java.util.List;
1:6094974: 
1:6094974: import org.junit.Test;
1:6094974: 
1:6094974: import junit.framework.Assert;
1:6094974: import org.apache.cassandra.Util;
1:6094974: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:6094974: import org.apache.cassandra.db.marshal.BytesType;
1:6094974: import org.apache.cassandra.db.marshal.Int32Type;
1:6094974: import org.apache.cassandra.db.rows.*;
1:6094974: import org.apache.cassandra.db.transform.FilteredRows;
1:6094974: import org.apache.cassandra.db.transform.MoreRows;
1:6094974: import org.apache.cassandra.db.transform.Transformation;
1:6094974: import org.apache.cassandra.dht.Murmur3Partitioner;
1:6094974: import org.apache.cassandra.utils.AbstractIterator;
1:6094974: import org.apache.cassandra.utils.ByteBufferUtil;
1:6094974: 
1:6094974: public class TransformerTest
1:6094974: {
1:9797511:     static
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:6094974: 
1:6094974:     static final CFMetaData metadata = metadata();
1:6094974:     static final DecoratedKey partitionKey = new BufferDecoratedKey(new Murmur3Partitioner.LongToken(0L), ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:6094974:     static final Row staticRow = BTreeRow.singleCellRow(Clustering.STATIC_CLUSTERING, new BufferCell(metadata.partitionColumns().columns(true).getSimple(0), 0L, 0, 0, ByteBufferUtil.bytes(-1), null));
1:6094974: 
1:6094974:     static CFMetaData metadata()
1:6094974:     {
1:6094974:         CFMetaData.Builder builder = CFMetaData.Builder.create("", "");
1:6094974:         builder.addPartitionKey("pk", BytesType.instance);
1:6094974:         builder.addClusteringColumn("c", Int32Type.instance);
1:6094974:         builder.addStaticColumn("s", Int32Type.instance);
1:6094974:         builder.addRegularColumn("v", Int32Type.instance);
1:6094974:         return builder.build();
1:6094974:     }
1:6094974: 
1:6094974:     // Mock Data
1:6094974: 
1:6094974:     static abstract class AbstractBaseRowIterator<U extends Unfiltered> extends AbstractIterator<U> implements BaseRowIterator<U>
1:6094974:     {
1:6094974:         private final int i;
1:6094974:         private boolean returned;
1:6094974: 
1:6094974:         protected AbstractBaseRowIterator(int i)
1:6094974:         {
1:6094974:             this.i = i;
1:6094974:         }
1:6094974: 
1:6094974:         protected U computeNext()
1:6094974:         {
1:6094974:             if (returned)
1:6094974:                 return endOfData();
1:6094974:             returned = true;
1:6094974:             return (U) row(i);
1:6094974:         }
1:6094974: 
1:6094974:         public CFMetaData metadata()
1:6094974:         {
1:6094974:             return metadata;
1:6094974:         }
1:6094974: 
1:6094974:         public boolean isReverseOrder()
1:6094974:         {
1:6094974:             return false;
1:6094974:         }
1:6094974: 
1:6094974:         public PartitionColumns columns()
1:6094974:         {
1:6094974:             return metadata.partitionColumns();
1:6094974:         }
1:6094974: 
1:6094974:         public DecoratedKey partitionKey()
1:6094974:         {
1:6094974:             return partitionKey;
1:6094974:         }
1:6094974: 
1:6094974:         public Row staticRow()
1:6094974:         {
1:6094974:             return staticRow;
1:6094974:         }
1:6094974: 
1:6094974:         public boolean isEmpty()
1:6094974:         {
1:6094974:             return false;
1:6094974:         }
1:6094974: 
1:6094974:         public void close()
1:6094974:         {
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static UnfilteredRowIterator unfiltered(int i)
1:6094974:     {
1:6094974:         class Iter extends AbstractBaseRowIterator<Unfiltered> implements UnfilteredRowIterator
1:6094974:         {
1:6094974:             protected Iter(int i)
1:6094974:             {
1:6094974:                 super(i);
1:6094974:             }
1:6094974: 
1:6094974:             public DeletionTime partitionLevelDeletion()
1:6094974:             {
1:6094974:                 return DeletionTime.LIVE;
1:6094974:             }
1:6094974: 
1:6094974:             public EncodingStats stats()
1:6094974:             {
1:6094974:                 return EncodingStats.NO_STATS;
1:6094974:             }
1:6094974:         }
1:6094974:         return new Iter(i);
1:6094974:     }
1:6094974: 
1:6094974:     private static RowIterator filtered(int i)
1:6094974:     {
1:6094974:         class Iter extends AbstractBaseRowIterator<Row> implements RowIterator
1:6094974:         {
1:6094974:             protected Iter(int i)
1:6094974:             {
1:6094974:                 super(i);
1:6094974:             }
1:6094974:         }
1:6094974:         return new Iter(i);
1:6094974:     }
1:6094974: 
1:6094974:     private static Row row(int i)
1:6094974:     {
1:6094974:         return BTreeRow.singleCellRow(Util.clustering(metadata.comparator, i),
1:6094974:                                       new BufferCell(metadata.partitionColumns().columns(false).getSimple(0), 1L, BufferCell.NO_TTL, BufferCell.NO_DELETION_TIME, ByteBufferUtil.bytes(i), null));
1:6094974:     }
1:6094974: 
1:6094974:     // Transformations that check mock data ranges
1:6094974: 
1:6094974:     private static Transformation expect(int from, int to, List<Check> checks)
1:6094974:     {
1:6094974:         Expect expect = new Expect(from, to);
1:6094974:         checks.add(expect);
1:6094974:         return expect;
1:6094974:     }
1:6094974: 
1:6094974:     abstract static class Check extends Transformation
1:6094974:     {
1:6094974:         public abstract void check();
1:6094974:     }
1:6094974: 
1:6094974:     static class Expect extends Check
1:6094974:     {
1:6094974:         final int from, to;
1:6094974:         int cur;
1:6094974:         boolean closed;
1:6094974: 
1:6094974:         Expect(int from, int to)
1:6094974:         {
1:6094974:             this.from = from;
1:6094974:             this.to = to;
1:6094974:             this.cur = from;
1:6094974:         }
1:6094974: 
1:6094974:         public Row applyToRow(Row row)
1:6094974:         {
1:6094974:             Assert.assertEquals(cur++, ByteBufferUtil.toInt(row.clustering().get(0)));
1:6094974:             return row;
1:6094974:         }
1:6094974: 
1:6094974:         public void onPartitionClose()
1:6094974:         {
1:6094974:             Assert.assertEquals(to, cur);
1:6094974:             closed = true;
1:6094974:         }
1:6094974: 
1:6094974:         public void check()
1:6094974:         {
1:6094974:             Assert.assertTrue(closed);
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     // Combinations of mock data and checks for an empty, singleton, and extending (sequential) range
1:6094974: 
1:6094974:     private static enum Filter
1:6094974:     {
1:6094974:         INIT, APPLY_INNER, APPLY_OUTER, NONE
1:6094974:     }
1:6094974: 
1:6094974:     private static BaseRowIterator<?> empty(Filter filter, List<Check> checks)
1:6094974:     {
1:6094974:         switch (filter)
1:6094974:         {
1:6094974:             case INIT:
1:6094974:                 return Transformation.apply(EmptyIterators.row(metadata, partitionKey, false), expect(0, 0, checks));
1:6094974:             case APPLY_INNER:
1:6094974:                 return Transformation.apply(FilteredRows.filter(Transformation.apply(EmptyIterators.unfilteredRow(metadata, partitionKey, false), expect(0, 0, checks)), Integer.MAX_VALUE), expect(0, 0, checks));
1:6094974:             case APPLY_OUTER:
1:6094974:             case NONE:
1:6094974:                 return Transformation.apply(EmptyIterators.unfilteredRow(metadata, partitionKey, false), expect(0, 0, checks));
1:6094974:             default:
1:6094974:                 throw new IllegalStateException();
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static BaseRowIterator<?> singleton(Filter filter, int i, List<Check> checks)
1:6094974:     {
1:6094974:         switch (filter)
1:6094974:         {
1:6094974:             case INIT:
1:6094974:                 return Transformation.apply(filtered(i), expect(i, i + 1, checks));
1:6094974:             case APPLY_INNER:
1:6094974:                 return FilteredRows.filter(Transformation.apply(unfiltered(i), expect(i, i + 1, checks)), Integer.MAX_VALUE);
1:6094974:             case APPLY_OUTER:
1:6094974:             case NONE:
1:6094974:                 return Transformation.apply(unfiltered(i), expect(i, i + 1, checks));
1:6094974:             default:
1:6094974:                 throw new IllegalStateException();
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static BaseRowIterator<?> extendingIterator(int count, Filter filter, List<Check> checks)
1:6094974:     {
1:6094974:         class RefillNested extends Expect implements MoreRows<BaseRowIterator<?>>
1:6094974:         {
1:6094974:             boolean returnedEmpty, returnedSingleton, returnedNested;
1:6094974:             RefillNested(int from)
1:6094974:             {
1:6094974:                 super(from, count);
1:6094974:             }
1:6094974: 
1:6094974:             public BaseRowIterator<?> moreContents()
1:6094974:             {
1:6094974:                 // first call return an empty iterator,
1:6094974:                 // second call return a singleton iterator (with a function that expects to be around to receive just that item)
1:6094974:                 // third call return a nested version of ourselves, with a function that expects to receive all future values
1:6094974:                 // fourth call, return null, indicating no more iterators to return
1:6094974: 
1:6094974:                 if (!returnedEmpty)
1:6094974:                 {
1:6094974:                     returnedEmpty = true;
1:6094974:                     return empty(filter, checks);
1:6094974:                 }
1:6094974: 
1:6094974:                 if (!returnedSingleton)
1:6094974:                 {
1:6094974:                     returnedSingleton = true;
1:6094974:                     return singleton(filter, from, checks);
1:6094974:                 }
1:6094974: 
1:6094974:                 if (from + 1 >= to)
1:6094974:                     return null;
1:6094974: 
1:6094974:                 if (!returnedNested)
1:6094974:                 {
1:6094974:                     returnedNested = true;
1:6094974: 
1:6094974:                     RefillNested refill = new RefillNested(from + 1);
1:6094974:                     checks.add(refill);
1:6094974:                     return refill.applyTo(empty(filter, checks));
1:6094974:                 }
1:6094974: 
1:6094974:                 return null;
1:6094974:             }
1:6094974: 
1:6094974:             BaseRowIterator<?> applyTo(BaseRowIterator<?> iter)
1:6094974:             {
1:6094974:                 if (iter instanceof UnfilteredRowIterator)
1:6094974:                     return Transformation.apply(MoreRows.extend((UnfilteredRowIterator) iter, this), this);
1:6094974:                 else
1:6094974:                     return Transformation.apply(MoreRows.extend((RowIterator) iter, this), this);
1:6094974:             }
1:6094974:         }
1:6094974: 
1:6094974:         RefillNested refill = new RefillNested(0);
1:6094974:         checks.add(refill);
1:6094974: 
1:6094974:         BaseRowIterator<?> iter = empty(filter, checks);
1:6094974:         switch (filter)
1:6094974:         {
1:6094974:             case APPLY_OUTER:
1:6094974:                 return FilteredRows.filter((UnfilteredRowIterator) refill.applyTo(iter), Integer.MAX_VALUE);
1:6094974:             case APPLY_INNER:
1:6094974:             case INIT:
1:6094974:             case NONE:
1:6094974:                 return refill.applyTo(iter);
1:6094974:             default:
1:6094974:                 throw new IllegalStateException();
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     @Test
1:6094974:     public void testRowExtension()
1:6094974:     {
1:6094974:         for (Filter filter : Filter.values())
1:6094974:         {
1:6094974:             List<Check> checks = new ArrayList<>();
1:6094974: 
1:6094974:             BaseRowIterator<?> iter = extendingIterator(5, filter, checks);
1:6094974:             for (int i = 0 ; i < 5 ; i++)
1:6094974:             {
1:6094974:                 Unfiltered u = iter.next();
1:6094974:                 assert u instanceof Row;
1:6094974:                 Assert.assertEquals(i, ByteBufferUtil.toInt(u.clustering().get(0)));
1:6094974:             }
1:6094974:             iter.close();
1:6094974: 
1:6094974:             for (Check check : checks)
1:6094974:                 check.check();
1:6094974:         }
1:6094974:     }
1:6094974: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.transform.FilteredRows;
1: import org.apache.cassandra.db.transform.MoreRows;
1: import org.apache.cassandra.db.transform.Transformation;
1: import org.apache.cassandra.dht.Murmur3Partitioner;
1: import org.apache.cassandra.utils.AbstractIterator;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class TransformerTest
1: {
1: 
1:     static final CFMetaData metadata = metadata();
1:     static final DecoratedKey partitionKey = new BufferDecoratedKey(new Murmur3Partitioner.LongToken(0L), ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:     static final Row staticRow = BTreeRow.singleCellRow(Clustering.STATIC_CLUSTERING, new BufferCell(metadata.partitionColumns().columns(true).getSimple(0), 0L, 0, 0, ByteBufferUtil.bytes(-1), null));
1: 
1:     static CFMetaData metadata()
1:     {
1:         CFMetaData.Builder builder = CFMetaData.Builder.create("", "");
1:         builder.addPartitionKey("pk", BytesType.instance);
1:         builder.addClusteringColumn("c", Int32Type.instance);
1:         builder.addStaticColumn("s", Int32Type.instance);
1:         builder.addRegularColumn("v", Int32Type.instance);
1:         return builder.build();
1:     }
1: 
1:     // Mock Data
1: 
1:     static abstract class AbstractBaseRowIterator<U extends Unfiltered> extends AbstractIterator<U> implements BaseRowIterator<U>
1:     {
1:         private final int i;
1:         private boolean returned;
1: 
1:         protected AbstractBaseRowIterator(int i)
1:         {
1:             this.i = i;
1:         }
1: 
1:         protected U computeNext()
1:         {
1:             if (returned)
1:                 return endOfData();
1:             returned = true;
1:             return (U) row(i);
1:         }
1: 
1:         public CFMetaData metadata()
1:         {
1:             return metadata;
1:         }
1: 
1:         public boolean isReverseOrder()
1:         {
1:             return false;
1:         }
1: 
1:         public PartitionColumns columns()
1:         {
1:             return metadata.partitionColumns();
1:         }
1: 
1:         public DecoratedKey partitionKey()
1:         {
1:             return partitionKey;
1:         }
1: 
1:         public Row staticRow()
1:         {
1:             return staticRow;
1:         }
1: 
1:         public boolean isEmpty()
1:         {
1:             return false;
1:         }
1: 
1:         public void close()
1:         {
1:         }
1:     }
1: 
1:     private static UnfilteredRowIterator unfiltered(int i)
1:     {
1:         class Iter extends AbstractBaseRowIterator<Unfiltered> implements UnfilteredRowIterator
1:         {
1:             protected Iter(int i)
1:             {
1:                 super(i);
1:             }
1: 
1:             public DeletionTime partitionLevelDeletion()
1:             {
1:                 return DeletionTime.LIVE;
1:             }
1: 
1:             public EncodingStats stats()
1:             {
1:                 return EncodingStats.NO_STATS;
1:             }
1:         }
1:         return new Iter(i);
1:     }
1: 
1:     private static RowIterator filtered(int i)
1:     {
1:         class Iter extends AbstractBaseRowIterator<Row> implements RowIterator
1:         {
1:             protected Iter(int i)
1:             {
1:                 super(i);
1:             }
1:         }
1:         return new Iter(i);
1:     }
1: 
1:     private static Row row(int i)
1:     {
1:         return BTreeRow.singleCellRow(Util.clustering(metadata.comparator, i),
1:                                       new BufferCell(metadata.partitionColumns().columns(false).getSimple(0), 1L, BufferCell.NO_TTL, BufferCell.NO_DELETION_TIME, ByteBufferUtil.bytes(i), null));
1:     }
1: 
1:     // Transformations that check mock data ranges
1: 
1:     private static Transformation expect(int from, int to, List<Check> checks)
1:     {
1:         Expect expect = new Expect(from, to);
1:         checks.add(expect);
1:         return expect;
1:     }
1: 
1:     abstract static class Check extends Transformation
1:     {
1:         public abstract void check();
1:     }
1: 
1:     static class Expect extends Check
1:     {
1:         final int from, to;
1:         int cur;
1:         boolean closed;
1: 
1:         Expect(int from, int to)
1:         {
1:             this.from = from;
1:             this.to = to;
1:             this.cur = from;
1:         }
1: 
1:         public Row applyToRow(Row row)
1:         {
1:             Assert.assertEquals(cur++, ByteBufferUtil.toInt(row.clustering().get(0)));
1:             return row;
1:         }
1: 
1:         public void onPartitionClose()
1:         {
1:             Assert.assertEquals(to, cur);
1:             closed = true;
1:         }
1: 
1:         public void check()
1:         {
1:             Assert.assertTrue(closed);
1:         }
1:     }
1: 
1:     // Combinations of mock data and checks for an empty, singleton, and extending (sequential) range
1: 
1:     private static enum Filter
1:     {
1:         INIT, APPLY_INNER, APPLY_OUTER, NONE
1:     }
1: 
1:     private static BaseRowIterator<?> empty(Filter filter, List<Check> checks)
1:     {
1:         switch (filter)
1:         {
1:             case INIT:
1:                 return Transformation.apply(EmptyIterators.row(metadata, partitionKey, false), expect(0, 0, checks));
1:             case APPLY_INNER:
1:                 return Transformation.apply(FilteredRows.filter(Transformation.apply(EmptyIterators.unfilteredRow(metadata, partitionKey, false), expect(0, 0, checks)), Integer.MAX_VALUE), expect(0, 0, checks));
1:             case APPLY_OUTER:
1:             case NONE:
1:                 return Transformation.apply(EmptyIterators.unfilteredRow(metadata, partitionKey, false), expect(0, 0, checks));
1:             default:
1:                 throw new IllegalStateException();
1:         }
1:     }
1: 
1:     private static BaseRowIterator<?> singleton(Filter filter, int i, List<Check> checks)
1:     {
1:         switch (filter)
1:         {
1:             case INIT:
1:                 return Transformation.apply(filtered(i), expect(i, i + 1, checks));
1:             case APPLY_INNER:
1:                 return FilteredRows.filter(Transformation.apply(unfiltered(i), expect(i, i + 1, checks)), Integer.MAX_VALUE);
1:             case APPLY_OUTER:
1:             case NONE:
1:                 return Transformation.apply(unfiltered(i), expect(i, i + 1, checks));
1:             default:
1:                 throw new IllegalStateException();
1:         }
1:     }
1: 
1:     private static BaseRowIterator<?> extendingIterator(int count, Filter filter, List<Check> checks)
1:     {
1:         class RefillNested extends Expect implements MoreRows<BaseRowIterator<?>>
1:         {
1:             boolean returnedEmpty, returnedSingleton, returnedNested;
1:             RefillNested(int from)
1:             {
1:                 super(from, count);
1:             }
1: 
1:             public BaseRowIterator<?> moreContents()
1:             {
1:                 // first call return an empty iterator,
1:                 // second call return a singleton iterator (with a function that expects to be around to receive just that item)
1:                 // third call return a nested version of ourselves, with a function that expects to receive all future values
1:                 // fourth call, return null, indicating no more iterators to return
1: 
1:                 if (!returnedEmpty)
1:                 {
1:                     returnedEmpty = true;
1:                     return empty(filter, checks);
1:                 }
1: 
1:                 if (!returnedSingleton)
1:                 {
1:                     returnedSingleton = true;
1:                     return singleton(filter, from, checks);
1:                 }
1: 
1:                 if (from + 1 >= to)
1:                     return null;
1: 
1:                 if (!returnedNested)
1:                 {
1:                     returnedNested = true;
1: 
1:                     RefillNested refill = new RefillNested(from + 1);
1:                     checks.add(refill);
1:                     return refill.applyTo(empty(filter, checks));
1:                 }
1: 
1:                 return null;
1:             }
1: 
1:             BaseRowIterator<?> applyTo(BaseRowIterator<?> iter)
1:             {
1:                 if (iter instanceof UnfilteredRowIterator)
1:                     return Transformation.apply(MoreRows.extend((UnfilteredRowIterator) iter, this), this);
1:                 else
1:                     return Transformation.apply(MoreRows.extend((RowIterator) iter, this), this);
1:             }
1:         }
1: 
1:         RefillNested refill = new RefillNested(0);
1:         checks.add(refill);
1: 
1:         BaseRowIterator<?> iter = empty(filter, checks);
1:         switch (filter)
1:         {
1:             case APPLY_OUTER:
1:                 return FilteredRows.filter((UnfilteredRowIterator) refill.applyTo(iter), Integer.MAX_VALUE);
1:             case APPLY_INNER:
1:             case INIT:
1:             case NONE:
1:                 return refill.applyTo(iter);
1:             default:
1:                 throw new IllegalStateException();
1:         }
1:     }
1: 
1:     @Test
1:     public void testRowExtension()
1:     {
1:         for (Filter filter : Filter.values())
1:         {
1:             List<Check> checks = new ArrayList<>();
1: 
1:             BaseRowIterator<?> iter = extendingIterator(5, filter, checks);
1:             for (int i = 0 ; i < 5 ; i++)
1:             {
1:                 Unfiltered u = iter.next();
1:                 assert u instanceof Row;
1:                 Assert.assertEquals(i, ByteBufferUtil.toInt(u.clustering().get(0)));
1:             }
1:             iter.close();
1: 
1:             for (Check check : checks)
1:                 check.check();
1:         }
1:     }
1: }
============================================================================