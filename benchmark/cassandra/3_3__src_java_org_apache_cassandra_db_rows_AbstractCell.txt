1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
1:a991b64: 
1:2f41243: import java.nio.ByteBuffer;
1:a991b64: import java.security.MessageDigest;
1:a991b64: import java.util.Objects;
1:a991b64: 
1:639d4b2: import org.apache.cassandra.config.ColumnDefinition;
1:2f41243: import org.apache.cassandra.db.DeletionPurger;
1:2f41243: import org.apache.cassandra.db.TypeSizes;
1:a991b64: import org.apache.cassandra.db.context.CounterContext;
1:a991b64: import org.apache.cassandra.db.marshal.AbstractType;
1:a991b64: import org.apache.cassandra.db.marshal.CollectionType;
1:a991b64: import org.apache.cassandra.serializers.MarshalException;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:2f41243: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Base abstract class for {@code Cell} implementations.
1:a991b64:  *
1:a991b64:  * Unless you have a very good reason not to, every cell implementation
1:a991b64:  * should probably extend this class.
1:a991b64:  */
1:639d4b2: public abstract class AbstractCell extends Cell
1:c83f20a: {
1:639d4b2:     protected AbstractCell(ColumnDefinition column)
1:a991b64:     {
1:639d4b2:         super(column);
7:2f41243:     }
7:2f41243: 
1:2f41243:     public boolean isCounterCell()
7:2f41243:     {
1:2f41243:         return !isTombstone() && column.cellValueType().isCounter();
1:2f41243:     }
1:2f41243: 
1:a991b64:     public boolean isLive(int nowInSec)
1:a991b64:     {
1:2f41243:         return localDeletionTime() == NO_DELETION_TIME || (ttl() != NO_TTL && nowInSec < localDeletionTime());
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isTombstone()
1:a991b64:     {
1:2f41243:         return localDeletionTime() != NO_DELETION_TIME && ttl() == NO_TTL;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isExpiring()
1:a991b64:     {
1:2f41243:         return ttl() != NO_TTL;
1:a991b64:     }
1:a991b64: 
1:2f41243:     public Cell markCounterLocalToBeCleared()
1:a991b64:     {
1:2f41243:         if (!isCounterCell())
1:2f41243:             return this;
1:a991b64: 
1:2f41243:         ByteBuffer value = value();
1:2f41243:         ByteBuffer marked = CounterContext.instance().markLocalToBeCleared(value);
1:2f41243:         return marked == value ? this : new BufferCell(column, timestamp(), ttl(), localDeletionTime(), marked, path());
1:a991b64:     }
1:a991b64: 
1:2f41243:     public Cell purge(DeletionPurger purger, int nowInSec)
1:a991b64:     {
1:2f41243:         if (!isLive(nowInSec))
1:a991b64:         {
1:2f41243:             if (purger.shouldPurge(timestamp(), localDeletionTime()))
1:2f41243:                 return null;
1:a991b64: 
1:2f41243:             // We slightly hijack purging to convert expired but not purgeable columns to tombstones. The reason we do that is
1:2f41243:             // that once a column has expired it is equivalent to a tombstone but actually using a tombstone is more compact since
1:2f41243:             // we don't keep the column value. The reason we do it here is that 1) it's somewhat related to dealing with tombstones
1:2f41243:             // so hopefully not too surprising and 2) we want to this and purging at the same places, so it's simpler/more efficient
1:2f41243:             // to do both here.
1:2f41243:             if (isExpiring())
1:2f41243:             {
1:2f41243:                 // Note that as long as the expiring column and the tombstone put together live longer than GC grace seconds,
1:2f41243:                 // we'll fulfil our responsibility to repair. See discussion at
1:2f41243:                 // http://cassandra-user-incubator-apache-org.3065146.n2.nabble.com/repair-compaction-and-tombstone-rows-td7583481.html
1:d3f4ae8:                 return BufferCell.tombstone(column, timestamp(), localDeletionTime() - ttl(), path());
1:a991b64:             }
1:a991b64:         }
1:2f41243:         return this;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public Cell copy(AbstractAllocator allocator)
1:2f41243:     {
1:2f41243:         CellPath path = path();
1:2f41243:         return new BufferCell(column, timestamp(), ttl(), localDeletionTime(), allocator.clone(value()), path == null ? null : path.copy(allocator));
1:2f41243:     }
1:2f41243: 
1:2f41243:     // note: while the cell returned may be different, the value is the same, so if the value is offheap it must be referenced inside a guarded context (or copied)
1:2f41243:     public Cell updateAllTimestamp(long newTimestamp)
1:2f41243:     {
1:2f41243:         return new BufferCell(column, isTombstone() ? newTimestamp - 1 : newTimestamp, ttl(), localDeletionTime(), value(), path());
1:2f41243:     }
1:2f41243: 
1:a991b64:     public int dataSize()
1:2f41243:     {
1:2f41243:         CellPath path = path();
1:2f41243:         return TypeSizes.sizeof(timestamp())
1:2f41243:                + TypeSizes.sizeof(ttl())
1:2f41243:                + TypeSizes.sizeof(localDeletionTime())
1:2f41243:                + value().remaining()
1:2f41243:                + (path == null ? 0 : path.dataSize());
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void digest(MessageDigest digest)
1:a991b64:     {
1:a991b64:         digest.update(value().duplicate());
1:2457599:         FBUtilities.updateWithLong(digest, timestamp());
1:2457599:         FBUtilities.updateWithInt(digest, ttl());
1:a991b64:         FBUtilities.updateWithBoolean(digest, isCounterCell());
2:a991b64:         if (path() != null)
1:a991b64:             path().digest(digest);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void validate()
1:a991b64:     {
1:2457599:         if (ttl() < 0)
1:2457599:             throw new MarshalException("A TTL should not be negative");
1:2457599:         if (localDeletionTime() < 0)
1:2457599:             throw new MarshalException("A local deletion time should not be negative");
1:2457599:         if (isExpiring() && localDeletionTime() == NO_DELETION_TIME)
1:2457599:             throw new MarshalException("Shoud not have a TTL without an associated local deletion time");
1:a991b64: 
1:de228c7:         if (isTombstone())
1:de228c7:         {
1:de228c7:             // If cell is a tombstone, it shouldn't have a value.
1:de228c7:             if (value().hasRemaining())
1:de228c7:                 throw new MarshalException("A tombstone should not have a value");
1:de228c7:         }
1:de228c7:         else
1:de228c7:         {
1:de228c7:             column().validateCellValue(value());
1:de228c7:         }
1:a991b64: 
1:a991b64:         if (path() != null)
1:a991b64:             column().validateCellPath(path());
1:c83f20a:     }
1:a991b64: 
1:86ba227:     public long maxTimestamp()
1:86ba227:     {
1:86ba227:         return timestamp();
1:86ba227:     }
1:86ba227: 
1:a991b64:     @Override
1:a991b64:     public boolean equals(Object other)
1:c83f20a:     {
1:2457599:         if (this == other)
1:2457599:             return true;
1:2457599: 
1:a991b64:         if(!(other instanceof Cell))
1:a991b64:             return false;
1:a991b64: 
1:a991b64:         Cell that = (Cell)other;
1:a991b64:         return this.column().equals(that.column())
1:a991b64:             && this.isCounterCell() == that.isCounterCell()
1:2457599:             && this.timestamp() == that.timestamp()
1:2457599:             && this.ttl() == that.ttl()
1:2457599:             && this.localDeletionTime() == that.localDeletionTime()
1:a991b64:             && Objects.equals(this.value(), that.value())
1:a991b64:             && Objects.equals(this.path(), that.path());
1:c83f20a:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public int hashCode()
1:a991b64:     {
1:2457599:         return Objects.hash(column(), isCounterCell(), timestamp(), ttl(), localDeletionTime(), value(), path());
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public String toString()
1:a991b64:     {
1:a991b64:         if (isCounterCell())
1:2457599:             return String.format("[%s=%d ts=%d]", column().name, CounterContext.instance().total(value()), timestamp());
1:a991b64: 
1:a991b64:         AbstractType<?> type = column().type;
1:a991b64:         if (type instanceof CollectionType && type.isMultiCell())
1:a991b64:         {
1:a991b64:             CollectionType ct = (CollectionType)type;
1:2457599:             return String.format("[%s[%s]=%s %s]",
1:a991b64:                                  column().name,
1:a991b64:                                  ct.nameComparator().getString(path().get(0)),
1:a991b64:                                  ct.valueComparator().getString(value()),
1:2457599:                                  livenessInfoString());
1:a991b64:         }
1:c83f20a:         if (isTombstone())
1:83f8ccc:             return String.format("[%s=<tombstone> %s]", column().name, livenessInfoString());
1:c83f20a:         else
1:2457599:             return String.format("[%s=%s %s]", column().name, type.getString(value()), livenessInfoString());
1:a991b64:     }
1:a991b64: 
1:2457599:     private String livenessInfoString()
1:a991b64:     {
1:2457599:         if (isExpiring())
1:2457599:             return String.format("ts=%d ttl=%d ldt=%d", timestamp(), ttl(), localDeletionTime());
1:2457599:         else if (isTombstone())
1:2457599:             return String.format("ts=%d ldt=%d", timestamp(), localDeletionTime());
1:2457599:         else
1:2457599:             return String.format("ts=%d", timestamp());
1:a991b64:     }
1:2457599: 
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a87fd71
commit:86ba227
/////////////////////////////////////////////////////////////////////////
1:     public long maxTimestamp()
1:     {
1:         return timestamp();
1:     }
1: 
commit:de228c7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (isTombstone())
1:         {
1:             // If cell is a tombstone, it shouldn't have a value.
1:             if (value().hasRemaining())
1:                 throw new MarshalException("A tombstone should not have a value");
1:         }
1:         else
1:         {
1:             column().validateCellValue(value());
1:         }
commit:a62f70d
commit:c83f20a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (isTombstone())
1:         {
0:             // If cell is a tombstone, it shouldn't have a value.
0:             if (value().hasRemaining())
0:                 throw new MarshalException("A tombstone should not have a value");
1:         }
1:         else
1:         {
0:             column().validateCellValue(value());
1:         }
commit:d3f4ae8
/////////////////////////////////////////////////////////////////////////
1:                 return BufferCell.tombstone(column, timestamp(), localDeletionTime() - ttl(), path());
commit:782a1c3
/////////////////////////////////////////////////////////////////////////
commit:2457599
/////////////////////////////////////////////////////////////////////////
1:         FBUtilities.updateWithLong(digest, timestamp());
0:         FBUtilities.updateWithInt(digest, localDeletionTime());
1:         FBUtilities.updateWithInt(digest, ttl());
/////////////////////////////////////////////////////////////////////////
1:         if (ttl() < 0)
1:             throw new MarshalException("A TTL should not be negative");
1:         if (localDeletionTime() < 0)
1:             throw new MarshalException("A local deletion time should not be negative");
1:         if (isExpiring() && localDeletionTime() == NO_DELETION_TIME)
1:             throw new MarshalException("Shoud not have a TTL without an associated local deletion time");
/////////////////////////////////////////////////////////////////////////
1:         if (this == other)
1:             return true;
1: 
1:             && this.timestamp() == that.timestamp()
1:             && this.ttl() == that.ttl()
1:             && this.localDeletionTime() == that.localDeletionTime()
1:         return Objects.hash(column(), isCounterCell(), timestamp(), ttl(), localDeletionTime(), value(), path());
1:             return String.format("[%s=%d ts=%d]", column().name, CounterContext.instance().total(value()), timestamp());
1:             return String.format("[%s[%s]=%s %s]",
1:                                  livenessInfoString());
1:         return String.format("[%s=%s %s]", column().name, type.getString(value()), livenessInfoString());
1:     private String livenessInfoString()
1:         if (isExpiring())
1:             return String.format("ts=%d ttl=%d ldt=%d", timestamp(), ttl(), localDeletionTime());
1:         else if (isTombstone())
1:             return String.format("ts=%d ldt=%d", timestamp(), localDeletionTime());
1:         else
1:             return String.format("ts=%d", timestamp());
1: 
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.security.MessageDigest;
1: import java.util.Objects;
1: 
1: import org.apache.cassandra.db.context.CounterContext;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.CollectionType;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * Base abstract class for {@code Cell} implementations.
1:  *
1:  * Unless you have a very good reason not to, every cell implementation
1:  * should probably extend this class.
1:  */
0: public abstract class AbstractCell implements Cell
1: {
1:     public boolean isLive(int nowInSec)
1:     {
0:         return livenessInfo().isLive(nowInSec);
1:     }
1: 
1:     public boolean isTombstone()
1:     {
0:         return livenessInfo().hasLocalDeletionTime() && !livenessInfo().hasTTL();
1:     }
1: 
1:     public boolean isExpiring()
1:     {
0:         return livenessInfo().hasTTL();
1:     }
1: 
0:     public void writeTo(Row.Writer writer)
1:     {
0:         writer.writeCell(column(), isCounterCell(), value(), livenessInfo(), path());
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         digest.update(value().duplicate());
0:         livenessInfo().digest(digest);
1:         FBUtilities.updateWithBoolean(digest, isCounterCell());
1:         if (path() != null)
1:             path().digest(digest);
1:     }
1: 
1:     public void validate()
1:     {
0:         column().validateCellValue(value());
1: 
0:         livenessInfo().validate();
1: 
0:         // If cell is a tombstone, it shouldn't have a value.
0:         if (isTombstone() && value().hasRemaining())
0:             throw new MarshalException("A tombstone should not have a value");
1: 
1:         if (path() != null)
1:             column().validateCellPath(path());
1:     }
1: 
1:     public int dataSize()
1:     {
0:         int size = value().remaining() + livenessInfo().dataSize();
1:         if (path() != null)
0:             size += path().dataSize();
0:         return size;
1: 
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if(!(other instanceof Cell))
1:             return false;
1: 
1:         Cell that = (Cell)other;
1:         return this.column().equals(that.column())
1:             && this.isCounterCell() == that.isCounterCell()
1:             && Objects.equals(this.value(), that.value())
0:             && Objects.equals(this.livenessInfo(), that.livenessInfo())
1:             && Objects.equals(this.path(), that.path());
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         return Objects.hash(column(), isCounterCell(), value(), livenessInfo(), path());
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         if (isCounterCell())
0:             return String.format("[%s=%d ts=%d]", column().name, CounterContext.instance().total(value()), livenessInfo().timestamp());
1: 
1:         AbstractType<?> type = column().type;
1:         if (type instanceof CollectionType && type.isMultiCell())
1:         {
1:             CollectionType ct = (CollectionType)type;
0:             return String.format("[%s[%s]=%s info=%s]",
1:                                  column().name,
1:                                  ct.nameComparator().getString(path().get(0)),
1:                                  ct.valueComparator().getString(value()),
0:                                  livenessInfo());
1:         }
0:         return String.format("[%s=%s info=%s]", column().name, type.getString(value()), livenessInfo());
1:     }
1: 
0:     public Cell takeAlias()
1:     {
0:         // Cell is always used as an Aliasable object but as the code currently
0:         // never need to alias a cell outside of its valid scope, we don't yet
0:         // need that.
0:         throw new UnsupportedOperationException();
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import org.apache.cassandra.db.DeletionPurger;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCounterCell()
1:     {
1:         return !isTombstone() && column.cellValueType().isCounter();
1:     }
1: 
0:     public boolean isLive(int nowInSec)
1:     {
1:         return localDeletionTime() == NO_DELETION_TIME || (ttl() != NO_TTL && nowInSec < localDeletionTime());
1:     }
1: 
0:     public boolean isTombstone()
1:     {
1:         return localDeletionTime() != NO_DELETION_TIME && ttl() == NO_TTL;
1:     }
1: 
0:     public boolean isExpiring()
1:     {
1:         return ttl() != NO_TTL;
1:     }
1: 
1:     public Cell markCounterLocalToBeCleared()
1:     {
1:         if (!isCounterCell())
1:             return this;
1: 
1:         ByteBuffer value = value();
1:         ByteBuffer marked = CounterContext.instance().markLocalToBeCleared(value);
1:         return marked == value ? this : new BufferCell(column, timestamp(), ttl(), localDeletionTime(), marked, path());
1:     }
1: 
1:     public Cell purge(DeletionPurger purger, int nowInSec)
1:     {
1:         if (!isLive(nowInSec))
1:         {
1:             if (purger.shouldPurge(timestamp(), localDeletionTime()))
1:                 return null;
1: 
1:             // We slightly hijack purging to convert expired but not purgeable columns to tombstones. The reason we do that is
1:             // that once a column has expired it is equivalent to a tombstone but actually using a tombstone is more compact since
1:             // we don't keep the column value. The reason we do it here is that 1) it's somewhat related to dealing with tombstones
1:             // so hopefully not too surprising and 2) we want to this and purging at the same places, so it's simpler/more efficient
1:             // to do both here.
1:             if (isExpiring())
1:             {
1:                 // Note that as long as the expiring column and the tombstone put together live longer than GC grace seconds,
1:                 // we'll fulfil our responsibility to repair. See discussion at
1:                 // http://cassandra-user-incubator-apache-org.3065146.n2.nabble.com/repair-compaction-and-tombstone-rows-td7583481.html
0:                 return BufferCell.tombstone(column, timestamp(), localDeletionTime() - ttl());
1:             }
1:         }
1:         return this;
1:     }
1: 
1:     public Cell copy(AbstractAllocator allocator)
1:     {
1:         CellPath path = path();
1:         return new BufferCell(column, timestamp(), ttl(), localDeletionTime(), allocator.clone(value()), path == null ? null : path.copy(allocator));
1:     }
1: 
1:     // note: while the cell returned may be different, the value is the same, so if the value is offheap it must be referenced inside a guarded context (or copied)
1:     public Cell updateAllTimestamp(long newTimestamp)
1:     {
1:         return new BufferCell(column, isTombstone() ? newTimestamp - 1 : newTimestamp, ttl(), localDeletionTime(), value(), path());
1:     }
1: 
0:     public int dataSize()
1:     {
1:         CellPath path = path();
1:         return TypeSizes.sizeof(timestamp())
1:                + TypeSizes.sizeof(ttl())
1:                + TypeSizes.sizeof(localDeletionTime())
1:                + value().remaining()
1:                + (path == null ? 0 : path.dataSize());
1:     }
1: 
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.ColumnDefinition;
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractCell extends Cell
1:     protected AbstractCell(ColumnDefinition column)
0:     {
1:         super(column);
0:     }
0: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:83f8ccc
/////////////////////////////////////////////////////////////////////////
0:         if (isTombstone())
1:             return String.format("[%s=<tombstone> %s]", column().name, livenessInfoString());
0:         else
0:             return String.format("[%s=%s %s]", column().name, type.getString(value()), livenessInfoString());
============================================================================