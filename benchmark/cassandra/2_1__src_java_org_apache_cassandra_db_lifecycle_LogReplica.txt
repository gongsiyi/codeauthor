1:73781a9: /*
1:73781a9:  * Licensed to the Apache Software Foundation (ASF) under one
1:73781a9:  * or more contributor license agreements.  See the NOTICE file
1:73781a9:  * distributed with this work for additional information
1:73781a9:  * regarding copyright ownership.  The ASF licenses this file
1:73781a9:  * to you under the Apache License, Version 2.0 (the
1:73781a9:  * "License"); you may not use this file except in compliance
1:73781a9:  * with the License.  You may obtain a copy of the License at
1:73781a9:  *
1:73781a9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:73781a9:  *
1:73781a9:  * Unless required by applicable law or agreed to in writing, software
1:73781a9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:73781a9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:73781a9:  * See the License for the specific language governing permissions and
1:73781a9:  * limitations under the License.
1:73781a9:  */
1:73781a9: 
1:73781a9: package org.apache.cassandra.db.lifecycle;
1:73781a9: 
1:73781a9: import java.io.File;
1:11910c6: import java.util.HashMap;
1:11910c6: import java.util.List;
1:11910c6: import java.util.Map;
1:73781a9: 
1:73781a9: import org.apache.cassandra.io.util.FileUtils;
1:73781a9: import org.apache.cassandra.utils.CLibrary;
1:73781a9: 
1:73781a9: /**
1:73781a9:  * Because a column family may have sstables on different disks and disks can
1:73781a9:  * be removed, we duplicate log files into many replicas so as to have a file
1:11910c6:  * in each directory where sstables exist.
1:73781a9:  *
1:73781a9:  * Each replica contains the exact same content but we do allow for final
1:73781a9:  * partial records in case we crashed after writing to one replica but
1:73781a9:  * before compliting the write to another replica.
1:73781a9:  *
1:73781a9:  * @see LogFile
1:73781a9:  */
1:da07130: final class LogReplica implements AutoCloseable
1:73781a9: {
1:73781a9:     private final File file;
1:11910c6:     private int directoryDescriptor;
1:11910c6:     private final Map<String, String> errors = new HashMap<>();
1:73781a9: 
1:11910c6:     static LogReplica create(File directory, String fileName)
1:73781a9:     {
1:11910c6:         return new LogReplica(new File(fileName), CLibrary.tryOpenDirectory(directory.getPath()));
1:73781a9:     }
1:73781a9: 
1:73781a9:     static LogReplica open(File file)
1:73781a9:     {
1:73781a9:         return new LogReplica(file, CLibrary.tryOpenDirectory(file.getParentFile().getPath()));
1:73781a9:     }
1:73781a9: 
1:11910c6:     LogReplica(File file, int directoryDescriptor)
1:73781a9:     {
1:73781a9:         this.file = file;
1:11910c6:         this.directoryDescriptor = directoryDescriptor;
1:73781a9:     }
1:73781a9: 
1:73781a9:     File file()
1:73781a9:     {
1:73781a9:         return file;
1:73781a9:     }
1:73781a9: 
1:11910c6:     List<String> readLines()
1:11910c6:     {
1:11910c6:         return FileUtils.readLines(file);
1:11910c6:     }
1:11910c6: 
1:11910c6:     String getFileName()
1:11910c6:     {
1:11910c6:         return file.getName();
1:11910c6:     }
1:11910c6: 
1:11910c6:     String getDirectory()
1:11910c6:     {
1:11910c6:         return file.getParent();
1:11910c6:     }
1:11910c6: 
1:73781a9:     void append(LogRecord record)
1:73781a9:     {
1:73781a9:         boolean existed = exists();
1:73781a9:         FileUtils.appendAndSync(file, record.toString());
1:73781a9: 
1:73781a9:         // If the file did not exist before appending the first
1:11910c6:         // line, then sync the directory as well since now it must exist
1:73781a9:         if (!existed)
1:11910c6:             syncDirectory();
1:73781a9:     }
1:73781a9: 
1:11910c6:     void syncDirectory()
1:73781a9:     {
1:11910c6:         if (directoryDescriptor >= 0)
1:11910c6:             CLibrary.trySync(directoryDescriptor);
1:73781a9:     }
1:73781a9: 
1:73781a9:     void delete()
1:73781a9:     {
1:73781a9:         LogTransaction.delete(file);
1:11910c6:         syncDirectory();
1:73781a9:     }
1:73781a9: 
1:73781a9:     boolean exists()
1:73781a9:     {
1:73781a9:         return file.exists();
1:73781a9:     }
1:73781a9: 
1:da07130:     public void close()
1:73781a9:     {
1:11910c6:         if (directoryDescriptor >= 0)
1:73781a9:         {
1:11910c6:             CLibrary.tryCloseFD(directoryDescriptor);
1:11910c6:             directoryDescriptor = -1;
1:73781a9:         }
1:73781a9:     }
1:73781a9: 
1:73781a9:     @Override
1:73781a9:     public String toString()
1:73781a9:     {
1:73781a9:         return String.format("[%s] ", file);
1:73781a9:     }
1:11910c6: 
1:11910c6:     void setError(String line, String error)
1:11910c6:     {
1:11910c6:         errors.put(line, error);
1:11910c6:     }
1:11910c6: 
1:11910c6:     void printContentsWithAnyErrors(StringBuilder str)
1:11910c6:     {
1:11910c6:         str.append(file.getPath());
1:11910c6:         str.append(System.lineSeparator());
1:11910c6:         FileUtils.readLines(file).forEach(line -> printLineWithAnyError(str, line));
1:11910c6:     }
1:11910c6: 
1:11910c6:     private void printLineWithAnyError(StringBuilder str, String line)
1:11910c6:     {
1:11910c6:         str.append('\t');
1:11910c6:         str.append(line);
1:11910c6:         str.append(System.lineSeparator());
1:11910c6: 
1:11910c6:         String error = errors.get(line);
1:11910c6:         if (error != null)
1:11910c6:         {
1:11910c6:             str.append("\t\t***");
1:11910c6:             str.append(error);
1:11910c6:             str.append(System.lineSeparator());
1:11910c6:         }
1:11910c6:     }
1:73781a9: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:dc1712a
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:da07130
/////////////////////////////////////////////////////////////////////////
1: final class LogReplica implements AutoCloseable
/////////////////////////////////////////////////////////////////////////
1:     public void close()
commit:11910c6
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:  * in each directory where sstables exist.
/////////////////////////////////////////////////////////////////////////
1:     private int directoryDescriptor;
1:     private final Map<String, String> errors = new HashMap<>();
1:     static LogReplica create(File directory, String fileName)
1:         return new LogReplica(new File(fileName), CLibrary.tryOpenDirectory(directory.getPath()));
/////////////////////////////////////////////////////////////////////////
1:     LogReplica(File file, int directoryDescriptor)
1:         this.directoryDescriptor = directoryDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     List<String> readLines()
1:     {
1:         return FileUtils.readLines(file);
1:     }
1: 
1:     String getFileName()
1:     {
1:         return file.getName();
1:     }
1: 
1:     String getDirectory()
1:     {
1:         return file.getParent();
1:     }
1: 
1:         // line, then sync the directory as well since now it must exist
1:             syncDirectory();
1:     void syncDirectory()
1:         if (directoryDescriptor >= 0)
1:             CLibrary.trySync(directoryDescriptor);
1:         syncDirectory();
/////////////////////////////////////////////////////////////////////////
1:         if (directoryDescriptor >= 0)
1:             CLibrary.tryCloseFD(directoryDescriptor);
1:             directoryDescriptor = -1;
/////////////////////////////////////////////////////////////////////////
1: 
1:     void setError(String line, String error)
1:     {
1:         errors.put(line, error);
1:     }
1: 
1:     void printContentsWithAnyErrors(StringBuilder str)
1:     {
1:         str.append(file.getPath());
1:         str.append(System.lineSeparator());
1:         FileUtils.readLines(file).forEach(line -> printLineWithAnyError(str, line));
1:     }
1: 
1:     private void printLineWithAnyError(StringBuilder str, String line)
1:     {
1:         str.append('\t');
1:         str.append(line);
1:         str.append(System.lineSeparator());
1: 
1:         String error = errors.get(line);
1:         if (error != null)
1:         {
1:             str.append("\t\t***");
1:             str.append(error);
1:             str.append(System.lineSeparator());
1:         }
1:     }
commit:73781a9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.lifecycle;
1: 
1: import java.io.File;
1: 
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.CLibrary;
1: 
1: /**
1:  * Because a column family may have sstables on different disks and disks can
1:  * be removed, we duplicate log files into many replicas so as to have a file
0:  * in each folder where sstables exist.
1:  *
1:  * Each replica contains the exact same content but we do allow for final
1:  * partial records in case we crashed after writing to one replica but
1:  * before compliting the write to another replica.
1:  *
1:  * @see LogFile
1:  */
0: final class LogReplica
1: {
1:     private final File file;
0:     private int folderDescriptor;
1: 
0:     static LogReplica create(File folder, String fileName)
1:     {
0:         return new LogReplica(new File(fileName), CLibrary.tryOpenDirectory(folder.getPath()));
1:     }
1: 
1:     static LogReplica open(File file)
1:     {
1:         return new LogReplica(file, CLibrary.tryOpenDirectory(file.getParentFile().getPath()));
1:     }
1: 
0:     LogReplica(File file, int folderDescriptor)
1:     {
1:         this.file = file;
0:         this.folderDescriptor = folderDescriptor;
1:     }
1: 
1:     File file()
1:     {
1:         return file;
1:     }
1: 
1:     void append(LogRecord record)
1:     {
1:         boolean existed = exists();
1:         FileUtils.appendAndSync(file, record.toString());
1: 
1:         // If the file did not exist before appending the first
0:         // line, then sync the folder as well since now it must exist
1:         if (!existed)
0:             syncFolder();
1:     }
1: 
0:     void syncFolder()
1:     {
0:         if (folderDescriptor >= 0)
0:             CLibrary.trySync(folderDescriptor);
1:     }
1: 
1:     void delete()
1:     {
1:         LogTransaction.delete(file);
0:         syncFolder();
1:     }
1: 
1:     boolean exists()
1:     {
1:         return file.exists();
1:     }
1: 
0:     void close()
1:     {
0:         if (folderDescriptor >= 0)
1:         {
0:             CLibrary.tryCloseFD(folderDescriptor);
0:             folderDescriptor = -1;
1:         }
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("[%s] ", file);
1:     }
1: }
============================================================================