1:5531a7f: /*
1:5531a7f: * Licensed to the Apache Software Foundation (ASF) under one
1:5531a7f: * or more contributor license agreements.  See the NOTICE file
1:5531a7f: * distributed with this work for additional information
1:5531a7f: * regarding copyright ownership.  The ASF licenses this file
1:5531a7f: * to you under the Apache License, Version 2.0 (the
1:5531a7f: * "License"); you may not use this file except in compliance
1:5531a7f: * with the License.  You may obtain a copy of the License at
1:5531a7f: *
1:5531a7f: *    http://www.apache.org/licenses/LICENSE-2.0
1:5531a7f: *
1:5531a7f: * Unless required by applicable law or agreed to in writing,
1:5531a7f: * software distributed under the License is distributed on an
1:5531a7f: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5531a7f: * KIND, either express or implied.  See the License for the
1:5531a7f: * specific language governing permissions and limitations
1:5531a7f: * under the License.
1:5531a7f: */
1:5531a7f: package org.apache.cassandra.db;
1:8358669: 
1:5531a7f: import org.junit.Test;
5:5531a7f: 
1:a991b64: import org.apache.cassandra.cql3.CQLTester;
1:a991b64: import org.apache.cassandra.Util;
1:a991b64: 
1:83a43f1: import static org.junit.Assert.assertEquals;
1:a991b64: import static org.junit.Assert.assertFalse;
1:5531a7f: 
1:5531a7f: 
1:a991b64: public class RowIterationTest extends CQLTester
2:5531a7f: {
1:a991b64:     @Test
1:a991b64:     public void testRowIteration() throws Throwable
1:d2a3827:     {
1:a991b64:         String tableName = createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:a991b64:         for (int i = 0; i < 10; i++)
1:a991b64:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?) USING TIMESTAMP ?", i, 0, i, i, (long)i);
1:a991b64:         cfs.forceBlockingFlush();
1:a991b64:         assertEquals(10, execute("SELECT * FROM %s").size());
1:d2a3827:     }
1:d2a3827: 
1:7d44bbd:     @Test
1:a991b64:     public void testRowIterationDeletionTime() throws Throwable
1:7d44bbd:     {
1:a991b64:         String tableName = createTable("CREATE TABLE %s (a int PRIMARY KEY, b int)");
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:7d44bbd: 
1:a991b64:         execute("INSERT INTO %s (a, b) VALUES (?, ?) USING TIMESTAMP ?", 0, 0, 0L);
1:a991b64:         execute("DELETE FROM %s USING TIMESTAMP ? WHERE a = ?", 0L, 0);
1:7d44bbd: 
1:a991b64:         cfs.forceBlockingFlush();
1:7d44bbd: 
1:7d44bbd:         // Delete row in second sstable with higher timestamp
1:a991b64:         execute("INSERT INTO %s (a, b) VALUES (?, ?) USING TIMESTAMP ?", 0, 0, 1L);
1:a991b64:         execute("DELETE FROM %s USING TIMESTAMP ? WHERE a = ?", 1L, 0);
1:7d44bbd: 
1:a991b64:         int localDeletionTime = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build()).partitionLevelDeletion().localDeletionTime();
1:a991b64: 
1:a991b64:         cfs.forceBlockingFlush();
1:a991b64: 
1:a991b64:         DeletionTime dt = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build()).partitionLevelDeletion();
1:a991b64:         assertEquals(1L, dt.markedForDeleteAt());
1:a991b64:         assertEquals(localDeletionTime, dt.localDeletionTime());
1:7d44bbd:     }
1:7d44bbd: 
1:7d44bbd:     @Test
1:a991b64:     public void testRowIterationDeletion() throws Throwable
1:7d44bbd:     {
1:a991b64:         String tableName = createTable("CREATE TABLE %s (a int PRIMARY KEY, b int)");
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:7d44bbd: 
1:7d44bbd:         // Delete a row in first sstable
1:a991b64:         execute("DELETE FROM %s USING TIMESTAMP ? WHERE a = ?", 0L, 0);
1:a991b64:         cfs.forceBlockingFlush();
1:7d44bbd: 
1:a991b64:         assertFalse(Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build()).isEmpty());
1:7d44bbd:     }
3:5531a7f: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:572d328
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily cf = Util.getRangeSlice(store).get(0).cf;
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily cf = Util.getRangeSlice(store).get(0).cf;
commit:9639f95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void testRowIteration()
/////////////////////////////////////////////////////////////////////////
0:     public void testRowIterationDeletionTime()
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void testRowIterationDeletion()
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.CQLTester;
0: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
0: import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
1: import org.apache.cassandra.Util;
1: 
0: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.assertFalse;
1: public class RowIterationTest extends CQLTester
1:     @Test
1:     public void testRowIteration() throws Throwable
1:         String tableName = createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:         for (int i = 0; i < 10; i++)
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?) USING TIMESTAMP ?", i, 0, i, i, (long)i);
1:         cfs.forceBlockingFlush();
1:         assertEquals(10, execute("SELECT * FROM %s").size());
1:     public void testRowIterationDeletionTime() throws Throwable
1:         String tableName = createTable("CREATE TABLE %s (a int PRIMARY KEY, b int)");
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:         execute("INSERT INTO %s (a, b) VALUES (?, ?) USING TIMESTAMP ?", 0, 0, 0L);
1:         execute("DELETE FROM %s USING TIMESTAMP ? WHERE a = ?", 0L, 0);
1:         cfs.forceBlockingFlush();
1:         execute("INSERT INTO %s (a, b) VALUES (?, ?) USING TIMESTAMP ?", 0, 0, 1L);
1:         execute("DELETE FROM %s USING TIMESTAMP ? WHERE a = ?", 1L, 0);
1:         int localDeletionTime = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build()).partitionLevelDeletion().localDeletionTime();
1: 
1:         cfs.forceBlockingFlush();
1: 
1:         DeletionTime dt = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build()).partitionLevelDeletion();
1:         assertEquals(1L, dt.markedForDeleteAt());
1:         assertEquals(localDeletionTime, dt.localDeletionTime());
1:     public void testRowIterationDeletion() throws Throwable
1:         String tableName = createTable("CREATE TABLE %s (a int PRIMARY KEY, b int)");
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:         execute("DELETE FROM %s USING TIMESTAMP ? WHERE a = ?", 0L, 0);
1:         cfs.forceBlockingFlush();
1:         assertFalse(Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build()).isEmpty());
commit:7d7610f
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.composites.*;
/////////////////////////////////////////////////////////////////////////
0:             rm.add("Super3", CellNames.compositeDense(ByteBufferUtil.bytes("sc"), ByteBufferUtil.bytes(String.valueOf(i))), ByteBuffer.wrap(new byte[ROWS_PER_SSTABLE * 10 - i * 2]), i);
/////////////////////////////////////////////////////////////////////////
0:         rm.add(CF_NAME, Util.cellname("c"), ByteBufferUtil.bytes("values"), 0L);
/////////////////////////////////////////////////////////////////////////
0:         rm.add(CF_NAME, Util.cellname("c"), ByteBufferUtil.bytes("values"), 1L);
commit:3a005df
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.marshal.CompositeType;
/////////////////////////////////////////////////////////////////////////
0:             rm.add("Super3", CompositeType.build(ByteBufferUtil.bytes("sc"), ByteBufferUtil.bytes(String.valueOf(i))), ByteBuffer.wrap(new byte[ROWS_PER_SSTABLE * 10 - i * 2]), i);
/////////////////////////////////////////////////////////////////////////
0:         rm.delete(CF_NAME, 0);
0:         rm.add(CF_NAME, ByteBufferUtil.bytes("c"), ByteBufferUtil.bytes("values"), 0L);
0:         rm.delete(CF_NAME, 1);
0:         rm.add(CF_NAME, ByteBufferUtil.bytes("c"), ByteBufferUtil.bytes("values"), 1L);
/////////////////////////////////////////////////////////////////////////
0:         rm.delete(CF_NAME, 0);
commit:4d34917
/////////////////////////////////////////////////////////////////////////
0:         DeletionInfo delInfo1 = rm.getColumnFamilies().iterator().next().deletionInfo();
/////////////////////////////////////////////////////////////////////////
0:         DeletionInfo delInfo2 = rm.getColumnFamilies().iterator().next().deletionInfo();
0:         assert delInfo2.getTopLevelDeletion().markedForDeleteAt == 1L;
0:         assert cf.deletionInfo().equals(delInfo2);
commit:438acfc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.SchemaLoader;
0: public class RowIterationTest extends SchemaLoader
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
0:             rm.add(new QueryPath("Super3", ByteBufferUtil.bytes("sc"), ByteBufferUtil.bytes(String.valueOf(i))), ByteBuffer.wrap(new byte[ROWS_PER_SSTABLE * 10 - i * 2]), i);
author:lyubent
-------------------------------------------------------------------------------
commit:b453f08
/////////////////////////////////////////////////////////////////////////
0:             rm.applyUnsafe();
/////////////////////////////////////////////////////////////////////////
0:         rm.applyUnsafe();
/////////////////////////////////////////////////////////////////////////
0:         rm.applyUnsafe();
/////////////////////////////////////////////////////////////////////////
0:         rm.applyUnsafe();
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
0: import org.junit.BeforeClass;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.db.marshal.LongType;
0: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.SimpleStrategy;
0: public class RowIterationTest
0:     public static final String KEYSPACE1 = "RowIterationTest";
0:     @BeforeClass
0:     public static void defineSchema() throws ConfigurationException
1:     {
0:         SchemaLoader.prepareServer();
0:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, "Standard3"),
0:                                     SchemaLoader.superCFMD(KEYSPACE1, "Super3", LongType.instance));
1:     }
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation(KEYSPACE1, key.getKey());
/////////////////////////////////////////////////////////////////////////
0:         Mutation rm = new Mutation(KEYSPACE1, key.getKey());
0:         rm = new Mutation(KEYSPACE1, key.getKey());
/////////////////////////////////////////////////////////////////////////
0:         Mutation rm = new Mutation(KEYSPACE1, key.getKey());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation(KEYSPACE1, key.key);
/////////////////////////////////////////////////////////////////////////
0:         Mutation rm = new Mutation(KEYSPACE1, key.key);
/////////////////////////////////////////////////////////////////////////
0:         rm = new Mutation(KEYSPACE1, key.key);
/////////////////////////////////////////////////////////////////////////
0:         Mutation rm = new Mutation(KEYSPACE1, key.key);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0:     public static final String KEYSPACE1 = "Keyspace2";
0:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
0:         ColumnFamilyStore store = keyspace.getColumnFamilyStore("Super3");
0:             RowMutation rm = new RowMutation(KEYSPACE1, key.key);
/////////////////////////////////////////////////////////////////////////
0:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
0:         ColumnFamilyStore store = keyspace.getColumnFamilyStore(CF_NAME);
0:         RowMutation rm = new RowMutation(KEYSPACE1, key.key);
/////////////////////////////////////////////////////////////////////////
0:         rm = new RowMutation(KEYSPACE1, key.key);
/////////////////////////////////////////////////////////////////////////
0:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
0:         ColumnFamilyStore store = keyspace.getColumnFamilyStore(CF_NAME);
0:         RowMutation rm = new RowMutation(KEYSPACE1, key.key);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:     public static final InetAddress LOCAL = FBUtilities.getBroadcastAddress();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7d44bbd
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
0:     public void testRowIterationDeletionTime() throws IOException, ExecutionException, InterruptedException
1:     {
0:         Table table = Table.open(TABLE1);
0:         String CF_NAME = "Standard3";
0:         ColumnFamilyStore store = table.getColumnFamilyStore(CF_NAME);
0:         DecoratedKey key = Util.dk("key");
1: 
0:         // Delete row in first sstable
0:         RowMutation rm = new RowMutation(TABLE1, key.key);
0:         rm.delete(new QueryPath(CF_NAME, null, null), 0);
0:         rm.add(new QueryPath(CF_NAME, null, ByteBufferUtil.bytes("c")), ByteBufferUtil.bytes("values"), 0L);
0:         int tstamp1 = rm.getColumnFamilies().iterator().next().getLocalDeletionTime();
0:         rm.apply();
0:         store.forceBlockingFlush();
1: 
1:         // Delete row in second sstable with higher timestamp
0:         rm = new RowMutation(TABLE1, key.key);
0:         rm.delete(new QueryPath(CF_NAME, null, null), 1);
0:         rm.add(new QueryPath(CF_NAME, null, ByteBufferUtil.bytes("c")), ByteBufferUtil.bytes("values"), 1L);
0:         int tstamp2 = rm.getColumnFamilies().iterator().next().getLocalDeletionTime();
0:         rm.apply();
0:         store.forceBlockingFlush();
1: 
0:         ColumnFamily cf = Util.getRangeSlice(store).iterator().next().cf;
0:         assert cf.getMarkedForDeleteAt() == 1L;
0:         assert cf.getLocalDeletionTime() == tstamp2;
1:     }
1: 
1:     @Test
0:     public void testRowIterationDeletion() throws IOException, ExecutionException, InterruptedException
1:     {
0:         Table table = Table.open(TABLE1);
0:         String CF_NAME = "Standard3";
0:         ColumnFamilyStore store = table.getColumnFamilyStore(CF_NAME);
0:         DecoratedKey key = Util.dk("key");
1: 
1:         // Delete a row in first sstable
0:         RowMutation rm = new RowMutation(TABLE1, key.key);
0:         rm.delete(new QueryPath(CF_NAME, null, null), 0);
0:         rm.apply();
0:         store.forceBlockingFlush();
1: 
0:         ColumnFamily cf = Util.getRangeSlice(store).iterator().next().cf;
0:         assert cf != null;
1:     }
commit:8358669
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
/////////////////////////////////////////////////////////////////////////
0:             rm.add(new QueryPath("Super3", ByteBufferUtil.bytes("sc"), ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBuffer.wrap(new byte[ROWS_PER_SSTABLE * 10 - i * 2]), i);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:             rm.add(new QueryPath("Super3", ByteBuffer.wrap("sc".getBytes()), ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBuffer.wrap(new byte[ROWS_PER_SSTABLE * 10 - i * 2]), i);
commit:9d32382
/////////////////////////////////////////////////////////////////////////
0:             rm.add(new QueryPath("Super3", "sc".getBytes(), String.valueOf(i).getBytes()), new byte[ROWS_PER_SSTABLE * 10 - i * 2], i);
commit:5531a7f
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db;
1: 
0: import java.io.IOException;
0: import java.net.InetAddress;
0: import java.util.concurrent.ExecutionException;
0: import java.util.concurrent.Future;
0: import java.util.ArrayList;
0: import java.util.Set;
0: import java.util.HashSet;
1: 
0: import org.apache.cassandra.Util;
1: 
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.io.sstable.SSTableReader;
0: import org.apache.cassandra.CleanupHelper;
0: import org.apache.cassandra.db.filter.QueryPath;
0: import org.apache.cassandra.utils.FBUtilities;
0: import static junit.framework.Assert.assertEquals;
1: 
0: public class RowIterationTest extends CleanupHelper
1: {
0:     public static final String TABLE1 = "Keyspace2";
0:     public static final InetAddress LOCAL = FBUtilities.getLocalAddress();
1: 
0:     @Test
0:     public void testRowIteration() throws IOException, ExecutionException, InterruptedException
1:     {
0:         Table table = Table.open(TABLE1);
0:         ColumnFamilyStore store = table.getColumnFamilyStore("Super3");
1: 
0:         final int ROWS_PER_SSTABLE = 10;
0:         Set<DecoratedKey> inserted = new HashSet<DecoratedKey>();
0:         for (int i = 0; i < ROWS_PER_SSTABLE; i++) {
0:             DecoratedKey key = Util.dk(String.valueOf(i));
0:             RowMutation rm = new RowMutation(TABLE1, key.key);
0:             rm.add(new QueryPath("Super3", "sc".getBytes(), String.valueOf(i).getBytes()), new byte[ROWS_PER_SSTABLE * 10 - i * 2], new TimestampClock(i));
0:             rm.apply();
0:             inserted.add(key);
1:         }
0:         store.forceBlockingFlush();
0:         assertEquals(inserted.toString(), inserted.size(), Util.getRangeSlice(store).size());
1:     }
1: }
============================================================================