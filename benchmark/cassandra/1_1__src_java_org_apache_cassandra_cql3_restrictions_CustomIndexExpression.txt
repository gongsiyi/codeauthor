1:64e2f5d: /*
1:64e2f5d:  * Licensed to the Apache Software Foundation (ASF) under one
1:64e2f5d:  * or more contributor license agreements.  See the NOTICE file
1:64e2f5d:  * distributed with this work for additional information
1:64e2f5d:  * regarding copyright ownership.  The ASF licenses this file
1:64e2f5d:  * to you under the Apache License, Version 2.0 (the
1:64e2f5d:  * "License"); you may not use this file except in compliance
1:64e2f5d:  * with the License.  You may obtain a copy of the License at
1:64e2f5d:  *
1:64e2f5d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:64e2f5d:  *
1:64e2f5d:  * Unless required by applicable law or agreed to in writing, software
1:64e2f5d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:64e2f5d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:64e2f5d:  * See the License for the specific language governing permissions and
1:64e2f5d:  * limitations under the License.
1:64e2f5d:  */
1:64e2f5d: 
1:64e2f5d: package org.apache.cassandra.cql3.restrictions;
1:64e2f5d: 
1:64e2f5d: import org.apache.cassandra.config.CFMetaData;
1:64e2f5d: import org.apache.cassandra.cql3.*;
1:64e2f5d: import org.apache.cassandra.db.filter.RowFilter;
1:5ffae4f: import org.apache.cassandra.db.marshal.AbstractType;
1:64e2f5d: 
1:64e2f5d: public class CustomIndexExpression
1:64e2f5d: {
1:64e2f5d:     private final ColumnIdentifier valueColId = new ColumnIdentifier("custom index expression", false);
1:64e2f5d: 
1:64e2f5d:     public final IndexName targetIndex;
1:64e2f5d:     public final Term.Raw valueRaw;
1:64e2f5d: 
1:64e2f5d:     private Term value;
1:64e2f5d: 
1:64e2f5d:     public CustomIndexExpression(IndexName targetIndex, Term.Raw value)
1:64e2f5d:     {
1:64e2f5d:         this.targetIndex = targetIndex;
1:64e2f5d:         this.valueRaw = value;
1:64e2f5d:     }
1:64e2f5d: 
1:5ffae4f:     public void prepareValue(CFMetaData cfm, AbstractType<?> expressionType, VariableSpecifications boundNames)
1:64e2f5d:     {
1:5ffae4f:         ColumnSpecification spec = new ColumnSpecification(cfm.ksName, cfm.ksName, valueColId, expressionType);
1:64e2f5d:         value = valueRaw.prepare(cfm.ksName, spec);
1:64e2f5d:         value.collectMarkerSpecification(boundNames);
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     public void addToRowFilter(RowFilter filter,
1:64e2f5d:                                CFMetaData cfm,
1:64e2f5d:                                QueryOptions options)
1:64e2f5d:     {
1:64e2f5d:         filter.addCustomIndexExpression(cfm,
1:64e2f5d:                                         cfm.getIndexes()
1:64e2f5d:                                            .get(targetIndex.getIdx())
1:64e2f5d:                                            .orElseThrow(() -> IndexRestrictions.indexNotFound(targetIndex, cfm)),
1:64e2f5d:                                         value.bindAndGet(options));
1:64e2f5d:     }
1:64e2f5d: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:5ffae4f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.AbstractType;
/////////////////////////////////////////////////////////////////////////
1:     public void prepareValue(CFMetaData cfm, AbstractType<?> expressionType, VariableSpecifications boundNames)
1:         ColumnSpecification spec = new ColumnSpecification(cfm.ksName, cfm.ksName, valueColId, expressionType);
commit:64e2f5d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.restrictions;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.db.filter.RowFilter;
0: import org.apache.cassandra.db.marshal.UTF8Type;
1: 
1: public class CustomIndexExpression
1: {
1:     private final ColumnIdentifier valueColId = new ColumnIdentifier("custom index expression", false);
1: 
1:     public final IndexName targetIndex;
1:     public final Term.Raw valueRaw;
1: 
1:     private Term value;
1: 
1:     public CustomIndexExpression(IndexName targetIndex, Term.Raw value)
1:     {
1:         this.targetIndex = targetIndex;
1:         this.valueRaw = value;
1:     }
1: 
0:     public void prepareValue(CFMetaData cfm, VariableSpecifications boundNames)
1:     {
0:         ColumnSpecification spec = new ColumnSpecification(cfm.ksName, cfm.ksName, valueColId, UTF8Type.instance);
1:         value = valueRaw.prepare(cfm.ksName, spec);
1:         value.collectMarkerSpecification(boundNames);
1:     }
1: 
1:     public void addToRowFilter(RowFilter filter,
1:                                CFMetaData cfm,
1:                                QueryOptions options)
1:     {
1:         filter.addCustomIndexExpression(cfm,
1:                                         cfm.getIndexes()
1:                                            .get(targetIndex.getIdx())
1:                                            .orElseThrow(() -> IndexRestrictions.indexNotFound(targetIndex, cfm)),
1:                                         value.bindAndGet(options));
1:     }
1: }
============================================================================