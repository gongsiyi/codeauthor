1:b09e60f: /*
1:b09e60f:  * Licensed to the Apache Software Foundation (ASF) under one
1:b09e60f:  * or more contributor license agreements.  See the NOTICE file
1:b09e60f:  * distributed with this work for additional information
1:b09e60f:  * regarding copyright ownership.  The ASF licenses this file
1:b09e60f:  * to you under the Apache License, Version 2.0 (the
1:b09e60f:  * "License"); you may not use this file except in compliance
1:b09e60f:  * with the License.  You may obtain a copy of the License at
1:b09e60f:  *
1:b09e60f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b09e60f:  *
1:b09e60f:  * Unless required by applicable law or agreed to in writing, software
1:b09e60f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b09e60f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b09e60f:  * See the License for the specific language governing permissions and
1:b09e60f:  * limitations under the License.
1:b09e60f:  */
3:b09e60f: 
1:b09e60f: package org.apache.cassandra.db.lifecycle;
1:b09e60f: 
1:b09e60f: import java.io.File;
1:b09e60f: import java.io.IOException;
1:b09e60f: import java.util.HashSet;
1:b09e60f: import java.util.List;
1:b09e60f: import java.util.Set;
1:b09e60f: import java.util.concurrent.TimeUnit;
1:b09e60f: 
1:b09e60f: import org.junit.BeforeClass;
1:b09e60f: import org.junit.Test;
1:b09e60f: 
1:b09e60f: import junit.framework.Assert;
1:b09e60f: import org.apache.cassandra.MockSchema;
1:b09e60f: import org.apache.cassandra.SchemaLoader;
1:b09e60f: import org.apache.cassandra.config.CFMetaData;
1:b09e60f: import org.apache.cassandra.config.Schema;
1:b09e60f: import org.apache.cassandra.db.ColumnFamilyStore;
1:b09e60f: import org.apache.cassandra.db.Keyspace;
1:b09e60f: import org.apache.cassandra.db.SerializationHeader;
1:b09e60f: import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
1:b09e60f: import org.apache.cassandra.db.compaction.CompactionController;
1:b09e60f: import org.apache.cassandra.db.compaction.CompactionIterator;
1:b09e60f: import org.apache.cassandra.db.compaction.OperationType;
1:b09e60f: import org.apache.cassandra.io.sstable.CQLSSTableWriter;
1:b09e60f: import org.apache.cassandra.io.sstable.Descriptor;
1:b09e60f: import org.apache.cassandra.io.sstable.SSTableRewriter;
1:b09e60f: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:b09e60f: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1:b09e60f: import org.apache.cassandra.schema.KeyspaceParams;
1:b09e60f: import org.apache.cassandra.utils.FBUtilities;
1:b09e60f: 
1:b09e60f: import static org.junit.Assert.assertEquals;
1:b09e60f: import static org.junit.Assert.assertTrue;
1:b09e60f: 
1:b09e60f: /**
1:b09e60f:  * Tests to simulate real transactions such as compactions and flushing
1:b09e60f:  * using SSTableRewriter, ColumnFamilyStore, LifecycleTransaction, TransactionLogs, etc
1:b09e60f:  */
1:b09e60f: public class RealTransactionsTest extends SchemaLoader
1:b09e60f: {
1:b09e60f:     private static final String KEYSPACE = "TransactionLogsTest";
1:b09e60f:     private static final String REWRITE_FINISHED_CF = "RewriteFinished";
1:b09e60f:     private static final String REWRITE_ABORTED_CF = "RewriteAborted";
1:b09e60f:     private static final String FLUSH_CF = "Flush";
1:b09e60f: 
1:b09e60f:     @BeforeClass
1:b09e60f:     public static void setUp()
1:b09e60f:     {
1:b09e60f:         MockSchema.cleanup();
1:b09e60f: 
1:b09e60f:         SchemaLoader.prepareServer();
1:b09e60f:         SchemaLoader.createKeyspace(KEYSPACE,
1:b09e60f:                                     KeyspaceParams.simple(1),
1:b09e60f:                                     SchemaLoader.standardCFMD(KEYSPACE, REWRITE_FINISHED_CF),
1:b09e60f:                                     SchemaLoader.standardCFMD(KEYSPACE, REWRITE_ABORTED_CF),
1:b09e60f:                                     SchemaLoader.standardCFMD(KEYSPACE, FLUSH_CF));
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     @Test
1:b09e60f:     public void testRewriteFinished() throws IOException
1:b09e60f:     {
1:b09e60f:         Keyspace keyspace = Keyspace.open(KEYSPACE);
1:b09e60f:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(REWRITE_FINISHED_CF);
1:b09e60f: 
1:b09e60f:         SSTableReader oldSSTable = getSSTable(cfs, 1);
1:b09e60f:         LifecycleTransaction txn = cfs.getTracker().tryModify(oldSSTable, OperationType.COMPACTION);
1:b09e60f:         SSTableReader newSSTable = replaceSSTable(cfs, txn, false);
1:351c7ca:         LogTransaction.waitForDeletions();
1:b09e60f: 
1:73781a9:         // both sstables are in the same folder
1:73781a9:         assertFiles(oldSSTable.descriptor.directory.getPath(), new HashSet<>(newSSTable.getAllFilePaths()));
1:73781a9:         assertFiles(newSSTable.descriptor.directory.getPath(), new HashSet<>(newSSTable.getAllFilePaths()));
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     @Test
1:b09e60f:     public void testRewriteAborted() throws IOException
1:b09e60f:     {
1:b09e60f:         Keyspace keyspace = Keyspace.open(KEYSPACE);
1:b09e60f:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(REWRITE_ABORTED_CF);
1:b09e60f: 
1:b09e60f:         SSTableReader oldSSTable = getSSTable(cfs, 1);
1:b09e60f:         LifecycleTransaction txn = cfs.getTracker().tryModify(oldSSTable, OperationType.COMPACTION);
1:b09e60f: 
1:b09e60f:         replaceSSTable(cfs, txn, true);
1:351c7ca:         LogTransaction.waitForDeletions();
1:b09e60f: 
1:73781a9:         assertFiles(oldSSTable.descriptor.directory.getPath(), new HashSet<>(oldSSTable.getAllFilePaths()));
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     @Test
1:b09e60f:     public void testFlush() throws IOException
1:b09e60f:     {
1:b09e60f:         Keyspace keyspace = Keyspace.open(KEYSPACE);
1:b09e60f:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(FLUSH_CF);
1:b09e60f: 
1:b09e60f:         SSTableReader ssTableReader = getSSTable(cfs, 100);
1:b09e60f: 
1:ad8cad7:         String dataFolder = cfs.getLiveSSTables().iterator().next().descriptor.directory.getPath();
1:b09e60f:         assertFiles(dataFolder, new HashSet<>(ssTableReader.getAllFilePaths()));
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     private SSTableReader getSSTable(ColumnFamilyStore cfs, int numPartitions) throws IOException
1:b09e60f:     {
1:b09e60f:         createSSTable(cfs, numPartitions);
1:b09e60f: 
1:ad8cad7:         Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());
1:b09e60f:         assertEquals(1, sstables.size());
1:b09e60f:         return sstables.iterator().next();
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     private void createSSTable(ColumnFamilyStore cfs, int numPartitions) throws IOException
1:b09e60f:     {
1:b09e60f:         cfs.truncateBlocking();
1:b09e60f: 
1:0026e4e:         String schema = "CREATE TABLE \"%s\".\"%s\" (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))";
1:9ed2727:         String query = "INSERT INTO \"%s\".\"%s\" (key, name, val) VALUES (?, ?, ?)";
1:b09e60f: 
1:b09e60f:         try (CQLSSTableWriter writer = CQLSSTableWriter.builder()
1:0026e4e:                                                        .inDirectory(cfs.getDirectories().getDirectoryForNewSSTables())
1:0026e4e:                                                        .forTable(String.format(schema, cfs.keyspace.getName(), cfs.name))
1:b09e60f:                                                        .using(String.format(query, cfs.keyspace.getName(), cfs.name))
1:b09e60f:                                                        .build())
1:b09e60f:         {
1:b09e60f:             for (int j = 0; j < numPartitions; j ++)
1:b09e60f:                 writer.addRow(String.format("key%d", j), "col1", "0");
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         cfs.loadNewSSTables();
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     private SSTableReader replaceSSTable(ColumnFamilyStore cfs, LifecycleTransaction txn, boolean fail)
1:b09e60f:     {
1:b09e60f:         List<SSTableReader> newsstables = null;
1:b09e60f:         int nowInSec = FBUtilities.nowInSeconds();
1:b09e60f:         try (CompactionController controller = new CompactionController(cfs, txn.originals(), cfs.gcBefore(FBUtilities.nowInSeconds())))
1:b09e60f:         {
1:f9a1a80:             try (SSTableRewriter rewriter = SSTableRewriter.constructKeepingOriginals(txn, false, 1000);
1:b09e60f:                  AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(txn.originals());
1:b09e60f:                  CompactionIterator ci = new CompactionIterator(txn.opType(), scanners.scanners, controller, nowInSec, txn.opId())
1:b09e60f:             )
1:b09e60f:             {
1:b09e60f:                 long lastCheckObsoletion = System.nanoTime();
1:b09e60f:                 File directory = txn.originals().iterator().next().descriptor.directory;
1:b09e60f:                 Descriptor desc = Descriptor.fromFilename(cfs.getSSTablePath(directory));
1:b09e60f:                 CFMetaData metadata = Schema.instance.getCFMetaData(desc);
1:b09e60f:                 rewriter.switchWriter(SSTableWriter.create(metadata,
1:b09e60f:                                                            desc,
1:b09e60f:                                                            0,
1:b09e60f:                                                            0,
1:b09e60f:                                                            0,
1:b09e60f:                                                            SerializationHeader.make(cfs.metadata, txn.originals()),
1:f81a91d:                                                            cfs.indexManager.listIndexes(),
1:b09e60f:                                                            txn));
1:b09e60f:                 while (ci.hasNext())
1:b09e60f:                 {
1:b09e60f:                     rewriter.append(ci.next());
1:b09e60f: 
1:b09e60f:                     if (System.nanoTime() - lastCheckObsoletion > TimeUnit.MINUTES.toNanos(1L))
1:b09e60f:                     {
1:b09e60f:                         controller.maybeRefreshOverlaps();
1:b09e60f:                         lastCheckObsoletion = System.nanoTime();
1:b09e60f:                     }
1:b09e60f:                 }
1:b09e60f: 
1:b09e60f:                 if (!fail)
1:b09e60f:                     newsstables = rewriter.finish();
1:b09e60f:                 else
1:b09e60f:                     rewriter.abort();
1:b09e60f:             }
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         assertTrue(fail || newsstables != null);
1:b09e60f: 
1:b09e60f:         if (newsstables != null)
1:b09e60f:         {
1:b09e60f:             Assert.assertEquals(1, newsstables.size());
1:b09e60f:             return newsstables.iterator().next();
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         return null;
1:b09e60f:     }
1:b09e60f: 
1:b09e60f:     private void assertFiles(String dirPath, Set<String> expectedFiles)
1:b09e60f:     {
1:b09e60f:         File dir = new File(dirPath);
1:b09e60f:         for (File file : dir.listFiles())
1:b09e60f:         {
1:b09e60f:             if (file.isDirectory())
1:b09e60f:                 continue;
1:b09e60f: 
1:b09e60f:             String filePath = file.getPath();
1:b09e60f:             assertTrue(filePath, expectedFiles.contains(filePath));
1:b09e60f:             expectedFiles.remove(filePath);
1:b09e60f:         }
1:b09e60f: 
1:b09e60f:         assertTrue(expectedFiles.isEmpty());
1:b09e60f:     }
1:b09e60f: }
============================================================================
author:Jeremiah D Jordan
-------------------------------------------------------------------------------
commit:0026e4e
/////////////////////////////////////////////////////////////////////////
1:         String schema = "CREATE TABLE \"%s\".\"%s\" (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))";
1:                                                        .inDirectory(cfs.getDirectories().getDirectoryForNewSSTables())
1:                                                        .forTable(String.format(schema, cfs.keyspace.getName(), cfs.name))
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
0:                                                        .withCfs(cfs)
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:f9a1a80
/////////////////////////////////////////////////////////////////////////
1:             try (SSTableRewriter rewriter = SSTableRewriter.constructKeepingOriginals(txn, false, 1000);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:f81a91d
/////////////////////////////////////////////////////////////////////////
1:                                                            cfs.indexManager.listIndexes(),
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:73781a9
/////////////////////////////////////////////////////////////////////////
1:         // both sstables are in the same folder
1:         assertFiles(oldSSTable.descriptor.directory.getPath(), new HashSet<>(newSSTable.getAllFilePaths()));
1:         assertFiles(newSSTable.descriptor.directory.getPath(), new HashSet<>(newSSTable.getAllFilePaths()));
/////////////////////////////////////////////////////////////////////////
1:         assertFiles(oldSSTable.descriptor.directory.getPath(), new HashSet<>(oldSSTable.getAllFilePaths()));
commit:351c7ca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         LogTransaction.waitForDeletions();
/////////////////////////////////////////////////////////////////////////
1:         LogTransaction.waitForDeletions();
commit:5726625
/////////////////////////////////////////////////////////////////////////
0:         TransactionLog.waitForDeletions();
0:         assertFiles(txn.log().getDataFolder(), new HashSet<>(newSSTable.getAllFilePaths()));
/////////////////////////////////////////////////////////////////////////
0:         TransactionLog.waitForDeletions();
0:         assertFiles(txn.log().getDataFolder(), new HashSet<>(oldSSTable.getAllFilePaths()));
/////////////////////////////////////////////////////////////////////////
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.lifecycle;
1: 
1: import java.io.File;
1: import java.io.IOException;
0: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.concurrent.TimeUnit;
1: 
0: import org.apache.commons.lang3.StringUtils;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.MockSchema;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Directories;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.SerializationHeader;
1: import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
1: import org.apache.cassandra.db.compaction.CompactionController;
1: import org.apache.cassandra.db.compaction.CompactionIterator;
1: import org.apache.cassandra.db.compaction.OperationType;
1: import org.apache.cassandra.io.sstable.CQLSSTableWriter;
1: import org.apache.cassandra.io.sstable.Descriptor;
1: import org.apache.cassandra.io.sstable.SSTableRewriter;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1: import org.apache.cassandra.schema.KeyspaceParams;
0: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * Tests to simulate real transactions such as compactions and flushing
1:  * using SSTableRewriter, ColumnFamilyStore, LifecycleTransaction, TransactionLogs, etc
1:  */
1: public class RealTransactionsTest extends SchemaLoader
1: {
1:     private static final String KEYSPACE = "TransactionLogsTest";
1:     private static final String REWRITE_FINISHED_CF = "RewriteFinished";
1:     private static final String REWRITE_ABORTED_CF = "RewriteAborted";
1:     private static final String FLUSH_CF = "Flush";
1: 
1:     @BeforeClass
1:     public static void setUp()
1:     {
1:         MockSchema.cleanup();
1: 
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE,
1:                                     KeyspaceParams.simple(1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE, REWRITE_FINISHED_CF),
1:                                     SchemaLoader.standardCFMD(KEYSPACE, REWRITE_ABORTED_CF),
1:                                     SchemaLoader.standardCFMD(KEYSPACE, FLUSH_CF));
1:     }
1: 
1:     @Test
1:     public void testRewriteFinished() throws IOException
1:     {
1:         Keyspace keyspace = Keyspace.open(KEYSPACE);
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(REWRITE_FINISHED_CF);
1: 
1:         SSTableReader oldSSTable = getSSTable(cfs, 1);
1:         LifecycleTransaction txn = cfs.getTracker().tryModify(oldSSTable, OperationType.COMPACTION);
1:         SSTableReader newSSTable = replaceSSTable(cfs, txn, false);
0:         TransactionLogs.waitForDeletions();
1: 
0:         assertFiles(txn.logs().getDataFolder(), new HashSet<>(newSSTable.getAllFilePaths()));
0:         assertFiles(txn.logs().getLogsFolder(), Collections.<String>emptySet());
1:     }
1: 
1:     @Test
1:     public void testRewriteAborted() throws IOException
1:     {
1:         Keyspace keyspace = Keyspace.open(KEYSPACE);
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(REWRITE_ABORTED_CF);
1: 
1:         SSTableReader oldSSTable = getSSTable(cfs, 1);
1:         LifecycleTransaction txn = cfs.getTracker().tryModify(oldSSTable, OperationType.COMPACTION);
1: 
1:         replaceSSTable(cfs, txn, true);
0:         TransactionLogs.waitForDeletions();
1: 
0:         assertFiles(txn.logs().getDataFolder(), new HashSet<>(oldSSTable.getAllFilePaths()));
0:         assertFiles(txn.logs().getLogsFolder(), Collections.<String>emptySet());
1:     }
1: 
1:     @Test
1:     public void testFlush() throws IOException
1:     {
1:         Keyspace keyspace = Keyspace.open(KEYSPACE);
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(FLUSH_CF);
1: 
1:         SSTableReader ssTableReader = getSSTable(cfs, 100);
1: 
0:         String dataFolder = cfs.getSSTables().iterator().next().descriptor.directory.getPath();
0:         String transactionLogsFolder = StringUtils.join(dataFolder, File.separator, Directories.TRANSACTIONS_SUBDIR);
1: 
0:         assertTrue(new File(transactionLogsFolder).exists());
0:         assertFiles(transactionLogsFolder, Collections.<String>emptySet());
1: 
1:         assertFiles(dataFolder, new HashSet<>(ssTableReader.getAllFilePaths()));
1:     }
1: 
1:     private SSTableReader getSSTable(ColumnFamilyStore cfs, int numPartitions) throws IOException
1:     {
1:         createSSTable(cfs, numPartitions);
1: 
0:         Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());
1:         assertEquals(1, sstables.size());
1:         return sstables.iterator().next();
1:     }
1: 
1:     private void createSSTable(ColumnFamilyStore cfs, int numPartitions) throws IOException
1:     {
1:         cfs.truncateBlocking();
1: 
0:         String schema = "CREATE TABLE %s.%s (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))";
0:         String query = "INSERT INTO %s.%s (key, name, val) VALUES (?, ?, ?)";
1: 
1:         try (CQLSSTableWriter writer = CQLSSTableWriter.builder()
0:                                                        .withPartitioner(StorageService.getPartitioner())
0:                                                        .inDirectory(cfs.directories.getDirectoryForNewSSTables())
0:                                                        .forTable(String.format(schema, cfs.keyspace.getName(), cfs.name))
1:                                                        .using(String.format(query, cfs.keyspace.getName(), cfs.name))
1:                                                        .build())
1:         {
1:             for (int j = 0; j < numPartitions; j ++)
1:                 writer.addRow(String.format("key%d", j), "col1", "0");
1:         }
1: 
1:         cfs.loadNewSSTables();
1:     }
1: 
1:     private SSTableReader replaceSSTable(ColumnFamilyStore cfs, LifecycleTransaction txn, boolean fail)
1:     {
1:         List<SSTableReader> newsstables = null;
1:         int nowInSec = FBUtilities.nowInSeconds();
1:         try (CompactionController controller = new CompactionController(cfs, txn.originals(), cfs.gcBefore(FBUtilities.nowInSeconds())))
1:         {
0:             try (SSTableRewriter rewriter = new SSTableRewriter(cfs, txn, 1000, false);
1:                  AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(txn.originals());
1:                  CompactionIterator ci = new CompactionIterator(txn.opType(), scanners.scanners, controller, nowInSec, txn.opId())
1:             )
1:             {
1:                 long lastCheckObsoletion = System.nanoTime();
1:                 File directory = txn.originals().iterator().next().descriptor.directory;
1:                 Descriptor desc = Descriptor.fromFilename(cfs.getSSTablePath(directory));
1:                 CFMetaData metadata = Schema.instance.getCFMetaData(desc);
1:                 rewriter.switchWriter(SSTableWriter.create(metadata,
1:                                                            desc,
1:                                                            0,
1:                                                            0,
1:                                                            0,
0:                                                            DatabaseDescriptor.getPartitioner(),
1:                                                            SerializationHeader.make(cfs.metadata, txn.originals()),
1:                                                            txn));
1:                 while (ci.hasNext())
1:                 {
1:                     rewriter.append(ci.next());
1: 
1:                     if (System.nanoTime() - lastCheckObsoletion > TimeUnit.MINUTES.toNanos(1L))
1:                     {
1:                         controller.maybeRefreshOverlaps();
1:                         lastCheckObsoletion = System.nanoTime();
1:                     }
1:                 }
1: 
1:                 if (!fail)
1:                     newsstables = rewriter.finish();
1:                 else
1:                     rewriter.abort();
1:             }
1:         }
1: 
1:         assertTrue(fail || newsstables != null);
1: 
1:         if (newsstables != null)
1:         {
1:             Assert.assertEquals(1, newsstables.size());
1:             return newsstables.iterator().next();
1:         }
1: 
1:         return null;
1:     }
1: 
1:     private void assertFiles(String dirPath, Set<String> expectedFiles)
1:     {
1:         File dir = new File(dirPath);
1:         for (File file : dir.listFiles())
1:         {
1:             if (file.isDirectory())
1:                 continue;
1: 
1:             String filePath = file.getPath();
1:             assertTrue(filePath, expectedFiles.contains(filePath));
1:             expectedFiles.remove(filePath);
1:         }
1: 
1:         assertTrue(expectedFiles.isEmpty());
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e777301
/////////////////////////////////////////////////////////////////////////
0:             try (SSTableRewriter rewriter = new SSTableRewriter(txn, 1000, false);
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         String schema = "CREATE TABLE \"%s\".\"%s\" (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))";
1:         String query = "INSERT INTO \"%s\".\"%s\" (key, name, val) VALUES (?, ?, ?)";
0:                                                        .inDirectory(cfs.getDirectories().getDirectoryForNewSSTables())
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:                                                        .withPartitioner(StorageService.getPartitioner())
/////////////////////////////////////////////////////////////////////////
0:                                                            DatabaseDescriptor.getPartitioner(),
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ad8cad7
/////////////////////////////////////////////////////////////////////////
1:         String dataFolder = cfs.getLiveSSTables().iterator().next().descriptor.directory.getPath();
/////////////////////////////////////////////////////////////////////////
1:         Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());
============================================================================