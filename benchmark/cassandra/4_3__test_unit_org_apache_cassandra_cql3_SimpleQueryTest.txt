1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.cql3;
1:9e74891: 
1:a991b64: import org.junit.Test;
3:a991b64: 
1:a991b64: public class SimpleQueryTest extends CQLTester
1:a991b64: {
1:a991b64:     @Test
1:a991b64:     public void testStaticCompactTables() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text PRIMARY KEY, v1 int, v2 text) WITH COMPACT STORAGE");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "first", 1, "value1");
1:a991b64:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "second", 2, "value2");
1:a991b64:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "third", 3, "value3");
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ?", "first"),
1:a991b64:             row("first", 1, "value1")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT v2 FROM %s WHERE k = ?", "second"),
1:a991b64:             row("value2")
1:a991b64:         );
1:a991b64: 
1:a991b64:         // Murmur3 order
1:a991b64:         assertRows(execute("SELECT * FROM %s"),
1:a991b64:             row("third",  3, "value3"),
1:a991b64:             row("second", 2, "value2"),
1:a991b64:             row("first",  1, "value1")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testDynamicCompactTables() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t int, v text, PRIMARY KEY (k, t));");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 1, "v11");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 2, "v12");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 3, "v13");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 4, "v14");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 5, "v15");
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"),
1:a991b64:             row("key",  1, "v11"),
1:a991b64:             row("key",  2, "v12"),
1:a991b64:             row("key",  3, "v13"),
1:a991b64:             row("key",  4, "v14"),
1:a991b64:             row("key",  5, "v15")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ?", "key", 3),
1:a991b64:             row("key",  4, "v14"),
1:a991b64:             row("key",  5, "v15")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ?", "key", 2, 4),
1:a991b64:             row("key",  2, "v12"),
1:a991b64:             row("key",  3, "v13")
1:a991b64:         );
1:a991b64: 
1:a991b64:         // Reversed queries
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t DESC", "key"),
1:a991b64:             row("key",  5, "v15"),
1:a991b64:             row("key",  4, "v14"),
1:a991b64:             row("key",  3, "v13"),
1:a991b64:             row("key",  2, "v12"),
1:a991b64:             row("key",  1, "v11")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ? ORDER BY t DESC", "key", 3),
1:a991b64:             row("key",  5, "v15"),
1:a991b64:             row("key",  4, "v14")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ? ORDER BY t DESC", "key", 2, 4),
1:a991b64:             row("key",  3, "v13"),
1:a991b64:             row("key",  2, "v12")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testTableWithoutClustering() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text PRIMARY KEY, v1 int, v2 text);");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "first", 1, "value1");
1:a991b64:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "second", 2, "value2");
1:a991b64:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "third", 3, "value3");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ?", "first"),
1:a991b64:             row("first", 1, "value1")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT v2 FROM %s WHERE k = ?", "second"),
1:a991b64:             row("value2")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"),
1:a991b64:             row("third",  3, "value3"),
1:a991b64:             row("second", 2, "value2"),
1:a991b64:             row("first",  1, "value1")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testTableWithOneClustering() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t int, v1 text, v2 text, PRIMARY KEY (k, t));");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 1, "v11", "v21");
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 2, "v12", "v22");
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 3, "v13", "v23");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 4, "v14", "v24");
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 5, "v15", "v25");
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"),
1:a991b64:             row("key",  1, "v11", "v21"),
1:a991b64:             row("key",  2, "v12", "v22"),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  4, "v14", "v24"),
1:a991b64:             row("key",  5, "v15", "v25")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ?", "key", 3),
1:a991b64:             row("key",  4, "v14", "v24"),
1:a991b64:             row("key",  5, "v15", "v25")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ?", "key", 2, 4),
1:a991b64:             row("key",  2, "v12", "v22"),
1:a991b64:             row("key",  3, "v13", "v23")
1:a991b64:         );
1:a991b64: 
1:a991b64:         // Reversed queries
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t DESC", "key"),
1:a991b64:             row("key",  5, "v15", "v25"),
1:a991b64:             row("key",  4, "v14", "v24"),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  2, "v12", "v22"),
1:a991b64:             row("key",  1, "v11", "v21")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ? ORDER BY t DESC", "key", 3),
1:a991b64:             row("key",  5, "v15", "v25"),
1:a991b64:             row("key",  4, "v14", "v24")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ? ORDER BY t DESC", "key", 2, 4),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  2, "v12", "v22")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testTableWithReverseClusteringOrder() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t int, v1 text, v2 text, PRIMARY KEY (k, t)) WITH CLUSTERING ORDER BY (t DESC);");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 1, "v11", "v21");
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 2, "v12", "v22");
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 3, "v13", "v23");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 4, "v14", "v24");
1:a991b64:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 5, "v15", "v25");
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"),
1:a991b64:             row("key",  5, "v15", "v25"),
1:a991b64:             row("key",  4, "v14", "v24"),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  2, "v12", "v22"),
1:a991b64:             row("key",  1, "v11", "v21")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t ASC", "key"),
1:a991b64:             row("key",  1, "v11", "v21"),
1:a991b64:             row("key",  2, "v12", "v22"),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  4, "v14", "v24"),
1:a991b64:             row("key",  5, "v15", "v25")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ?", "key", 3),
1:a991b64:             row("key",  5, "v15", "v25"),
1:a991b64:             row("key",  4, "v14", "v24")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ?", "key", 2, 4),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  2, "v12", "v22")
1:a991b64:         );
1:a991b64: 
1:a991b64:         // Reversed queries
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t DESC", "key"),
1:a991b64:             row("key",  5, "v15", "v25"),
1:a991b64:             row("key",  4, "v14", "v24"),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  2, "v12", "v22"),
1:a991b64:             row("key",  1, "v11", "v21")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ? ORDER BY t DESC", "key", 3),
1:a991b64:             row("key",  5, "v15", "v25"),
1:a991b64:             row("key",  4, "v14", "v24")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ? ORDER BY t DESC", "key", 2, 4),
1:a991b64:             row("key",  3, "v13", "v23"),
1:a991b64:             row("key",  2, "v12", "v22")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testTableWithTwoClustering() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t1 text, t2 int, v text, PRIMARY KEY (k, t1, t2));");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v1", 1, "v1");
1:a991b64:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v1", 2, "v2");
1:a991b64:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v2", 1, "v3");
1:a991b64:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v2", 2, "v4");
1:a991b64:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v2", 3, "v5");
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"),
1:a991b64:             row("key",  "v1", 1, "v1"),
1:a991b64:             row("key",  "v1", 2, "v2"),
1:a991b64:             row("key",  "v2", 1, "v3"),
1:a991b64:             row("key",  "v2", 2, "v4"),
1:a991b64:             row("key",  "v2", 3, "v5")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t1 >= ?", "key", "v2"),
1:a991b64:             row("key",  "v2", 1, "v3"),
1:a991b64:             row("key",  "v2", 2, "v4"),
1:a991b64:             row("key",  "v2", 3, "v5")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t1 >= ? ORDER BY t1 DESC", "key", "v2"),
1:a991b64:             row("key",  "v2", 3, "v5"),
1:a991b64:             row("key",  "v2", 2, "v4"),
1:a991b64:             row("key",  "v2", 1, "v3")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testTableWithLargePartition() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t1 int, t2 int, v text, PRIMARY KEY (k, t1, t2));");
1:a991b64: 
1:a991b64:         for (int t1 = 0; t1 < 20; t1++)
1:a991b64:             for (int t2 = 0; t2 < 10; t2++)
1:a991b64:                 execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", t1, t2, "someSemiLargeTextForValue_" + t1 + "_" + t2);
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         Object[][] expected = new Object[10][];
1:a991b64:         for (int t2 = 0; t2 < 10; t2++)
1:a991b64:             expected[t2] = row("key", 15, t2);
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT k, t1, t2 FROM %s WHERE k=? AND t1=?", "key", 15), expected);
1:a991b64: 
1:a991b64:         Object[][] expectedReverse = new Object[10][];
1:a991b64:         for (int t2 = 9; t2 >= 0; t2--)
1:a991b64:             expectedReverse[9 - t2] = row("key", 15, t2);
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT k, t1, t2 FROM %s WHERE k=? AND t1=? ORDER BY t1 DESC, t2 DESC", "key", 15), expectedReverse);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testRowDeletion() throws Throwable
1:a991b64:     {
1:a991b64:         int N = 4;
1:a991b64: 
1:a991b64:         createTable("CREATE TABLE %s (k text, t int, v1 text, v2 int, PRIMARY KEY (k, t));");
1:a991b64: 
1:a991b64:         for (int t = 0; t < N; t++)
1:2457599:             execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", t, "v" + t, t + 10);
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         for (int i = 0; i < N / 2; i++)
1:a991b64:             execute("DELETE FROM %s WHERE k=? AND t=?", "key", i * 2);
1:a991b64: 
1:a991b64:         Object[][] expected = new Object[N/2][];
1:a991b64:         for (int i = 0; i < N / 2; i++)
1:a991b64:         {
1:a991b64:             int t = i * 2 + 1;
1:a991b64:             expected[i] = row("key", t, "v" + t, t + 10);
1:a991b64:         }
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"), expected);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testRangeTombstones() throws Throwable
1:a991b64:     {
1:a991b64:         int N = 100;
1:a991b64: 
1:a991b64:         createTable("CREATE TABLE %s (k text, t1 int, t2 int, v text, PRIMARY KEY (k, t1, t2));");
1:a991b64: 
1:a991b64:         for (int t1 = 0; t1 < 3; t1++)
1:a991b64:             for (int t2 = 0; t2 < N; t2++)
1:a991b64:                 execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", t1, t2, "someSemiLargeTextForValue_" + t1 + "_" + t2);
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("DELETE FROM %s WHERE k=? AND t1=?", "key", 1);
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         Object[][] expected = new Object[2*N][];
1:a991b64:         for (int t2 = 0; t2 < N; t2++)
1:a991b64:         {
1:a991b64:             expected[t2] = row("key", 0, t2, "someSemiLargeTextForValue_0_" + t2);
1:a991b64:             expected[N + t2] = row("key", 2, t2, "someSemiLargeTextForValue_2_" + t2);
1:a991b64:         }
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"), expected);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void test2ndaryIndexes() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t int, v text, PRIMARY KEY (k, t));");
1:a991b64: 
1:a991b64:         execute("CREATE INDEX ON %s(v)");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 1, "foo");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 2, "bar");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 1, "foo");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 2, "foo");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 3, "bar");
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE v = ?", "foo"),
1:a991b64:             row("key1",  1, "foo"),
1:a991b64:             row("key2",  1, "foo"),
1:a991b64:             row("key2",  2, "foo")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE v = ?", "bar"),
1:a991b64:             row("key1",  2, "bar"),
1:a991b64:             row("key2",  3, "bar")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testStaticColumns() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t int, s text static, v text, PRIMARY KEY (k, t));");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 1, "foo1", "st1");
1:a991b64:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 2, "foo2", "st2");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 3, "foo3", "st3");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 4, "foo4");
1:28cd76c:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 2, "foo2", "st2-repeat");
1:28cd76c: 
1:28cd76c:         flush();
1:28cd76c: 
1:28cd76c:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 5, "foo5", "st5");
1:28cd76c:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 6, "foo6");
1:28cd76c: 
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s"),
1:28cd76c:             row("key1",  1, "st5", "foo1"),
1:28cd76c:             row("key1",  2, "st5", "foo2"),
1:28cd76c:             row("key1",  3, "st5", "foo3"),
1:28cd76c:             row("key1",  4, "st5", "foo4"),
1:28cd76c:             row("key1",  5, "st5", "foo5"),
1:28cd76c:             row("key1",  6, "st5", "foo6")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT s FROM %s WHERE k = ?", "key1"),
1:28cd76c:             row("st5"),
1:28cd76c:             row("st5"),
1:28cd76c:             row("st5"),
1:28cd76c:             row("st5"),
1:28cd76c:             row("st5"),
1:28cd76c:             row("st5")
1:a991b64:         );
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k = ?", "key1"),
1:28cd76c:             row("st5")
1:a991b64:         );
1:28cd76c: 
1:28cd76c:         assertEmpty(execute("SELECT * FROM %s WHERE k = ? AND t > ? AND t < ?", "key1", 7, 5));
1:28cd76c:         assertEmpty(execute("SELECT * FROM %s WHERE k = ? AND t > ? AND t < ? ORDER BY t DESC", "key1", 7, 5));
1:28cd76c: 
1:28cd76c:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t = ?", "key1", 2),
1:28cd76c:             row("key1", 2, "st5", "foo2"));
1:28cd76c: 
1:28cd76c:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t = ? ORDER BY t DESC", "key1", 2),
1:28cd76c:             row("key1", 2, "st5", "foo2"));
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testDistinct() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k text, t int, v text, PRIMARY KEY (k, t));");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 1, "foo1");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 2, "foo2");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 3, "foo3");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 4, "foo4");
1:a991b64:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 5, "foo5");
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT DISTINCT k FROM %s"),
1:a991b64:             row("key1"),
1:a991b64:             row("key2")
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void collectionDeletionTest() throws Throwable
1:a991b64:     {
1:2457599:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<int>);");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, s) VALUES (?, ?)", 1, set(1));
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, s) VALUES (?, ?)", 1, set(2));
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT s FROM %s WHERE k = ?", 1),
1:a991b64:             row(set(2))
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void limitWithMultigetTest() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int);");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 0, 0);
1:a991b64:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 1, 1);
1:a991b64:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 2, 2);
1:a991b64:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 3, 3);
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT v FROM %s WHERE k IN ? LIMIT ?", list(0, 1, 2, 3), 2),
1:a991b64:             row(0),
1:a991b64:             row(1)
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void staticDistinctTest() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s ( k int, p int, s int static, PRIMARY KEY (k, p))");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, p) VALUES (?, ?)", 1, 1);
1:a991b64:         execute("INSERT INTO %s (k, p) VALUES (?, ?)", 1, 2);
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT k, s FROM %s"),
1:a991b64:             row(1, null),
1:a991b64:             row(1, null)
1:a991b64:         );
1:a991b64:         assertRows(execute("SELECT DISTINCT k, s FROM %s"),
1:a991b64:             row(1, null)
1:a991b64:         );
1:a991b64:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k=?", 1),
1:a991b64:             row((Object)null)
1:a991b64:         );
1:a991b64:         assertEmpty(execute("SELECT DISTINCT s FROM %s WHERE k=?", 2));
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testCompactStorageUpdateWithNull() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (partitionKey int," +
1:a991b64:                 "clustering_1 int," +
1:a991b64:                 "value int," +
1:a991b64:                 " PRIMARY KEY (partitionKey, clustering_1)) WITH COMPACT STORAGE");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 0, 0)");
1:a991b64:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 1, 1)");
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ?", null, 0, 0);
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?))", 0, 0, 1),
1:a991b64:             row(0, 1, 1)
1:a991b64:         );
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void test2ndaryIndexBug() throws Throwable
1:a991b64:     {
1:a991b64:         createTable("CREATE TABLE %s (k int, c1 int, c2 int, v int, PRIMARY KEY(k, c1, c2))");
1:a991b64: 
1:a991b64:         execute("CREATE INDEX v_idx ON %s(v)");
1:a991b64: 
1:a991b64:         execute("INSERT INTO %s (k, c1, c2, v) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:a991b64:         execute("INSERT INTO %s (k, c1, c2, v) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE v=?", 0),
1:a991b64:             row(0, 0, 0, 0),
1:a991b64:             row(0, 1, 0, 0)
1:a991b64:         );
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         execute("DELETE FROM %s WHERE k=? AND c1=?", 0, 1);
1:a991b64: 
1:a991b64:         flush();
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE v=?", 0),
1:a991b64:             row(0, 0, 0, 0)
1:a991b64:         );
1:a991b64:     }
1:9e74891: 
1:9e74891:     /** Test for Cassandra issue 10958 **/
1:9e74891:     @Test
1:9e74891:     public void restrictionOnRegularColumnWithStaticColumnPresentTest() throws Throwable
1:9e74891:     {
1:9e74891:         createTable("CREATE TABLE %s (id int, id2 int, age int static, extra int, PRIMARY KEY(id, id2))");
1:9e74891: 
1:9e74891:         execute("INSERT INTO %s (id, id2, age, extra) VALUES (?, ?, ?, ?)", 1, 1, 1, 1);
1:9e74891:         execute("INSERT INTO %s (id, id2, age, extra) VALUES (?, ?, ?, ?)", 2, 2, 2, 2);
1:9e74891:         execute("UPDATE %s SET age=? WHERE id=?", 3, 3);
1:9e74891: 
1:9e74891:         assertRows(execute("SELECT * FROM %s"),
1:9e74891:             row(1, 1, 1, 1),
1:9e74891:             row(2, 2, 2, 2),
1:9e74891:             row(3, null, 3, null)
1:9e74891:         );
1:9e74891: 
1:9e74891:         assertRows(execute("SELECT * FROM %s WHERE extra > 1 ALLOW FILTERING"),
1:9e74891:             row(2, 2, 2, 2)
1:9e74891:         );
1:9e74891:     }
1:9e74891: 
1:9e74891:     @Test
1:9e74891:     public void testRowFilteringOnStaticColumn() throws Throwable
1:9e74891:     {
1:9e74891:         createTable("CREATE TABLE %s (id int, name text, age int static, PRIMARY KEY (id, name))");
1:9e74891:         for (int i = 0; i < 5; i++)
1:9e74891:         {
1:9e74891:             execute("INSERT INTO %s (id, name, age) VALUES (?, ?, ?)", i, "NameDoesNotMatter", i);
1:9e74891:         }
1:9e74891: 
1:9e74891:         assertInvalid("SELECT id, age FROM %s WHERE age < 1");
1:9e74891:         assertRows(execute("SELECT id, age FROM %s WHERE age < 1 ALLOW FILTERING"),
1:9e74891:                    row(0, 0));
1:9e74891:         assertRows(execute("SELECT id, age FROM %s WHERE age > 0 AND age < 3 ALLOW FILTERING"),
1:9e74891:                    row(1, 1), row(2, 2));
1:9e74891:         assertRows(execute("SELECT id, age FROM %s WHERE age > 3 ALLOW FILTERING"),
1:9e74891:                    row(4, 4));
1:9e74891:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Joel Knighton
-------------------------------------------------------------------------------
commit:28cd76c
/////////////////////////////////////////////////////////////////////////
1:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 2, "foo2", "st2-repeat");
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 5, "foo5", "st5");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 6, "foo6");
1: 
1:             row("key1",  1, "st5", "foo1"),
1:             row("key1",  2, "st5", "foo2"),
1:             row("key1",  3, "st5", "foo3"),
1:             row("key1",  4, "st5", "foo4"),
1:             row("key1",  5, "st5", "foo5"),
1:             row("key1",  6, "st5", "foo6")
1:             row("st5"),
1:             row("st5"),
1:             row("st5"),
1:             row("st5"),
1:             row("st5"),
1:             row("st5")
1:             row("st5")
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE k = ? AND t > ? AND t < ?", "key1", 7, 5));
1:         assertEmpty(execute("SELECT * FROM %s WHERE k = ? AND t > ? AND t < ? ORDER BY t DESC", "key1", 7, 5));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t = ?", "key1", 2),
1:             row("key1", 2, "st5", "foo2"));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t = ? ORDER BY t DESC", "key1", 2),
1:             row("key1", 2, "st5", "foo2"));
author:Taiyuan Zhang
-------------------------------------------------------------------------------
commit:9e74891
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /** Test for Cassandra issue 10958 **/
1:     @Test
1:     public void restrictionOnRegularColumnWithStaticColumnPresentTest() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (id int, id2 int, age int static, extra int, PRIMARY KEY(id, id2))");
1: 
1:         execute("INSERT INTO %s (id, id2, age, extra) VALUES (?, ?, ?, ?)", 1, 1, 1, 1);
1:         execute("INSERT INTO %s (id, id2, age, extra) VALUES (?, ?, ?, ?)", 2, 2, 2, 2);
1:         execute("UPDATE %s SET age=? WHERE id=?", 3, 3);
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(1, 1, 1, 1),
1:             row(2, 2, 2, 2),
1:             row(3, null, 3, null)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE extra > 1 ALLOW FILTERING"),
1:             row(2, 2, 2, 2)
1:         );
1:     }
1: 
1:     @Test
1:     public void testRowFilteringOnStaticColumn() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (id int, name text, age int static, PRIMARY KEY (id, name))");
1:         for (int i = 0; i < 5; i++)
1:         {
1:             execute("INSERT INTO %s (id, name, age) VALUES (?, ?, ?)", i, "NameDoesNotMatter", i);
1:         }
1: 
1:         assertInvalid("SELECT id, age FROM %s WHERE age < 1");
1:         assertRows(execute("SELECT id, age FROM %s WHERE age < 1 ALLOW FILTERING"),
1:                    row(0, 0));
1:         assertRows(execute("SELECT id, age FROM %s WHERE age > 0 AND age < 3 ALLOW FILTERING"),
1:                    row(1, 1), row(2, 2));
1:         assertRows(execute("SELECT id, age FROM %s WHERE age > 3 ALLOW FILTERING"),
1:                    row(4, 4));
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1:             execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", t, "v" + t, t + 10);
/////////////////////////////////////////////////////////////////////////
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<int>);");
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
0: import java.util.*;
1: import org.junit.Test;
1: 
0: import static junit.framework.Assert.*;
1: 
1: public class SimpleQueryTest extends CQLTester
1: {
1:     @Test
1:     public void testStaticCompactTables() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text PRIMARY KEY, v1 int, v2 text) WITH COMPACT STORAGE");
1: 
1:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "first", 1, "value1");
1:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "second", 2, "value2");
1:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "third", 3, "value3");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ?", "first"),
1:             row("first", 1, "value1")
1:         );
1: 
1:         assertRows(execute("SELECT v2 FROM %s WHERE k = ?", "second"),
1:             row("value2")
1:         );
1: 
1:         // Murmur3 order
1:         assertRows(execute("SELECT * FROM %s"),
1:             row("third",  3, "value3"),
1:             row("second", 2, "value2"),
1:             row("first",  1, "value1")
1:         );
1:     }
1: 
1:     @Test
1:     public void testDynamicCompactTables() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t int, v text, PRIMARY KEY (k, t));");
1: 
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 1, "v11");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 2, "v12");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 3, "v13");
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 4, "v14");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key", 5, "v15");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row("key",  1, "v11"),
1:             row("key",  2, "v12"),
1:             row("key",  3, "v13"),
1:             row("key",  4, "v14"),
1:             row("key",  5, "v15")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ?", "key", 3),
1:             row("key",  4, "v14"),
1:             row("key",  5, "v15")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ?", "key", 2, 4),
1:             row("key",  2, "v12"),
1:             row("key",  3, "v13")
1:         );
1: 
1:         // Reversed queries
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t DESC", "key"),
1:             row("key",  5, "v15"),
1:             row("key",  4, "v14"),
1:             row("key",  3, "v13"),
1:             row("key",  2, "v12"),
1:             row("key",  1, "v11")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ? ORDER BY t DESC", "key", 3),
1:             row("key",  5, "v15"),
1:             row("key",  4, "v14")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ? ORDER BY t DESC", "key", 2, 4),
1:             row("key",  3, "v13"),
1:             row("key",  2, "v12")
1:         );
1:     }
1: 
1:     @Test
1:     public void testTableWithoutClustering() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text PRIMARY KEY, v1 int, v2 text);");
1: 
1:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "first", 1, "value1");
1:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "second", 2, "value2");
1:         execute("INSERT INTO %s (k, v1, v2) values (?, ?, ?)", "third", 3, "value3");
1: 
1:         flush();
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ?", "first"),
1:             row("first", 1, "value1")
1:         );
1: 
1:         assertRows(execute("SELECT v2 FROM %s WHERE k = ?", "second"),
1:             row("value2")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row("third",  3, "value3"),
1:             row("second", 2, "value2"),
1:             row("first",  1, "value1")
1:         );
1:     }
1: 
1:     @Test
1:     public void testTableWithOneClustering() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t int, v1 text, v2 text, PRIMARY KEY (k, t));");
1: 
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 1, "v11", "v21");
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 2, "v12", "v22");
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 3, "v13", "v23");
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 4, "v14", "v24");
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 5, "v15", "v25");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row("key",  1, "v11", "v21"),
1:             row("key",  2, "v12", "v22"),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  4, "v14", "v24"),
1:             row("key",  5, "v15", "v25")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ?", "key", 3),
1:             row("key",  4, "v14", "v24"),
1:             row("key",  5, "v15", "v25")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ?", "key", 2, 4),
1:             row("key",  2, "v12", "v22"),
1:             row("key",  3, "v13", "v23")
1:         );
1: 
1:         // Reversed queries
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t DESC", "key"),
1:             row("key",  5, "v15", "v25"),
1:             row("key",  4, "v14", "v24"),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  2, "v12", "v22"),
1:             row("key",  1, "v11", "v21")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ? ORDER BY t DESC", "key", 3),
1:             row("key",  5, "v15", "v25"),
1:             row("key",  4, "v14", "v24")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ? ORDER BY t DESC", "key", 2, 4),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  2, "v12", "v22")
1:         );
1:     }
1: 
1:     @Test
1:     public void testTableWithReverseClusteringOrder() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t int, v1 text, v2 text, PRIMARY KEY (k, t)) WITH CLUSTERING ORDER BY (t DESC);");
1: 
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 1, "v11", "v21");
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 2, "v12", "v22");
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 3, "v13", "v23");
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 4, "v14", "v24");
1:         execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", 5, "v15", "v25");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row("key",  5, "v15", "v25"),
1:             row("key",  4, "v14", "v24"),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  2, "v12", "v22"),
1:             row("key",  1, "v11", "v21")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t ASC", "key"),
1:             row("key",  1, "v11", "v21"),
1:             row("key",  2, "v12", "v22"),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  4, "v14", "v24"),
1:             row("key",  5, "v15", "v25")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ?", "key", 3),
1:             row("key",  5, "v15", "v25"),
1:             row("key",  4, "v14", "v24")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ?", "key", 2, 4),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  2, "v12", "v22")
1:         );
1: 
1:         // Reversed queries
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? ORDER BY t DESC", "key"),
1:             row("key",  5, "v15", "v25"),
1:             row("key",  4, "v14", "v24"),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  2, "v12", "v22"),
1:             row("key",  1, "v11", "v21")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t > ? ORDER BY t DESC", "key", 3),
1:             row("key",  5, "v15", "v25"),
1:             row("key",  4, "v14", "v24")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t >= ? AND t < ? ORDER BY t DESC", "key", 2, 4),
1:             row("key",  3, "v13", "v23"),
1:             row("key",  2, "v12", "v22")
1:         );
1:     }
1: 
1:     @Test
1:     public void testTableWithTwoClustering() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t1 text, t2 int, v text, PRIMARY KEY (k, t1, t2));");
1: 
1:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v1", 1, "v1");
1:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v1", 2, "v2");
1:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v2", 1, "v3");
1:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v2", 2, "v4");
1:         execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", "v2", 3, "v5");
1:         flush();
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row("key",  "v1", 1, "v1"),
1:             row("key",  "v1", 2, "v2"),
1:             row("key",  "v2", 1, "v3"),
1:             row("key",  "v2", 2, "v4"),
1:             row("key",  "v2", 3, "v5")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t1 >= ?", "key", "v2"),
1:             row("key",  "v2", 1, "v3"),
1:             row("key",  "v2", 2, "v4"),
1:             row("key",  "v2", 3, "v5")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = ? AND t1 >= ? ORDER BY t1 DESC", "key", "v2"),
1:             row("key",  "v2", 3, "v5"),
1:             row("key",  "v2", 2, "v4"),
1:             row("key",  "v2", 1, "v3")
1:         );
1:     }
1: 
1:     @Test
1:     public void testTableWithLargePartition() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t1 int, t2 int, v text, PRIMARY KEY (k, t1, t2));");
1: 
1:         for (int t1 = 0; t1 < 20; t1++)
1:             for (int t2 = 0; t2 < 10; t2++)
1:                 execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", t1, t2, "someSemiLargeTextForValue_" + t1 + "_" + t2);
1: 
1:         flush();
1: 
1:         Object[][] expected = new Object[10][];
1:         for (int t2 = 0; t2 < 10; t2++)
1:             expected[t2] = row("key", 15, t2);
1: 
1:         assertRows(execute("SELECT k, t1, t2 FROM %s WHERE k=? AND t1=?", "key", 15), expected);
1: 
1:         Object[][] expectedReverse = new Object[10][];
1:         for (int t2 = 9; t2 >= 0; t2--)
1:             expectedReverse[9 - t2] = row("key", 15, t2);
1: 
1:         assertRows(execute("SELECT k, t1, t2 FROM %s WHERE k=? AND t1=? ORDER BY t1 DESC, t2 DESC", "key", 15), expectedReverse);
1:     }
1: 
1:     @Test
1:     public void testRowDeletion() throws Throwable
1:     {
1:         int N = 4;
1: 
1:         createTable("CREATE TABLE %s (k text, t int, v1 text, v2 int, PRIMARY KEY (k, t));");
1: 
1:         for (int t = 0; t < N; t++)
0:                 execute("INSERT INTO %s (k, t, v1, v2) values (?, ?, ?, ?)", "key", t, "v" + t, t + 10);
1: 
1:         flush();
1: 
1:         for (int i = 0; i < N / 2; i++)
1:             execute("DELETE FROM %s WHERE k=? AND t=?", "key", i * 2);
1: 
1:         Object[][] expected = new Object[N/2][];
1:         for (int i = 0; i < N / 2; i++)
1:         {
1:             int t = i * 2 + 1;
1:             expected[i] = row("key", t, "v" + t, t + 10);
1:         }
1: 
1:         assertRows(execute("SELECT * FROM %s"), expected);
1:     }
1: 
1:     @Test
1:     public void testRangeTombstones() throws Throwable
1:     {
1:         int N = 100;
1: 
1:         createTable("CREATE TABLE %s (k text, t1 int, t2 int, v text, PRIMARY KEY (k, t1, t2));");
1: 
1:         for (int t1 = 0; t1 < 3; t1++)
1:             for (int t2 = 0; t2 < N; t2++)
1:                 execute("INSERT INTO %s (k, t1, t2, v) values (?, ?, ?, ?)", "key", t1, t2, "someSemiLargeTextForValue_" + t1 + "_" + t2);
1: 
1:         flush();
1: 
1:         execute("DELETE FROM %s WHERE k=? AND t1=?", "key", 1);
1: 
1:         flush();
1: 
1:         Object[][] expected = new Object[2*N][];
1:         for (int t2 = 0; t2 < N; t2++)
1:         {
1:             expected[t2] = row("key", 0, t2, "someSemiLargeTextForValue_0_" + t2);
1:             expected[N + t2] = row("key", 2, t2, "someSemiLargeTextForValue_2_" + t2);
1:         }
1: 
1:         assertRows(execute("SELECT * FROM %s"), expected);
1:     }
1: 
1:     @Test
1:     public void test2ndaryIndexes() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t int, v text, PRIMARY KEY (k, t));");
1: 
1:         execute("CREATE INDEX ON %s(v)");
1: 
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 1, "foo");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 2, "bar");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 1, "foo");
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 2, "foo");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 3, "bar");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE v = ?", "foo"),
1:             row("key1",  1, "foo"),
1:             row("key2",  1, "foo"),
1:             row("key2",  2, "foo")
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE v = ?", "bar"),
1:             row("key1",  2, "bar"),
1:             row("key2",  3, "bar")
1:         );
1:     }
1: 
1:     @Test
1:     public void testStaticColumns() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t int, s text static, v text, PRIMARY KEY (k, t));");
1: 
1:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 1, "foo1", "st1");
1:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 2, "foo2", "st2");
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, t, v, s) values (?, ?, ?, ?)", "key1", 3, "foo3", "st3");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 4, "foo4");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
0:             row("key1",  1, "st3", "foo1"),
0:             row("key1",  2, "st3", "foo2"),
0:             row("key1",  3, "st3", "foo3"),
0:             row("key1",  4, "st3", "foo4")
1:         );
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = ?", "key1"),
0:             row("st3"),
0:             row("st3"),
0:             row("st3"),
0:             row("st3")
1:         );
1: 
1:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k = ?", "key1"),
0:             row("st3")
1:         );
1:     }
1: 
1:     @Test
1:     public void testDistinct() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, t int, v text, PRIMARY KEY (k, t));");
1: 
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 1, "foo1");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 2, "foo2");
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key1", 3, "foo3");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 4, "foo4");
1:         execute("INSERT INTO %s (k, t, v) values (?, ?, ?)", "key2", 5, "foo5");
1: 
1:         assertRows(execute("SELECT DISTINCT k FROM %s"),
1:             row("key1"),
1:             row("key2")
1:         );
1:     }
1: 
1:     @Test
1:     public void collectionDeletionTest() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k text PRIMARY KEY, s set<int>);");
1: 
1:         execute("INSERT INTO %s (k, s) VALUES (?, ?)", 1, set(1));
1: 
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, s) VALUES (?, ?)", 1, set(2));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = ?", 1),
1:             row(set(2))
1:         );
1:     }
1: 
1:     @Test
1:     public void limitWithMultigetTest() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int);");
1: 
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 0, 0);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 1, 1);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 2, 2);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", 3, 3);
1: 
1:         assertRows(execute("SELECT v FROM %s WHERE k IN ? LIMIT ?", list(0, 1, 2, 3), 2),
1:             row(0),
1:             row(1)
1:         );
1:     }
1: 
1:     @Test
1:     public void staticDistinctTest() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s ( k int, p int, s int static, PRIMARY KEY (k, p))");
1: 
1:         execute("INSERT INTO %s (k, p) VALUES (?, ?)", 1, 1);
1:         execute("INSERT INTO %s (k, p) VALUES (?, ?)", 1, 2);
1: 
1:         assertRows(execute("SELECT k, s FROM %s"),
1:             row(1, null),
1:             row(1, null)
1:         );
1:         assertRows(execute("SELECT DISTINCT k, s FROM %s"),
1:             row(1, null)
1:         );
1:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k=?", 1),
1:             row((Object)null)
1:         );
1:         assertEmpty(execute("SELECT DISTINCT s FROM %s WHERE k=?", 2));
1:     }
1: 
1:     @Test
1:     public void testCompactStorageUpdateWithNull() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (partitionKey int," +
1:                 "clustering_1 int," +
1:                 "value int," +
1:                 " PRIMARY KEY (partitionKey, clustering_1)) WITH COMPACT STORAGE");
1: 
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 0, 0)");
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 1, 1)");
1: 
1:         flush();
1: 
1:         execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ?", null, 0, 0);
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?))", 0, 0, 1),
1:             row(0, 1, 1)
1:         );
1:     }
1: 
1:     @Test
1:     public void test2ndaryIndexBug() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, c1 int, c2 int, v int, PRIMARY KEY(k, c1, c2))");
1: 
1:         execute("CREATE INDEX v_idx ON %s(v)");
1: 
1:         execute("INSERT INTO %s (k, c1, c2, v) VALUES (?, ?, ?, ?)", 0, 0, 0, 0);
1:         execute("INSERT INTO %s (k, c1, c2, v) VALUES (?, ?, ?, ?)", 0, 1, 0, 0);
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE v=?", 0),
1:             row(0, 0, 0, 0),
1:             row(0, 1, 0, 0)
1:         );
1: 
1:         flush();
1: 
1:         execute("DELETE FROM %s WHERE k=? AND c1=?", 0, 1);
1: 
1:         flush();
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE v=?", 0),
1:             row(0, 0, 0, 0)
1:         );
1:     }
1: }
============================================================================