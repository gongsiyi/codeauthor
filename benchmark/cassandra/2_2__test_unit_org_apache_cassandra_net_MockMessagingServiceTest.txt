1:7751588: /*
1:7751588:  * Licensed to the Apache Software Foundation (ASF) under one
1:7751588:  * or more contributor license agreements.  See the NOTICE file
1:7751588:  * distributed with this work for additional information
1:7751588:  * regarding copyright ownership.  The ASF licenses this file
1:7751588:  * to you under the Apache License, Version 2.0 (the
1:7751588:  * "License"); you may not use this file except in compliance
1:7751588:  * with the License.  You may obtain a copy of the License at
1:7751588:  *
1:7751588:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7751588:  *
1:7751588:  * Unless required by applicable law or agreed to in writing, software
1:7751588:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7751588:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7751588:  * See the License for the specific language governing permissions and
1:7751588:  * limitations under the License.
1:7751588:  */
1:7751588: package org.apache.cassandra.net;
1:7751588: 
1:7751588: import java.util.Collections;
1:7751588: import java.util.concurrent.ExecutionException;
1:7751588: 
1:7751588: import org.junit.Before;
1:7751588: import org.junit.BeforeClass;
1:7751588: import org.junit.Test;
1:7751588: 
1:7751588: import org.apache.cassandra.SchemaLoader;
1:7751588: import org.apache.cassandra.exceptions.ConfigurationException;
1:7751588: import org.apache.cassandra.gms.EchoMessage;
1:7751588: import org.apache.cassandra.service.StorageService;
1:7751588: import org.apache.cassandra.utils.FBUtilities;
1:7751588: 
1:7751588: import static org.apache.cassandra.net.MockMessagingService.all;
1:7751588: import static org.apache.cassandra.net.MockMessagingService.to;
1:7751588: import static org.apache.cassandra.net.MockMessagingService.verb;
1:7751588: import static org.junit.Assert.assertEquals;
1:7751588: import static org.junit.Assert.assertTrue;
1:7751588: 
1:7751588: public class MockMessagingServiceTest
1:7751588: {
1:7751588:     @BeforeClass
1:7751588:     public static void initCluster() throws ConfigurationException
1:7751588:     {
1:7751588:         SchemaLoader.prepareServer();
1:7751588:         StorageService.instance.initServer();
2:7751588:     }
1:7751588: 
1:7751588:     @Before
1:7751588:     public void cleanup()
1:7751588:     {
1:7751588:         MockMessagingService.cleanup();
1:7751588:     }
1:7751588: 
1:7751588:     @Test
1:7751588:     public void testRequestResponse() throws InterruptedException, ExecutionException
1:7751588:     {
1:7751588:         // echo message that we like to mock as incoming reply for outgoing echo message
1:7751588:         MessageIn<EchoMessage> echoMessageIn = MessageIn.create(FBUtilities.getBroadcastAddress(),
1:7751588:                 EchoMessage.instance,
1:7751588:                 Collections.emptyMap(),
1:7751588:                 MessagingService.Verb.ECHO,
1:9d9a1a1:                 MessagingService.current_version);
1:7751588:         MockMessagingSpy spy = MockMessagingService
1:7751588:                 .when(
1:7751588:                         all(
1:7751588:                                 to(FBUtilities.getBroadcastAddress()),
1:7751588:                                 verb(MessagingService.Verb.ECHO)
1:7751588:                         )
1:7751588:                 )
1:7751588:                 .respond(echoMessageIn);
1:7751588: 
1:7751588:         MessageOut<EchoMessage> echoMessageOut = new MessageOut<>(MessagingService.Verb.ECHO, EchoMessage.instance, EchoMessage.serializer);
1:7751588:         MessagingService.instance().sendRR(echoMessageOut, FBUtilities.getBroadcastAddress(), new IAsyncCallback()
1:7751588:         {
1:7751588:             public void response(MessageIn msg)
1:7751588:             {
1:7751588:                 assertEquals(MessagingService.Verb.ECHO, msg.verb);
1:7751588:                 assertEquals(echoMessageIn.payload, msg.payload);
1:7751588:             }
1:7751588: 
1:7751588:             public boolean isLatencyForSnitch()
1:7751588:             {
1:7751588:                 return false;
1:7751588:             }
1:7751588:         });
1:7751588: 
1:7751588:         // we must have intercepted the outgoing message at this point
1:7751588:         MessageOut<?> msg = spy.captureMessageOut().get();
1:7751588:         assertEquals(1, spy.messagesIntercepted);
1:7751588:         assertTrue(msg == echoMessageOut);
1:7751588: 
1:7751588:         // and return a mocked response
1:7751588:         assertEquals(1, spy.mockedMessageResponses);
1:9d9a1a1:     }
1:7751588: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9d9a1a1
/////////////////////////////////////////////////////////////////////////
1:                 MessagingService.current_version);
/////////////////////////////////////////////////////////////////////////
1: }
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:7751588
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.net;
1: 
1: import java.util.Collections;
1: import java.util.concurrent.ExecutionException;
1: 
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.gms.EchoMessage;
1: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static org.apache.cassandra.net.MockMessagingService.all;
1: import static org.apache.cassandra.net.MockMessagingService.to;
1: import static org.apache.cassandra.net.MockMessagingService.verb;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class MockMessagingServiceTest
1: {
1:     @BeforeClass
1:     public static void initCluster() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         StorageService.instance.initServer();
1:     }
1: 
1:     @Before
1:     public void cleanup()
1:     {
1:         MockMessagingService.cleanup();
1:     }
1: 
1:     @Test
1:     public void testRequestResponse() throws InterruptedException, ExecutionException
1:     {
1:         // echo message that we like to mock as incoming reply for outgoing echo message
1:         MessageIn<EchoMessage> echoMessageIn = MessageIn.create(FBUtilities.getBroadcastAddress(),
1:                 EchoMessage.instance,
1:                 Collections.emptyMap(),
1:                 MessagingService.Verb.ECHO,
0:                 MessagingService.current_version,
0:                 MessageIn.createTimestamp()
0:         );
1:         MockMessagingSpy spy = MockMessagingService
1:                 .when(
1:                         all(
1:                                 to(FBUtilities.getBroadcastAddress()),
1:                                 verb(MessagingService.Verb.ECHO)
1:                         )
1:                 )
1:                 .respond(echoMessageIn);
1: 
1:         MessageOut<EchoMessage> echoMessageOut = new MessageOut<>(MessagingService.Verb.ECHO, EchoMessage.instance, EchoMessage.serializer);
1:         MessagingService.instance().sendRR(echoMessageOut, FBUtilities.getBroadcastAddress(), new IAsyncCallback()
1:         {
1:             public void response(MessageIn msg)
1:             {
1:                 assertEquals(MessagingService.Verb.ECHO, msg.verb);
1:                 assertEquals(echoMessageIn.payload, msg.payload);
1:             }
1: 
1:             public boolean isLatencyForSnitch()
1:             {
1:                 return false;
1:             }
1:         });
1: 
1:         // we must have intercepted the outgoing message at this point
1:         MessageOut<?> msg = spy.captureMessageOut().get();
1:         assertEquals(1, spy.messagesIntercepted);
1:         assertTrue(msg == echoMessageOut);
1: 
1:         // and return a mocked response
1:         assertEquals(1, spy.mockedMessageResponses);
1:     }
1: }
============================================================================