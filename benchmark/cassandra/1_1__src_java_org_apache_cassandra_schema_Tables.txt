1:6e1033b: /*
1:6e1033b:  * Licensed to the Apache Software Foundation (ASF) under one
1:6e1033b:  * or more contributor license agreements.  See the NOTICE file
1:6e1033b:  * distributed with this work for additional information
1:6e1033b:  * regarding copyright ownership.  The ASF licenses this file
1:6e1033b:  * to you under the Apache License, Version 2.0 (the
1:6e1033b:  * "License"); you may not use this file except in compliance
1:6e1033b:  * with the License.  You may obtain a copy of the License at
1:6e1033b:  *
1:6e1033b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6e1033b:  *
1:6e1033b:  * Unless required by applicable law or agreed to in writing, software
1:6e1033b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e1033b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e1033b:  * See the License for the specific language governing permissions and
1:6e1033b:  * limitations under the License.
1:6e1033b:  */
1:6e1033b: package org.apache.cassandra.schema;
1:6e1033b: 
1:6e1033b: import java.util.Iterator;
1:6e1033b: import java.util.Optional;
1:6e1033b: 
1:6e1033b: import javax.annotation.Nullable;
1:6e1033b: 
1:6e1033b: import com.google.common.collect.ImmutableMap;
1:340df43: import com.google.common.collect.MapDifference;
1:340df43: import com.google.common.collect.Maps;
1:6e1033b: 
1:6e1033b: import org.apache.cassandra.config.CFMetaData;
1:6e1033b: 
1:6e1033b: import static com.google.common.collect.Iterables.filter;
1:6e1033b: 
1:6e1033b: /**
1:6e1033b:  * An immutable container for a keyspace's Tables.
1:6e1033b:  */
1:6e1033b: public final class Tables implements Iterable<CFMetaData>
1:6e1033b: {
1:6e1033b:     private final ImmutableMap<String, CFMetaData> tables;
1:6e1033b: 
1:6e1033b:     private Tables(Builder builder)
1:6e1033b:     {
1:6e1033b:         tables = builder.tables.build();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     public static Builder builder()
1:6e1033b:     {
1:6e1033b:         return new Builder();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     public static Tables none()
1:6e1033b:     {
1:6e1033b:         return builder().build();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     public static Tables of(CFMetaData... tables)
1:6e1033b:     {
1:6e1033b:         return builder().add(tables).build();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     public static Tables of(Iterable<CFMetaData> tables)
1:6e1033b:     {
1:6e1033b:         return builder().add(tables).build();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     public Iterator<CFMetaData> iterator()
1:6e1033b:     {
1:6e1033b:         return tables.values().iterator();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     public int size()
1:6e1033b:     {
1:6e1033b:         return tables.size();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     /**
1:6e1033b:      * Get the table with the specified name
1:6e1033b:      *
1:6e1033b:      * @param name a non-qualified table name
1:6e1033b:      * @return an empty {@link Optional} if the table name is not found; a non-empty optional of {@link CFMetaData} otherwise
1:6e1033b:      */
1:6e1033b:     public Optional<CFMetaData> get(String name)
1:6e1033b:     {
1:6e1033b:         return Optional.ofNullable(tables.get(name));
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     /**
1:6e1033b:      * Get the table with the specified name
1:6e1033b:      *
1:6e1033b:      * @param name a non-qualified table name
1:6e1033b:      * @return null if the table name is not found; the found {@link CFMetaData} otherwise
1:6e1033b:      */
1:6e1033b:     @Nullable
1:6e1033b:     public CFMetaData getNullable(String name)
1:6e1033b:     {
1:6e1033b:         return tables.get(name);
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     /**
1:6e1033b:      * Create a Tables instance with the provided table added
1:6e1033b:      */
1:6e1033b:     public Tables with(CFMetaData table)
1:6e1033b:     {
1:6e1033b:         if (get(table.cfName).isPresent())
1:6e1033b:             throw new IllegalStateException(String.format("Table %s already exists", table.cfName));
1:6e1033b: 
1:6e1033b:         return builder().add(this).add(table).build();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     /**
1:6e1033b:      * Creates a Tables instance with the table with the provided name removed
1:6e1033b:      */
1:6e1033b:     public Tables without(String name)
1:6e1033b:     {
1:6e1033b:         CFMetaData table =
1:6e1033b:             get(name).orElseThrow(() -> new IllegalStateException(String.format("Table %s doesn't exists", name)));
1:6e1033b: 
1:6e1033b:         return builder().add(filter(this, t -> t != table)).build();
1:6e1033b:     }
1:6e1033b: 
1:340df43:     MapDifference<String, CFMetaData> diff(Tables other)
1:340df43:     {
1:340df43:         return Maps.difference(tables, other.tables);
1:340df43:     }
1:340df43: 
1:6e1033b:     @Override
1:6e1033b:     public boolean equals(Object o)
1:6e1033b:     {
1:6e1033b:         return this == o || (o instanceof Tables && tables.equals(((Tables) o).tables));
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     @Override
1:6e1033b:     public int hashCode()
1:6e1033b:     {
1:6e1033b:         return tables.hashCode();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     @Override
1:6e1033b:     public String toString()
1:6e1033b:     {
1:6e1033b:         return tables.values().toString();
1:6e1033b:     }
1:6e1033b: 
1:6e1033b:     public static final class Builder
1:6e1033b:     {
1:6e1033b:         final ImmutableMap.Builder<String, CFMetaData> tables = new ImmutableMap.Builder<>();
1:6e1033b: 
1:6e1033b:         private Builder()
1:6e1033b:         {
1:6e1033b:         }
1:6e1033b: 
1:6e1033b:         public Tables build()
1:6e1033b:         {
1:6e1033b:             return new Tables(this);
1:6e1033b:         }
1:6e1033b: 
1:6e1033b:         public Builder add(CFMetaData table)
1:6e1033b:         {
1:6e1033b:             tables.put(table.cfName, table);
1:6e1033b:             return this;
1:6e1033b:         }
1:6e1033b: 
1:6e1033b:         public Builder add(CFMetaData... tables)
1:6e1033b:         {
1:6e1033b:             for (CFMetaData table : tables)
1:6e1033b:                 add(table);
1:6e1033b:             return this;
1:6e1033b:         }
1:6e1033b: 
1:6e1033b:         public Builder add(Iterable<CFMetaData> tables)
1:6e1033b:         {
1:6e1033b:             tables.forEach(this::add);
1:6e1033b:             return this;
1:6e1033b:         }
1:6e1033b:     }
1:6e1033b: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:340df43
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.MapDifference;
1: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
1:     MapDifference<String, CFMetaData> diff(Tables other)
1:     {
1:         return Maps.difference(tables, other.tables);
1:     }
1: 
commit:6e1033b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.util.Iterator;
1: import java.util.Optional;
1: 
1: import javax.annotation.Nullable;
1: 
1: import com.google.common.collect.ImmutableMap;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: 
1: import static com.google.common.collect.Iterables.filter;
1: 
1: /**
1:  * An immutable container for a keyspace's Tables.
1:  */
1: public final class Tables implements Iterable<CFMetaData>
1: {
1:     private final ImmutableMap<String, CFMetaData> tables;
1: 
1:     private Tables(Builder builder)
1:     {
1:         tables = builder.tables.build();
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static Tables none()
1:     {
1:         return builder().build();
1:     }
1: 
1:     public static Tables of(CFMetaData... tables)
1:     {
1:         return builder().add(tables).build();
1:     }
1: 
1:     public static Tables of(Iterable<CFMetaData> tables)
1:     {
1:         return builder().add(tables).build();
1:     }
1: 
1:     public Iterator<CFMetaData> iterator()
1:     {
1:         return tables.values().iterator();
1:     }
1: 
1:     public int size()
1:     {
1:         return tables.size();
1:     }
1: 
1:     /**
1:      * Get the table with the specified name
1:      *
1:      * @param name a non-qualified table name
1:      * @return an empty {@link Optional} if the table name is not found; a non-empty optional of {@link CFMetaData} otherwise
1:      */
1:     public Optional<CFMetaData> get(String name)
1:     {
1:         return Optional.ofNullable(tables.get(name));
1:     }
1: 
1:     /**
1:      * Get the table with the specified name
1:      *
1:      * @param name a non-qualified table name
1:      * @return null if the table name is not found; the found {@link CFMetaData} otherwise
1:      */
1:     @Nullable
1:     public CFMetaData getNullable(String name)
1:     {
1:         return tables.get(name);
1:     }
1: 
1:     /**
1:      * Create a Tables instance with the provided table added
1:      */
1:     public Tables with(CFMetaData table)
1:     {
1:         if (get(table.cfName).isPresent())
1:             throw new IllegalStateException(String.format("Table %s already exists", table.cfName));
1: 
1:         return builder().add(this).add(table).build();
1:     }
1: 
1:     /**
1:      * Creates a Tables instance with the table with the provided name removed
1:      */
1:     public Tables without(String name)
1:     {
1:         CFMetaData table =
1:             get(name).orElseThrow(() -> new IllegalStateException(String.format("Table %s doesn't exists", name)));
1: 
1:         return builder().add(filter(this, t -> t != table)).build();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         return this == o || (o instanceof Tables && tables.equals(((Tables) o).tables));
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return tables.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return tables.values().toString();
1:     }
1: 
1:     public static final class Builder
1:     {
1:         final ImmutableMap.Builder<String, CFMetaData> tables = new ImmutableMap.Builder<>();
1: 
1:         private Builder()
1:         {
1:         }
1: 
1:         public Tables build()
1:         {
1:             return new Tables(this);
1:         }
1: 
1:         public Builder add(CFMetaData table)
1:         {
1:             tables.put(table.cfName, table);
1:             return this;
1:         }
1: 
1:         public Builder add(CFMetaData... tables)
1:         {
1:             for (CFMetaData table : tables)
1:                 add(table);
1:             return this;
1:         }
1: 
1:         public Builder add(Iterable<CFMetaData> tables)
1:         {
1:             tables.forEach(this::add);
1:             return this;
1:         }
1:     }
1: }
============================================================================