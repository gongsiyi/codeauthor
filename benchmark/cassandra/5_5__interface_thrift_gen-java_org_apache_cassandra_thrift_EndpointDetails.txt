1:b391600: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:b391600:  *
1:b391600:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:b391600:  */
1:b391600: package org.apache.cassandra.thrift;
1:b391600: /*
1:b391600:  * 
1:b391600:  * Licensed to the Apache Software Foundation (ASF) under one
1:b391600:  * or more contributor license agreements.  See the NOTICE file
1:b391600:  * distributed with this work for additional information
1:b391600:  * regarding copyright ownership.  The ASF licenses this file
1:b391600:  * to you under the Apache License, Version 2.0 (the
1:b391600:  * "License"); you may not use this file except in compliance
1:b391600:  * with the License.  You may obtain a copy of the License at
1:b391600:  * 
1:b391600:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b391600:  * 
1:b391600:  * Unless required by applicable law or agreed to in writing,
1:b391600:  * software distributed under the License is distributed on an
1:b391600:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b391600:  * KIND, either express or implied.  See the License for the
1:b391600:  * specific language governing permissions and limitations
1:b391600:  * under the License.
1:b391600:  * 
1:b391600:  */
1:b391600: 
1:b391600: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:4c4024b: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:b391600: import java.util.List;
1:b391600: import java.util.ArrayList;
1:b391600: import java.util.Map;
1:b391600: import java.util.HashMap;
1:b391600: import java.util.EnumMap;
1:b391600: import java.util.Set;
1:b391600: import java.util.HashSet;
1:b391600: import java.util.EnumSet;
1:b391600: import java.util.Collections;
1:b391600: import java.util.BitSet;
1:b391600: import java.nio.ByteBuffer;
1:b391600: import java.util.Arrays;
1:b391600: import org.slf4j.Logger;
1:b391600: import org.slf4j.LoggerFactory;
1:b391600: 
1:bffd9ea: public class EndpointDetails implements org.apache.thrift.TBase<EndpointDetails, EndpointDetails._Fields>, java.io.Serializable, Cloneable, Comparable<EndpointDetails> {
1:b391600:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EndpointDetails");
1:b391600: 
1:b391600:   private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);
1:e8fa4ae:   private static final org.apache.thrift.protocol.TField DATACENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("datacenter", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4c4024b:   private static final org.apache.thrift.protocol.TField RACK_FIELD_DESC = new org.apache.thrift.protocol.TField("rack", org.apache.thrift.protocol.TType.STRING, (short)3);
1:b391600: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new EndpointDetailsStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new EndpointDetailsTupleSchemeFactory());
1:4c4024b:   }
1:b391600: 
1:7c8c570:   public String host; // required
1:7c8c570:   public String datacenter; // required
1:b153d45:   public String rack; // optional
1:b391600: 
1:b391600:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:b391600:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:b391600:     HOST((short)1, "host"),
1:4c4024b:     DATACENTER((short)2, "datacenter"),
1:4c4024b:     RACK((short)3, "rack");
1:b391600: 
1:b391600:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:b391600: 
1:b391600:     static {
1:b391600:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:b391600:         byName.put(field.getFieldName(), field);
1:b391600:       }
1:b391600:     }
1:b391600: 
1:b391600:     /**
1:b391600:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:b391600:      */
1:b391600:     public static _Fields findByThriftId(int fieldId) {
1:b391600:       switch(fieldId) {
1:b391600:         case 1: // HOST
1:b391600:           return HOST;
1:e8fa4ae:         case 2: // DATACENTER
1:b391600:           return DATACENTER;
1:4c4024b:         case 3: // RACK
1:4c4024b:           return RACK;
1:b391600:         default:
1:b391600:           return null;
1:b391600:       }
1:b391600:     }
1:b391600: 
1:b391600:     /**
1:b391600:      * Find the _Fields constant that matches fieldId, throwing an exception
1:b391600:      * if it is not found.
1:b391600:      */
1:b391600:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:b391600:       _Fields fields = findByThriftId(fieldId);
1:b391600:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:b391600:       return fields;
1:b391600:     }
1:b391600: 
1:b391600:     /**
1:b391600:      * Find the _Fields constant that matches name, or null if its not found.
1:b391600:      */
1:b391600:     public static _Fields findByName(String name) {
1:b391600:       return byName.get(name);
1:b391600:     }
1:b391600: 
1:b391600:     private final short _thriftId;
1:b391600:     private final String _fieldName;
1:b391600: 
1:b391600:     _Fields(short thriftId, String fieldName) {
1:b391600:       _thriftId = thriftId;
1:b391600:       _fieldName = fieldName;
1:b391600:     }
1:b391600: 
1:b391600:     public short getThriftFieldId() {
1:b391600:       return _thriftId;
1:b391600:     }
1:b391600: 
1:b391600:     public String getFieldName() {
1:b391600:       return _fieldName;
1:b391600:     }
1:b391600:   }
1:b391600: 
1:b391600:   // isset id assignments
1:b153d45:   private _Fields optionals[] = {_Fields.RACK};
1:b391600:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:b391600:   static {
1:b391600:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:b391600:     tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
1:b391600:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:b391600:     tmpMap.put(_Fields.DATACENTER, new org.apache.thrift.meta_data.FieldMetaData("datacenter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
1:b391600:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:4c4024b:     tmpMap.put(_Fields.RACK, new org.apache.thrift.meta_data.FieldMetaData("rack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4c4024b:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:b391600:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:b391600:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EndpointDetails.class, metaDataMap);
1:b391600:   }
1:b391600: 
1:b391600:   public EndpointDetails() {
1:b391600:   }
1:b391600: 
1:b391600:   public EndpointDetails(
1:b391600:     String host,
1:b391600:     String datacenter)
1:b391600:   {
1:b391600:     this();
1:b391600:     this.host = host;
1:b391600:     this.datacenter = datacenter;
1:b391600:   }
1:b391600: 
1:b391600:   /**
1:b391600:    * Performs a deep copy on <i>other</i>.
1:b391600:    */
1:b391600:   public EndpointDetails(EndpointDetails other) {
1:b391600:     if (other.isSetHost()) {
1:b391600:       this.host = other.host;
1:b391600:     }
1:b391600:     if (other.isSetDatacenter()) {
1:b391600:       this.datacenter = other.datacenter;
1:b391600:     }
1:4c4024b:     if (other.isSetRack()) {
1:4c4024b:       this.rack = other.rack;
1:b391600:     }
1:4c4024b:   }
1:b391600: 
1:b391600:   public EndpointDetails deepCopy() {
1:b391600:     return new EndpointDetails(this);
1:b391600:   }
1:b391600: 
1:b391600:   @Override
1:b391600:   public void clear() {
1:b391600:     this.host = null;
1:b391600:     this.datacenter = null;
1:4c4024b:     this.rack = null;
1:b391600:   }
1:b391600: 
1:b391600:   public String getHost() {
1:b391600:     return this.host;
1:b391600:   }
1:b391600: 
1:b391600:   public EndpointDetails setHost(String host) {
1:b391600:     this.host = host;
1:b391600:     return this;
1:b391600:   }
1:b391600: 
1:b391600:   public void unsetHost() {
1:b391600:     this.host = null;
1:b391600:   }
1:b391600: 
1:b391600:   /** Returns true if field host is set (has been assigned a value) and false otherwise */
1:b391600:   public boolean isSetHost() {
1:b391600:     return this.host != null;
1:b391600:   }
1:b391600: 
1:b391600:   public void setHostIsSet(boolean value) {
1:b391600:     if (!value) {
1:b391600:       this.host = null;
1:b391600:     }
1:b391600:   }
1:b391600: 
1:b391600:   public String getDatacenter() {
1:b391600:     return this.datacenter;
1:b391600:   }
1:b391600: 
1:b391600:   public EndpointDetails setDatacenter(String datacenter) {
1:b391600:     this.datacenter = datacenter;
1:b391600:     return this;
1:b391600:   }
1:b391600: 
1:b391600:   public void unsetDatacenter() {
1:b391600:     this.datacenter = null;
1:b391600:   }
1:b391600: 
1:b391600:   /** Returns true if field datacenter is set (has been assigned a value) and false otherwise */
1:b391600:   public boolean isSetDatacenter() {
1:b391600:     return this.datacenter != null;
1:b391600:   }
1:b391600: 
1:b391600:   public void setDatacenterIsSet(boolean value) {
1:b391600:     if (!value) {
1:b391600:       this.datacenter = null;
1:b391600:     }
1:b391600:   }
1:b391600: 
1:4c4024b:   public String getRack() {
1:4c4024b:     return this.rack;
1:b391600:   }
1:b391600: 
1:4c4024b:   public EndpointDetails setRack(String rack) {
1:4c4024b:     this.rack = rack;
1:b391600:     return this;
1:b391600:   }
1:b391600: 
1:4c4024b:   public void unsetRack() {
1:4c4024b:     this.rack = null;
1:b391600:   }
1:b391600: 
1:4c4024b:   /** Returns true if field rack is set (has been assigned a value) and false otherwise */
1:4c4024b:   public boolean isSetRack() {
1:4c4024b:     return this.rack != null;
1:b391600:   }
1:b391600: 
1:4c4024b:   public void setRackIsSet(boolean value) {
1:4c4024b:     if (!value) {
1:4c4024b:       this.rack = null;
1:b391600:     }
1:b391600:   }
1:b391600: 
1:b391600:   public void setFieldValue(_Fields field, Object value) {
1:b391600:     switch (field) {
1:b391600:     case HOST:
1:b391600:       if (value == null) {
1:b391600:         unsetHost();
1:b391600:       } else {
1:b391600:         setHost((String)value);
1:b391600:       }
1:b391600:       break;
1:b391600: 
1:b391600:     case DATACENTER:
1:b391600:       if (value == null) {
1:b391600:         unsetDatacenter();
1:b391600:       } else {
1:b391600:         setDatacenter((String)value);
1:b391600:       }
1:b391600:       break;
1:b391600: 
1:4c4024b:     case RACK:
1:b391600:       if (value == null) {
1:4c4024b:         unsetRack();
1:b391600:       } else {
1:4c4024b:         setRack((String)value);
1:b391600:       }
1:b391600:       break;
1:b391600: 
1:b391600:     }
1:b391600:   }
1:b391600: 
1:b391600:   public Object getFieldValue(_Fields field) {
1:b391600:     switch (field) {
1:b391600:     case HOST:
1:b391600:       return getHost();
1:b391600: 
1:b391600:     case DATACENTER:
1:b391600:       return getDatacenter();
1:b391600: 
1:4c4024b:     case RACK:
1:4c4024b:       return getRack();
1:b391600: 
1:b391600:     }
1:b391600:     throw new IllegalStateException();
1:b391600:   }
1:b391600: 
1:b391600:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:b391600:   public boolean isSet(_Fields field) {
1:b391600:     if (field == null) {
1:b391600:       throw new IllegalArgumentException();
1:b391600:     }
1:b391600: 
1:b391600:     switch (field) {
1:b391600:     case HOST:
1:b391600:       return isSetHost();
1:b391600:     case DATACENTER:
1:b391600:       return isSetDatacenter();
1:4c4024b:     case RACK:
1:4c4024b:       return isSetRack();
1:b391600:     }
1:b391600:     throw new IllegalStateException();
1:b391600:   }
1:b391600: 
1:b391600:   @Override
1:b391600:   public boolean equals(Object that) {
1:b391600:     if (that == null)
1:b391600:       return false;
1:b391600:     if (that instanceof EndpointDetails)
1:b391600:       return this.equals((EndpointDetails)that);
1:b391600:     return false;
1:b391600:   }
1:b391600: 
1:b391600:   public boolean equals(EndpointDetails that) {
1:b391600:     if (that == null)
1:b391600:       return false;
1:b391600: 
1:b391600:     boolean this_present_host = true && this.isSetHost();
1:b391600:     boolean that_present_host = true && that.isSetHost();
1:b391600:     if (this_present_host || that_present_host) {
1:b391600:       if (!(this_present_host && that_present_host))
1:b391600:         return false;
1:b391600:       if (!this.host.equals(that.host))
1:b391600:         return false;
1:b391600:     }
1:b391600: 
1:b391600:     boolean this_present_datacenter = true && this.isSetDatacenter();
1:b391600:     boolean that_present_datacenter = true && that.isSetDatacenter();
1:b391600:     if (this_present_datacenter || that_present_datacenter) {
1:b391600:       if (!(this_present_datacenter && that_present_datacenter))
1:b391600:         return false;
1:b391600:       if (!this.datacenter.equals(that.datacenter))
1:b391600:         return false;
1:b391600:     }
1:b391600: 
1:4c4024b:     boolean this_present_rack = true && this.isSetRack();
1:4c4024b:     boolean that_present_rack = true && that.isSetRack();
1:4c4024b:     if (this_present_rack || that_present_rack) {
1:4c4024b:       if (!(this_present_rack && that_present_rack))
1:b391600:         return false;
1:4c4024b:       if (!this.rack.equals(that.rack))
1:b391600:         return false;
1:b391600:     }
1:b391600: 
1:b391600:     return true;
1:b391600:   }
1:b391600: 
1:b391600:   @Override
1:b391600:   public int hashCode() {
1:b391600:     HashCodeBuilder builder = new HashCodeBuilder();
1:b391600: 
1:b391600:     boolean present_host = true && (isSetHost());
1:b391600:     builder.append(present_host);
1:b391600:     if (present_host)
1:b391600:       builder.append(host);
1:b391600: 
1:b391600:     boolean present_datacenter = true && (isSetDatacenter());
1:b391600:     builder.append(present_datacenter);
1:b391600:     if (present_datacenter)
1:b391600:       builder.append(datacenter);
1:b391600: 
1:4c4024b:     boolean present_rack = true && (isSetRack());
1:4c4024b:     builder.append(present_rack);
1:4c4024b:     if (present_rack)
1:4c4024b:       builder.append(rack);
1:b391600: 
1:b391600:     return builder.toHashCode();
1:b391600:   }
1:b391600: 
1:bffd9ea:   @Override
1:b391600:   public int compareTo(EndpointDetails other) {
1:b391600:     if (!getClass().equals(other.getClass())) {
1:b391600:       return getClass().getName().compareTo(other.getClass().getName());
1:b391600:     }
1:b391600: 
1:b391600:     int lastComparison = 0;
1:b391600: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
1:b391600:     if (lastComparison != 0) {
1:b391600:       return lastComparison;
1:b391600:     }
1:b391600:     if (isSetHost()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
1:b391600:       if (lastComparison != 0) {
1:b391600:         return lastComparison;
1:b391600:       }
1:b391600:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetDatacenter()).compareTo(other.isSetDatacenter());
1:b391600:     if (lastComparison != 0) {
1:b391600:       return lastComparison;
1:b391600:     }
1:b391600:     if (isSetDatacenter()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacenter, other.datacenter);
1:b391600:       if (lastComparison != 0) {
1:b391600:         return lastComparison;
1:b391600:       }
1:b391600:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetRack()).compareTo(other.isSetRack());
1:b391600:     if (lastComparison != 0) {
1:b391600:       return lastComparison;
1:b391600:     }
1:4c4024b:     if (isSetRack()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rack, other.rack);
1:b391600:       if (lastComparison != 0) {
1:b391600:         return lastComparison;
1:b391600:       }
1:b391600:     }
1:b391600:     return 0;
1:b391600:   }
1:b391600: 
1:b391600:   public _Fields fieldForId(int fieldId) {
1:b391600:     return _Fields.findByThriftId(fieldId);
1:b391600:   }
1:b391600: 
1:b391600:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:b391600:   }
1:b391600: 
1:b391600:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:b391600:   }
1:b391600: 
1:b391600:   @Override
1:b391600:   public String toString() {
1:b391600:     StringBuilder sb = new StringBuilder("EndpointDetails(");
1:b391600:     boolean first = true;
1:b391600: 
1:b391600:     sb.append("host:");
1:b391600:     if (this.host == null) {
1:b391600:       sb.append("null");
1:b391600:     } else {
1:b391600:       sb.append(this.host);
1:b391600:     }
1:b391600:     first = false;
1:b391600:     if (!first) sb.append(", ");
1:b391600:     sb.append("datacenter:");
1:b391600:     if (this.datacenter == null) {
1:b391600:       sb.append("null");
1:b391600:     } else {
1:b391600:       sb.append(this.datacenter);
1:b391600:     }
1:b391600:     first = false;
1:4c4024b:     if (isSetRack()) {
1:b391600:       if (!first) sb.append(", ");
1:4c4024b:       sb.append("rack:");
1:4c4024b:       if (this.rack == null) {
1:4c4024b:         sb.append("null");
1:b391600:       } else {
1:4c4024b:         sb.append(this.rack);
1:b391600:       }
1:b391600:       first = false;
1:b391600:     }
1:b391600:     sb.append(")");
1:b391600:     return sb.toString();
1:b391600:   }
1:b391600: 
1:b391600:   public void validate() throws org.apache.thrift.TException {
1:b391600:     // check for required fields
1:b153d45:     // check for sub-struct validity
1:b391600:   }
1:b391600: 
1:b391600:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:b391600:     try {
1:b391600:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:b391600:     } catch (org.apache.thrift.TException te) {
1:b391600:       throw new java.io.IOException(te);
1:b391600:     }
1:b391600:   }
1:4c4024b: 
1:b391600:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:b391600:     try {
1:b391600:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:b391600:     } catch (org.apache.thrift.TException te) {
1:b391600:       throw new java.io.IOException(te);
1:b391600:     }
1:4c4024b:   }
1:4c4024b: 
1:b153d45:   private static class EndpointDetailsStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public EndpointDetailsStandardScheme getScheme() {
1:b153d45:       return new EndpointDetailsStandardScheme();
1:4c4024b:     }
1:4c4024b:   }
1:4c4024b: 
1:b153d45:   private static class EndpointDetailsStandardScheme extends StandardScheme<EndpointDetails> {
1:4c4024b: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, EndpointDetails struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b391600:       iprot.readStructBegin();
1:b391600:       while (true)
1:b391600:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b391600:           break;
1:4c4024b:         }
1:b153d45:         switch (schemeField.id) {
1:b391600:           case 1: // HOST
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.host = iprot.readString();
1:b153d45:               struct.setHostIsSet(true);
1:b391600:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:4c4024b:             }
1:b391600:             break;
1:e8fa4ae:           case 2: // DATACENTER
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.datacenter = iprot.readString();
1:b153d45:               struct.setDatacenterIsSet(true);
1:b391600:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:4c4024b:             }
1:b391600:             break;
1:4c4024b:           case 3: // RACK
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.rack = iprot.readString();
1:b153d45:               struct.setRackIsSet(true);
1:4c4024b:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:4c4024b:             }
1:b391600:             break;
1:b391600:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:4c4024b:         }
1:b391600:         iprot.readFieldEnd();
1:4c4024b:       }
1:b391600:       iprot.readStructEnd();
1:4c4024b: 
1:b391600:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:4c4024b:     }
1:4c4024b: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, EndpointDetails struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:4c4024b: 
1:b391600:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.host != null) {
1:b391600:         oprot.writeFieldBegin(HOST_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.host);
1:b391600:         oprot.writeFieldEnd();
1:4c4024b:       }
1:b153d45:       if (struct.datacenter != null) {
1:b391600:         oprot.writeFieldBegin(DATACENTER_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.datacenter);
1:b391600:         oprot.writeFieldEnd();
1:4c4024b:       }
1:b153d45:       if (struct.rack != null) {
1:b153d45:         if (struct.isSetRack()) {
1:4c4024b:           oprot.writeFieldBegin(RACK_FIELD_DESC);
1:b153d45:           oprot.writeString(struct.rack);
1:b391600:           oprot.writeFieldEnd();
1:4c4024b:         }
1:4c4024b:       }
1:b391600:       oprot.writeFieldStop();
1:b391600:       oprot.writeStructEnd();
1:b391600:     }
1:b391600: 
1:b391600:   }
1:b391600: 
1:b153d45:   private static class EndpointDetailsTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public EndpointDetailsTupleScheme getScheme() {
1:b153d45:       return new EndpointDetailsTupleScheme();
1:b391600:     }
1:b391600:   }
1:b391600: 
1:b153d45:   private static class EndpointDetailsTupleScheme extends TupleScheme<EndpointDetails> {
1:b391600: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, EndpointDetails struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetHost()) {
1:b153d45:         optionals.set(0);
1:b391600:       }
1:b153d45:       if (struct.isSetDatacenter()) {
1:b153d45:         optionals.set(1);
1:b391600:       }
1:b153d45:       if (struct.isSetRack()) {
1:b153d45:         optionals.set(2);
1:b391600:       }
1:b153d45:       oprot.writeBitSet(optionals, 3);
1:b153d45:       if (struct.isSetHost()) {
1:b153d45:         oprot.writeString(struct.host);
1:4c4024b:       }
1:b153d45:       if (struct.isSetDatacenter()) {
1:b153d45:         oprot.writeString(struct.datacenter);
1:b153d45:       }
1:b153d45:       if (struct.isSetRack()) {
1:b153d45:         oprot.writeString(struct.rack);
22:b153d45:       }
1:b153d45:     }
1:b391600: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, EndpointDetails struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       BitSet incoming = iprot.readBitSet(3);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.host = iprot.readString();
1:b153d45:         struct.setHostIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.datacenter = iprot.readString();
1:b153d45:         struct.setDatacenterIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         struct.rack = iprot.readString();
1:b153d45:         struct.setRackIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:4c4024b: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class EndpointDetails implements org.apache.thrift.TBase<EndpointDetails, EndpointDetails._Fields>, java.io.Serializable, Cloneable, Comparable<EndpointDetails> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
1:     lastComparison = Boolean.valueOf(isSetDatacenter()).compareTo(other.isSetDatacenter());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacenter, other.datacenter);
1:     lastComparison = Boolean.valueOf(isSetRack()).compareTo(other.isSetRack());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rack, other.rack);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:b391600
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class EndpointDetails implements org.apache.thrift.TBase<EndpointDetails, EndpointDetails._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EndpointDetails");
1: 
1:   private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);
0:   private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
0:   private static final org.apache.thrift.protocol.TField DATACENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("datacenter", org.apache.thrift.protocol.TType.STRING, (short)3);
1: 
0:   public String host;
0:   public int port;
0:   public String datacenter;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     HOST((short)1, "host"),
0:     PORT((short)2, "port"),
0:     DATACENTER((short)3, "datacenter");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // HOST
1:           return HOST;
0:         case 2: // PORT
0:           return PORT;
0:         case 3: // DATACENTER
1:           return DATACENTER;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
0:   private static final int __PORT_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
0:     tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     tmpMap.put(_Fields.DATACENTER, new org.apache.thrift.meta_data.FieldMetaData("datacenter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EndpointDetails.class, metaDataMap);
1:   }
1: 
1:   public EndpointDetails() {
1:   }
1: 
1:   public EndpointDetails(
1:     String host,
0:     int port,
1:     String datacenter)
1:   {
1:     this();
1:     this.host = host;
0:     this.port = port;
0:     setPortIsSet(true);
1:     this.datacenter = datacenter;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public EndpointDetails(EndpointDetails other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetHost()) {
1:       this.host = other.host;
1:     }
0:     this.port = other.port;
1:     if (other.isSetDatacenter()) {
1:       this.datacenter = other.datacenter;
1:     }
1:   }
1: 
1:   public EndpointDetails deepCopy() {
1:     return new EndpointDetails(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.host = null;
0:     setPortIsSet(false);
0:     this.port = 0;
1:     this.datacenter = null;
1:   }
1: 
1:   public String getHost() {
1:     return this.host;
1:   }
1: 
1:   public EndpointDetails setHost(String host) {
1:     this.host = host;
1:     return this;
1:   }
1: 
1:   public void unsetHost() {
1:     this.host = null;
1:   }
1: 
1:   /** Returns true if field host is set (has been assigned a value) and false otherwise */
1:   public boolean isSetHost() {
1:     return this.host != null;
1:   }
1: 
1:   public void setHostIsSet(boolean value) {
1:     if (!value) {
1:       this.host = null;
1:     }
1:   }
1: 
0:   public int getPort() {
0:     return this.port;
1:   }
1: 
0:   public EndpointDetails setPort(int port) {
0:     this.port = port;
0:     setPortIsSet(true);
1:     return this;
1:   }
1: 
0:   public void unsetPort() {
0:     __isset_bit_vector.clear(__PORT_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field port is set (has been assigned a value) and false otherwise */
0:   public boolean isSetPort() {
0:     return __isset_bit_vector.get(__PORT_ISSET_ID);
1:   }
1: 
0:   public void setPortIsSet(boolean value) {
0:     __isset_bit_vector.set(__PORT_ISSET_ID, value);
1:   }
1: 
1:   public String getDatacenter() {
1:     return this.datacenter;
1:   }
1: 
1:   public EndpointDetails setDatacenter(String datacenter) {
1:     this.datacenter = datacenter;
1:     return this;
1:   }
1: 
1:   public void unsetDatacenter() {
1:     this.datacenter = null;
1:   }
1: 
1:   /** Returns true if field datacenter is set (has been assigned a value) and false otherwise */
1:   public boolean isSetDatacenter() {
1:     return this.datacenter != null;
1:   }
1: 
1:   public void setDatacenterIsSet(boolean value) {
1:     if (!value) {
1:       this.datacenter = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case HOST:
1:       if (value == null) {
1:         unsetHost();
1:       } else {
1:         setHost((String)value);
1:       }
1:       break;
1: 
0:     case PORT:
1:       if (value == null) {
0:         unsetPort();
1:       } else {
0:         setPort((Integer)value);
1:       }
1:       break;
1: 
1:     case DATACENTER:
1:       if (value == null) {
1:         unsetDatacenter();
1:       } else {
1:         setDatacenter((String)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case HOST:
1:       return getHost();
1: 
0:     case PORT:
0:       return new Integer(getPort());
1: 
1:     case DATACENTER:
1:       return getDatacenter();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case HOST:
1:       return isSetHost();
0:     case PORT:
0:       return isSetPort();
1:     case DATACENTER:
1:       return isSetDatacenter();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof EndpointDetails)
1:       return this.equals((EndpointDetails)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(EndpointDetails that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_host = true && this.isSetHost();
1:     boolean that_present_host = true && that.isSetHost();
1:     if (this_present_host || that_present_host) {
1:       if (!(this_present_host && that_present_host))
1:         return false;
1:       if (!this.host.equals(that.host))
1:         return false;
1:     }
1: 
0:     boolean this_present_port = true;
0:     boolean that_present_port = true;
0:     if (this_present_port || that_present_port) {
0:       if (!(this_present_port && that_present_port))
1:         return false;
0:       if (this.port != that.port)
1:         return false;
1:     }
1: 
1:     boolean this_present_datacenter = true && this.isSetDatacenter();
1:     boolean that_present_datacenter = true && that.isSetDatacenter();
1:     if (this_present_datacenter || that_present_datacenter) {
1:       if (!(this_present_datacenter && that_present_datacenter))
1:         return false;
1:       if (!this.datacenter.equals(that.datacenter))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_host = true && (isSetHost());
1:     builder.append(present_host);
1:     if (present_host)
1:       builder.append(host);
1: 
0:     boolean present_port = true;
0:     builder.append(present_port);
0:     if (present_port)
0:       builder.append(port);
1: 
1:     boolean present_datacenter = true && (isSetDatacenter());
1:     builder.append(present_datacenter);
1:     if (present_datacenter)
1:       builder.append(datacenter);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(EndpointDetails other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     EndpointDetails typedOther = (EndpointDetails)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetHost()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetPort()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetDatacenter()).compareTo(typedOther.isSetDatacenter());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetDatacenter()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacenter, typedOther.datacenter);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // HOST
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.host = iprot.readString();
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         case 2: // PORT
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             this.port = iprot.readI32();
0:             setPortIsSet(true);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         case 3: // DATACENTER
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.datacenter = iprot.readString();
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:       }
1:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.host != null) {
1:       oprot.writeFieldBegin(HOST_FIELD_DESC);
0:       oprot.writeString(this.host);
1:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldBegin(PORT_FIELD_DESC);
0:     oprot.writeI32(this.port);
1:     oprot.writeFieldEnd();
0:     if (this.datacenter != null) {
1:       oprot.writeFieldBegin(DATACENTER_FIELD_DESC);
0:       oprot.writeString(this.datacenter);
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("EndpointDetails(");
1:     boolean first = true;
1: 
1:     sb.append("host:");
1:     if (this.host == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.host);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
0:     sb.append("port:");
0:     sb.append(this.port);
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("datacenter:");
1:     if (this.datacenter == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.datacenter);
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
commit:4c4024b
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField RACK_FIELD_DESC = new org.apache.thrift.protocol.TField("rack", org.apache.thrift.protocol.TType.STRING, (short)3);
0:   public String rack;
1:     DATACENTER((short)2, "datacenter"),
1:     RACK((short)3, "rack");
/////////////////////////////////////////////////////////////////////////
1:         case 3: // RACK
1:           return RACK;
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.RACK, new org.apache.thrift.meta_data.FieldMetaData("rack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetRack()) {
1:       this.rack = other.rack;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     this.rack = null;
/////////////////////////////////////////////////////////////////////////
1:   public String getRack() {
1:     return this.rack;
1:   }
1: 
1:   public EndpointDetails setRack(String rack) {
1:     this.rack = rack;
0:     return this;
1:   }
1: 
1:   public void unsetRack() {
1:     this.rack = null;
1:   }
1: 
1:   /** Returns true if field rack is set (has been assigned a value) and false otherwise */
1:   public boolean isSetRack() {
1:     return this.rack != null;
1:   }
1: 
1:   public void setRackIsSet(boolean value) {
1:     if (!value) {
1:       this.rack = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case RACK:
0:       if (value == null) {
1:         unsetRack();
1:       } else {
1:         setRack((String)value);
1:       }
0:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case RACK:
1:       return getRack();
1: 
/////////////////////////////////////////////////////////////////////////
1:     case RACK:
1:       return isSetRack();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_rack = true && this.isSetRack();
1:     boolean that_present_rack = true && that.isSetRack();
1:     if (this_present_rack || that_present_rack) {
1:       if (!(this_present_rack && that_present_rack))
0:         return false;
1:       if (!this.rack.equals(that.rack))
0:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_rack = true && (isSetRack());
1:     builder.append(present_rack);
1:     if (present_rack)
1:       builder.append(rack);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetRack()).compareTo(typedOther.isSetRack());
0:     if (lastComparison != 0) {
0:       return lastComparison;
1:     }
1:     if (isSetRack()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rack, typedOther.rack);
0:       if (lastComparison != 0) {
0:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 3: // RACK
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.rack = iprot.readString();
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (this.rack != null) {
1:       if (isSetRack()) {
1:         oprot.writeFieldBegin(RACK_FIELD_DESC);
0:         oprot.writeString(this.rack);
0:         oprot.writeFieldEnd();
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetRack()) {
0:       if (!first) sb.append(", ");
1:       sb.append("rack:");
1:       if (this.rack == null) {
1:         sb.append("null");
0:       } else {
1:         sb.append(this.rack);
1:       }
0:       first = false;
1:     }
commit:e8fa4ae
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField DATACENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("datacenter", org.apache.thrift.protocol.TType.STRING, (short)2);
0:     DATACENTER((short)2, "datacenter");
/////////////////////////////////////////////////////////////////////////
1:         case 2: // DATACENTER
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         case 2: // DATACENTER
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new EndpointDetailsStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new EndpointDetailsTupleSchemeFactory());
1:   }
0: 
1:   public String rack; // optional
/////////////////////////////////////////////////////////////////////////
1:   private _Fields optionals[] = {_Fields.RACK};
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class EndpointDetailsStandardSchemeFactory implements SchemeFactory {
1:     public EndpointDetailsStandardScheme getScheme() {
1:       return new EndpointDetailsStandardScheme();
1:     }
1:   }
0: 
1:   private static class EndpointDetailsStandardScheme extends StandardScheme<EndpointDetails> {
0: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, EndpointDetails struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // HOST
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.host = iprot.readString();
1:               struct.setHostIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // DATACENTER
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.datacenter = iprot.readString();
1:               struct.setDatacenterIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 3: // RACK
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.rack = iprot.readString();
1:               struct.setRackIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
0: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, EndpointDetails struct) throws org.apache.thrift.TException {
1:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.host != null) {
0:         oprot.writeFieldBegin(HOST_FIELD_DESC);
1:         oprot.writeString(struct.host);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.datacenter != null) {
0:         oprot.writeFieldBegin(DATACENTER_FIELD_DESC);
1:         oprot.writeString(struct.datacenter);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.rack != null) {
1:         if (struct.isSetRack()) {
0:           oprot.writeFieldBegin(RACK_FIELD_DESC);
1:           oprot.writeString(struct.rack);
0:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
0: 
1:   }
0: 
1:   private static class EndpointDetailsTupleSchemeFactory implements SchemeFactory {
1:     public EndpointDetailsTupleScheme getScheme() {
1:       return new EndpointDetailsTupleScheme();
1:     }
1:   }
0: 
1:   private static class EndpointDetailsTupleScheme extends TupleScheme<EndpointDetails> {
0: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, EndpointDetails struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetHost()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetDatacenter()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetRack()) {
1:         optionals.set(2);
1:       }
1:       oprot.writeBitSet(optionals, 3);
1:       if (struct.isSetHost()) {
1:         oprot.writeString(struct.host);
1:       }
1:       if (struct.isSetDatacenter()) {
1:         oprot.writeString(struct.datacenter);
1:       }
1:       if (struct.isSetRack()) {
1:         oprot.writeString(struct.rack);
1:       }
1:     }
0: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, EndpointDetails struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       BitSet incoming = iprot.readBitSet(3);
1:       if (incoming.get(0)) {
1:         struct.host = iprot.readString();
1:         struct.setHostIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.datacenter = iprot.readString();
1:         struct.setDatacenterIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         struct.rack = iprot.readString();
1:         struct.setRackIsSet(true);
1:       }
1:     }
1:   }
0: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public String host; // required
1:   public String datacenter; // required
0:   public String rack; // required
============================================================================