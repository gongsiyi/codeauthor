1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.memory;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.*;
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1:72790dc: import org.apache.cassandra.index.sasi.utils.TypeUtil;
1:7d857b4: import org.apache.cassandra.utils.*;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: public class IndexMemtable
1:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(IndexMemtable.class);
1:72790dc: 
1:72790dc:     private final MemIndex index;
1:72790dc: 
1:72790dc:     public IndexMemtable(ColumnIndex columnIndex)
1:72790dc:     {
1:72790dc:         this.index = MemIndex.forColumn(columnIndex.keyValidator(), columnIndex);
1:72790dc:     }
1:72790dc: 
1:7d857b4:     public long index(RowKey key, ByteBuffer value)
1:72790dc:     {
1:72790dc:         if (value == null || value.remaining() == 0)
1:72790dc:             return 0;
1:72790dc: 
1:72790dc:         AbstractType<?> validator = index.columnIndex.getValidator();
1:72790dc:         if (!TypeUtil.isValid(value, validator))
1:72790dc:         {
1:72790dc:             int size = value.remaining();
1:72790dc:             if ((value = TypeUtil.tryUpcast(value, validator)) == null)
1:72790dc:             {
1:db68ac9:                 logger.error("Can't add column {} to index for key: {}, value size {}, validator: {}.",
1:72790dc:                              index.columnIndex.getColumnName(),
1:7d857b4:                              index.columnIndex.keyValidator().getString(key.decoratedKey.getKey()),
1:db68ac9:                              FBUtilities.prettyPrintMemory(size),
1:72790dc:                              validator);
1:72790dc:                 return 0;
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         return index.add(key, value);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public RangeIterator<Long, Token> search(Expression expression)
1:72790dc:     {
1:72790dc:         return index == null ? null : index.search(expression);
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.*;
1: import org.apache.cassandra.utils.*;
/////////////////////////////////////////////////////////////////////////
1:     public long index(RowKey key, ByteBuffer value)
/////////////////////////////////////////////////////////////////////////
1:                              index.columnIndex.keyValidator().getString(key.decoratedKey.getKey()),
author:Giampaolo Trapasso
-------------------------------------------------------------------------------
commit:db68ac9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:                 logger.error("Can't add column {} to index for key: {}, value size {}, validator: {}.",
1:                              FBUtilities.prettyPrintMemory(size),
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.memory;
1: 
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1: import org.apache.cassandra.index.sasi.utils.TypeUtil;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class IndexMemtable
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(IndexMemtable.class);
1: 
1:     private final MemIndex index;
1: 
1:     public IndexMemtable(ColumnIndex columnIndex)
1:     {
1:         this.index = MemIndex.forColumn(columnIndex.keyValidator(), columnIndex);
1:     }
1: 
0:     public long index(DecoratedKey key, ByteBuffer value)
1:     {
1:         if (value == null || value.remaining() == 0)
1:             return 0;
1: 
1:         AbstractType<?> validator = index.columnIndex.getValidator();
1:         if (!TypeUtil.isValid(value, validator))
1:         {
1:             int size = value.remaining();
1:             if ((value = TypeUtil.tryUpcast(value, validator)) == null)
1:             {
0:                 logger.error("Can't add column {} to index for key: {}, value size {} bytes, validator: {}.",
1:                              index.columnIndex.getColumnName(),
0:                              index.columnIndex.keyValidator().getString(key.getKey()),
0:                              size,
1:                              validator);
1:                 return 0;
1:             }
1:         }
1: 
1:         return index.add(key, value);
1:     }
1: 
1:     public RangeIterator<Long, Token> search(Expression expression)
1:     {
1:         return index == null ? null : index.search(expression);
1:     }
1: }
============================================================================