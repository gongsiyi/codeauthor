1:04afa2b: /*
1:04afa2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:04afa2b:  * or more contributor license agreements.  See the NOTICE file
1:04afa2b:  * distributed with this work for additional information
1:04afa2b:  * regarding copyright ownership.  The ASF licenses this file
1:04afa2b:  * to you under the Apache License, Version 2.0 (the
1:04afa2b:  * "License"); you may not use this file except in compliance
1:04afa2b:  * with the License.  You may obtain a copy of the License at
1:04afa2b:  *
1:04afa2b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:04afa2b:  *
1:04afa2b:  * Unless required by applicable law or agreed to in writing, software
1:04afa2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04afa2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04afa2b:  * See the License for the specific language governing permissions and
1:04afa2b:  * limitations under the License.
1:04afa2b:  */
1:04afa2b: package org.apache.cassandra.metrics;
1:04afa2b: 
1:04afa2b: import java.net.InetAddress;
1:04afa2b: import java.util.concurrent.ConcurrentHashMap;
1:04afa2b: import java.util.concurrent.TimeUnit;
1:04afa2b: 
1:04afa2b: import org.apache.cassandra.config.DatabaseDescriptor;
1:04afa2b: import org.slf4j.Logger;
1:04afa2b: import org.slf4j.LoggerFactory;
1:04afa2b: 
1:04afa2b: import com.codahale.metrics.Timer;
1:04afa2b: 
1:04afa2b: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:04afa2b: 
1:04afa2b: /**
1:04afa2b:  * Metrics for messages
1:04afa2b:  */
1:04afa2b: public class MessagingMetrics
1:04afa2b: {
1:04afa2b:     private static Logger logger = LoggerFactory.getLogger(MessagingMetrics.class);
1:04afa2b:     private static final MetricNameFactory factory = new DefaultNameFactory("Messaging");
1:04afa2b:     public final Timer crossNodeLatency;
1:04afa2b:     public final ConcurrentHashMap<String, Timer> dcLatency;
1:04afa2b: 
1:04afa2b:     public MessagingMetrics()
1:04afa2b:     {
1:04afa2b:         crossNodeLatency = Metrics.timer(factory.createMetricName("CrossNodeLatency"));
1:04afa2b:         dcLatency = new ConcurrentHashMap<>();
1:04afa2b:     }
1:04afa2b: 
1:04afa2b:     public void addTimeTaken(InetAddress from, long timeTaken)
1:04afa2b:     {
1:04afa2b:         String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(from);
1:04afa2b:         Timer timer = dcLatency.get(dc);
1:04afa2b:         if (timer == null)
1:04afa2b:         {
1:04afa2b:             timer = dcLatency.computeIfAbsent(dc, k -> Metrics.timer(factory.createMetricName(dc + "-Latency")));
1:04afa2b:         }
1:04afa2b:         timer.update(timeTaken, TimeUnit.MILLISECONDS);
1:04afa2b:         crossNodeLatency.update(timeTaken, TimeUnit.MILLISECONDS);
1:04afa2b:     }
1:04afa2b: }
============================================================================
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:04afa2b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import java.net.InetAddress;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import com.codahale.metrics.Timer;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
1: /**
1:  * Metrics for messages
1:  */
1: public class MessagingMetrics
1: {
1:     private static Logger logger = LoggerFactory.getLogger(MessagingMetrics.class);
1:     private static final MetricNameFactory factory = new DefaultNameFactory("Messaging");
1:     public final Timer crossNodeLatency;
1:     public final ConcurrentHashMap<String, Timer> dcLatency;
1: 
1:     public MessagingMetrics()
1:     {
1:         crossNodeLatency = Metrics.timer(factory.createMetricName("CrossNodeLatency"));
1:         dcLatency = new ConcurrentHashMap<>();
1:     }
1: 
1:     public void addTimeTaken(InetAddress from, long timeTaken)
1:     {
1:         String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(from);
1:         Timer timer = dcLatency.get(dc);
1:         if (timer == null)
1:         {
1:             timer = dcLatency.computeIfAbsent(dc, k -> Metrics.timer(factory.createMetricName(dc + "-Latency")));
1:         }
1:         timer.update(timeTaken, TimeUnit.MILLISECONDS);
1:         crossNodeLatency.update(timeTaken, TimeUnit.MILLISECONDS);
1:     }
1: }
============================================================================