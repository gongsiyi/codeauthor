1:07cf56f: /*
1:0c84342:  * Licensed to the Apache Software Foundation (ASF) under one
1:0c84342:  * or more contributor license agreements.  See the NOTICE file
1:0c84342:  * distributed with this work for additional information
1:0c84342:  * regarding copyright ownership.  The ASF licenses this file
1:0c84342:  * to you under the Apache License, Version 2.0 (the
1:0c84342:  * "License"); you may not use this file except in compliance
1:0c84342:  * with the License.  You may obtain a copy of the License at
1:0c84342:  *
1:0c84342:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0c84342:  *
1:0c84342:  * Unless required by applicable law or agreed to in writing, software
1:0c84342:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0c84342:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0c84342:  * See the License for the specific language governing permissions and
1:0c84342:  * limitations under the License.
1:cb00345:  */
1:3c4687c: package org.apache.cassandra.db.compaction;
1:f5236e4: 
1:beac419: import java.util.List;
1:c0af7f6: import java.util.Map;
1:a2b1278: import javax.management.openmbean.TabularData;
1:cb00345: 
1:0c84342: public interface CompactionManagerMBean
1:0c84342: {
1:beac419:     /** List of running compaction objects. */
1:c0af7f6:     public List<Map<String, String>> getCompactions();
3:b2b057f: 
1:beac419:     /** List of running compaction summary strings. */
1:beac419:     public List<String> getCompactionSummary();
1:b2b057f: 
1:a2b1278:     /** compaction history **/
1:a2b1278:     public TabularData getCompactionHistory();
1:a2b1278: 
1:f5236e4:     /**
1:f5236e4:      * Triggers the compaction of user specified sstables.
1:59af0b9:      * You can specify files from various keyspaces and columnfamilies.
1:59af0b9:      * If you do so, user defined compaction is performed several times to the groups of files
1:59af0b9:      * in the same keyspace/columnfamily.
1:f5236e4:      *
1:d13a996:      * @param dataFiles a comma separated list of sstable file to compact.
1:d13a996:      *                  must contain keyspace and columnfamily name in path(for 2.1+) or file name itself.
1:f5236e4:      */
1:59af0b9:     public void forceUserDefinedCompaction(String dataFiles);
1:b81927a: 
1:b81927a:     /**
1:cae3950:      * Triggers the cleanup of user specified sstables.
1:cae3950:      * You can specify files from various keyspaces and columnfamilies.
1:cae3950:      * If you do so, cleanup is performed each file individually
1:cae3950:      *
1:cae3950:      * @param dataFiles a comma separated list of sstable file to cleanup.
1:cae3950:      *                  must contain keyspace and columnfamily name in path(for 2.1+) or file name itself.
1:cae3950:      */
1:cae3950:     public void forceUserDefinedCleanup(String dataFiles);
1:cae3950: 
1:cae3950: 
1:cae3950:     /**
1:5fc19f4:      * Stop all running compaction-like tasks having the provided {@code type}.
1:5fc19f4:      * @param type the type of compaction to stop. Can be one of:
1:5fc19f4:      *   - COMPACTION
1:5fc19f4:      *   - VALIDATION
1:5fc19f4:      *   - CLEANUP
1:5fc19f4:      *   - SCRUB
1:5fc19f4:      *   - INDEX_BUILD
1:b81927a:      */
1:5fc19f4:     public void stopCompaction(String type);
1:8219195: 
1:8219195:     /**
1:e194fe9:      * Stop an individual running compaction using the compactionId.
1:e194fe9:      * @param compactionId Compaction ID of compaction to stop. Such IDs can be found in
1:5726625:      *                     the transaction log files whose name starts with compaction_,
1:5726625:      *                     located in the table transactions folder.
1:e194fe9:      */
1:e194fe9:     public void stopCompactionById(String compactionId);
1:e194fe9: 
1:e194fe9:     /**
1:8219195:      * Returns core size of compaction thread pool
1:8219195:      */
1:8219195:     public int getCoreCompactorThreads();
1:8219195: 
1:8219195:     /**
1:8219195:      * Allows user to resize maximum size of the compaction thread pool.
1:8219195:      * @param number New maximum of compaction threads
1:8219195:      */
1:8219195:     public void setCoreCompactorThreads(int number);
1:8219195: 
1:8219195:     /**
1:8219195:      * Returns maximum size of compaction thread pool
1:8219195:      */
1:8219195:     public int getMaximumCompactorThreads();
1:8219195: 
1:8219195:     /**
1:8219195:      * Allows user to resize maximum size of the compaction thread pool.
1:8219195:      * @param number New maximum of compaction threads
1:8219195:      */
1:8219195:     public void setMaximumCompactorThreads(int number);
1:8219195: 
1:8219195:     /**
1:8219195:      * Returns core size of validation thread pool
1:8219195:      */
1:8219195:     public int getCoreValidationThreads();
1:8219195: 
1:8219195:     /**
1:8219195:      * Allows user to resize maximum size of the compaction thread pool.
1:8219195:      * @param number New maximum of compaction threads
1:8219195:      */
1:8219195:     public void setCoreValidationThreads(int number);
1:8219195: 
1:8219195:     /**
1:8219195:      * Returns size of validator thread pool
1:8219195:      */
1:8219195:     public int getMaximumValidatorThreads();
1:8219195: 
1:8219195:     /**
1:8219195:      * Allows user to resize maximum size of the validator thread pool.
1:8219195:      * @param number New maximum of validator threads
1:8219195:      */
1:8219195:     public void setMaximumValidatorThreads(int number);
1:0c84342: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:9981316
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.cassandra.metrics.CompactionMetrics#bytesCompacted
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:cae3950
/////////////////////////////////////////////////////////////////////////
1:      * Triggers the cleanup of user specified sstables.
1:      * You can specify files from various keyspaces and columnfamilies.
1:      * If you do so, cleanup is performed each file individually
1:      *
1:      * @param dataFiles a comma separated list of sstable file to cleanup.
1:      *                  must contain keyspace and columnfamily name in path(for 2.1+) or file name itself.
1:      */
1:     public void forceUserDefinedCleanup(String dataFiles);
1: 
1: 
1:     /**
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:5726625
/////////////////////////////////////////////////////////////////////////
1:      *                     the transaction log files whose name starts with compaction_,
1:      *                     located in the table transactions folder.
author:Lyuben Todorov
-------------------------------------------------------------------------------
commit:e194fe9
/////////////////////////////////////////////////////////////////////////
0: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:      * Stop an individual running compaction using the compactionId.
1:      * @param compactionId Compaction ID of compaction to stop. Such IDs can be found in
0:      *                     the compactions_in_progress table of the system keyspace.
1:      */
1:     public void stopCompactionById(String compactionId);
1: 
1:     /**
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:d13a996
/////////////////////////////////////////////////////////////////////////
1:      * @param dataFiles a comma separated list of sstable file to compact.
1:      *                  must contain keyspace and columnfamily name in path(for 2.1+) or file name itself.
commit:59af0b9
/////////////////////////////////////////////////////////////////////////
1:      * You can specify files from various keyspaces and columnfamilies.
1:      * If you do so, user defined compaction is performed several times to the groups of files
1:      * in the same keyspace/columnfamily.
1:     public void forceUserDefinedCompaction(String dataFiles);
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.cassandra.metrics.CompactionMetrics#pendingTasks
0:     @Deprecated
0:      * @see org.apache.cassandra.metrics.CompactionMetrics#completedTasks
0:     @Deprecated
0:      * @see org.apache.cassandra.metrics.CompactionMetrics#totalBytesCompacted
0:     @Deprecated
0:      * @see org.apache.cassandra.metrics.CompactionMetrics#totalCompactionsCompleted
0:     @Deprecated
author:lantao yan
-------------------------------------------------------------------------------
commit:a2b1278
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.TabularData;
/////////////////////////////////////////////////////////////////////////
1:     /** compaction history **/
1:     public TabularData getCompactionHistory();
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8219195
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns core size of compaction thread pool
1:      */
1:     public int getCoreCompactorThreads();
1: 
1:     /**
1:      * Allows user to resize maximum size of the compaction thread pool.
1:      * @param number New maximum of compaction threads
1:      */
1:     public void setCoreCompactorThreads(int number);
1: 
1:     /**
1:      * Returns maximum size of compaction thread pool
1:      */
1:     public int getMaximumCompactorThreads();
1: 
1:     /**
1:      * Allows user to resize maximum size of the compaction thread pool.
1:      * @param number New maximum of compaction threads
1:      */
1:     public void setMaximumCompactorThreads(int number);
1: 
1:     /**
1:      * Returns core size of validation thread pool
1:      */
1:     public int getCoreValidationThreads();
1: 
1:     /**
1:      * Allows user to resize maximum size of the compaction thread pool.
1:      * @param number New maximum of compaction threads
1:      */
1:     public void setCoreValidationThreads(int number);
1: 
1:     /**
1:      * Returns size of validator thread pool
1:      */
1:     public int getMaximumValidatorThreads();
1: 
1:     /**
1:      * Allows user to resize maximum size of the validator thread pool.
1:      * @param number New maximum of validator threads
1:      */
1:     public void setMaximumValidatorThreads(int number);
commit:c0af7f6
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
1: import java.util.Map;
1:     public List<Map<String, String>> getCompactions();
commit:a95bd46
/////////////////////////////////////////////////////////////////////////
commit:3c4687c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.compaction;
commit:f5236e4
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Triggers the compaction of user specified sstables.
1:      *
0:      * @param ksname the keyspace for the sstables to compact
0:      * @param dataFiles a comma separated list of sstable filename to compact
1:      */
0:     public void forceUserDefinedCompaction(String ksname, String dataFiles);
commit:b81927a
/////////////////////////////////////////////////////////////////////////
0:      * @return the type of compaction operation currently in progress; null if none
1:      */
0:     public String getCompactionType();
1: 
1:     /**
commit:267c76a
/////////////////////////////////////////////////////////////////////////
commit:cb00345
/////////////////////////////////////////////////////////////////////////
1: 
0:     /**
0:      * @return number of completed compactions since server [re]start
1:      */
0:     public long getCompletedTasks();
commit:b2b057f
/////////////////////////////////////////////////////////////////////////
1: 
0:     /**
0:      * @return the columnfamily currently being compacted; null if none
0:      */
0:     public String getColumnFamilyInProgress();
1: 
0:     /**
0:      * @return the total (data, not including index and filter) bytes being compacted; null if none
0:      */
0:     public Long getBytesTotalInProgress();
1: 
0:     /**
0:      * @return the progress on the current compaction; null if none
0:      */
0:     public Long getBytesCompacted();
1: 
0:     /**
0:      * @return estimated number of compactions remaining to perform
0:      */
0:     public int getPendingTasks();
commit:0c84342
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.db;
0: 
1: public interface CompactionManagerMBean
1: {    
0:     /**
0:      * Gets the minimum number of sstables in queue before compaction kicks off
0:      */
0:     public int getMinimumCompactionThreshold();
0: 
0:     /**
0:      * Sets the minimum number of sstables in queue before compaction kicks off
0:      */
0:     public void setMinimumCompactionThreshold(int threshold);
0: 
0:     /**
0:      * Gets the maximum number of sstables in queue before compaction kicks off
0:      */
0:     public int getMaximumCompactionThreshold();
0: 
0:     /**
0:      * Sets the maximum number of sstables in queue before compaction kicks off
0:      */
0:     public void setMaximumCompactionThreshold(int threshold);
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:abf0d99
commit:f11e4f2
/////////////////////////////////////////////////////////////////////////
0:      * @return total number of bytes compacted since server [re]start
0:      */
0:     public long getTotalBytesCompacted();
0: 
0:     /**
0:      * @return total number of compactions since server [re]start
0:      */
0:     public long getTotalCompactionsCompleted();
0: 
0:     /**
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:5fc19f4
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * Stop all running compaction-like tasks having the provided {@code type}.
1:      * @param type the type of compaction to stop. Can be one of:
1:      *   - COMPACTION
1:      *   - VALIDATION
0:      *   - KEY_CACHE_SAVE
0:      *   - ROW_CACHE_SAVE
1:      *   - CLEANUP
1:      *   - SCRUB
1:      *   - INDEX_BUILD
0:      */
1:     public void stopCompaction(String type);
commit:beac419
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
0: 
0: import org.apache.cassandra.io.CompactionInfo;
0: 
0: {
1:     /** List of running compaction objects. */
0:     public List<CompactionInfo> getCompactions();
1:     /** List of running compaction summary strings. */
1:     public List<String> getCompactionSummary();
============================================================================