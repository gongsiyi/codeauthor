1:07cf56f: /*
1:8142a2f:  * Licensed to the Apache Software Foundation (ASF) under one
1:8142a2f:  * or more contributor license agreements.  See the NOTICE file
1:8142a2f:  * distributed with this work for additional information
1:8142a2f:  * regarding copyright ownership.  The ASF licenses this file
1:8142a2f:  * to you under the Apache License, Version 2.0 (the
1:8142a2f:  * "License"); you may not use this file except in compliance
1:8142a2f:  * with the License.  You may obtain a copy of the License at
1:8142a2f:  *
1:8142a2f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8142a2f:  *
1:8142a2f:  * Unless required by applicable law or agreed to in writing, software
1:8142a2f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8142a2f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8142a2f:  * See the License for the specific language governing permissions and
1:8142a2f:  * limitations under the License.
1:8142a2f:  */
1:8142a2f: package org.apache.cassandra.service;
3:8142a2f: 
1:debb15e: import org.slf4j.Logger;
1:debb15e: import org.slf4j.LoggerFactory;
1:debb15e: 
1:8142a2f: import org.apache.cassandra.db.SnapshotCommand;
1:0e96e58: import org.apache.cassandra.db.Keyspace;
1:8142a2f: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:8142a2f: import org.apache.cassandra.net.MessagingService;
1:5d46a01: 
1:a06be23: public class SnapshotVerbHandler implements IVerbHandler<SnapshotCommand>
3:8142a2f: {
1:8142a2f:     private static final Logger logger = LoggerFactory.getLogger(SnapshotVerbHandler.class);
1:debb15e: 
1:1936648:     public void doVerb(MessageIn<SnapshotCommand> message, int id)
1:8142a2f:     {
1:debb15e:         SnapshotCommand command = message.payload;
1:debb15e:         if (command.clear_snapshot)
1:6b6139c:         {
1:6b6139c:             Keyspace.clearSnapshot(command.snapshot_name, command.keyspace);
1:6b6139c:         }
1:debb15e:         else
1:0e96e58:             Keyspace.open(command.keyspace).getColumnFamilyStore(command.column_family).snapshot(command.snapshot_name);
1:c202418:         logger.debug("Enqueuing response to snapshot request {} to {}", command.snapshot_name, message.from);
1:c202418:         MessagingService.instance().sendReply(new MessageOut(MessagingService.Verb.INTERNAL_RESPONSE), id, message.from);
3:8142a2f:     }
1:8142a2f: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6b6139c
/////////////////////////////////////////////////////////////////////////
1:         {
1:             Keyspace.clearSnapshot(command.snapshot_name, command.keyspace);
1:         }
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn<SnapshotCommand> message, int id)
commit:6adf52c
/////////////////////////////////////////////////////////////////////////
0:         logger.debug("Enqueuing response to snapshot request {} to {} ", command.snapshot_name, message.from);
commit:debb15e
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         SnapshotCommand command = message.payload;
1:         if (command.clear_snapshot)
0:             Table.open(command.keyspace).clearSnapshot(command.snapshot_name);
1:         else
0:             Table.open(command.keyspace).getColumnFamilyStore(command.column_family).snapshot(command.snapshot_name);
0:         if (logger.isDebugEnabled())
0:             logger.debug("Sending response to snapshot request {} to {} ", command.snapshot_name, message.from);
0:         MessagingService.instance().sendReply(new MessageOut(MessagingService.Verb.REQUEST_RESPONSE), id, message.from);
commit:a06be23
/////////////////////////////////////////////////////////////////////////
1: public class SnapshotVerbHandler implements IVerbHandler<SnapshotCommand>
0:     public void doVerb(MessageIn<SnapshotCommand> message, String id)
0:             SnapshotCommand command = message.payload;
0:                 logger.debug("Sending response to snapshot request {} to {} ", command.snapshot_name, message.from);
0:             MessagingService.instance().sendReply(new MessageOut(MessagingService.Verb.REQUEST_RESPONSE), id, message.from);
commit:021ec71
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendReply(new MessageOut(MessagingService.Verb.REQUEST_RESPONSE), id, message.getFrom());
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
1: 
0:     public void doVerb(MessageIn message, String id)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageOut;
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendReply(new MessageOut(StorageService.Verb.REQUEST_RESPONSE), id, message.getFrom());
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:1a80a43
commit:c202418
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         logger.debug("Enqueuing response to snapshot request {} to {}", command.snapshot_name, message.from);
1:         MessagingService.instance().sendReply(new MessageOut(MessagingService.Verb.INTERNAL_RESPONSE), id, message.from);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
0:             Keyspace.open(command.keyspace).clearSnapshot(command.snapshot_name);
1:             Keyspace.open(command.keyspace).getColumnFamilyStore(command.column_family).snapshot(command.snapshot_name);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d7ff10d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.tracing.Tracing;
/////////////////////////////////////////////////////////////////////////
0:         Tracing.trace("Enqueuing response to snapshot request {} to {}", command.snapshot_name, message.from);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:             Message response = message.getReply(FBUtilities.getBroadcastAddress(), new byte[0], MessagingService.current_version);
commit:8142a2f
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.service;
1: 
1: import org.apache.cassandra.db.SnapshotCommand;
0: import org.apache.cassandra.db.Table;
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: public class SnapshotVerbHandler implements IVerbHandler
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(SnapshotVerbHandler.class);
0:     public void doVerb(Message message, String id)
1:     {
0:         try
1:         {
0:             SnapshotCommand command = SnapshotCommand.read(message);
0:             if (command.clear_snapshot)
0:                 Table.open(command.keyspace).clearSnapshot(command.snapshot_name);
0:             else
0:                 Table.open(command.keyspace).getColumnFamilyStore(command.column_family).snapshot(command.snapshot_name);
0:             Message response = message.getReply(FBUtilities.getBroadcastAddress(), new byte[0], MessagingService.version_);
0:             if (logger.isDebugEnabled())
0:                 logger.debug("Sending response to snapshot request {} to {} ", command.snapshot_name, message.getFrom());
0:             MessagingService.instance().sendReply(response, id, message.getFrom());
1:         }
0:         catch (Exception ex)
1:         {
0:             throw new RuntimeException(ex);
1:         }
1:     }
1: }
============================================================================