1:714c423: /*
1:714c423:  * Licensed to the Apache Software Foundation (ASF) under one
1:714c423:  * or more contributor license agreements.  See the NOTICE file
1:714c423:  * distributed with this work for additional information
1:714c423:  * regarding copyright ownership.  The ASF licenses this file
1:714c423:  * to you under the Apache License, Version 2.0 (the
1:714c423:  * "License"); you may not use this file except in compliance
1:714c423:  * with the License.  You may obtain a copy of the License at
1:714c423:  *
1:714c423:  *     http://www.apache.org/licenses/LICENSE-2.0
1:714c423:  *
1:714c423:  * Unless required by applicable law or agreed to in writing, software
1:714c423:  * distributed under the License is distributed on an "AS IS" BASIS,
1:714c423:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:714c423:  * See the License for the specific language governing permissions and
1:714c423:  * limitations under the License.
1:714c423:  */
1:714c423: package org.apache.cassandra.db;
1:714c423: 
1:714c423: import com.google.common.base.Objects;
1:714c423: 
1:714c423: import org.apache.cassandra.cache.IMeasurableMemory;
1:714c423: import org.apache.cassandra.utils.ObjectSizes;
1:714c423: 
1:714c423: public class ClockAndCount implements IMeasurableMemory
1:714c423: {
1:4b54b8a: 
1:4b54b8a:     private static final long EMPTY_SIZE = ObjectSizes.measure(new ClockAndCount(0, 0));
1:4b54b8a: 
1:714c423:     public static ClockAndCount BLANK = ClockAndCount.create(0L, 0L);
1:714c423: 
1:714c423:     public final long clock;
1:714c423:     public final long count;
1:714c423: 
1:714c423:     private ClockAndCount(long clock, long count)
1:714c423:     {
1:714c423:         this.clock = clock;
1:714c423:         this.count = count;
1:714c423:     }
1:714c423: 
1:714c423:     public static ClockAndCount create(long clock, long count)
1:714c423:     {
1:714c423:         return new ClockAndCount(clock, count);
1:714c423:     }
1:714c423: 
1:4b54b8a:     public long unsharedHeapSize()
1:714c423:     {
1:4b54b8a:         return EMPTY_SIZE;
1:714c423:     }
1:714c423: 
1:714c423:     @Override
1:714c423:     public boolean equals(Object o)
1:714c423:     {
1:714c423:         if (this == o)
1:714c423:             return true;
1:714c423: 
1:714c423:         if (!(o instanceof ClockAndCount))
1:714c423:             return false;
1:714c423: 
1:714c423:         ClockAndCount other = (ClockAndCount) o;
1:714c423:         return clock == other.clock && count == other.count;
1:714c423:     }
1:714c423: 
1:714c423:     @Override
1:714c423:     public int hashCode()
1:714c423:     {
1:714c423:         return Objects.hashCode(clock, count);
1:714c423:     }
1:714c423: 
1:714c423:     @Override
1:714c423:     public String toString()
1:714c423:     {
1:714c423:         return String.format("ClockAndCount(%s,%s)", clock, count);
1:714c423:     }
1:714c423: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new ClockAndCount(0, 0));
1: 
/////////////////////////////////////////////////////////////////////////
1:     public long unsharedHeapSize()
1:         return EMPTY_SIZE;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:714c423
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.cache.IMeasurableMemory;
1: import org.apache.cassandra.utils.ObjectSizes;
1: 
1: public class ClockAndCount implements IMeasurableMemory
1: {
1:     public static ClockAndCount BLANK = ClockAndCount.create(0L, 0L);
1: 
1:     public final long clock;
1:     public final long count;
1: 
1:     private ClockAndCount(long clock, long count)
1:     {
1:         this.clock = clock;
1:         this.count = count;
1:     }
1: 
1:     public static ClockAndCount create(long clock, long count)
1:     {
1:         return new ClockAndCount(clock, count);
1:     }
1: 
0:     public long memorySize()
1:     {
0:         return ObjectSizes.getFieldSize(TypeSizes.NATIVE.sizeof(clock))
0:              + ObjectSizes.getFieldSize(TypeSizes.NATIVE.sizeof(count));
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof ClockAndCount))
1:             return false;
1: 
1:         ClockAndCount other = (ClockAndCount) o;
1:         return clock == other.clock && count == other.count;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(clock, count);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("ClockAndCount(%s,%s)", clock, count);
1:     }
1: }
============================================================================