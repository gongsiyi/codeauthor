1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.filter;
5:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: import java.util.List;
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.partitions.CachedPartition;
1:a991b64: import org.apache.cassandra.db.partitions.Partition;
1:6094974: import org.apache.cassandra.db.transform.Transformation;
1:a991b64: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:2457599: import org.apache.cassandra.io.util.DataInputPlus;
1:a991b64: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * A filter over a single partition.
1:a991b64:  */
1:a991b64: public class ClusteringIndexSliceFilter extends AbstractClusteringIndexFilter
5:a991b64: {
1:a991b64:     static final InternalDeserializer deserializer = new SliceDeserializer();
1:a991b64: 
1:a991b64:     private final Slices slices;
1:a991b64: 
1:a991b64:     public ClusteringIndexSliceFilter(Slices slices, boolean reversed)
1:a991b64:     {
1:a991b64:         super(reversed);
1:a991b64:         this.slices = slices;
5:a991b64:     }
1:2457599: 
1:a991b64:     public Slices requestedSlices()
1:a991b64:     {
1:a991b64:         return slices;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean selectsAllPartition()
1:a991b64:     {
1:a991b64:         return slices.size() == 1 && !slices.hasLowerBound() && !slices.hasUpperBound();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean selects(Clustering clustering)
1:a991b64:     {
1:a991b64:         return slices.selects(clustering);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public ClusteringIndexSliceFilter forPaging(ClusteringComparator comparator, Clustering lastReturned, boolean inclusive)
1:a991b64:     {
1:a991b64:         Slices newSlices = slices.forPaging(comparator, lastReturned, inclusive, reversed);
1:a991b64:         return slices == newSlices
1:a991b64:              ? this
1:a991b64:              : new ClusteringIndexSliceFilter(newSlices, reversed);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isFullyCoveredBy(CachedPartition partition)
1:a991b64:     {
1:a991b64:         // Partition is guaranteed to cover the whole filter if it includes the filter start and finish bounds.
1:a991b64: 
1:a991b64:         // (note that since partition is the head of a partition, to have no lower bound is ok)
1:a991b64:         if (!slices.hasUpperBound() || partition.isEmpty())
1:a991b64:             return false;
1:a991b64: 
1:a991b64:         return partition.metadata().comparator.compare(slices.get(slices.size() - 1).end(), partition.lastRow().clustering()) <= 0;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isHeadFilter()
1:a991b64:     {
1:a991b64:         return !reversed && slices.size() == 1 && !slices.hasLowerBound();
1:a991b64:     }
1:a991b64: 
1:a991b64:     // Given another iterator, only return the rows that match this filter
1:a991b64:     public UnfilteredRowIterator filterNotIndexed(final ColumnFilter columnFilter, UnfilteredRowIterator iterator)
1:a991b64:     {
1:a991b64:         final Slices.InOrderTester tester = slices.inOrderTester(reversed);
1:a991b64: 
1:a991b64:         // Note that we don't filter markers because that's a bit trickier (we don't know in advance until when
1:a991b64:         // the range extend) and it's harmless to leave them.
1:6094974:         class FilterNotIndexed extends Transformation
1:2457599:         {
2:2457599:             @Override
1:6094974:             public Row applyToRow(Row row)
1:2457599:             {
1:2457599:                 return tester.includes(row.clustering()) ? row.filter(columnFilter, iterator.metadata()) : null;
1:2457599:             }
1:6094974: 
1:6094974:             @Override
1:6094974:             public Row applyToStatic(Row row)
1:6094974:             {
1:6094974:                 return columnFilter.fetchedColumns().statics.isEmpty() ? Rows.EMPTY_STATIC_ROW : row.filter(columnFilter, iterator.metadata());
1:6094974:             }
1:6094974:         }
1:6094974:         return Transformation.apply(iterator, new FilterNotIndexed());
1:2457599:     }
1:2457599: 
1:4fb559b:     public Slices getSlices(CFMetaData metadata)
1:a991b64:     {
1:4fb559b:         return slices;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public UnfilteredRowIterator getUnfilteredRowIterator(ColumnFilter columnFilter, Partition partition)
1:a991b64:     {
1:a991b64:         return partition.unfilteredIterator(columnFilter, slices, reversed);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean shouldInclude(SSTableReader sstable)
1:a991b64:     {
1:a991b64:         List<ByteBuffer> minClusteringValues = sstable.getSSTableMetadata().minClusteringValues;
1:a991b64:         List<ByteBuffer> maxClusteringValues = sstable.getSSTableMetadata().maxClusteringValues;
1:a991b64: 
1:a991b64:         if (minClusteringValues.isEmpty() || maxClusteringValues.isEmpty())
1:a991b64:             return true;
1:a991b64: 
1:a991b64:         return slices.intersects(minClusteringValues, maxClusteringValues);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public String toString(CFMetaData metadata)
1:a991b64:     {
1:a991b64:         return String.format("slice(slices=%s, reversed=%b)", slices, reversed);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public String toCQLString(CFMetaData metadata)
1:a991b64:     {
1:a991b64:         StringBuilder sb = new StringBuilder();
1:a991b64: 
1:a991b64:         if (!selectsAllPartition())
1:a991b64:             sb.append(slices.toCQLString(metadata));
1:a991b64: 
1:a991b64:         appendOrderByToCQLString(metadata, sb);
1:a991b64: 
1:a991b64:         return sb.toString();
1:a991b64:     }
1:a991b64: 
1:8c64cef:     public Kind kind()
1:a991b64:     {
1:a991b64:         return Kind.SLICE;
1:a991b64:     }
1:a991b64: 
1:a991b64:     protected void serializeInternal(DataOutputPlus out, int version) throws IOException
1:a991b64:     {
1:a991b64:         Slices.serializer.serialize(slices, out, version);
1:a991b64:     }
1:a991b64: 
1:03f72ac:     protected long serializedSizeInternal(int version)
1:a991b64:     {
1:03f72ac:         return Slices.serializer.serializedSize(slices, version);
1:a991b64:     }
1:a991b64: 
1:8c64cef:     private static class SliceDeserializer implements InternalDeserializer
1:a991b64:     {
1:2457599:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata, boolean reversed) throws IOException
1:a991b64:         {
1:a991b64:             Slices slices = Slices.serializer.deserialize(in, version, metadata);
1:a991b64:             return new ClusteringIndexSliceFilter(slices, reversed);
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:da995b7
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:4fb559b
/////////////////////////////////////////////////////////////////////////
1:     public Slices getSlices(CFMetaData metadata)
1:         return slices;
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.transform.Transformation;
/////////////////////////////////////////////////////////////////////////
1:         class FilterNotIndexed extends Transformation
0:             public boolean isDoneForPartition()
0:                 return tester.isDone();
1:             public Row applyToRow(Row row)
1: 
1:             @Override
1:             public Row applyToStatic(Row row)
1:             {
1:                 return columnFilter.fetchedColumns().statics.isEmpty() ? Rows.EMPTY_STATIC_ROW : row.filter(columnFilter, iterator.metadata());
1:             }
1:         }
1:         return Transformation.apply(iterator, new FilterNotIndexed());
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:8c64cef
/////////////////////////////////////////////////////////////////////////
1:     public Kind kind()
/////////////////////////////////////////////////////////////////////////
1:     private static class SliceDeserializer implements InternalDeserializer
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
0:         return new AlteringUnfilteredRowIterator(iterator)
1: 
1:             @Override
0:             public Row computeNextStatic(Row row)
1:             {
0:                 return columnFilter.fetchedColumns().statics.isEmpty() ? null : row.filter(columnFilter, iterator.metadata());
1:             }
1: 
1:             @Override
0:             public Row computeNext(Row row)
1:             {
1:                 return tester.includes(row.clustering()) ? row.filter(columnFilter, iterator.metadata()) : null;
1:             }
/////////////////////////////////////////////////////////////////////////
1:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata, boolean reversed) throws IOException
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.filter;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: import java.util.List;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.partitions.CachedPartition;
1: import org.apache.cassandra.db.partitions.Partition;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * A filter over a single partition.
1:  */
1: public class ClusteringIndexSliceFilter extends AbstractClusteringIndexFilter
1: {
1:     static final InternalDeserializer deserializer = new SliceDeserializer();
1: 
1:     private final Slices slices;
1: 
1:     public ClusteringIndexSliceFilter(Slices slices, boolean reversed)
1:     {
1:         super(reversed);
1:         this.slices = slices;
1:     }
1: 
1:     public Slices requestedSlices()
1:     {
1:         return slices;
1:     }
1: 
1:     public boolean selectsAllPartition()
1:     {
1:         return slices.size() == 1 && !slices.hasLowerBound() && !slices.hasUpperBound();
1:     }
1: 
1:     public boolean selects(Clustering clustering)
1:     {
1:         return slices.selects(clustering);
1:     }
1: 
1:     public ClusteringIndexSliceFilter forPaging(ClusteringComparator comparator, Clustering lastReturned, boolean inclusive)
1:     {
1:         Slices newSlices = slices.forPaging(comparator, lastReturned, inclusive, reversed);
1:         return slices == newSlices
1:              ? this
1:              : new ClusteringIndexSliceFilter(newSlices, reversed);
1:     }
1: 
1:     public boolean isFullyCoveredBy(CachedPartition partition)
1:     {
1:         // Partition is guaranteed to cover the whole filter if it includes the filter start and finish bounds.
1: 
1:         // (note that since partition is the head of a partition, to have no lower bound is ok)
1:         if (!slices.hasUpperBound() || partition.isEmpty())
1:             return false;
1: 
1:         return partition.metadata().comparator.compare(slices.get(slices.size() - 1).end(), partition.lastRow().clustering()) <= 0;
1:     }
1: 
1:     public boolean isHeadFilter()
1:     {
1:         return !reversed && slices.size() == 1 && !slices.hasLowerBound();
1:     }
1: 
1:     // Given another iterator, only return the rows that match this filter
1:     public UnfilteredRowIterator filterNotIndexed(final ColumnFilter columnFilter, UnfilteredRowIterator iterator)
1:     {
1:         final Slices.InOrderTester tester = slices.inOrderTester(reversed);
1: 
1:         // Note that we don't filter markers because that's a bit trickier (we don't know in advance until when
1:         // the range extend) and it's harmless to leave them.
0:         return new FilteringRowIterator(iterator)
1:         {
0:             @Override
0:             public FilteringRow makeRowFilter()
1:             {
0:                 return FilteringRow.columnsFilteringRow(columnFilter);
1:             }
1: 
0:             @Override
0:             protected boolean includeRow(Row row)
1:             {
0:                 return tester.includes(row.clustering());
1:             }
1: 
0:             @Override
0:             public boolean hasNext()
1:             {
0:                 return !tester.isDone() && super.hasNext();
1:             }
0:         };
1:     }
1: 
0:     public UnfilteredRowIterator filter(SliceableUnfilteredRowIterator iterator)
1:     {
0:         // Please note that this method assumes that rows from 'iter' already have their columns filtered, i.e. that
0:         // they only include columns that we select.
0:         return slices.makeSliceIterator(iterator);
1:     }
1: 
1:     public UnfilteredRowIterator getUnfilteredRowIterator(ColumnFilter columnFilter, Partition partition)
1:     {
1:         return partition.unfilteredIterator(columnFilter, slices, reversed);
1:     }
1: 
1:     public boolean shouldInclude(SSTableReader sstable)
1:     {
1:         List<ByteBuffer> minClusteringValues = sstable.getSSTableMetadata().minClusteringValues;
1:         List<ByteBuffer> maxClusteringValues = sstable.getSSTableMetadata().maxClusteringValues;
1: 
1:         if (minClusteringValues.isEmpty() || maxClusteringValues.isEmpty())
1:             return true;
1: 
1:         return slices.intersects(minClusteringValues, maxClusteringValues);
1:     }
1: 
1:     public String toString(CFMetaData metadata)
1:     {
1:         return String.format("slice(slices=%s, reversed=%b)", slices, reversed);
1:     }
1: 
1:     public String toCQLString(CFMetaData metadata)
1:     {
1:         StringBuilder sb = new StringBuilder();
1: 
1:         if (!selectsAllPartition())
1:             sb.append(slices.toCQLString(metadata));
1: 
1:         appendOrderByToCQLString(metadata, sb);
1: 
1:         return sb.toString();
1:     }
1: 
0:     Kind kind()
1:     {
1:         return Kind.SLICE;
1:     }
1: 
1:     protected void serializeInternal(DataOutputPlus out, int version) throws IOException
1:     {
1:         Slices.serializer.serialize(slices, out, version);
1:     }
1: 
0:     protected long serializedSizeInternal(int version, TypeSizes sizes)
1:     {
0:         return Slices.serializer.serializedSize(slices, version, sizes);
1:     }
1: 
0:     private static class SliceDeserializer extends InternalDeserializer
1:     {
0:         public ClusteringIndexFilter deserialize(DataInput in, int version, CFMetaData metadata, boolean reversed) throws IOException
1:         {
1:             Slices slices = Slices.serializer.deserialize(in, version, metadata);
1:             return new ClusteringIndexSliceFilter(slices, reversed);
1:         }
1:     }
1: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:     protected long serializedSizeInternal(int version)
1:         return Slices.serializer.serializedSize(slices, version);
============================================================================