1:5790b4a: /*
1:5790b4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5790b4a:  * or more contributor license agreements.  See the NOTICE file
1:5790b4a:  * distributed with this work for additional information
1:5790b4a:  * regarding copyright ownership.  The ASF licenses this file
1:5790b4a:  * to you under the Apache License, Version 2.0 (the
1:5790b4a:  * "License"); you may not use this file except in compliance
1:5790b4a:  * with the License.  You may obtain a copy of the License at
1:5790b4a:  *
1:5790b4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5790b4a:  *
1:5790b4a:  * Unless required by applicable law or agreed to in writing, software
1:5790b4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5790b4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5790b4a:  * See the License for the specific language governing permissions and
1:5790b4a:  * limitations under the License.
1:5790b4a:  */
1:5790b4a: 
1:5790b4a: package org.apache.cassandra.cql3.functions;
1:adffb36: 
1:5790b4a: import java.nio.ByteBuffer;
1:5790b4a: import java.util.List;
1:5790b4a: 
1:a76a8ef: import com.datastax.driver.core.TypeCodec;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:5790b4a: 
1:5790b4a: /**
1:5790b4a:  * Base class for all Java UDFs.
1:5790b4a:  * Used to separate internal classes like {@link UDFunction} from user provided code.
1:5790b4a:  * Only references <b>to</b> this class (and generated implementations) are allowed -
1:5790b4a:  * references from this class back to C* code are not allowed (except argument/return type information).
1:5790b4a:  */
1:5790b4a: public abstract class JavaUDF
1:5790b4a: {
1:a76a8ef:     private final TypeCodec<Object> returnCodec;
1:a76a8ef:     private final TypeCodec<Object>[] argCodecs;
1:5790b4a: 
1:5288d43:     protected final UDFContext udfContext;
1:5288d43: 
1:5288d43:     protected JavaUDF(TypeCodec<Object> returnCodec, TypeCodec<Object>[] argCodecs, UDFContext udfContext)
1:5790b4a:     {
1:a76a8ef:         this.returnCodec = returnCodec;
1:a76a8ef:         this.argCodecs = argCodecs;
1:5288d43:         this.udfContext = udfContext;
1:5790b4a:     }
1:5790b4a: 
1:e0adc16:     protected abstract ByteBuffer executeImpl(ProtocolVersion protocolVersion, List<ByteBuffer> params);
1:5790b4a: 
1:e0adc16:     protected abstract Object executeAggregateImpl(ProtocolVersion protocolVersion, Object firstParam, List<ByteBuffer> params);
1:5790b4a: 
1:e0adc16:     protected Object compose(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:a76a8ef:         return UDFunction.compose(argCodecs, protocolVersion, argIndex, value);
1:5790b4a:     }
1:5790b4a: 
1:e0adc16:     protected ByteBuffer decompose(ProtocolVersion protocolVersion, Object value)
1:5790b4a:     {
1:a76a8ef:         return UDFunction.decompose(returnCodec, protocolVersion, value);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     // do not remove - used by generated Java UDFs
1:e0adc16:     protected float compose_float(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:5790b4a:         assert value != null && value.remaining() > 0;
1:a76a8ef:         return (float) UDHelper.deserialize(TypeCodec.cfloat(), protocolVersion, value);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     // do not remove - used by generated Java UDFs
1:e0adc16:     protected double compose_double(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:5790b4a:         assert value != null && value.remaining() > 0;
1:a76a8ef:         return (double) UDHelper.deserialize(TypeCodec.cdouble(), protocolVersion, value);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     // do not remove - used by generated Java UDFs
1:e0adc16:     protected byte compose_byte(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:5790b4a:         assert value != null && value.remaining() > 0;
1:a76a8ef:         return (byte) UDHelper.deserialize(TypeCodec.tinyInt(), protocolVersion, value);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     // do not remove - used by generated Java UDFs
1:e0adc16:     protected short compose_short(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:5790b4a:         assert value != null && value.remaining() > 0;
1:a76a8ef:         return (short) UDHelper.deserialize(TypeCodec.smallInt(), protocolVersion, value);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     // do not remove - used by generated Java UDFs
1:e0adc16:     protected int compose_int(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:5790b4a:         assert value != null && value.remaining() > 0;
1:a76a8ef:         return (int) UDHelper.deserialize(TypeCodec.cint(), protocolVersion, value);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     // do not remove - used by generated Java UDFs
1:e0adc16:     protected long compose_long(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:5790b4a:         assert value != null && value.remaining() > 0;
1:a76a8ef:         return (long) UDHelper.deserialize(TypeCodec.bigint(), protocolVersion, value);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     // do not remove - used by generated Java UDFs
1:e0adc16:     protected boolean compose_boolean(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:5790b4a:     {
1:5790b4a:         assert value != null && value.remaining() > 0;
1:a76a8ef:         return (boolean) UDHelper.deserialize(TypeCodec.cboolean(), protocolVersion, value);
1:5790b4a:     }
1:5790b4a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     protected abstract ByteBuffer executeImpl(ProtocolVersion protocolVersion, List<ByteBuffer> params);
1:     protected abstract Object executeAggregateImpl(ProtocolVersion protocolVersion, Object firstParam, List<ByteBuffer> params);
1:     protected Object compose(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:     protected ByteBuffer decompose(ProtocolVersion protocolVersion, Object value)
1:     protected float compose_float(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:     protected double compose_double(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:     protected byte compose_byte(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:     protected short compose_short(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:     protected int compose_int(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:     protected long compose_long(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
1:     protected boolean compose_boolean(ProtocolVersion protocolVersion, int argIndex, ByteBuffer value)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:adffb36
/////////////////////////////////////////////////////////////////////////
0:     protected abstract Object executeAggregateImpl(int protocolVersion, Object firstParam, List<ByteBuffer> params);
1: 
commit:5288d43
/////////////////////////////////////////////////////////////////////////
1:     protected final UDFContext udfContext;
1: 
1:     protected JavaUDF(TypeCodec<Object> returnCodec, TypeCodec<Object>[] argCodecs, UDFContext udfContext)
1:         this.udfContext = udfContext;
commit:a76a8ef
/////////////////////////////////////////////////////////////////////////
1: import com.datastax.driver.core.TypeCodec;
/////////////////////////////////////////////////////////////////////////
1:     private final TypeCodec<Object> returnCodec;
1:     private final TypeCodec<Object>[] argCodecs;
0:     protected JavaUDF(TypeCodec<Object> returnCodec, TypeCodec<Object>[] argCodecs)
1:         this.returnCodec = returnCodec;
1:         this.argCodecs = argCodecs;
1:         return UDFunction.compose(argCodecs, protocolVersion, argIndex, value);
1:         return UDFunction.decompose(returnCodec, protocolVersion, value);
1:         return (float) UDHelper.deserialize(TypeCodec.cfloat(), protocolVersion, value);
1:         return (double) UDHelper.deserialize(TypeCodec.cdouble(), protocolVersion, value);
1:         return (byte) UDHelper.deserialize(TypeCodec.tinyInt(), protocolVersion, value);
1:         return (short) UDHelper.deserialize(TypeCodec.smallInt(), protocolVersion, value);
1:         return (int) UDHelper.deserialize(TypeCodec.cint(), protocolVersion, value);
1:         return (long) UDHelper.deserialize(TypeCodec.bigint(), protocolVersion, value);
1:         return (boolean) UDHelper.deserialize(TypeCodec.cboolean(), protocolVersion, value);
commit:5790b4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
0: import com.datastax.driver.core.DataType;
0: import com.datastax.driver.core.ProtocolVersion;
0: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: /**
1:  * Base class for all Java UDFs.
1:  * Used to separate internal classes like {@link UDFunction} from user provided code.
1:  * Only references <b>to</b> this class (and generated implementations) are allowed -
1:  * references from this class back to C* code are not allowed (except argument/return type information).
1:  */
1: public abstract class JavaUDF
1: {
0:     private final DataType returnDataType;
0:     private final DataType[] argDataTypes;
1: 
0:     protected JavaUDF(DataType returnDataType, DataType[] argDataTypes)
1:     {
0:         this.returnDataType = returnDataType;
0:         this.argDataTypes = argDataTypes;
1:     }
1: 
0:     protected abstract ByteBuffer executeImpl(int protocolVersion, List<ByteBuffer> params);
1: 
0:     protected Object compose(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
0:         return UDFunction.compose(argDataTypes, protocolVersion, argIndex, value);
1:     }
1: 
0:     protected ByteBuffer decompose(int protocolVersion, Object value)
1:     {
0:         return UDFunction.decompose(returnDataType, protocolVersion, value);
1:     }
1: 
1:     // do not remove - used by generated Java UDFs
0:     protected float compose_float(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
1:         assert value != null && value.remaining() > 0;
0:         return (float) DataType.cfloat().deserialize(value, ProtocolVersion.fromInt(protocolVersion));
1:     }
1: 
1:     // do not remove - used by generated Java UDFs
0:     protected double compose_double(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
1:         assert value != null && value.remaining() > 0;
0:         return (double) DataType.cdouble().deserialize(value, ProtocolVersion.fromInt(protocolVersion));
1:     }
1: 
1:     // do not remove - used by generated Java UDFs
0:     protected byte compose_byte(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
1:         assert value != null && value.remaining() > 0;
0:         return (byte) DataType.tinyint().deserialize(value, ProtocolVersion.fromInt(protocolVersion));
1:     }
1: 
1:     // do not remove - used by generated Java UDFs
0:     protected short compose_short(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
1:         assert value != null && value.remaining() > 0;
0:         return (short) DataType.smallint().deserialize(value, ProtocolVersion.fromInt(protocolVersion));
1:     }
1: 
1:     // do not remove - used by generated Java UDFs
0:     protected int compose_int(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
1:         assert value != null && value.remaining() > 0;
0:         return (int) DataType.cint().deserialize(value, ProtocolVersion.fromInt(protocolVersion));
1:     }
1: 
1:     // do not remove - used by generated Java UDFs
0:     protected long compose_long(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
1:         assert value != null && value.remaining() > 0;
0:         return (long) DataType.bigint().deserialize(value, ProtocolVersion.fromInt(protocolVersion));
1:     }
1: 
1:     // do not remove - used by generated Java UDFs
0:     protected boolean compose_boolean(int protocolVersion, int argIndex, ByteBuffer value)
1:     {
1:         assert value != null && value.remaining() > 0;
0:         return (boolean) DataType.cboolean().deserialize(value, ProtocolVersion.fromInt(protocolVersion));
1:     }
1: }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:06c130e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return (float) UDHelper.deserialize(DataType.cfloat(), protocolVersion, value);
0:         return (double) UDHelper.deserialize(DataType.cdouble(), protocolVersion, value);
0:         return (byte) UDHelper.deserialize(DataType.tinyint(), protocolVersion, value);
0:         return (short) UDHelper.deserialize(DataType.smallint(), protocolVersion, value);
0:         return (int) UDHelper.deserialize(DataType.cint(), protocolVersion, value);
0:         return (long) UDHelper.deserialize(DataType.bigint(), protocolVersion, value);
0:         return (boolean) UDHelper.deserialize(DataType.cboolean(), protocolVersion, value);
============================================================================