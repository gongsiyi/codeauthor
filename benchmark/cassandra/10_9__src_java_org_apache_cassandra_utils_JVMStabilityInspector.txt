1:1452134: /*
1:1452134:  * Licensed to the Apache Software Foundation (ASF) under one
1:1452134:  * or more contributor license agreements.  See the NOTICE file
1:1452134:  * distributed with this work for additional information
1:1452134:  * regarding copyright ownership.  The ASF licenses this file
1:1452134:  * to you under the Apache License, Version 2.0 (the
1:1452134:  * "License"); you may not use this file except in compliance
1:1452134:  * with the License.  You may obtain a copy of the License at
1:1452134:  *
1:1452134:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1452134:  *
1:1452134:  * Unless required by applicable law or agreed to in writing, software
1:1452134:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1452134:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1452134:  * See the License for the specific language governing permissions and
1:1452134:  * limitations under the License.
1:1452134:  */
1:1452134: package org.apache.cassandra.utils;
1:1452134: 
1:f25da97: import java.io.FileNotFoundException;
1:f25da97: import java.net.SocketException;
1:5790b4a: import java.util.concurrent.TimeUnit;
1:5790b4a: import java.util.concurrent.atomic.AtomicBoolean;
1:f25da97: 
1:d4df271: import com.google.common.annotations.VisibleForTesting;
1:1452134: import org.slf4j.Logger;
1:1452134: import org.slf4j.LoggerFactory;
1:d4df271: 
1:5790b4a: import org.apache.cassandra.concurrent.ScheduledExecutors;
1:d4df271: import org.apache.cassandra.config.Config;
1:d4df271: import org.apache.cassandra.config.DatabaseDescriptor;
1:d4df271: import org.apache.cassandra.io.FSError;
1:d4df271: import org.apache.cassandra.io.sstable.CorruptSSTableException;
1:1452134: import org.apache.cassandra.service.StorageService;
1:1452134: 
1:d4df271: /**
1:d4df271:  * Responsible for deciding whether to kill the JVM if it gets in an "unstable" state (think OOM).
1:d4df271:  */
1:d4df271: public final class JVMStabilityInspector
1:1452134: {
1:1452134:     private static final Logger logger = LoggerFactory.getLogger(JVMStabilityInspector.class);
1:d4df271:     private static Killer killer = new Killer();
1:d4df271: 
1:39ab9e0: 
1:d4df271:     private JVMStabilityInspector() {}
1:d4df271: 
1:1452134:     /**
1:d4df271:      * Certain Throwables and Exceptions represent "Die" conditions for the server.
1:39ab9e0:      * This recursively checks the input Throwable's cause hierarchy until null.
1:1452134:      * @param t
1:1452134:      *      The Throwable to check for server-stop conditions
1:1452134:      */
1:1452134:     public static void inspectThrowable(Throwable t)
1:1452134:     {
1:1452134:         boolean isUnstable = false;
1:1452134:         if (t instanceof OutOfMemoryError)
1:b189a7f:         {
1:1452134:             isUnstable = true;
1:b189a7f:             HeapUtils.generateHeapDump();
1:b189a7f:         }
1:d4df271: 
1:d4df271:         if (DatabaseDescriptor.getDiskFailurePolicy() == Config.DiskFailurePolicy.die)
1:d4df271:             if (t instanceof FSError || t instanceof CorruptSSTableException)
1:f25da97:             isUnstable = true;
1:f25da97: 
1:f25da97:         // Check for file handle exhaustion
1:f25da97:         if (t instanceof FileNotFoundException || t instanceof SocketException)
1:f25da97:             if (t.getMessage().contains("Too many open files"))
1:d4df271:                 isUnstable = true;
1:d4df271: 
1:1452134:         if (isUnstable)
1:d4df271:             killer.killCurrentJVM(t);
1:d4df271: 
1:39ab9e0:         if (t.getCause() != null)
1:39ab9e0:             inspectThrowable(t.getCause());
1:d4df271:     }
1:3b7934f: 
1:d4df271:     public static void inspectCommitLogThrowable(Throwable t)
1:d4df271:     {
1:2bc5f0c:         if (!StorageService.instance.isDaemonSetupCompleted())
1:1452134:         {
1:3b7934f:             logger.error("Exiting due to error while processing commit log during initialization.", t);
1:3b7934f:             killer.killCurrentJVM(t, true);
1:e31e216:         }
1:e31e216:         else if (DatabaseDescriptor.getCommitFailurePolicy() == Config.CommitFailurePolicy.die)
1:d4df271:             killer.killCurrentJVM(t);
1:d4df271:         else
1:d4df271:             inspectThrowable(t);
1:d4df271:     }
1:d4df271: 
1:1eccced:     public static void killCurrentJVM(Throwable t, boolean quiet)
1:3b7934f:     {
1:1eccced:         killer.killCurrentJVM(t, quiet);
1:1eccced:     }
1:1eccced: 
1:5790b4a:     public static void userFunctionTimeout(Throwable t)
1:5790b4a:     {
1:5790b4a:         switch (DatabaseDescriptor.getUserFunctionTimeoutPolicy())
1:5790b4a:         {
1:5790b4a:             case die:
1:5790b4a:                 // policy to give 250ms grace time to
1:5790b4a:                 ScheduledExecutors.nonPeriodicTasks.schedule(() -> killer.killCurrentJVM(t), 250, TimeUnit.MILLISECONDS);
1:5790b4a:                 break;
1:5790b4a:             case die_immediate:
1:5790b4a:                 killer.killCurrentJVM(t);
1:5790b4a:                 break;
1:5790b4a:             case ignore:
1:5790b4a:                 logger.error(t.getMessage());
1:5790b4a:                 break;
1:5790b4a:         }
1:5790b4a:     }
1:5790b4a: 
1:d4df271:     @VisibleForTesting
1:68d2526:     public static Killer replaceKiller(Killer newKiller)
1:68d2526:     {
1:d4df271:         Killer oldKiller = JVMStabilityInspector.killer;
1:d4df271:         JVMStabilityInspector.killer = newKiller;
1:d4df271:         return oldKiller;
1:d4df271:     }
1:d4df271: 
1:d4df271:     @VisibleForTesting
1:d4df271:     public static class Killer
1:d4df271:     {
1:5790b4a:         private final AtomicBoolean killing = new AtomicBoolean();
1:5790b4a: 
1:d4df271:         /**
1:d4df271:         * Certain situations represent "Die" conditions for the server, and if so, the reason is logged and the current JVM is killed.
1:d4df271:         *
1:d4df271:         * @param t
1:d4df271:         *      The Throwable to log before killing the current JVM
1:d4df271:         */
1:d4df271:         protected void killCurrentJVM(Throwable t)
1:1eccced:         {
1:1eccced:             killCurrentJVM(t, false);
1:1eccced:         }
1:1eccced: 
1:1eccced:         protected void killCurrentJVM(Throwable t, boolean quiet)
1:1eccced:         {
1:1eccced:             if (!quiet)
1:1eccced:             {
1:1452134:                 t.printStackTrace(System.err);
1:1452134:                 logger.error("JVM state determined to be unstable.  Exiting forcefully due to:", t);
1:5790b4a:             }
1:5790b4a:             if (killing.compareAndSet(false, true))
1:5790b4a:             {
1:1452134:                 StorageService.instance.removeShutdownHook();
1:1452134:                 System.exit(100);
1:1452134:             }
1:1452134:         }
1:1452134:     }
1:1eccced: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public static Killer replaceKiller(Killer newKiller)
1:     {
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1:         }
1:         else if (DatabaseDescriptor.getCommitFailurePolicy() == Config.CommitFailurePolicy.die)
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:9e5161b
commit:7480202
commit:b189a7f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         {
1:             HeapUtils.generateHeapDump();
1:         }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2bc5f0c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!StorageService.instance.isDaemonSetupCompleted())
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:cf0b737
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileNotFoundException;
1: import java.net.SocketException;
1: 
/////////////////////////////////////////////////////////////////////////
1:             isUnstable = true;
1: 
1:         // Check for file handle exhaustion
1:         if (t instanceof FileNotFoundException || t instanceof SocketException)
1:             if (t.getMessage().contains("Too many open files"))
commit:d4df271
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.io.FSError;
1: import org.apache.cassandra.io.sstable.CorruptSSTableException;
1: /**
1:  * Responsible for deciding whether to kill the JVM if it gets in an "unstable" state (think OOM).
1:  */
1: public final class JVMStabilityInspector
1:     private static Killer killer = new Killer();
1: 
1:     private JVMStabilityInspector() {}
1: 
1:      * Certain Throwables and Exceptions represent "Die" conditions for the server.
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (DatabaseDescriptor.getDiskFailurePolicy() == Config.DiskFailurePolicy.die)
1:             if (t instanceof FSError || t instanceof CorruptSSTableException)
1:                 isUnstable = true;
1: 
1:             killer.killCurrentJVM(t);
1:     }
1: 
1:     public static void inspectCommitLogThrowable(Throwable t)
1:     {
0:         if (DatabaseDescriptor.getCommitFailurePolicy() == Config.CommitFailurePolicy.die)
1:             killer.killCurrentJVM(t);
1:         else
1:             inspectThrowable(t);
1:     }
1: 
1:     @VisibleForTesting
0:     public static Killer replaceKiller(Killer newKiller) {
1:         Killer oldKiller = JVMStabilityInspector.killer;
1:         JVMStabilityInspector.killer = newKiller;
1:         return oldKiller;
1:     }
1: 
1:     @VisibleForTesting
1:     public static class Killer
1:     {
1:         /**
1:         * Certain situations represent "Die" conditions for the server, and if so, the reason is logged and the current JVM is killed.
1:         *
1:         * @param t
1:         *      The Throwable to log before killing the current JVM
1:         */
1:         protected void killCurrentJVM(Throwable t)
commit:1452134
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.apache.cassandra.service.StorageService;
1: 
0: public class JVMStabilityInspector
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(JVMStabilityInspector.class);
1:     /**
0:      * Certain Throwables and Exceptions represent "Stop" conditions for the server.
1:      * @param t
1:      *      The Throwable to check for server-stop conditions
1:      */
1:     public static void inspectThrowable(Throwable t)
1:     {
1:         boolean isUnstable = false;
1:         if (t instanceof OutOfMemoryError)
1:             isUnstable = true;
1:         if (isUnstable)
1:         {
1:             t.printStackTrace(System.err);
1:             logger.error("JVM state determined to be unstable.  Exiting forcefully due to:", t);
1:             StorageService.instance.removeShutdownHook();
1:             System.exit(100);
1:         }
1:     }
1: }
author:Paul Macintosh
-------------------------------------------------------------------------------
commit:39ab9e0
/////////////////////////////////////////////////////////////////////////
1:      * This recursively checks the input Throwable's cause hierarchy until null.
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (t.getCause() != null)
1:             inspectThrowable(t.getCause());
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e2ad7d5
author:Paulo Motta
-------------------------------------------------------------------------------
commit:3b7934f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.CassandraDaemon;
0: import org.apache.cassandra.thrift.Cassandra;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (!StorageService.instance.isSetupCompleted())
1:         {
1:             logger.error("Exiting due to error while processing commit log during initialization.", t);
1:             killer.killCurrentJVM(t, true);
0:         } else if (DatabaseDescriptor.getCommitFailurePolicy() == Config.CommitFailurePolicy.die)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:5790b4a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import org.apache.cassandra.concurrent.ScheduledExecutors;
/////////////////////////////////////////////////////////////////////////
1:     public static void userFunctionTimeout(Throwable t)
1:     {
1:         switch (DatabaseDescriptor.getUserFunctionTimeoutPolicy())
1:         {
1:             case die:
1:                 // policy to give 250ms grace time to
1:                 ScheduledExecutors.nonPeriodicTasks.schedule(() -> killer.killCurrentJVM(t), 250, TimeUnit.MILLISECONDS);
1:                 break;
1:             case die_immediate:
1:                 killer.killCurrentJVM(t);
1:                 break;
1:             case ignore:
1:                 logger.error(t.getMessage());
1:                 break;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         private final AtomicBoolean killing = new AtomicBoolean();
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (killing.compareAndSet(false, true))
1:             {
0:                 StorageService.instance.removeShutdownHook();
0:                 System.exit(100);
1:             }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:1eccced
/////////////////////////////////////////////////////////////////////////
1:     public static void killCurrentJVM(Throwable t, boolean quiet)
1:     {
1:         killer.killCurrentJVM(t, quiet);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             killCurrentJVM(t, false);
1:         }
1: 
1:         protected void killCurrentJVM(Throwable t, boolean quiet)
1:         {
1:             if (!quiet)
1:             {
0:                 t.printStackTrace(System.err);
0:                 logger.error("JVM state determined to be unstable.  Exiting forcefully due to:", t);
1:             }
============================================================================