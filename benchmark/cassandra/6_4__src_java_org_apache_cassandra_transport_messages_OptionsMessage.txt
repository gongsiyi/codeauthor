1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport.messages;
2:6d3a3ee: 
1:f171179: import java.util.ArrayList;
1:f171179: import java.util.HashMap;
1:f171179: import java.util.List;
1:f171179: import java.util.Map;
1:f171179: 
1:cbf304e: import io.netty.buffer.ByteBuf;
1:6d3a3ee: 
1:6d3a3ee: import org.apache.cassandra.cql3.QueryProcessor;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:6d3a3ee: import org.apache.cassandra.transport.FrameCompressor;
1:6d3a3ee: import org.apache.cassandra.transport.Message;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:6d3a3ee: 
1:6d3a3ee: /**
1:6d3a3ee:  * Message to indicate that the server is ready to receive requests.
1:6d3a3ee:  */
1:6d3a3ee: public class OptionsMessage extends Message.Request
2:6d3a3ee: {
1:6d3a3ee:     public static final Message.Codec<OptionsMessage> codec = new Message.Codec<OptionsMessage>()
1:6d3a3ee:     {
1:e0adc16:         public OptionsMessage decode(ByteBuf body, ProtocolVersion version)
1:6d3a3ee:         {
1:6d3a3ee:             return new OptionsMessage();
2:6d3a3ee:         }
1:f8be23a: 
1:e0adc16:         public void encode(OptionsMessage msg, ByteBuf dest, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:         }
1:6d3a3ee: 
1:e0adc16:         public int encodedSize(OptionsMessage msg, ProtocolVersion version)
1:6d3a3ee:         {
1:f8be23a:             return 0;
1:6d3a3ee:         }
1:6d3a3ee:     };
1:6d3a3ee: 
1:6d3a3ee:     public OptionsMessage()
1:6d3a3ee:     {
1:6d3a3ee:         super(Message.Type.OPTIONS);
1:6d3a3ee:     }
1:6d3a3ee: 
1:aa83c94:     public Message.Response execute(QueryState state, long queryStartNanoTime)
1:6d3a3ee:     {
1:f171179:         List<String> cqlVersions = new ArrayList<String>();
1:f171179:         cqlVersions.add(QueryProcessor.CQL_VERSION.toString());
1:f171179: 
1:f171179:         List<String> compressions = new ArrayList<String>();
1:6d3a3ee:         if (FrameCompressor.SnappyCompressor.instance != null)
1:f171179:             compressions.add("snappy");
1:4c129ae:         // LZ4 is always available since worst case scenario it default to a pure JAVA implem.
1:4c129ae:         compressions.add("lz4");
1:f171179: 
1:f171179:         Map<String, List<String>> supported = new HashMap<String, List<String>>();
1:f171179:         supported.put(StartupMessage.CQL_VERSION, cqlVersions);
1:f171179:         supported.put(StartupMessage.COMPRESSION, compressions);
1:e0adc16:         supported.put(StartupMessage.PROTOCOL_VERSIONS, ProtocolVersion.supportedVersions());
1:f171179: 
1:f171179:         return new SupportedMessage(supported);
1:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     @Override
1:6d3a3ee:     public String toString()
1:6d3a3ee:     {
1:6d3a3ee:         return "OPTIONS";
1:6d3a3ee:     }
1:6d3a3ee: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         public OptionsMessage decode(ByteBuf body, ProtocolVersion version)
1:         public void encode(OptionsMessage msg, ByteBuf dest, ProtocolVersion version)
1:         public int encodedSize(OptionsMessage msg, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:         supported.put(StartupMessage.PROTOCOL_VERSIONS, ProtocolVersion.supportedVersions());
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public Message.Response execute(QueryState state, long queryStartNanoTime)
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public OptionsMessage decode(ByteBuf body, int version)
0:         public void encode(OptionsMessage msg, ByteBuf dest, int version)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
0:         public void encode(OptionsMessage msg, ChannelBuffer dest, int version)
1:         }
1: 
0:         public int encodedSize(OptionsMessage msg, int version)
1:         {
1:             return 0;
/////////////////////////////////////////////////////////////////////////
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:4c129ae
/////////////////////////////////////////////////////////////////////////
1:         // LZ4 is always available since worst case scenario it default to a pure JAVA implem.
1:         compressions.add("lz4");
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:         public ChannelBuffer encode(OptionsMessage msg, int version)
/////////////////////////////////////////////////////////////////////////
0:         return codec.encode(this, getVersion());
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.QueryState;
/////////////////////////////////////////////////////////////////////////
0:     public Message.Response execute(QueryState state)
commit:f171179
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1:         List<String> cqlVersions = new ArrayList<String>();
1:         cqlVersions.add(QueryProcessor.CQL_VERSION.toString());
1: 
1:         List<String> compressions = new ArrayList<String>();
1:             compressions.add("snappy");
1: 
1:         Map<String, List<String>> supported = new HashMap<String, List<String>>();
1:         supported.put(StartupMessage.CQL_VERSION, cqlVersions);
1:         supported.put(StartupMessage.COMPRESSION, compressions);
1: 
1:         return new SupportedMessage(supported);
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
1: 
0: import org.jboss.netty.buffer.ChannelBuffer;
0: import org.jboss.netty.buffer.ChannelBuffers;
1: 
1: import org.apache.cassandra.cql3.QueryProcessor;
1: import org.apache.cassandra.transport.FrameCompressor;
1: import org.apache.cassandra.transport.Message;
1: 
1: /**
1:  * Message to indicate that the server is ready to receive requests.
1:  */
1: public class OptionsMessage extends Message.Request
1: {
1:     public static final Message.Codec<OptionsMessage> codec = new Message.Codec<OptionsMessage>()
1:     {
0:         public OptionsMessage decode(ChannelBuffer body)
1:         {
1:             return new OptionsMessage();
1:         }
1: 
0:         public ChannelBuffer encode(OptionsMessage msg)
1:         {
0:             return ChannelBuffers.EMPTY_BUFFER;
1:         }
1:     };
1: 
1:     public OptionsMessage()
1:     {
1:         super(Message.Type.OPTIONS);
1:     }
1: 
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
1: 
0:     public Message.Response execute()
1:     {
0:         SupportedMessage supported = new SupportedMessage();
0:         supported.cqlVersions.add(QueryProcessor.CQL_VERSION.toString());
1:         if (FrameCompressor.SnappyCompressor.instance != null)
0:             supported.compressions.add("snappy");
0:         return supported;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "OPTIONS";
1:     }
1: }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:bf2ee04
/////////////////////////////////////////////////////////////////////////
0:         public OptionsMessage decode(ChannelBuffer body, int version)
============================================================================