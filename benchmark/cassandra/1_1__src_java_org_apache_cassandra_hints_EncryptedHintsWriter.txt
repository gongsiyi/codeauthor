1:90033b9: /*
1:90033b9:  * Licensed to the Apache Software Foundation (ASF) under one
1:90033b9:  * or more contributor license agreements.  See the NOTICE file
1:90033b9:  * distributed with this work for additional information
1:90033b9:  * regarding copyright ownership.  The ASF licenses this file
1:90033b9:  * to you under the Apache License, Version 2.0 (the
1:90033b9:  * "License"); you may not use this file except in compliance
1:90033b9:  * with the License.  You may obtain a copy of the License at
1:90033b9:  *
1:90033b9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:90033b9:  *
1:90033b9:  * Unless required by applicable law or agreed to in writing, software
1:90033b9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90033b9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90033b9:  * See the License for the specific language governing permissions and
1:90033b9:  * limitations under the License.
1:90033b9:  */
1:90033b9: package org.apache.cassandra.hints;
1:90033b9: 
1:90033b9: import java.io.File;
1:90033b9: import java.io.IOException;
1:90033b9: import java.nio.ByteBuffer;
1:90033b9: import java.nio.channels.FileChannel;
1:90033b9: import java.util.zip.CRC32;
1:90033b9: import javax.crypto.Cipher;
1:90033b9: 
1:90033b9: import com.google.common.annotations.VisibleForTesting;
1:90033b9: 
1:90033b9: import org.apache.cassandra.security.EncryptionUtils;
1:90033b9: import org.apache.cassandra.io.compress.ICompressor;
1:90033b9: 
1:90033b9: import static org.apache.cassandra.utils.FBUtilities.updateChecksum;
1:90033b9: 
1:90033b9: public class EncryptedHintsWriter extends HintsWriter
1:90033b9: {
1:90033b9:     private final Cipher cipher;
1:90033b9:     private final ICompressor compressor;
1:90033b9:     private volatile ByteBuffer byteBuffer;
1:90033b9: 
1:90033b9:     protected EncryptedHintsWriter(File directory, HintsDescriptor descriptor, File file, FileChannel channel, int fd, CRC32 globalCRC)
1:90033b9:     {
1:90033b9:         super(directory, descriptor, file, channel, fd, globalCRC);
1:90033b9:         cipher = descriptor.getCipher();
1:90033b9:         compressor = descriptor.createCompressor();
1:90033b9:     }
1:90033b9: 
1:90033b9:     protected void writeBuffer(ByteBuffer input) throws IOException
1:90033b9:     {
1:90033b9:         byteBuffer = EncryptionUtils.compress(input, byteBuffer, true, compressor);
1:90033b9:         ByteBuffer output = EncryptionUtils.encryptAndWrite(byteBuffer, channel, true, cipher);
1:90033b9:         updateChecksum(globalCRC, output);
1:90033b9:     }
1:90033b9: 
1:90033b9:     @VisibleForTesting
1:90033b9:     Cipher getCipher()
1:90033b9:     {
1:90033b9:         return cipher;
1:90033b9:     }
1:90033b9: 
1:90033b9:     @VisibleForTesting
1:90033b9:     ICompressor getCompressor()
1:90033b9:     {
1:90033b9:         return compressor;
1:90033b9:     }
1:90033b9: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.util.zip.CRC32;
1: import javax.crypto.Cipher;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: import org.apache.cassandra.security.EncryptionUtils;
1: import org.apache.cassandra.io.compress.ICompressor;
1: 
1: import static org.apache.cassandra.utils.FBUtilities.updateChecksum;
1: 
1: public class EncryptedHintsWriter extends HintsWriter
1: {
1:     private final Cipher cipher;
1:     private final ICompressor compressor;
1:     private volatile ByteBuffer byteBuffer;
1: 
1:     protected EncryptedHintsWriter(File directory, HintsDescriptor descriptor, File file, FileChannel channel, int fd, CRC32 globalCRC)
1:     {
1:         super(directory, descriptor, file, channel, fd, globalCRC);
1:         cipher = descriptor.getCipher();
1:         compressor = descriptor.createCompressor();
1:     }
1: 
1:     protected void writeBuffer(ByteBuffer input) throws IOException
1:     {
1:         byteBuffer = EncryptionUtils.compress(input, byteBuffer, true, compressor);
1:         ByteBuffer output = EncryptionUtils.encryptAndWrite(byteBuffer, channel, true, cipher);
1:         updateChecksum(globalCRC, output);
1:     }
1: 
1:     @VisibleForTesting
1:     Cipher getCipher()
1:     {
1:         return cipher;
1:     }
1: 
1:     @VisibleForTesting
1:     ICompressor getCompressor()
1:     {
1:         return compressor;
1:     }
1: }
============================================================================