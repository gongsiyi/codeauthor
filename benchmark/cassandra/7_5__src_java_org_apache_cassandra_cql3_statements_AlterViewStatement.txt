1:3bdcaa3: /*
1:3bdcaa3:  * Licensed to the Apache Software Foundation (ASF) under one
1:3bdcaa3:  * or more contributor license agreements.  See the NOTICE file
1:3bdcaa3:  * distributed with this work for additional information
1:3bdcaa3:  * regarding copyright ownership.  The ASF licenses this file
1:3bdcaa3:  * to you under the Apache License, Version 2.0 (the
1:3bdcaa3:  * "License"); you may not use this file except in compliance
1:3bdcaa3:  * with the License.  You may obtain a copy of the License at
1:3bdcaa3:  *
1:3bdcaa3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3bdcaa3:  *
1:3bdcaa3:  * Unless required by applicable law or agreed to in writing, software
1:3bdcaa3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bdcaa3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bdcaa3:  * See the License for the specific language governing permissions and
1:3bdcaa3:  * limitations under the License.
1:3bdcaa3:  */
1:3bdcaa3: package org.apache.cassandra.cql3.statements;
3:3bdcaa3: 
1:3bdcaa3: import org.apache.cassandra.auth.Permission;
1:3bdcaa3: import org.apache.cassandra.config.CFMetaData;
1:a3a8dbc: import org.apache.cassandra.config.Schema;
1:a3a8dbc: import org.apache.cassandra.config.ViewDefinition;
1:3bdcaa3: import org.apache.cassandra.cql3.CFName;
1:a3a8dbc: import org.apache.cassandra.db.view.View;
1:3bdcaa3: import org.apache.cassandra.exceptions.InvalidRequestException;
1:3bdcaa3: import org.apache.cassandra.exceptions.RequestValidationException;
1:3bdcaa3: import org.apache.cassandra.exceptions.UnauthorizedException;
1:d0e8ba4: import org.apache.cassandra.schema.TableParams;
1:3bdcaa3: import org.apache.cassandra.service.ClientState;
1:3bdcaa3: import org.apache.cassandra.service.MigrationManager;
1:3bdcaa3: import org.apache.cassandra.transport.Event;
1:3bdcaa3: 
1:3bdcaa3: import static org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily;
1:3bdcaa3: 
1:a3a8dbc: public class AlterViewStatement extends SchemaAlteringStatement
1:3bdcaa3: {
1:b31845c:     private final TableAttributes attrs;
1:3bdcaa3: 
1:a3a8dbc:     public AlterViewStatement(CFName name, TableAttributes attrs)
1:3bdcaa3:     {
1:3bdcaa3:         super(name);
1:b31845c:         this.attrs = attrs;
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:3bdcaa3:     {
1:a3a8dbc:         CFMetaData baseTable = View.findBaseTable(keyspace(), columnFamily());
1:1a9286c:         if (baseTable != null)
1:1a9286c:             state.hasColumnFamilyAccess(keyspace(), baseTable.cfName, Permission.ALTER);
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     public void validate(ClientState state)
1:3bdcaa3:     {
1:3bdcaa3:         // validated in announceMigration()
1:3bdcaa3:     }
1:3bdcaa3: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
1:3bdcaa3:     {
1:3bdcaa3:         CFMetaData meta = validateColumnFamily(keyspace(), columnFamily());
1:a3a8dbc:         if (!meta.isView())
1:3bdcaa3:             throw new InvalidRequestException("Cannot use ALTER MATERIALIZED VIEW on Table");
1:3bdcaa3: 
1:106b1cd:         ViewDefinition viewCopy = Schema.instance.getView(keyspace(), columnFamily()).copy();
1:3bdcaa3: 
1:b31845c:         if (attrs == null)
1:3bdcaa3:             throw new InvalidRequestException("ALTER MATERIALIZED VIEW WITH invoked, but no parameters found");
1:3bdcaa3: 
1:b31845c:         attrs.validate();
1:3bdcaa3: 
1:106b1cd:         TableParams params = attrs.asAlteredTableParams(viewCopy.metadata.params);
1:d0e8ba4:         if (params.gcGraceSeconds == 0)
1:3bdcaa3:         {
1:d0e8ba4:             throw new InvalidRequestException("Cannot alter gc_grace_seconds of a materialized view to 0, since this " +
1:d0e8ba4:                                               "value is used to TTL undelivered updates. Setting gc_grace_seconds too " +
1:d0e8ba4:                                               "low might cause undelivered updates to expire before being replayed.");
1:3bdcaa3:         }
1:106b1cd:         viewCopy.metadata.params(params);
1:3bdcaa3: 
1:a3a8dbc:         MigrationManager.announceViewUpdate(viewCopy, isLocalOnly);
1:2cbd776:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     public String toString()
1:3bdcaa3:     {
1:a3a8dbc:         return String.format("AlterViewStatement(name=%s)", cfName);
1:3bdcaa3:     }
1:3bdcaa3: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
/////////////////////////////////////////////////////////////////////////
1:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:106b1cd
/////////////////////////////////////////////////////////////////////////
1:         ViewDefinition viewCopy = Schema.instance.getView(keyspace(), columnFamily()).copy();
1:         TableParams params = attrs.asAlteredTableParams(viewCopy.metadata.params);
1:         viewCopy.metadata.params(params);
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.config.ViewDefinition;
1: import org.apache.cassandra.db.view.View;
/////////////////////////////////////////////////////////////////////////
1: public class AlterViewStatement extends SchemaAlteringStatement
1:     public AlterViewStatement(CFName name, TableAttributes attrs)
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData baseTable = View.findBaseTable(keyspace(), columnFamily());
/////////////////////////////////////////////////////////////////////////
1:         if (!meta.isView())
0:         ViewDefinition view = Schema.instance.getView(keyspace(), columnFamily());
0:         ViewDefinition viewCopy = view.copy();
0:         TableParams params = attrs.asAlteredTableParams(view.metadata.params);
0:         view.metadata.params(params);
1:         MigrationManager.announceViewUpdate(viewCopy, isLocalOnly);
1:         return String.format("AlterViewStatement(name=%s)", cfName);
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.statements;
1: 
1: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.cql3.CFName;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.MigrationManager;
1: import org.apache.cassandra.transport.Event;
1: 
1: import static org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily;
1: 
0: public class AlterMaterializedViewStatement extends SchemaAlteringStatement
1: {
0:     private final CFPropDefs cfProps;
1: 
0:     public AlterMaterializedViewStatement(CFName name,
0:                                           CFPropDefs cfProps)
1:     {
1:         super(name);
0:         this.cfProps = cfProps;
1:     }
1: 
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:     {
0:         state.hasColumnFamilyAccess(keyspace(), columnFamily(), Permission.ALTER);
1:     }
1: 
1:     public void validate(ClientState state)
1:     {
1:         // validated in announceMigration()
1:     }
1: 
0:     public boolean announceMigration(boolean isLocalOnly) throws RequestValidationException
1:     {
1:         CFMetaData meta = validateColumnFamily(keyspace(), columnFamily());
0:         if (!meta.isMaterializedView())
1:             throw new InvalidRequestException("Cannot use ALTER MATERIALIZED VIEW on Table");
1: 
0:         CFMetaData cfm = meta.copy();
1: 
1: 
0:         if (cfProps == null)
1:             throw new InvalidRequestException("ALTER MATERIALIZED VIEW WITH invoked, but no parameters found");
1: 
0:         cfProps.validate();
1: 
0:         cfProps.applyToCFMetadata(cfm);
0:         MigrationManager.announceColumnFamilyUpdate(cfm, false, isLocalOnly);
0:         return true;
1:     }
1: 
1:     public String toString()
1:     {
0:         return String.format("AlterMaterializedViewStatement(name=%s)", cfName);
1:     }
1: 
0:     public Event.SchemaChange changeEvent()
1:     {
0:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
1:     }
1: }
author:Paulo Motta
-------------------------------------------------------------------------------
commit:d0e8ba4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.TableParams;
/////////////////////////////////////////////////////////////////////////
0: 
0:         TableParams params = attrs.asAlteredTableParams(cfm.params);
1:         if (params.gcGraceSeconds == 0)
0:         {
1:             throw new InvalidRequestException("Cannot alter gc_grace_seconds of a materialized view to 0, since this " +
1:                                               "value is used to TTL undelivered updates. Setting gc_grace_seconds too " +
1:                                               "low might cause undelivered updates to expire before being replayed.");
0:         }
0:         cfm.params(params);
commit:1a9286c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.view.MaterializedView;
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData baseTable = MaterializedView.findBaseTable(keyspace(), columnFamily());
1:         if (baseTable != null)
1:             state.hasColumnFamilyAccess(keyspace(), baseTable.cfName, Permission.ALTER);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final TableAttributes attrs;
0:     public AlterMaterializedViewStatement(CFName name, TableAttributes attrs)
1:         this.attrs = attrs;
/////////////////////////////////////////////////////////////////////////
1:         if (attrs == null)
1:         attrs.validate();
0:         cfm.params(attrs.asAlteredTableParams(cfm.params));
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3c43775
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.cql3.statements;
0: 
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.cql3.CFName;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.RequestValidationException;
0: import org.apache.cassandra.exceptions.UnauthorizedException;
0: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.service.MigrationManager;
0: import org.apache.cassandra.transport.Event;
0: 
0: import static org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily;
0: 
0: public class AlterMaterializedViewStatement extends SchemaAlteringStatement
0: {
0:     private final CFPropDefs cfProps;
0: 
0:     public AlterMaterializedViewStatement(CFName name,
0:                                           CFPropDefs cfProps)
0:     {
0:         super(name);
0:         this.cfProps = cfProps;
0:     }
0: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
0:     {
0:         state.hasColumnFamilyAccess(keyspace(), columnFamily(), Permission.ALTER);
0:     }
0: 
0:     public void validate(ClientState state)
0:     {
0:         // validated in announceMigration()
0:     }
0: 
0:     public boolean announceMigration(boolean isLocalOnly) throws RequestValidationException
0:     {
0:         CFMetaData meta = validateColumnFamily(keyspace(), columnFamily());
0:         if (!meta.isMaterializedView())
0:             throw new InvalidRequestException("Cannot use ALTER MATERIALIZED VIEW on Table");
0: 
0:         CFMetaData cfm = meta.copy();
0: 
0: 
0:         if (cfProps == null)
0:             throw new InvalidRequestException("ALTER MATERIALIZED VIEW WITH invoked, but no parameters found");
0: 
0:         cfProps.validate();
0: 
0:         cfProps.applyToCFMetadata(cfm);
0:         MigrationManager.announceColumnFamilyUpdate(cfm, false, isLocalOnly);
0:         return true;
0:     }
0: 
0:     public String toString()
0:     {
0:         return String.format("AlterMaterializedViewStatement(name=%s)", cfName);
0:     }
0: 
0:     public Event.SchemaChange changeEvent()
0:     {
0:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
0:     }
0: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
============================================================================