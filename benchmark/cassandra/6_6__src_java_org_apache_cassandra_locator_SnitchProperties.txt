1:9939458: /*
1:9939458:  * Licensed to the Apache Software Foundation (ASF) under one
1:9939458:  * or more contributor license agreements.  See the NOTICE file
1:9939458:  * distributed with this work for additional information
1:9939458:  * regarding copyright ownership.  The ASF licenses this file
1:9939458:  * to you under the Apache License, Version 2.0 (the
1:9939458:  * "License"); you may not use this file except in compliance
1:9939458:  * with the License.  You may obtain a copy of the License at
1:9939458:  *
1:9939458:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9939458:  *
1:9939458:  * Unless required by applicable law or agreed to in writing, software
1:9939458:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9939458:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9939458:  * See the License for the specific language governing permissions and
1:9939458:  * limitations under the License.
1:9939458:  */
1:9939458: package org.apache.cassandra.locator;
2:9939458: 
1:9939458: import java.io.InputStream;
1:6f91936: import java.net.URL;
1:9939458: import java.util.Properties;
1:9939458: 
1:9939458: import org.apache.cassandra.io.util.FileUtils;
1:ddab67d: import org.slf4j.Logger;
1:ddab67d: import org.slf4j.LoggerFactory;
1:9939458: 
1:9939458: public class SnitchProperties
1:9939458: {
1:456e91d:     private static final Logger logger = LoggerFactory.getLogger(SnitchProperties.class);
1:9939458:     public static final String RACKDC_PROPERTY_FILENAME = "cassandra-rackdc.properties";
1:9939458: 
1:f67b7a4:     private Properties properties;
1:f67b7a4: 
1:f67b7a4:     public SnitchProperties()
1:9939458:     {
1:6f91936:         properties = new Properties();
1:6f91936:         InputStream stream = null;
1:62af7d0:         String configURL = System.getProperty(RACKDC_PROPERTY_FILENAME);
1:9939458:         try
1:9939458:         {
1:3fb2dcd:             URL url;
1:6f91936:             if (configURL == null)
1:62af7d0:                 url = SnitchProperties.class.getClassLoader().getResource(RACKDC_PROPERTY_FILENAME);
1:68d2526:             else
1:3fb2dcd:             	url = new URL(configURL);
1:68d2526: 
1:62af7d0:             stream = url.openStream(); // catch block handles potential NPE
1:9939458:             properties.load(stream);
1:9939458:         }
1:9939458:         catch (Exception e)
1:9939458:         {
1:6f91936:             // do not throw exception here, just consider this an incomplete or an empty property file.
1:69e65be:             logger.warn("Unable to read {}", ((configURL != null) ? configURL : RACKDC_PROPERTY_FILENAME));
1:9939458:         }
1:9939458:         finally
1:9939458:         {
1:9939458:             FileUtils.closeQuietly(stream);
1:9939458:         }
1:9939458:     }
1:3fb2dcd: 
1:9939458:     /**
1:f67b7a4:      * Get a snitch property value or return defaultValue if not defined.
1:9939458:      */
1:f67b7a4:     public String get(String propertyName, String defaultValue)
1:9939458:     {
1:9939458:         return properties.getProperty(propertyName, defaultValue);
1:9939458:     }
1:7650fc1: 
1:7650fc1:     public boolean contains(String propertyName)
1:7650fc1:     {
1:7650fc1:         return properties.containsKey(propertyName);
1:7650fc1:     }
1:9939458: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:             else
1: 
commit:8f5c16c
commit:69e65be
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Unable to read {}", ((configURL != null) ? configURL : RACKDC_PROPERTY_FILENAME));
commit:38a48b1
commit:3fb2dcd
/////////////////////////////////////////////////////////////////////////
1:             URL url;
0:             else 
1:             	url = new URL(configURL);
1:             
commit:db9bc69
/////////////////////////////////////////////////////////////////////////
0:             logger.warn("Unable to read {}", RACKDC_PROPERTY_FILENAME);
commit:456e91d
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(SnitchProperties.class);
author:Stefania
-------------------------------------------------------------------------------
commit:7650fc1
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean contains(String propertyName)
1:     {
1:         return properties.containsKey(propertyName);
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:3089c92
commit:62af7d0
/////////////////////////////////////////////////////////////////////////
1:         String configURL = System.getProperty(RACKDC_PROPERTY_FILENAME);
1:                 url = SnitchProperties.class.getClassLoader().getResource(RACKDC_PROPERTY_FILENAME);
1:             stream = url.openStream(); // catch block handles potential NPE
author:Brandon Williams
-------------------------------------------------------------------------------
commit:04884eb
commit:6f91936
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1:         properties = new Properties();
1:         InputStream stream = null;
0:         String configURL = System.getProperty("cassandra.rackdc.properties");
0:             URL url = new URL(configURL);
1:             if (configURL == null)
0:                 url = SnitchProperties.class.getClassLoader().getResource(
0:                         "cassandra-rackdc.properties");
0:             stream = url.openStream();
1:             // do not throw exception here, just consider this an incomplete or an empty property file.
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:f67b7a4
/////////////////////////////////////////////////////////////////////////
1:     private Properties properties;
1: 
1:     public SnitchProperties()
0:         properties = new Properties();
/////////////////////////////////////////////////////////////////////////
1:      * Get a snitch property value or return defaultValue if not defined.
1:     public String get(String propertyName, String defaultValue)
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:ddab67d
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
commit:082ea28
/////////////////////////////////////////////////////////////////////////
0: import org.apache.log4j.Logger;
0:     private static final Logger logger = LoggerFactory.getLogger(GossipingPropertyFileSnitch.class);
/////////////////////////////////////////////////////////////////////////
0:             // do not throw exception here, just consider this a incomplete or a empty property file.
0:             logger.warn("Unable to read " + RACKDC_PROPERTY_FILENAME);
commit:9939458
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.locator;
1: 
1: import java.io.InputStream;
1: import java.util.Properties;
1: 
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: public class SnitchProperties
1: {
1:     public static final String RACKDC_PROPERTY_FILENAME = "cassandra-rackdc.properties";
0:     private static Properties properties = new Properties();
1: 
0:     static
1:     {
0:         InputStream stream = SnitchProperties.class.getClassLoader().getResourceAsStream(RACKDC_PROPERTY_FILENAME);
1:         try
1:         {
1:             properties.load(stream);
1:         }
1:         catch (Exception e)
1:         {
0:             throw new RuntimeException("Unable to read " + RACKDC_PROPERTY_FILENAME, e);
1:         }
1:         finally
1:         {
1:             FileUtils.closeQuietly(stream);
1:         }
1:     }
1: 
1:     /**
0:      * Get a snitch property value or return null if not defined.
1:      */
0:     public static String get(String propertyName, String defaultValue)
1:     {
1:         return properties.getProperty(propertyName, defaultValue);
1:     }
1: }
============================================================================