1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
1:01115f7:  */
1:01115f7: 
1:01115f7: package org.apache.cassandra.cql3.validation.entities;
1:01115f7: 
1:01115f7: import java.util.Arrays;
1:01115f7: 
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: 
1:01115f7: import static junit.framework.Assert.assertNull;
1:01115f7: import static org.junit.Assert.assertEquals;
1:01115f7: import static org.junit.Assert.assertTrue;
1:01115f7: 
1:01115f7: public class StaticColumnsTest extends CQLTester
1:01115f7: {
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.static_columns_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testStaticColumns() throws Throwable
1:01115f7:     {
1:b11fba7:         testStaticColumns(false);
1:b11fba7:         testStaticColumns(true);
1:b11fba7:     }
1:b11fba7: 
1:b11fba7:     private void testStaticColumns(boolean forceFlush) throws Throwable
1:b11fba7:     {
1:01115f7:         createTable("CREATE TABLE %s ( k int, p int, s int static, v int, PRIMARY KEY (k, p))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s(k, s) VALUES (0, 42)");
1:b11fba7:         flush(forceFlush);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"), row(0, null, 42, null));
1:01115f7: 
1:01115f7:         // Check that writetime works (//7081) -- we can't predict the exact value easily so
1:01115f7:         // we just check that it's non zero
1:01115f7:         Object[][] row = getRows(execute("SELECT s, writetime(s) FROM %s WHERE k=0"));
1:01115f7:         assertEquals(42, row[0][0]);
1:01115f7:         assertTrue((Long)row[0][1] > 0);
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, p, s, v) VALUES (0, 0, 12, 0)");
1:01115f7:         execute("INSERT INTO %s (k, p, s, v) VALUES (0, 1, 24, 1)");
1:b11fba7:         flush(forceFlush);
1:01115f7: 
1:01115f7:         // Check the static columns in indeed "static"
1:01115f7:         assertRows(execute("SELECT * FROM %s"), row(0, 0, 24, 0), row(0, 1, 24, 1));
1:01115f7: 
1:01115f7:         // Check we do correctly get the static column value with a SELECT *, even
1:01115f7:         // if we're only slicing part of the partition
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND p=0"), row(0, 0, 24, 0));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND p=1"), row(0, 1, 24, 1));
1:01115f7: 
1:01115f7:         // Test for IN on the clustering key (//6769)
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND p IN (0, 1)"), row(0, 0, 24, 0), row(0, 1, 24, 1));
1:01115f7: 
1:01115f7:         // Check things still work if we don't select the static column. We also want
1:01115f7:         // this to not request the static columns internally at all, though that part
1:01115f7:         // require debugging to assert
1:01115f7:         assertRows(execute("SELECT p, v FROM %s WHERE k=0 AND p=1"), row(1, 1));
1:01115f7: 
1:01115f7:         // Check selecting only a static column with distinct only yield one value
1:01115f7:         // (as we only query the static columns)
1:01115f7:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k=0"), row(24));
1:01115f7:         // But without DISTINCT, we still get one result per row
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k=0"),row(24),row(24));
1:01115f7:         // but that querying other columns does correctly yield the full partition
1:01115f7:         assertRows(execute("SELECT s, v FROM %s WHERE k=0"),row(24, 0),row(24, 1));
1:01115f7:         assertRows(execute("SELECT s, v FROM %s WHERE k=0 AND p=1"),row(24, 1));
1:01115f7:         assertRows(execute("SELECT p, s FROM %s WHERE k=0 AND p=1"), row(1, 24));
1:01115f7:         assertRows(execute("SELECT k, p, s FROM %s WHERE k=0 AND p=1"),row(0, 1, 24));
1:01115f7: 
1:01115f7:         // Check that deleting a row don't implicitely deletes statics
1:01115f7:         execute("DELETE FROM %s WHERE k=0 AND p=0");
1:b11fba7:         flush(forceFlush);
1:01115f7:         assertRows(execute("SELECT * FROM %s"),row(0, 1, 24, 1));
1:01115f7: 
1:01115f7:         // But that explicitely deleting the static column does remove it
1:01115f7:         execute("DELETE s FROM %s WHERE k=0");
1:b11fba7:         flush(forceFlush);
1:01115f7:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, 1));
1:01115f7: 
1:01115f7:         // Check we can add a static column ...
1:01115f7:         execute("ALTER TABLE %s ADD s2 int static");
1:01115f7:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, null, 1));
1:01115f7:         execute("INSERT INTO %s (k, p, s2, v) VALUES(0, 2, 42, 2)");
1:01115f7:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, 42, 1), row(0, 2, null, 42, 2));
1:01115f7:         // ... and that we can drop it
1:01115f7:         execute("ALTER TABLE %s DROP s2");
1:01115f7:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, 1), row(0, 2, null, 2));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.static_columns_with_2i_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testStaticColumnsWithSecondaryIndex() throws Throwable
1:01115f7:     {
1:01115f7:         createTable(" CREATE TABLE %s (k int, p int, s int static, v int, PRIMARY KEY (k, p) ) ");
1:01115f7: 
1:01115f7:         createIndex("CREATE INDEX ON %s (v)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, p, s, v) VALUES (0, 0, 42, 1)");
1:01115f7:         execute("INSERT INTO %s (k, p, v) VALUES (0, 1, 1)");
1:01115f7:         execute("INSERT INTO %s (k, p, v) VALUES (0, 2, 2)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE v = 1"), row(0, 0, 42, 1), row(0, 1, 42, 1));
1:01115f7:         assertRows(execute("SELECT p, s FROM %s WHERE v = 1"), row(0, 42), row(1, 42));
1:01115f7:         assertRows(execute("SELECT p FROM %s WHERE v = 1"), row(0), row(1));
1:01115f7:         // We don't support that
1:01115f7:         assertInvalid("SELECT s FROM %s WHERE v = 1");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.static_columns_with_distinct_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testStaticColumnsWithDistinct() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s( k int, p int, s int static, PRIMARY KEY (k, p) ) ");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, p) VALUES (1, 1)");
1:01115f7:         execute("INSERT INTO %s (k, p) VALUES (1, 2)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT k, s FROM %s"), row(1, null), row(1, null));
1:01115f7:         assertRows(execute("SELECT DISTINCT k, s FROM %s"), row(1, null));
1:01115f7: 
1:01115f7:         Object[][] rows = getRows(execute("SELECT DISTINCT s FROM %s WHERE k=1"));
1:01115f7:         assertNull(rows[0][0]);
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT DISTINCT s FROM %s WHERE k=2"));
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, p, s) VALUES (2, 1, 3)");
1:01115f7:         execute("INSERT INTO %s (k, p) VALUES (2, 2)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT k, s FROM %s"), row(1, null), row(1, null), row(2, 3), row(2, 3));
1:01115f7:         assertRows(execute("SELECT DISTINCT k, s FROM %s"), row(1, null), row(2, 3));
1:01115f7:         rows = getRows(execute("SELECT DISTINCT s FROM %s WHERE k=1"));
1:01115f7:         assertNull(rows[0][0]);
1:01115f7:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k=2"), row(3));
1:01115f7: 
1:01115f7:         assertInvalid("SELECT DISTINCT s FROM %s");
1:01115f7: 
1:01115f7:         // paging to test for CASSANDRA-8108
1:01115f7:         execute("TRUNCATE %s");
1:01115f7:         for (int i = 0; i < 10; i++)
1:01115f7:             for (int j = 0; j < 10; j++)
1:01115f7:                 execute("INSERT INTO %s (k, p, s) VALUES (?, ?, ?)", i, j, i);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s FROM %s"));
1:01115f7:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1:01115f7: 
1:01115f7:         String keys = "0, 1, 2, 3, 4, 5, 6, 7, 8, 9";
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s FROM %s WHERE k IN (" + keys + ")"));
1:01115f7:         checkDistinctRows(rows, false, 0, 10, 0, 10);
1:01115f7: 
1:01115f7:         // additional testing for CASSANRA-8087
1:01115f7:         createTable("CREATE TABLE %s( k int, c1 int, c2 int, s1 int static, s2 int static, PRIMARY KEY (k, c1, c2))");
1:01115f7: 
1:01115f7:         for (int i = 0; i < 10; i++)
1:01115f7:             for (int j = 0; j < 5; j++)
1:01115f7:                 for (int k = 0; k < 5; k++)
1:01115f7:                     execute("INSERT INTO %s (k, c1, c2, s1, s2) VALUES (?, ?, ?, ?, ?)", i, j, k, i, i + 1);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s"));
1:01115f7:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s2 FROM %s"));
1:01115f7:         checkDistinctRows(rows, true, 0, 10, 1, 11);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s LIMIT 10"));
1:01115f7:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s WHERE k IN (" + keys + ")"));
1:01115f7:         checkDistinctRows(rows, false, 0, 10, 0, 10);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s2 FROM %s WHERE k IN (" + keys + ")"));
1:01115f7:         checkDistinctRows(rows, false, 0, 10, 1, 11);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s WHERE k IN (" + keys + ")"));
1:01115f7:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1:01115f7:     }
1:01115f7: 
1:01115f7:     void checkDistinctRows(Object[][] rows, boolean sort, int... ranges)
1:01115f7:     {
1:01115f7:         assertTrue(ranges.length % 2 == 0);
1:01115f7: 
1:01115f7:         int numdim = ranges.length / 2;
1:01115f7:         int[] from = new int[numdim];
1:01115f7:         int[] to = new int[numdim];
1:01115f7: 
1:01115f7:         for (int i = 0, j = 0; i < ranges.length && j < numdim; i+= 2, j++)
1:01115f7:         {
1:01115f7:             from[j] = ranges[i];
1:01115f7:             to[j] = ranges[i+1];
1:01115f7:         }
1:01115f7: 
1:01115f7:         //sort the rows
1:01115f7:         for (int i = 0; i < numdim; i++)
1:01115f7:         {
1:01115f7:             int[] vals = new int[rows.length];
1:01115f7:             for (int j = 0; j < rows.length; j++)
1:01115f7:                 vals[j] = (Integer)rows[j][i];
1:01115f7: 
1:01115f7:             if (sort)
1:01115f7:                 Arrays.sort(vals);
1:01115f7: 
1:01115f7:             for (int j = from[i]; j < to[i]; j++)
1:01115f7:                 assertEquals(j, vals[j - from[i]]);
1:01115f7:         }
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test LIMIT when static columns are present (#6956),
1:01115f7:      * migrated from cql_tests.py:TestCQL.static_with_limit_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testStaticColumnsWithLimit() throws Throwable
1:01115f7:     {
1:01115f7:         createTable(" CREATE TABLE %s (k int, s int static, v int, PRIMARY KEY (k, v))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, s) VALUES(0, 42)");
1:01115f7:         for (int i = 0; i < 4; i++)
1:01115f7:             execute("INSERT INTO %s(k, v) VALUES(0, ?)", i);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k = 0 LIMIT 1"),
1:01115f7:                    row(0, 0, 42));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k = 0 LIMIT 2"),
1:01115f7:                    row(0, 0, 42),
1:01115f7:                    row(0, 1, 42));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k = 0 LIMIT 3"),
1:01115f7:                    row(0, 0, 42),
1:01115f7:                    row(0, 1, 42),
1:01115f7:                    row(0, 2, 42));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for bug of #7455,
1:01115f7:      * migrated from cql_tests.py:TestCQL.static_with_empty_clustering_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testStaticColumnsWithEmptyClustering() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (pkey text, ckey text, value text, static_value text static, PRIMARY KEY(pkey, ckey))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (pkey, static_value) VALUES ('partition1', 'static value')");
1:01115f7:         execute("INSERT INTO %s (pkey, ckey, value) VALUES('partition1', '', 'value')");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row("partition1", "", "static value", "value"));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.alter_clustering_and_static_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testAlterClusteringAndStatic() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (bar int, PRIMARY KEY (bar))");
1:01115f7: 
1:01115f7:         // We shouldn 't allow static when there is not clustering columns
1:01115f7:         assertInvalid("ALTER TABLE %s ADD bar2 text static");
1:01115f7:     }
1:979e559: 
1:979e559:     /**
1:979e559:      * Ensure that deleting and compacting a static row that should be purged doesn't throw.
1:979e559:      * This is a test for #11988.
1:979e559:      */
1:979e559:     @Test
1:979e559:     public void testStaticColumnPurging() throws Throwable
1:979e559:     {
1:979e559:         createTable("CREATE TABLE %s (pkey text, ckey text, value text, static_value text static, PRIMARY KEY(pkey, ckey)) WITH gc_grace_seconds = 0");
1:979e559: 
1:979e559:         execute("INSERT INTO %s (pkey, ckey, static_value, value) VALUES (?, ?, ?, ?)", "k1", "c1", "s1", "v1");
1:979e559: 
1:979e559:         flush();
1:979e559: 
1:979e559:         execute("DELETE static_value FROM %s WHERE pkey = ?", "k1");
1:979e559: 
1:979e559:         flush();
1:979e559: 
1:b66e5a1:         Thread.sleep(1000);
1:b66e5a1: 
1:979e559:         compact();
1:979e559: 
1:979e559:         assertRows(execute("SELECT * FROM %s"), row("k1", "c1", null, "v1"));
1:979e559:     }
1:01115f7: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:21c92ca
commit:b66e5a1
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(1000);
1: 
commit:43d726b
commit:979e559
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Ensure that deleting and compacting a static row that should be purged doesn't throw.
1:      * This is a test for #11988.
1:      */
1:     @Test
1:     public void testStaticColumnPurging() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (pkey text, ckey text, value text, static_value text static, PRIMARY KEY(pkey, ckey)) WITH gc_grace_seconds = 0");
1: 
1:         execute("INSERT INTO %s (pkey, ckey, static_value, value) VALUES (?, ?, ?, ?)", "k1", "c1", "s1", "v1");
1: 
1:         flush();
1: 
1:         execute("DELETE static_value FROM %s WHERE pkey = ?", "k1");
1: 
1:         flush();
1: 
1:         compact();
1: 
1:         assertRows(execute("SELECT * FROM %s"), row("k1", "c1", null, "v1"));
1:     }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:b11fba7
/////////////////////////////////////////////////////////////////////////
1:         testStaticColumns(false);
1:         testStaticColumns(true);
1:     }
1: 
1:     private void testStaticColumns(boolean forceFlush) throws Throwable
1:     {
1:         flush(forceFlush);
/////////////////////////////////////////////////////////////////////////
1:         flush(forceFlush);
/////////////////////////////////////////////////////////////////////////
1:         flush(forceFlush);
1:         flush(forceFlush);
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.validation.entities;
1: 
1: import java.util.Arrays;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: 
1: import static junit.framework.Assert.assertNull;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class StaticColumnsTest extends CQLTester
1: {
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.static_columns_test()
1:      */
1:     @Test
1:     public void testStaticColumns() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s ( k int, p int, s int static, v int, PRIMARY KEY (k, p))");
1: 
1:         execute("INSERT INTO %s(k, s) VALUES (0, 42)");
1: 
1:         assertRows(execute("SELECT * FROM %s"), row(0, null, 42, null));
1: 
1:         // Check that writetime works (//7081) -- we can't predict the exact value easily so
1:         // we just check that it's non zero
1:         Object[][] row = getRows(execute("SELECT s, writetime(s) FROM %s WHERE k=0"));
1:         assertEquals(42, row[0][0]);
1:         assertTrue((Long)row[0][1] > 0);
1: 
1:         execute("INSERT INTO %s (k, p, s, v) VALUES (0, 0, 12, 0)");
1:         execute("INSERT INTO %s (k, p, s, v) VALUES (0, 1, 24, 1)");
1: 
1:         // Check the static columns in indeed "static"
1:         assertRows(execute("SELECT * FROM %s"), row(0, 0, 24, 0), row(0, 1, 24, 1));
1: 
1:         // Check we do correctly get the static column value with a SELECT *, even
1:         // if we're only slicing part of the partition
1:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND p=0"), row(0, 0, 24, 0));
1:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND p=1"), row(0, 1, 24, 1));
1: 
1:         // Test for IN on the clustering key (//6769)
1:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND p IN (0, 1)"), row(0, 0, 24, 0), row(0, 1, 24, 1));
1: 
1:         // Check things still work if we don't select the static column. We also want
1:         // this to not request the static columns internally at all, though that part
1:         // require debugging to assert
1:         assertRows(execute("SELECT p, v FROM %s WHERE k=0 AND p=1"), row(1, 1));
1: 
1:         // Check selecting only a static column with distinct only yield one value
1:         // (as we only query the static columns)
1:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k=0"), row(24));
1:         // But without DISTINCT, we still get one result per row
1:         assertRows(execute("SELECT s FROM %s WHERE k=0"),row(24),row(24));
1:         // but that querying other columns does correctly yield the full partition
1:         assertRows(execute("SELECT s, v FROM %s WHERE k=0"),row(24, 0),row(24, 1));
1:         assertRows(execute("SELECT s, v FROM %s WHERE k=0 AND p=1"),row(24, 1));
1:         assertRows(execute("SELECT p, s FROM %s WHERE k=0 AND p=1"), row(1, 24));
1:         assertRows(execute("SELECT k, p, s FROM %s WHERE k=0 AND p=1"),row(0, 1, 24));
1: 
1:         // Check that deleting a row don't implicitely deletes statics
1:         execute("DELETE FROM %s WHERE k=0 AND p=0");
1:         assertRows(execute("SELECT * FROM %s"),row(0, 1, 24, 1));
1: 
1:         // But that explicitely deleting the static column does remove it
1:         execute("DELETE s FROM %s WHERE k=0");
1:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, 1));
1: 
1:         // Check we can add a static column ...
1:         execute("ALTER TABLE %s ADD s2 int static");
1:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, null, 1));
1:         execute("INSERT INTO %s (k, p, s2, v) VALUES(0, 2, 42, 2)");
1:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, 42, 1), row(0, 2, null, 42, 2));
1:         // ... and that we can drop it
1:         execute("ALTER TABLE %s DROP s2");
1:         assertRows(execute("SELECT * FROM %s"), row(0, 1, null, 1), row(0, 2, null, 2));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.static_columns_with_2i_test()
1:      */
1:     @Test
1:     public void testStaticColumnsWithSecondaryIndex() throws Throwable
1:     {
1:         createTable(" CREATE TABLE %s (k int, p int, s int static, v int, PRIMARY KEY (k, p) ) ");
1: 
1:         createIndex("CREATE INDEX ON %s (v)");
1: 
1:         execute("INSERT INTO %s (k, p, s, v) VALUES (0, 0, 42, 1)");
1:         execute("INSERT INTO %s (k, p, v) VALUES (0, 1, 1)");
1:         execute("INSERT INTO %s (k, p, v) VALUES (0, 2, 2)");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE v = 1"), row(0, 0, 42, 1), row(0, 1, 42, 1));
1:         assertRows(execute("SELECT p, s FROM %s WHERE v = 1"), row(0, 42), row(1, 42));
1:         assertRows(execute("SELECT p FROM %s WHERE v = 1"), row(0), row(1));
1:         // We don't support that
1:         assertInvalid("SELECT s FROM %s WHERE v = 1");
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.static_columns_with_distinct_test()
1:      */
1:     @Test
1:     public void testStaticColumnsWithDistinct() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s( k int, p int, s int static, PRIMARY KEY (k, p) ) ");
1: 
1:         execute("INSERT INTO %s (k, p) VALUES (1, 1)");
1:         execute("INSERT INTO %s (k, p) VALUES (1, 2)");
1: 
1:         assertRows(execute("SELECT k, s FROM %s"), row(1, null), row(1, null));
1:         assertRows(execute("SELECT DISTINCT k, s FROM %s"), row(1, null));
1: 
1:         Object[][] rows = getRows(execute("SELECT DISTINCT s FROM %s WHERE k=1"));
1:         assertNull(rows[0][0]);
1: 
1:         assertEmpty(execute("SELECT DISTINCT s FROM %s WHERE k=2"));
1: 
1:         execute("INSERT INTO %s (k, p, s) VALUES (2, 1, 3)");
1:         execute("INSERT INTO %s (k, p) VALUES (2, 2)");
1: 
1:         assertRows(execute("SELECT k, s FROM %s"), row(1, null), row(1, null), row(2, 3), row(2, 3));
1:         assertRows(execute("SELECT DISTINCT k, s FROM %s"), row(1, null), row(2, 3));
1:         rows = getRows(execute("SELECT DISTINCT s FROM %s WHERE k=1"));
1:         assertNull(rows[0][0]);
1:         assertRows(execute("SELECT DISTINCT s FROM %s WHERE k=2"), row(3));
1: 
1:         assertInvalid("SELECT DISTINCT s FROM %s");
1: 
1:         // paging to test for CASSANDRA-8108
1:         execute("TRUNCATE %s");
1:         for (int i = 0; i < 10; i++)
1:             for (int j = 0; j < 10; j++)
1:                 execute("INSERT INTO %s (k, p, s) VALUES (?, ?, ?)", i, j, i);
1: 
1:         rows = getRows(execute("SELECT DISTINCT k, s FROM %s"));
1:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1: 
1:         String keys = "0, 1, 2, 3, 4, 5, 6, 7, 8, 9";
1:         rows = getRows(execute("SELECT DISTINCT k, s FROM %s WHERE k IN (" + keys + ")"));
1:         checkDistinctRows(rows, false, 0, 10, 0, 10);
1: 
1:         // additional testing for CASSANRA-8087
1:         createTable("CREATE TABLE %s( k int, c1 int, c2 int, s1 int static, s2 int static, PRIMARY KEY (k, c1, c2))");
1: 
1:         for (int i = 0; i < 10; i++)
1:             for (int j = 0; j < 5; j++)
1:                 for (int k = 0; k < 5; k++)
1:                     execute("INSERT INTO %s (k, c1, c2, s1, s2) VALUES (?, ?, ?, ?, ?)", i, j, k, i, i + 1);
1: 
1:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s"));
1:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1: 
1:         rows = getRows(execute("SELECT DISTINCT k, s2 FROM %s"));
1:         checkDistinctRows(rows, true, 0, 10, 1, 11);
1: 
1:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s LIMIT 10"));
1:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1: 
1:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s WHERE k IN (" + keys + ")"));
1:         checkDistinctRows(rows, false, 0, 10, 0, 10);
1: 
1:         rows = getRows(execute("SELECT DISTINCT k, s2 FROM %s WHERE k IN (" + keys + ")"));
1:         checkDistinctRows(rows, false, 0, 10, 1, 11);
1: 
1:         rows = getRows(execute("SELECT DISTINCT k, s1 FROM %s WHERE k IN (" + keys + ")"));
1:         checkDistinctRows(rows, true, 0, 10, 0, 10);
1:     }
1: 
1:     void checkDistinctRows(Object[][] rows, boolean sort, int... ranges)
1:     {
1:         assertTrue(ranges.length % 2 == 0);
1: 
1:         int numdim = ranges.length / 2;
1:         int[] from = new int[numdim];
1:         int[] to = new int[numdim];
1: 
1:         for (int i = 0, j = 0; i < ranges.length && j < numdim; i+= 2, j++)
1:         {
1:             from[j] = ranges[i];
1:             to[j] = ranges[i+1];
1:         }
1: 
1:         //sort the rows
1:         for (int i = 0; i < numdim; i++)
1:         {
1:             int[] vals = new int[rows.length];
1:             for (int j = 0; j < rows.length; j++)
1:                 vals[j] = (Integer)rows[j][i];
1: 
1:             if (sort)
1:                 Arrays.sort(vals);
1: 
1:             for (int j = from[i]; j < to[i]; j++)
1:                 assertEquals(j, vals[j - from[i]]);
1:         }
1:     }
1: 
1:     /**
1:      * Test LIMIT when static columns are present (#6956),
1:      * migrated from cql_tests.py:TestCQL.static_with_limit_test()
1:      */
1:     @Test
1:     public void testStaticColumnsWithLimit() throws Throwable
1:     {
1:         createTable(" CREATE TABLE %s (k int, s int static, v int, PRIMARY KEY (k, v))");
1: 
1:         execute("INSERT INTO %s (k, s) VALUES(0, 42)");
1:         for (int i = 0; i < 4; i++)
1:             execute("INSERT INTO %s(k, v) VALUES(0, ?)", i);
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = 0 LIMIT 1"),
1:                    row(0, 0, 42));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 0 LIMIT 2"),
1:                    row(0, 0, 42),
1:                    row(0, 1, 42));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 0 LIMIT 3"),
1:                    row(0, 0, 42),
1:                    row(0, 1, 42),
1:                    row(0, 2, 42));
1:     }
1: 
1:     /**
1:      * Test for bug of #7455,
1:      * migrated from cql_tests.py:TestCQL.static_with_empty_clustering_test()
1:      */
1:     @Test
1:     public void testStaticColumnsWithEmptyClustering() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (pkey text, ckey text, value text, static_value text static, PRIMARY KEY(pkey, ckey))");
1: 
1:         execute("INSERT INTO %s (pkey, static_value) VALUES ('partition1', 'static value')");
1:         execute("INSERT INTO %s (pkey, ckey, value) VALUES('partition1', '', 'value')");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row("partition1", "", "static value", "value"));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.alter_clustering_and_static_test()
1:      */
1:     @Test
1:     public void testAlterClusteringAndStatic() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (bar int, PRIMARY KEY (bar))");
1: 
1:         // We shouldn 't allow static when there is not clustering columns
1:         assertInvalid("ALTER TABLE %s ADD bar2 text static");
1:     }
1: }
============================================================================