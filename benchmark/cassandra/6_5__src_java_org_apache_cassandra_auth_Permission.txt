1:799ca24: /*
1:799ca24:  * Licensed to the Apache Software Foundation (ASF) under one
1:799ca24:  * or more contributor license agreements.  See the NOTICE file
1:799ca24:  * distributed with this work for additional information
1:799ca24:  * regarding copyright ownership.  The ASF licenses this file
1:799ca24:  * to you under the Apache License, Version 2.0 (the
1:799ca24:  * "License"); you may not use this file except in compliance
1:799ca24:  * with the License.  You may obtain a copy of the License at
3:799ca24:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:799ca24:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:799ca24:  */
1:799ca24: package org.apache.cassandra.auth;
1:799ca24: 
1:799ca24: import java.util.EnumSet;
1:5a3eb1a: import java.util.Set;
1:5a3eb1a: 
1:5a3eb1a: import com.google.common.collect.ImmutableSet;
1:217721a: import com.google.common.collect.Sets;
1:799ca24: 
1:799ca24: /**
1:5a3eb1a:  * An enum encapsulating the set of possible permissions that an authenticated user can have on a resource.
1:799ca24:  *
1:5a3eb1a:  * IAuthorizer implementations may encode permissions using ordinals, so the Enum order must never change order.
1:5a3eb1a:  * Adding new values is ok.
1:799ca24:  */
1:799ca24: public enum Permission
1:799ca24: {
1:5a3eb1a:     @Deprecated
1:5a3eb1a:     READ,
1:5a3eb1a:     @Deprecated
1:5a3eb1a:     WRITE,
1:799ca24: 
1:217721a:     // schema and role management
1:217721a:     // CREATE, ALTER and DROP permissions granted on an appropriate DataResource are required for
1:217721a:     // CREATE KEYSPACE and CREATE TABLE.
1:217721a:     // ALTER KEYSPACE, ALTER TABLE, CREATE INDEX and DROP INDEX require ALTER permission on the
1:217721a:     // relevant DataResource.
1:217721a:     // DROP KEYSPACE and DROP TABLE require DROP permission.
1:217721a:     //
1:217721a:     // In the context of Role management, these permissions may also be granted on a RoleResource.
1:217721a:     // CREATE is only granted on the root-level role resource, and is required to create new roles.
1:217721a:     // ALTER & DROP may be granted on either the root-level role resource, giving permissions on
1:217721a:     // all roles, or on specific role-level resources.
1:217721a:     CREATE,
1:217721a:     ALTER,
1:217721a:     DROP,
1:799ca24: 
1:bcec7a5:     // data access
1:217721a:     SELECT, // required for SELECT on a table
1:217721a:     MODIFY, // required for INSERT, UPDATE, DELETE, TRUNCATE on a DataResource.
1:5a3eb1a: 
1:5a3eb1a:     // permission management
1:217721a:     AUTHORIZE, // required for GRANT and REVOKE of permissions or roles.
1:5a3eb1a: 
1:cb5897f:     DESCRIBE, // required on the root-level RoleResource to list all Roles
1:cb5897f: 
1:cb5897f:     // UDF permissions
1:cb5897f:     EXECUTE;  // required to invoke any user defined function or aggregate
4:bcec7a5: 
1:5a3eb1a:     public static final Set<Permission> ALL =
1:3078903:             Sets.immutableEnumSet(EnumSet.range(Permission.CREATE, Permission.EXECUTE));
1:5a3eb1a:     public static final Set<Permission> NONE = ImmutableSet.of();
1:799ca24: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:3078903
/////////////////////////////////////////////////////////////////////////
1:             Sets.immutableEnumSet(EnumSet.range(Permission.CREATE, Permission.EXECUTE));
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
0:     public static final Set<Permission> ALL_DATA =
0:             ImmutableSet.copyOf(EnumSet.range(Permission.CREATE, Permission.EXECUTE));
0:             ImmutableSet.copyOf(EnumSet.range(Permission.CREATE, Permission.EXECUTE));
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1:     DESCRIBE, // required on the root-level RoleResource to list all Roles
1: 
1:     // UDF permissions
1:     EXECUTE;  // required to invoke any user defined function or aggregate
0:             Sets.immutableEnumSet(EnumSet.range(Permission.CREATE, Permission.EXECUTE));
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1:     // schema and role management
1:     // CREATE, ALTER and DROP permissions granted on an appropriate DataResource are required for
1:     // CREATE KEYSPACE and CREATE TABLE.
1:     // ALTER KEYSPACE, ALTER TABLE, CREATE INDEX and DROP INDEX require ALTER permission on the
1:     // relevant DataResource.
1:     // DROP KEYSPACE and DROP TABLE require DROP permission.
1:     //
1:     // In the context of Role management, these permissions may also be granted on a RoleResource.
1:     // CREATE is only granted on the root-level role resource, and is required to create new roles.
1:     // ALTER & DROP may be granted on either the root-level role resource, giving permissions on
1:     // all roles, or on specific role-level resources.
1:     CREATE,
1:     ALTER,
1:     DROP,
1:     SELECT, // required for SELECT on a table
1:     MODIFY, // required for INSERT, UPDATE, DELETE, TRUNCATE on a DataResource.
1:     AUTHORIZE, // required for GRANT and REVOKE of permissions or roles.
0:     DESCRIBE; // required on the root-level RoleResource to list all Roles
0:             Sets.immutableEnumSet(EnumSet.range(Permission.CREATE, Permission.DESCRIBE));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
1: import com.google.common.collect.ImmutableSet;
1:  * An enum encapsulating the set of possible permissions that an authenticated user can have on a resource.
1:  * IAuthorizer implementations may encode permissions using ordinals, so the Enum order must never change order.
1:  * Adding new values is ok.
1:     @Deprecated
1:     READ,
1:     @Deprecated
1:     WRITE,
0:     CREATE, // required for CREATE KEYSPACE and CREATE TABLE.
0:     ALTER,  // required for ALTER KEYSPACE, ALTER TABLE, CREATE INDEX, DROP INDEX.
0:     DROP,   // required for DROP KEYSPACE and DROP TABLE.
0:     SELECT, // required for SELECT.
0:     MODIFY, // required for INSERT, UPDATE, DELETE, TRUNCATE.
1:     // permission management
0:     AUTHORIZE; // required for GRANT and REVOKE.
1: 
0:     public static final Set<Permission> ALL_DATA =
0:             ImmutableSet.copyOf(EnumSet.range(Permission.CREATE, Permission.AUTHORIZE));
1: 
1:     public static final Set<Permission> ALL =
0:             ImmutableSet.copyOf(EnumSet.range(Permission.CREATE, Permission.AUTHORIZE));
1:     public static final Set<Permission> NONE = ImmutableSet.of();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f32110c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     READ,
0:     WRITE;
author:Eric Evans
-------------------------------------------------------------------------------
commit:487c916
/////////////////////////////////////////////////////////////////////////
0:     public static final EnumSet<Permission> ALLOWED_SYSTEM_ACTIONS = EnumSet.of(DESCRIBE, UPDATE, DELETE, SELECT);
commit:e63a1ae
/////////////////////////////////////////////////////////////////////////
0:     public static final EnumSet<Permission> ALLOWED_SYSTEM_ACTIONS = EnumSet.of(DESCRIBE, UPDATE, DELETE, SELECT);
commit:dd802b3
/////////////////////////////////////////////////////////////////////////
0:     WRITE;
commit:799ca24
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
1: package org.apache.cassandra.auth;
1: 
1: import java.util.EnumSet;
1: 
1: /**
0:  * An enum encapsulating the set of possible permissions that an authenticated user can have for a resource.
1:  *
0:  * IAuthority implementations may encode permissions using ordinals, so the Enum order must never change.
1:  */
1: public enum Permission
1: {
0:     // view the direct children of this resource
0:     READ,
0:     // modify the direct children of this resource
0:     WRITE,
0:     // view data in all ancestors of this resource
0:     READ_VALUE,
0:     // modify data in all ancestors of this resource
0:     WRITE_VALUE;
1: 
0:     public static final EnumSet<Permission> ALL = EnumSet.allOf(Permission.class);
0:     public static final EnumSet<Permission> NONE = EnumSet.noneOf(Permission.class);
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:59a905c
commit:117d91a
/////////////////////////////////////////////////////////////////////////
0:     DESCRIBE,
/////////////////////////////////////////////////////////////////////////
0:         put(READ,  EnumSet.of(DESCRIBE, SELECT));
0:         put(WRITE, EnumSet.range(DESCRIBE, DELETE));
commit:bcec7a5
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     READ,  // for backward compatibility
0:     WRITE, // for backward compatibility
1: 
0:     FULL_ACCESS,
0:     NO_ACCESS,
1: 
0:     // schema management
0:     USE,
0:     CREATE,
0:     ALTER,
0:     DROP,
1: 
1:     // data access
0:     UPDATE,
0:     DELETE,
0:     SELECT;
0:     public static final EnumSet<Permission> GRANULAR_PERMISSIONS = EnumSet.range(FULL_ACCESS, SELECT);
1: 
0:     /**
0:      * Maps old permissions to the new ones as we want to support old client IAuthority implementations
0:      * and new style of granular permission checking at the same time.
0:      */
0:     public static final Map<Permission, EnumSet<Permission>> oldToNew = new HashMap<Permission, EnumSet<Permission>>(2)
0:     {{
0:         put(READ,  EnumSet.of(USE, SELECT));
0:         put(WRITE, EnumSet.range(USE, DELETE));
0:     }};
commit:aba5a37
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     READ,  // for backward compatibility
0:     WRITE, // for backward compatibility
0: 
0:     FULL_ACCESS,
0:     NO_ACCESS,
0: 
0:     // schema management
0:     USE,
0:     CREATE,
0:     ALTER,
0:     DROP,
0: 
0:     // data access
0:     UPDATE,
0:     DELETE,
0:     SELECT;
0:     public static final EnumSet<Permission> GRANULAR_PERMISSIONS = EnumSet.range(FULL_ACCESS, SELECT);
0: 
0:     /**
0:      * Maps old permissions to the new ones as we want to support old client IAuthority implementations
0:      * and new style of granular permission checking at the same time.
0:      */
0:     public static final Map<Permission, EnumSet<Permission>> oldToNew = new HashMap<Permission, EnumSet<Permission>>(2)
0:     {{
0:         put(READ,  EnumSet.of(USE, SELECT));
0:         put(WRITE, EnumSet.range(USE, DELETE));
0:     }};
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================