1:3c55732: /*
1:3c55732:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c55732:  * or more contributor license agreements.  See the NOTICE file
1:3c55732:  * distributed with this work for additional information
1:3c55732:  * regarding copyright ownership.  The ASF licenses this file
1:3c55732:  * to you under the Apache License, Version 2.0 (the
1:3c55732:  * "License"); you may not use this file except in compliance
1:3c55732:  * with the License.  You may obtain a copy of the License at
1:3c55732:  *
1:3c55732:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c55732:  *
1:3c55732:  * Unless required by applicable law or agreed to in writing, software
1:3c55732:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c55732:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c55732:  * See the License for the specific language governing permissions and
1:3c55732:  * limitations under the License.
1:3c55732:  */
1:3c55732: 
1:3c55732: package org.apache.cassandra.gms;
1:3c55732: 
1:3c55732: import java.net.InetAddress;
1:3c55732: import java.net.UnknownHostException;
1:3c55732: import java.util.ArrayList;
1:3c55732: import java.util.List;
1:3c55732: import java.util.UUID;
1:3c55732: 
1:3c55732: import com.google.common.collect.ImmutableMap;
1:3c55732: import org.junit.Before;
1:3c55732: import org.junit.Test;
1:3c55732: 
1:3c55732: import org.apache.cassandra.Util;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:3c55732: import org.apache.cassandra.dht.IPartitioner;
1:3c55732: import org.apache.cassandra.dht.RandomPartitioner;
1:3c55732: import org.apache.cassandra.dht.Token;
1:3c55732: import org.apache.cassandra.locator.TokenMetadata;
1:3c55732: import org.apache.cassandra.service.StorageService;
1:3c55732: 
1:3c55732: import static org.junit.Assert.assertEquals;
1:3c55732: 
1:3c55732: public class GossiperTest
1:3c55732: {
1:9797511:     static
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:3c55732:     static final IPartitioner partitioner = new RandomPartitioner();
1:3c55732:     StorageService ss = StorageService.instance;
1:3c55732:     TokenMetadata tmd = StorageService.instance.getTokenMetadata();
1:3c55732:     ArrayList<Token> endpointTokens = new ArrayList<>();
1:3c55732:     ArrayList<Token> keyTokens = new ArrayList<>();
1:3c55732:     List<InetAddress> hosts = new ArrayList<>();
1:3c55732:     List<UUID> hostIds = new ArrayList<>();
1:3c55732: 
1:3c55732:     @Before
1:3c55732:     public void setup()
1:3c55732:     {
1:3c55732:         tmd.clearUnsafe();
1:3c55732:     };
1:3c55732: 
1:3c55732:     @Test
1:3c55732:     public void testLargeGenerationJump() throws UnknownHostException, InterruptedException
1:3c55732:     {
1:3c55732:         Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 2);
1:3c55732:         InetAddress remoteHostAddress = hosts.get(1);
1:3c55732: 
1:3c55732:         EndpointState initialRemoteState = Gossiper.instance.getEndpointStateForEndpoint(remoteHostAddress);
1:3c55732:         HeartBeatState initialRemoteHeartBeat = initialRemoteState.getHeartBeatState();
1:3c55732: 
1:3c55732:         //Util.createInitialRing should have initialized remoteHost's HeartBeatState's generation to 1
1:3c55732:         assertEquals(initialRemoteHeartBeat.getGeneration(), 1);
1:3c55732: 
1:3c55732:         HeartBeatState proposedRemoteHeartBeat = new HeartBeatState(initialRemoteHeartBeat.getGeneration() + Gossiper.MAX_GENERATION_DIFFERENCE + 1);
1:3c55732:         EndpointState proposedRemoteState = new EndpointState(proposedRemoteHeartBeat);
1:3c55732: 
1:3c55732:         Gossiper.instance.applyStateLocally(ImmutableMap.of(remoteHostAddress, proposedRemoteState));
1:3c55732: 
1:3c55732:         //The generation should have been updated because it isn't over Gossiper.MAX_GENERATION_DIFFERENCE in the future
1:3c55732:         HeartBeatState actualRemoteHeartBeat = Gossiper.instance.getEndpointStateForEndpoint(remoteHostAddress).getHeartBeatState();
1:3c55732:         assertEquals(proposedRemoteHeartBeat.getGeneration(), actualRemoteHeartBeat.getGeneration());
1:3c55732: 
1:3c55732:         //Propose a generation 10 years in the future - this should be rejected.
1:3c55732:         HeartBeatState badProposedRemoteHeartBeat = new HeartBeatState((int) (System.currentTimeMillis()/1000) + Gossiper.MAX_GENERATION_DIFFERENCE * 10);
1:3c55732:         EndpointState badProposedRemoteState = new EndpointState(badProposedRemoteHeartBeat);
1:3c55732: 
1:3c55732:         Gossiper.instance.applyStateLocally(ImmutableMap.of(remoteHostAddress, badProposedRemoteState));
1:3c55732: 
1:3c55732:         actualRemoteHeartBeat = Gossiper.instance.getEndpointStateForEndpoint(remoteHostAddress).getHeartBeatState();
1:3c55732: 
1:3c55732:         //The generation should not have been updated because it is over Gossiper.MAX_GENERATION_DIFFERENCE in the future
1:3c55732:         assertEquals(proposedRemoteHeartBeat.getGeneration(), actualRemoteHeartBeat.getGeneration());
1:3c55732:     }
1:3c55732: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Joel Knighton
-------------------------------------------------------------------------------
commit:3c55732
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.UUID;
1: 
1: import com.google.common.collect.ImmutableMap;
0: import org.junit.After;
0: import org.junit.AfterClass;
1: import org.junit.Before;
0: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.RandomPartitioner;
1: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.locator.TokenMetadata;
1: import org.apache.cassandra.service.StorageService;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class GossiperTest
1: {
1:     static final IPartitioner partitioner = new RandomPartitioner();
1:     StorageService ss = StorageService.instance;
1:     TokenMetadata tmd = StorageService.instance.getTokenMetadata();
1:     ArrayList<Token> endpointTokens = new ArrayList<>();
1:     ArrayList<Token> keyTokens = new ArrayList<>();
1:     List<InetAddress> hosts = new ArrayList<>();
1:     List<UUID> hostIds = new ArrayList<>();
1: 
1:     @Before
1:     public void setup()
1:     {
1:         tmd.clearUnsafe();
1:     };
1: 
1:     @Test
1:     public void testLargeGenerationJump() throws UnknownHostException, InterruptedException
1:     {
1:         Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 2);
1:         InetAddress remoteHostAddress = hosts.get(1);
1: 
1:         EndpointState initialRemoteState = Gossiper.instance.getEndpointStateForEndpoint(remoteHostAddress);
1:         HeartBeatState initialRemoteHeartBeat = initialRemoteState.getHeartBeatState();
1: 
1:         //Util.createInitialRing should have initialized remoteHost's HeartBeatState's generation to 1
1:         assertEquals(initialRemoteHeartBeat.getGeneration(), 1);
1: 
1:         HeartBeatState proposedRemoteHeartBeat = new HeartBeatState(initialRemoteHeartBeat.getGeneration() + Gossiper.MAX_GENERATION_DIFFERENCE + 1);
1:         EndpointState proposedRemoteState = new EndpointState(proposedRemoteHeartBeat);
1: 
1:         Gossiper.instance.applyStateLocally(ImmutableMap.of(remoteHostAddress, proposedRemoteState));
1: 
1:         //The generation should have been updated because it isn't over Gossiper.MAX_GENERATION_DIFFERENCE in the future
1:         HeartBeatState actualRemoteHeartBeat = Gossiper.instance.getEndpointStateForEndpoint(remoteHostAddress).getHeartBeatState();
1:         assertEquals(proposedRemoteHeartBeat.getGeneration(), actualRemoteHeartBeat.getGeneration());
1: 
1:         //Propose a generation 10 years in the future - this should be rejected.
1:         HeartBeatState badProposedRemoteHeartBeat = new HeartBeatState((int) (System.currentTimeMillis()/1000) + Gossiper.MAX_GENERATION_DIFFERENCE * 10);
1:         EndpointState badProposedRemoteState = new EndpointState(badProposedRemoteHeartBeat);
1: 
1:         Gossiper.instance.applyStateLocally(ImmutableMap.of(remoteHostAddress, badProposedRemoteState));
1: 
1:         actualRemoteHeartBeat = Gossiper.instance.getEndpointStateForEndpoint(remoteHostAddress).getHeartBeatState();
1: 
1:         //The generation should not have been updated because it is over Gossiper.MAX_GENERATION_DIFFERENCE in the future
1:         assertEquals(proposedRemoteHeartBeat.getGeneration(), actualRemoteHeartBeat.getGeneration());
1:     }
1: }
============================================================================