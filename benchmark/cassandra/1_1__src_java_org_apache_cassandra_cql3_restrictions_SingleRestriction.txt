1:831bebd: /*
1:831bebd:  * Licensed to the Apache Software Foundation (ASF) under one
1:831bebd:  * or more contributor license agreements.  See the NOTICE file
1:831bebd:  * distributed with this work for additional information
1:831bebd:  * regarding copyright ownership.  The ASF licenses this file
1:831bebd:  * to you under the Apache License, Version 2.0 (the
1:831bebd:  * "License"); you may not use this file except in compliance
1:831bebd:  * with the License.  You may obtain a copy of the License at
1:831bebd:  *
1:831bebd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:831bebd:  *
1:831bebd:  * Unless required by applicable law or agreed to in writing, software
1:831bebd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:831bebd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:831bebd:  * See the License for the specific language governing permissions and
1:831bebd:  * limitations under the License.
1:831bebd:  */
1:831bebd: package org.apache.cassandra.cql3.restrictions;
1:831bebd: 
1:831bebd: import org.apache.cassandra.cql3.QueryOptions;
1:831bebd: import org.apache.cassandra.cql3.statements.Bound;
1:831bebd: import org.apache.cassandra.db.MultiCBuilder;
1:831bebd: 
1:831bebd: /**
1:831bebd:  * A single restriction/clause on one or multiple column.
1:831bebd:  */
1:831bebd: public interface SingleRestriction extends Restriction
1:831bebd: {
1:831bebd:     public default boolean isSlice()
1:831bebd:     {
1:831bebd:         return false;
1:831bebd:     }
1:831bebd: 
1:831bebd:     public default boolean isEQ()
1:831bebd:     {
1:831bebd:         return false;
1:831bebd:     }
1:831bebd: 
1:831bebd:     public default boolean isLIKE()
1:831bebd:     {
1:831bebd:         return false;
1:831bebd:     }
1:831bebd: 
1:831bebd:     public default boolean isIN()
1:831bebd:     {
1:831bebd:         return false;
1:831bebd:     }
1:831bebd: 
1:831bebd:     public default boolean isContains()
1:831bebd:     {
1:831bebd:         return false;
1:831bebd:     }
1:831bebd: 
1:831bebd:     public default boolean isNotNull()
1:831bebd:     {
1:831bebd:         return false;
1:831bebd:     }
1:831bebd: 
1:831bebd:     public default boolean isMultiColumn()
1:831bebd:     {
1:831bebd:         return false;
1:831bebd:     }
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Checks if the specified bound is set or not.
1:831bebd:      * @param b the bound type
1:831bebd:      * @return <code>true</code> if the specified bound is set, <code>false</code> otherwise
1:831bebd:      */
1:831bebd:     public default boolean hasBound(Bound b)
1:831bebd:     {
1:831bebd:         return true;
1:831bebd:     }
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Checks if the specified bound is inclusive or not.
1:831bebd:      * @param b the bound type
1:831bebd:      * @return <code>true</code> if the specified bound is inclusive, <code>false</code> otherwise
1:831bebd:      */
1:831bebd:     public default boolean isInclusive(Bound b)
1:831bebd:     {
1:831bebd:         return true;
1:831bebd:     }
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Merges this restriction with the specified one.
1:831bebd:      *
1:831bebd:      * <p>Restriction are immutable. Therefore merging two restrictions result in a new one.
1:831bebd:      * The reason behind this choice is that it allow a great flexibility in the way the merging can done while
1:831bebd:      * preventing any side effect.</p>
1:831bebd:      *
1:831bebd:      * @param otherRestriction the restriction to merge into this one
1:831bebd:      * @return the restriction resulting of the merge
1:831bebd:      */
1:831bebd:     public SingleRestriction mergeWith(SingleRestriction otherRestriction);
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Appends the values of this <code>SingleRestriction</code> to the specified builder.
1:831bebd:      *
1:831bebd:      * @param builder the <code>MultiCBuilder</code> to append to.
1:831bebd:      * @param options the query options
1:831bebd:      * @return the <code>MultiCBuilder</code>
1:831bebd:      */
1:831bebd:     public MultiCBuilder appendTo(MultiCBuilder builder, QueryOptions options);
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Appends the values of the <code>SingleRestriction</code> for the specified bound to the specified builder.
1:831bebd:      *
1:831bebd:      * @param builder the <code>MultiCBuilder</code> to append to.
1:831bebd:      * @param bound the bound
1:831bebd:      * @param options the query options
1:831bebd:      * @return the <code>MultiCBuilder</code>
1:831bebd:      */
1:831bebd:     public default MultiCBuilder appendBoundTo(MultiCBuilder builder, Bound bound, QueryOptions options)
1:831bebd:     {
1:831bebd:         return appendTo(builder, options);
1:831bebd:     }
1:831bebd: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:831bebd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.restrictions;
1: 
1: import org.apache.cassandra.cql3.QueryOptions;
1: import org.apache.cassandra.cql3.statements.Bound;
1: import org.apache.cassandra.db.MultiCBuilder;
1: 
1: /**
1:  * A single restriction/clause on one or multiple column.
1:  */
1: public interface SingleRestriction extends Restriction
1: {
1:     public default boolean isSlice()
1:     {
1:         return false;
1:     }
1: 
1:     public default boolean isEQ()
1:     {
1:         return false;
1:     }
1: 
1:     public default boolean isLIKE()
1:     {
1:         return false;
1:     }
1: 
1:     public default boolean isIN()
1:     {
1:         return false;
1:     }
1: 
1:     public default boolean isContains()
1:     {
1:         return false;
1:     }
1: 
1:     public default boolean isNotNull()
1:     {
1:         return false;
1:     }
1: 
1:     public default boolean isMultiColumn()
1:     {
1:         return false;
1:     }
1: 
1:     /**
1:      * Checks if the specified bound is set or not.
1:      * @param b the bound type
1:      * @return <code>true</code> if the specified bound is set, <code>false</code> otherwise
1:      */
1:     public default boolean hasBound(Bound b)
1:     {
1:         return true;
1:     }
1: 
1:     /**
1:      * Checks if the specified bound is inclusive or not.
1:      * @param b the bound type
1:      * @return <code>true</code> if the specified bound is inclusive, <code>false</code> otherwise
1:      */
1:     public default boolean isInclusive(Bound b)
1:     {
1:         return true;
1:     }
1: 
1:     /**
1:      * Merges this restriction with the specified one.
1:      *
1:      * <p>Restriction are immutable. Therefore merging two restrictions result in a new one.
1:      * The reason behind this choice is that it allow a great flexibility in the way the merging can done while
1:      * preventing any side effect.</p>
1:      *
1:      * @param otherRestriction the restriction to merge into this one
1:      * @return the restriction resulting of the merge
1:      */
1:     public SingleRestriction mergeWith(SingleRestriction otherRestriction);
1: 
1:     /**
1:      * Appends the values of this <code>SingleRestriction</code> to the specified builder.
1:      *
1:      * @param builder the <code>MultiCBuilder</code> to append to.
1:      * @param options the query options
1:      * @return the <code>MultiCBuilder</code>
1:      */
1:     public MultiCBuilder appendTo(MultiCBuilder builder, QueryOptions options);
1: 
1:     /**
1:      * Appends the values of the <code>SingleRestriction</code> for the specified bound to the specified builder.
1:      *
1:      * @param builder the <code>MultiCBuilder</code> to append to.
1:      * @param bound the bound
1:      * @param options the query options
1:      * @return the <code>MultiCBuilder</code>
1:      */
1:     public default MultiCBuilder appendBoundTo(MultiCBuilder builder, Bound bound, QueryOptions options)
1:     {
1:         return appendTo(builder, options);
1:     }
1: }
============================================================================