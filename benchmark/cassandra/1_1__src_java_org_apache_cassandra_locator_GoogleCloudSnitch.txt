1:f2bbd6f: /*
1:f2bbd6f:  * Licensed to the Apache Software Foundation (ASF) under one
1:f2bbd6f:  * or more contributor license agreements.  See the NOTICE file
1:f2bbd6f:  * distributed with this work for additional information
1:f2bbd6f:  * regarding copyright ownership.  The ASF licenses this file
1:f2bbd6f:  * to you under the Apache License, Version 2.0 (the
1:f2bbd6f:  * "License"); you may not use this file except in compliance
1:f2bbd6f:  * with the License.  You may obtain a copy of the License at
1:f2bbd6f:  *
1:f2bbd6f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f2bbd6f:  *
1:f2bbd6f:  * Unless required by applicable law or agreed to in writing, software
1:f2bbd6f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f2bbd6f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f2bbd6f:  * See the License for the specific language governing permissions and
1:f2bbd6f:  * limitations under the License.
1:f2bbd6f:  */
1:f2bbd6f: package org.apache.cassandra.locator;
1:f2bbd6f: 
1:f2bbd6f: import java.io.DataInputStream;
1:f2bbd6f: import java.io.FilterInputStream;
1:f2bbd6f: import java.io.IOException;
1:f2bbd6f: import java.net.HttpURLConnection;
1:f2bbd6f: import java.net.InetAddress;
1:f2bbd6f: import java.net.URL;
1:f2bbd6f: import java.nio.charset.StandardCharsets;
1:f2bbd6f: import java.util.Map;
1:f2bbd6f: 
1:f2bbd6f: import org.slf4j.Logger;
1:f2bbd6f: import org.slf4j.LoggerFactory;
1:f2bbd6f: import org.apache.cassandra.db.SystemKeyspace;
1:f2bbd6f: import org.apache.cassandra.exceptions.ConfigurationException;
1:f2bbd6f: import org.apache.cassandra.gms.ApplicationState;
1:f2bbd6f: import org.apache.cassandra.gms.EndpointState;
1:f2bbd6f: import org.apache.cassandra.gms.Gossiper;
1:f2bbd6f: import org.apache.cassandra.io.util.FileUtils;
1:f2bbd6f: import org.apache.cassandra.utils.FBUtilities;
1:f2bbd6f: 
1:f2bbd6f: /**
1:f2bbd6f:  * A snitch that assumes an GCE region is a DC and an GCE availability_zone
1:f2bbd6f:  *  is a rack. This information is available in the config for the node.
1:f2bbd6f:  */
1:f2bbd6f: public class GoogleCloudSnitch extends AbstractNetworkTopologySnitch
1:f2bbd6f: {
1:f2bbd6f:     protected static final Logger logger = LoggerFactory.getLogger(GoogleCloudSnitch.class);
1:f2bbd6f:     protected static final String ZONE_NAME_QUERY_URL = "http://metadata.google.internal/computeMetadata/v1/instance/zone";
1:f2bbd6f:     private static final String DEFAULT_DC = "UNKNOWN-DC";
1:f2bbd6f:     private static final String DEFAULT_RACK = "UNKNOWN-RACK";
1:f2bbd6f:     private Map<InetAddress, Map<String, String>> savedEndpoints;
1:f2bbd6f:     protected String gceZone;
1:f2bbd6f:     protected String gceRegion;
1:f2bbd6f: 
1:f2bbd6f:     public GoogleCloudSnitch() throws IOException, ConfigurationException
1:f2bbd6f:     {
1:f2bbd6f:         String response = gceApiCall(ZONE_NAME_QUERY_URL);
1:aa2b769:         String[] splits = response.split("/");
1:aa2b769:         String az = splits[splits.length - 1];
1:f2bbd6f: 
1:f2bbd6f:         // Split "us-central1-a" or "asia-east1-a" into "us-central1"/"a" and "asia-east1"/"a".
1:f2bbd6f:         splits = az.split("-");
1:f2bbd6f:         gceZone = splits[splits.length - 1];
1:f2bbd6f: 
1:aa2b769:         int lastRegionIndex = az.lastIndexOf("-");
1:aa2b769:         gceRegion = az.substring(0, lastRegionIndex);
1:f2bbd6f: 
1:f2bbd6f:         String datacenterSuffix = (new SnitchProperties()).get("dc_suffix", "");
1:f2bbd6f:         gceRegion = gceRegion.concat(datacenterSuffix);
1:f2bbd6f:         logger.info("GCESnitch using region: {}, zone: {}.", gceRegion, gceZone);
1:f2bbd6f:     }
1:f2bbd6f: 
1:f2bbd6f:     String gceApiCall(String url) throws IOException, ConfigurationException
1:f2bbd6f:     {
1:f2bbd6f:         // Populate the region and zone by introspection, fail if 404 on metadata
1:f2bbd6f:         HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
1:f2bbd6f:         DataInputStream d = null;
1:f2bbd6f:         try
1:f2bbd6f:         {
1:f2bbd6f:             conn.setRequestMethod("GET");
1:f2bbd6f: 	    conn.setRequestProperty("Metadata-Flavor", "Google");
1:f2bbd6f:             if (conn.getResponseCode() != 200)
1:f2bbd6f:                 throw new ConfigurationException("GoogleCloudSnitch was unable to execute the API call. Not a gce node?");
1:f2bbd6f: 
1:f2bbd6f:             // Read the information.
1:f2bbd6f:             int cl = conn.getContentLength();
1:f2bbd6f:             byte[] b = new byte[cl];
1:f2bbd6f:             d = new DataInputStream((FilterInputStream) conn.getContent());
1:f2bbd6f:             d.readFully(b);
1:f2bbd6f:             return new String(b, StandardCharsets.UTF_8);
1:f2bbd6f:         }
1:f2bbd6f:         finally
1:f2bbd6f:         {
1:f2bbd6f:             FileUtils.close(d);
1:f2bbd6f:             conn.disconnect();
1:f2bbd6f:         }
1:f2bbd6f:     }
1:f2bbd6f: 
1:f2bbd6f:     public String getRack(InetAddress endpoint)
1:f2bbd6f:     {
1:f2bbd6f:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:f2bbd6f:             return gceZone;
1:f2bbd6f:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:f2bbd6f:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null)
1:f2bbd6f:         {
1:f2bbd6f:             if (savedEndpoints == null)
1:f2bbd6f:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:f2bbd6f:             if (savedEndpoints.containsKey(endpoint))
1:f2bbd6f:                 return savedEndpoints.get(endpoint).get("rack");
1:f2bbd6f:             return DEFAULT_RACK;
1:f2bbd6f:         }
1:f2bbd6f:         return state.getApplicationState(ApplicationState.RACK).value;
1:f2bbd6f:     }
1:f2bbd6f: 
1:f2bbd6f:     public String getDatacenter(InetAddress endpoint)
1:f2bbd6f:     {
1:f2bbd6f:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:f2bbd6f:             return gceRegion;
1:f2bbd6f:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:f2bbd6f:         if (state == null || state.getApplicationState(ApplicationState.DC) == null)
1:f2bbd6f:         {
1:f2bbd6f:             if (savedEndpoints == null)
1:f2bbd6f:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:f2bbd6f:             if (savedEndpoints.containsKey(endpoint))
1:f2bbd6f:                 return savedEndpoints.get(endpoint).get("data_center");
1:f2bbd6f:             return DEFAULT_DC;
1:f2bbd6f:         }
1:f2bbd6f:         return state.getApplicationState(ApplicationState.DC).value;
1:f2bbd6f:     }
1:f2bbd6f: }
============================================================================
author:Brandon Williams
-------------------------------------------------------------------------------
commit:aa2b769
/////////////////////////////////////////////////////////////////////////
1:         String[] splits = response.split("/");
1:         String az = splits[splits.length - 1];
1:         int lastRegionIndex = az.lastIndexOf("-");
1:         gceRegion = az.substring(0, lastRegionIndex);
commit:f2bbd6f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.locator;
1: 
1: import java.io.DataInputStream;
1: import java.io.FilterInputStream;
1: import java.io.IOException;
1: import java.net.HttpURLConnection;
1: import java.net.InetAddress;
1: import java.net.URL;
1: import java.nio.charset.StandardCharsets;
1: import java.util.Map;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.apache.cassandra.db.SystemKeyspace;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.gms.ApplicationState;
1: import org.apache.cassandra.gms.EndpointState;
1: import org.apache.cassandra.gms.Gossiper;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * A snitch that assumes an GCE region is a DC and an GCE availability_zone
1:  *  is a rack. This information is available in the config for the node.
1:  */
1: public class GoogleCloudSnitch extends AbstractNetworkTopologySnitch
1: {
1:     protected static final Logger logger = LoggerFactory.getLogger(GoogleCloudSnitch.class);
1:     protected static final String ZONE_NAME_QUERY_URL = "http://metadata.google.internal/computeMetadata/v1/instance/zone";
1:     private static final String DEFAULT_DC = "UNKNOWN-DC";
1:     private static final String DEFAULT_RACK = "UNKNOWN-RACK";
1:     private Map<InetAddress, Map<String, String>> savedEndpoints;
1:     protected String gceZone;
1:     protected String gceRegion;
1: 
1:     public GoogleCloudSnitch() throws IOException, ConfigurationException
1:     {
1:         String response = gceApiCall(ZONE_NAME_QUERY_URL);
0: 	String[] splits = response.split("/");
0: 	String az = splits[splits.length - 1];
1: 
1:         // Split "us-central1-a" or "asia-east1-a" into "us-central1"/"a" and "asia-east1"/"a".
1:         splits = az.split("-");
1:         gceZone = splits[splits.length - 1];
1: 
0: 	int lastRegionIndex = az.lastIndexOf("-");
0: 	gceRegion = az.substring(0, lastRegionIndex);
1: 
1:         String datacenterSuffix = (new SnitchProperties()).get("dc_suffix", "");
1:         gceRegion = gceRegion.concat(datacenterSuffix);
1:         logger.info("GCESnitch using region: {}, zone: {}.", gceRegion, gceZone);
1:     }
1: 
1:     String gceApiCall(String url) throws IOException, ConfigurationException
1:     {
1:         // Populate the region and zone by introspection, fail if 404 on metadata
1:         HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
1:         DataInputStream d = null;
1:         try
1:         {
1:             conn.setRequestMethod("GET");
1: 	    conn.setRequestProperty("Metadata-Flavor", "Google");
1:             if (conn.getResponseCode() != 200)
1:                 throw new ConfigurationException("GoogleCloudSnitch was unable to execute the API call. Not a gce node?");
1: 
1:             // Read the information.
1:             int cl = conn.getContentLength();
1:             byte[] b = new byte[cl];
1:             d = new DataInputStream((FilterInputStream) conn.getContent());
1:             d.readFully(b);
1:             return new String(b, StandardCharsets.UTF_8);
1:         }
1:         finally
1:         {
1:             FileUtils.close(d);
1:             conn.disconnect();
1:         }
1:     }
1: 
1:     public String getRack(InetAddress endpoint)
1:     {
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:             return gceZone;
1:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null)
1:         {
1:             if (savedEndpoints == null)
1:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:             if (savedEndpoints.containsKey(endpoint))
1:                 return savedEndpoints.get(endpoint).get("rack");
1:             return DEFAULT_RACK;
1:         }
1:         return state.getApplicationState(ApplicationState.RACK).value;
1:     }
1: 
1:     public String getDatacenter(InetAddress endpoint)
1:     {
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:             return gceRegion;
1:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:         if (state == null || state.getApplicationState(ApplicationState.DC) == null)
1:         {
1:             if (savedEndpoints == null)
1:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:             if (savedEndpoints.containsKey(endpoint))
1:                 return savedEndpoints.get(endpoint).get("data_center");
1:             return DEFAULT_DC;
1:         }
1:         return state.getApplicationState(ApplicationState.DC).value;
1:     }
1: }
============================================================================