1:6e9140a: /*
1:5250d7f: * Licensed to the Apache Software Foundation (ASF) under one
1:5250d7f: * or more contributor license agreements.  See the NOTICE file
1:5250d7f: * distributed with this work for additional information
1:5250d7f: * regarding copyright ownership.  The ASF licenses this file
1:5250d7f: * to you under the Apache License, Version 2.0 (the
1:5250d7f: * "License"); you may not use this file except in compliance
1:5250d7f: * with the License.  You may obtain a copy of the License at
1:5250d7f: *
1:5250d7f: *    http://www.apache.org/licenses/LICENSE-2.0
1:5250d7f: *
1:5250d7f: * Unless required by applicable law or agreed to in writing,
1:5250d7f: * software distributed under the License is distributed on an
1:5250d7f: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5250d7f: * KIND, either express or implied.  See the License for the
1:5250d7f: * specific language governing permissions and limitations
1:5250d7f: * under the License.
1:5250d7f: */
1:6e9140a: package org.apache.cassandra.utils.btree;
2:6e9140a: 
1:6e9140a: import java.util.Comparator;
1:5250d7f: import java.util.Iterator;
1:5250d7f: import java.util.NoSuchElementException;
1:6e9140a: 
1:5250d7f: import org.apache.cassandra.utils.IndexedSearchIterator;
1:6e9140a: 
1:5250d7f: import static org.apache.cassandra.utils.btree.BTree.size;
1:6e9140a: 
1:5250d7f: public class BTreeSearchIterator<K, V> extends TreeCursor<K> implements IndexedSearchIterator<K, V>, Iterator<V>
1:a991b64: {
1:5250d7f:     private final boolean forwards;
1:a991b64: 
1:5250d7f:     // for simplicity, we just always use the index feature of the btree to maintain our bounds within the tree,
1:5250d7f:     // whether or not they are constrained
1:5250d7f:     private int index;
1:5250d7f:     private byte state;
1:5250d7f:     private final int lowerBound, upperBound; // inclusive
1:5250d7f: 
1:5250d7f:     private static final int MIDDLE = 0; // only "exists" as an absence of other states
1:5250d7f:     private static final int ON_ITEM = 1; // may only co-exist with LAST (or MIDDLE, which is 0)
1:5250d7f:     private static final int BEFORE_FIRST = 2; // may not coexist with any other state
1:5250d7f:     private static final int LAST = 4; // may co-exist with ON_ITEM, in which case we are also at END
1:5250d7f:     private static final int END = 5; // equal to LAST | ON_ITEM
1:5250d7f: 
1:639d4b2:     public BTreeSearchIterator(Object[] btree, Comparator<? super K> comparator, BTree.Dir dir)
1:a991b64:     {
1:639d4b2:         this(btree, comparator, dir, 0, size(btree)-1);
1:a991b64:     }
1:6e9140a: 
1:639d4b2:     BTreeSearchIterator(Object[] btree, Comparator<? super K> comparator, BTree.Dir dir, int lowerBound, int upperBound)
1:a991b64:     {
1:5250d7f:         super(comparator, btree);
1:639d4b2:         this.forwards = dir == BTree.Dir.ASC;
1:5250d7f:         this.lowerBound = lowerBound;
1:5250d7f:         this.upperBound = upperBound;
1:5250d7f:         rewind();
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     /**
1:5250d7f:      * @return 0 if we are on the last item, 1 if we are past the last item, and -1 if we are before it
1:5250d7f:      */
1:5250d7f:     private int compareToLast(int idx)
1:5250d7f:     {
1:5250d7f:         return forwards ? idx - upperBound : lowerBound - idx;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     private int compareToFirst(int idx)
1:5250d7f:     {
1:5250d7f:         return forwards ? idx - lowerBound : upperBound - idx;
1:a991b64:     }
1:6e9140a: 
1:6e9140a:     public boolean hasNext()
1:a991b64:     {
1:5250d7f:         return state != END;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     public V next()
1:5250d7f:     {
1:5250d7f:         switch (state)
1:5250d7f:         {
1:5250d7f:             case ON_ITEM:
1:5250d7f:                 if (compareToLast(index = moveOne(forwards)) >= 0)
1:5250d7f:                     state = END;
1:5250d7f:                 break;
1:5250d7f:             case BEFORE_FIRST:
1:5250d7f:                 seekTo(index = forwards ? lowerBound : upperBound);
1:5250d7f:                 state = (byte) (upperBound == lowerBound ? LAST : MIDDLE);
1:5250d7f:             case LAST:
1:5250d7f:             case MIDDLE:
1:5250d7f:                 state |= ON_ITEM;
1:5250d7f:                 break;
1:5250d7f:             default:
1:5250d7f:                 throw new NoSuchElementException();
1:5250d7f:         }
1:5250d7f: 
1:5250d7f:         return current();
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     public V next(K target)
1:5250d7f:     {
1:5250d7f:         if (!hasNext())
1:5250d7f:             return null;
1:5250d7f: 
1:5250d7f:         int state = this.state;
1:aef7169:         boolean found = seekTo(target, forwards, (state & (ON_ITEM | BEFORE_FIRST)) != 0);
1:aef7169:         int index = cur.globalIndex();
1:5250d7f: 
1:5250d7f:         V next = null;
1:5250d7f:         if (state == BEFORE_FIRST && compareToFirst(index) < 0)
1:5250d7f:             return null;
1:5250d7f: 
1:5250d7f:         int compareToLast = compareToLast(index);
1:5250d7f:         if ((compareToLast <= 0))
1:5250d7f:         {
1:5250d7f:             state = compareToLast < 0 ? MIDDLE : LAST;
1:5250d7f:             if (found)
1:5250d7f:             {
1:5250d7f:                 state |= ON_ITEM;
1:5250d7f:                 next = (V) currentValue();
1:5250d7f:             }
1:5250d7f:         }
1:5250d7f:         else state = END;
1:5250d7f: 
1:5250d7f:         this.state = (byte) state;
1:5250d7f:         this.index = index;
1:5250d7f:         return next;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     /**
1:5250d7f:      * Reset this Iterator to its starting position
1:5250d7f:      */
1:5250d7f:     public void rewind()
1:5250d7f:     {
1:5250d7f:         if (upperBound < lowerBound)
1:5250d7f:         {
1:5250d7f:             state = (byte) END;
1:5250d7f:         }
1:5250d7f:         else
1:5250d7f:         {
1:5250d7f:             // we don't move into the tree until the first request is made, so we know where to go
1:5250d7f:             reset(forwards);
1:5250d7f:             state = (byte) BEFORE_FIRST;
1:5250d7f:         }
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     private void checkOnItem()
1:5250d7f:     {
1:5250d7f:         if ((state & ON_ITEM) != ON_ITEM)
1:5250d7f:             throw new NoSuchElementException();
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     public V current()
1:5250d7f:     {
1:5250d7f:         checkOnItem();
1:5250d7f:         return (V) currentValue();
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     public int indexOfCurrent()
1:5250d7f:     {
1:5250d7f:         checkOnItem();
1:5250d7f:         return compareToFirst(index);
1:a991b64:     }
1:a991b64: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aef7169
/////////////////////////////////////////////////////////////////////////
1:         boolean found = seekTo(target, forwards, (state & (ON_ITEM | BEFORE_FIRST)) != 0);
1:         int index = cur.globalIndex();
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
1:     public BTreeSearchIterator(Object[] btree, Comparator<? super K> comparator, BTree.Dir dir)
1:         this(btree, comparator, dir, 0, size(btree)-1);
1:     BTreeSearchIterator(Object[] btree, Comparator<? super K> comparator, BTree.Dir dir, int lowerBound, int upperBound)
1:         this.forwards = dir == BTree.Dir.ASC;
commit:5250d7f
/////////////////////////////////////////////////////////////////////////
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: import java.util.Iterator;
1: import java.util.NoSuchElementException;
1: import org.apache.cassandra.utils.IndexedSearchIterator;
1: import static org.apache.cassandra.utils.btree.BTree.size;
1: public class BTreeSearchIterator<K, V> extends TreeCursor<K> implements IndexedSearchIterator<K, V>, Iterator<V>
1:     private final boolean forwards;
1:     // for simplicity, we just always use the index feature of the btree to maintain our bounds within the tree,
1:     // whether or not they are constrained
1:     private int index;
1:     private byte state;
1:     private final int lowerBound, upperBound; // inclusive
1: 
1:     private static final int MIDDLE = 0; // only "exists" as an absence of other states
1:     private static final int ON_ITEM = 1; // may only co-exist with LAST (or MIDDLE, which is 0)
1:     private static final int BEFORE_FIRST = 2; // may not coexist with any other state
1:     private static final int LAST = 4; // may co-exist with ON_ITEM, in which case we are also at END
1:     private static final int END = 5; // equal to LAST | ON_ITEM
1: 
0:     public BTreeSearchIterator(Object[] btree, Comparator<? super K> comparator, boolean forwards)
0:         this(btree, comparator, forwards, 0, size(btree)-1);
0:     BTreeSearchIterator(Object[] btree, Comparator<? super K> comparator, boolean forwards, int lowerBound, int upperBound)
1:         super(comparator, btree);
0:         this.forwards = forwards;
1:         this.lowerBound = lowerBound;
1:         this.upperBound = upperBound;
1:         rewind();
1:     }
1: 
1:     /**
1:      * @return 0 if we are on the last item, 1 if we are past the last item, and -1 if we are before it
1:      */
1:     private int compareToLast(int idx)
1:     {
1:         return forwards ? idx - upperBound : lowerBound - idx;
1:     }
1: 
1:     private int compareToFirst(int idx)
1:     {
1:         return forwards ? idx - lowerBound : upperBound - idx;
1:         return state != END;
1:     }
1: 
1:     public V next()
1:     {
1:         switch (state)
1:         {
1:             case ON_ITEM:
1:                 if (compareToLast(index = moveOne(forwards)) >= 0)
1:                     state = END;
1:                 break;
1:             case BEFORE_FIRST:
1:                 seekTo(index = forwards ? lowerBound : upperBound);
1:                 state = (byte) (upperBound == lowerBound ? LAST : MIDDLE);
1:             case LAST:
1:             case MIDDLE:
1:                 state |= ON_ITEM;
1:                 break;
1:             default:
1:                 throw new NoSuchElementException();
1:         }
1: 
1:         return current();
1:     }
1: 
1:     public V next(K target)
1:     {
1:         if (!hasNext())
1:             return null;
1: 
1:         int state = this.state;
0:         int index = seekTo(target, forwards, (state & (ON_ITEM | BEFORE_FIRST)) != 0);
0:         boolean found = index >= 0;
0:         if (!found) index = -1 -index;
1: 
1:         V next = null;
1:         if (state == BEFORE_FIRST && compareToFirst(index) < 0)
1:             return null;
1: 
1:         int compareToLast = compareToLast(index);
1:         if ((compareToLast <= 0))
1:         {
1:             state = compareToLast < 0 ? MIDDLE : LAST;
1:             if (found)
1:             {
1:                 state |= ON_ITEM;
1:                 next = (V) currentValue();
1:             }
1:         }
1:         else state = END;
1: 
1:         this.state = (byte) state;
1:         this.index = index;
1:         return next;
1:     }
1: 
1:     /**
1:      * Reset this Iterator to its starting position
1:      */
1:     public void rewind()
1:     {
1:         if (upperBound < lowerBound)
1:         {
1:             state = (byte) END;
1:         }
1:         else
1:         {
1:             // we don't move into the tree until the first request is made, so we know where to go
1:             reset(forwards);
1:             state = (byte) BEFORE_FIRST;
1:         }
1:     }
1: 
1:     private void checkOnItem()
1:     {
1:         if ((state & ON_ITEM) != ON_ITEM)
1:             throw new NoSuchElementException();
1:     }
1: 
1:     public V current()
1:     {
1:         checkOnItem();
1:         return (V) currentValue();
1:     }
1: 
1:     public int indexOfCurrent()
1:     {
1:         checkOnItem();
1:         return compareToFirst(index);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0:     final boolean forwards;
1: 
0:     public BTreeSearchIterator(Object[] btree, Comparator<CK> comparator, boolean forwards)
0:         if (!forwards)
0:             this.indexes[0] = (byte)(getKeyEnd(path[0]) - 1);
0:         this.forwards = forwards;
0:         // We could probably avoid some of the repetition but leaving that for later.
0:         if (forwards)
0:             while (depth > 0)
0:                 byte successorParentDepth = findSuccessorParentDepth();
0:                 if (successorParentDepth < 0)
0:                     break; // we're in last section of tree, so can only search down
0:                 int successorParentIndex = indexes[successorParentDepth] + 1;
0:                 Object[] successParentNode = path[successorParentDepth];
0:                 Object successorParentKey = successParentNode[successorParentIndex];
0:                 int c = BTree.compare(comparator, target, successorParentKey);
0:                 if (c < 0)
0:                     break;
0:                 if (c == 0)
1:                 {
0:                     depth = successorParentDepth;
0:                     indexes[successorParentDepth]++;
0:                     return (V) successorParentKey;
1:                 }
0:             if (find(comparator, target, Op.CEIL, true))
0:                 return (V) currentKey();
0:         else
1:         {
0:             while (depth > 0)
1:             {
0:                 byte predecessorParentDepth = findPredecessorParentDepth();
0:                 if (predecessorParentDepth < 0)
0:                     break; // we're in last section of tree, so can only search down
0:                 int predecessorParentIndex = indexes[predecessorParentDepth] - 1;
0:                 Object[] predecessParentNode = path[predecessorParentDepth];
0:                 Object predecessorParentKey = predecessParentNode[predecessorParentIndex];
0:                 int c = BTree.compare(comparator, target, predecessorParentKey);
0:                 if (c > 0)
0:                     break;
0:                 if (c == 0)
1:                 {
0:                     depth = predecessorParentDepth;
0:                     indexes[predecessorParentDepth]--;
0:                     return (V) predecessorParentKey;
1:                 }
0:                 depth = predecessorParentDepth;
0:                 indexes[predecessorParentDepth]--;
1:             }
0:             if (find(comparator, target, Op.FLOOR, false))
0:                 return (V) currentKey();
1:         }
0:         return depth != 0 || indexes[0] != (forwards ? getKeyEnd(path[0]) : -1);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6e9140a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
1: package org.apache.cassandra.utils.btree;
1: 
1: import java.util.Comparator;
1: 
0: import org.apache.cassandra.utils.SearchIterator;
1: 
0: import static org.apache.cassandra.utils.btree.BTree.getKeyEnd;
1: 
0: public class BTreeSearchIterator<CK, K extends CK, V> extends Path implements SearchIterator<K, V>
0: {
1: 
0:     final Comparator<CK> comparator;
0:     public BTreeSearchIterator(Object[] btree, Comparator<CK> comparator)
0:     {
0:         init(btree);
0:         this.comparator = comparator;
0:     }
1: 
0:     public V next(K target)
0:     {
0:         while (depth > 0)
0:         {
0:             byte successorParentDepth = findSuccessorParentDepth();
0:             if (successorParentDepth < 0)
0:                 break; // we're in last section of tree, so can only search down
0:             int successorParentIndex = indexes[successorParentDepth] + 1;
0:             Object[] successParentNode = path[successorParentDepth];
0:             Object successorParentKey = successParentNode[successorParentIndex];
0:             int c = BTree.compare(comparator, target, successorParentKey);
0:             if (c < 0)
0:                 break;
0:             if (c == 0)
0:             {
0:                 depth = successorParentDepth;
0:                 indexes[successorParentDepth]++;
0:                 return (V) successorParentKey;
0:             }
0:             depth = successorParentDepth;
0:             indexes[successorParentDepth]++;
0:         }
0:         if (find(comparator, target, Op.CEIL, true))
0:             return (V) currentKey();
0:         return null;
0:     }
1: 
1:     public boolean hasNext()
0:     {
0:         return depth != 0 || indexes[0] != getKeyEnd(path[0]);
0:     }
0: }
============================================================================