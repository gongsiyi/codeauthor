1:e9c6742: /*
1:e9c6742:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9c6742:  * or more contributor license agreements.  See the NOTICE file
1:e9c6742:  * distributed with this work for additional information
1:e9c6742:  * regarding copyright ownership.  The ASF licenses this file
1:e9c6742:  * to you under the Apache License, Version 2.0 (the
1:e9c6742:  * "License"); you may not use this file except in compliance
1:e9c6742:  * with the License.  You may obtain a copy of the License at
1:e9c6742:  *
1:e9c6742:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9c6742:  *
1:e9c6742:  * Unless required by applicable law or agreed to in writing, software
1:e9c6742:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9c6742:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9c6742:  * See the License for the specific language governing permissions and
1:e9c6742:  * limitations under the License.
1:e9c6742:  */
1:fc8b76f: package org.apache.cassandra.serializers;
4:e9c6742: 
1:e9c6742: import org.apache.cassandra.utils.ByteBufferUtil;
1:e9c6742: 
1:e9c6742: import java.math.BigDecimal;
1:e9c6742: import java.math.BigInteger;
1:e9c6742: import java.nio.ByteBuffer;
1:e9c6742: 
1:fc8b76f: public class DecimalSerializer implements TypeSerializer<BigDecimal>
3:e9c6742: {
1:e9c6742:     public static final DecimalSerializer instance = new DecimalSerializer();
1:e9c6742: 
1:daff1fc:     public BigDecimal deserialize(ByteBuffer bytes)
1:e9c6742:     {
1:daff1fc:         if (bytes == null || bytes.remaining() == 0)
1:e9c6742:             return null;
1:e9c6742: 
1:e9c6742:         // do not consume the contents of the ByteBuffer
1:e9c6742:         bytes = bytes.duplicate();
1:e9c6742:         int scale = bytes.getInt();
1:e9c6742:         byte[] bibytes = new byte[bytes.remaining()];
1:e9c6742:         bytes.get(bibytes);
1:e9c6742: 
1:e9c6742:         BigInteger bi = new BigInteger(bibytes);
1:e9c6742:         return new BigDecimal(bi, scale);
3:e9c6742:     }
1:e9c6742: 
1:daff1fc:     public ByteBuffer serialize(BigDecimal value)
1:e9c6742:     {
1:e9c6742:         if (value == null)
1:e9c6742:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:e9c6742: 
1:e9c6742:         BigInteger bi = value.unscaledValue();
1:dbe53c8:         int scale = value.scale();
1:e9c6742:         byte[] bibytes = bi.toByteArray();
1:e9c6742: 
1:dbe53c8:         ByteBuffer bytes = ByteBuffer.allocate(4 + bibytes.length);
1:dbe53c8:         bytes.putInt(scale);
1:dbe53c8:         bytes.put(bibytes);
1:dbe53c8:         bytes.rewind();
1:dbe53c8:         return bytes;
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public void validate(ByteBuffer bytes) throws MarshalException
1:e9c6742:     {
1:daff1fc:         // We at least store the scale.
1:daff1fc:         if (bytes.remaining() != 0 && bytes.remaining() < 4)
1:daff1fc:             throw new MarshalException(String.format("Expected 0 or at least 4 bytes (%d)", bytes.remaining()));
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public String toString(BigDecimal value)
1:e9c6742:     {
1:e9c6742:         return value == null ? "" : value.toPlainString();
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public Class<BigDecimal> getType()
1:e9c6742:     {
1:e9c6742:         return BigDecimal.class;
1:e9c6742:     }
1:e9c6742: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:dbe53c8
/////////////////////////////////////////////////////////////////////////
1:         int scale = value.scale();
1:         ByteBuffer bytes = ByteBuffer.allocate(4 + bibytes.length);
1:         bytes.putInt(scale);
1:         bytes.put(bibytes);
1:         bytes.rewind();
1:         return bytes;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     public BigDecimal deserialize(ByteBuffer bytes)
1:         if (bytes == null || bytes.remaining() == 0)
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer serialize(BigDecimal value)
/////////////////////////////////////////////////////////////////////////
1:         // We at least store the scale.
1:         if (bytes.remaining() != 0 && bytes.remaining() < 4)
1:             throw new MarshalException(String.format("Expected 0 or at least 4 bytes (%d)", bytes.remaining()));
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
/////////////////////////////////////////////////////////////////////////
1: public class DecimalSerializer implements TypeSerializer<BigDecimal>
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.type;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: import java.nio.ByteBuffer;
1: 
0: public class DecimalSerializer extends AbstractSerializer<BigDecimal>
1: {
1:     public static final DecimalSerializer instance = new DecimalSerializer();
1: 
0:     @Override
0:     public BigDecimal serialize(ByteBuffer bytes)
1:     {
0:         if (bytes == null)
1:             return null;
1: 
1:         // do not consume the contents of the ByteBuffer
1:         bytes = bytes.duplicate();
1:         int scale = bytes.getInt();
1:         byte[] bibytes = new byte[bytes.remaining()];
1:         bytes.get(bibytes);
1: 
1:         BigInteger bi = new BigInteger(bibytes);
1:         return new BigDecimal(bi, scale);
1:     }
1: 
0:     @Override
0:     public ByteBuffer deserialize(BigDecimal value)
1:     {
1:         if (value == null)
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
1:         BigInteger bi = value.unscaledValue();
0:         Integer scale = value.scale();
1:         byte[] bibytes = bi.toByteArray();
0:         byte[] sbytes = ByteBufferUtil.bytes(scale).array();
0:         byte[] bytes = new byte[bi.toByteArray().length + 4];
1: 
0:         for (int i = 0; i < 4; i++)
0:             bytes[i] = sbytes[i];
0:         for (int i = 4; i < bibytes.length + 4; i++)
0:             bytes[i] = bibytes[i - 4];
1: 
0:         return ByteBuffer.wrap(bytes);
1:     }
1: 
0:     @Override
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
0:         // no useful check for invalid decimals.
1:     }
1: 
0:     @Override
0:     public String getString(ByteBuffer bytes)
1:     {
0:         if (bytes.remaining() == 0)
1:         {
0:             return "";
1:         }
0:         return serialize(bytes).toPlainString();
1:     }
1: 
0:     @Override
1:     public String toString(BigDecimal value)
1:     {
1:         return value == null ? "" : value.toPlainString();
1:     }
1: 
0:     @Override
1:     public Class<BigDecimal> getType()
1:     {
1:         return BigDecimal.class;
1:     }
1: }
============================================================================