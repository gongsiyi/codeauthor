1:b7a173a: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:b7a173a: package org.apache.cassandra.db.compaction;
4:b7a173a: 
1:b31845c: import java.util.Collections;
1:b7a173a: import java.util.HashSet;
1:a991b64: import java.util.Set;
1:b7a173a: 
1:d2a3827: import org.junit.BeforeClass;
1:b7a173a: import org.junit.Test;
1:6bbb13b: 
1:438acfc: import org.apache.cassandra.SchemaLoader;
1:a991b64: import org.apache.cassandra.Util;
1:a991b64: import org.apache.cassandra.db.ColumnFamilyStore;
1:0e96e58: import org.apache.cassandra.db.Keyspace;
1:a991b64: import org.apache.cassandra.db.RowUpdateBuilder;
1:d2a3827: import org.apache.cassandra.exceptions.ConfigurationException;
1:b31845c: import org.apache.cassandra.schema.CompactionParams;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:b7a173a: import org.apache.cassandra.utils.ByteBufferUtil;
1:b7a173a: 
1:a991b64: import static org.junit.Assert.assertEquals;
1:a991b64: 
1:b7a173a: 
1:d2a3827: public class OneCompactionTest
1:b7a173a: {
1:d2a3827:     public static final String KEYSPACE1 = "OneCompactionTest";
1:d2a3827:     private static final String CF_STANDARD1 = "Standard1";
1:d2a3827:     private static final String CF_STANDARD2 = "Standard2";
1:d2a3827: 
1:d2a3827:     @BeforeClass
1:d2a3827:     public static void defineSchema() throws ConfigurationException
1:d2a3827:     {
1:d2a3827:         SchemaLoader.prepareServer();
1:d2a3827:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:b31845c:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1)
1:b31845c:                                                 .compaction(CompactionParams.lcs(Collections.singletonMap("sstable_size_in_mb", "1"))),
1:d2a3827:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD2));
1:d2a3827:     }
1:d2a3827: 
1:c87b6a3:     private void testCompaction(String columnFamilyName, int insertsPerTable)
1:b7a173a:     {
1:b7a173a:         CompactionManager.instance.disableAutoCompaction();
1:b7a173a: 
1:d2a3827:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:0e96e58:         ColumnFamilyStore store = keyspace.getColumnFamilyStore(columnFamilyName);
1:b7a173a: 
1:a991b64:         Set<String> inserted = new HashSet<>();
1:b7a173a:         for (int j = 0; j < insertsPerTable; j++) {
1:a991b64:             String key = String.valueOf(j);
1:a991b64:             new RowUpdateBuilder(store.metadata, j, key)
1:a991b64:                 .clustering("0")
1:a991b64:                 .add("val", ByteBufferUtil.EMPTY_BYTE_BUFFER)
1:a991b64:                 .build()
1:a991b64:                 .applyUnsafe();
1:a991b64: 
1:b7a173a:             inserted.add(key);
1:b7a173a:             store.forceBlockingFlush();
1:a991b64:             assertEquals(inserted.size(), Util.getAll(Util.cmd(store).build()).size());
1:b7a173a:         }
1:910170c:         CompactionManager.instance.performMaximal(store, false);
1:ad8cad7:         assertEquals(1, store.getLiveSSTables().size());
1:b7a173a:     }
1:b7a173a: 
1:b7a173a:     @Test
1:c87b6a3:     public void testCompaction1()
1:b7a173a:     {
1:b7a173a:         testCompaction("Standard1", 1);
1:b7a173a:     }
1:b7a173a: 
1:b7a173a:     @Test
1:c87b6a3:     public void testCompaction2()
1:b7a173a:     {
1:b7a173a:         testCompaction("Standard2", 2);
1:b7a173a:     }
1:b7a173a: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.CompactionParams;
/////////////////////////////////////////////////////////////////////////
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1)
1:                                                 .compaction(CompactionParams.lcs(Collections.singletonMap("sstable_size_in_mb", "1"))),
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.cassandra.db.*;
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation("Keyspace1", key.key);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
0:         Keyspace keyspace = Keyspace.open("Keyspace1");
1:         ColumnFamilyStore store = keyspace.getColumnFamilyStore(columnFamilyName);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ad8cad7
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, store.getLiveSSTables().size());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: import java.util.Map;
1: import java.util.Set;
0: import com.google.common.collect.Iterables;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.RowUpdateBuilder;
0: import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:         Set<String> inserted = new HashSet<>();
1:             String key = String.valueOf(j);
1:             new RowUpdateBuilder(store.metadata, j, key)
1:                 .clustering("0")
1:                 .add("val", ByteBufferUtil.EMPTY_BYTE_BUFFER)
1:                 .build()
1:                 .applyUnsafe();
1: 
1:             assertEquals(inserted.size(), Util.getAll(Util.cmd(store).build()).size());
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:             rm.add(columnFamilyName, Util.cellname("0"), ByteBufferUtil.EMPTY_BYTE_BUFFER, j);
commit:3a005df
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             rm.add(columnFamilyName, ByteBufferUtil.bytes("0"), ByteBufferUtil.EMPTY_BYTE_BUFFER, j);
commit:438acfc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.SchemaLoader;
0: public class OneCompactionTest extends SchemaLoader
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:910170c
/////////////////////////////////////////////////////////////////////////
1:         CompactionManager.instance.performMaximal(store, false);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c87b6a3
/////////////////////////////////////////////////////////////////////////
1:     private void testCompaction(String columnFamilyName, int insertsPerTable)
/////////////////////////////////////////////////////////////////////////
1:     public void testCompaction1()
1:     public void testCompaction2()
commit:9639f95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private void testCompaction(String columnFamilyName, int insertsPerTable) throws ExecutionException, InterruptedException
/////////////////////////////////////////////////////////////////////////
0:     public void testCompaction1() throws ExecutionException, InterruptedException
0:     public void testCompaction2() throws ExecutionException, InterruptedException
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
author:lyubent
-------------------------------------------------------------------------------
commit:b453f08
/////////////////////////////////////////////////////////////////////////
0:             rm.applyUnsafe();
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.Map;
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: public class OneCompactionTest
1:     public static final String KEYSPACE1 = "OneCompactionTest";
1:     private static final String CF_STANDARD1 = "Standard1";
1:     private static final String CF_STANDARD2 = "Standard2";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
0:         Map<String, String> leveledOptions = new HashMap<>();
0:         leveledOptions.put("sstable_size_in_mb", "1");
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1).compactionStrategyOptions(leveledOptions),
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD2));
1:     }
1: 
1:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
0:             Mutation rm = new Mutation(KEYSPACE1, key.getKey());
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation("Keyspace1", key.getKey());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e70e733
/////////////////////////////////////////////////////////////////////////
0:         CompactionManager.instance.performMaximal(store);
commit:b7a173a
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
1: package org.apache.cassandra.db.compaction;
1: 
0: import java.io.IOException;
0: import java.util.concurrent.ExecutionException;
0: import java.util.Set;
1: import java.util.HashSet;
1: 
0: import org.apache.cassandra.Util;
1: 
1: import org.junit.Test;
1: 
0: import static junit.framework.Assert.assertEquals;
0: import org.apache.cassandra.db.Table;
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.RowMutation;
0: import org.apache.cassandra.db.ColumnFamilyStore;
1: 
0: import org.apache.cassandra.db.filter.QueryPath;
0: import org.apache.cassandra.CleanupHelper;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: 
0: public class OneCompactionTest extends CleanupHelper
1: {
0:     private void testCompaction(String columnFamilyName, int insertsPerTable) throws IOException, ExecutionException, InterruptedException
1:     {
1:         CompactionManager.instance.disableAutoCompaction();
1: 
0:         Table table = Table.open("Keyspace1");
0:         ColumnFamilyStore store = table.getColumnFamilyStore(columnFamilyName);
1: 
0:         Set<DecoratedKey> inserted = new HashSet<DecoratedKey>();
1:         for (int j = 0; j < insertsPerTable; j++) {
0:             DecoratedKey key = Util.dk(String.valueOf(j));
0:             RowMutation rm = new RowMutation("Keyspace1", key.key);
0:             rm.add(new QueryPath(columnFamilyName, null, ByteBufferUtil.bytes("0")), ByteBufferUtil.EMPTY_BYTE_BUFFER, j);
0:             rm.apply();
1:             inserted.add(key);
1:             store.forceBlockingFlush();
0:             assertEquals(inserted.size(), Util.getRangeSlice(store).size());
1:         }
0:         CompactionManager.instance.performMajor(store);
0:         assertEquals(1, store.getSSTables().size());
1:     }
1: 
1:     @Test
0:     public void testCompaction1() throws IOException, ExecutionException, InterruptedException
1:     {
1:         testCompaction("Standard1", 1);
1:     }
1: 
1:     @Test
0:     public void testCompaction2() throws IOException, ExecutionException, InterruptedException
1:     {
1:         testCompaction("Standard2", 2);
1:     }
1: }
============================================================================