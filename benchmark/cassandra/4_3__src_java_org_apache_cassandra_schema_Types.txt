1:2f2b58d: /*
1:2f2b58d:  * Licensed to the Apache Software Foundation (ASF) under one
1:2f2b58d:  * or more contributor license agreements.  See the NOTICE file
1:2f2b58d:  * distributed with this work for additional information
1:2f2b58d:  * regarding copyright ownership.  The ASF licenses this file
1:2f2b58d:  * to you under the Apache License, Version 2.0 (the
1:2f2b58d:  * "License"); you may not use this file except in compliance
1:2f2b58d:  * with the License.  You may obtain a copy of the License at
1:2f2b58d:  *
1:2f2b58d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2f2b58d:  *
1:2f2b58d:  * Unless required by applicable law or agreed to in writing, software
1:2f2b58d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f2b58d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f2b58d:  * See the License for the specific language governing permissions and
1:2f2b58d:  * limitations under the License.
1:2f2b58d:  */
1:2f2b58d: package org.apache.cassandra.schema;
2:2f2b58d: 
1:2f2b58d: import java.nio.ByteBuffer;
1:340df43: import java.util.*;
1:2f2b58d: 
1:2f2b58d: import javax.annotation.Nullable;
1:2f2b58d: 
1:677230d: import com.google.common.collect.*;
1:2f2b58d: 
1:4ed0060: import org.apache.cassandra.cql3.FieldIdentifier;
1:340df43: import org.apache.cassandra.cql3.CQL3Type;
1:340df43: import org.apache.cassandra.db.marshal.AbstractType;
1:2f2b58d: import org.apache.cassandra.db.marshal.UserType;
1:d877ba0: import org.apache.cassandra.exceptions.ConfigurationException;
1:2f2b58d: 
1:d877ba0: import static java.lang.String.format;
1:2f2b58d: import static com.google.common.collect.Iterables.filter;
1:340df43: import static java.util.stream.Collectors.toList;
1:340df43: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:2f2b58d: 
1:2f2b58d: /**
1:2f2b58d:  * An immutable container for a keyspace's UDTs.
1:2f2b58d:  */
1:2f2b58d: public final class Types implements Iterable<UserType>
1:2f2b58d: {
1:340df43:     private static final Types NONE = new Types(ImmutableMap.of());
1:340df43: 
1:340df43:     private final Map<ByteBuffer, UserType> types;
1:2f2b58d: 
1:2f2b58d:     private Types(Builder builder)
1:2f2b58d:     {
1:2f2b58d:         types = builder.types.build();
1:2f2b58d:     }
1:d877ba0: 
1:340df43:     /*
1:340df43:      * For use in RawBuilder::build only.
1:340df43:      */
1:340df43:     private Types(Map<ByteBuffer, UserType> types)
1:340df43:     {
1:340df43:         this.types = types;
1:340df43:     }
1:340df43: 
1:2f2b58d:     public static Builder builder()
1:2f2b58d:     {
1:2f2b58d:         return new Builder();
1:2f2b58d:     }
1:2f2b58d: 
1:340df43:     public static RawBuilder rawBuilder(String keyspace)
1:340df43:     {
1:340df43:         return new RawBuilder(keyspace);
1:340df43:     }
1:340df43: 
1:2f2b58d:     public static Types none()
1:2f2b58d:     {
1:340df43:         return NONE;
1:2f2b58d:     }
1:2f2b58d: 
1:7d6c876:     public static Types of(UserType... types)
1:7d6c876:     {
1:7d6c876:         return builder().add(types).build();
1:7d6c876:     }
1:7d6c876: 
1:2f2b58d:     public Iterator<UserType> iterator()
1:2f2b58d:     {
1:2f2b58d:         return types.values().iterator();
1:2f2b58d:     }
1:2f2b58d: 
1:2f2b58d:     /**
1:2f2b58d:      * Get the type with the specified name
1:2f2b58d:      *
1:2f2b58d:      * @param name a non-qualified type name
1:2f2b58d:      * @return an empty {@link Optional} if the type name is not found; a non-empty optional of {@link UserType} otherwise
1:2f2b58d:      */
1:2f2b58d:     public Optional<UserType> get(ByteBuffer name)
1:2f2b58d:     {
1:2f2b58d:         return Optional.ofNullable(types.get(name));
1:2f2b58d:     }
1:2f2b58d: 
1:2f2b58d:     /**
1:2f2b58d:      * Get the type with the specified name
1:2f2b58d:      *
1:2f2b58d:      * @param name a non-qualified type name
1:2f2b58d:      * @return null if the type name is not found; the found {@link UserType} otherwise
1:2f2b58d:      */
1:2f2b58d:     @Nullable
1:2f2b58d:     public UserType getNullable(ByteBuffer name)
1:2f2b58d:     {
1:2f2b58d:         return types.get(name);
1:2f2b58d:     }
1:2f2b58d: 
1:2f2b58d:     /**
1:2f2b58d:      * Create a Types instance with the provided type added
1:2f2b58d:      */
1:2f2b58d:     public Types with(UserType type)
1:2f2b58d:     {
1:2f2b58d:         if (get(type.name).isPresent())
1:d877ba0:             throw new IllegalStateException(format("Type %s already exists", type.name));
1:2f2b58d: 
1:2f2b58d:         return builder().add(this).add(type).build();
1:2f2b58d:     }
1:2f2b58d: 
1:2f2b58d:     /**
1:2f2b58d:      * Creates a Types instance with the type with the provided name removed
1:2f2b58d:      */
1:2f2b58d:     public Types without(ByteBuffer name)
1:2f2b58d:     {
1:2f2b58d:         UserType type =
1:d877ba0:             get(name).orElseThrow(() -> new IllegalStateException(format("Type %s doesn't exists", name)));
1:2f2b58d: 
1:2f2b58d:         return builder().add(filter(this, t -> t != type)).build();
1:2f2b58d:     }
1:2f2b58d: 
1:340df43:     MapDifference<ByteBuffer, UserType> diff(Types other)
1:340df43:     {
1:340df43:         return Maps.difference(types, other.types);
1:340df43:     }
1:340df43: 
1:d877ba0:     @Override
1:2f2b58d:     public boolean equals(Object o)
1:2f2b58d:     {
1:677230d:         if (this == o)
1:677230d:             return true;
1:677230d: 
1:677230d:         if (!(o instanceof Types))
1:677230d:             return false;
1:677230d: 
1:677230d:         Types other = (Types) o;
1:677230d: 
1:677230d:         if (types.size() != other.types.size())
1:677230d:             return false;
1:677230d: 
1:677230d:         Iterator<Map.Entry<ByteBuffer, UserType>> thisIter = this.types.entrySet().iterator();
1:677230d:         Iterator<Map.Entry<ByteBuffer, UserType>> otherIter = other.types.entrySet().iterator();
1:677230d:         while (thisIter.hasNext())
1:677230d:         {
1:677230d:             Map.Entry<ByteBuffer, UserType> thisNext = thisIter.next();
1:677230d:             Map.Entry<ByteBuffer, UserType> otherNext = otherIter.next();
1:677230d:             if (!thisNext.getKey().equals(otherNext.getKey()))
1:677230d:                 return false;
1:677230d: 
1:677230d:             if (!thisNext.getValue().equals(otherNext.getValue(), true))  // ignore freezing
1:677230d:                 return false;
1:677230d:         }
1:677230d:         return true;
1:2f2b58d:     }
1:2f2b58d: 
1:2f2b58d:     @Override
1:d877ba0:     public int hashCode()
1:d877ba0:     {
1:2f2b58d:         return types.hashCode();
1:2f2b58d:     }
1:2f2b58d: 
1:2f2b58d:     @Override
1:2f2b58d:     public String toString()
1:2f2b58d:     {
1:2f2b58d:         return types.values().toString();
1:2f2b58d:     }
1:2f2b58d: 
1:2f2b58d:     public static final class Builder
1:2f2b58d:     {
1:677230d:         final ImmutableSortedMap.Builder<ByteBuffer, UserType> types = ImmutableSortedMap.naturalOrder();
1:2f2b58d: 
1:2f2b58d:         private Builder()
1:2f2b58d:         {
1:2f2b58d:         }
1:2f2b58d: 
1:2f2b58d:         public Types build()
1:2f2b58d:         {
1:2f2b58d:             return new Types(this);
1:2f2b58d:         }
1:2f2b58d: 
1:2f2b58d:         public Builder add(UserType type)
1:2f2b58d:         {
1:677230d:             assert type.isMultiCell();
1:2f2b58d:             types.put(type.name, type);
1:2f2b58d:             return this;
1:2f2b58d:         }
1:340df43: 
1:7d6c876:         public Builder add(UserType... types)
1:7d6c876:         {
1:7d6c876:             for (UserType type : types)
1:7d6c876:                 add(type);
1:7d6c876:             return this;
1:7d6c876:         }
1:340df43: 
1:2f2b58d:         public Builder add(Iterable<UserType> types)
1:2f2b58d:         {
1:2f2b58d:             types.forEach(this::add);
1:2f2b58d:             return this;
1:2f2b58d:         }
1:2f2b58d:     }
1:7d6c876: 
1:340df43:     public static final class RawBuilder
1:340df43:     {
1:340df43:         final String keyspace;
1:340df43:         final List<RawUDT> definitions;
1:340df43: 
1:340df43:         private RawBuilder(String keyspace)
1:340df43:         {
1:340df43:             this.keyspace = keyspace;
1:340df43:             this.definitions = new ArrayList<>();
1:340df43:         }
1:340df43: 
1:340df43:         /**
1:340df43:          * Build a Types instance from Raw definitions.
1:340df43:          *
1:340df43:          * Constructs a DAG of graph dependencies and resolves them 1 by 1 in topological order.
1:340df43:          */
1:340df43:         public Types build()
1:340df43:         {
1:340df43:             if (definitions.isEmpty())
1:340df43:                 return Types.none();
1:340df43: 
1:340df43:             /*
1:340df43:              * build a DAG of UDT dependencies
1:340df43:              */
1:d877ba0:             Map<RawUDT, Integer> vertices = new HashMap<>(); // map values are numbers of referenced types
1:d877ba0:             for (RawUDT udt : definitions)
1:d877ba0:                 vertices.put(udt, 0);
1:340df43: 
1:d877ba0:             Multimap<RawUDT, RawUDT> adjacencyList = HashMultimap.create();
1:d877ba0:             for (RawUDT udt1 : definitions)
1:340df43:                 for (RawUDT udt2 : definitions)
1:d877ba0:                     if (udt1 != udt2 && udt1.referencesUserType(udt2))
1:d877ba0:                         adjacencyList.put(udt2, udt1);
1:340df43: 
1:340df43:             /*
1:d877ba0:              * resolve dependencies in topological order, using Kahn's algorithm
1:340df43:              */
1:d877ba0:             adjacencyList.values().forEach(vertex -> vertices.put(vertex, vertices.get(vertex) + 1));
1:340df43: 
1:d877ba0:             Queue<RawUDT> resolvableTypes = new LinkedList<>(); // UDTs with 0 dependencies
1:d877ba0:             for (Map.Entry<RawUDT, Integer> entry : vertices.entrySet())
1:d877ba0:                 if (entry.getValue() == 0)
1:d877ba0:                     resolvableTypes.add(entry.getKey());
1:d877ba0: 
1:d877ba0:             Types types = new Types(new HashMap<>());
1:d877ba0:             while (!resolvableTypes.isEmpty())
1:340df43:             {
1:d877ba0:                 RawUDT vertex = resolvableTypes.remove();
1:d877ba0: 
1:d877ba0:                 for (RawUDT dependentType : adjacencyList.get(vertex))
1:d877ba0:                     if (vertices.replace(dependentType, vertices.get(dependentType) - 1) == 1)
1:d877ba0:                         resolvableTypes.add(dependentType);
1:d877ba0: 
1:d877ba0:                 UserType udt = vertex.prepare(keyspace, types);
1:340df43:                 types.types.put(udt.name, udt);
1:340df43:             }
1:340df43: 
1:d877ba0:             if (types.types.size() != definitions.size())
1:d877ba0:                 throw new ConfigurationException(format("Cannot resolve UDTs for keyspace %s: some types are missing", keyspace));
1:d877ba0: 
1:340df43:             /*
1:340df43:              * return an immutable copy
1:340df43:              */
1:340df43:             return Types.builder().add(types).build();
1:340df43:         }
1:340df43: 
1:454f32d:         public void add(String name, List<String> fieldNames, List<String> fieldTypes)
1:340df43:         {
1:340df43:             List<CQL3Type.Raw> rawFieldTypes =
1:340df43:                 fieldTypes.stream()
1:340df43:                           .map(CQLTypeParser::parseRaw)
1:340df43:                           .collect(toList());
1:340df43: 
1:340df43:             definitions.add(new RawUDT(name, fieldNames, rawFieldTypes));
1:340df43:         }
1:340df43: 
1:340df43:         private static final class RawUDT
1:340df43:         {
1:340df43:             final String name;
1:340df43:             final List<String> fieldNames;
1:340df43:             final List<CQL3Type.Raw> fieldTypes;
1:340df43: 
1:340df43:             RawUDT(String name, List<String> fieldNames, List<CQL3Type.Raw> fieldTypes)
1:340df43:             {
1:340df43:                 this.name = name;
1:340df43:                 this.fieldNames = fieldNames;
1:340df43:                 this.fieldTypes = fieldTypes;
1:340df43:             }
1:340df43: 
1:d877ba0:             boolean referencesUserType(RawUDT other)
1:340df43:             {
1:d877ba0:                 return fieldTypes.stream().anyMatch(t -> t.referencesUserType(other.name));
1:340df43:             }
1:340df43: 
1:340df43:             UserType prepare(String keyspace, Types types)
1:340df43:             {
1:4ed0060:                 List<FieldIdentifier> preparedFieldNames =
1:340df43:                     fieldNames.stream()
1:4ed0060:                               .map(t -> FieldIdentifier.forInternalString(t))
1:340df43:                               .collect(toList());
1:340df43: 
1:340df43:                 List<AbstractType<?>> preparedFieldTypes =
1:340df43:                     fieldTypes.stream()
1:18e2fca:                               .map(t -> t.prepareInternal(keyspace, types).getType())
1:340df43:                               .collect(toList());
1:340df43: 
1:677230d:                 return new UserType(keyspace, bytes(name), preparedFieldNames, preparedFieldTypes, true);
1:340df43:             }
1:2f2b58d: 
1:2f2b58d:             @Override
1:2f2b58d:             public int hashCode()
1:2f2b58d:             {
1:d877ba0:                 return name.hashCode();
1:d877ba0:             }
1:d877ba0: 
1:d877ba0:             @Override
1:d877ba0:             public boolean equals(Object other)
1:d877ba0:             {
1:d877ba0:                 return name.equals(((RawUDT) other).name);
1:d877ba0:             }
1:340df43:         }
1:340df43:     }
1:2f2b58d: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.FieldIdentifier;
/////////////////////////////////////////////////////////////////////////
1:                 List<FieldIdentifier> preparedFieldNames =
1:                               .map(t -> FieldIdentifier.forInternalString(t))
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.*;
/////////////////////////////////////////////////////////////////////////
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof Types))
1:             return false;
1: 
1:         Types other = (Types) o;
1: 
1:         if (types.size() != other.types.size())
1:             return false;
1: 
1:         Iterator<Map.Entry<ByteBuffer, UserType>> thisIter = this.types.entrySet().iterator();
1:         Iterator<Map.Entry<ByteBuffer, UserType>> otherIter = other.types.entrySet().iterator();
1:         while (thisIter.hasNext())
1:         {
1:             Map.Entry<ByteBuffer, UserType> thisNext = thisIter.next();
1:             Map.Entry<ByteBuffer, UserType> otherNext = otherIter.next();
1:             if (!thisNext.getKey().equals(otherNext.getKey()))
1:                 return false;
1: 
1:             if (!thisNext.getValue().equals(otherNext.getValue(), true))  // ignore freezing
1:                 return false;
1:         }
1:         return true;
/////////////////////////////////////////////////////////////////////////
1:         final ImmutableSortedMap.Builder<ByteBuffer, UserType> types = ImmutableSortedMap.naturalOrder();
/////////////////////////////////////////////////////////////////////////
1:             assert type.isMultiCell();
/////////////////////////////////////////////////////////////////////////
1:                 return new UserType(keyspace, bytes(name), preparedFieldNames, preparedFieldTypes, true);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:d877ba0
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.HashMultimap;
0: import com.google.common.collect.Multimap;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import static java.lang.String.format;
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalStateException(format("Type %s already exists", type.name));
/////////////////////////////////////////////////////////////////////////
1:             get(name).orElseThrow(() -> new IllegalStateException(format("Type %s doesn't exists", name)));
/////////////////////////////////////////////////////////////////////////
1:             Map<RawUDT, Integer> vertices = new HashMap<>(); // map values are numbers of referenced types
1:             for (RawUDT udt : definitions)
1:                 vertices.put(udt, 0);
1:             Multimap<RawUDT, RawUDT> adjacencyList = HashMultimap.create();
1:             for (RawUDT udt1 : definitions)
1:                     if (udt1 != udt2 && udt1.referencesUserType(udt2))
1:                         adjacencyList.put(udt2, udt1);
1:              * resolve dependencies in topological order, using Kahn's algorithm
1:             adjacencyList.values().forEach(vertex -> vertices.put(vertex, vertices.get(vertex) + 1));
1:             Queue<RawUDT> resolvableTypes = new LinkedList<>(); // UDTs with 0 dependencies
1:             for (Map.Entry<RawUDT, Integer> entry : vertices.entrySet())
1:                 if (entry.getValue() == 0)
1:                     resolvableTypes.add(entry.getKey());
1: 
1:             Types types = new Types(new HashMap<>());
1:             while (!resolvableTypes.isEmpty())
1:                 RawUDT vertex = resolvableTypes.remove();
1: 
1:                 for (RawUDT dependentType : adjacencyList.get(vertex))
1:                     if (vertices.replace(dependentType, vertices.get(dependentType) - 1) == 1)
1:                         resolvableTypes.add(dependentType);
1: 
1:                 UserType udt = vertex.prepare(keyspace, types);
1:             if (types.types.size() != definitions.size())
1:                 throw new ConfigurationException(format("Cannot resolve UDTs for keyspace %s: some types are missing", keyspace));
1: 
/////////////////////////////////////////////////////////////////////////
1:             boolean referencesUserType(RawUDT other)
1:                 return fieldTypes.stream().anyMatch(t -> t.referencesUserType(other.name));
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
1:             public int hashCode()
1:             {
1:                 return name.hashCode();
1:             }
1: 
1:             @Override
1:             public boolean equals(Object other)
1:             {
1:                 return name.equals(((RawUDT) other).name);
1:             }
commit:454f32d
/////////////////////////////////////////////////////////////////////////
1:         public void add(String name, List<String> fieldNames, List<String> fieldTypes)
commit:18e2fca
/////////////////////////////////////////////////////////////////////////
1:                               .map(t -> t.prepareInternal(keyspace, types).getType())
commit:340df43
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
0: import com.google.common.collect.MapDifference;
0: import com.google.common.collect.Maps;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.jgrapht.graph.DefaultDirectedGraph;
0: import org.jgrapht.graph.DefaultEdge;
0: import org.jgrapht.traverse.TopologicalOrderIterator;
1: import static java.util.stream.Collectors.toList;
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:     private static final Types NONE = new Types(ImmutableMap.of());
1: 
1:     private final Map<ByteBuffer, UserType> types;
1:     /*
1:      * For use in RawBuilder::build only.
1:      */
1:     private Types(Map<ByteBuffer, UserType> types)
1:     {
1:         this.types = types;
1:     }
1: 
1:     public static RawBuilder rawBuilder(String keyspace)
1:     {
1:         return new RawBuilder(keyspace);
1:     }
1: 
1:         return NONE;
/////////////////////////////////////////////////////////////////////////
1:     MapDifference<ByteBuffer, UserType> diff(Types other)
1:     {
1:         return Maps.difference(types, other.types);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         final ImmutableMap.Builder<ByteBuffer, UserType> types = ImmutableMap.builder();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static final class RawBuilder
1:     {
1:         final String keyspace;
1:         final List<RawUDT> definitions;
1: 
1:         private RawBuilder(String keyspace)
1:         {
1:             this.keyspace = keyspace;
1:             this.definitions = new ArrayList<>();
1:         }
1: 
1:         /**
1:          * Build a Types instance from Raw definitions.
1:          *
1:          * Constructs a DAG of graph dependencies and resolves them 1 by 1 in topological order.
1:          */
1:         public Types build()
1:         {
1:             if (definitions.isEmpty())
1:                 return Types.none();
1: 
1:             /*
1:              * build a DAG of UDT dependencies
1:              */
0:             DefaultDirectedGraph<RawUDT, DefaultEdge> graph = new DefaultDirectedGraph<>(DefaultEdge.class);
1: 
0:             definitions.forEach(graph::addVertex);
1: 
0:             for (RawUDT udt1: definitions)
1:                 for (RawUDT udt2 : definitions)
0:                     if (udt1 != udt2 && udt1.referencesUserType(udt2.name))
0:                         graph.addEdge(udt2, udt1);
1: 
1:             /*
0:              * iterate in topological order,
1:              */
0:             Types types = new Types(new HashMap<>());
1: 
0:             TopologicalOrderIterator<RawUDT, DefaultEdge> iterator = new TopologicalOrderIterator<>(graph);
0:             while (iterator.hasNext())
1:             {
0:                 UserType udt = iterator.next().prepare(keyspace, types); // will throw InvalidRequestException if meets an unknown type
1:                 types.types.put(udt.name, udt);
1:             }
1: 
1:             /*
1:              * return an immutable copy
1:              */
1:             return Types.builder().add(types).build();
1:         }
1: 
0:         void add(String name, List<String> fieldNames, List<String> fieldTypes)
1:         {
1:             List<CQL3Type.Raw> rawFieldTypes =
1:                 fieldTypes.stream()
1:                           .map(CQLTypeParser::parseRaw)
1:                           .collect(toList());
1: 
1:             definitions.add(new RawUDT(name, fieldNames, rawFieldTypes));
1:         }
1: 
1:         private static final class RawUDT
1:         {
1:             final String name;
1:             final List<String> fieldNames;
1:             final List<CQL3Type.Raw> fieldTypes;
1: 
1:             RawUDT(String name, List<String> fieldNames, List<CQL3Type.Raw> fieldTypes)
1:             {
1:                 this.name = name;
1:                 this.fieldNames = fieldNames;
1:                 this.fieldTypes = fieldTypes;
1:             }
1: 
0:             boolean referencesUserType(String typeName)
1:             {
0:                 return fieldTypes.stream().anyMatch(t -> t.referencesUserType(typeName));
1:             }
1: 
1:             UserType prepare(String keyspace, Types types)
1:             {
0:                 List<ByteBuffer> preparedFieldNames =
1:                     fieldNames.stream()
0:                               .map(ByteBufferUtil::bytes)
1:                               .collect(toList());
1: 
1:                 List<AbstractType<?>> preparedFieldTypes =
1:                     fieldTypes.stream()
0:                               .map(t -> t.prepare(keyspace, types).getType())
1:                               .collect(toList());
1: 
0:                 return new UserType(keyspace, bytes(name), preparedFieldNames, preparedFieldTypes);
1:             }
1:         }
1:     }
commit:7d6c876
/////////////////////////////////////////////////////////////////////////
1:     public static Types of(UserType... types)
1:     {
1:         return builder().add(types).build();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         public Builder add(UserType... types)
1:         {
1:             for (UserType type : types)
1:                 add(type);
1:             return this;
1:         }
1: 
commit:2f2b58d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.Iterator;
0: import java.util.Optional;
1: 
1: import javax.annotation.Nullable;
1: 
0: import com.google.common.collect.ImmutableMap;
1: 
1: import org.apache.cassandra.db.marshal.UserType;
1: 
1: import static com.google.common.collect.Iterables.filter;
1: 
1: /**
1:  * An immutable container for a keyspace's UDTs.
1:  */
1: public final class Types implements Iterable<UserType>
1: {
0:     private final ImmutableMap<ByteBuffer, UserType> types;
1: 
1:     private Types(Builder builder)
1:     {
1:         types = builder.types.build();
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static Types none()
1:     {
0:         return builder().build();
1:     }
1: 
1:     public Iterator<UserType> iterator()
1:     {
1:         return types.values().iterator();
1:     }
1: 
1:     /**
1:      * Get the type with the specified name
1:      *
1:      * @param name a non-qualified type name
1:      * @return an empty {@link Optional} if the type name is not found; a non-empty optional of {@link UserType} otherwise
1:      */
1:     public Optional<UserType> get(ByteBuffer name)
1:     {
1:         return Optional.ofNullable(types.get(name));
1:     }
1: 
1:     /**
1:      * Get the type with the specified name
1:      *
1:      * @param name a non-qualified type name
1:      * @return null if the type name is not found; the found {@link UserType} otherwise
1:      */
1:     @Nullable
1:     public UserType getNullable(ByteBuffer name)
1:     {
1:         return types.get(name);
1:     }
1: 
1:     /**
1:      * Create a Types instance with the provided type added
1:      */
1:     public Types with(UserType type)
1:     {
1:         if (get(type.name).isPresent())
0:             throw new IllegalStateException(String.format("Type %s already exists", type.name));
1: 
1:         return builder().add(this).add(type).build();
1:     }
1: 
1:     /**
1:      * Creates a Types instance with the type with the provided name removed
1:      */
1:     public Types without(ByteBuffer name)
1:     {
1:         UserType type =
0:             get(name).orElseThrow(() -> new IllegalStateException(String.format("Type %s doesn't exists", name)));
1: 
1:         return builder().add(filter(this, t -> t != type)).build();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
0:         return this == o || (o instanceof Types && types.equals(((Types) o).types));
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return types.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return types.values().toString();
1:     }
1: 
1:     public static final class Builder
1:     {
0:         final ImmutableMap.Builder<ByteBuffer, UserType> types = new ImmutableMap.Builder<>();
1: 
1:         private Builder()
1:         {
1:         }
1: 
1:         public Types build()
1:         {
1:             return new Types(this);
1:         }
1: 
1:         public Builder add(UserType type)
1:         {
1:             types.put(type.name, type);
1:             return this;
1:         }
1: 
1:         public Builder add(Iterable<UserType> types)
1:         {
1:             types.forEach(this::add);
1:             return this;
1:         }
1:     }
1: }
============================================================================