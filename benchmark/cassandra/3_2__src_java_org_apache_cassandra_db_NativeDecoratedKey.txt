1:8541cca: /*
1:8541cca:  * Licensed to the Apache Software Foundation (ASF) under one
1:8541cca:  * or more contributor license agreements.  See the NOTICE file
1:8541cca:  * distributed with this work for additional information
1:8541cca:  * regarding copyright ownership.  The ASF licenses this file
1:8541cca:  * to you under the Apache License, Version 2.0 (the
1:8541cca:  * "License"); you may not use this file except in compliance
1:8541cca:  * with the License.  You may obtain a copy of the License at
1:8541cca:  *
1:8541cca:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8541cca:  *
1:8541cca:  * Unless required by applicable law or agreed to in writing, software
1:8541cca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8541cca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8541cca:  * See the License for the specific language governing permissions and
1:8541cca:  * limitations under the License.
1:8541cca:  */
1:8541cca: package org.apache.cassandra.db;
1:8541cca: 
1:8541cca: import java.nio.ByteBuffer;
1:2f41243: import java.nio.ByteOrder;
1:8541cca: 
1:8541cca: import org.apache.cassandra.dht.Token;
1:8541cca: import org.apache.cassandra.utils.concurrent.OpOrder;
1:8541cca: import org.apache.cassandra.utils.memory.MemoryUtil;
1:8541cca: import org.apache.cassandra.utils.memory.NativeAllocator;
1:8541cca: 
1:8541cca: public class NativeDecoratedKey extends DecoratedKey
1:8541cca: {
1:e77ea12:     final long peer;
1:8541cca: 
1:8541cca:     public NativeDecoratedKey(Token token, NativeAllocator allocator, OpOrder.Group writeOp, ByteBuffer key)
1:8541cca:     {
1:8541cca:         super(token);
1:8541cca:         assert key != null;
1:2f41243:         assert key.order() == ByteOrder.BIG_ENDIAN;
1:2f41243: 
1:8541cca:         int size = key.remaining();
1:8541cca:         this.peer = allocator.allocate(4 + size, writeOp);
1:8541cca:         MemoryUtil.setInt(peer, size);
1:8541cca:         MemoryUtil.setBytes(peer + 4, key);
1:8541cca:     }
1:8541cca: 
1:8541cca:     public ByteBuffer getKey()
1:8541cca:     {
1:2f41243:         return MemoryUtil.getByteBuffer(peer + 4, MemoryUtil.getInt(peer), ByteOrder.BIG_ENDIAN);
1:8541cca:     }
1:8541cca: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:3ca9576
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteOrder;
0: import org.apache.cassandra.utils.memory.HeapAllocator;
/////////////////////////////////////////////////////////////////////////
1:         assert key.order() == ByteOrder.BIG_ENDIAN;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return MemoryUtil.getByteBuffer(peer + 4, MemoryUtil.getInt(peer), ByteOrder.BIG_ENDIAN);
commit:e77ea12
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FastByteOperations;
1:     final long peer;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.utils.concurrent.OpOrder;
1: import org.apache.cassandra.utils.memory.MemoryUtil;
1: import org.apache.cassandra.utils.memory.NativeAllocator;
1: 
1: public class NativeDecoratedKey extends DecoratedKey
1: {
0:     private final long peer;
1: 
1:     public NativeDecoratedKey(Token token, NativeAllocator allocator, OpOrder.Group writeOp, ByteBuffer key)
1:     {
1:         super(token);
1:         assert key != null;
1:         int size = key.remaining();
1:         this.peer = allocator.allocate(4 + size, writeOp);
1:         MemoryUtil.setInt(peer, size);
1:         MemoryUtil.setBytes(peer + 4, key);
1:     }
1: 
1:     public ByteBuffer getKey()
1:     {
0:         return MemoryUtil.getByteBuffer(peer + 4, MemoryUtil.getInt(peer));
1:     }
1: }
============================================================================