1:d765b24: /*
1:d765b24:  * Licensed to the Apache Software Foundation (ASF) under one
1:d765b24:  * or more contributor license agreements.  See the NOTICE file
1:d765b24:  * distributed with this work for additional information
1:d765b24:  * regarding copyright ownership.  The ASF licenses this file
1:d765b24:  * to you under the Apache License, Version 2.0 (the
1:d765b24:  * "License"); you may not use this file except in compliance
1:d765b24:  * with the License.  You may obtain a copy of the License at
1:d765b24:  *
1:d765b24:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d765b24:  *
1:d765b24:  * Unless required by applicable law or agreed to in writing, software
1:d765b24:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d765b24:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d765b24:  * See the License for the specific language governing permissions and
1:d765b24:  * limitations under the License.
1:d765b24:  */
1:d765b24: package org.apache.cassandra.utils;
9:d765b24: 
1:d765b24: import java.io.DataInput;
1:d765b24: import java.io.IOException;
1:cb25a8f: 
1:1e92ce4: import org.slf4j.Logger;
1:1e92ce4: import org.slf4j.LoggerFactory;
1:1e92ce4: 
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:dc37dea: import org.apache.cassandra.utils.obs.IBitSet;
1:dc37dea: import org.apache.cassandra.utils.obs.OffHeapBitSet;
1:dc37dea: import org.apache.cassandra.utils.obs.OpenBitSet;
1:d765b24: 
1:d765b24: public class FilterFactory
12:d765b24: {
1:f5c9b4a:     public static final IFilter AlwaysPresent = new AlwaysPresentFilter();
1:f5c9b4a: 
1:d765b24:     private static final Logger logger = LoggerFactory.getLogger(FilterFactory.class);
1:dc37dea:     private static final long BITSET_EXCESS = 20;
1:d765b24: 
1:75508ec:     public static void serialize(IFilter bf, DataOutputPlus output) throws IOException
1:d765b24:     {
1:23fd75f:         BloomFilterSerializer.serialize((BloomFilter) bf, output);
12:d765b24:     }
1:d765b24: 
1:23fd75f:     public static IFilter deserialize(DataInput input, boolean offheap, boolean oldBfHashOrder) throws IOException
1:d765b24:     {
1:23fd75f:         return BloomFilterSerializer.deserialize(input, offheap, oldBfHashOrder);
1:d765b24:     }
1:d765b24: 
1:d765b24:     /**
1:d765b24:      * @return A BloomFilter with the lowest practical false positive
1:d765b24:      *         probability for the given number of elements.
1:d765b24:      */
1:23fd75f:     public static IFilter getFilter(long numElements, int targetBucketsPerElem, boolean offheap, boolean oldBfHashOrder)
1:d765b24:     {
1:d765b24:         int maxBucketsPerElement = Math.max(1, BloomCalculations.maxBucketsPerElement(numElements));
1:d765b24:         int bucketsPerElement = Math.min(targetBucketsPerElem, maxBucketsPerElement);
1:d765b24:         if (bucketsPerElement < targetBucketsPerElem)
1:d765b24:         {
1:2dc2bb8:             logger.warn("Cannot provide an optimal BloomFilter for {} elements ({}/{} buckets per element).", numElements, bucketsPerElement, targetBucketsPerElem);
1:d765b24:         }
1:d765b24:         BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement);
1:23fd75f:         return createFilter(spec.K, numElements, spec.bucketsPerElement, offheap, oldBfHashOrder);
1:d765b24:     }
1:d765b24: 
1:d765b24:     /**
1:d765b24:      * @return The smallest BloomFilter that can provide the given false
1:d765b24:      *         positive probability rate for the given number of elements.
1:d765b24:      *
1:d765b24:      *         Asserts that the given probability can be satisfied using this
1:d765b24:      *         filter.
1:d765b24:      */
1:23fd75f:     public static IFilter getFilter(long numElements, double maxFalsePosProbability, boolean offheap, boolean oldBfHashOrder)
1:d765b24:     {
1:d765b24:         assert maxFalsePosProbability <= 1.0 : "Invalid probability";
1:37cf942:         if (maxFalsePosProbability == 1.0)
1:7746225:             return new AlwaysPresentFilter();
1:d765b24:         int bucketsPerElement = BloomCalculations.maxBucketsPerElement(numElements);
1:d765b24:         BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement, maxFalsePosProbability);
1:23fd75f:         return createFilter(spec.K, numElements, spec.bucketsPerElement, offheap, oldBfHashOrder);
1:d765b24:     }
1:d765b24: 
1:7aafe05:     @SuppressWarnings("resource")
1:23fd75f:     private static IFilter createFilter(int hash, long numElements, int bucketsPer, boolean offheap, boolean oldBfHashOrder)
1:d765b24:     {
1:dc37dea:         long numBits = (numElements * bucketsPer) + BITSET_EXCESS;
1:dc37dea:         IBitSet bitset = offheap ? new OffHeapBitSet(numBits) : new OpenBitSet(numBits);
1:23fd75f:         return new BloomFilter(hash, bitset, oldBfHashOrder);
1:d765b24:     }
1:d765b24: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:2dc2bb8
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Cannot provide an optimal BloomFilter for {} elements ({}/{} buckets per element).", numElements, bucketsPerElement, targetBucketsPerElem);
commit:02fb218
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Robert Stupp
-------------------------------------------------------------------------------
commit:23fd75f
/////////////////////////////////////////////////////////////////////////
1:         BloomFilterSerializer.serialize((BloomFilter) bf, output);
1:     public static IFilter deserialize(DataInput input, boolean offheap, boolean oldBfHashOrder) throws IOException
1:         return BloomFilterSerializer.deserialize(input, offheap, oldBfHashOrder);
1:     public static IFilter getFilter(long numElements, int targetBucketsPerElem, boolean offheap, boolean oldBfHashOrder)
/////////////////////////////////////////////////////////////////////////
1:         return createFilter(spec.K, numElements, spec.bucketsPerElement, offheap, oldBfHashOrder);
/////////////////////////////////////////////////////////////////////////
1:     public static IFilter getFilter(long numElements, double maxFalsePosProbability, boolean offheap, boolean oldBfHashOrder)
1:         return createFilter(spec.K, numElements, spec.bucketsPerElement, offheap, oldBfHashOrder);
1:     private static IFilter createFilter(int hash, long numElements, int bucketsPer, boolean offheap, boolean oldBfHashOrder)
1:         return new BloomFilter(hash, bitset, oldBfHashOrder);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
0:         BloomFilter.serializer.serialize((BloomFilter) bf, output);
0:         return BloomFilter.serializer.deserialize(input, offheap);
/////////////////////////////////////////////////////////////////////////
0:         return new BloomFilter(hash, bitset);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public static void serialize(IFilter bf, DataOutputPlus output) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f5c9b4a
/////////////////////////////////////////////////////////////////////////
1:     public static final IFilter AlwaysPresent = new AlwaysPresentFilter();
1: 
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
0:         Murmur3BloomFilter.serializer.serialize((Murmur3BloomFilter) bf, output);
0:     public static IFilter deserialize(DataInput input, boolean offheap) throws IOException
0:         return Murmur3BloomFilter.serializer.deserialize(input, offheap);
0:         return Murmur3BloomFilter.serializer.serializedSize((Murmur3BloomFilter) bf, TYPE_SIZES);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return createFilter(spec.K, numElements, spec.bucketsPerElement, offheap);
/////////////////////////////////////////////////////////////////////////
0:         return createFilter(spec.K, numElements, spec.bucketsPerElement, offheap);
0:     private static IFilter createFilter(int hash, long numElements, int bucketsPer, boolean offheap)
0:         return new Murmur3BloomFilter(hash, bitset);
commit:7746225
/////////////////////////////////////////////////////////////////////////
1:             return new AlwaysPresentFilter();
commit:d7a0982
/////////////////////////////////////////////////////////////////////////
0:             return AlwaysPresentFilter.instance;
commit:17034c0
/////////////////////////////////////////////////////////////////////////
0:             return new AlwaysPresentFilter();
commit:798470e
/////////////////////////////////////////////////////////////////////////
0:             return AlwaysPresentFilter.instance;
commit:37cf942
/////////////////////////////////////////////////////////////////////////
1:         if (maxFalsePosProbability == 1.0)
0:             return new AlwaysPresentFilter();
/////////////////////////////////////////////////////////////////////////
commit:a15500e
/////////////////////////////////////////////////////////////////////////
0:     public static void serialize(IFilter bf, DataOutput output) throws IOException
0:     public static void serialize(IFilter bf, DataOutput output, Type type) throws IOException
/////////////////////////////////////////////////////////////////////////
0:     public static IFilter deserialize(DataInput input, Type type, boolean offheap) throws IOException
/////////////////////////////////////////////////////////////////////////
0:     public static long serializedSize(IFilter bf)
0:     public static long serializedSize(IFilter bf, Type type)
/////////////////////////////////////////////////////////////////////////
0:     public static IFilter getFilter(long numElements, int targetBucketsPerElem, boolean offheap)
0:     static IFilter getFilter(long numElements, int targetBucketsPerElem, Type type, boolean offheap)
/////////////////////////////////////////////////////////////////////////
0:     public static IFilter getFilter(long numElements, double maxFalsePosProbability, boolean offheap)
0:     static IFilter getFilter(long numElements, double maxFalsePosProbability, Type type, boolean offheap)
/////////////////////////////////////////////////////////////////////////
0:     private static IFilter createFilter(int hash, long numElements, int bucketsPer, Type type, boolean offheap)
commit:dc37dea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.obs.IBitSet;
1: import org.apache.cassandra.utils.obs.OffHeapBitSet;
1: import org.apache.cassandra.utils.obs.OpenBitSet;
/////////////////////////////////////////////////////////////////////////
1:     private static final long BITSET_EXCESS = 20;
/////////////////////////////////////////////////////////////////////////
0:     public static Filter deserialize(DataInput input, Type type, boolean offheap) throws IOException
0:                 return Murmur2BloomFilter.serializer.deserialize(input, offheap);
0:                 return Murmur3BloomFilter.serializer.deserialize(input, offheap);
/////////////////////////////////////////////////////////////////////////
0:     public static Filter getFilter(long numElements, int targetBucketsPerElem, boolean offheap)
0:         return getFilter(numElements, targetBucketsPerElem, Type.MURMUR3, offheap);
0:     static Filter getFilter(long numElements, int targetBucketsPerElem, Type type, boolean offheap)
/////////////////////////////////////////////////////////////////////////
0:         return createFilter(spec.K, numElements, spec.bucketsPerElement, type, offheap);
/////////////////////////////////////////////////////////////////////////
0:     public static Filter getFilter(long numElements, double maxFalsePosProbability, boolean offheap)
0:         return getFilter(numElements, maxFalsePosProbability, Type.MURMUR3, offheap);
0:     static Filter getFilter(long numElements, double maxFalsePosProbability, Type type, boolean offheap)
0:         return createFilter(spec.K, numElements, spec.bucketsPerElement, type, offheap);
0:     private static Filter createFilter(int hash, long numElements, int bucketsPer, Type type, boolean offheap)
1:         long numBits = (numElements * bucketsPer) + BITSET_EXCESS;
1:         IBitSet bitset = offheap ? new OffHeapBitSet(numBits) : new OpenBitSet(numBits);
0:               return new Murmur2BloomFilter(hash, bitset);
0:               return new Murmur3BloomFilter(hash, bitset);
0:         return new Murmur3BloomFilter(0, new OpenBitSet(BITSET_EXCESS));
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:     private static final TypeSizes TYPE_SIZES = TypeSizes.NATIVE;
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
1: 
0:     private static final DBTypeSizes TYPE_SIZES = DBTypeSizes.NATIVE;
/////////////////////////////////////////////////////////////////////////
0:                 return Murmur2BloomFilter.serializer.serializedSize((Murmur2BloomFilter) bf, TYPE_SIZES);
0:                 return Murmur3BloomFilter.serializer.serializedSize((Murmur3BloomFilter) bf, TYPE_SIZES);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:d765b24
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.io.DataInput;
0: import java.io.DataInputStream;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: public class FilterFactory
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(FilterFactory.class);
1: 
0:     public enum Type
1:     {
0:         SHA, MURMUR2, MURMUR3
1:     }
1: 
0:     public static void serialize(Filter bf, DataOutput output) throws IOException
1:     {
0:         serialize(bf, output, Type.MURMUR3);
1:     }
1: 
0:     public static void serialize(Filter bf, DataOutput output, Type type) throws IOException
1:     {
0:         switch (type)
1:         {
0:             case SHA:
0:                 LegacyBloomFilter.serializer.serialize((LegacyBloomFilter) bf, output);
0:                 break;
0:             case MURMUR2:
0:                 Murmur2BloomFilter.serializer.serialize((Murmur2BloomFilter) bf, output);
0:                 break;
0:             default:
0:                 Murmur3BloomFilter.serializer.serialize((Murmur3BloomFilter) bf, output);
0:                 break;
1:         }
1:     }
1: 
0:     public static Filter deserialize(DataInput input, Type type) throws IOException
1:     {
0:         switch (type)
1:         {
0:             case SHA:
0:                 return LegacyBloomFilter.serializer.deserialize(input);
0:             case MURMUR2:
0:                 return Murmur2BloomFilter.serializer.deserialize(input);
0:             default:
0:                 return Murmur3BloomFilter.serializer.deserialize(input);
1:         }
1:     }
1: 
0:     public static long serializedSize(Filter bf)
1:     {
0:         return serializedSize(bf, Type.MURMUR3);
1:     }
1: 
0:     public static long serializedSize(Filter bf, Type type)
1:     {
0:         switch (type)
1:         {
0:             case SHA:
0:                 return LegacyBloomFilter.serializer.serializedSize((LegacyBloomFilter) bf);
0:             case MURMUR2:
0:                 return Murmur2BloomFilter.serializer.serializedSize((Murmur2BloomFilter) bf);
0:             default:
0:                 return Murmur3BloomFilter.serializer.serializedSize((Murmur3BloomFilter) bf);
1:         }
1:     }
1: 
1:     /**
1:      * @return A BloomFilter with the lowest practical false positive
1:      *         probability for the given number of elements.
1:      */
0:     public static Filter getFilter(long numElements, int targetBucketsPerElem)
1:     {
0:         return getFilter(numElements, targetBucketsPerElem, Type.MURMUR3);
1:     }
1: 
0:     // helper method for test.
0:     static Filter getFilter(long numElements, int targetBucketsPerElem, Type type)
1:     {
1:         int maxBucketsPerElement = Math.max(1, BloomCalculations.maxBucketsPerElement(numElements));
1:         int bucketsPerElement = Math.min(targetBucketsPerElem, maxBucketsPerElement);
1:         if (bucketsPerElement < targetBucketsPerElem)
1:         {
0:             logger.warn(String.format("Cannot provide an optimal BloomFilter for %d elements (%d/%d buckets per element).", numElements, bucketsPerElement, targetBucketsPerElem));
1:         }
1:         BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement);
0:         return createFilter(spec.K, numElements, spec.bucketsPerElement, type);
1:     }
1: 
1:     /**
1:      * @return The smallest BloomFilter that can provide the given false
1:      *         positive probability rate for the given number of elements.
1:      *
1:      *         Asserts that the given probability can be satisfied using this
1:      *         filter.
1:      */
0:     public static Filter getFilter(long numElements, double maxFalsePosProbability)
1:     {
0:         return getFilter(numElements, maxFalsePosProbability, Type.MURMUR3);
1:     }
1: 
0:     // helper method for test.
0:     static Filter getFilter(long numElements, double maxFalsePosProbability, Type type)
1:     {
1:         assert maxFalsePosProbability <= 1.0 : "Invalid probability";
1:         int bucketsPerElement = BloomCalculations.maxBucketsPerElement(numElements);
1:         BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement, maxFalsePosProbability);
0:         return createFilter(spec.K, numElements, spec.bucketsPerElement, type);
1:     }
1: 
0:     private static Filter createFilter(int hash, long numElements, int bucketsPer, Type type)
1:     {
0:         switch (type)
1:         {
0:             case MURMUR2:
0:               return new Murmur2BloomFilter(hash, numElements, bucketsPer);
0:             default:
0:               return new Murmur3BloomFilter(hash, numElements, bucketsPer);
1:         }
1:     }
1: 
0:     public static BloomFilter emptyFilter()
1:     {
0:         return new Murmur3BloomFilter(0, 0, 0);
1:     }
1: }
============================================================================