1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.io.sstable;
5:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: import java.io.IOError;
1:a991b64: import java.util.Iterator;
1:a991b64: 
1:e8651b6: import org.apache.cassandra.io.util.RewindableDataInput;
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:e8651b6: import org.apache.cassandra.io.util.DataPosition;
1:d40ac78: import org.apache.cassandra.io.util.FileDataInput;
1:a991b64: import org.apache.cassandra.net.MessagingService;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Utility class to handle deserializing atom from sstables.
1:a991b64:  *
1:a991b64:  * Note that this is not a full fledged UnfilteredRowIterator. It's also not closeable, it is always
1:a991b64:  * the job of the user to close the underlying ressources.
1:a991b64:  */
1:a991b64: public abstract class SSTableSimpleIterator extends AbstractIterator<Unfiltered> implements Iterator<Unfiltered>
2:a991b64: {
1:a991b64:     protected final CFMetaData metadata;
1:2457599:     protected final DataInputPlus in;
1:a991b64:     protected final SerializationHelper helper;
1:a991b64: 
1:2457599:     private SSTableSimpleIterator(CFMetaData metadata, DataInputPlus in, SerializationHelper helper)
1:a991b64:     {
1:a991b64:         this.metadata = metadata;
1:a991b64:         this.in = in;
1:a991b64:         this.helper = helper;
2:a991b64:     }
1:a991b64: 
1:03f72ac:     public static SSTableSimpleIterator create(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper, DeletionTime partitionDeletion)
1:a991b64:     {
1:a991b64:         if (helper.version < MessagingService.VERSION_30)
1:a991b64:             return new OldFormatIterator(metadata, in, helper, partitionDeletion);
1:a991b64:         else
1:a991b64:             return new CurrentFormatIterator(metadata, in, header, helper);
1:a991b64:     }
1:a991b64: 
1:d40ac78:     public static SSTableSimpleIterator createTombstoneOnly(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper, DeletionTime partitionDeletion)
1:d40ac78:     {
1:d40ac78:         if (helper.version < MessagingService.VERSION_30)
1:d40ac78:             return new OldFormatTombstoneIterator(metadata, in, helper, partitionDeletion);
1:d40ac78:         else
1:d40ac78:             return new CurrentFormatTombstoneIterator(metadata, in, header, helper);
1:d40ac78:     }
1:d40ac78: 
1:a991b64:     public abstract Row readStaticRow() throws IOException;
1:a991b64: 
1:a991b64:     private static class CurrentFormatIterator extends SSTableSimpleIterator
1:a991b64:     {
1:a991b64:         private final SerializationHeader header;
1:a991b64: 
1:2457599:         private final Row.Builder builder;
1:a991b64: 
1:2457599:         private CurrentFormatIterator(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper)
1:a991b64:         {
1:a991b64:             super(metadata, in, helper);
1:a991b64:             this.header = header;
1:aa57626:             this.builder = BTreeRow.sortedBuilder();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Row readStaticRow() throws IOException
1:a991b64:         {
1:2457599:             return header.hasStatic() ? UnfilteredSerializer.serializer.deserializeStaticRow(in, header, helper) : Rows.EMPTY_STATIC_ROW;
1:a991b64:         }
1:a991b64: 
1:a991b64:         protected Unfiltered computeNext()
1:a991b64:         {
2:a991b64:             try
1:a991b64:             {
1:2457599:                 Unfiltered unfiltered = UnfilteredSerializer.serializer.deserialize(in, header, helper, builder);
1:2457599:                 return unfiltered == null ? endOfData() : unfiltered;
1:a991b64:             }
2:a991b64:             catch (IOException e)
1:a991b64:             {
2:a991b64:                 throw new IOError(e);
1:a991b64:             }
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:d40ac78:     private static class CurrentFormatTombstoneIterator extends SSTableSimpleIterator
1:d40ac78:     {
1:d40ac78:         private final SerializationHeader header;
1:d40ac78: 
1:d40ac78:         private CurrentFormatTombstoneIterator(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper)
1:d40ac78:         {
1:d40ac78:             super(metadata, in, helper);
1:d40ac78:             this.header = header;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         public Row readStaticRow() throws IOException
1:d40ac78:         {
1:d40ac78:             if (header.hasStatic())
1:d40ac78:             {
1:d40ac78:                 Row staticRow = UnfilteredSerializer.serializer.deserializeStaticRow(in, header, helper);
1:d40ac78:                 if (!staticRow.deletion().isLive())
1:d40ac78:                     return BTreeRow.emptyDeletedRow(staticRow.clustering(), staticRow.deletion());
1:d40ac78:             }
1:d40ac78:             return Rows.EMPTY_STATIC_ROW;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         protected Unfiltered computeNext()
1:d40ac78:         {
1:d40ac78:             try
1:d40ac78:             {
1:d40ac78:                 Unfiltered unfiltered = UnfilteredSerializer.serializer.deserializeTombstonesOnly((FileDataInput) in, header, helper);
1:d40ac78:                 return unfiltered == null ? endOfData() : unfiltered;
1:d40ac78:             }
1:d40ac78:             catch (IOException e)
1:d40ac78:             {
1:d40ac78:                 throw new IOError(e);
1:d40ac78:             }
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:a991b64:     private static class OldFormatIterator extends SSTableSimpleIterator
1:a991b64:     {
1:a991b64:         private final UnfilteredDeserializer deserializer;
1:a991b64: 
1:03f72ac:         private OldFormatIterator(CFMetaData metadata, DataInputPlus in, SerializationHelper helper, DeletionTime partitionDeletion)
1:a991b64:         {
1:a991b64:             super(metadata, in, helper);
1:a991b64:             // We use an UnfilteredDeserializer because even though we don't need all it's fanciness, it happens to handle all
1:a991b64:             // the details we need for reading the old format.
1:a991b64:             this.deserializer = UnfilteredDeserializer.create(metadata, in, null, helper, partitionDeletion, false);
1:a991b64:         }
1:a991b64: 
1:a991b64:         public Row readStaticRow() throws IOException
1:a991b64:         {
1:a991b64:             if (metadata.isCompactTable())
1:a991b64:             {
1:a991b64:                 // For static compact tables, in the old format, static columns are intermingled with the other columns, so we
1:a991b64:                 // need to extract them. Which imply 2 passes (one to extract the static, then one for other value).
1:a991b64:                 if (metadata.isStaticCompactTable())
1:a991b64:                 {
1:e8651b6:                     assert in instanceof RewindableDataInput;
1:e8651b6:                     RewindableDataInput file = (RewindableDataInput)in;
1:e8651b6:                     DataPosition mark = file.mark();
1:a991b64:                     Row staticRow = LegacyLayout.extractStaticColumns(metadata, file, metadata.partitionColumns().statics);
1:a991b64:                     file.reset(mark);
1:a991b64: 
1:a991b64:                     // We've extracted the static columns, so we must ignore them on the 2nd pass
1:a991b64:                     ((UnfilteredDeserializer.OldFormatDeserializer)deserializer).setSkipStatic();
1:a991b64:                     return staticRow;
1:a991b64:                 }
1:a991b64:                 else
1:a991b64:                 {
1:a991b64:                     return Rows.EMPTY_STATIC_ROW;
1:a991b64:                 }
1:a991b64:             }
1:a991b64: 
1:a991b64:             return deserializer.hasNext() && deserializer.nextIsStatic()
1:a991b64:                  ? (Row)deserializer.readNext()
2:a991b64:                  : Rows.EMPTY_STATIC_ROW;
1:a991b64: 
1:a991b64:         }
1:a991b64: 
1:a991b64:         protected Unfiltered computeNext()
1:a991b64:         {
1:0f5e780:             while (true)
1:a991b64:             {
1:0f5e780:                 try
1:a991b64:                 {
1:0f5e780:                     if (!deserializer.hasNext())
1:0f5e780:                         return endOfData();
1:0f5e780: 
1:0f5e780:                     Unfiltered unfiltered = deserializer.readNext();
1:0f5e780:                     if (metadata.isStaticCompactTable() && unfiltered.kind() == Unfiltered.Kind.ROW)
1:0f5e780:                     {
1:0f5e780:                         Row row = (Row) unfiltered;
1:0f5e780:                         ColumnDefinition def = metadata.getColumnDefinition(LegacyLayout.encodeClustering(metadata, row.clustering()));
1:0f5e780:                         if (def != null && def.isStatic())
1:0f5e780:                             continue;
1:0f5e780:                     }
1:0f5e780:                     return unfiltered;
1:0f5e780:                 }
1:0f5e780:                 catch (IOException e)
1:0f5e780:                 {
1:0f5e780:                     throw new IOError(e);
1:a991b64:                 }
1:a991b64:             }
1:a991b64:         }
1:a991b64: 
1:a991b64:     }
1:a991b64: 
1:d40ac78:     private static class OldFormatTombstoneIterator extends OldFormatIterator
1:d40ac78:     {
1:d40ac78:         private OldFormatTombstoneIterator(CFMetaData metadata, DataInputPlus in, SerializationHelper helper, DeletionTime partitionDeletion)
1:d40ac78:         {
1:d40ac78:             super(metadata, in, helper, partitionDeletion);
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         public Row readStaticRow() throws IOException
1:d40ac78:         {
1:d40ac78:             Row row = super.readStaticRow();
1:d40ac78:             if (!row.deletion().isLive())
1:d40ac78:                 return BTreeRow.emptyDeletedRow(row.clustering(), row.deletion());
1:d40ac78:             return Rows.EMPTY_STATIC_ROW;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         protected Unfiltered computeNext()
1:d40ac78:         {
1:d40ac78:             while (true)
1:d40ac78:             {
1:d40ac78:                 Unfiltered unfiltered = super.computeNext();
1:d40ac78:                 if (unfiltered == null || unfiltered.isRangeTombstoneMarker())
1:d40ac78:                     return unfiltered;
1:d40ac78: 
1:d40ac78:                 Row row = (Row) unfiltered;
1:d40ac78:                 if (!row.deletion().isLive())
1:d40ac78:                     return BTreeRow.emptyDeletedRow(row.clustering(), row.deletion());
1:d40ac78:                 // Otherwise read next.
1:d40ac78:             }
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:     }
1:a991b64: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d40ac78
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.FileDataInput;
/////////////////////////////////////////////////////////////////////////
1:     public static SSTableSimpleIterator createTombstoneOnly(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper, DeletionTime partitionDeletion)
1:     {
1:         if (helper.version < MessagingService.VERSION_30)
1:             return new OldFormatTombstoneIterator(metadata, in, helper, partitionDeletion);
1:         else
1:             return new CurrentFormatTombstoneIterator(metadata, in, header, helper);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static class CurrentFormatTombstoneIterator extends SSTableSimpleIterator
1:     {
1:         private final SerializationHeader header;
1: 
1:         private CurrentFormatTombstoneIterator(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper)
1:         {
1:             super(metadata, in, helper);
1:             this.header = header;
1:         }
1: 
1:         public Row readStaticRow() throws IOException
1:         {
1:             if (header.hasStatic())
1:             {
1:                 Row staticRow = UnfilteredSerializer.serializer.deserializeStaticRow(in, header, helper);
1:                 if (!staticRow.deletion().isLive())
1:                     return BTreeRow.emptyDeletedRow(staticRow.clustering(), staticRow.deletion());
1:             }
1:             return Rows.EMPTY_STATIC_ROW;
1:         }
1: 
1:         protected Unfiltered computeNext()
1:         {
1:             try
1:             {
1:                 Unfiltered unfiltered = UnfilteredSerializer.serializer.deserializeTombstonesOnly((FileDataInput) in, header, helper);
1:                 return unfiltered == null ? endOfData() : unfiltered;
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new IOError(e);
1:             }
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static class OldFormatTombstoneIterator extends OldFormatIterator
1:     {
1:         private OldFormatTombstoneIterator(CFMetaData metadata, DataInputPlus in, SerializationHelper helper, DeletionTime partitionDeletion)
1:         {
1:             super(metadata, in, helper, partitionDeletion);
1:         }
1: 
1:         public Row readStaticRow() throws IOException
1:         {
1:             Row row = super.readStaticRow();
1:             if (!row.deletion().isLive())
1:                 return BTreeRow.emptyDeletedRow(row.clustering(), row.deletion());
1:             return Rows.EMPTY_STATIC_ROW;
1:         }
1: 
1:         protected Unfiltered computeNext()
1:         {
1:             while (true)
1:             {
1:                 Unfiltered unfiltered = super.computeNext();
1:                 if (unfiltered == null || unfiltered.isRangeTombstoneMarker())
1:                     return unfiltered;
1: 
1:                 Row row = (Row) unfiltered;
1:                 if (!row.deletion().isLive())
1:                     return BTreeRow.emptyDeletedRow(row.clustering(), row.deletion());
1:                 // Otherwise read next.
1:             }
1:         }
1: 
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587773f
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.RewindableDataInput;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataPosition;
/////////////////////////////////////////////////////////////////////////
1:                     assert in instanceof RewindableDataInput;
1:                     RewindableDataInput file = (RewindableDataInput)in;
1:                     DataPosition mark = file.mark();
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
1:             while (true)
1:                 try
1:                     if (!deserializer.hasNext())
1:                         return endOfData();
1: 
1:                     Unfiltered unfiltered = deserializer.readNext();
1:                     if (metadata.isStaticCompactTable() && unfiltered.kind() == Unfiltered.Kind.ROW)
1:                     {
1:                         Row row = (Row) unfiltered;
1:                         ColumnDefinition def = metadata.getColumnDefinition(LegacyLayout.encodeClustering(metadata, row.clustering()));
1:                         if (def != null && def.isStatic())
1:                             continue;
1:                     }
1:                     return unfiltered;
1:                 catch (IOException e)
1:                 {
1:                     throw new IOError(e);
1:                 }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aa57626
/////////////////////////////////////////////////////////////////////////
1:             this.builder = BTreeRow.sortedBuilder();
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
0:             this.builder = BTreeRow.sortedBuilder(helper.fetchedRegularColumns(header));
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
0:             this.builder = BTreeBackedRow.sortedBuilder(helper.fetchedRegularColumns(header));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected final DataInputPlus in;
1:     private SSTableSimpleIterator(CFMetaData metadata, DataInputPlus in, SerializationHelper helper)
/////////////////////////////////////////////////////////////////////////
1:         private final Row.Builder builder;
1:         private CurrentFormatIterator(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper)
0:             this.builder = ArrayBackedRow.sortedBuilder(helper.fetchedRegularColumns(header));
1:             return header.hasStatic() ? UnfilteredSerializer.serializer.deserializeStaticRow(in, header, helper) : Rows.EMPTY_STATIC_ROW;
1:                 Unfiltered unfiltered = UnfilteredSerializer.serializer.deserialize(in, header, helper, builder);
1:                 return unfiltered == null ? endOfData() : unfiltered;
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: import java.io.IOError;
1: import java.util.Iterator;
1: 
0: import com.google.common.collect.AbstractIterator;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
0: import org.apache.cassandra.io.util.FileDataInput;
0: import org.apache.cassandra.io.util.FileMark;
1: import org.apache.cassandra.net.MessagingService;
1: 
1: /**
1:  * Utility class to handle deserializing atom from sstables.
1:  *
1:  * Note that this is not a full fledged UnfilteredRowIterator. It's also not closeable, it is always
1:  * the job of the user to close the underlying ressources.
1:  */
1: public abstract class SSTableSimpleIterator extends AbstractIterator<Unfiltered> implements Iterator<Unfiltered>
1: {
1:     protected final CFMetaData metadata;
0:     protected final DataInput in;
1:     protected final SerializationHelper helper;
1: 
0:     private SSTableSimpleIterator(CFMetaData metadata, DataInput in, SerializationHelper helper)
1:     {
1:         this.metadata = metadata;
1:         this.in = in;
1:         this.helper = helper;
1:     }
1: 
0:     public static SSTableSimpleIterator create(CFMetaData metadata, DataInput in, SerializationHeader header, SerializationHelper helper, DeletionTime partitionDeletion)
1:     {
1:         if (helper.version < MessagingService.VERSION_30)
1:             return new OldFormatIterator(metadata, in, helper, partitionDeletion);
1:         else
1:             return new CurrentFormatIterator(metadata, in, header, helper);
1:     }
1: 
1:     public abstract Row readStaticRow() throws IOException;
1: 
1:     private static class CurrentFormatIterator extends SSTableSimpleIterator
1:     {
1:         private final SerializationHeader header;
1: 
0:         private final ReusableRow row;
0:         private final RangeTombstoneMarker.Builder markerBuilder;
1: 
0:         private CurrentFormatIterator(CFMetaData metadata, DataInput in, SerializationHeader header, SerializationHelper helper)
1:         {
1:             super(metadata, in, helper);
1:             this.header = header;
1: 
0:             int clusteringSize = metadata.comparator.size();
0:             Columns regularColumns = header == null ? metadata.partitionColumns().regulars : header.columns().regulars;
1: 
0:             this.row = new ReusableRow(clusteringSize, regularColumns, true, metadata.isCounter());
0:             this.markerBuilder = new RangeTombstoneMarker.Builder(clusteringSize);
1:         }
1: 
1:         public Row readStaticRow() throws IOException
1:         {
0:             return header.hasStatic()
0:                 ? UnfilteredSerializer.serializer.deserializeStaticRow(in, header, helper)
1:                 : Rows.EMPTY_STATIC_ROW;
1:         }
1: 
1:         protected Unfiltered computeNext()
1:         {
1:             try
1:             {
0:                 Unfiltered.Kind kind = UnfilteredSerializer.serializer.deserialize(in, header, helper, row.writer(), markerBuilder.reset());
1: 
0:                 return kind == null
0:                      ? endOfData()
0:                      : (kind == Unfiltered.Kind.ROW ? row : markerBuilder.build());
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new IOError(e);
1:             }
1:         }
1:     }
1: 
1:     private static class OldFormatIterator extends SSTableSimpleIterator
1:     {
1:         private final UnfilteredDeserializer deserializer;
1: 
0:         private OldFormatIterator(CFMetaData metadata, DataInput in, SerializationHelper helper, DeletionTime partitionDeletion)
1:         {
1:             super(metadata, in, helper);
1:             // We use an UnfilteredDeserializer because even though we don't need all it's fanciness, it happens to handle all
1:             // the details we need for reading the old format.
1:             this.deserializer = UnfilteredDeserializer.create(metadata, in, null, helper, partitionDeletion, false);
1:         }
1: 
1:         public Row readStaticRow() throws IOException
1:         {
1:             if (metadata.isCompactTable())
1:             {
1:                 // For static compact tables, in the old format, static columns are intermingled with the other columns, so we
1:                 // need to extract them. Which imply 2 passes (one to extract the static, then one for other value).
1:                 if (metadata.isStaticCompactTable())
1:                 {
0:                     // Because we don't support streaming from old file version, the only case we should get there is for compaction,
0:                     // where the DataInput should be a file based one.
0:                     assert in instanceof FileDataInput;
0:                     FileDataInput file = (FileDataInput)in;
0:                     FileMark mark = file.mark();
1:                     Row staticRow = LegacyLayout.extractStaticColumns(metadata, file, metadata.partitionColumns().statics);
1:                     file.reset(mark);
1: 
1:                     // We've extracted the static columns, so we must ignore them on the 2nd pass
1:                     ((UnfilteredDeserializer.OldFormatDeserializer)deserializer).setSkipStatic();
1:                     return staticRow;
1:                 }
1:                 else
1:                 {
1:                     return Rows.EMPTY_STATIC_ROW;
1:                 }
1:             }
1: 
1:             return deserializer.hasNext() && deserializer.nextIsStatic()
1:                  ? (Row)deserializer.readNext()
1:                  : Rows.EMPTY_STATIC_ROW;
1: 
1:         }
1: 
1:         protected Unfiltered computeNext()
1:         {
1:             try
1:             {
0:                 if (!deserializer.hasNext())
0:                     return endOfData();
1: 
0:                 Unfiltered unfiltered = deserializer.readNext();
0:                 if (metadata.isStaticCompactTable() && unfiltered.kind() == Unfiltered.Kind.ROW)
1:                 {
0:                     Row row = (Row) unfiltered;
0:                     ColumnDefinition def = metadata.getColumnDefinition(LegacyLayout.encodeClustering(metadata, row.clustering()));
0:                     if (def != null && def.isStatic())
0:                         return computeNext();
1:                 }
0:                 return unfiltered;
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new IOError(e);
1:             }
1:         }
1: 
1:     }
1: 
1: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public static SSTableSimpleIterator create(CFMetaData metadata, DataInputPlus in, SerializationHeader header, SerializationHelper helper, DeletionTime partitionDeletion)
/////////////////////////////////////////////////////////////////////////
1:         private OldFormatIterator(CFMetaData metadata, DataInputPlus in, SerializationHelper helper, DeletionTime partitionDeletion)
============================================================================