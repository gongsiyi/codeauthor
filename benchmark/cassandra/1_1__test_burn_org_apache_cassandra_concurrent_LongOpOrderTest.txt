1:a3e0418: package org.apache.cassandra.concurrent;
1:a3e0418: /*
1:a3e0418:  * 
1:a3e0418:  * Licensed to the Apache Software Foundation (ASF) under one
1:a3e0418:  * or more contributor license agreements.  See the NOTICE file
1:a3e0418:  * distributed with this work for additional information
1:a3e0418:  * regarding copyright ownership.  The ASF licenses this file
1:a3e0418:  * to you under the Apache License, Version 2.0 (the
1:a3e0418:  * "License"); you may not use this file except in compliance
1:a3e0418:  * with the License.  You may obtain a copy of the License at
1:a3e0418:  * 
1:a3e0418:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a3e0418:  * 
1:a3e0418:  * Unless required by applicable law or agreed to in writing,
1:a3e0418:  * software distributed under the License is distributed on an
1:a3e0418:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a3e0418:  * KIND, either express or implied.  See the License for the
1:a3e0418:  * specific language governing permissions and limitations
1:a3e0418:  * under the License.
1:a3e0418:  * 
1:a3e0418:  */
1:a3e0418: 
1:a3e0418: 
1:a3e0418: import java.util.Map;
1:a3e0418: import java.util.concurrent.ExecutorService;
1:a3e0418: import java.util.concurrent.Executors;
1:a3e0418: import java.util.concurrent.ScheduledExecutorService;
1:a3e0418: import java.util.concurrent.ThreadLocalRandom;
1:a3e0418: import java.util.concurrent.TimeUnit;
1:a3e0418: import java.util.concurrent.atomic.AtomicInteger;
1:a3e0418: 
1:a3e0418: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1:a3e0418: import org.junit.Test;
1:a3e0418: import org.slf4j.Logger;
1:a3e0418: import org.slf4j.LoggerFactory;
1:a3e0418: 
1:a3e0418: import org.apache.cassandra.utils.concurrent.OpOrder;
1:a3e0418: 
1:a3e0418: import static org.junit.Assert.assertTrue;
1:a3e0418: 
1:a3e0418: // TODO: we don't currently test SAFE functionality at all!
1:a3e0418: // TODO: should also test markBlocking and SyncOrdered
1:a3e0418: public class LongOpOrderTest
1:a3e0418: {
1:a3e0418: 
1:a3e0418:     private static final Logger logger = LoggerFactory.getLogger(LongOpOrderTest.class);
1:a3e0418: 
1:a3e0418:     static final int CONSUMERS = 4;
1:a3e0418:     static final int PRODUCERS = 32;
1:a3e0418: 
1:a3e0418:     static final long RUNTIME = TimeUnit.MINUTES.toMillis(5);
1:a3e0418:     static final long REPORT_INTERVAL = TimeUnit.MINUTES.toMillis(1);
1:a3e0418: 
1:a3e0418:     static final Thread.UncaughtExceptionHandler handler = new Thread.UncaughtExceptionHandler()
1:a3e0418:     {
1:a3e0418:         @Override
1:a3e0418:         public void uncaughtException(Thread t, Throwable e)
1:a3e0418:         {
1:a3e0418:             System.err.println(t.getName() + ": " + e.getMessage());
1:a3e0418:             e.printStackTrace();
1:a3e0418:         }
1:a3e0418:     };
1:a3e0418: 
1:a3e0418:     final OpOrder order = new OpOrder();
1:a3e0418:     final AtomicInteger errors = new AtomicInteger();
1:a3e0418: 
1:a3e0418:     class TestOrdering implements Runnable
1:a3e0418:     {
1:a3e0418: 
1:a3e0418:         final int[] waitNanos = new int[1 << 16];
1:a3e0418:         volatile State state = new State();
1:a3e0418:         final ScheduledExecutorService sched;
1:a3e0418: 
1:a3e0418:         TestOrdering(ExecutorService exec, ScheduledExecutorService sched)
1:a3e0418:         {
1:a3e0418:             this.sched = sched;
1:a3e0418:             final ThreadLocalRandom rnd = ThreadLocalRandom.current();
1:a3e0418:             for (int i = 0 ; i < waitNanos.length ; i++)
1:a3e0418:                 waitNanos[i] = rnd.nextInt(5000);
1:a3e0418:             for (int i = 0 ; i < PRODUCERS / CONSUMERS ; i++)
1:a3e0418:                 exec.execute(new Producer());
1:a3e0418:             exec.execute(this);
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:         @Override
1:a3e0418:         public void run()
1:a3e0418:         {
1:a3e0418:             final long until = System.currentTimeMillis() + RUNTIME;
1:a3e0418:             long lastReport = System.currentTimeMillis();
1:a3e0418:             long count = 0;
1:a3e0418:             long opCount = 0;
1:a3e0418:             while (true)
1:a3e0418:             {
1:a3e0418:                 long now = System.currentTimeMillis();
1:a3e0418:                 if (now > until)
1:a3e0418:                     break;
1:a3e0418:                 if (now > lastReport + REPORT_INTERVAL)
1:a3e0418:                 {
1:a3e0418:                     lastReport = now;
1:a3e0418:                     logger.info(String.format("%s: Executed %d barriers with %d operations. %.0f%% complete.",
1:a3e0418:                             Thread.currentThread().getName(), count, opCount, 100 * (1 - ((until - now) / (double) RUNTIME))));
1:a3e0418:                 }
1:a3e0418:                 try
1:a3e0418:                 {
1:a3e0418:                     Thread.sleep(0, waitNanos[((int) (count & (waitNanos.length - 1)))]);
1:a3e0418:                 } catch (InterruptedException e)
1:a3e0418:                 {
1:a3e0418:                     e.printStackTrace();
1:a3e0418:                 }
1:a3e0418: 
1:a3e0418:                 final State s = state;
1:a3e0418:                 s.barrier = order.newBarrier();
1:a3e0418:                 s.replacement = new State();
1:a3e0418:                 s.barrier.issue();
1:a3e0418:                 s.barrier.await();
1:a3e0418:                 s.check();
1:a3e0418:                 opCount += s.totalCount();
1:a3e0418:                 state = s.replacement;
1:a3e0418:                 sched.schedule(new Runnable()
1:a3e0418:                 {
1:a3e0418:                     @Override
1:a3e0418:                     public void run()
1:a3e0418:                     {
1:a3e0418:                         s.check();
1:a3e0418:                     }
1:a3e0418:                 }, 1, TimeUnit.SECONDS);
1:a3e0418:                 count++;
1:a3e0418:             }
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:         class State
1:a3e0418:         {
1:a3e0418: 
1:a3e0418:             volatile OpOrder.Barrier barrier;
1:a3e0418:             volatile State replacement;
1:a3e0418:             final NonBlockingHashMap<OpOrder.Group, AtomicInteger> count = new NonBlockingHashMap<>();
1:a3e0418:             int checkCount = -1;
1:a3e0418: 
1:a3e0418:             boolean accept(OpOrder.Group opGroup)
1:a3e0418:             {
1:a3e0418:                 if (barrier != null && !barrier.isAfter(opGroup))
1:a3e0418:                     return false;
1:a3e0418:                 AtomicInteger c;
1:a3e0418:                 if (null == (c = count.get(opGroup)))
1:a3e0418:                 {
1:a3e0418:                     count.putIfAbsent(opGroup, new AtomicInteger());
1:a3e0418:                     c = count.get(opGroup);
1:a3e0418:                 }
1:a3e0418:                 c.incrementAndGet();
1:a3e0418:                 return true;
1:a3e0418:             }
1:a3e0418: 
1:a3e0418:             int totalCount()
1:a3e0418:             {
1:a3e0418:                 int c = 0;
1:a3e0418:                 for (AtomicInteger v : count.values())
1:a3e0418:                     c += v.intValue();
1:a3e0418:                 return c;
1:a3e0418:             }
1:a3e0418: 
1:a3e0418:             void check()
1:a3e0418:             {
1:a3e0418:                 boolean delete;
1:a3e0418:                 if (checkCount >= 0)
1:a3e0418:                 {
1:a3e0418:                     if (checkCount != totalCount())
1:a3e0418:                     {
1:a3e0418:                         errors.incrementAndGet();
1:a3e0418:                         logger.error("Received size changed after barrier finished: {} vs {}", checkCount, totalCount());
1:a3e0418:                     }
1:a3e0418:                     delete = true;
1:a3e0418:                 }
1:a3e0418:                 else
1:a3e0418:                 {
1:a3e0418:                     checkCount = totalCount();
1:a3e0418:                     delete = false;
1:a3e0418:                 }
1:a3e0418:                 for (Map.Entry<OpOrder.Group, AtomicInteger> e : count.entrySet())
1:a3e0418:                 {
1:a3e0418:                     if (e.getKey().compareTo(barrier.getSyncPoint()) > 0)
1:a3e0418:                     {
1:a3e0418:                         errors.incrementAndGet();
1:a3e0418:                         logger.error("Received an operation that was created after the barrier was issued.");
1:a3e0418:                     }
1:a3e0418:                     if (TestOrdering.this.count.get(e.getKey()).intValue() != e.getValue().intValue())
1:a3e0418:                     {
1:a3e0418:                         errors.incrementAndGet();
1:a3e0418:                         logger.error("Missing registered operations. {} vs {}", TestOrdering.this.count.get(e.getKey()).intValue(), e.getValue().intValue());
1:a3e0418:                     }
1:a3e0418:                     if (delete)
1:a3e0418:                         TestOrdering.this.count.remove(e.getKey());
1:a3e0418:                 }
1:a3e0418:             }
1:a3e0418: 
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:         final NonBlockingHashMap<OpOrder.Group, AtomicInteger> count = new NonBlockingHashMap<>();
1:a3e0418: 
1:a3e0418:         class Producer implements Runnable
1:a3e0418:         {
1:a3e0418:             public void run()
1:a3e0418:             {
1:a3e0418:                 while (true)
1:a3e0418:                 {
1:a3e0418:                     AtomicInteger c;
1:a3e0418:                     try (OpOrder.Group opGroup = order.start())
1:a3e0418:                     {
1:a3e0418:                         if (null == (c = count.get(opGroup)))
1:a3e0418:                         {
1:a3e0418:                             count.putIfAbsent(opGroup, new AtomicInteger());
1:a3e0418:                             c = count.get(opGroup);
1:a3e0418:                         }
1:a3e0418:                         c.incrementAndGet();
1:a3e0418:                         State s = state;
1:a3e0418:                         while (!s.accept(opGroup))
1:a3e0418:                             s = s.replacement;
1:a3e0418:                     }
1:a3e0418:                 }
1:a3e0418:             }
1:a3e0418:         }
1:a3e0418: 
1:a3e0418:     }
1:a3e0418: 
1:a3e0418:     @Test
1:a3e0418:     public void testOrdering() throws InterruptedException
1:a3e0418:     {
1:a3e0418:         errors.set(0);
1:a3e0418:         Thread.setDefaultUncaughtExceptionHandler(handler);
1:a3e0418:         final ExecutorService exec = Executors.newCachedThreadPool(new NamedThreadFactory("checker"));
1:a3e0418:         final ScheduledExecutorService checker = Executors.newScheduledThreadPool(1, new NamedThreadFactory("checker"));
1:a3e0418:         for (int i = 0 ; i < CONSUMERS ; i++)
1:a3e0418:             new TestOrdering(exec, checker);
1:a3e0418:         exec.shutdown();
1:a3e0418:         exec.awaitTermination((long) (RUNTIME * 1.1), TimeUnit.MILLISECONDS);
1:a3e0418:         assertTrue(exec.isShutdown());
1:a3e0418:         assertTrue(errors.get() == 0);
1:a3e0418:     }
1:a3e0418: 
1:a3e0418: 
1:a3e0418: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:a3e0418
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.concurrent;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.Map;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.ThreadLocalRandom;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.utils.concurrent.OpOrder;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: // TODO: we don't currently test SAFE functionality at all!
1: // TODO: should also test markBlocking and SyncOrdered
1: public class LongOpOrderTest
1: {
1: 
1:     private static final Logger logger = LoggerFactory.getLogger(LongOpOrderTest.class);
1: 
1:     static final int CONSUMERS = 4;
1:     static final int PRODUCERS = 32;
1: 
1:     static final long RUNTIME = TimeUnit.MINUTES.toMillis(5);
1:     static final long REPORT_INTERVAL = TimeUnit.MINUTES.toMillis(1);
1: 
1:     static final Thread.UncaughtExceptionHandler handler = new Thread.UncaughtExceptionHandler()
1:     {
1:         @Override
1:         public void uncaughtException(Thread t, Throwable e)
1:         {
1:             System.err.println(t.getName() + ": " + e.getMessage());
1:             e.printStackTrace();
1:         }
1:     };
1: 
1:     final OpOrder order = new OpOrder();
1:     final AtomicInteger errors = new AtomicInteger();
1: 
1:     class TestOrdering implements Runnable
1:     {
1: 
1:         final int[] waitNanos = new int[1 << 16];
1:         volatile State state = new State();
1:         final ScheduledExecutorService sched;
1: 
1:         TestOrdering(ExecutorService exec, ScheduledExecutorService sched)
1:         {
1:             this.sched = sched;
1:             final ThreadLocalRandom rnd = ThreadLocalRandom.current();
1:             for (int i = 0 ; i < waitNanos.length ; i++)
1:                 waitNanos[i] = rnd.nextInt(5000);
1:             for (int i = 0 ; i < PRODUCERS / CONSUMERS ; i++)
1:                 exec.execute(new Producer());
1:             exec.execute(this);
1:         }
1: 
1:         @Override
1:         public void run()
1:         {
1:             final long until = System.currentTimeMillis() + RUNTIME;
1:             long lastReport = System.currentTimeMillis();
1:             long count = 0;
1:             long opCount = 0;
1:             while (true)
1:             {
1:                 long now = System.currentTimeMillis();
1:                 if (now > until)
1:                     break;
1:                 if (now > lastReport + REPORT_INTERVAL)
1:                 {
1:                     lastReport = now;
1:                     logger.info(String.format("%s: Executed %d barriers with %d operations. %.0f%% complete.",
1:                             Thread.currentThread().getName(), count, opCount, 100 * (1 - ((until - now) / (double) RUNTIME))));
1:                 }
1:                 try
1:                 {
1:                     Thread.sleep(0, waitNanos[((int) (count & (waitNanos.length - 1)))]);
1:                 } catch (InterruptedException e)
1:                 {
1:                     e.printStackTrace();
1:                 }
1: 
1:                 final State s = state;
1:                 s.barrier = order.newBarrier();
1:                 s.replacement = new State();
1:                 s.barrier.issue();
1:                 s.barrier.await();
1:                 s.check();
1:                 opCount += s.totalCount();
1:                 state = s.replacement;
1:                 sched.schedule(new Runnable()
1:                 {
1:                     @Override
1:                     public void run()
1:                     {
1:                         s.check();
1:                     }
1:                 }, 1, TimeUnit.SECONDS);
1:                 count++;
1:             }
1:         }
1: 
1:         class State
1:         {
1: 
1:             volatile OpOrder.Barrier barrier;
1:             volatile State replacement;
1:             final NonBlockingHashMap<OpOrder.Group, AtomicInteger> count = new NonBlockingHashMap<>();
1:             int checkCount = -1;
1: 
1:             boolean accept(OpOrder.Group opGroup)
1:             {
1:                 if (barrier != null && !barrier.isAfter(opGroup))
1:                     return false;
1:                 AtomicInteger c;
1:                 if (null == (c = count.get(opGroup)))
1:                 {
1:                     count.putIfAbsent(opGroup, new AtomicInteger());
1:                     c = count.get(opGroup);
1:                 }
1:                 c.incrementAndGet();
1:                 return true;
1:             }
1: 
1:             int totalCount()
1:             {
1:                 int c = 0;
1:                 for (AtomicInteger v : count.values())
1:                     c += v.intValue();
1:                 return c;
1:             }
1: 
1:             void check()
1:             {
1:                 boolean delete;
1:                 if (checkCount >= 0)
1:                 {
1:                     if (checkCount != totalCount())
1:                     {
1:                         errors.incrementAndGet();
1:                         logger.error("Received size changed after barrier finished: {} vs {}", checkCount, totalCount());
1:                     }
1:                     delete = true;
1:                 }
1:                 else
1:                 {
1:                     checkCount = totalCount();
1:                     delete = false;
1:                 }
1:                 for (Map.Entry<OpOrder.Group, AtomicInteger> e : count.entrySet())
1:                 {
1:                     if (e.getKey().compareTo(barrier.getSyncPoint()) > 0)
1:                     {
1:                         errors.incrementAndGet();
1:                         logger.error("Received an operation that was created after the barrier was issued.");
1:                     }
1:                     if (TestOrdering.this.count.get(e.getKey()).intValue() != e.getValue().intValue())
1:                     {
1:                         errors.incrementAndGet();
1:                         logger.error("Missing registered operations. {} vs {}", TestOrdering.this.count.get(e.getKey()).intValue(), e.getValue().intValue());
1:                     }
1:                     if (delete)
1:                         TestOrdering.this.count.remove(e.getKey());
1:                 }
1:             }
1: 
1:         }
1: 
1:         final NonBlockingHashMap<OpOrder.Group, AtomicInteger> count = new NonBlockingHashMap<>();
1: 
1:         class Producer implements Runnable
1:         {
1:             public void run()
1:             {
1:                 while (true)
1:                 {
1:                     AtomicInteger c;
1:                     try (OpOrder.Group opGroup = order.start())
1:                     {
1:                         if (null == (c = count.get(opGroup)))
1:                         {
1:                             count.putIfAbsent(opGroup, new AtomicInteger());
1:                             c = count.get(opGroup);
1:                         }
1:                         c.incrementAndGet();
1:                         State s = state;
1:                         while (!s.accept(opGroup))
1:                             s = s.replacement;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:     }
1: 
1:     @Test
1:     public void testOrdering() throws InterruptedException
1:     {
1:         errors.set(0);
1:         Thread.setDefaultUncaughtExceptionHandler(handler);
1:         final ExecutorService exec = Executors.newCachedThreadPool(new NamedThreadFactory("checker"));
1:         final ScheduledExecutorService checker = Executors.newScheduledThreadPool(1, new NamedThreadFactory("checker"));
1:         for (int i = 0 ; i < CONSUMERS ; i++)
1:             new TestOrdering(exec, checker);
1:         exec.shutdown();
1:         exec.awaitTermination((long) (RUNTIME * 1.1), TimeUnit.MILLISECONDS);
1:         assertTrue(exec.isShutdown());
1:         assertTrue(errors.get() == 0);
1:     }
1: 
1: 
1: }
============================================================================