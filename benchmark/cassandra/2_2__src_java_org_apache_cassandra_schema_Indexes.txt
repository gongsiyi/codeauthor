1:06c130e: /*
1:06c130e:  * Licensed to the Apache Software Foundation (ASF) under one
1:06c130e:  * or more contributor license agreements.  See the NOTICE file
1:06c130e:  * distributed with this work for additional information
1:06c130e:  * regarding copyright ownership.  The ASF licenses this file
1:06c130e:  * to you under the Apache License, Version 2.0 (the
1:06c130e:  * "License"); you may not use this file except in compliance
1:06c130e:  * with the License.  You may obtain a copy of the License at
2:06c130e:  *
1:06c130e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:06c130e:  *
1:06c130e:  * Unless required by applicable law or agreed to in writing, software
1:06c130e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:06c130e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:06c130e:  * See the License for the specific language governing permissions and
1:06c130e:  * limitations under the License.
3:06c130e:  */
4:06c130e: 
1:06c130e: package org.apache.cassandra.schema;
1:06c130e: 
1:06c130e: import java.util.*;
1:06c130e: 
1:06c130e: import com.google.common.collect.ImmutableMap;
1:06c130e: 
1:06c130e: import org.apache.cassandra.config.Schema;
1:06c130e: 
1:06c130e: import static com.google.common.collect.Iterables.filter;
1:06c130e: 
3:06c130e: /**
1:06c130e:  * For backwards compatibility, in the first instance an IndexMetadata must have
1:06c130e:  * TargetType.COLUMN and its Set of target columns must contain only a single
1:06c130e:  * ColumnIdentifier. Hence, this is what is enforced by the public factory methods
1:06c130e:  * on IndexMetadata.
1:06c130e:  * These constraints, along with the internal datastructures here will be relaxed as
1:06c130e:  * support is added for multiple target columns per-index and for indexes with
1:06c130e:  * TargetType.ROW
1:06c130e:  */
1:06c130e: public class Indexes implements Iterable<IndexMetadata>
4:06c130e: {
1:e097efc:     private final ImmutableMap<String, IndexMetadata> indexesByName;
1:e097efc:     private final ImmutableMap<UUID, IndexMetadata> indexesById;
1:0626be8: 
1:06c130e:     private Indexes(Builder builder)
1:06c130e:     {
1:e097efc:         indexesByName = builder.indexesByName.build();
1:e097efc:         indexesById = builder.indexesById.build();
4:06c130e:     }
1:06c130e: 
1:06c130e:     public static Builder builder()
1:06c130e:     {
1:06c130e:         return new Builder();
1:06c130e:     }
1:06c130e: 
1:06c130e:     public static Indexes none()
1:06c130e:     {
1:06c130e:         return builder().build();
1:06c130e:     }
1:06c130e: 
1:06c130e:     public Iterator<IndexMetadata> iterator()
1:06c130e:     {
1:e097efc:         return indexesByName.values().iterator();
1:06c130e:     }
1:06c130e: 
1:06c130e:     public int size()
1:06c130e:     {
1:e097efc:         return indexesByName.size();
1:06c130e:     }
1:06c130e: 
1:06c130e:     public boolean isEmpty()
1:06c130e:     {
1:e097efc:         return indexesByName.isEmpty();
1:06c130e:     }
1:06c130e: 
1:06c130e:     /**
1:06c130e:      * Get the index with the specified name
1:06c130e:      *
1:06c130e:      * @param name a non-qualified index name
2:06c130e:      * @return an empty {@link Optional} if the named index is not found; a non-empty optional of {@link IndexMetadata} otherwise
1:06c130e:      */
1:06c130e:     public Optional<IndexMetadata> get(String name)
1:06c130e:     {
1:e097efc:         return Optional.ofNullable(indexesByName.get(name));
1:06c130e:     }
1:06c130e: 
1:06c130e:     /**
1:06c130e:      * Answer true if contains an index with the specified name.
1:06c130e:      * @param name a non-qualified index name.
1:06c130e:      * @return true if the named index is found; false otherwise
1:06c130e:      */
1:06c130e:     public boolean has(String name)
1:06c130e:     {
1:e097efc:         return indexesByName.containsKey(name);
1:e097efc:     }
1:e097efc: 
1:e097efc:     /**
1:e097efc:      * Get the index with the specified id
1:e097efc:      *
1:6536c05:      * @param id a UUID which identifies an index
1:e097efc:      * @return an empty {@link Optional} if no index with the specified id is found; a non-empty optional of
1:e097efc:      *         {@link IndexMetadata} otherwise
1:e097efc:      */
1:e097efc: 
1:e097efc:     public Optional<IndexMetadata> get(UUID id)
1:e097efc:     {
1:e097efc:         return Optional.ofNullable(indexesById.get(id));
1:e097efc:     }
1:e097efc: 
1:e097efc:     /**
1:e097efc:      * Answer true if contains an index with the specified id.
1:6536c05:      * @param id a UUID which identifies an index.
1:e097efc:      * @return true if an index with the specified id is found; false otherwise
1:e097efc:      */
1:e097efc:     public boolean has(UUID id)
1:e097efc:     {
1:e097efc:         return indexesById.containsKey(id);
1:06c130e:     }
1:06c130e: 
1:06c130e:     /**
1:06c130e:      * Create a SecondaryIndexes instance with the provided index added
1:06c130e:      */
1:06c130e:     public Indexes with(IndexMetadata index)
1:06c130e:     {
1:06c130e:         if (get(index.name).isPresent())
1:06c130e:             throw new IllegalStateException(String.format("Index %s already exists", index.name));
1:06c130e: 
1:06c130e:         return builder().add(this).add(index).build();
1:06c130e:     }
1:06c130e: 
1:06c130e:     /**
1:06c130e:      * Creates a SecondaryIndexes instance with the index with the provided name removed
1:06c130e:      */
1:06c130e:     public Indexes without(String name)
1:06c130e:     {
1:06c130e:         IndexMetadata index = get(name).orElseThrow(() -> new IllegalStateException(String.format("Index %s doesn't exist", name)));
1:06c130e:         return builder().add(filter(this, v -> v != index)).build();
1:06c130e:     }
1:06c130e: 
1:06c130e:     /**
1:06c130e:      * Creates a SecondaryIndexes instance which contains an updated index definition
1:06c130e:      */
1:06c130e:     public Indexes replace(IndexMetadata index)
1:06c130e:     {
1:06c130e:         return without(index.name).with(index);
1:06c130e:     }
1:06c130e: 
1:06c130e:     @Override
1:06c130e:     public boolean equals(Object o)
1:06c130e:     {
1:e097efc:         return this == o || (o instanceof Indexes && indexesByName.equals(((Indexes) o).indexesByName));
1:06c130e:     }
1:06c130e: 
1:06c130e:     @Override
1:06c130e:     public int hashCode()
1:06c130e:     {
1:e097efc:         return indexesByName.hashCode();
1:06c130e:     }
1:06c130e: 
1:06c130e:     @Override
1:06c130e:     public String toString()
1:06c130e:     {
1:e097efc:         return indexesByName.values().toString();
1:06c130e:     }
1:06c130e: 
1:df3972e:     public static String getAvailableIndexName(String ksName, String cfName, String indexNameRoot)
1:06c130e:     {
1:06c130e: 
1:06c130e:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(ksName);
1:06c130e:         Set<String> existingNames = ksm == null ? new HashSet<>() : ksm.existingIndexNames(null);
1:df3972e:         String baseName = IndexMetadata.getDefaultIndexName(cfName, indexNameRoot);
1:06c130e:         String acceptedName = baseName;
1:06c130e:         int i = 0;
1:06c130e:         while (existingNames.contains(acceptedName))
1:06c130e:             acceptedName = baseName + '_' + (++i);
1:06c130e: 
1:06c130e:         return acceptedName;
1:06c130e:     }
1:06c130e: 
1:06c130e:     public static final class Builder
1:06c130e:     {
1:e097efc:         final ImmutableMap.Builder<String, IndexMetadata> indexesByName = new ImmutableMap.Builder<>();
1:e097efc:         final ImmutableMap.Builder<UUID, IndexMetadata> indexesById = new ImmutableMap.Builder<>();
1:06c130e: 
1:06c130e:         private Builder()
1:06c130e:         {
1:06c130e:         }
1:06c130e: 
1:06c130e:         public Indexes build()
1:06c130e:         {
1:06c130e:             return new Indexes(this);
1:06c130e:         }
1:06c130e: 
1:06c130e:         public Builder add(IndexMetadata index)
1:0626be8:         {
1:e097efc:             indexesByName.put(index.name, index);
1:e097efc:             indexesById.put(index.id, index);
1:06c130e:             return this;
1:0626be8:         }
1:06c130e: 
1:06c130e:         public Builder add(Iterable<IndexMetadata> indexes)
1:06c130e:         {
1:06c130e:             indexes.forEach(this::add);
1:06c130e:             return this;
1:06c130e:         }
1:06c130e:     }
1:06c130e: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6536c05
/////////////////////////////////////////////////////////////////////////
1:      * @param id a UUID which identifies an index
/////////////////////////////////////////////////////////////////////////
1:      * @param id a UUID which identifies an index.
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:df3972e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static String getAvailableIndexName(String ksName, String cfName, String indexNameRoot)
1:         String baseName = IndexMetadata.getDefaultIndexName(cfName, indexNameRoot);
commit:fde97c3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e097efc
/////////////////////////////////////////////////////////////////////////
1:     private final ImmutableMap<String, IndexMetadata> indexesByName;
1:     private final ImmutableMap<UUID, IndexMetadata> indexesById;
1:         indexesByName = builder.indexesByName.build();
1:         indexesById = builder.indexesById.build();
/////////////////////////////////////////////////////////////////////////
1:         return indexesByName.values().iterator();
1:         return indexesByName.size();
1:         return indexesByName.isEmpty();
/////////////////////////////////////////////////////////////////////////
1:         return Optional.ofNullable(indexesByName.get(name));
/////////////////////////////////////////////////////////////////////////
1:         return indexesByName.containsKey(name);
1:     }
1: 
1:     /**
1:      * Get the index with the specified id
1:      *
0:      * @param name a UUID which identifies an index
1:      * @return an empty {@link Optional} if no index with the specified id is found; a non-empty optional of
1:      *         {@link IndexMetadata} otherwise
1:      */
1: 
1:     public Optional<IndexMetadata> get(UUID id)
1:     {
1:         return Optional.ofNullable(indexesById.get(id));
1:     }
1: 
1:     /**
1:      * Answer true if contains an index with the specified id.
0:      * @param name a UUID which identifies an index.
1:      * @return true if an index with the specified id is found; false otherwise
1:      */
1:     public boolean has(UUID id)
1:     {
1:         return indexesById.containsKey(id);
/////////////////////////////////////////////////////////////////////////
1:         return this == o || (o instanceof Indexes && indexesByName.equals(((Indexes) o).indexesByName));
1:         return indexesByName.hashCode();
1:         return indexesByName.values().toString();
/////////////////////////////////////////////////////////////////////////
1:         final ImmutableMap.Builder<String, IndexMetadata> indexesByName = new ImmutableMap.Builder<>();
1:         final ImmutableMap.Builder<UUID, IndexMetadata> indexesById = new ImmutableMap.Builder<>();
/////////////////////////////////////////////////////////////////////////
1:             indexesByName.put(index.name, index);
1:             indexesById.put(index.id, index);
commit:0626be8
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.ImmutableMultimap;
/////////////////////////////////////////////////////////////////////////
0:     private final ImmutableMap<String, IndexMetadata> indexes;
0:     private final ImmutableMultimap<ColumnIdentifier, IndexMetadata> indexesByColumn;
0:         indexes = builder.indexes.build();
0:         indexesByColumn = builder.indexesByColumn.build();
/////////////////////////////////////////////////////////////////////////
0:     public Collection<IndexMetadata> get(ColumnDefinition column)
0:         return indexesByColumn.get(column.name);
/////////////////////////////////////////////////////////////////////////
0:         return !indexesByColumn.get(column.name).isEmpty();
/////////////////////////////////////////////////////////////////////////
0:         final ImmutableMultimap.Builder<ColumnIdentifier, IndexMetadata> indexesByColumn = new ImmutableMultimap.Builder<>();
/////////////////////////////////////////////////////////////////////////
0:             // All indexes are column indexes at the moment
0:             if (index.isColumnIndex())
1:             {
0:                 for (ColumnIdentifier target : index.columns)
0:                     indexesByColumn.put(target, index);
1: 
1:             }
commit:06c130e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.schema;
1: 
1: import java.util.*;
1: 
1: import com.google.common.collect.ImmutableMap;
1: 
0: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.cql3.ColumnIdentifier;
1: 
1: import static com.google.common.collect.Iterables.filter;
1: 
1: /**
1:  * For backwards compatibility, in the first instance an IndexMetadata must have
1:  * TargetType.COLUMN and its Set of target columns must contain only a single
1:  * ColumnIdentifier. Hence, this is what is enforced by the public factory methods
1:  * on IndexMetadata.
1:  * These constraints, along with the internal datastructures here will be relaxed as
1:  * support is added for multiple target columns per-index and for indexes with
1:  * TargetType.ROW
1:  */
1: public class Indexes implements Iterable<IndexMetadata>
1: {
0:     // lookup for index by target column
0:     private final ImmutableMap<ColumnIdentifier, IndexMetadata> indexes;
1: 
1:     private Indexes(Builder builder)
1:     {
0:         ImmutableMap.Builder<ColumnIdentifier, IndexMetadata> internalBuilder = ImmutableMap.builder();
0:         builder.indexes.build()
0:                        .values()
0:                        .stream()
0:                        .forEach(def -> internalBuilder.put(def.columns.iterator().next(), def));
0:         indexes = internalBuilder.build();
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static Indexes none()
1:     {
1:         return builder().build();
1:     }
1: 
1:     public Iterator<IndexMetadata> iterator()
1:     {
0:         return indexes.values().iterator();
1:     }
1: 
1:     public int size()
1:     {
0:         return indexes.size();
1:     }
1: 
1:     public boolean isEmpty()
1:     {
0:         return indexes.isEmpty();
1:     }
1: 
1:     /**
1:      * Get the index with the specified name
1:      *
1:      * @param name a non-qualified index name
1:      * @return an empty {@link Optional} if the named index is not found; a non-empty optional of {@link IndexMetadata} otherwise
1:      */
1:     public Optional<IndexMetadata> get(String name)
1:     {
0:         return indexes.values().stream().filter(def -> def.name.equals(name)).findFirst();
1:     }
1: 
1:     /**
1:      * Answer true if contains an index with the specified name.
1:      * @param name a non-qualified index name.
1:      * @return true if the named index is found; false otherwise
1:      */
1:     public boolean has(String name)
1:     {
0:         return get(name).isPresent();
1:     }
1: 
1:     /**
0:      * Get the index associated with the specified column. This may be removed or modified as support is added
0:      * for indexes with multiple target columns and with TargetType.ROW
1:      *
0:      * @param column a column definition for which an {@link IndexMetadata} is being sought
1:      * @return an empty {@link Optional} if the named index is not found; a non-empty optional of {@link IndexMetadata} otherwise
1:      */
0:     public Optional<IndexMetadata> get(ColumnDefinition column)
1:     {
0:         return Optional.ofNullable(indexes.get(column.name));
1:     }
1: 
1:     /**
0:      * Answer true if an index is associated with the specified column.
0:      * @param column
0:      * @return
1:      */
0:     public boolean hasIndexFor(ColumnDefinition column)
1:     {
0:         return indexes.get(column.name) != null;
1:     }
1: 
1:     /**
1:      * Create a SecondaryIndexes instance with the provided index added
1:      */
1:     public Indexes with(IndexMetadata index)
1:     {
1:         if (get(index.name).isPresent())
1:             throw new IllegalStateException(String.format("Index %s already exists", index.name));
1: 
1:         return builder().add(this).add(index).build();
1:     }
1: 
1:     /**
1:      * Creates a SecondaryIndexes instance with the index with the provided name removed
1:      */
1:     public Indexes without(String name)
1:     {
1:         IndexMetadata index = get(name).orElseThrow(() -> new IllegalStateException(String.format("Index %s doesn't exist", name)));
1:         return builder().add(filter(this, v -> v != index)).build();
1:     }
1: 
1:     /**
1:      * Creates a SecondaryIndexes instance which contains an updated index definition
1:      */
1:     public Indexes replace(IndexMetadata index)
1:     {
1:         return without(index.name).with(index);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
0:         return this == o || (o instanceof Indexes && indexes.equals(((Indexes) o).indexes));
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         return indexes.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return indexes.values().toString();
1:     }
1: 
0:     public static String getAvailableIndexName(String ksName, String cfName, ColumnIdentifier columnName)
1:     {
1: 
1:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(ksName);
1:         Set<String> existingNames = ksm == null ? new HashSet<>() : ksm.existingIndexNames(null);
0:         String baseName = IndexMetadata.getDefaultIndexName(cfName, columnName);
1:         String acceptedName = baseName;
1:         int i = 0;
1:         while (existingNames.contains(acceptedName))
1:             acceptedName = baseName + '_' + (++i);
1: 
1:         return acceptedName;
1:     }
1: 
1:     public static final class Builder
1:     {
0:         final ImmutableMap.Builder<String, IndexMetadata> indexes = new ImmutableMap.Builder<>();
1: 
1:         private Builder()
1:         {
1:         }
1: 
1:         public Indexes build()
1:         {
1:             return new Indexes(this);
1:         }
1: 
1:         public Builder add(IndexMetadata index)
1:         {
0:             indexes.put(index.name, index);
1:             return this;
1:         }
1: 
1:         public Builder add(Iterable<IndexMetadata> indexes)
1:         {
1:             indexes.forEach(this::add);
1:             return this;
1:         }
1:     }
1: }
============================================================================