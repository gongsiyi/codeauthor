1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
1:01115f7:  */
1:01115f7: 
1:01115f7: package org.apache.cassandra.cql3.validation.entities;
1:01115f7: 
1:01115f7: import java.util.Date;
1:01115f7: import java.util.UUID;
1:01115f7: 
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: import org.apache.cassandra.exceptions.SyntaxException;
1:01115f7: import org.apache.cassandra.utils.UUIDGen;
1:01115f7: 
1:01115f7: import static org.junit.Assert.assertEquals;
1:01115f7: 
1:01115f7: public class TimeuuidTest extends CQLTester
1:01115f7: {
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.timeuuid_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testTimeuuid() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, t timeuuid, PRIMARY KEY(k, t))");
1:01115f7: 
1:01115f7:         assertInvalidThrow(SyntaxException.class, "INSERT INTO %s (k, t) VALUES (0, 2012-11-07 18:18:22-0800)");
1:01115f7: 
1:01115f7:         for (int i = 0; i < 4; i++)
1:01115f7:             execute("INSERT INTO %s (k, t) VALUES (0, now())");
1:01115f7: 
1:01115f7:         Object[][] rows = getRows(execute("SELECT * FROM %s"));
1:01115f7:         assertEquals(4, rows.length);
1:01115f7: 
1:01115f7:         assertRowCount(execute("SELECT * FROM %s WHERE k = 0 AND t >= ?", rows[0][1]), 4);
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE k = 0 AND t < ?", rows[0][1]));
1:01115f7: 
1:01115f7:         assertRowCount(execute("SELECT * FROM %s WHERE k = 0 AND t > ? AND t <= ?", rows[0][1], rows[2][1]), 2);
1:01115f7: 
1:01115f7:         assertRowCount(execute("SELECT * FROM %s WHERE k = 0 AND t = ?", rows[0][1]), 1);
1:01115f7: 
1:01115f7:         assertInvalid("SELECT dateOf(k) FROM %s WHERE k = 0 AND t = ?", rows[0][1]);
1:01115f7: 
1:01115f7:         for (int i = 0; i < 4; i++)
1:01115f7:         {
1:01115f7:             long timestamp = UUIDGen.unixTimestamp((UUID) rows[i][1]);
1:01115f7:             assertRows(execute("SELECT dateOf(t), unixTimestampOf(t) FROM %s WHERE k = 0 AND t = ?", rows[i][1]),
1:01115f7:                        row(new Date(timestamp), timestamp));
1:01115f7:         }
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT t FROM %s WHERE k = 0 AND t > maxTimeuuid(1234567) AND t < minTimeuuid('2012-11-07 18:18:22-0800')"));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for 5386,
1:01115f7:      * migrated from cql_tests.py:TestCQL.function_and_reverse_type_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testDescClusteringOnTimeuuid() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, c timeuuid, v int, PRIMARY KEY (k, c)) WITH CLUSTERING ORDER BY (c DESC)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, c, v) VALUES (0, now(), 0)");
1:01115f7:     }
1:01115f7: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.validation.entities;
1: 
1: import java.util.Date;
1: import java.util.UUID;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.exceptions.SyntaxException;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class TimeuuidTest extends CQLTester
1: {
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.timeuuid_test()
1:      */
1:     @Test
1:     public void testTimeuuid() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, t timeuuid, PRIMARY KEY(k, t))");
1: 
1:         assertInvalidThrow(SyntaxException.class, "INSERT INTO %s (k, t) VALUES (0, 2012-11-07 18:18:22-0800)");
1: 
1:         for (int i = 0; i < 4; i++)
1:             execute("INSERT INTO %s (k, t) VALUES (0, now())");
1: 
1:         Object[][] rows = getRows(execute("SELECT * FROM %s"));
1:         assertEquals(4, rows.length);
1: 
1:         assertRowCount(execute("SELECT * FROM %s WHERE k = 0 AND t >= ?", rows[0][1]), 4);
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE k = 0 AND t < ?", rows[0][1]));
1: 
1:         assertRowCount(execute("SELECT * FROM %s WHERE k = 0 AND t > ? AND t <= ?", rows[0][1], rows[2][1]), 2);
1: 
1:         assertRowCount(execute("SELECT * FROM %s WHERE k = 0 AND t = ?", rows[0][1]), 1);
1: 
1:         assertInvalid("SELECT dateOf(k) FROM %s WHERE k = 0 AND t = ?", rows[0][1]);
1: 
1:         for (int i = 0; i < 4; i++)
1:         {
1:             long timestamp = UUIDGen.unixTimestamp((UUID) rows[i][1]);
1:             assertRows(execute("SELECT dateOf(t), unixTimestampOf(t) FROM %s WHERE k = 0 AND t = ?", rows[i][1]),
1:                        row(new Date(timestamp), timestamp));
1:         }
1: 
1:         assertEmpty(execute("SELECT t FROM %s WHERE k = 0 AND t > maxTimeuuid(1234567) AND t < minTimeuuid('2012-11-07 18:18:22-0800')"));
1:     }
1: 
1:     /**
1:      * Test for 5386,
1:      * migrated from cql_tests.py:TestCQL.function_and_reverse_type_test()
1:      */
1:     @Test
1:     public void testDescClusteringOnTimeuuid() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, c timeuuid, v int, PRIMARY KEY (k, c)) WITH CLUSTERING ORDER BY (c DESC)");
1: 
1:         execute("INSERT INTO %s (k, c, v) VALUES (0, now(), 0)");
1:     }
1: }
============================================================================