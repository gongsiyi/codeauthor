1:3bee990: package org.apache.cassandra.stress.operations.userdefined;
1:3bee990: /*
1:3bee990:  * 
1:3bee990:  * Licensed to the Apache Software Foundation (ASF) under one
1:3bee990:  * or more contributor license agreements.  See the NOTICE file
1:3bee990:  * distributed with this work for additional information
1:3bee990:  * regarding copyright ownership.  The ASF licenses this file
1:3bee990:  * to you under the Apache License, Version 2.0 (the
1:3bee990:  * "License"); you may not use this file except in compliance
1:3bee990:  * with the License.  You may obtain a copy of the License at
1:3bee990:  * 
1:3bee990:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3bee990:  * 
1:3bee990:  * Unless required by applicable law or agreed to in writing,
1:3bee990:  * software distributed under the License is distributed on an
1:3bee990:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3bee990:  * KIND, either express or implied.  See the License for the
1:3bee990:  * specific language governing permissions and limitations
1:3bee990:  * under the License.
1:3bee990:  * 
1:3bee990:  */
2:3bee990: 
1:3bee990: 
1:3bee990: import java.io.IOException;
1:3bee990: import java.nio.ByteBuffer;
1:3bee990: import java.util.ArrayList;
1:3bee990: import java.util.Iterator;
1:3bee990: import java.util.List;
1:3bee990: import java.util.concurrent.ThreadLocalRandom;
1:3bee990: 
1:3bee990: import com.datastax.driver.core.*;
1:3bee990: import org.apache.cassandra.db.ConsistencyLevel;
1:3bee990: import org.apache.cassandra.stress.generate.*;
1:3bee990: import org.apache.cassandra.stress.generate.Row;
1:f27ab29: import org.apache.cassandra.stress.operations.PartitionOperation;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:3bee990: import org.apache.cassandra.stress.settings.StressSettings;
1:3bee990: import org.apache.cassandra.stress.util.JavaDriverClient;
1:3bee990: import org.apache.cassandra.stress.util.ThriftClient;
1:3bee990: import org.apache.cassandra.thrift.Compression;
1:3bee990: import org.apache.cassandra.thrift.CqlResult;
1:3bee990: import org.apache.cassandra.thrift.CqlRow;
1:3bee990: import org.apache.cassandra.thrift.ThriftConversion;
1:3bee990: import org.apache.cassandra.utils.Pair;
1:3bee990: import org.apache.thrift.TException;
1:3bee990: 
1:f27ab29: public class ValidatingSchemaQuery extends PartitionOperation
2:3bee990: {
1:3bee990:     private Pair<Row, Row> bounds;
1:3bee990: 
1:3bee990:     final int clusteringComponents;
1:3bee990:     final ValidatingStatement[] statements;
1:3bee990:     final ConsistencyLevel cl;
1:3bee990:     final int[] argumentIndex;
1:3bee990:     final Object[] bindBuffer;
1:3bee990: 
1:3bee990:     private ValidatingSchemaQuery(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, ValidatingStatement[] statements, ConsistencyLevel cl, int clusteringComponents)
1:3bee990:     {
1:6d29ed0:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), settings.insert.rowPopulationRatio.get(), 1));
1:3bee990:         this.statements = statements;
1:3bee990:         this.cl = cl;
1:3bee990:         argumentIndex = new int[statements[0].statement.getVariables().size()];
1:3bee990:         bindBuffer = new Object[argumentIndex.length];
1:3bee990:         int i = 0;
1:3bee990:         for (ColumnDefinitions.Definition definition : statements[0].statement.getVariables())
1:3bee990:             argumentIndex[i++] = spec.partitionGenerator.indexOf(definition.getName());
1:3bee990: 
1:3bee990:         for (ValidatingStatement statement : statements)
1:3bee990:             statement.statement.setConsistencyLevel(JavaDriverClient.from(cl));
1:3bee990:         this.clusteringComponents = clusteringComponents;
2:3bee990:     }
1:3bee990: 
1:3bee990:     protected boolean reset(Seed seed, PartitionIterator iterator)
1:3bee990:     {
1:3bee990:         bounds = iterator.resetToBounds(seed, clusteringComponents);
2:3bee990:         return true;
1:3bee990:     }
1:3bee990: 
1:3bee990:     abstract class Runner implements RunOp
1:3bee990:     {
1:3bee990:         int partitionCount;
1:3bee990:         int rowCount;
1:3bee990:         final PartitionIterator iter;
1:3bee990:         final int statementIndex;
1:3bee990: 
1:3bee990:         protected Runner(PartitionIterator iter)
1:3bee990:         {
1:3bee990:             this.iter = iter;
1:3bee990:             statementIndex = ThreadLocalRandom.current().nextInt(statements.length);
1:3bee990:         }
1:3bee990: 
2:3bee990:         @Override
1:3bee990:         public int partitionCount()
1:3bee990:         {
1:3bee990:             return partitionCount;
1:3bee990:         }
1:3bee990: 
1:3bee990:         @Override
1:3bee990:         public int rowCount()
1:3bee990:         {
1:3bee990:             return rowCount;
1:3bee990:         }
1:3bee990:     }
1:3bee990: 
1:3bee990:     private class JavaDriverRun extends Runner
1:3bee990:     {
1:3bee990:         final JavaDriverClient client;
1:3bee990: 
1:3bee990:         private JavaDriverRun(JavaDriverClient client, PartitionIterator iter)
1:3bee990:         {
1:3bee990:             super(iter);
1:3bee990:             this.client = client;
1:3bee990:         }
1:3bee990: 
1:3bee990:         public boolean run() throws Exception
1:3bee990:         {
1:3bee990:             ResultSet rs = client.getSession().execute(bind(statementIndex));
1:3bee990:             int[] valueIndex = new int[rs.getColumnDefinitions().size()];
1:3bee990:             {
1:3bee990:                 int i = 0;
1:3bee990:                 for (ColumnDefinitions.Definition definition : rs.getColumnDefinitions())
1:3bee990:                     valueIndex[i++] = spec.partitionGenerator.indexOf(definition.getName());
1:3bee990:             }
1:3bee990: 
1:3bee990:             rowCount = 0;
1:3bee990:             Iterator<com.datastax.driver.core.Row> results = rs.iterator();
1:3bee990:             if (!statements[statementIndex].inclusiveStart && iter.hasNext())
1:3bee990:                 iter.next();
1:3bee990:             while (iter.hasNext())
1:3bee990:             {
1:3bee990:                 Row expectedRow = iter.next();
1:3bee990:                 if (!statements[statementIndex].inclusiveEnd && !iter.hasNext())
1:3bee990:                     break;
1:3bee990: 
1:3bee990:                 if (!results.hasNext())
2:3bee990:                     return false;
1:3bee990: 
1:3bee990:                 rowCount++;
1:3bee990:                 com.datastax.driver.core.Row actualRow = results.next();
1:3bee990:                 for (int i = 0 ; i < actualRow.getColumnDefinitions().size() ; i++)
1:3bee990:                 {
1:3bee990:                     Object expectedValue = expectedRow.get(valueIndex[i]);
1:3bee990:                     Object actualValue = spec.partitionGenerator.convert(valueIndex[i], actualRow.getBytesUnsafe(i));
1:3bee990:                     if (!expectedValue.equals(actualValue))
1:3bee990:                         return false;
1:3bee990:                 }
1:3bee990:             }
1:3bee990:             partitionCount = Math.min(1, rowCount);
1:2096bce:             return rs.isExhausted();
1:3bee990:         }
1:3bee990:     }
1:3bee990: 
1:3bee990:     private class ThriftRun extends Runner
1:3bee990:     {
1:3bee990:         final ThriftClient client;
1:3bee990: 
1:3bee990:         private ThriftRun(ThriftClient client, PartitionIterator iter)
1:3bee990:         {
1:3bee990:             super(iter);
1:3bee990:             this.client = client;
1:3bee990:         }
1:3bee990: 
1:3bee990:         public boolean run() throws Exception
1:3bee990:         {
1:3bee990:             CqlResult rs = client.execute_prepared_cql3_query(statements[statementIndex].thriftId, partitions.get(0).getToken(), thriftArgs(), ThriftConversion.toThrift(cl));
1:3bee990:             int[] valueIndex = new int[rs.getSchema().name_types.size()];
1:3bee990:                 for (int i = 0 ; i < valueIndex.length ; i++)
1:3bee990:                     valueIndex[i] = spec.partitionGenerator.indexOf(rs.fieldForId(i).getFieldName());
1:3bee990:             int r = 0;
1:3bee990:             if (!statements[statementIndex].inclusiveStart && iter.hasNext())
1:3bee990:                 iter.next();
1:3bee990:             while (iter.hasNext())
1:3bee990:             {
1:3bee990:                 Row expectedRow = iter.next();
1:3bee990:                 if (!statements[statementIndex].inclusiveEnd && !iter.hasNext())
1:3bee990:                     break;
1:3bee990: 
1:3bee990:                 if (r == rs.num)
1:3bee990:                     return false;
1:3bee990: 
1:3bee990:                 rowCount++;
1:3bee990:                 CqlRow actualRow = rs.getRows().get(r++);
1:3bee990:                 for (int i = 0 ; i < actualRow.getColumnsSize() ; i++)
1:3bee990:                 {
1:3bee990:                     ByteBuffer expectedValue = spec.partitionGenerator.convert(valueIndex[i], expectedRow.get(valueIndex[i]));
1:3bee990:                     ByteBuffer actualValue = actualRow.getColumns().get(i).value;
1:3bee990:                     if (!expectedValue.equals(actualValue))
1:3bee990:                         return false;
1:3bee990:                 }
1:3bee990:             }
1:3bee990:             assert r == rs.num;
1:3bee990:             partitionCount = Math.min(1, rowCount);
1:3bee990:             return true;
1:3bee990:         }
1:3bee990:     }
1:3bee990: 
1:3bee990:     BoundStatement bind(int statementIndex)
1:3bee990:     {
1:3bee990:         int pkc = bounds.left.partitionKey.length;
1:3bee990:         System.arraycopy(bounds.left.partitionKey, 0, bindBuffer, 0, pkc);
1:3bee990:         int ccc = bounds.left.row.length;
1:3bee990:         System.arraycopy(bounds.left.row, 0, bindBuffer, pkc, ccc);
1:3bee990:         System.arraycopy(bounds.right.row, 0, bindBuffer, pkc + ccc, ccc);
1:3bee990:         return statements[statementIndex].statement.bind(bindBuffer);
1:3bee990:     }
1:3bee990: 
1:3bee990:     List<ByteBuffer> thriftArgs()
1:3bee990:     {
1:3bee990:         List<ByteBuffer> args = new ArrayList<>();
1:3bee990:         int pkc = bounds.left.partitionKey.length;
1:3bee990:         for (int i = 0 ; i < pkc ; i++)
1:3bee990:             args.add(spec.partitionGenerator.convert(-i, bounds.left.partitionKey[i]));
1:3bee990:         int ccc = bounds.left.row.length;
1:3bee990:         for (int i = 0 ; i < ccc ; i++)
1:3bee990:             args.add(spec.partitionGenerator.convert(i, bounds.left.get(i)));
1:3bee990:         for (int i = 0 ; i < ccc ; i++)
1:3bee990:             args.add(spec.partitionGenerator.convert(i, bounds.right.get(i)));
1:3bee990:         return args;
1:3bee990:     }
1:3bee990: 
1:3bee990:     @Override
1:3bee990:     public void run(JavaDriverClient client) throws IOException
1:3bee990:     {
1:3bee990:         timeWithRetry(new JavaDriverRun(client, partitions.get(0)));
1:3bee990:     }
1:3bee990: 
1:3bee990:     @Override
1:3bee990:     public void run(ThriftClient client) throws IOException
1:3bee990:     {
1:3bee990:         timeWithRetry(new ThriftRun(client, partitions.get(0)));
1:3bee990:     }
1:3bee990: 
1:3bee990:     public static class Factory
1:3bee990:     {
1:3bee990:         final ValidatingStatement[] statements;
1:3bee990:         final int clusteringComponents;
1:3bee990: 
1:3bee990:         public Factory(ValidatingStatement[] statements, int clusteringComponents)
1:3bee990:         {
1:3bee990:             this.statements = statements;
1:3bee990:             this.clusteringComponents = clusteringComponents;
1:3bee990:         }
1:3bee990: 
1:3bee990:         public ValidatingSchemaQuery create(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, ConsistencyLevel cl)
1:3bee990:         {
1:3bee990:             return new ValidatingSchemaQuery(timer, settings, generator, seedManager, statements, cl, clusteringComponents);
1:3bee990:         }
1:3bee990:     }
1:3bee990: 
1:3bee990:     public static List<Factory> create(TableMetadata metadata, StressSettings settings)
1:3bee990:     {
1:3bee990:         List<Factory> factories = new ArrayList<>();
1:3bee990:         StringBuilder sb = new StringBuilder();
1:3bee990:         boolean first = true;
1:3bee990:         sb.append("SELECT * FROM ");
1:3bee990:         sb.append(metadata.getName());
1:3bee990:         sb.append(" WHERE");
1:3bee990:         for (ColumnMetadata pk : metadata.getPartitionKey())
1:3bee990:         {
1:3bee990:             sb.append(first ? " " : " AND ");
1:3bee990:             sb.append(pk.getName());
1:3bee990:             sb.append(" = ?");
1:3bee990:             first = false;
1:3bee990:         }
1:3bee990:         String base = sb.toString();
1:3bee990: 
1:3bee990:         factories.add(new Factory(new ValidatingStatement[] { prepare(settings, base, true, true) }, 0));
1:3bee990: 
1:3bee990:         int maxDepth = metadata.getClusteringColumns().size() - 1;
1:3bee990:         for (int depth = 0 ; depth <= maxDepth  ; depth++)
1:3bee990:         {
1:3bee990:             StringBuilder cc = new StringBuilder();
1:3bee990:             StringBuilder arg = new StringBuilder();
1:0f5e780:             cc.append('('); arg.append('(');
1:3bee990:             for (int d = 0 ; d <= depth ; d++)
1:3bee990:             {
1:0f5e780:                 if (d > 0) { cc.append(','); arg.append(','); }
1:3bee990:                 cc.append(metadata.getClusteringColumns().get(d).getName());
1:0f5e780:                 arg.append('?');
1:3bee990:             }
1:0f5e780:             cc.append(')'); arg.append(')');
1:3bee990: 
1:3bee990:             ValidatingStatement[] statements = new ValidatingStatement[depth < maxDepth ? 1 : 4];
1:3bee990:             int i = 0;
1:3bee990:             for (boolean incLb : depth < maxDepth ? new boolean[] { true } : new boolean[] { true, false } )
1:3bee990:             {
1:3bee990:                 for (boolean incUb : depth < maxDepth ? new boolean[] { false } : new boolean[] { true, false } )
1:3bee990:                 {
1:3bee990:                     String lb = incLb ? ">=" : ">";
1:3bee990:                     String ub = incUb ? "<=" : "<";
1:3bee990:                     sb.setLength(0);
1:3bee990:                     sb.append(base);
1:3bee990:                     sb.append(" AND ");
1:3bee990:                     sb.append(cc);
1:3bee990:                     sb.append(lb);
1:3bee990:                     sb.append(arg);
1:3bee990:                     sb.append(" AND ");
1:3bee990:                     sb.append(cc);
1:3bee990:                     sb.append(ub);
1:3bee990:                     sb.append(arg);
1:3bee990:                     statements[i++] = prepare(settings, sb.toString(), incLb, incUb);
1:3bee990:                 }
1:3bee990:             }
1:3bee990:             factories.add(new Factory(statements, depth + 1));
1:3bee990:         }
1:3bee990: 
1:3bee990:         return factories;
1:3bee990:     }
1:3bee990: 
1:3bee990:     private static class ValidatingStatement
1:3bee990:     {
1:3bee990:         final PreparedStatement statement;
1:3bee990:         final Integer thriftId;
1:3bee990:         final boolean inclusiveStart;
1:3bee990:         final boolean inclusiveEnd;
1:3bee990:         private ValidatingStatement(PreparedStatement statement, Integer thriftId, boolean inclusiveStart, boolean inclusiveEnd)
1:3bee990:         {
1:3bee990:             this.statement = statement;
1:3bee990:             this.thriftId = thriftId;
1:3bee990:             this.inclusiveStart = inclusiveStart;
1:3bee990:             this.inclusiveEnd = inclusiveEnd;
1:3bee990:         }
1:3bee990:     }
1:3bee990: 
1:3bee990:     private static ValidatingStatement prepare(StressSettings settings, String cql, boolean incLb, boolean incUb)
1:3bee990:     {
1:3bee990:         JavaDriverClient jclient = settings.getJavaDriverClient();
1:3bee990:         ThriftClient tclient = settings.getThriftClient();
1:3bee990:         PreparedStatement statement = jclient.prepare(cql);
1:3bee990:         try
1:3bee990:         {
1:3bee990:             Integer thriftId = tclient.prepare_cql3_query(cql, Compression.NONE);
1:3bee990:             return new ValidatingStatement(statement, thriftId, incLb, incUb);
1:3bee990:         }
1:3bee990:         catch (TException e)
1:3bee990:         {
1:3bee990:             throw new RuntimeException(e);
1:3bee990:         }
1:3bee990:     }
1:3bee990: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:2096bce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return rs.isExhausted();
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.operations.PartitionOperation;
/////////////////////////////////////////////////////////////////////////
1: public class ValidatingSchemaQuery extends PartitionOperation
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.operations.PartitionOperation;
/////////////////////////////////////////////////////////////////////////
0: public class ValidatingSchemaQuery extends PartitionOperation
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             cc.append('('); arg.append('(');
1:                 if (d > 0) { cc.append(','); arg.append(','); }
1:                 arg.append('?');
1:             cc.append(')'); arg.append(')');
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:6d29ed0
/////////////////////////////////////////////////////////////////////////
1:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), settings.insert.rowPopulationRatio.get(), 1));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.operations.userdefined;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
0: import java.util.Random;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import com.datastax.driver.core.*;
1: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.stress.Operation;
1: import org.apache.cassandra.stress.generate.*;
1: import org.apache.cassandra.stress.generate.Row;
1: import org.apache.cassandra.stress.settings.StressSettings;
1: import org.apache.cassandra.stress.util.JavaDriverClient;
1: import org.apache.cassandra.stress.util.ThriftClient;
0: import org.apache.cassandra.stress.util.Timer;
1: import org.apache.cassandra.thrift.Compression;
1: import org.apache.cassandra.thrift.CqlResult;
1: import org.apache.cassandra.thrift.CqlRow;
1: import org.apache.cassandra.thrift.ThriftConversion;
0: import org.apache.cassandra.transport.SimpleClient;
1: import org.apache.cassandra.utils.Pair;
1: import org.apache.thrift.TException;
1: 
0: public class ValidatingSchemaQuery extends Operation
1: {
0:     final Random random = new Random();
1:     private Pair<Row, Row> bounds;
1: 
1:     final int clusteringComponents;
1:     final ValidatingStatement[] statements;
1:     final ConsistencyLevel cl;
1:     final int[] argumentIndex;
1:     final Object[] bindBuffer;
1: 
1:     @Override
0:     public void run(SimpleClient client) throws IOException
1:     {
0:         throw new UnsupportedOperationException();
1:     }
1: 
1:     private ValidatingSchemaQuery(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, ValidatingStatement[] statements, ConsistencyLevel cl, int clusteringComponents)
1:     {
0:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), 1));
1:         this.statements = statements;
1:         this.cl = cl;
1:         argumentIndex = new int[statements[0].statement.getVariables().size()];
1:         bindBuffer = new Object[argumentIndex.length];
1:         int i = 0;
1:         for (ColumnDefinitions.Definition definition : statements[0].statement.getVariables())
1:             argumentIndex[i++] = spec.partitionGenerator.indexOf(definition.getName());
1: 
1:         for (ValidatingStatement statement : statements)
1:             statement.statement.setConsistencyLevel(JavaDriverClient.from(cl));
1:         this.clusteringComponents = clusteringComponents;
1:     }
1: 
1:     protected boolean reset(Seed seed, PartitionIterator iterator)
1:     {
1:         bounds = iterator.resetToBounds(seed, clusteringComponents);
1:         return true;
1:     }
1: 
1:     abstract class Runner implements RunOp
1:     {
1:         int partitionCount;
1:         int rowCount;
1:         final PartitionIterator iter;
1:         final int statementIndex;
1: 
1:         protected Runner(PartitionIterator iter)
1:         {
1:             this.iter = iter;
1:             statementIndex = ThreadLocalRandom.current().nextInt(statements.length);
1:         }
1: 
1:         @Override
1:         public int partitionCount()
1:         {
1:             return partitionCount;
1:         }
1: 
1:         @Override
1:         public int rowCount()
1:         {
1:             return rowCount;
1:         }
1:     }
1: 
1:     private class JavaDriverRun extends Runner
1:     {
1:         final JavaDriverClient client;
1: 
1:         private JavaDriverRun(JavaDriverClient client, PartitionIterator iter)
1:         {
1:             super(iter);
1:             this.client = client;
1:         }
1: 
1:         public boolean run() throws Exception
1:         {
1:             ResultSet rs = client.getSession().execute(bind(statementIndex));
1:             int[] valueIndex = new int[rs.getColumnDefinitions().size()];
1:             {
1:                 int i = 0;
1:                 for (ColumnDefinitions.Definition definition : rs.getColumnDefinitions())
1:                     valueIndex[i++] = spec.partitionGenerator.indexOf(definition.getName());
1:             }
1: 
0:             List<Object[]> prev1 = new ArrayList<>();
0:             List<Object[]> prev2 = new ArrayList<>();
1:             rowCount = 0;
1:             Iterator<com.datastax.driver.core.Row> results = rs.iterator();
1:             if (!statements[statementIndex].inclusiveStart && iter.hasNext())
1:                 iter.next();
1:             while (iter.hasNext())
1:             {
1:                 Row expectedRow = iter.next();
1:                 if (!statements[statementIndex].inclusiveEnd && !iter.hasNext())
1:                     break;
1: 
1:                 if (!results.hasNext())
1:                     return false;
1: 
1:                 rowCount++;
1:                 com.datastax.driver.core.Row actualRow = results.next();
0:                 Object[] vs1 = new Object[actualRow.getColumnDefinitions().size()];
0:                 Object[] vs2 = vs1.clone();
1:                 for (int i = 0 ; i < actualRow.getColumnDefinitions().size() ; i++)
1:                 {
1:                     Object expectedValue = expectedRow.get(valueIndex[i]);
1:                     Object actualValue = spec.partitionGenerator.convert(valueIndex[i], actualRow.getBytesUnsafe(i));
0:                     vs1[i] = expectedValue;
0:                     vs2[i] = actualValue;
1:                     if (!expectedValue.equals(actualValue))
1:                         return false;
1:                 }
0:                 prev1.add(vs1);
0:                 prev2.add(vs2);
1:             }
1:             partitionCount = Math.min(1, rowCount);
0:             if (!rs.isExhausted())
1:                 return false;
1:             return true;
1:         }
1:     }
1: 
1:     private class ThriftRun extends Runner
1:     {
1:         final ThriftClient client;
1: 
1:         private ThriftRun(ThriftClient client, PartitionIterator iter)
1:         {
1:             super(iter);
1:             this.client = client;
1:         }
1: 
1:         public boolean run() throws Exception
1:         {
1:             CqlResult rs = client.execute_prepared_cql3_query(statements[statementIndex].thriftId, partitions.get(0).getToken(), thriftArgs(), ThriftConversion.toThrift(cl));
1:             int[] valueIndex = new int[rs.getSchema().name_types.size()];
1:                 for (int i = 0 ; i < valueIndex.length ; i++)
1:                     valueIndex[i] = spec.partitionGenerator.indexOf(rs.fieldForId(i).getFieldName());
1:             int r = 0;
1:             if (!statements[statementIndex].inclusiveStart && iter.hasNext())
1:                 iter.next();
1:             while (iter.hasNext())
1:             {
1:                 Row expectedRow = iter.next();
1:                 if (!statements[statementIndex].inclusiveEnd && !iter.hasNext())
1:                     break;
1: 
1:                 if (r == rs.num)
1:                     return false;
1: 
1:                 rowCount++;
1:                 CqlRow actualRow = rs.getRows().get(r++);
1:                 for (int i = 0 ; i < actualRow.getColumnsSize() ; i++)
1:                 {
1:                     ByteBuffer expectedValue = spec.partitionGenerator.convert(valueIndex[i], expectedRow.get(valueIndex[i]));
1:                     ByteBuffer actualValue = actualRow.getColumns().get(i).value;
1:                     if (!expectedValue.equals(actualValue))
1:                         return false;
1:                 }
1:             }
1:             assert r == rs.num;
1:             partitionCount = Math.min(1, rowCount);
1:             return true;
1:         }
1:     }
1: 
1:     BoundStatement bind(int statementIndex)
1:     {
1:         int pkc = bounds.left.partitionKey.length;
1:         System.arraycopy(bounds.left.partitionKey, 0, bindBuffer, 0, pkc);
1:         int ccc = bounds.left.row.length;
1:         System.arraycopy(bounds.left.row, 0, bindBuffer, pkc, ccc);
1:         System.arraycopy(bounds.right.row, 0, bindBuffer, pkc + ccc, ccc);
1:         return statements[statementIndex].statement.bind(bindBuffer);
1:     }
1: 
1:     List<ByteBuffer> thriftArgs()
1:     {
1:         List<ByteBuffer> args = new ArrayList<>();
1:         int pkc = bounds.left.partitionKey.length;
1:         for (int i = 0 ; i < pkc ; i++)
1:             args.add(spec.partitionGenerator.convert(-i, bounds.left.partitionKey[i]));
1:         int ccc = bounds.left.row.length;
1:         for (int i = 0 ; i < ccc ; i++)
1:             args.add(spec.partitionGenerator.convert(i, bounds.left.get(i)));
1:         for (int i = 0 ; i < ccc ; i++)
1:             args.add(spec.partitionGenerator.convert(i, bounds.right.get(i)));
1:         return args;
1:     }
1: 
1:     @Override
1:     public void run(JavaDriverClient client) throws IOException
1:     {
1:         timeWithRetry(new JavaDriverRun(client, partitions.get(0)));
1:     }
1: 
1:     @Override
1:     public void run(ThriftClient client) throws IOException
1:     {
1:         timeWithRetry(new ThriftRun(client, partitions.get(0)));
1:     }
1: 
1:     public static class Factory
1:     {
1:         final ValidatingStatement[] statements;
1:         final int clusteringComponents;
1: 
1:         public Factory(ValidatingStatement[] statements, int clusteringComponents)
1:         {
1:             this.statements = statements;
1:             this.clusteringComponents = clusteringComponents;
1:         }
1: 
1:         public ValidatingSchemaQuery create(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, ConsistencyLevel cl)
1:         {
1:             return new ValidatingSchemaQuery(timer, settings, generator, seedManager, statements, cl, clusteringComponents);
1:         }
1:     }
1: 
1:     public static List<Factory> create(TableMetadata metadata, StressSettings settings)
1:     {
1:         List<Factory> factories = new ArrayList<>();
1:         StringBuilder sb = new StringBuilder();
1:         boolean first = true;
1:         sb.append("SELECT * FROM ");
1:         sb.append(metadata.getName());
1:         sb.append(" WHERE");
1:         for (ColumnMetadata pk : metadata.getPartitionKey())
1:         {
1:             sb.append(first ? " " : " AND ");
1:             sb.append(pk.getName());
1:             sb.append(" = ?");
1:             first = false;
1:         }
1:         String base = sb.toString();
1: 
1:         factories.add(new Factory(new ValidatingStatement[] { prepare(settings, base, true, true) }, 0));
1: 
1:         int maxDepth = metadata.getClusteringColumns().size() - 1;
1:         for (int depth = 0 ; depth <= maxDepth  ; depth++)
1:         {
1:             StringBuilder cc = new StringBuilder();
1:             StringBuilder arg = new StringBuilder();
0:             cc.append("("); arg.append("(");
1:             for (int d = 0 ; d <= depth ; d++)
1:             {
0:                 if (d > 0) { cc.append(","); arg.append(","); }
1:                 cc.append(metadata.getClusteringColumns().get(d).getName());
0:                 arg.append("?");
1:             }
0:             cc.append(")"); arg.append(")");
1: 
1:             ValidatingStatement[] statements = new ValidatingStatement[depth < maxDepth ? 1 : 4];
1:             int i = 0;
1:             for (boolean incLb : depth < maxDepth ? new boolean[] { true } : new boolean[] { true, false } )
1:             {
1:                 for (boolean incUb : depth < maxDepth ? new boolean[] { false } : new boolean[] { true, false } )
1:                 {
1:                     String lb = incLb ? ">=" : ">";
1:                     String ub = incUb ? "<=" : "<";
1:                     sb.setLength(0);
1:                     sb.append(base);
1:                     sb.append(" AND ");
1:                     sb.append(cc);
1:                     sb.append(lb);
1:                     sb.append(arg);
1:                     sb.append(" AND ");
1:                     sb.append(cc);
1:                     sb.append(ub);
1:                     sb.append(arg);
1:                     statements[i++] = prepare(settings, sb.toString(), incLb, incUb);
1:                 }
1:             }
1:             factories.add(new Factory(statements, depth + 1));
1:         }
1: 
1:         return factories;
1:     }
1: 
1:     private static class ValidatingStatement
1:     {
1:         final PreparedStatement statement;
1:         final Integer thriftId;
1:         final boolean inclusiveStart;
1:         final boolean inclusiveEnd;
1:         private ValidatingStatement(PreparedStatement statement, Integer thriftId, boolean inclusiveStart, boolean inclusiveEnd)
1:         {
1:             this.statement = statement;
1:             this.thriftId = thriftId;
1:             this.inclusiveStart = inclusiveStart;
1:             this.inclusiveEnd = inclusiveEnd;
1:         }
1:     }
1: 
1:     private static ValidatingStatement prepare(StressSettings settings, String cql, boolean incLb, boolean incUb)
1:     {
1:         JavaDriverClient jclient = settings.getJavaDriverClient();
1:         ThriftClient tclient = settings.getThriftClient();
1:         PreparedStatement statement = jclient.prepare(cql);
1:         try
1:         {
1:             Integer thriftId = tclient.prepare_cql3_query(cql, Compression.NONE);
1:             return new ValidatingStatement(statement, thriftId, incLb, incUb);
1:         }
1:         catch (TException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: }
============================================================================