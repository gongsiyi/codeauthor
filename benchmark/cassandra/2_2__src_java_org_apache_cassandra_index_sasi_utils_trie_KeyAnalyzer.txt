1:72790dc: /*
1:72790dc:  * Copyright 2010 Roger Kapsi
1:72790dc:  *
1:72790dc:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:72790dc:  *   you may not use this file except in compliance with the License.
1:72790dc:  *   You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *       http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  *   Unless required by applicable law or agreed to in writing, software
1:72790dc:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  *   See the License for the specific language governing permissions and
1:72790dc:  *   limitations under the License.
1:72790dc:  */
7:72790dc: 
1:72790dc: package org.apache.cassandra.index.sasi.utils.trie;
1:72790dc: 
1:72790dc: import java.util.Comparator;
1:72790dc: 
2:72790dc: /**
1:72790dc:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:72790dc:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:72790dc:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:72790dc:  * on rkapsi/patricia-trie project) only supports String keys)
1:72790dc:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:72790dc:  */
1:72790dc: 
1:72790dc: /**
1:72790dc:  * The {@link KeyAnalyzer} provides bit-level access to keys
1:72790dc:  * for the {@link PatriciaTrie}.
1:72790dc:  */
1:72790dc: public interface KeyAnalyzer<K> extends Comparator<K>
1:72790dc: {
1:72790dc:     /**
1:72790dc:      * Returned by {@link #bitIndex(Object, Object)} if a key's
1:72790dc:      * bits were all zero (0).
1:72790dc:      */
1:72790dc:     int NULL_BIT_KEY = -1;
1:68d2526: 
1:68d2526:     /**
1:72790dc:      * Returned by {@link #bitIndex(Object, Object)} if a the
1:72790dc:      * bits of two keys were all equal.
1:72790dc:      */
1:72790dc:     int EQUAL_BIT_KEY = -2;
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Returned by {@link #bitIndex(Object, Object)} if a keys
1:72790dc:      * indices are out of bounds.
1:72790dc:      */
1:72790dc:     int OUT_OF_BOUNDS_BIT_KEY = -3;
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * Returns the key's length in bits.
1:72790dc:      */
1:72790dc:     int lengthInBits(K key);
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * Returns {@code true} if a key's bit it set at the given index.
1:72790dc:      */
1:72790dc:     boolean isBitSet(K key, int bitIndex);
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * Returns the index of the first bit that is different in the two keys.
1:72790dc:      */
1:72790dc:     int bitIndex(K key, K otherKey);
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Returns {@code true} if the second argument is a
1:72790dc:      * prefix of the first argument.
1:72790dc:      */
1:72790dc:     boolean isPrefix(K key, K prefix);
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1: 
1:      * Returned by {@link #bitIndex(Object, Object)} if a keys
1: 
1: 
1: 
1: 
1:      * Returns {@code true} if the second argument is a
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2010 Roger Kapsi
1:  *
1:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:  *   you may not use this file except in compliance with the License.
1:  *   You may obtain a copy of the License at
1:  *
1:  *       http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *   Unless required by applicable law or agreed to in writing, software
1:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *   See the License for the specific language governing permissions and
1:  *   limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.utils.trie;
1: 
1: import java.util.Comparator;
1: 
1: /**
1:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:  * on rkapsi/patricia-trie project) only supports String keys)
1:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:  */
1: 
1: /**
1:  * The {@link KeyAnalyzer} provides bit-level access to keys
1:  * for the {@link PatriciaTrie}.
1:  */
1: public interface KeyAnalyzer<K> extends Comparator<K>
1: {
1:     /**
1:      * Returned by {@link #bitIndex(Object, Object)} if a key's
1:      * bits were all zero (0).
1:      */
1:     int NULL_BIT_KEY = -1;
1:     
1:     /** 
1:      * Returned by {@link #bitIndex(Object, Object)} if a the
1:      * bits of two keys were all equal.
1:      */
1:     int EQUAL_BIT_KEY = -2;
1:     
1:     /**
0:      * Returned by {@link #bitIndex(Object, Object)} if a keys 
1:      * indices are out of bounds.
1:      */
1:     int OUT_OF_BOUNDS_BIT_KEY = -3;
1:     
1:     /**
1:      * Returns the key's length in bits.
1:      */
1:     int lengthInBits(K key);
1:     
1:     /**
1:      * Returns {@code true} if a key's bit it set at the given index.
1:      */
1:     boolean isBitSet(K key, int bitIndex);
1:     
1:     /**
1:      * Returns the index of the first bit that is different in the two keys.
1:      */
1:     int bitIndex(K key, K otherKey);
1:     
1:     /**
0:      * Returns {@code true} if the second argument is a 
1:      * prefix of the first argument.
1:      */
1:     boolean isPrefix(K key, K prefix);
1: }
============================================================================