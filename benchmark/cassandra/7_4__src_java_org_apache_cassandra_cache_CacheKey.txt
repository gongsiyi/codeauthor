1:07cf56f: /*
1:295aedb:  * Licensed to the Apache Software Foundation (ASF) under one
1:295aedb:  * or more contributor license agreements.  See the NOTICE file
1:295aedb:  * distributed with this work for additional information
1:295aedb:  * regarding copyright ownership.  The ASF licenses this file
1:295aedb:  * to you under the Apache License, Version 2.0 (the
1:295aedb:  * "License"); you may not use this file except in compliance
1:295aedb:  * with the License.  You may obtain a copy of the License at
2:295aedb:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:295aedb:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
4:295aedb:  */
1:295aedb: package org.apache.cassandra.cache;
5:0a1b277: 
1:e889ee4: import org.apache.cassandra.utils.Pair;
1:0a1b277: 
1:e889ee4: public abstract class CacheKey implements IMeasurableMemory
4:0a1b277: {
1:e889ee4:     public final Pair<String, String> ksAndCFName;
1:e889ee4: 
1:e889ee4:     public CacheKey(Pair<String, String> ksAndCFName)
1:e889ee4:     {
1:e889ee4:         this.ksAndCFName = ksAndCFName;
1:e889ee4:     }
4:0a1b277: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:e889ee4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Pair;
1: public abstract class CacheKey implements IMeasurableMemory
1:     public final Pair<String, String> ksAndCFName;
1: 
1:     public CacheKey(Pair<String, String> ksAndCFName)
1:     {
1:         this.ksAndCFName = ksAndCFName;
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:e25d94e
/////////////////////////////////////////////////////////////////////////
0:      * @return The cf id of the cache key.
0:     public UUID getCFId();
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:0a1b277
/////////////////////////////////////////////////////////////////////////
0: import java.util.UUID;
0:     public PathInfo getPathInfo();
1: 
0:     public static class PathInfo
1:     {
0:         public final String keyspace;
0:         public final String columnFamily;
0:         public final UUID cfId;
1: 
0:         public PathInfo(String keyspace, String columnFamily, UUID cfId)
1:         {
0:             this.keyspace = keyspace;
0:             this.columnFamily = columnFamily;
0:             this.cfId = cfId;
1:         }
1: 
0:         @Override
0:         public boolean equals(Object o)
1:         {
0:             if (this == o) return true;
0:             if (o == null || getClass() != o.getClass()) return false;
1: 
0:             PathInfo pathInfo = (PathInfo) o;
1: 
0:             return (cfId != null ? cfId.equals(pathInfo.cfId) : pathInfo.cfId == null) && columnFamily.equals(pathInfo.columnFamily) && keyspace.equals(pathInfo.keyspace);
1:         }
1: 
0:         @Override
0:         public int hashCode()
1:         {
0:             int result = keyspace.hashCode();
0:             result = 31 * result + columnFamily.hashCode();
0:             result = 31 * result + (cfId != null ? cfId.hashCode() : 0);
0:             return result;
1:         }
1:     }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:da93a1c
/////////////////////////////////////////////////////////////////////////
0: public interface CacheKey extends IMeasurableMemory
commit:cfe585c
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d616dcd
commit:63f6c84
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataOutputStream;
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:     public void write(DataOutputStream out) throws IOException;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:295aedb
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.cache;
0: 
0: import java.nio.ByteBuffer;
0: 
0: import org.apache.cassandra.utils.Pair;
0: 
0: public interface CacheKey
0: {
0:     /**
0:      * @return Serialized part of the key which should be persisted
1:      */
0:     public ByteBuffer serializeForStorage();
0: 
0:     /**
0:      * @return The size of the serialized key
1:      */
0:     public int serializedSize();
0: 
0:     /**
0:      * @return The keyspace and ColumnFamily names to which this key belongs
1:      */
0:     public Pair<String, String> getPathInfo();
0: }
============================================================================