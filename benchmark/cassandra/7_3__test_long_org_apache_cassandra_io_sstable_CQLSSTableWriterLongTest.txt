1:8e1bdf3: /*
1:8e1bdf3:  * Licensed to the Apache Software Foundation (ASF) under one
1:8e1bdf3:  * or more contributor license agreements.  See the NOTICE file
1:8e1bdf3:  * distributed with this work for additional information
1:8e1bdf3:  * regarding copyright ownership.  The ASF licenses this file
1:8e1bdf3:  * to you under the Apache License, Version 2.0 (the
1:8e1bdf3:  * "License"); you may not use this file except in compliance
1:8e1bdf3:  * with the License.  You may obtain a copy of the License at
1:8e1bdf3:  *
1:8e1bdf3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8e1bdf3:  *
1:8e1bdf3:  * Unless required by applicable law or agreed to in writing, software
1:8e1bdf3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e1bdf3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e1bdf3:  * See the License for the specific language governing permissions and
1:8e1bdf3:  * limitations under the License.
1:8e1bdf3:  */
3:8e1bdf3: 
1:8e1bdf3: package org.apache.cassandra.io.sstable;
1:8e1bdf3: 
1:8e1bdf3: import java.io.File;
1:8e1bdf3: import java.util.ArrayList;
1:8e1bdf3: import java.util.List;
1:8e1bdf3: import java.util.Random;
1:8e1bdf3: 
1:8e1bdf3: import com.google.common.io.Files;
1:f5f5912: 
1:8e1bdf3: import org.junit.AfterClass;
1:8e1bdf3: import org.junit.BeforeClass;
1:8e1bdf3: import org.junit.Test;
1:8e1bdf3: import org.apache.cassandra.SchemaLoader;
1:8e1bdf3: import org.apache.cassandra.config.Config;
1:8e1bdf3: import org.apache.cassandra.service.StorageService;
1:8e1bdf3: 
1:8e1bdf3: public class CQLSSTableWriterLongTest
2:8e1bdf3: {
1:8e1bdf3:     @BeforeClass
1:8e1bdf3:     public static void setup() throws Exception
1:8e1bdf3:     {
1:b09e60f:         SchemaLoader.prepareServer();
1:8e1bdf3:         StorageService.instance.initServer();
2:8e1bdf3:     }
1:8e1bdf3: 
1:8e1bdf3:     @Test
1:8e1bdf3:     public void testWideRow() throws Exception
1:8e1bdf3:     {
1:8e1bdf3:         String KS = "cql_keyspace";
1:8e1bdf3:         String TABLE = "table1";
1:8e1bdf3:         int size = 30000;
1:8e1bdf3: 
1:8e1bdf3:         File tempdir = Files.createTempDir();
1:8e1bdf3:         File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE);
1:8e1bdf3:         assert dataDir.mkdirs();
1:8e1bdf3: 
1:8e1bdf3:         StringBuilder schemaColumns = new StringBuilder();
1:8e1bdf3:         StringBuilder queryColumns = new StringBuilder();
1:8e1bdf3:         StringBuilder queryValues = new StringBuilder();
1:8e1bdf3:         for (int i = 0; i < size; i++)
1:8e1bdf3:         {
1:8e1bdf3:             schemaColumns.append("v");
1:8e1bdf3:             schemaColumns.append(i);
1:8e1bdf3:             schemaColumns.append(" int,");
1:8e1bdf3: 
1:8e1bdf3:             queryColumns.append(", v");
1:8e1bdf3:             queryColumns.append(i);
1:8e1bdf3: 
1:8e1bdf3:             queryValues.append(", ?");
1:8e1bdf3:         }
1:8e1bdf3:         String schema = "CREATE TABLE cql_keyspace.table1 ("
1:8e1bdf3:                       + "  k int,"
1:8e1bdf3:                       + "  c int,"
1:8e1bdf3:                       + schemaColumns.toString()
1:8e1bdf3:                       + "  PRIMARY KEY (k, c)"
1:8e1bdf3:                       + ")";
1:8e1bdf3:         String insert = "INSERT INTO cql_keyspace.table1 (k, c" + queryColumns.toString() + ") VALUES (?, ?" + queryValues.toString() + ")";
1:8e1bdf3: 
1:8e1bdf3:         CQLSSTableWriter writer = CQLSSTableWriter.builder()
1:8e1bdf3:                                                   .inDirectory(dataDir)
1:8e1bdf3:                                                   .forTable(schema)
1:8e1bdf3:                                                   .using(insert)
1:8e1bdf3:                                                   .withBufferSizeInMB(1)
1:8e1bdf3:                                                   .build();
1:8e1bdf3: 
1:8e1bdf3:         long high = 100;
1:8e1bdf3:         Random r = new Random(0);
1:8e1bdf3:         for (int i = 0; i < high; i++)
1:8e1bdf3:         {
1:8e1bdf3:             List<Object> values = new ArrayList<>(size + 2);
1:8e1bdf3:             values.add(0);
1:8e1bdf3:             values.add(r.nextInt());
1:8e1bdf3:             for (int j = 0; j < size; j++)
1:8e1bdf3:             {
1:8e1bdf3:                 values.add(i);
1:8e1bdf3:             }
1:8e1bdf3:             writer.addRow(values);
1:8e1bdf3:         }
1:8e1bdf3:         writer.close();
1:8e1bdf3:     }
1:8e1bdf3: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:29239c7
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:                                                   .withPartitioner(StorageService.instance.getPartitioner())
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         SchemaLoader.prepareServer();
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:f5f5912
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.cassandra.config.Schema;
/////////////////////////////////////////////////////////////////////////
0:         SchemaLoader.cleanupAndLeaveDirs();
0:         Keyspace.setInitialized();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:8e1bdf3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Random;
1: 
1: import com.google.common.io.Files;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.Config;
0: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.service.StorageService;
1: 
1: public class CQLSSTableWriterLongTest
1: {
1:     @BeforeClass
1:     public static void setup() throws Exception
1:     {
1:         StorageService.instance.initServer();
1:     }
1: 
0:     @AfterClass
0:     public static void tearDown()
1:     {
0:         Config.setClientMode(false);
1:     }
1: 
1:     @Test
1:     public void testWideRow() throws Exception
1:     {
1:         String KS = "cql_keyspace";
1:         String TABLE = "table1";
1:         int size = 30000;
1: 
1:         File tempdir = Files.createTempDir();
1:         File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE);
1:         assert dataDir.mkdirs();
1: 
1:         StringBuilder schemaColumns = new StringBuilder();
1:         StringBuilder queryColumns = new StringBuilder();
1:         StringBuilder queryValues = new StringBuilder();
1:         for (int i = 0; i < size; i++)
1:         {
1:             schemaColumns.append("v");
1:             schemaColumns.append(i);
1:             schemaColumns.append(" int,");
1: 
1:             queryColumns.append(", v");
1:             queryColumns.append(i);
1: 
1:             queryValues.append(", ?");
1:         }
1:         String schema = "CREATE TABLE cql_keyspace.table1 ("
1:                       + "  k int,"
1:                       + "  c int,"
1:                       + schemaColumns.toString()
1:                       + "  PRIMARY KEY (k, c)"
1:                       + ")";
1:         String insert = "INSERT INTO cql_keyspace.table1 (k, c" + queryColumns.toString() + ") VALUES (?, ?" + queryValues.toString() + ")";
1: 
1:         CQLSSTableWriter writer = CQLSSTableWriter.builder()
1:                                                   .inDirectory(dataDir)
1:                                                   .forTable(schema)
0:                                                   .withPartitioner(StorageService.instance.getPartitioner())
1:                                                   .using(insert)
1:                                                   .withBufferSizeInMB(1)
1:                                                   .build();
1: 
1:         long high = 100;
1:         Random r = new Random(0);
1:         for (int i = 0; i < high; i++)
1:         {
1:             List<Object> values = new ArrayList<>(size + 2);
1:             values.add(0);
1:             values.add(r.nextInt());
1:             for (int j = 0; j < size; j++)
1:             {
1:                 values.add(i);
1:             }
1:             writer.addRow(values);
1:         }
1:         writer.close();
1:     }
1: }
============================================================================