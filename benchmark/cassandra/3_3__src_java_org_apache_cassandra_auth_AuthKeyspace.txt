1:879b694: /*
1:879b694:  * Licensed to the Apache Software Foundation (ASF) under one
1:879b694:  * or more contributor license agreements.  See the NOTICE file
1:879b694:  * distributed with this work for additional information
1:879b694:  * regarding copyright ownership.  The ASF licenses this file
1:879b694:  * to you under the Apache License, Version 2.0 (the
1:879b694:  * "License"); you may not use this file except in compliance
1:879b694:  * with the License.  You may obtain a copy of the License at
1:879b694:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:879b694:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:879b694:  */
1:879b694: package org.apache.cassandra.auth;
3:879b694: 
1:879b694: import java.util.concurrent.TimeUnit;
1:879b694: 
1:879b694: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:a89597d: import org.apache.cassandra.schema.KeyspaceMetadata;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:6e1033b: import org.apache.cassandra.schema.Tables;
1:879b694: 
1:31e3f61: public final class AuthKeyspace
1:879b694: {
1:31e3f61:     private AuthKeyspace()
1:31e3f61:     {
1:31e3f61:     }
1:31e3f61: 
1:879b694:     public static final String ROLES = "roles";
1:879b694:     public static final String ROLE_MEMBERS = "role_members";
1:879b694:     public static final String ROLE_PERMISSIONS = "role_permissions";
1:879b694:     public static final String RESOURCE_ROLE_INDEX = "resource_role_permissons_index";
1:879b694: 
1:879b694:     public static final long SUPERUSER_SETUP_DELAY = Long.getLong("cassandra.superuser_setup_delay_ms", 10000);
1:879b694: 
1:879b694:     private static final CFMetaData Roles =
1:879b694:         compile(ROLES,
1:879b694:                 "role definitions",
1:879b694:                 "CREATE TABLE %s ("
1:879b694:                 + "role text,"
1:879b694:                 + "is_superuser boolean,"
1:879b694:                 + "can_login boolean,"
1:879b694:                 + "salted_hash text,"
1:879b694:                 + "member_of set<text>,"
1:879b694:                 + "PRIMARY KEY(role))");
1:879b694: 
1:879b694:     private static final CFMetaData RoleMembers =
1:879b694:         compile(ROLE_MEMBERS,
1:879b694:                 "role memberships lookup table",
1:879b694:                 "CREATE TABLE %s ("
1:879b694:                 + "role text,"
1:879b694:                 + "member text,"
1:879b694:                 + "PRIMARY KEY(role, member))");
1:879b694: 
1:879b694:     private static final CFMetaData RolePermissions =
1:879b694:         compile(ROLE_PERMISSIONS,
1:879b694:                 "permissions granted to db roles",
1:879b694:                 "CREATE TABLE %s ("
1:879b694:                 + "role text,"
1:879b694:                 + "resource text,"
1:879b694:                 + "permissions set<text>,"
1:879b694:                 + "PRIMARY KEY(role, resource))");
1:879b694: 
1:879b694:     private static final CFMetaData ResourceRoleIndex =
1:879b694:         compile(RESOURCE_ROLE_INDEX,
1:879b694:                 "index of db roles with permissions granted on a resource",
1:879b694:                 "CREATE TABLE %s ("
1:879b694:                 + "resource text,"
1:879b694:                 + "role text,"
1:879b694:                 + "PRIMARY KEY(resource, role))");
1:879b694: 
1:879b694: 
1:879b694:     private static CFMetaData compile(String name, String description, String schema)
1:879b694:     {
1:9797511:         return CFMetaData.compile(String.format(schema, name), SchemaConstants.AUTH_KEYSPACE_NAME)
1:879b694:                          .comment(description)
1:879b694:                          .gcGraceSeconds((int) TimeUnit.DAYS.toSeconds(90));
1:879b694:     }
1:879b694: 
1:a89597d:     public static KeyspaceMetadata metadata()
1:879b694:     {
1:9797511:         return KeyspaceMetadata.create(SchemaConstants.AUTH_KEYSPACE_NAME, KeyspaceParams.simple(1), Tables.of(Roles, RoleMembers, RolePermissions, ResourceRoleIndex));
1:879b694:     }
1:879b694: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return CFMetaData.compile(String.format(schema, name), SchemaConstants.AUTH_KEYSPACE_NAME)
1:         return KeyspaceMetadata.create(SchemaConstants.AUTH_KEYSPACE_NAME, KeyspaceParams.simple(1), Tables.of(Roles, RoleMembers, RolePermissions, ResourceRoleIndex));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:a89597d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceMetadata;
/////////////////////////////////////////////////////////////////////////
1:     public static KeyspaceMetadata metadata()
0:         return KeyspaceMetadata.create(NAME, KeyspaceParams.simple(1), Tables.of(Roles, RoleMembers, RolePermissions, ResourceRoleIndex));
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
1: public final class AuthKeyspace
1:     private AuthKeyspace()
1:     {
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         return KSMetaData.create(NAME, KeyspaceParams.simple(1), Tables.of(Roles, RoleMembers, RolePermissions, ResourceRoleIndex));
commit:6e1033b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.Tables;
/////////////////////////////////////////////////////////////////////////
0:         Tables tables = Tables.of(Roles, RoleMembers, RolePermissions, ResourceRoleIndex);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
0: import java.util.Arrays;
0: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: 
0: import com.google.common.collect.ImmutableMap;
1: 
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: 
0: public class AuthKeyspace
1: {
0:     public static final String NAME = "system_auth";
1: 
1:     public static final String ROLES = "roles";
1:     public static final String ROLE_MEMBERS = "role_members";
1:     public static final String ROLE_PERMISSIONS = "role_permissions";
1:     public static final String RESOURCE_ROLE_INDEX = "resource_role_permissons_index";
1: 
1:     public static final long SUPERUSER_SETUP_DELAY = Long.getLong("cassandra.superuser_setup_delay_ms", 10000);
1: 
1:     private static final CFMetaData Roles =
1:         compile(ROLES,
1:                 "role definitions",
1:                 "CREATE TABLE %s ("
1:                 + "role text,"
1:                 + "is_superuser boolean,"
1:                 + "can_login boolean,"
1:                 + "salted_hash text,"
1:                 + "member_of set<text>,"
1:                 + "PRIMARY KEY(role))");
1: 
1:     private static final CFMetaData RoleMembers =
1:         compile(ROLE_MEMBERS,
1:                 "role memberships lookup table",
1:                 "CREATE TABLE %s ("
1:                 + "role text,"
1:                 + "member text,"
1:                 + "PRIMARY KEY(role, member))");
1: 
1:     private static final CFMetaData RolePermissions =
1:         compile(ROLE_PERMISSIONS,
1:                 "permissions granted to db roles",
1:                 "CREATE TABLE %s ("
1:                 + "role text,"
1:                 + "resource text,"
1:                 + "permissions set<text>,"
1:                 + "PRIMARY KEY(role, resource))");
1: 
1:     private static final CFMetaData ResourceRoleIndex =
1:         compile(RESOURCE_ROLE_INDEX,
1:                 "index of db roles with permissions granted on a resource",
1:                 "CREATE TABLE %s ("
1:                 + "resource text,"
1:                 + "role text,"
1:                 + "PRIMARY KEY(resource, role))");
1: 
1: 
1:     private static CFMetaData compile(String name, String description, String schema)
1:     {
0:         return CFMetaData.compile(String.format(schema, name), NAME)
1:                          .comment(description)
1:                          .gcGraceSeconds((int) TimeUnit.DAYS.toSeconds(90));
1:     }
1: 
0:     public static KSMetaData definition()
1:     {
0:         List<CFMetaData> tables = Arrays.asList(Roles, RoleMembers, RolePermissions, ResourceRoleIndex);
0:         return new KSMetaData(NAME, SimpleStrategy.class, ImmutableMap.of("replication_factor", "1"), true, tables);
1:     }
1: }
============================================================================