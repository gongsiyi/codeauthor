1:563cea1: /*
1:563cea1:  * Licensed to the Apache Software Foundation (ASF) under one
1:563cea1:  * or more contributor license agreements.  See the NOTICE file
1:563cea1:  * distributed with this work for additional information
1:563cea1:  * regarding copyright ownership.  The ASF licenses this file
1:563cea1:  * to you under the Apache License, Version 2.0 (the
1:563cea1:  * "License"); you may not use this file except in compliance
1:563cea1:  * with the License.  You may obtain a copy of the License at
1:563cea1:  *
1:563cea1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:563cea1:  *
1:563cea1:  * Unless required by applicable law or agreed to in writing, software
1:563cea1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:563cea1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:563cea1:  * See the License for the specific language governing permissions and
1:563cea1:  * limitations under the License.
1:563cea1:  */
1:563cea1: package org.apache.cassandra.tools;
1:563cea1: 
1:563cea1: import java.io.IOException;
1:563cea1: import java.net.InetAddress;
1:563cea1: import java.net.InetSocketAddress;
1:563cea1: import java.net.Socket;
1:563cea1: import java.nio.channels.SocketChannel;
1:563cea1: 
1:563cea1: import org.apache.cassandra.config.EncryptionOptions;
1:563cea1: import org.apache.cassandra.security.SSLFactory;
1:563cea1: import org.apache.cassandra.streaming.StreamConnectionFactory;
1:563cea1: import org.apache.cassandra.utils.FBUtilities;
1:563cea1: 
1:563cea1: public class BulkLoadConnectionFactory implements StreamConnectionFactory
1:563cea1: {
1:563cea1:     private final boolean outboundBindAny;
1:563cea1:     private final int storagePort;
1:563cea1:     private final int secureStoragePort;
1:563cea1:     private final EncryptionOptions.ServerEncryptionOptions encryptionOptions;
1:563cea1: 
1:563cea1:     public BulkLoadConnectionFactory(int storagePort, int secureStoragePort, EncryptionOptions.ServerEncryptionOptions encryptionOptions, boolean outboundBindAny)
1:563cea1:     {
1:563cea1:         this.storagePort = storagePort;
1:563cea1:         this.secureStoragePort = secureStoragePort;
1:563cea1:         this.encryptionOptions = encryptionOptions;
1:563cea1:         this.outboundBindAny = outboundBindAny;
1:563cea1:     }
1:563cea1: 
1:563cea1:     public Socket createConnection(InetAddress peer) throws IOException
1:563cea1:     {
1:563cea1:         // Connect to secure port for all peers if ServerEncryptionOptions is configured other than 'none'
1:563cea1:         // When 'all', 'dc' and 'rack', server nodes always have SSL port open, and since thin client like sstableloader
1:563cea1:         // does not know which node is in which dc/rack, connecting to SSL port is always the option.
1:563cea1:         if (encryptionOptions != null && encryptionOptions.internode_encryption != EncryptionOptions.ServerEncryptionOptions.InternodeEncryption.none)
1:563cea1:         {
1:563cea1:             if (outboundBindAny)
1:563cea1:                 return SSLFactory.getSocket(encryptionOptions, peer, secureStoragePort);
1:563cea1:             else
1:563cea1:                 return SSLFactory.getSocket(encryptionOptions, peer, secureStoragePort, FBUtilities.getLocalAddress(), 0);
1:563cea1:         }
1:563cea1:         else
1:563cea1:         {
1:563cea1:             Socket socket = SocketChannel.open(new InetSocketAddress(peer, storagePort)).socket();
1:563cea1:             if (outboundBindAny && !socket.isBound())
1:563cea1:                 socket.bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
1:563cea1:             return socket;
1:563cea1:         }
1:563cea1:     }
1:563cea1: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:3ca9576
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:563cea1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.InetSocketAddress;
1: import java.net.Socket;
1: import java.nio.channels.SocketChannel;
0: import java.util.HashSet;
0: import java.util.Set;
1: 
1: import org.apache.cassandra.config.EncryptionOptions;
1: import org.apache.cassandra.security.SSLFactory;
1: import org.apache.cassandra.streaming.StreamConnectionFactory;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class BulkLoadConnectionFactory implements StreamConnectionFactory
1: {
1:     private final boolean outboundBindAny;
1:     private final int storagePort;
1:     private final int secureStoragePort;
1:     private final EncryptionOptions.ServerEncryptionOptions encryptionOptions;
1: 
1:     public BulkLoadConnectionFactory(int storagePort, int secureStoragePort, EncryptionOptions.ServerEncryptionOptions encryptionOptions, boolean outboundBindAny)
1:     {
1:         this.storagePort = storagePort;
1:         this.secureStoragePort = secureStoragePort;
1:         this.encryptionOptions = encryptionOptions;
1:         this.outboundBindAny = outboundBindAny;
1:     }
1: 
1:     public Socket createConnection(InetAddress peer) throws IOException
1:     {
1:         // Connect to secure port for all peers if ServerEncryptionOptions is configured other than 'none'
1:         // When 'all', 'dc' and 'rack', server nodes always have SSL port open, and since thin client like sstableloader
1:         // does not know which node is in which dc/rack, connecting to SSL port is always the option.
1:         if (encryptionOptions != null && encryptionOptions.internode_encryption != EncryptionOptions.ServerEncryptionOptions.InternodeEncryption.none)
1:         {
1:             if (outboundBindAny)
1:                 return SSLFactory.getSocket(encryptionOptions, peer, secureStoragePort);
1:             else
1:                 return SSLFactory.getSocket(encryptionOptions, peer, secureStoragePort, FBUtilities.getLocalAddress(), 0);
1:         }
1:         else
1:         {
1:             Socket socket = SocketChannel.open(new InetSocketAddress(peer, storagePort)).socket();
1:             if (outboundBindAny && !socket.isBound())
1:                 socket.bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
1:             return socket;
1:         }
1:     }
1: }
============================================================================