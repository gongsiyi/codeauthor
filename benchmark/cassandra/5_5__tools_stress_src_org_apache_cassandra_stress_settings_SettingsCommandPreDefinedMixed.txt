1:7536429: package org.apache.cassandra.stress.settings;
1:7536429: /*
1:7536429:  * 
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  * 
1:7536429:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  * 
1:7536429:  * Unless required by applicable law or agreed to in writing,
1:7536429:  * software distributed under the License is distributed on an
1:7536429:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7536429:  * KIND, either express or implied.  See the License for the
1:7536429:  * specific language governing permissions and limitations
1:7536429:  * under the License.
1:7536429:  * 
1:7536429:  */
3:7536429: 
1:7536429: 
1:3bee990: import java.util.*;
1:7536429: 
1:7536429: import org.apache.cassandra.stress.Operation;
1:7536429: import org.apache.cassandra.stress.generate.DistributionFactory;
1:7536429: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:0580fb2: import org.apache.cassandra.stress.generate.SeedManager;
1:7536429: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1:7536429: import org.apache.cassandra.stress.operations.SampledOpDistributionFactory;
1:7536429: import org.apache.cassandra.stress.operations.predefined.PredefinedOperation;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:7536429: 
1:7536429: // Settings unique to the mixed command type
1:7536429: public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined
1:7536429: {
1:7536429: 
1:7536429:     // Ratios for selecting commands - index for each Command, NaN indicates the command is not requested
1:24f6f03:     private final Map<Command, Double> ratios;
1:7536429:     private final DistributionFactory clustering;
1:938faa2:     private final Options options;
1:7536429: 
1:7536429:     public SettingsCommandPreDefinedMixed(Options options)
1:7536429:     {
1:7536429:         super(Command.MIXED, options);
1:7536429: 
1:7536429:         clustering = options.clustering.get();
1:7536429:         ratios = options.probabilities.ratios();
1:938faa2:         this.options = options;
1:7536429:         if (ratios.size() == 0)
1:7536429:             throw new IllegalArgumentException("Must specify at least one command with a non-zero ratio");
1:7536429:     }
1:7536429: 
1:7536429:     public OpDistributionFactory getFactory(final StressSettings settings)
1:938faa2:     {
1:0580fb2:         final SeedManager seeds = new SeedManager(settings);
1:7536429:         return new SampledOpDistributionFactory<Command>(ratios, clustering)
1:7536429:         {
1:f27ab29:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, Command key, boolean isWarmup)
1:7536429:             {
1:3bee990:                 return Collections.singletonList(PredefinedOperation.operation(key, timer, generator, seeds, settings, add));
1:7536429:             }
1:24f6f03: 
1:7536429:             protected PartitionGenerator newGenerator()
1:7536429:             {
1:6c579a0:                 return SettingsCommandPreDefinedMixed.this.newGenerator(settings);
1:7536429:             }
1:7536429:         };
1:7536429:     }
1:7536429: 
1:7536429:     // Option Declarations
1:7536429: 
1:7536429:     static class Options extends SettingsCommandPreDefined.Options
1:7536429:     {
1:7536429:         static List<OptionEnumProbabilities.Opt<Command>> probabilityOptions = new ArrayList<>();
1:7536429:         static
1:7536429:         {
1:7536429:             for (Command command : Command.values())
1:7536429:             {
1:7536429:                 if (command.category == null)
1:7536429:                     continue;
1:7536429:                 String defaultValue;
1:7536429:                 switch (command)
1:7536429:                 {
1:7536429:                     case MIXED:
1:7536429:                         continue;
1:7536429:                     case READ:
1:7536429:                     case WRITE:
1:7536429:                         defaultValue = "1";
1:7536429:                         break;
1:7536429:                     default:
1:7536429:                         defaultValue = null;
1:7536429:                 }
1:7536429:                 probabilityOptions.add(new OptionEnumProbabilities.Opt<>(command, defaultValue));
1:7536429:             }
1:7536429:         }
1:7536429: 
1:7536429:         protected Options(SettingsCommand.Options parent)
1:7536429:         {
1:7536429:             super(parent);
1:7536429:         }
1:7536429:         final OptionDistribution clustering = new OptionDistribution("clustering=", "GAUSSIAN(1..10)", "Distribution clustering runs of operations of the same kind");
1:7536429:         final OptionEnumProbabilities probabilities = new OptionEnumProbabilities<>(probabilityOptions, "ratio", "Specify the ratios for operations to perform; e.g. (read=2,write=1) will perform 2 reads for each write");
1:7536429: 
1:7536429:         @Override
1:7536429:         public List<? extends Option> options()
1:7536429:         {
1:73b2dcc:             return merge(Arrays.asList(clustering, probabilities), super.options());
1:7536429:         }
1:7536429: 
1:7536429:     }
1:7536429: 
1:f42e235:     public void printSettings(ResultLogger out)
1:7536429:     {
1:938faa2:         super.printSettings(out);
1:938faa2:         out.printf("  Command Ratios: %s%n", ratios);
1:938faa2:         out.printf("  Command Clustering Distribution: %s%n", options.clustering.getOptionAsString());
1:938faa2:     }
1:938faa2: 
1:7536429:     // CLI utility methods
1:7536429: 
1:7536429:     public static SettingsCommandPreDefinedMixed build(String[] params)
1:7536429:     {
1:7536429:         GroupedOptions options = GroupedOptions.select(params,
1:7536429:                 new Options(new SettingsCommand.Uncertainty()),
1:530c9f5:                 new Options(new SettingsCommand.Count()),
1:530c9f5:                 new Options(new SettingsCommand.Duration()));
1:7536429:         if (options == null)
1:7536429:         {
1:7536429:             printHelp();
1:7536429:             System.out.println("Invalid MIXED options provided, see output for valid options");
1:7536429:             System.exit(1);
1:7536429:         }
1:7536429:         return new SettingsCommandPreDefinedMixed((Options) options);
1:7536429:     }
1:7536429: 
1:7536429:     public static void printHelp()
1:7536429:     {
1:7536429:         GroupedOptions.printOptions(System.out, "mixed",
1:7536429:                                     new Options(new SettingsCommand.Uncertainty()),
1:530c9f5:                                     new Options(new SettingsCommand.Count()),
1:530c9f5:                                     new Options(new SettingsCommand.Duration()));
1:7536429:     }
1:7536429: 
1:7536429:     public static Runnable helpPrinter()
1:7536429:     {
1:7536429:         return new Runnable()
1:7536429:         {
1:7536429:             @Override
1:7536429:             public void run()
1:7536429:             {
1:7536429:                 printHelp();
1:7536429:             }
1:7536429:         };
1:7536429:     }
1:7536429: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
1:     private final Options options;
/////////////////////////////////////////////////////////////////////////
1:         this.options = options;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         super.printSettings(out);
1:         out.printf("  Command Ratios: %s%n", ratios);
1:         out.printf("  Command Clustering Distribution: %s%n", options.clustering.getOptionAsString());
1:     }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, Command key, boolean isWarmup)
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, Command key, boolean isWarmup)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
0:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, Command key)
1:                 return Collections.singletonList(PredefinedOperation.operation(key, timer, generator, seeds, settings, add));
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 return PredefinedOperation.operation(key, timer, generator, seeds, settings, add);
1:                 return SettingsCommandPreDefinedMixed.this.newGenerator(settings);
commit:73b2dcc
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:             return merge(Arrays.asList(clustering, probabilities), super.options());
commit:530c9f5
/////////////////////////////////////////////////////////////////////////
1:                 new Options(new SettingsCommand.Count()),
1:                 new Options(new SettingsCommand.Duration()));
/////////////////////////////////////////////////////////////////////////
1:                                     new Options(new SettingsCommand.Count()),
1:                                     new Options(new SettingsCommand.Duration()));
commit:77d0c17
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.SeedManager;
/////////////////////////////////////////////////////////////////////////
1:         final SeedManager seeds = new SeedManager(settings);
/////////////////////////////////////////////////////////////////////////
0:                 return SettingsCommandPreDefinedMixed.this.newGenerator(settings, seeds);
commit:24f6f03
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<Command, Double> ratios;
/////////////////////////////////////////////////////////////////////////
0:         final List<Pair<Command,Double>> mathPairs = new ArrayList<>();
0:         for (Map.Entry entry: ratios.entrySet())
0:             mathPairs.add(new Pair(entry.getKey(),entry.getValue()));
1: 
0:         return new SampledOpDistributionFactory<Command>(mathPairs, clustering)
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: 
1: import org.apache.cassandra.stress.Operation;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.PartitionGenerator;
1: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1: import org.apache.cassandra.stress.operations.SampledOpDistributionFactory;
1: import org.apache.cassandra.stress.operations.predefined.PredefinedOperation;
0: import org.apache.cassandra.stress.util.Timer;
1: 
0: import org.apache.commons.math3.util.Pair;
1: 
1: // Settings unique to the mixed command type
1: public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined
1: {
1: 
1:     // Ratios for selecting commands - index for each Command, NaN indicates the command is not requested
0:     private final List<Pair<Command, Double>> ratios;
1:     private final DistributionFactory clustering;
1: 
1:     public SettingsCommandPreDefinedMixed(Options options)
1:     {
1:         super(Command.MIXED, options);
1: 
1:         clustering = options.clustering.get();
1:         ratios = options.probabilities.ratios();
1:         if (ratios.size() == 0)
1:             throw new IllegalArgumentException("Must specify at least one command with a non-zero ratio");
1:     }
1: 
1:     public OpDistributionFactory getFactory(final StressSettings settings)
1:     {
1:         return new SampledOpDistributionFactory<Command>(ratios, clustering)
1:         {
0:             protected Operation get(Timer timer, PartitionGenerator generator, Command key)
1:             {
0:                 return PredefinedOperation.operation(key, timer, generator, settings, add);
1:             }
1: 
1:             protected PartitionGenerator newGenerator()
1:             {
0:                 return SettingsCommandPreDefinedMixed.this.newGenerator(settings);
1:             }
1:         };
1:     }
1: 
1:     // Option Declarations
1: 
1:     static class Options extends SettingsCommandPreDefined.Options
1:     {
1:         static List<OptionEnumProbabilities.Opt<Command>> probabilityOptions = new ArrayList<>();
1:         static
1:         {
1:             for (Command command : Command.values())
1:             {
1:                 if (command.category == null)
1:                     continue;
1:                 String defaultValue;
1:                 switch (command)
1:                 {
1:                     case MIXED:
1:                         continue;
1:                     case READ:
1:                     case WRITE:
1:                         defaultValue = "1";
1:                         break;
1:                     default:
1:                         defaultValue = null;
1:                 }
1:                 probabilityOptions.add(new OptionEnumProbabilities.Opt<>(command, defaultValue));
1:             }
1:         }
1: 
1:         protected Options(SettingsCommand.Options parent)
1:         {
1:             super(parent);
1:         }
1:         final OptionDistribution clustering = new OptionDistribution("clustering=", "GAUSSIAN(1..10)", "Distribution clustering runs of operations of the same kind");
1:         final OptionEnumProbabilities probabilities = new OptionEnumProbabilities<>(probabilityOptions, "ratio", "Specify the ratios for operations to perform; e.g. (read=2,write=1) will perform 2 reads for each write");
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             final List<Option> options = new ArrayList<>();
0:             options.add(clustering);
0:             options.add(probabilities);
0:             options.addAll(super.options());
0:             return options;
1:         }
1: 
1:     }
1: 
1:     // CLI utility methods
1: 
1:     public static SettingsCommandPreDefinedMixed build(String[] params)
1:     {
1:         GroupedOptions options = GroupedOptions.select(params,
1:                 new Options(new SettingsCommand.Uncertainty()),
0:                 new Options(new SettingsCommand.Count()));
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid MIXED options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsCommandPreDefinedMixed((Options) options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "mixed",
1:                                     new Options(new SettingsCommand.Uncertainty()),
0:                                     new Options(new SettingsCommand.Count()));
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
============================================================================