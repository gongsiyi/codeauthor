1:2732752: /*
1:2732752:  * Licensed to the Apache Software Foundation (ASF) under one
1:2732752:  * or more contributor license agreements.  See the NOTICE file
1:2732752:  * distributed with this work for additional information
1:2732752:  * regarding copyright ownership.  The ASF licenses this file
1:2732752:  * to you under the Apache License, Version 2.0 (the
1:2732752:  * "License"); you may not use this file except in compliance
1:2732752:  * with the License.  You may obtain a copy of the License at
1:2732752:  *
1:2732752:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2732752:  *
1:2732752:  * Unless required by applicable law or agreed to in writing, software
1:2732752:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2732752:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2732752:  * See the License for the specific language governing permissions and
1:2732752:  * limitations under the License.
1:2732752:  */
1:2732752: package org.apache.cassandra.db;
1:2732752: 
1:2732752: import java.io.File;
1:2732752: import java.io.RandomAccessFile;
1:2732752: import java.lang.management.ManagementFactory;
1:2732752: import java.nio.MappedByteBuffer;
1:2732752: import java.nio.channels.FileChannel;
1:2732752: import java.nio.file.StandardOpenOption;
1:2732752: import javax.management.MBeanServer;
1:2732752: import javax.management.ObjectName;
1:2732752: 
1:2732752: import org.junit.Assert;
1:2732752: import org.junit.Test;
1:2732752: 
1:2732752: import sun.nio.ch.DirectBuffer;
1:2732752: 
1:2732752: public class MmapFileTest
1:2732752: {
1:2732752:     /**
1:2732752:      * Verifies that {@link sun.misc.Cleaner} works and that mmap'd files can be deleted.
1:2732752:      */
1:2732752:     @Test
1:2732752:     public void testMmapFile() throws Exception
1:2732752:     {
1:2732752:         ObjectName bpmName = new ObjectName("java.nio:type=BufferPool,name=mapped");
1:2732752: 
1:2732752:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:2732752:         Long mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:2732752:         Long mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:2732752: 
1:2732752:         Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:2732752:         Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1:2732752: 
1:2732752:         File f1 = File.createTempFile("MmapFileTest1", ".bin");
1:2732752:         File f2 = File.createTempFile("MmapFileTest2", ".bin");
1:2732752:         File f3 = File.createTempFile("MmapFileTest2", ".bin");
1:2732752: 
1:2732752:         try
1:2732752:         {
1:2732752:             int size = 1024 * 1024;
1:2732752: 
1:2732752:             try (RandomAccessFile raf = new RandomAccessFile(f1, "rw"))
1:2732752:             {
1:2732752:                 raf.setLength(size);
1:2732752:             }
1:2732752: 
1:2732752:             try (RandomAccessFile raf = new RandomAccessFile(f2, "rw"))
1:2732752:             {
1:2732752:                 raf.setLength(size);
1:2732752:             }
1:2732752: 
1:2732752:             try (RandomAccessFile raf = new RandomAccessFile(f3, "rw"))
1:2732752:             {
1:2732752:                 raf.setLength(size);
1:2732752:             }
1:2732752: 
1:2732752:             try (FileChannel channel = FileChannel.open(f1.toPath(), StandardOpenOption.WRITE, StandardOpenOption.READ))
1:2732752:             {
1:2732752:                 MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);
1:2732752: 
1:2732752:                 mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:2732752:                 mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:2732752:                 Assert.assertEquals("mapped buffers don't work?", Long.valueOf(1L), mmapCount);
1:2732752:                 Assert.assertTrue("mapped buffers don't work?", mmapMemoryUsed >= size);
1:2732752: 
1:2732752:                 Assert.assertTrue(buffer.isDirect());
1:2732752: 
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752: 
1:2732752:                 ((DirectBuffer) buffer).cleaner().clean();
1:2732752:             }
1:2732752: 
1:2732752:             mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:2732752:             mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:2732752:             Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:2732752:             Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1:2732752: 
1:2732752:             try (FileChannel channel = FileChannel.open(f2.toPath(), StandardOpenOption.WRITE, StandardOpenOption.READ))
1:2732752:             {
1:2732752:                 MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);
1:2732752: 
1:2732752:                 // # of mapped buffers is == 1 here - seems that previous direct buffer for 'f1' is deallocated now
1:2732752: 
1:2732752:                 mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:2732752:                 mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:2732752:                 Assert.assertEquals("mapped buffers don't work?", Long.valueOf(1L), mmapCount);
1:2732752:                 Assert.assertTrue("mapped buffers don't work?", mmapMemoryUsed >= size);
1:2732752: 
1:2732752:                 Assert.assertTrue(buffer.isDirect());
1:2732752: 
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752: 
1:2732752:                 ((DirectBuffer) buffer).cleaner().clean();
1:2732752:             }
1:2732752: 
1:2732752:             mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:2732752:             mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:2732752:             Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:2732752:             Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1:2732752: 
1:2732752:             try (FileChannel channel = FileChannel.open(f3.toPath(), StandardOpenOption.WRITE, StandardOpenOption.READ))
1:2732752:             {
1:2732752:                 MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);
1:2732752: 
1:2732752:                 mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:2732752:                 mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:2732752:                 Assert.assertEquals("mapped buffers don't work?", Long.valueOf(1L), mmapCount);
1:2732752:                 Assert.assertTrue("mapped buffers don't work?", mmapMemoryUsed >= size);
1:2732752: 
1:2732752:                 Assert.assertTrue(buffer.isDirect());
1:2732752: 
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752:                 buffer.putInt(42);
1:2732752: 
1:2732752:                 ((DirectBuffer) buffer).cleaner().clean();
1:2732752:             }
1:2732752: 
1:2732752:             mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:2732752:             mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:2732752:             Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:2732752:             Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1:2732752: 
1:2732752:             Assert.assertTrue(f1.delete());
1:2732752:             Assert.assertTrue(f2.delete());
1:2732752:             Assert.assertTrue(f3.delete());
1:2732752:         }
1:2732752:         finally
1:2732752:         {
1:2732752:             Runtime.getRuntime().gc();
1:2732752:             f1.delete();
1:2732752:             f2.delete();
1:2732752:             f3.delete();
1:2732752:         }
1:2732752:     }
1:2732752: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:2732752
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.io.File;
1: import java.io.RandomAccessFile;
1: import java.lang.management.ManagementFactory;
1: import java.nio.MappedByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.nio.file.StandardOpenOption;
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import sun.nio.ch.DirectBuffer;
1: 
1: public class MmapFileTest
1: {
1:     /**
1:      * Verifies that {@link sun.misc.Cleaner} works and that mmap'd files can be deleted.
1:      */
1:     @Test
1:     public void testMmapFile() throws Exception
1:     {
1:         ObjectName bpmName = new ObjectName("java.nio:type=BufferPool,name=mapped");
1: 
1:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:         Long mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:         Long mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1: 
1:         Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:         Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1: 
1:         File f1 = File.createTempFile("MmapFileTest1", ".bin");
1:         File f2 = File.createTempFile("MmapFileTest2", ".bin");
1:         File f3 = File.createTempFile("MmapFileTest2", ".bin");
1: 
1:         try
1:         {
1:             int size = 1024 * 1024;
1: 
1:             try (RandomAccessFile raf = new RandomAccessFile(f1, "rw"))
1:             {
1:                 raf.setLength(size);
1:             }
1: 
1:             try (RandomAccessFile raf = new RandomAccessFile(f2, "rw"))
1:             {
1:                 raf.setLength(size);
1:             }
1: 
1:             try (RandomAccessFile raf = new RandomAccessFile(f3, "rw"))
1:             {
1:                 raf.setLength(size);
1:             }
1: 
1:             try (FileChannel channel = FileChannel.open(f1.toPath(), StandardOpenOption.WRITE, StandardOpenOption.READ))
1:             {
1:                 MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);
1: 
1:                 mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:                 mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:                 Assert.assertEquals("mapped buffers don't work?", Long.valueOf(1L), mmapCount);
1:                 Assert.assertTrue("mapped buffers don't work?", mmapMemoryUsed >= size);
1: 
1:                 Assert.assertTrue(buffer.isDirect());
1: 
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1: 
1:                 ((DirectBuffer) buffer).cleaner().clean();
1:             }
1: 
1:             mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:             mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:             Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:             Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1: 
1:             try (FileChannel channel = FileChannel.open(f2.toPath(), StandardOpenOption.WRITE, StandardOpenOption.READ))
1:             {
1:                 MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);
1: 
1:                 // # of mapped buffers is == 1 here - seems that previous direct buffer for 'f1' is deallocated now
1: 
1:                 mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:                 mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:                 Assert.assertEquals("mapped buffers don't work?", Long.valueOf(1L), mmapCount);
1:                 Assert.assertTrue("mapped buffers don't work?", mmapMemoryUsed >= size);
1: 
1:                 Assert.assertTrue(buffer.isDirect());
1: 
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1: 
1:                 ((DirectBuffer) buffer).cleaner().clean();
1:             }
1: 
1:             mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:             mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:             Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:             Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1: 
1:             try (FileChannel channel = FileChannel.open(f3.toPath(), StandardOpenOption.WRITE, StandardOpenOption.READ))
1:             {
1:                 MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);
1: 
1:                 mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:                 mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:                 Assert.assertEquals("mapped buffers don't work?", Long.valueOf(1L), mmapCount);
1:                 Assert.assertTrue("mapped buffers don't work?", mmapMemoryUsed >= size);
1: 
1:                 Assert.assertTrue(buffer.isDirect());
1: 
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1:                 buffer.putInt(42);
1: 
1:                 ((DirectBuffer) buffer).cleaner().clean();
1:             }
1: 
1:             mmapCount = (Long) mbs.getAttribute(bpmName, "Count");
1:             mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, "MemoryUsed");
1:             Assert.assertEquals("# of mapped buffers should be 0", Long.valueOf(0L), mmapCount);
1:             Assert.assertEquals("amount of mapped memory should be 0", Long.valueOf(0L), mmapMemoryUsed);
1: 
1:             Assert.assertTrue(f1.delete());
1:             Assert.assertTrue(f2.delete());
1:             Assert.assertTrue(f3.delete());
1:         }
1:         finally
1:         {
1:             Runtime.getRuntime().gc();
1:             f1.delete();
1:             f2.delete();
1:             f3.delete();
1:         }
1:     }
1: }
============================================================================