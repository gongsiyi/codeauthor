1:e31e216: /*
1:e31e216:  * Licensed to the Apache Software Foundation (ASF) under one
1:e31e216:  * or more contributor license agreements.  See the NOTICE file
1:e31e216:  * distributed with this work for additional information
1:e31e216:  * regarding copyright ownership.  The ASF licenses this file
1:e31e216:  * to you under the Apache License, Version 2.0 (the
1:e31e216:  * "License"); you may not use this file except in compliance
1:e31e216:  * with the License.  You may obtain a copy of the License at
1:e31e216:  *
1:e31e216:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e31e216:  *
1:e31e216:  * Unless required by applicable law or agreed to in writing, software
1:e31e216:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e31e216:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e31e216:  * See the License for the specific language governing permissions and
1:e31e216:  * limitations under the License.
1:e31e216:  */
5:e31e216: 
1:e31e216: package org.apache.cassandra.utils;
1:e31e216: 
1:e31e216: import java.io.File;
1:e31e216: import java.io.IOException;
1:e31e216: import java.nio.file.FileVisitResult;
1:e31e216: import java.nio.file.Path;
1:e31e216: import java.nio.file.SimpleFileVisitor;
1:e31e216: import java.nio.file.attribute.BasicFileAttributes;
1:e31e216: 
1:e31e216: /**
1:e31e216:  * Walks directory recursively, summing up total contents of files within.
1:e31e216:  */
1:e31e216: public class DirectorySizeCalculator extends SimpleFileVisitor<Path>
4:e31e216: {
1:1f74142:     protected volatile long size = 0;
1:e31e216:     protected final File path;
1:e31e216: 
1:e31e216:     public DirectorySizeCalculator(File path)
1:e31e216:     {
2:e31e216:         super();
1:e31e216:         this.path = path;
4:e31e216:     }
1:e31e216: 
1:e31e216:     public boolean isAcceptable(Path file)
1:e31e216:     {
1:e31e216:         return true;
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Override
1:e31e216:     public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException
1:e31e216:     {
1:e31e216:         if (isAcceptable(file))
1:1f74142:             size += attrs.size();
1:e31e216:         return FileVisitResult.CONTINUE;
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Override
1:e31e216:     public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException
1:e31e216:     {
1:e31e216:         return FileVisitResult.CONTINUE;
1:e31e216:     }
1:e31e216: 
1:e31e216:     public long getAllocatedSize()
1:e31e216:     {
1:1f74142:         return size;
1:e31e216:     }
1:e31e216: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:1f74142
/////////////////////////////////////////////////////////////////////////
1:     protected volatile long size = 0;
/////////////////////////////////////////////////////////////////////////
1:             size += attrs.size();
/////////////////////////////////////////////////////////////////////////
1:         return size;
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.utils;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.file.FileVisitResult;
1: import java.nio.file.Path;
1: import java.nio.file.SimpleFileVisitor;
1: import java.nio.file.attribute.BasicFileAttributes;
0: import java.util.List;
0: import java.util.Set;
0: import java.util.concurrent.atomic.AtomicLong;
1: 
0: import com.google.common.collect.ImmutableSet;
1: 
0: import static com.google.common.collect.Sets.newHashSet;
1: 
1: /**
1:  * Walks directory recursively, summing up total contents of files within.
1:  */
1: public class DirectorySizeCalculator extends SimpleFileVisitor<Path>
1: {
0:     protected final AtomicLong size = new AtomicLong(0);
0:     protected Set<String> visited = newHashSet(); //count each file only once
0:     protected Set<String> alive = newHashSet();
1:     protected final File path;
1: 
1:     public DirectorySizeCalculator(File path)
1:     {
1:         super();
1:         this.path = path;
0:         rebuildFileList();
1:     }
1: 
0:     public DirectorySizeCalculator(List<File> files)
1:     {
1:         super();
0:         this.path = null;
0:         ImmutableSet.Builder<String> builder = ImmutableSet.builder();
0:         for (File file : files)
0:             builder.add(file.getName());
0:         alive = builder.build();
1:     }
1: 
1:     public boolean isAcceptable(Path file)
1:     {
1:         return true;
1:     }
1: 
0:     public void rebuildFileList()
1:     {
0:         assert path != null;
0:         ImmutableSet.Builder<String> builder = ImmutableSet.builder();
0:         for (File file : path.listFiles())
0:             builder.add(file.getName());
0:         size.set(0);
0:         alive = builder.build();
1:     }
1: 
1:     @Override
1:     public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException
1:     {
1:         if (isAcceptable(file))
1:         {
0:             size.addAndGet(attrs.size());
0:             visited.add(file.toFile().getName());
1:         }
1:         return FileVisitResult.CONTINUE;
1:     }
1: 
1:     @Override
1:     public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException
1:     {
1:         return FileVisitResult.CONTINUE;
1:     }
1: 
1:     public long getAllocatedSize()
1:     {
0:         return size.get();
1:     }
1: }
============================================================================