1:0e652e7: /*
1:0e652e7: * Licensed to the Apache Software Foundation (ASF) under one
1:0e652e7: * or more contributor license agreements.  See the NOTICE file
1:0e652e7: * distributed with this work for additional information
1:0e652e7: * regarding copyright ownership.  The ASF licenses this file
1:0e652e7: * to you under the Apache License, Version 2.0 (the
1:0e652e7: * "License"); you may not use this file except in compliance
1:0e652e7: * with the License.  You may obtain a copy of the License at
1:0e652e7: *
1:0e652e7: *    http://www.apache.org/licenses/LICENSE-2.0
1:0e652e7: *
1:0e652e7: * Unless required by applicable law or agreed to in writing,
1:0e652e7: * software distributed under the License is distributed on an
1:0e652e7: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0e652e7: * KIND, either express or implied.  See the License for the
1:0e652e7: * specific language governing permissions and limitations
1:0e652e7: * under the License.
1:0e652e7: */
1:0e652e7: package org.apache.cassandra.stress.util;
1:0e652e7: 
1:0e652e7: import java.io.IOException;
1:0e652e7: import java.util.ArrayList;
1:4efb6dc: import java.util.Collection;
1:0e652e7: import java.util.List;
1:0e652e7: import java.util.concurrent.Callable;
1:0e652e7: import java.util.concurrent.ExecutorService;
1:0e652e7: import java.util.concurrent.Executors;
1:0e652e7: import java.util.concurrent.Future;
1:0e652e7: 
1:0e652e7: import org.apache.cassandra.concurrent.NamedThreadFactory;
1:0e652e7: import org.apache.cassandra.tools.NodeProbe;
1:0e652e7: 
1:0e652e7: public class JmxCollector implements Callable<JmxCollector.GcStats>
1:0e652e7: {
1:0e652e7: 
1:0e652e7:     public static class GcStats
1:0e652e7:     {
1:0e652e7:         public final double count;
1:0e652e7:         public final double bytes;
1:0e652e7:         public final double maxms;
1:0e652e7:         public final double summs;
1:0e652e7:         public final double sumsqms;
1:0e652e7:         public final double sdvms;
1:0e652e7:         public GcStats(double count, double bytes, double maxms, double summs, double sumsqms)
1:0e652e7:         {
1:0e652e7:             this.count = count;
1:0e652e7:             this.bytes = bytes;
1:0e652e7:             this.maxms = maxms;
1:0e652e7:             this.summs = summs;
1:0e652e7:             this.sumsqms = sumsqms;
1:0e652e7:             double mean = summs / count;
1:0e652e7:             double stdev = Math.sqrt((sumsqms / count) - (mean * mean));
1:0e652e7:             if (Double.isNaN(stdev))
1:0e652e7:                 stdev = 0;
1:0e652e7:             this.sdvms = stdev;
1:0e652e7:         }
1:0e652e7:         public GcStats(double fill)
1:0e652e7:         {
1:0e652e7:             this(fill, fill, fill, fill, fill);
1:0e652e7:         }
1:0e652e7:         public static GcStats aggregate(List<GcStats> stats)
1:0e652e7:         {
1:0e652e7:             double count = 0, bytes = 0, maxms = 0, summs = 0, sumsqms = 0;
1:0e652e7:             for (GcStats stat : stats)
1:0e652e7:             {
1:0e652e7:                 count += stat.count;
1:0e652e7:                 bytes += stat.bytes;
1:0e652e7:                 maxms += stat.maxms;
1:0e652e7:                 summs += stat.summs;
1:0e652e7:                 sumsqms += stat.sumsqms;
1:0e652e7:             }
1:0e652e7:             return new GcStats(count, bytes, maxms, summs, sumsqms);
1:0e652e7:         }
1:0e652e7:     }
1:0e652e7: 
1:0e652e7:     final NodeProbe[] probes;
1:0e652e7: 
1:0e652e7:     // TODO: should expand to whole cluster
1:4efb6dc:     public JmxCollector(Collection<String> hosts, int port)
1:0e652e7:     {
1:0e652e7:         probes = new NodeProbe[hosts.size()];
1:4efb6dc:         int i = 0;
1:4efb6dc:         for (String host : hosts)
1:4efb6dc:         {
1:4efb6dc:             probes[i] = connect(host, port);
1:4efb6dc:             probes[i].getAndResetGCStats();
1:4efb6dc:             i++;
1:4efb6dc:         }
1:0e652e7:     }
1:0e652e7: 
1:0e652e7:     private static NodeProbe connect(String host, int port)
1:0e652e7:     {
1:0e652e7:         try
1:0e652e7:         {
1:0e652e7:             return new NodeProbe(host, port);
1:0e652e7:         }
1:0e652e7:         catch (IOException e)
1:0e652e7:         {
1:0e652e7:             throw new RuntimeException(e);
1:0e652e7:         }
1:0e652e7:     }
1:0e652e7: 
1:0e652e7:     public GcStats call() throws Exception
1:0e652e7:     {
1:0e652e7:         final List<Future<GcStats>> futures = new ArrayList<>();
1:0e652e7:         for (final NodeProbe probe : probes)
1:0e652e7:         {
1:0e652e7:             futures.add(TPE.submit(new Callable<GcStats>()
1:0e652e7:             {
1:0e652e7:                 public GcStats call() throws Exception
1:0e652e7:                 {
1:0e652e7:                     final double[] stats = probe.getAndResetGCStats();
1:0e652e7:                     return new GcStats(stats[5], stats[4], stats[1], stats[2], stats[3]);
1:0e652e7:                 }
1:0e652e7:             }));
1:0e652e7:         }
1:0e652e7: 
1:0e652e7:         List<GcStats> results = new ArrayList<>();
1:0e652e7:         for (Future<GcStats> future : futures)
1:0e652e7:             results.add(future.get());
1:0e652e7:         return GcStats.aggregate(results);
1:0e652e7:     }
1:0e652e7: 
1:0e652e7:     private static final ExecutorService TPE = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), new NamedThreadFactory("JmxCollector"));
1:0e652e7: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:4efb6dc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:     public JmxCollector(Collection<String> hosts, int port)
1:         int i = 0;
1:         for (String host : hosts)
1:         {
1:             probes[i] = connect(host, port);
1:             probes[i].getAndResetGCStats();
1:             i++;
1:         }
commit:0e652e7
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.stress.util;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: 
1: import org.apache.cassandra.concurrent.NamedThreadFactory;
1: import org.apache.cassandra.tools.NodeProbe;
1: 
1: public class JmxCollector implements Callable<JmxCollector.GcStats>
1: {
1: 
1:     public static class GcStats
1:     {
1:         public final double count;
1:         public final double bytes;
1:         public final double maxms;
1:         public final double summs;
1:         public final double sumsqms;
1:         public final double sdvms;
1:         public GcStats(double count, double bytes, double maxms, double summs, double sumsqms)
1:         {
1:             this.count = count;
1:             this.bytes = bytes;
1:             this.maxms = maxms;
1:             this.summs = summs;
1:             this.sumsqms = sumsqms;
1:             double mean = summs / count;
1:             double stdev = Math.sqrt((sumsqms / count) - (mean * mean));
1:             if (Double.isNaN(stdev))
1:                 stdev = 0;
1:             this.sdvms = stdev;
1:         }
1:         public GcStats(double fill)
1:         {
1:             this(fill, fill, fill, fill, fill);
1:         }
1:         public static GcStats aggregate(List<GcStats> stats)
1:         {
1:             double count = 0, bytes = 0, maxms = 0, summs = 0, sumsqms = 0;
1:             for (GcStats stat : stats)
1:             {
1:                 count += stat.count;
1:                 bytes += stat.bytes;
1:                 maxms += stat.maxms;
1:                 summs += stat.summs;
1:                 sumsqms += stat.sumsqms;
1:             }
1:             return new GcStats(count, bytes, maxms, summs, sumsqms);
1:         }
1:     }
1: 
1:     final NodeProbe[] probes;
1: 
1:     // TODO: should expand to whole cluster
0:     public JmxCollector(List<String> hosts, int port)
1:     {
1:         probes = new NodeProbe[hosts.size()];
0:         for (int i = 0 ; i < hosts.size() ; i++)
0:             probes[i] = connect(hosts.get(i), port);
1:     }
1: 
1:     private static NodeProbe connect(String host, int port)
1:     {
1:         try
1:         {
1:             return new NodeProbe(host, port);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public GcStats call() throws Exception
1:     {
1:         final List<Future<GcStats>> futures = new ArrayList<>();
1:         for (final NodeProbe probe : probes)
1:         {
1:             futures.add(TPE.submit(new Callable<GcStats>()
1:             {
1:                 public GcStats call() throws Exception
1:                 {
1:                     final double[] stats = probe.getAndResetGCStats();
1:                     return new GcStats(stats[5], stats[4], stats[1], stats[2], stats[3]);
1:                 }
1:             }));
1:         }
1: 
1:         List<GcStats> results = new ArrayList<>();
1:         for (Future<GcStats> future : futures)
1:             results.add(future.get());
1:         return GcStats.aggregate(results);
1:     }
1: 
1:     private static final ExecutorService TPE = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), new NamedThreadFactory("JmxCollector"));
1: }
============================================================================