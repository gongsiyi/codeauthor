1:e972ec8: /*
1:e972ec8:  * Licensed to the Apache Software Foundation (ASF) under one
1:e972ec8:  * or more contributor license agreements.  See the NOTICE file
1:e972ec8:  * distributed with this work for additional information
1:e972ec8:  * regarding copyright ownership.  The ASF licenses this file
1:e972ec8:  * to you under the Apache License, Version 2.0 (the
1:e972ec8:  * "License"); you may not use this file except in compliance
1:e972ec8:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
2:d2c2365:  */
1:07cf56f: package org.apache.cassandra.service;
5:5a45534: 
1:5a45534: import java.net.InetAddress;
1:5a45534: import java.util.Collection;
1:d2c2365: import java.util.HashMap;
1:3f8806d: import java.util.Map;
1:5a45534: import java.util.concurrent.atomic.AtomicInteger;
1:dc97a8f: 
1:d55ed91: import org.apache.cassandra.config.DatabaseDescriptor;
1:0e96e58: import org.apache.cassandra.db.Keyspace;
1:3866585: import org.apache.cassandra.locator.IEndpointSnitch;
1:916c810: import org.apache.cassandra.locator.NetworkTopologyStrategy;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:3a2faf9: import org.apache.cassandra.db.ConsistencyLevel;
1:ee5aafe: import org.apache.cassandra.db.WriteType;
1:ef25537: 
2:d2c2365: /**
1:c75abc8:  * This class blocks for a quorum of responses _in all datacenters_ (CL.EACH_QUORUM).
1:e972ec8:  */
1:c059a56: public class DatacenterSyncWriteResponseHandler<T> extends AbstractWriteResponseHandler<T>
1:3893f24: {
1:3866585:     private static final IEndpointSnitch snitch = DatabaseDescriptor.getEndpointSnitch();
1:5a45534: 
1:3f8806d:     private final Map<String, AtomicInteger> responses = new HashMap<String, AtomicInteger>();
1:4d29c70:     private final AtomicInteger acks = new AtomicInteger(0);
1:5a45534: 
1:ee5aafe:     public DatacenterSyncWriteResponseHandler(Collection<InetAddress> naturalEndpoints,
1:ee5aafe:                                               Collection<InetAddress> pendingEndpoints,
1:ee5aafe:                                               ConsistencyLevel consistencyLevel,
1:0e96e58:                                               Keyspace keyspace,
1:ee5aafe:                                               Runnable callback,
1:aa83c94:                                               WriteType writeType,
1:aa83c94:                                               long queryStartNanoTime)
1:2d95cb4:     {
1:5a45534:         // Response is been managed by the map so make it 1 for the superclass.
1:aa83c94:         super(keyspace, naturalEndpoints, pendingEndpoints, consistencyLevel, callback, writeType, queryStartNanoTime);
1:bcb2c24:         assert consistencyLevel == ConsistencyLevel.EACH_QUORUM;
1:5a45534: 
1:3f8806d:         NetworkTopologyStrategy strategy = (NetworkTopologyStrategy) keyspace.getReplicationStrategy();
1:5a45534: 
1:df8a933:         for (String dc : strategy.getDatacenters())
1:15a0f2b:         {
1:df8a933:             int rf = strategy.getReplicationFactor(dc);
1:5a45534:             responses.put(dc, new AtomicInteger((rf / 2) + 1));
1:2d95cb4:         }
1:4d29c70: 
1:4d29c70:         // During bootstrap, we have to include the pending endpoints or we may fail the consistency level
1:4d29c70:         // guarantees (see #833)
1:4d29c70:         for (InetAddress pending : pendingEndpoints)
1:4d29c70:         {
1:4d29c70:             responses.get(snitch.getDatacenter(pending)).incrementAndGet();
1:4d29c70:         }
1:3a2faf9:     }
1:3a2faf9: 
1:c059a56:     public void response(MessageIn<T> message)
1:3a2faf9:     {
1:5a45534:         String dataCenter = message == null
1:5267112:                             ? DatabaseDescriptor.getLocalDataCenter()
1:a06be23:                             : snitch.getDatacenter(message.from);
1:3893f24: 
1:5a45534:         responses.get(dataCenter).getAndDecrement();
1:4d29c70:         acks.incrementAndGet();
1:dc9992a: 
1:5a45534:         for (AtomicInteger i : responses.values())
1:c9a13c3:         {
1:c9a13c3:             if (i.get() > 0)
1:5a45534:                 return;
1:c9a13c3:         }
1:4ac23ca: 
1:df8a933:         // all the quorum conditions are met
1:7371e10:         signal();
1:15a0f2b:     }
1:5a45534: 
1:c9a13c3:     protected int ackCount()
1:c9a13c3:     {
1:4d29c70:         return acks.get();
1:c9a13c3:     }
1:c9a13c3: 
1:dc9992a:     public boolean isLatencyForSnitch()
1:dc9992a:     {
1:dc9992a:         return false;
1:dc9992a:     }
3:4ac23ca: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:                                               WriteType writeType,
1:                                               long queryStartNanoTime)
1:         super(keyspace, naturalEndpoints, pendingEndpoints, consistencyLevel, callback, writeType, queryStartNanoTime);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c059a56
/////////////////////////////////////////////////////////////////////////
1: public class DatacenterSyncWriteResponseHandler<T> extends AbstractWriteResponseHandler<T>
/////////////////////////////////////////////////////////////////////////
1:     public void response(MessageIn<T> message)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:3f8806d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<String, AtomicInteger> responses = new HashMap<String, AtomicInteger>();
/////////////////////////////////////////////////////////////////////////
1:         NetworkTopologyStrategy strategy = (NetworkTopologyStrategy) keyspace.getReplicationStrategy();
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
1:                                               Keyspace keyspace,
0:         super(keyspace, naturalEndpoints, pendingEndpoints, consistencyLevel, callback, writeType);
0:         strategy = (NetworkTopologyStrategy) keyspace.getReplicationStrategy();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4d29c70
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicInteger acks = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
1: 
1:         // During bootstrap, we have to include the pending endpoints or we may fail the consistency level
1:         // guarantees (see #833)
1:         for (InetAddress pending : pendingEndpoints)
1:         {
1:             responses.get(snitch.getDatacenter(pending)).incrementAndGet();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         acks.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
1:         return acks.get();
commit:5267112
/////////////////////////////////////////////////////////////////////////
0:                                               Table table,
0:         super(table, naturalEndpoints, pendingEndpoints, consistencyLevel, callback, writeType);
0:         strategy = (NetworkTopologyStrategy) table.getReplicationStrategy();
/////////////////////////////////////////////////////////////////////////
1:                             ? DatabaseDescriptor.getLocalDataCenter()
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ee5aafe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.WriteType;
/////////////////////////////////////////////////////////////////////////
1:     public DatacenterSyncWriteResponseHandler(Collection<InetAddress> naturalEndpoints,
1:                                               Collection<InetAddress> pendingEndpoints,
1:                                               ConsistencyLevel consistencyLevel,
0:                                               String table,
1:                                               Runnable callback,
0:                                               WriteType writeType)
0:         super(naturalEndpoints, pendingEndpoints, consistencyLevel, callback, writeType);
/////////////////////////////////////////////////////////////////////////
commit:d5fc193
commit:7371e10
/////////////////////////////////////////////////////////////////////////
0:     protected DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         super(writeEndpoints, consistencyLevel, callback);
/////////////////////////////////////////////////////////////////////////
0:     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         return new DatacenterSyncWriteResponseHandler(writeEndpoints, consistencyLevel, table, callback);
/////////////////////////////////////////////////////////////////////////
1:         signal();
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.UnavailableException;
1: import org.apache.cassandra.db.ConsistencyLevel;
/////////////////////////////////////////////////////////////////////////
0:     private final String table;
/////////////////////////////////////////////////////////////////////////
0:         this.table = table;
/////////////////////////////////////////////////////////////////////////
0:     protected int blockFor()
1:     {
0:         return consistencyLevel.blockFor(table);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:                 throw new UnavailableException(consistencyLevel, responses.get(dc).get(), dcEndpoints.get(dc).get());
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private final HashMap<String, AtomicInteger> responses = new HashMap<String, AtomicInteger>();
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.service;
commit:686139a
/////////////////////////////////////////////////////////////////////////
0:     private final NetworkTopologyStrategy strategy;
/////////////////////////////////////////////////////////////////////////
0:             if (dcEndpoints.get(dc).get() < responses.get(dc).get())
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:dc97a8f
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Iterables;
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected DatacenterSyncWriteResponseHandler(Collection<InetAddress> naturalEndpoints, Collection<InetAddress> pendingEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         super(naturalEndpoints, pendingEndpoints, consistencyLevel, callback);
/////////////////////////////////////////////////////////////////////////
0:     public static AbstractWriteResponseHandler create(Collection<InetAddress> naturalEndpoints, Collection<InetAddress> pendingEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
0:         return new DatacenterSyncWriteResponseHandler(naturalEndpoints, pendingEndpoints, consistencyLevel, table, callback);
/////////////////////////////////////////////////////////////////////////
0:     protected int blockForCL()
/////////////////////////////////////////////////////////////////////////
0:         for (InetAddress destination : Iterables.concat(naturalEndpoints, pendingEndpoints))
commit:84c0657
/////////////////////////////////////////////////////////////////////////
0:     public static AbstractWriteResponseHandler create(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table, Runnable callback)
commit:c9a13c3
/////////////////////////////////////////////////////////////////////////
1:             if (i.get() > 0)
/////////////////////////////////////////////////////////////////////////
1:     protected int ackCount()
1:     {
0:         int n = 0;
0:         for (Map.Entry<String, AtomicInteger> entry : responses.entrySet())
1:         {
0:             String dc = entry.getKey();
0:             AtomicInteger i = entry.getValue();
0:             n += (strategy.getReplicationFactor(dc) / 2) + 1 - i.get();
1:         }
0:         return n;
1:     }
1: 
commit:a06be23
/////////////////////////////////////////////////////////////////////////
1:                             : snitch.getDatacenter(message.from);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void response(MessageIn message)
commit:3893f24
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.gms.FailureDetector;
/////////////////////////////////////////////////////////////////////////
0:     protected DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table)
0:         super(writeEndpoints, consistencyLevel);
/////////////////////////////////////////////////////////////////////////
0:     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, ConsistencyLevel consistencyLevel, String table)
0:         return new DatacenterSyncWriteResponseHandler(writeEndpoints, consistencyLevel, table);
/////////////////////////////////////////////////////////////////////////
1:     {
0:         Map<String, AtomicInteger> dcEndpoints = new HashMap<String, AtomicInteger>();
1: 
0:         for (InetAddress destination : writeEndpoints)
0:             if (FailureDetector.instance.isAlive(destination))
commit:0b31efe
/////////////////////////////////////////////////////////////////////////
0:         	if (dcEndpoints.get(dc).get() < responses.get(dc).get())
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0:             if (writeEndpoints.contains(destination))
1:             {
0:                 // figure out the destination dc
0:                 String destinationDC = snitch.getDatacenter(destination);
0:                 dcEndpoints.get(destinationDC).incrementAndGet();
1:             }
commit:15a0f2b
/////////////////////////////////////////////////////////////////////////
0:             if (writeEndpoints.contains(destination))
1:             {
0:                 // figure out the destination dc
0:                 String destinationDC = snitch.getDatacenter(destination);
0:                 dcEndpoints.get(destinationDC).incrementAndGet();
1:             }
commit:bcb2c24
/////////////////////////////////////////////////////////////////////////
1:         assert consistencyLevel == ConsistencyLevel.EACH_QUORUM;
commit:dc9992a
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isLatencyForSnitch()
1:     {
1:         return false;
1:     }
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Multimap;
1: 
/////////////////////////////////////////////////////////////////////////
commit:ac4d016
/////////////////////////////////////////////////////////////////////////
0:         strategy = (NetworkTopologyStrategy) Table.open(table).getReplicationStrategy();
commit:c75abc8
/////////////////////////////////////////////////////////////////////////
1:  * This class blocks for a quorum of responses _in all datacenters_ (CL.EACH_QUORUM).
/////////////////////////////////////////////////////////////////////////
0:         assert consistencyLevel == ConsistencyLevel.LOCAL_QUORUM;
commit:6af5726
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Table;
/////////////////////////////////////////////////////////////////////////
0:         strategy = (NetworkTopologyStrategy) Table.open(table).replicationStrategy;
commit:3866585
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.locator.IEndpointSnitch;
/////////////////////////////////////////////////////////////////////////
1:     private static final IEndpointSnitch snitch = DatabaseDescriptor.getEndpointSnitch();
commit:4ac23ca
/////////////////////////////////////////////////////////////////////////
0:     protected DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
/////////////////////////////////////////////////////////////////////////
0:     public static IWriteResponseHandler create(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
0:     {
0:         if (consistencyLevel == ConsistencyLevel.ZERO)
0:         {
0:             return NoConsistencyWriteResponseHandler.instance;
1:         }
0:         else
0:         {
0:             return new DatacenterSyncWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
1:         }
1:     }
1: 
commit:916c810
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.locator.AbstractNetworkTopologySnitch;
1: import org.apache.cassandra.locator.NetworkTopologyStrategy;
/////////////////////////////////////////////////////////////////////////
0:     private static final AbstractNetworkTopologySnitch snitch = (AbstractNetworkTopologySnitch) DatabaseDescriptor.getEndpointSnitch();
/////////////////////////////////////////////////////////////////////////
0: 	private final NetworkTopologyStrategy strategy;
/////////////////////////////////////////////////////////////////////////
0:         strategy = (NetworkTopologyStrategy) StorageService.instance.getReplicationStrategy(table);
commit:5a45534
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import java.util.Collection;
1: import java.util.concurrent.atomic.AtomicInteger;
0: import org.apache.cassandra.locator.DatacenterShardStrategy;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.cassandra.thrift.UnavailableException;
1: 
0: import com.google.common.collect.Multimap;
0: import org.apache.cassandra.utils.FBUtilities;
0:  * This class blocks for a quorum of responses _in all datacenters_ (CL.DCQUORUMSYNC).
0: public class DatacenterSyncWriteResponseHandler extends AbstractWriteResponseHandler
0:     private static final AbstractRackAwareSnitch snitch = (AbstractRackAwareSnitch) DatabaseDescriptor.getEndpointSnitch();
0:     private static final String localdc;
0:     static
0:         localdc = snitch.getDatacenter(FBUtilities.getLocalAddress());
0: 	private final DatacenterShardStrategy strategy;
0:     private HashMap<String, AtomicInteger> responses = new HashMap<String, AtomicInteger>();
0:     private final String table;
1: 
0:     public DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
1:         // Response is been managed by the map so make it 1 for the superclass.
0:         super(writeEndpoints, hintedEndpoints, consistencyLevel);
0:         assert consistencyLevel == ConsistencyLevel.DCQUORUM;
1: 
0:         this.table = table;
0:         strategy = (DatacenterShardStrategy) StorageService.instance.getReplicationStrategy(table);
1: 
0:         for (String dc : strategy.getDatacenters(table))
0:             int rf = strategy.getReplicationFactor(dc, table);
1:             responses.put(dc, new AtomicInteger((rf / 2) + 1));
0:     }
1: 
0:     public void response(Message message)
0:     {
1:         String dataCenter = message == null
0:                             ? localdc
0:                             : snitch.getDatacenter(message.getFrom());
1: 
1:         responses.get(dataCenter).getAndDecrement();
1: 
1:         for (AtomicInteger i : responses.values())
0:             if (0 < i.get())
1:                 return;
1: 
0:         // all the quorum conditionas are met
0:         condition.signal();
0:     }
1: 
0:     public void assureSufficientLiveNodes() throws UnavailableException
0:     {   
0: 		Map<String, AtomicInteger> dcEndpoints = new HashMap<String, AtomicInteger>();
0:         for (String dc: strategy.getDatacenters(table))
0:             dcEndpoints.put(dc, new AtomicInteger());
0:         for (InetAddress destination : hintedEndpoints.keySet())
0:             assert writeEndpoints.contains(destination);
0:             // figure out the destination dc
0:             String destinationDC = snitch.getDatacenter(destination);
0:             dcEndpoints.get(destinationDC).incrementAndGet();
0:         }
1: 
0:         // Throw exception if any of the DC doesnt have livenodes to accept write.
0:         for (String dc: strategy.getDatacenters(table)) 
0:         {
0:         	if (dcEndpoints.get(dc).get() != responses.get(dc).get())
0:                 throw new UnavailableException();
commit:d55ed91
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.locator.AbstractRackAwareSnitch;
/////////////////////////////////////////////////////////////////////////
0:     private final Map<String, Integer> dcResponses = new HashMap<String, Integer>();
0:     private final Map<String, Integer> responseCounts;
0:     private final AbstractRackAwareSnitch endpointSnitch;
0:     public DatacenterSyncWriteResponseHandler(Map<String, Integer> responseCounts, String table)
0:         super(1, table);
0:         this.responseCounts = responseCounts;
0:         endpointSnitch = (AbstractRackAwareSnitch) DatabaseDescriptor.getEndpointSnitch();
0:     @Override
0:     // TODO can we use concurrent structures instead?
0:     public synchronized void response(Message message)
0:             String dataCenter = endpointSnitch.getDatacenter(message.getFrom());
0:             Object blockFor = responseCounts.get(dataCenter);
0:             if (blockFor != null)
0:             {
0:                 Integer quorumCount = dcResponses.get(dataCenter);
0:                 if (quorumCount == null)
0:                 {
0:                     // Intialize and recognize the first response
0:                     dcResponses.put(dataCenter, 1);
0:                 }
0:                 else if ((Integer) blockFor > quorumCount)
0:                 {
0:                     // recognize the consequtive responses.
0:                     dcResponses.put(dataCenter, quorumCount + 1);
0:                 }
0:                 else
0:                 {
0:                     // No need to wait on it anymore so remove it.
0:                     responseCounts.remove(dataCenter);
0:                 }
0:             }
0:         responses.add(message);
0:         // If done then the response count will be empty
0:         if (responseCounts.isEmpty())
0:         {
0:             condition.signal();
commit:ef1895b
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
0: import java.util.Collection;
0: import java.util.concurrent.atomic.AtomicInteger;
0: import org.apache.cassandra.locator.DatacenterShardStrategy;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.cassandra.thrift.UnavailableException;
0: 
0: import com.google.common.collect.Multimap;
/////////////////////////////////////////////////////////////////////////
0: 	private final DatacenterShardStrategy stategy = (DatacenterShardStrategy) StorageService.instance.getReplicationStrategy(table);
0:     private HashMap<String, AtomicInteger> dcResponses;
0:     public DatacenterSyncWriteResponseHandler(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints, ConsistencyLevel consistencyLevel, String table)
0:     throws UnavailableException
0:         super(writeEndpoints, hintedEndpoints, consistencyLevel, table);
0:     @Override
0:     public void response(Message message)
0:         responses.add(message);
0:             String dataCenter = endpointsnitch.getDatacenter(message.getFrom());
0:             dcResponses.get(dataCenter).getAndDecrement();
0:         maybeSignal();
0:     }
0:     
0:     private void maybeSignal()
0:     {
0:     	for(AtomicInteger i : dcResponses.values()) {
0:     		if (0 < i.get()) {
0:     			return;
0:     		}
0:     	}
0:     	// If all the quorum conditionas are met then return back.
0:     	condition.signal();
0:     }
0:     
0:     @Override
0:     public int determineBlockFor(Collection<InetAddress> writeEndpoints)
0:     {        
0:         this.dcResponses = new HashMap<String, AtomicInteger>();
0:         for (String dc: stategy.getDatacenters(table)) {
0:         	int rf = stategy.getReplicationFactor(dc, table);
0:         	dcResponses.put(dc, new AtomicInteger((rf/2) + 1));
0:         }
0:     	// Do nothing, there is no 'one' integer to block for
0:         return 0;
0:     }
0:     
0:     @Override
0:     public void assureSufficientLiveNodes(Collection<InetAddress> writeEndpoints, Multimap<InetAddress, InetAddress> hintedEndpoints) throws UnavailableException
0:     {   
0: 		Map<String, AtomicInteger> dcEndpoints = new HashMap<String, AtomicInteger>();
0: 		try
0: 		{
0: 			for (String dc: stategy.getDatacenters(table))
0: 				dcEndpoints.put(dc, new AtomicInteger());
0: 			for (InetAddress destination : hintedEndpoints.keySet())
0: 			{
0: 				// If not just go to the next endpoint
0: 				if (!writeEndpoints.contains(destination))
0: 					continue;
0: 				// figure out the destination dc
0: 				String destinationDC = endpointsnitch.getDatacenter(destination);
0: 				dcEndpoints.get(destinationDC).incrementAndGet();
0: 			}
0: 		}
0: 		catch (UnknownHostException e)
0: 		{
0: 			throw new UnavailableException();
0: 		}
0:         // Throw exception if any of the DC doesnt have livenodes to accept write.
0:         for (String dc: stategy.getDatacenters(table)) {
0:         	if (dcEndpoints.get(dc).get() != dcResponses.get(dc).get()) {
0:                 throw new UnavailableException();
0:         	}
commit:2acfb43
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.locator.AbstractRackAwareSnitch;
/////////////////////////////////////////////////////////////////////////
0:     private final AbstractRackAwareSnitch endpointSnitch;
0:         endpointSnitch = (AbstractRackAwareSnitch) DatabaseDescriptor.getEndpointSnitch();
commit:0f2caaa
/////////////////////////////////////////////////////////////////////////
0:             String dataCenter = endpointSnitch.getDatacenter(message.getFrom());
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.locator.DatacenterEndpointSnitch;
/////////////////////////////////////////////////////////////////////////
0:     private final DatacenterEndpointSnitch endpointSnitch;
0:         endpointSnitch = (DatacenterEndpointSnitch) DatabaseDescriptor.getEndpointSnitch();
commit:18b2a16
/////////////////////////////////////////////////////////////////////////
0:     private final DatacenterEndPointSnitch endpointSnitch;
0:         endpointSnitch = (DatacenterEndPointSnitch) DatabaseDescriptor.getEndpointSnitch();
/////////////////////////////////////////////////////////////////////////
0:             String dataCenter = endpointSnitch.getLocation(message.getFrom());
commit:79e9a80
/////////////////////////////////////////////////////////////////////////
0:         endPointSnitch = (DatacenterEndPointSnitch) DatabaseDescriptor.getEndPointSnitch();
commit:0eea213
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.locator.IEndPointSnitch;
0: import org.apache.cassandra.locator.DatacenterEndPointSnitch;
/////////////////////////////////////////////////////////////////////////
0:     private final DatacenterEndPointSnitch endPointSnitch;
0:         endPointSnitch = (DatacenterEndPointSnitch) DatabaseDescriptor.getEndPointSnitch();
/////////////////////////////////////////////////////////////////////////
0:             String dataCenter = endPointSnitch.getLocation(message.getFrom());
commit:e972ec8
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:6c37fb8
/////////////////////////////////////////////////////////////////////////
0: public class DatacenterSyncWriteResponseHandler extends WriteResponseHandler
0:     public DatacenterSyncWriteResponseHandler(Map<String, Integer> responseCounts)
commit:a5bd08f
/////////////////////////////////////////////////////////////////////////
0: public class DatacenterQuorumSyncResponseHandler extends WriteResponseHandler
0:     public DatacenterQuorumSyncResponseHandler(Map<String, Integer> responseCounts)
0:         super(1);
commit:b7a1c44
/////////////////////////////////////////////////////////////////////////
0:         if (condition.isSignaled())
/////////////////////////////////////////////////////////////////////////
0:         responses.add(message);
0:             condition.signal();
commit:e488d26
/////////////////////////////////////////////////////////////////////////
commit:d2c2365
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  */
0: package org.apache.cassandra.service;
0: 
0: import java.net.UnknownHostException;
1: import java.util.HashMap;
0: import java.util.Map;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.net.Message;
0: 
1: /**
0:  * This class will block for the replication factor which is
0:  * provided in the input map. it will block till we recive response from
0:  * n nodes in each of our data centers.
1:  */
0: public class DatacenterQuorumSyncResponseHandler<T> extends QuorumResponseHandler<T>
0: {
0:     private final Map<String, Integer> dcResponses = new HashMap<String, Integer>();
0:     private final Map<String, Integer> responseCounts;
0: 
0:     public DatacenterQuorumSyncResponseHandler(Map<String, Integer> responseCounts, IResponseResolver<T> responseResolver)
0:     throws InvalidRequestException
0:     {
0:         // Response is been managed by the map so make it 1 for the superclass.
0:         super(1, responseResolver);
0:         this.responseCounts = responseCounts;
0:     }
0: 
0:     @Override
0:     public void response(Message message)
0:     {
0:         if (condition_.isSignaled())
0:         {
0:             return;
0:         }
0:         try
0:         {
0:             String dataCenter = DatabaseDescriptor.getEndPointSnitch().getLocation(message.getFrom());
0:             Object blockFor = responseCounts.get(dataCenter);
0:             // If this DC needs to be blocked then do the below.
0:             if (blockFor != null)
0:             {
0:                 Integer quorumCount = dcResponses.get(dataCenter);
0:                 if (quorumCount == null)
0:                 {
0:                     // Intialize and recognize the first response
0:                     dcResponses.put(dataCenter, 1);
0:                 }
0:                 else if ((Integer) blockFor > quorumCount)
0:                 {
0:                     // recognize the consequtive responses.
0:                     dcResponses.put(dataCenter, quorumCount + 1);
0:                 }
0:                 else
0:                 {
0:                     // No need to wait on it anymore so remove it.
0:                     responseCounts.remove(dataCenter);
0:                 }
0:             }
0:         }
0:         catch (UnknownHostException e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:         responses_.add(message);
0:         // If done then the response count will be empty after removing
0:         // everything.
0:         if (responseCounts.isEmpty())
0:         {
0:             condition_.signal();
0:         }
0:     }
0: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:2ec8621
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         localdc = snitch.getDatacenter(FBUtilities.getBroadcastAddress());
commit:21913c5
/////////////////////////////////////////////////////////////////////////
0:         return new DatacenterSyncWriteResponseHandler(writeEndpoints, hintedEndpoints, consistencyLevel, table);
author:Eric Evans
-------------------------------------------------------------------------------
commit:df8a933
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (String dc : strategy.getDatacenters())
1:             int rf = strategy.getReplicationFactor(dc);
/////////////////////////////////////////////////////////////////////////
1:         // all the quorum conditions are met
0:         for (String dc: strategy.getDatacenters())
/////////////////////////////////////////////////////////////////////////
0:         // Throw exception if any of the DC doesn't have livenodes to accept write.
0:         for (String dc: strategy.getDatacenters())
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:443d534
/////////////////////////////////////////////////////////////////////////
0:     // synchronized for the benefit of dcResponses and responseCounts.  "responses" itself
0:     // is inherited from WRH and is concurrent.
0:     // TODO can we use concurrent structures instead?
0:     public synchronized void response(Message message)
/////////////////////////////////////////////////////////////////////////
0:         // If done then the response count will be empty
commit:3577fd8
/////////////////////////////////////////////////////////////////////////
0:     public DatacenterSyncWriteResponseHandler(Map<String, Integer> responseCounts, String table)
0:         super(1, table);
0:         endPointSnitch = (DatacenterEndPointSnitch) DatabaseDescriptor.getEndPointSnitch(table);
============================================================================