1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
3:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
2:a991b64:  */
1:a991b64: package org.apache.cassandra.db.filter;
1:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.partitions.CachedPartition;
1:a991b64: import org.apache.cassandra.db.partitions.Partition;
1:a991b64: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:2457599: import org.apache.cassandra.io.util.DataInputPlus;
1:a991b64: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: 
2:a991b64: /**
1:a991b64:  * A filter that selects a subset of the rows of a given partition by using the "clustering index".
1:a991b64:  * <p>
1:a991b64:  * In CQL terms, this correspond to the clustering columns selection and correspond to what
1:a991b64:  * the storage engine can do without filtering (and without 2ndary indexes). This does not include
1:a991b64:  * the restrictions on non-PK columns which can be found in {@link RowFilter}.
1:a991b64:  */
1:a991b64: public interface ClusteringIndexFilter
1:a991b64: {
1:a991b64:     public static Serializer serializer = AbstractClusteringIndexFilter.serializer;
1:a991b64: 
1:8c64cef:     public enum Kind
1:8c64cef:     {
1:8c64cef:         SLICE (ClusteringIndexSliceFilter.deserializer),
1:8c64cef:         NAMES (ClusteringIndexNamesFilter.deserializer);
1:8c64cef: 
1:8c64cef:         protected final InternalDeserializer deserializer;
1:8c64cef: 
1:8c64cef:         private Kind(InternalDeserializer deserializer)
1:8c64cef:         {
1:8c64cef:             this.deserializer = deserializer;
1:8c64cef:         }
1:8c64cef:     }
1:8c64cef: 
1:8c64cef:     static interface InternalDeserializer
1:8c64cef:     {
1:8c64cef:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata, boolean reversed) throws IOException;
1:8c64cef:     }
1:8c64cef: 
1:a991b64:     /**
1:a991b64:      * Whether the filter query rows in reversed clustering order or not.
1:a991b64:      *
1:a991b64:      * @return whether the filter query rows in reversed clustering order or not.
1:a991b64:      */
1:a991b64:     public boolean isReversed();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns a filter for continuing the paging of this filter given the last returned clustering prefix.
1:a991b64:      *
1:a991b64:      * @param comparator the comparator for the table this is a filter for.
1:a991b64:      * @param lastReturned the last clustering that was returned for the query we are paging for. The
1:a991b64:      * resulting filter will be such that results coming after {@code lastReturned} are returned
1:a991b64:      * (where coming after means "greater than" if the filter is not reversed, "lesser than" otherwise;
1:a991b64:      * futher, whether the comparison is strict or not depends on {@code inclusive}).
1:a991b64:      * @param inclusive whether or not we want to include the {@code lastReturned} in the newly returned
1:a991b64:      * page of results.
1:a991b64:      *
1:a991b64:      * @return a new filter that selects results coming after {@code lastReturned}.
1:a991b64:      */
1:a991b64:     public ClusteringIndexFilter forPaging(ClusteringComparator comparator, Clustering lastReturned, boolean inclusive);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns whether we can guarantee that a given cached partition contains all the data selected by this filter.
1:a991b64:      *
1:a991b64:      * @param partition the cached partition. This method assumed that the rows of this partition contains all the table columns.
1:a991b64:      *
1:a991b64:      * @return whether we can guarantee that all data selected by this filter are in {@code partition}.
1:a991b64:      */
1:a991b64:     public boolean isFullyCoveredBy(CachedPartition partition);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Whether this filter selects the head of a partition (i.e. it isn't reversed and selects all rows up to a certain point).
1:a991b64:      *
1:a991b64:      * @return whether this filter selects the head of a partition.
1:a991b64:      */
1:a991b64:     public boolean isHeadFilter();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Whether this filter selects all the row of a partition (it's an "identity" filter).
1:a991b64:      *
1:a991b64:      * @return whether this filter selects all the row of a partition (it's an "identity" filter).
1:a991b64:      */
1:a991b64:     public boolean selectsAllPartition();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Whether a given row is selected by this filter.
1:a991b64:      *
1:a991b64:      * @param clustering the clustering of the row to test the selection of.
1:a991b64:      *
1:a991b64:      * @return whether the row with clustering {@code clustering} is selected by this filter.
1:a991b64:      */
1:a991b64:     public boolean selects(Clustering clustering);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns an iterator that only returns the rows of the provided iterator that this filter selects.
1:a991b64:      * <p>
1:143a7d9:      * This method is the "dumb" counterpart to {@link #getSlices(CFMetaData)} in that it has no way to quickly get
1:a991b64:      * to what is actually selected, so it simply iterate over it all and filters out what shouldn't be returned. This should
1:143a7d9:      * be avoided in general.
1:143a7d9:      * Another difference with {@link #getSlices(CFMetaData)} is that this method also filter the queried
1:a991b64:      * columns in the returned result, while the former assumes that the provided iterator has already done it.
1:a991b64:      *
1:a991b64:      * @param columnFilter the columns to include in the rows of the result iterator.
1:a991b64:      * @param iterator the iterator for which we should filter rows.
1:a991b64:      *
1:a991b64:      * @return an iterator that only returns the rows (or rather Unfilted) from {@code iterator} that are selected by this filter.
1:a991b64:      */
1:a991b64:     public UnfilteredRowIterator filterNotIndexed(ColumnFilter columnFilter, UnfilteredRowIterator iterator);
1:a991b64: 
1:4fb559b:     public Slices getSlices(CFMetaData metadata);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Given a partition, returns a row iterator for the rows of this partition that are selected by this filter.
1:a991b64:      *
1:a991b64:      * @param columnFilter the columns to include in the rows of the result iterator.
1:a991b64:      * @param partition the partition containing the rows to filter.
1:a991b64:      *
1:a991b64:      * @return a unfiltered row iterator returning those rows (or rather Unfiltered) from {@code partition} that are selected by this filter.
1:a991b64:      */
1:a991b64:     public UnfilteredRowIterator getUnfilteredRowIterator(ColumnFilter columnFilter, Partition partition);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Whether the provided sstable may contain data that is selected by this filter (based on the sstable metadata).
1:a991b64:      *
1:a991b64:      * @param sstable the sstable for which we want to test the need for inclusion.
1:a991b64:      *
1:a991b64:      * @return whether {@code sstable} should be included to answer this filter.
1:a991b64:      */
1:a991b64:     public boolean shouldInclude(SSTableReader sstable);
1:a991b64: 
1:8c64cef:     public Kind kind();
1:8c64cef: 
1:a991b64:     public String toString(CFMetaData metadata);
1:a991b64:     public String toCQLString(CFMetaData metadata);
1:a991b64: 
1:a991b64:     public interface Serializer
1:a991b64:     {
1:a991b64:         public void serialize(ClusteringIndexFilter filter, DataOutputPlus out, int version) throws IOException;
1:2457599:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata) throws IOException;
1:a991b64:         public long serializedSize(ClusteringIndexFilter filter, int version);
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:143a7d9
/////////////////////////////////////////////////////////////////////////
1:      * This method is the "dumb" counterpart to {@link #getSlices(CFMetaData)} in that it has no way to quickly get
1:      * be avoided in general.
1:      * Another difference with {@link #getSlices(CFMetaData)} is that this method also filter the queried
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:4fb559b
/////////////////////////////////////////////////////////////////////////
1:     public Slices getSlices(CFMetaData metadata);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:8c64cef
/////////////////////////////////////////////////////////////////////////
1:     public enum Kind
1:     {
1:         SLICE (ClusteringIndexSliceFilter.deserializer),
1:         NAMES (ClusteringIndexNamesFilter.deserializer);
1: 
1:         protected final InternalDeserializer deserializer;
1: 
1:         private Kind(InternalDeserializer deserializer)
1:         {
1:             this.deserializer = deserializer;
1:         }
1:     }
1: 
1:     static interface InternalDeserializer
1:     {
1:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata, boolean reversed) throws IOException;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Kind kind();
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata) throws IOException;
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.filter;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.partitions.CachedPartition;
1: import org.apache.cassandra.db.partitions.Partition;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * A filter that selects a subset of the rows of a given partition by using the "clustering index".
1:  * <p>
1:  * In CQL terms, this correspond to the clustering columns selection and correspond to what
1:  * the storage engine can do without filtering (and without 2ndary indexes). This does not include
1:  * the restrictions on non-PK columns which can be found in {@link RowFilter}.
1:  */
1: public interface ClusteringIndexFilter
1: {
1:     public static Serializer serializer = AbstractClusteringIndexFilter.serializer;
1: 
1:     /**
1:      * Whether the filter query rows in reversed clustering order or not.
1:      *
1:      * @return whether the filter query rows in reversed clustering order or not.
1:      */
1:     public boolean isReversed();
1: 
1:     /**
1:      * Returns a filter for continuing the paging of this filter given the last returned clustering prefix.
1:      *
1:      * @param comparator the comparator for the table this is a filter for.
1:      * @param lastReturned the last clustering that was returned for the query we are paging for. The
1:      * resulting filter will be such that results coming after {@code lastReturned} are returned
1:      * (where coming after means "greater than" if the filter is not reversed, "lesser than" otherwise;
1:      * futher, whether the comparison is strict or not depends on {@code inclusive}).
1:      * @param inclusive whether or not we want to include the {@code lastReturned} in the newly returned
1:      * page of results.
1:      *
1:      * @return a new filter that selects results coming after {@code lastReturned}.
1:      */
1:     public ClusteringIndexFilter forPaging(ClusteringComparator comparator, Clustering lastReturned, boolean inclusive);
1: 
1:     /**
1:      * Returns whether we can guarantee that a given cached partition contains all the data selected by this filter.
1:      *
1:      * @param partition the cached partition. This method assumed that the rows of this partition contains all the table columns.
1:      *
1:      * @return whether we can guarantee that all data selected by this filter are in {@code partition}.
1:      */
1:     public boolean isFullyCoveredBy(CachedPartition partition);
1: 
1:     /**
1:      * Whether this filter selects the head of a partition (i.e. it isn't reversed and selects all rows up to a certain point).
1:      *
1:      * @return whether this filter selects the head of a partition.
1:      */
1:     public boolean isHeadFilter();
1: 
1:     /**
1:      * Whether this filter selects all the row of a partition (it's an "identity" filter).
1:      *
1:      * @return whether this filter selects all the row of a partition (it's an "identity" filter).
1:      */
1:     public boolean selectsAllPartition();
1: 
1:     /**
1:      * Whether a given row is selected by this filter.
1:      *
1:      * @param clustering the clustering of the row to test the selection of.
1:      *
1:      * @return whether the row with clustering {@code clustering} is selected by this filter.
1:      */
1:     public boolean selects(Clustering clustering);
1: 
1:     /**
1:      * Returns an iterator that only returns the rows of the provided iterator that this filter selects.
1:      * <p>
0:      * This method is the "dumb" counterpart to {@link #filter(SliceableUnfilteredRowIterator)} in that it has no way to quickly get
1:      * to what is actually selected, so it simply iterate over it all and filters out what shouldn't be returned. This should
0:      * be avoided in general, we should make sure to have {@code SliceableUnfilteredRowIterator} when we have filtering to do, but this
0:      * currently only used in {@link SinglePartitionReadCommand#getThroughCache} when we know this won't be a performance problem.
0:      * Another difference with {@link #filter(SliceableUnfilteredRowIterator)} is that this method also filter the queried
1:      * columns in the returned result, while the former assumes that the provided iterator has already done it.
1:      *
1:      * @param columnFilter the columns to include in the rows of the result iterator.
1:      * @param iterator the iterator for which we should filter rows.
1:      *
1:      * @return an iterator that only returns the rows (or rather Unfilted) from {@code iterator} that are selected by this filter.
1:      */
1:     public UnfilteredRowIterator filterNotIndexed(ColumnFilter columnFilter, UnfilteredRowIterator iterator);
1: 
1:     /**
0:      * Returns an iterator that only returns the rows of the provided sliceable iterator that this filter selects.
1:      *
0:      * @param iterator the sliceable iterator for which we should filter rows.
1:      *
0:      * @return an iterator that only returns the rows (or rather unfiltered) from {@code iterator} that are selected by this filter.
1:      */
0:     public UnfilteredRowIterator filter(SliceableUnfilteredRowIterator iterator);
1: 
1:     /**
1:      * Given a partition, returns a row iterator for the rows of this partition that are selected by this filter.
1:      *
1:      * @param columnFilter the columns to include in the rows of the result iterator.
1:      * @param partition the partition containing the rows to filter.
1:      *
1:      * @return a unfiltered row iterator returning those rows (or rather Unfiltered) from {@code partition} that are selected by this filter.
1:      */
0:     // TODO: we could get rid of that if Partition was exposing a SliceableUnfilteredRowIterator (instead of the two searchIterator() and
0:     // unfilteredIterator() methods). However, for AtomicBtreePartition this would require changes to Btree so we'll leave that for later.
1:     public UnfilteredRowIterator getUnfilteredRowIterator(ColumnFilter columnFilter, Partition partition);
1: 
1:     /**
1:      * Whether the provided sstable may contain data that is selected by this filter (based on the sstable metadata).
1:      *
1:      * @param sstable the sstable for which we want to test the need for inclusion.
1:      *
1:      * @return whether {@code sstable} should be included to answer this filter.
1:      */
1:     public boolean shouldInclude(SSTableReader sstable);
1: 
1:     public String toString(CFMetaData metadata);
1:     public String toCQLString(CFMetaData metadata);
1: 
1:     public interface Serializer
1:     {
1:         public void serialize(ClusteringIndexFilter filter, DataOutputPlus out, int version) throws IOException;
0:         public ClusteringIndexFilter deserialize(DataInput in, int version, CFMetaData metadata) throws IOException;
1:         public long serializedSize(ClusteringIndexFilter filter, int version);
1:     }
1: }
============================================================================