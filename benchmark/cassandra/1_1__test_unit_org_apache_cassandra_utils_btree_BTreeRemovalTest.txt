1:1c62850: /*
1:1c62850:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c62850:  * or more contributor license agreements.  See the NOTICE file
1:1c62850:  * distributed with this work for additional information
1:1c62850:  * regarding copyright ownership.  The ASF licenses this file
1:1c62850:  * to you under the Apache License, Version 2.0 (the
1:1c62850:  * "License"); you may not use this file except in compliance
1:1c62850:  * with the License.  You may obtain a copy of the License at
1:1c62850:  *
1:1c62850:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1c62850:  *
1:1c62850:  * Unless required by applicable law or agreed to in writing, software
1:1c62850:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1c62850:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1c62850:  * See the License for the specific language governing permissions and
1:1c62850:  * limitations under the License.
1:1c62850:  */
1:1c62850: package org.apache.cassandra.utils.btree;
1:1c62850: 
1:1c62850: import static org.apache.cassandra.utils.btree.BTreeRemoval.remove;
1:1c62850: import static org.junit.Assert.assertArrayEquals;
1:1c62850: import static org.junit.Assert.assertEquals;
1:1c62850: import static org.junit.Assert.assertNotNull;
1:1c62850: import static org.junit.Assert.assertNull;
1:1c62850: import static org.junit.Assert.assertTrue;
1:1c62850: 
1:1c62850: import java.util.Comparator;
1:1c62850: import java.util.Random;
1:1c62850: import java.util.SortedSet;
1:1c62850: import java.util.TreeSet;
1:1c62850: 
1:1c62850: import org.junit.Test;
1:1c62850: 
1:1c62850: import com.google.common.collect.Iterables;
1:1c62850: 
1:1c62850: public class BTreeRemovalTest
1:1c62850: {
1:1c62850:     static
1:1c62850:     {
1:1c62850:         System.setProperty("cassandra.btree.fanfactor", "8");
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static final Comparator<Integer> CMP = new Comparator<Integer>()
1:1c62850:     {
1:1c62850:         public int compare(Integer o1, Integer o2)
1:1c62850:         {
1:1c62850:             return Integer.compare(o1, o2);
1:1c62850:         }
1:1c62850:     };
1:1c62850: 
1:1c62850:     private static Object[] copy(final Object[] btree)
1:1c62850:     {
1:1c62850:         final Object[] result = new Object[btree.length];
1:1c62850:         System.arraycopy(btree, 0, result, 0, btree.length);
1:1c62850:         if (!BTree.isLeaf(btree))
1:1c62850:         {
1:1c62850:             for (int i = BTree.getChildStart(btree); i < BTree.getChildEnd(btree); ++i)
1:1c62850:                 result[i] = copy((Object[]) btree[i]);
1:1c62850:             final int[] sizeMap = BTree.getSizeMap(btree);
1:1c62850:             final int[] resultSizeMap = new int[sizeMap.length];
1:1c62850:             System.arraycopy(sizeMap, 0, resultSizeMap, 0, sizeMap.length);
1:1c62850:             result[result.length - 1] = resultSizeMap;
1:1c62850:         }
1:1c62850:         return result;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static Object[] assertRemove(final Object[] btree, final int key)
1:1c62850:     {
1:1c62850:         final Object[] btreeBeforeRemoval = copy(btree);
1:1c62850:         final Object[] result = remove(btree, CMP, key);
1:1c62850:         assertBTree(btreeBeforeRemoval, btree);
1:1c62850:         assertTrue(BTree.isWellFormed(result, CMP));
1:1c62850:         assertEquals(BTree.size(btree) - 1, BTree.size(result));
1:1c62850:         assertNull(BTree.find(result, CMP, key));
1:1c62850: 
1:1c62850:         for (Integer k : BTree.<Integer>iterable(btree))
1:1c62850:             if (k != key)
1:1c62850:                 assertNotNull(BTree.find(result, CMP, k));
1:1c62850: 
1:1c62850:         return result;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static void assertBTree(final Object[] expected, final Object[] result)
1:1c62850:     {
1:1c62850:         assertEquals(BTree.isEmpty(expected), BTree.isEmpty(result));
1:1c62850:         assertEquals(BTree.isLeaf(expected), BTree.isLeaf(result));
1:1c62850:         assertEquals(expected.length, result.length);
1:1c62850:         if (BTree.isLeaf(expected))
1:1c62850:         {
1:1c62850:             assertArrayEquals(expected, result);
1:1c62850:         }
1:1c62850:         else
1:1c62850:         {
1:1c62850:             for (int i = 0; i < BTree.getBranchKeyEnd(expected); ++i)
1:1c62850:                 assertEquals(expected[i], result[i]);
1:1c62850:             for (int i = BTree.getChildStart(expected); i < BTree.getChildEnd(expected); ++i)
1:1c62850:                 assertBTree((Object[]) expected[i], (Object[]) result[i]);
1:1c62850:             assertArrayEquals(BTree.getSizeMap(expected), BTree.getSizeMap(result));
1:1c62850:         }
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static Object[] generateLeaf(int from, int size)
1:1c62850:     {
1:1c62850:         final Object[] result = new Object[(size & 1) == 1 ? size : size + 1];
1:1c62850:         for (int i = 0; i < size; ++i)
1:1c62850:             result[i] = from + i;
1:1c62850:         return result;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static Object[] generateBranch(int[] keys, Object[][] children)
1:1c62850:     {
1:1c62850:         assert keys.length > 0;
1:1c62850:         assert children.length > 1;
1:1c62850:         assert children.length == keys.length + 1;
1:1c62850:         final Object[] result = new Object[keys.length + children.length + 1];
1:1c62850:         for (int i = 0; i < keys.length; ++i)
1:1c62850:             result[i] = keys[i];
1:1c62850:         for (int i = 0; i < children.length; ++i)
1:1c62850:             result[keys.length + i] = children[i];
1:1c62850:         final int[] sizeMap = new int[children.length];
1:1c62850:         sizeMap[0] = BTree.size(children[0]);
1:1c62850:         for (int i = 1; i < children.length; ++i)
1:1c62850:             sizeMap[i] = sizeMap[i - 1] + BTree.size(children[i]) + 1;
1:1c62850:         result[result.length - 1] = sizeMap;
1:1c62850:         return result;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static Object[] generateSampleTwoLevelsTree(final int[] leafSizes)
1:1c62850:     {
1:1c62850:         assert leafSizes.length > 1;
1:1c62850:         final Object[][] leaves = new Object[leafSizes.length][];
1:1c62850:         for (int i = 0; i < leaves.length; ++i)
1:1c62850:             leaves[i] = generateLeaf(10 * i + 1, leafSizes[i]);
1:1c62850:         final int[] keys = new int[leafSizes.length - 1];
1:1c62850:         for (int i = 0; i < keys.length; ++i)
1:1c62850:             keys[i] = 10 * (i + 1);
1:1c62850:         final Object[] btree = generateBranch(keys, leaves);
1:1c62850:         assertTrue(BTree.isWellFormed(btree, CMP));
1:1c62850:         return btree;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static Object[] generateSampleThreeLevelsTree(final int[] middleNodeSizes)
1:1c62850:     {
1:1c62850:         assert middleNodeSizes.length > 1;
1:1c62850:         final Object[][] middleNodes = new Object[middleNodeSizes.length][];
1:1c62850:         for (int i = 0; i < middleNodes.length; ++i)
1:1c62850:         {
1:1c62850:             final Object[][] leaves = new Object[middleNodeSizes[i]][];
1:1c62850:             for (int j = 0; j < middleNodeSizes[i]; ++j)
1:1c62850:                 leaves[j] = generateLeaf(100 * i + 10 * j + 1, 4);
1:1c62850:             final int[] keys = new int[middleNodeSizes[i] - 1];
1:1c62850:             for (int j = 0; j < keys.length; ++j)
1:1c62850:                 keys[j] = 100 * i + 10 * (j + 1);
1:1c62850:             middleNodes[i] = generateBranch(keys, leaves);
1:1c62850:         }
1:1c62850:         final int[] keys = new int[middleNodeSizes.length - 1];
1:1c62850:         for (int i = 0; i < keys.length; ++i)
1:1c62850:             keys[i] = 100 * (i + 1);
1:1c62850:         final Object[] btree = generateBranch(keys, middleNodes);
1:1c62850:         assertTrue(BTree.isWellFormed(btree, CMP));
1:1c62850:         return btree;
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromEmpty()
1:1c62850:     {
1:1c62850:         assertBTree(BTree.empty(), remove(BTree.empty(), CMP, 1));
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveNonexistingElement()
1:1c62850:     {
1:1c62850:         final Object[] btree = new Object[] {1, 2, 3, 4, null};
1:1c62850:         assertBTree(btree, remove(btree, CMP, 5));
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveLastElement()
1:1c62850:     {
1:1c62850:         final Object[] btree = new Object[] {1};
1:1c62850:         assertBTree(BTree.empty(), remove(btree, CMP, 1));
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromRootWhichIsALeaf()
1:1c62850:     {
1:1c62850:         for (int size = 1; size < 9; ++size)
1:1c62850:         {
1:1c62850:             final Object[] btree = new Object[(size & 1) == 1 ? size : size + 1];
1:1c62850:             for (int i = 0; i < size; ++i)
1:1c62850:                 btree[i] = i + 1;
1:1c62850:             for (int i = 0; i < size; ++i)
1:1c62850:             {
1:1c62850:                 final Object[] result = remove(btree, CMP, i + 1);
1:1c62850:                 assertTrue("size " + size, BTree.isWellFormed(result, CMP));
1:1c62850:                 for (int j = 0; j < i; ++j)
1:1c62850:                     assertEquals("size " + size + "elem " + j, btree[j], result[j]);
1:1c62850:                 for (int j = i; j < size - 1; ++j)
1:1c62850:                     assertEquals("size " + size + "elem " + j, btree[j + 1], result[j]);
1:1c62850:                 for (int j = size - 1; j < result.length; ++j)
1:1c62850:                     assertNull("size " + size + "elem " + j, result[j]);
1:1c62850:             }
1:1c62850: 
1:1c62850:             {
1:1c62850:                 final Object[] result = remove(btree, CMP, 0);
1:1c62850:                 assertTrue("size " + size, BTree.isWellFormed(result, CMP));
1:1c62850:                 assertBTree(btree, result);
1:1c62850:             }
1:1c62850: 
1:1c62850:             {
1:1c62850:                 final Object[] result = remove(btree, CMP, size + 1);
1:1c62850:                 assertTrue("size " + size, BTree.isWellFormed(result, CMP));
1:1c62850:                 assertBTree(btree, result);
1:1c62850:             }
1:1c62850:         }
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromNonMinimalLeaf()
1:1c62850:     {
1:1c62850:         for (int size = 5; size < 9; ++size)
1:1c62850:         {
1:1c62850:             final Object[] btree = generateSampleTwoLevelsTree(new int[] {size, 4, 4, 4, 4});
1:1c62850: 
1:1c62850:             for (int i = 1; i < size + 1; ++i)
1:1c62850:                 assertRemove(btree, i);
1:1c62850:         }
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafRotateLeft()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 5, 5, 5, 5});
1:1c62850: 
1:1c62850:         for (int i = 11; i < 15; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafRotateRight1()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 5, 5, 5, 5});
1:1c62850: 
1:1c62850:         for (int i = 1; i < 5; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafRotateRight2()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 5, 5, 5});
1:1c62850: 
1:1c62850:         for (int i = 11; i < 15; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafMergeWithLeft1()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 4, 4, 4});
1:1c62850: 
1:1c62850:         for (int i = 11; i < 15; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafMergeWithLeft2()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 4, 4, 4});
1:1c62850: 
1:1c62850:         for (int i = 41; i < 45; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafMergeWithRight()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 4, 4, 4});
1:1c62850: 
1:1c62850:         for (int i = 1; i < 5; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWhenSingleKeyRootMergeWithLeft()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4});
1:1c62850: 
1:1c62850:         for (int i = 1; i < 5; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWhenSingleKeyRootMergeWithRight()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4});
1:1c62850: 
1:1c62850:         for (int i = 11; i < 15; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWithBranchLeftRotation()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {6, 5, 5, 5, 5});
1:1c62850:         for (int i = 101; i < 105; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWithBranchRightRotation1()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 6, 5, 5, 5});
1:1c62850:         for (int i = 1; i < 5; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWithBranchRightRotation2()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 6, 5, 5});
1:1c62850:         for (int i = 101; i < 105; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWithBranchMergeWithLeft1()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:1c62850:         for (int i = 101; i < 105; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWithBranchMergeWithLeft2()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:1c62850:         for (int i = 401; i < 405; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMinimalLeafWithBranchMergeWithRight()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:1c62850:         for (int i = 1; i < 5; ++i)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromMiddleBranch()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:1c62850:         for (int i = 10; i < 50; i += 10)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void testRemoveFromRootBranch()
1:1c62850:     {
1:1c62850:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:1c62850:         for (int i = 100; i < 500; i += 100)
1:1c62850:             assertRemove(btree, i);
1:1c62850:     }
1:1c62850: 
1:1c62850:     @Test
1:1c62850:     public void randomizedTest()
1:1c62850:     {
1:1c62850:         Random rand = new Random(2);
1:1c62850:         SortedSet<Integer> data = new TreeSet<>();
1:1c62850:         for (int i = 0; i < 1000; ++i)
1:1c62850:             data.add(rand.nextInt());
1:1c62850:         Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp());
1:1c62850: 
1:1c62850:         assertTrue(BTree.isWellFormed(btree, CMP));
1:1c62850:         assertTrue(Iterables.elementsEqual(data, BTree.iterable(btree)));
1:1c62850:         while (btree != BTree.empty())
1:1c62850:         {
1:1c62850:             int idx = rand.nextInt(BTree.size(btree));
1:1c62850:             Integer val = BTree.findByIndex(btree, idx);
1:1c62850:             assertTrue(data.remove(val));
1:1c62850:             btree = assertRemove(btree, val);
1:1c62850:         }
1:1c62850:     }
1:1c62850: }
============================================================================
author:Piotr Jastrzebski
-------------------------------------------------------------------------------
commit:1c62850
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils.btree;
1: 
1: import static org.apache.cassandra.utils.btree.BTreeRemoval.remove;
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Comparator;
1: import java.util.Random;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
1: 
1: import org.junit.Test;
1: 
1: import com.google.common.collect.Iterables;
1: 
1: public class BTreeRemovalTest
1: {
1:     static
1:     {
1:         System.setProperty("cassandra.btree.fanfactor", "8");
1:     }
1: 
1:     private static final Comparator<Integer> CMP = new Comparator<Integer>()
1:     {
1:         public int compare(Integer o1, Integer o2)
1:         {
1:             return Integer.compare(o1, o2);
1:         }
1:     };
1: 
1:     private static Object[] copy(final Object[] btree)
1:     {
1:         final Object[] result = new Object[btree.length];
1:         System.arraycopy(btree, 0, result, 0, btree.length);
1:         if (!BTree.isLeaf(btree))
1:         {
1:             for (int i = BTree.getChildStart(btree); i < BTree.getChildEnd(btree); ++i)
1:                 result[i] = copy((Object[]) btree[i]);
1:             final int[] sizeMap = BTree.getSizeMap(btree);
1:             final int[] resultSizeMap = new int[sizeMap.length];
1:             System.arraycopy(sizeMap, 0, resultSizeMap, 0, sizeMap.length);
1:             result[result.length - 1] = resultSizeMap;
1:         }
1:         return result;
1:     }
1: 
1:     private static Object[] assertRemove(final Object[] btree, final int key)
1:     {
1:         final Object[] btreeBeforeRemoval = copy(btree);
1:         final Object[] result = remove(btree, CMP, key);
1:         assertBTree(btreeBeforeRemoval, btree);
1:         assertTrue(BTree.isWellFormed(result, CMP));
1:         assertEquals(BTree.size(btree) - 1, BTree.size(result));
1:         assertNull(BTree.find(result, CMP, key));
1: 
1:         for (Integer k : BTree.<Integer>iterable(btree))
1:             if (k != key)
1:                 assertNotNull(BTree.find(result, CMP, k));
1: 
1:         return result;
1:     }
1: 
1:     private static void assertBTree(final Object[] expected, final Object[] result)
1:     {
1:         assertEquals(BTree.isEmpty(expected), BTree.isEmpty(result));
1:         assertEquals(BTree.isLeaf(expected), BTree.isLeaf(result));
1:         assertEquals(expected.length, result.length);
1:         if (BTree.isLeaf(expected))
1:         {
1:             assertArrayEquals(expected, result);
1:         }
1:         else
1:         {
1:             for (int i = 0; i < BTree.getBranchKeyEnd(expected); ++i)
1:                 assertEquals(expected[i], result[i]);
1:             for (int i = BTree.getChildStart(expected); i < BTree.getChildEnd(expected); ++i)
1:                 assertBTree((Object[]) expected[i], (Object[]) result[i]);
1:             assertArrayEquals(BTree.getSizeMap(expected), BTree.getSizeMap(result));
1:         }
1:     }
1: 
1:     private static Object[] generateLeaf(int from, int size)
1:     {
1:         final Object[] result = new Object[(size & 1) == 1 ? size : size + 1];
1:         for (int i = 0; i < size; ++i)
1:             result[i] = from + i;
1:         return result;
1:     }
1: 
1:     private static Object[] generateBranch(int[] keys, Object[][] children)
1:     {
1:         assert keys.length > 0;
1:         assert children.length > 1;
1:         assert children.length == keys.length + 1;
1:         final Object[] result = new Object[keys.length + children.length + 1];
1:         for (int i = 0; i < keys.length; ++i)
1:             result[i] = keys[i];
1:         for (int i = 0; i < children.length; ++i)
1:             result[keys.length + i] = children[i];
1:         final int[] sizeMap = new int[children.length];
1:         sizeMap[0] = BTree.size(children[0]);
1:         for (int i = 1; i < children.length; ++i)
1:             sizeMap[i] = sizeMap[i - 1] + BTree.size(children[i]) + 1;
1:         result[result.length - 1] = sizeMap;
1:         return result;
1:     }
1: 
1:     private static Object[] generateSampleTwoLevelsTree(final int[] leafSizes)
1:     {
1:         assert leafSizes.length > 1;
1:         final Object[][] leaves = new Object[leafSizes.length][];
1:         for (int i = 0; i < leaves.length; ++i)
1:             leaves[i] = generateLeaf(10 * i + 1, leafSizes[i]);
1:         final int[] keys = new int[leafSizes.length - 1];
1:         for (int i = 0; i < keys.length; ++i)
1:             keys[i] = 10 * (i + 1);
1:         final Object[] btree = generateBranch(keys, leaves);
1:         assertTrue(BTree.isWellFormed(btree, CMP));
1:         return btree;
1:     }
1: 
1:     private static Object[] generateSampleThreeLevelsTree(final int[] middleNodeSizes)
1:     {
1:         assert middleNodeSizes.length > 1;
1:         final Object[][] middleNodes = new Object[middleNodeSizes.length][];
1:         for (int i = 0; i < middleNodes.length; ++i)
1:         {
1:             final Object[][] leaves = new Object[middleNodeSizes[i]][];
1:             for (int j = 0; j < middleNodeSizes[i]; ++j)
1:                 leaves[j] = generateLeaf(100 * i + 10 * j + 1, 4);
1:             final int[] keys = new int[middleNodeSizes[i] - 1];
1:             for (int j = 0; j < keys.length; ++j)
1:                 keys[j] = 100 * i + 10 * (j + 1);
1:             middleNodes[i] = generateBranch(keys, leaves);
1:         }
1:         final int[] keys = new int[middleNodeSizes.length - 1];
1:         for (int i = 0; i < keys.length; ++i)
1:             keys[i] = 100 * (i + 1);
1:         final Object[] btree = generateBranch(keys, middleNodes);
1:         assertTrue(BTree.isWellFormed(btree, CMP));
1:         return btree;
1:     }
1: 
1:     @Test
1:     public void testRemoveFromEmpty()
1:     {
1:         assertBTree(BTree.empty(), remove(BTree.empty(), CMP, 1));
1:     }
1: 
1:     @Test
1:     public void testRemoveNonexistingElement()
1:     {
1:         final Object[] btree = new Object[] {1, 2, 3, 4, null};
1:         assertBTree(btree, remove(btree, CMP, 5));
1:     }
1: 
1:     @Test
1:     public void testRemoveLastElement()
1:     {
1:         final Object[] btree = new Object[] {1};
1:         assertBTree(BTree.empty(), remove(btree, CMP, 1));
1:     }
1: 
1:     @Test
1:     public void testRemoveFromRootWhichIsALeaf()
1:     {
1:         for (int size = 1; size < 9; ++size)
1:         {
1:             final Object[] btree = new Object[(size & 1) == 1 ? size : size + 1];
1:             for (int i = 0; i < size; ++i)
1:                 btree[i] = i + 1;
1:             for (int i = 0; i < size; ++i)
1:             {
1:                 final Object[] result = remove(btree, CMP, i + 1);
1:                 assertTrue("size " + size, BTree.isWellFormed(result, CMP));
1:                 for (int j = 0; j < i; ++j)
1:                     assertEquals("size " + size + "elem " + j, btree[j], result[j]);
1:                 for (int j = i; j < size - 1; ++j)
1:                     assertEquals("size " + size + "elem " + j, btree[j + 1], result[j]);
1:                 for (int j = size - 1; j < result.length; ++j)
1:                     assertNull("size " + size + "elem " + j, result[j]);
1:             }
1: 
1:             {
1:                 final Object[] result = remove(btree, CMP, 0);
1:                 assertTrue("size " + size, BTree.isWellFormed(result, CMP));
1:                 assertBTree(btree, result);
1:             }
1: 
1:             {
1:                 final Object[] result = remove(btree, CMP, size + 1);
1:                 assertTrue("size " + size, BTree.isWellFormed(result, CMP));
1:                 assertBTree(btree, result);
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testRemoveFromNonMinimalLeaf()
1:     {
1:         for (int size = 5; size < 9; ++size)
1:         {
1:             final Object[] btree = generateSampleTwoLevelsTree(new int[] {size, 4, 4, 4, 4});
1: 
1:             for (int i = 1; i < size + 1; ++i)
1:                 assertRemove(btree, i);
1:         }
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafRotateLeft()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 5, 5, 5, 5});
1: 
1:         for (int i = 11; i < 15; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafRotateRight1()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 5, 5, 5, 5});
1: 
1:         for (int i = 1; i < 5; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafRotateRight2()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 5, 5, 5});
1: 
1:         for (int i = 11; i < 15; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafMergeWithLeft1()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 4, 4, 4});
1: 
1:         for (int i = 11; i < 15; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafMergeWithLeft2()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 4, 4, 4});
1: 
1:         for (int i = 41; i < 45; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafMergeWithRight()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4, 4, 4, 4});
1: 
1:         for (int i = 1; i < 5; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWhenSingleKeyRootMergeWithLeft()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4});
1: 
1:         for (int i = 1; i < 5; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWhenSingleKeyRootMergeWithRight()
1:     {
1:         final Object[] btree = generateSampleTwoLevelsTree(new int[] {4, 4});
1: 
1:         for (int i = 11; i < 15; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWithBranchLeftRotation()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {6, 5, 5, 5, 5});
1:         for (int i = 101; i < 105; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWithBranchRightRotation1()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 6, 5, 5, 5});
1:         for (int i = 1; i < 5; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWithBranchRightRotation2()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 6, 5, 5});
1:         for (int i = 101; i < 105; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWithBranchMergeWithLeft1()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:         for (int i = 101; i < 105; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWithBranchMergeWithLeft2()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:         for (int i = 401; i < 405; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMinimalLeafWithBranchMergeWithRight()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:         for (int i = 1; i < 5; ++i)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromMiddleBranch()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:         for (int i = 10; i < 50; i += 10)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void testRemoveFromRootBranch()
1:     {
1:         final Object[] btree = generateSampleThreeLevelsTree(new int[] {5, 5, 5, 5, 5});
1:         for (int i = 100; i < 500; i += 100)
1:             assertRemove(btree, i);
1:     }
1: 
1:     @Test
1:     public void randomizedTest()
1:     {
1:         Random rand = new Random(2);
1:         SortedSet<Integer> data = new TreeSet<>();
1:         for (int i = 0; i < 1000; ++i)
1:             data.add(rand.nextInt());
1:         Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp());
1: 
1:         assertTrue(BTree.isWellFormed(btree, CMP));
1:         assertTrue(Iterables.elementsEqual(data, BTree.iterable(btree)));
1:         while (btree != BTree.empty())
1:         {
1:             int idx = rand.nextInt(BTree.size(btree));
1:             Integer val = BTree.findByIndex(btree, idx);
1:             assertTrue(data.remove(val));
1:             btree = assertRemove(btree, val);
1:         }
1:     }
1: }
============================================================================