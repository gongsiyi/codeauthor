1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
2:066ef58:  */
1:066ef58: package org.apache.cassandra.utils;
12:066ef58: 
1:e7a385a: import java.net.InetAddress;
1:e7a385a: import java.net.UnknownHostException;
1:e7a385a: import java.nio.ByteBuffer;
1:e7a385a: import java.security.SecureRandom;
1:e7a385a: import java.util.Random;
1:2fd3268: 
1:68d2526: public class GuidGenerator
1:68d2526: {
1:5a6e2b0:     private static final Random myRand;
1:5a6e2b0:     private static final SecureRandom mySecureRand;
1:5a6e2b0:     private static final String s_id;
1:e7a385a: 
1:68d2526:     static
1:68d2526:     {
1:68d2526:         if (System.getProperty("java.security.egd") == null)
1:68d2526:         {
1:066ef58:             System.setProperty("java.security.egd", "file:/dev/urandom");
3:066ef58:         }
1:066ef58:         mySecureRand = new SecureRandom();
1:066ef58:         long secureInitializer = mySecureRand.nextLong();
1:066ef58:         myRand = new Random(secureInitializer);
1:68d2526:         try
1:68d2526:         {
1:066ef58:             s_id = InetAddress.getLocalHost().toString();
1:066ef58:         }
1:68d2526:         catch (UnknownHostException e)
1:68d2526:         {
1:704c915:             throw new AssertionError(e);
1:066ef58:         }
1:066ef58:     }
1:2fd3268: 
1:68d2526:     public static String guid()
1:68d2526:     {
1:e7a385a:         ByteBuffer array = guidAsBytes();
1:07cdfd0: 
1:066ef58:         StringBuilder sb = new StringBuilder();
1:3787d6c:         for (int j = array.position(); j < array.limit(); ++j)
1:3787d6c:         {
1:3787d6c:             int b = array.get(j) & 0xFF;
1:066ef58:             if (b < 0x10) sb.append('0');
1:066ef58:             sb.append(Integer.toHexString(b));
1:066ef58:         }
1:066ef58: 
1:066ef58:         return convertToStandardFormat( sb.toString() );
1:066ef58:     }
1:07cdfd0: 
1:066ef58:     public static String guidToString(byte[] bytes)
1:066ef58:     {
1:066ef58:         StringBuilder sb = new StringBuilder();
1:68d2526:         for (int j = 0; j < bytes.length; ++j)
1:68d2526:         {
1:066ef58:             int b = bytes[j] & 0xFF;
1:066ef58:             if (b < 0x10) sb.append('0');
1:066ef58:             sb.append(Integer.toHexString(b));
1:066ef58:         }
1:07cdfd0: 
1:066ef58:         return convertToStandardFormat( sb.toString() );
1:066ef58:     }
1:2fd3268: 
1:e6d22da:     public static ByteBuffer guidAsBytes(Random random, String hostId, long time)
1:066ef58:     {
1:066ef58:         StringBuilder sbValueBeforeMD5 = new StringBuilder();
1:e6d22da:         long rand = random.nextLong();
1:e6d22da:         sbValueBeforeMD5.append(hostId)
1:686139a:                         .append(":")
1:686139a:                         .append(Long.toString(time))
1:686139a:                         .append(":")
1:686139a:                         .append(Long.toString(rand));
1:066ef58: 
1:066ef58:         String valueBeforeMD5 = sbValueBeforeMD5.toString();
1:70688be:         return ByteBuffer.wrap(FBUtilities.threadLocalMD5Digest().digest(valueBeforeMD5.getBytes()));
1:066ef58:     }
1:066ef58: 
1:47d3b7e:     public static ByteBuffer guidAsBytes()
1:47d3b7e:     {
1:e6d22da:         return guidAsBytes(myRand, s_id, System.currentTimeMillis());
1:47d3b7e:     }
1:47d3b7e: 
1:066ef58:     /*
1:066ef58:         * Convert to the standard format for GUID
1:066ef58:         * Example: C2FEEEAC-CFCD-11D1-8B05-00600806D9B6
1:066ef58:     */
1:066ef58: 
1:68d2526:     private static String convertToStandardFormat(String valueAfterMD5)
1:68d2526:     {
1:066ef58:         String raw = valueAfterMD5.toUpperCase();
1:066ef58:         StringBuilder sb = new StringBuilder();
1:066ef58:         sb.append(raw.substring(0, 8))
1:066ef58:           .append("-")
1:066ef58:           .append(raw.substring(8, 12))
1:066ef58:           .append("-")
1:066ef58:           .append(raw.substring(12, 16))
1:066ef58:           .append("-")
1:066ef58:           .append(raw.substring(16, 20))
1:066ef58:           .append("-")
1:066ef58:           .append(raw.substring(20));
1:066ef58:         return sb.toString();
1:066ef58:     }
1:066ef58: }
1:066ef58: 
1:066ef58: 
1:066ef58: 
1:066ef58: 
1:066ef58: 
1:066ef58: 
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e6d22da
/////////////////////////////////////////////////////////////////////////
1:     public static ByteBuffer guidAsBytes(Random random, String hostId, long time)
1:         long rand = random.nextLong();
1:         sbValueBeforeMD5.append(hostId)
/////////////////////////////////////////////////////////////////////////
1:         return guidAsBytes(myRand, s_id, System.currentTimeMillis());
commit:c6ec31b
/////////////////////////////////////////////////////////////////////////
0:     public static ByteBuffer guidAsBytes(Random random, long time)
/////////////////////////////////////////////////////////////////////////
0:         return guidAsBytes(myRand, System.currentTimeMillis());
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: public class GuidGenerator
1: {
1:     static
1:     {
1:         if (System.getProperty("java.security.egd") == null)
1:         {
1:         try
1:         {
1:         catch (UnknownHostException e)
1:         {
1:     public static String guid()
1:     {
/////////////////////////////////////////////////////////////////////////
1:         for (int j = 0; j < bytes.length; ++j)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     private static String convertToStandardFormat(String valueAfterMD5)
1:     {
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
0:     public static ByteBuffer guidAsBytes(Random random)
0:         rand = random.nextLong();
/////////////////////////////////////////////////////////////////////////
1:     public static ByteBuffer guidAsBytes()
1:     {
0:         return guidAsBytes(myRand);
1:     }
1: 
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
1:         for (int j = array.position(); j < array.limit(); ++j)
1:         {
1:             int b = array.get(j) & 0xFF;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     private static final Random myRand;
1:     private static final SecureRandom mySecureRand;
1:     private static final String s_id;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:686139a
/////////////////////////////////////////////////////////////////////////
1:                         .append(":")
1:                         .append(Long.toString(time))
1:                         .append(":")
1:                         .append(Long.toString(rand));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6a0df02
/////////////////////////////////////////////////////////////////////////
commit:70688be
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return ByteBuffer.wrap(FBUtilities.threadLocalMD5Digest().digest(valueBeforeMD5.getBytes()));
commit:8358669
/////////////////////////////////////////////////////////////////////////
0:         for (int j = array.position()+array.arrayOffset(); j < array.limit()+array.arrayOffset(); ++j) {
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
0: import java.security.MessageDigest;
0: import java.security.NoSuchAlgorithmException;
1: import java.security.SecureRandom;
1: import java.util.Random;
1: 
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer array = guidAsBytes();
0:         for (int j = array.position()+array.arrayOffset(); j < array.limit(); ++j) {
0:             int b = array.array()[j] & 0xFF;
/////////////////////////////////////////////////////////////////////////
0:     public static ByteBuffer guidAsBytes()
/////////////////////////////////////////////////////////////////////////
0:         return ByteBuffer.wrap(md5.digest(valueBeforeMD5.getBytes()));
commit:704c915
/////////////////////////////////////////////////////////////////////////
1:             throw new AssertionError(e);
/////////////////////////////////////////////////////////////////////////
0:             throw new AssertionError(e);
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.utils;
1: 
0: import org.apache.log4j.Logger;
1: 
0: import java.util.*;
0: import java.net.*;
0: import java.security.*;
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
1: 
0: public class GuidGenerator {
0:     private static Logger logger_ = Logger.getLogger(GuidGenerator.class);
0:     private static Random myRand;
0:     private static SecureRandom mySecureRand;
0:     private static String s_id;
0:     private static SafeMessageDigest md5 = null;
1: 
0:     static {
0:         if (System.getProperty("java.security.egd") == null) {
1:             System.setProperty("java.security.egd", "file:/dev/urandom");
1:         }
1:         mySecureRand = new SecureRandom();
1:         long secureInitializer = mySecureRand.nextLong();
1:         myRand = new Random(secureInitializer);
0:         try {
1:             s_id = InetAddress.getLocalHost().toString();
1:         }
0:         catch (UnknownHostException e) {
0:             if (logger_.isDebugEnabled())
0:                 logger_.debug(LogUtil.throwableToString(e));
1:         }
1: 
0:         try {
0:             MessageDigest myMd5 = MessageDigest.getInstance("MD5");
0:             md5 = new SafeMessageDigest(myMd5);
1:         }
0:         catch (NoSuchAlgorithmException e) {
0:             if (logger_.isDebugEnabled())
0:                 logger_.debug(LogUtil.throwableToString(e));
1:         }
1:     }
1: 
1: 
0:     public static String guid() {
0:         byte[] array = guidAsBytes();
1:         
1:         StringBuilder sb = new StringBuilder();
0:         for (int j = 0; j < array.length; ++j) {
0:             int b = array[j] & 0xFF;
1:             if (b < 0x10) sb.append('0');
1:             sb.append(Integer.toHexString(b));
1:         }
1: 
1:         return convertToStandardFormat( sb.toString() );
1:     }
1:     
1:     public static String guidToString(byte[] bytes)
1:     {
1:         StringBuilder sb = new StringBuilder();
0:         for (int j = 0; j < bytes.length; ++j) {
1:             int b = bytes[j] & 0xFF;
1:             if (b < 0x10) sb.append('0');
1:             sb.append(Integer.toHexString(b));
1:         }
1: 
1:         return convertToStandardFormat( sb.toString() );
1:     }
1:     
0:     public static byte[] guidAsBytes()
1:     {
1:         StringBuilder sbValueBeforeMD5 = new StringBuilder();
0:         long time = System.currentTimeMillis();
0:         long rand = 0;
0:         rand = myRand.nextLong();
0:         sbValueBeforeMD5.append(s_id)
0:         				.append(":")
0:         				.append(Long.toString(time))
0:         				.append(":")
0:         				.append(Long.toString(rand));
1: 
1:         String valueBeforeMD5 = sbValueBeforeMD5.toString();
0:         return md5.digest(valueBeforeMD5.getBytes());
1:     }
1: 
1:     /*
1:         * Convert to the standard format for GUID
1:         * Example: C2FEEEAC-CFCD-11D1-8B05-00600806D9B6
1:     */
1: 
0:     private static String convertToStandardFormat(String valueAfterMD5) {
1:         String raw = valueAfterMD5.toUpperCase();
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(raw.substring(0, 8))
1:           .append("-")
1:           .append(raw.substring(8, 12))
1:           .append("-")
1:           .append(raw.substring(12, 16))
1:           .append("-")
1:           .append(raw.substring(16, 20))
1:           .append("-")
1:           .append(raw.substring(20));
1:         return sb.toString();
1:     }
1: }
1: 
1: 
1: 
1: 
1: 
1: 
commit:f856364
/////////////////////////////////////////////////////////////////////////
0: import org.apache.log4j.Logger;
0: 
/////////////////////////////////////////////////////////////////////////
0:     private static Logger logger_ = Logger.getLogger(GuidGenerator.class);
/////////////////////////////////////////////////////////////////////////
0:             if (logger_.isDebugEnabled())
0:                 logger_.debug(LogUtil.throwableToString(e));
/////////////////////////////////////////////////////////////////////////
0:             if (logger_.isDebugEnabled())
0:                 logger_.debug(LogUtil.throwableToString(e));
commit:0172497
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder sb = new StringBuilder();
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder sb = new StringBuilder();
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder sbValueBeforeMD5 = new StringBuilder();
0:         sbValueBeforeMD5.append(s_id)
0:         				.append(":")
0:         				.append(Long.toString(time))
0:         				.append(":")
0:         				.append(Long.toString(rand));
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder sb = new StringBuilder();
0:         sb.append(raw.substring(0, 8))
0:           .append("-")
0:           .append(raw.substring(8, 12))
0:           .append("-")
0:           .append(raw.substring(12, 16))
0:           .append("-")
0:           .append(raw.substring(16, 20))
0:           .append("-")
0:           .append(raw.substring(20));
commit:71739ef
author:Brandon Williams
-------------------------------------------------------------------------------
commit:6691812
/////////////////////////////////////////////////////////////////////////
0:     private static final ThreadLocal<MessageDigest> localMessageDigest = new ThreadLocal<MessageDigest>()
0:     {
0:         @Override
0:         protected MessageDigest initialValue()
0:         {
0:             try
0:             {
0:                 return MessageDigest.getInstance("MD5");
0:             }
0:             catch (NoSuchAlgorithmException e)
0:             {
0:                 throw new AssertionError(e);
0:             }
0:         }
0:     };
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         localMessageDigest.get().reset();
0:         return ByteBuffer.wrap(localMessageDigest.get().digest(valueBeforeMD5.getBytes()));
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:0095f0c
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static Logger logger_ = LoggerFactory.getLogger(GuidGenerator.class);
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.utils;
0: 
0: import java.util.*;
0: import java.net.*;
0: import java.security.*;
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: public class GuidGenerator {
0:     private static Random myRand;
0:     private static SecureRandom mySecureRand;
0:     private static String s_id;
0:     private static SafeMessageDigest md5 = null;
0: 
0:     static {
0:         if (System.getProperty("java.security.egd") == null) {
0:             System.setProperty("java.security.egd", "file:/dev/urandom");
0:         }
0:         mySecureRand = new SecureRandom();
0:         long secureInitializer = mySecureRand.nextLong();
0:         myRand = new Random(secureInitializer);
0:         try {
0:             s_id = InetAddress.getLocalHost().toString();
0:         }
0:         catch (UnknownHostException e) {
0:             LogUtil.getLogger(GuidGenerator.class.getName()).debug(LogUtil.throwableToString(e));
0:         }
0: 
0:         try {
0:             MessageDigest myMd5 = MessageDigest.getInstance("MD5");
0:             md5 = new SafeMessageDigest(myMd5);
0:         }
0:         catch (NoSuchAlgorithmException e) {
0:             LogUtil.getLogger(GuidGenerator.class.getName()).debug(LogUtil.throwableToString(e));
0:         }
0:     }
0: 
0: 
0:     public static String guid() {
0:         byte[] array = guidAsBytes();
0:         
0:         StringBuffer sb = new StringBuffer();
0:         for (int j = 0; j < array.length; ++j) {
0:             int b = array[j] & 0xFF;
0:             if (b < 0x10) sb.append('0');
0:             sb.append(Integer.toHexString(b));
0:         }
0: 
0:         return convertToStandardFormat( sb.toString() );
0:     }
0:     
0:     public static String guidToString(byte[] bytes)
0:     {
0:         StringBuffer sb = new StringBuffer();
0:         for (int j = 0; j < bytes.length; ++j) {
0:             int b = bytes[j] & 0xFF;
0:             if (b < 0x10) sb.append('0');
0:             sb.append(Integer.toHexString(b));
0:         }
0: 
0:         return convertToStandardFormat( sb.toString() );
0:     }
0:     
0:     public static byte[] guidAsBytes()
0:     {
0:         StringBuffer sbValueBeforeMD5 = new StringBuffer();
0:         long time = System.currentTimeMillis();
0:         long rand = 0;
0:         rand = myRand.nextLong();
0:         sbValueBeforeMD5.append(s_id);
0:         sbValueBeforeMD5.append(":");
0:         sbValueBeforeMD5.append(Long.toString(time));
0:         sbValueBeforeMD5.append(":");
0:         sbValueBeforeMD5.append(Long.toString(rand));
0: 
0:         String valueBeforeMD5 = sbValueBeforeMD5.toString();
0:         return md5.digest(valueBeforeMD5.getBytes());
0:     }
0: 
0:     /*
0:         * Convert to the standard format for GUID
0:         * Example: C2FEEEAC-CFCD-11D1-8B05-00600806D9B6
0:     */
0: 
0:     private static String convertToStandardFormat(String valueAfterMD5) {
0:         String raw = valueAfterMD5.toUpperCase();
0:         StringBuffer sb = new StringBuffer();
0:         sb.append(raw.substring(0, 8));
0:         sb.append("-");
0:         sb.append(raw.substring(8, 12));
0:         sb.append("-");
0:         sb.append(raw.substring(12, 16));
0:         sb.append("-");
0:         sb.append(raw.substring(16, 20));
0:         sb.append("-");
0:         sb.append(raw.substring(20));
0:         return sb.toString();
0:     }
0: }
0: 
0: 
0: 
0: 
0: 
0: 
============================================================================