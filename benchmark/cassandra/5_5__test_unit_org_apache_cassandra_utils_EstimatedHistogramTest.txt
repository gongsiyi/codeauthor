1:f2c38f8: /*
1:f2c38f8: * Licensed to the Apache Software Foundation (ASF) under one
1:f2c38f8: * or more contributor license agreements.  See the NOTICE file
1:f2c38f8: * distributed with this work for additional information
1:f2c38f8: * regarding copyright ownership.  The ASF licenses this file
1:f2c38f8: * to you under the Apache License, Version 2.0 (the
1:f2c38f8: * "License"); you may not use this file except in compliance
1:f2c38f8: * with the License.  You may obtain a copy of the License at
1:f2c38f8: *
1:f2c38f8: *    http://www.apache.org/licenses/LICENSE-2.0
1:f2c38f8: *
1:f2c38f8: * Unless required by applicable law or agreed to in writing,
1:f2c38f8: * software distributed under the License is distributed on an
1:f2c38f8: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f2c38f8: * KIND, either express or implied.  See the License for the
1:f2c38f8: * specific language governing permissions and limitations
1:f2c38f8: * under the License.
1:f2c38f8: */
1:f2c38f8: package org.apache.cassandra.utils;
1:f2c38f8: 
1:f2c38f8: import org.junit.Test;
1:f2c38f8: 
1:a991b64: import static org.junit.Assert.assertEquals;
1:f2c38f8: 
1:f2c38f8: 
1:f2c38f8: public class EstimatedHistogramTest
1:f2c38f8: {
1:f2c38f8:     @Test
1:09a1dd5:     public void testSimple()
1:5aa19cb:     {
1:09a1dd5:         {
1:5aa19cb:             // 0 and 1 map to the same, first bucket
1:5aa19cb:             EstimatedHistogram histogram = new EstimatedHistogram();
1:5aa19cb:             histogram.add(0);
1:5aa19cb:             assertEquals(1, histogram.get(0));
1:5aa19cb:             histogram.add(1);
1:5aa19cb:             assertEquals(2, histogram.get(0));
1:5aa19cb:         }
1:5aa19cb:         {
1:5aa19cb:             // 0 and 1 map to different buckets
1:5aa19cb:             EstimatedHistogram histogram = new EstimatedHistogram(90, true);
1:5aa19cb:             histogram.add(0);
1:5aa19cb:             assertEquals(1, histogram.get(0));
1:5aa19cb:             histogram.add(1);
1:5aa19cb:             assertEquals(1, histogram.get(0));
1:5aa19cb:             assertEquals(1, histogram.get(1));
1:5aa19cb:         }
1:09a1dd5:     }
1:f2c38f8: 
1:09a1dd5:     @Test
1:09a1dd5:     public void testOverflow()
1:09a1dd5:     {
1:09a1dd5:         EstimatedHistogram histogram = new EstimatedHistogram(1);
1:09a1dd5:         histogram.add(100);
1:09a1dd5:         assert histogram.isOverflowed();
1:09a1dd5:         assertEquals(Long.MAX_VALUE, histogram.max());
1:09a1dd5:     }
1:f2c38f8: 
1:09a1dd5:     @Test
1:09a1dd5:     public void testMinMax()
1:09a1dd5:     {
1:772c4f1:         EstimatedHistogram histogram = new EstimatedHistogram();
1:09a1dd5:         histogram.add(16);
1:09a1dd5:         assertEquals(15, histogram.min());
1:09a1dd5:         assertEquals(17, histogram.max());
1:09a1dd5:     }
1:f2c38f8: 
1:09a1dd5:     @Test
1:5aa19cb:     public void testMean()
1:5aa19cb:     {
1:5aa19cb:         {
1:5aa19cb:             EstimatedHistogram histogram = new EstimatedHistogram();
1:5aa19cb:             for (int i = 0; i < 40; i++)
1:5aa19cb:                 histogram.add(0);
1:5aa19cb:             for (int i = 0; i < 20; i++)
1:5aa19cb:                 histogram.add(1);
1:5aa19cb:             for (int i = 0; i < 10; i++)
1:5aa19cb:                 histogram.add(2);
1:5aa19cb:             assertEquals(70, histogram.count());
1:5aa19cb:             assertEquals(2, histogram.mean());
1:5aa19cb:         }
1:5aa19cb:         {
1:5aa19cb:             EstimatedHistogram histogram = new EstimatedHistogram(90, true);
1:5aa19cb:             for (int i = 0; i < 40; i++)
1:5aa19cb:                 histogram.add(0);
1:5aa19cb:             for (int i = 0; i < 20; i++)
1:5aa19cb:                 histogram.add(1);
1:5aa19cb:             for (int i = 0; i < 10; i++)
1:5aa19cb:                 histogram.add(2);
1:5aa19cb:             assertEquals(70, histogram.count());
1:5aa19cb:             assertEquals(1, histogram.mean());
1:5aa19cb:         }
1:5aa19cb:     }
1:5aa19cb: 
1:5aa19cb:     @Test
1:f2c38f8:     public void testFindingCorrectBuckets()
1:f2c38f8:     {
1:f2c38f8:         EstimatedHistogram histogram = new EstimatedHistogram();
1:5ac1aab:         histogram.add(23282687);
1:09a1dd5:         assert !histogram.isOverflowed();
1:09a1dd5:         assertEquals(1, histogram.getBuckets(false)[histogram.buckets.length() - 2]);
1:f2c38f8: 
1:f2c38f8:         histogram.add(9);
1:09a1dd5:         assertEquals(1, histogram.getBuckets(false)[8]);
1:f2c38f8: 
1:c00a5c1:         histogram.add(20);
1:c00a5c1:         histogram.add(21);
1:c00a5c1:         histogram.add(22);
1:09a1dd5:         assertEquals(2, histogram.getBuckets(false)[13]);
1:09a1dd5:         assertEquals(5021848, histogram.mean());
1:f2c38f8:     }
1:772c4f1: 
1:772c4f1:     @Test
1:772c4f1:     public void testPercentile()
1:d4e3786:     {
1:772c4f1:         {
1:d4e3786:             EstimatedHistogram histogram = new EstimatedHistogram();
1:d4e3786:             // percentile of empty histogram is 0
1:d4e3786:             assertEquals(0, histogram.percentile(0.99));
1:772c4f1: 
1:d4e3786:             histogram.add(1);
1:d4e3786:             // percentile of a histogram with one element should be that element
1:d4e3786:             assertEquals(1, histogram.percentile(0.99));
1:772c4f1: 
1:d4e3786:             histogram.add(10);
1:d4e3786:             assertEquals(10, histogram.percentile(0.99));
1:d4e3786:         }
1:d4e3786: 
1:d4e3786:         {
1:d4e3786:             EstimatedHistogram histogram = new EstimatedHistogram();
1:d4e3786: 
1:d4e3786:             histogram.add(1);
1:d4e3786:             histogram.add(2);
1:d4e3786:             histogram.add(3);
1:d4e3786:             histogram.add(4);
1:d4e3786:             histogram.add(5);
1:d4e3786: 
1:d4e3786:             assertEquals(0, histogram.percentile(0.00));
1:d4e3786:             assertEquals(3, histogram.percentile(0.50));
1:d4e3786:             assertEquals(3, histogram.percentile(0.60));
1:d4e3786:             assertEquals(5, histogram.percentile(1.00));
1:d4e3786:         }
1:d4e3786: 
1:d4e3786:         {
1:d4e3786:             EstimatedHistogram histogram = new EstimatedHistogram();
1:d4e3786: 
1:d4e3786:             for (int i = 11; i <= 20; i++)
1:d4e3786:                 histogram.add(i);
1:d4e3786: 
1:d4e3786:             // Right now the histogram looks like:
1:d4e3786:             //    10   12   14   17   20
1:d4e3786:             //     0    2    2    3    3
1:d4e3786:             // %:  0   20   40   70  100
1:d4e3786:             assertEquals(12, histogram.percentile(0.01));
1:d4e3786:             assertEquals(14, histogram.percentile(0.30));
1:d4e3786:             assertEquals(17, histogram.percentile(0.50));
1:d4e3786:             assertEquals(17, histogram.percentile(0.60));
1:d4e3786:             assertEquals(20, histogram.percentile(0.80));
1:d4e3786:         }
1:5aa19cb:         {
1:5aa19cb:             EstimatedHistogram histogram = new EstimatedHistogram(90, true);
1:5aa19cb:             histogram.add(0);
1:5aa19cb:             histogram.add(0);
1:5aa19cb:             histogram.add(1);
1:5aa19cb: 
1:5aa19cb:             assertEquals(0, histogram.percentile(0.5));
1:5aa19cb:             assertEquals(1, histogram.percentile(0.99));
1:5aa19cb:         }
1:772c4f1:     }
1:f2c38f8: }
============================================================================
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:5aa19cb
/////////////////////////////////////////////////////////////////////////
1:         {
1:             // 0 and 1 map to the same, first bucket
1:             EstimatedHistogram histogram = new EstimatedHistogram();
1:             histogram.add(0);
1:             assertEquals(1, histogram.get(0));
1:             histogram.add(1);
1:             assertEquals(2, histogram.get(0));
1:         }
1:         {
1:             // 0 and 1 map to different buckets
1:             EstimatedHistogram histogram = new EstimatedHistogram(90, true);
1:             histogram.add(0);
1:             assertEquals(1, histogram.get(0));
1:             histogram.add(1);
1:             assertEquals(1, histogram.get(0));
1:             assertEquals(1, histogram.get(1));
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void testMean()
1:     {
1:         {
1:             EstimatedHistogram histogram = new EstimatedHistogram();
1:             for (int i = 0; i < 40; i++)
1:                 histogram.add(0);
1:             for (int i = 0; i < 20; i++)
1:                 histogram.add(1);
1:             for (int i = 0; i < 10; i++)
1:                 histogram.add(2);
1:             assertEquals(70, histogram.count());
1:             assertEquals(2, histogram.mean());
1:         }
1:         {
1:             EstimatedHistogram histogram = new EstimatedHistogram(90, true);
1:             for (int i = 0; i < 40; i++)
1:                 histogram.add(0);
1:             for (int i = 0; i < 20; i++)
1:                 histogram.add(1);
1:             for (int i = 0; i < 10; i++)
1:                 histogram.add(2);
1:             assertEquals(70, histogram.count());
1:             assertEquals(1, histogram.mean());
1:         }
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         {
1:             EstimatedHistogram histogram = new EstimatedHistogram(90, true);
1:             histogram.add(0);
1:             histogram.add(0);
1:             histogram.add(1);
1: 
1:             assertEquals(0, histogram.percentile(0.5));
1:             assertEquals(1, histogram.percentile(0.99));
1:         }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:d4e3786
/////////////////////////////////////////////////////////////////////////
1:         {
1:             EstimatedHistogram histogram = new EstimatedHistogram();
1:             // percentile of empty histogram is 0
1:             assertEquals(0, histogram.percentile(0.99));
1:             histogram.add(1);
1:             // percentile of a histogram with one element should be that element
1:             assertEquals(1, histogram.percentile(0.99));
1:             histogram.add(10);
1:             assertEquals(10, histogram.percentile(0.99));
1:         }
1: 
1:         {
1:             EstimatedHistogram histogram = new EstimatedHistogram();
1: 
1:             histogram.add(1);
1:             histogram.add(2);
1:             histogram.add(3);
1:             histogram.add(4);
1:             histogram.add(5);
1: 
1:             assertEquals(0, histogram.percentile(0.00));
1:             assertEquals(3, histogram.percentile(0.50));
1:             assertEquals(3, histogram.percentile(0.60));
1:             assertEquals(5, histogram.percentile(1.00));
1:         }
1: 
1:         {
1:             EstimatedHistogram histogram = new EstimatedHistogram();
1: 
1:             for (int i = 11; i <= 20; i++)
1:                 histogram.add(i);
1: 
1:             // Right now the histogram looks like:
1:             //    10   12   14   17   20
1:             //     0    2    2    3    3
1:             // %:  0   20   40   70  100
1:             assertEquals(12, histogram.percentile(0.01));
1:             assertEquals(14, histogram.percentile(0.30));
1:             assertEquals(17, histogram.percentile(0.50));
1:             assertEquals(17, histogram.percentile(0.60));
1:             assertEquals(20, histogram.percentile(0.80));
1:         }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:772c4f1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testPercentile()
1:     {
1:         EstimatedHistogram histogram = new EstimatedHistogram();
0:         // percentile of empty histogram is 0
0:         assertEquals(0, histogram.percentile(0.99));
1: 
0:         histogram.add(1);
0:         // percentile of histogram with just one value will return 0 except 100th
0:         assertEquals(0, histogram.percentile(0.99));
0:         assertEquals(1, histogram.percentile(1.00));
1: 
0:         histogram.add(10);
0:         assertEquals(1, histogram.percentile(0.99));
0:         assertEquals(10, histogram.percentile(1.00));
1:     }
commit:5ac1aab
/////////////////////////////////////////////////////////////////////////
1:         histogram.add(23282687);
0:         assertEquals(1, histogram.get(false)[histogram.buckets.length() - 2]);
commit:f2c38f8
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils;
1: 
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.*;
1: 
1: 
1: public class EstimatedHistogramTest
1: {
1:     @Test
1:     public void testFindingCorrectBuckets()
1:     {
1:         EstimatedHistogram histogram = new EstimatedHistogram();
1: 
0:         histogram.add(0L);
0:         assertEquals(1, histogram.get(true)[0]);
1: 
0:         histogram.add(33282687);
0:         assertEquals(1, histogram.get(true)[histogram.buckets.length()-1]);
1: 
0:         histogram.add(1);
0:         assertEquals(1, histogram.get(true)[1]);
1: 
1:         histogram.add(9);
0:         assertEquals(1, histogram.get(true)[8]);
1: 
0:         histogram.add(23);
0:         histogram.add(24);
0:         histogram.add(25);
0:         assertEquals(3, histogram.get(true)[13]);
1:     }
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:09a1dd5
/////////////////////////////////////////////////////////////////////////
1:     public void testSimple()
1:     {
0:         // 0 and 1 map to the same, first bucket
0:         EstimatedHistogram histogram = new EstimatedHistogram();
0:         histogram.add(0);
0:         assertEquals(1, histogram.get(0));
0:         histogram.add(1);
0:         assertEquals(2, histogram.get(0));
1:     }
0: 
1:     @Test
1:     public void testOverflow()
1:     {
1:         EstimatedHistogram histogram = new EstimatedHistogram(1);
1:         histogram.add(100);
1:         assert histogram.isOverflowed();
1:         assertEquals(Long.MAX_VALUE, histogram.max());
1:     }
0: 
1:     @Test
1:     public void testMinMax()
1:     {
0:         EstimatedHistogram histogram = new EstimatedHistogram();
1:         histogram.add(16);
1:         assertEquals(15, histogram.min());
1:         assertEquals(17, histogram.max());
1:     }
0: 
1:     @Test
1:         assert !histogram.isOverflowed();
1:         assertEquals(1, histogram.getBuckets(false)[histogram.buckets.length() - 2]);
1:         assertEquals(1, histogram.getBuckets(false)[8]);
1:         assertEquals(2, histogram.getBuckets(false)[13]);
1:         assertEquals(5021848, histogram.mean());
commit:c00a5c1
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(1, histogram.get(false)[0]);
0:         assertEquals(1, histogram.get(false)[histogram.buckets.length()-1]);
0:         assertEquals(1, histogram.get(false)[1]);
0:         assertEquals(1, histogram.get(false)[8]);
1:         histogram.add(20);
1:         histogram.add(21);
1:         histogram.add(22);
0:         assertEquals(3, histogram.get(false)[13]);
0:         assertEquals(1, histogram.min());
0:         assertEquals(25109160, histogram.max());
0:         assertEquals(20, histogram.median());
============================================================================