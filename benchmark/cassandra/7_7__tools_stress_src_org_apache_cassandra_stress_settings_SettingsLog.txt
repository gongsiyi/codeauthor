1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:89f275c:  *
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:89f275c:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:89f275c:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:89f275c:  *
1:9f14856:  */
1:9f14856: 
1:e4467a0: 
1:e4467a0: import java.io.*;
1:2e1e98a: import java.util.Arrays;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Map;
3:2e1e98a: 
1:f42e235: import org.apache.cassandra.stress.util.MultiResultLogger;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:f42e235: 
1:2e1e98a: public class SettingsLog implements Serializable
1:2e1e98a: {
1:89338a1:     public static enum Level
1:89338a1:     {
1:89338a1:         MINIMAL, NORMAL, VERBOSE
1:89338a1:     }
1:2e1e98a: 
1:2e1e98a:     public final boolean noSummary;
1:938faa2:     public final boolean noSettings;
1:2e1e98a:     public final File file;
1:89f275c:     public final File hdrFile;
1:2e1e98a:     public final int intervalMillis;
1:89338a1:     public final Level level;
1:2e1e98a: 
1:2e1e98a:     public SettingsLog(Options options)
1:2e1e98a:     {
1:938faa2: 
1:2e1e98a:         noSummary = options.noSummmary.setByUser();
1:938faa2:         noSettings = options.noSettings.setByUser();
1:2e1e98a: 
1:2e1e98a:         if (options.outputFile.setByUser())
1:2e1e98a:             file = new File(options.outputFile.value());
1:2e1e98a:         else
1:2e1e98a:             file = null;
1:89f275c:         if (options.hdrOutputFile.setByUser())
1:89f275c:             hdrFile = new File(options.hdrOutputFile.value());
1:89f275c:         else
1:89f275c:             hdrFile = null;
1:2e1e98a:         String interval = options.interval.value();
1:2e1e98a:         if (interval.endsWith("ms"))
1:2e1e98a:             intervalMillis = Integer.parseInt(interval.substring(0, interval.length() - 2));
1:2e1e98a:         else if (interval.endsWith("s"))
1:2e1e98a:             intervalMillis = 1000 * Integer.parseInt(interval.substring(0, interval.length() - 1));
1:2e1e98a:         else
1:2e1e98a:             intervalMillis = 1000 * Integer.parseInt(interval);
1:2e1e98a:         if (intervalMillis <= 0)
1:2e1e98a:             throw new IllegalArgumentException("Log interval must be greater than zero");
1:89338a1:         level = Level.valueOf(options.level.value().toUpperCase());
1:2e1e98a:     }
1:2e1e98a: 
1:f42e235:     public MultiResultLogger getOutput() throws FileNotFoundException
1:2e1e98a:     {
1:e4467a0:         // Always print to stdout regardless of whether we're graphing or not
1:f42e235:         MultiResultLogger stream = new MultiResultLogger(new PrintStream(System.out));
1:e4467a0: 
1:e4467a0:         if (file != null)
1:e4467a0:             stream.addStream(new PrintStream(file));
1:e4467a0: 
1:e4467a0:         return stream;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // Option Declarations
1:2e1e98a: 
1:2e1e98a:     public static final class Options extends GroupedOptions
1:2e1e98a:     {
1:2e1e98a:         final OptionSimple noSummmary = new OptionSimple("no-summary", "", null, "Disable printing of aggregate statistics at the end of a test", false);
1:938faa2:         final OptionSimple noSettings = new OptionSimple("no-settings", "", null, "Disable printing of settings values at start of test", false);
1:2e1e98a:         final OptionSimple outputFile = new OptionSimple("file=", ".*", null, "Log to a file", false);
1:89f275c:         final OptionSimple hdrOutputFile = new OptionSimple("hdrfile=", ".*", null, "Log to a file", false);
1:2e1e98a:         final OptionSimple interval = new OptionSimple("interval=", "[0-9]+(ms|s|)", "1s", "Log progress every <value> seconds or milliseconds", false);
1:89338a1:         final OptionSimple level = new OptionSimple("level=", "(minimal|normal|verbose)", "normal", "Logging level (minimal, normal or verbose)", false);
1:2e1e98a: 
1:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:938faa2:             return Arrays.asList(level, noSummmary, outputFile, hdrOutputFile, interval, noSettings);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // CLI Utility Methods
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.printf("  No Summary: %b%n", noSummary);
1:11aeeea:         out.printf("  No Settings: %b%n", noSettings);
1:938faa2:         out.printf("  File: %s%n", file);
1:938faa2:         out.printf("  Interval Millis: %d%n", intervalMillis);
1:938faa2:         out.printf("  Level: %s%n", level);
1:938faa2:     }
1:938faa2: 
1:2e1e98a: 
1:2e1e98a:     public static SettingsLog get(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         String[] params = clArgs.remove("-log");
1:2e1e98a:         if (params == null)
1:2e1e98a:             return new SettingsLog(new Options());
1:2e1e98a: 
1:2e1e98a:         GroupedOptions options = GroupedOptions.select(params, new Options());
1:2e1e98a:         if (options == null)
1:2e1e98a:         {
1:2e1e98a:             printHelp();
1:2e1e98a:             System.out.println("Invalid -log options provided, see output for valid options");
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a:         return new SettingsLog((Options) options);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static void printHelp()
1:2e1e98a:     {
1:2e1e98a:         GroupedOptions.printOptions(System.out, "-log", new Options());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static Runnable helpPrinter()
1:2e1e98a:     {
1:2e1e98a:         return new Runnable()
1:2e1e98a:         {
1:2e1e98a:             @Override
1:2e1e98a:             public void run()
1:2e1e98a:             {
1:2e1e98a:                 printHelp();
1:2e1e98a:             }
1:2e1e98a:         };
1:2e1e98a:     }
1:2e1e98a: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.MultiResultLogger;
1: import org.apache.cassandra.stress.util.ResultLogger;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public MultiResultLogger getOutput() throws FileNotFoundException
1:         MultiResultLogger stream = new MultiResultLogger(new PrintStream(System.out));
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:11aeeea
/////////////////////////////////////////////////////////////////////////
1:         out.printf("  No Settings: %b%n", noSettings);
commit:938faa2
/////////////////////////////////////////////////////////////////////////
1:     public final boolean noSettings;
/////////////////////////////////////////////////////////////////////////
1: 
1:         noSettings = options.noSettings.setByUser();
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple noSettings = new OptionSimple("no-settings", "", null, "Disable printing of settings values at start of test", false);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(level, noSummmary, outputFile, hdrOutputFile, interval, noSettings);
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.printf("  No Summary: %b%n", noSummary);
0:         out.printf("  Print Setting: %b%n", noSettings);
1:         out.printf("  File: %s%n", file);
1:         out.printf("  Interval Millis: %d%n", intervalMillis);
1:         out.printf("  Level: %s%n", level);
1:     }
1: 
author:nitsanw
-------------------------------------------------------------------------------
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     public final File hdrFile;
/////////////////////////////////////////////////////////////////////////
1:         if (options.hdrOutputFile.setByUser())
1:             hdrFile = new File(options.hdrOutputFile.value());
1:         else
1:             hdrFile = null;
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple hdrOutputFile = new OptionSimple("hdrfile=", ".*", null, "Log to a file", false);
0:             return Arrays.asList(level, noSummmary, outputFile, hdrOutputFile, interval);
author:Ryan McGuire
-------------------------------------------------------------------------------
commit:e4467a0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
1: 
1: import java.io.*;
/////////////////////////////////////////////////////////////////////////
0:     public MultiPrintStream getOutput() throws FileNotFoundException
1:         // Always print to stdout regardless of whether we're graphing or not
0:         MultiPrintStream stream = new MultiPrintStream(new PrintStream(System.out));
1: 
1:         if (file != null)
1:             stream.addStream(new PrintStream(file));
1: 
1:         return stream;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:89338a1
/////////////////////////////////////////////////////////////////////////
1:     public static enum Level
1:     {
1:         MINIMAL, NORMAL, VERBOSE
1:     }
1:     public final Level level;
/////////////////////////////////////////////////////////////////////////
1:         level = Level.valueOf(options.level.value().toUpperCase());
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple level = new OptionSimple("level=", "(minimal|normal|verbose)", "normal", "Logging level (minimal, normal or verbose)", false);
0:             return Arrays.asList(level, noSummmary, outputFile, interval);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.PrintStream;
0: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
1: public class SettingsLog implements Serializable
1: {
1: 
1:     public final boolean noSummary;
1:     public final File file;
1:     public final int intervalMillis;
1: 
1:     public SettingsLog(Options options)
1:     {
1:         noSummary = options.noSummmary.setByUser();
1: 
1:         if (options.outputFile.setByUser())
1:             file = new File(options.outputFile.value());
1:         else
1:             file = null;
1: 
1:         String interval = options.interval.value();
1:         if (interval.endsWith("ms"))
1:             intervalMillis = Integer.parseInt(interval.substring(0, interval.length() - 2));
1:         else if (interval.endsWith("s"))
1:             intervalMillis = 1000 * Integer.parseInt(interval.substring(0, interval.length() - 1));
1:         else
1:             intervalMillis = 1000 * Integer.parseInt(interval);
1:         if (intervalMillis <= 0)
1:             throw new IllegalArgumentException("Log interval must be greater than zero");
1:     }
1: 
0:     public PrintStream getOutput() throws FileNotFoundException
1:     {
0:         return file == null ? new PrintStream(System.out) : new PrintStream(file);
1:     }
1: 
1:     // Option Declarations
1: 
1:     public static final class Options extends GroupedOptions
1:     {
1:         final OptionSimple noSummmary = new OptionSimple("no-summary", "", null, "Disable printing of aggregate statistics at the end of a test", false);
1:         final OptionSimple outputFile = new OptionSimple("file=", ".*", null, "Log to a file", false);
1:         final OptionSimple interval = new OptionSimple("interval=", "[0-9]+(ms|s|)", "1s", "Log progress every <value> seconds or milliseconds", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(noSummmary, outputFile, interval);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     public static SettingsLog get(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-log");
1:         if (params == null)
1:             return new SettingsLog(new Options());
1: 
1:         GroupedOptions options = GroupedOptions.select(params, new Options());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -log options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsLog((Options) options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-log", new Options());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
============================================================================