1:5805a76: /*
1:5805a76:  * Licensed to the Apache Software Foundation (ASF) under one
1:5805a76:  * or more contributor license agreements.  See the NOTICE file
1:5805a76:  * distributed with this work for additional information
1:5805a76:  * regarding copyright ownership.  The ASF licenses this file
1:5805a76:  * to you under the Apache License, Version 2.0 (the
1:5805a76:  * "License"); you may not use this file except in compliance
1:5805a76:  * with the License.  You may obtain a copy of the License at
1:5805a76:  *
1:5805a76:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5805a76:  *
1:5805a76:  * Unless required by applicable law or agreed to in writing, software
1:5805a76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5805a76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5805a76:  * See the License for the specific language governing permissions and
1:5805a76:  * limitations under the License.
1:5805a76:  */
6:5805a76: 
1:5805a76: package org.apache.cassandra.tools.nodetool.stats;
1:5805a76: 
1:5805a76: import java.util.Map;
1:5805a76: 
1:27d25c6: /**
1:27d25c6:  * Interface for the Stats property bag
1:27d25c6:  */
1:27d25c6: public interface StatsHolder
5:5805a76: {
1:27d25c6:     public Map<String, Object> convert2Map();
1:27d25c6: }
============================================================================
author:Hiroyuki Nishi
-------------------------------------------------------------------------------
commit:27d25c6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Interface for the Stats property bag
1:  */
1: public interface StatsHolder
1:     public Map<String, Object> convert2Map();
1: }
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:54cbdd7
/////////////////////////////////////////////////////////////////////////
0:     public final int numberOfTables;
0:     public StatsHolder(int numberOfTables)
0:         this.numberOfTables = numberOfTables;
0:     public Map<String, Object> convert2Map()
0:         HashMap<String, Object> mpRet = new HashMap<>();
0:         mpRet.put("total_number_of_tables", numberOfTables);
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:9b47dd5
/////////////////////////////////////////////////////////////////////////
0:                 mpTable.put("percent_repaired", table.percentRepaired);
author:Shogo Hoshii
-------------------------------------------------------------------------------
commit:5805a76
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.stats;
1: 
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.List;
1: import java.util.Map;
1: 
0: public class StatsHolder
1: {
0:     public List<StatsKeyspace> keyspaces;
1: 
0:     public StatsHolder()
1:     {
0:         keyspaces = new ArrayList<>();
0:     }
1: 
0:     public Map<String, HashMap<String, Object>> convert2Map()
1:     {
0:         HashMap<String, HashMap<String, Object>> mpRet = new HashMap<>();
0:         for (StatsKeyspace keyspace : keyspaces)
1:         {
0:             // store each keyspace's metrics to map
0:             HashMap<String, Object> mpKeyspace = new HashMap<>();
0:             mpKeyspace.put("read_latency", keyspace.readLatency());
0:             mpKeyspace.put("read_count", keyspace.readCount);
0:             mpKeyspace.put("read_latency_ms", keyspace.readLatency());
0:             mpKeyspace.put("write_count", keyspace.writeCount);
0:             mpKeyspace.put("write_latency_ms", keyspace.writeLatency());
0:             mpKeyspace.put("pending_flushes", keyspace.pendingFlushes);
1: 
0:             // store each table's metrics to map
0:             List<StatsTable> tables = keyspace.tables;
0:             Map<String, Map<String, Object>> mpTables = new HashMap<>();
0:             for (StatsTable table : tables)
1:             {
0:                 Map<String, Object> mpTable = new HashMap<>();
1: 
0:                 mpTable.put("sstables_in_each_level", table.sstablesInEachLevel);
0:                 mpTable.put("space_used_live", table.spaceUsedLive);
0:                 mpTable.put("space_used_total", table.spaceUsedTotal);
0:                 mpTable.put("space_used_by_snapshots_total", table.spaceUsedBySnapshotsTotal);
0:                 if (table.offHeapUsed)
0:                     mpTable.put("off_heap_memory_used_total", table.offHeapMemoryUsedTotal);
0:                 mpTable.put("sstable_compression_ratio", table.sstableCompressionRatio);
0:                 mpTable.put("number_of_keys_estimate", table.numberOfKeysEstimate);
0:                 mpTable.put("memtable_cell_count", table.memtableCellCount);
0:                 mpTable.put("memtable_data_size", table.memtableDataSize);
0:                 if (table.memtableOffHeapUsed)
0:                     mpTable.put("memtable_off_heap_memory_used", table.memtableOffHeapMemoryUsed);
0:                 mpTable.put("memtable_switch_count", table.memtableSwitchCount);
0:                 mpTable.put("local_read_count", table.localReadCount);
0:                 mpTable.put("local_read_latency_ms", String.format("%01.3f", table.localReadLatencyMs));
0:                 mpTable.put("local_write_count", table.localWriteCount);
0:                 mpTable.put("local_write_latency_ms", String.format("%01.3f", table.localWriteLatencyMs));
0:                 mpTable.put("pending_flushes", table.pendingFlushes);
0:                 mpTable.put("bloom_filter_false_positives", table.bloomFilterFalsePositives);
0:                 mpTable.put("bloom_filter_false_ratio", String.format("%01.5f", table.bloomFilterFalseRatio));
0:                 mpTable.put("bloom_filter_space_used", table.bloomFilterSpaceUsed);
0:                 if (table.bloomFilterOffHeapUsed)
0:                     mpTable.put("bloom_filter_off_heap_memory_used", table.bloomFilterOffHeapMemoryUsed);
0:                 if (table.indexSummaryOffHeapUsed)
0:                     mpTable.put("index_summary_off_heap_memory_used", table.indexSummaryOffHeapMemoryUsed);
0:                 if (table.compressionMetadataOffHeapUsed)
0:                     mpTable.put("compression_metadata_off_heap_memory_used",
0:                                 table.compressionMetadataOffHeapMemoryUsed);
0:                 mpTable.put("compacted_partition_minimum_bytes", table.compactedPartitionMinimumBytes);
0:                 mpTable.put("compacted_partition_maximum_bytes", table.compactedPartitionMaximumBytes);
0:                 mpTable.put("compacted_partition_mean_bytes", table.compactedPartitionMeanBytes);
0:                 mpTable.put("average_live_cells_per_slice_last_five_minutes",
0:                             table.averageLiveCellsPerSliceLastFiveMinutes);
0:                 mpTable.put("maximum_live_cells_per_slice_last_five_minutes",
0:                             table.maximumLiveCellsPerSliceLastFiveMinutes);
0:                 mpTable.put("average_tombstones_per_slice_last_five_minutes",
0:                             table.averageTombstonesPerSliceLastFiveMinutes);
0:                 mpTable.put("maximum_tombstones_per_slice_last_five_minutes",
0:                             table.maximumTombstonesPerSliceLastFiveMinutes);
0:                 mpTable.put("dropped_mutations", table.droppedMutations);
1: 
0:                 mpTables.put(table.name, mpTable);
0:             }
0:             mpKeyspace.put("tables", mpTables);
0:             mpRet.put(keyspace.name, mpKeyspace);
0:         }
0:         return mpRet;
0:     }
0: }
============================================================================