1:21aef92: /*
1:21aef92:  * Licensed to the Apache Software Foundation (ASF) under one
1:21aef92:  * or more contributor license agreements.  See the NOTICE file
1:21aef92:  * distributed with this work for additional information
1:21aef92:  * regarding copyright ownership.  The ASF licenses this file
1:21aef92:  * to you under the Apache License, Version 2.0 (the
1:21aef92:  * "License"); you may not use this file except in compliance
1:21aef92:  * with the License.  You may obtain a copy of the License at
1:21aef92:  *
1:21aef92:  *     http://www.apache.org/licenses/LICENSE-2.0
1:21aef92:  *
1:21aef92:  * Unless required by applicable law or agreed to in writing, software
1:21aef92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21aef92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21aef92:  * See the License for the specific language governing permissions and
1:21aef92:  * limitations under the License.
1:21aef92:  */
1:21aef92: package org.apache.cassandra.streaming.compress;
1:21aef92: 
1:5151169: import java.io.EOFException;
1:5151169: import java.io.IOException;
1:5151169: import java.io.InputStream;
1:21aef92: import java.util.Iterator;
1:5151169: import java.util.concurrent.ArrayBlockingQueue;
1:5151169: import java.util.concurrent.BlockingQueue;
1:028880e: import java.util.concurrent.ThreadLocalRandom;
1:e25453b: import java.util.function.Supplier;
1:21aef92: 
1:21aef92: import com.google.common.collect.Iterators;
1:21aef92: import com.google.common.primitives.Ints;
1:582bdba: import org.slf4j.Logger;
1:582bdba: import org.slf4j.LoggerFactory;
1:21aef92: 
1:1e92ce4: import io.netty.util.concurrent.FastThreadLocalThread;
1:21aef92: import org.apache.cassandra.io.compress.CompressionMetadata;
1:5baf28d: import org.apache.cassandra.utils.ChecksumType;
1:21aef92: import org.apache.cassandra.utils.WrappedRunnable;
1:21aef92: 
1:21aef92: /**
1:21aef92:  * InputStream which reads data from underlining source with given {@link CompressionInfo}.
1:21aef92:  */
1:21aef92: public class CompressedInputStream extends InputStream
1:21aef92: {
1:582bdba: 
1:582bdba:     private static final Logger logger = LoggerFactory.getLogger(CompressedInputStream.class);
1:582bdba: 
1:21aef92:     private final CompressionInfo info;
1:21aef92:     // chunk buffer
1:21aef92:     private final BlockingQueue<byte[]> dataBuffer;
1:e25453b:     private final Supplier<Double> crcCheckChanceSupplier;
1:21aef92: 
1:21aef92:     // uncompressed bytes
1:8b9a916:     private final byte[] buffer;
1:21aef92: 
1:21aef92:     // offset from the beginning of the buffer
1:21aef92:     protected long bufferOffset = 0;
1:21aef92:     // current position in stream
1:21aef92:     private long current = 0;
1:21aef92:     // number of bytes in the buffer that are actually valid
1:21aef92:     protected int validBufferBytes = -1;
1:21aef92: 
1:30bb255:     private final ChecksumType checksumType;
1:21aef92: 
1:21aef92:     // raw checksum bytes
1:21aef92:     private final byte[] checksumBytes = new byte[4];
1:21aef92: 
1:21aef92:     /**
1:76e3100:      * Indicates there was a problem when reading from source stream.
1:76e3100:      * When this is added to the <code>dataBuffer</code> by the stream Reader,
1:76e3100:      * it is expected that the <code>readException</code> variable is populated
1:76e3100:      * with the cause of the error when reading from source stream, so it is
1:76e3100:      * thrown to the consumer on subsequent read operation.
1:76e3100:      */
1:76adf0e:     private static final byte[] POISON_PILL = new byte[0];
1:21aef92: 
1:76e3100:     protected volatile IOException readException = null;
1:76e3100: 
1:a548f05:     private long totalCompressedBytesRead;
1:582bdba: 
1:76e3100:     /**
1:21aef92:      * @param source Input source to read compressed data from
1:21aef92:      * @param info Compression info
1:21aef92:      */
1:e25453b:     public CompressedInputStream(InputStream source, CompressionInfo info, ChecksumType checksumType, Supplier<Double> crcCheckChanceSupplier)
1:21aef92:     {
1:21aef92:         this.info = info;
1:21aef92:         this.buffer = new byte[info.parameters.chunkLength()];
1:21aef92:         // buffer is limited to store up to 1024 chunks
1:8b9a916:         this.dataBuffer = new ArrayBlockingQueue<>(Math.min(info.chunks.length, 1024));
1:e25453b:         this.crcCheckChanceSupplier = crcCheckChanceSupplier;
1:30bb255:         this.checksumType = checksumType;
1:21aef92: 
1:1e92ce4:         new FastThreadLocalThread(new Reader(source, info, dataBuffer)).start();
1:21aef92:     }
1:21aef92: 
1:1e92ce4:     private void decompressNextChunk() throws IOException
1:21aef92:     {
1:76e3100:         if (readException != null)
1:76e3100:             throw readException;
1:76e3100: 
1:21aef92:         try
1:21aef92:         {
1:1e92ce4:             byte[] compressedWithCRC = dataBuffer.take();
1:1e92ce4:             if (compressedWithCRC == POISON_PILL)
1:21aef92:             {
1:76e3100:                 assert readException != null;
1:76e3100:                 throw readException;
1:21aef92:             }
1:1e92ce4:             decompress(compressedWithCRC);
1:1e92ce4:         }
1:21aef92:         catch (InterruptedException e)
1:21aef92:         {
1:21aef92:             throw new EOFException("No chunk available");
1:21aef92:         }
1:21aef92:     }
2:1e92ce4: 
1:1e92ce4:     @Override
1:21aef92:     public int read() throws IOException
1:1e92ce4:     {
1:21aef92:         if (current >= bufferOffset + buffer.length || validBufferBytes == -1)
1:1e92ce4:             decompressNextChunk();
1:21aef92: 
1:21aef92:         assert current >= bufferOffset && current < bufferOffset + validBufferBytes;
1:21aef92: 
1:21aef92:         return ((int) buffer[(int) (current++ - bufferOffset)]) & 0xff;
1:21aef92:     }
1:21aef92: 
1:1e92ce4:     @Override
1:1e92ce4:     public int read(byte[] b, int off, int len) throws IOException
1:21aef92:     {
1:1e92ce4:         long nextCurrent = current + len;
1:21aef92: 
1:1e92ce4:         if (current >= bufferOffset + buffer.length || validBufferBytes == -1)
1:1e92ce4:             decompressNextChunk();
1:1e92ce4: 
1:1e92ce4:         assert nextCurrent >= bufferOffset;
1:1e92ce4: 
1:1e92ce4:         int read = 0;
1:1e92ce4:         while (read < len)
1:76e3100:         {
1:1e92ce4:             int nextLen = Math.min((len - read), (int)((bufferOffset + validBufferBytes) - current));
1:1e92ce4: 
1:1e92ce4:             System.arraycopy(buffer, (int)(current - bufferOffset), b, off + read, nextLen);
1:1e92ce4:             read += nextLen;
1:1e92ce4: 
1:1e92ce4:             current += nextLen;
1:1e92ce4:             if (read != len)
1:1e92ce4:                 decompressNextChunk();
1:76e3100:         }
1:1e92ce4: 
1:1e92ce4:         return len;
1:1e92ce4:     }
1:1e92ce4: 
1:debb15e:     public void position(long position)
1:1e92ce4:     {
1:21aef92:         assert position >= current : "stream can only read forward.";
1:21aef92:         current = position;
1:21aef92:     }
1:21aef92: 
1:21aef92:     private void decompress(byte[] compressed) throws IOException
1:21aef92:     {
1:21aef92:         // uncompress
1:056115f:         validBufferBytes = info.parameters.getSstableCompressor().uncompress(compressed, 0, compressed.length - checksumBytes.length, buffer, 0);
1:a548f05:         totalCompressedBytesRead += compressed.length;
1:21aef92: 
1:21aef92:         // validate crc randomly
1:e25453b:         if (this.crcCheckChanceSupplier.get() > ThreadLocalRandom.current().nextDouble())
1:21aef92:         {
1:30bb255:             int checksum = (int) checksumType.of(compressed, 0, compressed.length - checksumBytes.length);
1:21aef92: 
1:21aef92:             System.arraycopy(compressed, compressed.length - checksumBytes.length, checksumBytes, 0, checksumBytes.length);
1:30bb255:             if (Ints.fromByteArray(checksumBytes) != checksum)
1:21aef92:                 throw new IOException("CRC unmatched");
1:21aef92:         }
1:21aef92: 
1:21aef92:         // buffer offset is always aligned
1:21aef92:         bufferOffset = current & ~(buffer.length - 1);
1:21aef92:     }
1:21aef92: 
1:a548f05:     public long getTotalCompressedBytesRead()
1:21aef92:     {
1:a548f05:         return totalCompressedBytesRead;
1:21aef92:     }
1:21aef92: 
1:76e3100:     class Reader extends WrappedRunnable
1:21aef92:     {
1:21aef92:         private final InputStream source;
1:21aef92:         private final Iterator<CompressionMetadata.Chunk> chunks;
1:21aef92:         private final BlockingQueue<byte[]> dataBuffer;
1:21aef92: 
1:21aef92:         Reader(InputStream source, CompressionInfo info, BlockingQueue<byte[]> dataBuffer)
1:21aef92:         {
1:21aef92:             this.source = source;
1:21aef92:             this.chunks = Iterators.forArray(info.chunks);
1:21aef92:             this.dataBuffer = dataBuffer;
1:21aef92:         }
1:21aef92: 
1:21aef92:         protected void runMayThrow() throws Exception
1:21aef92:         {
1:21aef92:             byte[] compressedWithCRC;
1:21aef92:             while (chunks.hasNext())
1:21aef92:             {
1:21aef92:                 CompressionMetadata.Chunk chunk = chunks.next();
1:21aef92: 
1:21aef92:                 int readLength = chunk.length + 4; // read with CRC
1:21aef92:                 compressedWithCRC = new byte[readLength];
1:21aef92: 
1:21aef92:                 int bufferRead = 0;
1:21aef92:                 while (bufferRead < readLength)
1:1e92ce4:                 {
1:1e92ce4:                     try
1:1e92ce4:                     {
1:582bdba:                         int r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);
1:8b9a916:                         if (r < 0)
1:1e92ce4:                         {
1:76e3100:                             readException = new EOFException("No chunk available");
1:8b9a916:                             dataBuffer.put(POISON_PILL);
1:8b9a916:                             return; // throw exception where we consume dataBuffer
1:21aef92:                         }
1:582bdba:                         bufferRead += r;
1:1e92ce4:                     }
1:8b9a916:                     catch (IOException e)
6:8b9a916:                     {
1:582bdba:                         logger.warn("Error while reading compressed input stream.", e);
1:76e3100:                         readException = e;
1:76adf0e:                         dataBuffer.put(POISON_PILL);
1:582bdba:                         return; // throw exception where we consume dataBuffer
1:1e92ce4:                     }
1:1e92ce4:                 }
1:21aef92:                 dataBuffer.put(compressedWithCRC);
1:21aef92:             }
1:21aef92:         }
1:21aef92:     }
6:8b9a916: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:8458e4e
commit:62ef861
commit:0f995a2
commit:0b3cfae
commit:056055f
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.BlockingQueue;
commit:a548f05
/////////////////////////////////////////////////////////////////////////
1:     private long totalCompressedBytesRead;
/////////////////////////////////////////////////////////////////////////
1:         totalCompressedBytesRead += compressed.length;
/////////////////////////////////////////////////////////////////////////
1:     public long getTotalCompressedBytesRead()
1:         return totalCompressedBytesRead;
commit:21aef92
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.compress;
1: 
0: import java.io.*;
1: import java.util.Iterator;
0: import java.util.concurrent.*;
0: import java.util.zip.CRC32;
0: import java.util.zip.Checksum;
1: 
1: import com.google.common.collect.Iterators;
1: import com.google.common.primitives.Ints;
1: 
1: import org.apache.cassandra.io.compress.CompressionMetadata;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.WrappedRunnable;
1: 
1: /**
1:  * InputStream which reads data from underlining source with given {@link CompressionInfo}.
1:  */
1: public class CompressedInputStream extends InputStream
1: {
1:     private final CompressionInfo info;
1:     // chunk buffer
1:     private final BlockingQueue<byte[]> dataBuffer;
1: 
1:     // uncompressed bytes
0:     private byte[] buffer;
1: 
1:     // offset from the beginning of the buffer
1:     protected long bufferOffset = 0;
1:     // current position in stream
1:     private long current = 0;
1:     // number of bytes in the buffer that are actually valid
1:     protected int validBufferBytes = -1;
1: 
0:     private final Checksum checksum = new CRC32();
1: 
1:     // raw checksum bytes
1:     private final byte[] checksumBytes = new byte[4];
1: 
0:     private long uncompressedBytes;
1: 
1:     /**
1:      * @param source Input source to read compressed data from
1:      * @param info Compression info
1:      */
0:     public CompressedInputStream(InputStream source, CompressionInfo info)
1:     {
1:         this.info = info;
1:         this.buffer = new byte[info.parameters.chunkLength()];
1:         // buffer is limited to store up to 1024 chunks
0:         this.dataBuffer = new ArrayBlockingQueue<byte[]>(Math.min(info.chunks.length, 1024));
1: 
0:         new Thread(new Reader(source, info, dataBuffer)).start();
1:     }
1: 
1:     public int read() throws IOException
1:     {
1:         if (current >= bufferOffset + buffer.length || validBufferBytes == -1)
1:         {
1:             try
1:             {
0:                 decompress(dataBuffer.take());
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 throw new EOFException("No chunk available");
1:             }
1:         }
1: 
1:         assert current >= bufferOffset && current < bufferOffset + validBufferBytes;
1: 
1:         return ((int) buffer[(int) (current++ - bufferOffset)]) & 0xff;
1:     }
1: 
0:     public void position(long position) throws IOException
1:     {
1:         assert position >= current : "stream can only read forward.";
1:         current = position;
1:     }
1: 
1:     private void decompress(byte[] compressed) throws IOException
1:     {
1:         // uncompress
0:         validBufferBytes = info.parameters.sstableCompressor.uncompress(compressed, 0, compressed.length - checksumBytes.length, buffer, 0);
0:         uncompressedBytes += validBufferBytes;
1: 
1:         // validate crc randomly
0:         if (info.parameters.crcChance > FBUtilities.threadLocalRandom().nextDouble())
1:         {
0:             checksum.update(buffer, 0, validBufferBytes);
1: 
1:             System.arraycopy(compressed, compressed.length - checksumBytes.length, checksumBytes, 0, checksumBytes.length);
0:             if (Ints.fromByteArray(checksumBytes) != (int) checksum.getValue())
1:                 throw new IOException("CRC unmatched");
1: 
0:             // reset checksum object back to the original (blank) state
0:             checksum.reset();
1:         }
1: 
1:         // buffer offset is always aligned
1:         bufferOffset = current & ~(buffer.length - 1);
1:     }
1: 
0:     public long uncompressedBytes()
1:     {
0:         return uncompressedBytes;
1:     }
1: 
0:     static class Reader extends WrappedRunnable
1:     {
1:         private final InputStream source;
1:         private final Iterator<CompressionMetadata.Chunk> chunks;
1:         private final BlockingQueue<byte[]> dataBuffer;
1: 
1:         Reader(InputStream source, CompressionInfo info, BlockingQueue<byte[]> dataBuffer)
1:         {
1:             this.source = source;
1:             this.chunks = Iterators.forArray(info.chunks);
1:             this.dataBuffer = dataBuffer;
1:         }
1: 
1:         protected void runMayThrow() throws Exception
1:         {
1:             byte[] compressedWithCRC;
1:             while (chunks.hasNext())
1:             {
1:                 CompressionMetadata.Chunk chunk = chunks.next();
1: 
1:                 int readLength = chunk.length + 4; // read with CRC
1:                 compressedWithCRC = new byte[readLength];
1: 
1:                 int bufferRead = 0;
1:                 while (bufferRead < readLength)
0:                     bufferRead += source.read(compressedWithCRC, bufferRead, readLength - bufferRead);
1:                 dataBuffer.put(compressedWithCRC);
1:             }
1:         }
1:     }
1: }
author:Paulo Motta
-------------------------------------------------------------------------------
commit:76e3100
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Indicates there was a problem when reading from source stream.
1:      * When this is added to the <code>dataBuffer</code> by the stream Reader,
1:      * it is expected that the <code>readException</code> variable is populated
1:      * with the cause of the error when reading from source stream, so it is
1:      * thrown to the consumer on subsequent read operation.
1:      */
1:     protected volatile IOException readException = null;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (readException != null)
1:             throw readException;
1: 
1:                 {
1:                     assert readException != null;
1:                     throw readException;
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     class Reader extends WrappedRunnable
/////////////////////////////////////////////////////////////////////////
1:                             readException = new EOFException("No chunk available");
/////////////////////////////////////////////////////////////////////////
1:                         readException = e;
commit:582bdba
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static final Logger logger = LoggerFactory.getLogger(CompressedInputStream.class);
1: 
0:     private byte[] buffer;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         this.dataBuffer = new ArrayBlockingQueue<byte[]>(Math.min(info.chunks.length, 1024));
0:         new Thread(new Reader(source, info, dataBuffer)).start();
/////////////////////////////////////////////////////////////////////////
0:     static class Reader extends WrappedRunnable
/////////////////////////////////////////////////////////////////////////
0:             while (chunks.hasNext())
/////////////////////////////////////////////////////////////////////////
1:                         int r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);
1:                         bufferRead += r;
1:                         logger.warn("Error while reading compressed input stream.", e);
1:                         return; // throw exception where we consume dataBuffer
commit:e25453b
/////////////////////////////////////////////////////////////////////////
1: import java.util.function.Supplier;
/////////////////////////////////////////////////////////////////////////
1:     private final Supplier<Double> crcCheckChanceSupplier;
/////////////////////////////////////////////////////////////////////////
1:     public CompressedInputStream(InputStream source, CompressionInfo info, ChecksumType checksumType, Supplier<Double> crcCheckChanceSupplier)
1:         this.crcCheckChanceSupplier = crcCheckChanceSupplier;
/////////////////////////////////////////////////////////////////////////
1:         if (this.crcCheckChanceSupplier.get() > ThreadLocalRandom.current().nextDouble())
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.concurrent.FastThreadLocalThread;
/////////////////////////////////////////////////////////////////////////
1:         new FastThreadLocalThread(new Reader(source, info, dataBuffer)).start();
1:     private void decompressNextChunk() throws IOException
1:     {
1:         try
1:         {
1:             byte[] compressedWithCRC = dataBuffer.take();
1:             if (compressedWithCRC == POISON_PILL)
0:                 throw new EOFException("No chunk available");
1:             decompress(compressedWithCRC);
1:         }
0:         catch (InterruptedException e)
1:         {
0:             throw new EOFException("No chunk available");
1:         }
1:     }
1: 
1:     @Override
1:             decompressNextChunk();
1:     @Override
1:     public int read(byte[] b, int off, int len) throws IOException
1:     {
1:         long nextCurrent = current + len;
1: 
1:         if (current >= bufferOffset + buffer.length || validBufferBytes == -1)
1:             decompressNextChunk();
1: 
1:         assert nextCurrent >= bufferOffset;
1: 
1:         int read = 0;
1:         while (read < len)
1:         {
1:             int nextLen = Math.min((len - read), (int)((bufferOffset + validBufferBytes) - current));
1: 
1:             System.arraycopy(buffer, (int)(current - bufferOffset), b, off + read, nextLen);
1:             read += nextLen;
1: 
1:             current += nextLen;
1:             if (read != len)
1:                 decompressNextChunk();
1:         }
1: 
1:         return len;
1:     }
1: 
commit:895ec3e
/////////////////////////////////////////////////////////////////////////
0:     public CompressedInputStream(InputStream source, CompressionInfo info)
0:         this.checksum =  new Adler32();
/////////////////////////////////////////////////////////////////////////
0:             checksum.update(compressed, 0, compressed.length - checksumBytes.length);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1:     private final ChecksumType checksumType;
/////////////////////////////////////////////////////////////////////////
1:         this.checksumType = checksumType;
/////////////////////////////////////////////////////////////////////////
1:             int checksum = (int) checksumType.of(compressed, 0, compressed.length - checksumBytes.length);
1:             if (Ints.fromByteArray(checksumBytes) != checksum)
author:Chris Moos
-------------------------------------------------------------------------------
commit:8b9a916
/////////////////////////////////////////////////////////////////////////
1:     private final byte[] buffer;
/////////////////////////////////////////////////////////////////////////
0:     private Thread readerThread;
0: 
/////////////////////////////////////////////////////////////////////////
1:         this.dataBuffer = new ArrayBlockingQueue<>(Math.min(info.chunks.length, 1024));
0:         readerThread = new Thread(new Reader(source, info, dataBuffer));
0:         readerThread.start();
/////////////////////////////////////////////////////////////////////////
0:     class Reader extends WrappedRunnable
/////////////////////////////////////////////////////////////////////////
0:             while (!Thread.currentThread().isInterrupted() && chunks.hasNext())
/////////////////////////////////////////////////////////////////////////
0:                     int r;
0:                     try
1:                     {
0:                         r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);
1:                         if (r < 0)
1:                         {
1:                             dataBuffer.put(POISON_PILL);
1:                             return; // throw exception where we consume dataBuffer
1:                         }
1:                     }
1:                     catch (IOException e)
0:                         throw e;
0:             synchronized(CompressedInputStream.this)
1:             {
0:                 readerThread = null;
1:             }
0: 
0:     @Override
0:     public void close() throws IOException
1:     {
0:         synchronized(this)
1:         {
0:             if (readerThread != null)
1:             {
0:                 readerThread.interrupt();
0:                 readerThread = null;
1:             }
1:         }
1:     }
0: 
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:5baf28d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ChecksumType;
/////////////////////////////////////////////////////////////////////////
0:     public CompressedInputStream(InputStream source, CompressionInfo info, ChecksumType checksumType)
0:         this.checksum =  checksumType.newInstance();
author:blerer
-------------------------------------------------------------------------------
commit:056115f
/////////////////////////////////////////////////////////////////////////
1:         validBufferBytes = info.parameters.getSstableCompressor().uncompress(compressed, 0, compressed.length - checksumBytes.length, buffer, 0);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:028880e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadLocalRandom;
/////////////////////////////////////////////////////////////////////////
0:         if (info.parameters.getCrcCheckChance() > ThreadLocalRandom.current().nextDouble())
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:76adf0e
/////////////////////////////////////////////////////////////////////////
1:     private static final byte[] POISON_PILL = new byte[0];
0: 
/////////////////////////////////////////////////////////////////////////
0:                 byte[] compressedWithCRC = dataBuffer.take();
0:                 if (compressedWithCRC == POISON_PILL)
0:                     throw new EOFException("No chunk available");
0:                 decompress(compressedWithCRC);
/////////////////////////////////////////////////////////////////////////
0:                 {
0:                     int r = source.read(compressedWithCRC, bufferRead, readLength - bufferRead);
0:                     if (r < 0)
0:                     {
1:                         dataBuffer.put(POISON_PILL);
0:                         return; // throw exception where we consume dataBuffer
0:                     }
0:                     bufferRead += r;
0:                 }
author:Jake Luciani
-------------------------------------------------------------------------------
commit:815b238
/////////////////////////////////////////////////////////////////////////
0: import java.util.zip.Adler32;
/////////////////////////////////////////////////////////////////////////
0:     private final Checksum checksum;
0:     private final boolean hasPostCompressionAdlerChecksums;
0:     public CompressedInputStream(InputStream source, CompressionInfo info, boolean hasPostCompressionAdlerChecksums)
0:         this.checksum = hasPostCompressionAdlerChecksums ? new Adler32() : new CRC32();
0:         this.hasPostCompressionAdlerChecksums = hasPostCompressionAdlerChecksums;
/////////////////////////////////////////////////////////////////////////
0:             if (hasPostCompressionAdlerChecksums)
0:             {
0:                 checksum.update(compressed, 0, compressed.length - checksumBytes.length);
0:             }
0:             else
0:             {
0:                 checksum.update(buffer, 0, validBufferBytes);
0:             }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:620a4b7
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:debb15e
/////////////////////////////////////////////////////////////////////////
1:     public void position(long position)
============================================================================