1:8b0e186: package org.apache.cassandra.service.paxos;
1:60bf7a5: /*
1:03f72ac:  *
1:60bf7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf7a5:  * or more contributor license agreements.  See the NOTICE file
1:60bf7a5:  * distributed with this work for additional information
1:60bf7a5:  * regarding copyright ownership.  The ASF licenses this file
1:60bf7a5:  * to you under the Apache License, Version 2.0 (the
1:60bf7a5:  * "License"); you may not use this file except in compliance
1:60bf7a5:  * with the License.  You may obtain a copy of the License at
1:03f72ac:  *
1:60bf7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:03f72ac:  *
1:60bf7a5:  * Unless required by applicable law or agreed to in writing,
1:60bf7a5:  * software distributed under the License is distributed on an
1:60bf7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60bf7a5:  * KIND, either express or implied.  See the License for the
1:60bf7a5:  * specific language governing permissions and limitations
1:60bf7a5:  * under the License.
1:03f72ac:  *
1:60bf7a5:  */
1:60bf7a5: 
1:8b0e186: 
1:8b0e186: import java.io.IOException;
1:a991b64: import java.util.UUID;
1:8b0e186: 
1:a991b64: import org.apache.cassandra.db.TypeSizes;
1:a991b64: import org.apache.cassandra.db.rows.SerializationHelper;
1:a991b64: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:8b0e186: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: import org.apache.cassandra.net.MessagingService;
1:8b0e186: import org.apache.cassandra.utils.UUIDSerializer;
1:8b0e186: 
1:8b0e186: public class PrepareResponse
1:8b0e186: {
1:8b0e186:     public static final PrepareResponseSerializer serializer = new PrepareResponseSerializer();
1:8b0e186: 
1:8b0e186:     public final boolean promised;
1:bab28e4: 
1:bab28e4:     /*
1:bab28e4:      * To maintain backward compatibility (see #6023), the meaning of inProgressCommit is a bit tricky.
1:bab28e4:      * If promised is true, then that's the last accepted commit. If promise is false, that's just
1:bab28e4:      * the previously promised ballot that made us refuse this one.
1:bab28e4:      */
1:8b0e186:     public final Commit inProgressCommit;
1:8b0e186:     public final Commit mostRecentCommit;
1:8b0e186: 
1:8b0e186:     public PrepareResponse(boolean promised, Commit inProgressCommit, Commit mostRecentCommit)
1:8b0e186:     {
1:a991b64:         assert inProgressCommit.update.partitionKey().equals(mostRecentCommit.update.partitionKey());
1:8b0e186:         assert inProgressCommit.update.metadata() == mostRecentCommit.update.metadata();
1:8b0e186: 
1:8b0e186:         this.promised = promised;
1:8b0e186:         this.mostRecentCommit = mostRecentCommit;
1:8b0e186:         this.inProgressCommit = inProgressCommit;
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     @Override
1:8b0e186:     public String toString()
1:8b0e186:     {
1:8b0e186:         return String.format("PrepareResponse(%s, %s, %s)", promised, mostRecentCommit, inProgressCommit);
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public static class PrepareResponseSerializer implements IVersionedSerializer<PrepareResponse>
1:8b0e186:     {
1:75508ec:         public void serialize(PrepareResponse response, DataOutputPlus out, int version) throws IOException
1:8b0e186:         {
1:8b0e186:             out.writeBoolean(response.promised);
1:a991b64:             Commit.serializer.serialize(response.inProgressCommit, out, version);
1:a991b64: 
1:a991b64:             if (version < MessagingService.VERSION_30)
1:a991b64:             {
1:a991b64:                 UUIDSerializer.serializer.serialize(response.mostRecentCommit.ballot, out, version);
1:a991b64:                 PartitionUpdate.serializer.serialize(response.mostRecentCommit.update, out, version);
1:a991b64:             }
1:a991b64:             else
1:a991b64:             {
1:a991b64:                 Commit.serializer.serialize(response.mostRecentCommit, out, version);
1:a991b64:             }
1:8b0e186:         }
1:8b0e186: 
1:03f72ac:         public PrepareResponse deserialize(DataInputPlus in, int version) throws IOException
1:8b0e186:         {
1:8b0e186:             boolean success = in.readBoolean();
1:a991b64:             Commit inProgress = Commit.serializer.deserialize(in, version);
1:a991b64:             Commit mostRecent;
1:a991b64:             if (version < MessagingService.VERSION_30)
1:a991b64:             {
1:a991b64:                 UUID ballot = UUIDSerializer.serializer.deserialize(in, version);
1:a991b64:                 PartitionUpdate update = PartitionUpdate.serializer.deserialize(in, version, SerializationHelper.Flag.LOCAL, inProgress.update.partitionKey());
1:a991b64:                 mostRecent = new Commit(ballot, update);
1:a991b64:             }
1:a991b64:             else
1:a991b64:             {
1:a991b64:                 mostRecent = Commit.serializer.deserialize(in, version);
1:a991b64:             }
1:a991b64:             return new PrepareResponse(success, inProgress, mostRecent);
1:8b0e186:         }
1:8b0e186: 
1:8b0e186:         public long serializedSize(PrepareResponse response, int version)
1:8b0e186:         {
1:03f72ac:             long size = TypeSizes.sizeof(response.promised)
1:a991b64:                       + Commit.serializer.serializedSize(response.inProgressCommit, version);
1:a991b64: 
1:a991b64:             if (version < MessagingService.VERSION_30)
1:a991b64:             {
1:a991b64:                 size += UUIDSerializer.serializer.serializedSize(response.mostRecentCommit.ballot, version);
1:03f72ac:                 size += PartitionUpdate.serializer.serializedSize(response.mostRecentCommit.update, version);
1:a991b64:             }
1:a991b64:             else
1:a991b64:             {
1:a991b64:                 size += Commit.serializer.serializedSize(response.mostRecentCommit, version);
1:a991b64:             }
1:a991b64:             return size;
1:8b0e186:         }
1:8b0e186:     }
1:8b0e186: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public PrepareResponse deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:             long size = TypeSizes.sizeof(response.promised)
1:                 size += PartitionUpdate.serializer.serializedSize(response.mostRecentCommit.update, version);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.db.rows.SerializationHelper;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:         assert inProgressCommit.update.partitionKey().equals(mostRecentCommit.update.partitionKey());
/////////////////////////////////////////////////////////////////////////
1:             Commit.serializer.serialize(response.inProgressCommit, out, version);
1: 
1:             if (version < MessagingService.VERSION_30)
1:             {
1:                 UUIDSerializer.serializer.serialize(response.mostRecentCommit.ballot, out, version);
1:                 PartitionUpdate.serializer.serialize(response.mostRecentCommit.update, out, version);
1:             }
1:             else
1:             {
1:                 Commit.serializer.serialize(response.mostRecentCommit, out, version);
1:             }
1:             Commit inProgress = Commit.serializer.deserialize(in, version);
1:             Commit mostRecent;
1:             if (version < MessagingService.VERSION_30)
1:             {
1:                 UUID ballot = UUIDSerializer.serializer.deserialize(in, version);
1:                 PartitionUpdate update = PartitionUpdate.serializer.deserialize(in, version, SerializationHelper.Flag.LOCAL, inProgress.update.partitionKey());
1:                 mostRecent = new Commit(ballot, update);
1:             }
1:             else
1:             {
1:                 mostRecent = Commit.serializer.deserialize(in, version);
1:             }
1:             return new PrepareResponse(success, inProgress, mostRecent);
0:             TypeSizes sizes = TypeSizes.NATIVE;
0:             long size = sizes.sizeof(response.promised)
1:                       + Commit.serializer.serializedSize(response.inProgressCommit, version);
1: 
1:             if (version < MessagingService.VERSION_30)
1:             {
1:                 size += UUIDSerializer.serializer.serializedSize(response.mostRecentCommit.ballot, version);
0:                 size += PartitionUpdate.serializer.serializedSize(response.mostRecentCommit.update, version, sizes);
1:             }
1:             else
1:             {
1:                 size += Commit.serializer.serializedSize(response.mostRecentCommit, version);
1:             }
1:             return size;
commit:bab28e4
/////////////////////////////////////////////////////////////////////////
1: 
1:     /*
1:      * To maintain backward compatibility (see #6023), the meaning of inProgressCommit is a bit tricky.
1:      * If promised is true, then that's the last accepted commit. If promise is false, that's just
1:      * the previously promised ballot that made us refuse this one.
1:      */
commit:b7a016d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ColumnSerializer;
0: import org.apache.cassandra.db.UnsortedColumns;
/////////////////////////////////////////////////////////////////////////
0:                                                   ColumnFamily.serializer.deserialize(in, UnsortedColumns.factory, ColumnSerializer.Flag.LOCAL, version)),
0:                                                   ColumnFamily.serializer.deserialize(in, UnsortedColumns.factory, ColumnSerializer.Flag.LOCAL, version)));
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(PrepareResponse response, DataOutputPlus out, int version) throws IOException
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:8125047
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ArrayBackedSortedColumns;
/////////////////////////////////////////////////////////////////////////
0:                                                   ColumnFamily.serializer.deserialize(in,
0:                                                                                       ArrayBackedSortedColumns.factory,
0:                                                                                       ColumnSerializer.Flag.LOCAL, version)),
0:                                                   ColumnFamily.serializer.deserialize(in,
0:                                                                                       ArrayBackedSortedColumns.factory,
0:                                                                                       ColumnSerializer.Flag.LOCAL, version)));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60bf7a5
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
commit:8b0e186
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.service.paxos;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.db.ColumnFamily;
1: import org.apache.cassandra.io.IVersionedSerializer;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: public class PrepareResponse
1: {
1:     public static final PrepareResponseSerializer serializer = new PrepareResponseSerializer();
1: 
1:     public final boolean promised;
1:     public final Commit inProgressCommit;
1:     public final Commit mostRecentCommit;
1: 
1:     public PrepareResponse(boolean promised, Commit inProgressCommit, Commit mostRecentCommit)
1:     {
0:         assert inProgressCommit.key == mostRecentCommit.key;
1:         assert inProgressCommit.update.metadata() == mostRecentCommit.update.metadata();
1: 
1:         this.promised = promised;
1:         this.mostRecentCommit = mostRecentCommit;
1:         this.inProgressCommit = inProgressCommit;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("PrepareResponse(%s, %s, %s)", promised, mostRecentCommit, inProgressCommit);
1:     }
1: 
1:     public static class PrepareResponseSerializer implements IVersionedSerializer<PrepareResponse>
1:     {
0:         public void serialize(PrepareResponse response, DataOutput out, int version) throws IOException
1:         {
1:             out.writeBoolean(response.promised);
0:             ByteBufferUtil.writeWithShortLength(response.inProgressCommit.key, out);
0:             UUIDSerializer.serializer.serialize(response.inProgressCommit.ballot, out, version);
0:             ColumnFamily.serializer.serialize(response.inProgressCommit.update, out, version);
0:             UUIDSerializer.serializer.serialize(response.mostRecentCommit.ballot, out, version);
0:             ColumnFamily.serializer.serialize(response.mostRecentCommit.update, out, version);
1:         }
1: 
0:         public PrepareResponse deserialize(DataInput in, int version) throws IOException
1:         {
1:             boolean success = in.readBoolean();
0:             ByteBuffer key = ByteBufferUtil.readWithShortLength(in);
0:             return new PrepareResponse(success,
0:                                        new Commit(key,
0:                                                   UUIDSerializer.serializer.deserialize(in, version),
0:                                                   ColumnFamily.serializer.deserialize(in, version)),
0:                                        new Commit(key,
0:                                                   UUIDSerializer.serializer.deserialize(in, version),
0:                                                   ColumnFamily.serializer.deserialize(in, version)));
1:         }
1: 
1:         public long serializedSize(PrepareResponse response, int version)
1:         {
0:             return 1
0:                    + 2 + response.inProgressCommit.key.remaining()
0:                    + UUIDSerializer.serializer.serializedSize(response.inProgressCommit.ballot, version)
0:                    + ColumnFamily.serializer.serializedSize(response.inProgressCommit.update, version)
0:                    + UUIDSerializer.serializer.serializedSize(response.mostRecentCommit.ballot, version)
0:                    + ColumnFamily.serializer.serializedSize(response.mostRecentCommit.update, version);
1:         }
1:     }
1: }
============================================================================