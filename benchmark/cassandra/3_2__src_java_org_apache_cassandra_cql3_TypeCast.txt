1:31e669a: /*
1:31e669a:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e669a:  * or more contributor license agreements.  See the NOTICE file
1:31e669a:  * distributed with this work for additional information
1:31e669a:  * regarding copyright ownership.  The ASF licenses this file
1:31e669a:  * to you under the Apache License, Version 2.0 (the
1:31e669a:  * "License"); you may not use this file except in compliance
1:31e669a:  * with the License.  You may obtain a copy of the License at
1:31e669a:  *
1:31e669a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:31e669a:  *
1:31e669a:  * Unless required by applicable law or agreed to in writing, software
1:31e669a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e669a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e669a:  * See the License for the specific language governing permissions and
1:31e669a:  * limitations under the License.
1:31e669a:  */
1:31e669a: package org.apache.cassandra.cql3;
1:31e669a: 
1:44fa12e: import org.apache.cassandra.db.marshal.AbstractType;
1:31e669a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:31e669a: 
1:5a4253b: public class TypeCast extends Term.Raw
3:31e669a: {
1:d63d07b:     private final CQL3Type.Raw type;
1:31e669a:     private final Term.Raw term;
1:31e669a: 
1:d63d07b:     public TypeCast(CQL3Type.Raw type, Term.Raw term)
1:31e669a:     {
1:31e669a:         this.type = type;
1:31e669a:         this.term = term;
3:31e669a:     }
1:31e669a: 
1:d63d07b:     public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:31e669a:     {
1:44fa12e:         if (!term.testAssignment(keyspace, castedSpecOf(keyspace, receiver)).isAssignable())
1:31e669a:             throw new InvalidRequestException(String.format("Cannot cast value %s to type %s", term, type));
1:31e669a: 
1:44fa12e:         if (!testAssignment(keyspace, receiver).isAssignable())
1:44fa12e:             throw new InvalidRequestException(String.format("Cannot assign value %s to %s of type %s", this, receiver.name, receiver.type.asCQL3Type()));
1:31e669a: 
1:d63d07b:         return term.prepare(keyspace, receiver);
1:31e669a:     }
1:31e669a: 
1:d63d07b:     private ColumnSpecification castedSpecOf(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:d63d07b:     {
1:d63d07b:         return new ColumnSpecification(receiver.ksName, receiver.cfName, new ColumnIdentifier(toString(), true), type.prepare(keyspace).getType());
1:d63d07b:     }
1:31e669a: 
1:44fa12e:     public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:d63d07b:     {
1:44fa12e:         AbstractType<?> castedType = type.prepare(keyspace).getType();
1:44fa12e:         if (receiver.type.equals(castedType))
1:44fa12e:             return AssignmentTestable.TestResult.EXACT_MATCH;
1:44fa12e:         else if (receiver.type.isValueCompatibleWith(castedType))
1:44fa12e:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:44fa12e:         else
1:44fa12e:             return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:d63d07b:     }
1:31e669a: 
1:4ed0060:     public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:4ed0060:     {
1:4ed0060:         return type.prepare(keyspace).getType();
1:4ed0060:     }
1:4ed0060: 
1:5a4253b:     public String getText()
1:31e669a:     {
1:31e669a:         return "(" + type + ")" + term;
1:31e669a:     }
1:31e669a: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1:     public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:     {
1:         return type.prepare(keyspace).getType();
1:     }
1: 
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.AbstractType;
/////////////////////////////////////////////////////////////////////////
1:         if (!term.testAssignment(keyspace, castedSpecOf(keyspace, receiver)).isAssignable())
1:         if (!testAssignment(keyspace, receiver).isAssignable())
1:             throw new InvalidRequestException(String.format("Cannot assign value %s to %s of type %s", this, receiver.name, receiver.type.asCQL3Type()));
/////////////////////////////////////////////////////////////////////////
1:     public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:             AbstractType<?> castedType = type.prepare(keyspace).getType();
1:             if (receiver.type.equals(castedType))
1:                 return AssignmentTestable.TestResult.EXACT_MATCH;
1:             else if (receiver.type.isValueCompatibleWith(castedType))
1:                 return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:             else
1:                 return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
commit:d63d07b
/////////////////////////////////////////////////////////////////////////
1:     private final CQL3Type.Raw type;
1:     public TypeCast(CQL3Type.Raw type, Term.Raw term)
1:     public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
0:         if (!term.isAssignableTo(keyspace, castedSpecOf(keyspace, receiver)))
0:         if (!isAssignableTo(keyspace, receiver))
1:         return term.prepare(keyspace, receiver);
1:     private ColumnSpecification castedSpecOf(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:         return new ColumnSpecification(receiver.ksName, receiver.cfName, new ColumnIdentifier(toString(), true), type.prepare(keyspace).getType());
0:     public boolean isAssignableTo(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
0:         try
1:         {
0:             return receiver.type.asCQL3Type().equals(type.prepare(keyspace));
1:         }
0:         catch (InvalidRequestException e)
1:         {
0:             throw new AssertionError();
1:         }
commit:b72af48
/////////////////////////////////////////////////////////////////////////
0:         return receiver.type.asCQL3Type().equals(type);
commit:31e669a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
0: public class TypeCast implements Term.Raw
1: {
0:     private final CQL3Type type;
1:     private final Term.Raw term;
1: 
0:     public TypeCast(CQL3Type type, Term.Raw term)
1:     {
1:         this.type = type;
1:         this.term = term;
1:     }
1: 
0:     public Term prepare(ColumnSpecification receiver) throws InvalidRequestException
1:     {
0:         if (!term.isAssignableTo(castedSpecOf(receiver)))
1:             throw new InvalidRequestException(String.format("Cannot cast value %s to type %s", term, type));
1: 
0:         if (!isAssignableTo(receiver))
0:             throw new InvalidRequestException(String.format("Cannot assign value %s to %s of type %s", this, receiver, receiver.type.asCQL3Type()));
1: 
0:         return term.prepare(receiver);
1:     }
1: 
0:     private ColumnSpecification castedSpecOf(ColumnSpecification receiver)
1:     {
0:         return new ColumnSpecification(receiver.ksName, receiver.cfName, new ColumnIdentifier(toString(), true), type.getType());
1:     }
1: 
0:     public boolean isAssignableTo(ColumnSpecification receiver)
1:     {
0:         return receiver.type.equals(type.getType());
1:     }
1: 
0:     @Override
0:     public String toString()
1:     {
1:         return "(" + type + ")" + term;
1:     }
1: }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1: public class TypeCast extends Term.Raw
/////////////////////////////////////////////////////////////////////////
1:     public String getText()
commit:9dcdb8b
commit:9da742d
/////////////////////////////////////////////////////////////////////////
0:         return receiver.type.isValueCompatibleWith(type.getType());
author:Robert Stupp
-------------------------------------------------------------------------------
commit:1762424
/////////////////////////////////////////////////////////////////////////
0:         AbstractType<?> castedType = type.prepare(keyspace).getType();
0:         if (receiver.type.equals(castedType))
0:             return AssignmentTestable.TestResult.EXACT_MATCH;
0:         else if (receiver.type.isValueCompatibleWith(castedType))
0:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
0:         else
0:             return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
commit:25411bf
/////////////////////////////////////////////////////////////////////////
0:     public boolean isAssignableTo(String keyspace, ColumnSpecification receiver)
============================================================================