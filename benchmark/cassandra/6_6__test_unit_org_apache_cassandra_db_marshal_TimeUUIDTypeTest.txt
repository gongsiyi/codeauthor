1:2db7830: /*
1:2db7830: * Licensed to the Apache Software Foundation (ASF) under one
1:2db7830: * or more contributor license agreements.  See the NOTICE file
1:2db7830: * distributed with this work for additional information
1:2db7830: * regarding copyright ownership.  The ASF licenses this file
1:2db7830: * to you under the Apache License, Version 2.0 (the
1:2db7830: * "License"); you may not use this file except in compliance
1:2db7830: * with the License.  You may obtain a copy of the License at
1:2db7830: *
1:2db7830: *    http://www.apache.org/licenses/LICENSE-2.0
1:2db7830: *
1:2db7830: * Unless required by applicable law or agreed to in writing,
1:2db7830: * software distributed under the License is distributed on an
1:2db7830: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2db7830: * KIND, either express or implied.  See the License for the
1:2db7830: * specific language governing permissions and limitations
1:2db7830: * under the License.
1:2db7830: */
1:2db7830: package org.apache.cassandra.db.marshal;
2:df9e121: 
1:e7a385a: import java.nio.ByteBuffer;
1:65105b9: import java.util.UUID;
1:df9e121: 
1:6d26625: import junit.framework.Assert;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:2db7830: import org.junit.Test;
1:2db7830: import static org.junit.Assert.assertEquals;
1:df9e121: 
1:9b5c44c: import org.apache.cassandra.utils.UUIDGen;
1:65105b9: 
1:b07301d: public class TimeUUIDTypeTest
2:2db7830: {
1:2db7830:     TimeUUIDType timeUUIDType = new TimeUUIDType();
1:2fd3268: 
1:2db7830:     @Test
1:9639f95:     public void testEquality()
1:2db7830:     {
1:7442fc0:         UUID a = UUIDGen.getTimeUUID();
1:65105b9:         UUID b = new UUID(a.getMostSignificantBits(), a.getLeastSignificantBits());
1:07cdfd0: 
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(a)));
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(b)));
1:65105b9:         assertEquals(0, timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(a)), ByteBuffer.wrap(UUIDGen.decompose(b))));
2:2db7830:     }
1:07cdfd0: 
1:df9e121:     @Test
1:9639f95:     public void testSmaller()
1:2db7830:     {
1:7442fc0:         UUID a = UUIDGen.getTimeUUID();
1:7442fc0:         UUID b = UUIDGen.getTimeUUID();
1:7442fc0:         UUID c = UUIDGen.getTimeUUID();
1:2fd3268: 
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(a)));
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(b)));
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(c)));
1:07cdfd0: 
1:65105b9:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(a)), ByteBuffer.wrap(UUIDGen.decompose(b))) < 0;
1:65105b9:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(b)), ByteBuffer.wrap(UUIDGen.decompose(c))) < 0;
1:65105b9:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(a)), ByteBuffer.wrap(UUIDGen.decompose(c))) < 0;
1:2db7830:     }
1:2fd3268: 
1:2db7830:     @Test
1:9639f95:     public void testBigger()
1:2db7830:     {
1:7442fc0:         UUID a = UUIDGen.getTimeUUID();
1:7442fc0:         UUID b = UUIDGen.getTimeUUID();
1:7442fc0:         UUID c = UUIDGen.getTimeUUID();
1:2fd3268: 
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(a)));
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(b)));
1:65105b9:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(c)));
1:2fd3268: 
1:65105b9:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(c)), ByteBuffer.wrap(UUIDGen.decompose(b))) > 0;
1:65105b9:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(b)), ByteBuffer.wrap(UUIDGen.decompose(a))) > 0;
1:65105b9:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(c)), ByteBuffer.wrap(UUIDGen.decompose(a))) > 0;
1:2db7830:     }
1:2fd3268: 
1:2db7830:     @Test
1:b07301d:     public void testTimestampComparison()
1:b07301d:     {
1:6d26625:         compareAll(UUIDTypeTest.random(1000, (byte) 0x10));
1:6d26625:         for (ByteBuffer[] permutations : UUIDTypeTest.permutations(100, (byte) 0x10))
1:6d26625:             compareAll(permutations);
1:6d26625:     }
1:6d26625: 
1:6d26625:     private void compareAll(ByteBuffer[] uuids)
1:6d26625:     {
1:6d26625:         for (int i = 0 ; i < uuids.length ; i++)
1:2db7830:         {
1:6d26625:             for (int j = i + 1 ; j < uuids.length ; j++)
1:6d26625:             {
1:6d26625:                 ByteBuffer bi = uuids[i];
1:6d26625:                 ByteBuffer bj = uuids[j];
1:6d26625:                 long i0 = UUIDGen.getUUID(bi).timestamp();
1:6d26625:                 long i1 = UUIDGen.getUUID(bj).timestamp();
1:6d26625:                 int c = timeUUIDType.compare(bi, bj);
1:6d26625:                 if (i0 == i1) Assert.assertTrue(isComparisonEquivalent(bi.compareTo(bj), c));
1:6d26625:                 else Assert.assertTrue(isComparisonEquivalent(Long.compare(i0, i1), c));
1:6d26625:                 Assert.assertTrue(isComparisonEquivalent(compareV1(bi, bj), c));
1:6d26625:             }
1:6d26625:         }
1:b07301d:     }
1:6d26625: 
1:6d26625:     private static int compareV1(ByteBuffer o1, ByteBuffer o2)
1:6d26625:     {
1:6d26625:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:6d26625:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
1:6d26625: 
1:6d26625:         int res = compareTimestampBytes(o1, o2);
1:6d26625:         if (res != 0)
1:6d26625:             return res;
1:6d26625:         return o1.compareTo(o2);
1:6d26625:     }
1:6d26625: 
1:6d26625:     private static int compareTimestampBytes(ByteBuffer o1, ByteBuffer o2)
1:6d26625:     {
1:6d26625:         int o1Pos = o1.position();
1:6d26625:         int o2Pos = o2.position();
1:6d26625: 
1:6d26625:         int d = (o1.get(o1Pos + 6) & 0xF) - (o2.get(o2Pos + 6) & 0xF);
1:6d26625:         if (d != 0) return d;
1:6d26625: 
1:6d26625:         d = (o1.get(o1Pos + 7) & 0xFF) - (o2.get(o2Pos + 7) & 0xFF);
1:6d26625:         if (d != 0) return d;
1:6d26625: 
1:6d26625:         d = (o1.get(o1Pos + 4) & 0xFF) - (o2.get(o2Pos + 4) & 0xFF);
1:6d26625:         if (d != 0) return d;
1:6d26625: 
1:6d26625:         d = (o1.get(o1Pos + 5) & 0xFF) - (o2.get(o2Pos + 5) & 0xFF);
1:6d26625:         if (d != 0) return d;
1:6d26625: 
1:6d26625:         d = (o1.get(o1Pos) & 0xFF) - (o2.get(o2Pos) & 0xFF);
1:6d26625:         if (d != 0) return d;
1:6d26625: 
1:6d26625:         d = (o1.get(o1Pos + 1) & 0xFF) - (o2.get(o2Pos + 1) & 0xFF);
1:6d26625:         if (d != 0) return d;
1:6d26625: 
1:6d26625:         d = (o1.get(o1Pos + 2) & 0xFF) - (o2.get(o2Pos + 2) & 0xFF);
1:6d26625:         if (d != 0) return d;
1:6d26625: 
1:6d26625:         return (o1.get(o1Pos + 3) & 0xFF) - (o2.get(o2Pos + 3) & 0xFF);
1:6d26625:     }
1:6d26625: 
1:6d26625:     private static boolean isComparisonEquivalent(int c1, int c2)
1:6d26625:     {
1:6d26625:         c1 = c1 < -1 ? -1 : c1 > 1 ? 1 : c1;
1:6d26625:         c2 = c2 < -1 ? -1 : c2 > 1 ? 1 : c2;
1:6d26625:         return c1 == c2;
1:2db7830:     }
1:65105b9: 
1:2db7830:     @Test
1:df9e121:     public void testValidTimeVersion()
1:df9e121:     {
1:65105b9:         UUID uuid1 = UUID.fromString("00000000-0000-1000-0000-000000000000");
1:df9e121:         assert uuid1.version() == 1;
1:df9e121:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(uuid1)));
1:df9e121:     }
1:07cdfd0: 
1:df9e121:     @Test(expected = MarshalException.class)
1:df9e121:     public void testInvalidTimeVersion()
1:df9e121:     {
1:65105b9:         UUID uuid2 = UUID.fromString("00000000-0000-2100-0000-000000000000");
1:df9e121:         assert uuid2.version() == 2;
1:df9e121:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(uuid2)));
1:df9e121:     }
1:07cdfd0: 
1:07cdfd0: 
1:2db7830: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:9639f95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testEquality()
/////////////////////////////////////////////////////////////////////////
1:     public void testSmaller()
/////////////////////////////////////////////////////////////////////////
1:     public void testBigger()
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6d26625
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ThreadLocalRandom;
1: import junit.framework.Assert;
/////////////////////////////////////////////////////////////////////////
1:         compareAll(UUIDTypeTest.random(1000, (byte) 0x10));
1:         for (ByteBuffer[] permutations : UUIDTypeTest.permutations(100, (byte) 0x10))
1:             compareAll(permutations);
1:     }
1: 
1:     private void compareAll(ByteBuffer[] uuids)
1:     {
1:         for (int i = 0 ; i < uuids.length ; i++)
1:             for (int j = i + 1 ; j < uuids.length ; j++)
1:             {
1:                 ByteBuffer bi = uuids[i];
1:                 ByteBuffer bj = uuids[j];
1:                 long i0 = UUIDGen.getUUID(bi).timestamp();
1:                 long i1 = UUIDGen.getUUID(bj).timestamp();
1:                 int c = timeUUIDType.compare(bi, bj);
1:                 if (i0 == i1) Assert.assertTrue(isComparisonEquivalent(bi.compareTo(bj), c));
1:                 else Assert.assertTrue(isComparisonEquivalent(Long.compare(i0, i1), c));
1:                 Assert.assertTrue(isComparisonEquivalent(compareV1(bi, bj), c));
1:             }
1:     }
1: 
1:     private static int compareV1(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
1: 
1:         int res = compareTimestampBytes(o1, o2);
1:         if (res != 0)
1:             return res;
1:         return o1.compareTo(o2);
1:     }
1: 
1:     private static int compareTimestampBytes(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         int o1Pos = o1.position();
1:         int o2Pos = o2.position();
1: 
1:         int d = (o1.get(o1Pos + 6) & 0xF) - (o2.get(o2Pos + 6) & 0xF);
1:         if (d != 0) return d;
1: 
1:         d = (o1.get(o1Pos + 7) & 0xFF) - (o2.get(o2Pos + 7) & 0xFF);
1:         if (d != 0) return d;
1: 
1:         d = (o1.get(o1Pos + 4) & 0xFF) - (o2.get(o2Pos + 4) & 0xFF);
1:         if (d != 0) return d;
1: 
1:         d = (o1.get(o1Pos + 5) & 0xFF) - (o2.get(o2Pos + 5) & 0xFF);
1:         if (d != 0) return d;
1: 
1:         d = (o1.get(o1Pos) & 0xFF) - (o2.get(o2Pos) & 0xFF);
1:         if (d != 0) return d;
1: 
1:         d = (o1.get(o1Pos + 1) & 0xFF) - (o2.get(o2Pos + 1) & 0xFF);
1:         if (d != 0) return d;
1: 
1:         d = (o1.get(o1Pos + 2) & 0xFF) - (o2.get(o2Pos + 2) & 0xFF);
1:         if (d != 0) return d;
1: 
1:         return (o1.get(o1Pos + 3) & 0xFF) - (o2.get(o2Pos + 3) & 0xFF);
1:     }
1: 
1:     private static boolean isComparisonEquivalent(int c1, int c2)
1:     {
1:         c1 = c1 < -1 ? -1 : c1 > 1 ? 1 : c1;
1:         c2 = c2 < -1 ? -1 : c2 > 1 ? 1 : c2;
1:         return c1 == c2;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.MarshalException;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.MarshalException;
commit:7442fc0
/////////////////////////////////////////////////////////////////////////
1:         UUID a = UUIDGen.getTimeUUID();
/////////////////////////////////////////////////////////////////////////
1:         UUID a = UUIDGen.getTimeUUID();
1:         UUID b = UUIDGen.getTimeUUID();
1:         UUID c = UUIDGen.getTimeUUID();
/////////////////////////////////////////////////////////////////////////
1:         UUID a = UUIDGen.getTimeUUID();
1:         UUID b = UUIDGen.getTimeUUID();
1:         UUID c = UUIDGen.getTimeUUID();
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:65105b9
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
0: import java.net.UnknownHostException;
1: import java.util.UUID;
0:     public void testEquality() throws UnknownHostException
0:         UUID a = UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
1:         UUID b = new UUID(a.getMostSignificantBits(), a.getLeastSignificantBits());
1:         
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(a)));
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(b)));
1:         assertEquals(0, timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(a)), ByteBuffer.wrap(UUIDGen.decompose(b))));
0:     public void testSmaller() throws UnknownHostException
0:         UUID a = UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
0:         UUID b = UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
0:         UUID c = UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(a)));
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(b)));
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(c)));
1:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(a)), ByteBuffer.wrap(UUIDGen.decompose(b))) < 0;
1:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(b)), ByteBuffer.wrap(UUIDGen.decompose(c))) < 0;
1:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(a)), ByteBuffer.wrap(UUIDGen.decompose(c))) < 0;
0:     public void testBigger() throws UnknownHostException
0:         UUID a = UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
0:         UUID b = UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
0:         UUID c = UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(a)));
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(b)));
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(c)));
1: 
1:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(c)), ByteBuffer.wrap(UUIDGen.decompose(b))) > 0;
1:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(b)), ByteBuffer.wrap(UUIDGen.decompose(a))) > 0;
1:         assert timeUUIDType.compare(ByteBuffer.wrap(UUIDGen.decompose(c)), ByteBuffer.wrap(UUIDGen.decompose(a))) > 0;
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid1 = UUID.fromString("00000000-0000-1000-0000-000000000000");
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid2 = UUID.fromString("00000000-0000-2100-0000-000000000000");
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:df9e121
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testValidTimeVersion()
1:     {
0:         java.util.UUID uuid1 = java.util.UUID.fromString("00000000-0000-1000-0000-000000000000");
1:         assert uuid1.version() == 1;
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(uuid1)));
1:     }
1:     
1:     @Test(expected = MarshalException.class)
1:     public void testInvalidTimeVersion()
1:     {
0:         java.util.UUID uuid2 = java.util.UUID.fromString("00000000-0000-2100-0000-000000000000");
1:         assert uuid2.version() == 2;
1:         timeUUIDType.validate(ByteBuffer.wrap(UUIDGen.decompose(uuid2)));
1:     }
1:     
1:     
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0:         timeUUIDType.validate(ByteBuffer.wrap(a.asByteArray()));
0:         timeUUIDType.validate(ByteBuffer.wrap(b.asByteArray()));
/////////////////////////////////////////////////////////////////////////
0:         timeUUIDType.validate(ByteBuffer.wrap(a.asByteArray()));
0:         timeUUIDType.validate(ByteBuffer.wrap(b.asByteArray()));
0:         timeUUIDType.validate(ByteBuffer.wrap(c.asByteArray()));
0:         
/////////////////////////////////////////////////////////////////////////
0:         
0:         timeUUIDType.validate(ByteBuffer.wrap(a.asByteArray()));
0:         timeUUIDType.validate(ByteBuffer.wrap(b.asByteArray()));
0:         timeUUIDType.validate(ByteBuffer.wrap(c.asByteArray()));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9b5c44c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.UUIDGen;
/////////////////////////////////////////////////////////////////////////
0:             long i0 = UUIDGen.getUUID(uuids[i - 1]).timestamp();
0:             long i1 = UUIDGen.getUUID(uuids[i]).timestamp();
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(0, timeUUIDType.compare(ByteBuffer.wrap(a.asByteArray()), ByteBuffer.wrap(b.asByteArray())));
/////////////////////////////////////////////////////////////////////////
0:         assert timeUUIDType.compare(ByteBuffer.wrap(a.asByteArray()), ByteBuffer.wrap(b.asByteArray())) < 0;
0:         assert timeUUIDType.compare(ByteBuffer.wrap(b.asByteArray()), ByteBuffer.wrap(c.asByteArray())) < 0;
0:         assert timeUUIDType.compare(ByteBuffer.wrap(a.asByteArray()), ByteBuffer.wrap(c.asByteArray())) < 0;
/////////////////////////////////////////////////////////////////////////
0:         assert timeUUIDType.compare(ByteBuffer.wrap(c.asByteArray()), ByteBuffer.wrap(b.asByteArray())) > 0;
0:         assert timeUUIDType.compare(ByteBuffer.wrap(b.asByteArray()), ByteBuffer.wrap(a.asByteArray())) > 0;
0:         assert timeUUIDType.compare(ByteBuffer.wrap(c.asByteArray()), ByteBuffer.wrap(a.asByteArray())) > 0;
0:         ByteBuffer[] uuids = new ByteBuffer[100];
0:             uuids[i] = ByteBuffer.allocate(16);
0:             rng.nextBytes(uuids[i].array());
0:             uuids[i].array()[6] &= 0x0F;
0:             uuids[i].array()[6] |= 0x10;
commit:b07301d
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.Random;
0: 
/////////////////////////////////////////////////////////////////////////
1: public class TimeUUIDTypeTest
/////////////////////////////////////////////////////////////////////////
0:         assert timeUUIDType.compare(a.asByteArray(), b.asByteArray()) < 0;
0:         assert timeUUIDType.compare(b.asByteArray(), c.asByteArray()) < 0;
0:         assert timeUUIDType.compare(a.asByteArray(), c.asByteArray()) < 0;
/////////////////////////////////////////////////////////////////////////
0:         assert timeUUIDType.compare(c.asByteArray(), b.asByteArray()) > 0;
0:         assert timeUUIDType.compare(b.asByteArray(), a.asByteArray()) > 0;
0:         assert timeUUIDType.compare(c.asByteArray(), a.asByteArray()) > 0;
1:     public void testTimestampComparison()
0:         Random rng = new Random();
0:         byte[][] uuids = new byte[100][];
0:         for (int i = 0; i < uuids.length; i++)
0:             uuids[i] = new byte[16];
0:             rng.nextBytes(uuids[i]);
0:             // set version to 1
0:             uuids[i][6] &= 0x0F;
0:             uuids[i][6] |= 0x10;
1:         }
0:         Arrays.sort(uuids, timeUUIDType);
0:         for (int i = 1; i < uuids.length; i++)
1:         {
0:             long i0 = LexicalUUIDType.getUUID(uuids[i - 1]).timestamp();
0:             long i1 = LexicalUUIDType.getUUID(uuids[i]).timestamp();
0:             assert i0 <= i1;
commit:2db7830
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db.marshal;
0: 
1: import org.junit.Test;
1: import static org.junit.Assert.assertEquals;
0: 
0: import org.apache.cassandra.CleanupHelper;
0: import org.apache.cassandra.db.marshal.TimeUUIDType;
0: 
0: import org.safehaus.uuid.UUID;
0: import org.safehaus.uuid.UUIDGenerator;
0: 
0: public class TimeUUIDTypeTest extends CleanupHelper
1: {
1:     TimeUUIDType timeUUIDType = new TimeUUIDType();
0:     UUIDGenerator generator = UUIDGenerator.getInstance();
0: 
1:     @Test
0:     public void testEquality()
1:     {
0:         UUID a = generator.generateTimeBasedUUID();
0:         UUID b = new UUID(a.asByteArray());
0: 
0:         assertEquals(0, timeUUIDType.compare(a.asByteArray(), b.asByteArray()));
1:     }
0: 
1:     @Test
0:     public void testSmaller()
1:     {
0:         UUID a = generator.generateTimeBasedUUID();
0:         UUID b = generator.generateTimeBasedUUID();
0:         UUID c = generator.generateTimeBasedUUID();
0: 
0:         assertEquals(-1, timeUUIDType.compare(a.asByteArray(), b.asByteArray()));
0:         assertEquals(-1, timeUUIDType.compare(b.asByteArray(), c.asByteArray()));
0:         assertEquals(-1, timeUUIDType.compare(a.asByteArray(), c.asByteArray()));
1:     }
0: 
1:     @Test
0:     public void testBigger()
1:     {
0:         UUID a = generator.generateTimeBasedUUID();
0:         UUID b = generator.generateTimeBasedUUID();
0:         UUID c = generator.generateTimeBasedUUID();
0: 
0:         assertEquals(1, timeUUIDType.compare(c.asByteArray(), b.asByteArray()));
0:         assertEquals(1, timeUUIDType.compare(b.asByteArray(), a.asByteArray()));
0:         assertEquals(1, timeUUIDType.compare(c.asByteArray(), a.asByteArray()));
1:     }
0: 
1:     @Test
0:     public void testTimestamp()
1:     {
0:         for (int i = 0; i < 100; i++)
1:         {
0:             UUID uuid = generator.generateTimeBasedUUID();
0:             assert TimeUUIDType.getTimestamp(uuid.asByteArray()) == LexicalUUIDType.getUUID(uuid.asByteArray()).timestamp();
1:         }
1:     }
1: }
============================================================================