1:1e7cde5: /*
1:1e7cde5:  * Licensed to the Apache Software Foundation (ASF) under one
1:07cf56f:  * or more contributor license agreements.  See the NOTICE file
1:1e7cde5:  * distributed with this work for additional information
1:07cf56f:  * regarding copyright ownership.  The ASF licenses this file
1:1e7cde5:  * to you under the Apache License, Version 2.0 (the
1:1e7cde5:  * "License"); you may not use this file except in compliance
1:07cf56f:  * with the License.  You may obtain a copy of the License at
3:1e7cde5:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1e7cde5:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1e7cde5:  */
1:1e7cde5: package org.apache.cassandra.thrift;
1:2fd3268: 
1:07cdfd0: 
1:1e7cde5: import java.io.BufferedInputStream;
1:1e7cde5: import java.io.BufferedOutputStream;
1:1e7cde5: import java.io.IOException;
1:1e7cde5: import java.net.InetSocketAddress;
1:1e7cde5: import java.net.Socket;
1:1e7cde5: import java.net.SocketException;
7:2fd3268: 
1:1e7cde5: import org.apache.thrift.transport.TIOStreamTransport;
1:1e7cde5: import org.apache.thrift.transport.TTransportException;
1:1e7cde5: import org.slf4j.Logger;
1:1e7cde5: import org.slf4j.LoggerFactory;
1:07cdfd0: 
1:1e7cde5: /**
1:07cdfd0:  * Socket implementation of the TTransport interface.
1:07cdfd0:  *
1:1e7cde5:  * Adds socket buffering
1:2fd3268:  *
1:1e7cde5:  */
1:68d2526: public class TCustomSocket extends TIOStreamTransport
1:68d2526: {
1:07cdfd0: 
1:1e7cde5:   private static final Logger LOGGER = LoggerFactory.getLogger(TCustomSocket.class.getName());
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Wrapped Socket object
1:1e7cde5:    */
1:910b663:   private Socket socket = null;
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Remote host
1:1e7cde5:    */
1:910b663:   private String host  = null;
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Remote port
1:1e7cde5:    */
1:910b663:   private int port = 0;
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Socket timeout
1:1e7cde5:    */
1:910b663:   private int timeout = 0;
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Constructor that takes an already created socket.
1:1e7cde5:    *
1:1e7cde5:    * @param socket Already created socket object
1:1e7cde5:    * @throws TTransportException if there is an error setting up the streams
1:1e7cde5:    */
1:68d2526:   public TCustomSocket(Socket socket) throws TTransportException
1:68d2526:   {
1:910b663:     this.socket = socket;
1:68d2526:     try
1:68d2526:     {
1:910b663:       socket.setSoLinger(false, 0);
1:910b663:       socket.setTcpNoDelay(true);
1:68d2526:     }
1:68d2526:     catch (SocketException sx)
1:68d2526:     {
1:1e7cde5:       LOGGER.warn("Could not configure socket.", sx);
2:1e7cde5:     }
1:07cdfd0: 
1:68d2526:     if (isOpen())
1:68d2526:     {
1:68d2526:       try
1:68d2526:       {
1:910b663:         inputStream_ = new BufferedInputStream(socket.getInputStream(), 1024);
1:910b663:         outputStream_ = new BufferedOutputStream(socket.getOutputStream(), 1024);
1:68d2526:       }
1:68d2526:       catch (IOException iox)
1:68d2526:       {
1:1e7cde5:         close();
1:1e7cde5:         throw new TTransportException(TTransportException.NOT_OPEN, iox);
1:1e7cde5:       }
1:1e7cde5:     }
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Creates a new unconnected socket that will connect to the given host
1:1e7cde5:    * on the given port.
1:1e7cde5:    *
1:1e7cde5:    * @param host Remote host
1:1e7cde5:    * @param port Remote port
1:1e7cde5:    */
1:68d2526:   public TCustomSocket(String host, int port)
1:68d2526:   {
1:1e7cde5:     this(host, port, 0);
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Creates a new unconnected socket that will connect to the given host
1:1e7cde5:    * on the given port.
1:1e7cde5:    *
1:1e7cde5:    * @param host    Remote host
1:1e7cde5:    * @param port    Remote port
1:1e7cde5:    * @param timeout Socket timeout
1:1e7cde5:    */
1:68d2526:   public TCustomSocket(String host, int port, int timeout)
1:68d2526:   {
1:910b663:     this.host = host;
1:910b663:     this.port = port;
1:910b663:     this.timeout = timeout;
1:1e7cde5:     initSocket();
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Initializes the socket object
1:1e7cde5:    */
1:68d2526:   private void initSocket()
1:68d2526:   {
1:910b663:     socket = new Socket();
1:68d2526:     try
1:68d2526:     {
1:910b663:       socket.setSoLinger(false, 0);
1:910b663:       socket.setTcpNoDelay(true);
1:910b663:       socket.setSoTimeout(timeout);
1:68d2526:     }
1:68d2526:     catch (SocketException sx)
1:68d2526:     {
1:1e7cde5:       LOGGER.error("Could not configure socket.", sx);
1:1e7cde5:     }
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Sets the socket timeout
1:1e7cde5:    *
1:1e7cde5:    * @param timeout Milliseconds timeout
1:1e7cde5:    */
1:68d2526:   public void setTimeout(int timeout)
1:68d2526:   {
1:910b663:     this.timeout = timeout;
1:68d2526:     try
1:68d2526:     {
1:910b663:       socket.setSoTimeout(timeout);
1:68d2526:     }
1:68d2526:     catch (SocketException sx)
1:68d2526:     {
1:1e7cde5:       LOGGER.warn("Could not set socket timeout.", sx);
1:1e7cde5:     }
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Returns a reference to the underlying socket.
1:1e7cde5:    */
1:68d2526:   public Socket getSocket()
1:68d2526:   {
1:68d2526:     if (socket == null)
1:68d2526:     {
1:1e7cde5:       initSocket();
1:1e7cde5:     }
1:910b663:     return socket;
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Checks whether the socket is connected.
1:1e7cde5:    */
1:68d2526:   public boolean isOpen()
1:68d2526:   {
1:68d2526:     if (socket == null)
1:68d2526:     {
1:1e7cde5:       return false;
1:1e7cde5:     }
1:910b663:     return socket.isConnected();
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Connects the socket, creating a new socket object if necessary.
1:1e7cde5:    */
1:68d2526:   public void open() throws TTransportException
1:68d2526:   {
1:68d2526:     if (isOpen())
1:68d2526:     {
1:1e7cde5:       throw new TTransportException(TTransportException.ALREADY_OPEN, "Socket already connected.");
1:1e7cde5:     }
1:07cdfd0: 
1:68d2526:     if (host.length() == 0)
1:68d2526:     {
1:1e7cde5:       throw new TTransportException(TTransportException.NOT_OPEN, "Cannot open null host.");
1:1e7cde5:     }
1:68d2526:     if (port <= 0)
1:68d2526:     {
1:1e7cde5:       throw new TTransportException(TTransportException.NOT_OPEN, "Cannot open without port.");
1:1e7cde5:     }
1:07cdfd0: 
1:68d2526:     if (socket == null)
1:68d2526:     {
1:1e7cde5:       initSocket();
1:1e7cde5:     }
1:07cdfd0: 
1:68d2526:     try
1:68d2526:     {
1:910b663:       socket.connect(new InetSocketAddress(host, port), timeout);
1:910b663:       inputStream_ = new BufferedInputStream(socket.getInputStream(), 1024);
1:910b663:       outputStream_ = new BufferedOutputStream(socket.getOutputStream(), 1024);
1:68d2526:     }
1:68d2526:     catch (IOException iox)
1:68d2526:     {
1:1e7cde5:       close();
1:1e7cde5:       throw new TTransportException(TTransportException.NOT_OPEN, iox);
1:1e7cde5:     }
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5:   /**
1:1e7cde5:    * Closes the socket.
1:1e7cde5:    */
1:68d2526:   public void close()
1:68d2526:   {
1:1e7cde5:     // Close the underlying streams
1:1e7cde5:     super.close();
1:07cdfd0: 
1:1e7cde5:     // Close the socket
1:68d2526:     if (socket != null)
1:68d2526:     {
1:68d2526:       try
1:68d2526:       {
1:910b663:         socket.close();
1:68d2526:       }
1:68d2526:       catch (IOException iox)
1:68d2526:       {
1:1e7cde5:         LOGGER.warn("Could not close socket.", iox);
1:1e7cde5:       }
1:910b663:       socket = null;
1:910b663:     }
1:1e7cde5:   }
1:07cdfd0: 
1:1e7cde5: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: public class TCustomSocket extends TIOStreamTransport
1: {
/////////////////////////////////////////////////////////////////////////
1:   public TCustomSocket(Socket socket) throws TTransportException
1:   {
1:     try
1:     {
1:     }
1:     catch (SocketException sx)
1:     {
1:     if (isOpen())
1:     {
1:       try
1:       {
1:       }
1:       catch (IOException iox)
1:       {
/////////////////////////////////////////////////////////////////////////
1:   public TCustomSocket(String host, int port)
1:   {
/////////////////////////////////////////////////////////////////////////
1:   public TCustomSocket(String host, int port, int timeout)
1:   {
/////////////////////////////////////////////////////////////////////////
1:   private void initSocket()
1:   {
1:     try
1:     {
1:     }
1:     catch (SocketException sx)
1:     {
/////////////////////////////////////////////////////////////////////////
1:   public void setTimeout(int timeout)
1:   {
1:     try
1:     {
1:     }
1:     catch (SocketException sx)
1:     {
/////////////////////////////////////////////////////////////////////////
1:   public Socket getSocket()
1:   {
1:     if (socket == null)
1:     {
/////////////////////////////////////////////////////////////////////////
1:   public boolean isOpen()
1:   {
1:     if (socket == null)
1:     {
/////////////////////////////////////////////////////////////////////////
1:   public void open() throws TTransportException
1:   {
1:     if (isOpen())
1:     {
1:     if (host.length() == 0)
1:     {
1:     if (port <= 0)
1:     {
1:     if (socket == null)
1:     {
1:     try
1:     {
1:     }
1:     catch (IOException iox)
1:     {
/////////////////////////////////////////////////////////////////////////
1:   public void close()
1:   {
1:     if (socket != null)
1:     {
1:       try
1:       {
1:       }
1:       catch (IOException iox)
1:       {
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:  * Socket implementation of the TTransport interface.
1:  *
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:  * Socket implementation of the TTransport interface.
1:  *
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  * or more contributor license agreements.  See the NOTICE file
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * with the License.  You may obtain a copy of the License at
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:910b663
/////////////////////////////////////////////////////////////////////////
1:   private Socket socket = null;
1:   private String host  = null;
1:   private int port = 0;
1:   private int timeout = 0;
/////////////////////////////////////////////////////////////////////////
1:     this.socket = socket;
1:       socket.setSoLinger(false, 0);
1:       socket.setTcpNoDelay(true);
1:         inputStream_ = new BufferedInputStream(socket.getInputStream(), 1024);
1:         outputStream_ = new BufferedOutputStream(socket.getOutputStream(), 1024);
/////////////////////////////////////////////////////////////////////////
1:     this.host = host;
1:     this.port = port;
1:     this.timeout = timeout;
/////////////////////////////////////////////////////////////////////////
1:     socket = new Socket();
1:       socket.setSoLinger(false, 0);
1:       socket.setTcpNoDelay(true);
1:       socket.setSoTimeout(timeout);
/////////////////////////////////////////////////////////////////////////
1:     this.timeout = timeout;
1:       socket.setSoTimeout(timeout);
/////////////////////////////////////////////////////////////////////////
0:     if (socket == null) {
1:     return socket;
0:     if (socket == null) {
1:     return socket.isConnected();
/////////////////////////////////////////////////////////////////////////
0:     if (host.length() == 0) {
0:     if (port <= 0) {
0:     if (socket == null) {
1:       socket.connect(new InetSocketAddress(host, port), timeout);
1:       inputStream_ = new BufferedInputStream(socket.getInputStream(), 1024);
1:       outputStream_ = new BufferedOutputStream(socket.getOutputStream(), 1024);
/////////////////////////////////////////////////////////////////////////
0:     if (socket != null) {
1:         socket.close();
1:       socket = null;
1: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e7cde5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
0:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
0:  * with the License. You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.thrift;
0: 
0:  
1: import java.io.BufferedInputStream;
1: import java.io.BufferedOutputStream;
1: import java.io.IOException;
1: import java.net.InetSocketAddress;
1: import java.net.Socket;
1: import java.net.SocketException;
0: 
1: import org.apache.thrift.transport.TIOStreamTransport;
1: import org.apache.thrift.transport.TTransportException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0:  
1: /**
0:  * Socket implementation of the TTransport interface. 
1:  * 
1:  * Adds socket buffering
1:  *
1:  */
0: public class TCustomSocket extends TIOStreamTransport {
0:  
1:   private static final Logger LOGGER = LoggerFactory.getLogger(TCustomSocket.class.getName());
0:  
1:   /**
1:    * Wrapped Socket object
1:    */
0:   private Socket socket_ = null;
0:  
1:   /**
1:    * Remote host
1:    */
0:   private String host_  = null;
0:  
1:   /**
1:    * Remote port
1:    */
0:   private int port_ = 0;
0:  
1:   /**
1:    * Socket timeout
1:    */
0:   private int timeout_ = 0;
0:  
1:   /**
1:    * Constructor that takes an already created socket.
1:    *
1:    * @param socket Already created socket object
1:    * @throws TTransportException if there is an error setting up the streams
1:    */
0:   public TCustomSocket(Socket socket) throws TTransportException {
0:     socket_ = socket;
0:     try {
0:       socket_.setSoLinger(false, 0);
0:       socket_.setTcpNoDelay(true);
0:     } catch (SocketException sx) {
1:       LOGGER.warn("Could not configure socket.", sx);
1:     }
0:  
0:     if (isOpen()) {
0:       try {
0:         inputStream_ = new BufferedInputStream(socket_.getInputStream(), 1024);
0:         outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);
0:       } catch (IOException iox) {
1:         close();
1:         throw new TTransportException(TTransportException.NOT_OPEN, iox);
1:       }
1:     }
1:   }
0:  
1:   /**
1:    * Creates a new unconnected socket that will connect to the given host
1:    * on the given port.
1:    *
1:    * @param host Remote host
1:    * @param port Remote port
1:    */
0:   public TCustomSocket(String host, int port) {
1:     this(host, port, 0);
1:   }
0:  
1:   /**
1:    * Creates a new unconnected socket that will connect to the given host
1:    * on the given port.
1:    *
1:    * @param host    Remote host
1:    * @param port    Remote port
1:    * @param timeout Socket timeout
1:    */
0:   public TCustomSocket(String host, int port, int timeout) {
0:     host_ = host;
0:     port_ = port;
0:     timeout_ = timeout;
1:     initSocket();
1:   }
0:  
1:   /**
1:    * Initializes the socket object
1:    */
0:   private void initSocket() {
0:     socket_ = new Socket();
0:     try {
0:       socket_.setSoLinger(false, 0);
0:       socket_.setTcpNoDelay(true);
0:       socket_.setSoTimeout(timeout_);
0:     } catch (SocketException sx) {
1:       LOGGER.error("Could not configure socket.", sx);
1:     }
1:   }
0:  
1:   /**
1:    * Sets the socket timeout
1:    *
1:    * @param timeout Milliseconds timeout
1:    */
0:   public void setTimeout(int timeout) {
0:     timeout_ = timeout;
0:     try {
0:       socket_.setSoTimeout(timeout);
0:     } catch (SocketException sx) {
1:       LOGGER.warn("Could not set socket timeout.", sx);
1:     }
1:   }
0:  
1:   /**
1:    * Returns a reference to the underlying socket.
1:    */
0:   public Socket getSocket() {
0:     if (socket_ == null) {
1:       initSocket();
1:     }
0:     return socket_;
1:   }
0:  
1:   /**
1:    * Checks whether the socket is connected.
1:    */
0:   public boolean isOpen() {
0:     if (socket_ == null) {
1:       return false;
1:     }
0:     return socket_.isConnected();
1:   }
0:  
1:   /**
1:    * Connects the socket, creating a new socket object if necessary.
1:    */
0:   public void open() throws TTransportException {
0:     if (isOpen()) {
1:       throw new TTransportException(TTransportException.ALREADY_OPEN, "Socket already connected.");
1:     }
0:  
0:     if (host_.length() == 0) {
1:       throw new TTransportException(TTransportException.NOT_OPEN, "Cannot open null host.");
1:     }
0:     if (port_ <= 0) {
1:       throw new TTransportException(TTransportException.NOT_OPEN, "Cannot open without port.");
1:     }
0:  
0:     if (socket_ == null) {
1:       initSocket();
1:     }
0:  
0:     try {
0:       socket_.connect(new InetSocketAddress(host_, port_), timeout_);
0:       inputStream_ = new BufferedInputStream(socket_.getInputStream(), 1024);
0:       outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);
0:     } catch (IOException iox) {
1:       close();
1:       throw new TTransportException(TTransportException.NOT_OPEN, iox);
1:     }
1:   }
0:  
1:   /**
1:    * Closes the socket.
1:    */
0:   public void close() {
1:     // Close the underlying streams
1:     super.close();
0:  
1:     // Close the socket
0:     if (socket_ != null) {
0:       try {
0:         socket_.close();
0:       } catch (IOException iox) {
1:         LOGGER.warn("Could not close socket.", iox);
1:       }
0:       socket_ = null;
1:     }
1:   }
0:  
1: }
============================================================================