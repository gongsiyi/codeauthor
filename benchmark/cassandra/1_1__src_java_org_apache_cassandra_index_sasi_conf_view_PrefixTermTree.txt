1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.conf.view;
2:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.HashSet;
1:72790dc: import java.util.Map;
1:72790dc: import java.util.Set;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.SSTableIndex;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.index.sasi.utils.trie.KeyAnalyzer;
1:72790dc: import org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie;
1:72790dc: import org.apache.cassandra.index.sasi.utils.trie.Trie;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.utils.Interval;
1:72790dc: import org.apache.cassandra.utils.IntervalTree;
1:72790dc: 
1:72790dc: import com.google.common.collect.Sets;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * This class is an extension over RangeTermTree for string terms,
1:72790dc:  * it is required because interval tree can't handle matching if search is on the
1:72790dc:  * prefix of min/max of the range, so for ascii/utf8 fields we build an additional
1:72790dc:  * prefix trie (including both min/max terms of the index) and do union of the results
1:72790dc:  * of the prefix tree search and results from the interval tree lookup.
1:72790dc:  */
1:72790dc: public class PrefixTermTree extends RangeTermTree
1:72790dc: {
1:72790dc:     private final OnDiskIndexBuilder.Mode mode;
1:72790dc:     private final Trie<ByteBuffer, Set<SSTableIndex>> trie;
1:72790dc: 
1:72790dc:     public PrefixTermTree(ByteBuffer min, ByteBuffer max,
1:72790dc:                           Trie<ByteBuffer, Set<SSTableIndex>> trie,
1:3928665:                           IntervalTree<Term, SSTableIndex, Interval<Term, SSTableIndex>> ranges,
1:3928665:                           OnDiskIndexBuilder.Mode mode,
1:3928665:                           AbstractType<?> comparator)
1:72790dc:     {
1:3928665:         super(min, max, ranges, comparator);
1:72790dc: 
1:72790dc:         this.mode = mode;
1:72790dc:         this.trie = trie;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Set<SSTableIndex> search(Expression e)
1:72790dc:     {
1:72790dc:         Map<ByteBuffer, Set<SSTableIndex>> indexes = (e == null || e.lower == null || mode == OnDiskIndexBuilder.Mode.CONTAINS)
1:72790dc:                                                         ? trie : trie.prefixMap(e.lower.value);
1:72790dc: 
1:72790dc:         Set<SSTableIndex> view = new HashSet<>(indexes.size());
1:72790dc:         indexes.values().forEach(view::addAll);
1:72790dc:         return Sets.union(view, super.search(e));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static class Builder extends RangeTermTree.Builder
1:72790dc:     {
1:72790dc:         private final PatriciaTrie<ByteBuffer, Set<SSTableIndex>> trie;
1:72790dc: 
1:72790dc:         protected Builder(OnDiskIndexBuilder.Mode mode, final AbstractType<?> comparator)
1:72790dc:         {
1:72790dc:             super(mode, comparator);
1:72790dc:             trie = new PatriciaTrie<>(new ByteBufferKeyAnalyzer(comparator));
1:3928665: 
1:72790dc:         }
1:72790dc: 
1:72790dc:         public void addIndex(SSTableIndex index)
1:72790dc:         {
1:72790dc:             super.addIndex(index);
1:72790dc:             addTerm(index.minTerm(), index);
1:72790dc:             addTerm(index.maxTerm(), index);
1:72790dc:         }
1:72790dc: 
1:72790dc:         public TermTree build()
1:72790dc:         {
1:3928665:             return new PrefixTermTree(min, max, trie, IntervalTree.build(intervals), mode, comparator);
1:72790dc:         }
1:72790dc: 
1:72790dc:         private void addTerm(ByteBuffer term, SSTableIndex index)
1:72790dc:         {
1:72790dc:             Set<SSTableIndex> indexes = trie.get(term);
1:72790dc:             if (indexes == null)
1:72790dc:                 trie.put(term, (indexes = new HashSet<>()));
1:72790dc: 
1:72790dc:             indexes.add(index);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     private static class ByteBufferKeyAnalyzer implements KeyAnalyzer<ByteBuffer>
1:72790dc:     {
1:72790dc:         private final AbstractType<?> comparator;
1:72790dc: 
1:72790dc:         public ByteBufferKeyAnalyzer(AbstractType<?> comparator)
1:72790dc:         {
1:72790dc:             this.comparator = comparator;
1:72790dc:         }
1:72790dc: 
1:72790dc:         /**
1:72790dc:          * A bit mask where the first bit is 1 and the others are zero
1:72790dc:          */
1:72790dc:         private static final int MSB = 1 << Byte.SIZE-1;
1:72790dc: 
1:72790dc:         public int compare(ByteBuffer a, ByteBuffer b)
1:72790dc:         {
1:72790dc:             return comparator.compare(a, b);
1:72790dc:         }
1:72790dc: 
1:72790dc:         public int lengthInBits(ByteBuffer o)
1:72790dc:         {
1:72790dc:             return o.remaining() * Byte.SIZE;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public boolean isBitSet(ByteBuffer key, int bitIndex)
1:72790dc:         {
1:72790dc:             if (bitIndex >= lengthInBits(key))
1:72790dc:                 return false;
1:72790dc: 
1:72790dc:             int index = bitIndex / Byte.SIZE;
1:72790dc:             int bit = bitIndex % Byte.SIZE;
1:72790dc:             return (key.get(index) & mask(bit)) != 0;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public int bitIndex(ByteBuffer key, ByteBuffer otherKey)
1:72790dc:         {
1:72790dc:             int length = Math.max(key.remaining(), otherKey.remaining());
1:72790dc: 
1:72790dc:             boolean allNull = true;
1:72790dc:             for (int i = 0; i < length; i++)
1:72790dc:             {
1:72790dc:                 byte b1 = valueAt(key, i);
1:72790dc:                 byte b2 = valueAt(otherKey, i);
1:72790dc: 
1:72790dc:                 if (b1 != b2)
1:72790dc:                 {
1:72790dc:                     int xor = b1 ^ b2;
1:72790dc:                     for (int j = 0; j < Byte.SIZE; j++)
1:72790dc:                     {
1:72790dc:                         if ((xor & mask(j)) != 0)
1:72790dc:                             return (i * Byte.SIZE) + j;
1:72790dc:                     }
1:72790dc:                 }
1:72790dc: 
1:72790dc:                 if (b1 != 0)
1:72790dc:                     allNull = false;
1:72790dc:             }
1:72790dc: 
1:72790dc:             return allNull ? KeyAnalyzer.NULL_BIT_KEY : KeyAnalyzer.EQUAL_BIT_KEY;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public boolean isPrefix(ByteBuffer key, ByteBuffer prefix)
1:72790dc:         {
1:72790dc:             if (key.remaining() < prefix.remaining())
1:72790dc:                 return false;
1:72790dc: 
1:72790dc:             for (int i = 0; i < prefix.remaining(); i++)
1:72790dc:             {
1:72790dc:                 if (key.get(i) != prefix.get(i))
1:72790dc:                     return false;
1:72790dc:             }
1:72790dc: 
1:72790dc:             return true;
1:72790dc:         }
1:72790dc: 
1:72790dc:         /**
1:72790dc:          * Returns the {@code byte} value at the given index.
1:72790dc:          */
1:72790dc:         private byte valueAt(ByteBuffer value, int index)
1:72790dc:         {
1:72790dc:             return index >= 0 && index < value.remaining() ? value.get(index) : 0;
1:72790dc:         }
1:72790dc: 
1:72790dc:         /**
1:72790dc:          * Returns a bit mask where the given bit is set
1:72790dc:          */
1:72790dc:         private int mask(int bit)
1:72790dc:         {
1:72790dc:             return MSB >>> bit;
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3928665
/////////////////////////////////////////////////////////////////////////
1:                           IntervalTree<Term, SSTableIndex, Interval<Term, SSTableIndex>> ranges,
1:                           OnDiskIndexBuilder.Mode mode,
1:                           AbstractType<?> comparator)
1:         super(min, max, ranges, comparator);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new PrefixTermTree(min, max, trie, IntervalTree.build(intervals), mode, comparator);
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.conf.view;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.cassandra.index.sasi.SSTableIndex;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.index.sasi.utils.trie.KeyAnalyzer;
1: import org.apache.cassandra.index.sasi.utils.trie.PatriciaTrie;
1: import org.apache.cassandra.index.sasi.utils.trie.Trie;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.utils.Interval;
1: import org.apache.cassandra.utils.IntervalTree;
1: 
1: import com.google.common.collect.Sets;
1: 
1: /**
1:  * This class is an extension over RangeTermTree for string terms,
1:  * it is required because interval tree can't handle matching if search is on the
1:  * prefix of min/max of the range, so for ascii/utf8 fields we build an additional
1:  * prefix trie (including both min/max terms of the index) and do union of the results
1:  * of the prefix tree search and results from the interval tree lookup.
1:  */
1: public class PrefixTermTree extends RangeTermTree
1: {
1:     private final OnDiskIndexBuilder.Mode mode;
1:     private final Trie<ByteBuffer, Set<SSTableIndex>> trie;
1: 
1:     public PrefixTermTree(ByteBuffer min, ByteBuffer max,
1:                           Trie<ByteBuffer, Set<SSTableIndex>> trie,
0:                           IntervalTree<ByteBuffer, SSTableIndex, Interval<ByteBuffer, SSTableIndex>> ranges,
0:                           OnDiskIndexBuilder.Mode mode)
1:     {
0:         super(min, max, ranges);
1: 
1:         this.mode = mode;
1:         this.trie = trie;
1:     }
1: 
1:     public Set<SSTableIndex> search(Expression e)
1:     {
1:         Map<ByteBuffer, Set<SSTableIndex>> indexes = (e == null || e.lower == null || mode == OnDiskIndexBuilder.Mode.CONTAINS)
1:                                                         ? trie : trie.prefixMap(e.lower.value);
1: 
1:         Set<SSTableIndex> view = new HashSet<>(indexes.size());
1:         indexes.values().forEach(view::addAll);
1: 
1:         return Sets.union(view, super.search(e));
1:     }
1: 
1:     public static class Builder extends RangeTermTree.Builder
1:     {
1:         private final PatriciaTrie<ByteBuffer, Set<SSTableIndex>> trie;
1: 
1:         protected Builder(OnDiskIndexBuilder.Mode mode, final AbstractType<?> comparator)
1:         {
1:             super(mode, comparator);
1:             trie = new PatriciaTrie<>(new ByteBufferKeyAnalyzer(comparator));
1:         }
1: 
1:         public void addIndex(SSTableIndex index)
1:         {
1:             super.addIndex(index);
1:             addTerm(index.minTerm(), index);
1:             addTerm(index.maxTerm(), index);
1:         }
1: 
1:         public TermTree build()
1:         {
0:             return new PrefixTermTree(min, max, trie, IntervalTree.build(intervals), mode);
1:         }
1: 
1:         private void addTerm(ByteBuffer term, SSTableIndex index)
1:         {
1:             Set<SSTableIndex> indexes = trie.get(term);
1:             if (indexes == null)
1:                 trie.put(term, (indexes = new HashSet<>()));
1: 
1:             indexes.add(index);
1:         }
1:     }
1: 
1:     private static class ByteBufferKeyAnalyzer implements KeyAnalyzer<ByteBuffer>
1:     {
1:         private final AbstractType<?> comparator;
1: 
1:         public ByteBufferKeyAnalyzer(AbstractType<?> comparator)
1:         {
1:             this.comparator = comparator;
1:         }
1: 
1:         /**
1:          * A bit mask where the first bit is 1 and the others are zero
1:          */
1:         private static final int MSB = 1 << Byte.SIZE-1;
1: 
1:         public int compare(ByteBuffer a, ByteBuffer b)
1:         {
1:             return comparator.compare(a, b);
1:         }
1: 
1:         public int lengthInBits(ByteBuffer o)
1:         {
1:             return o.remaining() * Byte.SIZE;
1:         }
1: 
1:         public boolean isBitSet(ByteBuffer key, int bitIndex)
1:         {
1:             if (bitIndex >= lengthInBits(key))
1:                 return false;
1: 
1:             int index = bitIndex / Byte.SIZE;
1:             int bit = bitIndex % Byte.SIZE;
1:             return (key.get(index) & mask(bit)) != 0;
1:         }
1: 
1:         public int bitIndex(ByteBuffer key, ByteBuffer otherKey)
1:         {
1:             int length = Math.max(key.remaining(), otherKey.remaining());
1: 
1:             boolean allNull = true;
1:             for (int i = 0; i < length; i++)
1:             {
1:                 byte b1 = valueAt(key, i);
1:                 byte b2 = valueAt(otherKey, i);
1: 
1:                 if (b1 != b2)
1:                 {
1:                     int xor = b1 ^ b2;
1:                     for (int j = 0; j < Byte.SIZE; j++)
1:                     {
1:                         if ((xor & mask(j)) != 0)
1:                             return (i * Byte.SIZE) + j;
1:                     }
1:                 }
1: 
1:                 if (b1 != 0)
1:                     allNull = false;
1:             }
1: 
1:             return allNull ? KeyAnalyzer.NULL_BIT_KEY : KeyAnalyzer.EQUAL_BIT_KEY;
1:         }
1: 
1:         public boolean isPrefix(ByteBuffer key, ByteBuffer prefix)
1:         {
1:             if (key.remaining() < prefix.remaining())
1:                 return false;
1: 
1:             for (int i = 0; i < prefix.remaining(); i++)
1:             {
1:                 if (key.get(i) != prefix.get(i))
1:                     return false;
1:             }
1: 
1:             return true;
1:         }
1: 
1:         /**
1:          * Returns the {@code byte} value at the given index.
1:          */
1:         private byte valueAt(ByteBuffer value, int index)
1:         {
1:             return index >= 0 && index < value.remaining() ? value.get(index) : 0;
1:         }
1: 
1:         /**
1:          * Returns a bit mask where the given bit is set
1:          */
1:         private int mask(int bit)
1:         {
1:             return MSB >>> bit;
1:         }
1:     }
1: }
============================================================================