1:1491a40: /*
1:1491a40:  * Licensed to the Apache Software Foundation (ASF) under one
1:1491a40:  * or more contributor license agreements.  See the NOTICE file
1:1491a40:  * distributed with this work for additional information
1:1491a40:  * regarding copyright ownership.  The ASF licenses this file
1:1491a40:  * to you under the Apache License, Version 2.0 (the
1:1491a40:  * "License"); you may not use this file except in compliance
1:1491a40:  * with the License.  You may obtain a copy of the License at
1:1491a40:  *
1:1491a40:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1491a40:  *
1:1491a40:  * Unless required by applicable law or agreed to in writing, software
1:1491a40:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1491a40:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1491a40:  * See the License for the specific language governing permissions and
1:1491a40:  * limitations under the License.
1:1491a40:  */
1:1491a40: // Protocol Buffers - Google's data interchange format
1:1491a40: // Copyright 2008 Google Inc.  All rights reserved.
1:1491a40: // https://developers.google.com/protocol-buffers/
1:1491a40: //
1:1491a40: // Redistribution and use in source and binary forms, with or without
1:1491a40: // modification, are permitted provided that the following conditions are
1:1491a40: // met:
1:1491a40: //
1:1491a40: //     * Redistributions of source code must retain the above copyright
1:1491a40: // notice, this list of conditions and the following disclaimer.
1:1491a40: //     * Redistributions in binary form must reproduce the above
1:1491a40: // copyright notice, this list of conditions and the following disclaimer
1:1491a40: // in the documentation and/or other materials provided with the
1:1491a40: // distribution.
1:1491a40: //     * Neither the name of Google Inc. nor the names of its
1:1491a40: // contributors may be used to endorse or promote products derived from
1:1491a40: // this software without specific prior written permission.
1:1491a40: //
1:1491a40: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
1:1491a40: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
1:1491a40: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
1:1491a40: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
1:1491a40: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
1:1491a40: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
1:1491a40: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
1:1491a40: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
1:1491a40: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
1:1491a40: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
1:1491a40: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1:1491a40: package org.apache.cassandra.utils.vint;
1:1491a40: 
1:1491a40: import java.io.DataInput;
1:1491a40: import java.io.DataOutput;
1:1491a40: import java.io.IOException;
1:1491a40: 
1:1e92ce4: import io.netty.util.concurrent.FastThreadLocal;
1:1491a40: import net.nicoulaj.compilecommand.annotations.Inline;
1:1491a40: 
1:1491a40: /**
1:1491a40:  * Borrows idea from
1:1491a40:  * https://developers.google.com/protocol-buffers/docs/encoding#varints
1:1491a40:  */
1:1491a40: public class VIntCoding
1:1491a40: {
1:1491a40: 
1:68d2526:     public static long readUnsignedVInt(DataInput input) throws IOException
1:68d2526:     {
1:1491a40:         int firstByte = input.readByte();
1:1491a40: 
1:1491a40:         //Bail out early if this is one byte, necessary or it fails later
1:1491a40:         if (firstByte >= 0)
1:1491a40:             return firstByte;
1:1491a40: 
1:1491a40:         int size = numberOfExtraBytesToRead(firstByte);
1:ce63ccc:         long retval = firstByte & firstByteValueMask(size);
1:1491a40:         for (int ii = 0; ii < size; ii++)
1:1491a40:         {
1:1491a40:             byte b = input.readByte();
1:1491a40:             retval <<= 8;
1:1491a40:             retval |= b & 0xff;
1:1491a40:         }
1:1491a40: 
1:1491a40:         return retval;
1:1491a40:     }
1:1491a40: 
1:68d2526:     public static long readVInt(DataInput input) throws IOException
1:68d2526:     {
1:1491a40:         return decodeZigZag64(readUnsignedVInt(input));
1:1491a40:     }
1:1491a40: 
1:1491a40:     // & this with the first byte to give the value part for a given extraBytesToRead encoded in the byte
1:1491a40:     public static int firstByteValueMask(int extraBytesToRead)
1:1491a40:     {
1:1491a40:         // by including the known 0bit in the mask, we can use this for encodeExtraBytesToRead
1:1491a40:         return 0xff >> extraBytesToRead;
1:1491a40:     }
1:1491a40: 
1:1491a40:     public static int encodeExtraBytesToRead(int extraBytesToRead)
1:1491a40:     {
1:1491a40:         // because we have an extra bit in the value mask, we just need to invert it
1:1491a40:         return ~firstByteValueMask(extraBytesToRead);
1:1491a40:     }
1:1491a40: 
1:1491a40:     public static int numberOfExtraBytesToRead(int firstByte)
1:1491a40:     {
1:1491a40:         // we count number of set upper bits; so if we simply invert all of the bits, we're golden
1:1491a40:         // this is aided by the fact that we only work with negative numbers, so when upcast to an int all
1:1491a40:         // of the new upper bits are also set, so by inverting we set all of them to zero
1:1491a40:         return Integer.numberOfLeadingZeros(~firstByte) - 24;
1:1491a40:     }
1:1491a40: 
1:1e92ce4:     protected static final FastThreadLocal<byte[]> encodingBuffer = new FastThreadLocal<byte[]>()
1:1491a40:     {
1:1491a40:         @Override
1:1491a40:         public byte[] initialValue()
1:1491a40:         {
1:1491a40:             return new byte[9];
1:1491a40:         }
1:1491a40:     };
1:1491a40: 
1:68d2526:     public static void writeUnsignedVInt(long value, DataOutput output) throws IOException
1:68d2526:     {
1:1491a40:         int size = VIntCoding.computeUnsignedVIntSize(value);
1:1491a40:         if (size == 1)
1:1491a40:         {
1:1491a40:             output.write((int)value);
1:1491a40:             return;
1:1491a40:         }
1:1491a40: 
1:1491a40:         output.write(VIntCoding.encodeVInt(value, size), 0, size);
1:1491a40:     }
1:1491a40: 
1:1491a40:     @Inline
1:68d2526:     public static byte[] encodeVInt(long value, int size)
1:68d2526:     {
1:1491a40:         byte encodingSpace[] = encodingBuffer.get();
1:1491a40:         int extraBytes = size - 1;
1:1491a40: 
1:1491a40:         for (int i = extraBytes ; i >= 0; --i)
1:1491a40:         {
1:1491a40:             encodingSpace[i] = (byte) value;
1:1491a40:             value >>= 8;
1:1491a40:         }
1:1491a40:         encodingSpace[0] |= VIntCoding.encodeExtraBytesToRead(extraBytes);
1:1491a40:         return encodingSpace;
1:1491a40:     }
1:1491a40: 
1:68d2526:     public static void writeVInt(long value, DataOutput output) throws IOException
1:68d2526:     {
1:1491a40:         writeUnsignedVInt(encodeZigZag64(value), output);
1:1491a40:     }
1:1491a40: 
1:1491a40:     /**
1:1491a40:      * Decode a ZigZag-encoded 64-bit value.  ZigZag encodes signed integers
1:1491a40:      * into values that can be efficiently encoded with varint.  (Otherwise,
1:1491a40:      * negative values must be sign-extended to 64 bits to be varint encoded,
1:1491a40:      * thus always taking 10 bytes on the wire.)
1:1491a40:      *
1:1491a40:      * @param n An unsigned 64-bit integer, stored in a signed int because
1:1491a40:      *          Java has no explicit unsigned support.
1:1491a40:      * @return A signed 64-bit integer.
1:1491a40:      */
1:68d2526:     public static long decodeZigZag64(final long n)
1:68d2526:     {
1:1491a40:         return (n >>> 1) ^ -(n & 1);
1:1491a40:     }
1:1491a40: 
1:1491a40:     /**
1:1491a40:      * Encode a ZigZag-encoded 64-bit value.  ZigZag encodes signed integers
1:1491a40:      * into values that can be efficiently encoded with varint.  (Otherwise,
1:1491a40:      * negative values must be sign-extended to 64 bits to be varint encoded,
1:1491a40:      * thus always taking 10 bytes on the wire.)
1:1491a40:      *
1:1491a40:      * @param n A signed 64-bit integer.
1:1491a40:      * @return An unsigned 64-bit integer, stored in a signed int because
1:1491a40:      *         Java has no explicit unsigned support.
1:1491a40:      */
1:68d2526:     public static long encodeZigZag64(final long n)
1:68d2526:     {
1:1491a40:         // Note:  the right-shift must be arithmetic
1:1491a40:         return (n << 1) ^ (n >> 63);
1:1491a40:     }
1:1491a40: 
1:1491a40:     /** Compute the number of bytes that would be needed to encode a varint. */
1:68d2526:     public static int computeVIntSize(final long param)
1:68d2526:     {
1:1491a40:         return computeUnsignedVIntSize(encodeZigZag64(param));
1:1491a40:     }
1:1491a40: 
1:1491a40:     /** Compute the number of bytes that would be needed to encode an unsigned varint. */
1:68d2526:     public static int computeUnsignedVIntSize(final long value)
1:68d2526:     {
1:1491a40:         int magnitude = Long.numberOfLeadingZeros(value | 1); // | with 1 to ensure magntiude <= 63, so (63 - 1) / 7 <= 8
1:1491a40:         return 9 - ((magnitude - 1) / 7);
1:1491a40:     }
1:1491a40: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public static long readUnsignedVInt(DataInput input) throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static long readVInt(DataInput input) throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static void writeUnsignedVInt(long value, DataOutput output) throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static byte[] encodeVInt(long value, int size)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static void writeVInt(long value, DataOutput output) throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static long decodeZigZag64(final long n)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static long encodeZigZag64(final long n)
1:     {
1:     public static int computeVIntSize(final long param)
1:     {
1:     public static int computeUnsignedVIntSize(final long value)
1:     {
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.concurrent.FastThreadLocal;
/////////////////////////////////////////////////////////////////////////
1:     protected static final FastThreadLocal<byte[]> encodingBuffer = new FastThreadLocal<byte[]>()
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1:         long retval = firstByte & firstByteValueMask(size);
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:1491a40
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: // Protocol Buffers - Google's data interchange format
1: // Copyright 2008 Google Inc.  All rights reserved.
1: // https://developers.google.com/protocol-buffers/
1: //
1: // Redistribution and use in source and binary forms, with or without
1: // modification, are permitted provided that the following conditions are
1: // met:
1: //
1: //     * Redistributions of source code must retain the above copyright
1: // notice, this list of conditions and the following disclaimer.
1: //     * Redistributions in binary form must reproduce the above
1: // copyright notice, this list of conditions and the following disclaimer
1: // in the documentation and/or other materials provided with the
1: // distribution.
1: //     * Neither the name of Google Inc. nor the names of its
1: // contributors may be used to endorse or promote products derived from
1: // this software without specific prior written permission.
1: //
1: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
1: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
1: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
1: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
1: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
1: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
1: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
1: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
1: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
1: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
1: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1: package org.apache.cassandra.utils.vint;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import net.nicoulaj.compilecommand.annotations.Inline;
1: 
1: /**
1:  * Borrows idea from
1:  * https://developers.google.com/protocol-buffers/docs/encoding#varints
1:  */
1: public class VIntCoding
1: {
1: 
0:     public static long readUnsignedVInt(DataInput input) throws IOException {
1:         int firstByte = input.readByte();
1: 
1:         //Bail out early if this is one byte, necessary or it fails later
1:         if (firstByte >= 0)
1:             return firstByte;
1: 
1:         int size = numberOfExtraBytesToRead(firstByte);
0:         long retval = firstByte & firstByteValueMask(size);;
1:         for (int ii = 0; ii < size; ii++)
1:         {
1:             byte b = input.readByte();
1:             retval <<= 8;
1:             retval |= b & 0xff;
1:         }
1: 
1:         return retval;
1:     }
1: 
0:     public static long readVInt(DataInput input) throws IOException {
1:         return decodeZigZag64(readUnsignedVInt(input));
1:     }
1: 
1:     // & this with the first byte to give the value part for a given extraBytesToRead encoded in the byte
1:     public static int firstByteValueMask(int extraBytesToRead)
1:     {
1:         // by including the known 0bit in the mask, we can use this for encodeExtraBytesToRead
1:         return 0xff >> extraBytesToRead;
1:     }
1: 
1:     public static int encodeExtraBytesToRead(int extraBytesToRead)
1:     {
1:         // because we have an extra bit in the value mask, we just need to invert it
1:         return ~firstByteValueMask(extraBytesToRead);
1:     }
1: 
1:     public static int numberOfExtraBytesToRead(int firstByte)
1:     {
1:         // we count number of set upper bits; so if we simply invert all of the bits, we're golden
1:         // this is aided by the fact that we only work with negative numbers, so when upcast to an int all
1:         // of the new upper bits are also set, so by inverting we set all of them to zero
1:         return Integer.numberOfLeadingZeros(~firstByte) - 24;
1:     }
1: 
0:     protected static final ThreadLocal<byte[]> encodingBuffer = new ThreadLocal<byte[]>()
1:     {
1:         @Override
1:         public byte[] initialValue()
1:         {
1:             return new byte[9];
1:         }
1:     };
1: 
0:     public static void writeUnsignedVInt(long value, DataOutput output) throws IOException {
1:         int size = VIntCoding.computeUnsignedVIntSize(value);
1:         if (size == 1)
1:         {
1:             output.write((int)value);
1:             return;
1:         }
1: 
1:         output.write(VIntCoding.encodeVInt(value, size), 0, size);
1:     }
1: 
1:     @Inline
0:     public static byte[] encodeVInt(long value, int size) {
1:         byte encodingSpace[] = encodingBuffer.get();
1:         int extraBytes = size - 1;
1: 
1:         for (int i = extraBytes ; i >= 0; --i)
1:         {
1:             encodingSpace[i] = (byte) value;
1:             value >>= 8;
1:         }
1:         encodingSpace[0] |= VIntCoding.encodeExtraBytesToRead(extraBytes);
1:         return encodingSpace;
1:     }
1: 
0:     public static void writeVInt(long value, DataOutput output) throws IOException {
1:         writeUnsignedVInt(encodeZigZag64(value), output);
1:     }
1: 
1:     /**
1:      * Decode a ZigZag-encoded 64-bit value.  ZigZag encodes signed integers
1:      * into values that can be efficiently encoded with varint.  (Otherwise,
1:      * negative values must be sign-extended to 64 bits to be varint encoded,
1:      * thus always taking 10 bytes on the wire.)
1:      *
1:      * @param n An unsigned 64-bit integer, stored in a signed int because
1:      *          Java has no explicit unsigned support.
1:      * @return A signed 64-bit integer.
1:      */
0:     public static long decodeZigZag64(final long n) {
1:         return (n >>> 1) ^ -(n & 1);
1:     }
1: 
1:     /**
1:      * Encode a ZigZag-encoded 64-bit value.  ZigZag encodes signed integers
1:      * into values that can be efficiently encoded with varint.  (Otherwise,
1:      * negative values must be sign-extended to 64 bits to be varint encoded,
1:      * thus always taking 10 bytes on the wire.)
1:      *
1:      * @param n A signed 64-bit integer.
1:      * @return An unsigned 64-bit integer, stored in a signed int because
1:      *         Java has no explicit unsigned support.
1:      */
0:     public static long encodeZigZag64(final long n) {
1:         // Note:  the right-shift must be arithmetic
1:         return (n << 1) ^ (n >> 63);
1:     }
1: 
1:     /** Compute the number of bytes that would be needed to encode a varint. */
0:     public static int computeVIntSize(final long param) {
1:         return computeUnsignedVIntSize(encodeZigZag64(param));
1:     }
1: 
1:     /** Compute the number of bytes that would be needed to encode an unsigned varint. */
0:     public static int computeUnsignedVIntSize(final long value) {
1:         int magnitude = Long.numberOfLeadingZeros(value | 1); // | with 1 to ensure magntiude <= 63, so (63 - 1) / 7 <= 8
1:         return 9 - ((magnitude - 1) / 7);
1:     }
1: }
============================================================================