1:2457599: /*
1:2457599:  * Licensed to the Apache Software Foundation (ASF) under one
1:2457599:  * or more contributor license agreements.  See the NOTICE file
1:2457599:  * distributed with this work for additional information
1:2457599:  * regarding copyright ownership.  The ASF licenses this file
1:2457599:  * to you under the Apache License, Version 2.0 (the
1:2457599:  * "License"); you may not use this file except in compliance
1:2457599:  * with the License.  You may obtain a copy of the License at
1:2457599:  *
1:2457599:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2457599:  *
1:2457599:  * Unless required by applicable law or agreed to in writing, software
1:2457599:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2457599:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2457599:  * See the License for the specific language governing permissions and
1:2457599:  * limitations under the License.
1:2457599:  */
1:2457599: package org.apache.cassandra.db;
1:2457599: 
1:f4233eb: import java.util.Collections;
1:2457599: import java.util.Iterator;
1:2457599: 
1:2457599: import com.google.common.base.Objects;
1:2457599: 
1:2457599: import org.apache.cassandra.db.rows.*;
1:c055ab9: import org.apache.cassandra.db.rows.EncodingStats;
1:2457599: import org.apache.cassandra.utils.ObjectSizes;
1:2457599: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:2457599: 
1:2457599: /**
1:2457599:  * A mutable implementation of {@code DeletionInfo}.
1:2457599:  */
1:2457599: public class MutableDeletionInfo implements DeletionInfo
1:2457599: {
1:2457599:     private static final long EMPTY_SIZE = ObjectSizes.measure(new MutableDeletionInfo(0, 0));
1:2457599: 
1:2457599:     /**
1:2457599:      * This represents a deletion of the entire partition. We can't represent this within the RangeTombstoneList, so it's
1:2457599:      * kept separately. This also slightly optimizes the common case of a full partition deletion.
1:2457599:      */
1:2457599:     private DeletionTime partitionDeletion;
1:2457599: 
1:2457599:     /**
1:2457599:      * A list of range tombstones within the partition.  This is left as null if there are no range tombstones
1:2457599:      * (to save an allocation (since it's a common case).
1:2457599:      */
1:2457599:     private RangeTombstoneList ranges;
1:2457599: 
1:2457599:     /**
1:2457599:      * Creates a DeletionInfo with only a top-level (row) tombstone.
1:2457599:      * @param markedForDeleteAt the time after which the entire row should be considered deleted
1:2457599:      * @param localDeletionTime what time the deletion write was applied locally (for purposes of
1:2457599:      *                          purging the tombstone after gc_grace_seconds).
1:2457599:      */
1:2457599:     public MutableDeletionInfo(long markedForDeleteAt, int localDeletionTime)
1:2457599:     {
1:2457599:         // Pre-1.1 node may return MIN_VALUE for non-deleted container, but the new default is MAX_VALUE
1:2457599:         // (see CASSANDRA-3872)
1:2457599:         this(new DeletionTime(markedForDeleteAt, localDeletionTime == Integer.MIN_VALUE ? Integer.MAX_VALUE : localDeletionTime));
1:2457599:     }
1:2457599: 
1:2457599:     public MutableDeletionInfo(DeletionTime partitionDeletion)
1:2457599:     {
1:2457599:         this(partitionDeletion, null);
1:2457599:     }
1:2457599: 
1:2457599:     public MutableDeletionInfo(DeletionTime partitionDeletion, RangeTombstoneList ranges)
1:2457599:     {
1:2457599:         this.partitionDeletion = partitionDeletion;
1:2457599:         this.ranges = ranges;
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * Returns a new DeletionInfo that has no top-level tombstone or any range tombstones.
1:2457599:      */
1:2457599:     public static MutableDeletionInfo live()
1:2457599:     {
1:2457599:         return new MutableDeletionInfo(DeletionTime.LIVE);
1:2457599:     }
1:2457599: 
1:2457599:     public MutableDeletionInfo mutableCopy()
1:2457599:     {
1:2457599:         return new MutableDeletionInfo(partitionDeletion, ranges == null ? null : ranges.copy());
1:2457599:     }
1:2457599: 
1:2457599:     public MutableDeletionInfo copy(AbstractAllocator allocator)
1:2457599:     {
1:2457599:         RangeTombstoneList rangesCopy = null;
1:2457599:         if (ranges != null)
1:2457599:              rangesCopy = ranges.copy(allocator);
1:2457599: 
1:2457599:         return new MutableDeletionInfo(partitionDeletion, rangesCopy);
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * Returns whether this DeletionInfo is live, that is deletes no columns.
1:2457599:      */
1:2457599:     public boolean isLive()
1:2457599:     {
1:2457599:         return partitionDeletion.isLive() && (ranges == null || ranges.isEmpty());
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * Potentially replaces the top-level tombstone with another, keeping whichever has the higher markedForDeleteAt
1:2457599:      * timestamp.
1:2457599:      * @param newInfo the deletion time to add to this deletion info.
1:2457599:      */
1:2457599:     public void add(DeletionTime newInfo)
1:2457599:     {
1:2457599:         if (newInfo.supersedes(partitionDeletion))
1:2457599:             partitionDeletion = newInfo;
1:2457599:     }
1:2457599: 
1:2457599:     public void add(RangeTombstone tombstone, ClusteringComparator comparator)
1:2457599:     {
1:2457599:         if (ranges == null)
1:2457599:             ranges = new RangeTombstoneList(comparator, 1);
1:2457599: 
1:2457599:         ranges.add(tombstone);
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * Combines another DeletionInfo with this one and returns the result.  Whichever top-level tombstone
1:2457599:      * has the higher markedForDeleteAt timestamp will be kept, along with its localDeletionTime.  The
1:2457599:      * range tombstones will be combined.
1:2457599:      *
1:2457599:      * @return this object.
1:2457599:      */
1:2457599:     public DeletionInfo add(DeletionInfo newInfo)
1:2457599:     {
1:2457599:         add(newInfo.getPartitionDeletion());
1:2457599: 
1:2457599:         // We know MutableDeletionInfo is the only impelementation and we're not mutating it, it's just to get access to the
1:2457599:         // RangeTombstoneList directly.
1:2457599:         assert newInfo instanceof MutableDeletionInfo;
1:2457599:         RangeTombstoneList newRanges = ((MutableDeletionInfo)newInfo).ranges;
1:2457599: 
1:2457599:         if (ranges == null)
1:2457599:             ranges = newRanges == null ? null : newRanges.copy();
1:2457599:         else if (newRanges != null)
1:2457599:             ranges.addAll(newRanges);
1:2457599: 
1:2457599:         return this;
1:2457599:     }
1:2457599: 
1:2457599:     public DeletionTime getPartitionDeletion()
1:2457599:     {
1:2457599:         return partitionDeletion;
1:2457599:     }
1:2457599: 
1:2457599:     // Use sparingly, not the most efficient thing
1:2457599:     public Iterator<RangeTombstone> rangeIterator(boolean reversed)
1:2457599:     {
1:f4233eb:         return ranges == null ? Collections.emptyIterator() : ranges.iterator(reversed);
1:2457599:     }
1:2457599: 
1:2457599:     public Iterator<RangeTombstone> rangeIterator(Slice slice, boolean reversed)
1:2457599:     {
1:f4233eb:         return ranges == null ? Collections.emptyIterator() : ranges.iterator(slice, reversed);
1:2457599:     }
1:2457599: 
1:2457599:     public RangeTombstone rangeCovering(Clustering name)
1:2457599:     {
1:2457599:         return ranges == null ? null : ranges.search(name);
1:2457599:     }
1:2457599: 
1:2457599:     public int dataSize()
1:2457599:     {
1:2457599:         int size = TypeSizes.sizeof(partitionDeletion.markedForDeleteAt());
1:2457599:         return size + (ranges == null ? 0 : ranges.dataSize());
1:2457599:     }
1:2457599: 
1:2457599:     public boolean hasRanges()
1:2457599:     {
1:2457599:         return ranges != null && !ranges.isEmpty();
1:2457599:     }
1:2457599: 
1:2457599:     public int rangeCount()
1:2457599:     {
1:2457599:         return hasRanges() ? ranges.size() : 0;
1:2457599:     }
1:2457599: 
1:2457599:     public long maxTimestamp()
1:2457599:     {
1:2457599:         return ranges == null ? partitionDeletion.markedForDeleteAt() : Math.max(partitionDeletion.markedForDeleteAt(), ranges.maxMarkedAt());
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * Whether this deletion info may modify the provided one if added to it.
1:2457599:      */
1:2457599:     public boolean mayModify(DeletionInfo delInfo)
1:2457599:     {
1:2457599:         return partitionDeletion.compareTo(delInfo.getPartitionDeletion()) > 0 || hasRanges();
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public String toString()
1:2457599:     {
1:2457599:         if (ranges == null || ranges.isEmpty())
1:2457599:             return String.format("{%s}", partitionDeletion);
1:2457599:         else
1:2457599:             return String.format("{%s, ranges=%s}", partitionDeletion, rangesAsString());
1:2457599:     }
1:2457599: 
1:2457599:     private String rangesAsString()
1:2457599:     {
1:2457599:         assert !ranges.isEmpty();
1:2457599:         StringBuilder sb = new StringBuilder();
1:2457599:         ClusteringComparator cc = ranges.comparator();
1:2457599:         Iterator<RangeTombstone> iter = rangeIterator(false);
1:2457599:         while (iter.hasNext())
1:2457599:         {
1:2457599:             RangeTombstone i = iter.next();
1:2457599:             sb.append(i.deletedSlice().toString(cc));
1:2457599:             sb.append('@');
1:2457599:             sb.append(i.deletionTime());
1:2457599:         }
1:2457599:         return sb.toString();
1:2457599:     }
1:2457599: 
1:2457599:     // Updates all the timestamp of the deletion contained in this DeletionInfo to be {@code timestamp}.
1:2457599:     public DeletionInfo updateAllTimestamp(long timestamp)
1:2457599:     {
1:2457599:         if (partitionDeletion.markedForDeleteAt() != Long.MIN_VALUE)
1:2457599:             partitionDeletion = new DeletionTime(timestamp, partitionDeletion.localDeletionTime());
1:2457599: 
1:2457599:         if (ranges != null)
1:2457599:             ranges.updateAllTimestamp(timestamp);
1:2457599:         return this;
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public boolean equals(Object o)
1:2457599:     {
1:2457599:         if(!(o instanceof MutableDeletionInfo))
1:2457599:             return false;
1:2457599:         MutableDeletionInfo that = (MutableDeletionInfo)o;
1:2457599:         return partitionDeletion.equals(that.partitionDeletion) && Objects.equal(ranges, that.ranges);
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public final int hashCode()
1:2457599:     {
1:2457599:         return Objects.hashCode(partitionDeletion, ranges);
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public long unsharedHeapSize()
1:2457599:     {
1:2457599:         return EMPTY_SIZE + partitionDeletion.unsharedHeapSize() + (ranges == null ? 0 : ranges.unsharedHeapSize());
1:2457599:     }
1:2457599: 
1:c055ab9:     public void collectStats(EncodingStats.Collector collector)
1:2457599:     {
1:2457599:         collector.update(partitionDeletion);
1:2457599:         if (ranges != null)
1:2457599:             ranges.collectStats(collector);
1:2457599:     }
1:2457599: 
1:2457599:     public static Builder builder(DeletionTime partitionLevelDeletion, ClusteringComparator comparator, boolean reversed)
1:2457599:     {
1:2457599:         return new Builder(partitionLevelDeletion, comparator, reversed);
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * Builds DeletionInfo object from (in order) range tombstone markers.
1:2457599:      */
1:2457599:     public static class Builder
1:2457599:     {
1:2457599:         private final MutableDeletionInfo deletion;
1:2457599:         private final ClusteringComparator comparator;
1:2457599: 
1:2457599:         private final boolean reversed;
1:2457599: 
1:2457599:         private RangeTombstoneMarker openMarker;
1:2457599: 
1:2457599:         private Builder(DeletionTime partitionLevelDeletion, ClusteringComparator comparator, boolean reversed)
1:2457599:         {
1:2457599:             this.deletion = new MutableDeletionInfo(partitionLevelDeletion);
1:2457599:             this.comparator = comparator;
1:2457599:             this.reversed = reversed;
1:2457599:         }
1:2457599: 
1:2457599:         public void add(RangeTombstoneMarker marker)
1:2457599:         {
1:2457599:             // We need to start by the close case in case that's a boundary
1:2457599: 
1:2457599:             if (marker.isClose(reversed))
1:2457599:             {
1:2457599:                 DeletionTime openDeletion = openMarker.openDeletionTime(reversed);
1:2457599:                 assert marker.closeDeletionTime(reversed).equals(openDeletion);
1:2457599: 
1:2cc26eb:                 ClusteringBound open = openMarker.openBound(reversed);
1:2cc26eb:                 ClusteringBound close = marker.closeBound(reversed);
1:2457599: 
1:2457599:                 Slice slice = reversed ? Slice.make(close, open) : Slice.make(open, close);
1:2457599:                 deletion.add(new RangeTombstone(slice, openDeletion), comparator);
1:2457599:             }
1:2457599: 
1:2457599:             if (marker.isOpen(reversed))
1:2457599:             {
1:2457599:                 openMarker = marker;
1:2457599:             }
1:2457599:         }
1:2457599: 
1:2457599:         public MutableDeletionInfo build()
1:2457599:         {
1:2457599:             return deletion;
1:2457599:         }
1:2457599:     }
1:2457599: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f4233eb
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:         return ranges == null ? Collections.emptyIterator() : ranges.iterator(reversed);
1:         return ranges == null ? Collections.emptyIterator() : ranges.iterator(slice, reversed);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:2cc26eb
/////////////////////////////////////////////////////////////////////////
1:                 ClusteringBound open = openMarker.openBound(reversed);
1:                 ClusteringBound close = marker.closeBound(reversed);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.EncodingStats;
/////////////////////////////////////////////////////////////////////////
1:     public void collectStats(EncodingStats.Collector collector)
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.util.Iterator;
1: 
1: import com.google.common.base.Objects;
0: import com.google.common.collect.Iterators;
1: 
1: import org.apache.cassandra.db.rows.*;
0: import org.apache.cassandra.db.rows.RowStats;
1: import org.apache.cassandra.utils.ObjectSizes;
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
1: 
1: /**
1:  * A mutable implementation of {@code DeletionInfo}.
1:  */
1: public class MutableDeletionInfo implements DeletionInfo
1: {
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new MutableDeletionInfo(0, 0));
1: 
1:     /**
1:      * This represents a deletion of the entire partition. We can't represent this within the RangeTombstoneList, so it's
1:      * kept separately. This also slightly optimizes the common case of a full partition deletion.
1:      */
1:     private DeletionTime partitionDeletion;
1: 
1:     /**
1:      * A list of range tombstones within the partition.  This is left as null if there are no range tombstones
1:      * (to save an allocation (since it's a common case).
1:      */
1:     private RangeTombstoneList ranges;
1: 
1:     /**
1:      * Creates a DeletionInfo with only a top-level (row) tombstone.
1:      * @param markedForDeleteAt the time after which the entire row should be considered deleted
1:      * @param localDeletionTime what time the deletion write was applied locally (for purposes of
1:      *                          purging the tombstone after gc_grace_seconds).
1:      */
1:     public MutableDeletionInfo(long markedForDeleteAt, int localDeletionTime)
1:     {
1:         // Pre-1.1 node may return MIN_VALUE for non-deleted container, but the new default is MAX_VALUE
1:         // (see CASSANDRA-3872)
1:         this(new DeletionTime(markedForDeleteAt, localDeletionTime == Integer.MIN_VALUE ? Integer.MAX_VALUE : localDeletionTime));
1:     }
1: 
1:     public MutableDeletionInfo(DeletionTime partitionDeletion)
1:     {
1:         this(partitionDeletion, null);
1:     }
1: 
1:     public MutableDeletionInfo(DeletionTime partitionDeletion, RangeTombstoneList ranges)
1:     {
1:         this.partitionDeletion = partitionDeletion;
1:         this.ranges = ranges;
1:     }
1: 
1:     /**
1:      * Returns a new DeletionInfo that has no top-level tombstone or any range tombstones.
1:      */
1:     public static MutableDeletionInfo live()
1:     {
1:         return new MutableDeletionInfo(DeletionTime.LIVE);
1:     }
1: 
1:     public MutableDeletionInfo mutableCopy()
1:     {
1:         return new MutableDeletionInfo(partitionDeletion, ranges == null ? null : ranges.copy());
1:     }
1: 
1:     public MutableDeletionInfo copy(AbstractAllocator allocator)
1:     {
1:         RangeTombstoneList rangesCopy = null;
1:         if (ranges != null)
1:              rangesCopy = ranges.copy(allocator);
1: 
1:         return new MutableDeletionInfo(partitionDeletion, rangesCopy);
1:     }
1: 
1:     /**
1:      * Returns whether this DeletionInfo is live, that is deletes no columns.
1:      */
1:     public boolean isLive()
1:     {
1:         return partitionDeletion.isLive() && (ranges == null || ranges.isEmpty());
1:     }
1: 
1:     /**
1:      * Potentially replaces the top-level tombstone with another, keeping whichever has the higher markedForDeleteAt
1:      * timestamp.
1:      * @param newInfo the deletion time to add to this deletion info.
1:      */
1:     public void add(DeletionTime newInfo)
1:     {
1:         if (newInfo.supersedes(partitionDeletion))
1:             partitionDeletion = newInfo;
1:     }
1: 
1:     public void add(RangeTombstone tombstone, ClusteringComparator comparator)
1:     {
1:         if (ranges == null)
1:             ranges = new RangeTombstoneList(comparator, 1);
1: 
1:         ranges.add(tombstone);
1:     }
1: 
1:     /**
1:      * Combines another DeletionInfo with this one and returns the result.  Whichever top-level tombstone
1:      * has the higher markedForDeleteAt timestamp will be kept, along with its localDeletionTime.  The
1:      * range tombstones will be combined.
1:      *
1:      * @return this object.
1:      */
1:     public DeletionInfo add(DeletionInfo newInfo)
1:     {
1:         add(newInfo.getPartitionDeletion());
1: 
1:         // We know MutableDeletionInfo is the only impelementation and we're not mutating it, it's just to get access to the
1:         // RangeTombstoneList directly.
1:         assert newInfo instanceof MutableDeletionInfo;
1:         RangeTombstoneList newRanges = ((MutableDeletionInfo)newInfo).ranges;
1: 
1:         if (ranges == null)
1:             ranges = newRanges == null ? null : newRanges.copy();
1:         else if (newRanges != null)
1:             ranges.addAll(newRanges);
1: 
1:         return this;
1:     }
1: 
1:     public DeletionTime getPartitionDeletion()
1:     {
1:         return partitionDeletion;
1:     }
1: 
1:     // Use sparingly, not the most efficient thing
1:     public Iterator<RangeTombstone> rangeIterator(boolean reversed)
1:     {
0:         return ranges == null ? Iterators.<RangeTombstone>emptyIterator() : ranges.iterator(reversed);
1:     }
1: 
1:     public Iterator<RangeTombstone> rangeIterator(Slice slice, boolean reversed)
1:     {
0:         return ranges == null ? Iterators.<RangeTombstone>emptyIterator() : ranges.iterator(slice, reversed);
1:     }
1: 
1:     public RangeTombstone rangeCovering(Clustering name)
1:     {
1:         return ranges == null ? null : ranges.search(name);
1:     }
1: 
1:     public int dataSize()
1:     {
1:         int size = TypeSizes.sizeof(partitionDeletion.markedForDeleteAt());
1:         return size + (ranges == null ? 0 : ranges.dataSize());
1:     }
1: 
1:     public boolean hasRanges()
1:     {
1:         return ranges != null && !ranges.isEmpty();
1:     }
1: 
1:     public int rangeCount()
1:     {
1:         return hasRanges() ? ranges.size() : 0;
1:     }
1: 
1:     public long maxTimestamp()
1:     {
1:         return ranges == null ? partitionDeletion.markedForDeleteAt() : Math.max(partitionDeletion.markedForDeleteAt(), ranges.maxMarkedAt());
1:     }
1: 
1:     /**
1:      * Whether this deletion info may modify the provided one if added to it.
1:      */
1:     public boolean mayModify(DeletionInfo delInfo)
1:     {
1:         return partitionDeletion.compareTo(delInfo.getPartitionDeletion()) > 0 || hasRanges();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         if (ranges == null || ranges.isEmpty())
1:             return String.format("{%s}", partitionDeletion);
1:         else
1:             return String.format("{%s, ranges=%s}", partitionDeletion, rangesAsString());
1:     }
1: 
1:     private String rangesAsString()
1:     {
1:         assert !ranges.isEmpty();
1:         StringBuilder sb = new StringBuilder();
1:         ClusteringComparator cc = ranges.comparator();
1:         Iterator<RangeTombstone> iter = rangeIterator(false);
1:         while (iter.hasNext())
1:         {
1:             RangeTombstone i = iter.next();
1:             sb.append(i.deletedSlice().toString(cc));
1:             sb.append('@');
1:             sb.append(i.deletionTime());
1:         }
1:         return sb.toString();
1:     }
1: 
1:     // Updates all the timestamp of the deletion contained in this DeletionInfo to be {@code timestamp}.
1:     public DeletionInfo updateAllTimestamp(long timestamp)
1:     {
1:         if (partitionDeletion.markedForDeleteAt() != Long.MIN_VALUE)
1:             partitionDeletion = new DeletionTime(timestamp, partitionDeletion.localDeletionTime());
1: 
1:         if (ranges != null)
1:             ranges.updateAllTimestamp(timestamp);
1:         return this;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if(!(o instanceof MutableDeletionInfo))
1:             return false;
1:         MutableDeletionInfo that = (MutableDeletionInfo)o;
1:         return partitionDeletion.equals(that.partitionDeletion) && Objects.equal(ranges, that.ranges);
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
1:         return Objects.hashCode(partitionDeletion, ranges);
1:     }
1: 
1:     @Override
1:     public long unsharedHeapSize()
1:     {
1:         return EMPTY_SIZE + partitionDeletion.unsharedHeapSize() + (ranges == null ? 0 : ranges.unsharedHeapSize());
1:     }
1: 
0:     public void collectStats(RowStats.Collector collector)
1:     {
1:         collector.update(partitionDeletion);
1:         if (ranges != null)
1:             ranges.collectStats(collector);
1:     }
1: 
1:     public static Builder builder(DeletionTime partitionLevelDeletion, ClusteringComparator comparator, boolean reversed)
1:     {
1:         return new Builder(partitionLevelDeletion, comparator, reversed);
1:     }
1: 
1:     /**
1:      * Builds DeletionInfo object from (in order) range tombstone markers.
1:      */
1:     public static class Builder
1:     {
1:         private final MutableDeletionInfo deletion;
1:         private final ClusteringComparator comparator;
1: 
1:         private final boolean reversed;
1: 
1:         private RangeTombstoneMarker openMarker;
1: 
1:         private Builder(DeletionTime partitionLevelDeletion, ClusteringComparator comparator, boolean reversed)
1:         {
1:             this.deletion = new MutableDeletionInfo(partitionLevelDeletion);
1:             this.comparator = comparator;
1:             this.reversed = reversed;
1:         }
1: 
1:         public void add(RangeTombstoneMarker marker)
1:         {
1:             // We need to start by the close case in case that's a boundary
1: 
1:             if (marker.isClose(reversed))
1:             {
1:                 DeletionTime openDeletion = openMarker.openDeletionTime(reversed);
1:                 assert marker.closeDeletionTime(reversed).equals(openDeletion);
1: 
0:                 Slice.Bound open = openMarker.openBound(reversed);
0:                 Slice.Bound close = marker.closeBound(reversed);
1: 
1:                 Slice slice = reversed ? Slice.make(close, open) : Slice.make(open, close);
1:                 deletion.add(new RangeTombstone(slice, openDeletion), comparator);
1:             }
1: 
1:             if (marker.isOpen(reversed))
1:             {
1:                 openMarker = marker;
1:             }
1:         }
1: 
1:         public MutableDeletionInfo build()
1:         {
1:             return deletion;
1:         }
1:     }
1: }
============================================================================