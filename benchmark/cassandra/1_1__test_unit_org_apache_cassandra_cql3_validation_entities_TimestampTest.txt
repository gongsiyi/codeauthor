1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
1:01115f7:  */
1:01115f7: package org.apache.cassandra.cql3.validation.entities;
1:01115f7: 
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import junit.framework.Assert;
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: 
1:01115f7: import static junit.framework.Assert.assertNull;
1:01115f7: import static org.junit.Assert.assertTrue;
1:01115f7: 
1:01115f7: public class TimestampTest extends CQLTester
1:01115f7: {
1:01115f7:     @Test
1:01115f7:     public void testNegativeTimestamps() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, v) VALUES (?, ?) USING TIMESTAMP ?", 1, 1, -42L);
1:01115f7:         assertRows(execute("SELECT writetime(v) FROM %s WHERE k = ?", 1),
1:01115f7:             row(-42L)
1:01115f7:         );
1:01115f7: 
1:01115f7:         assertInvalid("INSERT INTO %s (k, v) VALUES (?, ?) USING TIMESTAMP ?", 2, 2, Long.MIN_VALUE);
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test timestmp and ttl
1:01115f7:      * migrated from cql_tests.py:TestCQL.timestamp_and_ttl_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testTimestampTTL() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, c text, d text)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, c) VALUES (1, 'test')");
1:01115f7:         execute("INSERT INTO %s (k, c) VALUES (2, 'test') USING TTL 400");
1:01115f7: 
1:01115f7:         Object[][] res = getRows(execute("SELECT k, c, writetime(c), ttl(c) FROM %s"));
1:01115f7:         Assert.assertEquals(2, res.length);
1:01115f7: 
1:01115f7:         for (Object[] r : res)
1:01115f7:         {
1:01115f7:             assertTrue(r[2] instanceof Integer || r[2] instanceof Long);
1:01115f7:             if (r[0].equals(1))
1:01115f7:                 assertNull(r[3]);
1:01115f7:             else
1:01115f7:                 assertTrue(r[3] instanceof Integer || r[2] instanceof Long);
1:01115f7:         }
1:01115f7: 
1:01115f7: 
1:01115f7:         // wrap writetime(), ttl() in other functions (test for CASSANDRA-8451)
1:01115f7:         res = getRows(execute("SELECT k, c, blobAsBigint(bigintAsBlob(writetime(c))), ttl(c) FROM %s"));
1:01115f7:         Assert.assertEquals(2, res.length);
1:01115f7: 
1:01115f7:         for (Object[] r : res)
1:01115f7:         {
1:01115f7:             assertTrue(r[2] instanceof Integer || r[2] instanceof Long);
1:01115f7:             if (r[0].equals(1))
1:01115f7:                 assertNull(r[3]);
1:01115f7:             else
1:01115f7:                 assertTrue(r[3] instanceof Integer || r[2] instanceof Long);
1:01115f7:         }
1:01115f7: 
1:01115f7:         res = getRows(execute("SELECT k, c, writetime(c), blobAsInt(intAsBlob(ttl(c))) FROM %s"));
1:01115f7:         Assert.assertEquals(2, res.length);
1:01115f7: 
1:01115f7: 
1:01115f7:         for (Object[] r : res)
1:01115f7:         {
1:01115f7:             assertTrue(r[2] instanceof Integer || r[2] instanceof Long);
1:01115f7:             if (r[0].equals(1))
1:01115f7:                 assertNull(r[3]);
1:01115f7:             else
1:01115f7:                 assertTrue(r[3] instanceof Integer || r[2] instanceof Long);
1:01115f7:         }
1:01115f7: 
1:01115f7:         assertInvalid("SELECT k, c, writetime(k) FROM %s");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT k, d, writetime(d) FROM %s WHERE k = 1"),
1:01115f7:                    row(1, null, null));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.invalid_custom_timestamp_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testInvalidCustomTimestamp() throws Throwable
1:01115f7:     {
1:01115f7:         // Conditional updates
1:01115f7:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k, v))");
1:01115f7: 
1:01115f7:         execute("BEGIN BATCH " +
1:01115f7:                 "INSERT INTO %1$s (k, v) VALUES(0, 0) IF NOT EXISTS; " +
1:01115f7:                 "INSERT INTO %1$s (k, v) VALUES(0, 1) IF NOT EXISTS; " +
1:01115f7:                 "APPLY BATCH");
1:01115f7: 
1:01115f7:         assertInvalid("BEGIN BATCH " +
1:01115f7:                       "INSERT INTO %1$s (k, v) VALUES(0, 2) IF NOT EXISTS USING TIMESTAMP 1; " +
1:01115f7:                       "INSERT INTO %1$s (k, v) VALUES(0, 3) IF NOT EXISTS; " +
1:01115f7:                       "APPLY BATCH");
1:01115f7:         assertInvalid("BEGIN BATCH " +
1:01115f7:                       "USING TIMESTAMP 1 INSERT INTO %1$s (k, v) VALUES(0, 4) IF NOT EXISTS; " +
1:01115f7:                       "INSERT INTO %1$s (k, v) VALUES(0, 1) IF NOT EXISTS; " +
1:01115f7:                       "APPLY BATCH");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, v) VALUES(1, 0) IF NOT EXISTS");
1:01115f7:         assertInvalid("INSERT INTO %s (k, v) VALUES(1, 1) IF NOT EXISTS USING TIMESTAMP 5");
1:01115f7: 
1:01115f7:         // Counters
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, c counter)");
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET c = c + 1 WHERE k = 0");
1:01115f7:         assertInvalid("UPDATE %s USING TIMESTAMP 10 SET c = c + 1 WHERE k = 0");
1:01115f7: 
1:01115f7:         execute("BEGIN COUNTER BATCH " +
1:01115f7:                 "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:01115f7:                 "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:01115f7:                 "APPLY BATCH");
1:01115f7: 
1:01115f7:         assertInvalid("BEGIN COUNTER BATCH " +
1:01115f7:                       "UPDATE %1$s USING TIMESTAMP 3 SET c = c + 1 WHERE k = 0; " +
1:01115f7:                       "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:01115f7:                       "APPLY BATCH");
1:01115f7: 
1:01115f7:         assertInvalid("BEGIN COUNTER BATCH " +
1:01115f7:                       "USING TIMESTAMP 3 UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:01115f7:                       "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:01115f7:                       "APPLY BATCH");
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testInsertTimestampWithUnset() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, i int)");
1:01115f7:         execute("INSERT INTO %s (k, i) VALUES (1, 1) USING TIMESTAMP ?", unset()); // treat as 'now'
1:01115f7:     }
1:01115f7: 
1:01115f7: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.validation.entities;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.cql3.CQLTester;
1: 
1: import static junit.framework.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class TimestampTest extends CQLTester
1: {
1:     @Test
1:     public void testNegativeTimestamps() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int)");
1: 
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?) USING TIMESTAMP ?", 1, 1, -42L);
1:         assertRows(execute("SELECT writetime(v) FROM %s WHERE k = ?", 1),
1:             row(-42L)
1:         );
1: 
1:         assertInvalid("INSERT INTO %s (k, v) VALUES (?, ?) USING TIMESTAMP ?", 2, 2, Long.MIN_VALUE);
1:     }
1: 
1:     /**
1:      * Test timestmp and ttl
1:      * migrated from cql_tests.py:TestCQL.timestamp_and_ttl_test()
1:      */
1:     @Test
1:     public void testTimestampTTL() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, c text, d text)");
1: 
1:         execute("INSERT INTO %s (k, c) VALUES (1, 'test')");
1:         execute("INSERT INTO %s (k, c) VALUES (2, 'test') USING TTL 400");
1: 
1:         Object[][] res = getRows(execute("SELECT k, c, writetime(c), ttl(c) FROM %s"));
1:         Assert.assertEquals(2, res.length);
1: 
1:         for (Object[] r : res)
1:         {
1:             assertTrue(r[2] instanceof Integer || r[2] instanceof Long);
1:             if (r[0].equals(1))
1:                 assertNull(r[3]);
1:             else
1:                 assertTrue(r[3] instanceof Integer || r[2] instanceof Long);
1:         }
1: 
1: 
1:         // wrap writetime(), ttl() in other functions (test for CASSANDRA-8451)
1:         res = getRows(execute("SELECT k, c, blobAsBigint(bigintAsBlob(writetime(c))), ttl(c) FROM %s"));
1:         Assert.assertEquals(2, res.length);
1: 
1:         for (Object[] r : res)
1:         {
1:             assertTrue(r[2] instanceof Integer || r[2] instanceof Long);
1:             if (r[0].equals(1))
1:                 assertNull(r[3]);
1:             else
1:                 assertTrue(r[3] instanceof Integer || r[2] instanceof Long);
1:         }
1: 
1:         res = getRows(execute("SELECT k, c, writetime(c), blobAsInt(intAsBlob(ttl(c))) FROM %s"));
1:         Assert.assertEquals(2, res.length);
1: 
1: 
1:         for (Object[] r : res)
1:         {
1:             assertTrue(r[2] instanceof Integer || r[2] instanceof Long);
1:             if (r[0].equals(1))
1:                 assertNull(r[3]);
1:             else
1:                 assertTrue(r[3] instanceof Integer || r[2] instanceof Long);
1:         }
1: 
1:         assertInvalid("SELECT k, c, writetime(k) FROM %s");
1: 
1:         assertRows(execute("SELECT k, d, writetime(d) FROM %s WHERE k = 1"),
1:                    row(1, null, null));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.invalid_custom_timestamp_test()
1:      */
1:     @Test
1:     public void testInvalidCustomTimestamp() throws Throwable
1:     {
1:         // Conditional updates
1:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k, v))");
1: 
1:         execute("BEGIN BATCH " +
1:                 "INSERT INTO %1$s (k, v) VALUES(0, 0) IF NOT EXISTS; " +
1:                 "INSERT INTO %1$s (k, v) VALUES(0, 1) IF NOT EXISTS; " +
1:                 "APPLY BATCH");
1: 
1:         assertInvalid("BEGIN BATCH " +
1:                       "INSERT INTO %1$s (k, v) VALUES(0, 2) IF NOT EXISTS USING TIMESTAMP 1; " +
1:                       "INSERT INTO %1$s (k, v) VALUES(0, 3) IF NOT EXISTS; " +
1:                       "APPLY BATCH");
1:         assertInvalid("BEGIN BATCH " +
1:                       "USING TIMESTAMP 1 INSERT INTO %1$s (k, v) VALUES(0, 4) IF NOT EXISTS; " +
1:                       "INSERT INTO %1$s (k, v) VALUES(0, 1) IF NOT EXISTS; " +
1:                       "APPLY BATCH");
1: 
1:         execute("INSERT INTO %s (k, v) VALUES(1, 0) IF NOT EXISTS");
1:         assertInvalid("INSERT INTO %s (k, v) VALUES(1, 1) IF NOT EXISTS USING TIMESTAMP 5");
1: 
1:         // Counters
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, c counter)");
1: 
1:         execute("UPDATE %s SET c = c + 1 WHERE k = 0");
1:         assertInvalid("UPDATE %s USING TIMESTAMP 10 SET c = c + 1 WHERE k = 0");
1: 
1:         execute("BEGIN COUNTER BATCH " +
1:                 "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:                 "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:                 "APPLY BATCH");
1: 
1:         assertInvalid("BEGIN COUNTER BATCH " +
1:                       "UPDATE %1$s USING TIMESTAMP 3 SET c = c + 1 WHERE k = 0; " +
1:                       "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:                       "APPLY BATCH");
1: 
1:         assertInvalid("BEGIN COUNTER BATCH " +
1:                       "USING TIMESTAMP 3 UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:                       "UPDATE %1$s SET c = c + 1 WHERE k = 0; " +
1:                       "APPLY BATCH");
1:     }
1: 
1:     @Test
1:     public void testInsertTimestampWithUnset() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, i int)");
1:         execute("INSERT INTO %s (k, i) VALUES (1, 1) USING TIMESTAMP ?", unset()); // treat as 'now'
1:     }
1: 
1: }
============================================================================