1:2f0e62c: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:f650d3e:  *
1:2f0e62c:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
2:2f0e62c:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:56f35db:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:56f35db:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:56f35db:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:56f35db:  * 
1:cba59a8:  */
1:cba59a8: 
1:b43c785: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:b153d45: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:39570be: import java.util.List;
1:39570be: import java.util.ArrayList;
1:2f0e62c: import java.util.Map;
1:2f0e62c: import java.util.HashMap;
1:2f0e62c: import java.util.EnumMap;
1:39570be: import java.util.Set;
1:39570be: import java.util.HashSet;
1:2f0e62c: import java.util.EnumSet;
1:2f0e62c: import java.util.Collections;
1:39570be: import java.util.BitSet;
1:39570be: import java.nio.ByteBuffer;
1:39570be: import java.util.Arrays;
1:39570be: import org.slf4j.Logger;
1:39570be: import org.slf4j.LoggerFactory;
14:2f0e62c: 
1:2f0e62c: /**
1:2f0e62c:  * invalid authorization request (user does not have access to keyspace)
1:b43c785:  */
1:bffd9ea: public class AuthorizationException extends TException implements org.apache.thrift.TBase<AuthorizationException, AuthorizationException._Fields>, java.io.Serializable, Cloneable, Comparable<AuthorizationException> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthorizationException");
1:2f0e62c: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField WHY_FIELD_DESC = new org.apache.thrift.protocol.TField("why", org.apache.thrift.protocol.TType.STRING, (short)1);
1:2f0e62c: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new AuthorizationExceptionStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new AuthorizationExceptionTupleSchemeFactory());
1:b153d45:   }
1:b153d45: 
1:7c8c570:   public String why; // required
1:c8afd76: 
1:2f0e62c:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:2f0e62c:     WHY((short)1, "why");
1:2f0e62c: 
1:2f0e62c:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:2f0e62c: 
1:2f0e62c:     static {
1:2f0e62c:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:2f0e62c:         byName.put(field.getFieldName(), field);
1:c8afd76:       }
1:c8afd76:     }
1:2f0e62c: 
1:2f0e62c:     /**
1:2f0e62c:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:2f0e62c:      */
1:2f0e62c:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // WHY
1:d849c69:           return WHY;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:c8afd76:     }
1:2f0e62c: 
1:2f0e62c:     /**
1:2f0e62c:      * Find the _Fields constant that matches fieldId, throwing an exception
1:2f0e62c:      * if it is not found.
1:2f0e62c:      */
1:2f0e62c:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:2f0e62c:       _Fields fields = findByThriftId(fieldId);
1:2f0e62c:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:2f0e62c:       return fields;
1:4ec9511:     }
1:2f0e62c: 
1:2f0e62c:     /**
1:2f0e62c:      * Find the _Fields constant that matches name, or null if its not found.
1:2f0e62c:      */
1:2f0e62c:     public static _Fields findByName(String name) {
1:2f0e62c:       return byName.get(name);
19:2f0e62c:     }
1:2f0e62c: 
1:2f0e62c:     private final short _thriftId;
1:2f0e62c:     private final String _fieldName;
1:2f0e62c: 
1:2f0e62c:     _Fields(short thriftId, String fieldName) {
1:2f0e62c:       _thriftId = thriftId;
1:2f0e62c:       _fieldName = fieldName;
1:2f0e62c:     }
1:2f0e62c: 
1:2f0e62c:     public short getThriftFieldId() {
1:2f0e62c:       return _thriftId;
1:2f0e62c:     }
1:2f0e62c: 
1:2f0e62c:     public String getFieldName() {
1:2f0e62c:       return _fieldName;
1:2f0e62c:     }
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   // isset id assignments
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:2f0e62c:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:56f35db:     tmpMap.put(_Fields.WHY, new org.apache.thrift.meta_data.FieldMetaData("why", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthorizationException.class, metaDataMap);
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public AuthorizationException() {
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public AuthorizationException(
1:2f0e62c:     String why)
2:2f0e62c:   {
1:2f0e62c:     this();
1:2f0e62c:     this.why = why;
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   /**
1:2f0e62c:    * Performs a deep copy on <i>other</i>.
1:2f0e62c:    */
1:2f0e62c:   public AuthorizationException(AuthorizationException other) {
1:2f0e62c:     if (other.isSetWhy()) {
1:2f0e62c:       this.why = other.why;
1:2f0e62c:     }
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public AuthorizationException deepCopy() {
2:2f0e62c:     return new AuthorizationException(this);
1:2f0e62c:   }
1:2f0e62c: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.why = null;
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public String getWhy() {
1:2f0e62c:     return this.why;
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public AuthorizationException setWhy(String why) {
1:2f0e62c:     this.why = why;
1:2f0e62c:     return this;
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public void unsetWhy() {
1:2f0e62c:     this.why = null;
1:2f0e62c:   }
1:2f0e62c: 
1:4ec9511:   /** Returns true if field why is set (has been assigned a value) and false otherwise */
1:2f0e62c:   public boolean isSetWhy() {
1:2f0e62c:     return this.why != null;
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public void setWhyIsSet(boolean value) {
1:2f0e62c:     if (!value) {
1:2f0e62c:       this.why = null;
1:2f0e62c:     }
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public void setFieldValue(_Fields field, Object value) {
1:2f0e62c:     switch (field) {
2:2f0e62c:     case WHY:
1:2f0e62c:       if (value == null) {
1:2f0e62c:         unsetWhy();
1:39570be:       } else {
1:2f0e62c:         setWhy((String)value);
1:2f0e62c:       }
1:b153d45:       break;
1:2f0e62c: 
1:2b69c40:     }
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public Object getFieldValue(_Fields field) {
1:2f0e62c:     switch (field) {
1:2f0e62c:     case WHY:
1:2f0e62c:       return getWhy();
1:2f0e62c: 
1:2f0e62c:     }
1:2f0e62c:     throw new IllegalStateException();
1:2f0e62c:   }
1:2f0e62c: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:2f0e62c:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:2f0e62c:     switch (field) {
1:2f0e62c:     case WHY:
1:2f0e62c:       return isSetWhy();
1:2f0e62c:     }
1:2f0e62c:     throw new IllegalStateException();
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   @Override
1:2f0e62c:   public boolean equals(Object that) {
1:2f0e62c:     if (that == null)
1:2f0e62c:       return false;
1:2f0e62c:     if (that instanceof AuthorizationException)
1:2f0e62c:       return this.equals((AuthorizationException)that);
1:2f0e62c:     return false;
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   public boolean equals(AuthorizationException that) {
1:2f0e62c:     if (that == null)
1:2f0e62c:       return false;
1:2f0e62c: 
1:2f0e62c:     boolean this_present_why = true && this.isSetWhy();
1:2f0e62c:     boolean that_present_why = true && that.isSetWhy();
1:2f0e62c:     if (this_present_why || that_present_why) {
1:2f0e62c:       if (!(this_present_why && that_present_why))
1:2f0e62c:         return false;
1:2f0e62c:       if (!this.why.equals(that.why))
1:2f0e62c:         return false;
1:2f0e62c:     }
1:2f0e62c: 
1:2f0e62c:     return true;
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   @Override
1:2f0e62c:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_why = true && (isSetWhy());
1:d966ed0:     builder.append(present_why);
1:d966ed0:     if (present_why)
1:d966ed0:       builder.append(why);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:2f0e62c:   }
1:2f0e62c: 
1:bffd9ea:   @Override
1:2f0e62c:   public int compareTo(AuthorizationException other) {
1:2f0e62c:     if (!getClass().equals(other.getClass())) {
1:2f0e62c:       return getClass().getName().compareTo(other.getClass().getName());
1:2f0e62c:     }
1:2f0e62c: 
1:2f0e62c:     int lastComparison = 0;
1:2f0e62c: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetWhy()).compareTo(other.isSetWhy());
2:2f0e62c:     if (lastComparison != 0) {
2:2f0e62c:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetWhy()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.why, other.why);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2f0e62c:       }
1:2f0e62c:     }
2:2f0e62c:     return 0;
1:2f0e62c:   }
1:2f0e62c: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:2f0e62c:   }
1:2f0e62c: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:2f0e62c:   }
1:2f0e62c: 
1:2f0e62c:   @Override
1:2f0e62c:   public String toString() {
1:2f0e62c:     StringBuilder sb = new StringBuilder("AuthorizationException(");
1:2f0e62c:     boolean first = true;
1:2f0e62c: 
1:2f0e62c:     sb.append("why:");
1:2f0e62c:     if (this.why == null) {
1:2f0e62c:       sb.append("null");
1:f650d3e:     } else {
1:2f0e62c:       sb.append(this.why);
1:2f0e62c:     }
1:2f0e62c:     first = false;
1:2f0e62c:     sb.append(")");
1:2f0e62c:     return sb.toString();
1:4ec9511:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:2f0e62c:     // check for required fields
1:2f0e62c:     if (why == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'why' was not present! Struct: " + toString());
1:4ec9511:     }
1:b153d45:     // check for sub-struct validity
1:4ec9511:   }
1:4ec9511: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class AuthorizationExceptionStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public AuthorizationExceptionStandardScheme getScheme() {
1:b153d45:       return new AuthorizationExceptionStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class AuthorizationExceptionStandardScheme extends StandardScheme<AuthorizationException> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, AuthorizationException struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:b153d45:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:2b69c40:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // WHY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.why = iprot.readString();
1:b153d45:               struct.setWhyIsSet(true);
1:56f35db:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:b153d45:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, AuthorizationException struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:b153d45:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.why != null) {
1:b153d45:         oprot.writeFieldBegin(WHY_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.why);
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:b153d45:     }
1:b153d45: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class AuthorizationExceptionTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public AuthorizationExceptionTupleScheme getScheme() {
1:b153d45:       return new AuthorizationExceptionTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class AuthorizationExceptionTupleScheme extends TupleScheme<AuthorizationException> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, AuthorizationException struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeString(struct.why);
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, AuthorizationException struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.why = iprot.readString();
1:b153d45:       struct.setWhyIsSet(true);
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:c8afd76: }
1:c8afd76: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class AuthorizationException extends TException implements org.apache.thrift.TBase<AuthorizationException, AuthorizationException._Fields>, java.io.Serializable, Cloneable, Comparable<AuthorizationException> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetWhy()).compareTo(other.isSetWhy());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.why, other.why);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.WHY, new org.apache.thrift.meta_data.FieldMetaData("why", org.apache.thrift.TFieldRequirementType.REQUIRED,
/////////////////////////////////////////////////////////////////////////
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) {
1:           } else {
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.WHY, new org.apache.thrift.meta_data.FieldMetaData("why", org.apache.thrift.TFieldRequirementType.REQUIRED,
/////////////////////////////////////////////////////////////////////////
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) {
1:           } else {
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:39570be
/////////////////////////////////////////////////////////////////////////
0:  * 
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * 
0:  * 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.WHY, new org.apache.thrift.meta_data.FieldMetaData("why", org.apache.thrift.TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
1:           } else { 
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.why = null;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (isSetWhy()) {
0:       lastComparison = TBaseHelper.compareTo(this.why, typedOther.why);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_why = true && (isSetWhy());
1:     builder.append(present_why);
1:     if (present_why)
1:       builder.append(why);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class AuthorizationException extends Exception implements TBase<AuthorizationException, AuthorizationException._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // WHY
1:           return WHY;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.WHY, new FieldMetaData("why", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetWhy()) {      lastComparison = TBaseHelper.compareTo(this.why, typedOther.why);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetWhy()).compareTo(typedOther.isSetWhy());
0:     if (isSetWhy()) {      lastComparison = TBaseHelper.compareTo(why, typedOther.why);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // WHY
0:           if (field.type == TType.STRING) {
0:             this.why = iprot.readString();
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
0: public class AuthorizationException extends TException implements org.apache.thrift.TBase<AuthorizationException, AuthorizationException._Fields>, java.io.Serializable, Cloneable {
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new AuthorizationExceptionStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new AuthorizationExceptionTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class AuthorizationExceptionStandardSchemeFactory implements SchemeFactory {
1:     public AuthorizationExceptionStandardScheme getScheme() {
1:       return new AuthorizationExceptionStandardScheme();
1:     }
1:   }
1: 
1:   private static class AuthorizationExceptionStandardScheme extends StandardScheme<AuthorizationException> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, AuthorizationException struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // WHY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.why = iprot.readString();
1:               struct.setWhyIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, AuthorizationException struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.why != null) {
1:         oprot.writeFieldBegin(WHY_FIELD_DESC);
1:         oprot.writeString(struct.why);
1:         oprot.writeFieldEnd();
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class AuthorizationExceptionTupleSchemeFactory implements SchemeFactory {
1:     public AuthorizationExceptionTupleScheme getScheme() {
1:       return new AuthorizationExceptionTupleScheme();
1:     }
1:   }
1: 
1:   private static class AuthorizationExceptionTupleScheme extends TupleScheme<AuthorizationException> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, AuthorizationException struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeString(struct.why);
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, AuthorizationException struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.why = iprot.readString();
1:       struct.setWhyIsSet(true);
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public String why; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class AuthorizationException extends Exception implements org.apache.thrift.TBase<AuthorizationException, AuthorizationException._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthorizationException");
1:   private static final org.apache.thrift.protocol.TField WHY_FIELD_DESC = new org.apache.thrift.protocol.TField("why", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.WHY, new org.apache.thrift.meta_data.FieldMetaData("why", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthorizationException.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field why is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.why, typedOther.why);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'why' was not present! Struct: " + toString());
1:     }
1:   }
1: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:2f0e62c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
0:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
1: 
0: import java.util.List;
0: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
0: import java.util.BitSet;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
1: /**
1:  * invalid authorization request (user does not have access to keyspace)
1:  */
0: public class AuthorizationException extends Exception implements TBase<AuthorizationException._Fields>, java.io.Serializable, Cloneable, Comparable<AuthorizationException> {
0:   private static final TStruct STRUCT_DESC = new TStruct("AuthorizationException");
1: 
0:   private static final TField WHY_FIELD_DESC = new TField("why", TType.STRING, (short)1);
1: 
0:   public String why;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     WHY((short)1, "why");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.WHY, new FieldMetaData("why", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(AuthorizationException.class, metaDataMap);
1:   }
1: 
1:   public AuthorizationException() {
1:   }
1: 
1:   public AuthorizationException(
1:     String why)
1:   {
1:     this();
1:     this.why = why;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public AuthorizationException(AuthorizationException other) {
1:     if (other.isSetWhy()) {
1:       this.why = other.why;
1:     }
1:   }
1: 
1:   public AuthorizationException deepCopy() {
1:     return new AuthorizationException(this);
1:   }
1: 
0:   @Deprecated
0:   public AuthorizationException clone() {
1:     return new AuthorizationException(this);
1:   }
1: 
1:   public String getWhy() {
1:     return this.why;
1:   }
1: 
1:   public AuthorizationException setWhy(String why) {
1:     this.why = why;
1:     return this;
1:   }
1: 
1:   public void unsetWhy() {
1:     this.why = null;
1:   }
1: 
0:   /** Returns true if field why is set (has been asigned a value) and false otherwise */
1:   public boolean isSetWhy() {
1:     return this.why != null;
1:   }
1: 
1:   public void setWhyIsSet(boolean value) {
1:     if (!value) {
1:       this.why = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case WHY:
1:       if (value == null) {
1:         unsetWhy();
0:       } else {
1:         setWhy((String)value);
1:       }
0:       break;
1: 
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case WHY:
1:       return getWhy();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     case WHY:
1:       return isSetWhy();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof AuthorizationException)
1:       return this.equals((AuthorizationException)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(AuthorizationException that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_why = true && this.isSetWhy();
1:     boolean that_present_why = true && that.isSetWhy();
1:     if (this_present_why || that_present_why) {
1:       if (!(this_present_why && that_present_why))
1:         return false;
1:       if (!this.why.equals(that.why))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(AuthorizationException other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     AuthorizationException typedOther = (AuthorizationException)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetWhy()).compareTo(isSetWhy());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(why, typedOther.why);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
0:         break;
1:       }
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
1:           case WHY:
0:             if (field.type == TType.STRING) {
0:               this.why = iprot.readString();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
1:             }
0:             break;
1:         }
0:         iprot.readFieldEnd();
1:       }
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.why != null) {
0:       oprot.writeFieldBegin(WHY_FIELD_DESC);
0:       oprot.writeString(this.why);
0:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("AuthorizationException(");
1:     boolean first = true;
1: 
1:     sb.append("why:");
1:     if (this.why == null) {
1:       sb.append("null");
0:     } else {
1:       sb.append(this.why);
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (why == null) {
0:       throw new TProtocolException("Required field 'why' was not present! Struct: " + toString());
1:     }
1:   }
1: 
1: }
1: 
============================================================================