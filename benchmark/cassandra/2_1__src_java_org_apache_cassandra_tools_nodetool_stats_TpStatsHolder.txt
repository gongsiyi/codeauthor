1:27d25c6: /*
1:27d25c6:  * Licensed to the Apache Software Foundation (ASF) under one
1:27d25c6:  * or more contributor license agreements.  See the NOTICE file
1:27d25c6:  * distributed with this work for additional information
1:27d25c6:  * regarding copyright ownership.  The ASF licenses this file
1:27d25c6:  * to you under the Apache License, Version 2.0 (the
1:27d25c6:  * "License"); you may not use this file except in compliance
1:27d25c6:  * with the License.  You may obtain a copy of the License at
1:27d25c6:  *
1:27d25c6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:27d25c6:  *
1:27d25c6:  * Unless required by applicable law or agreed to in writing, software
1:27d25c6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27d25c6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27d25c6:  * See the License for the specific language governing permissions and
1:27d25c6:  * limitations under the License.
1:27d25c6:  */
2:27d25c6: 
1:27d25c6: package org.apache.cassandra.tools.nodetool.stats;
1:27d25c6: 
1:27d25c6: import java.util.HashMap;
1:27d25c6: import java.util.Map;
1:27d25c6: 
1:27d25c6: import org.apache.cassandra.tools.NodeProbe;
1:27d25c6: import org.apache.cassandra.tools.nodetool.stats.StatsHolder;
1:27d25c6: 
1:27d25c6: public class TpStatsHolder implements StatsHolder
1:27d25c6: {
1:27d25c6:     public final NodeProbe probe;
1:27d25c6: 
1:27d25c6:     public TpStatsHolder(NodeProbe probe)
1:27d25c6:     {
1:27d25c6:         this.probe = probe;
1:27d25c6:     }
1:27d25c6: 
1:27d25c6:     @Override
1:27d25c6:     public Map<String, Object> convert2Map()
1:27d25c6:     {
1:27d25c6:         HashMap<String, Object> result = new HashMap<>();
1:27d25c6:         HashMap<String, Map<String, Object>> threadPools = new HashMap<>();
1:27d25c6:         HashMap<String, Object> droppedMessage = new HashMap<>();
1:27d25c6: 
1:27d25c6:         for (Map.Entry<String, String> tp : probe.getThreadPools().entries())
1:27d25c6:         {
1:27d25c6:             HashMap<String, Object> threadPool = new HashMap<>();
1:27d25c6:             threadPool.put("ActiveTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "ActiveTasks"));
1:27d25c6:             threadPool.put("PendingTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "PendingTasks"));
1:27d25c6:             threadPool.put("CompletedTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "CompletedTasks"));
1:27d25c6:             threadPool.put("CurrentlyBlockedTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "CurrentlyBlockedTasks"));
1:27d25c6:             threadPool.put("TotalBlockedTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "TotalBlockedTasks"));
1:27d25c6:             threadPools.put(tp.getValue(), threadPool);
1:27d25c6:         }
1:27d25c6:         result.put("ThreadPools", threadPools);
1:27d25c6: 
1:27d25c6:         for (Map.Entry<String, Integer> entry : probe.getDroppedMessages().entrySet())
1:27d25c6:             droppedMessage.put(entry.getKey(), entry.getValue());
1:27d25c6:         result.put("DroppedMessage", droppedMessage);
1:27d25c6: 
1:27d25c6:         return result;
1:27d25c6:     }
1:27d25c6: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Hiroyuki Nishi
-------------------------------------------------------------------------------
commit:27d25c6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.stats;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import com.google.common.collect.Multimap;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.nodetool.stats.StatsHolder;
1: 
1: public class TpStatsHolder implements StatsHolder
1: {
1:     public final NodeProbe probe;
1: 
1:     public TpStatsHolder(NodeProbe probe)
1:     {
1:         this.probe = probe;
1:     }
1: 
1:     @Override
1:     public Map<String, Object> convert2Map()
1:     {
1:         HashMap<String, Object> result = new HashMap<>();
1:         HashMap<String, Map<String, Object>> threadPools = new HashMap<>();
1:         HashMap<String, Object> droppedMessage = new HashMap<>();
1: 
1:         for (Map.Entry<String, String> tp : probe.getThreadPools().entries())
1:         {
1:             HashMap<String, Object> threadPool = new HashMap<>();
1:             threadPool.put("ActiveTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "ActiveTasks"));
1:             threadPool.put("PendingTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "PendingTasks"));
1:             threadPool.put("CompletedTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "CompletedTasks"));
1:             threadPool.put("CurrentlyBlockedTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "CurrentlyBlockedTasks"));
1:             threadPool.put("TotalBlockedTasks", probe.getThreadPoolMetric(tp.getKey(), tp.getValue(), "TotalBlockedTasks"));
1:             threadPools.put(tp.getValue(), threadPool);
1:         }
1:         result.put("ThreadPools", threadPools);
1: 
1:         for (Map.Entry<String, Integer> entry : probe.getDroppedMessages().entrySet())
1:             droppedMessage.put(entry.getKey(), entry.getValue());
1:         result.put("DroppedMessage", droppedMessage);
1: 
1:         return result;
1:     }
1: }
============================================================================