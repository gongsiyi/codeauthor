1:6c467fd: /*
1:6c467fd:  * Licensed to the Apache Software Foundation (ASF) under one
1:6c467fd:  * or more contributor license agreements.  See the NOTICE file
1:6c467fd:  * distributed with this work for additional information
1:6c467fd:  * regarding copyright ownership.  The ASF licenses this file
1:6c467fd:  * to you under the Apache License, Version 2.0 (the
1:6c467fd:  * "License"); you may not use this file except in compliance
1:6c467fd:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:6c467fd:  */
2:9404c65: 
1:fc8b76f: package org.apache.cassandra.serializers;
1:9404c65: 
1:9404c65: import org.apache.cassandra.utils.ByteBufferUtil;
1:9404c65: 
1:e9c6742: import java.nio.ByteBuffer;
1:e9c6742: 
1:fc8b76f: public class LongSerializer implements TypeSerializer<Long>
2:9404c65: {
1:e9c6742:     public static final LongSerializer instance = new LongSerializer();
1:9404c65: 
1:daff1fc:     public Long deserialize(ByteBuffer bytes)
1:9404c65:     {
1:daff1fc:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toLong(bytes);
1:9404c65:     }
1:b226cf9: 
1:daff1fc:     public ByteBuffer serialize(Long value)
1:b226cf9:     {
1:daff1fc:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value);
1:b226cf9:     }
1:9404c65: 
1:e9c6742:     public void validate(ByteBuffer bytes) throws MarshalException
1:9404c65:     {
1:e9c6742:         if (bytes.remaining() != 8 && bytes.remaining() != 0)
1:e9c6742:             throw new MarshalException(String.format("Expected 8 or 0 byte long (%d)", bytes.remaining()));
2:9404c65:     }
1:9404c65: 
1:e9c6742:     public String toString(Long value)
1:e9c6742:     {
1:d6f32e4:         return value == null ? "" : String.valueOf(value);
1:e9c6742:     }
1:e9c6742: 
1:9404c65:     public Class<Long> getType()
1:9404c65:     {
1:9404c65:         return Long.class;
1:9404c65:     }
1:9404c65: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d6f32e4
/////////////////////////////////////////////////////////////////////////
1:         return value == null ? "" : String.valueOf(value);
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     public Long deserialize(ByteBuffer bytes)
1:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toLong(bytes);
1:     public ByteBuffer serialize(Long value)
1:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value);
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
1: public class LongSerializer implements TypeSerializer<Long>
/////////////////////////////////////////////////////////////////////////
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.type;
1: import java.nio.ByteBuffer;
1: 
0: public class LongSerializer extends AbstractSerializer<Long>
1:     public static final LongSerializer instance = new LongSerializer();
0:     @Override
0:     public Long serialize(ByteBuffer bytes)
0:         return ByteBufferUtil.toLong(bytes);
0:     @Override
0:     public ByteBuffer deserialize(Long value)
0:         return ByteBufferUtil.bytes(value);
0:     @Override
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:         if (bytes.remaining() != 8 && bytes.remaining() != 0)
1:             throw new MarshalException(String.format("Expected 8 or 0 byte long (%d)", bytes.remaining()));
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:         return String.valueOf(ByteBufferUtil.toLong(bytes));
0:     @Override
1:     public String toString(Long value)
1:     {
0:         return String.valueOf(value);
1:     }
1: 
0:     @Override
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.cql.jdbc;
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ByteBuffer decompose(Long value)
1:     {
0:         return ByteBufferUtil.bytes(value);
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:58df830
/////////////////////////////////////////////////////////////////////////
0:         return Types.BIGINT;
commit:9404c65
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
0: public class JdbcLong extends AbstractJdbcType<Long>
0:     public static final JdbcLong instance = new JdbcLong();
1: 
0:     JdbcLong()
1: 
0:     public int getScale(Long obj)
0:         return 0;
0:     public int getPrecision(Long obj)
0:         return obj.toString().length();
/////////////////////////////////////////////////////////////////////////
0:         return true;
1:     }
1: 
0:     public String toString(Long obj)
1:     {
0:         return obj.toString();
/////////////////////////////////////////////////////////////////////////
0:     public String getString(ByteBuffer bytes)
0:         if (bytes.remaining() == 0)
1:         {
0:             return "";
1:         }
0:         if (bytes.remaining() != 8)
1:         {
0:             throw new MarshalException("A long is exactly 8 bytes: " + bytes.remaining());
1:         }
1: 
0:         return String.valueOf(bytes.getLong(bytes.position()));
1:     }
1: 
1:     public Class<Long> getType()
1:     {
1:         return Long.class;
0:         return Types.INTEGER;
1:     }
1: 
0:     public Long compose(ByteBuffer bytes)
1:     {
0:         return ByteBufferUtil.toLong(bytes);
commit:6c467fd
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql.jdbc;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
0: 
0: import java.sql.Types;
0: import java.util.UUID;
0: 
0: public abstract class JdbcLong extends AbstractJdbcType<UUID>
0: {
0:     public String toString(UUID obj)
0:     {
0:         return obj.toString();
0:     }
0:     
0:     public boolean isCaseSensitive()
0:     {
0:         return false;
0:     }
0: 
0:     public int getScale(UUID obj)
0:     {
0:         return -1;
0:     }
0: 
0:     public int getPrecision(UUID obj)
0:     {
0:         return -1;
0:     }
0: 
0:     public boolean isCurrency()
0:     {
0:         return false;
0:     }
0: 
0:     public boolean isSigned()
0:     {
0:         return false;
0:     }
0: 
0:     public boolean needsQuotes()
0:     {
0:         return false;
0:     }
0: 
0:     public Class<UUID> getType()
0:     {
0:         return UUID.class;
0:     }
0: 
0:     public int getJdbcType()
0:     {
0:         return Types.OTHER;
0:     }
0: }
============================================================================