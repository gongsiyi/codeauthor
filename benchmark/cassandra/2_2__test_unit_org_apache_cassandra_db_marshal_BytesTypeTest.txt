1:10786e7: /**
1:10786e7:  * Licensed to the Apache Software Foundation (ASF) under one
1:10786e7:  * or more contributor license agreements.  See the NOTICE file
1:10786e7:  * distributed with this work for additional information
1:10786e7:  * regarding copyright ownership.  The ASF licenses this file
1:10786e7:  * to you under the Apache License, Version 2.0 (the
1:10786e7:  * "License"); you may not use this file except in compliance
1:10786e7:  * with the License.  You may obtain a copy of the License at
1:10786e7:  *
1:10786e7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:10786e7:  *
1:10786e7:  * Unless required by applicable law or agreed to in writing,
1:10786e7:  * software distributed under the License is distributed on an
1:10786e7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:10786e7:  * KIND, either express or implied.  See the License for the
1:10786e7:  * specific language governing permissions and limitations
1:10786e7:  * under the License.
1:10786e7:  *
1:10786e7:  */
1:10786e7: package org.apache.cassandra.db.marshal;
1:10786e7: 
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:10786e7: import org.junit.Test;
1:10786e7: 
1:10786e7: public class BytesTypeTest
1:10786e7: {
1:10786e7:     private static final String INVALID_HEX = "33AG45F"; // Invalid (has a G)
1:10786e7:     private static final String VALID_HEX = "33A45F";
1:10786e7: 
1:10786e7:     @Test (expected = MarshalException.class)
1:10786e7:     public void testFromStringWithInvalidString()
1:10786e7:     {
1:10786e7:         BytesType.instance.fromString(INVALID_HEX);
1:10786e7:     }
1:10786e7: 
1:10786e7:     @Test
1:10786e7:     public void testFromStringWithValidString()
1:10786e7:     {
1:10786e7:         BytesType.instance.fromString(VALID_HEX);
1:10786e7:     }
1:10786e7: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.MarshalException;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.MarshalException;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:10786e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import org.junit.Test;
1: 
1: public class BytesTypeTest
1: {
1:     private static final String INVALID_HEX = "33AG45F"; // Invalid (has a G)
1:     private static final String VALID_HEX = "33A45F";
1: 
1:     @Test (expected = MarshalException.class)
1:     public void testFromStringWithInvalidString()
1:     {
1:         BytesType.instance.fromString(INVALID_HEX);
1:     }
1: 
1:     @Test
1:     public void testFromStringWithValidString()
1:     {
1:         BytesType.instance.fromString(VALID_HEX);
1:     }
1: }
commit:405524e
/////////////////////////////////////////////////////////////////////////
commit:3427b4b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
commit:f8fa6d2
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
0: 
0: import org.apache.commons.lang.ArrayUtils;
0: 
0: import org.junit.Test;
0: 
0: public class BytesTypeTest
0: {
0:     @Test
0:     public void testCompare()
0:     {
0:         BytesType comparator = new BytesType();
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, "asdf".getBytes()) < 0;
0:         assert comparator.compare("asdf".getBytes(), ArrayUtils.EMPTY_BYTE_ARRAY) > 0;
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY) == 0;
0:         assert comparator.compare("z".getBytes(), "a".getBytes()) > 0;
0:         assert comparator.compare("a".getBytes(), "z".getBytes()) < 0;
0:         assert comparator.compare("asdf".getBytes(), "asdf".getBytes()) == 0;
0:         assert comparator.compare("asdz".getBytes(), "asdf".getBytes()) > 0;
0:     }
0: }
============================================================================