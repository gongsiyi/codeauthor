1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
1:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.marshal.UTF8Type;
1:a991b64: import org.apache.cassandra.utils.ByteBufferUtil;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Exception thrown when we read a column internally that is unknown. Note that
1:a991b64:  * this is an internal exception and is not meant to be user facing.
1:a991b64:  */
1:a991b64: public class UnknownColumnException extends Exception
1:a991b64: {
1:a991b64:     public final ByteBuffer columnName;
1:a991b64: 
1:a991b64:     public UnknownColumnException(CFMetaData metadata, ByteBuffer columnName)
1:a991b64:     {
1:a991b64:         super(String.format("Unknown column %s in table %s.%s", stringify(columnName), metadata.ksName, metadata.cfName));
1:a991b64:         this.columnName = columnName;
1:a991b64:     }
1:a991b64: 
1:a991b64:     private static String stringify(ByteBuffer name)
1:a991b64:     {
1:a991b64:         try
1:a991b64:         {
1:a991b64:             return UTF8Type.instance.getString(name);
1:a991b64:         }
1:a991b64:         catch (Exception e)
1:a991b64:         {
1:a991b64:             return ByteBufferUtil.bytesToHex(name);
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * Exception thrown when we read a column internally that is unknown. Note that
1:  * this is an internal exception and is not meant to be user facing.
1:  */
1: public class UnknownColumnException extends Exception
1: {
1:     public final ByteBuffer columnName;
1: 
1:     public UnknownColumnException(CFMetaData metadata, ByteBuffer columnName)
1:     {
1:         super(String.format("Unknown column %s in table %s.%s", stringify(columnName), metadata.ksName, metadata.cfName));
1:         this.columnName = columnName;
1:     }
1: 
1:     private static String stringify(ByteBuffer name)
1:     {
1:         try
1:         {
1:             return UTF8Type.instance.getString(name);
1:         }
1:         catch (Exception e)
1:         {
1:             return ByteBufferUtil.bytesToHex(name);
1:         }
1:     }
1: }
============================================================================