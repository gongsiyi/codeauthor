1:2e3727e: /*
1:2e3727e:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e3727e:  * or more contributor license agreements.  See the NOTICE file
1:2e3727e:  * distributed with this work for additional information
1:2e3727e:  * regarding copyright ownership.  The ASF licenses this file
1:2e3727e:  * to you under the Apache License, Version 2.0 (the
1:2e3727e:  * "License"); you may not use this file except in compliance
1:2e3727e:  * with the License.  You may obtain a copy of the License at
1:2e3727e:  *
1:2e3727e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e3727e:  *
1:2e3727e:  * Unless required by applicable law or agreed to in writing, software
1:2e3727e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e3727e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e3727e:  * See the License for the specific language governing permissions and
1:2e3727e:  * limitations under the License.
1:2e3727e:  */
1:2e3727e: package org.apache.cassandra.cql3;
1:2e3727e: 
1:89464ea: import java.util.List;
1:2e3727e: 
1:2e3727e: import org.apache.cassandra.config.ColumnDefinition;
1:2e3727e: import org.apache.cassandra.cql3.functions.Function;
1:2e3727e: 
1:2e3727e: /**
1:2e3727e:  * Base class for <code>Conditions</code> classes.
1:2e3727e:  *
1:2e3727e:  */
1:2e3727e: abstract class AbstractConditions implements Conditions
1:2e3727e: {
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:2e3727e:     {
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     public Iterable<ColumnDefinition> getColumns()
1:2e3727e:     {
1:2e3727e:         return null;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     public boolean isEmpty()
1:2e3727e:     {
1:2e3727e:         return false;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     public boolean appliesToStaticColumns()
1:2e3727e:     {
1:2e3727e:         return false;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     public boolean appliesToRegularColumns()
1:2e3727e:     {
1:2e3727e:         return false;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     public boolean isIfExists()
1:2e3727e:     {
1:2e3727e:         return false;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     public boolean isIfNotExists()
1:2e3727e:     {
1:2e3727e:         return false;
1:2e3727e:     }
1:2e3727e: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:89464ea
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions)
author:blerer
-------------------------------------------------------------------------------
commit:2e3727e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
0: import java.util.Collections;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.cql3.functions.Function;
1: 
1: /**
1:  * Base class for <code>Conditions</code> classes.
1:  *
1:  */
1: abstract class AbstractConditions implements Conditions
1: {
0:     public Iterable<Function> getFunctions()
1:     {
0:         return Collections.emptyList();
1:     }
1: 
1:     public Iterable<ColumnDefinition> getColumns()
1:     {
1:         return null;
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return false;
1:     }
1: 
1:     public boolean appliesToStaticColumns()
1:     {
1:         return false;
1:     }
1: 
1:     public boolean appliesToRegularColumns()
1:     {
1:         return false;
1:     }
1: 
1:     public boolean isIfExists()
1:     {
1:         return false;
1:     }
1: 
1:     public boolean isIfNotExists()
1:     {
1:         return false;
1:     }
1: }
============================================================================