1:e94032a: /*
1:e94032a:  * Licensed to the Apache Software Foundation (ASF) under one
1:e94032a:  * or more contributor license agreements.  See the NOTICE file
1:e94032a:  * distributed with this work for additional information
1:e94032a:  * regarding copyright ownership.  The ASF licenses this file
1:e94032a:  * to you under the Apache License, Version 2.0 (the
1:e94032a:  * "License"); you may not use this file except in compliance
1:e94032a:  * with the License.  You may obtain a copy of the License at
1:e94032a:  *
1:e94032a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e94032a:  *
1:e94032a:  * Unless required by applicable law or agreed to in writing, software
1:e94032a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e94032a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e94032a:  * See the License for the specific language governing permissions and
1:e94032a:  * limitations under the License.
1:e94032a:  */
1:e94032a: 
1:e94032a: package org.apache.cassandra.cql3;
1:e94032a: 
1:e94032a: import org.antlr.runtime.ANTLRStringStream;
1:e94032a: import org.antlr.runtime.CharStream;
1:e94032a: import org.antlr.runtime.CommonTokenStream;
1:e94032a: import org.antlr.runtime.RecognitionException;
1:e94032a: import org.antlr.runtime.TokenStream;
1:e94032a: import org.apache.cassandra.exceptions.SyntaxException;
1:e94032a: 
1:e94032a: /**
1:e94032a:  * Helper class to encapsulate common code that calls one of the generated methods in {@code CqlParser}.
1:e94032a:  */
1:e94032a: public final class CQLFragmentParser
1:e94032a: {
1:e94032a: 
1:e94032a:     @FunctionalInterface
1:e94032a:     public interface CQLParserFunction<R>
1:e94032a:     {
1:e94032a:         R parse(CqlParser parser) throws RecognitionException;
1:e94032a:     }
1:e94032a: 
1:e94032a:     public static <R> R parseAny(CQLParserFunction<R> parserFunction, String input, String meaning)
1:e94032a:     {
1:e94032a:         try
1:e94032a:         {
1:e94032a:             return parseAnyUnhandled(parserFunction, input);
1:e94032a:         }
1:e94032a:         catch (RuntimeException re)
1:e94032a:         {
1:e94032a:             throw new SyntaxException(String.format("Failed parsing %s: [%s] reason: %s %s",
1:e94032a:                                                     meaning,
1:e94032a:                                                     input,
1:e94032a:                                                     re.getClass().getSimpleName(),
1:e94032a:                                                     re.getMessage()));
1:e94032a:         }
1:e94032a:         catch (RecognitionException e)
1:e94032a:         {
1:e94032a:             throw new SyntaxException("Invalid or malformed " + meaning + ": " + e.getMessage());
1:e94032a:         }
1:e94032a:     }
1:e94032a: 
1:e94032a:     /**
1:e94032a:      * Just call a parser method in {@link CqlParser} - does not do any error handling.
1:e94032a:      */
1:e94032a:     public static <R> R parseAnyUnhandled(CQLParserFunction<R> parserFunction, String input) throws RecognitionException
1:e94032a:     {
1:e94032a:         // Lexer and parser
1:e94032a:         ErrorCollector errorCollector = new ErrorCollector(input);
1:e94032a:         CharStream stream = new ANTLRStringStream(input);
1:e94032a:         CqlLexer lexer = new CqlLexer(stream);
1:e94032a:         lexer.addErrorListener(errorCollector);
1:e94032a: 
1:e94032a:         TokenStream tokenStream = new CommonTokenStream(lexer);
1:e94032a:         CqlParser parser = new CqlParser(tokenStream);
1:e94032a:         parser.addErrorListener(errorCollector);
1:e94032a: 
1:e94032a:         // Parse the query string to a statement instance
1:e94032a:         R r = parserFunction.parse(parser);
1:e94032a: 
1:e94032a:         // The errorCollector has queue up any errors that the lexer and parser may have encountered
1:e94032a:         // along the way, if necessary, we turn the last error into exceptions here.
1:e94032a:         errorCollector.throwFirstSyntaxError();
1:e94032a: 
1:e94032a:         return r;
1:e94032a:     }
1:e94032a: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e94032a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import org.antlr.runtime.ANTLRStringStream;
1: import org.antlr.runtime.CharStream;
1: import org.antlr.runtime.CommonTokenStream;
1: import org.antlr.runtime.RecognitionException;
1: import org.antlr.runtime.TokenStream;
1: import org.apache.cassandra.exceptions.SyntaxException;
1: 
1: /**
1:  * Helper class to encapsulate common code that calls one of the generated methods in {@code CqlParser}.
1:  */
1: public final class CQLFragmentParser
1: {
1: 
1:     @FunctionalInterface
1:     public interface CQLParserFunction<R>
1:     {
1:         R parse(CqlParser parser) throws RecognitionException;
1:     }
1: 
1:     public static <R> R parseAny(CQLParserFunction<R> parserFunction, String input, String meaning)
1:     {
1:         try
1:         {
1:             return parseAnyUnhandled(parserFunction, input);
1:         }
1:         catch (RuntimeException re)
1:         {
1:             throw new SyntaxException(String.format("Failed parsing %s: [%s] reason: %s %s",
1:                                                     meaning,
1:                                                     input,
1:                                                     re.getClass().getSimpleName(),
1:                                                     re.getMessage()));
1:         }
1:         catch (RecognitionException e)
1:         {
1:             throw new SyntaxException("Invalid or malformed " + meaning + ": " + e.getMessage());
1:         }
1:     }
1: 
1:     /**
1:      * Just call a parser method in {@link CqlParser} - does not do any error handling.
1:      */
1:     public static <R> R parseAnyUnhandled(CQLParserFunction<R> parserFunction, String input) throws RecognitionException
1:     {
1:         // Lexer and parser
1:         ErrorCollector errorCollector = new ErrorCollector(input);
1:         CharStream stream = new ANTLRStringStream(input);
1:         CqlLexer lexer = new CqlLexer(stream);
1:         lexer.addErrorListener(errorCollector);
1: 
1:         TokenStream tokenStream = new CommonTokenStream(lexer);
1:         CqlParser parser = new CqlParser(tokenStream);
1:         parser.addErrorListener(errorCollector);
1: 
1:         // Parse the query string to a statement instance
1:         R r = parserFunction.parse(parser);
1: 
1:         // The errorCollector has queue up any errors that the lexer and parser may have encountered
1:         // along the way, if necessary, we turn the last error into exceptions here.
1:         errorCollector.throwFirstSyntaxError();
1: 
1:         return r;
1:     }
1: }
============================================================================