1:a6fa601: /*
1:a6fa601:  * Licensed to the Apache Software Foundation (ASF) under one
1:a6fa601:  * or more contributor license agreements.  See the NOTICE file
1:a6fa601:  * distributed with this work for additional information
1:a6fa601:  * regarding copyright ownership.  The ASF licenses this file
1:a6fa601:  * to you under the Apache License, Version 2.0 (the
1:a6fa601:  * "License"); you may not use this file except in compliance
1:a6fa601:  * with the License.  You may obtain a copy of the License at
1:5dd1654:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:a6fa601:  */
1:6cb811b: package org.apache.cassandra.utils;
5:6cb811b: 
1:1ecdd7f: import java.io.DataInput;
1:6cb811b: import java.io.IOException;
1:6cb811b: 
1:2ae5272: import org.apache.cassandra.db.TypeSizes;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:dc37dea: import org.apache.cassandra.utils.obs.IBitSet;
1:dc37dea: import org.apache.cassandra.utils.obs.OffHeapBitSet;
1:6cb811b: import org.apache.cassandra.utils.obs.OpenBitSet;
1:6cb811b: 
1:23fd75f: final class BloomFilterSerializer
1:5dd1654: {
1:23fd75f:     private BloomFilterSerializer()
1:23fd75f:     {
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     public static void serialize(BloomFilter bf, DataOutputPlus out) throws IOException
1:18d8f26:     {
1:60d9c7f:         out.writeInt(bf.hashCount);
1:60d9c7f:         bf.bitset.serialize(out);
1:18d8f26:     }
1:dc37dea: 
1:23fd75f:     public static BloomFilter deserialize(DataInput in, boolean oldBfHashOrder) throws IOException
1:dc37dea:     {
1:23fd75f:         return deserialize(in, false, oldBfHashOrder);
1:dc37dea:     }
1:c8b6763: 
1:7aafe05:     @SuppressWarnings("resource")
1:23fd75f:     public static BloomFilter deserialize(DataInput in, boolean offheap, boolean oldBfHashOrder) throws IOException
1:c8b6763:     {
1:60d9c7f:         int hashes = in.readInt();
1:60d9c7f:         IBitSet bs = offheap ? OffHeapBitSet.deserialize(in) : OpenBitSet.deserialize(in);
1:c8b6763: 
1:23fd75f:         return new BloomFilter(hashes, bs, oldBfHashOrder);
1:c8b6763:     }
1:5dd1654: 
1:5dd1654:     /**
1:5dd1654:      * Calculates a serialized size of the given Bloom Filter
1:5dd1654:      * @param bf Bloom filter to calculate serialized size
1:03f72ac:      * @see org.apache.cassandra.io.ISerializer#serialize(Object, org.apache.cassandra.io.util.DataOutputPlus)
1:5dd1654:      *
1:5dd1654:      * @return serialized size of the given bloom filter
1:5dd1654:      */
1:23fd75f:     public static long serializedSize(BloomFilter bf)
1:c8b6763:     {
1:03f72ac:         int size = TypeSizes.sizeof(bf.hashCount); // hash count
1:03f72ac:         size += bf.bitset.serializedSize();
1:cb25a8f:         return size;
1:c8b6763:     }
1:5dd1654: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:23fd75f
/////////////////////////////////////////////////////////////////////////
1: final class BloomFilterSerializer
1:     private BloomFilterSerializer()
1:     {
1:     }
1: 
1:     public static void serialize(BloomFilter bf, DataOutputPlus out) throws IOException
1:     public static BloomFilter deserialize(DataInput in, boolean oldBfHashOrder) throws IOException
1:         return deserialize(in, false, oldBfHashOrder);
1:     public static BloomFilter deserialize(DataInput in, boolean offheap, boolean oldBfHashOrder) throws IOException
1:         return new BloomFilter(hashes, bs, oldBfHashOrder);
/////////////////////////////////////////////////////////////////////////
1:     public static long serializedSize(BloomFilter bf)
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
0:     public BloomFilter deserialize(DataInputPlus in) throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.cassandra.io.ISerializer#serialize(Object, org.apache.cassandra.io.util.DataOutputPlus)
0:     public long serializedSize(BloomFilter bf)
1:         int size = TypeSizes.sizeof(bf.hashCount); // hash count
1:         size += bf.bitset.serializedSize();
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
0: class BloomFilterSerializer implements ISerializer<BloomFilter>
/////////////////////////////////////////////////////////////////////////
0:     BloomFilter createFilter(int hashes, IBitSet bs)
1:     {
0:         return new BloomFilter(hashes, bs);
1:     }
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
0:     public void serialize(BloomFilter bf, DataOutputPlus out) throws IOException
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.cassandra.io.ISerializer#serialize(Object, org.apache.cassandra.io.util.DataOutputPlus)
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(BloomFilter bf, DataOutput out) throws IOException
1:         out.writeInt(bf.hashCount);
1:         bf.bitset.serialize(out);
0:     public BloomFilter deserialize(DataInput in) throws IOException
0:         return deserialize(in, false);
0:     public BloomFilter deserialize(DataInput in, boolean offheap) throws IOException
1:         int hashes = in.readInt();
1:         IBitSet bs = offheap ? OffHeapBitSet.deserialize(in) : OpenBitSet.deserialize(in);
commit:a15500e
/////////////////////////////////////////////////////////////////////////
0:         dos.writeInt(bf.hashCount);
/////////////////////////////////////////////////////////////////////////
0:         int size = typeSizes.sizeof(bf.hashCount); // hash count
commit:dc37dea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.obs.IBitSet;
1: import org.apache.cassandra.utils.obs.OffHeapBitSet;
0:         bf.bitset.serialize(dos);
0:         return deserialize(dis, false);
1:     }
1: 
0:     public BloomFilter deserialize(DataInput dis, boolean offheap) throws IOException
1:     {
0:         IBitSet bs = offheap ? OffHeapBitSet.deserialize(dis) : OpenBitSet.deserialize(dis);
0:     protected abstract BloomFilter createFilter(int hashes, IBitSet bs);
/////////////////////////////////////////////////////////////////////////
0:         int size = typeSizes.sizeof(bf.getHashCount()); // hash count
0:         size += bf.bitset.serializedSize(typeSizes);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:     public long serializedSize(BloomFilter bf, TypeSizes typeSizes)
commit:2eacaf7
/////////////////////////////////////////////////////////////////////////
0:      * @see BloomFilterSerializer#serialize(BloomFilter, DataOutput)
commit:c8b6763
/////////////////////////////////////////////////////////////////////////
0:         int bitLength = bf.bitset.getNumWords();
0:         int pageSize = bf.bitset.getPageSize();
0:         int pageCount = bf.bitset.getPageCount();
0:         for (int p = 0; p < pageCount; p++)
1:         {
0:             long[] bits = bf.bitset.getPage(p);
0:             for (int i = 0; i < pageSize && bitLength-- > 0; i++)
0:                 dos.writeLong(bits[i]);
1:         }
0:         long bitLength = dis.readInt();
0:         OpenBitSet bs = new OpenBitSet(bitLength << 6);
0:         int pageSize = bs.getPageSize();
0:         int pageCount = bs.getPageCount();
1: 
0:         for (int p = 0; p < pageCount; p++)
1:         {
0:             long[] bits = bs.getPage(p);
0:             for (int i = 0; i < pageSize && bitLength-- > 0; i++)
0:                 bits[i] = dis.readLong();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
0:                + bf.bitset.getNumWords() * DBConstants.longSize; // buckets
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.ISerializer;
0: public class BloomFilterSerializer implements ISerializer<BloomFilter>
/////////////////////////////////////////////////////////////////////////
0:     public long serializedSize(BloomFilter bf)
commit:51481b6
/////////////////////////////////////////////////////////////////////////
0:         return DBConstants.intSize // hash count
0:                + DBConstants.intSize // length
0:                + bf.bitset.getBits().length * DBConstants.longSize; // buckets
commit:5dd1654
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBConstants;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Calculates a serialized size of the given Bloom Filter
0:      * @see this.serialize(BloomFilter, DataOutput)
1:      *
1:      * @param bf Bloom filter to calculate serialized size
1:      *
1:      * @return serialized size of the given bloom filter
1:      */
0:     public static int serializedSize(BloomFilter bf)
1:     {
0:         return DBConstants.intSize_ // hash count
0:                + DBConstants.intSize_ // length
0:                + bf.bitset.getBits().length * DBConstants.longSize_; // buckets
1:     }
commit:6cb811b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import org.apache.cassandra.utils.obs.OpenBitSet;
0: import org.apache.cassandra.io.ICompactSerializer;
1: 
0: class BloomFilterSerializer implements ICompactSerializer<BloomFilter>
0: {
0:     public void serialize(BloomFilter bf, DataOutputStream dos) throws IOException
0:     {
0:         long[] bits = bf.bitset.getBits();
0:         int bitLength = bits.length;
1: 
0:         dos.writeInt(bf.getHashCount());
0:         dos.writeInt(bitLength);
1: 
0:         for (int i = 0; i < bitLength; i++)
0:             dos.writeLong(bits[i]);
0:         dos.flush();
0:     }
1: 
0:     public BloomFilter deserialize(DataInputStream dis) throws IOException
0:     {
0:         int hashes = dis.readInt();
0:         int bitLength = dis.readInt();
0:         long[] bits = new long[bitLength];
0:         for (int i = 0; i < bitLength; i++)
0:             bits[i] = dis.readLong();
0:         OpenBitSet bs = new OpenBitSet(bits, bitLength);
0:         return new BloomFilter(hashes, bs);
0:     }
0: }
1: 
1: 
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
/////////////////////////////////////////////////////////////////////////
0:     public long serializedSize(BloomFilter bf, DBTypeSizes typeSizes)
0:         int bitLength = bf.bitset.getNumWords();
0:         int pageSize = bf.bitset.getPageSize();
0:         int pageCount = bf.bitset.getPageCount();
0: 
0:         int size = 0;
0:         size += typeSizes.sizeof(bf.getHashCount()); // hash count
0:         size += typeSizes.sizeof(bitLength); // length
0: 
0:         for (int p = 0; p < pageCount; p++)
0:         {
0:             long[] bits = bf.bitset.getPage(p);
0:             for (int i = 0; i < pageSize && bitLength-- > 0; i++)
0:                 size += typeSizes.sizeof(bits[i]); // bucket
0:         }
1:         return size;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:d765b24
/////////////////////////////////////////////////////////////////////////
0: abstract class BloomFilterSerializer implements ISerializer<BloomFilter>
/////////////////////////////////////////////////////////////////////////
0:         return createFilter(hashes, bs);
0:     protected abstract BloomFilter createFilter(int hashes, OpenBitSet bs);
0: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.utils;
commit:f95fc45
/////////////////////////////////////////////////////////////////////////
0:         return DBConstants.INT_SIZE // hash count
0:                + DBConstants.INT_SIZE // length
0:                + bf.bitset.getNumWords() * DBConstants.LONG_SIZE; // buckets
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
0: import java.io.DataOutput;
0: import org.apache.cassandra.io.ICompactSerializer2;
0: import org.apache.cassandra.utils.obs.OpenBitSet;
0: 
0: class BloomFilterSerializer implements ICompactSerializer2<BloomFilter>
0:     public void serialize(BloomFilter bf, DataOutput dos) throws IOException
/////////////////////////////////////////////////////////////////////////
0:     public BloomFilter deserialize(DataInput dis) throws IOException
author:Eric Evans
-------------------------------------------------------------------------------
commit:a6fa601
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================