1:9ed2727: /*
1:9ed2727:  * Licensed to the Apache Software Foundation (ASF) under one
1:9ed2727:  * or more contributor license agreements.  See the NOTICE file
1:9ed2727:  * distributed with this work for additional information
1:9ed2727:  * regarding copyright ownership.  The ASF licenses this file
1:9ed2727:  * to you under the Apache License, Version 2.0 (the
1:9ed2727:  * "License"); you may not use this file except in compliance
1:9ed2727:  * with the License.  You may obtain a copy of the License at
1:9ed2727:  *
1:9ed2727:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9ed2727:  *
1:9ed2727:  * Unless required by applicable law or agreed to in writing, software
1:9ed2727:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ed2727:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ed2727:  * See the License for the specific language governing permissions and
1:9ed2727:  * limitations under the License.
1:9ed2727:  */
1:9ed2727: 
1:9ed2727: package org.apache.cassandra.io.sstable;
1:9ed2727: 
1:9ed2727: import java.util.Collection;
1:9ed2727: import java.util.UUID;
1:9ed2727: 
1:9ed2727: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:9ed2727: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:9ed2727: import org.apache.cassandra.utils.Throwables;
1:9ed2727: import org.apache.cassandra.utils.concurrent.Transactional;
1:9ed2727: 
1:9ed2727: public interface SSTableMultiWriter extends Transactional
1:9ed2727: {
1:9ed2727: 
1:9ed2727:     /**
1:9ed2727:      * Writes a partition in an implementation specific way
1:9ed2727:      * @param partition the partition to append
1:9ed2727:      * @return true if the partition was written, false otherwise
1:9ed2727:      */
1:9ed2727:     boolean append(UnfilteredRowIterator partition);
1:9ed2727: 
1:9ed2727:     Collection<SSTableReader> finish(long repairedAt, long maxDataAge, boolean openResult);
1:9ed2727:     Collection<SSTableReader> finish(boolean openResult);
1:9ed2727:     Collection<SSTableReader> finished();
1:9ed2727: 
1:9ed2727:     SSTableMultiWriter setOpenResult(boolean openResult);
1:9ed2727: 
1:9ed2727:     String getFilename();
1:9ed2727:     long getFilePointer();
1:9ed2727:     UUID getCfId();
1:9ed2727: 
1:9ed2727:     static void abortOrDie(SSTableMultiWriter writer)
1:9ed2727:     {
1:9ed2727:         Throwables.maybeFail(writer.abort(null));
1:9ed2727:     }
1:9ed2727: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.util.Collection;
0: import java.util.List;
1: import java.util.UUID;
1: 
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.utils.Throwables;
1: import org.apache.cassandra.utils.concurrent.Transactional;
1: 
1: public interface SSTableMultiWriter extends Transactional
1: {
1: 
1:     /**
1:      * Writes a partition in an implementation specific way
1:      * @param partition the partition to append
1:      * @return true if the partition was written, false otherwise
1:      */
1:     boolean append(UnfilteredRowIterator partition);
1: 
1:     Collection<SSTableReader> finish(long repairedAt, long maxDataAge, boolean openResult);
1:     Collection<SSTableReader> finish(boolean openResult);
1:     Collection<SSTableReader> finished();
1: 
1:     SSTableMultiWriter setOpenResult(boolean openResult);
1: 
1:     String getFilename();
1:     long getFilePointer();
1:     UUID getCfId();
1: 
1:     static void abortOrDie(SSTableMultiWriter writer)
1:     {
1:         Throwables.maybeFail(writer.abort(null));
1:     }
1: }
============================================================================