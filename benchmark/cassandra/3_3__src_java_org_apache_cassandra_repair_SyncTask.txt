1:810c2d5: /*
1:810c2d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:810c2d5:  * or more contributor license agreements.  See the NOTICE file
1:810c2d5:  * distributed with this work for additional information
1:810c2d5:  * regarding copyright ownership.  The ASF licenses this file
1:810c2d5:  * to you under the Apache License, Version 2.0 (the
1:810c2d5:  * "License"); you may not use this file except in compliance
1:810c2d5:  * with the License.  You may obtain a copy of the License at
1:810c2d5:  *
1:810c2d5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:810c2d5:  *
1:810c2d5:  * Unless required by applicable law or agreed to in writing, software
1:810c2d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:810c2d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:810c2d5:  * See the License for the specific language governing permissions and
1:810c2d5:  * limitations under the License.
1:810c2d5:  */
1:810c2d5: package org.apache.cassandra.repair;
1:810c2d5: 
1:810c2d5: import java.util.List;
1:810c2d5: 
1:810c2d5: import com.google.common.util.concurrent.AbstractFuture;
1:810c2d5: import org.slf4j.Logger;
1:810c2d5: import org.slf4j.LoggerFactory;
1:810c2d5: 
1:810c2d5: import org.apache.cassandra.dht.Range;
1:810c2d5: import org.apache.cassandra.dht.Token;
1:f5866ca: import org.apache.cassandra.tracing.Tracing;
1:0dd50a6: import org.apache.cassandra.utils.MerkleTrees;
1:810c2d5: 
1:810c2d5: /**
1:810c2d5:  * SyncTask will calculate the difference of MerkleTree between two nodes
1:810c2d5:  * and perform necessary operation to repair replica.
1:810c2d5:  */
1:810c2d5: public abstract class SyncTask extends AbstractFuture<SyncStat> implements Runnable
1:810c2d5: {
1:810c2d5:     private static Logger logger = LoggerFactory.getLogger(SyncTask.class);
1:810c2d5: 
1:810c2d5:     protected final RepairJobDesc desc;
1:810c2d5:     protected final TreeResponse r1;
1:810c2d5:     protected final TreeResponse r2;
1:810c2d5: 
1:810c2d5:     protected volatile SyncStat stat;
1:810c2d5: 
1:810c2d5:     public SyncTask(RepairJobDesc desc, TreeResponse r1, TreeResponse r2)
1:810c2d5:     {
1:810c2d5:         this.desc = desc;
1:810c2d5:         this.r1 = r1;
1:810c2d5:         this.r2 = r2;
1:810c2d5:     }
1:810c2d5: 
1:810c2d5:     /**
1:810c2d5:      * Compares trees, and triggers repairs for any ranges that mismatch.
1:810c2d5:      */
1:810c2d5:     public void run()
1:810c2d5:     {
1:810c2d5:         // compare trees, and collect differences
1:0dd50a6:         List<Range<Token>> differences = MerkleTrees.difference(r1.trees, r2.trees);
1:810c2d5: 
1:810c2d5:         stat = new SyncStat(new NodePair(r1.endpoint, r2.endpoint), differences.size());
1:810c2d5: 
1:810c2d5:         // choose a repair method based on the significance of the difference
1:810c2d5:         String format = String.format("[repair #%s] Endpoints %s and %s %%s for %s", desc.sessionId, r1.endpoint, r2.endpoint, desc.columnFamily);
1:810c2d5:         if (differences.isEmpty())
1:810c2d5:         {
1:810c2d5:             logger.info(String.format(format, "are consistent"));
1:f5866ca:             Tracing.traceRepair("Endpoint {} is consistent with {} for {}", r1.endpoint, r2.endpoint, desc.columnFamily);
1:810c2d5:             set(stat);
1:810c2d5:             return;
1:810c2d5:         }
1:810c2d5: 
1:810c2d5:         // non-0 difference: perform streaming repair
1:810c2d5:         logger.info(String.format(format, "have " + differences.size() + " range(s) out of sync"));
1:f5866ca:         Tracing.traceRepair("Endpoint {} has {} range(s) out of sync with {} for {}", r1.endpoint, differences.size(), r2.endpoint, desc.columnFamily);
1:810c2d5:         startSync(differences);
1:810c2d5:     }
1:810c2d5: 
1:810c2d5:     public SyncStat getCurrentStat()
1:810c2d5:     {
1:810c2d5:         return stat;
1:810c2d5:     }
1:810c2d5: 
1:810c2d5:     protected abstract void startSync(List<Range<Token>> differences);
1:810c2d5: }
============================================================================
author:Marcus Olsson
-------------------------------------------------------------------------------
commit:0dd50a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.MerkleTrees;
/////////////////////////////////////////////////////////////////////////
1:         List<Range<Token>> differences = MerkleTrees.difference(r1.trees, r2.trees);
author:Ben Chan
-------------------------------------------------------------------------------
commit:f5866ca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.tracing.Tracing;
/////////////////////////////////////////////////////////////////////////
1:             Tracing.traceRepair("Endpoint {} is consistent with {} for {}", r1.endpoint, r2.endpoint, desc.columnFamily);
1:         Tracing.traceRepair("Endpoint {} has {} range(s) out of sync with {} for {}", r1.endpoint, differences.size(), r2.endpoint, desc.columnFamily);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:810c2d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
0: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import com.google.common.util.concurrent.AbstractFuture;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.utils.MerkleTree;
1: 
1: /**
1:  * SyncTask will calculate the difference of MerkleTree between two nodes
1:  * and perform necessary operation to repair replica.
1:  */
1: public abstract class SyncTask extends AbstractFuture<SyncStat> implements Runnable
1: {
1:     private static Logger logger = LoggerFactory.getLogger(SyncTask.class);
1: 
1:     protected final RepairJobDesc desc;
1:     protected final TreeResponse r1;
1:     protected final TreeResponse r2;
1: 
1:     protected volatile SyncStat stat;
1: 
1:     public SyncTask(RepairJobDesc desc, TreeResponse r1, TreeResponse r2)
1:     {
1:         this.desc = desc;
1:         this.r1 = r1;
1:         this.r2 = r2;
1:     }
1: 
1:     /**
1:      * Compares trees, and triggers repairs for any ranges that mismatch.
1:      */
1:     public void run()
1:     {
1:         // compare trees, and collect differences
0:         List<Range<Token>> differences = new ArrayList<>();
0:         differences.addAll(MerkleTree.difference(r1.tree, r2.tree));
1: 
1:         stat = new SyncStat(new NodePair(r1.endpoint, r2.endpoint), differences.size());
1: 
1:         // choose a repair method based on the significance of the difference
1:         String format = String.format("[repair #%s] Endpoints %s and %s %%s for %s", desc.sessionId, r1.endpoint, r2.endpoint, desc.columnFamily);
1:         if (differences.isEmpty())
1:         {
1:             logger.info(String.format(format, "are consistent"));
1:             set(stat);
1:             return;
1:         }
1: 
1:         // non-0 difference: perform streaming repair
1:         logger.info(String.format(format, "have " + differences.size() + " range(s) out of sync"));
1:         startSync(differences);
1:     }
1: 
1:     public SyncStat getCurrentStat()
1:     {
1:         return stat;
1:     }
1: 
1:     protected abstract void startSync(List<Range<Token>> differences);
1: }
============================================================================