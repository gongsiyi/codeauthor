1:489a9e8: /*
1:489a9e8:  * Copyright (C) 2007 The Guava Authors
1:489a9e8:  *
1:489a9e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:489a9e8:  * you may not use this file except in compliance with the License.
1:489a9e8:  * You may obtain a copy of the License at
1:489a9e8:  *
1:489a9e8:  * http://www.apache.org/licenses/LICENSE-2.0
1:489a9e8:  *
1:489a9e8:  * Unless required by applicable law or agreed to in writing, software
1:489a9e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:489a9e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:489a9e8:  * See the License for the specific language governing permissions and
1:489a9e8:  * limitations under the License.
1:489a9e8:  */
1:489a9e8: 
1:489a9e8: package org.apache.cassandra.utils;
1:489a9e8: 
1:489a9e8: import junit.framework.TestCase;
1:489a9e8: 
1:489a9e8: import java.lang.ref.WeakReference;
1:489a9e8: import java.util.Iterator;
1:489a9e8: import java.util.NoSuchElementException;
1:489a9e8: 
1:489a9e8: /**
1:489a9e8:  * Unit test for {@code AbstractIterator}.
1:489a9e8:  *
1:489a9e8:  * @author Kevin Bourrillion
1:489a9e8:  */
1:489a9e8: @SuppressWarnings("serial") // No serialization is used in this test
1:489a9e8: // TODO(cpovirk): why is this slow (>1m/test) under GWT when fully optimized?
1:489a9e8: public class AbstractIteratorTest extends TestCase
1:489a9e8: {
1:489a9e8: 
1:489a9e8:     public void testDefaultBehaviorOfNextAndHasNext()
1:489a9e8:     {
1:489a9e8: 
1:489a9e8:         // This sample AbstractIterator returns 0 on the first call, 1 on the
1:489a9e8:         // second, then signals that it's reached the end of the data
1:489a9e8:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             private int rep;
1:489a9e8: 
1:489a9e8:             @Override
1:489a9e8:             public Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 switch (rep++)
1:489a9e8:                 {
1:489a9e8:                     case 0:
1:489a9e8:                         return 0;
1:489a9e8:                     case 1:
1:489a9e8:                         return 1;
1:489a9e8:                     case 2:
1:489a9e8:                         return endOfData();
1:489a9e8:                     default:
1:489a9e8:                         fail("Should not have been invoked again");
1:489a9e8:                         return null;
1:489a9e8:                 }
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8: 
1:489a9e8:         assertTrue(iter.hasNext());
1:489a9e8:         assertEquals(0, (int) iter.next());
1:489a9e8: 
1:489a9e8:         // verify idempotence of hasNext()
1:489a9e8:         assertTrue(iter.hasNext());
1:489a9e8:         assertTrue(iter.hasNext());
1:489a9e8:         assertTrue(iter.hasNext());
1:489a9e8:         assertEquals(1, (int) iter.next());
1:489a9e8: 
1:489a9e8:         assertFalse(iter.hasNext());
1:489a9e8: 
1:489a9e8:         // Make sure computeNext() doesn't get invoked again
1:489a9e8:         assertFalse(iter.hasNext());
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.next();
1:489a9e8:             fail("no exception thrown");
1:489a9e8:         }
1:489a9e8:         catch (NoSuchElementException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testDefaultBehaviorOfPeek()
1:489a9e8:     {
1:489a9e8:     /*
1:489a9e8:      * This sample AbstractIterator returns 0 on the first call, 1 on the
1:489a9e8:      * second, then signals that it's reached the end of the data
1:489a9e8:      */
1:489a9e8:         AbstractIterator<Integer> iter = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             private int rep;
1:489a9e8: 
1:489a9e8:             @Override
1:489a9e8:             public Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 switch (rep++)
1:489a9e8:                 {
1:489a9e8:                     case 0:
1:489a9e8:                         return 0;
1:489a9e8:                     case 1:
1:489a9e8:                         return 1;
1:489a9e8:                     case 2:
1:489a9e8:                         return endOfData();
1:489a9e8:                     default:
1:489a9e8:                         fail("Should not have been invoked again");
1:489a9e8:                         return null;
1:489a9e8:                 }
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8: 
1:489a9e8:         assertEquals(0, (int) iter.peek());
1:489a9e8:         assertEquals(0, (int) iter.peek());
1:489a9e8:         assertTrue(iter.hasNext());
1:489a9e8:         assertEquals(0, (int) iter.peek());
1:489a9e8:         assertEquals(0, (int) iter.next());
1:489a9e8: 
1:489a9e8:         assertEquals(1, (int) iter.peek());
1:489a9e8:         assertEquals(1, (int) iter.next());
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.peek();
1:489a9e8:             fail("peek() should throw NoSuchElementException at end");
1:489a9e8:         }
1:489a9e8:         catch (NoSuchElementException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.peek();
1:489a9e8:             fail("peek() should continue to throw NoSuchElementException at end");
1:489a9e8:         }
1:489a9e8:         catch (NoSuchElementException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.next();
1:489a9e8:             fail("next() should throw NoSuchElementException as usual");
1:489a9e8:         }
1:489a9e8:         catch (NoSuchElementException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.peek();
1:489a9e8:             fail("peek() should still throw NoSuchElementException after next()");
1:489a9e8:         }
1:489a9e8:         catch (NoSuchElementException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testFreesNextReference() throws InterruptedException
1:489a9e8:     {
1:489a9e8:         Iterator<Object> itr = new AbstractIterator<Object>()
1:489a9e8:         {
1:489a9e8:             @Override
1:489a9e8:             public Object computeNext()
1:489a9e8:             {
1:489a9e8:                 return new Object();
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8:         WeakReference<Object> ref = new WeakReference<Object>(itr.next());
1:489a9e8:         while (ref.get() != null)
1:489a9e8:         {
1:489a9e8:             System.gc();
1:489a9e8:             Thread.sleep(1);
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testDefaultBehaviorOfPeekForEmptyIteration()
1:489a9e8:     {
1:489a9e8: 
1:489a9e8:         AbstractIterator<Integer> empty = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             private boolean alreadyCalledEndOfData;
1:489a9e8: 
1:489a9e8:             @Override
1:489a9e8:             public Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 if (alreadyCalledEndOfData)
1:489a9e8:                 {
1:489a9e8:                     fail("Should not have been invoked again");
1:489a9e8:                 }
1:489a9e8:                 alreadyCalledEndOfData = true;
1:489a9e8:                 return endOfData();
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             empty.peek();
1:489a9e8:             fail("peek() should throw NoSuchElementException at end");
1:489a9e8:         }
1:489a9e8:         catch (NoSuchElementException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             empty.peek();
1:489a9e8:             fail("peek() should continue to throw NoSuchElementException at end");
1:489a9e8:         }
1:489a9e8:         catch (NoSuchElementException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testException()
1:489a9e8:     {
1:489a9e8:         final SomeUncheckedException exception = new SomeUncheckedException();
1:489a9e8:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             @Override
1:489a9e8:             public Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 throw exception;
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8: 
1:489a9e8:         // It should pass through untouched
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.hasNext();
1:489a9e8:             fail("No exception thrown");
1:489a9e8:         }
1:489a9e8:         catch (SomeUncheckedException e)
1:489a9e8:         {
1:489a9e8:             assertSame(exception, e);
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testExceptionAfterEndOfData()
1:489a9e8:     {
1:489a9e8:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             @Override
1:489a9e8:             public Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 endOfData();
1:489a9e8:                 throw new SomeUncheckedException();
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.hasNext();
1:489a9e8:             fail("No exception thrown");
1:489a9e8:         }
1:489a9e8:         catch (SomeUncheckedException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testCantRemove()
1:489a9e8:     {
1:489a9e8:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             boolean haveBeenCalled;
1:489a9e8: 
1:489a9e8:             @Override
1:489a9e8:             public Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 if (haveBeenCalled)
1:489a9e8:                 {
1:489a9e8:                     endOfData();
1:489a9e8:                 }
1:489a9e8:                 haveBeenCalled = true;
1:489a9e8:                 return 0;
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8: 
1:489a9e8:         assertEquals(0, (int) iter.next());
1:489a9e8: 
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.remove();
1:489a9e8:             fail("No exception thrown");
1:489a9e8:         }
1:489a9e8:         catch (UnsupportedOperationException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testSneakyThrow() throws Exception
1:489a9e8:     {
1:489a9e8:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             boolean haveBeenCalled;
1:489a9e8: 
1:489a9e8:             @Override
1:489a9e8:             public Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 if (haveBeenCalled)
1:489a9e8:                 {
1:489a9e8:                     fail("Should not have been called again");
1:489a9e8:                 }
1:489a9e8:                 else
1:489a9e8:                 {
1:489a9e8:                     haveBeenCalled = true;
1:489a9e8:                     sneakyThrow(new SomeCheckedException());
1:489a9e8:                 }
1:489a9e8:                 return null; // never reached
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8: 
1:489a9e8:         // The first time, the sneakily-thrown exception comes out
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.hasNext();
1:489a9e8:             fail("No exception thrown");
1:489a9e8:         }
1:489a9e8:         catch (Exception e)
1:489a9e8:         {
1:489a9e8:             if (!(e instanceof SomeCheckedException))
1:489a9e8:             {
1:489a9e8:                 throw e;
1:489a9e8:             }
1:489a9e8:         }
1:489a9e8: 
1:489a9e8:         // But the second time, AbstractIterator itself throws an ISE
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.hasNext();
1:489a9e8:             fail("No exception thrown");
1:489a9e8:         }
1:489a9e8:         catch (IllegalStateException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void testReentrantHasNext()
1:489a9e8:     {
1:489a9e8:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:489a9e8:         {
1:489a9e8:             @Override
1:489a9e8:             protected Integer computeNext()
1:489a9e8:             {
1:489a9e8:                 hasNext();
1:489a9e8:                 return null;
1:489a9e8:             }
1:489a9e8:         };
1:489a9e8:         try
1:489a9e8:         {
1:489a9e8:             iter.hasNext();
1:489a9e8:             fail();
1:489a9e8:         }
1:489a9e8:         catch (IllegalStateException expected)
1:489a9e8:         {
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     /**
1:489a9e8:      * Throws a undeclared checked exception.
1:489a9e8:      */
1:489a9e8:     private static void sneakyThrow(Throwable t)
1:489a9e8:     {
1:489a9e8:         class SneakyThrower<T extends Throwable>
1:489a9e8:         {
1:489a9e8:             @SuppressWarnings("unchecked")
1:489a9e8:                 // not really safe, but that's the point
1:489a9e8:             void throwIt(Throwable t) throws T
1:489a9e8:             {
1:489a9e8:                 throw (T) t;
1:489a9e8:             }
1:489a9e8:         }
1:489a9e8:         new SneakyThrower<Error>().throwIt(t);
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     private static class SomeCheckedException extends Exception
1:489a9e8:     {
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     private static class SomeUncheckedException extends RuntimeException
1:489a9e8:     {
1:489a9e8:     }
1:489a9e8: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (C) 2007 The Guava Authors
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.utils;
1: 
1: import junit.framework.TestCase;
1: 
1: import java.lang.ref.WeakReference;
1: import java.util.Iterator;
1: import java.util.NoSuchElementException;
1: 
1: /**
1:  * Unit test for {@code AbstractIterator}.
1:  *
1:  * @author Kevin Bourrillion
1:  */
1: @SuppressWarnings("serial") // No serialization is used in this test
1: // TODO(cpovirk): why is this slow (>1m/test) under GWT when fully optimized?
1: public class AbstractIteratorTest extends TestCase
1: {
1: 
1:     public void testDefaultBehaviorOfNextAndHasNext()
1:     {
1: 
1:         // This sample AbstractIterator returns 0 on the first call, 1 on the
1:         // second, then signals that it's reached the end of the data
1:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:         {
1:             private int rep;
1: 
1:             @Override
1:             public Integer computeNext()
1:             {
1:                 switch (rep++)
1:                 {
1:                     case 0:
1:                         return 0;
1:                     case 1:
1:                         return 1;
1:                     case 2:
1:                         return endOfData();
1:                     default:
1:                         fail("Should not have been invoked again");
1:                         return null;
1:                 }
1:             }
1:         };
1: 
1:         assertTrue(iter.hasNext());
1:         assertEquals(0, (int) iter.next());
1: 
1:         // verify idempotence of hasNext()
1:         assertTrue(iter.hasNext());
1:         assertTrue(iter.hasNext());
1:         assertTrue(iter.hasNext());
1:         assertEquals(1, (int) iter.next());
1: 
1:         assertFalse(iter.hasNext());
1: 
1:         // Make sure computeNext() doesn't get invoked again
1:         assertFalse(iter.hasNext());
1: 
1:         try
1:         {
1:             iter.next();
1:             fail("no exception thrown");
1:         }
1:         catch (NoSuchElementException expected)
1:         {
1:         }
1:     }
1: 
1:     public void testDefaultBehaviorOfPeek()
1:     {
1:     /*
1:      * This sample AbstractIterator returns 0 on the first call, 1 on the
1:      * second, then signals that it's reached the end of the data
1:      */
1:         AbstractIterator<Integer> iter = new AbstractIterator<Integer>()
1:         {
1:             private int rep;
1: 
1:             @Override
1:             public Integer computeNext()
1:             {
1:                 switch (rep++)
1:                 {
1:                     case 0:
1:                         return 0;
1:                     case 1:
1:                         return 1;
1:                     case 2:
1:                         return endOfData();
1:                     default:
1:                         fail("Should not have been invoked again");
1:                         return null;
1:                 }
1:             }
1:         };
1: 
1:         assertEquals(0, (int) iter.peek());
1:         assertEquals(0, (int) iter.peek());
1:         assertTrue(iter.hasNext());
1:         assertEquals(0, (int) iter.peek());
1:         assertEquals(0, (int) iter.next());
1: 
1:         assertEquals(1, (int) iter.peek());
1:         assertEquals(1, (int) iter.next());
1: 
1:         try
1:         {
1:             iter.peek();
1:             fail("peek() should throw NoSuchElementException at end");
1:         }
1:         catch (NoSuchElementException expected)
1:         {
1:         }
1: 
1:         try
1:         {
1:             iter.peek();
1:             fail("peek() should continue to throw NoSuchElementException at end");
1:         }
1:         catch (NoSuchElementException expected)
1:         {
1:         }
1: 
1:         try
1:         {
1:             iter.next();
1:             fail("next() should throw NoSuchElementException as usual");
1:         }
1:         catch (NoSuchElementException expected)
1:         {
1:         }
1: 
1:         try
1:         {
1:             iter.peek();
1:             fail("peek() should still throw NoSuchElementException after next()");
1:         }
1:         catch (NoSuchElementException expected)
1:         {
1:         }
1:     }
1: 
1:     public void testFreesNextReference() throws InterruptedException
1:     {
1:         Iterator<Object> itr = new AbstractIterator<Object>()
1:         {
1:             @Override
1:             public Object computeNext()
1:             {
1:                 return new Object();
1:             }
1:         };
1:         WeakReference<Object> ref = new WeakReference<Object>(itr.next());
1:         while (ref.get() != null)
1:         {
1:             System.gc();
1:             Thread.sleep(1);
1:         }
1:     }
1: 
1:     public void testDefaultBehaviorOfPeekForEmptyIteration()
1:     {
1: 
1:         AbstractIterator<Integer> empty = new AbstractIterator<Integer>()
1:         {
1:             private boolean alreadyCalledEndOfData;
1: 
1:             @Override
1:             public Integer computeNext()
1:             {
1:                 if (alreadyCalledEndOfData)
1:                 {
1:                     fail("Should not have been invoked again");
1:                 }
1:                 alreadyCalledEndOfData = true;
1:                 return endOfData();
1:             }
1:         };
1: 
1:         try
1:         {
1:             empty.peek();
1:             fail("peek() should throw NoSuchElementException at end");
1:         }
1:         catch (NoSuchElementException expected)
1:         {
1:         }
1: 
1:         try
1:         {
1:             empty.peek();
1:             fail("peek() should continue to throw NoSuchElementException at end");
1:         }
1:         catch (NoSuchElementException expected)
1:         {
1:         }
1:     }
1: 
1:     public void testException()
1:     {
1:         final SomeUncheckedException exception = new SomeUncheckedException();
1:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:         {
1:             @Override
1:             public Integer computeNext()
1:             {
1:                 throw exception;
1:             }
1:         };
1: 
1:         // It should pass through untouched
1:         try
1:         {
1:             iter.hasNext();
1:             fail("No exception thrown");
1:         }
1:         catch (SomeUncheckedException e)
1:         {
1:             assertSame(exception, e);
1:         }
1:     }
1: 
1:     public void testExceptionAfterEndOfData()
1:     {
1:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:         {
1:             @Override
1:             public Integer computeNext()
1:             {
1:                 endOfData();
1:                 throw new SomeUncheckedException();
1:             }
1:         };
1:         try
1:         {
1:             iter.hasNext();
1:             fail("No exception thrown");
1:         }
1:         catch (SomeUncheckedException expected)
1:         {
1:         }
1:     }
1: 
1:     public void testCantRemove()
1:     {
1:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:         {
1:             boolean haveBeenCalled;
1: 
1:             @Override
1:             public Integer computeNext()
1:             {
1:                 if (haveBeenCalled)
1:                 {
1:                     endOfData();
1:                 }
1:                 haveBeenCalled = true;
1:                 return 0;
1:             }
1:         };
1: 
1:         assertEquals(0, (int) iter.next());
1: 
1:         try
1:         {
1:             iter.remove();
1:             fail("No exception thrown");
1:         }
1:         catch (UnsupportedOperationException expected)
1:         {
1:         }
1:     }
1: 
1:     public void testSneakyThrow() throws Exception
1:     {
1:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:         {
1:             boolean haveBeenCalled;
1: 
1:             @Override
1:             public Integer computeNext()
1:             {
1:                 if (haveBeenCalled)
1:                 {
1:                     fail("Should not have been called again");
1:                 }
1:                 else
1:                 {
1:                     haveBeenCalled = true;
1:                     sneakyThrow(new SomeCheckedException());
1:                 }
1:                 return null; // never reached
1:             }
1:         };
1: 
1:         // The first time, the sneakily-thrown exception comes out
1:         try
1:         {
1:             iter.hasNext();
1:             fail("No exception thrown");
1:         }
1:         catch (Exception e)
1:         {
1:             if (!(e instanceof SomeCheckedException))
1:             {
1:                 throw e;
1:             }
1:         }
1: 
1:         // But the second time, AbstractIterator itself throws an ISE
1:         try
1:         {
1:             iter.hasNext();
1:             fail("No exception thrown");
1:         }
1:         catch (IllegalStateException expected)
1:         {
1:         }
1:     }
1: 
1:     public void testReentrantHasNext()
1:     {
1:         Iterator<Integer> iter = new AbstractIterator<Integer>()
1:         {
1:             @Override
1:             protected Integer computeNext()
1:             {
1:                 hasNext();
1:                 return null;
1:             }
1:         };
1:         try
1:         {
1:             iter.hasNext();
1:             fail();
1:         }
1:         catch (IllegalStateException expected)
1:         {
1:         }
1:     }
1: 
1:     /**
1:      * Throws a undeclared checked exception.
1:      */
1:     private static void sneakyThrow(Throwable t)
1:     {
1:         class SneakyThrower<T extends Throwable>
1:         {
1:             @SuppressWarnings("unchecked")
1:                 // not really safe, but that's the point
1:             void throwIt(Throwable t) throws T
1:             {
1:                 throw (T) t;
1:             }
1:         }
1:         new SneakyThrower<Error>().throwIt(t);
1:     }
1: 
1:     private static class SomeCheckedException extends Exception
1:     {
1:     }
1: 
1:     private static class SomeUncheckedException extends RuntimeException
1:     {
1:     }
1: }
============================================================================