1:9c5ac8f: /*
1:9c5ac8f:  *
1:9c5ac8f:  * Licensed to the Apache Software Foundation (ASF) under one
1:9c5ac8f:  * or more contributor license agreements.  See the NOTICE file
1:9c5ac8f:  * distributed with this work for additional information
1:9c5ac8f:  * regarding copyright ownership.  The ASF licenses this file
1:9c5ac8f:  * to you under the Apache License, Version 2.0 (the
1:9c5ac8f:  * "License"); you may not use this file except in compliance
1:9c5ac8f:  * with the License.  You may obtain a copy of the License at
1:9c5ac8f:  *
1:9c5ac8f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9c5ac8f:  *
1:9c5ac8f:  * Unless required by applicable law or agreed to in writing,
1:9c5ac8f:  * software distributed under the License is distributed on an
1:9c5ac8f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9c5ac8f:  * KIND, either express or implied.  See the License for the
1:9c5ac8f:  * specific language governing permissions and limitations
1:9c5ac8f:  * under the License.
1:9c5ac8f:  *
1:9c5ac8f:  */
1:9c5ac8f: package org.apache.cassandra.metrics;
2:9c5ac8f: 
1:69cedbf: 
1:8896a70: import com.codahale.metrics.Meter;
1:8896a70: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:69cedbf: 
1:69cedbf: public class ClientRequestMetrics extends LatencyMetrics
1:9c5ac8f: {
1:69cedbf:     public final Meter timeouts;
1:69cedbf:     public final Meter unavailables;
1:c6525da:     public final Meter failures;
1:69cedbf: 
1:69cedbf:     public ClientRequestMetrics(String scope)
1:69cedbf:     {
1:eb390d0:         super("ClientRequest", scope);
1:69cedbf: 
1:8896a70:         timeouts = Metrics.meter(factory.createMetricName("Timeouts"));
1:8896a70:         unavailables = Metrics.meter(factory.createMetricName("Unavailables"));
1:8896a70:         failures = Metrics.meter(factory.createMetricName("Failures"));
1:69cedbf:     }
1:69cedbf: 
1:69cedbf:     public void release()
1:69cedbf:     {
1:69cedbf:         super.release();
1:8896a70:         Metrics.remove(factory.createMetricName("Timeouts"));
1:8896a70:         Metrics.remove(factory.createMetricName("Unavailables"));
1:8896a70:         Metrics.remove(factory.createMetricName("Failures"));
1:69cedbf:     }
1:9c5ac8f: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Meter;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
1:         timeouts = Metrics.meter(factory.createMetricName("Timeouts"));
1:         unavailables = Metrics.meter(factory.createMetricName("Unavailables"));
1:         failures = Metrics.meter(factory.createMetricName("Failures"));
1:         Metrics.remove(factory.createMetricName("Timeouts"));
1:         Metrics.remove(factory.createMetricName("Unavailables"));
1:         Metrics.remove(factory.createMetricName("Failures"));
author:Christian Spriegel
-------------------------------------------------------------------------------
commit:c6525da
/////////////////////////////////////////////////////////////////////////
0:     @Deprecated public static final Counter readFailures = Metrics.newCounter(DefaultNameFactory.createMetricName("ClientRequestMetrics", "ReadFailures", null));
1:     public final Meter failures;
/////////////////////////////////////////////////////////////////////////
0:         failures = Metrics.newMeter(factory.createMetricName("Failures"), "failures", TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("Failures"));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
0:     @Deprecated public static final Counter readTimeouts = Metrics.newCounter(DefaultNameFactory.createMetricName("ClientRequestMetrics", "ReadTimeouts", null));
0:     @Deprecated public static final Counter writeTimeouts = Metrics.newCounter(DefaultNameFactory.createMetricName("ClientRequestMetrics", "WriteTimeouts", null));
0:     @Deprecated public static final Counter readUnavailables = Metrics.newCounter(DefaultNameFactory.createMetricName("ClientRequestMetrics", "ReadUnavailables", null));
0:     @Deprecated public static final Counter writeUnavailables = Metrics.newCounter(DefaultNameFactory.createMetricName("ClientRequestMetrics", "WriteUnavailables", null));
1:         super("ClientRequest", scope);
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.TimeUnit;
1: 
0: import com.yammer.metrics.core.Meter;
0: import com.yammer.metrics.core.MetricName;
1: public class ClientRequestMetrics extends LatencyMetrics
0:     @Deprecated public static final Counter readTimeouts = Metrics.newCounter(ClientRequestMetrics.class, "ReadTimeouts");
0:     @Deprecated public static final Counter writeTimeouts = Metrics.newCounter(ClientRequestMetrics.class, "WriteTimeouts");
0:     @Deprecated public static final Counter readUnavailables = Metrics.newCounter(ClientRequestMetrics.class, "ReadUnavailables");
0:     @Deprecated public static final Counter writeUnavailables = Metrics.newCounter(ClientRequestMetrics.class, "WriteUnavailables");
1: 
1:     public final Meter timeouts;
1:     public final Meter unavailables;
1: 
1:     public ClientRequestMetrics(String scope)
1:     {
0:         super("org.apache.cassandra.metrics", "ClientRequest", scope);
1: 
0:         timeouts = Metrics.newMeter(factory.createMetricName("Timeouts"), "timeouts", TimeUnit.SECONDS);
0:         unavailables = Metrics.newMeter(factory.createMetricName("Unavailables"), "unavailables", TimeUnit.SECONDS);
1:     }
1: 
1:     public void release()
1:     {
1:         super.release();
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("Timeouts"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("Unavailables"));
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
author:Peter Schuller
-------------------------------------------------------------------------------
commit:9c5ac8f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.metrics;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Counter;
1: 
0: public class ClientRequestMetrics
1: {
0:     public static final Counter readTimeouts = Metrics.newCounter(ClientRequestMetrics.class, "ReadTimeouts");
0:     public static final Counter writeTimeouts = Metrics.newCounter(ClientRequestMetrics.class, "WriteTimeouts");
0:     public static final Counter readUnavailables = Metrics.newCounter(ClientRequestMetrics.class, "ReadUnavailables");
0:     public static final Counter writeUnavailables = Metrics.newCounter(ClientRequestMetrics.class, "WriteUnavailables");
1: }
============================================================================