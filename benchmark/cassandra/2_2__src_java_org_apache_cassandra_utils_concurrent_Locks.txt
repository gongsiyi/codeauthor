1:44e9f23: /*
1:44e9f23:  * Licensed to the Apache Software Foundation (ASF) under one
1:44e9f23:  * or more contributor license agreements.  See the NOTICE file
1:44e9f23:  * distributed with this work for additional information
1:44e9f23:  * regarding copyright ownership.  The ASF licenses this file
1:44e9f23:  * to you under the Apache License, Version 2.0 (the
1:44e9f23:  * "License"); you may not use this file except in compliance
1:44e9f23:  * with the License.  You may obtain a copy of the License at
1:44e9f23:  *
1:44e9f23:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44e9f23:  *
1:44e9f23:  * Unless required by applicable law or agreed to in writing, software
1:44e9f23:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44e9f23:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44e9f23:  * See the License for the specific language governing permissions and
1:44e9f23:  * limitations under the License.
1:44e9f23:  */
1:dee15a8: package org.apache.cassandra.utils.concurrent;
1:dee15a8: 
1:dee15a8: import sun.misc.Unsafe;
1:dee15a8: 
1:dee15a8: import java.lang.reflect.Field;
1:dee15a8: 
1:dee15a8: public class Locks
1:dee15a8: {
1:dee15a8:     static final Unsafe unsafe;
1:dee15a8: 
1:dee15a8:     static
1:dee15a8:     {
1:dee15a8:         try
1:dee15a8:         {
1:dee15a8:             Field field = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
1:dee15a8:             field.setAccessible(true);
1:dee15a8:             unsafe = (sun.misc.Unsafe) field.get(null);
1:dee15a8:         }
1:dee15a8:         catch (Exception e)
1:dee15a8:         {
1:dee15a8:             throw new AssertionError(e);
1:dee15a8:         }
1:dee15a8:     }
1:dee15a8: 
1:dee15a8:     // enters the object's monitor IF UNSAFE IS PRESENT. If it isn't, this is a no-op.
1:dee15a8:     public static void monitorEnterUnsafe(Object object)
1:dee15a8:     {
1:dee15a8:         if (unsafe != null)
1:dee15a8:             unsafe.monitorEnter(object);
1:dee15a8:     }
1:dee15a8: 
1:dee15a8:     public static void monitorExitUnsafe(Object object)
1:dee15a8:     {
1:dee15a8:         if (unsafe != null)
1:dee15a8:             unsafe.monitorExit(object);
1:dee15a8:     }
1:dee15a8: }
============================================================================
author:Jake Luciani
-------------------------------------------------------------------------------
commit:44e9f23
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:graham sanderson
-------------------------------------------------------------------------------
commit:dee15a8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import sun.misc.Unsafe;
1: 
1: import java.lang.reflect.Field;
1: 
1: public class Locks
1: {
1:     static final Unsafe unsafe;
1: 
1:     static
1:     {
1:         try
1:         {
1:             Field field = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
1:             field.setAccessible(true);
1:             unsafe = (sun.misc.Unsafe) field.get(null);
1:         }
1:         catch (Exception e)
1:         {
1:             throw new AssertionError(e);
1:         }
1:     }
1: 
1:     // enters the object's monitor IF UNSAFE IS PRESENT. If it isn't, this is a no-op.
1:     public static void monitorEnterUnsafe(Object object)
1:     {
1:         if (unsafe != null)
1:             unsafe.monitorEnter(object);
1:     }
1: 
1:     public static void monitorExitUnsafe(Object object)
1:     {
1:         if (unsafe != null)
1:             unsafe.monitorExit(object);
1:     }
1: }
============================================================================