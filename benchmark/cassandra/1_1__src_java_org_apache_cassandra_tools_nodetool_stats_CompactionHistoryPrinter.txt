1:768e717: /*
1:768e717:  * Licensed to the Apache Software Foundation (ASF) under one
1:768e717:  * or more contributor license agreements.  See the NOTICE file
1:768e717:  * distributed with this work for additional information
1:768e717:  * regarding copyright ownership.  The ASF licenses this file
1:768e717:  * to you under the Apache License, Version 2.0 (the
1:768e717:  * "License"); you may not use this file except in compliance
1:768e717:  * with the License.  You may obtain a copy of the License at
1:768e717:  *
1:768e717:  *     http://www.apache.org/licenses/LICENSE-2.0
1:768e717:  *
1:768e717:  * Unless required by applicable law or agreed to in writing, software
1:768e717:  * distributed under the License is distributed on an "AS IS" BASIS,
1:768e717:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:768e717:  * See the License for the specific language governing permissions and
1:768e717:  * limitations under the License.
1:768e717:  */
1:768e717: 
1:768e717: package org.apache.cassandra.tools.nodetool.stats;
1:768e717: 
1:768e717: import java.io.PrintStream;
1:768e717: import java.util.Collections;
1:768e717: import java.util.List;
1:768e717: import java.util.Map;
1:768e717: 
1:768e717: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
1:768e717: 
1:768e717: import static com.google.common.collect.Iterables.toArray;
1:768e717: 
1:768e717: public class CompactionHistoryPrinter
1:768e717: {
1:768e717:     public static StatsPrinter from(String format)
1:768e717:     {
1:768e717:         switch (format)
1:768e717:         {
1:768e717:             case "json":
1:768e717:                 return new StatsPrinter.JsonPrinter();
1:768e717:             case "yaml":
1:768e717:                 return new StatsPrinter.YamlPrinter();
1:768e717:             default:
1:768e717:                 return new DefaultPrinter();
1:768e717:         }
1:768e717: 
1:768e717:     }
1:768e717: 
1:768e717:     public static class DefaultPrinter implements StatsPrinter<CompactionHistoryHolder>
1:768e717:     {
1:768e717:         @Override
1:768e717:         public void print(CompactionHistoryHolder data, PrintStream out)
1:768e717:         {
1:768e717: 
1:768e717:             out.println("Compaction History: ");
1:768e717:             Map<String, Object> convertData = data.convert2Map();
1:768e717:             List<Object> compactionHistories = convertData.get("CompactionHistory") instanceof List<?> ? (List)convertData.get("CompactionHistory") : Collections.emptyList();
1:768e717:             List<String> indexNames = data.indexNames;
1:768e717: 
1:768e717:             if (compactionHistories.size() == 0) {
1:768e717:                 out.printf("There is no compaction history");
1:768e717:                 return;
1:768e717:             }
1:768e717: 
1:768e717:             TableBuilder table = new TableBuilder();
1:768e717: 
1:768e717:             table.add(toArray(indexNames, String.class));
1:768e717:             for (Object chr : compactionHistories)
1:768e717:             {
1:768e717:                 Map value = chr instanceof Map<?, ?> ? (Map)chr : Collections.emptyMap();
1:768e717:                 String[] obj = new String[7];
1:768e717:                 obj[0] = (String)value.get("id");
1:768e717:                 obj[1] = (String)value.get("keyspace_name");
1:768e717:                 obj[2] = (String)value.get("columnfamily_name");
1:768e717:                 obj[3] = (String)value.get("compacted_at");
1:768e717:                 obj[4] = value.get("bytes_in").toString();
1:768e717:                 obj[5] = value.get("bytes_out").toString();
1:768e717:                 obj[6] = (String)value.get("rows_merged");
1:768e717:                 table.add(obj);
1:768e717:             }
1:768e717:             table.printTo(out);
1:768e717:         }
1:768e717:     }
1:768e717: }
============================================================================
author:Masataka Yamaguchi
-------------------------------------------------------------------------------
commit:768e717
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.stats;
1: 
1: import java.io.PrintStream;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
1: 
1: import static com.google.common.collect.Iterables.toArray;
1: 
1: public class CompactionHistoryPrinter
1: {
1:     public static StatsPrinter from(String format)
1:     {
1:         switch (format)
1:         {
1:             case "json":
1:                 return new StatsPrinter.JsonPrinter();
1:             case "yaml":
1:                 return new StatsPrinter.YamlPrinter();
1:             default:
1:                 return new DefaultPrinter();
1:         }
1: 
1:     }
1: 
1:     public static class DefaultPrinter implements StatsPrinter<CompactionHistoryHolder>
1:     {
1:         @Override
1:         public void print(CompactionHistoryHolder data, PrintStream out)
1:         {
1: 
1:             out.println("Compaction History: ");
1:             Map<String, Object> convertData = data.convert2Map();
1:             List<Object> compactionHistories = convertData.get("CompactionHistory") instanceof List<?> ? (List)convertData.get("CompactionHistory") : Collections.emptyList();
1:             List<String> indexNames = data.indexNames;
1: 
1:             if (compactionHistories.size() == 0) {
1:                 out.printf("There is no compaction history");
1:                 return;
1:             }
1: 
1:             TableBuilder table = new TableBuilder();
1: 
1:             table.add(toArray(indexNames, String.class));
1:             for (Object chr : compactionHistories)
1:             {
1:                 Map value = chr instanceof Map<?, ?> ? (Map)chr : Collections.emptyMap();
1:                 String[] obj = new String[7];
1:                 obj[0] = (String)value.get("id");
1:                 obj[1] = (String)value.get("keyspace_name");
1:                 obj[2] = (String)value.get("columnfamily_name");
1:                 obj[3] = (String)value.get("compacted_at");
1:                 obj[4] = value.get("bytes_in").toString();
1:                 obj[5] = value.get("bytes_out").toString();
1:                 obj[6] = (String)value.get("rows_merged");
1:                 table.add(obj);
1:             }
1:             table.printTo(out);
1:         }
1:     }
1: }
============================================================================