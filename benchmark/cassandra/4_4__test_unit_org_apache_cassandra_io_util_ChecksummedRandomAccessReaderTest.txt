1:fa6205c: /*
1:fa6205c:  * Licensed to the Apache Software Foundation (ASF) under one
1:fa6205c:  * or more contributor license agreements.  See the NOTICE file
1:fa6205c:  * distributed with this work for additional information
1:fa6205c:  * regarding copyright ownership.  The ASF licenses this file
1:fa6205c:  * to you under the Apache License, Version 2.0 (the
1:fa6205c:  * "License"); you may not use this file except in compliance
1:fa6205c:  * with the License.  You may obtain a copy of the License at
1:fa6205c:  *
1:fa6205c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fa6205c:  *
1:fa6205c:  * Unless required by applicable law or agreed to in writing, software
1:fa6205c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fa6205c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fa6205c:  * See the License for the specific language governing permissions and
1:fa6205c:  * limitations under the License.
1:fa6205c:  */
4:fa6205c: 
1:ce63ccc: package org.apache.cassandra.io.util;
1:fa6205c: 
1:fa6205c: import java.io.File;
1:fa6205c: import java.io.IOException;
1:fa6205c: import java.io.RandomAccessFile;
1:fa6205c: import java.util.Arrays;
1:fa6205c: import java.util.concurrent.ThreadLocalRandom;
1:fa6205c: 
1:9797511: import org.junit.BeforeClass;
1:fa6205c: import org.junit.Test;
1:fa6205c: 
1:fa6205c: import static org.junit.Assert.*;
1:fa6205c: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: 
1:fa6205c: public class ChecksummedRandomAccessReaderTest
1:fa6205c: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:fa6205c:     @Test
1:fa6205c:     public void readFully() throws IOException
1:fa6205c:     {
1:fa6205c:         final File data = File.createTempFile("testReadFully", "data");
1:fa6205c:         final File crc = File.createTempFile("testReadFully", "crc");
1:fa6205c: 
1:fa6205c:         final byte[] expected = new byte[70 * 1024];   // bit more than crc chunk size, so we can test rebuffering.
1:fa6205c:         ThreadLocalRandom.current().nextBytes(expected);
1:fa6205c: 
1:fb22109:         try (SequentialWriter writer = new ChecksummedSequentialWriter(data, crc, null, SequentialWriterOption.DEFAULT))
1:fb22109:         {
1:fb22109:             writer.write(expected);
1:fb22109:             writer.finish();
1:fb22109:         }
1:fa6205c: 
1:fa6205c:         assert data.exists();
1:fa6205c: 
1:b4133f3:         try (RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc))
1:b4133f3:         {
1:b4133f3:             byte[] b = new byte[expected.length];
1:b4133f3:             reader.readFully(b);
1:fa6205c: 
1:b4133f3:             assertArrayEquals(expected, b);
1:fa6205c: 
1:b4133f3:             assertTrue(reader.isEOF());
1:b4133f3:         }
1:fa6205c:     }
1:fa6205c: 
1:fa6205c:     @Test
1:fa6205c:     public void seek() throws IOException
1:b4133f3:     {
1:fa6205c:         final File data = File.createTempFile("testSeek", "data");
1:fa6205c:         final File crc = File.createTempFile("testSeek", "crc");
1:fa6205c: 
1:fa6205c:         final byte[] dataBytes = new byte[70 * 1024];   // bit more than crc chunk size
1:fa6205c:         ThreadLocalRandom.current().nextBytes(dataBytes);
1:fa6205c: 
1:fb22109:         try (SequentialWriter writer = new ChecksummedSequentialWriter(data, crc, null, SequentialWriterOption.DEFAULT))
1:fb22109:         {
1:fb22109:             writer.write(dataBytes);
1:fb22109:             writer.finish();
1:fb22109:         }
1:fa6205c: 
1:fa6205c:         assert data.exists();
1:fa6205c: 
1:b4133f3:         try (RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc))
1:fa6205c:         {
1:fa6205c: 
1:b4133f3:             final int seekPosition = 66000;
1:b4133f3:             reader.seek(seekPosition);
1:fa6205c: 
1:b4133f3:             byte[] b = new byte[dataBytes.length - seekPosition];
1:b4133f3:             reader.readFully(b);
1:fa6205c: 
1:b4133f3:             byte[] expected = Arrays.copyOfRange(dataBytes, seekPosition, dataBytes.length);
1:fa6205c: 
1:b4133f3:             assertArrayEquals(expected, b);
1:fa6205c: 
1:b4133f3:             assertTrue(reader.isEOF());
1:b4133f3:         }
1:fa6205c:     }
1:fa6205c: 
1:b4133f3:     @Test(expected = CorruptFileException.class)
1:fa6205c:     public void corruptionDetection() throws IOException
1:fa6205c:     {
1:fa6205c:         final File data = File.createTempFile("corruptionDetection", "data");
1:fa6205c:         final File crc = File.createTempFile("corruptionDetection", "crc");
1:fa6205c: 
1:fa6205c:         final byte[] expected = new byte[5 * 1024];
1:fa6205c:         Arrays.fill(expected, (byte) 0);
1:fa6205c: 
1:fb22109:         try (SequentialWriter writer = new ChecksummedSequentialWriter(data, crc, null, SequentialWriterOption.DEFAULT))
1:fb22109:         {
1:fb22109:             writer.write(expected);
1:fb22109:             writer.finish();
1:fb22109:         }
1:fa6205c: 
1:fa6205c:         assert data.exists();
1:fa6205c: 
1:fa6205c:         // simulate corruption of file
1:fa6205c:         try (RandomAccessFile dataFile = new RandomAccessFile(data, "rw"))
1:fa6205c:         {
1:fa6205c:             dataFile.seek(1024);
1:fa6205c:             dataFile.write((byte) 5);
1:b4133f3:         }
1:fa6205c: 
1:b4133f3:         try (RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc))
1:b4133f3:         {
1:b4133f3:             byte[] b = new byte[expected.length];
1:b4133f3:             reader.readFully(b);
1:fa6205c: 
1:b4133f3:             assertArrayEquals(expected, b);
1:fa6205c: 
1:b4133f3:             assertTrue(reader.isEOF());
1:fa6205c:         }
1:fa6205c:     }
1:fa6205c: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: 
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1:         try (RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc))
1:         {
1:             byte[] b = new byte[expected.length];
1:             reader.readFully(b);
1:             assertArrayEquals(expected, b);
1:             assertTrue(reader.isEOF());
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try (RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc))
1:         {
1:             final int seekPosition = 66000;
1:             reader.seek(seekPosition);
1:             byte[] b = new byte[dataBytes.length - seekPosition];
1:             reader.readFully(b);
1:             byte[] expected = Arrays.copyOfRange(dataBytes, seekPosition, dataBytes.length);
1:             assertArrayEquals(expected, b);
1:             assertTrue(reader.isEOF());
1:         }
1:     @Test(expected = CorruptFileException.class)
/////////////////////////////////////////////////////////////////////////
1:         try (RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc))
1:         {
1:             byte[] b = new byte[expected.length];
1:             reader.readFully(b);
1:             assertArrayEquals(expected, b);
1:             assertTrue(reader.isEOF());
1:         }
commit:fb22109
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         try (SequentialWriter writer = new ChecksummedSequentialWriter(data, crc, null, SequentialWriterOption.DEFAULT))
1:         {
1:             writer.write(expected);
1:             writer.finish();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try (SequentialWriter writer = new ChecksummedSequentialWriter(data, crc, null, SequentialWriterOption.DEFAULT))
1:         {
1:             writer.write(dataBytes);
1:             writer.finish();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try (SequentialWriter writer = new ChecksummedSequentialWriter(data, crc, null, SequentialWriterOption.DEFAULT))
1:         {
1:             writer.write(expected);
1:             writer.finish();
1:         }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.io.util;
/////////////////////////////////////////////////////////////////////////
0:         RandomAccessReader reader = new ChecksummedRandomAccessReader.Builder(data, crc).build();
/////////////////////////////////////////////////////////////////////////
0:         RandomAccessReader reader = new ChecksummedRandomAccessReader.Builder(data, crc).build();
/////////////////////////////////////////////////////////////////////////
0:         RandomAccessReader reader = new ChecksummedRandomAccessReader.Builder(data, crc).build();
author:Daniel Chia
-------------------------------------------------------------------------------
commit:fa6205c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.io;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.util.Arrays;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
0: import org.apache.cassandra.io.util.ChecksummedRandomAccessReader;
0: import org.apache.cassandra.io.util.ChecksummedSequentialWriter;
0: import org.apache.cassandra.io.util.RandomAccessReader;
0: import org.apache.cassandra.io.util.SequentialWriter;
1: 
1: public class ChecksummedRandomAccessReaderTest
1: {
1:     @Test
1:     public void readFully() throws IOException
1:     {
1:         final File data = File.createTempFile("testReadFully", "data");
1:         final File crc = File.createTempFile("testReadFully", "crc");
1: 
1:         final byte[] expected = new byte[70 * 1024];   // bit more than crc chunk size, so we can test rebuffering.
1:         ThreadLocalRandom.current().nextBytes(expected);
1: 
0:         SequentialWriter writer = ChecksummedSequentialWriter.open(data, crc);
0:         writer.write(expected);
0:         writer.finish();
1: 
1:         assert data.exists();
1: 
0:         RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc);
0:         byte[] b = new byte[expected.length];
0:         reader.readFully(b);
1: 
0:         assertArrayEquals(expected, b);
1: 
0:         assertTrue(reader.isEOF());
1: 
0:         reader.close();
1:     }
1: 
1:     @Test
1:     public void seek() throws IOException
1:     {
1:         final File data = File.createTempFile("testSeek", "data");
1:         final File crc = File.createTempFile("testSeek", "crc");
1: 
1:         final byte[] dataBytes = new byte[70 * 1024];   // bit more than crc chunk size
1:         ThreadLocalRandom.current().nextBytes(dataBytes);
1: 
0:         SequentialWriter writer = ChecksummedSequentialWriter.open(data, crc);
0:         writer.write(dataBytes);
0:         writer.finish();
1: 
1:         assert data.exists();
1: 
0:         RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc);
1: 
0:         final int seekPosition = 66000;
0:         reader.seek(seekPosition);
1: 
0:         byte[] b = new byte[dataBytes.length - seekPosition];
0:         reader.readFully(b);
1: 
0:         byte[] expected = Arrays.copyOfRange(dataBytes, seekPosition, dataBytes.length);
1: 
0:         assertArrayEquals(expected, b);
1: 
0:         assertTrue(reader.isEOF());
1: 
0:         reader.close();
1:     }
1: 
0:     @Test(expected = ChecksummedRandomAccessReader.CorruptFileException.class)
1:     public void corruptionDetection() throws IOException
1:     {
1:         final File data = File.createTempFile("corruptionDetection", "data");
1:         final File crc = File.createTempFile("corruptionDetection", "crc");
1: 
1:         final byte[] expected = new byte[5 * 1024];
1:         Arrays.fill(expected, (byte) 0);
1: 
0:         SequentialWriter writer = ChecksummedSequentialWriter.open(data, crc);
0:         writer.write(expected);
0:         writer.finish();
1: 
1:         assert data.exists();
1: 
1:         // simulate corruption of file
1:         try (RandomAccessFile dataFile = new RandomAccessFile(data, "rw"))
1:         {
1:             dataFile.seek(1024);
1:             dataFile.write((byte) 5);
1:         }
1: 
0:         RandomAccessReader reader = ChecksummedRandomAccessReader.open(data, crc);
0:         byte[] b = new byte[expected.length];
0:         reader.readFully(b);
1: 
0:         assertArrayEquals(expected, b);
1: 
0:         assertTrue(reader.isEOF());
1: 
0:         reader.close();
1:     }
1: }
============================================================================