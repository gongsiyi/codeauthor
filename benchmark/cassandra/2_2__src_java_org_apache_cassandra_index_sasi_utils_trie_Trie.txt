1:72790dc: /*
1:72790dc:  * Copyright 2005-2010 Roger Kapsi, Sam Berlin
21:72790dc:  *
1:72790dc:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:72790dc:  *   you may not use this file except in compliance with the License.
1:72790dc:  *   You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *       http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  *   Unless required by applicable law or agreed to in writing, software
1:72790dc:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  *   See the License for the specific language governing permissions and
1:72790dc:  *   limitations under the License.
1:72790dc:  */
6:72790dc: 
1:72790dc: package org.apache.cassandra.index.sasi.utils.trie;
1:72790dc: 
1:72790dc: import java.util.Map;
1:72790dc: import java.util.SortedMap;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.utils.trie.Cursor.Decision;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:72790dc:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:72790dc:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:72790dc:  * on rkapsi/patricia-trie project) only supports String keys)
1:72790dc:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:72790dc:  */
1:72790dc: 
1:72790dc: /**
1:68d2526:  * Defines the interface for a prefix tree, an ordered tree data structure. For
1:72790dc:  * more information, see <a href="http://en.wikipedia.org/wiki/Trie">Tries</a>.
1:68d2526:  *
1:72790dc:  * @author Roger Kapsi
1:72790dc:  * @author Sam Berlin
1:72790dc:  */
1:72790dc: public interface Trie<K, V> extends SortedMap<K, V>
1:72790dc: {
1:72790dc:     /**
1:68d2526:      * Returns the {@link Map.Entry} whose key is closest in a bitwise XOR
1:72790dc:      * metric to the given key. This is NOT lexicographic closeness.
1:72790dc:      * For example, given the keys:
1:72790dc:      *
1:72790dc:      * <ol>
1:72790dc:      * <li>D = 1000100
1:72790dc:      * <li>H = 1001000
1:72790dc:      * <li>L = 1001100
1:72790dc:      * </ol>
1:68d2526:      *
1:68d2526:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
1:68d2526:      * return 'L', because the XOR distance between D &amp; L is smaller
1:68d2526:      * than the XOR distance between D &amp; H.
1:68d2526:      *
1:72790dc:      * @return The {@link Map.Entry} whose key is closest in a bitwise XOR metric
1:72790dc:      * to the provided key.
1:72790dc:      */
1:72790dc:     Map.Entry<K, V> select(K key);
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Returns the key that is closest in a bitwise XOR metric to the
1:72790dc:      * provided key. This is NOT lexicographic closeness!
1:68d2526:      *
1:72790dc:      * For example, given the keys:
1:68d2526:      *
1:72790dc:      * <ol>
1:72790dc:      * <li>D = 1000100
1:72790dc:      * <li>H = 1001000
1:72790dc:      * <li>L = 1001100
1:72790dc:      * </ol>
1:68d2526:      *
1:68d2526:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
1:68d2526:      * return 'L', because the XOR distance between D &amp; L is smaller
1:68d2526:      * than the XOR distance between D &amp; H.
1:68d2526:      *
1:72790dc:      * @return The key that is closest in a bitwise XOR metric to the provided key.
1:72790dc:      */
1:72790dc:     @SuppressWarnings("unused")
1:72790dc:     K selectKey(K key);
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Returns the value whose key is closest in a bitwise XOR metric to
1:72790dc:      * the provided key. This is NOT lexicographic closeness!
1:68d2526:      *
1:72790dc:      * For example, given the keys:
1:68d2526:      *
1:72790dc:      * <ol>
1:72790dc:      * <li>D = 1000100
1:72790dc:      * <li>H = 1001000
1:72790dc:      * <li>L = 1001100
1:72790dc:      * </ol>
1:68d2526:      *
1:68d2526:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
1:68d2526:      * return 'L', because the XOR distance between D &amp; L is smaller
1:68d2526:      * than the XOR distance between D &amp; H.
1:68d2526:      *
1:72790dc:      * @return The value whose key is closest in a bitwise XOR metric
1:72790dc:      * to the provided key.
1:72790dc:      */
1:72790dc:     @SuppressWarnings("unused")
1:72790dc:     V selectValue(K key);
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * Iterates through the {@link Trie}, starting with the entry whose bitwise
1:72790dc:      * value is closest in an XOR metric to the given key. After the closest
1:72790dc:      * entry is found, the {@link Trie} will call select on that entry and continue
1:72790dc:      * calling select for each entry (traversing in order of XOR closeness,
1:72790dc:      * NOT lexicographically) until the cursor returns {@link Decision#EXIT}.
1:68d2526:      *
1:72790dc:      * <p>The cursor can return {@link Decision#CONTINUE} to continue traversing.
1:68d2526:      *
1:72790dc:      * <p>{@link Decision#REMOVE_AND_EXIT} is used to remove the current element
1:72790dc:      * and stop traversing.
1:68d2526:      *
1:72790dc:      * <p>Note: The {@link Decision#REMOVE} operation is not supported.
1:68d2526:      *
1:68d2526:      * @return The entry the cursor returned {@link Decision#EXIT} on, or null
1:72790dc:      * if it continued till the end.
1:72790dc:      */
1:72790dc:     Map.Entry<K,V> select(K key, Cursor<? super K, ? super V> cursor);
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Traverses the {@link Trie} in lexicographical order.
1:72790dc:      * {@link Cursor#select(java.util.Map.Entry)} will be called on each entry.
1:68d2526:      *
1:68d2526:      * <p>The traversal will stop when the cursor returns {@link Decision#EXIT},
1:68d2526:      * {@link Decision#CONTINUE} is used to continue traversing and
1:68d2526:      * {@link Decision#REMOVE} is used to remove the element that was selected
1:72790dc:      * and continue traversing.
1:68d2526:      *
1:72790dc:      * <p>{@link Decision#REMOVE_AND_EXIT} is used to remove the current element
1:72790dc:      * and stop traversing.
1:68d2526:      *
1:68d2526:      * @return The entry the cursor returned {@link Decision#EXIT} on, or null
1:72790dc:      * if it continued till the end.
1:72790dc:      */
1:72790dc:     Map.Entry<K,V> traverse(Cursor<? super K, ? super V> cursor);
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Returns a view of this {@link Trie} of all elements that are prefixed
1:72790dc:      * by the given key.
1:68d2526:      *
1:68d2526:      * <p>In a {@link Trie} with fixed size keys, this is essentially a
1:72790dc:      * {@link #get(Object)} operation.
1:68d2526:      *
1:68d2526:      * <p>For example, if the {@link Trie} contains 'Anna', 'Anael',
1:72790dc:      * 'Analu', 'Andreas', 'Andrea', 'Andres', and 'Anatole', then
1:72790dc:      * a lookup of 'And' would return 'Andreas', 'Andrea', and 'Andres'.
1:72790dc:      */
1:72790dc:     SortedMap<K, V> prefixMap(K prefix);
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:  * Defines the interface for a prefix tree, an ordered tree data structure. For
1:  *
1:      * Returns the {@link Map.Entry} whose key is closest in a bitwise XOR
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
1:      * return 'L', because the XOR distance between D &amp; L is smaller
1:      * than the XOR distance between D &amp; H.
1:      *
1: 
1:      * Returns the key that is closest in a bitwise XOR metric to the
1:      *
1:      *
1:      *
1:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
1:      * return 'L', because the XOR distance between D &amp; L is smaller
1:      * than the XOR distance between D &amp; H.
1:      *
1: 
1:      * Returns the value whose key is closest in a bitwise XOR metric to
1:      *
1:      *
1:      *
1:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
1:      * return 'L', because the XOR distance between D &amp; L is smaller
1:      * than the XOR distance between D &amp; H.
1:      *
1: 
1:      *
1:      *
1:      *
1:      *
1:      * @return The entry the cursor returned {@link Decision#EXIT} on, or null
1: 
1:      * Traverses the {@link Trie} in lexicographical order.
1:      *
1:      * <p>The traversal will stop when the cursor returns {@link Decision#EXIT},
1:      * {@link Decision#CONTINUE} is used to continue traversing and
1:      * {@link Decision#REMOVE} is used to remove the element that was selected
1:      *
1:      *
1:      * @return The entry the cursor returned {@link Decision#EXIT} on, or null
1: 
1:      * Returns a view of this {@link Trie} of all elements that are prefixed
1:      *
1:      * <p>In a {@link Trie} with fixed size keys, this is essentially a
1:      *
1:      * <p>For example, if the {@link Trie} contains 'Anna', 'Anael',
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2005-2010 Roger Kapsi, Sam Berlin
1:  *
1:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:  *   you may not use this file except in compliance with the License.
1:  *   You may obtain a copy of the License at
1:  *
1:  *       http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *   Unless required by applicable law or agreed to in writing, software
1:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *   See the License for the specific language governing permissions and
1:  *   limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.utils.trie;
1: 
1: import java.util.Map;
1: import java.util.SortedMap;
1: 
1: import org.apache.cassandra.index.sasi.utils.trie.Cursor.Decision;
1: 
1: /**
1:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:  * on rkapsi/patricia-trie project) only supports String keys)
1:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:  */
1: 
1: /**
0:  * Defines the interface for a prefix tree, an ordered tree data structure. For 
1:  * more information, see <a href="http://en.wikipedia.org/wiki/Trie">Tries</a>.
1:  * 
1:  * @author Roger Kapsi
1:  * @author Sam Berlin
1:  */
1: public interface Trie<K, V> extends SortedMap<K, V>
1: {
1:     /**
0:      * Returns the {@link Map.Entry} whose key is closest in a bitwise XOR 
1:      * metric to the given key. This is NOT lexicographic closeness.
1:      * For example, given the keys:
1:      *
1:      * <ol>
1:      * <li>D = 1000100
1:      * <li>H = 1001000
1:      * <li>L = 1001100
1:      * </ol>
1:      * 
0:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would 
0:      * return 'L', because the XOR distance between D &amp; L is smaller 
0:      * than the XOR distance between D &amp; H. 
1:      * 
1:      * @return The {@link Map.Entry} whose key is closest in a bitwise XOR metric
1:      * to the provided key.
1:      */
1:     Map.Entry<K, V> select(K key);
1:     
1:     /**
0:      * Returns the key that is closest in a bitwise XOR metric to the 
1:      * provided key. This is NOT lexicographic closeness!
1:      * 
1:      * For example, given the keys:
1:      * 
1:      * <ol>
1:      * <li>D = 1000100
1:      * <li>H = 1001000
1:      * <li>L = 1001100
1:      * </ol>
1:      * 
0:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would 
0:      * return 'L', because the XOR distance between D &amp; L is smaller 
0:      * than the XOR distance between D &amp; H. 
1:      * 
1:      * @return The key that is closest in a bitwise XOR metric to the provided key.
1:      */
1:     @SuppressWarnings("unused")
1:     K selectKey(K key);
1:     
1:     /**
0:      * Returns the value whose key is closest in a bitwise XOR metric to 
1:      * the provided key. This is NOT lexicographic closeness!
1:      * 
1:      * For example, given the keys:
1:      * 
1:      * <ol>
1:      * <li>D = 1000100
1:      * <li>H = 1001000
1:      * <li>L = 1001100
1:      * </ol>
1:      * 
0:      * If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would 
0:      * return 'L', because the XOR distance between D &amp; L is smaller 
0:      * than the XOR distance between D &amp; H. 
1:      * 
1:      * @return The value whose key is closest in a bitwise XOR metric
1:      * to the provided key.
1:      */
1:     @SuppressWarnings("unused")
1:     V selectValue(K key);
1:     
1:     /**
1:      * Iterates through the {@link Trie}, starting with the entry whose bitwise
1:      * value is closest in an XOR metric to the given key. After the closest
1:      * entry is found, the {@link Trie} will call select on that entry and continue
1:      * calling select for each entry (traversing in order of XOR closeness,
1:      * NOT lexicographically) until the cursor returns {@link Decision#EXIT}.
1:      * 
1:      * <p>The cursor can return {@link Decision#CONTINUE} to continue traversing.
1:      * 
1:      * <p>{@link Decision#REMOVE_AND_EXIT} is used to remove the current element
1:      * and stop traversing.
1:      * 
1:      * <p>Note: The {@link Decision#REMOVE} operation is not supported.
1:      * 
0:      * @return The entry the cursor returned {@link Decision#EXIT} on, or null 
1:      * if it continued till the end.
1:      */
1:     Map.Entry<K,V> select(K key, Cursor<? super K, ? super V> cursor);
1:     
1:     /**
0:      * Traverses the {@link Trie} in lexicographical order. 
1:      * {@link Cursor#select(java.util.Map.Entry)} will be called on each entry.
1:      * 
0:      * <p>The traversal will stop when the cursor returns {@link Decision#EXIT}, 
0:      * {@link Decision#CONTINUE} is used to continue traversing and 
0:      * {@link Decision#REMOVE} is used to remove the element that was selected 
1:      * and continue traversing.
1:      * 
1:      * <p>{@link Decision#REMOVE_AND_EXIT} is used to remove the current element
1:      * and stop traversing.
1:      *   
0:      * @return The entry the cursor returned {@link Decision#EXIT} on, or null 
1:      * if it continued till the end.
1:      */
1:     Map.Entry<K,V> traverse(Cursor<? super K, ? super V> cursor);
1:     
1:     /**
0:      * Returns a view of this {@link Trie} of all elements that are prefixed 
1:      * by the given key.
1:      * 
0:      * <p>In a {@link Trie} with fixed size keys, this is essentially a 
1:      * {@link #get(Object)} operation.
1:      * 
0:      * <p>For example, if the {@link Trie} contains 'Anna', 'Anael', 
1:      * 'Analu', 'Andreas', 'Andrea', 'Andres', and 'Anatole', then
1:      * a lookup of 'And' would return 'Andreas', 'Andrea', and 'Andres'.
1:      */
1:     SortedMap<K, V> prefixMap(K prefix);
1: }
============================================================================