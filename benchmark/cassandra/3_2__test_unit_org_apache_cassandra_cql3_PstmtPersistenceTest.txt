1:997cb66: /*
1:997cb66:  * Licensed to the Apache Software Foundation (ASF) under one
1:997cb66:  * or more contributor license agreements.  See the NOTICE file
1:997cb66:  * distributed with this work for additional information
1:997cb66:  * regarding copyright ownership.  The ASF licenses this file
1:997cb66:  * to you under the Apache License, Version 2.0 (the
1:997cb66:  * "License"); you may not use this file except in compliance
1:997cb66:  * with the License.  You may obtain a copy of the License at
1:997cb66:  *
1:997cb66:  *     http://www.apache.org/licenses/LICENSE-2.0
1:997cb66:  *
1:997cb66:  * Unless required by applicable law or agreed to in writing, software
1:997cb66:  * distributed under the License is distributed on an "AS IS" BASIS,
1:997cb66:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:997cb66:  * See the License for the specific language governing permissions and
1:997cb66:  * limitations under the License.
1:997cb66:  */
1:997cb66: package org.apache.cassandra.cql3;
1:997cb66: 
1:997cb66: import java.net.InetSocketAddress;
1:997cb66: import java.util.ArrayList;
1:997cb66: import java.util.Collections;
1:997cb66: import java.util.List;
1:997cb66: 
1:997cb66: import org.junit.Test;
1:997cb66: 
1:997cb66: import junit.framework.Assert;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:997cb66: import org.apache.cassandra.cql3.statements.ParsedStatement;
1:997cb66: import org.apache.cassandra.db.SystemKeyspace;
1:997cb66: import org.apache.cassandra.db.marshal.Int32Type;
1:997cb66: import org.apache.cassandra.db.marshal.UTF8Type;
1:997cb66: import org.apache.cassandra.schema.SchemaKeyspace;
1:997cb66: import org.apache.cassandra.service.ClientState;
1:997cb66: import org.apache.cassandra.service.QueryState;
1:997cb66: import org.apache.cassandra.utils.ByteBufferUtil;
1:997cb66: import org.apache.cassandra.utils.MD5Digest;
1:997cb66: 
1:997cb66: public class PstmtPersistenceTest extends CQLTester
1:997cb66: {
1:997cb66:     @Test
1:997cb66:     public void testCachedPreparedStatements() throws Throwable
1:997cb66:     {
1:997cb66:         // need this for pstmt execution/validation tests
1:997cb66:         requireNetwork();
1:997cb66: 
1:9797511:         int rows = QueryProcessor.executeOnceInternal("SELECT * FROM " + SchemaConstants.SYSTEM_KEYSPACE_NAME + '.' + SystemKeyspace.PREPARED_STATEMENTS).size();
1:997cb66:         Assert.assertEquals(0, rows);
1:997cb66: 
1:997cb66:         execute("CREATE KEYSPACE IF NOT EXISTS foo WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}");
1:997cb66:         execute("CREATE TABLE foo.bar (key text PRIMARY KEY, val int)");
1:997cb66: 
1:997cb66:         ClientState clientState = ClientState.forExternalCalls(InetSocketAddress.createUnresolved("127.0.0.1", 1234));
1:997cb66: 
1:997cb66:         createTable("CREATE TABLE %s (pk int PRIMARY KEY, val text)");
1:997cb66: 
1:997cb66:         List<MD5Digest> stmtIds = new ArrayList<>();
1:997cb66:         // #0
1:9797511:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + SchemaConstants.SCHEMA_KEYSPACE_NAME + '.' + SchemaKeyspace.TABLES + " WHERE keyspace_name = ?", clientState, false).statementId);
1:997cb66:         // #1
1:997cb66:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + KEYSPACE + '.' + currentTable() + " WHERE pk = ?", clientState, false).statementId);
1:997cb66:         // #2
1:997cb66:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM foo.bar WHERE key = ?", clientState, false).statementId);
1:997cb66:         clientState.setKeyspace("foo");
1:997cb66:         // #3
1:997cb66:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + KEYSPACE + '.' + currentTable() + " WHERE pk = ?", clientState, false).statementId);
1:997cb66:         // #4
1:997cb66:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM foo.bar WHERE key = ?", clientState, false).statementId);
1:997cb66: 
1:997cb66:         Assert.assertEquals(5, stmtIds.size());
1:997cb66:         Assert.assertEquals(5, QueryProcessor.preparedStatementsCount());
1:997cb66: 
1:9797511:         String queryAll = "SELECT * FROM " + SchemaConstants.SYSTEM_KEYSPACE_NAME + '.' + SystemKeyspace.PREPARED_STATEMENTS;
1:997cb66: 
1:997cb66:         rows = QueryProcessor.executeOnceInternal(queryAll).size();
1:997cb66:         Assert.assertEquals(5, rows);
1:997cb66: 
1:997cb66:         QueryHandler handler = ClientState.getCQLQueryHandler();
1:997cb66:         validatePstmts(stmtIds, handler);
1:997cb66: 
1:997cb66:         // clear prepared statements cache
1:997cb66:         QueryProcessor.clearPrepraredStatements();
1:997cb66:         Assert.assertEquals(0, QueryProcessor.preparedStatementsCount());
1:997cb66:         for (MD5Digest stmtId : stmtIds)
1:997cb66:             Assert.assertNull(handler.getPrepared(stmtId));
1:997cb66: 
1:997cb66:         // load prepared statements and validate that these still execute fine
1:997cb66:         QueryProcessor.preloadPreparedStatement();
1:997cb66:         validatePstmts(stmtIds, handler);
1:997cb66: 
1:997cb66:         // validate that the prepared statements are in the system table
1:997cb66:         for (UntypedResultSet.Row row : QueryProcessor.executeOnceInternal(queryAll))
1:997cb66:         {
1:997cb66:             MD5Digest digest = MD5Digest.wrap(ByteBufferUtil.getArray(row.getBytes("prepared_id")));
1:997cb66:             ParsedStatement.Prepared prepared = QueryProcessor.instance.getPrepared(digest);
1:997cb66:             Assert.assertNotNull(prepared);
1:997cb66:         }
1:997cb66: 
1:997cb66:         // add anther prepared statement and sync it to table
1:997cb66:         QueryProcessor.prepare("SELECT * FROM bar WHERE key = ?", clientState, false);
1:997cb66:         Assert.assertEquals(6, QueryProcessor.preparedStatementsCount());
1:997cb66:         rows = QueryProcessor.executeOnceInternal(queryAll).size();
1:997cb66:         Assert.assertEquals(6, rows);
1:997cb66: 
1:997cb66:         // drop a keyspace (prepared statements are removed - syncPreparedStatements() remove should the rows, too)
1:997cb66:         execute("DROP KEYSPACE foo");
1:997cb66:         Assert.assertEquals(3, QueryProcessor.preparedStatementsCount());
1:997cb66:         rows = QueryProcessor.executeOnceInternal(queryAll).size();
1:997cb66:         Assert.assertEquals(3, rows);
1:997cb66: 
1:997cb66:     }
1:997cb66: 
1:997cb66:     private void validatePstmts(List<MD5Digest> stmtIds, QueryHandler handler)
1:997cb66:     {
1:997cb66:         Assert.assertEquals(5, QueryProcessor.preparedStatementsCount());
1:997cb66:         QueryOptions optionsStr = QueryOptions.forInternalCalls(Collections.singletonList(UTF8Type.instance.fromString("foobar")));
1:997cb66:         QueryOptions optionsInt = QueryOptions.forInternalCalls(Collections.singletonList(Int32Type.instance.decompose(42)));
1:997cb66:         validatePstmt(handler, stmtIds.get(0), optionsStr);
1:997cb66:         validatePstmt(handler, stmtIds.get(1), optionsInt);
1:997cb66:         validatePstmt(handler, stmtIds.get(2), optionsStr);
1:997cb66:         validatePstmt(handler, stmtIds.get(3), optionsInt);
1:997cb66:         validatePstmt(handler, stmtIds.get(4), optionsStr);
1:997cb66:     }
1:997cb66: 
1:997cb66:     private static void validatePstmt(QueryHandler handler, MD5Digest stmtId, QueryOptions options)
1:997cb66:     {
1:997cb66:         ParsedStatement.Prepared prepared = handler.getPrepared(stmtId);
1:997cb66:         Assert.assertNotNull(prepared);
1:aa83c94:         handler.processPrepared(prepared.statement, QueryState.forInternalCalls(), options, Collections.emptyMap(), System.nanoTime());
1:997cb66:     }
1:997cb66: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:         int rows = QueryProcessor.executeOnceInternal("SELECT * FROM " + SchemaConstants.SYSTEM_KEYSPACE_NAME + '.' + SystemKeyspace.PREPARED_STATEMENTS).size();
/////////////////////////////////////////////////////////////////////////
1:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + SchemaConstants.SCHEMA_KEYSPACE_NAME + '.' + SchemaKeyspace.TABLES + " WHERE keyspace_name = ?", clientState, false).statementId);
/////////////////////////////////////////////////////////////////////////
1:         String queryAll = "SELECT * FROM " + SchemaConstants.SYSTEM_KEYSPACE_NAME + '.' + SystemKeyspace.PREPARED_STATEMENTS;
commit:997cb66
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.net.InetSocketAddress;
1: import java.util.ArrayList;
1: import java.util.Collections;
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Set;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.cql3.statements.ParsedStatement;
1: import org.apache.cassandra.db.SystemKeyspace;
1: import org.apache.cassandra.db.marshal.Int32Type;
0: import org.apache.cassandra.db.marshal.IntegerType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.schema.SchemaKeyspace;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.QueryState;
0: import org.apache.cassandra.transport.messages.ResultMessage;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.MD5Digest;
1: 
1: public class PstmtPersistenceTest extends CQLTester
1: {
1:     @Test
1:     public void testCachedPreparedStatements() throws Throwable
1:     {
1:         // need this for pstmt execution/validation tests
1:         requireNetwork();
1: 
0:         int rows = QueryProcessor.executeOnceInternal("SELECT * FROM " + SystemKeyspace.NAME + '.' + SystemKeyspace.PREPARED_STATEMENTS).size();
1:         Assert.assertEquals(0, rows);
1: 
1:         execute("CREATE KEYSPACE IF NOT EXISTS foo WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}");
1:         execute("CREATE TABLE foo.bar (key text PRIMARY KEY, val int)");
1: 
1:         ClientState clientState = ClientState.forExternalCalls(InetSocketAddress.createUnresolved("127.0.0.1", 1234));
1: 
1:         createTable("CREATE TABLE %s (pk int PRIMARY KEY, val text)");
1: 
1:         List<MD5Digest> stmtIds = new ArrayList<>();
1:         // #0
0:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + SchemaKeyspace.NAME + '.' + SchemaKeyspace.TABLES + " WHERE keyspace_name = ?", clientState, false).statementId);
1:         // #1
1:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + KEYSPACE + '.' + currentTable() + " WHERE pk = ?", clientState, false).statementId);
1:         // #2
1:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM foo.bar WHERE key = ?", clientState, false).statementId);
1:         clientState.setKeyspace("foo");
1:         // #3
1:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + KEYSPACE + '.' + currentTable() + " WHERE pk = ?", clientState, false).statementId);
1:         // #4
1:         stmtIds.add(QueryProcessor.prepare("SELECT * FROM foo.bar WHERE key = ?", clientState, false).statementId);
1: 
1:         Assert.assertEquals(5, stmtIds.size());
1:         Assert.assertEquals(5, QueryProcessor.preparedStatementsCount());
1: 
0:         String queryAll = "SELECT * FROM " + SystemKeyspace.NAME + '.' + SystemKeyspace.PREPARED_STATEMENTS;
1: 
1:         rows = QueryProcessor.executeOnceInternal(queryAll).size();
1:         Assert.assertEquals(5, rows);
1: 
1:         QueryHandler handler = ClientState.getCQLQueryHandler();
1:         validatePstmts(stmtIds, handler);
1: 
1:         // clear prepared statements cache
1:         QueryProcessor.clearPrepraredStatements();
1:         Assert.assertEquals(0, QueryProcessor.preparedStatementsCount());
1:         for (MD5Digest stmtId : stmtIds)
1:             Assert.assertNull(handler.getPrepared(stmtId));
1: 
1:         // load prepared statements and validate that these still execute fine
1:         QueryProcessor.preloadPreparedStatement();
1:         validatePstmts(stmtIds, handler);
1: 
1:         // validate that the prepared statements are in the system table
1:         for (UntypedResultSet.Row row : QueryProcessor.executeOnceInternal(queryAll))
1:         {
1:             MD5Digest digest = MD5Digest.wrap(ByteBufferUtil.getArray(row.getBytes("prepared_id")));
1:             ParsedStatement.Prepared prepared = QueryProcessor.instance.getPrepared(digest);
1:             Assert.assertNotNull(prepared);
1:         }
1: 
1:         // add anther prepared statement and sync it to table
1:         QueryProcessor.prepare("SELECT * FROM bar WHERE key = ?", clientState, false);
1:         Assert.assertEquals(6, QueryProcessor.preparedStatementsCount());
1:         rows = QueryProcessor.executeOnceInternal(queryAll).size();
1:         Assert.assertEquals(6, rows);
1: 
1:         // drop a keyspace (prepared statements are removed - syncPreparedStatements() remove should the rows, too)
1:         execute("DROP KEYSPACE foo");
1:         Assert.assertEquals(3, QueryProcessor.preparedStatementsCount());
1:         rows = QueryProcessor.executeOnceInternal(queryAll).size();
1:         Assert.assertEquals(3, rows);
1: 
1:     }
1: 
1:     private void validatePstmts(List<MD5Digest> stmtIds, QueryHandler handler)
1:     {
1:         Assert.assertEquals(5, QueryProcessor.preparedStatementsCount());
1:         QueryOptions optionsStr = QueryOptions.forInternalCalls(Collections.singletonList(UTF8Type.instance.fromString("foobar")));
1:         QueryOptions optionsInt = QueryOptions.forInternalCalls(Collections.singletonList(Int32Type.instance.decompose(42)));
1:         validatePstmt(handler, stmtIds.get(0), optionsStr);
1:         validatePstmt(handler, stmtIds.get(1), optionsInt);
1:         validatePstmt(handler, stmtIds.get(2), optionsStr);
1:         validatePstmt(handler, stmtIds.get(3), optionsInt);
1:         validatePstmt(handler, stmtIds.get(4), optionsStr);
1:     }
1: 
1:     private static void validatePstmt(QueryHandler handler, MD5Digest stmtId, QueryOptions options)
1:     {
1:         ParsedStatement.Prepared prepared = handler.getPrepared(stmtId);
1:         Assert.assertNotNull(prepared);
0:         handler.processPrepared(prepared.statement, QueryState.forInternalCalls(), options, Collections.emptyMap());
1:     }
1: }
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:         handler.processPrepared(prepared.statement, QueryState.forInternalCalls(), options, Collections.emptyMap(), System.nanoTime());
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================