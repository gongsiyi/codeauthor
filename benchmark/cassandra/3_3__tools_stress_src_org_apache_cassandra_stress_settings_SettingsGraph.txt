1:e4467a0: package org.apache.cassandra.stress.settings;
1:e4467a0: /*
1:e4467a0:  *
1:e4467a0:  * Licensed to the Apache Software Foundation (ASF) under one
1:e4467a0:  * or more contributor license agreements.  See the NOTICE file
1:e4467a0:  * distributed with this work for additional information
1:e4467a0:  * regarding copyright ownership.  The ASF licenses this file
1:e4467a0:  * to you under the Apache License, Version 2.0 (the
1:e4467a0:  * "License"); you may not use this file except in compliance
1:e4467a0:  * with the License.  You may obtain a copy of the License at
1:e4467a0:  *
1:e4467a0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e4467a0:  *
1:e4467a0:  * Unless required by applicable law or agreed to in writing,
1:e4467a0:  * software distributed under the License is distributed on an
1:e4467a0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e4467a0:  * KIND, either express or implied.  See the License for the
1:e4467a0:  * specific language governing permissions and limitations
1:e4467a0:  * under the License.
1:e4467a0:  *
1:e4467a0:  */
1:e4467a0: 
1:e4467a0: 
1:e4467a0: import java.io.File;
1:e4467a0: import java.io.IOException;
1:e4467a0: import java.io.Serializable;
1:e4467a0: import java.text.SimpleDateFormat;
1:e4467a0: import java.util.Arrays;
1:e4467a0: import java.util.Date;
1:e4467a0: import java.util.List;
1:e4467a0: import java.util.Map;
1:938faa2: 
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:e4467a0: 
1:e4467a0: public class SettingsGraph implements Serializable
1:e4467a0: {
1:e4467a0:     public final String file;
1:e4467a0:     public final String revision;
1:e4467a0:     public final String title;
1:e4467a0:     public final String operation;
1:e4467a0:     public final File temporaryLogFile;
1:e4467a0: 
1:e4467a0:     public SettingsGraph(GraphOptions options, SettingsCommand stressCommand)
1:e4467a0:     {
1:e4467a0:         file = options.file.value();
1:e4467a0:         revision = options.revision.value();
1:e4467a0:         title = options.revision.value() == null
1:e4467a0:             ? "cassandra-stress - " + new SimpleDateFormat("yyyy-mm-dd hh:mm:ss").format(new Date())
1:e4467a0:             : options.title.value();
1:e4467a0: 
1:e4467a0:         operation = options.operation.value() == null
1:e4467a0:             ? stressCommand.type.name()
1:e4467a0:             : options.operation.value();
1:e4467a0: 
1:e4467a0:         if (inGraphMode())
1:e4467a0:         {
1:e4467a0:             try
1:e4467a0:             {
1:e4467a0:                 temporaryLogFile = File.createTempFile("cassandra-stress", ".log");
1:e4467a0:             }
1:e4467a0:             catch (IOException e)
1:e4467a0:             {
1:e4467a0:                 throw new RuntimeException("Cannot open temporary file");
1:e4467a0:             }
1:e4467a0:         }
1:e4467a0:         else
1:e4467a0:         {
1:e4467a0:             temporaryLogFile = null;
1:e4467a0:         }
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     public boolean inGraphMode()
1:e4467a0:     {
1:e4467a0:         return this.file == null ? false : true;
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     // Option Declarations
1:e4467a0:     private static final class GraphOptions extends GroupedOptions
1:e4467a0:     {
1:e4467a0:         final OptionSimple file = new OptionSimple("file=", ".*", null, "HTML file to create or append to", true);
1:e4467a0:         final OptionSimple revision = new OptionSimple("revision=", ".*", "unknown", "Unique name to assign to the current configuration being stressed", false);
1:e4467a0:         final OptionSimple title = new OptionSimple("title=", ".*", null, "Title for chart (current date by default)", false);
1:e4467a0:         final OptionSimple operation = new OptionSimple("op=", ".*", null, "Alternative name for current operation (stress op name used by default)", false);
1:e4467a0: 
1:e4467a0:         @Override
1:e4467a0:         public List<? extends Option> options()
1:e4467a0:         {
1:e4467a0:             return Arrays.asList(file, revision, title, operation);
1:e4467a0:         }
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     // CLI Utility Methods
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.println("  File: " + file);
1:938faa2:         out.println("  Revision: " + revision);
1:938faa2:         out.println("  Title: " + title);
1:938faa2:         out.println("  Operation: " + operation);
1:938faa2:     }
1:938faa2: 
1:938faa2: 
1:e4467a0:     public static SettingsGraph get(Map<String, String[]> clArgs, SettingsCommand stressCommand)
1:e4467a0:     {
1:e4467a0:         String[] params = clArgs.remove("-graph");
1:e4467a0:         if (params == null)
1:e4467a0:         {
1:e4467a0:             return new SettingsGraph(new GraphOptions(), stressCommand);
1:e4467a0:         }
1:e4467a0:         GraphOptions options = GroupedOptions.select(params, new GraphOptions());
1:e4467a0:         if (options == null)
1:e4467a0:         {
1:e4467a0:             printHelp();
1:e4467a0:             System.out.println("Invalid -graph options provided, see output for valid options");
1:e4467a0:             System.exit(1);
1:e4467a0:         }
1:e4467a0:         return new SettingsGraph(options, stressCommand);
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     public static void printHelp()
1:e4467a0:     {
1:e4467a0:         GroupedOptions.printOptions(System.out, "-graph", new GraphOptions());
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     public static Runnable helpPrinter()
1:e4467a0:     {
1:e4467a0:         return new Runnable()
1:e4467a0:         {
1:e4467a0:             @Override
1:e4467a0:             public void run()
1:e4467a0:             {
1:e4467a0:                 printHelp();
1:e4467a0:             }
1:e4467a0:         };
1:e4467a0:     }
1:e4467a0: }
1:e4467a0: 
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.println("  File: " + file);
1:         out.println("  Revision: " + revision);
1:         out.println("  Title: " + title);
1:         out.println("  Operation: " + operation);
1:     }
1: 
1: 
author:Ryan McGuire
-------------------------------------------------------------------------------
commit:e4467a0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: 
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.Serializable;
1: import java.text.SimpleDateFormat;
1: import java.util.Arrays;
1: import java.util.Date;
1: import java.util.List;
1: import java.util.Map;
1: 
1: public class SettingsGraph implements Serializable
1: {
1:     public final String file;
1:     public final String revision;
1:     public final String title;
1:     public final String operation;
1:     public final File temporaryLogFile;
1: 
1:     public SettingsGraph(GraphOptions options, SettingsCommand stressCommand)
1:     {
1:         file = options.file.value();
1:         revision = options.revision.value();
1:         title = options.revision.value() == null
1:             ? "cassandra-stress - " + new SimpleDateFormat("yyyy-mm-dd hh:mm:ss").format(new Date())
1:             : options.title.value();
1: 
1:         operation = options.operation.value() == null
1:             ? stressCommand.type.name()
1:             : options.operation.value();
1: 
1:         if (inGraphMode())
1:         {
1:             try
1:             {
1:                 temporaryLogFile = File.createTempFile("cassandra-stress", ".log");
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new RuntimeException("Cannot open temporary file");
1:             }
1:         }
1:         else
1:         {
1:             temporaryLogFile = null;
1:         }
1:     }
1: 
1:     public boolean inGraphMode()
1:     {
1:         return this.file == null ? false : true;
1:     }
1: 
1:     // Option Declarations
1:     private static final class GraphOptions extends GroupedOptions
1:     {
1:         final OptionSimple file = new OptionSimple("file=", ".*", null, "HTML file to create or append to", true);
1:         final OptionSimple revision = new OptionSimple("revision=", ".*", "unknown", "Unique name to assign to the current configuration being stressed", false);
1:         final OptionSimple title = new OptionSimple("title=", ".*", null, "Title for chart (current date by default)", false);
1:         final OptionSimple operation = new OptionSimple("op=", ".*", null, "Alternative name for current operation (stress op name used by default)", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
1:             return Arrays.asList(file, revision, title, operation);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1:     public static SettingsGraph get(Map<String, String[]> clArgs, SettingsCommand stressCommand)
1:     {
1:         String[] params = clArgs.remove("-graph");
1:         if (params == null)
1:         {
1:             return new SettingsGraph(new GraphOptions(), stressCommand);
1:         }
1:         GraphOptions options = GroupedOptions.select(params, new GraphOptions());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -graph options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsGraph(options, stressCommand);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-graph", new GraphOptions());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
1: 
============================================================================