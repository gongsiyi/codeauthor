1:88edbed: /*
1:88edbed: * Licensed to the Apache Software Foundation (ASF) under one
1:88edbed: * or more contributor license agreements.  See the NOTICE file
1:88edbed: * distributed with this work for additional information
1:88edbed: * regarding copyright ownership.  The ASF licenses this file
1:88edbed: * to you under the Apache License, Version 2.0 (the
1:88edbed: * "License"); you may not use this file except in compliance
1:88edbed: * with the License.  You may obtain a copy of the License at
1:88edbed: *
1:88edbed: *    http://www.apache.org/licenses/LICENSE-2.0
1:88edbed: *
1:88edbed: * Unless required by applicable law or agreed to in writing,
1:88edbed: * software distributed under the License is distributed on an
1:88edbed: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:88edbed: * KIND, either express or implied.  See the License for the
1:88edbed: * specific language governing permissions and limitations
1:88edbed: * under the License.
1:88edbed: */
1:5964cd4: package org.apache.cassandra.db;
3:ac8bbb1: 
1:5964cd4: import org.junit.Test;
1:362cc05: 
1:a991b64: import org.apache.cassandra.cql3.CQLTester;
1:ac8bbb1: 
1:a991b64: public class RemoveCellTest extends CQLTester
1:362cc05: {
1:ac8bbb1:     @Test
1:a991b64:     public void testDeleteCell() throws Throwable
1:ac8bbb1:     {
1:a991b64:         String tableName = createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))");
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:a991b64:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TIMESTAMP ?", 0, 0, 0, 0L);
1:a991b64:         cfs.forceBlockingFlush();
1:a991b64:         execute("DELETE c FROM %s USING TIMESTAMP ? WHERE a = ? AND b = ?", 1L, 0, 0);
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND b = ?", 0, 0), row(0, 0, null));
1:a991b64:         assertRows(execute("SELECT c FROM %s WHERE a = ? AND b = ?", 0, 0), row(new Object[]{null}));
1:362cc05:     }
1:ac8bbb1: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.CQLTester;
1: public class RemoveCellTest extends CQLTester
1:     public void testDeleteCell() throws Throwable
1:         String tableName = createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))");
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TIMESTAMP ?", 0, 0, 0, 0L);
1:         cfs.forceBlockingFlush();
1:         execute("DELETE c FROM %s USING TIMESTAMP ? WHERE a = ? AND b = ?", 1L, 0, 0);
1:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND b = ?", 0, 0), row(0, 0, null));
1:         assertRows(execute("SELECT c FROM %s WHERE a = ? AND b = ?", 0, 0), row(new Object[]{null}));
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0: public class RemoveCellTest extends SchemaLoader
/////////////////////////////////////////////////////////////////////////
0:     private static DeletedCell dc(String name, int ldt, long timestamp)
0:         return new DeletedCell(Util.cellname(name), ldt, timestamp);
/////////////////////////////////////////////////////////////////////////
0:         Cell c = dc("dc1", localDeletionTime, timestamp);
0:         assertTrue("DeletedCell was not marked for delete", c.isMarkedForDelete(timestamp));
0:         assertTrue("DeletedCell was not marked for delete", c.isMarkedForDelete(timestamp));
0:         assertTrue("DeletedCell was not marked for delete", c.isMarkedForDelete(timestamp));
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:         rm.add("Standard1", Util.cellname("Column1"), ByteBufferUtil.bytes("asdf"), 0);
0:         rm.delete("Standard1", Util.cellname("Column1"), 1);
0:         ColumnFamily retrieved = store.getColumnFamily(Util.namesQueryFilter(store, dk, "Column1"));
0:         assert retrieved.getColumn(Util.cellname("Column1")).isMarkedForDelete(System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
0:     private static DeletedColumn dc(String name, int ldt, long timestamp)
1:     {
0:         return new DeletedColumn(Util.cellname(name), ldt, timestamp);
1:     }
1: 
0:         Column c = dc("dc1", localDeletionTime, timestamp);
0:         c = dc("dc2", localDeletionTime + 30, timestamp + 30000);
0:         c = dc("dc3", localDeletionTime - 30, timestamp - 30000);
commit:3a005df
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         rm.add("Standard1", ByteBufferUtil.bytes("Column1"), ByteBufferUtil.bytes("asdf"), 0);
0:         rm.delete("Standard1", ByteBufferUtil.bytes("Column1"), 1);
0:         ColumnFamily retrieved = store.getColumnFamily(QueryFilter.getNamesFilter(dk, "Standard1", ByteBufferUtil.bytes("Column1")));
0:         assertNull(Util.cloneAndRemoveDeleted(store.getColumnFamily(QueryFilter.getIdentityFilter(dk, "Standard1")), Integer.MAX_VALUE));
commit:ac8bbb1
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
0:     public void deletedColumnShouldAlwaysBeMarkedForDelete()
1:     {
0:         // Check for bug in #4307
0:         long timestamp = System.currentTimeMillis();
0:         int localDeletionTime = (int) (timestamp / 1000);
0:         Column c = DeletedColumn.create(localDeletionTime, timestamp, "dc1");
0:         assertTrue("DeletedColumn was not marked for delete", c.isMarkedForDelete());
1: 
0:         // Simulate a node that is 30 seconds behind
0:         c = DeletedColumn.create(localDeletionTime + 30, timestamp + 30000, "dc2");
0:         assertTrue("DeletedColumn was not marked for delete", c.isMarkedForDelete());
1: 
0:         // Simulate a node that is 30 ahead behind
0:         c = DeletedColumn.create(localDeletionTime - 30, timestamp - 30000, "dc3");
0:         assertTrue("DeletedColumn was not marked for delete", c.isMarkedForDelete());
1:     }
1: 
commit:438acfc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.SchemaLoader;
0: public class RemoveColumnTest extends SchemaLoader
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
author:lyubent
-------------------------------------------------------------------------------
commit:b453f08
/////////////////////////////////////////////////////////////////////////
0:         rm.applyUnsafe();
0:         rm.applyUnsafe();
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
0: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.SimpleStrategy;
0: public class RemoveCellTest
0:     private static final String KEYSPACE1 = "RemoveCellTest";
0:     private static final String CF_STANDARD1 = "Standard1";
0: 
0:     @BeforeClass
0:     public static void defineSchema() throws ConfigurationException
0:     {
0:         SchemaLoader.prepareServer();
0:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
0:     }
0: 
0:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
0:         rm = new Mutation(KEYSPACE1, dk.getKey());
0:         rm = new Mutation(KEYSPACE1, dk.getKey());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:4485e6d
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertFalse;
0: import org.apache.cassandra.db.filter.QueryFilter;
/////////////////////////////////////////////////////////////////////////
0:         assertFalse(retrieved.getColumn(Util.cellname("Column1")).isLive());
/////////////////////////////////////////////////////////////////////////
0:         assertFalse("DeletedCell was not marked for delete", c.isLive(timestamp));
0:         assertFalse("DeletedCell was not marked for delete", c.isLive(timestamp));
0:         assertFalse("DeletedCell was not marked for delete", c.isLive(timestamp));
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
0:         Mutation rm;
0:         rm = new Mutation("Keyspace1", dk.key);
0:         rm = new Mutation("Keyspace1", dk.key);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0:         Keyspace keyspace = Keyspace.open("Keyspace1");
0:         ColumnFamilyStore store = keyspace.getColumnFamilyStore("Standard1");
commit:1f7628c
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily retrieved = store.getColumnFamily(QueryFilter.getNamesFilter(dk,
0:                                                                                   "Standard1",
0:                                                                                   ByteBufferUtil.bytes("Column1"),
0:                                                                                   System.currentTimeMillis()));
0:         assert retrieved.getColumn(ByteBufferUtil.bytes("Column1")).isMarkedForDelete(System.currentTimeMillis());
0:         assertNull(Util.cloneAndRemoveDeleted(store.getColumnFamily(QueryFilter.getIdentityFilter(dk,
0:                                                                                                   "Standard1",
0:                                                                                                   System.currentTimeMillis())),
0:                                               Integer.MAX_VALUE));
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("DeletedColumn was not marked for delete", c.isMarkedForDelete(timestamp));
0:         assertTrue("DeletedColumn was not marked for delete", c.isMarkedForDelete(timestamp));
0:         assertTrue("DeletedColumn was not marked for delete", c.isMarkedForDelete(timestamp));
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:         rm = new Mutation("Keyspace1", dk.getKey());
0:         rm = new Mutation("Keyspace1", dk.getKey());
/////////////////////////////////////////////////////////////////////////
0:     private static BufferDeletedCell dc(String name, int ldt, long timestamp)
0:         return new BufferDeletedCell(Util.cellname(name), ldt, timestamp);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
0:     public void testRemoveColumn()
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8358669
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: 
/////////////////////////////////////////////////////////////////////////
0:         rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("Column1")), ByteBufferUtil.bytes("asdf"), 0);
0:         rm.delete(new QueryPath("Standard1", null, ByteBufferUtil.bytes("Column1")), 1);
0:         ColumnFamily retrieved = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath("Standard1"), ByteBufferUtil.bytes("Column1")));
0:         assert retrieved.getColumn(ByteBufferUtil.bytes("Column1")).isMarkedForDelete();
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:         rm.add(new QueryPath("Standard1", null, ByteBuffer.wrap("Column1".getBytes())), ByteBuffer.wrap("asdf".getBytes()), 0);
0:         rm.delete(new QueryPath("Standard1", null, ByteBuffer.wrap("Column1".getBytes())), 1);
0:         ColumnFamily retrieved = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath("Standard1"), ByteBuffer.wrap("Column1".getBytes())));
0:         assert retrieved.getColumn(ByteBuffer.wrap("Column1".getBytes())).isMarkedForDelete();
commit:9d32382
/////////////////////////////////////////////////////////////////////////
0:         rm.add(new QueryPath("Standard1", null, "Column1".getBytes()), "asdf".getBytes(), 0);
0:         rm.delete(new QueryPath("Standard1", null, "Column1".getBytes()), 1);
commit:a393b92
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         assertNull(Util.cloneAndRemoveDeleted(retrieved, Integer.MAX_VALUE));
0:         assertNull(Util.cloneAndRemoveDeleted(store.getColumnFamily(QueryFilter.getIdentityFilter(dk, new QueryPath("Standard1"))), Integer.MAX_VALUE));
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0:         rm.add(new QueryPath("Standard1", null, "Column1".getBytes()), "asdf".getBytes(), new TimestampClock(0));
0:         rm.delete(new QueryPath("Standard1", null, "Column1".getBytes()), new TimestampClock(1));
commit:bf98ec9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.filter.QueryFilter;
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily retrieved = store.getColumnFamily(QueryFilter.getNamesFilter("key1", new QueryPath("Standard1"), "Column1".getBytes()));
0:         assertNull(ColumnFamilyStore.removeDeleted(store.getColumnFamily(QueryFilter.getIdentityFilter("key1", new QueryPath("Standard1"))), Integer.MAX_VALUE));
commit:c8def03
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.CleanupHelper;
0: public class RemoveColumnTest extends CleanupHelper
commit:572b5f8
/////////////////////////////////////////////////////////////////////////
0:         Table table = Table.open("Keyspace1");
0:         rm = new RowMutation("Keyspace1", "key1");
0:         rm = new RowMutation("Keyspace1", "key1");
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0:         rm.add(new QueryPath("Standard1", null, "Column1".getBytes()), "asdf".getBytes(), 0);
0:         rm.delete(new QueryPath("Standard1", null, "Column1".getBytes()), 1);
0:         ColumnFamily retrieved = store.getColumnFamily(new NamesQueryFilter("key1", new QueryPath("Standard1"), "Column1".getBytes()));
0:         assert retrieved.getColumn("Column1".getBytes()).isMarkedForDelete();
commit:f2da00f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.filter.QueryPath;
/////////////////////////////////////////////////////////////////////////
0:         rm.add(new QueryPath("Standard1", null, "Column1"), "asdf".getBytes(), 0);
0:         rm.delete(new QueryPath("Standard1", null, "Column1"), 1);
0:         ColumnFamily retrieved = store.getColumnFamily(new NamesQueryFilter("key1", new QueryPath("Standard1"), "Column1"));
0:         assertNull(ColumnFamilyStore.removeDeleted(store.getColumnFamily(new IdentityQueryFilter("key1", new QueryPath("Standard1"))), Integer.MAX_VALUE));
commit:dd4f4be
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.filter.IdentityQueryFilter;
0: import org.apache.cassandra.db.filter.NamesQueryFilter;
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily retrieved = store.getColumnFamily(new NamesQueryFilter("key1", "Standard1", "Column1"));
0:         assertNull(ColumnFamilyStore.removeDeleted(store.getColumnFamily(new IdentityQueryFilter("key1", "Standard1")), Integer.MAX_VALUE));
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
commit:5964cd4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db;
0: 
0: import java.io.IOException;
0: import java.util.concurrent.ExecutionException;
0: 
1: import org.junit.Test;
0: 
0: import static junit.framework.Assert.assertNull;
0: 
0: public class RemoveColumnTest
0: {
0:     @Test
0:     public void testRemoveColumn() throws IOException, ExecutionException, InterruptedException
0:     {
0:         Table table = Table.open("Table1");
0:         ColumnFamilyStore store = table.getColumnFamilyStore("Standard1");
0:         RowMutation rm;
0: 
0:         // add data
0:         rm = new RowMutation("Table1", "key1");
0:         rm.add("Standard1:Column1", "asdf".getBytes(), 0);
0:         rm.apply();
0:         store.forceBlockingFlush();
0: 
0:         // remove
0:         rm = new RowMutation("Table1", "key1");
0:         rm.delete("Standard1:Column1", 1);
0:         rm.apply();
0: 
0:         ColumnFamily retrieved = store.getColumnFamily("key1", "Standard1", new IdentityFilter());
0:         assert retrieved.getColumn("Column1").isMarkedForDelete();
0:         assertNull(ColumnFamilyStore.removeDeleted(retrieved, Integer.MAX_VALUE));
0:     }
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:434564d
/////////////////////////////////////////////////////////////////////////
0: 
0: import org.apache.cassandra.Util;
/////////////////////////////////////////////////////////////////////////
0:         DecoratedKey dk = Util.dk("key1");
0:         rm = new RowMutation("Keyspace1", dk.key);
0:         rm = new RowMutation("Keyspace1", dk.key);
0:         ColumnFamily retrieved = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath("Standard1"), "Column1".getBytes()));
0:         assertNull(ColumnFamilyStore.removeDeleted(store.getColumnFamily(QueryFilter.getIdentityFilter(dk, new QueryPath("Standard1"))), Integer.MAX_VALUE));
0: }
============================================================================