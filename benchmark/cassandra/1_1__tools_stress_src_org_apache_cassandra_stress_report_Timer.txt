1:e73633c: package org.apache.cassandra.stress.report;
1:e73633c: /*
1:e73633c:  *
1:e73633c:  * Licensed to the Apache Software Foundation (ASF) under one
1:e73633c:  * or more contributor license agreements.  See the NOTICE file
1:e73633c:  * distributed with this work for additional information
1:e73633c:  * regarding copyright ownership.  The ASF licenses this file
1:e73633c:  * to you under the Apache License, Version 2.0 (the
1:e73633c:  * "License"); you may not use this file except in compliance
1:e73633c:  * with the License.  You may obtain a copy of the License at
1:e73633c:  *
1:e73633c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e73633c:  *
1:e73633c:  * Unless required by applicable law or agreed to in writing,
1:e73633c:  * software distributed under the License is distributed on an
1:e73633c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e73633c:  * KIND, either express or implied.  See the License for the
1:e73633c:  * specific language governing permissions and limitations
1:e73633c:  * under the License.
1:e73633c:  *
1:e73633c:  */
1:e73633c: 
1:e73633c: 
1:e73633c: import org.apache.cassandra.stress.StressAction.MeasurementSink;
1:e73633c: 
1:e73633c: // a timer - this timer must be used by a single thread, and co-ordinates with other timers by
1:e73633c: public final class Timer
1:e73633c: {
1:e73633c:     private final String opType;
1:e73633c:     private final MeasurementSink sink;
1:e73633c: 
1:e73633c:     // event timing info
1:e73633c:     private long intendedTimeNs;
1:e73633c:     private long startTimeNs;
1:e73633c: 
1:e73633c:     public Timer(String opType, MeasurementSink sink)
1:e73633c:     {
1:e73633c:         this.opType = opType;
1:e73633c:         this.sink = sink;
1:e73633c:     }
1:e73633c: 
1:e73633c: 
1:e73633c:     public void stop(long partitionCount, long rowCount, boolean error)
1:e73633c:     {
1:e73633c:         sink.record(opType, intendedTimeNs, startTimeNs, System.nanoTime(), rowCount, partitionCount, error);
1:e73633c:         resetTimes();
1:e73633c:     }
1:e73633c: 
1:e73633c:     private void resetTimes()
1:e73633c:     {
1:e73633c:         intendedTimeNs = startTimeNs = 0;
1:e73633c:     }
1:e73633c: 
1:e73633c:     public void intendedTimeNs(long v)
1:e73633c:     {
1:e73633c:         intendedTimeNs = v;
1:e73633c:     }
1:e73633c: 
1:e73633c:     public void start()
1:e73633c:     {
1:e73633c:         startTimeNs = System.nanoTime();
1:e73633c:     }
1:e73633c: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.report;
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: 
1: 
1: import org.apache.cassandra.stress.StressAction.MeasurementSink;
1: 
1: // a timer - this timer must be used by a single thread, and co-ordinates with other timers by
1: public final class Timer
1: {
1:     private final String opType;
1:     private final MeasurementSink sink;
1: 
1:     // event timing info
1:     private long intendedTimeNs;
1:     private long startTimeNs;
1: 
1:     public Timer(String opType, MeasurementSink sink)
1:     {
1:         this.opType = opType;
1:         this.sink = sink;
1:     }
1: 
1: 
1:     public void stop(long partitionCount, long rowCount, boolean error)
1:     {
1:         sink.record(opType, intendedTimeNs, startTimeNs, System.nanoTime(), rowCount, partitionCount, error);
1:         resetTimes();
1:     }
1: 
1:     private void resetTimes()
1:     {
1:         intendedTimeNs = startTimeNs = 0;
1:     }
1: 
1:     public void intendedTimeNs(long v)
1:     {
1:         intendedTimeNs = v;
1:     }
1: 
1:     public void start()
1:     {
1:         startTimeNs = System.nanoTime();
1:     }
1: }
============================================================================