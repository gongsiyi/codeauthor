1:485feef: /*
1:485feef:  * Licensed to the Apache Software Foundation (ASF) under one
1:485feef:  * or more contributor license agreements.  See the NOTICE file
1:485feef:  * distributed with this work for additional information
1:485feef:  * regarding copyright ownership.  The ASF licenses this file
1:485feef:  * to you under the Apache License, Version 2.0 (the
1:485feef:  * "License"); you may not use this file except in compliance
1:485feef:  * with the License.  You may obtain a copy of the License at
1:485feef:  *
1:485feef:  *     http://www.apache.org/licenses/LICENSE-2.0
1:485feef:  *
1:485feef:  * Unless required by applicable law or agreed to in writing, software
1:485feef:  * distributed under the License is distributed on an "AS IS" BASIS,
1:485feef:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:485feef:  * See the License for the specific language governing permissions and
1:485feef:  * limitations under the License.
2:485feef:  */
1:485feef: package org.apache.cassandra.cql3;
1:485feef: 
1:485feef: import java.nio.ByteBuffer;
1:9872b74: import java.util.ArrayList;
1:9872b74: import java.util.Collections;
1:485feef: import java.util.List;
1:485feef: 
1:a90de7c: import org.apache.cassandra.utils.MD5Digest;
1:a90de7c: 
1:485feef: import org.apache.cassandra.db.ConsistencyLevel;
1:9872b74: import org.apache.cassandra.service.QueryState;
1:485feef: 
1:9872b74: public abstract class BatchQueryOptions
1:485feef: {
1:9872b74:     public static BatchQueryOptions DEFAULT = withoutPerStatementVariables(QueryOptions.DEFAULT);
1:9872b74: 
1:9872b74:     protected final QueryOptions wrapped;
1:485feef:     private final List<Object> queryOrIdList;
1:485feef: 
1:9872b74:     protected BatchQueryOptions(QueryOptions wrapped, List<Object> queryOrIdList)
1:485feef:     {
1:9872b74:         this.wrapped = wrapped;
1:485feef:         this.queryOrIdList = queryOrIdList;
1:485feef:     }
1:485feef: 
1:9872b74:     public static BatchQueryOptions withoutPerStatementVariables(QueryOptions options)
1:485feef:     {
1:9872b74:         return new WithoutPerStatementVariables(options, Collections.<Object>emptyList());
1:485feef:     }
1:485feef: 
1:9872b74:     public static BatchQueryOptions withPerStatementVariables(QueryOptions options, List<List<ByteBuffer>> variables, List<Object> queryOrIdList)
1:485feef:     {
1:9872b74:         return new WithPerStatementVariables(options, variables, queryOrIdList);
1:9872b74:     }
1:9872b74: 
1:9872b74:     public abstract QueryOptions forStatement(int i);
1:9872b74: 
1:a90de7c:     public void prepareStatement(int i, List<ColumnSpecification> boundNames)
1:a90de7c:     {
1:a90de7c:         forStatement(i).prepare(boundNames);
1:a90de7c:     }
1:a90de7c: 
1:9872b74:     public ConsistencyLevel getConsistency()
1:9872b74:     {
1:9872b74:         return wrapped.getConsistency();
1:9872b74:     }
1:9872b74: 
1:9872b74:     public ConsistencyLevel getSerialConsistency()
1:9872b74:     {
1:9872b74:         return wrapped.getSerialConsistency();
1:485feef:     }
1:485feef: 
1:485feef:     public List<Object> getQueryOrIdList()
1:485feef:     {
1:485feef:         return queryOrIdList;
1:485feef:     }
1:9872b74: 
1:9872b74:     public long getTimestamp(QueryState state)
1:9872b74:     {
1:9872b74:         return wrapped.getTimestamp(state);
1:9872b74:     }
1:9872b74: 
1:9872b74:     private static class WithoutPerStatementVariables extends BatchQueryOptions
1:9872b74:     {
1:9872b74:         private WithoutPerStatementVariables(QueryOptions wrapped, List<Object> queryOrIdList)
1:9872b74:         {
1:9872b74:             super(wrapped, queryOrIdList);
1:9872b74:         }
1:9872b74: 
1:9872b74:         public QueryOptions forStatement(int i)
1:9872b74:         {
1:9872b74:             return wrapped;
1:9872b74:         }
1:9872b74:     }
1:9872b74: 
1:9872b74:     private static class WithPerStatementVariables extends BatchQueryOptions
1:9872b74:     {
1:9872b74:         private final List<QueryOptions> perStatementOptions;
1:9872b74: 
1:9872b74:         private WithPerStatementVariables(QueryOptions wrapped, List<List<ByteBuffer>> variables, List<Object> queryOrIdList)
1:9872b74:         {
1:9872b74:             super(wrapped, queryOrIdList);
1:9872b74:             this.perStatementOptions = new ArrayList<>(variables.size());
1:9872b74:             for (final List<ByteBuffer> vars : variables)
1:9872b74:             {
1:9872b74:                 perStatementOptions.add(new QueryOptions.QueryOptionsWrapper(wrapped)
1:9872b74:                 {
1:9872b74:                     public List<ByteBuffer> getValues()
1:9872b74:                     {
1:9872b74:                         return vars;
1:9872b74:                     }
1:9872b74:                 });
1:9872b74:             }
1:9872b74:         }
1:9872b74: 
1:9872b74:         public QueryOptions forStatement(int i)
1:9872b74:         {
1:9872b74:             return perStatementOptions.get(i);
1:9872b74:         }
1:a90de7c: 
1:a90de7c:         @Override
1:a90de7c:         public void prepareStatement(int i, List<ColumnSpecification> boundNames)
1:a90de7c:         {
1:a90de7c:             if (isPreparedStatement(i))
1:a90de7c:             {
1:a90de7c:                 QueryOptions options = perStatementOptions.get(i);
1:a90de7c:                 options.prepare(boundNames);
1:a90de7c:                 options = QueryOptions.addColumnSpecifications(options, boundNames);
1:a90de7c:                 perStatementOptions.set(i, options);
1:a90de7c:             }
1:a90de7c:             else
1:a90de7c:             {
1:a90de7c:                 super.prepareStatement(i, boundNames);
1:a90de7c:             }
1:a90de7c:         }
1:a90de7c: 
1:a90de7c:         private boolean isPreparedStatement(int i)
1:a90de7c:         {
1:a90de7c:             return getQueryOrIdList().get(i) instanceof MD5Digest;
1:a90de7c:         }
1:9872b74:     }
1:485feef: }
============================================================================
author:blerer
-------------------------------------------------------------------------------
commit:a90de7c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.MD5Digest;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void prepareStatement(int i, List<ColumnSpecification> boundNames)
1:     {
1:         forStatement(i).prepare(boundNames);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
1:         public void prepareStatement(int i, List<ColumnSpecification> boundNames)
1:         {
1:             if (isPreparedStatement(i))
1:             {
1:                 QueryOptions options = perStatementOptions.get(i);
1:                 options.prepare(boundNames);
1:                 options = QueryOptions.addColumnSpecifications(options, boundNames);
1:                 perStatementOptions.set(i, options);
1:             }
1:             else
1:             {
1:                 super.prepareStatement(i, boundNames);
1:             }
1:         }
1: 
1:         private boolean isPreparedStatement(int i)
1:         {
1:             return getQueryOrIdList().get(i) instanceof MD5Digest;
1:         }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9872b74
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import org.apache.cassandra.service.QueryState;
0: import org.apache.cassandra.service.pager.PagingState;
1: public abstract class BatchQueryOptions
1:     public static BatchQueryOptions DEFAULT = withoutPerStatementVariables(QueryOptions.DEFAULT);
1: 
1:     protected final QueryOptions wrapped;
1:     protected BatchQueryOptions(QueryOptions wrapped, List<Object> queryOrIdList)
1:         this.wrapped = wrapped;
1:     public static BatchQueryOptions withoutPerStatementVariables(QueryOptions options)
1:         return new WithoutPerStatementVariables(options, Collections.<Object>emptyList());
1:     public static BatchQueryOptions withPerStatementVariables(QueryOptions options, List<List<ByteBuffer>> variables, List<Object> queryOrIdList)
1:         return new WithPerStatementVariables(options, variables, queryOrIdList);
1:     }
1: 
1:     public abstract QueryOptions forStatement(int i);
1: 
1:     public ConsistencyLevel getConsistency()
1:     {
1:         return wrapped.getConsistency();
1:     }
1: 
1:     public ConsistencyLevel getSerialConsistency()
1:     {
1:         return wrapped.getSerialConsistency();
1: 
1:     public long getTimestamp(QueryState state)
1:     {
1:         return wrapped.getTimestamp(state);
1:     }
1: 
1:     private static class WithoutPerStatementVariables extends BatchQueryOptions
1:     {
1:         private WithoutPerStatementVariables(QueryOptions wrapped, List<Object> queryOrIdList)
1:         {
1:             super(wrapped, queryOrIdList);
1:         }
1: 
1:         public QueryOptions forStatement(int i)
1:         {
1:             return wrapped;
1:         }
1:     }
1: 
1:     private static class WithPerStatementVariables extends BatchQueryOptions
1:     {
1:         private final List<QueryOptions> perStatementOptions;
1: 
1:         private WithPerStatementVariables(QueryOptions wrapped, List<List<ByteBuffer>> variables, List<Object> queryOrIdList)
1:         {
1:             super(wrapped, queryOrIdList);
1:             this.perStatementOptions = new ArrayList<>(variables.size());
1:             for (final List<ByteBuffer> vars : variables)
1:             {
1:                 perStatementOptions.add(new QueryOptions.QueryOptionsWrapper(wrapped)
1:                 {
1:                     public List<ByteBuffer> getValues()
1:                     {
1:                         return vars;
1:                     }
1:                 });
1:             }
1:         }
1: 
1:         public QueryOptions forStatement(int i)
1:         {
1:             return perStatementOptions.get(i);
1:         }
1:     }
author:beobal
-------------------------------------------------------------------------------
commit:485feef
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.ConsistencyLevel;
1: 
0: /**
0:  * Options for a batch (at the protocol level) queries.
1:  */
0: public class BatchQueryOptions
1: {
0:     private final ConsistencyLevel consistency;
0:     private final List<List<ByteBuffer>> values;
1:     private final List<Object> queryOrIdList;
1: 
0:     public BatchQueryOptions(ConsistencyLevel cl, List<List<ByteBuffer>> values, List<Object> queryOrIdList)
1:     {
0:         this.consistency = cl;
0:         this.values = values;
1:         this.queryOrIdList = queryOrIdList;
1:     }
1: 
0:     public ConsistencyLevel getConsistency()
1:     {
0:         return consistency;
1:     }
1: 
0:     public List<List<ByteBuffer>> getValues()
1:     {
0:         return values;
1:     }
1: 
1:     public List<Object> getQueryOrIdList()
1:     {
1:         return queryOrIdList;
1:     }
1: }
============================================================================