1:15354b4: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
3:1aeca2b:  *
1:15354b4:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:15354b4:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:1aeca2b: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:15354b4: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:15354b4: import java.util.List;
1:15354b4: import java.util.ArrayList;
1:15354b4: import java.util.Map;
1:15354b4: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:15354b4: import java.util.Set;
1:15354b4: import java.util.HashSet;
1:04d5ec3: import java.util.EnumSet;
1:15354b4: import java.util.Collections;
1:0f56a25: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:53895ad: import java.util.Arrays;
1:0f56a25: import org.slf4j.Logger;
1:0f56a25: import org.slf4j.LoggerFactory;
1:15354b4: 
1:4e8691a: /**
1:4e8691a:  * A slice range is a structure that stores basic range, ordering and limit information for a query that will return
1:4e8691a:  * multiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY
1:1aeca2b:  * 
1:4e8691a:  * @param start. The column name to start the slice with. This attribute is not required, though there is no default value,
1:4e8691a:  *               and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it
1:4e8691a:  *               must a valid value under the rules of the Comparator defined for the given ColumnFamily.
1:4e8691a:  * @param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,
1:4e8691a:  *                and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
1:00bc8da:  *                must also be a valid value to the ColumnFamily Comparator.
1:4e8691a:  * @param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
1:4fb3d18:  * @param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will
1:4e8691a:  *               materialize the whole result into memory before returning it to the client, so be aware that you may
1:4e8691a:  *               be better served by iterating through slices by passing the last value of one call in as the 'start'
1:4e8691a:  *               of the next instead of increasing 'count' arbitrarily large.
1:1aeca2b:  */
1:bffd9ea: public class SliceRange implements org.apache.thrift.TBase<SliceRange, SliceRange._Fields>, java.io.Serializable, Cloneable, Comparable<SliceRange> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SliceRange");
1:15354b4: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField REVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("reversed", org.apache.thrift.protocol.TType.BOOL, (short)3);
1:4ec9511:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
1:15354b4: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new SliceRangeStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new SliceRangeTupleSchemeFactory());
21:15354b4:   }
1:7d2115b: 
1:7c8c570:   public ByteBuffer start; // required
1:7c8c570:   public ByteBuffer finish; // required
1:7c8c570:   public boolean reversed; // required
1:7c8c570:   public int count; // required
1:7d2115b: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:04d5ec3:     START((short)1, "start"),
1:04d5ec3:     FINISH((short)2, "finish"),
1:04d5ec3:     REVERSED((short)3, "reversed"),
1:4fb3d18:     COUNT((short)4, "count");
1:7d2115b: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:7d2115b: 
1:15354b4:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:7d2115b:       }
1:7d2115b:     }
1:15354b4: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // START
1:d849c69:           return START;
1:d849c69:         case 2: // FINISH
1:d849c69:           return FINISH;
1:d849c69:         case 3: // REVERSED
1:d849c69:           return REVERSED;
1:d849c69:         case 4: // COUNT
1:d849c69:           return COUNT;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:7d2115b:     }
1:15354b4: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
2:04d5ec3:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:7d2115b:     }
1:15354b4: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
1:04d5ec3:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:7d2115b:     }
1:15354b4: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:15354b4: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:2b69c40:     }
1:15354b4: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
1:0f56a25:     }
1:15354b4: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:0f56a25:     }
1:0f56a25:   }
1:15354b4: 
1:0f56a25:   // isset id assignments
1:0f56a25:   private static final int __REVERSED_ISSET_ID = 0;
1:0f56a25:   private static final int __COUNT_ISSET_ID = 1;
1:b153d45:   private byte __isset_bitfield = 0;
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:d849c69:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.REVERSED, new org.apache.thrift.meta_data.FieldMetaData("reversed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:4ec9511:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SliceRange.class, metaDataMap);
1:15354b4:   }
1:15354b4: 
1:15354b4:   public SliceRange() {
1:6b7a1c3:     this.reversed = false;
1:15354b4: 
1:15354b4:     this.count = 100;
1:15354b4: 
1:15354b4:   }
1:15354b4: 
1:15354b4:   public SliceRange(
1:e7a385a:     ByteBuffer start,
1:e7a385a:     ByteBuffer finish,
1:6b7a1c3:     boolean reversed,
1:15354b4:     int count)
1:7d2115b:   {
1:15354b4:     this();
1:15354b4:     this.start = start;
1:15354b4:     this.finish = finish;
1:6b7a1c3:     this.reversed = reversed;
1:2b69c40:     setReversedIsSet(true);
1:15354b4:     this.count = count;
1:2b69c40:     setCountIsSet(true);
1:7d2115b:   }
1:15354b4: 
1:15354b4:   /**
1:15354b4:    * Performs a deep copy on <i>other</i>.
1:15354b4:    */
1:15354b4:   public SliceRange(SliceRange other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:15354b4:     if (other.isSetStart()) {
1:4ec9511:       this.start = org.apache.thrift.TBaseHelper.copyBinary(other.start);
1:e7a385a: ;
1:15354b4:     }
1:15354b4:     if (other.isSetFinish()) {
1:4ec9511:       this.finish = org.apache.thrift.TBaseHelper.copyBinary(other.finish);
1:e7a385a: ;
1:15354b4:     }
1:6b7a1c3:     this.reversed = other.reversed;
1:15354b4:     this.count = other.count;
1:7d2115b:   }
1:15354b4: 
1:53895ad:   public SliceRange deepCopy() {
1:53895ad:     return new SliceRange(this);
1:7d2115b:   }
1:53895ad: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.start = null;
1:e7a385a:     this.finish = null;
1:e7a385a:     this.reversed = false;
1:e7a385a: 
1:e7a385a:     this.count = 100;
1:e7a385a: 
1:53895ad:   }
1:15354b4: 
1:15354b4:   public byte[] getStart() {
1:4ec9511:     setStart(org.apache.thrift.TBaseHelper.rightSize(start));
1:4ec9511:     return start == null ? null : start.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForStart() {
1:e7a385a:     return start;
1:15354b4:   }
1:15354b4: 
1:8455ebf:   public SliceRange setStart(byte[] start) {
1:4ec9511:     setStart(start == null ? (ByteBuffer)null : ByteBuffer.wrap(start));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public SliceRange setStart(ByteBuffer start) {
1:15354b4:     this.start = start;
1:7d2115b:     return this;
1:7d2115b:   }
1:7d2115b: 
1:15354b4:   public void unsetStart() {
1:15354b4:     this.start = null;
1:7d2115b:   }
1:7d2115b: 
1:4ec9511:   /** Returns true if field start is set (has been assigned a value) and false otherwise */
1:15354b4:   public boolean isSetStart() {
1:15354b4:     return this.start != null;
1:7d2115b:   }
1:7d2115b: 
1:15354b4:   public void setStartIsSet(boolean value) {
1:7d2115b:     if (!value) {
1:15354b4:       this.start = null;
1:7d2115b:     }
1:7d2115b:   }
1:7d2115b: 
1:15354b4:   public byte[] getFinish() {
1:4ec9511:     setFinish(org.apache.thrift.TBaseHelper.rightSize(finish));
1:4ec9511:     return finish == null ? null : finish.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForFinish() {
1:e7a385a:     return finish;
1:15354b4:   }
1:15354b4: 
1:8455ebf:   public SliceRange setFinish(byte[] finish) {
1:4ec9511:     setFinish(finish == null ? (ByteBuffer)null : ByteBuffer.wrap(finish));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public SliceRange setFinish(ByteBuffer finish) {
1:15354b4:     this.finish = finish;
1:8455ebf:     return this;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void unsetFinish() {
1:15354b4:     this.finish = null;
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field finish is set (has been assigned a value) and false otherwise */
1:15354b4:   public boolean isSetFinish() {
1:15354b4:     return this.finish != null;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void setFinishIsSet(boolean value) {
2:15354b4:     if (!value) {
1:15354b4:       this.finish = null;
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:6b7a1c3:   public boolean isReversed() {
1:6b7a1c3:     return this.reversed;
1:15354b4:   }
1:15354b4: 
1:6b7a1c3:   public SliceRange setReversed(boolean reversed) {
1:6b7a1c3:     this.reversed = reversed;
1:0f56a25:     setReversedIsSet(true);
1:8455ebf:     return this;
1:15354b4:   }
1:15354b4: 
1:6b7a1c3:   public void unsetReversed() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field reversed is set (has been assigned a value) and false otherwise */
1:6b7a1c3:   public boolean isSetReversed() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:15354b4:   }
1:15354b4: 
1:6b7a1c3:   public void setReversedIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVERSED_ISSET_ID, value);
1:15354b4:   }
1:15354b4: 
1:15354b4:   public int getCount() {
1:15354b4:     return this.count;
1:15354b4:   }
1:15354b4: 
1:8455ebf:   public SliceRange setCount(int count) {
1:15354b4:     this.count = count;
1:0f56a25:     setCountIsSet(true);
1:8455ebf:     return this;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void unsetCount() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:15354b4:   public boolean isSetCount() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void setCountIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
1:15354b4:   }
1:15354b4: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
2:15354b4:     case START:
2:15354b4:       if (value == null) {
1:15354b4:         unsetStart();
8:15354b4:       } else {
1:e7a385a:         setStart((ByteBuffer)value);
1:15354b4:       }
8:15354b4:       break;
1:7d2115b: 
2:15354b4:     case FINISH:
1:7d2115b:       if (value == null) {
1:15354b4:         unsetFinish();
1:7d2115b:       } else {
1:e7a385a:         setFinish((ByteBuffer)value);
1:7d2115b:       }
1:7d2115b:       break;
1:15354b4: 
1:6b7a1c3:     case REVERSED:
1:15354b4:       if (value == null) {
1:6b7a1c3:         unsetReversed();
1:7d2115b:       } else {
1:6b7a1c3:         setReversed((Boolean)value);
1:7d2115b:       }
1:7d2115b:       break;
1:15354b4: 
2:15354b4:     case COUNT:
1:15354b4:       if (value == null) {
1:15354b4:         unsetCount();
1:2b69c40:       } else {
1:15354b4:         setCount((Integer)value);
1:7d2115b:       }
1:2b69c40:       break;
1:7d2115b: 
1:7d2115b:     }
1:2b69c40:   }
1:15354b4: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:15354b4:     case START:
1:15354b4:       return getStart();
1:15354b4: 
1:15354b4:     case FINISH:
1:15354b4:       return getFinish();
1:15354b4: 
1:6b7a1c3:     case REVERSED:
1:7c8c570:       return Boolean.valueOf(isReversed());
1:15354b4: 
1:15354b4:     case COUNT:
1:7c8c570:       return Integer.valueOf(getCount());
1:15354b4: 
1:2b69c40:     }
1:04d5ec3:     throw new IllegalStateException();
1:2b69c40:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:15354b4:     case START:
1:15354b4:       return isSetStart();
1:15354b4:     case FINISH:
1:15354b4:       return isSetFinish();
1:6b7a1c3:     case REVERSED:
1:6b7a1c3:       return isSetReversed();
1:15354b4:     case COUNT:
1:15354b4:       return isSetCount();
1:15354b4:     }
1:04d5ec3:     throw new IllegalStateException();
1:15354b4:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public boolean equals(Object that) {
1:15354b4:     if (that == null)
3:15354b4:       return false;
1:15354b4:     if (that instanceof SliceRange)
1:15354b4:       return this.equals((SliceRange)that);
1:7d2115b:     return false;
1:7d2115b:   }
1:7d2115b: 
1:15354b4:   public boolean equals(SliceRange that) {
1:15354b4:     if (that == null)
1:7d2115b:       return false;
1:15354b4: 
1:15354b4:     boolean this_present_start = true && this.isSetStart();
1:15354b4:     boolean that_present_start = true && that.isSetStart();
1:15354b4:     if (this_present_start || that_present_start) {
1:15354b4:       if (!(this_present_start && that_present_start))
1:15354b4:         return false;
1:e7a385a:       if (!this.start.equals(that.start))
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:15354b4:     boolean this_present_finish = true && this.isSetFinish();
1:15354b4:     boolean that_present_finish = true && that.isSetFinish();
1:15354b4:     if (this_present_finish || that_present_finish) {
1:15354b4:       if (!(this_present_finish && that_present_finish))
1:15354b4:         return false;
1:e7a385a:       if (!this.finish.equals(that.finish))
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:6b7a1c3:     boolean this_present_reversed = true;
1:6b7a1c3:     boolean that_present_reversed = true;
1:6b7a1c3:     if (this_present_reversed || that_present_reversed) {
1:6b7a1c3:       if (!(this_present_reversed && that_present_reversed))
1:15354b4:         return false;
1:6b7a1c3:       if (this.reversed != that.reversed)
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:15354b4:     boolean this_present_count = true;
1:15354b4:     boolean that_present_count = true;
1:15354b4:     if (this_present_count || that_present_count) {
1:15354b4:       if (!(this_present_count && that_present_count))
1:15354b4:         return false;
1:15354b4:       if (this.count != that.count)
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:15354b4:     return true;
1:15354b4:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_start = true && (isSetStart());
1:d966ed0:     builder.append(present_start);
1:d966ed0:     if (present_start)
1:d966ed0:       builder.append(start);
1:d966ed0: 
1:d966ed0:     boolean present_finish = true && (isSetFinish());
1:d966ed0:     builder.append(present_finish);
1:d966ed0:     if (present_finish)
1:d966ed0:       builder.append(finish);
1:d966ed0: 
1:d966ed0:     boolean present_reversed = true;
1:d966ed0:     builder.append(present_reversed);
1:d966ed0:     if (present_reversed)
1:d966ed0:       builder.append(reversed);
1:d966ed0: 
1:d966ed0:     boolean present_count = true;
1:d966ed0:     builder.append(present_count);
1:d966ed0:     if (present_count)
1:d966ed0:       builder.append(count);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:15354b4:   }
1:15354b4: 
1:bffd9ea:   @Override
1:0f56a25:   public int compareTo(SliceRange other) {
1:0f56a25:     if (!getClass().equals(other.getClass())) {
1:0f56a25:       return getClass().getName().compareTo(other.getClass().getName());
1:0f56a25:     }
1:0f56a25: 
1:0f56a25:     int lastComparison = 0;
1:0f56a25: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
7:0f56a25:     if (lastComparison != 0) {
7:0f56a25:       return lastComparison;
1:7d2115b:     }
1:e7a385a:     if (isSetStart()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
1:7d2115b:       if (lastComparison != 0) {
1:7d2115b:         return lastComparison;
1:7d2115b:       }
1:7d2115b:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
1:7d2115b:     if (lastComparison != 0) {
1:7d2115b:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetFinish()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetReversed()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetCount()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:0f56a25:       if (lastComparison != 0) {
1:0f56a25:         return lastComparison;
1:0f56a25:       }
1:0f56a25:     }
1:0f56a25:     return 0;
1:0f56a25:   }
1:0f56a25: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:0f56a25:   }
1:15354b4: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:0f56a25:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public String toString() {
1:15354b4:     StringBuilder sb = new StringBuilder("SliceRange(");
1:15354b4:     boolean first = true;
1:15354b4: 
1:15354b4:     sb.append("start:");
1:15354b4:     if (this.start == null) {
2:15354b4:       sb.append("null");
1:2b69c40:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.start, sb);
1:0f56a25:     }
2:15354b4:     first = false;
1:7d2115b:     if (!first) sb.append(", ");
1:15354b4:     sb.append("finish:");
1:15354b4:     if (this.finish == null) {
1:7d2115b:       sb.append("null");
1:7d2115b:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.finish, sb);
1:7d2115b:     }
1:15354b4:     first = false;
2:15354b4:     if (!first) sb.append(", ");
1:6b7a1c3:     sb.append("reversed:");
1:6b7a1c3:     sb.append(this.reversed);
1:15354b4:     first = false;
1:15354b4:     if (!first) sb.append(", ");
1:15354b4:     sb.append("count:");
1:15354b4:     sb.append(this.count);
1:7d2115b:     first = false;
1:15354b4:     sb.append(")");
1:15354b4:     return sb.toString();
1:7d2115b:   }
1:15354b4: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:15354b4:     // check for required fields
1:ac921c4:     if (start == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'start' was not present! Struct: " + toString());
1:ac921c4:     }
1:ac921c4:     if (finish == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'finish' was not present! Struct: " + toString());
1:ac921c4:     }
1:ac921c4:     // alas, we cannot check 'reversed' because it's a primitive and you chose the non-beans generator.
1:ac921c4:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:b153d45:     // check for sub-struct validity
1:0f56a25:   }
1:15354b4: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class SliceRangeStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public SliceRangeStandardScheme getScheme() {
1:b153d45:       return new SliceRangeStandardScheme();
1:0f56a25:     }
1:15354b4:   }
1:15354b4: 
1:b153d45:   private static class SliceRangeStandardScheme extends StandardScheme<SliceRange> {
1:15354b4: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, SliceRange struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:15354b4:       iprot.readStructBegin();
1:15354b4:       while (true)
1:7d2115b:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:2b69c40:           break;
1:15354b4:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // START
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.start = iprot.readBinary();
1:b153d45:               struct.setStartIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:15354b4:             }
1:2b69c40:             break;
1:2b69c40:           case 2: // FINISH
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.finish = iprot.readBinary();
1:b153d45:               struct.setFinishIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:15354b4:             }
1:2b69c40:             break;
1:2b69c40:           case 3: // REVERSED
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:b153d45:               struct.reversed = iprot.readBool();
1:b153d45:               struct.setReversedIsSet(true);
1:15354b4:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:15354b4:             }
1:15354b4:             break;
1:2b69c40:           case 4: // COUNT
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.count = iprot.readI32();
1:b153d45:               struct.setCountIsSet(true);
1:15354b4:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:15354b4:             }
1:15354b4:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:15354b4:         }
1:2b69c40:         iprot.readFieldEnd();
1:15354b4:       }
1:15354b4:       iprot.readStructEnd();
1:15354b4: 
1:15354b4:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       if (!struct.isSetReversed()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'reversed' was not found in serialized data! Struct: " + toString());
1:ac921c4:       }
1:b153d45:       if (!struct.isSetCount()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:ac921c4:       }
1:b153d45:       struct.validate();
1:0f56a25:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, SliceRange struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:15354b4:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.start != null) {
1:15354b4:         oprot.writeFieldBegin(START_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.start);
2:15354b4:         oprot.writeFieldEnd();
1:7d2115b:       }
1:b153d45:       if (struct.finish != null) {
1:15354b4:         oprot.writeFieldBegin(FINISH_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.finish);
1:15354b4:         oprot.writeFieldEnd();
1:7d2115b:       }
1:6b7a1c3:       oprot.writeFieldBegin(REVERSED_FIELD_DESC);
1:b153d45:       oprot.writeBool(struct.reversed);
1:15354b4:       oprot.writeFieldEnd();
1:15354b4:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:b153d45:       oprot.writeI32(struct.count);
1:7d2115b:       oprot.writeFieldEnd();
1:15354b4:       oprot.writeFieldStop();
1:15354b4:       oprot.writeStructEnd();
1:7d2115b:     }
1:15354b4: 
1:0f56a25:   }
1:15354b4: 
1:b153d45:   private static class SliceRangeTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public SliceRangeTupleScheme getScheme() {
1:b153d45:       return new SliceRangeTupleScheme();
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:b153d45:   private static class SliceRangeTupleScheme extends TupleScheme<SliceRange> {
8:b153d45: 
1:15354b4:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, SliceRange struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.start);
1:b153d45:       oprot.writeBinary(struct.finish);
1:b153d45:       oprot.writeBool(struct.reversed);
1:b153d45:       oprot.writeI32(struct.count);
1:15354b4:     }
1:b153d45: 
2:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, SliceRange struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.start = iprot.readBinary();
1:b153d45:       struct.setStartIsSet(true);
1:b153d45:       struct.finish = iprot.readBinary();
1:b153d45:       struct.setFinishIsSet(true);
1:b153d45:       struct.reversed = iprot.readBool();
1:b153d45:       struct.setReversedIsSet(true);
1:b153d45:       struct.count = iprot.readI32();
1:b153d45:       struct.setCountIsSet(true);
1:15354b4:     }
1:15354b4:   }
1:b153d45: 
1:15354b4: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class SliceRange implements org.apache.thrift.TBase<SliceRange, SliceRange._Fields>, java.io.Serializable, Cloneable, Comparable<SliceRange> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
1:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
1:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
1:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer start;
0:   public ByteBuffer finish;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer start,
1:     ByteBuffer finish,
/////////////////////////////////////////////////////////////////////////
0:       this.start = TBaseHelper.copyBinary(other.start);
1: ;
0:       this.finish = TBaseHelper.copyBinary(other.finish);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.start = null;
1:     this.finish = null;
1:     this.reversed = false;
1: 
1:     this.count = 100;
1: 
0:     setStart(TBaseHelper.rightSize(start));
0:     return start.array();
1:   }
1: 
0:   public ByteBuffer BufferForStart() {
1:     return start;
0:     setStart(ByteBuffer.wrap(start));
1:     return this;
1:   }
1: 
1:   public SliceRange setStart(ByteBuffer start) {
/////////////////////////////////////////////////////////////////////////
0:     setFinish(TBaseHelper.rightSize(finish));
0:     return finish.array();
1:   }
1: 
0:   public ByteBuffer BufferForFinish() {
1:     return finish;
0:     setFinish(ByteBuffer.wrap(finish));
1:     return this;
1:   }
1: 
1:   public SliceRange setFinish(ByteBuffer finish) {
/////////////////////////////////////////////////////////////////////////
1:         setStart((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
1:         setFinish((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.start.equals(that.start))
/////////////////////////////////////////////////////////////////////////
1:       if (!this.finish.equals(that.finish))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetStart()) {
0:       lastComparison = TBaseHelper.compareTo(this.start, typedOther.start);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetFinish()) {
0:       lastComparison = TBaseHelper.compareTo(this.finish, typedOther.finish);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetReversed()) {
0:       lastComparison = TBaseHelper.compareTo(this.reversed, typedOther.reversed);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetCount()) {
0:       lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.start, sb);
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.finish, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_start = true && (isSetStart());
1:     builder.append(present_start);
1:     if (present_start)
1:       builder.append(start);
1: 
1:     boolean present_finish = true && (isSetFinish());
1:     builder.append(present_finish);
1:     if (present_finish)
1:       builder.append(finish);
1: 
1:     boolean present_reversed = true;
1:     builder.append(present_reversed);
1:     if (present_reversed)
1:       builder.append(reversed);
1: 
1:     boolean present_count = true;
1:     builder.append(present_count);
1:     if (present_count)
1:       builder.append(count);
1: 
1:     return builder.toHashCode();
commit:4fb3d18
/////////////////////////////////////////////////////////////////////////
1:  * @param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will
/////////////////////////////////////////////////////////////////////////
1:     COUNT((short)4, "count");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class SliceRange implements TBase<SliceRange, SliceRange._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // START
1:           return START;
1:         case 2: // FINISH
1:           return FINISH;
1:         case 3: // REVERSED
1:           return REVERSED;
1:         case 4: // COUNT
1:           return COUNT;
0:         case 5: // BITMASKS
0:           return BITMASKS;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.START, new FieldMetaData("start", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.FINISH, new FieldMetaData("finish", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.REVERSED, new FieldMetaData("reversed", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.BITMASKS, new FieldMetaData("bitmasks", TFieldRequirementType.OPTIONAL, 
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetStart()) {      lastComparison = TBaseHelper.compareTo(this.start, typedOther.start);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetFinish()) {      lastComparison = TBaseHelper.compareTo(this.finish, typedOther.finish);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetReversed()) {      lastComparison = TBaseHelper.compareTo(this.reversed, typedOther.reversed);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetBitmasks()) {      lastComparison = TBaseHelper.compareTo(this.bitmasks, typedOther.bitmasks);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:00bc8da
/////////////////////////////////////////////////////////////////////////
1:  *                must also be a valid value to the ColumnFamily Comparator.
commit:7d2115b
/////////////////////////////////////////////////////////////////////////
0:  * @param bitmasks. A list of OR-ed binary AND masks applied to the result set.
/////////////////////////////////////////////////////////////////////////
0:   private static final TField BITMASKS_FIELD_DESC = new TField("bitmasks", TType.LIST, (short)5);
0:   public List<byte[]> bitmasks;
0:     COUNT((short)4, "count"),
0:     BITMASKS((short)5, "bitmasks");
/////////////////////////////////////////////////////////////////////////
0:     put(_Fields.BITMASKS, new FieldMetaData("bitmasks", TFieldRequirementType.OPTIONAL, 
0:         new ListMetaData(TType.LIST, 
0:             new FieldValueMetaData(TType.STRING))));
/////////////////////////////////////////////////////////////////////////
0:     if (other.isSetBitmasks()) {
0:       List<byte[]> __this__bitmasks = new ArrayList<byte[]>();
0:       for (byte[] other_element : other.bitmasks) {
0:         byte[] temp_binary_element = new byte[other_element.length];
0:         System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
0:         __this__bitmasks.add(temp_binary_element);
1:       }
0:       this.bitmasks = __this__bitmasks;
1:     }
/////////////////////////////////////////////////////////////////////////
0:   public int getBitmasksSize() {
0:     return (this.bitmasks == null) ? 0 : this.bitmasks.size();
1:   }
1: 
0:   public java.util.Iterator<byte[]> getBitmasksIterator() {
0:     return (this.bitmasks == null) ? null : this.bitmasks.iterator();
1:   }
1: 
0:   public void addToBitmasks(byte[] elem) {
0:     if (this.bitmasks == null) {
0:       this.bitmasks = new ArrayList<byte[]>();
1:     }
0:     this.bitmasks.add(elem);
1:   }
1: 
0:   public List<byte[]> getBitmasks() {
0:     return this.bitmasks;
1:   }
1: 
0:   public SliceRange setBitmasks(List<byte[]> bitmasks) {
0:     this.bitmasks = bitmasks;
1:     return this;
1:   }
1: 
0:   public void unsetBitmasks() {
0:     this.bitmasks = null;
1:   }
1: 
0:   /** Returns true if field bitmasks is set (has been asigned a value) and false otherwise */
0:   public boolean isSetBitmasks() {
0:     return this.bitmasks != null;
1:   }
1: 
0:   public void setBitmasksIsSet(boolean value) {
1:     if (!value) {
0:       this.bitmasks = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     case BITMASKS:
1:       if (value == null) {
0:         unsetBitmasks();
1:       } else {
0:         setBitmasks((List<byte[]>)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
0:     case BITMASKS:
0:       return getBitmasks();
1: 
/////////////////////////////////////////////////////////////////////////
0:     case BITMASKS:
0:       return isSetBitmasks();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_bitmasks = true && this.isSetBitmasks();
0:     boolean that_present_bitmasks = true && that.isSetBitmasks();
0:     if (this_present_bitmasks || that_present_bitmasks) {
0:       if (!(this_present_bitmasks && that_present_bitmasks))
1:         return false;
0:       if (!this.bitmasks.equals(that.bitmasks))
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetBitmasks()).compareTo(typedOther.isSetBitmasks());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetBitmasks()) {      lastComparison = TBaseHelper.compareTo(bitmasks, typedOther.bitmasks);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:         case 5: // BITMASKS
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list4 = iprot.readListBegin();
0:               this.bitmasks = new ArrayList<byte[]>(_list4.size);
0:               for (int _i5 = 0; _i5 < _list4.size; ++_i5)
1:               {
0:                 byte[] _elem6;
0:                 _elem6 = iprot.readBinary();
0:                 this.bitmasks.add(_elem6);
1:               }
0:               iprot.readListEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (this.bitmasks != null) {
0:       if (isSetBitmasks()) {
0:         oprot.writeFieldBegin(BITMASKS_FIELD_DESC);
0:         {
0:           oprot.writeListBegin(new TList(TType.STRING, this.bitmasks.size()));
0:           for (byte[] _iter7 : this.bitmasks)
0:           {
0:             oprot.writeBinary(_iter7);
1:           }
0:           oprot.writeListEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetBitmasks()) {
1:       if (!first) sb.append(", ");
0:       sb.append("bitmasks:");
0:       if (this.bitmasks == null) {
1:         sb.append("null");
1:       } else {
0:         sb.append(this.bitmasks);
1:       }
1:       first = false;
1:     }
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
0:     if (isSetStart()) {      lastComparison = TBaseHelper.compareTo(start, typedOther.start);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(typedOther.isSetFinish());
0:     if (isSetFinish()) {      lastComparison = TBaseHelper.compareTo(finish, typedOther.finish);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(typedOther.isSetReversed());
0:     if (isSetReversed()) {      lastComparison = TBaseHelper.compareTo(reversed, typedOther.reversed);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(count, typedOther.count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // START
0:           if (field.type == TType.STRING) {
0:             this.start = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // FINISH
0:           if (field.type == TType.STRING) {
0:             this.finish = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // REVERSED
0:           if (field.type == TType.BOOL) {
0:             this.reversed = iprot.readBool();
1:             setReversedIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 4: // COUNT
0:           if (field.type == TType.I32) {
0:             this.count = iprot.readI32();
1:             setCountIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:53895ad
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:   public static final int START = 1;
0:   public static final int FINISH = 2;
0:   public static final int REVERSED = 3;
/////////////////////////////////////////////////////////////////////////
1:   public SliceRange deepCopy() {
1:     return new SliceRange(this);
1:   }
1: 
0:   @Deprecated
commit:ac921c4
/////////////////////////////////////////////////////////////////////////
0:     put(START, new FieldMetaData("start", TFieldRequirementType.REQUIRED, 
0:     put(FINISH, new FieldMetaData("finish", TFieldRequirementType.REQUIRED, 
0:     put(REVERSED, new FieldMetaData("reversed", TFieldRequirementType.REQUIRED, 
0:     put(COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
0:     if (!isSetReversed()) {
0:       throw new TProtocolException("Required field 'reversed' was not found in serialized data! Struct: " + toString());
1:     }
0:     if (!isSetCount()) {
0:       throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (start == null) {
0:       throw new TProtocolException("Required field 'start' was not present! Struct: " + toString());
1:     }
1:     if (finish == null) {
0:       throw new TProtocolException("Required field 'finish' was not present! Struct: " + toString());
1:     }
1:     // alas, we cannot check 'reversed' because it's a primitive and you chose the non-beans generator.
1:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
commit:59ec410
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0f56a25
/////////////////////////////////////////////////////////////////////////
1: import java.util.BitSet;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: public class SliceRange implements TBase, java.io.Serializable, Cloneable, Comparable<SliceRange> {
/////////////////////////////////////////////////////////////////////////
1:   // isset id assignments
1:   private static final int __REVERSED_ISSET_ID = 0;
1:   private static final int __COUNT_ISSET_ID = 1;
0:   private BitSet __isset_bit_vector = new BitSet(2);
/////////////////////////////////////////////////////////////////////////
1:     setReversedIsSet(true);
1:     setCountIsSet(true);
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     setReversedIsSet(true);
0:     __isset_bit_vector.clear(__REVERSED_ISSET_ID);
0:     return __isset_bit_vector.get(__REVERSED_ISSET_ID);
0:     __isset_bit_vector.set(__REVERSED_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
0:     setCountIsSet(true);
0:     __isset_bit_vector.clear(__COUNT_ISSET_ID);
0:     return __isset_bit_vector.get(__COUNT_ISSET_ID);
0:     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:   public int compareTo(SliceRange other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     SliceRange typedOther = (SliceRange)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetStart()).compareTo(isSetStart());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(start, typedOther.start);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetFinish()).compareTo(isSetFinish());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(finish, typedOther.finish);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(isSetReversed());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(reversed, typedOther.reversed);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(isSetCount());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(count, typedOther.count);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:             setReversedIsSet(true);
/////////////////////////////////////////////////////////////////////////
0:             setCountIsSet(true);
/////////////////////////////////////////////////////////////////////////
0:     if (!isSetReversed()) {
0:       throw new TProtocolException("Required field 'reversed' was not found in serialized data! Struct: " + toString());
1:     }
0:     if (!isSetCount()) {
0:       throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (start == null) {
0:       throw new TProtocolException("Required field 'start' was not present! Struct: " + toString());
1:     }
0:     if (finish == null) {
0:       throw new TProtocolException("Required field 'finish' was not present! Struct: " + toString());
1:     }
0:     // 'reversed' is only checked in read() because it's a primitive and you chose the non-beans generator.
0:     // 'count' is only checked in read() because it's a primitive and you chose the non-beans generator.
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
commit:6b7a1c3
/////////////////////////////////////////////////////////////////////////
0:   private static final TField REVERSED_FIELD_DESC = new TField("reversed", TType.BOOL, (short)3);
0:   public boolean reversed;
0:   public static final int REVERSED = 3;
0:     public boolean reversed = false;
/////////////////////////////////////////////////////////////////////////
0:     put(REVERSED, new FieldMetaData("reversed", TFieldRequirementType.DEFAULT, 
/////////////////////////////////////////////////////////////////////////
1:     this.reversed = false;
/////////////////////////////////////////////////////////////////////////
1:     boolean reversed,
1:     this.reversed = reversed;
0:     this.__isset.reversed = true;
/////////////////////////////////////////////////////////////////////////
0:     __isset.reversed = other.__isset.reversed;
1:     this.reversed = other.reversed;
/////////////////////////////////////////////////////////////////////////
1:   public boolean isReversed() {
1:     return this.reversed;
1:   public SliceRange setReversed(boolean reversed) {
1:     this.reversed = reversed;
0:     this.__isset.reversed = true;
1:   public void unsetReversed() {
0:     this.__isset.reversed = false;
0:   // Returns true if field reversed is set (has been asigned a value) and false otherwise
1:   public boolean isSetReversed() {
0:     return this.__isset.reversed;
1:   public void setReversedIsSet(boolean value) {
0:     this.__isset.reversed = value;
/////////////////////////////////////////////////////////////////////////
1:     case REVERSED:
1:         unsetReversed();
1:         setReversed((Boolean)value);
/////////////////////////////////////////////////////////////////////////
1:     case REVERSED:
0:       return new Boolean(isReversed());
/////////////////////////////////////////////////////////////////////////
1:     case REVERSED:
1:       return isSetReversed();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_reversed = true;
1:     boolean that_present_reversed = true;
1:     if (this_present_reversed || that_present_reversed) {
1:       if (!(this_present_reversed && that_present_reversed))
1:       if (this.reversed != that.reversed)
/////////////////////////////////////////////////////////////////////////
0:         case REVERSED:
0:             this.reversed = iprot.readBool();
0:             this.__isset.reversed = true;
/////////////////////////////////////////////////////////////////////////
1:     oprot.writeFieldBegin(REVERSED_FIELD_DESC);
0:     oprot.writeBool(this.reversed);
/////////////////////////////////////////////////////////////////////////
1:     sb.append("reversed:");
1:     sb.append(this.reversed);
commit:15354b4
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
0:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.Collections;
0: import org.apache.log4j.Logger;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class SliceRange implements TBase, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("SliceRange");
0:   private static final TField START_FIELD_DESC = new TField("start", TType.STRING, (short)1);
0:   private static final TField FINISH_FIELD_DESC = new TField("finish", TType.STRING, (short)2);
0:   private static final TField IS_ASCENDING_FIELD_DESC = new TField("is_ascending", TType.BOOL, (short)3);
0:   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)4);
1: 
0:   public byte[] start;
0:   public static final int START = 1;
0:   public byte[] finish;
0:   public static final int FINISH = 2;
0:   public boolean is_ascending;
0:   public static final int IS_ASCENDING = 3;
0:   public int count;
0:   public static final int COUNT = 4;
1: 
0:   private final Isset __isset = new Isset();
0:   private static final class Isset implements java.io.Serializable {
0:     public boolean is_ascending = false;
0:     public boolean count = false;
1:   }
1: 
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(START, new FieldMetaData("start", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(FINISH, new FieldMetaData("finish", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(IS_ASCENDING, new FieldMetaData("is_ascending", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.BOOL)));
0:     put(COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.I32)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(SliceRange.class, metaDataMap);
1:   }
1: 
1:   public SliceRange() {
0:     this.is_ascending = true;
1: 
1:     this.count = 100;
1: 
1:   }
1: 
1:   public SliceRange(
0:     byte[] start,
0:     byte[] finish,
0:     boolean is_ascending,
1:     int count)
0:   {
1:     this();
1:     this.start = start;
1:     this.finish = finish;
0:     this.is_ascending = is_ascending;
0:     this.__isset.is_ascending = true;
1:     this.count = count;
0:     this.__isset.count = true;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public SliceRange(SliceRange other) {
1:     if (other.isSetStart()) {
0:       this.start = new byte[other.start.length];
0:       System.arraycopy(other.start, 0, start, 0, other.start.length);
1:     }
1:     if (other.isSetFinish()) {
0:       this.finish = new byte[other.finish.length];
0:       System.arraycopy(other.finish, 0, finish, 0, other.finish.length);
1:     }
0:     __isset.is_ascending = other.__isset.is_ascending;
0:     this.is_ascending = other.is_ascending;
0:     __isset.count = other.__isset.count;
1:     this.count = other.count;
1:   }
1: 
1:   @Override
0:   public SliceRange clone() {
0:     return new SliceRange(this);
1:   }
1: 
1:   public byte[] getStart() {
0:     return this.start;
1:   }
1: 
0:   public void setStart(byte[] start) {
1:     this.start = start;
1:   }
1: 
1:   public void unsetStart() {
1:     this.start = null;
1:   }
1: 
0:   // Returns true if field start is set (has been asigned a value) and false otherwise
1:   public boolean isSetStart() {
1:     return this.start != null;
1:   }
1: 
1:   public void setStartIsSet(boolean value) {
1:     if (!value) {
1:       this.start = null;
1:     }
1:   }
1: 
1:   public byte[] getFinish() {
0:     return this.finish;
1:   }
1: 
0:   public void setFinish(byte[] finish) {
1:     this.finish = finish;
1:   }
1: 
1:   public void unsetFinish() {
1:     this.finish = null;
1:   }
1: 
0:   // Returns true if field finish is set (has been asigned a value) and false otherwise
1:   public boolean isSetFinish() {
1:     return this.finish != null;
1:   }
1: 
1:   public void setFinishIsSet(boolean value) {
1:     if (!value) {
1:       this.finish = null;
1:     }
1:   }
1: 
0:   public boolean isIs_ascending() {
0:     return this.is_ascending;
1:   }
1: 
0:   public void setIs_ascending(boolean is_ascending) {
0:     this.is_ascending = is_ascending;
0:     this.__isset.is_ascending = true;
1:   }
1: 
0:   public void unsetIs_ascending() {
0:     this.__isset.is_ascending = false;
1:   }
1: 
0:   // Returns true if field is_ascending is set (has been asigned a value) and false otherwise
0:   public boolean isSetIs_ascending() {
0:     return this.__isset.is_ascending;
1:   }
1: 
0:   public void setIs_ascendingIsSet(boolean value) {
0:     this.__isset.is_ascending = value;
1:   }
1: 
1:   public int getCount() {
1:     return this.count;
1:   }
1: 
0:   public void setCount(int count) {
1:     this.count = count;
0:     this.__isset.count = true;
1:   }
1: 
1:   public void unsetCount() {
0:     this.__isset.count = false;
1:   }
1: 
0:   // Returns true if field count is set (has been asigned a value) and false otherwise
1:   public boolean isSetCount() {
0:     return this.__isset.count;
1:   }
1: 
1:   public void setCountIsSet(boolean value) {
0:     this.__isset.count = value;
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
1:     case START:
1:       if (value == null) {
1:         unsetStart();
1:       } else {
0:         setStart((byte[])value);
1:       }
1:       break;
1: 
1:     case FINISH:
1:       if (value == null) {
1:         unsetFinish();
1:       } else {
0:         setFinish((byte[])value);
1:       }
1:       break;
1: 
0:     case IS_ASCENDING:
1:       if (value == null) {
0:         unsetIs_ascending();
1:       } else {
0:         setIs_ascending((Boolean)value);
1:       }
1:       break;
1: 
1:     case COUNT:
1:       if (value == null) {
1:         unsetCount();
1:       } else {
1:         setCount((Integer)value);
1:       }
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
1:     case START:
1:       return getStart();
1: 
1:     case FINISH:
1:       return getFinish();
1: 
0:     case IS_ASCENDING:
0:       return new Boolean(isIs_ascending());
1: 
1:     case COUNT:
0:       return new Integer(getCount());
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
1:     case START:
1:       return isSetStart();
1:     case FINISH:
1:       return isSetFinish();
0:     case IS_ASCENDING:
0:       return isSetIs_ascending();
1:     case COUNT:
1:       return isSetCount();
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof SliceRange)
1:       return this.equals((SliceRange)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(SliceRange that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_start = true && this.isSetStart();
1:     boolean that_present_start = true && that.isSetStart();
1:     if (this_present_start || that_present_start) {
1:       if (!(this_present_start && that_present_start))
1:         return false;
0:       if (!java.util.Arrays.equals(this.start, that.start))
1:         return false;
1:     }
1: 
1:     boolean this_present_finish = true && this.isSetFinish();
1:     boolean that_present_finish = true && that.isSetFinish();
1:     if (this_present_finish || that_present_finish) {
1:       if (!(this_present_finish && that_present_finish))
1:         return false;
0:       if (!java.util.Arrays.equals(this.finish, that.finish))
1:         return false;
1:     }
1: 
0:     boolean this_present_is_ascending = true;
0:     boolean that_present_is_ascending = true;
0:     if (this_present_is_ascending || that_present_is_ascending) {
0:       if (!(this_present_is_ascending && that_present_is_ascending))
1:         return false;
0:       if (this.is_ascending != that.is_ascending)
1:         return false;
1:     }
1: 
1:     boolean this_present_count = true;
1:     boolean that_present_count = true;
1:     if (this_present_count || that_present_count) {
1:       if (!(this_present_count && that_present_count))
1:         return false;
1:       if (this.count != that.count)
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
0:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
0:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id)
0:       {
1:         case START:
0:           if (field.type == TType.STRING) {
0:             this.start = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case FINISH:
0:           if (field.type == TType.STRING) {
0:             this.finish = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         case IS_ASCENDING:
0:           if (field.type == TType.BOOL) {
0:             this.is_ascending = iprot.readBool();
0:             this.__isset.is_ascending = true;
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case COUNT:
0:           if (field.type == TType.I32) {
0:             this.count = iprot.readI32();
0:             this.__isset.count = true;
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:           break;
1:       }
0:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.start != null) {
1:       oprot.writeFieldBegin(START_FIELD_DESC);
0:       oprot.writeBinary(this.start);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.finish != null) {
1:       oprot.writeFieldBegin(FINISH_FIELD_DESC);
0:       oprot.writeBinary(this.finish);
1:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldBegin(IS_ASCENDING_FIELD_DESC);
0:     oprot.writeBool(this.is_ascending);
1:     oprot.writeFieldEnd();
1:     oprot.writeFieldBegin(COUNT_FIELD_DESC);
0:     oprot.writeI32(this.count);
1:     oprot.writeFieldEnd();
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("SliceRange(");
1:     boolean first = true;
1: 
1:     sb.append("start:");
1:     if (this.start == null) {
1:       sb.append("null");
1:     } else {
0:         int __start_size = Math.min(this.start.length, 128);
0:         for (int i = 0; i < __start_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.start[i]).length() > 1 ? Integer.toHexString(this.start[i]).substring(Integer.toHexString(this.start[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.start[i]).toUpperCase());
1:         }
0:         if (this.start.length > 128) sb.append(" ...");
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("finish:");
1:     if (this.finish == null) {
1:       sb.append("null");
1:     } else {
0:         int __finish_size = Math.min(this.finish.length, 128);
0:         for (int i = 0; i < __finish_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.finish[i]).length() > 1 ? Integer.toHexString(this.finish[i]).substring(Integer.toHexString(this.finish[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.finish[i]).toUpperCase());
1:         }
0:         if (this.finish.length > 128) sb.append(" ...");
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
0:     sb.append("is_ascending:");
0:     sb.append(this.is_ascending);
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("count:");
1:     sb.append(this.count);
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
0:     // check that fields of type enum have valid values
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new SliceRangeStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new SliceRangeTupleSchemeFactory());
0:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVERSED_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class SliceRangeStandardSchemeFactory implements SchemeFactory {
1:     public SliceRangeStandardScheme getScheme() {
1:       return new SliceRangeStandardScheme();
0:     }
0:   }
1: 
1:   private static class SliceRangeStandardScheme extends StandardScheme<SliceRange> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, SliceRange struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
0:         }
1:         switch (schemeField.id) {
0:           case 1: // START
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.start = iprot.readBinary();
1:               struct.setStartIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 2: // FINISH
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.finish = iprot.readBinary();
1:               struct.setFinishIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 3: // REVERSED
1:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:               struct.reversed = iprot.readBool();
1:               struct.setReversedIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 4: // COUNT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.count = iprot.readI32();
1:               struct.setCountIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:         }
0:         iprot.readFieldEnd();
0:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetReversed()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'reversed' was not found in serialized data! Struct: " + toString());
0:       }
1:       if (!struct.isSetCount()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
0:       }
1:       struct.validate();
0:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, SliceRange struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.start != null) {
0:         oprot.writeFieldBegin(START_FIELD_DESC);
1:         oprot.writeBinary(struct.start);
0:         oprot.writeFieldEnd();
0:       }
1:       if (struct.finish != null) {
0:         oprot.writeFieldBegin(FINISH_FIELD_DESC);
1:         oprot.writeBinary(struct.finish);
0:         oprot.writeFieldEnd();
0:       }
0:       oprot.writeFieldBegin(REVERSED_FIELD_DESC);
1:       oprot.writeBool(struct.reversed);
0:       oprot.writeFieldEnd();
0:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:       oprot.writeI32(struct.count);
0:       oprot.writeFieldEnd();
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
0:     }
1: 
0:   }
1: 
1:   private static class SliceRangeTupleSchemeFactory implements SchemeFactory {
1:     public SliceRangeTupleScheme getScheme() {
1:       return new SliceRangeTupleScheme();
0:     }
0:   }
1: 
1:   private static class SliceRangeTupleScheme extends TupleScheme<SliceRange> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, SliceRange struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.start);
1:       oprot.writeBinary(struct.finish);
1:       oprot.writeBool(struct.reversed);
1:       oprot.writeI32(struct.count);
0:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, SliceRange struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.start = iprot.readBinary();
1:       struct.setStartIsSet(true);
1:       struct.finish = iprot.readBinary();
1:       struct.setFinishIsSet(true);
1:       struct.reversed = iprot.readBool();
1:       struct.setReversedIsSet(true);
1:       struct.count = iprot.readI32();
1:       struct.setCountIsSet(true);
0:     }
0:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer start; // required
1:   public ByteBuffer finish; // required
1:   public boolean reversed; // required
1:   public int count; // required
/////////////////////////////////////////////////////////////////////////
1:       return Boolean.valueOf(isReversed());
1:       return Integer.valueOf(getCount());
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class SliceRange implements org.apache.thrift.TBase<SliceRange, SliceRange._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SliceRange");
1:   private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField REVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("reversed", org.apache.thrift.protocol.TType.BOOL, (short)3);
1:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
/////////////////////////////////////////////////////////////////////////
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.REVERSED, new org.apache.thrift.meta_data.FieldMetaData("reversed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SliceRange.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.start = org.apache.thrift.TBaseHelper.copyBinary(other.start);
1:       this.finish = org.apache.thrift.TBaseHelper.copyBinary(other.finish);
/////////////////////////////////////////////////////////////////////////
1:     setStart(org.apache.thrift.TBaseHelper.rightSize(start));
1:     return start == null ? null : start.array();
1:   public ByteBuffer bufferForStart() {
1:     setStart(start == null ? (ByteBuffer)null : ByteBuffer.wrap(start));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field start is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:     setFinish(org.apache.thrift.TBaseHelper.rightSize(finish));
1:     return finish == null ? null : finish.array();
1:   public ByteBuffer bufferForFinish() {
1:     setFinish(finish == null ? (ByteBuffer)null : ByteBuffer.wrap(finish));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field finish is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field reversed is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, typedOther.finish);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, typedOther.reversed);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.BOOL) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'reversed' was not found in serialized data! Struct: " + toString());
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.start, sb);
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.finish, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'start' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'finish' was not present! Struct: " + toString());
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class SliceRange implements TBase<SliceRange._Fields>, java.io.Serializable, Cloneable, Comparable<SliceRange> {
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     START((short)1, "start"),
1:     FINISH((short)2, "finish"),
1:     REVERSED((short)3, "reversed"),
0:     COUNT((short)4, "count");
0: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
0:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
0: 
1:     private final short _thriftId;
1:     private final String _fieldName;
0: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
0: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
0: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.START, new FieldMetaData("start", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.FINISH, new FieldMetaData("finish", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.REVERSED, new FieldMetaData("reversed", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field start is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field finish is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field reversed is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field count is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
0: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
1:     throw new IllegalStateException();
0:   }
0: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case START:
0:             if (field.type == TType.STRING) {
0:               this.start = iprot.readBinary();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case FINISH:
0:             if (field.type == TType.STRING) {
0:               this.finish = iprot.readBinary();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case REVERSED:
0:             if (field.type == TType.BOOL) {
0:               this.reversed = iprot.readBool();
0:               setReversedIsSet(true);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case COUNT:
0:             if (field.type == TType.I32) {
0:               this.count = iprot.readI32();
0:               setCountIsSet(true);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
commit:4e8691a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * A slice range is a structure that stores basic range, ordering and limit information for a query that will return
1:  * multiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY
0:  * 
1:  * @param start. The column name to start the slice with. This attribute is not required, though there is no default value,
1:  *               and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it
1:  *               must a valid value under the rules of the Comparator defined for the given ColumnFamily.
1:  * @param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,
1:  *                and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
0:  *                must also be a value value to the ColumnFamily Comparator.
1:  * @param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
0:  * @param count. How many keys to return. Similar to LIMIT 100 in SQL. May be arbitrarily large, but Thrift will
1:  *               materialize the whole result into memory before returning it to the client, so be aware that you may
1:  *               be better served by iterating through slices by passing the last value of one call in as the 'start'
1:  *               of the next instead of increasing 'count' arbitrarily large.
0:  */
commit:8455ebf
/////////////////////////////////////////////////////////////////////////
1:   public SliceRange setStart(byte[] start) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
1:   public SliceRange setFinish(byte[] finish) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
0:   public SliceRange setIs_ascending(boolean is_ascending) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
1:   public SliceRange setCount(int count) {
0:     return this;
============================================================================