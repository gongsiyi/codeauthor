1:14afcc7: package org.apache.cassandra.tools;
1:fdf2959: /*
1:68d2526:  *
1:fdf2959:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf2959:  * or more contributor license agreements.  See the NOTICE file
1:fdf2959:  * distributed with this work for additional information
1:fdf2959:  * regarding copyright ownership.  The ASF licenses this file
1:fdf2959:  * to you under the Apache License, Version 2.0 (the
1:fdf2959:  * "License"); you may not use this file except in compliance
1:fdf2959:  * with the License.  You may obtain a copy of the License at
1:68d2526:  *
1:fdf2959:  *   http://www.apache.org/licenses/LICENSE-2.0
1:68d2526:  *
1:fdf2959:  * Unless required by applicable law or agreed to in writing,
1:fdf2959:  * software distributed under the License is distributed on an
1:fdf2959:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf2959:  * KIND, either express or implied.  See the License for the
1:fdf2959:  * specific language governing permissions and limitations
1:fdf2959:  * under the License.
1:68d2526:  *
1:fdf2959:  */
1:fdf2959: 
3:14afcc7: 
1:14afcc7: import java.io.Closeable;
1:14afcc7: import java.io.IOException;
1:14afcc7: import java.io.PrintStream;
1:14afcc7: import java.util.HashMap;
1:14afcc7: import java.util.Map;
1:14afcc7: 
1:14afcc7: import javax.management.MBeanServerConnection;
1:14afcc7: import javax.management.remote.JMXConnector;
1:14afcc7: import javax.management.remote.JMXConnectorFactory;
1:14afcc7: import javax.management.remote.JMXServiceURL;
1:14afcc7: 
1:14afcc7: import org.apache.commons.cli.CommandLine;
1:14afcc7: import org.apache.commons.cli.CommandLineParser;
1:14afcc7: import org.apache.commons.cli.Option;
1:14afcc7: import org.apache.commons.cli.Options;
1:14afcc7: import org.apache.commons.cli.ParseException;
1:14afcc7: import org.apache.commons.cli.PosixParser;
1:14afcc7: 
1:14afcc7: public abstract class AbstractJmxClient implements Closeable
2:14afcc7: {
1:14afcc7:     private static final Options options = new Options();
1:14afcc7:     protected static final int DEFAULT_JMX_PORT = 7199;
1:14afcc7:     protected static final String DEFAULT_HOST = "localhost";
1:14afcc7: 
1:14afcc7:     protected final String host;
1:14afcc7:     protected final int port;
1:fe89390:     protected final String username;
1:fe89390:     protected final String password;
1:14afcc7:     protected JMXConnection jmxConn;
1:14afcc7:     protected PrintStream out = System.out;
1:14afcc7: 
1:14afcc7:     static
1:14afcc7:     {
1:14afcc7:         options.addOption("h", "host", true,  "JMX hostname or IP address (Default: localhost)");
1:14afcc7:         options.addOption("p", "port", true,  "JMX port number (Default: 7199)");
1:fe89390:         options.addOption("u", "username", true,  "JMX username");
1:fe89390:         options.addOption("pw", "password", true,  "JMX password");
1:14afcc7:         options.addOption("H", "help", false, "Print help information");
2:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public AbstractJmxClient(String host, Integer port, String username, String password) throws IOException
1:14afcc7:     {
1:14afcc7:         this.host = (host != null) ? host : DEFAULT_HOST;
1:14afcc7:         this.port = (port != null) ? port : DEFAULT_JMX_PORT;
1:fe89390:         this.username = username;
1:fe89390:         this.password = password;
1:14afcc7:         jmxConn = new JMXConnection(this.host, this.port, username, password);
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void close() throws IOException
1:14afcc7:     {
1:14afcc7:         jmxConn.close();
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void writeln(Throwable err)
1:14afcc7:     {
1:14afcc7:         writeln(err.getMessage());
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void writeln(String msg)
1:14afcc7:     {
1:14afcc7:         out.println(msg);
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void write(String msg)
1:14afcc7:     {
1:14afcc7:         out.print(msg);
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void writeln(String format, Object...args)
1:14afcc7:     {
1:14afcc7:         write(format + "%n", args);
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void write(String format, Object...args)
1:14afcc7:     {
1:14afcc7:         out.printf(format, args);
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void setOutput(PrintStream out)
1:14afcc7:     {
1:14afcc7:         this.out = out;
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public static CommandLine processArguments(String[] args) throws ParseException
1:14afcc7:     {
1:14afcc7:         CommandLineParser parser = new PosixParser();
1:14afcc7:         return parser.parse(options, args);
1:14afcc7:     }
1:68d2526: 
1:14afcc7:     public static void addCmdOption(String shortOpt, String longOpt, boolean hasArg, String description)
1:14afcc7:     {
1:14afcc7:         options.addOption(shortOpt, longOpt, hasArg, description);
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public static void printHelp(String synopsis, String header)
1:14afcc7:     {
1:14afcc7:         System.out.printf("Usage: %s%n%n", synopsis);
1:14afcc7:         System.out.print(header);
1:14afcc7:         System.out.println("Options:");
1:14afcc7:         for (Object opt : options.getOptions())
1:14afcc7:         {
1:14afcc7:             String shortOpt = String.format("%s,", ((Option)opt).getOpt());
1:14afcc7:             String longOpt = ((Option)opt).getLongOpt();
1:14afcc7:             String description = ((Option)opt).getDescription();
1:14afcc7:             System.out.printf(" -%-4s --%-17s %s%n", shortOpt, longOpt, description);
1:14afcc7:         }
1:14afcc7:     }
1:14afcc7: }
1:14afcc7: 
1:14afcc7: class JMXConnection
1:14afcc7: {
1:14afcc7:     private static final String FMT_URL = "service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi";
1:14afcc7:     private final String host, username, password;
1:14afcc7:     private final int port;
1:14afcc7:     private JMXConnector jmxc;
1:14afcc7:     private MBeanServerConnection mbeanServerConn;
1:14afcc7: 
1:14afcc7:     JMXConnection(String host, int port, String username, String password) throws IOException
1:14afcc7:     {
1:14afcc7:         this.host = host;
1:14afcc7:         this.port = port;
1:14afcc7:         this.username = username;
1:14afcc7:         this.password = password;
1:14afcc7:         connect();
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     private void connect() throws IOException
1:14afcc7:     {
1:14afcc7:         JMXServiceURL jmxUrl = new JMXServiceURL(String.format(FMT_URL, host, port));
1:14afcc7:         Map<String, Object> env = new HashMap<String, Object>();
1:14afcc7: 
1:14afcc7:         if (username != null)
1:14afcc7:             env.put(JMXConnector.CREDENTIALS, new String[]{ username, password });
1:14afcc7: 
1:14afcc7:         jmxc = JMXConnectorFactory.connect(jmxUrl, env);
1:14afcc7:         mbeanServerConn = jmxc.getMBeanServerConnection();
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public void close() throws IOException
1:14afcc7:     {
1:14afcc7:         jmxc.close();
1:14afcc7:     }
1:14afcc7: 
1:14afcc7:     public MBeanServerConnection getMbeanServerConn()
1:14afcc7:     {
1:14afcc7:         return mbeanServerConn;
1:14afcc7:     }
1:14afcc7: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
commit:fe89390
/////////////////////////////////////////////////////////////////////////
1:     protected final String username;
1:     protected final String password;
/////////////////////////////////////////////////////////////////////////
1:         options.addOption("u", "username", true,  "JMX username");
1:         options.addOption("pw", "password", true,  "JMX password");
/////////////////////////////////////////////////////////////////////////
1:         this.username = username;
1:         this.password = password;
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:fdf2959
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:14afcc7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.tools;
1: 
1: import java.io.Closeable;
1: import java.io.IOException;
1: import java.io.PrintStream;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.MBeanServerConnection;
1: import javax.management.remote.JMXConnector;
1: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.remote.JMXServiceURL;
1: 
1: import org.apache.commons.cli.CommandLine;
1: import org.apache.commons.cli.CommandLineParser;
1: import org.apache.commons.cli.Option;
1: import org.apache.commons.cli.Options;
1: import org.apache.commons.cli.ParseException;
1: import org.apache.commons.cli.PosixParser;
1: 
1: public abstract class AbstractJmxClient implements Closeable
1: {
1:     private static final Options options = new Options();
1:     protected static final int DEFAULT_JMX_PORT = 7199;
1:     protected static final String DEFAULT_HOST = "localhost";
1: 
1:     protected final String host;
1:     protected final int port;
1:     protected JMXConnection jmxConn;
1:     protected PrintStream out = System.out;
1: 
1:     static
1:     {
1:         options.addOption("h", "host", true,  "JMX hostname or IP address (Default: localhost)");
1:         options.addOption("p", "port", true,  "JMX port number (Default: 7199)");
1:         options.addOption("H", "help", false, "Print help information");
1:     }
1: 
1:     public AbstractJmxClient(String host, Integer port, String username, String password) throws IOException
1:     {
1:         this.host = (host != null) ? host : DEFAULT_HOST;
1:         this.port = (port != null) ? port : DEFAULT_JMX_PORT;
1:         jmxConn = new JMXConnection(this.host, this.port, username, password);
1:     }
1: 
1:     public void close() throws IOException
1:     {
1:         jmxConn.close();
1:     }
1: 
1:     public void writeln(Throwable err)
1:     {
1:         writeln(err.getMessage());
1:     }
1: 
1:     public void writeln(String msg)
1:     {
1:         out.println(msg);
1:     }
1: 
1:     public void write(String msg)
1:     {
1:         out.print(msg);
1:     }
1: 
1:     public void writeln(String format, Object...args)
1:     {
1:         write(format + "%n", args);
1:     }
1: 
1:     public void write(String format, Object...args)
1:     {
1:         out.printf(format, args);
1:     }
1: 
1:     public void setOutput(PrintStream out)
1:     {
1:         this.out = out;
1:     }
1: 
1:     public static CommandLine processArguments(String[] args) throws ParseException
1:     {
1:         CommandLineParser parser = new PosixParser();
1:         return parser.parse(options, args);
1:     }
1:     
1:     public static void addCmdOption(String shortOpt, String longOpt, boolean hasArg, String description)
1:     {
1:         options.addOption(shortOpt, longOpt, hasArg, description);
1:     }
1: 
1:     public static void printHelp(String synopsis, String header)
1:     {
1:         System.out.printf("Usage: %s%n%n", synopsis);
1:         System.out.print(header);
1:         System.out.println("Options:");
1:         for (Object opt : options.getOptions())
1:         {
1:             String shortOpt = String.format("%s,", ((Option)opt).getOpt());
1:             String longOpt = ((Option)opt).getLongOpt();
1:             String description = ((Option)opt).getDescription();
1:             System.out.printf(" -%-4s --%-17s %s%n", shortOpt, longOpt, description);
1:         }
1:     }
1: }
1: 
1: class JMXConnection
1: {
1:     private static final String FMT_URL = "service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi";
1:     private final String host, username, password;
1:     private final int port;
1:     private JMXConnector jmxc;
1:     private MBeanServerConnection mbeanServerConn;
1: 
0:     JMXConnection(String host, int port) throws IOException
1:     {
0:         this(host, port, null, null);
1:     }
1: 
1:     JMXConnection(String host, int port, String username, String password) throws IOException
1:     {
1:         this.host = host;
1:         this.port = port;
1:         this.username = username;
1:         this.password = password;
1:         connect();
1:     }
1: 
1:     private void connect() throws IOException
1:     {
1:         JMXServiceURL jmxUrl = new JMXServiceURL(String.format(FMT_URL, host, port));
1:         Map<String, Object> env = new HashMap<String, Object>();
1: 
1:         if (username != null)
1:             env.put(JMXConnector.CREDENTIALS, new String[]{ username, password });
1: 
1:         jmxc = JMXConnectorFactory.connect(jmxUrl, env);
1:         mbeanServerConn = jmxc.getMBeanServerConnection();
1:     }
1: 
1:     public void close() throws IOException
1:     {
1:         jmxc.close();
1:     }
1: 
1:     public MBeanServerConnection getMbeanServerConn()
1:     {
1:         return mbeanServerConn;
1:     }
1: }
============================================================================