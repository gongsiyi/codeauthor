1:522d0dd: /**
1:522d0dd:  * Licensed to the Apache Software Foundation (ASF) under one
1:522d0dd:  * or more contributor license agreements.  See the NOTICE file
1:522d0dd:  * distributed with this work for additional information
1:522d0dd:  * regarding copyright ownership.  The ASF licenses this file
1:522d0dd:  * to you under the Apache License, Version 2.0 (the
1:522d0dd:  * "License"); you may not use this file except in compliance
1:522d0dd:  * with the License.  You may obtain a copy of the License at
1:522d0dd:  *
1:522d0dd:  *    http://www.apache.org/licenses/LICENSE-2.0
1:522d0dd:  *
1:522d0dd:  * Unless required by applicable law or agreed to in writing,
1:522d0dd:  * software distributed under the License is distributed on an
1:522d0dd:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:522d0dd:  * KIND, either express or implied.  See the License for the
1:522d0dd:  * specific language governing permissions and limitations
1:522d0dd:  * under the License.
1:522d0dd:  */
1:522d0dd: package org.apache.cassandra.db.marshal;
2:522d0dd: 
1:9797511: import org.junit.BeforeClass;
1:522d0dd: import org.junit.Test;
1:6aa7d6c: 
1:6aa7d6c: import static org.junit.Assert.assertSame;
1:522d0dd: import static org.junit.Assert.fail;
1:522d0dd: 
1:6aa7d6c: import org.apache.cassandra.config.DatabaseDescriptor;
1:6aa7d6c: import org.apache.cassandra.dht.*;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:3a2faf9: import org.apache.cassandra.exceptions.SyntaxException;
1:522d0dd: 
1:522d0dd: public class TypeParserTest
1:522d0dd: {
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:522d0dd:     @Test
1:3a2faf9:     public void testParse() throws ConfigurationException, SyntaxException
1:522d0dd:     {
1:6aa7d6c:         AbstractType<?> type;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse(null);
1:522d0dd:         assert type == BytesType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("");
1:522d0dd:         assert type == BytesType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("    ");
1:522d0dd:         assert type == BytesType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("LongType");
1:522d0dd:         assert type == LongType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("  LongType   ");
1:522d0dd:         assert type == LongType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("LongType()");
1:522d0dd:         assert type == LongType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("LongType(reversed=false)");
1:522d0dd:         assert type == LongType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("LongType(reversed=true)");
1:522d0dd:         assert type == ReversedType.getInstance(LongType.instance);
1:6aa7d6c:         assert ((ReversedType<?>)type).baseType == LongType.instance;
1:522d0dd: 
1:522d0dd:         type = TypeParser.parse("LongType(reversed)");
1:522d0dd:         assert type == ReversedType.getInstance(LongType.instance);
1:6aa7d6c:         assert ((ReversedType<?>)type).baseType == LongType.instance;
1:522d0dd:     }
1:522d0dd: 
1:522d0dd:     @Test
1:3a2faf9:     public void testParseError()
1:522d0dd:     {
1:522d0dd:         try
1:522d0dd:         {
1:522d0dd:             TypeParser.parse("y");
1:522d0dd:             fail("Should not pass");
1:522d0dd:         }
1:a991b64:         catch (ConfigurationException e) {}
1:a991b64:         catch (SyntaxException e) {}
1:6aa7d6c: 
1:522d0dd:         try
1:522d0dd:         {
1:522d0dd:             TypeParser.parse("LongType(reversed@)");
1:522d0dd:             fail("Should not pass");
1:522d0dd:         }
1:a991b64:         catch (ConfigurationException e) {}
1:a991b64:         catch (SyntaxException e) {}
1:522d0dd:     }
1:522d0dd: 
1:6aa7d6c:     @Test
1:6aa7d6c:     public void testParsePartitionerOrder() throws ConfigurationException, SyntaxException
1:6aa7d6c:     {
1:6aa7d6c:         for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
1:6aa7d6c:                                                             ByteOrderedPartitioner.instance,
1:6aa7d6c:                                                             RandomPartitioner.instance,
1:6aa7d6c:                                                             OrderPreservingPartitioner.instance })
1:6aa7d6c:         {
1:6aa7d6c:             AbstractType<?> type = partitioner.partitionOrdering();
1:6aa7d6c:             assertSame(type, TypeParser.parse(type.toString()));
1:6aa7d6c:         }
1:6aa7d6c:         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse("PartitionerDefinedOrder"));
1:6aa7d6c:     }
1:522d0dd: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:6aa7d6c
/////////////////////////////////////////////////////////////////////////
1: 
1: import static org.junit.Assert.assertSame;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.dht.*;
/////////////////////////////////////////////////////////////////////////
1:         AbstractType<?> type;
/////////////////////////////////////////////////////////////////////////
1:         assert ((ReversedType<?>)type).baseType == LongType.instance;
1:         assert ((ReversedType<?>)type).baseType == LongType.instance;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testParsePartitionerOrder() throws ConfigurationException, SyntaxException
1:     {
1:         for (IPartitioner partitioner: new IPartitioner[] { Murmur3Partitioner.instance,
1:                                                             ByteOrderedPartitioner.instance,
1:                                                             RandomPartitioner.instance,
1:                                                             OrderPreservingPartitioner.instance })
1:         {
1:             AbstractType<?> type = partitioner.partitionOrdering();
1:             assertSame(type, TypeParser.parse(type.toString()));
1:         }
1:         assertSame(DatabaseDescriptor.getPartitioner().partitionOrdering(), TypeParser.parse("PartitionerDefinedOrder"));
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         catch (ConfigurationException e) {}
1:         catch (SyntaxException e) {}
1:         catch (ConfigurationException e) {}
1:         catch (SyntaxException e) {}
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.SyntaxException;
1:     public void testParse() throws ConfigurationException, SyntaxException
/////////////////////////////////////////////////////////////////////////
1:     public void testParseError()
/////////////////////////////////////////////////////////////////////////
0:         catch (SyntaxException e) {}
/////////////////////////////////////////////////////////////////////////
0:         catch (SyntaxException e) {}
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:522d0dd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.Iterator;
0: import java.util.HashMap;
0: import java.util.Map;
0: import java.util.UUID;
1: 
1: import org.junit.Test;
1: import static org.junit.Assert.fail;
1: 
0: import org.apache.cassandra.CleanupHelper;
0: import org.apache.cassandra.Util;
0: import org.apache.cassandra.config.ConfigurationException;
0: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.columniterator.IdentityQueryFilter;
0: import org.apache.cassandra.db.filter.QueryFilter;
0: import org.apache.cassandra.db.filter.QueryPath;
0: import org.apache.cassandra.utils.*;
1: 
1: public class TypeParserTest
1: {
1:     @Test
0:     public void testParse() throws ConfigurationException
1:     {
0:         AbstractType type;
1: 
1:         type = TypeParser.parse(null);
1:         assert type == BytesType.instance;
1: 
1:         type = TypeParser.parse("");
1:         assert type == BytesType.instance;
1: 
1:         type = TypeParser.parse("    ");
1:         assert type == BytesType.instance;
1: 
1:         type = TypeParser.parse("LongType");
1:         assert type == LongType.instance;
1: 
1:         type = TypeParser.parse("  LongType   ");
1:         assert type == LongType.instance;
1: 
1:         type = TypeParser.parse("LongType()");
1:         assert type == LongType.instance;
1: 
1:         type = TypeParser.parse("LongType(reversed=false)");
1:         assert type == LongType.instance;
1: 
1:         type = TypeParser.parse("LongType(reversed=true)");
1:         assert type == ReversedType.getInstance(LongType.instance);
0:         assert ((ReversedType)type).baseType == LongType.instance;
1: 
1:         type = TypeParser.parse("LongType(reversed)");
1:         assert type == ReversedType.getInstance(LongType.instance);
0:         assert ((ReversedType)type).baseType == LongType.instance;
1:     }
1: 
1:     @Test
0:     public void testParseError() throws ConfigurationException
1:     {
1:         try
1:         {
1:             TypeParser.parse("y");
1:             fail("Should not pass");
1:         }
0:         catch (ConfigurationException e) {}
1: 
1:         try
1:         {
1:             TypeParser.parse("LongType(reversed@)");
1:             fail("Should not pass");
1:         }
0:         catch (ConfigurationException e) {}
1:     }
1: }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:35a945e
/////////////////////////////////////////////////////////////////////////
0:         type = TypeParser.parse("ByteType");
0:         assert type == ByteType.instance;
0: 
0:         type = TypeParser.parse("ShortType");
0:         assert type == ShortType.instance;
0: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:01880a4
/////////////////////////////////////////////////////////////////////////
0:         catch (ConfigurationException | SyntaxException e) {}
0:         catch (ConfigurationException | SyntaxException e) {}
============================================================================