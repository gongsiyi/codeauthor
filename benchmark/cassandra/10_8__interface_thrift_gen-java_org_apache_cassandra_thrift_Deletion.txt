1:beba91e: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
5:beba91e:  *
1:beba91e:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:beba91e:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:beba91e: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:beba91e: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:beba91e: import java.util.List;
1:beba91e: import java.util.ArrayList;
1:beba91e: import java.util.Map;
1:beba91e: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:beba91e: import java.util.Set;
1:beba91e: import java.util.HashSet;
1:04d5ec3: import java.util.EnumSet;
1:beba91e: import java.util.Collections;
1:beba91e: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:beba91e: import java.util.Arrays;
1:beba91e: import org.slf4j.Logger;
1:beba91e: import org.slf4j.LoggerFactory;
1:beba91e: 
1:3bbfb06: /**
1:3bbfb06:  * Note that the timestamp is only optional in case of counter deletion.
1:beba91e:  */
1:bffd9ea: public class Deletion implements org.apache.thrift.TBase<Deletion, Deletion._Fields>, java.io.Serializable, Cloneable, Comparable<Deletion> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Deletion");
1:beba91e: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField SUPER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("super_column", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("predicate", org.apache.thrift.protocol.TType.STRUCT, (short)3);
1:beba91e: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new DeletionStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new DeletionTupleSchemeFactory());
1:b153d45:   }
1:beba91e: 
1:b153d45:   public long timestamp; // optional
1:b153d45:   public ByteBuffer super_column; // optional
1:b153d45:   public SlicePredicate predicate; // optional
1:beba91e: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:d966ed0:     TIMESTAMP((short)1, "timestamp"),
1:04d5ec3:     SUPER_COLUMN((short)2, "super_column"),
1:04d5ec3:     PREDICATE((short)3, "predicate");
1:beba91e: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:beba91e: 
1:04d5ec3:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:beba91e:       }
1:beba91e:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:3bbfb06:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d966ed0:         case 1: // TIMESTAMP
1:d966ed0:           return TIMESTAMP;
1:d849c69:         case 2: // SUPER_COLUMN
1:d849c69:           return SUPER_COLUMN;
1:d849c69:         case 3: // PREDICATE
1:d849c69:           return PREDICATE;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:beba91e:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:beba91e:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
3:04d5ec3:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
15:b153d45:     }
1:b153d45: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:b153d45: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:b153d45:     }
1:b153d45:   }
2:4ec9511: 
1:beba91e:   // isset id assignments
1:d966ed0:   private static final int __TIMESTAMP_ISSET_ID = 0;
1:b153d45:   private byte __isset_bitfield = 0;
1:b153d45:   private _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.SUPER_COLUMN,_Fields.PREDICATE};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:beba91e:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:4ec9511:     tmpMap.put(_Fields.SUPER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("super_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlicePredicate.class)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Deletion.class, metaDataMap);
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Deletion() {
1:beba91e:   }
1:beba91e: 
1:beba91e:   /**
1:beba91e:    * Performs a deep copy on <i>other</i>.
1:beba91e:    */
1:beba91e:   public Deletion(Deletion other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:d966ed0:     this.timestamp = other.timestamp;
1:beba91e:     if (other.isSetSuper_column()) {
1:4ec9511:       this.super_column = org.apache.thrift.TBaseHelper.copyBinary(other.super_column);
1:e7a385a: ;
1:beba91e:     }
1:beba91e:     if (other.isSetPredicate()) {
1:beba91e:       this.predicate = new SlicePredicate(other.predicate);
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Deletion deepCopy() {
2:beba91e:     return new Deletion(this);
1:beba91e:   }
1:beba91e: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     setTimestampIsSet(false);
1:e7a385a:     this.timestamp = 0;
1:e7a385a:     this.super_column = null;
1:e7a385a:     this.predicate = null;
1:beba91e:   }
1:beba91e: 
1:d966ed0:   public long getTimestamp() {
1:d966ed0:     return this.timestamp;
1:beba91e:   }
1:beba91e: 
1:d966ed0:   public Deletion setTimestamp(long timestamp) {
1:d966ed0:     this.timestamp = timestamp;
1:d966ed0:     setTimestampIsSet(true);
1:beba91e:     return this;
1:cba59a8:   }
1:beba91e: 
1:d966ed0:   public void unsetTimestamp() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:beba91e:   }
1:beba91e: 
1:4ec9511:   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
1:d966ed0:   public boolean isSetTimestamp() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:beba91e:   }
1:beba91e: 
1:d966ed0:   public void setTimestampIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
1:beba91e:   }
1:beba91e: 
1:beba91e:   public byte[] getSuper_column() {
1:4ec9511:     setSuper_column(org.apache.thrift.TBaseHelper.rightSize(super_column));
1:4ec9511:     return super_column == null ? null : super_column.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForSuper_column() {
1:e7a385a:     return super_column;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Deletion setSuper_column(byte[] super_column) {
1:4ec9511:     setSuper_column(super_column == null ? (ByteBuffer)null : ByteBuffer.wrap(super_column));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public Deletion setSuper_column(ByteBuffer super_column) {
2:beba91e:     this.super_column = super_column;
1:beba91e:     return this;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void unsetSuper_column() {
1:beba91e:     this.super_column = null;
1:beba91e:   }
1:beba91e: 
1:4ec9511:   /** Returns true if field super_column is set (has been assigned a value) and false otherwise */
1:beba91e:   public boolean isSetSuper_column() {
1:beba91e:     return this.super_column != null;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void setSuper_columnIsSet(boolean value) {
1:cba59a8:     if (!value) {
1:beba91e:       this.super_column = null;
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:beba91e:   public SlicePredicate getPredicate() {
1:beba91e:     return this.predicate;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public Deletion setPredicate(SlicePredicate predicate) {
2:beba91e:     this.predicate = predicate;
1:beba91e:     return this;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void unsetPredicate() {
1:beba91e:     this.predicate = null;
1:beba91e:   }
1:beba91e: 
1:4ec9511:   /** Returns true if field predicate is set (has been assigned a value) and false otherwise */
1:beba91e:   public boolean isSetPredicate() {
1:beba91e:     return this.predicate != null;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public void setPredicateIsSet(boolean value) {
2:beba91e:     if (!value) {
1:beba91e:       this.predicate = null;
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
1:d966ed0:     case TIMESTAMP:
1:beba91e:       if (value == null) {
1:d966ed0:         unsetTimestamp();
5:beba91e:       } else {
1:d966ed0:         setTimestamp((Long)value);
1:beba91e:       }
5:beba91e:       break;
1:beba91e: 
2:beba91e:     case SUPER_COLUMN:
1:beba91e:       if (value == null) {
1:beba91e:         unsetSuper_column();
1:2b69c40:       } else {
1:e7a385a:         setSuper_column((ByteBuffer)value);
1:2b69c40:       }
1:2b69c40:       break;
1:beba91e: 
2:beba91e:     case PREDICATE:
1:beba91e:       if (value == null) {
1:beba91e:         unsetPredicate();
1:2b69c40:       } else {
1:beba91e:         setPredicate((SlicePredicate)value);
1:2b69c40:       }
1:2b69c40:       break;
1:beba91e: 
1:2b69c40:     }
1:beba91e:   }
1:beba91e: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:d966ed0:     case TIMESTAMP:
1:7c8c570:       return Long.valueOf(getTimestamp());
1:beba91e: 
1:beba91e:     case SUPER_COLUMN:
1:beba91e:       return getSuper_column();
1:beba91e: 
1:beba91e:     case PREDICATE:
1:beba91e:       return getPredicate();
1:beba91e: 
1:beba91e:     }
1:04d5ec3:     throw new IllegalStateException();
1:beba91e:   }
1:beba91e: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:d966ed0:     case TIMESTAMP:
1:d966ed0:       return isSetTimestamp();
1:beba91e:     case SUPER_COLUMN:
1:beba91e:       return isSetSuper_column();
1:beba91e:     case PREDICATE:
1:beba91e:       return isSetPredicate();
1:beba91e:     }
1:04d5ec3:     throw new IllegalStateException();
1:beba91e:   }
1:beba91e: 
1:beba91e:   @Override
1:beba91e:   public boolean equals(Object that) {
1:beba91e:     if (that == null)
1:beba91e:       return false;
1:beba91e:     if (that instanceof Deletion)
1:beba91e:       return this.equals((Deletion)that);
1:beba91e:     return false;
1:beba91e:   }
1:beba91e: 
1:beba91e:   public boolean equals(Deletion that) {
1:beba91e:     if (that == null)
1:beba91e:       return false;
1:beba91e: 
1:3bbfb06:     boolean this_present_timestamp = true && this.isSetTimestamp();
1:3bbfb06:     boolean that_present_timestamp = true && that.isSetTimestamp();
1:d966ed0:     if (this_present_timestamp || that_present_timestamp) {
1:d966ed0:       if (!(this_present_timestamp && that_present_timestamp))
1:beba91e:         return false;
1:d966ed0:       if (this.timestamp != that.timestamp)
1:beba91e:         return false;
1:beba91e:     }
1:beba91e: 
1:beba91e:     boolean this_present_super_column = true && this.isSetSuper_column();
1:beba91e:     boolean that_present_super_column = true && that.isSetSuper_column();
1:beba91e:     if (this_present_super_column || that_present_super_column) {
1:beba91e:       if (!(this_present_super_column && that_present_super_column))
1:beba91e:         return false;
1:e7a385a:       if (!this.super_column.equals(that.super_column))
1:beba91e:         return false;
1:beba91e:     }
1:beba91e: 
1:beba91e:     boolean this_present_predicate = true && this.isSetPredicate();
1:beba91e:     boolean that_present_predicate = true && that.isSetPredicate();
1:beba91e:     if (this_present_predicate || that_present_predicate) {
1:beba91e:       if (!(this_present_predicate && that_present_predicate))
1:beba91e:         return false;
1:beba91e:       if (!this.predicate.equals(that.predicate))
1:beba91e:         return false;
1:beba91e:     }
1:beba91e: 
1:beba91e:     return true;
1:beba91e:   }
1:beba91e: 
1:beba91e:   @Override
1:beba91e:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:3bbfb06:     boolean present_timestamp = true && (isSetTimestamp());
1:d966ed0:     builder.append(present_timestamp);
1:d966ed0:     if (present_timestamp)
1:d966ed0:       builder.append(timestamp);
1:d966ed0: 
1:d966ed0:     boolean present_super_column = true && (isSetSuper_column());
1:d966ed0:     builder.append(present_super_column);
1:d966ed0:     if (present_super_column)
1:d966ed0:       builder.append(super_column);
1:d966ed0: 
1:d966ed0:     boolean present_predicate = true && (isSetPredicate());
1:d966ed0:     builder.append(present_predicate);
1:d966ed0:     if (present_predicate)
1:d966ed0:       builder.append(predicate);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:beba91e:   }
1:beba91e: 
1:bffd9ea:   @Override
1:beba91e:   public int compareTo(Deletion other) {
1:beba91e:     if (!getClass().equals(other.getClass())) {
1:beba91e:       return getClass().getName().compareTo(other.getClass().getName());
1:beba91e:     }
1:beba91e: 
1:beba91e:     int lastComparison = 0;
1:beba91e: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
4:beba91e:     if (lastComparison != 0) {
4:beba91e:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetTimestamp()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(other.isSetSuper_column());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetSuper_column()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.super_column, other.super_column);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:beba91e:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(other.isSetPredicate());
1:beba91e:     if (lastComparison != 0) {
1:beba91e:       return lastComparison;
1:beba91e:     }
1:e7a385a:     if (isSetPredicate()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicate, other.predicate);
1:beba91e:       if (lastComparison != 0) {
1:beba91e:         return lastComparison;
1:beba91e:       }
1:beba91e:     }
2:beba91e:     return 0;
1:beba91e:   }
1:beba91e: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:beba91e:   }
1:beba91e: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:beba91e:   }
1:beba91e: 
1:beba91e:   @Override
1:beba91e:   public String toString() {
1:beba91e:     StringBuilder sb = new StringBuilder("Deletion(");
1:beba91e:     boolean first = true;
1:beba91e: 
1:3bbfb06:     if (isSetTimestamp()) {
1:d966ed0:       sb.append("timestamp:");
1:d966ed0:       sb.append(this.timestamp);
1:beba91e:       first = false;
1:cba59a8:     }
2:beba91e:     if (isSetSuper_column()) {
1:beba91e:       if (!first) sb.append(", ");
1:beba91e:       sb.append("super_column:");
1:beba91e:       if (this.super_column == null) {
1:cba59a8:         sb.append("null");
1:cba59a8:       } else {
1:4ec9511:         org.apache.thrift.TBaseHelper.toString(this.super_column, sb);
1:beba91e:       }
1:beba91e:       first = false;
1:beba91e:     }
2:beba91e:     if (isSetPredicate()) {
1:beba91e:       if (!first) sb.append(", ");
1:beba91e:       sb.append("predicate:");
1:beba91e:       if (this.predicate == null) {
2:beba91e:         sb.append("null");
1:2b69c40:       } else {
1:beba91e:         sb.append(this.predicate);
1:beba91e:       }
1:beba91e:       first = false;
1:beba91e:     }
1:beba91e:     sb.append(")");
1:beba91e:     return sb.toString();
1:beba91e:   }
1:beba91e: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:beba91e:     // check for required fields
1:b153d45:     // check for sub-struct validity
1:b153d45:     if (predicate != null) {
1:b153d45:       predicate.validate();
1:cba59a8:     }
1:beba91e:   }
1:b153d45: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class DeletionStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public DeletionStandardScheme getScheme() {
1:b153d45:       return new DeletionStandardScheme();
1:beba91e:     }
1:beba91e:   }
1:b153d45: 
1:b153d45:   private static class DeletionStandardScheme extends StandardScheme<Deletion> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, Deletion struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:beba91e:       iprot.readStructBegin();
1:beba91e:       while (true)
3:beba91e:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:2b69c40:           break;
1:cba59a8:         }
1:b153d45:         switch (schemeField.id) {
1:d966ed0:           case 1: // TIMESTAMP
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:b153d45:               struct.timestamp = iprot.readI64();
1:b153d45:               struct.setTimestampIsSet(true);
1:beba91e:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:beba91e:             }
1:beba91e:             break;
1:2b69c40:           case 2: // SUPER_COLUMN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.super_column = iprot.readBinary();
1:b153d45:               struct.setSuper_columnIsSet(true);
1:beba91e:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:beba91e:             }
1:beba91e:             break;
1:2b69c40:           case 3: // PREDICATE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.predicate = new SlicePredicate();
1:b153d45:               struct.predicate.read(iprot);
1:b153d45:               struct.setPredicateIsSet(true);
1:beba91e:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:beba91e:             }
1:beba91e:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:beba91e:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:beba91e:       iprot.readStructEnd();
1:b153d45: 
1:beba91e:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:d966ed0:     }
1:beba91e: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, Deletion struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:beba91e:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.isSetTimestamp()) {
1:d966ed0:         oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
1:b153d45:         oprot.writeI64(struct.timestamp);
1:d966ed0:         oprot.writeFieldEnd();
1:cba59a8:       }
1:b153d45:       if (struct.super_column != null) {
1:b153d45:         if (struct.isSetSuper_column()) {
1:beba91e:           oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
1:b153d45:           oprot.writeBinary(struct.super_column);
1:cba59a8:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.predicate != null) {
1:b153d45:         if (struct.isSetPredicate()) {
1:beba91e:           oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
1:b153d45:           struct.predicate.write(oprot);
3:beba91e:           oprot.writeFieldEnd();
1:beba91e:         }
1:b153d45:       }
1:beba91e:       oprot.writeFieldStop();
1:beba91e:       oprot.writeStructEnd();
1:beba91e:     }
1:beba91e: 
1:beba91e:   }
1:beba91e: 
1:b153d45:   private static class DeletionTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public DeletionTupleScheme getScheme() {
1:b153d45:       return new DeletionTupleScheme();
1:beba91e:     }
1:beba91e:   }
1:beba91e: 
1:b153d45:   private static class DeletionTupleScheme extends TupleScheme<Deletion> {
1:beba91e: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, Deletion struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetTimestamp()) {
1:b153d45:         optionals.set(0);
1:beba91e:       }
1:b153d45:       if (struct.isSetSuper_column()) {
1:b153d45:         optionals.set(1);
1:beba91e:       }
1:b153d45:       if (struct.isSetPredicate()) {
1:b153d45:         optionals.set(2);
1:beba91e:       }
1:b153d45:       oprot.writeBitSet(optionals, 3);
1:b153d45:       if (struct.isSetTimestamp()) {
1:b153d45:         oprot.writeI64(struct.timestamp);
1:beba91e:       }
1:b153d45:       if (struct.isSetSuper_column()) {
1:b153d45:         oprot.writeBinary(struct.super_column);
1:beba91e:       }
1:b153d45:       if (struct.isSetPredicate()) {
1:b153d45:         struct.predicate.write(oprot);
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, Deletion struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       BitSet incoming = iprot.readBitSet(3);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.timestamp = iprot.readI64();
1:b153d45:         struct.setTimestampIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.super_column = iprot.readBinary();
1:b153d45:         struct.setSuper_columnIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         struct.predicate = new SlicePredicate();
1:b153d45:         struct.predicate.read(iprot);
1:b153d45:         struct.setPredicateIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class Deletion implements org.apache.thrift.TBase<Deletion, Deletion._Fields>, java.io.Serializable, Cloneable, Comparable<Deletion> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
1:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(other.isSetSuper_column());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.super_column, other.super_column);
1:     lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(other.isSetPredicate());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicate, other.predicate);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer super_column;
/////////////////////////////////////////////////////////////////////////
0:       this.super_column = TBaseHelper.copyBinary(other.super_column);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     setTimestampIsSet(false);
1:     this.timestamp = 0;
1:     this.super_column = null;
1:     this.predicate = null;
/////////////////////////////////////////////////////////////////////////
0:     setSuper_column(TBaseHelper.rightSize(super_column));
0:     return super_column.array();
1:   }
1: 
0:   public ByteBuffer BufferForSuper_column() {
1:     return super_column;
0:     setSuper_column(ByteBuffer.wrap(super_column));
1:     return this;
1:   }
1: 
1:   public Deletion setSuper_column(ByteBuffer super_column) {
/////////////////////////////////////////////////////////////////////////
1:         setSuper_column((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.super_column.equals(that.super_column))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetTimestamp()) {
0:       lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetSuper_column()) {
0:       lastComparison = TBaseHelper.compareTo(this.super_column, typedOther.super_column);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetPredicate()) {
0:       lastComparison = TBaseHelper.compareTo(this.predicate, typedOther.predicate);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:         TBaseHelper.toString(this.super_column, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
0:   private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)1);
0:   public long timestamp;
1:     TIMESTAMP((short)1, "timestamp"),
/////////////////////////////////////////////////////////////////////////
1:         case 1: // TIMESTAMP
1:           return TIMESTAMP;
/////////////////////////////////////////////////////////////////////////
1:   private static final int __TIMESTAMP_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
0:     tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I64)));
/////////////////////////////////////////////////////////////////////////
0:     long timestamp)
1:     this.timestamp = timestamp;
1:     setTimestampIsSet(true);
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     this.timestamp = other.timestamp;
/////////////////////////////////////////////////////////////////////////
1:   public long getTimestamp() {
1:     return this.timestamp;
1:   public Deletion setTimestamp(long timestamp) {
0:     this.timestamp = timestamp;
0:     setTimestampIsSet(true);
1:   public void unsetTimestamp() {
0:     __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
0:   /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
1:   public boolean isSetTimestamp() {
0:     return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
1:   public void setTimestampIsSet(boolean value) {
0:     __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     case TIMESTAMP:
1:         unsetTimestamp();
1:         setTimestamp((Long)value);
/////////////////////////////////////////////////////////////////////////
1:     case TIMESTAMP:
0:       return new Long(getTimestamp());
/////////////////////////////////////////////////////////////////////////
1:     case TIMESTAMP:
1:       return isSetTimestamp();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_timestamp = true;
0:     boolean that_present_timestamp = true;
1:     if (this_present_timestamp || that_present_timestamp) {
1:       if (!(this_present_timestamp && that_present_timestamp))
1:       if (this.timestamp != that.timestamp)
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
0:     boolean present_timestamp = true;
1:     builder.append(present_timestamp);
1:     if (present_timestamp)
1:       builder.append(timestamp);
1: 
1:     boolean present_super_column = true && (isSetSuper_column());
1:     builder.append(present_super_column);
1:     if (present_super_column)
1:       builder.append(super_column);
1: 
1:     boolean present_predicate = true && (isSetPredicate());
1:     builder.append(present_predicate);
1:     if (present_predicate)
1:       builder.append(predicate);
1: 
1:     return builder.toHashCode();
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
0:     if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
/////////////////////////////////////////////////////////////////////////
1:         case 1: // TIMESTAMP
0:           if (field.type == TType.I64) {
0:             this.timestamp = iprot.readI64();
0:             setTimestampIsSet(true);
/////////////////////////////////////////////////////////////////////////
0:     if (!isSetTimestamp()) {
0:       throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
0:     oprot.writeI64(this.timestamp);
1:     oprot.writeFieldEnd();
/////////////////////////////////////////////////////////////////////////
1:     sb.append("timestamp:");
1:     sb.append(this.timestamp);
/////////////////////////////////////////////////////////////////////////
0:     // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class Deletion implements TBase<Deletion, Deletion._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
0:         case 1: // CLOCK
0:           return CLOCK;
1:         case 2: // SUPER_COLUMN
1:           return SUPER_COLUMN;
1:         case 3: // PREDICATE
1:           return PREDICATE;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.CLOCK, new FieldMetaData("clock", TFieldRequirementType.REQUIRED, 
0:         new StructMetaData(TType.STRUCT, Clock.class)));
0:     tmpMap.put(_Fields.SUPER_COLUMN, new FieldMetaData("super_column", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.PREDICATE, new FieldMetaData("predicate", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, SlicePredicate.class)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetClock()) {      lastComparison = TBaseHelper.compareTo(this.clock, typedOther.clock);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(this.super_column, typedOther.super_column);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetPredicate()) {      lastComparison = TBaseHelper.compareTo(this.predicate, typedOther.predicate);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
0:   private static final TField CLOCK_FIELD_DESC = new TField("clock", TType.STRUCT, (short)1);
0:   public Clock clock;
0:     CLOCK((short)1, "clock"),
/////////////////////////////////////////////////////////////////////////
0:     put(_Fields.CLOCK, new FieldMetaData("clock", TFieldRequirementType.REQUIRED, 
0:         new StructMetaData(TType.STRUCT, Clock.class)));
/////////////////////////////////////////////////////////////////////////
0:     Clock clock)
0:     this.clock = clock;
0:     if (other.isSetClock()) {
0:       this.clock = new Clock(other.clock);
1:     }
/////////////////////////////////////////////////////////////////////////
0:   public Clock getClock() {
0:     return this.clock;
0:   public Deletion setClock(Clock clock) {
0:     this.clock = clock;
0:   public void unsetClock() {
0:     this.clock = null;
0:   /** Returns true if field clock is set (has been asigned a value) and false otherwise */
0:   public boolean isSetClock() {
0:     return this.clock != null;
0:   public void setClockIsSet(boolean value) {
1:     if (!value) {
0:       this.clock = null;
1:     }
/////////////////////////////////////////////////////////////////////////
0:     case CLOCK:
0:         unsetClock();
0:         setClock((Clock)value);
/////////////////////////////////////////////////////////////////////////
0:     case CLOCK:
0:       return getClock();
/////////////////////////////////////////////////////////////////////////
0:     case CLOCK:
0:       return isSetClock();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_clock = true && this.isSetClock();
0:     boolean that_present_clock = true && that.isSetClock();
0:     if (this_present_clock || that_present_clock) {
0:       if (!(this_present_clock && that_present_clock))
0:       if (!this.clock.equals(that.clock))
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetClock()).compareTo(typedOther.isSetClock());
0:     if (isSetClock()) {      lastComparison = TBaseHelper.compareTo(clock, typedOther.clock);
/////////////////////////////////////////////////////////////////////////
0:         case 1: // CLOCK
0:           if (field.type == TType.STRUCT) {
0:             this.clock = new Clock();
0:             this.clock.read(iprot);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (this.clock != null) {
0:       oprot.writeFieldBegin(CLOCK_FIELD_DESC);
0:       this.clock.write(oprot);
1:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     sb.append("clock:");
0:     if (this.clock == null) {
1:       sb.append("null");
1:     } else {
0:       sb.append(this.clock);
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (clock == null) {
0:       throw new TProtocolException("Required field 'clock' was not present! Struct: " + toString());
1:     }
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
0:     if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(typedOther.isSetSuper_column());
0:     if (isSetSuper_column()) {      lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(typedOther.isSetPredicate());
0:     if (isSetPredicate()) {      lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
0:         case 1: // TIMESTAMP
0:           if (field.type == TType.I64) {
0:             this.timestamp = iprot.readI64();
0:             setTimestampIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // SUPER_COLUMN
0:           if (field.type == TType.STRING) {
0:             this.super_column = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // PREDICATE
0:           if (field.type == TType.STRUCT) {
0:             this.predicate = new SlicePredicate();
0:             this.predicate.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:beba91e
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class Deletion implements TBase, java.io.Serializable, Cloneable, Comparable<Deletion> {
0:   private static final TStruct STRUCT_DESC = new TStruct("Deletion");
0:   private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)1);
0:   private static final TField SUPER_COLUMN_FIELD_DESC = new TField("super_column", TType.STRING, (short)2);
0:   private static final TField PREDICATE_FIELD_DESC = new TField("predicate", TType.STRUCT, (short)3);
1: 
0:   public long timestamp;
0:   public byte[] super_column;
0:   public SlicePredicate predicate;
0:   public static final int TIMESTAMP = 1;
0:   public static final int SUPER_COLUMN = 2;
0:   public static final int PREDICATE = 3;
1: 
1:   // isset id assignments
0:   private static final int __TIMESTAMP_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I64)));
0:     put(SUPER_COLUMN, new FieldMetaData("super_column", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(PREDICATE, new FieldMetaData("predicate", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, SlicePredicate.class)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(Deletion.class, metaDataMap);
1:   }
1: 
1:   public Deletion() {
1:   }
1: 
0:   public Deletion(
0:     long timestamp,
0:     byte[] super_column,
0:     SlicePredicate predicate)
1:   {
0:     this();
0:     this.timestamp = timestamp;
0:     setTimestampIsSet(true);
1:     this.super_column = super_column;
1:     this.predicate = predicate;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public Deletion(Deletion other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
0:     this.timestamp = other.timestamp;
1:     if (other.isSetSuper_column()) {
0:       this.super_column = new byte[other.super_column.length];
0:       System.arraycopy(other.super_column, 0, super_column, 0, other.super_column.length);
1:     }
1:     if (other.isSetPredicate()) {
1:       this.predicate = new SlicePredicate(other.predicate);
1:     }
1:   }
1: 
1:   public Deletion deepCopy() {
1:     return new Deletion(this);
1:   }
1: 
0:   @Deprecated
0:   public Deletion clone() {
1:     return new Deletion(this);
1:   }
1: 
0:   public long getTimestamp() {
0:     return this.timestamp;
1:   }
1: 
0:   public Deletion setTimestamp(long timestamp) {
0:     this.timestamp = timestamp;
0:     setTimestampIsSet(true);
1:     return this;
1:   }
1: 
0:   public void unsetTimestamp() {
0:     __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
1:   }
1: 
0:   // Returns true if field timestamp is set (has been asigned a value) and false otherwise
0:   public boolean isSetTimestamp() {
0:     return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
1:   }
1: 
0:   public void setTimestampIsSet(boolean value) {
0:     __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
1:   }
1: 
1:   public byte[] getSuper_column() {
0:     return this.super_column;
1:   }
1: 
1:   public Deletion setSuper_column(byte[] super_column) {
1:     this.super_column = super_column;
1:     return this;
1:   }
1: 
1:   public void unsetSuper_column() {
1:     this.super_column = null;
1:   }
1: 
0:   // Returns true if field super_column is set (has been asigned a value) and false otherwise
1:   public boolean isSetSuper_column() {
1:     return this.super_column != null;
1:   }
1: 
1:   public void setSuper_columnIsSet(boolean value) {
1:     if (!value) {
1:       this.super_column = null;
1:     }
1:   }
1: 
1:   public SlicePredicate getPredicate() {
1:     return this.predicate;
1:   }
1: 
1:   public Deletion setPredicate(SlicePredicate predicate) {
1:     this.predicate = predicate;
1:     return this;
1:   }
1: 
1:   public void unsetPredicate() {
1:     this.predicate = null;
1:   }
1: 
0:   // Returns true if field predicate is set (has been asigned a value) and false otherwise
1:   public boolean isSetPredicate() {
1:     return this.predicate != null;
1:   }
1: 
1:   public void setPredicateIsSet(boolean value) {
1:     if (!value) {
1:       this.predicate = null;
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
0:     case TIMESTAMP:
1:       if (value == null) {
0:         unsetTimestamp();
1:       } else {
0:         setTimestamp((Long)value);
1:       }
1:       break;
1: 
1:     case SUPER_COLUMN:
1:       if (value == null) {
1:         unsetSuper_column();
1:       } else {
0:         setSuper_column((byte[])value);
1:       }
1:       break;
1: 
1:     case PREDICATE:
1:       if (value == null) {
1:         unsetPredicate();
1:       } else {
1:         setPredicate((SlicePredicate)value);
1:       }
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
0:     case TIMESTAMP:
0:       return new Long(getTimestamp());
1: 
1:     case SUPER_COLUMN:
1:       return getSuper_column();
1: 
1:     case PREDICATE:
1:       return getPredicate();
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
0:     case TIMESTAMP:
0:       return isSetTimestamp();
1:     case SUPER_COLUMN:
1:       return isSetSuper_column();
1:     case PREDICATE:
1:       return isSetPredicate();
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof Deletion)
1:       return this.equals((Deletion)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(Deletion that) {
1:     if (that == null)
1:       return false;
1: 
0:     boolean this_present_timestamp = true;
0:     boolean that_present_timestamp = true;
0:     if (this_present_timestamp || that_present_timestamp) {
0:       if (!(this_present_timestamp && that_present_timestamp))
1:         return false;
0:       if (this.timestamp != that.timestamp)
1:         return false;
1:     }
1: 
1:     boolean this_present_super_column = true && this.isSetSuper_column();
1:     boolean that_present_super_column = true && that.isSetSuper_column();
1:     if (this_present_super_column || that_present_super_column) {
1:       if (!(this_present_super_column && that_present_super_column))
1:         return false;
0:       if (!java.util.Arrays.equals(this.super_column, that.super_column))
1:         return false;
1:     }
1: 
1:     boolean this_present_predicate = true && this.isSetPredicate();
1:     boolean that_present_predicate = true && that.isSetPredicate();
1:     if (this_present_predicate || that_present_predicate) {
1:       if (!(this_present_predicate && that_present_predicate))
1:         return false;
1:       if (!this.predicate.equals(that.predicate))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(Deletion other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     Deletion typedOther = (Deletion)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(isSetTimestamp());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetSuper_column()).compareTo(isSetSuper_column());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(super_column, typedOther.super_column);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(isSetPredicate());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(predicate, typedOther.predicate);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id)
1:       {
0:         case TIMESTAMP:
0:           if (field.type == TType.I64) {
0:             this.timestamp = iprot.readI64();
0:             setTimestampIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case SUPER_COLUMN:
0:           if (field.type == TType.STRING) {
0:             this.super_column = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case PREDICATE:
0:           if (field.type == TType.STRUCT) {
0:             this.predicate = new SlicePredicate();
0:             this.predicate.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:           break;
1:       }
0:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetTimestamp()) {
0:       throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
0:     oprot.writeI64(this.timestamp);
1:     oprot.writeFieldEnd();
0:     if (this.super_column != null) {
1:       if (isSetSuper_column()) {
1:         oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
0:         oprot.writeBinary(this.super_column);
1:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.predicate != null) {
1:       if (isSetPredicate()) {
1:         oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
0:         this.predicate.write(oprot);
1:         oprot.writeFieldEnd();
1:       }
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("Deletion(");
1:     boolean first = true;
1: 
0:     sb.append("timestamp:");
0:     sb.append(this.timestamp);
1:     first = false;
1:     if (isSetSuper_column()) {
1:       if (!first) sb.append(", ");
1:       sb.append("super_column:");
1:       if (this.super_column == null) {
1:         sb.append("null");
1:       } else {
0:           int __super_column_size = Math.min(this.super_column.length, 128);
0:           for (int i = 0; i < __super_column_size; i++) {
0:             if (i != 0) sb.append(" ");
0:             sb.append(Integer.toHexString(this.super_column[i]).length() > 1 ? Integer.toHexString(this.super_column[i]).substring(Integer.toHexString(this.super_column[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.super_column[i]).toUpperCase());
1:           }
0:           if (this.super_column.length > 128) sb.append(" ...");
1:       }
1:       first = false;
1:     }
1:     if (isSetPredicate()) {
1:       if (!first) sb.append(", ");
1:       sb.append("predicate:");
1:       if (this.predicate == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.predicate);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
0:     // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
0:     // check that fields of type enum have valid values
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new DeletionStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new DeletionTupleSchemeFactory());
1:   }
1: 
1:   public long timestamp; // optional
1:   public ByteBuffer super_column; // optional
1:   public SlicePredicate predicate; // optional
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.SUPER_COLUMN,_Fields.PREDICATE};
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
1:     if (predicate != null) {
1:       predicate.validate();
1:     }
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class DeletionStandardSchemeFactory implements SchemeFactory {
1:     public DeletionStandardScheme getScheme() {
1:       return new DeletionStandardScheme();
1:     }
1:   }
1: 
1:   private static class DeletionStandardScheme extends StandardScheme<Deletion> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, Deletion struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // TIMESTAMP
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:               struct.timestamp = iprot.readI64();
1:               struct.setTimestampIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // SUPER_COLUMN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.super_column = iprot.readBinary();
1:               struct.setSuper_columnIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 3: // PREDICATE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.predicate = new SlicePredicate();
1:               struct.predicate.read(iprot);
1:               struct.setPredicateIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, Deletion struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.isSetTimestamp()) {
0:         oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
1:         oprot.writeI64(struct.timestamp);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.super_column != null) {
1:         if (struct.isSetSuper_column()) {
0:           oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
1:           oprot.writeBinary(struct.super_column);
0:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.predicate != null) {
1:         if (struct.isSetPredicate()) {
0:           oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
1:           struct.predicate.write(oprot);
0:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class DeletionTupleSchemeFactory implements SchemeFactory {
1:     public DeletionTupleScheme getScheme() {
1:       return new DeletionTupleScheme();
1:     }
1:   }
1: 
1:   private static class DeletionTupleScheme extends TupleScheme<Deletion> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, Deletion struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetTimestamp()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetSuper_column()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetPredicate()) {
1:         optionals.set(2);
1:       }
1:       oprot.writeBitSet(optionals, 3);
1:       if (struct.isSetTimestamp()) {
1:         oprot.writeI64(struct.timestamp);
1:       }
1:       if (struct.isSetSuper_column()) {
1:         oprot.writeBinary(struct.super_column);
1:       }
1:       if (struct.isSetPredicate()) {
1:         struct.predicate.write(oprot);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, Deletion struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       BitSet incoming = iprot.readBitSet(3);
1:       if (incoming.get(0)) {
1:         struct.timestamp = iprot.readI64();
1:         struct.setTimestampIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.super_column = iprot.readBinary();
1:         struct.setSuper_columnIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         struct.predicate = new SlicePredicate();
1:         struct.predicate.read(iprot);
1:         struct.setPredicateIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
0:   public long timestamp; // required
0:   public ByteBuffer super_column; // required
0:   public SlicePredicate predicate; // required
/////////////////////////////////////////////////////////////////////////
1:       return Long.valueOf(getTimestamp());
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class Deletion implements org.apache.thrift.TBase<Deletion, Deletion._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Deletion");
1:   private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
1:   private static final org.apache.thrift.protocol.TField SUPER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("super_column", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("predicate", org.apache.thrift.protocol.TType.STRUCT, (short)3);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:     tmpMap.put(_Fields.SUPER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("super_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlicePredicate.class)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Deletion.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.super_column = org.apache.thrift.TBaseHelper.copyBinary(other.super_column);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:     setSuper_column(org.apache.thrift.TBaseHelper.rightSize(super_column));
1:     return super_column == null ? null : super_column.array();
1:   public ByteBuffer bufferForSuper_column() {
1:     setSuper_column(super_column == null ? (ByteBuffer)null : ByteBuffer.wrap(super_column));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field super_column is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field predicate is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.super_column, typedOther.super_column);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicate, typedOther.predicate);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.I64) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:         org.apache.thrift.TBaseHelper.toString(this.super_column, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3bbfb06
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Note that the timestamp is only optional in case of counter deletion.
1:  */
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.OPTIONAL, 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_timestamp = true && this.isSetTimestamp();
1:     boolean that_present_timestamp = true && that.isSetTimestamp();
/////////////////////////////////////////////////////////////////////////
1:     boolean present_timestamp = true && (isSetTimestamp());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (isSetTimestamp()) {
0:       oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
0:       oprot.writeI64(this.timestamp);
0:       oprot.writeFieldEnd();
0:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetTimestamp()) {
0:       sb.append("timestamp:");
0:       sb.append(this.timestamp);
0:       first = false;
0:     }
/////////////////////////////////////////////////////////////////////////
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class Deletion implements TBase<Deletion._Fields>, java.io.Serializable, Cloneable, Comparable<Deletion> {
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
0:     TIMESTAMP((short)1, "timestamp"),
1:     SUPER_COLUMN((short)2, "super_column"),
1:     PREDICATE((short)3, "predicate");
0: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
0: 
1:     private final short _thriftId;
1:     private final String _fieldName;
0: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
0: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
0: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.SUPER_COLUMN, new FieldMetaData("super_column", TFieldRequirementType.OPTIONAL, 
0:     put(_Fields.PREDICATE, new FieldMetaData("predicate", TFieldRequirementType.OPTIONAL, 
/////////////////////////////////////////////////////////////////////////
0:     long timestamp)
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field super_column is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field predicate is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
0: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   }
0: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case TIMESTAMP:
0:             if (field.type == TType.I64) {
0:               this.timestamp = iprot.readI64();
0:               setTimestampIsSet(true);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case SUPER_COLUMN:
0:             if (field.type == TType.STRING) {
0:               this.super_column = iprot.readBinary();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case PREDICATE:
0:             if (field.type == TType.STRUCT) {
0:               this.predicate = new SlicePredicate();
0:               this.predicate.read(iprot);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
============================================================================