1:d40ac78: /*
1:d40ac78:  * Licensed to the Apache Software Foundation (ASF) under one
1:d40ac78:  * or more contributor license agreements.  See the NOTICE file
1:d40ac78:  * distributed with this work for additional information
1:d40ac78:  * regarding copyright ownership.  The ASF licenses this file
1:d40ac78:  * to you under the Apache License, Version 2.0 (the
1:d40ac78:  * "License"); you may not use this file except in compliance
1:d40ac78:  * with the License.  You may obtain a copy of the License at
1:d40ac78:  *
1:d40ac78:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d40ac78:  *
1:d40ac78:  * Unless required by applicable law or agreed to in writing, software
1:d40ac78:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d40ac78:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d40ac78:  * See the License for the specific language governing permissions and
1:d40ac78:  * limitations under the License.
1:d40ac78:  */
1:d40ac78: package org.apache.cassandra.tools.nodetool;
1:d40ac78: 
1:d40ac78: import io.airlift.command.Arguments;
1:d40ac78: import io.airlift.command.Command;
1:d40ac78: import io.airlift.command.Option;
1:d40ac78: 
1:d40ac78: import java.util.ArrayList;
1:d40ac78: import java.util.List;
1:d40ac78: 
1:d40ac78: import org.apache.cassandra.tools.NodeProbe;
1:d40ac78: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:d40ac78: 
1:d40ac78: @Command(name = "garbagecollect", description = "Remove deleted data from one or more tables")
1:d40ac78: public class GarbageCollect extends NodeToolCmd
1:d40ac78: {
1:d40ac78:     @Arguments(usage = "[<keyspace> <tables>...]", description = "The keyspace followed by one or many tables")
1:d40ac78:     private List<String> args = new ArrayList<>();
1:d40ac78: 
1:d40ac78:     @Option(title = "granularity",
1:d40ac78:         name = {"-g", "--granularity"},
1:d40ac78:         allowedValues = {"ROW", "CELL"},
1:d40ac78:         description = "Granularity of garbage removal. ROW (default) removes deleted partitions and rows, CELL also removes overwritten or deleted cells.")
1:d40ac78:     private String tombstoneOption = "ROW";
1:d40ac78: 
1:d40ac78:     @Option(title = "jobs",
1:d40ac78:             name = {"-j", "--jobs"},
1:d40ac78:             description = "Number of sstables to cleanup simultanously, set to 0 to use all available compaction threads")
1:d40ac78:     private int jobs = 2;
1:d40ac78: 
1:d40ac78:     @Override
1:d40ac78:     public void execute(NodeProbe probe)
1:d40ac78:     {
1:d40ac78:         List<String> keyspaces = parseOptionalKeyspace(args, probe);
1:d40ac78:         String[] tableNames = parseOptionalTables(args);
1:d40ac78: 
1:d40ac78:         for (String keyspace : keyspaces)
1:d40ac78:         {
1:d40ac78:             try
1:d40ac78:             {
1:d40ac78:                 probe.garbageCollect(System.out, tombstoneOption, jobs, keyspace, tableNames);
1:d40ac78:             } catch (Exception e)
1:d40ac78:             {
1:d40ac78:                 throw new RuntimeException("Error occurred during garbage collection", e);
1:d40ac78:             }
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d40ac78
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: import io.airlift.command.Option;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "garbagecollect", description = "Remove deleted data from one or more tables")
1: public class GarbageCollect extends NodeToolCmd
1: {
1:     @Arguments(usage = "[<keyspace> <tables>...]", description = "The keyspace followed by one or many tables")
1:     private List<String> args = new ArrayList<>();
1: 
1:     @Option(title = "granularity",
1:         name = {"-g", "--granularity"},
1:         allowedValues = {"ROW", "CELL"},
1:         description = "Granularity of garbage removal. ROW (default) removes deleted partitions and rows, CELL also removes overwritten or deleted cells.")
1:     private String tombstoneOption = "ROW";
1: 
1:     @Option(title = "jobs",
1:             name = {"-j", "--jobs"},
1:             description = "Number of sstables to cleanup simultanously, set to 0 to use all available compaction threads")
1:     private int jobs = 2;
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         List<String> keyspaces = parseOptionalKeyspace(args, probe);
1:         String[] tableNames = parseOptionalTables(args);
1: 
1:         for (String keyspace : keyspaces)
1:         {
1:             try
1:             {
1:                 probe.garbageCollect(System.out, tombstoneOption, jobs, keyspace, tableNames);
1:             } catch (Exception e)
1:             {
1:                 throw new RuntimeException("Error occurred during garbage collection", e);
1:             }
1:         }
1:     }
1: }
============================================================================