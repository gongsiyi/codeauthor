1:0580fb2: package org.apache.cassandra.stress.settings;
1:0580fb2: /*
1:0580fb2:  * 
1:0580fb2:  * Licensed to the Apache Software Foundation (ASF) under one
1:0580fb2:  * or more contributor license agreements.  See the NOTICE file
1:0580fb2:  * distributed with this work for additional information
1:0580fb2:  * regarding copyright ownership.  The ASF licenses this file
1:0580fb2:  * to you under the Apache License, Version 2.0 (the
1:0580fb2:  * "License"); you may not use this file except in compliance
1:0580fb2:  * with the License.  You may obtain a copy of the License at
1:0580fb2:  * 
1:0580fb2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0580fb2:  * 
1:0580fb2:  * Unless required by applicable law or agreed to in writing,
1:0580fb2:  * software distributed under the License is distributed on an
1:0580fb2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0580fb2:  * KIND, either express or implied.  See the License for the
1:0580fb2:  * specific language governing permissions and limitations
1:0580fb2:  * under the License.
1:0580fb2:  * 
1:0580fb2:  */
1:0580fb2: 
1:0580fb2: 
1:0580fb2: import java.io.Serializable;
1:0580fb2: import java.util.Arrays;
1:0580fb2: import java.util.List;
1:0580fb2: import java.util.Map;
1:0580fb2: 
1:0580fb2: import com.google.common.collect.ImmutableList;
1:0580fb2: 
1:0580fb2: import org.apache.cassandra.stress.generate.DistributionFactory;
1:0580fb2: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:0580fb2: 
1:0580fb2: public class SettingsPopulation implements Serializable
1:0580fb2: {
1:0580fb2: 
1:0580fb2:     public final DistributionFactory distribution;
1:0580fb2:     public final DistributionFactory readlookback;
1:0580fb2:     public final PartitionGenerator.Order order;
1:0580fb2:     public final boolean wrap;
1:0580fb2:     public final long[] sequence;
1:0580fb2: 
1:0580fb2:     public static enum GenerateOrder
1:0580fb2:     {
1:0580fb2:         ARBITRARY, SHUFFLED, SORTED
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private SettingsPopulation(GenerateOptions options, DistributionOptions dist, SequentialOptions pop)
1:0580fb2:     {
1:0580fb2:         this.order = !options.contents.setByUser() ? PartitionGenerator.Order.ARBITRARY : PartitionGenerator.Order.valueOf(options.contents.value().toUpperCase());
1:0580fb2:         if (dist != null)
1:0580fb2:         {
1:0580fb2:             this.distribution = dist.seed.get();
1:0580fb2:             this.sequence = null;
1:0580fb2:             this.readlookback = null;
1:0580fb2:             this.wrap = false;
1:0580fb2:         }
1:0580fb2:         else
1:0580fb2:         {
1:0580fb2:             this.distribution = null;
1:0580fb2:             String[] bounds = pop.populate.value().split("\\.\\.+");
1:0580fb2:             this.sequence = new long[] { OptionDistribution.parseLong(bounds[0]), OptionDistribution.parseLong(bounds[1]) };
1:0580fb2:             this.readlookback = pop.lookback.get();
1:0580fb2:             this.wrap = !pop.nowrap.setByUser();
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public SettingsPopulation(DistributionOptions options)
1:0580fb2:     {
1:0580fb2:         this(options, options, null);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public SettingsPopulation(SequentialOptions options)
1:0580fb2:     {
1:0580fb2:         this(options, null, options);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // Option Declarations
1:0580fb2: 
1:0580fb2:     private static class GenerateOptions extends GroupedOptions
1:0580fb2:     {
1:0580fb2:         final OptionSimple contents = new OptionSimple("contents=", "(sorted|shuffled)", null, "SORTED or SHUFFLED (intra-)partition order; if not specified, will be consistent but arbitrary order", false);
1:0580fb2: 
1:0580fb2:         @Override
1:0580fb2:         public List<? extends Option> options()
1:0580fb2:         {
1:0580fb2:             return Arrays.asList(contents);
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private static final class DistributionOptions extends GenerateOptions
1:0580fb2:     {
1:0580fb2:         final OptionDistribution seed;
1:0580fb2: 
1:0580fb2:         public DistributionOptions(String defaultLimit)
1:0580fb2:         {
1:0580fb2:             seed = new OptionDistribution("dist=", "gaussian(1.." + defaultLimit + ")", "Seeds are selected from this distribution");
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         @Override
1:0580fb2:         public List<? extends Option> options()
1:0580fb2:         {
1:0580fb2:             return ImmutableList.<Option>builder().add(seed).addAll(super.options()).build();
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private static final class SequentialOptions extends GenerateOptions
1:0580fb2:     {
1:0580fb2:         final OptionSimple populate;
1:4176f9e:         final OptionDistribution lookback = new OptionDistribution("read-lookback=", null, "Select read seeds from the recently visited write seeds", false);
1:0580fb2:         final OptionSimple nowrap = new OptionSimple("no-wrap", "", null, "Terminate the stress test once all seeds in the range have been visited", false);
1:0580fb2: 
1:0580fb2:         public SequentialOptions(String defaultLimit)
1:0580fb2:         {
1:9359af2:             populate = new OptionSimple("seq=", "[0-9]+[MBK]?\\.\\.+[0-9]+[MBK]?",
1:0580fb2:                     "1.." + defaultLimit,
1:0580fb2:                     "Generate all seeds in sequence", true);
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         @Override
1:0580fb2:         public List<? extends Option> options()
1:0580fb2:         {
1:0580fb2:             return ImmutableList.<Option>builder().add(populate, nowrap, lookback).addAll(super.options()).build();
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // CLI Utility Methods
1:0580fb2: 
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         if (distribution != null)
1:938faa2:         {
1:938faa2:             out.println("  Distribution: " +distribution.getConfigAsString());
1:938faa2:         }
1:938faa2: 
1:938faa2:         if (sequence != null)
1:938faa2:         {
1:938faa2:             out.printf("  Sequence: %d..%d%n", sequence[0], sequence[1]);
1:938faa2:         }
1:938faa2:         if (readlookback != null)
1:938faa2:         {
1:938faa2:             out.println("  Read Look Back: " + readlookback.getConfigAsString());
1:938faa2:         }
1:938faa2: 
1:938faa2:         out.printf("  Order: %s%n", order);
1:938faa2:         out.printf("  Wrap: %b%n", wrap);
1:938faa2:     }
1:938faa2: 
1:0580fb2:     public static SettingsPopulation get(Map<String, String[]> clArgs, SettingsCommand command)
1:0580fb2:     {
1:0580fb2:         // set default size to number of commands requested, unless set to err convergence, then use 1M
1:0580fb2:         String defaultLimit = command.count <= 0 ? "1000000" : Long.toString(command.count);
1:0580fb2: 
1:0580fb2:         String[] params = clArgs.remove("-pop");
1:0580fb2:         if (params == null)
1:0580fb2:         {
1:29ff2d2:             if (command instanceof SettingsCommandUser && ((SettingsCommandUser)command).hasInsertOnly())
1:29ff2d2:             {
1:29ff2d2:                 return new SettingsPopulation(new SequentialOptions(defaultLimit));
1:29ff2d2:             }
1:29ff2d2: 
1:0580fb2:             // return defaults:
1:0580fb2:             switch(command.type)
1:0580fb2:             {
1:0580fb2:                 case WRITE:
1:0580fb2:                 case COUNTER_WRITE:
1:0580fb2:                     return new SettingsPopulation(new SequentialOptions(defaultLimit));
1:0580fb2:                 default:
1:0580fb2:                     return new SettingsPopulation(new DistributionOptions(defaultLimit));
1:0580fb2:             }
1:0580fb2:         }
1:0580fb2:         GroupedOptions options = GroupedOptions.select(params, new SequentialOptions(defaultLimit), new DistributionOptions(defaultLimit));
1:0580fb2:         if (options == null)
1:0580fb2:         {
1:0580fb2:             printHelp();
1:0580fb2:             System.out.println("Invalid -pop options provided, see output for valid options");
1:0580fb2:             System.exit(1);
1:0580fb2:         }
1:0580fb2:         return options instanceof SequentialOptions ?
1:0580fb2:                 new SettingsPopulation((SequentialOptions) options) :
1:0580fb2:                 new SettingsPopulation((DistributionOptions) options);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static void printHelp()
1:0580fb2:     {
1:0580fb2:         GroupedOptions.printOptions(System.out, "-pop", new SequentialOptions("N"), new DistributionOptions("N"));
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static Runnable helpPrinter()
1:0580fb2:     {
1:0580fb2:         return new Runnable()
1:0580fb2:         {
1:0580fb2:             @Override
1:0580fb2:             public void run()
1:0580fb2:             {
1:0580fb2:                 printHelp();
1:0580fb2:             }
1:0580fb2:         };
1:0580fb2:     }
1:0580fb2: }
1:0580fb2: 
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         if (distribution != null)
1:         {
1:             out.println("  Distribution: " +distribution.getConfigAsString());
1:         }
1: 
1:         if (sequence != null)
1:         {
1:             out.printf("  Sequence: %d..%d%n", sequence[0], sequence[1]);
1:         }
1:         if (readlookback != null)
1:         {
1:             out.println("  Read Look Back: " + readlookback.getConfigAsString());
1:         }
1: 
1:         out.printf("  Order: %s%n", order);
1:         out.printf("  Wrap: %b%n", wrap);
1:     }
1: 
author:Eduard Tudenhoefner
-------------------------------------------------------------------------------
commit:9359af2
/////////////////////////////////////////////////////////////////////////
1:             populate = new OptionSimple("seq=", "[0-9]+[MBK]?\\.\\.+[0-9]+[MBK]?",
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:4176f9e
/////////////////////////////////////////////////////////////////////////
1:         final OptionDistribution lookback = new OptionDistribution("read-lookback=", null, "Select read seeds from the recently visited write seeds", false);
commit:213b066
/////////////////////////////////////////////////////////////////////////
0:         final OptionDistribution lookback = new OptionDistribution("read-lookback=", null, "Select read seeds from the recently visited write seeds");
commit:29ff2d2
/////////////////////////////////////////////////////////////////////////
1:             if (command instanceof SettingsCommandUser && ((SettingsCommandUser)command).hasInsertOnly())
1:             {
1:                 return new SettingsPopulation(new SequentialOptions(defaultLimit));
1:             }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import com.google.common.collect.ImmutableList;
1: 
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.PartitionGenerator;
1: 
1: public class SettingsPopulation implements Serializable
1: {
1: 
1:     public final DistributionFactory distribution;
1:     public final DistributionFactory readlookback;
1:     public final PartitionGenerator.Order order;
1:     public final boolean wrap;
1:     public final long[] sequence;
1: 
1:     public static enum GenerateOrder
1:     {
1:         ARBITRARY, SHUFFLED, SORTED
1:     }
1: 
1:     private SettingsPopulation(GenerateOptions options, DistributionOptions dist, SequentialOptions pop)
1:     {
1:         this.order = !options.contents.setByUser() ? PartitionGenerator.Order.ARBITRARY : PartitionGenerator.Order.valueOf(options.contents.value().toUpperCase());
1:         if (dist != null)
1:         {
1:             this.distribution = dist.seed.get();
1:             this.sequence = null;
1:             this.readlookback = null;
1:             this.wrap = false;
1:         }
1:         else
1:         {
1:             this.distribution = null;
1:             String[] bounds = pop.populate.value().split("\\.\\.+");
1:             this.sequence = new long[] { OptionDistribution.parseLong(bounds[0]), OptionDistribution.parseLong(bounds[1]) };
1:             this.readlookback = pop.lookback.get();
1:             this.wrap = !pop.nowrap.setByUser();
1:         }
1:     }
1: 
1:     public SettingsPopulation(DistributionOptions options)
1:     {
1:         this(options, options, null);
1:     }
1: 
1:     public SettingsPopulation(SequentialOptions options)
1:     {
1:         this(options, null, options);
1:     }
1: 
1:     // Option Declarations
1: 
1:     private static class GenerateOptions extends GroupedOptions
1:     {
1:         final OptionSimple contents = new OptionSimple("contents=", "(sorted|shuffled)", null, "SORTED or SHUFFLED (intra-)partition order; if not specified, will be consistent but arbitrary order", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
1:             return Arrays.asList(contents);
1:         }
1:     }
1: 
1:     private static final class DistributionOptions extends GenerateOptions
1:     {
1:         final OptionDistribution seed;
1: 
1:         public DistributionOptions(String defaultLimit)
1:         {
1:             seed = new OptionDistribution("dist=", "gaussian(1.." + defaultLimit + ")", "Seeds are selected from this distribution");
1:         }
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
1:             return ImmutableList.<Option>builder().add(seed).addAll(super.options()).build();
1:         }
1:     }
1: 
1:     private static final class SequentialOptions extends GenerateOptions
1:     {
1:         final OptionSimple populate;
0:         final OptionDistribution lookback = new OptionDistribution("read-lookback=", "fixed(1)", "Select read seeds from the recently visited write seeds");
1:         final OptionSimple nowrap = new OptionSimple("no-wrap", "", null, "Terminate the stress test once all seeds in the range have been visited", false);
1: 
1:         public SequentialOptions(String defaultLimit)
1:         {
0:             populate = new OptionSimple("seq=", "[0-9]+\\.\\.+[0-9]+[MBK]?",
1:                     "1.." + defaultLimit,
1:                     "Generate all seeds in sequence", true);
1:         }
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
1:             return ImmutableList.<Option>builder().add(populate, nowrap, lookback).addAll(super.options()).build();
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     public static SettingsPopulation get(Map<String, String[]> clArgs, SettingsCommand command)
1:     {
1:         // set default size to number of commands requested, unless set to err convergence, then use 1M
1:         String defaultLimit = command.count <= 0 ? "1000000" : Long.toString(command.count);
1: 
1:         String[] params = clArgs.remove("-pop");
1:         if (params == null)
1:         {
1:             // return defaults:
1:             switch(command.type)
1:             {
1:                 case WRITE:
1:                 case COUNTER_WRITE:
1:                     return new SettingsPopulation(new SequentialOptions(defaultLimit));
1:                 default:
1:                     return new SettingsPopulation(new DistributionOptions(defaultLimit));
1:             }
1:         }
1:         GroupedOptions options = GroupedOptions.select(params, new SequentialOptions(defaultLimit), new DistributionOptions(defaultLimit));
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -pop options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return options instanceof SequentialOptions ?
1:                 new SettingsPopulation((SequentialOptions) options) :
1:                 new SettingsPopulation((DistributionOptions) options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-pop", new SequentialOptions("N"), new DistributionOptions("N"));
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
1: 
============================================================================