1:e9c6742: /*
1:e9c6742:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9c6742:  * or more contributor license agreements.  See the NOTICE file
1:e9c6742:  * distributed with this work for additional information
1:e9c6742:  * regarding copyright ownership.  The ASF licenses this file
1:e9c6742:  * to you under the Apache License, Version 2.0 (the
1:e9c6742:  * "License"); you may not use this file except in compliance
1:e9c6742:  * with the License.  You may obtain a copy of the License at
1:e9c6742:  *
1:e9c6742:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9c6742:  *
1:e9c6742:  * Unless required by applicable law or agreed to in writing, software
1:e9c6742:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9c6742:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9c6742:  * See the License for the specific language governing permissions and
1:e9c6742:  * limitations under the License.
1:e9c6742:  */
1:fc8b76f: package org.apache.cassandra.serializers;
5:e9c6742: 
1:e9c6742: import org.apache.cassandra.utils.ByteBufferUtil;
1:e9c6742: 
1:e9c6742: import java.nio.ByteBuffer;
1:e9c6742: 
1:fc8b76f: public class BooleanSerializer implements TypeSerializer<Boolean>
4:e9c6742: {
1:fc8b76f:     private static final ByteBuffer TRUE = ByteBuffer.wrap(new byte[] {1});
1:fc8b76f:     private static final ByteBuffer FALSE = ByteBuffer.wrap(new byte[] {0});
1:fc8b76f: 
1:e9c6742:     public static final BooleanSerializer instance = new BooleanSerializer();
1:e9c6742: 
1:daff1fc:     public Boolean deserialize(ByteBuffer bytes)
1:e9c6742:     {
1:ff5c497:         if (bytes == null || bytes.remaining() == 0)
1:daff1fc:             return null;
1:daff1fc: 
2:e9c6742:         byte value = bytes.get(bytes.position());
1:e9c6742:         return value != 0;
4:e9c6742:     }
1:e9c6742: 
1:daff1fc:     public ByteBuffer serialize(Boolean value)
1:e9c6742:     {
1:e9c6742:         return (value == null) ? ByteBufferUtil.EMPTY_BYTE_BUFFER
1:fc8b76f:                 : value ? TRUE : FALSE; // false
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public void validate(ByteBuffer bytes) throws MarshalException
1:e9c6742:     {
1:e9c6742:         if (bytes.remaining() != 1 && bytes.remaining() != 0)
1:e9c6742:             throw new MarshalException(String.format("Expected 1 or 0 byte value (%d)", bytes.remaining()));
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public String toString(Boolean value)
1:e9c6742:     {
1:e9c6742:         return value == null ? "" : value.toString();
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public Class<Boolean> getType()
1:e9c6742:     {
1:e9c6742:         return Boolean.class;
1:e9c6742:     }
1:e9c6742: }
============================================================================
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:ff5c497
/////////////////////////////////////////////////////////////////////////
1:         if (bytes == null || bytes.remaining() == 0)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     public Boolean deserialize(ByteBuffer bytes)
0:         if (bytes.remaining() == 0)
1:             return null;
1: 
1:     public ByteBuffer serialize(Boolean value)
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
1: public class BooleanSerializer implements TypeSerializer<Boolean>
1:     private static final ByteBuffer TRUE = ByteBuffer.wrap(new byte[] {1});
1:     private static final ByteBuffer FALSE = ByteBuffer.wrap(new byte[] {0});
1: 
1:                 : value ? TRUE : FALSE; // false
/////////////////////////////////////////////////////////////////////////
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.type;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.nio.ByteBuffer;
1: 
0: public class BooleanSerializer extends AbstractSerializer<Boolean>
1: {
1:     public static final BooleanSerializer instance = new BooleanSerializer();
1: 
0:     @Override
0:     public Boolean serialize(ByteBuffer bytes)
1:     {
1:         byte value = bytes.get(bytes.position());
1:         return value != 0;
1:     }
1: 
0:     @Override
0:     public ByteBuffer deserialize(Boolean value)
1:     {
1:         return (value == null) ? ByteBufferUtil.EMPTY_BYTE_BUFFER
0:                 : value ? ByteBuffer.wrap(new byte[] {1})  // true
0:                 : ByteBuffer.wrap(new byte[] {0}); // false
1:     }
1: 
0:     @Override
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (bytes.remaining() != 1 && bytes.remaining() != 0)
1:             throw new MarshalException(String.format("Expected 1 or 0 byte value (%d)", bytes.remaining()));
1:     }
1: 
0:     @Override
0:     public String getString(ByteBuffer bytes)
1:     {
0:         if (bytes.remaining() == 0)
1:         {
0:             return Boolean.FALSE.toString();
1:         }
0:         if (bytes.remaining() != 1)
1:         {
0:             throw new MarshalException("A boolean is stored in exactly 1 byte: " + bytes.remaining());
1:         }
1:         byte value = bytes.get(bytes.position());
1: 
0:         return value == 0 ? Boolean.FALSE.toString() : Boolean.TRUE.toString();
1:     }
1: 
0:     @Override
1:     public String toString(Boolean value)
1:     {
1:         return value == null ? "" : value.toString();
1:     }
1: 
0:     @Override
1:     public Class<Boolean> getType()
1:     {
1:         return Boolean.class;
1:     }
1: 
1: }
============================================================================