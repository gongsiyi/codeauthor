1:b6147c1: /*
1:b6147c1:  * Licensed to the Apache Software Foundation (ASF) under one
1:b6147c1:  * or more contributor license agreements.  See the NOTICE file
1:b6147c1:  * distributed with this work for additional information
1:b6147c1:  * regarding copyright ownership.  The ASF licenses this file
1:b6147c1:  * to you under the Apache License, Version 2.0 (the
1:b6147c1:  * "License"); you may not use this file except in compliance
1:b6147c1:  * with the License.  You may obtain a copy of the License at
1:b6147c1:  *
1:b6147c1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b6147c1:  *
1:b6147c1:  * Unless required by applicable law or agreed to in writing,
1:b6147c1:  * software distributed under the License is distributed on an
1:b6147c1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b6147c1:  * KIND, either express or implied.  See the License for the
1:b6147c1:  * specific language governing permissions and limitations
1:b6147c1:  * under the License.
1:b6147c1:  */
1:dc7221f: package org.apache.cassandra.db.filter;
2:c6525da: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.marshal.*;
1:c6525da: 
1:dc7221f: public class TombstoneOverwhelmingException extends RuntimeException
2:c6525da: {
1:a991b64:     public TombstoneOverwhelmingException(int numTombstones, String query, CFMetaData metadata, DecoratedKey lastPartitionKey, ClusteringPrefix lastClustering)
1:c6525da:     {
1:a991b64:         super(String.format("Scanned over %d tombstones during query '%s' (last scanned row partion key was (%s)); query aborted",
1:a991b64:                             numTombstones, query, makePKString(metadata, lastPartitionKey.getKey(), lastClustering)));
2:c6525da:     }
1:c6525da: 
1:a991b64:     private static String makePKString(CFMetaData metadata, ByteBuffer partitionKey, ClusteringPrefix clustering)
1:c6525da:     {
1:a991b64:         StringBuilder sb = new StringBuilder();
1:c6525da: 
1:a991b64:         if (clustering.size() > 0)
1:a991b64:             sb.append("(");
1:c6525da: 
1:a991b64:         // TODO: We should probably make that a lot easier/transparent for partition keys
1:a991b64:         AbstractType<?> pkType = metadata.getKeyValidator();
1:a991b64:         if (pkType instanceof CompositeType)
1:a991b64:         {
1:a991b64:             CompositeType ct = (CompositeType)pkType;
1:a991b64:             ByteBuffer[] values = ct.split(partitionKey);
1:a991b64:             for (int i = 0; i < values.length; i++)
1:a991b64:             {
1:a991b64:                 if (i > 0)
1:a991b64:                     sb.append(", ");
1:a991b64:                 sb.append(ct.types.get(i).getString(values[i]));
1:a991b64:             }
1:a991b64:         }
1:a991b64:         else
1:a991b64:         {
1:a991b64:             sb.append(pkType.getString(partitionKey));
1:a991b64:         }
1:a991b64: 
1:a991b64:         if (clustering.size() > 0)
1:a991b64:             sb.append(")");
1:a991b64: 
1:a991b64:         for (int i = 0; i < clustering.size(); i++)
1:a991b64:             sb.append(", ").append(metadata.comparator.subtype(i).getString(clustering.get(i)));
1:a991b64: 
1:a991b64:         return sb.toString();
1:c6525da:     }
1:c6525da: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.*;
1:     public TombstoneOverwhelmingException(int numTombstones, String query, CFMetaData metadata, DecoratedKey lastPartitionKey, ClusteringPrefix lastClustering)
1:         super(String.format("Scanned over %d tombstones during query '%s' (last scanned row partion key was (%s)); query aborted",
1:                             numTombstones, query, makePKString(metadata, lastPartitionKey.getKey(), lastClustering)));
1:     private static String makePKString(CFMetaData metadata, ByteBuffer partitionKey, ClusteringPrefix clustering)
1:         StringBuilder sb = new StringBuilder();
1:         if (clustering.size() > 0)
1:             sb.append("(");
1:         // TODO: We should probably make that a lot easier/transparent for partition keys
1:         AbstractType<?> pkType = metadata.getKeyValidator();
1:         if (pkType instanceof CompositeType)
1:         {
1:             CompositeType ct = (CompositeType)pkType;
1:             ByteBuffer[] values = ct.split(partitionKey);
1:             for (int i = 0; i < values.length; i++)
1:             {
1:                 if (i > 0)
1:                     sb.append(", ");
1:                 sb.append(ct.types.get(i).getString(values[i]));
1:             }
1:         }
1:         else
1:         {
1:             sb.append(pkType.getString(partitionKey));
1:         }
1: 
1:         if (clustering.size() > 0)
1:             sb.append(")");
1: 
1:         for (int i = 0; i < clustering.size(); i++)
1:             sb.append(", ").append(metadata.comparator.subtype(i).getString(clustering.get(i)));
1: 
1:         return sb.toString();
commit:b6147c1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:83e6820
author:Christian Spriegel
-------------------------------------------------------------------------------
commit:c6525da
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DecoratedKey;
1: 
1: 
0:     private final int numTombstones;
0:     private final int numRequested;
0:     private final String ksName;
0:     private final String cfName;
0:     private final String lastCellName;
0:     private final String slicesInfo;
0:     private final String deletionInfo;
0:     private String partitionKey = null;
1: 
0:     public TombstoneOverwhelmingException(int numTombstones, int numRequested, String ksName, String cfName,
0:                                           String lastCellName, String slicesInfo, String deletionInfo)
1:     {
0:         this.numTombstones = numTombstones;
0:         this.numRequested = numRequested;
0:         this.ksName = ksName;
0:         this.cfName = cfName;
0:         this.lastCellName = lastCellName;
0:         this.slicesInfo = slicesInfo;
0:         this.deletionInfo = deletionInfo;
1:     }
1: 
0:     public void setKey(DecoratedKey key)
1:     {
0:         if(key != null)
0:             this.partitionKey = key.toString();
1:     }
1: 
0:     public String getLocalizedMessage()
1:     {
0:         return getMessage();
1:     }
1: 
0:     public String getMessage()
1:     {
0:         return String.format(
0:                 "Scanned over %d tombstones in %s.%s; %d columns were requested; query aborted " +
0:                 "(see tombstone_failure_threshold); partitionKey=%s; lastCell=%s; delInfo=%s; slices=%s",
0:                 numTombstones, ksName, cfName, numRequested, partitionKey, lastCellName, deletionInfo, slicesInfo);
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:dc7221f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.filter;
0: 
1: public class TombstoneOverwhelmingException extends RuntimeException
0: {
0: }
============================================================================