1:2f41243: /*
1:2f41243: * Licensed to the Apache Software Foundation (ASF) under one
1:2f41243: * or more contributor license agreements.  See the NOTICE file
1:2f41243: * distributed with this work for additional information
1:2f41243: * regarding copyright ownership.  The ASF licenses this file
1:2f41243: * to you under the Apache License, Version 2.0 (the
1:2f41243: * "License"); you may not use this file except in compliance
1:2f41243: * with the License.  You may obtain a copy of the License at
1:2f41243: *
1:2f41243: *    http://www.apache.org/licenses/LICENSE-2.0
1:2f41243: *
1:2f41243: * Unless required by applicable law or agreed to in writing,
1:2f41243: * software distributed under the License is distributed on an
1:2f41243: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2f41243: * KIND, either express or implied.  See the License for the
1:2f41243: * specific language governing permissions and limitations
1:2f41243: * under the License.
1:2f41243: */
1:2f41243: package org.apache.cassandra.db;
1:2f41243: 
1:2f41243: import java.nio.ByteBuffer;
1:2f41243: import java.nio.ByteOrder;
1:2f41243: 
1:2f41243: import org.apache.cassandra.utils.ObjectSizes;
1:2f41243: import org.apache.cassandra.utils.concurrent.OpOrder;
1:2f41243: import org.apache.cassandra.utils.memory.MemoryUtil;
1:2f41243: import org.apache.cassandra.utils.memory.NativeAllocator;
1:2f41243: 
1:2f41243: public class NativeClustering extends AbstractClusteringPrefix implements Clustering
1:2f41243: {
1:2f41243:     private static final long EMPTY_SIZE = ObjectSizes.measure(new NativeClustering());
1:2f41243: 
1:2f41243:     private final long peer;
1:2f41243: 
1:2f41243:     private NativeClustering() { peer = 0; }
1:2f41243: 
1:2f41243:     public NativeClustering(NativeAllocator allocator, OpOrder.Group writeOp, Clustering clustering)
1:2f41243:     {
1:2f41243:         int count = clustering.size();
1:2f41243:         int metadataSize = (count * 2) + 4;
1:2f41243:         int dataSize = clustering.dataSize();
1:2f41243:         int bitmapSize = ((count + 7) >>> 3);
1:2f41243: 
1:2f41243:         assert count < 64 << 10;
1:2f41243:         assert dataSize < 64 << 10;
1:2f41243: 
1:2f41243:         peer = allocator.allocate(metadataSize + dataSize + bitmapSize, writeOp);
1:2f41243:         long bitmapStart = peer + metadataSize;
1:2f41243:         MemoryUtil.setShort(peer, (short) count);
1:2f41243:         MemoryUtil.setShort(peer + (metadataSize - 2), (short) dataSize); // goes at the end of the other offsets
1:2f41243: 
1:2f41243:         MemoryUtil.setByte(bitmapStart, bitmapSize, (byte) 0);
1:2f41243:         long dataStart = peer + metadataSize + bitmapSize;
1:2f41243:         int dataOffset = 0;
1:2f41243:         for (int i = 0 ; i < count ; i++)
1:2f41243:         {
1:2f41243:             MemoryUtil.setShort(peer + 2 + i * 2, (short) dataOffset);
1:2f41243: 
1:2f41243:             ByteBuffer value = clustering.get(i);
1:2f41243:             if (value == null)
1:2f41243:             {
1:2f41243:                 long boffset = bitmapStart + (i >>> 3);
1:2f41243:                 int b = MemoryUtil.getByte(boffset);
1:2f41243:                 b |= 1 << (i & 7);
1:2f41243:                 MemoryUtil.setByte(boffset, (byte) b);
1:2f41243:                 continue;
1:2f41243:             }
1:2f41243: 
1:2f41243:             assert value.order() == ByteOrder.BIG_ENDIAN;
1:2f41243: 
1:2f41243:             int size = value.remaining();
1:2f41243:             MemoryUtil.setBytes(dataStart + dataOffset, value);
1:2f41243:             dataOffset += size;
1:2f41243:         }
1:2f41243:     }
1:2f41243: 
1:2f41243:     public Kind kind()
1:2f41243:     {
1:2f41243:         return Kind.CLUSTERING;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public int size()
1:2f41243:     {
1:2f41243:         return MemoryUtil.getShort(peer);
1:2f41243:     }
1:2f41243: 
1:2f41243:     public ByteBuffer get(int i)
1:2f41243:     {
1:2f41243:         // offset at which we store the dataOffset
1:2f41243:         int size = size();
1:2f41243:         if (i >= size)
1:2f41243:             throw new IndexOutOfBoundsException();
1:2f41243: 
1:2f41243:         int metadataSize = (size * 2) + 4;
1:2f41243:         int bitmapSize = ((size + 7) >>> 3);
1:2f41243:         long bitmapStart = peer + metadataSize;
1:2f41243:         int b = MemoryUtil.getByte(bitmapStart + (i >>> 3));
1:2f41243:         if ((b & (1 << (i & 7))) != 0)
1:2f41243:             return null;
1:2f41243: 
1:2f41243:         int startOffset = MemoryUtil.getShort(peer + 2 + i * 2);
1:2f41243:         int endOffset = MemoryUtil.getShort(peer + 4 + i * 2);
1:2f41243:         return MemoryUtil.getByteBuffer(bitmapStart + bitmapSize + startOffset,
1:2f41243:                                         endOffset - startOffset,
1:2f41243:                                         ByteOrder.BIG_ENDIAN);
1:2f41243:     }
1:2f41243: 
1:2f41243:     public ByteBuffer[] getRawValues()
1:2f41243:     {
1:2f41243:         ByteBuffer[] values = new ByteBuffer[size()];
1:2f41243:         for (int i = 0 ; i < values.length ; i++)
1:2f41243:             values[i] = get(i);
1:2f41243:         return values;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public long unsharedHeapSize()
1:2f41243:     {
1:2f41243:         return EMPTY_SIZE;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public long unsharedHeapSizeExcludingData()
1:2f41243:     {
1:2f41243:         return EMPTY_SIZE;
1:2f41243:     }
1:2f41243: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: import java.nio.ByteOrder;
1: 
1: import org.apache.cassandra.utils.ObjectSizes;
1: import org.apache.cassandra.utils.concurrent.OpOrder;
1: import org.apache.cassandra.utils.memory.MemoryUtil;
1: import org.apache.cassandra.utils.memory.NativeAllocator;
1: 
1: public class NativeClustering extends AbstractClusteringPrefix implements Clustering
1: {
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new NativeClustering());
1: 
1:     private final long peer;
1: 
1:     private NativeClustering() { peer = 0; }
1: 
1:     public NativeClustering(NativeAllocator allocator, OpOrder.Group writeOp, Clustering clustering)
1:     {
1:         int count = clustering.size();
1:         int metadataSize = (count * 2) + 4;
1:         int dataSize = clustering.dataSize();
1:         int bitmapSize = ((count + 7) >>> 3);
1: 
1:         assert count < 64 << 10;
1:         assert dataSize < 64 << 10;
1: 
1:         peer = allocator.allocate(metadataSize + dataSize + bitmapSize, writeOp);
1:         long bitmapStart = peer + metadataSize;
1:         MemoryUtil.setShort(peer, (short) count);
1:         MemoryUtil.setShort(peer + (metadataSize - 2), (short) dataSize); // goes at the end of the other offsets
1: 
1:         MemoryUtil.setByte(bitmapStart, bitmapSize, (byte) 0);
1:         long dataStart = peer + metadataSize + bitmapSize;
1:         int dataOffset = 0;
1:         for (int i = 0 ; i < count ; i++)
1:         {
1:             MemoryUtil.setShort(peer + 2 + i * 2, (short) dataOffset);
1: 
1:             ByteBuffer value = clustering.get(i);
1:             if (value == null)
1:             {
1:                 long boffset = bitmapStart + (i >>> 3);
1:                 int b = MemoryUtil.getByte(boffset);
1:                 b |= 1 << (i & 7);
1:                 MemoryUtil.setByte(boffset, (byte) b);
1:                 continue;
1:             }
1: 
1:             assert value.order() == ByteOrder.BIG_ENDIAN;
1: 
1:             int size = value.remaining();
1:             MemoryUtil.setBytes(dataStart + dataOffset, value);
1:             dataOffset += size;
1:         }
1:     }
1: 
1:     public Kind kind()
1:     {
1:         return Kind.CLUSTERING;
1:     }
1: 
1:     public int size()
1:     {
1:         return MemoryUtil.getShort(peer);
1:     }
1: 
1:     public ByteBuffer get(int i)
1:     {
1:         // offset at which we store the dataOffset
1:         int size = size();
1:         if (i >= size)
1:             throw new IndexOutOfBoundsException();
1: 
1:         int metadataSize = (size * 2) + 4;
1:         int bitmapSize = ((size + 7) >>> 3);
1:         long bitmapStart = peer + metadataSize;
1:         int b = MemoryUtil.getByte(bitmapStart + (i >>> 3));
1:         if ((b & (1 << (i & 7))) != 0)
1:             return null;
1: 
1:         int startOffset = MemoryUtil.getShort(peer + 2 + i * 2);
1:         int endOffset = MemoryUtil.getShort(peer + 4 + i * 2);
1:         return MemoryUtil.getByteBuffer(bitmapStart + bitmapSize + startOffset,
1:                                         endOffset - startOffset,
1:                                         ByteOrder.BIG_ENDIAN);
1:     }
1: 
1:     public ByteBuffer[] getRawValues()
1:     {
1:         ByteBuffer[] values = new ByteBuffer[size()];
1:         for (int i = 0 ; i < values.length ; i++)
1:             values[i] = get(i);
1:         return values;
1:     }
1: 
1:     public long unsharedHeapSize()
1:     {
1:         return EMPTY_SIZE;
1:     }
1: 
1:     public long unsharedHeapSizeExcludingData()
1:     {
1:         return EMPTY_SIZE;
1:     }
1: }
============================================================================