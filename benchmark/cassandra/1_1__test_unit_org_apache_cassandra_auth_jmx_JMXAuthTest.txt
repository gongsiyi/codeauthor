1:7b0c716: /*
1:7b0c716:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b0c716:  * or more contributor license agreements.  See the NOTICE file
1:7b0c716:  * distributed with this work for additional information
1:7b0c716:  * regarding copyright ownership.  The ASF licenses this file
1:7b0c716:  * to you under the Apache License, Version 2.0 (the
1:7b0c716:  * "License"); you may not use this file except in compliance
1:7b0c716:  * with the License.  You may obtain a copy of the License at
1:7b0c716:  *
1:7b0c716:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7b0c716:  *
1:7b0c716:  * Unless required by applicable law or agreed to in writing, software
1:7b0c716:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7b0c716:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7b0c716:  * See the License for the specific language governing permissions and
1:7b0c716:  * limitations under the License.
1:7b0c716:  */
1:7b0c716: 
1:7b0c716: package org.apache.cassandra.auth.jmx;
1:7b0c716: 
1:7b0c716: import java.lang.reflect.Field;
1:7b0c716: import java.nio.file.Paths;
1:7b0c716: import java.rmi.server.RMISocketFactory;
1:7b0c716: import java.util.HashMap;
1:7b0c716: import java.util.Map;
1:7b0c716: import javax.management.JMX;
1:7b0c716: import javax.management.MBeanServerConnection;
1:7b0c716: import javax.management.ObjectName;
1:7b0c716: import javax.management.remote.*;
1:7b0c716: import javax.security.auth.Subject;
1:7b0c716: import javax.security.auth.callback.CallbackHandler;
1:7b0c716: import javax.security.auth.login.LoginException;
1:7b0c716: import javax.security.auth.spi.LoginModule;
1:7b0c716: 
1:7b0c716: import com.google.common.collect.ImmutableSet;
1:7b0c716: import org.junit.Before;
1:7b0c716: import org.junit.BeforeClass;
1:7b0c716: import org.junit.Test;
1:7b0c716: 
1:7b0c716: import org.apache.cassandra.auth.*;
1:7b0c716: import org.apache.cassandra.config.DatabaseDescriptor;
1:7b0c716: import org.apache.cassandra.cql3.CQLTester;
1:7b0c716: import org.apache.cassandra.db.ColumnFamilyStoreMBean;
1:7b0c716: import org.apache.cassandra.utils.JMXServerUtils;
1:7b0c716: 
1:7b0c716: import static org.junit.Assert.assertEquals;
1:7b0c716: import static org.junit.Assert.fail;
1:7b0c716: 
1:7b0c716: public class JMXAuthTest extends CQLTester
1:7b0c716: {
1:7b0c716:     private static JMXConnectorServer jmxServer;
1:7b0c716:     private static MBeanServerConnection connection;
1:7b0c716:     private RoleResource role;
1:7b0c716:     private String tableName;
1:7b0c716:     private JMXResource tableMBean;
1:7b0c716: 
1:7b0c716:     @FunctionalInterface
1:7b0c716:     private interface MBeanAction
1:7b0c716:     {
1:7b0c716:         void execute();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @BeforeClass
1:7b0c716:     public static void setupClass() throws Exception
1:7b0c716:     {
1:7b0c716:         setupAuthorizer();
1:7b0c716:         setupJMXServer();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private static void setupAuthorizer()
1:7b0c716:     {
1:7b0c716:         try
1:7b0c716:         {
1:7b0c716:             IAuthorizer authorizer = new StubAuthorizer();
1:7b0c716:             Field authorizerField = DatabaseDescriptor.class.getDeclaredField("authorizer");
1:7b0c716:             authorizerField.setAccessible(true);
1:7b0c716:             authorizerField.set(null, authorizer);
1:7b0c716:             DatabaseDescriptor.setPermissionsValidity(0);
1:7b0c716:         }
1:7b0c716:         catch (IllegalAccessException | NoSuchFieldException e)
1:7b0c716:         {
1:7b0c716:             throw new RuntimeException(e);
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private static void setupJMXServer() throws Exception
1:7b0c716:     {
1:7b0c716:         String config = Paths.get(ClassLoader.getSystemResource("auth/cassandra-test-jaas.conf").toURI()).toString();
1:7b0c716:         System.setProperty("com.sun.management.jmxremote.authenticate", "true");
1:7b0c716:         System.setProperty("java.security.auth.login.config", config);
1:7b0c716:         System.setProperty("cassandra.jmx.remote.login.config", "TestLogin");
1:7b0c716:         System.setProperty("cassandra.jmx.authorizer", NoSuperUserAuthorizationProxy.class.getName());
1:7b0c716:         jmxServer = JMXServerUtils.createJMXServer(9999, true);
1:7b0c716:         jmxServer.start();
1:7b0c716: 
1:7b0c716:         JMXServiceURL jmxUrl = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi");
1:7b0c716:         Map<String, Object> env = new HashMap<>();
1:7b0c716:         env.put("com.sun.jndi.rmi.factory.socket", RMISocketFactory.getDefaultSocketFactory());
1:7b0c716:         JMXConnector jmxc = JMXConnectorFactory.connect(jmxUrl, env);
1:7b0c716:         connection = jmxc.getMBeanServerConnection();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Before
1:7b0c716:     public void setup() throws Throwable
1:7b0c716:     {
1:7b0c716:         role = RoleResource.role("test_role");
1:7b0c716:         clearAllPermissions();
1:7b0c716:         tableName = createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k))");
1:7b0c716:         tableMBean = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,table=%s",
1:7b0c716:                                                      KEYSPACE, tableName));
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Test
1:7b0c716:     public void readAttribute() throws Throwable
1:7b0c716:     {
1:7b0c716:         ColumnFamilyStoreMBean proxy = JMX.newMBeanProxy(connection,
1:7b0c716:                                                          ObjectName.getInstance(tableMBean.getObjectName()),
1:7b0c716:                                                          ColumnFamilyStoreMBean.class);
1:7b0c716: 
1:7b0c716:         // grant SELECT on a single specific Table mbean
1:7b0c716:         assertPermissionOnResource(Permission.SELECT, tableMBean, proxy::getTableName);
1:7b0c716: 
1:7b0c716:         // grant SELECT on all Table mbeans in named keyspace
1:7b0c716:         clearAllPermissions();
1:7b0c716:         JMXResource allTablesInKeyspace = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,*",
1:7b0c716:                                                                           KEYSPACE));
1:7b0c716:         assertPermissionOnResource(Permission.SELECT, allTablesInKeyspace, proxy::getTableName);
1:7b0c716: 
1:7b0c716:         // grant SELECT on all Table mbeans
1:7b0c716:         clearAllPermissions();
1:7b0c716:         JMXResource allTables = JMXResource.mbean("org.apache.cassandra.db:type=Tables,*");
1:7b0c716:         assertPermissionOnResource(Permission.SELECT, allTables, proxy::getTableName);
1:7b0c716: 
1:7b0c716:         // grant SELECT ON ALL MBEANS
1:7b0c716:         clearAllPermissions();
1:7b0c716:         assertPermissionOnResource(Permission.SELECT, JMXResource.root(), proxy::getTableName);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Test
1:7b0c716:     public void writeAttribute() throws Throwable
1:7b0c716:     {
1:7b0c716:         ColumnFamilyStoreMBean proxy = JMX.newMBeanProxy(connection,
1:7b0c716:                                                          ObjectName.getInstance(tableMBean.getObjectName()),
1:7b0c716:                                                          ColumnFamilyStoreMBean.class);
1:7b0c716:         MBeanAction action = () -> proxy.setMinimumCompactionThreshold(4);
1:7b0c716: 
1:7b0c716:         // grant MODIFY on a single specific Table mbean
1:7b0c716:         assertPermissionOnResource(Permission.MODIFY, tableMBean, action);
1:7b0c716: 
1:7b0c716:         // grant MODIFY on all Table mbeans in named keyspace
1:7b0c716:         clearAllPermissions();
1:7b0c716:         JMXResource allTablesInKeyspace = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,*",
1:7b0c716:                                                                           KEYSPACE));
1:7b0c716:         assertPermissionOnResource(Permission.MODIFY, allTablesInKeyspace, action);
1:7b0c716: 
1:7b0c716:         // grant MODIFY on all Table mbeans
1:7b0c716:         clearAllPermissions();
1:7b0c716:         JMXResource allTables = JMXResource.mbean("org.apache.cassandra.db:type=Tables,*");
1:7b0c716:         assertPermissionOnResource(Permission.MODIFY, allTables, action);
1:7b0c716: 
1:7b0c716:         // grant MODIFY ON ALL MBEANS
1:7b0c716:         clearAllPermissions();
1:7b0c716:         assertPermissionOnResource(Permission.MODIFY, JMXResource.root(), action);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     @Test
1:7b0c716:     public void executeMethod() throws Throwable
1:7b0c716:     {
1:7b0c716:         ColumnFamilyStoreMBean proxy = JMX.newMBeanProxy(connection,
1:7b0c716:                                                          ObjectName.getInstance(tableMBean.getObjectName()),
1:7b0c716:                                                          ColumnFamilyStoreMBean.class);
1:7b0c716: 
1:7b0c716:         // grant EXECUTE on a single specific Table mbean
1:7b0c716:         assertPermissionOnResource(Permission.EXECUTE, tableMBean, proxy::estimateKeys);
1:7b0c716: 
1:7b0c716:         // grant EXECUTE on all Table mbeans in named keyspace
1:7b0c716:         clearAllPermissions();
1:7b0c716:         JMXResource allTablesInKeyspace = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,*",
1:7b0c716:                                                                           KEYSPACE));
1:7b0c716:         assertPermissionOnResource(Permission.EXECUTE, allTablesInKeyspace, proxy::estimateKeys);
1:7b0c716: 
1:7b0c716:         // grant EXECUTE on all Table mbeans
1:7b0c716:         clearAllPermissions();
1:7b0c716:         JMXResource allTables = JMXResource.mbean("org.apache.cassandra.db:type=Tables,*");
1:7b0c716:         assertPermissionOnResource(Permission.EXECUTE, allTables, proxy::estimateKeys);
1:7b0c716: 
1:7b0c716:         // grant EXECUTE ON ALL MBEANS
1:7b0c716:         clearAllPermissions();
1:7b0c716:         assertPermissionOnResource(Permission.EXECUTE, JMXResource.root(), proxy::estimateKeys);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private void assertPermissionOnResource(Permission permission,
1:7b0c716:                                             JMXResource resource,
1:7b0c716:                                             MBeanAction action)
1:7b0c716:     {
1:7b0c716:         assertUnauthorized(action);
1:7b0c716:         grantPermission(permission, resource, role);
1:7b0c716:         assertAuthorized(action);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private void grantPermission(Permission permission, JMXResource resource, RoleResource role)
1:7b0c716:     {
1:7b0c716:         DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:7b0c716:                                                  ImmutableSet.of(permission),
1:7b0c716:                                                  resource,
1:7b0c716:                                                  role);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private void assertAuthorized(MBeanAction action)
1:7b0c716:     {
1:7b0c716:         action.execute();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private void assertUnauthorized(MBeanAction action)
1:7b0c716:     {
1:7b0c716:         try
1:7b0c716:         {
1:7b0c716:             action.execute();
1:7b0c716:             fail("Expected an UnauthorizedException, but none was thrown");
1:7b0c716:         }
1:7b0c716:         catch (SecurityException e)
1:7b0c716:         {
1:7b0c716:             assertEquals("Access Denied", e.getLocalizedMessage());
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private void clearAllPermissions()
1:7b0c716:     {
1:7b0c716:         ((StubAuthorizer) DatabaseDescriptor.getAuthorizer()).clear();
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     public static class StubLoginModule implements LoginModule
1:7b0c716:     {
1:7b0c716:         private CassandraPrincipal principal;
1:7b0c716:         private Subject subject;
1:7b0c716: 
1:7b0c716:         public StubLoginModule(){}
1:7b0c716: 
1:7b0c716:         public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options)
1:7b0c716:         {
1:7b0c716:             this.subject = subject;
1:7b0c716:             principal = new CassandraPrincipal((String)options.get("role_name"));
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         public boolean login() throws LoginException
1:7b0c716:         {
1:7b0c716:             return true;
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         public boolean commit() throws LoginException
1:7b0c716:         {
1:7b0c716:             if (!subject.getPrincipals().contains(principal))
1:7b0c716:                 subject.getPrincipals().add(principal);
1:7b0c716:             return true;
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         public boolean abort() throws LoginException
1:7b0c716:         {
1:7b0c716:             return true;
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         public boolean logout() throws LoginException
1:7b0c716:         {
1:7b0c716:             return true;
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     // always answers false to isSuperUser and true to isAuthSetup complete - saves us having to initialize
1:7b0c716:     // a real IRoleManager and StorageService for the test
1:7b0c716:     public static class NoSuperUserAuthorizationProxy extends AuthorizationProxy
1:7b0c716:     {
1:7b0c716:         public NoSuperUserAuthorizationProxy()
1:7b0c716:         {
1:7b0c716:             super();
1:7b0c716:             this.isSuperuser = (role) -> false;
1:7b0c716:             this.isAuthSetupComplete = () -> true;
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.auth.jmx;
1: 
1: import java.lang.reflect.Field;
1: import java.nio.file.Paths;
1: import java.rmi.server.RMISocketFactory;
1: import java.util.HashMap;
1: import java.util.Map;
1: import javax.management.JMX;
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectName;
1: import javax.management.remote.*;
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.login.LoginException;
1: import javax.security.auth.spi.LoginModule;
1: 
1: import com.google.common.collect.ImmutableSet;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.auth.*;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.db.ColumnFamilyStoreMBean;
1: import org.apache.cassandra.utils.JMXServerUtils;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: public class JMXAuthTest extends CQLTester
1: {
1:     private static JMXConnectorServer jmxServer;
1:     private static MBeanServerConnection connection;
1:     private RoleResource role;
1:     private String tableName;
1:     private JMXResource tableMBean;
1: 
1:     @FunctionalInterface
1:     private interface MBeanAction
1:     {
1:         void execute();
1:     }
1: 
1:     @BeforeClass
1:     public static void setupClass() throws Exception
1:     {
1:         setupAuthorizer();
1:         setupJMXServer();
1:     }
1: 
1:     private static void setupAuthorizer()
1:     {
1:         try
1:         {
1:             IAuthorizer authorizer = new StubAuthorizer();
1:             Field authorizerField = DatabaseDescriptor.class.getDeclaredField("authorizer");
1:             authorizerField.setAccessible(true);
1:             authorizerField.set(null, authorizer);
1:             DatabaseDescriptor.setPermissionsValidity(0);
1:         }
1:         catch (IllegalAccessException | NoSuchFieldException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     private static void setupJMXServer() throws Exception
1:     {
1:         String config = Paths.get(ClassLoader.getSystemResource("auth/cassandra-test-jaas.conf").toURI()).toString();
1:         System.setProperty("com.sun.management.jmxremote.authenticate", "true");
1:         System.setProperty("java.security.auth.login.config", config);
1:         System.setProperty("cassandra.jmx.remote.login.config", "TestLogin");
1:         System.setProperty("cassandra.jmx.authorizer", NoSuperUserAuthorizationProxy.class.getName());
1:         jmxServer = JMXServerUtils.createJMXServer(9999, true);
1:         jmxServer.start();
1: 
1:         JMXServiceURL jmxUrl = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi");
1:         Map<String, Object> env = new HashMap<>();
1:         env.put("com.sun.jndi.rmi.factory.socket", RMISocketFactory.getDefaultSocketFactory());
1:         JMXConnector jmxc = JMXConnectorFactory.connect(jmxUrl, env);
1:         connection = jmxc.getMBeanServerConnection();
1:     }
1: 
1:     @Before
1:     public void setup() throws Throwable
1:     {
1:         role = RoleResource.role("test_role");
1:         clearAllPermissions();
1:         tableName = createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k))");
1:         tableMBean = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,table=%s",
1:                                                      KEYSPACE, tableName));
1:     }
1: 
1:     @Test
1:     public void readAttribute() throws Throwable
1:     {
1:         ColumnFamilyStoreMBean proxy = JMX.newMBeanProxy(connection,
1:                                                          ObjectName.getInstance(tableMBean.getObjectName()),
1:                                                          ColumnFamilyStoreMBean.class);
1: 
1:         // grant SELECT on a single specific Table mbean
1:         assertPermissionOnResource(Permission.SELECT, tableMBean, proxy::getTableName);
1: 
1:         // grant SELECT on all Table mbeans in named keyspace
1:         clearAllPermissions();
1:         JMXResource allTablesInKeyspace = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,*",
1:                                                                           KEYSPACE));
1:         assertPermissionOnResource(Permission.SELECT, allTablesInKeyspace, proxy::getTableName);
1: 
1:         // grant SELECT on all Table mbeans
1:         clearAllPermissions();
1:         JMXResource allTables = JMXResource.mbean("org.apache.cassandra.db:type=Tables,*");
1:         assertPermissionOnResource(Permission.SELECT, allTables, proxy::getTableName);
1: 
1:         // grant SELECT ON ALL MBEANS
1:         clearAllPermissions();
1:         assertPermissionOnResource(Permission.SELECT, JMXResource.root(), proxy::getTableName);
1:     }
1: 
1:     @Test
1:     public void writeAttribute() throws Throwable
1:     {
1:         ColumnFamilyStoreMBean proxy = JMX.newMBeanProxy(connection,
1:                                                          ObjectName.getInstance(tableMBean.getObjectName()),
1:                                                          ColumnFamilyStoreMBean.class);
1:         MBeanAction action = () -> proxy.setMinimumCompactionThreshold(4);
1: 
1:         // grant MODIFY on a single specific Table mbean
1:         assertPermissionOnResource(Permission.MODIFY, tableMBean, action);
1: 
1:         // grant MODIFY on all Table mbeans in named keyspace
1:         clearAllPermissions();
1:         JMXResource allTablesInKeyspace = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,*",
1:                                                                           KEYSPACE));
1:         assertPermissionOnResource(Permission.MODIFY, allTablesInKeyspace, action);
1: 
1:         // grant MODIFY on all Table mbeans
1:         clearAllPermissions();
1:         JMXResource allTables = JMXResource.mbean("org.apache.cassandra.db:type=Tables,*");
1:         assertPermissionOnResource(Permission.MODIFY, allTables, action);
1: 
1:         // grant MODIFY ON ALL MBEANS
1:         clearAllPermissions();
1:         assertPermissionOnResource(Permission.MODIFY, JMXResource.root(), action);
1:     }
1: 
1:     @Test
1:     public void executeMethod() throws Throwable
1:     {
1:         ColumnFamilyStoreMBean proxy = JMX.newMBeanProxy(connection,
1:                                                          ObjectName.getInstance(tableMBean.getObjectName()),
1:                                                          ColumnFamilyStoreMBean.class);
1: 
1:         // grant EXECUTE on a single specific Table mbean
1:         assertPermissionOnResource(Permission.EXECUTE, tableMBean, proxy::estimateKeys);
1: 
1:         // grant EXECUTE on all Table mbeans in named keyspace
1:         clearAllPermissions();
1:         JMXResource allTablesInKeyspace = JMXResource.mbean(String.format("org.apache.cassandra.db:type=Tables,keyspace=%s,*",
1:                                                                           KEYSPACE));
1:         assertPermissionOnResource(Permission.EXECUTE, allTablesInKeyspace, proxy::estimateKeys);
1: 
1:         // grant EXECUTE on all Table mbeans
1:         clearAllPermissions();
1:         JMXResource allTables = JMXResource.mbean("org.apache.cassandra.db:type=Tables,*");
1:         assertPermissionOnResource(Permission.EXECUTE, allTables, proxy::estimateKeys);
1: 
1:         // grant EXECUTE ON ALL MBEANS
1:         clearAllPermissions();
1:         assertPermissionOnResource(Permission.EXECUTE, JMXResource.root(), proxy::estimateKeys);
1:     }
1: 
1:     private void assertPermissionOnResource(Permission permission,
1:                                             JMXResource resource,
1:                                             MBeanAction action)
1:     {
1:         assertUnauthorized(action);
1:         grantPermission(permission, resource, role);
1:         assertAuthorized(action);
1:     }
1: 
1:     private void grantPermission(Permission permission, JMXResource resource, RoleResource role)
1:     {
1:         DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:                                                  ImmutableSet.of(permission),
1:                                                  resource,
1:                                                  role);
1:     }
1: 
1:     private void assertAuthorized(MBeanAction action)
1:     {
1:         action.execute();
1:     }
1: 
1:     private void assertUnauthorized(MBeanAction action)
1:     {
1:         try
1:         {
1:             action.execute();
1:             fail("Expected an UnauthorizedException, but none was thrown");
1:         }
1:         catch (SecurityException e)
1:         {
1:             assertEquals("Access Denied", e.getLocalizedMessage());
1:         }
1:     }
1: 
1:     private void clearAllPermissions()
1:     {
1:         ((StubAuthorizer) DatabaseDescriptor.getAuthorizer()).clear();
1:     }
1: 
1:     public static class StubLoginModule implements LoginModule
1:     {
1:         private CassandraPrincipal principal;
1:         private Subject subject;
1: 
1:         public StubLoginModule(){}
1: 
1:         public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options)
1:         {
1:             this.subject = subject;
1:             principal = new CassandraPrincipal((String)options.get("role_name"));
1:         }
1: 
1:         public boolean login() throws LoginException
1:         {
1:             return true;
1:         }
1: 
1:         public boolean commit() throws LoginException
1:         {
1:             if (!subject.getPrincipals().contains(principal))
1:                 subject.getPrincipals().add(principal);
1:             return true;
1:         }
1: 
1:         public boolean abort() throws LoginException
1:         {
1:             return true;
1:         }
1: 
1:         public boolean logout() throws LoginException
1:         {
1:             return true;
1:         }
1:     }
1: 
1:     // always answers false to isSuperUser and true to isAuthSetup complete - saves us having to initialize
1:     // a real IRoleManager and StorageService for the test
1:     public static class NoSuperUserAuthorizationProxy extends AuthorizationProxy
1:     {
1:         public NoSuperUserAuthorizationProxy()
1:         {
1:             super();
1:             this.isSuperuser = (role) -> false;
1:             this.isAuthSetupComplete = () -> true;
1:         }
1:     }
1: }
============================================================================