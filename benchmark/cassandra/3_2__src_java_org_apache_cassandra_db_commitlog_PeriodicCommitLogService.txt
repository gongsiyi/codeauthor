1:22e18f5: /*
1:22e18f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:22e18f5:  * or more contributor license agreements.  See the NOTICE file
1:22e18f5:  * distributed with this work for additional information
1:22e18f5:  * regarding copyright ownership.  The ASF licenses this file
1:22e18f5:  * to you under the Apache License, Version 2.0 (the
1:22e18f5:  * "License"); you may not use this file except in compliance
1:22e18f5:  * with the License.  You may obtain a copy of the License at
1:22e18f5:  *
1:22e18f5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:22e18f5:  *
1:22e18f5:  * Unless required by applicable law or agreed to in writing, software
1:22e18f5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:22e18f5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:22e18f5:  * See the License for the specific language governing permissions and
1:22e18f5:  * limitations under the License.
2:22e18f5:  */
1:22e18f5: package org.apache.cassandra.db.commitlog;
3:22e18f5: 
1:22e18f5: import org.apache.cassandra.config.DatabaseDescriptor;
1:22e18f5: 
1:22e18f5: class PeriodicCommitLogService extends AbstractCommitLogService
3:22e18f5: {
1:e8907c1:     private static final long blockWhenSyncLagsNanos = (long) (DatabaseDescriptor.getCommitLogSyncPeriod() * 1.5e6);
1:22e18f5: 
1:22e18f5:     public PeriodicCommitLogService(final CommitLog commitLog)
1:22e18f5:     {
1:22e18f5:         super(commitLog, "PERIODIC-COMMIT-LOG-SYNCER", DatabaseDescriptor.getCommitLogSyncPeriod());
3:22e18f5:     }
1:22e18f5: 
1:22e18f5:     protected void maybeWaitForSync(CommitLogSegment.Allocation alloc)
1:22e18f5:     {
1:e8907c1:         long expectedSyncTime = System.nanoTime() - blockWhenSyncLagsNanos;
1:e8907c1:         if (lastSyncedAt < expectedSyncTime)
1:22e18f5:         {
1:22e18f5:             pending.incrementAndGet();
1:e8907c1:             awaitSyncAt(expectedSyncTime, commitLog.metrics.waitingOnCommit.time());
1:22e18f5:             pending.decrementAndGet();
1:22e18f5:         }
1:22e18f5:     }
1:22e18f5: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e8907c1
/////////////////////////////////////////////////////////////////////////
1:     private static final long blockWhenSyncLagsNanos = (long) (DatabaseDescriptor.getCommitLogSyncPeriod() * 1.5e6);
/////////////////////////////////////////////////////////////////////////
1:         long expectedSyncTime = System.nanoTime() - blockWhenSyncLagsNanos;
1:         if (lastSyncedAt < expectedSyncTime)
1:             awaitSyncAt(expectedSyncTime, commitLog.metrics.waitingOnCommit.time());
author:blambov
-------------------------------------------------------------------------------
commit:44f8254
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 WaitQueue.Signal signal = syncComplete.register(commitLog.metrics.waitingOnCommit.time());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.concurrent.WaitQueue;
/////////////////////////////////////////////////////////////////////////
0:                 WaitQueue.Signal signal = syncComplete.register(CommitLog.instance.metrics.waitingOnCommit.time());
0:                 else
0:                     signal.cancel();
commit:22e18f5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.utils.WaitQueue;
1: 
1: class PeriodicCommitLogService extends AbstractCommitLogService
1: {
1: 
0:     private static final int blockWhenSyncLagsMillis = (int) (DatabaseDescriptor.getCommitLogSyncPeriod() * 1.5);
1: 
1:     public PeriodicCommitLogService(final CommitLog commitLog)
1:     {
1:         super(commitLog, "PERIODIC-COMMIT-LOG-SYNCER", DatabaseDescriptor.getCommitLogSyncPeriod());
1:     }
1: 
1:     protected void maybeWaitForSync(CommitLogSegment.Allocation alloc)
1:     {
0:         if (waitForSyncToCatchUp(Long.MAX_VALUE))
1:         {
0:             // wait until periodic sync() catches up with its schedule
0:             long started = System.currentTimeMillis();
1:             pending.incrementAndGet();
0:             while (waitForSyncToCatchUp(started))
1:             {
0:                 WaitQueue.Signal signal = syncComplete.register();
0:                 if (waitForSyncToCatchUp(started))
0:                     signal.awaitUninterruptibly();
1:             }
1:             pending.decrementAndGet();
1:         }
1:     }
1: 
0:     /**
0:      * @return true if sync is currently lagging behind inserts
1:      */
0:     private boolean waitForSyncToCatchUp(long started)
1:     {
0:         return started > lastSyncedAt + blockWhenSyncLagsMillis;
1:     }
1: }
============================================================================