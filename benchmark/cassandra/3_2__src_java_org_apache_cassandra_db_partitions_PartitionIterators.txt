1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.partitions;
12:a991b64: 
1:a991b64: import java.util.*;
1:a991b64: 
1:6094974: import org.apache.cassandra.db.EmptyIterators;
1:6094974: import org.apache.cassandra.db.transform.MorePartitions;
1:6094974: import org.apache.cassandra.db.transform.Transformation;
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.db.SinglePartitionReadCommand;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: 
1:a991b64: public abstract class PartitionIterators
15:a991b64: {
1:a991b64:     private PartitionIterators() {}
1:a991b64: 
1:a991b64:     @SuppressWarnings("resource") // The created resources are returned right away
1:4beb54d:     public static RowIterator getOnlyElement(final PartitionIterator iter, SinglePartitionReadCommand command)
1:a991b64:     {
1:a991b64:         // If the query has no results, we'll get an empty iterator, but we still
1:a991b64:         // want a RowIterator out of this method, so we return an empty one.
1:a991b64:         RowIterator toReturn = iter.hasNext()
1:a991b64:                              ? iter.next()
1:6094974:                              : EmptyIterators.row(command.metadata(),
1:a991b64:                                                   command.partitionKey(),
1:a991b64:                                                   command.clusteringIndexFilter().isReversed());
1:a991b64: 
1:a991b64:         // Note that in general, we should wrap the result so that it's close method actually
1:a991b64:         // close the whole PartitionIterator.
1:6094974:         class Close extends Transformation
1:a991b64:         {
1:6094974:             public void onPartitionClose()
1:a991b64:             {
1:a991b64:                 // asserting this only now because it bothers UnfilteredPartitionIterators.Serializer (which might be used
1:a991b64:                 // under the provided DataIter) if hasNext() is called before the previously returned iterator hasn't been fully consumed.
1:6094974:                 boolean hadNext = iter.hasNext();
1:a991b64:                 iter.close();
1:6094974:                 assert !hadNext;
11:a991b64:             }
1:a991b64:         }
1:6094974:         return Transformation.apply(toReturn, new Close());
1:a991b64:     }
1:a991b64: 
1:a991b64:     @SuppressWarnings("resource") // The created resources are returned right away
1:a991b64:     public static PartitionIterator concat(final List<PartitionIterator> iterators)
1:a991b64:     {
1:a991b64:         if (iterators.size() == 1)
1:a991b64:             return iterators.get(0);
1:a991b64: 
1:6094974:         class Extend implements MorePartitions<PartitionIterator>
1:a991b64:         {
1:6094974:             int i = 1;
1:6094974:             public PartitionIterator moreContents()
1:a991b64:             {
1:6094974:                 if (i >= iterators.size())
1:6094974:                     return null;
1:6094974:                 return iterators.get(i++);
1:a991b64:             }
1:a991b64:         }
1:6094974:         return MorePartitions.extend(iterators.get(0), new Extend());
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static PartitionIterator singletonIterator(RowIterator iterator)
1:a991b64:     {
1:a991b64:         return new SingletonPartitionIterator(iterator);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static void consume(PartitionIterator iterator)
1:a991b64:     {
2:a991b64:         while (iterator.hasNext())
1:a991b64:         {
2:a991b64:             try (RowIterator partition = iterator.next())
1:a991b64:             {
1:a991b64:                 while (partition.hasNext())
1:a991b64:                     partition.next();
1:a991b64:             }
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Wraps the provided iterator so it logs the returned rows for debugging purposes.
1:a991b64:      * <p>
1:a991b64:      * Note that this is only meant for debugging as this can log a very large amount of
1:a991b64:      * logging at INFO.
1:a991b64:      */
1:a991b64:     @SuppressWarnings("resource") // The created resources are returned right away
1:a991b64:     public static PartitionIterator loggingIterator(PartitionIterator iterator, final String id)
1:a991b64:     {
1:6094974:         class Logger extends Transformation<RowIterator>
1:a991b64:         {
1:6094974:             public RowIterator applyToPartition(RowIterator partition)
1:a991b64:             {
1:6094974:                 return RowIterators.loggingIterator(partition, id);
1:a991b64:             }
1:a991b64:         }
1:6094974:         return Transformation.apply(iterator, new Logger());
1:a991b64:     }
1:a991b64: 
1:a991b64:     private static class SingletonPartitionIterator extends AbstractIterator<RowIterator> implements PartitionIterator
1:a991b64:     {
1:a991b64:         private final RowIterator iterator;
1:a991b64:         private boolean returned;
1:a991b64: 
1:a991b64:         private SingletonPartitionIterator(RowIterator iterator)
1:a991b64:         {
1:a991b64:             this.iterator = iterator;
1:a991b64:         }
1:a991b64: 
1:a991b64:         protected RowIterator computeNext()
1:a991b64:         {
1:a991b64:             if (returned)
1:a991b64:                 return endOfData();
1:a991b64: 
1:a991b64:             returned = true;
1:a991b64:             return iterator;
1:a991b64:         }
1:a991b64: 
4:a991b64:         public void close()
1:a991b64:         {
1:a991b64:             iterator.close();
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4f14bc5
/////////////////////////////////////////////////////////////////////////
commit:4beb54d
/////////////////////////////////////////////////////////////////////////
1:     public static RowIterator getOnlyElement(final PartitionIterator iter, SinglePartitionReadCommand command)
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.partitions;
1: 
1: import java.util.*;
0: import java.security.MessageDigest;
1: 
0: import com.google.common.collect.AbstractIterator;
1: 
1: import org.apache.cassandra.db.SinglePartitionReadCommand;
1: import org.apache.cassandra.db.rows.*;
0: import org.apache.cassandra.io.util.FileUtils;
1: 
1: public abstract class PartitionIterators
1: {
1:     private PartitionIterators() {}
1: 
0:     public static final PartitionIterator EMPTY = new PartitionIterator()
1:     {
0:         public boolean hasNext()
1:         {
0:             return false;
1:         }
1: 
0:         public RowIterator next()
1:         {
0:             throw new NoSuchElementException();
1:         }
1: 
0:         public void remove()
1:         {
1:         }
1: 
1:         public void close()
1:         {
1:         }
0:     };
1: 
1:     @SuppressWarnings("resource") // The created resources are returned right away
0:     public static RowIterator getOnlyElement(final PartitionIterator iter, SinglePartitionReadCommand<?> command)
1:     {
1:         // If the query has no results, we'll get an empty iterator, but we still
1:         // want a RowIterator out of this method, so we return an empty one.
1:         RowIterator toReturn = iter.hasNext()
1:                              ? iter.next()
0:                              : RowIterators.emptyIterator(command.metadata(),
1:                                                           command.partitionKey(),
1:                                                           command.clusteringIndexFilter().isReversed());
1: 
1:         // Note that in general, we should wrap the result so that it's close method actually
1:         // close the whole PartitionIterator.
0:         return new WrappingRowIterator(toReturn)
1:         {
1:             public void close()
1:             {
0:                 try
1:                 {
0:                     super.close();
1:                 }
0:                 finally
1:                 {
1:                     // asserting this only now because it bothers UnfilteredPartitionIterators.Serializer (which might be used
1:                     // under the provided DataIter) if hasNext() is called before the previously returned iterator hasn't been fully consumed.
0:                     assert !iter.hasNext();
1: 
1:                     iter.close();
1:                 }
1:             }
0:         };
1:     }
1: 
1:     @SuppressWarnings("resource") // The created resources are returned right away
1:     public static PartitionIterator concat(final List<PartitionIterator> iterators)
1:     {
1:         if (iterators.size() == 1)
1:             return iterators.get(0);
1: 
0:         return new PartitionIterator()
1:         {
0:             private int idx = 0;
1: 
0:             public boolean hasNext()
1:             {
0:                 while (idx < iterators.size())
1:                 {
0:                     if (iterators.get(idx).hasNext())
0:                         return true;
1: 
0:                     ++idx;
1:                 }
0:                 return false;
1:             }
1: 
0:             public RowIterator next()
1:             {
0:                 if (!hasNext())
0:                     throw new NoSuchElementException();
0:                 return iterators.get(idx).next();
1:             }
1: 
0:             public void remove()
1:             {
0:                 throw new UnsupportedOperationException();
1:             }
1: 
1:             public void close()
1:             {
0:                 FileUtils.closeQuietly(iterators);
1:             }
0:         };
1:     }
1: 
0:     public static void digest(PartitionIterator iterator, MessageDigest digest)
1:     {
1:         while (iterator.hasNext())
1:         {
1:             try (RowIterator partition = iterator.next())
1:             {
0:                 RowIterators.digest(partition, digest);
1:             }
1:         }
1:     }
1: 
1:     public static PartitionIterator singletonIterator(RowIterator iterator)
1:     {
1:         return new SingletonPartitionIterator(iterator);
1:     }
1: 
1:     public static void consume(PartitionIterator iterator)
1:     {
1:         while (iterator.hasNext())
1:         {
1:             try (RowIterator partition = iterator.next())
1:             {
1:                 while (partition.hasNext())
1:                     partition.next();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Wraps the provided iterator so it logs the returned rows for debugging purposes.
1:      * <p>
1:      * Note that this is only meant for debugging as this can log a very large amount of
1:      * logging at INFO.
1:      */
1:     @SuppressWarnings("resource") // The created resources are returned right away
1:     public static PartitionIterator loggingIterator(PartitionIterator iterator, final String id)
1:     {
0:         return new WrappingPartitionIterator(iterator)
1:         {
0:             public RowIterator next()
1:             {
0:                 return RowIterators.loggingIterator(super.next(), id);
1:             }
0:         };
1:     }
1: 
1:     private static class SingletonPartitionIterator extends AbstractIterator<RowIterator> implements PartitionIterator
1:     {
1:         private final RowIterator iterator;
1:         private boolean returned;
1: 
1:         private SingletonPartitionIterator(RowIterator iterator)
1:         {
1:             this.iterator = iterator;
1:         }
1: 
1:         protected RowIterator computeNext()
1:         {
1:             if (returned)
1:                 return endOfData();
1: 
1:             returned = true;
1:             return iterator;
1:         }
1: 
1:         public void close()
1:         {
1:             iterator.close();
1:         }
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.EmptyIterators;
1: import org.apache.cassandra.db.transform.MorePartitions;
1: import org.apache.cassandra.db.transform.Transformation;
/////////////////////////////////////////////////////////////////////////
1:                              : EmptyIterators.row(command.metadata(),
0:                                                   command.partitionKey(),
0:                                                   command.clusteringIndexFilter().isReversed());
1:         class Close extends Transformation
1:             public void onPartitionClose()
0:                 // asserting this only now because it bothers UnfilteredPartitionIterators.Serializer (which might be used
0:                 // under the provided DataIter) if hasNext() is called before the previously returned iterator hasn't been fully consumed.
1:                 boolean hadNext = iter.hasNext();
0:                 iter.close();
1:                 assert !hadNext;
0:         }
1:         return Transformation.apply(toReturn, new Close());
/////////////////////////////////////////////////////////////////////////
1:         class Extend implements MorePartitions<PartitionIterator>
1:             int i = 1;
1:             public PartitionIterator moreContents()
1:                 if (i >= iterators.size())
1:                     return null;
1:                 return iterators.get(i++);
0:         }
1:         return MorePartitions.extend(iterators.get(0), new Extend());
/////////////////////////////////////////////////////////////////////////
1:         class Logger extends Transformation<RowIterator>
1:             public RowIterator applyToPartition(RowIterator partition)
1:                 return RowIterators.loggingIterator(partition, id);
0:         }
1:         return Transformation.apply(iterator, new Logger());
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
============================================================================