1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:b6661ac:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
3:b6661ac: 
1:07c6a36: import io.airlift.command.Command;
1:768e717: import io.airlift.command.Option;
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:768e717: import org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder;
1:768e717: import org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter;
1:768e717: import org.apache.cassandra.tools.nodetool.stats.StatsHolder;
1:768e717: import org.apache.cassandra.tools.nodetool.stats.StatsPrinter;
1:b6661ac: 
1:c5a8190: @Command(name = "compactionhistory", description = "Print history of compaction")
1:c5a8190: public class CompactionHistory extends NodeToolCmd
2:b6661ac: {
1:768e717:     @Option(title = "format",
1:768e717:             name = {"-F", "--format"},
1:768e717:             description = "Output format (json, yaml)")
1:768e717:     private String outputFormat = "";
1:768e717: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:b6661ac:     {
1:768e717:         if (!outputFormat.isEmpty() && !"json".equals(outputFormat) && !"yaml".equals(outputFormat))
1:b6661ac:         {
1:768e717:             throw new IllegalArgumentException("arguments for -F are json,yaml only.");
2:b6661ac:         }
1:768e717:         StatsHolder data = new CompactionHistoryHolder(probe);
1:768e717:         StatsPrinter printer = CompactionHistoryPrinter.from(outputFormat);
1:768e717:         printer.print(data, System.out);
1:b6661ac:     }
1:b6661ac: }
============================================================================
author:Masataka Yamaguchi
-------------------------------------------------------------------------------
commit:768e717
/////////////////////////////////////////////////////////////////////////
1: import io.airlift.command.Option;
1: import org.apache.cassandra.tools.nodetool.stats.CompactionHistoryHolder;
1: import org.apache.cassandra.tools.nodetool.stats.CompactionHistoryPrinter;
1: import org.apache.cassandra.tools.nodetool.stats.StatsHolder;
1: import org.apache.cassandra.tools.nodetool.stats.StatsPrinter;
1:     @Option(title = "format",
1:             name = {"-F", "--format"},
1:             description = "Output format (json, yaml)")
1:     private String outputFormat = "";
1: 
1:         if (!outputFormat.isEmpty() && !"json".equals(outputFormat) && !"yaml".equals(outputFormat))
1:             throw new IllegalArgumentException("arguments for -F are json,yaml only.");
1:         StatsHolder data = new CompactionHistoryHolder(probe);
1:         StatsPrinter printer = CompactionHistoryPrinter.from(outputFormat);
1:         printer.print(data, System.out);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b6661ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
/////////////////////////////////////////////////////////////////////////
0:         TableBuilder table = new TableBuilder();
0:         table.add(toArray(indexNames, String.class));
/////////////////////////////////////////////////////////////////////////
0:             table.add(eachChc.getAllAsArray());
1:         }
0:         table.printTo(System.out);
1:     }
1: 
0:     /**
0:      * Allows the Compaction History output to be ordered by 'compactedAt' - that is the
0:      * time at which compaction finished.
1:      */
0:     private static class CompactionHistoryRow implements Comparable<CompactionHistoryRow>
1:     {
0:         private final String id;
0:         private final String ksName;
0:         private final String cfName;
0:         private final long compactedAt;
0:         private final long bytesIn;
0:         private final long bytesOut;
0:         private final String rowMerged;
1: 
0:         CompactionHistoryRow(String id, String ksName, String cfName, long compactedAt, long bytesIn, long bytesOut, String rowMerged)
1:         {
0:             this.id = id;
0:             this.ksName = ksName;
0:             this.cfName = cfName;
0:             this.compactedAt = compactedAt;
0:             this.bytesIn = bytesIn;
0:             this.bytesOut = bytesOut;
0:             this.rowMerged = rowMerged;
1:         }
1: 
0:         public int compareTo(CompactionHistoryRow chc)
1:         {
0:             return Long.signum(chc.compactedAt - this.compactedAt);
1:         }
1: 
0:         public String[] getAllAsArray()
1:         {
0:             String[] obj = new String[7];
0:             obj[0] = this.id;
0:             obj[1] = this.ksName;
0:             obj[2] = this.cfName;
0:             Instant instant = Instant.ofEpochMilli(this.compactedAt);
0:             LocalDateTime ldt = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
0:             obj[3] = ldt.toString();
0:             obj[4] = Long.toString(this.bytesIn);
0:             obj[5] = Long.toString(this.bytesOut);
0:             obj[6] = this.rowMerged;
0:             return obj;
author:michael
-------------------------------------------------------------------------------
commit:07c6a36
/////////////////////////////////////////////////////////////////////////
0: import java.time.Instant;
0: import java.time.LocalDateTime;
0: import java.time.ZoneId;
0: import java.util.ArrayList;
0: import java.util.Collections;
1: import io.airlift.command.Command;
0: 
0: import static com.google.common.collect.Iterables.toArray;
0: 
/////////////////////////////////////////////////////////////////////////
0:         List<CompactionHistoryRow> chr = new ArrayList<>();
0:             CompactionHistoryRow chc = new CompactionHistoryRow((String)value.get(0),
0:                                                                 (String)value.get(1),
0:                                                                 (String)value.get(2),
0:                                                                 (Long)value.get(3),
0:                                                                 (Long)value.get(4),
0:                                                                 (Long)value.get(5),
0:                                                                 (String)value.get(6));
0:             chr.add(chc);
0:         Collections.sort(chr);
0:         for (CompactionHistoryRow eachChc : chr)
0:         {
0:             System.out.printf(format, eachChc.getAllAsArray());
0:         }
0:     }
0: }
0: 
0: /**
0:  * Allows the Compaction History output to be ordered by 'compactedAt' - that is the
0:  * time at which compaction finished.
0:  */
0: class CompactionHistoryRow implements Comparable<CompactionHistoryRow>
0: {
0:     private final String id;
0:     private final String ksName;
0:     private final String cfName;
0:     private final long compactedAt;
0:     private final long bytesIn;
0:     private final long bytesOut;
0:     private final String rowMerged;
0: 
0:     CompactionHistoryRow(String id, String ksName, String cfName, long compactedAt, long bytesIn, long bytesOut, String rowMerged)
0:     {
0:         this.id = id;
0:         this.ksName = ksName;
0:         this.cfName = cfName;
0:         this.compactedAt = compactedAt;
0:         this.bytesIn = bytesIn;
0:         this.bytesOut = bytesOut;
0:         this.rowMerged = rowMerged;
0:     }
0: 
0:     public int compareTo(CompactionHistoryRow chc)
0:     {
0:         return Long.signum(chc.compactedAt - this.compactedAt);
0:     }
0: 
0:     public Object[] getAllAsArray()
0:     {
0:         Object[] obj = new Object[7];
0:         obj[0] = this.id;
0:         obj[1] = this.ksName;
0:         obj[2] = this.cfName;
0:         Instant instant = Instant.ofEpochMilli(this.compactedAt);
0:         LocalDateTime ldt = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
0:         obj[3] = ldt.toString();
0:         obj[4] = this.bytesIn;
0:         obj[5] = this.bytesOut;
0:         obj[6] = this.rowMerged;
0:         return obj;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.cassandra.tools.nodetool;
0: 
0: import static com.google.common.collect.Iterables.toArray;
0: import io.airlift.command.Command;
0: 
0: import java.util.List;
0: import java.util.Set;
0: 
0: import javax.management.openmbean.TabularData;
0: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
0: 
1: @Command(name = "compactionhistory", description = "Print history of compaction")
1: public class CompactionHistory extends NodeToolCmd
0: {
1:     @Override
1:     public void execute(NodeProbe probe)
0:     {
0:         System.out.println("Compaction History: ");
0: 
0:         TabularData tabularData = probe.getCompactionHistory();
0:         if (tabularData.isEmpty())
0:         {
0:             System.out.printf("There is no compaction history");
0:             return;
0:         }
0: 
0:         String format = "%-41s%-19s%-29s%-26s%-15s%-15s%s%n";
0:         List<String> indexNames = tabularData.getTabularType().getIndexNames();
0:         System.out.printf(format, toArray(indexNames, Object.class));
0: 
0:         Set<?> values = tabularData.keySet();
0:         for (Object eachValue : values)
0:         {
0:             List<?> value = (List<?>) eachValue;
0:             System.out.printf(format, toArray(value, Object.class));
0:         }
0:     }
0: }
============================================================================