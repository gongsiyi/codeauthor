1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra;
4:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:2683806: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:a991b64: 
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Convenience object to create updates to a single partition.
1:a991b64:  *
1:a991b64:  * This is not unlike RowUpdateBuilder except that it allows to create update to multiple rows more easily.
1:a991b64:  * It is also aimed at unit tests so favor convenience over efficiency.
1:a991b64:  */
1:a991b64: public class UpdateBuilder
4:a991b64: {
1:2683806:     private final PartitionUpdate.SimpleBuilder updateBuilder;
1:2683806:     private Row.SimpleBuilder currentRow;
1:a991b64: 
1:2683806:     private UpdateBuilder(PartitionUpdate.SimpleBuilder updateBuilder)
1:a991b64:     {
1:2683806:         this.updateBuilder = updateBuilder;
4:a991b64:     }
1:a991b64: 
1:a991b64:     public static UpdateBuilder create(CFMetaData metadata, Object... partitionKey)
1:a991b64:     {
1:2683806:         return new UpdateBuilder(PartitionUpdate.simpleBuilder(metadata, partitionKey));
1:a991b64:     }
1:a991b64: 
1:a991b64:     public UpdateBuilder withTimestamp(long timestamp)
1:a991b64:     {
1:2683806:         updateBuilder.timestamp(timestamp);
1:a991b64:         if (currentRow != null)
1:2683806:             currentRow.timestamp(timestamp);
1:a991b64:         return this;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public UpdateBuilder newRow(Object... clustering)
1:a991b64:     {
1:2683806:         currentRow = updateBuilder.row(clustering);
1:a991b64:         return this;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public UpdateBuilder add(String column, Object value)
1:a991b64:     {
1:a991b64:         assert currentRow != null;
1:a991b64:         currentRow.add(column, value);
1:a991b64:         return this;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public PartitionUpdate build()
1:a991b64:     {
1:2683806:         return updateBuilder.build();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public IMutation makeMutation()
1:a991b64:     {
1:2683806:         Mutation m = updateBuilder.buildAsMutation();
1:2683806:         return updateBuilder.metadata().isCounter()
1:a991b64:              ? new CounterMutation(m, ConsistencyLevel.ONE)
1:a991b64:              : m;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void apply()
1:a991b64:     {
1:2683806:         makeMutation().apply();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void applyUnsafe()
1:a991b64:     {
1:2683806:         assert !updateBuilder.metadata().isCounter() : "Counters have currently no applyUnsafe() option";
1:2683806:         updateBuilder.buildAsMutation().applyUnsafe();
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4e21f72
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.partitions.*;
1: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.cassandra.service.StorageService;
1: 
1: 
1: /**
1:  * Convenience object to create updates to a single partition.
1:  *
1:  * This is not unlike RowUpdateBuilder except that it allows to create update to multiple rows more easily.
1:  * It is also aimed at unit tests so favor convenience over efficiency.
1:  */
1: public class UpdateBuilder
1: {
0:     private final PartitionUpdate update;
0:     private RowUpdateBuilder currentRow;
0:     private long timestamp = FBUtilities.timestampMicros();
1: 
0:     private UpdateBuilder(CFMetaData metadata, DecoratedKey partitionKey)
1:     {
0:         this.update = new PartitionUpdate(metadata, partitionKey, metadata.partitionColumns(), 4);
1:     }
1: 
1:     public static UpdateBuilder create(CFMetaData metadata, Object... partitionKey)
1:     {
0:         return new UpdateBuilder(metadata, makeKey(metadata, partitionKey));
1:     }
1: 
1:     public UpdateBuilder withTimestamp(long timestamp)
1:     {
0:         this.timestamp = timestamp;
1:         return this;
1:     }
1: 
1:     public UpdateBuilder newRow(Object... clustering)
1:     {
0:         maybeBuildCurrentRow();
0:         currentRow = new RowUpdateBuilder(update, timestamp, 0);
0:         if (clustering.length > 0)
0:             currentRow.clustering(clustering);
1:         return this;
1:     }
1: 
1:     public UpdateBuilder add(String column, Object value)
1:     {
1:         assert currentRow != null;
1:         currentRow.add(column, value);
1:         return this;
1:     }
1: 
1:     public PartitionUpdate build()
1:     {
0:         maybeBuildCurrentRow();
0:         return update;
1:     }
1: 
1:     public IMutation makeMutation()
1:     {
0:         Mutation m = new Mutation(build());
0:         return update.metadata().isCounter
1:              ? new CounterMutation(m, ConsistencyLevel.ONE)
1:              : m;
1:     }
1: 
1:     public void apply()
1:     {
0:         Mutation m = new Mutation(build());
0:         if (update.metadata().isCounter)
0:             new CounterMutation(m, ConsistencyLevel.ONE).apply();
0:         else
0:             m.apply();
1:     }
1: 
1:     public void applyUnsafe()
1:     {
0:         assert !update.metadata().isCounter : "Counters have currently no applyUnsafe() option";
0:         new Mutation(build()).applyUnsafe();
1:     }
1: 
0:     private void maybeBuildCurrentRow()
1:     {
1:         if (currentRow != null)
1:         {
0:             currentRow.build();
0:             currentRow = null;
1:         }
1:     }
1: 
0:     private static DecoratedKey makeKey(CFMetaData metadata, Object[] partitionKey)
1:     {
0:         if (partitionKey.length == 1 && partitionKey[0] instanceof DecoratedKey)
0:             return (DecoratedKey)partitionKey[0];
1: 
0:         ByteBuffer key = CFMetaData.serializePartitionKey(metadata.getKeyValidatorAsClusteringComparator().make(partitionKey));
0:         return StorageService.getPartitioner().decorateKey(key);
1:     }
1: }
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:2683806
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.*;
/////////////////////////////////////////////////////////////////////////
1:     private final PartitionUpdate.SimpleBuilder updateBuilder;
1:     private Row.SimpleBuilder currentRow;
1:     private UpdateBuilder(PartitionUpdate.SimpleBuilder updateBuilder)
1:         this.updateBuilder = updateBuilder;
1:         return new UpdateBuilder(PartitionUpdate.simpleBuilder(metadata, partitionKey));
1:         updateBuilder.timestamp(timestamp);
0:         if (currentRow != null)
1:             currentRow.timestamp(timestamp);
1:         currentRow = updateBuilder.row(clustering);
/////////////////////////////////////////////////////////////////////////
1:         return updateBuilder.build();
1:         Mutation m = updateBuilder.buildAsMutation();
1:         return updateBuilder.metadata().isCounter()
1:         makeMutation().apply();
1:         assert !updateBuilder.metadata().isCounter() : "Counters have currently no applyUnsafe() option";
1:         updateBuilder.buildAsMutation().applyUnsafe();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
0:         return metadata.decorateKey(key);
commit:dc85238
/////////////////////////////////////////////////////////////////////////
0:         return update.metadata().isCounter()
/////////////////////////////////////////////////////////////////////////
0:         if (update.metadata().isCounter())
/////////////////////////////////////////////////////////////////////////
0:         assert !update.metadata().isCounter() : "Counters have currently no applyUnsafe() option";
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:         return StorageService.getPartitioner().decorateKey(key);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         return metadata.decorateKey(key);
============================================================================