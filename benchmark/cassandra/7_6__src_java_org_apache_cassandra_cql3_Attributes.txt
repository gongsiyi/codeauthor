1:655ccc3: /*
1:655ccc3:  * Licensed to the Apache Software Foundation (ASF) under one
1:655ccc3:  * or more contributor license agreements.  See the NOTICE file
1:655ccc3:  * distributed with this work for additional information
1:655ccc3:  * regarding copyright ownership.  The ASF licenses this file
1:655ccc3:  * to you under the Apache License, Version 2.0 (the
1:655ccc3:  * "License"); you may not use this file except in compliance
1:655ccc3:  * with the License.  You may obtain a copy of the License at
1:655ccc3:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:655ccc3:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:655ccc3:  */
1:655ccc3: package org.apache.cassandra.cql3;
1:655ccc3: 
1:524261f: import java.nio.ByteBuffer;
1:89464ea: import java.util.List;
1:524261f: 
1:cb5897f: import org.apache.cassandra.cql3.functions.Function;
1:e017f94: import org.apache.cassandra.db.LivenessInfo;
1:524261f: import org.apache.cassandra.db.marshal.Int32Type;
1:524261f: import org.apache.cassandra.db.marshal.LongType;
1:e431fb7: import org.apache.cassandra.exceptions.InvalidRequestException;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:48f6446: import org.apache.cassandra.utils.ByteBufferUtil;
1:e431fb7: 
1:655ccc3: /**
1:655ccc3:  * Utility class for the Parser to gather attributes for modification
1:655ccc3:  * statements.
1:655ccc3:  */
1:655ccc3: public class Attributes
1:655ccc3: {
1:a991b64:     public static final int MAX_TTL = 20 * 365 * 24 * 60 * 60; // 20 years in seconds
1:a991b64: 
1:524261f:     private final Term timestamp;
1:524261f:     private final Term timeToLive;
1:e431fb7: 
1:524261f:     public static Attributes none()
1:e431fb7:     {
1:524261f:         return new Attributes(null, null);
1:524261f:     }
1:524261f: 
1:524261f:     private Attributes(Term timestamp, Term timeToLive)
1:524261f:     {
1:524261f:         this.timestamp = timestamp;
1:524261f:         this.timeToLive = timeToLive;
1:524261f:     }
1:524261f: 
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:cb5897f:     {
1:89464ea:         if (timestamp != null)
1:89464ea:             timestamp.addFunctionsTo(functions);
1:89464ea:         if (timeToLive != null)
1:89464ea:             timeToLive.addFunctionsTo(functions);
1:e431fb7:     }
1:e431fb7: 
1:524261f:     public boolean isTimestampSet()
1:524261f:     {
1:524261f:         return timestamp != null;
1:524261f:     }
1:524261f: 
1:524261f:     public boolean isTimeToLiveSet()
1:524261f:     {
1:524261f:         return timeToLive != null;
1:524261f:     }
1:524261f: 
1:9872b74:     public long getTimestamp(long now, QueryOptions options) throws InvalidRequestException
1:524261f:     {
1:524261f:         if (timestamp == null)
1:524261f:             return now;
1:524261f: 
1:9872b74:         ByteBuffer tval = timestamp.bindAndGet(options);
1:524261f:         if (tval == null)
1:524261f:             throw new InvalidRequestException("Invalid null value of timestamp");
1:524261f: 
1:48f6446:         if (tval == ByteBufferUtil.UNSET_BYTE_BUFFER)
1:48f6446:             return now;
1:655ccc3: 
1:524261f:         try
1:524261f:         {
1:524261f:             LongType.instance.validate(tval);
1:524261f:         }
1:524261f:         catch (MarshalException e)
1:524261f:         {
1:69f794a:             throw new InvalidRequestException("Invalid timestamp value: " + tval);
1:524261f:         }
1:524261f: 
1:524261f:         return LongType.instance.compose(tval);
1:524261f:     }
1:524261f: 
1:e017f94:     public int getTimeToLive(QueryOptions options, int defaultTimeToLive) throws InvalidRequestException
1:524261f:     {
1:524261f:         if (timeToLive == null)
1:e017f94:             return defaultTimeToLive;
1:524261f: 
1:9872b74:         ByteBuffer tval = timeToLive.bindAndGet(options);
1:524261f:         if (tval == null)
1:e83f9e6:             return 0;
1:524261f: 
1:e017f94:         if (tval == ByteBufferUtil.UNSET_BYTE_BUFFER)
1:e017f94:             return defaultTimeToLive;
1:cb5897f: 
1:524261f:         try
1:524261f:         {
1:524261f:             Int32Type.instance.validate(tval);
1:524261f:         }
1:524261f:         catch (MarshalException e)
1:524261f:         {
1:69f794a:             throw new InvalidRequestException("Invalid timestamp value: " + tval);
1:524261f:         }
1:524261f: 
1:524261f:         int ttl = Int32Type.instance.compose(tval);
1:524261f:         if (ttl < 0)
1:69f794a:             throw new InvalidRequestException("A TTL must be greater or equal to 0, but was " + ttl);
1:524261f: 
1:a991b64:         if (ttl > MAX_TTL)
1:a991b64:             throw new InvalidRequestException(String.format("ttl is too large. requested (%d) maximum (%d)", ttl, MAX_TTL));
1:cb5897f: 
1:e017f94:         if (defaultTimeToLive != LivenessInfo.NO_TTL && ttl == LivenessInfo.NO_TTL)
1:e017f94:             return LivenessInfo.NO_TTL;
1:e017f94: 
1:524261f:         return ttl;
1:524261f:     }
1:524261f: 
1:37e9bce:     public void collectMarkerSpecification(VariableSpecifications boundNames)
1:524261f:     {
1:524261f:         if (timestamp != null)
1:524261f:             timestamp.collectMarkerSpecification(boundNames);
1:524261f:         if (timeToLive != null)
1:524261f:             timeToLive.collectMarkerSpecification(boundNames);
1:524261f:     }
1:524261f: 
1:524261f:     public static class Raw
1:524261f:     {
1:524261f:         public Term.Raw timestamp;
1:524261f:         public Term.Raw timeToLive;
1:524261f: 
1:524261f:         public Attributes prepare(String ksName, String cfName) throws InvalidRequestException
1:524261f:         {
1:d63d07b:             Term ts = timestamp == null ? null : timestamp.prepare(ksName, timestampReceiver(ksName, cfName));
1:d63d07b:             Term ttl = timeToLive == null ? null : timeToLive.prepare(ksName, timeToLiveReceiver(ksName, cfName));
1:524261f:             return new Attributes(ts, ttl);
1:524261f:         }
1:524261f: 
1:524261f:         private ColumnSpecification timestampReceiver(String ksName, String cfName)
1:524261f:         {
1:524261f:             return new ColumnSpecification(ksName, cfName, new ColumnIdentifier("[timestamp]", true), LongType.instance);
1:524261f:         }
1:524261f: 
1:524261f:         private ColumnSpecification timeToLiveReceiver(String ksName, String cfName)
1:524261f:         {
1:524261f:             return new ColumnSpecification(ksName, cfName, new ColumnIdentifier("[ttl]", true), Int32Type.instance);
1:524261f:         }
1:655ccc3:     }
1:cb5897f: }
============================================================================
author:Russell Spitzer
-------------------------------------------------------------------------------
commit:e83f9e6
/////////////////////////////////////////////////////////////////////////
1:             return 0;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:69f794a
/////////////////////////////////////////////////////////////////////////
1:             throw new InvalidRequestException("Invalid timestamp value: " + tval);
/////////////////////////////////////////////////////////////////////////
1:             throw new InvalidRequestException("Invalid timestamp value: " + tval);
1:             throw new InvalidRequestException("A TTL must be greater or equal to 0, but was " + ttl);
commit:1def02f
/////////////////////////////////////////////////////////////////////////
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4edd9ed
commit:89464ea
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions)
1:         if (timestamp != null)
1:             timestamp.addFunctionsTo(functions);
1:         if (timeToLive != null)
1:             timeToLive.addFunctionsTo(functions);
commit:e017f94
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.LivenessInfo;
/////////////////////////////////////////////////////////////////////////
1:     public int getTimeToLive(QueryOptions options, int defaultTimeToLive) throws InvalidRequestException
1:             return defaultTimeToLive;
1:         if (tval == ByteBufferUtil.UNSET_BYTE_BUFFER)
1:             return defaultTimeToLive;
/////////////////////////////////////////////////////////////////////////
1:         if (defaultTimeToLive != LivenessInfo.NO_TTL && ttl == LivenessInfo.NO_TTL)
1:             return LivenessInfo.NO_TTL;
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final int MAX_TTL = 20 * 365 * 24 * 60 * 60; // 20 years in seconds
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (ttl > MAX_TTL)
1:             throw new InvalidRequestException(String.format("ttl is too large. requested (%d) maximum (%d)", ttl, MAX_TTL));
commit:9872b74
/////////////////////////////////////////////////////////////////////////
1:     public long getTimestamp(long now, QueryOptions options) throws InvalidRequestException
1:         ByteBuffer tval = timestamp.bindAndGet(options);
/////////////////////////////////////////////////////////////////////////
0:     public int getTimeToLive(QueryOptions options) throws InvalidRequestException
1:         ByteBuffer tval = timeToLive.bindAndGet(options);
commit:d63d07b
/////////////////////////////////////////////////////////////////////////
1:             Term ts = timestamp == null ? null : timestamp.prepare(ksName, timestampReceiver(ksName, cfName));
1:             Term ttl = timeToLive == null ? null : timeToLive.prepare(ksName, timeToLiveReceiver(ksName, cfName));
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ExpiringCell;
/////////////////////////////////////////////////////////////////////////
0:         if (ttl > ExpiringCell.MAX_TTL)
0:             throw new InvalidRequestException(String.format("ttl is too large. requested (%d) maximum (%d)", ttl, ExpiringCell.MAX_TTL));
commit:37e9bce
/////////////////////////////////////////////////////////////////////////
1:     public void collectMarkerSpecification(VariableSpecifications boundNames)
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.MarshalException;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.MarshalException;
commit:524261f
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
0: import java.util.List;
1: 
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.marshal.LongType;
0: import org.apache.cassandra.db.marshal.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     private final Term timestamp;
1:     private final Term timeToLive;
1:     public static Attributes none()
1:         return new Attributes(null, null);
1:     }
1: 
1:     private Attributes(Term timestamp, Term timeToLive)
1:     {
1:         this.timestamp = timestamp;
1:         this.timeToLive = timeToLive;
1:     }
1: 
1:     public boolean isTimestampSet()
1:     {
1:         return timestamp != null;
1:     }
1: 
1:     public boolean isTimeToLiveSet()
1:     {
1:         return timeToLive != null;
1:     }
1: 
0:     public long getTimestamp(long now, List<ByteBuffer> variables) throws InvalidRequestException
1:     {
1:         if (timestamp == null)
1:             return now;
1: 
0:         ByteBuffer tval = timestamp.bindAndGet(variables);
1:         if (tval == null)
1:             throw new InvalidRequestException("Invalid null value of timestamp");
1: 
1:         try
1:         {
1:             LongType.instance.validate(tval);
1:         }
1:         catch (MarshalException e)
1:         {
0:             throw new InvalidRequestException("Invalid timestamp value");
1:         }
1: 
1:         return LongType.instance.compose(tval);
1:     }
1: 
0:     public int getTimeToLive(List<ByteBuffer> variables) throws InvalidRequestException
1:     {
1:         if (timeToLive == null)
0:             return 0;
1: 
0:         ByteBuffer tval = timeToLive.bindAndGet(variables);
1:         if (tval == null)
0:             throw new InvalidRequestException("Invalid null value of TTL");
1: 
1:         try
1:         {
1:             Int32Type.instance.validate(tval);
1:         }
1:         catch (MarshalException e)
1:         {
0:             throw new InvalidRequestException("Invalid timestamp value");
1:         }
1: 
1:         int ttl = Int32Type.instance.compose(tval);
1:         if (ttl < 0)
0:         if (ttl > ExpiringColumn.MAX_TTL)
0:             throw new InvalidRequestException(String.format("ttl is too large. requested (%d) maximum (%d)", ttl, ExpiringColumn.MAX_TTL));
1: 
1:         return ttl;
1:     }
1: 
0:     public void collectMarkerSpecification(ColumnSpecification[] boundNames)
1:     {
1:         if (timestamp != null)
1:             timestamp.collectMarkerSpecification(boundNames);
1:         if (timeToLive != null)
1:             timeToLive.collectMarkerSpecification(boundNames);
1:     }
1: 
1:     public static class Raw
1:     {
1:         public Term.Raw timestamp;
1:         public Term.Raw timeToLive;
1: 
1:         public Attributes prepare(String ksName, String cfName) throws InvalidRequestException
1:         {
0:             Term ts = timestamp == null ? null : timestamp.prepare(timestampReceiver(ksName, cfName));
0:             Term ttl = timeToLive == null ? null : timeToLive.prepare(timeToLiveReceiver(ksName, cfName));
1:             return new Attributes(ts, ttl);
1:         }
1: 
1:         private ColumnSpecification timestampReceiver(String ksName, String cfName)
1:         {
1:             return new ColumnSpecification(ksName, cfName, new ColumnIdentifier("[timestamp]", true), LongType.instance);
1:         }
1: 
1:         private ColumnSpecification timeToLiveReceiver(String ksName, String cfName)
1:         {
1:             return new ColumnSpecification(ksName, cfName, new ColumnIdentifier("[ttl]", true), Int32Type.instance);
1:         }
commit:e431fb7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ExpiringColumn;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void validate() throws InvalidRequestException
1:     {
0:         if (timeToLive < 0)
0:             throw new InvalidRequestException("A TTL must be greater or equal to 0");
1: 
0:         if (timeToLive > ExpiringColumn.MAX_TTL)
0:             throw new InvalidRequestException(String.format("ttl is too large. requested (%d) maximum (%d)", timeToLive, ExpiringColumn.MAX_TTL));
1:     }
commit:297f530
/////////////////////////////////////////////////////////////////////////
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ConsistencyLevel;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:655ccc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
0: import org.apache.cassandra.thrift.ConsistencyLevel;
1: 
1: /**
1:  * Utility class for the Parser to gather attributes for modification
1:  * statements.
1:  */
1: public class Attributes
1: {
0:     public ConsistencyLevel cLevel;
0:     public Long timestamp;
0:     public int timeToLive;
1: }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:d9836e0
/////////////////////////////////////////////////////////////////////////
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import com.google.common.collect.Iterables;
1: 
1: import org.apache.cassandra.cql3.functions.Function;
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<Function> getFunctions()
1:     {
0:         if (timestamp != null && timeToLive != null)
0:             return Iterables.concat(timestamp.getFunctions(), timeToLive.getFunctions());
0:         else if (timestamp != null)
0:             return timestamp.getFunctions();
0:         else if (timeToLive != null)
0:             return timeToLive.getFunctions();
0:         else
0:             return Collections.emptySet();
1:     }
1: 
author:Oded Peer
-------------------------------------------------------------------------------
commit:48f6446
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:         if (tval == ByteBufferUtil.UNSET_BYTE_BUFFER)
1:             return now;
0: 
/////////////////////////////////////////////////////////////////////////
0:         if (tval == ByteBufferUtil.UNSET_BYTE_BUFFER) // treat as unlimited
0:             return 0;
0: 
author:Robert Stupp
-------------------------------------------------------------------------------
commit:b4d7f3b
/////////////////////////////////////////////////////////////////////////
0:     public boolean usesFunction(String ksName, String functionName)
0:     {
0:         return (timestamp != null && timestamp.usesFunction(ksName, functionName))
0:             || (timeToLive != null && timeToLive.usesFunction(ksName, functionName));
0:     }
0: 
============================================================================