1:e48ff29: /*
1:e48ff29:  * Licensed to the Apache Software Foundation (ASF) under one
1:e48ff29:  * or more contributor license agreements.  See the NOTICE file
1:e48ff29:  * distributed with this work for additional information
1:e48ff29:  * regarding copyright ownership.  The ASF licenses this file
1:e48ff29:  * to you under the Apache License, Version 2.0 (the
1:e48ff29:  * "License"); you may not use this file except in compliance
1:e48ff29:  * with the License.  You may obtain a copy of the License at
1:e48ff29:  *
1:e48ff29:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e48ff29:  *
1:e48ff29:  * Unless required by applicable law or agreed to in writing, software
1:e48ff29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e48ff29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e48ff29:  * See the License for the specific language governing permissions and
1:e48ff29:  * limitations under the License.
1:e48ff29:  */
1:e48ff29: package org.apache.cassandra.service.pager;
10:e48ff29: 
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:a991b64: 
1:4205011: import java.util.Arrays;
1:4205011: 
1:e48ff29: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.filter.DataLimits;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:e48ff29: import org.apache.cassandra.exceptions.RequestValidationException;
1:e48ff29: import org.apache.cassandra.exceptions.RequestExecutionException;
1:85ea373: import org.apache.cassandra.service.ClientState;
1:e48ff29: 
1:e48ff29: /**
1:e48ff29:  * Pager over a list of ReadCommand.
1:e48ff29:  *
1:e48ff29:  * Note that this is not easy to make efficient. Indeed, we need to page the first command fully before
1:e48ff29:  * returning results from the next one, but if the result returned by each command is small (compared to pageSize),
1:e48ff29:  * paging the commands one at a time under-performs compared to parallelizing. On the other, if we parallelize
1:e48ff29:  * and each command raised pageSize results, we'll end up with commands.size() * pageSize results in memory, which
1:e48ff29:  * defeats the purpose of paging.
1:e48ff29:  *
1:e48ff29:  * For now, we keep it simple (somewhat) and just do one command at a time. Provided that we make sure to not
1:e48ff29:  * create a pager unless we need to, this is probably fine. Though if we later want to get fancy, we could use the
1:0bd5170:  * cfs meanPartitionSize to decide if parallelizing some of the command might be worth it while being confident we don't
1:e48ff29:  * blow out memory.
1:e48ff29:  */
1:a991b64: public class MultiPartitionPager implements QueryPager
1:b068a9c: {
1:e48ff29:     private final SinglePartitionPager[] pagers;
1:a991b64:     private final DataLimits limit;
1:a991b64: 
1:a991b64:     private final int nowInSec;
1:e48ff29: 
1:7c32ffb:     private int remaining;
1:7c32ffb:     private int current;
1:e48ff29: 
1:e0adc16:     public MultiPartitionPager(SinglePartitionReadCommand.Group group, PagingState state, ProtocolVersion protocolVersion)
1:b068a9c:     {
1:a991b64:         this.limit = group.limits();
1:a991b64:         this.nowInSec = group.nowInSec();
1:a991b64: 
1:7c32ffb:         int i = 0;
1:7c32ffb:         // If it's not the beginning (state != null), we need to find where we were and skip previous commands
1:7c32ffb:         // since they are done.
1:7c32ffb:         if (state != null)
1:a991b64:             for (; i < group.commands.size(); i++)
1:a991b64:                 if (group.commands.get(i).partitionKey().getKey().equals(state.partitionKey))
1:7c32ffb:                     break;
1:7c32ffb: 
1:a991b64:         if (i >= group.commands.size())
1:7c32ffb:         {
1:7c32ffb:             pagers = null;
1:7c32ffb:             return;
1:7c32ffb:         }
1:6218993: 
1:a991b64:         pagers = new SinglePartitionPager[group.commands.size() - i];
1:7c32ffb:         // 'i' is on the first non exhausted pager for the previous page (or the first one)
1:b99c863:         pagers[0] = group.commands.get(i).getPager(state, protocolVersion);
1:7c32ffb: 
1:7c32ffb:         // Following ones haven't been started yet
1:a991b64:         for (int j = i + 1; j < group.commands.size(); j++)
1:b99c863:             pagers[j - i] = group.commands.get(j).getPager(null, protocolVersion);
1:7c32ffb: 
1:a991b64:         remaining = state == null ? limit.count() : state.remaining;
1:7c32ffb:     }
1:7c32ffb: 
1:4205011:     private MultiPartitionPager(SinglePartitionPager[] pagers, DataLimits limit, int nowInSec, int remaining, int current)
1:4205011:     {
1:4205011:         this.pagers = pagers;
1:4205011:         this.limit = limit;
1:4205011:         this.nowInSec = nowInSec;
1:4205011:         this.remaining = remaining;
1:4205011:         this.current = current;
1:4205011:     }
1:4205011: 
1:4205011:     public QueryPager withUpdatedLimit(DataLimits newLimits)
1:4205011:     {
1:4205011:         SinglePartitionPager[] newPagers = Arrays.copyOf(pagers, pagers.length);
1:4205011:         newPagers[current] = newPagers[current].withUpdatedLimit(newLimits);
1:4205011: 
1:4205011:         return new MultiPartitionPager(newPagers,
1:4205011:                                        newLimits,
1:4205011:                                        nowInSec,
1:4205011:                                        remaining,
1:4205011:                                        current);
1:4205011:     }
1:4205011: 
1:b068a9c:     public PagingState state()
1:7c32ffb:     {
1:7c32ffb:         // Sets current to the first non-exhausted pager
1:a991b64:         if (isExhausted())
1:7c32ffb:             return null;
1:7c32ffb: 
1:b068a9c:         PagingState state = pagers[current].state();
1:b2d8e88:         return new PagingState(pagers[current].key(), state == null ? null : state.rowMark, remaining, pagers[current].remainingInPartition());
1:7c32ffb:     }
1:b068a9c: 
1:e48ff29:     public boolean isExhausted()
1:7c32ffb:     {
1:7c32ffb:         if (remaining <= 0 || pagers == null)
1:7c32ffb:             return true;
1:7c32ffb: 
1:e48ff29:         while (current < pagers.length)
7:e48ff29:         {
1:e48ff29:             if (!pagers[current].isExhausted())
1:e48ff29:                 return false;
1:b068a9c: 
1:e48ff29:             current++;
1:b068a9c:         }
1:e48ff29:         return true;
1:b068a9c:     }
1:e48ff29: 
1:557bbbc:     public ReadExecutionController executionController()
1:e48ff29:     {
1:a991b64:         // Note that for all pagers, the only difference is the partition key to which it applies, so in practice we
1:a991b64:         // can use any of the sub-pager ReadOrderGroup group to protect the whole pager
1:a991b64:         for (int i = current; i < pagers.length; i++)
1:a991b64:         {
1:a991b64:             if (pagers[i] != null)
1:557bbbc:                 return pagers[i].executionController();
1:a991b64:         }
1:a991b64:         throw new AssertionError("Shouldn't be called on an exhausted pager");
1:a991b64:     }
1:e48ff29: 
1:127f7c5:     @SuppressWarnings("resource") // iter closed via countingIter
1:aa83c94:     public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException
1:a991b64:     {
1:a991b64:         int toQuery = Math.min(remaining, pageSize);
1:aa83c94:         return new PagersIterator(toQuery, consistency, clientState, null, queryStartNanoTime);
1:a991b64:     }
1:a991b64: 
1:127f7c5:     @SuppressWarnings("resource") // iter closed via countingIter
1:557bbbc:     public PartitionIterator fetchPageInternal(int pageSize, ReadExecutionController executionController) throws RequestValidationException, RequestExecutionException
1:a991b64:     {
1:a991b64:         int toQuery = Math.min(remaining, pageSize);
1:aa83c94:         return new PagersIterator(toQuery, null, null, executionController, System.nanoTime());
1:a991b64:     }
1:a991b64: 
1:a991b64:     private class PagersIterator extends AbstractIterator<RowIterator> implements PartitionIterator
1:a991b64:     {
1:a991b64:         private final int pageSize;
1:a991b64:         private PartitionIterator result;
1:4205011:         private boolean closed;
1:aa83c94:         private final long queryStartNanoTime;
1:a991b64: 
1:a991b64:         // For "normal" queries
1:a991b64:         private final ConsistencyLevel consistency;
1:a991b64:         private final ClientState clientState;
1:a991b64: 
1:a991b64:         // For internal queries
1:557bbbc:         private final ReadExecutionController executionController;
1:a991b64: 
1:4205011:         private int pagerMaxRemaining;
1:4205011:         private int counted;
1:4205011: 
1:aa83c94:         public PagersIterator(int pageSize, ConsistencyLevel consistency, ClientState clientState, ReadExecutionController executionController, long queryStartNanoTime)
1:a991b64:         {
1:a991b64:             this.pageSize = pageSize;
1:a991b64:             this.consistency = consistency;
1:a991b64:             this.clientState = clientState;
1:557bbbc:             this.executionController = executionController;
1:aa83c94:             this.queryStartNanoTime = queryStartNanoTime;
1:a991b64:         }
1:a991b64: 
1:a991b64:         protected RowIterator computeNext()
1:a991b64:         {
1:a991b64:             while (result == null || !result.hasNext())
1:a991b64:             {
1:91e2501:                 if (result != null)
1:4205011:                 {
1:91e2501:                     result.close();
1:4205011:                     counted += pagerMaxRemaining - pagers[current].maxRemaining();
1:4205011:                 }
1:91e2501: 
1:4205011:                 // We are done if we have reached the page size or in the case of GROUP BY if the current pager
1:4205011:                 // is not exhausted.
1:4205011:                 boolean isDone = counted >= pageSize
1:4205011:                         || (result != null && limit.isGroupByLimit() && !pagers[current].isExhausted());
1:4205011: 
1:4205011:                 // isExhausted() will sets us on the first non-exhausted pager
1:4205011:                 if (isDone || isExhausted())
1:4205011:                 {
1:4205011:                     closed = true;
1:a991b64:                     return endOfData();
1:4205011:                 }
1:a991b64: 
1:4205011:                 pagerMaxRemaining = pagers[current].maxRemaining();
1:4205011:                 int toQuery = pageSize - counted;
1:a991b64:                 result = consistency == null
1:557bbbc:                        ? pagers[current].fetchPageInternal(toQuery, executionController)
1:aa83c94:                        : pagers[current].fetchPage(toQuery, consistency, clientState, queryStartNanoTime);
1:a991b64:             }
1:a991b64:             return result.next();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public void close()
1:a991b64:         {
1:4205011:             remaining -= counted;
1:4205011:             if (result != null && !closed)
2:a991b64:                 result.close();
1:a991b64:         }
8:e48ff29:     }
1:a991b64: 
1:e48ff29:     public int maxRemaining()
1:e48ff29:     {
1:7c32ffb:         return remaining;
1:4205011:     }
1:e48ff29: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public MultiPartitionPager(SinglePartitionReadCommand.Group group, PagingState state, ProtocolVersion protocolVersion)
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1:     public ReadExecutionController executionController()
1:                 return pagers[i].executionController();
/////////////////////////////////////////////////////////////////////////
1:     public PartitionIterator fetchPageInternal(int pageSize, ReadExecutionController executionController) throws RequestValidationException, RequestExecutionException
0:         PagersIterator iter = new PagersIterator(toQuery, null, null, executionController);
/////////////////////////////////////////////////////////////////////////
1:         private final ReadExecutionController executionController;
0:         public PagersIterator(int pageSize, ConsistencyLevel consistency, ClientState clientState, ReadExecutionController executionController)
1:             this.executionController = executionController;
/////////////////////////////////////////////////////////////////////////
1:                        ? pagers[current].fetchPageInternal(toQuery, executionController)
commit:0bd5170
/////////////////////////////////////////////////////////////////////////
1:  * cfs meanPartitionSize to decide if parallelizing some of the command might be worth it while being confident we don't
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException
1:         return new PagersIterator(toQuery, consistency, clientState, null, queryStartNanoTime);
1:         return new PagersIterator(toQuery, null, null, executionController, System.nanoTime());
/////////////////////////////////////////////////////////////////////////
1:         private final long queryStartNanoTime;
/////////////////////////////////////////////////////////////////////////
1:         public PagersIterator(int pageSize, ConsistencyLevel consistency, ClientState clientState, ReadExecutionController executionController, long queryStartNanoTime)
1:             this.queryStartNanoTime = queryStartNanoTime;
/////////////////////////////////////////////////////////////////////////
1:                        : pagers[current].fetchPage(toQuery, consistency, clientState, queryStartNanoTime);
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private MultiPartitionPager(SinglePartitionPager[] pagers, DataLimits limit, int nowInSec, int remaining, int current)
1:     {
1:         this.pagers = pagers;
1:         this.limit = limit;
1:         this.nowInSec = nowInSec;
1:         this.remaining = remaining;
1:         this.current = current;
1:     }
1: 
1:     public QueryPager withUpdatedLimit(DataLimits newLimits)
1:     {
1:         SinglePartitionPager[] newPagers = Arrays.copyOf(pagers, pagers.length);
1:         newPagers[current] = newPagers[current].withUpdatedLimit(newLimits);
1: 
1:         return new MultiPartitionPager(newPagers,
1:                                        newLimits,
1:                                        nowInSec,
1:                                        remaining,
1:                                        current);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         return new PagersIterator(toQuery, consistency, clientState, null);
0:         return new PagersIterator(toQuery, null, null, executionController);
1:         private boolean closed;
/////////////////////////////////////////////////////////////////////////
1:         private int pagerMaxRemaining;
1:         private int counted;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 {
1:                     counted += pagerMaxRemaining - pagers[current].maxRemaining();
1:                 }
1:                 // We are done if we have reached the page size or in the case of GROUP BY if the current pager
1:                 // is not exhausted.
1:                 boolean isDone = counted >= pageSize
1:                         || (result != null && limit.isGroupByLimit() && !pagers[current].isExhausted());
1: 
1:                 // isExhausted() will sets us on the first non-exhausted pager
1:                 if (isDone || isExhausted())
1:                 {
1:                     closed = true;
1:                 }
1:                 pagerMaxRemaining = pagers[current].maxRemaining();
1:                 int toQuery = pageSize - counted;
/////////////////////////////////////////////////////////////////////////
1:             remaining -= counted;
1:             if (result != null && !closed)
/////////////////////////////////////////////////////////////////////////
1: }
commit:b2d8e88
/////////////////////////////////////////////////////////////////////////
1:         return new PagingState(pagers[current].key(), state == null ? null : state.rowMark, remaining, pagers[current].remainingInPartition());
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:928e4c2
commit:6094974
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         DataLimits.Counter counter = limit.forPaging(toQuery).newCounter(nowInSec, true);
0:         iter.setCounter(counter);
0:         return counter.applyTo(iter);
/////////////////////////////////////////////////////////////////////////
0:         DataLimits.Counter counter = limit.forPaging(toQuery).newCounter(nowInSec, true);
0:         iter.setCounter(counter);
0:         return counter.applyTo(iter);
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:127f7c5
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource") // iter closed via countingIter
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource") // iter closed via countingIter
commit:e777301
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("resource") // iter closed via countingIter
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("resource") // iter closed via countingIter
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:91e2501
/////////////////////////////////////////////////////////////////////////
1:                 if (result != null)
1:                     result.close();
1: 
commit:b99c863
/////////////////////////////////////////////////////////////////////////
0:     public MultiPartitionPager(SinglePartitionReadCommand.Group group, PagingState state, int protocolVersion)
/////////////////////////////////////////////////////////////////////////
1:         pagers[0] = group.commands.get(i).getPager(state, protocolVersion);
1:             pagers[j - i] = group.commands.get(j).getPager(null, protocolVersion);
/////////////////////////////////////////////////////////////////////////
0:         return new PagingState(pagers[current].key(), state == null ? null : state.rowMark, remaining, Integer.MAX_VALUE);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.AbstractIterator;
1: 
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.filter.DataLimits;
1: import org.apache.cassandra.db.partitions.*;
/////////////////////////////////////////////////////////////////////////
1: public class MultiPartitionPager implements QueryPager
1:     private final DataLimits limit;
1: 
1:     private final int nowInSec;
0:     public MultiPartitionPager(SinglePartitionReadCommand.Group group, PagingState state)
1:         this.limit = group.limits();
1:         this.nowInSec = group.nowInSec();
1: 
1:             for (; i < group.commands.size(); i++)
1:                 if (group.commands.get(i).partitionKey().getKey().equals(state.partitionKey))
1:         if (i >= group.commands.size())
1:         pagers = new SinglePartitionPager[group.commands.size() - i];
0:         pagers[0] = group.commands.get(i).getPager(state);
1:         for (int j = i + 1; j < group.commands.size(); j++)
0:             pagers[j - i] = group.commands.get(j).getPager(null);
1:         remaining = state == null ? limit.count() : state.remaining;
/////////////////////////////////////////////////////////////////////////
0:         return new PagingState(pagers[current].key(), state == null ? null : state.cellName, remaining, Integer.MAX_VALUE);
/////////////////////////////////////////////////////////////////////////
0:     public ReadOrderGroup startOrderGroup()
1:         // Note that for all pagers, the only difference is the partition key to which it applies, so in practice we
1:         // can use any of the sub-pager ReadOrderGroup group to protect the whole pager
1:         for (int i = current; i < pagers.length; i++)
1:             if (pagers[i] != null)
0:                 return pagers[i].startOrderGroup();
1:         }
1:         throw new AssertionError("Shouldn't be called on an exhausted pager");
1:     }
0:     @SuppressWarnings("resource")
0:     public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState) throws RequestValidationException, RequestExecutionException
1:     {
1:         int toQuery = Math.min(remaining, pageSize);
0:         PagersIterator iter = new PagersIterator(toQuery, consistency, clientState, null);
0:         CountingPartitionIterator countingIter = new CountingPartitionIterator(iter, limit.forPaging(toQuery), nowInSec);
0:         iter.setCounter(countingIter.counter());
0:         return countingIter;
1:     }
1: 
0:     public PartitionIterator fetchPageInternal(int pageSize, ReadOrderGroup orderGroup) throws RequestValidationException, RequestExecutionException
1:     {
1:         int toQuery = Math.min(remaining, pageSize);
0:         PagersIterator iter = new PagersIterator(toQuery, null, null, orderGroup);
0:         CountingPartitionIterator countingIter = new CountingPartitionIterator(iter, limit.forPaging(toQuery), nowInSec);
0:         iter.setCounter(countingIter.counter());
0:         return countingIter;
1:     }
1: 
1:     private class PagersIterator extends AbstractIterator<RowIterator> implements PartitionIterator
1:     {
1:         private final int pageSize;
1:         private PartitionIterator result;
0:         private DataLimits.Counter counter;
1: 
1:         // For "normal" queries
1:         private final ConsistencyLevel consistency;
1:         private final ClientState clientState;
1: 
1:         // For internal queries
0:         private final ReadOrderGroup orderGroup;
1: 
0:         public PagersIterator(int pageSize, ConsistencyLevel consistency, ClientState clientState, ReadOrderGroup orderGroup)
1:         {
1:             this.pageSize = pageSize;
1:             this.consistency = consistency;
1:             this.clientState = clientState;
0:             this.orderGroup = orderGroup;
0:         public void setCounter(DataLimits.Counter counter)
1:         {
0:             this.counter = counter;
1:         }
1: 
1:         protected RowIterator computeNext()
1:         {
1:             while (result == null || !result.hasNext())
1:             {
0:                 // This sets us on the first non-exhausted pager
1:                 if (isExhausted())
1:                     return endOfData();
1: 
0:                 if (result != null)
1:                     result.close();
1: 
0:                 int toQuery = pageSize - counter.counted();
1:                 result = consistency == null
0:                        ? pagers[current].fetchPageInternal(toQuery, orderGroup)
0:                        : pagers[current].fetchPage(toQuery, consistency, clientState);
1:             }
1:             return result.next();
1:         }
1: 
1:         public void close()
1:         {
0:             remaining -= counter.counted();
0:             if (result != null)
1:                 result.close();
1:         }
commit:7c6993f
commit:6218993
/////////////////////////////////////////////////////////////////////////
0:     MultiPartitionPager(List<ReadCommand> commands, ConsistencyLevel consistencyLevel, boolean localQuery, PagingState state, int limitForQuery)
/////////////////////////////////////////////////////////////////////////
1: 
0:         remaining = state == null ? limitForQuery : state.remaining;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         int remainingThisQuery = Math.min(remaining, pageSize);
commit:85ea373
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.ClientState;
/////////////////////////////////////////////////////////////////////////
0:     MultiPartitionPager(List<ReadCommand> commands, ConsistencyLevel consistencyLevel, ClientState cState, boolean localQuery, PagingState state)
/////////////////////////////////////////////////////////////////////////
0:         pagers[0] = makePager(commands.get(i), consistencyLevel, cState, localQuery, state);
/////////////////////////////////////////////////////////////////////////
0:             pagers[j - i] = makePager(command, consistencyLevel, cState, localQuery, null);
0:     private static SinglePartitionPager makePager(ReadCommand command, ConsistencyLevel consistencyLevel, ClientState cState, boolean localQuery, PagingState state)
0:              ? new SliceQueryPager((SliceFromReadCommand)command, consistencyLevel, cState, localQuery, state)
0:              : new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, cState, localQuery);
commit:7c32ffb
/////////////////////////////////////////////////////////////////////////
1:     private int remaining;
1:     private int current;
1:         int i = 0;
1:         // If it's not the beginning (state != null), we need to find where we were and skip previous commands
1:         // since they are done.
1:         if (state != null)
0:             for (; i < commands.size(); i++)
0:                 if (commands.get(i).key.equals(state.partitionKey))
1:                     break;
0:         if (i >= commands.size())
1:             pagers = null;
0:             timestamp = -1;
1:             return;
1: 
0:         pagers = new SinglePartitionPager[commands.size() - i];
1:         // 'i' is on the first non exhausted pager for the previous page (or the first one)
0:         pagers[0] = makePager(commands.get(i), consistencyLevel, localQuery, state);
0:         timestamp = commands.get(i).timestamp;
1: 
1:         // Following ones haven't been started yet
0:         for (int j = i + 1; j < commands.size(); j++)
1:         {
0:             ReadCommand command = commands.get(j);
0:             if (command.timestamp != timestamp)
0:                 throw new IllegalArgumentException("All commands must have the same timestamp or weird results may happen.");
0:             pagers[j - i] = makePager(command, consistencyLevel, localQuery, null);
1:         }
0:         remaining = state == null ? computeRemaining(pagers) : state.remaining;
1:     }
1: 
0:     private static SinglePartitionPager makePager(ReadCommand command, ConsistencyLevel consistencyLevel, boolean localQuery, PagingState state)
1:     {
0:         return command instanceof SliceFromReadCommand
0:              ? new SliceQueryPager((SliceFromReadCommand)command, consistencyLevel, localQuery, state)
0:              : new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, localQuery);
1:     }
1: 
0:     private static int computeRemaining(SinglePartitionPager[] pagers)
1:     {
0:         long remaining = 0;
0:         for (SinglePartitionPager pager : pagers)
0:             remaining += pager.maxRemaining();
0:         return remaining > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)remaining;
1:         // Sets current to the first non-exhausted pager
0:         if (isExhausted())
1:             return null;
1: 
0:         return new PagingState(pagers[current].key(), state == null ? null : state.cellName, remaining);
1:         if (remaining <= 0 || pagers == null)
1:             return true;
1: 
/////////////////////////////////////////////////////////////////////////
0:         int remainingThisQuery = pageSize;
0:         while (remainingThisQuery > 0 && !isExhausted())
0:             // isExhausted has set us on the first non-exhausted pager
0:             List<Row> page = pagers[current].fetchPage(remainingThisQuery);
0:             int fetched = pagers[current].columnCounter().countAll(row.cf).live();
0:             remaining -= fetched;
0:             remainingThisQuery -= fetched;
/////////////////////////////////////////////////////////////////////////
1:         return remaining;
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
0:     MultiPartitionPager(List<ReadCommand> commands, ConsistencyLevel consistencyLevel, boolean localQuery)
1:     {
0:         this(commands, consistencyLevel, localQuery, null);
1:     }
1: 
0:     MultiPartitionPager(List<ReadCommand> commands, ConsistencyLevel consistencyLevel, boolean localQuery, PagingState state)
/////////////////////////////////////////////////////////////////////////
0:             PagingState tmpState = state != null && command.key.equals(state.partitionKey) ? state : null;
0:                       ? new SliceQueryPager((SliceFromReadCommand)command, consistencyLevel, localQuery, tmpState)
0:                       : new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, localQuery, tmpState);
1:     public PagingState state()
1:     {
1:         PagingState state = pagers[current].state();
0:         return state == null
0:              ? null
0:              : new PagingState(state.partitionKey, state.cellName, maxRemaining());
1:     }
1: 
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service.pager;
1: 
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.List;
1: 
1: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.filter.ColumnCounter;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: 
1: /**
1:  * Pager over a list of ReadCommand.
1:  *
1:  * Note that this is not easy to make efficient. Indeed, we need to page the first command fully before
1:  * returning results from the next one, but if the result returned by each command is small (compared to pageSize),
1:  * paging the commands one at a time under-performs compared to parallelizing. On the other, if we parallelize
1:  * and each command raised pageSize results, we'll end up with commands.size() * pageSize results in memory, which
1:  * defeats the purpose of paging.
1:  *
1:  * For now, we keep it simple (somewhat) and just do one command at a time. Provided that we make sure to not
1:  * create a pager unless we need to, this is probably fine. Though if we later want to get fancy, we could use the
0:  * cfs meanRowSize to decide if parallelizing some of the command might be worth it while being confident we don't
1:  * blow out memory.
1:  */
0: class MultiPartitionPager implements QueryPager
1: {
1:     private final SinglePartitionPager[] pagers;
0:     private final long timestamp;
1: 
0:     private volatile int current;
1: 
0:     MultiPartitionPager(List<ReadCommand> commands, final ConsistencyLevel consistencyLevel, final boolean localQuery)
1:     {
0:         this.pagers = new SinglePartitionPager[commands.size()];
1: 
0:         long tstamp = -1;
0:         for (int i = 0; i < commands.size(); i++)
1:         {
0:             ReadCommand command = commands.get(i);
0:             if (tstamp == -1)
0:                 tstamp = command.timestamp;
0:             else if (tstamp != command.timestamp)
0:                 throw new IllegalArgumentException("All commands must have the same timestamp or weird results may happen.");
1: 
0:             pagers[i] = command instanceof SliceFromReadCommand
0:                       ? new SliceQueryPager((SliceFromReadCommand)command, consistencyLevel, localQuery)
0:                       : new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, localQuery);
1:         }
0:         timestamp = tstamp;
1:     }
1: 
1:     public boolean isExhausted()
1:     {
1:         while (current < pagers.length)
1:         {
1:             if (!pagers[current].isExhausted())
1:                 return false;
1: 
1:             current++;
1:         }
1:         return true;
1:     }
1: 
0:     public List<Row> fetchPage(int pageSize) throws RequestValidationException, RequestExecutionException
1:     {
0:         int remaining = pageSize;
0:         List<Row> result = new ArrayList<Row>();
1: 
0:         while (!isExhausted() && remaining > 0)
1:         {
0:             // Exhausted also sets us on the first non-exhausted pager
0:             List<Row> page = pagers[current].fetchPage(remaining);
0:             if (page.isEmpty())
0:                 continue;
1: 
0:             Row row = page.get(0);
0:             remaining -= pagers[current].columnCounter().countAll(row.cf).live();
0:             result.add(row);
1:         }
1: 
0:         return result;
1:     }
1: 
1:     public int maxRemaining()
1:     {
0:         int max = 0;
0:         for (int i = current; i < pagers.length; i++)
0:             max += pagers[i].maxRemaining();
0:         return max;
1:     }
1: 
0:     public long timestamp()
1:     {
0:         return timestamp;
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
============================================================================