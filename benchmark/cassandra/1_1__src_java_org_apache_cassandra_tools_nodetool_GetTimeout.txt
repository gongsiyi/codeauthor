1:85ad122: /*
1:85ad122:  * Licensed to the Apache Software Foundation (ASF) under one
1:85ad122:  * or more contributor license agreements.  See the NOTICE file
1:85ad122:  * distributed with this work for additional information
1:85ad122:  * regarding copyright ownership.  The ASF licenses this file
1:85ad122:  * to you under the Apache License, Version 2.0 (the
1:85ad122:  * "License"); you may not use this file except in compliance
1:85ad122:  * with the License.  You may obtain a copy of the License at
1:85ad122:  *
1:85ad122:  *     http://www.apache.org/licenses/LICENSE-2.0
1:85ad122:  *
1:85ad122:  * Unless required by applicable law or agreed to in writing, software
1:85ad122:  * distributed under the License is distributed on an "AS IS" BASIS,
1:85ad122:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:85ad122:  * See the License for the specific language governing permissions and
1:85ad122:  * limitations under the License.
1:85ad122:  */
1:85ad122: package org.apache.cassandra.tools.nodetool;
1:85ad122: 
1:85ad122: import io.airlift.command.Arguments;
1:85ad122: import io.airlift.command.Command;
1:85ad122: 
1:85ad122: import java.util.ArrayList;
1:85ad122: import java.util.List;
1:85ad122: 
1:85ad122: import org.apache.cassandra.tools.NodeProbe;
1:85ad122: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:85ad122: 
1:85ad122: import static com.google.common.base.Preconditions.checkArgument;
1:85ad122: 
1:85ad122: @Command(name = "gettimeout", description = "Print the timeout of the given type in ms")
1:85ad122: public class GetTimeout extends NodeToolCmd
1:85ad122: {
1:85ad122:     public static final String TIMEOUT_TYPES = "read, range, write, counterwrite, cascontention, truncate, streamingsocket, misc (general rpc_timeout_in_ms)";
1:85ad122: 
1:85ad122:     @Arguments(usage = "<timeout_type>", description = "The timeout type, one of (" + TIMEOUT_TYPES + ")")
1:85ad122:     private List<String> args = new ArrayList<>();
1:85ad122: 
1:85ad122:     @Override
1:85ad122:     public void execute(NodeProbe probe)
1:85ad122:     {
1:85ad122:         checkArgument(args.size() == 1, "gettimeout requires a timeout type, one of (" + TIMEOUT_TYPES + ")");
1:85ad122:         try
1:85ad122:         {
1:85ad122:             System.out.println("Current timeout for type " + args.get(0) + ": " + probe.getTimeout(args.get(0)) + " ms");
1:85ad122:         } catch (Exception e)
1:85ad122:         {
1:85ad122:             throw new IllegalArgumentException(e.getMessage());
1:85ad122:         }
1:85ad122: 
1:85ad122:     }
1:85ad122: }
============================================================================
author:Jeremy Hanna
-------------------------------------------------------------------------------
commit:85ad122
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: import static com.google.common.base.Preconditions.checkArgument;
1: 
1: @Command(name = "gettimeout", description = "Print the timeout of the given type in ms")
1: public class GetTimeout extends NodeToolCmd
1: {
1:     public static final String TIMEOUT_TYPES = "read, range, write, counterwrite, cascontention, truncate, streamingsocket, misc (general rpc_timeout_in_ms)";
1: 
1:     @Arguments(usage = "<timeout_type>", description = "The timeout type, one of (" + TIMEOUT_TYPES + ")")
1:     private List<String> args = new ArrayList<>();
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         checkArgument(args.size() == 1, "gettimeout requires a timeout type, one of (" + TIMEOUT_TYPES + ")");
1:         try
1:         {
1:             System.out.println("Current timeout for type " + args.get(0) + ": " + probe.getTimeout(args.get(0)) + " ms");
1:         } catch (Exception e)
1:         {
1:             throw new IllegalArgumentException(e.getMessage());
1:         }
1: 
1:     }
1: }
============================================================================