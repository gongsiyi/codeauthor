1:d40ac78: /*
1:d40ac78:  * Licensed to the Apache Software Foundation (ASF) under one
1:d40ac78:  * or more contributor license agreements.  See the NOTICE file
1:d40ac78:  * distributed with this work for additional information
1:d40ac78:  * regarding copyright ownership.  The ASF licenses this file
1:d40ac78:  * to you under the Apache License, Version 2.0 (the
1:d40ac78:  * "License"); you may not use this file except in compliance
1:d40ac78:  * with the License.  You may obtain a copy of the License at
1:d40ac78:  *
1:d40ac78:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d40ac78:  *
1:d40ac78:  * Unless required by applicable law or agreed to in writing, software
1:d40ac78:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d40ac78:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d40ac78:  * See the License for the specific language governing permissions and
1:d40ac78:  * limitations under the License.
1:d40ac78:  */
1:d40ac78: 
1:d40ac78: package org.apache.cassandra.cql3;
1:d40ac78: 
1:d40ac78: import static org.junit.Assert.assertEquals;
1:d40ac78: import static org.junit.Assert.assertTrue;
1:d40ac78: 
1:d40ac78: import java.util.Collections;
1:d40ac78: import java.util.HashSet;
1:d40ac78: import java.util.Set;
1:d40ac78: import java.util.function.Function;
1:d40ac78: 
1:d40ac78: import com.google.common.collect.Iterables;
1:d40ac78: import org.junit.Test;
1:d40ac78: 
1:d40ac78: import org.apache.cassandra.db.*;
1:d40ac78: import org.apache.cassandra.db.compaction.CompactionManager;
1:d40ac78: import org.apache.cassandra.db.rows.*;
1:d40ac78: import org.apache.cassandra.io.sstable.ISSTableScanner;
1:d40ac78: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:d40ac78: import org.apache.cassandra.utils.FBUtilities;
1:d40ac78: 
1:d40ac78: public class GcCompactionTest extends CQLTester
1:d40ac78: {
1:d40ac78:     static final int KEY_COUNT = 10;
1:d40ac78:     static final int CLUSTERING_COUNT = 20;
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionPartitions() throws Throwable
1:d40ac78:     {
1:d40ac78:         runCompactionTest("CREATE TABLE %s(" +
1:d40ac78:                           "  key int," +
1:d40ac78:                           "  column int," +
1:d40ac78:                           "  data int," +
1:d40ac78:                           "  extra text," +
1:d40ac78:                           "  PRIMARY KEY((key, column), data)" +
1:d40ac78:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'row'  };"
1:d40ac78:                           );
1:d40ac78: 
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionRows() throws Throwable
1:d40ac78:     {
1:d40ac78:         runCompactionTest("CREATE TABLE %s(" +
1:d40ac78:                           "  key int," +
1:d40ac78:                           "  column int," +
1:d40ac78:                           "  data int," +
1:d40ac78:                           "  extra text," +
1:d40ac78:                           "  PRIMARY KEY(key, column)" +
1:d40ac78:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'row'  };"
1:d40ac78:                           );
1:d40ac78: 
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionRanges() throws Throwable
1:d40ac78:     {
1:d40ac78: 
1:d40ac78:         runCompactionTest("CREATE TABLE %s(" +
1:d40ac78:                           "  key int," +
1:d40ac78:                           "  column int," +
1:d40ac78:                           "  col2 int," +
1:d40ac78:                           "  data int," +
1:d40ac78:                           "  extra text," +
1:d40ac78:                           "  PRIMARY KEY(key, column, data)" +
1:d40ac78:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'row'  };"
1:d40ac78:                           );
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private void runCompactionTest(String tableDef) throws Throwable
1:d40ac78:     {
1:d40ac78:         createTable(tableDef);
1:d40ac78: 
1:d40ac78:         for (int i = 0; i < KEY_COUNT; ++i)
1:d40ac78:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:d40ac78:                 execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i+j, "" + i + ":" + j);
1:d40ac78: 
1:d40ac78:         Set<SSTableReader> readers = new HashSet<>();
1:d40ac78:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:d40ac78: 
1:d40ac78:         flush();
1:d40ac78:         assertEquals(1, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table0 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table0));
1:d40ac78:         int rowCount = countRows(table0);
1:d40ac78: 
1:d40ac78:         deleteWithSomeInserts(3, 5, 10);
1:d40ac78:         flush();
1:d40ac78:         assertEquals(2, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table1 = getNewTable(readers);
1:d40ac78:         assertTrue(countRows(table1) > 0);
1:d40ac78:         assertTrue(countTombstoneMarkers(table1) > 0);
1:d40ac78: 
1:d40ac78:         deleteWithSomeInserts(5, 6, 0);
1:d40ac78:         flush();
1:d40ac78:         assertEquals(3, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table2 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countRows(table2));
1:d40ac78:         assertTrue(countTombstoneMarkers(table2) > 0);
1:d40ac78: 
1:d40ac78:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1:d40ac78: 
1:d40ac78:         assertEquals(3, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table3 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table3));
1:d40ac78:         assertTrue(rowCount > countRows(table3));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionCells() throws Throwable
1:d40ac78:     {
1:d40ac78:         createTable("CREATE TABLE %s(" +
1:d40ac78:                           "  key int," +
1:d40ac78:                           "  column int," +
1:d40ac78:                           "  data int," +
1:d40ac78:                           "  extra text," +
1:d40ac78:                           "  PRIMARY KEY(key)" +
1:d40ac78:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'cell'  };"
1:d40ac78:                           );
1:d40ac78: 
1:d40ac78:         for (int i = 0; i < KEY_COUNT; ++i)
1:d40ac78:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:d40ac78:                 execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i+j, "" + i + ":" + j);
1:d40ac78: 
1:d40ac78:         Set<SSTableReader> readers = new HashSet<>();
1:d40ac78:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:d40ac78: 
1:d40ac78:         flush();
1:d40ac78:         assertEquals(1, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table0 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table0));
1:d40ac78:         int cellCount = countCells(table0);
1:d40ac78: 
1:d40ac78:         deleteWithSomeInserts(3, 0, 2);
1:d40ac78:         flush();
1:d40ac78:         assertEquals(2, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table1 = getNewTable(readers);
1:d40ac78:         assertTrue(countCells(table1) > 0);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table0));
1:d40ac78: 
1:d40ac78:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1:d40ac78: 
1:d40ac78:         assertEquals(2, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table3 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table3));
1:d40ac78:         assertTrue(cellCount > countCells(table3));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionStatic() throws Throwable
1:d40ac78:     {
1:d40ac78:         createTable("CREATE TABLE %s(" +
1:d40ac78:                           "  key int," +
1:d40ac78:                           "  column int," +
1:d40ac78:                           "  data int static," +
1:d40ac78:                           "  extra text," +
1:d40ac78:                           "  PRIMARY KEY(key, column)" +
1:d40ac78:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'cell'  };"
1:d40ac78:                           );
1:d40ac78: 
1:d40ac78:         for (int i = 0; i < KEY_COUNT; ++i)
1:d40ac78:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:d40ac78:                 execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i+j, "" + i + ":" + j);
1:d40ac78: 
1:d40ac78:         Set<SSTableReader> readers = new HashSet<>();
1:d40ac78:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:d40ac78: 
1:d40ac78:         flush();
1:d40ac78:         assertEquals(1, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table0 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table0));
1:d40ac78:         int cellCount = countStaticCells(table0);
1:d40ac78:         assertEquals(KEY_COUNT, cellCount);
1:d40ac78: 
1:d40ac78:         execute("DELETE data FROM %s WHERE key = 0");   // delete static cell
1:d40ac78:         execute("INSERT INTO %s (key, data) VALUES (1, 0)");  // overwrite static cell
1:d40ac78:         flush();
1:d40ac78:         assertEquals(2, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table1 = getNewTable(readers);
1:d40ac78:         assertTrue(countStaticCells(table1) > 0);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table0));
1:d40ac78: 
1:d40ac78:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1:d40ac78: 
1:d40ac78:         assertEquals(2, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table3 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table3));
1:d40ac78:         assertEquals(cellCount - 2, countStaticCells(table3));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionComplexColumn() throws Throwable
1:d40ac78:     {
1:d40ac78:         createTable("CREATE TABLE %s(" +
1:d40ac78:                           "  key int," +
1:d40ac78:                           "  data map<int, int>," +
1:d40ac78:                           "  extra text," +
1:d40ac78:                           "  PRIMARY KEY(key)" +
1:d40ac78:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'cell'  };"
1:d40ac78:                           );
1:d40ac78: 
1:d40ac78:         for (int i = 0; i < KEY_COUNT; ++i)
1:d40ac78:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:d40ac78:                 execute("UPDATE %s SET data[?] = ? WHERE key = ?", j, i+j, i);
1:d40ac78: 
1:d40ac78:         Set<SSTableReader> readers = new HashSet<>();
1:d40ac78:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:d40ac78: 
1:d40ac78:         flush();
1:d40ac78:         assertEquals(1, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table0 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table0));
1:d40ac78:         int cellCount = countComplexCells(table0);
1:d40ac78: 
1:d40ac78:         deleteWithSomeInsertsComplexColumn(3, 5, 8);
1:d40ac78:         flush();
1:d40ac78:         assertEquals(2, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table1 = getNewTable(readers);
1:d40ac78:         assertTrue(countComplexCells(table1) > 0);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table0));
1:d40ac78: 
1:d40ac78:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1:d40ac78: 
1:d40ac78:         assertEquals(2, cfs.getLiveSSTables().size());
1:d40ac78:         SSTableReader table3 = getNewTable(readers);
1:d40ac78:         assertEquals(0, countTombstoneMarkers(table3));
1:d40ac78:         assertEquals(cellCount - 23, countComplexCells(table3));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testLocalDeletionTime() throws Throwable
1:d40ac78:     {
1:d40ac78:         createTable("create table %s (k int, c1 int, primary key (k, c1)) with compaction = {'class': 'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones':'row'}");
1:d40ac78:         execute("delete from %s where k = 1");
1:d40ac78:         Set<SSTableReader> readers = new HashSet<>(getCurrentColumnFamilyStore().getLiveSSTables());
1:d40ac78:         getCurrentColumnFamilyStore().forceBlockingFlush();
1:d40ac78:         SSTableReader oldSSTable = getNewTable(readers);
1:d40ac78:         Thread.sleep(2000);
1:d40ac78:         execute("delete from %s where k = 1");
1:d40ac78:         getCurrentColumnFamilyStore().forceBlockingFlush();
1:d40ac78:         SSTableReader newTable = getNewTable(readers);
1:d40ac78: 
1:d40ac78:         CompactionManager.instance.forceUserDefinedCompaction(oldSSTable.getFilename());
1:d40ac78: 
1:d40ac78:         // Old table now doesn't contain any data and should disappear.
1:d40ac78:         assertEquals(Collections.singleton(newTable), getCurrentColumnFamilyStore().getLiveSSTables());
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private SSTableReader getNewTable(Set<SSTableReader> readers)
1:d40ac78:     {
1:d40ac78:         Set<SSTableReader> newOnes = new HashSet<>(getCurrentColumnFamilyStore().getLiveSSTables());
1:d40ac78:         newOnes.removeAll(readers);
1:d40ac78:         assertEquals(1, newOnes.size());
1:d40ac78:         readers.addAll(newOnes);
1:d40ac78:         return Iterables.get(newOnes, 0);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     void deleteWithSomeInserts(int key_step, int delete_step, int readd_step) throws Throwable
1:d40ac78:     {
1:d40ac78:         for (int i = 0; i < KEY_COUNT; i += key_step)
1:d40ac78:         {
1:d40ac78:             if (delete_step > 0)
1:d40ac78:                 for (int j = i % delete_step; j < CLUSTERING_COUNT; j += delete_step)
1:d40ac78:                 {
1:d40ac78:                     execute("DELETE FROM %s WHERE key = ? AND column = ?", i, j);
1:d40ac78:                 }
1:d40ac78:             if (readd_step > 0)
1:d40ac78:                 for (int j = i % readd_step; j < CLUSTERING_COUNT; j += readd_step)
1:d40ac78:                 {
1:d40ac78:                     execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i-j, "readded " + i + ":" + j);
1:d40ac78:                 }
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     void deleteWithSomeInsertsComplexColumn(int key_step, int delete_step, int readd_step) throws Throwable
1:d40ac78:     {
1:d40ac78:         for (int i = 0; i < KEY_COUNT; i += key_step)
1:d40ac78:         {
1:d40ac78:             if (delete_step > 0)
1:d40ac78:                 for (int j = i % delete_step; j < CLUSTERING_COUNT; j += delete_step)
1:d40ac78:                 {
1:d40ac78:                     execute("DELETE data[?] FROM %s WHERE key = ?", j, i);
1:d40ac78:                 }
1:d40ac78:             if (readd_step > 0)
1:d40ac78:                 for (int j = i % readd_step; j < CLUSTERING_COUNT; j += readd_step)
1:d40ac78:                 {
1:d40ac78:                     execute("UPDATE %s SET data[?] = ? WHERE key = ?", j, -(i+j), i);
1:d40ac78:                 }
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int countTombstoneMarkers(SSTableReader reader)
1:d40ac78:     {
1:d40ac78:         int nowInSec = FBUtilities.nowInSeconds();
1:d40ac78:         return count(reader, x -> x.isRangeTombstoneMarker() || x.isRow() && ((Row) x).hasDeletion(nowInSec) ? 1 : 0, x -> x.partitionLevelDeletion().isLive() ? 0 : 1);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int countRows(SSTableReader reader)
1:d40ac78:     {
1:d40ac78:         int nowInSec = FBUtilities.nowInSeconds();
1:d40ac78:         return count(reader, x -> x.isRow() && ((Row) x).hasLiveData(nowInSec) ? 1 : 0, x -> 0);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int countCells(SSTableReader reader)
1:d40ac78:     {
1:d40ac78:         return count(reader, x -> x.isRow() ? Iterables.size((Row) x) : 0, x -> 0);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int countStaticCells(SSTableReader reader)
1:d40ac78:     {
1:d40ac78:         return count(reader, x -> 0, x -> Iterables.size(x.staticRow()));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int countComplexCells(SSTableReader reader)
1:d40ac78:     {
1:d40ac78:         return count(reader, x -> x.isRow() ? ((Row) x).stream().mapToInt(this::countComplex).sum() : 0, x -> 0);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int countComplex(ColumnData c)
1:d40ac78:     {
1:d40ac78:         if (!(c instanceof ComplexColumnData))
1:d40ac78:             return 0;
1:d40ac78:         ComplexColumnData ccd = (ComplexColumnData) c;
1:d40ac78:         return ccd.cellsCount();
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int count(SSTableReader reader, Function<Unfiltered, Integer> predicate, Function<UnfilteredRowIterator, Integer> partitionPredicate)
1:d40ac78:     {
1:d40ac78:         int instances = 0;
1:d40ac78:         try (ISSTableScanner partitions = reader.getScanner())
1:d40ac78:         {
1:d40ac78:             while (partitions.hasNext())
1:d40ac78:             {
1:d40ac78:                 try (UnfilteredRowIterator iter = partitions.next())
1:d40ac78:                 {
1:d40ac78:                     instances += partitionPredicate.apply(iter);
1:d40ac78:                     while (iter.hasNext())
1:d40ac78:                     {
1:d40ac78:                         Unfiltered atom = iter.next();
1:d40ac78:                         instances += predicate.apply(atom);
1:d40ac78:                     }
1:d40ac78:                 }
1:d40ac78:             }
1:d40ac78:         }
1:d40ac78:         return instances;
1:d40ac78:     }
1:d40ac78: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d40ac78
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.function.Function;
1: 
1: import com.google.common.collect.Iterables;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.compaction.CompactionManager;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.io.sstable.ISSTableScanner;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class GcCompactionTest extends CQLTester
1: {
1:     static final int KEY_COUNT = 10;
1:     static final int CLUSTERING_COUNT = 20;
1: 
1:     @Test
1:     public void testGcCompactionPartitions() throws Throwable
1:     {
1:         runCompactionTest("CREATE TABLE %s(" +
1:                           "  key int," +
1:                           "  column int," +
1:                           "  data int," +
1:                           "  extra text," +
1:                           "  PRIMARY KEY((key, column), data)" +
1:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'row'  };"
1:                           );
1: 
1:     }
1: 
1:     @Test
1:     public void testGcCompactionRows() throws Throwable
1:     {
1:         runCompactionTest("CREATE TABLE %s(" +
1:                           "  key int," +
1:                           "  column int," +
1:                           "  data int," +
1:                           "  extra text," +
1:                           "  PRIMARY KEY(key, column)" +
1:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'row'  };"
1:                           );
1: 
1:     }
1: 
1:     @Test
1:     public void testGcCompactionRanges() throws Throwable
1:     {
1: 
1:         runCompactionTest("CREATE TABLE %s(" +
1:                           "  key int," +
1:                           "  column int," +
1:                           "  col2 int," +
1:                           "  data int," +
1:                           "  extra text," +
1:                           "  PRIMARY KEY(key, column, data)" +
1:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'row'  };"
1:                           );
1:     }
1: 
1:     private void runCompactionTest(String tableDef) throws Throwable
1:     {
1:         createTable(tableDef);
1: 
1:         for (int i = 0; i < KEY_COUNT; ++i)
1:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:                 execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i+j, "" + i + ":" + j);
1: 
1:         Set<SSTableReader> readers = new HashSet<>();
1:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1: 
1:         flush();
1:         assertEquals(1, cfs.getLiveSSTables().size());
1:         SSTableReader table0 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table0));
1:         int rowCount = countRows(table0);
1: 
1:         deleteWithSomeInserts(3, 5, 10);
1:         flush();
1:         assertEquals(2, cfs.getLiveSSTables().size());
1:         SSTableReader table1 = getNewTable(readers);
1:         assertTrue(countRows(table1) > 0);
1:         assertTrue(countTombstoneMarkers(table1) > 0);
1: 
1:         deleteWithSomeInserts(5, 6, 0);
1:         flush();
1:         assertEquals(3, cfs.getLiveSSTables().size());
1:         SSTableReader table2 = getNewTable(readers);
1:         assertEquals(0, countRows(table2));
1:         assertTrue(countTombstoneMarkers(table2) > 0);
1: 
1:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1: 
1:         assertEquals(3, cfs.getLiveSSTables().size());
1:         SSTableReader table3 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table3));
1:         assertTrue(rowCount > countRows(table3));
1:     }
1: 
1:     @Test
1:     public void testGcCompactionCells() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(" +
1:                           "  key int," +
1:                           "  column int," +
1:                           "  data int," +
1:                           "  extra text," +
1:                           "  PRIMARY KEY(key)" +
1:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'cell'  };"
1:                           );
1: 
1:         for (int i = 0; i < KEY_COUNT; ++i)
1:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:                 execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i+j, "" + i + ":" + j);
1: 
1:         Set<SSTableReader> readers = new HashSet<>();
1:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1: 
1:         flush();
1:         assertEquals(1, cfs.getLiveSSTables().size());
1:         SSTableReader table0 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table0));
1:         int cellCount = countCells(table0);
1: 
1:         deleteWithSomeInserts(3, 0, 2);
1:         flush();
1:         assertEquals(2, cfs.getLiveSSTables().size());
1:         SSTableReader table1 = getNewTable(readers);
1:         assertTrue(countCells(table1) > 0);
1:         assertEquals(0, countTombstoneMarkers(table0));
1: 
1:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1: 
1:         assertEquals(2, cfs.getLiveSSTables().size());
1:         SSTableReader table3 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table3));
1:         assertTrue(cellCount > countCells(table3));
1:     }
1: 
1:     @Test
1:     public void testGcCompactionStatic() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(" +
1:                           "  key int," +
1:                           "  column int," +
1:                           "  data int static," +
1:                           "  extra text," +
1:                           "  PRIMARY KEY(key, column)" +
1:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'cell'  };"
1:                           );
1: 
1:         for (int i = 0; i < KEY_COUNT; ++i)
1:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:                 execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i+j, "" + i + ":" + j);
1: 
1:         Set<SSTableReader> readers = new HashSet<>();
1:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1: 
1:         flush();
1:         assertEquals(1, cfs.getLiveSSTables().size());
1:         SSTableReader table0 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table0));
1:         int cellCount = countStaticCells(table0);
1:         assertEquals(KEY_COUNT, cellCount);
1: 
1:         execute("DELETE data FROM %s WHERE key = 0");   // delete static cell
1:         execute("INSERT INTO %s (key, data) VALUES (1, 0)");  // overwrite static cell
1:         flush();
1:         assertEquals(2, cfs.getLiveSSTables().size());
1:         SSTableReader table1 = getNewTable(readers);
1:         assertTrue(countStaticCells(table1) > 0);
1:         assertEquals(0, countTombstoneMarkers(table0));
1: 
1:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1: 
1:         assertEquals(2, cfs.getLiveSSTables().size());
1:         SSTableReader table3 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table3));
1:         assertEquals(cellCount - 2, countStaticCells(table3));
1:     }
1: 
1:     @Test
1:     public void testGcCompactionComplexColumn() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(" +
1:                           "  key int," +
1:                           "  data map<int, int>," +
1:                           "  extra text," +
1:                           "  PRIMARY KEY(key)" +
1:                           ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'cell'  };"
1:                           );
1: 
1:         for (int i = 0; i < KEY_COUNT; ++i)
1:             for (int j = 0; j < CLUSTERING_COUNT; ++j)
1:                 execute("UPDATE %s SET data[?] = ? WHERE key = ?", j, i+j, i);
1: 
1:         Set<SSTableReader> readers = new HashSet<>();
1:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1: 
1:         flush();
1:         assertEquals(1, cfs.getLiveSSTables().size());
1:         SSTableReader table0 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table0));
1:         int cellCount = countComplexCells(table0);
1: 
1:         deleteWithSomeInsertsComplexColumn(3, 5, 8);
1:         flush();
1:         assertEquals(2, cfs.getLiveSSTables().size());
1:         SSTableReader table1 = getNewTable(readers);
1:         assertTrue(countComplexCells(table1) > 0);
1:         assertEquals(0, countTombstoneMarkers(table0));
1: 
1:         CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
1: 
1:         assertEquals(2, cfs.getLiveSSTables().size());
1:         SSTableReader table3 = getNewTable(readers);
1:         assertEquals(0, countTombstoneMarkers(table3));
1:         assertEquals(cellCount - 23, countComplexCells(table3));
1:     }
1: 
1:     @Test
1:     public void testLocalDeletionTime() throws Throwable
1:     {
1:         createTable("create table %s (k int, c1 int, primary key (k, c1)) with compaction = {'class': 'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones':'row'}");
1:         execute("delete from %s where k = 1");
1:         Set<SSTableReader> readers = new HashSet<>(getCurrentColumnFamilyStore().getLiveSSTables());
1:         getCurrentColumnFamilyStore().forceBlockingFlush();
1:         SSTableReader oldSSTable = getNewTable(readers);
1:         Thread.sleep(2000);
1:         execute("delete from %s where k = 1");
1:         getCurrentColumnFamilyStore().forceBlockingFlush();
1:         SSTableReader newTable = getNewTable(readers);
1: 
1:         CompactionManager.instance.forceUserDefinedCompaction(oldSSTable.getFilename());
1: 
1:         // Old table now doesn't contain any data and should disappear.
1:         assertEquals(Collections.singleton(newTable), getCurrentColumnFamilyStore().getLiveSSTables());
1:     }
1: 
1:     private SSTableReader getNewTable(Set<SSTableReader> readers)
1:     {
1:         Set<SSTableReader> newOnes = new HashSet<>(getCurrentColumnFamilyStore().getLiveSSTables());
1:         newOnes.removeAll(readers);
1:         assertEquals(1, newOnes.size());
1:         readers.addAll(newOnes);
1:         return Iterables.get(newOnes, 0);
1:     }
1: 
1:     void deleteWithSomeInserts(int key_step, int delete_step, int readd_step) throws Throwable
1:     {
1:         for (int i = 0; i < KEY_COUNT; i += key_step)
1:         {
1:             if (delete_step > 0)
1:                 for (int j = i % delete_step; j < CLUSTERING_COUNT; j += delete_step)
1:                 {
1:                     execute("DELETE FROM %s WHERE key = ? AND column = ?", i, j);
1:                 }
1:             if (readd_step > 0)
1:                 for (int j = i % readd_step; j < CLUSTERING_COUNT; j += readd_step)
1:                 {
1:                     execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", i, j, i-j, "readded " + i + ":" + j);
1:                 }
1:         }
1:     }
1: 
1:     void deleteWithSomeInsertsComplexColumn(int key_step, int delete_step, int readd_step) throws Throwable
1:     {
1:         for (int i = 0; i < KEY_COUNT; i += key_step)
1:         {
1:             if (delete_step > 0)
1:                 for (int j = i % delete_step; j < CLUSTERING_COUNT; j += delete_step)
1:                 {
1:                     execute("DELETE data[?] FROM %s WHERE key = ?", j, i);
1:                 }
1:             if (readd_step > 0)
1:                 for (int j = i % readd_step; j < CLUSTERING_COUNT; j += readd_step)
1:                 {
1:                     execute("UPDATE %s SET data[?] = ? WHERE key = ?", j, -(i+j), i);
1:                 }
1:         }
1:     }
1: 
1:     int countTombstoneMarkers(SSTableReader reader)
1:     {
1:         int nowInSec = FBUtilities.nowInSeconds();
1:         return count(reader, x -> x.isRangeTombstoneMarker() || x.isRow() && ((Row) x).hasDeletion(nowInSec) ? 1 : 0, x -> x.partitionLevelDeletion().isLive() ? 0 : 1);
1:     }
1: 
1:     int countRows(SSTableReader reader)
1:     {
1:         int nowInSec = FBUtilities.nowInSeconds();
1:         return count(reader, x -> x.isRow() && ((Row) x).hasLiveData(nowInSec) ? 1 : 0, x -> 0);
1:     }
1: 
1:     int countCells(SSTableReader reader)
1:     {
1:         return count(reader, x -> x.isRow() ? Iterables.size((Row) x) : 0, x -> 0);
1:     }
1: 
1:     int countStaticCells(SSTableReader reader)
1:     {
1:         return count(reader, x -> 0, x -> Iterables.size(x.staticRow()));
1:     }
1: 
1:     int countComplexCells(SSTableReader reader)
1:     {
1:         return count(reader, x -> x.isRow() ? ((Row) x).stream().mapToInt(this::countComplex).sum() : 0, x -> 0);
1:     }
1: 
1:     int countComplex(ColumnData c)
1:     {
1:         if (!(c instanceof ComplexColumnData))
1:             return 0;
1:         ComplexColumnData ccd = (ComplexColumnData) c;
1:         return ccd.cellsCount();
1:     }
1: 
1:     int count(SSTableReader reader, Function<Unfiltered, Integer> predicate, Function<UnfilteredRowIterator, Integer> partitionPredicate)
1:     {
1:         int instances = 0;
1:         try (ISSTableScanner partitions = reader.getScanner())
1:         {
1:             while (partitions.hasNext())
1:             {
1:                 try (UnfilteredRowIterator iter = partitions.next())
1:                 {
1:                     instances += partitionPredicate.apply(iter);
1:                     while (iter.hasNext())
1:                     {
1:                         Unfiltered atom = iter.next();
1:                         instances += predicate.apply(atom);
1:                     }
1:                 }
1:             }
1:         }
1:         return instances;
1:     }
1: }
============================================================================