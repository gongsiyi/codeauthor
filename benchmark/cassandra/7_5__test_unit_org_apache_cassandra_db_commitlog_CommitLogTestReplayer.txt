1:36958f3: /*
1:36958f3: * Licensed to the Apache Software Foundation (ASF) under one
1:36958f3: * or more contributor license agreements.  See the NOTICE file
1:36958f3: * distributed with this work for additional information
1:36958f3: * regarding copyright ownership.  The ASF licenses this file
1:36958f3: * to you under the Apache License, Version 2.0 (the
1:36958f3: * "License"); you may not use this file except in compliance
1:36958f3: * with the License.  You may obtain a copy of the License at
1:36958f3: *
1:36958f3: *    http://www.apache.org/licenses/LICENSE-2.0
1:36958f3: *
1:36958f3: * Unless required by applicable law or agreed to in writing,
1:36958f3: * software distributed under the License is distributed on an
1:36958f3: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:36958f3: * KIND, either express or implied.  See the License for the
1:36958f3: * specific language governing permissions and limitations
1:36958f3: * under the License.
1:36958f3: */
1:36958f3: package org.apache.cassandra.db.commitlog;
3:36958f3: 
1:36958f3: import java.io.File;
1:36958f3: import java.io.IOException;
1:36958f3: 
1:36958f3: import com.google.common.base.Predicate;
1:36958f3: import org.junit.Assert;
1:36958f3: 
1:36958f3: import org.apache.cassandra.config.DatabaseDescriptor;
1:36958f3: import org.apache.cassandra.db.Mutation;
1:a991b64: import org.apache.cassandra.db.rows.SerializationHelper;
1:c4c9eae: import org.apache.cassandra.io.util.DataInputBuffer;
1:ce63ccc: import org.apache.cassandra.io.util.RebufferingInputStream;
1:36958f3: 
1:36958f3: /**
1:36958f3:  * Utility class for tests needing to examine the commitlog contents.
1:36958f3:  */
1:36958f3: public class CommitLogTestReplayer extends CommitLogReplayer
1:36958f3: {
1:e31e216:     private final Predicate<Mutation> processor;
1:36958f3: 
1:e31e216:     public CommitLogTestReplayer(Predicate<Mutation> processor) throws IOException
1:36958f3:     {
1:e31e216:         super(CommitLog.instance, CommitLogPosition.NONE, null, ReplayFilter.create());
1:e8907c1:         CommitLog.instance.sync();
1:36958f3: 
1:36958f3:         this.processor = processor;
1:e31e216:         commitLogReader = new CommitLogTestReader();
1:36958f3:     }
1:36958f3: 
1:e31e216:     public void examineCommitLog() throws IOException
1:36958f3:     {
1:e31e216:         replayFiles(new File(DatabaseDescriptor.getCommitLogLocation()).listFiles());
1:36958f3:     }
1:36958f3: 
1:e31e216:     private class CommitLogTestReader extends CommitLogReader
1:36958f3:     {
1:36958f3:         @Override
1:e31e216:         protected void readMutation(CommitLogReadHandler handler,
1:e31e216:                                     byte[] inputBuffer,
1:e31e216:                                     int size,
1:e31e216:                                     CommitLogPosition minPosition,
1:e31e216:                                     final int entryLocation,
1:e31e216:                                     final CommitLogDescriptor desc) throws IOException
1:36958f3:         {
1:e31e216:             RebufferingInputStream bufIn = new DataInputBuffer(inputBuffer, 0, size);
1:36958f3:             Mutation mutation;
1:36958f3:             try
1:36958f3:             {
1:e31e216:                 mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL);
1:36958f3:                 Assert.assertTrue(processor.apply(mutation));
1:36958f3:             }
1:36958f3:             catch (IOException e)
1:36958f3:             {
1:36958f3:                 // Test fails.
1:36958f3:                 throw new AssertionError(e);
1:36958f3:             }
1:36958f3:         }
1:36958f3:     }
1:36958f3: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e8907c1
/////////////////////////////////////////////////////////////////////////
1:         CommitLog.instance.sync();
commit:01a11fd
/////////////////////////////////////////////////////////////////////////
0:         CommitLogTestReplayer replayer = new CommitLogTestReplayer(CommitLog.instance, processor);
0:     public CommitLogTestReplayer(CommitLog log, Predicate<Mutation> processor)
0:         this(log, ReplayPosition.NONE, processor);
0:     public CommitLogTestReplayer(CommitLog log, ReplayPosition discardedPos, Predicate<Mutation> processor)
0:         super(log, discardedPos, null, ReplayFilter.create());
commit:f8f6fd2
/////////////////////////////////////////////////////////////////////////
0:         CommitLogTestReplayer replayer = new CommitLogTestReplayer(CommitLog.instance, processor);
0:     public CommitLogTestReplayer(CommitLog log, Predicate<Mutation> processor)
0:         this(log, ReplayPosition.NONE, processor);
0:     public CommitLogTestReplayer(CommitLog log, ReplayPosition discardedPos, Predicate<Mutation> processor)
0:         super(log, discardedPos, null, ReplayFilter.create());
commit:36958f3
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db.commitlog;
1: 
0: import java.io.DataInputStream;
1: import java.io.File;
1: import java.io.IOException;
1: 
1: import com.google.common.base.Predicate;
1: 
1: import org.junit.Assert;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.ColumnSerializer;
1: import org.apache.cassandra.db.Mutation;
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
1: 
1: /**
1:  * Utility class for tests needing to examine the commitlog contents.
1:  */
1: public class CommitLogTestReplayer extends CommitLogReplayer
1: {
0:     static public void examineCommitLog(Predicate<Mutation> processor) throws IOException
1:     {
0:         CommitLog.instance.sync(true);
1: 
0:         CommitLogTestReplayer replayer = new CommitLogTestReplayer(processor);
0:         File commitLogDir = new File(DatabaseDescriptor.getCommitLogLocation());
0:         replayer.recover(commitLogDir.listFiles());
1:     }
1: 
0:     final private Predicate<Mutation> processor;
1: 
0:     public CommitLogTestReplayer(Predicate<Mutation> processor)
1:     {
0:         this(ReplayPosition.NONE, processor);
1:     }
1: 
0:     public CommitLogTestReplayer(ReplayPosition discardedPos, Predicate<Mutation> processor)
1:     {
0:         super(discardedPos, null, ReplayFilter.create());
1:         this.processor = processor;
1:     }
1: 
1:     @Override
0:     void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc)
1:     {
0:         FastByteArrayInputStream bufIn = new FastByteArrayInputStream(inputBuffer, 0, size);
1:         Mutation mutation;
1:         try
1:         {
0:             mutation = Mutation.serializer.deserialize(new DataInputStream(bufIn),
0:                                                            desc.getMessagingVersion(),
0:                                                            ColumnSerializer.Flag.LOCAL);
1:             Assert.assertTrue(processor.apply(mutation));
1:         }
1:         catch (IOException e)
1:         {
1:             // Test fails.
1:             throw new AssertionError(e);
1:         }
1:     }
1: }
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     private final Predicate<Mutation> processor;
0: 
1:     public CommitLogTestReplayer(Predicate<Mutation> processor) throws IOException
1:         super(CommitLog.instance, CommitLogPosition.NONE, null, ReplayFilter.create());
1:         commitLogReader = new CommitLogTestReader();
1:     public void examineCommitLog() throws IOException
1:         replayFiles(new File(DatabaseDescriptor.getCommitLogLocation()).listFiles());
0:     }
0: 
1:     private class CommitLogTestReader extends CommitLogReader
0:     {
0:         @Override
1:         protected void readMutation(CommitLogReadHandler handler,
1:                                     byte[] inputBuffer,
1:                                     int size,
1:                                     CommitLogPosition minPosition,
1:                                     final int entryLocation,
1:                                     final CommitLogDescriptor desc) throws IOException
1:             RebufferingInputStream bufIn = new DataInputBuffer(inputBuffer, 0, size);
0:             Mutation mutation;
0:             try
0:             {
1:                 mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL);
0:                 Assert.assertTrue(processor.apply(mutation));
0:             }
0:             catch (IOException e)
0:             {
0:                 // Test fails.
0:                 throw new AssertionError(e);
0:             }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:78a3d2b
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.SerializationHelper;
/////////////////////////////////////////////////////////////////////////
0:                                                            SerializationHelper.Flag.LOCAL);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:849a438
/////////////////////////////////////////////////////////////////////////
0:     void replayMutation(byte[] inputBuffer, int size, final int entryLocation, final CommitLogDescriptor desc)
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.RebufferingInputStream;
/////////////////////////////////////////////////////////////////////////
0:         RebufferingInputStream bufIn = new DataInputBuffer(inputBuffer, 0, size);
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c4c9eae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputBuffer;
/////////////////////////////////////////////////////////////////////////
0:         NIODataInputStream bufIn = new DataInputBuffer(inputBuffer, 0, size);
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.NIODataInputStream;
/////////////////////////////////////////////////////////////////////////
0:         NIODataInputStream bufIn = new NIODataInputStream(inputBuffer, 0, size);
0:             mutation = Mutation.serializer.deserialize(bufIn,
author:branimir
-------------------------------------------------------------------------------
commit:9a3fa88
/////////////////////////////////////////////////////////////////////////
0:     public static void examineCommitLog(Predicate<Mutation> processor) throws IOException
============================================================================