1:ce63ccc: /*
1:ce63ccc:  * Licensed to the Apache Software Foundation (ASF) under one
1:ce63ccc:  * or more contributor license agreements.  See the NOTICE file
1:ce63ccc:  * distributed with this work for additional information
1:ce63ccc:  * regarding copyright ownership.  The ASF licenses this file
1:ce63ccc:  * to you under the Apache License, Version 2.0 (the
1:ce63ccc:  * "License"); you may not use this file except in compliance
1:ce63ccc:  * with the License.  You may obtain a copy of the License at
1:ce63ccc:  *
1:ce63ccc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ce63ccc:  *
1:ce63ccc:  * Unless required by applicable law or agreed to in writing, software
1:ce63ccc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce63ccc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce63ccc:  * See the License for the specific language governing permissions and
1:ce63ccc:  * limitations under the License.
1:ce63ccc:  */
1:ce63ccc: 
1:ce63ccc: package org.apache.cassandra.io.util;
1:ce63ccc: 
1:ce63ccc: import java.io.EOFException;
1:ce63ccc: import java.io.IOException;
1:ce63ccc: import java.nio.ByteBuffer;
1:ce63ccc: import java.util.Arrays;
1:ce63ccc: import java.util.Random;
1:ce63ccc: 
1:ce63ccc: import com.google.common.primitives.Ints;
1:ce63ccc: import org.junit.Test;
1:ce63ccc: 
1:ce63ccc: import org.apache.cassandra.utils.ByteBufferUtil;
1:ce63ccc: 
1:ce63ccc: import static org.junit.Assert.assertEquals;
1:ce63ccc: import static org.junit.Assert.assertFalse;
1:ce63ccc: import static org.junit.Assert.assertTrue;
1:ce63ccc: 
1:ce63ccc: public class FileSegmentInputStreamTest
1:ce63ccc: {
1:ce63ccc:     private ByteBuffer allocateBuffer(int size)
1:ce63ccc:     {
1:ce63ccc:         ByteBuffer ret = ByteBuffer.allocate(Ints.checkedCast(size));
1:ce63ccc:         long seed = System.nanoTime();
1:ce63ccc:         //seed = 365238103404423L;
1:ce63ccc:         System.out.println("Seed " + seed);
1:ce63ccc: 
1:ce63ccc:         new Random(seed).nextBytes(ret.array());
1:ce63ccc:         return ret;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test
1:ce63ccc:     public void testRead() throws IOException
1:ce63ccc:     {
1:ce63ccc:         testRead(0, 4096, 1024);
1:ce63ccc:         testRead(1024, 4096, 1024);
1:ce63ccc:         testRead(4096, 4096, 1024);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     private void testRead(int offset, int size, int checkInterval) throws IOException
1:ce63ccc:     {
1:ce63ccc:         final ByteBuffer buffer = allocateBuffer(size);
1:ce63ccc:         final String path = buffer.toString();
1:ce63ccc: 
1:ce63ccc:         FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset);
1:ce63ccc:         assertEquals(path, reader.getPath());
1:ce63ccc: 
1:ce63ccc:         for (int i = offset; i < (size + offset); i += checkInterval)
1:ce63ccc:         {
1:ce63ccc:             reader.seek(i);
1:ce63ccc:             assertFalse(reader.isEOF());
1:ce63ccc:             assertEquals(i, reader.getFilePointer());
1:ce63ccc: 
1:ce63ccc:             buffer.position(i - offset);
1:ce63ccc: 
1:ce63ccc:             int remaining = buffer.remaining();
1:ce63ccc:             assertEquals(remaining, reader.bytesRemaining());
1:ce63ccc:             byte[] expected = new byte[buffer.remaining()];
1:ce63ccc:             buffer.get(expected);
1:ce63ccc:             assertTrue(Arrays.equals(expected, ByteBufferUtil.read(reader, remaining).array()));
1:ce63ccc: 
1:ce63ccc:             assertTrue(reader.isEOF());
1:ce63ccc:             assertEquals(0, reader.bytesRemaining());
1:ce63ccc:             assertEquals(buffer.capacity() + offset, reader.getFilePointer());
1:ce63ccc:         }
1:ce63ccc: 
1:ce63ccc:         reader.close();
1:ce63ccc:         reader.close();
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test(expected = UnsupportedOperationException.class)
1:ce63ccc:     public void testMarkNotSupported() throws Exception
1:ce63ccc:     {
1:9484783:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0))
1:9484783:         {
1:9484783:             assertFalse(reader.markSupported());
1:9484783:             assertEquals(0, reader.bytesPastMark(null));
1:9484783:             reader.mark();
1:9484783:         }
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test(expected = UnsupportedOperationException.class)
1:ce63ccc:     public void testResetNotSupported() throws Exception
1:9484783:     {
1:9484783:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0))
1:ce63ccc:         {
1:9484783:             reader.reset(null);
1:9484783:         }
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test(expected = IllegalArgumentException.class)
1:ce63ccc:     public void testSeekNegative() throws Exception
1:9484783:     {
1:9484783:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0))
1:ce63ccc:         {
1:9484783:             reader.seek(-1);
1:9484783:         }
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test(expected = IllegalArgumentException.class)
1:ce63ccc:     public void testSeekBeforeOffset() throws Exception
1:ce63ccc:     {
1:9484783:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024))
1:9484783:         {
1:9484783:             reader.seek(1023);
1:9484783:         }
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test(expected = IllegalArgumentException.class)
1:ce63ccc:     public void testSeekPastLength() throws Exception
1:9484783:     {
1:9484783:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024))
1:ce63ccc:         {
1:9484783:             reader.seek(2049);
1:9484783:         }
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test(expected = EOFException.class)
1:ce63ccc:     public void testReadBytesTooMany() throws Exception
1:9484783:     {
1:9484783:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024))
1:ce63ccc:         {
1:9484783:             ByteBufferUtil.read(reader, 2049);
1:9484783:         }
1:ce63ccc:     }
1:ce63ccc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9484783
/////////////////////////////////////////////////////////////////////////
1:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0))
1:         {
1:             assertFalse(reader.markSupported());
1:             assertEquals(0, reader.bytesPastMark(null));
1:             reader.mark();
1:         }
1:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0))
1:         {
1:             reader.reset(null);
1:         }
1:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0))
1:         {
1:             reader.seek(-1);
1:         }
1:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024))
1:         {
1:             reader.seek(1023);
1:         }
1:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024))
1:         {
1:             reader.seek(2049);
1:         }
1:         try (FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024))
1:         {
1:             ByteBufferUtil.read(reader, 2049);
1:         }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: import com.google.common.primitives.Ints;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class FileSegmentInputStreamTest
1: {
1:     private ByteBuffer allocateBuffer(int size)
1:     {
1:         ByteBuffer ret = ByteBuffer.allocate(Ints.checkedCast(size));
1:         long seed = System.nanoTime();
1:         //seed = 365238103404423L;
1:         System.out.println("Seed " + seed);
1: 
1:         new Random(seed).nextBytes(ret.array());
1:         return ret;
1:     }
1: 
1:     @Test
1:     public void testRead() throws IOException
1:     {
1:         testRead(0, 4096, 1024);
1:         testRead(1024, 4096, 1024);
1:         testRead(4096, 4096, 1024);
1:     }
1: 
1:     private void testRead(int offset, int size, int checkInterval) throws IOException
1:     {
1:         final ByteBuffer buffer = allocateBuffer(size);
1:         final String path = buffer.toString();
1: 
1:         FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset);
1:         assertEquals(path, reader.getPath());
1: 
1:         for (int i = offset; i < (size + offset); i += checkInterval)
1:         {
1:             reader.seek(i);
1:             assertFalse(reader.isEOF());
1:             assertEquals(i, reader.getFilePointer());
1: 
1:             buffer.position(i - offset);
1: 
1:             int remaining = buffer.remaining();
1:             assertEquals(remaining, reader.bytesRemaining());
1:             byte[] expected = new byte[buffer.remaining()];
1:             buffer.get(expected);
1:             assertTrue(Arrays.equals(expected, ByteBufferUtil.read(reader, remaining).array()));
1: 
1:             assertTrue(reader.isEOF());
1:             assertEquals(0, reader.bytesRemaining());
1:             assertEquals(buffer.capacity() + offset, reader.getFilePointer());
1:         }
1: 
1:         reader.close();
1:         reader.close();
1:     }
1: 
1:     @Test(expected = UnsupportedOperationException.class)
1:     public void testMarkNotSupported() throws Exception
1:     {
0:         FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0);
0:         assertFalse(reader.markSupported());
0:         assertEquals(0, reader.bytesPastMark(null));
0:         reader.mark();
1:     }
1: 
1:     @Test(expected = UnsupportedOperationException.class)
1:     public void testResetNotSupported() throws Exception
1:     {
0:         FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0);
0:         reader.reset(null);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSeekNegative() throws Exception
1:     {
0:         FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 0);
0:         reader.seek(-1);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSeekBeforeOffset() throws Exception
1:     {
0:         FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024);
0:         reader.seek(1023);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSeekPastLength() throws Exception
1:     {
0:         FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024);
0:         reader.seek(2049);
1:     }
1: 
1:     @Test(expected = EOFException.class)
1:     public void testReadBytesTooMany() throws Exception
1:     {
0:         FileSegmentInputStream reader = new FileSegmentInputStream(allocateBuffer(1024), "", 1024);
0:         ByteBufferUtil.read(reader, 2049);
1:     }
1: }
============================================================================