1:5a6f0b8: /**
1:5a6f0b8:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a6f0b8:  * or more contributor license agreements.  See the NOTICE file
1:5a6f0b8:  * distributed with this work for additional information
1:5a6f0b8:  * regarding copyright ownership.  The ASF licenses this file
1:5a6f0b8:  * to you under the Apache License, Version 2.0 (the
1:5a6f0b8:  * "License"); you may not use this file except in compliance
1:5a6f0b8:  * with the License.  You may obtain a copy of the License at
1:5a6f0b8:  *
1:5a6f0b8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a6f0b8:  *
1:5a6f0b8:  * Unless required by applicable law or agreed to in writing, software
1:5a6f0b8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a6f0b8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a6f0b8:  * See the License for the specific language governing permissions and
1:5a6f0b8:  * limitations under the License.
1:5a6f0b8:  */
2:5a6f0b8: 
1:5a6f0b8: package org.apache.cassandra.net;
1:5a6f0b8: 
1:5a6f0b8: import java.io.IOException;
1:f81cc74: import java.net.InetAddress;
1:5a6f0b8: import java.util.Collections;
1:5a6f0b8: import java.util.Map;
1:5a6f0b8: 
1:5c94432: import com.google.common.annotations.VisibleForTesting;
1:5a6f0b8: import com.google.common.collect.ImmutableMap;
1:5a6f0b8: 
1:5a6f0b8: import org.apache.cassandra.concurrent.Stage;
1:b993eec: import org.apache.cassandra.db.TypeSizes;
1:5a6f0b8: import org.apache.cassandra.io.IVersionedSerializer;
1:dc9ed46: import org.apache.cassandra.io.util.DataOutputBuffer;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:5c94432: import org.apache.cassandra.tracing.Tracing;
1:5a6f0b8: import org.apache.cassandra.utils.FBUtilities;
1:5c94432: import static org.apache.cassandra.tracing.Tracing.isTracing;
1:5c94432: 
1:5a6f0b8: public class MessageOut<T>
3:5a6f0b8: {
1:f81cc74:     public final InetAddress from;
1:021ec71:     public final MessagingService.Verb verb;
1:5a6f0b8:     public final T payload;
1:5a6f0b8:     public final IVersionedSerializer<T> serializer;
1:5a6f0b8:     public final Map<String, byte[]> parameters;
1:144644b:     private long payloadSize = -1;
1:144644b:     private int payloadSizeVersion = -1;
1:5a6f0b8: 
1:5a6f0b8:     // we do support messages that just consist of a verb
1:021ec71:     public MessageOut(MessagingService.Verb verb)
1:5a6f0b8:     {
1:5a6f0b8:         this(verb, null, null);
3:5a6f0b8:     }
1:5a6f0b8: 
1:021ec71:     public MessageOut(MessagingService.Verb verb, T payload, IVersionedSerializer<T> serializer)
1:b993eec:     {
1:5c94432:         this(verb,
1:5c94432:              payload,
1:5c94432:              serializer,
1:f5866ca:              isTracing()
1:bf25e66:                  ? Tracing.instance.getTraceHeaders()
1:f5866ca:                  : Collections.<String, byte[]>emptyMap());
1:5a6f0b8:     }
1:5a6f0b8: 
1:5c94432:     private MessageOut(MessagingService.Verb verb, T payload, IVersionedSerializer<T> serializer, Map<String, byte[]> parameters)
1:5a6f0b8:     {
1:f81cc74:         this(FBUtilities.getBroadcastAddress(), verb, payload, serializer, parameters);
1:5a6f0b8:     }
1:5a6f0b8: 
1:5c94432:     @VisibleForTesting
1:f81cc74:     public MessageOut(InetAddress from, MessagingService.Verb verb, T payload, IVersionedSerializer<T> serializer, Map<String, byte[]> parameters)
1:5a6f0b8:     {
1:f81cc74:         this.from = from;
1:5a6f0b8:         this.verb = verb;
1:5a6f0b8:         this.payload = payload;
1:5a6f0b8:         this.serializer = serializer;
1:5a6f0b8:         this.parameters = parameters;
1:5a6f0b8:     }
1:5a6f0b8: 
1:5a6f0b8:     public MessageOut<T> withParameter(String key, byte[] value)
1:5a6f0b8:     {
2:5a6f0b8:         ImmutableMap.Builder<String, byte[]> builder = ImmutableMap.builder();
1:5a6f0b8:         builder.putAll(parameters).put(key, value);
2:5a6f0b8:         return new MessageOut<T>(verb, payload, serializer, builder.build());
1:5a6f0b8:     }
1:5a6f0b8: 
1:9a6ee93:     public Stage getStage()
1:5a6f0b8:     {
1:021ec71:         return MessagingService.verbStages.get(verb);
1:5a6f0b8:     }
1:5a6f0b8: 
1:e6610e4:     public long getTimeout()
1:e6610e4:     {
1:9797511:         return verb.getTimeout();
1:e6610e4:     }
1:e6610e4: 
1:5a6f0b8:     public String toString()
1:5a6f0b8:     {
1:5c5fdd4:         StringBuilder sbuf = new StringBuilder();
1:f81cc74:         sbuf.append("TYPE:").append(getStage()).append(" VERB:").append(verb);
1:5a6f0b8:         return sbuf.toString();
1:5a6f0b8:     }
1:5a6f0b8: 
1:75508ec:     public void serialize(DataOutputPlus out, int version) throws IOException
1:5a6f0b8:     {
1:f81cc74:         CompactEndpointSerializationHelper.serialize(from, out);
1:5a6f0b8: 
1:465def8:         out.writeInt(MessagingService.Verb.convertForMessagingServiceVersion(verb, version).ordinal());
1:5a6f0b8:         out.writeInt(parameters.size());
2:5a6f0b8:         for (Map.Entry<String, byte[]> entry : parameters.entrySet())
1:5a6f0b8:         {
1:5a6f0b8:             out.writeUTF(entry.getKey());
1:5a6f0b8:             out.writeInt(entry.getValue().length);
1:5a6f0b8:             out.write(entry.getValue());
1:5a6f0b8:         }
1:5a6f0b8: 
1:5a6f0b8:         if (payload != null)
1:dc9ed46:         {
1:05660a5:             try(DataOutputBuffer dob = DataOutputBuffer.scratchBuffer.get())
1:dc9ed46:             {
1:dc9ed46:                 serializer.serialize(payload, dob, version);
1:dc9ed46: 
1:dc9ed46:                 int size = dob.getLength();
1:dc9ed46:                 out.writeInt(size);
1:dc9ed46:                 out.write(dob.getData(), 0, size);
1:dc9ed46:             }
1:dc9ed46:         }
1:dc9ed46:         else
1:dc9ed46:         {
1:dc9ed46:             out.writeInt(0);
1:dc9ed46:         }
1:dc9ed46:     }
1:b993eec: 
1:b993eec:     public int serializedSize(int version)
1:dc9ed46:     {
1:b993eec:         int size = CompactEndpointSerializationHelper.serializedSize(from);
1:b993eec: 
1:03f72ac:         size += TypeSizes.sizeof(verb.ordinal());
1:03f72ac:         size += TypeSizes.sizeof(parameters.size());
1:b993eec:         for (Map.Entry<String, byte[]> entry : parameters.entrySet())
1:b993eec:         {
1:03f72ac:             size += TypeSizes.sizeof(entry.getKey());
1:03f72ac:             size += TypeSizes.sizeof(entry.getValue().length);
1:b993eec:             size += entry.getValue().length;
1:b993eec:         }
1:b993eec: 
1:144644b:         long longSize = payloadSize(version);
1:b993eec:         assert longSize <= Integer.MAX_VALUE; // larger values are supported in sstables but not messages
1:03f72ac:         size += TypeSizes.sizeof((int) longSize);
1:b993eec:         size += longSize;
1:b993eec:         return size;
1:b993eec:     }
1:144644b: 
1:144644b:     /**
1:144644b:      * Calculate the size of the payload of this message for the specified protocol version
1:144644b:      * and memoize the result for the specified protocol version. Memoization only covers the protocol
1:144644b:      * version of the first invocation.
1:144644b:      *
1:144644b:      * It is not safe to call payloadSize concurrently from multiple threads unless it has already been invoked
1:144644b:      * once from a single thread and there is a happens before relationship between that invocation and other
1:144644b:      * threads concurrently invoking payloadSize.
1:144644b:      *
1:144644b:      * For instance it would be safe to invokePayload size to make a decision in the thread that created the message
1:144644b:      * and then hand it off to other threads via a thread-safe queue, volatile write, or synchronized/ReentrantLock.
1:144644b:      * @param version Protocol version to use when calculating payload size
1:144644b:      * @return Size of the payload of this message in bytes
1:144644b:      */
1:144644b:     public long payloadSize(int version)
1:144644b:     {
1:144644b:         if (payloadSize == -1)
1:144644b:         {
1:144644b:             payloadSize = payload == null ? 0 : serializer.serializedSize(payload, version);
1:144644b:             payloadSizeVersion = version;
1:144644b:         }
1:144644b:         else if (payloadSizeVersion != version)
1:144644b:         {
1:144644b:             return payload == null ? 0 : serializer.serializedSize(payload, version);
1:144644b:         }
1:144644b:         return payloadSize;
1:144644b:     }
1:5a6f0b8: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:05660a5
/////////////////////////////////////////////////////////////////////////
1:             try(DataOutputBuffer dob = DataOutputBuffer.scratchBuffer.get())
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return verb.getTimeout();
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:d32a745
commit:2d769f0
commit:465def8
/////////////////////////////////////////////////////////////////////////
1:         out.writeInt(MessagingService.Verb.convertForMessagingServiceVersion(verb, version).ordinal());
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBuffer;
/////////////////////////////////////////////////////////////////////////
1:         {
0:             DataOutputBuffer dob = DataOutputBuffer.scratchBuffer.get();
0:             try
1:             {
1:                 serializer.serialize(payload, dob, version);
1: 
1:                 int size = dob.getLength();
1:                 out.writeInt(size);
1:                 out.write(dob.getData(), 0, size);
1:             }
0:             finally
1:             {
0:                 dob.recycle();
1:             }
1:         }
1:         else
1:         {
1:             out.writeInt(0);
1:         }
author:Mick Semb Wever
-------------------------------------------------------------------------------
commit:bf25e66
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                  ? Tracing.instance.getTraceHeaders()
author:Jason Brown
-------------------------------------------------------------------------------
commit:6e2cf57
commit:9a6ee93
/////////////////////////////////////////////////////////////////////////
1:     public Stage getStage()
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:         size += TypeSizes.sizeof(verb.ordinal());
1:         size += TypeSizes.sizeof(parameters.size());
1:             size += TypeSizes.sizeof(entry.getKey());
1:             size += TypeSizes.sizeof(entry.getValue().length);
1:         size += TypeSizes.sizeof((int) longSize);
commit:144644b
/////////////////////////////////////////////////////////////////////////
1:     private long payloadSize = -1;
1:     private int payloadSizeVersion = -1;
/////////////////////////////////////////////////////////////////////////
0:     private Stage getStage()
/////////////////////////////////////////////////////////////////////////
1:         long longSize = payloadSize(version);
/////////////////////////////////////////////////////////////////////////
0:         long longSize = payloadSize(version);
1: 
1:     /**
1:      * Calculate the size of the payload of this message for the specified protocol version
1:      * and memoize the result for the specified protocol version. Memoization only covers the protocol
1:      * version of the first invocation.
1:      *
1:      * It is not safe to call payloadSize concurrently from multiple threads unless it has already been invoked
1:      * once from a single thread and there is a happens before relationship between that invocation and other
1:      * threads concurrently invoking payloadSize.
1:      *
1:      * For instance it would be safe to invokePayload size to make a decision in the thread that created the message
1:      * and then hand it off to other threads via a thread-safe queue, volatile write, or synchronized/ReentrantLock.
1:      * @param version Protocol version to use when calculating payload size
1:      * @return Size of the payload of this message in bytes
1:      */
1:     public long payloadSize(int version)
1:     {
1:         if (payloadSize == -1)
1:         {
1:             payloadSize = payload == null ? 0 : serializer.serializedSize(payload, version);
1:             payloadSizeVersion = version;
1:         }
1:         else if (payloadSizeVersion != version)
1:         {
1:             return payload == null ? 0 : serializer.serializedSize(payload, version);
1:         }
1:         return payloadSize;
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:fa0cc90
commit:e906192
commit:e4fc395
/////////////////////////////////////////////////////////////////////////
0:             size += TypeSizes.NATIVE.sizeof(entry.getKey());
0:             size += TypeSizes.NATIVE.sizeof(entry.getValue().length);
commit:1def02f
/////////////////////////////////////////////////////////////////////////
commit:5c5fdd4
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder sbuf = new StringBuilder();
author:Ben Chan
-------------------------------------------------------------------------------
commit:f5866ca
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.cassandra.tracing.Tracing.TRACE_TYPE;
/////////////////////////////////////////////////////////////////////////
1:              isTracing()
0:                  ? ImmutableMap.of(TRACE_HEADER, UUIDGen.decompose(Tracing.instance.getSessionId()),
0:                                    TRACE_TYPE, new byte[] { Tracing.TraceType.serialize(Tracing.instance.getTraceType()) })
1:                  : Collections.<String, byte[]>emptyMap());
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public void serialize(DataOutputPlus out, int version) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:15df669
/////////////////////////////////////////////////////////////////////////
0:              isTracing() ? ImmutableMap.of(TRACE_HEADER, UUIDGen.decompose(Tracing.instance.getSessionId()))
commit:b1d7405
/////////////////////////////////////////////////////////////////////////
commit:5c94432
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
1: import org.apache.cassandra.tracing.Tracing;
0: import org.apache.cassandra.utils.UUIDGen;
1: 
0: import static org.apache.cassandra.tracing.Tracing.TRACE_HEADER;
1: import static org.apache.cassandra.tracing.Tracing.isTracing;
/////////////////////////////////////////////////////////////////////////
1:         this(verb,
1:              payload,
1:              serializer,
0:              isTracing() ? ImmutableMap.of(TRACE_HEADER, UUIDGen.decompose(Tracing.instance().getSessionId()))
0:                          : Collections.<String, byte[]>emptyMap());
1:     private MessageOut(MessagingService.Verb verb, T payload, IVersionedSerializer<T> serializer, Map<String, byte[]> parameters)
1:     @VisibleForTesting
commit:e6610e4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     public long getTimeout()
1:     {
0:         return DatabaseDescriptor.getTimeout(verb);
1:     }
1: 
commit:b993eec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int serializedSize(int version)
1:     {
1:         int size = CompactEndpointSerializationHelper.serializedSize(from);
1: 
0:         size += TypeSizes.NATIVE.sizeof(verb.ordinal());
0:         size += TypeSizes.NATIVE.sizeof(parameters.size());
1:         for (Map.Entry<String, byte[]> entry : parameters.entrySet())
1:         {
0:             TypeSizes.NATIVE.sizeof(entry.getKey());
0:             TypeSizes.NATIVE.sizeof(entry.getValue().length);
1:             size += entry.getValue().length;
1:         }
1: 
0:         long longSize = payload == null ? 0 : serializer.serializedSize(payload, version);
1:         assert longSize <= Integer.MAX_VALUE; // larger values are supported in sstables but not messages
0:         size += TypeSizes.NATIVE.sizeof((int) longSize);
1:         size += longSize;
1:         return size;
1:     }
commit:021ec71
/////////////////////////////////////////////////////////////////////////
1:     public final MessagingService.Verb verb;
1:     public MessageOut(MessagingService.Verb verb)
1:     public MessageOut(MessagingService.Verb verb, T payload, IVersionedSerializer<T> serializer)
0:     public MessageOut(MessagingService.Verb verb, T payload, IVersionedSerializer<T> serializer, Map<String, byte[]> parameters)
/////////////////////////////////////////////////////////////////////////
1:         return MessagingService.verbStages.get(verb);
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.net;
1: 
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.Collections;
1: import java.util.Map;
1: 
1: import com.google.common.collect.ImmutableMap;
1: 
1: import org.apache.cassandra.concurrent.Stage;
1: import org.apache.cassandra.io.IVersionedSerializer;
0: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class MessageOut<T>
1: {
0:     public final StorageService.Verb verb;
1:     public final T payload;
1:     public final IVersionedSerializer<T> serializer;
1:     public final Map<String, byte[]> parameters;
1: 
1:     // we do support messages that just consist of a verb
0:     public MessageOut(StorageService.Verb verb)
1:     {
1:         this(verb, null, null);
1:     }
1: 
0:     public MessageOut(StorageService.Verb verb, T payload, IVersionedSerializer<T> serializer)
1:     {
0:         this(verb, payload, serializer, Collections.<String, byte[]>emptyMap());
1:     }
1: 
0:     public MessageOut(StorageService.Verb verb, T payload, IVersionedSerializer<T> serializer, Map<String, byte[]> parameters)
1:     {
1:         this.verb = verb;
1:         this.payload = payload;
1:         this.serializer = serializer;
1:         this.parameters = parameters;
1:     }
1: 
1:     public MessageOut<T> withParameter(String key, byte[] value)
1:     {
1:         ImmutableMap.Builder<String, byte[]> builder = ImmutableMap.builder();
1:         builder.putAll(parameters).put(key, value);
1:         return new MessageOut<T>(verb, payload, serializer, builder.build());
1:     }
1:     
0:     public MessageOut withHeaderRemoved(String key)
1:     {
1:         ImmutableMap.Builder<String, byte[]> builder = ImmutableMap.builder();
1:         for (Map.Entry<String, byte[]> entry : parameters.entrySet())
1:         {
0:             if (!entry.getKey().equals(key))
0:                 builder.put(entry.getKey(), entry.getValue());
1:         }
1:         return new MessageOut<T>(verb, payload, serializer, builder.build());
1:     }
1: 
0:     public Stage getStage()
1:     {
0:         return StorageService.verbStages.get(verb);
1:     }
1: 
1:     public String toString()
1:     {
0:         StringBuilder sbuf = new StringBuilder("");
0:         String separator = System.getProperty("line.separator");
0:         sbuf.append("TYPE:").append(getStage())
0:             .append(separator).append("VERB:").append(verb)
0:         	.append(separator);
1:         return sbuf.toString();
1:     }
1: 
0:     public void serialize(DataOutputStream out, int version) throws IOException
1:     {
0:         CompactEndpointSerializationHelper.serialize(FBUtilities.getBroadcastAddress(), out);
1: 
0:         out.writeInt(verb.ordinal());
1:         out.writeInt(parameters.size());
1:         for (Map.Entry<String, byte[]> entry : parameters.entrySet())
1:         {
1:             out.writeUTF(entry.getKey());
1:             out.writeInt(entry.getValue().length);
1:             out.write(entry.getValue());
1:         }
1: 
0:         long longSize = payload == null ? 0 : serializer.serializedSize(payload, version);
0:         assert longSize <= Integer.MAX_VALUE; // larger values are supported in sstables but not messages
0:         out.writeInt((int) longSize);
1:         if (payload != null)
0:             serializer.serialize(payload, out, version);
1:     }
1: }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f81cc74
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
1:     public final InetAddress from;
/////////////////////////////////////////////////////////////////////////
1:         this(FBUtilities.getBroadcastAddress(), verb, payload, serializer, parameters);
0:     }
0: 
1:     public MessageOut(InetAddress from, MessagingService.Verb verb, T payload, IVersionedSerializer<T> serializer, Map<String, byte[]> parameters)
0:     {
1:         this.from = from;
/////////////////////////////////////////////////////////////////////////
1:         sbuf.append("TYPE:").append(getStage()).append(" VERB:").append(verb);
1:         CompactEndpointSerializationHelper.serialize(from, out);
============================================================================