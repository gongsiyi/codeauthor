1:c8d3cc1: /*
1:c8d3cc1:  * Licensed to the Apache Software Foundation (ASF) under one
1:c8d3cc1:  * or more contributor license agreements.  See the NOTICE file
1:c8d3cc1:  * distributed with this work for additional information
1:c8d3cc1:  * regarding copyright ownership.  The ASF licenses this file
1:c8d3cc1:  * to you under the Apache License, Version 2.0 (the
1:c8d3cc1:  * "License"); you may not use this file except in compliance
1:c8d3cc1:  * with the License.  You may obtain a copy of the License at
1:c8d3cc1:  *
1:c8d3cc1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c8d3cc1:  *
1:c8d3cc1:  * Unless required by applicable law or agreed to in writing, software
1:c8d3cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c8d3cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8d3cc1:  * See the License for the specific language governing permissions and
1:c8d3cc1:  * limitations under the License.
1:c8d3cc1:  */
1:c8d3cc1: package org.apache.cassandra;
1:c8d3cc1: 
1:c8d3cc1: import java.util.Iterator;
1:c8d3cc1: 
1:c8d3cc1: import ch.qos.logback.core.Appender;
1:c8d3cc1: import ch.qos.logback.core.UnsynchronizedAppenderBase;
1:c8d3cc1: import ch.qos.logback.core.spi.AppenderAttachable;
1:c8d3cc1: import ch.qos.logback.core.spi.AppenderAttachableImpl;
1:c8d3cc1: 
1:c8d3cc1: public class TeeingAppender<E> extends UnsynchronizedAppenderBase<E> implements AppenderAttachable<E>
1:c8d3cc1: {
1:c8d3cc1:     AppenderAttachableImpl<E> aai = new AppenderAttachableImpl<>();
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     protected void append(E e)
1:c8d3cc1:     {
1:c8d3cc1:         aai.appendLoopOnAppenders(e);
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public void addAppender(Appender<E> appender)
1:c8d3cc1:     {
1:c8d3cc1:         aai.addAppender(appender);
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public void detachAndStopAllAppenders()
1:c8d3cc1:     {
1:c8d3cc1:         aai.detachAndStopAllAppenders();
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public boolean detachAppender(Appender<E> appender)
1:c8d3cc1:     {
1:c8d3cc1:         return aai.detachAppender(appender);
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public boolean detachAppender(String name)
1:c8d3cc1:     {
1:c8d3cc1:         return aai.detachAppender(name);
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public Appender<E> getAppender(String name)
1:c8d3cc1:     {
1:c8d3cc1:         return aai.getAppender(name);
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public boolean isAttached(Appender<E> appender)
1:c8d3cc1:     {
1:c8d3cc1:         return aai.isAttached(appender);
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public Iterator<Appender<E>> iteratorForAppenders()
1:c8d3cc1:     {
1:c8d3cc1:         return aai.iteratorForAppenders();
1:c8d3cc1:     }
1:c8d3cc1: 
1:0556fbf:     @Override
1:0556fbf:     public void stop()
1:0556fbf:     {
1:0556fbf:         try
1:0556fbf:         {
1:0556fbf:             if (started)
1:0556fbf:                 detachAndStopAllAppenders();
1:0556fbf:         }
1:0556fbf:         finally
1:0556fbf:         {
1:0556fbf:             super.stop();
1:0556fbf:         }
1:0556fbf:     }
1:0556fbf: 
1:c8d3cc1: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:0556fbf
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void stop()
1:     {
1:         try
1:         {
1:             if (started)
1:                 detachAndStopAllAppenders();
1:         }
1:         finally
1:         {
1:             super.stop();
1:         }
1:     }
1: 
commit:c8d3cc1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra;
1: 
1: import java.util.Iterator;
1: 
1: import ch.qos.logback.core.Appender;
1: import ch.qos.logback.core.UnsynchronizedAppenderBase;
1: import ch.qos.logback.core.spi.AppenderAttachable;
1: import ch.qos.logback.core.spi.AppenderAttachableImpl;
1: 
1: public class TeeingAppender<E> extends UnsynchronizedAppenderBase<E> implements AppenderAttachable<E>
1: {
1:     AppenderAttachableImpl<E> aai = new AppenderAttachableImpl<>();
1: 
1:     @Override
1:     protected void append(E e)
1:     {
1:         aai.appendLoopOnAppenders(e);
1:     }
1: 
1:     @Override
1:     public void addAppender(Appender<E> appender)
1:     {
1:         aai.addAppender(appender);
1:     }
1: 
1:     @Override
1:     public void detachAndStopAllAppenders()
1:     {
1:         aai.detachAndStopAllAppenders();
1:     }
1: 
1:     @Override
1:     public boolean detachAppender(Appender<E> appender)
1:     {
1:         return aai.detachAppender(appender);
1:     }
1: 
1:     @Override
1:     public boolean detachAppender(String name)
1:     {
1:         return aai.detachAppender(name);
1:     }
1: 
1:     @Override
1:     public Appender<E> getAppender(String name)
1:     {
1:         return aai.getAppender(name);
1:     }
1: 
1:     @Override
1:     public boolean isAttached(Appender<E> appender)
1:     {
1:         return aai.isAttached(appender);
1:     }
1: 
1:     @Override
1:     public Iterator<Appender<E>> iteratorForAppenders()
1:     {
1:         return aai.iteratorForAppenders();
1:     }
1: 
1: }
============================================================================