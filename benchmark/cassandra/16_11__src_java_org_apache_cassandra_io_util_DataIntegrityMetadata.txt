1:639b314: /*
1:639b314:  * Licensed to the Apache Software Foundation (ASF) under one
1:639b314:  * or more contributor license agreements.  See the NOTICE file
1:639b314:  * distributed with this work for additional information
1:639b314:  * regarding copyright ownership.  The ASF licenses this file
1:639b314:  * to you under the Apache License, Version 2.0 (the
1:639b314:  * "License"); you may not use this file except in compliance
1:639b314:  * with the License.  You may obtain a copy of the License at
1:639b314:  *
1:639b314:  *     http://www.apache.org/licenses/LICENSE-2.0
1:639b314:  *
1:639b314:  * Unless required by applicable law or agreed to in writing, software
1:639b314:  * distributed under the License is distributed on an "AS IS" BASIS,
1:639b314:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:639b314:  * See the License for the specific language governing permissions and
1:639b314:  * limitations under the License.
1:639b314:  */
1:639b314: package org.apache.cassandra.io.util;
4:21bdf87: 
1:639b314: import java.io.Closeable;
1:639b314: import java.io.File;
1:639b314: import java.io.IOException;
1:2d7909d: import java.util.zip.CheckedInputStream;
1:639b314: import java.util.zip.Checksum;
1:9405ce0: 
1:639b314: import org.apache.cassandra.io.sstable.Component;
1:639b314: import org.apache.cassandra.io.sstable.Descriptor;
1:30bb255: import org.apache.cassandra.utils.ChecksumType;
1:ce63ccc: import org.apache.cassandra.utils.Throwables;
1:21bdf87: 
1:639b314: public class DataIntegrityMetadata
1:21bdf87: {
1:639b314:     public static ChecksumValidator checksumValidator(Descriptor desc) throws IOException
1:21bdf87:     {
1:639b314:         return new ChecksumValidator(desc);
3:21bdf87:     }
1:2d7909d: 
1:639b314:     public static class ChecksumValidator implements Closeable
1:a991b64:     {
1:30bb255:         private final ChecksumType checksumType;
1:639b314:         private final RandomAccessReader reader;
1:639b314:         public final int chunkSize;
1:fa6205c:         private final String dataFilename;
1:2d7909d: 
1:9405ce0:         public ChecksumValidator(Descriptor descriptor) throws IOException
1:21bdf87:         {
1:30bb255:             this(descriptor.version.uncompressedChecksumType(),
1:fa6205c:                  RandomAccessReader.open(new File(descriptor.filenameFor(Component.CRC))),
1:fa6205c:                  descriptor.filenameFor(Component.DATA));
1:fa6205c:         }
1:fa6205c: 
1:30bb255:         public ChecksumValidator(ChecksumType checksumType, RandomAccessReader reader, String dataFilename) throws IOException
1:21bdf87:         {
1:30bb255:             this.checksumType = checksumType;
1:fa6205c:             this.reader = reader;
1:fa6205c:             this.dataFilename = dataFilename;
1:639b314:             chunkSize = reader.readInt();
1:2d7909d:         }
1:2d7909d: 
1:639b314:         public void seek(long offset)
1:21bdf87:         {
1:639b314:             long start = chunkStart(offset);
1:9405ce0:             reader.seek(((start / chunkSize) * 4L) + 4); // 8 byte checksum per chunk + 4 byte header/chunkLength
1:21bdf87:         }
1:2d7909d: 
1:639b314:         public long chunkStart(long offset)
1:21bdf87:         {
1:639b314:             long startChunk = offset / chunkSize;
1:639b314:             return startChunk * chunkSize;
1:21bdf87:         }
1:21bdf87: 
1:639b314:         public void validate(byte[] bytes, int start, int end) throws IOException
1:21bdf87:         {
1:30bb255:             int current = (int) checksumType.of(bytes, start, end);
1:639b314:             int actual = reader.readInt();
1:639b314:             if (current != actual)
1:fa6205c:                 throw new IOException("Corrupted File : " + dataFilename);
1:21bdf87:         }
1:21bdf87: 
1:21bdf87:         public void close()
1:a991b64:         {
1:639b314:             reader.close();
1:a991b64:         }
1:a991b64:     }
1:21bdf87: 
1:2d7909d:     public static FileDigestValidator fileDigestValidator(Descriptor desc) throws IOException
1:2d7909d:     {
1:2d7909d:         return new FileDigestValidator(desc);
1:2d7909d:     }
1:2d7909d: 
1:2d7909d:     public static class FileDigestValidator implements Closeable
1:2d7909d:     {
1:2d7909d:         private final Checksum checksum;
1:2d7909d:         private final RandomAccessReader digestReader;
1:2d7909d:         private final RandomAccessReader dataReader;
1:2d7909d:         private final Descriptor descriptor;
1:2d7909d:         private long storedDigestValue;
1:2d7909d: 
1:2d7909d:         public FileDigestValidator(Descriptor descriptor) throws IOException
1:2d7909d:         {
1:2d7909d:             this.descriptor = descriptor;
1:5baf28d:             checksum = descriptor.version.uncompressedChecksumType().newInstance();
1:0600d7d:             digestReader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.digestFor(descriptor.version.uncompressedChecksumType()))));
1:2d7909d:             dataReader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.DATA)));
1:2d7909d:             try
1:2d7909d:             {
1:2d7909d:                 storedDigestValue = Long.parseLong(digestReader.readLine());
1:2d7909d:             }
1:2d7909d:             catch (Exception e)
1:2d7909d:             {
1:a991b64:                 close();
1:2d7909d:                 // Attempting to create a FileDigestValidator without a DIGEST file will fail
1:2d7909d:                 throw new IOException("Corrupted SSTable : " + descriptor.filenameFor(Component.DATA));
1:2d7909d:             }
1:2d7909d:         }
1:2d7909d: 
1:2d7909d:         // Validate the entire file
1:2d7909d:         public void validate() throws IOException
1:2d7909d:         {
1:2d7909d:             CheckedInputStream checkedInputStream = new CheckedInputStream(dataReader, checksum);
1:2d7909d:             byte[] chunk = new byte[64 * 1024];
1:2d7909d: 
1:2d7909d:             while( checkedInputStream.read(chunk) > 0 ) { }
1:6f1e38c:             long calculatedDigestValue = checkedInputStream.getChecksum().getValue();
1:68d2526:             if (storedDigestValue != calculatedDigestValue)
1:68d2526:             {
1:2d7909d:                 throw new IOException("Corrupted SSTable : " + descriptor.filenameFor(Component.DATA));
1:2d7909d:             }
1:2d7909d:         }
1:2d7909d: 
1:2d7909d:         public void close()
1:2d7909d:         {
1:ce63ccc:             Throwables.perform(digestReader::close,
1:ce63ccc:                                dataReader::close);
1:2d7909d:         }
1:21bdf87:     }
1:21bdf87: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:             if (storedDigestValue != calculatedDigestValue)
1:             {
commit:6f1e38c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             long calculatedDigestValue = checkedInputStream.getChecksum().getValue();
commit:02fb218
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:fb22109
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f388c9d
/////////////////////////////////////////////////////////////////////////
0:             SequentialWriter out = SequentialWriter.open(new File(descriptor.filenameFor(Component.DIGEST)), true);
0:             String[] tmp = newdesc.filenameFor(Component.DATA).split(Pattern.quote(File.separator));
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ChecksumType;
/////////////////////////////////////////////////////////////////////////
1:         private final ChecksumType checksumType;
1:             this(descriptor.version.uncompressedChecksumType(),
1:         public ChecksumValidator(ChecksumType checksumType, RandomAccessReader reader, String dataFilename) throws IOException
1:             this.checksumType = checksumType;
/////////////////////////////////////////////////////////////////////////
1:             int current = (int) checksumType.of(bytes, start, end);
author:Robert Stupp
-------------------------------------------------------------------------------
commit:5f1eee5
commit:0600d7d
/////////////////////////////////////////////////////////////////////////
1:             digestReader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.digestFor(descriptor.version.uncompressedChecksumType()))));
/////////////////////////////////////////////////////////////////////////
0:             if (descriptor.digestComponent == null)
0:                 throw new NullPointerException("Null digest component for " + descriptor.ksname + '.' + descriptor.cfname + " file " + descriptor.baseFilename());
0:             File outFile = new File(descriptor.filenameFor(descriptor.digestComponent));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:356dd5b
commit:7bef6f9
/////////////////////////////////////////////////////////////////////////
0:             checksum = descriptor.version.hasAllAdlerChecksums() ? new Adler32() : CRC32Factory.instance.create();
commit:f6d8d88
commit:4ce409e
/////////////////////////////////////////////////////////////////////////
0:                 incrementalOut.writeInt(incrementalChecksumValue);
/////////////////////////////////////////////////////////////////////////
0:                     byteBuffer.putInt(incrementalChecksumValue);
commit:3fededc
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Throwables;
/////////////////////////////////////////////////////////////////////////
1:             Throwables.perform(digestReader::close,
1:                                dataReader::close);
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:1db386e
/////////////////////////////////////////////////////////////////////////
0:                     assert byteBuffer.arrayOffset() == 0;
commit:5baf28d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             this(descriptor.version.uncompressedChecksumType().newInstance(),
/////////////////////////////////////////////////////////////////////////
1:             checksum = descriptor.version.uncompressedChecksumType().newInstance();
/////////////////////////////////////////////////////////////////////////
0:         private final CRC32 incrementalChecksum = new CRC32();
0:         private final CRC32 fullChecksum = new CRC32();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:a472aa9
author:Daniel Chia
-------------------------------------------------------------------------------
commit:fa6205c
/////////////////////////////////////////////////////////////////////////
1:         private final String dataFilename;
0:             this(descriptor.version.hasAllAdlerChecksums() ? new Adler32() : CRC32Factory.instance.create(),
1:                  RandomAccessReader.open(new File(descriptor.filenameFor(Component.CRC))),
1:                  descriptor.filenameFor(Component.DATA));
1:         }
1: 
0:         public ChecksumValidator(Checksum checksum, RandomAccessReader reader, String dataFilename) throws IOException {
0:             this.checksum = checksum;
1:             this.reader = reader;
1:             this.dataFilename = dataFilename;
/////////////////////////////////////////////////////////////////////////
1:                 throw new IOException("Corrupted File : " + dataFilename);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8c22b4a
/////////////////////////////////////////////////////////////////////////
0: import java.util.zip.CRC32;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             checksum = descriptor.version.hasAllAdlerChecksums() ? new Adler32() : new CRC32();
/////////////////////////////////////////////////////////////////////////
0:             checksum = descriptor.version.hasAllAdlerChecksums() ? new Adler32() : new CRC32();
/////////////////////////////////////////////////////////////////////////
0:                 incrementalChecksum.update(toAppend);
0:                 fullChecksum.update(toAppend);
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
0:             try (BufferedWriter out =Files.newBufferedWriter(outFile.toPath(), Charsets.UTF_8))
commit:2d7909d
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.CheckedInputStream;
/////////////////////////////////////////////////////////////////////////
1:     public static FileDigestValidator fileDigestValidator(Descriptor desc) throws IOException
1:     {
1:         return new FileDigestValidator(desc);
1:     }
1: 
1:     public static class FileDigestValidator implements Closeable
1:     {
1:         private final Checksum checksum;
1:         private final RandomAccessReader digestReader;
1:         private final RandomAccessReader dataReader;
1:         private final Descriptor descriptor;
1:         private long storedDigestValue;
0:         private long calculatedDigestValue;
1: 
1:         public FileDigestValidator(Descriptor descriptor) throws IOException
1:         {
1:             this.descriptor = descriptor;
0:             checksum = descriptor.version.hasAllAdlerChecksums() ? new Adler32() : CRC32Factory.instance.create();
0:             digestReader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.DIGEST)));
1:             dataReader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.DATA)));
1:             try
1:             {
1:                 storedDigestValue = Long.parseLong(digestReader.readLine());
1:             }
1:             catch (Exception e)
1:             {
1:                 // Attempting to create a FileDigestValidator without a DIGEST file will fail
1:                 throw new IOException("Corrupted SSTable : " + descriptor.filenameFor(Component.DATA));
1:             }
1: 
1:         }
1: 
1:         // Validate the entire file
1:         public void validate() throws IOException
1:         {
1:             CheckedInputStream checkedInputStream = new CheckedInputStream(dataReader, checksum);
1:             byte[] chunk = new byte[64 * 1024];
1: 
1:             while( checkedInputStream.read(chunk) > 0 ) { }
0:             calculatedDigestValue = checkedInputStream.getChecksum().getValue();
0:             if (storedDigestValue != calculatedDigestValue) {
1:                 throw new IOException("Corrupted SSTable : " + descriptor.filenameFor(Component.DATA));
1:             }
1:         }
1: 
1:         public void close()
1:         {
0:             this.digestReader.close();
1:         }
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         public void appendDirect(ByteBuffer bb, boolean checksumIncrementalResult)
0:                 ByteBuffer toAppend = bb.duplicate();
0:                 toAppend.mark();
0:                 FBUtilities.directCheckSum(incrementalChecksum, toAppend);
0:                 toAppend.reset();
1: 
0:                 int incrementalChecksumValue = (int) incrementalChecksum.getValue();
0:                 FBUtilities.directCheckSum(fullChecksum, toAppend);
commit:66a5d3b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.CRC32Factory;
/////////////////////////////////////////////////////////////////////////
0:             checksum = descriptor.version.hasAllAdlerChecksums() ? new Adler32() : CRC32Factory.instance.create();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:                 close();
/////////////////////////////////////////////////////////////////////////
0:             try
1:             {
0:                 this.digestReader.close();
1:             }
0:             finally
1:             {
0:                 this.dataReader.close();
1:             }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b25adc7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9405ce0
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedWriter;
0: import java.io.DataOutput;
0: import java.nio.file.Files;
0: import java.util.zip.Adler32;
0: import com.google.common.base.Charsets;
1: 
0: import org.apache.cassandra.io.FSWriteError;
/////////////////////////////////////////////////////////////////////////
0:         private final Checksum checksum;
1:         public ChecksumValidator(Descriptor descriptor) throws IOException
0:             this.descriptor = descriptor;
0:             checksum = descriptor.version.hasAllAdlerChecksums ? new Adler32() : new PureJavaCrc32();
0:             reader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.CRC)));
1:             reader.seek(((start / chunkSize) * 4L) + 4); // 8 byte checksum per chunk + 4 byte header/chunkLength
/////////////////////////////////////////////////////////////////////////
0:     public static class ChecksumWriter
0:         private final Checksum incrementalChecksum = new Adler32();
0:         private final DataOutput incrementalOut;
0:         private final Checksum fullChecksum = new Adler32();
0:         public ChecksumWriter(DataOutput incrementalOut)
0:             this.incrementalOut = incrementalOut;
0:                 incrementalOut.writeInt(length);
/////////////////////////////////////////////////////////////////////////
0:                 incrementalChecksum.update(buffer, start, end);
0:                 incrementalOut.writeInt((int) incrementalChecksum.getValue());
0:                 incrementalChecksum.reset();
0:                 fullChecksum.update(buffer, start, end);
/////////////////////////////////////////////////////////////////////////
0:         public void writeFullChecksum(Descriptor descriptor)
0:             File outFile = new File(descriptor.filenameFor(Component.DIGEST));
0:             BufferedWriter out = null;
0:                 out = Files.newBufferedWriter(outFile.toPath(), Charsets.UTF_8);
0:                 out.write(String.valueOf(fullChecksum.getValue()));
0:             catch (IOException e)
0:                 throw new FSWriteError(e, outFile);
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:21bdf87
/////////////////////////////////////////////////////////////////////////
0: import java.util.zip.CheckedInputStream;
/////////////////////////////////////////////////////////////////////////
0:     public static FileDigestValidator fileDigestValidator(Descriptor desc) throws IOException
1:     {
0:         return new FileDigestValidator(desc);
1:     }
1: 
0:     public static class FileDigestValidator implements Closeable
1:     {
0:         private final Checksum checksum;
0:         private final RandomAccessReader digestReader;
0:         private final RandomAccessReader dataReader;
0:         private final Descriptor descriptor;
0:         private long storedDigestValue;
0:         private long calculatedDigestValue;
1: 
0:         public FileDigestValidator(Descriptor descriptor) throws IOException
1:         {
0:             this.descriptor = descriptor;
0:             checksum = descriptor.version.hasAllAdlerChecksums() ? new Adler32() : new PureJavaCrc32();
0:             digestReader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.DIGEST)));
0:             dataReader = RandomAccessReader.open(new File(descriptor.filenameFor(Component.DATA)));
0:             try
1:             {
0:                 storedDigestValue = Long.parseLong(digestReader.readLine());
1:             }
0:             catch (Exception e)
1:             {
0:                 // Attempting to create a FileDigestValidator without a DIGEST file will fail
0:                 throw new IOException("Corrupted SSTable : " + descriptor.filenameFor(Component.DATA));
1:             }
1: 
1:         }
1: 
0:         // Validate the entire file
0:         public void validate() throws IOException
1:         {
0:             CheckedInputStream checkedInputStream = new CheckedInputStream(dataReader, checksum);
0:             byte[] chunk = new byte[64 * 1024];
1: 
0:             while( checkedInputStream.read(chunk) > 0 ) { }
0:             calculatedDigestValue = checkedInputStream.getChecksum().getValue();
0:             if (storedDigestValue != calculatedDigestValue) {
0:                 throw new IOException("Corrupted SSTable : " + descriptor.filenameFor(Component.DATA));
1:             }
1:         }
1: 
1:         public void close()
1:         {
0:             this.digestReader.close();
1:         }
1:     }
1: 
1: 
commit:0e62131
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:         // checksumIncrementalResult indicates if the checksum we compute for this buffer should itself be
0:         // included in the full checksum, translating to if the partial checksum is serialized along with the
0:         // data it checksums (in which case the file checksum as calculated by external tools would mismatch if
0:         // we did not include it), or independently.
0: 
0:         // CompressedSequentialWriters serialize the partial checksums inline with the compressed data chunks they
0:         // corroborate, whereas ChecksummedSequentialWriters serialize them to a different file.
0:         public void append(byte[] buffer, int start, int end, boolean checksumIncrementalResult)
0:                 int incrementalChecksumValue;
0: 
0:                 incrementalChecksumValue = (int) incrementalChecksum.getValue();
0:                 incrementalOut.writeInt((int) incrementalChecksumValue);
0: 
0:                 if (checksumIncrementalResult)
0:                 {
0:                     ByteBuffer byteBuffer = ByteBuffer.allocate(4);
0:                     byteBuffer.putInt((int) incrementalChecksumValue);
0:                     fullChecksum.update(byteBuffer.array(), 0, byteBuffer.array().length);
0:                 }
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bc7941c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         private final Adler32 incrementalChecksum = new Adler32();
0:         private final Adler32 fullChecksum = new Adler32();
/////////////////////////////////////////////////////////////////////////
0:         public void appendDirect(ByteBuffer bb)
0:         {
0:             try
0:             {
0:                 ByteBuffer toAppend = bb.duplicate();
0:                 toAppend.mark();
0:                 FBUtilities.directCheckSum(incrementalChecksum, toAppend);
0:                 toAppend.reset();
0: 
0:                 incrementalOut.writeInt((int) incrementalChecksum.getValue());
0:                 incrementalChecksum.reset();
0: 
0:                 FBUtilities.directCheckSum(fullChecksum, toAppend);
0:             }
0:             catch (IOException e)
0:             {
0:                 throw new IOError(e);
0:             }
0:         }
0: 
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
0:             checksum = descriptor.version.hasAllAdlerChecksums() ? new Adler32() : new PureJavaCrc32();
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:639b314
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
0: 
1: import java.io.Closeable;
1: import java.io.File;
0: import java.io.IOError;
1: import java.io.IOException;
0: import java.nio.channels.ClosedChannelException;
0: import java.security.MessageDigest;
0: import java.security.NoSuchAlgorithmException;
0: import java.util.regex.Pattern;
1: import java.util.zip.Checksum;
0: 
1: import org.apache.cassandra.io.sstable.Component;
1: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.io.sstable.SSTable;
0: import org.apache.cassandra.utils.Hex;
0: import org.apache.cassandra.utils.PureJavaCrc32;
0: 
1: public class DataIntegrityMetadata
0: {
1:     public static ChecksumValidator checksumValidator(Descriptor desc) throws IOException
0:     {
1:         return new ChecksumValidator(desc);
0:     }
0: 
1:     public static class ChecksumValidator implements Closeable
0:     {
0:         private final Checksum checksum = new PureJavaCrc32();
1:         private final RandomAccessReader reader;
0:         private final Descriptor descriptor;
1:         public final int chunkSize;
0: 
0:         public ChecksumValidator(Descriptor desc) throws IOException
0:         {
0:             this.descriptor = desc;
0:             reader = RandomAccessReader.open(new File(desc.filenameFor(Component.CRC)));
1:             chunkSize = reader.readInt();
0:         }
0: 
1:         public void seek(long offset)
0:         {
1:             long start = chunkStart(offset);
0:             reader.seek(((start / chunkSize) * 4L) + 4); // 8 byte checksum per
0:                                                          // chunk + 4 byte
0:                                                          // header/chunkLength
0:         }
0: 
1:         public long chunkStart(long offset)
0:         {
1:             long startChunk = offset / chunkSize;
1:             return startChunk * chunkSize;
0:         }
0: 
1:         public void validate(byte[] bytes, int start, int end) throws IOException
0:         {
0:             checksum.update(bytes, start, end);
0:             int current = (int) checksum.getValue();
0:             checksum.reset();
1:             int actual = reader.readInt();
1:             if (current != actual)
0:                 throw new IOException("Corrupted SSTable : " + descriptor.filenameFor(Component.DATA));
0:         }
0: 
0:         public void close()
0:         {
1:             reader.close();
0:         }
0:     }
0: 
0:     public static ChecksumWriter checksumWriter(Descriptor desc)
0:     {
0:         return new ChecksumWriter(desc);
0:     }
0: 
0:     public static class ChecksumWriter implements Closeable
0:     {
0:         private final Checksum checksum = new PureJavaCrc32();
0:         private final MessageDigest digest;
0:         private final SequentialWriter writer;
0:         private final Descriptor descriptor;
0: 
0:         public ChecksumWriter(Descriptor desc)
0:         {
0:             this.descriptor = desc;
0:             writer = SequentialWriter.open(new File(desc.filenameFor(Component.CRC)), true);
0:             try
0:             {
0:                 digest = MessageDigest.getInstance("SHA-1");
0:             }
0:             catch (NoSuchAlgorithmException e)
0:             {
0:                 // SHA-1 is standard in java 6
0:                 throw new RuntimeException(e);
0:             }
0:         }
0: 
0:         public void writeChunkSize(int length)
0:         {
0:             try
0:             {
0:                 writer.stream.writeInt(length);
0:             }
0:             catch (IOException e)
0:             {
0:                 throw new IOError(e);
0:             }
0:         }
0: 
0:         public void append(byte[] buffer, int start, int end)
0:         {
0:             try
0:             {
0:                 checksum.update(buffer, start, end);
0:                 writer.stream.writeInt((int) checksum.getValue());
0:                 checksum.reset();
0: 
0:                 digest.update(buffer, start, end);
0:             }
0:             catch (IOException e)
0:             {
0:                 throw new IOError(e);
0:             }
0:         }
0: 
0:         public void close()
0:         {
0:             FileUtils.closeQuietly(writer);
0:             byte[] bytes = digest.digest();
0:             if (bytes == null)
0:                 return;
0:             SequentialWriter out = SequentialWriter.open(new File(descriptor.filenameFor(SSTable.COMPONENT_DIGEST)), true);
0:             // Writting output compatible with sha1sum
0:             Descriptor newdesc = descriptor.asTemporary(false);
0:             String[] tmp = newdesc.filenameFor(SSTable.COMPONENT_DATA).split(Pattern.quote(File.separator));
0:             String dataFileName = tmp[tmp.length - 1];
0:             try
0:             {
0:                 out.write(String.format("%s  %s", Hex.bytesToHex(bytes), dataFileName).getBytes());
0:             }
0:             catch (ClosedChannelException e)
0:             {
0:                 throw new AssertionError(); // can't happen.
0:             }
0:             finally
0:             {
0:                 FileUtils.closeQuietly(out);
0:             }
0:         }
0:     }
0: }
============================================================================