1:2ce7b9b: /*
1:2ce7b9b:  * Licensed to the Apache Software Foundation (ASF) under one
1:2ce7b9b:  * or more contributor license agreements.  See the NOTICE file
1:2ce7b9b:  * distributed with this work for additional information
1:2ce7b9b:  * regarding copyright ownership.  The ASF licenses this file
1:2ce7b9b:  * to you under the Apache License, Version 2.0 (the
1:2ce7b9b:  * "License"); you may not use this file except in compliance
1:2ce7b9b:  * with the License.  You may obtain a copy of the License at
1:2ce7b9b:  *
1:2ce7b9b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2ce7b9b:  *
1:2ce7b9b:  * Unless required by applicable law or agreed to in writing, software
1:2ce7b9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ce7b9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ce7b9b:  * See the License for the specific language governing permissions and
1:2ce7b9b:  * limitations under the License.
1:2ce7b9b:  */
1:be9a70e: package org.apache.cassandra.cql3.statements;
1:2ce7b9b: 
1:2ce7b9b: import java.util.*;
1:01d26dd: import java.util.regex.Pattern;
1:2ce7b9b: 
1:2ce7b9b: import org.slf4j.Logger;
1:2ce7b9b: import org.slf4j.LoggerFactory;
1:2ce7b9b: 
1:1e126da: import org.apache.cassandra.exceptions.SyntaxException;
1:2ce7b9b: 
1:2ce7b9b: public class PropertyDefinitions
1:2ce7b9b: {
1:01d26dd:     private static final Pattern PATTERN_POSITIVE = Pattern.compile("(1|true|yes)");
1:01d26dd:     
1:2ce7b9b:     protected static final Logger logger = LoggerFactory.getLogger(PropertyDefinitions.class);
1:2ce7b9b: 
1:1e126da:     protected final Map<String, Object> properties = new HashMap<String, Object>();
1:2ce7b9b: 
1:1e126da:     public void addProperty(String name, String value) throws SyntaxException
1:2ce7b9b:     {
1:2ce7b9b:         if (properties.put(name, value) != null)
1:1e126da:             throw new SyntaxException(String.format("Multiple definition for property '%s'", name));
1:2ce7b9b:     }
1:2ce7b9b: 
1:1e126da:     public void addProperty(String name, Map<String, String> value) throws SyntaxException
1:72a6cff:     {
1:db7759a:         if (properties.put(name, value) != null)
1:1e126da:             throw new SyntaxException(String.format("Multiple definition for property '%s'", name));
21:1e126da:     }
18:1e126da: 
1:1e126da:     public void validate(Set<String> keywords, Set<String> obsolete) throws SyntaxException
1:2ce7b9b:     {
1:2ce7b9b:         for (String name : properties.keySet())
1:2ce7b9b:         {
1:2ce7b9b:             if (keywords.contains(name))
1:2ce7b9b:                 continue;
1:2ce7b9b: 
1:2ce7b9b:             if (obsolete.contains(name))
1:2ce7b9b:                 logger.warn("Ignoring obsolete property {}", name);
1:2ce7b9b:             else
1:1e126da:                 throw new SyntaxException(String.format("Unknown property '%s'", name));
1:2ce7b9b:         }
1:2ce7b9b:     }
1:2ce7b9b: 
1:1e126da:     protected String getSimple(String name) throws SyntaxException
1:2ce7b9b:     {
1:72a6cff:         Object val = properties.get(name);
1:72a6cff:         if (val == null)
1:1e126da:             return null;
1:1e126da:         if (!(val instanceof String))
1:af927d8:             throw new SyntaxException(String.format("Invalid value for property '%s'. It should be a string", name));
1:1e126da:         return (String)val;
1:2ce7b9b:     }
1:2ce7b9b: 
1:1e126da:     protected Map<String, String> getMap(String name) throws SyntaxException
21:1e126da:     {
2:1e126da:         Object val = properties.get(name);
2:1e126da:         if (val == null)
1:1e126da:             return null;
1:1e126da:         if (!(val instanceof Map))
1:af927d8:             throw new SyntaxException(String.format("Invalid value for property '%s'. It should be a map.", name));
1:1e126da:         return (Map<String, String>)val;
1:72a6cff:     }
1:72a6cff: 
1:2ce7b9b:     public Boolean hasProperty(String name)
1:2ce7b9b:     {
1:2ce7b9b:         return properties.containsKey(name);
1:2ce7b9b:     }
1:2ce7b9b: 
1:1e126da:     public String getString(String key, String defaultValue) throws SyntaxException
1:2ce7b9b:     {
1:2ce7b9b:         String value = getSimple(key);
1:2ce7b9b:         return value != null ? value : defaultValue;
1:2ce7b9b:     }
1:2ce7b9b: 
1:2ce7b9b:     // Return a property value, typed as a Boolean
1:1e126da:     public Boolean getBoolean(String key, Boolean defaultValue) throws SyntaxException
1:2ce7b9b:     {
1:2ce7b9b:         String value = getSimple(key);
1:01d26dd:         return (value == null) ? defaultValue : PATTERN_POSITIVE.matcher(value.toLowerCase()).matches();
1:2ce7b9b:     }
1:2ce7b9b: 
1:a94b173:     // Return a property value, typed as a double
1:a94b173:     public double getDouble(String key, double defaultValue) throws SyntaxException
1:2ce7b9b:     {
1:2ce7b9b:         String value = getSimple(key);
1:2ce7b9b:         if (value == null)
1:2ce7b9b:         {
1:72a6cff:             return defaultValue;
1:2ce7b9b:         }
1:2ce7b9b:         else
1:2ce7b9b:         {
1:2ce7b9b:             try
1:2ce7b9b:             {
1:e7b0883:                 return Double.parseDouble(value);
1:2ce7b9b:             }
1:2ce7b9b:             catch (NumberFormatException e)
1:2ce7b9b:             {
1:1e126da:                 throw new SyntaxException(String.format("Invalid double value %s for '%s'", value, key));
1:2ce7b9b:             }
1:2ce7b9b:         }
1:2ce7b9b:     }
1:2ce7b9b: 
1:2ce7b9b:     // Return a property value, typed as an Integer
1:1e126da:     public Integer getInt(String key, Integer defaultValue) throws SyntaxException
1:2ce7b9b:     {
1:2ce7b9b:         String value = getSimple(key);
1:2ce7b9b:         return toInt(key, value, defaultValue);
1:2ce7b9b:     }
1:2ce7b9b: 
1:1e126da:     public static Integer toInt(String key, String value, Integer defaultValue) throws SyntaxException
1:2ce7b9b:     {
1:2ce7b9b:         if (value == null)
1:2ce7b9b:         {
2:2ce7b9b:             return defaultValue;
1:2ce7b9b:         }
1:2ce7b9b:         else
1:2ce7b9b:         {
1:2ce7b9b:             try
1:2ce7b9b:             {
1:2ce7b9b:                 return Integer.valueOf(value);
1:2ce7b9b:             }
1:2ce7b9b:             catch (NumberFormatException e)
1:2ce7b9b:             {
1:1e126da:                 throw new SyntaxException(String.format("Invalid integer value %s for '%s'", value, key));
1:2ce7b9b:             }
1:2ce7b9b:         }
1:2ce7b9b:     }
1:2ce7b9b: }
============================================================================
author:Alexander Shopov
-------------------------------------------------------------------------------
commit:01d26dd
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1:     private static final Pattern PATTERN_POSITIVE = Pattern.compile("(1|true|yes)");
1:     
/////////////////////////////////////////////////////////////////////////
1:         return (value == null) ? defaultValue : PATTERN_POSITIVE.matcher(value.toLowerCase()).matches();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:e7b0883
/////////////////////////////////////////////////////////////////////////
1:                 return Double.parseDouble(value);
commit:af927d8
/////////////////////////////////////////////////////////////////////////
1:             throw new SyntaxException(String.format("Invalid value for property '%s'. It should be a string", name));
/////////////////////////////////////////////////////////////////////////
1:             throw new SyntaxException(String.format("Invalid value for property '%s'. It should be a map.", name));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:a94b173
/////////////////////////////////////////////////////////////////////////
1:     // Return a property value, typed as a double
1:     public double getDouble(String key, double defaultValue) throws SyntaxException
commit:be9a70e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.statements;
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8bf6e15
/////////////////////////////////////////////////////////////////////////
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:     protected Set<String> getSet(String name, Set<String> defaultValue) throws SyntaxException
1:     {
1:         Object val = properties.get(name);
1:         if (val == null)
1:             return defaultValue;
0:         if (!(val instanceof Set))
0:             throw new SyntaxException(String.format("Invalid value for property '%s'", name));
0:         return (Set<String>) val;
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:db7759a
/////////////////////////////////////////////////////////////////////////
1:         if (properties.put(name, value) != null)
commit:2ce7b9b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.cql3;
1: 
1: import java.util.*;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.thrift.InvalidRequestException;
1: 
1: public class PropertyDefinitions
1: {
1:     protected static final Logger logger = LoggerFactory.getLogger(PropertyDefinitions.class);
1: 
0:     protected final Map<String, String> properties = new HashMap<String, String>();
1: 
0:     public void addProperty(String name, String value) throws InvalidRequestException
1:     {
1:         if (properties.put(name, value) != null)
0:             throw new InvalidRequestException(String.format("Multiple definition for property '%s'", name));
1:     }
1: 
0:     public void validate(Set<String> keywords, Set<String> obsolete) throws InvalidRequestException
1:     {
1:         for (String name : properties.keySet())
1:         {
1:             if (keywords.contains(name))
1:                 continue;
1: 
1:             if (obsolete.contains(name))
1:                 logger.warn("Ignoring obsolete property {}", name);
1:             else
0:                 throw new InvalidRequestException(String.format("Unknown property '%s'", name));
1:         }
1:     }
1: 
0:     protected String getSimple(String name) throws InvalidRequestException
1:     {
0:         return properties.get(name);
1:     }
1: 
1:     public Boolean hasProperty(String name)
1:     {
1:         return properties.containsKey(name);
1:     }
1: 
0:     public String getString(String key, String defaultValue) throws InvalidRequestException
1:     {
1:         String value = getSimple(key);
1:         return value != null ? value : defaultValue;
1:     }
1: 
1:     // Return a property value, typed as a Boolean
0:     public Boolean getBoolean(String key, Boolean defaultValue) throws InvalidRequestException
1:     {
1:         String value = getSimple(key);
0:         return (value == null) ? defaultValue : value.toLowerCase().matches("(1|true|yes)");
1:     }
1: 
0:     // Return a property value, typed as a Double
0:     public Double getDouble(String key, Double defaultValue) throws InvalidRequestException
1:     {
1:         String value = getSimple(key);
1:         if (value == null)
1:         {
1:             return defaultValue;
1:         }
1:         else
1:         {
1:             try
1:             {
0:                 return Double.valueOf(value);
1:             }
1:             catch (NumberFormatException e)
1:             {
0:                 throw new InvalidRequestException(String.format("Invalid double value %s for '%s'", value, key));
1:             }
1:         }
1:     }
1: 
1:     // Return a property value, typed as an Integer
0:     public Integer getInt(String key, Integer defaultValue) throws InvalidRequestException
1:     {
1:         String value = getSimple(key);
1:         return toInt(key, value, defaultValue);
1:     }
1: 
0:     public static Integer toInt(String key, String value, Integer defaultValue) throws InvalidRequestException
1:     {
1:         if (value == null)
1:         {
1:             return defaultValue;
1:         }
1:         else
1:         {
1:             try
1:             {
1:                 return Integer.valueOf(value);
1:             }
1:             catch (NumberFormatException e)
1:             {
0:                 throw new InvalidRequestException(String.format("Invalid integer value %s for '%s'", value, key));
1:             }
1:         }
1:     }
1: }
commit:1e126da
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.cql3;
1: 
0: import java.util.*;
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.exceptions.SyntaxException;
1: 
0: public class PropertyDefinitions
1: {
0:     protected static final Logger logger = LoggerFactory.getLogger(PropertyDefinitions.class);
1: 
1:     protected final Map<String, Object> properties = new HashMap<String, Object>();
1: 
1:     public void addProperty(String name, String value) throws SyntaxException
1:     {
0:         if (properties.put(name, value) != null)
1:             throw new SyntaxException(String.format("Multiple definition for property '%s'", name));
1:     }
1: 
1:     public void addProperty(String name, Map<String, String> value) throws SyntaxException
1:     {
0:         // Lowercase the map keys to be nice to users
0:         Map<String, String> lowerCased = new HashMap<String, String>(value.size());
0:         for (Map.Entry<String, String> entry : value.entrySet())
0:             lowerCased.put(entry.getKey().toLowerCase(), entry.getValue());
1: 
0:         if (properties.put(name, lowerCased) != null)
1:             throw new SyntaxException(String.format("Multiple definition for property '%s'", name));
1:     }
1: 
1:     public void validate(Set<String> keywords, Set<String> obsolete) throws SyntaxException
1:     {
0:         for (String name : properties.keySet())
1:         {
0:             if (keywords.contains(name))
0:                 continue;
1: 
0:             if (obsolete.contains(name))
0:                 logger.warn("Ignoring obsolete property {}", name);
0:             else
1:                 throw new SyntaxException(String.format("Unknown property '%s'", name));
1:         }
1:     }
1: 
1:     protected String getSimple(String name) throws SyntaxException
1:     {
1:         Object val = properties.get(name);
1:         if (val == null)
1:             return null;
1:         if (!(val instanceof String))
0:             throw new SyntaxException(String.format("Invalid value for property '%s'", name));
1:         return (String)val;
1:     }
1: 
1:     protected Map<String, String> getMap(String name) throws SyntaxException
1:     {
1:         Object val = properties.get(name);
1:         if (val == null)
1:             return null;
1:         if (!(val instanceof Map))
0:             throw new SyntaxException(String.format("Invalid value for property '%s'", name));
1:         return (Map<String, String>)val;
1:     }
1: 
0:     public Boolean hasProperty(String name)
1:     {
0:         return properties.containsKey(name);
1:     }
1: 
1:     public String getString(String key, String defaultValue) throws SyntaxException
1:     {
0:         String value = getSimple(key);
0:         return value != null ? value : defaultValue;
1:     }
1: 
0:     // Return a property value, typed as a Boolean
1:     public Boolean getBoolean(String key, Boolean defaultValue) throws SyntaxException
1:     {
0:         String value = getSimple(key);
0:         return (value == null) ? defaultValue : value.toLowerCase().matches("(1|true|yes)");
1:     }
1: 
0:     // Return a property value, typed as a Double
0:     public Double getDouble(String key, Double defaultValue) throws SyntaxException
1:     {
0:         String value = getSimple(key);
0:         if (value == null)
1:         {
0:             return defaultValue;
1:         }
0:         else
1:         {
0:             try
1:             {
0:                 return Double.valueOf(value);
1:             }
0:             catch (NumberFormatException e)
1:             {
1:                 throw new SyntaxException(String.format("Invalid double value %s for '%s'", value, key));
1:             }
1:         }
1:     }
1: 
0:     // Return a property value, typed as an Integer
1:     public Integer getInt(String key, Integer defaultValue) throws SyntaxException
1:     {
0:         String value = getSimple(key);
0:         return toInt(key, value, defaultValue);
1:     }
1: 
1:     public static Integer toInt(String key, String value, Integer defaultValue) throws SyntaxException
1:     {
0:         if (value == null)
1:         {
0:             return defaultValue;
1:         }
0:         else
1:         {
0:             try
1:             {
0:                 return Integer.valueOf(value);
1:             }
0:             catch (NumberFormatException e)
1:             {
1:                 throw new SyntaxException(String.format("Invalid integer value %s for '%s'", value, key));
1:             }
1:         }
1:     }
1: }
============================================================================