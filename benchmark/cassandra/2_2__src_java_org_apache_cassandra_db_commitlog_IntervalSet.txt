1:904cb5d: package org.apache.cassandra.db.commitlog;
3:904cb5d: 
1:904cb5d: import java.io.IOException;
1:904cb5d: import java.util.*;
1:904cb5d: 
1:904cb5d: import com.google.common.collect.ImmutableSortedMap;
1:904cb5d: 
1:904cb5d: import org.apache.cassandra.db.TypeSizes;
1:904cb5d: import org.apache.cassandra.io.ISerializer;
1:904cb5d: import org.apache.cassandra.io.util.DataInputPlus;
1:904cb5d: import org.apache.cassandra.io.util.DataOutputPlus;
1:904cb5d: 
1:904cb5d: /**
1:904cb5d:  * An immutable set of closed intervals, stored in normalized form (i.e. where overlapping intervals are converted
1:904cb5d:  * to a single interval covering both).
1:904cb5d:  *
1:904cb5d:  * The set is stored as a sorted map from interval starts to the corresponding end. The map satisfies
1:143a7d9:  *   {@code curr().getKey() <= curr().getValue() < next().getKey()}
1:904cb5d:  */
1:904cb5d: public class IntervalSet<T extends Comparable<T>>
1:904cb5d: {
1:904cb5d:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:904cb5d:     private static final IntervalSet EMPTY = new IntervalSet(ImmutableSortedMap.of());
1:904cb5d: 
1:904cb5d:     final private NavigableMap<T, T> ranges;
1:904cb5d: 
1:904cb5d:     private IntervalSet(ImmutableSortedMap<T, T> ranges)
1:904cb5d:     {
1:904cb5d:         this.ranges = ranges;
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     /**
1:904cb5d:      * Construct new set containing the interval with the given start and end position.
1:904cb5d:      */
1:904cb5d:     public IntervalSet(T start, T end)
1:904cb5d:     {
1:904cb5d:         this(ImmutableSortedMap.of(start, end));
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @SuppressWarnings("unchecked")
1:904cb5d:     public static <T extends Comparable<T>> IntervalSet<T> empty()
1:904cb5d:     {
1:68d2526:         return EMPTY;
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public boolean contains(T position)
1:904cb5d:     {
1:904cb5d:         // closed (i.e. inclusive) intervals
1:904cb5d:         Map.Entry<T, T> range = ranges.floorEntry(position);
1:904cb5d:         return range != null && position.compareTo(range.getValue()) <= 0;
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public boolean isEmpty()
1:904cb5d:     {
1:904cb5d:         return ranges.isEmpty();
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public Optional<T> lowerBound()
1:904cb5d:     {
1:904cb5d:         return isEmpty() ? Optional.empty() : Optional.of(ranges.firstKey());
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public Optional<T> upperBound()
1:904cb5d:     {
1:904cb5d:         return isEmpty() ? Optional.empty() : Optional.of(ranges.lastEntry().getValue());
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public Collection<T> starts()
1:904cb5d:     {
1:904cb5d:         return ranges.keySet();
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public Collection<T> ends()
1:904cb5d:     {
1:904cb5d:         return ranges.values();
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public String toString()
1:904cb5d:     {
1:904cb5d:         return ranges.toString();
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Override
1:904cb5d:     public int hashCode()
1:904cb5d:     {
1:904cb5d:         return ranges.hashCode();
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Override
1:904cb5d:     public boolean equals(Object obj)
1:904cb5d:     {
1:904cb5d:         return obj instanceof IntervalSet && ranges.equals(((IntervalSet<?>) obj).ranges);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public static final <T extends Comparable<T>> ISerializer<IntervalSet<T>> serializer(ISerializer<T> pointSerializer)
1:904cb5d:     {
1:904cb5d:         return new ISerializer<IntervalSet<T>>()
1:904cb5d:         {
1:904cb5d:             public void serialize(IntervalSet<T> intervals, DataOutputPlus out) throws IOException
1:904cb5d:             {
1:904cb5d:                 out.writeInt(intervals.ranges.size());
1:904cb5d:                 for (Map.Entry<T, T> en : intervals.ranges.entrySet())
1:904cb5d:                 {
1:904cb5d:                     pointSerializer.serialize(en.getKey(), out);
1:904cb5d:                     pointSerializer.serialize(en.getValue(), out);
1:904cb5d:                 }
1:904cb5d:             }
1:68d2526: 
1:904cb5d:             public IntervalSet<T> deserialize(DataInputPlus in) throws IOException
1:904cb5d:             {
1:904cb5d:                 int count = in.readInt();
1:904cb5d:                 NavigableMap<T, T> ranges = new TreeMap<>();
1:904cb5d:                 for (int i = 0; i < count; ++i)
1:904cb5d:                     ranges.put(pointSerializer.deserialize(in), pointSerializer.deserialize(in));
1:904cb5d:                 return new IntervalSet<T>(ImmutableSortedMap.copyOfSorted(ranges));
1:904cb5d:             }
1:68d2526: 
1:904cb5d:             public long serializedSize(IntervalSet<T> intervals)
1:904cb5d:             {
1:904cb5d:                 long size = TypeSizes.sizeof(intervals.ranges.size());
1:904cb5d:                 for (Map.Entry<T, T> en : intervals.ranges.entrySet())
1:904cb5d:                 {
1:904cb5d:                     size += pointSerializer.serializedSize(en.getKey());
1:904cb5d:                     size += pointSerializer.serializedSize(en.getValue());
1:904cb5d:                 }
1:904cb5d:                 return size;
1:904cb5d:             }
1:904cb5d:         };
1:904cb5d:     };
1:904cb5d: 
1:904cb5d:     /**
1:904cb5d:      * Builder of interval sets, applying the necessary normalization while adding ranges.
1:904cb5d:      *
1:904cb5d:      * Data is stored as above, as a sorted map from interval starts to the corresponding end, which satisfies
1:143a7d9:      *   {@code curr().getKey() <= curr().getValue() < next().getKey()}
1:904cb5d:      */
1:904cb5d:     static public class Builder<T extends Comparable<T>>
1:904cb5d:     {
1:904cb5d:         final NavigableMap<T, T> ranges;
1:904cb5d: 
1:904cb5d:         public Builder()
1:904cb5d:         {
1:904cb5d:             this.ranges = new TreeMap<>();
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         public Builder(T start, T end)
1:904cb5d:         {
1:904cb5d:             this();
1:904cb5d:             assert start.compareTo(end) <= 0;
1:904cb5d:             ranges.put(start, end);
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         /**
1:904cb5d:          * Add an interval to the set and perform normalization.
1:904cb5d:          */
1:904cb5d:         public void add(T start, T end)
1:904cb5d:         {
1:904cb5d:             assert start.compareTo(end) <= 0;
1:904cb5d:             // extend ourselves to cover any ranges we overlap
1:904cb5d:             // record directly preceding our end may extend past us, so take the max of our end and its
1:904cb5d:             Map.Entry<T, T> extend = ranges.floorEntry(end);
1:904cb5d:             if (extend != null && extend.getValue().compareTo(end) > 0)
1:904cb5d:                 end = extend.getValue();
1:904cb5d: 
1:904cb5d:             // record directly preceding our start may extend into us; if it does, we take it as our start
1:904cb5d:             extend = ranges.lowerEntry(start);
1:904cb5d:             if (extend != null && extend.getValue().compareTo(start) >= 0)
1:904cb5d:                 start = extend.getKey();
1:904cb5d: 
1:904cb5d:             // remove all covered intervals
1:904cb5d:             // since we have adjusted start and end to cover the ones that would be only partially covered, we
1:904cb5d:             // are certain that anything whose start falls within the span is completely covered
1:904cb5d:             ranges.subMap(start, end).clear();
1:904cb5d:             // add the new interval
1:904cb5d:             ranges.put(start, end);
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         public void addAll(IntervalSet<T> otherSet)
1:904cb5d:         {
1:904cb5d:             for (Map.Entry<T, T> en : otherSet.ranges.entrySet())
1:904cb5d:             {
1:904cb5d:                 add(en.getKey(), en.getValue());
1:904cb5d:             }
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         public IntervalSet<T> build()
1:904cb5d:         {
1:904cb5d:             return new IntervalSet<T>(ImmutableSortedMap.copyOfSorted(ranges));
1:904cb5d:         }
1:904cb5d:     }
1:904cb5d: 
1:904cb5d: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:         return EMPTY;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:143a7d9
/////////////////////////////////////////////////////////////////////////
1:  *   {@code curr().getKey() <= curr().getValue() < next().getKey()}
/////////////////////////////////////////////////////////////////////////
1:      *   {@code curr().getKey() <= curr().getValue() < next().getKey()}
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:904cb5d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.IOException;
1: import java.util.*;
1: 
1: import com.google.common.collect.ImmutableSortedMap;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.ISerializer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * An immutable set of closed intervals, stored in normalized form (i.e. where overlapping intervals are converted
1:  * to a single interval covering both).
1:  *
1:  * The set is stored as a sorted map from interval starts to the corresponding end. The map satisfies
0:  *   curr().getKey() <= curr().getValue() < next().getKey()
1:  */
1: public class IntervalSet<T extends Comparable<T>>
1: {
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:     private static final IntervalSet EMPTY = new IntervalSet(ImmutableSortedMap.of());
1: 
1:     final private NavigableMap<T, T> ranges;
1: 
1:     private IntervalSet(ImmutableSortedMap<T, T> ranges)
1:     {
1:         this.ranges = ranges;
1:     }
1: 
1:     /**
1:      * Construct new set containing the interval with the given start and end position.
1:      */
1:     public IntervalSet(T start, T end)
1:     {
1:         this(ImmutableSortedMap.of(start, end));
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     public static <T extends Comparable<T>> IntervalSet<T> empty()
1:     {
0:         return (IntervalSet<T>) EMPTY;
1:     }
1: 
1:     public boolean contains(T position)
1:     {
1:         // closed (i.e. inclusive) intervals
1:         Map.Entry<T, T> range = ranges.floorEntry(position);
1:         return range != null && position.compareTo(range.getValue()) <= 0;
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return ranges.isEmpty();
1:     }
1: 
1:     public Optional<T> lowerBound()
1:     {
1:         return isEmpty() ? Optional.empty() : Optional.of(ranges.firstKey());
1:     }
1: 
1:     public Optional<T> upperBound()
1:     {
1:         return isEmpty() ? Optional.empty() : Optional.of(ranges.lastEntry().getValue());
1:     }
1: 
1:     public Collection<T> starts()
1:     {
1:         return ranges.keySet();
1:     }
1: 
1:     public Collection<T> ends()
1:     {
1:         return ranges.values();
1:     }
1: 
1:     public String toString()
1:     {
1:         return ranges.toString();
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return ranges.hashCode();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj)
1:     {
1:         return obj instanceof IntervalSet && ranges.equals(((IntervalSet<?>) obj).ranges);
1:     }
1: 
1:     public static final <T extends Comparable<T>> ISerializer<IntervalSet<T>> serializer(ISerializer<T> pointSerializer)
1:     {
1:         return new ISerializer<IntervalSet<T>>()
1:         {
1:             public void serialize(IntervalSet<T> intervals, DataOutputPlus out) throws IOException
1:             {
1:                 out.writeInt(intervals.ranges.size());
1:                 for (Map.Entry<T, T> en : intervals.ranges.entrySet())
1:                 {
1:                     pointSerializer.serialize(en.getKey(), out);
1:                     pointSerializer.serialize(en.getValue(), out);
1:                 }
1:             }
1:     
1:             public IntervalSet<T> deserialize(DataInputPlus in) throws IOException
1:             {
1:                 int count = in.readInt();
1:                 NavigableMap<T, T> ranges = new TreeMap<>();
1:                 for (int i = 0; i < count; ++i)
1:                     ranges.put(pointSerializer.deserialize(in), pointSerializer.deserialize(in));
1:                 return new IntervalSet<T>(ImmutableSortedMap.copyOfSorted(ranges));
1:             }
1:     
1:             public long serializedSize(IntervalSet<T> intervals)
1:             {
1:                 long size = TypeSizes.sizeof(intervals.ranges.size());
1:                 for (Map.Entry<T, T> en : intervals.ranges.entrySet())
1:                 {
1:                     size += pointSerializer.serializedSize(en.getKey());
1:                     size += pointSerializer.serializedSize(en.getValue());
1:                 }
1:                 return size;
1:             }
1:         };
1:     };
1: 
1:     /**
1:      * Builder of interval sets, applying the necessary normalization while adding ranges.
1:      *
1:      * Data is stored as above, as a sorted map from interval starts to the corresponding end, which satisfies
0:      *   curr().getKey() <= curr().getValue() < next().getKey()
1:      */
1:     static public class Builder<T extends Comparable<T>>
1:     {
1:         final NavigableMap<T, T> ranges;
1: 
1:         public Builder()
1:         {
1:             this.ranges = new TreeMap<>();
1:         }
1: 
1:         public Builder(T start, T end)
1:         {
1:             this();
1:             assert start.compareTo(end) <= 0;
1:             ranges.put(start, end);
1:         }
1: 
1:         /**
1:          * Add an interval to the set and perform normalization.
1:          */
1:         public void add(T start, T end)
1:         {
1:             assert start.compareTo(end) <= 0;
1:             // extend ourselves to cover any ranges we overlap
1:             // record directly preceding our end may extend past us, so take the max of our end and its
1:             Map.Entry<T, T> extend = ranges.floorEntry(end);
1:             if (extend != null && extend.getValue().compareTo(end) > 0)
1:                 end = extend.getValue();
1: 
1:             // record directly preceding our start may extend into us; if it does, we take it as our start
1:             extend = ranges.lowerEntry(start);
1:             if (extend != null && extend.getValue().compareTo(start) >= 0)
1:                 start = extend.getKey();
1: 
1:             // remove all covered intervals
1:             // since we have adjusted start and end to cover the ones that would be only partially covered, we
1:             // are certain that anything whose start falls within the span is completely covered
1:             ranges.subMap(start, end).clear();
1:             // add the new interval
1:             ranges.put(start, end);
1:         }
1: 
1:         public void addAll(IntervalSet<T> otherSet)
1:         {
1:             for (Map.Entry<T, T> en : otherSet.ranges.entrySet())
1:             {
1:                 add(en.getKey(), en.getValue());
1:             }
1:         }
1: 
1:         public IntervalSet<T> build()
1:         {
1:             return new IntervalSet<T>(ImmutableSortedMap.copyOfSorted(ranges));
1:         }
1:     }
1: 
1: }
============================================================================