1:2457599: /*
1:2457599:  * Licensed to the Apache Software Foundation (ASF) under one
1:2457599:  * or more contributor license agreements.  See the NOTICE file
1:2457599:  * distributed with this work for additional information
1:2457599:  * regarding copyright ownership.  The ASF licenses this file
1:2457599:  * to you under the Apache License, Version 2.0 (the
1:2457599:  * "License"); you may not use this file except in compliance
1:2457599:  * with the License.  You may obtain a copy of the License at
2:2457599:  *
1:2457599:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2457599:  *
1:2457599:  * Unless required by applicable law or agreed to in writing, software
1:2457599:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2457599:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2457599:  * See the License for the specific language governing permissions and
1:2457599:  * limitations under the License.
2:2457599:  */
1:2457599: package org.apache.cassandra.db.rows;
14:2457599: 
1:2457599: import java.nio.ByteBuffer;
1:2457599: import java.security.MessageDigest;
1:1e92ce4: import java.util.Iterator;
1:1e92ce4: import java.util.Objects;
1:2457599: 
1:639d4b2: import com.google.common.base.Function;
1:2457599: 
1:2457599: import org.apache.cassandra.config.CFMetaData;
1:2457599: import org.apache.cassandra.config.ColumnDefinition;
1:2457599: import org.apache.cassandra.db.DeletionPurger;
1:2457599: import org.apache.cassandra.db.DeletionTime;
1:fd74a03: import org.apache.cassandra.db.LivenessInfo;
1:2457599: import org.apache.cassandra.db.filter.ColumnFilter;
1:2457599: import org.apache.cassandra.db.marshal.ByteType;
1:2457599: import org.apache.cassandra.db.marshal.SetType;
1:2457599: import org.apache.cassandra.utils.ObjectSizes;
1:639d4b2: import org.apache.cassandra.utils.btree.BTree;
1:2457599: 
2:2457599: /**
1:2457599:  * The data for a complex column, that is it's cells and potential complex
1:2457599:  * deletion time.
1:2457599:  */
1:639d4b2: public class ComplexColumnData extends ColumnData implements Iterable<Cell>
10:2457599: {
1:2457599:     static final Cell[] NO_CELLS = new Cell[0];
1:2457599: 
1:2457599:     private static final long EMPTY_SIZE = ObjectSizes.measure(new ComplexColumnData(ColumnDefinition.regularDef("", "", "", SetType.getInstance(ByteType.instance, true)), NO_CELLS, new DeletionTime(0, 0)));
1:2457599: 
1:2457599:     // The cells for 'column' sorted by cell path.
1:639d4b2:     private final Object[] cells;
1:2457599: 
1:2457599:     private final DeletionTime complexDeletion;
1:2457599: 
1:2457599:     // Only ArrayBackedRow should call this.
1:639d4b2:     ComplexColumnData(ColumnDefinition column, Object[] cells, DeletionTime complexDeletion)
1:2457599:     {
1:639d4b2:         super(column);
1:2457599:         assert column.isComplex();
1:2457599:         assert cells.length > 0 || !complexDeletion.isLive();
1:2457599:         this.cells = cells;
1:2457599:         this.complexDeletion = complexDeletion;
10:2457599:     }
1:2457599: 
1:2457599:     public boolean hasCells()
1:2457599:     {
1:639d4b2:         return !BTree.isEmpty(cells);
1:2457599:     }
1:2457599: 
1:2457599:     public int cellsCount()
1:2457599:     {
1:639d4b2:         return BTree.size(cells);
1:2457599:     }
1:2457599: 
1:2457599:     public Cell getCell(CellPath path)
1:2457599:     {
1:639d4b2:         return (Cell) BTree.<Object>find(cells, column.asymmetricCellPathComparator(), path);
1:2457599:     }
1:2457599: 
1:639d4b2:     public Cell getCellByIndex(int idx)
1:2457599:     {
1:639d4b2:         return BTree.findByIndex(cells, idx);
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * The complex deletion time of the complex column.
1:2457599:      * <p>
1:2457599:      * The returned "complex deletion" is a deletion of all the cells of the column. For instance,
1:2457599:      * for a collection, this correspond to a full collection deletion.
1:2457599:      * Please note that this deletion says nothing about the individual cells of the complex column:
1:2457599:      * there can be no complex deletion but some of the individual cells can be deleted.
1:2457599:      *
1:2457599:      * @return the complex deletion time for the column this is the data of or {@code DeletionTime.LIVE}
1:2457599:      * if the column is not deleted.
1:2457599:      */
1:2457599:     public DeletionTime complexDeletion()
1:2457599:     {
1:2457599:         return complexDeletion;
1:2457599:     }
1:2457599: 
1:2457599:     public Iterator<Cell> iterator()
1:2457599:     {
1:639d4b2:         return BTree.iterator(cells);
1:2457599:     }
1:2457599: 
1:b99c863:     public Iterator<Cell> reverseIterator()
1:b99c863:     {
1:b99c863:         return BTree.iterator(cells, BTree.Dir.DESC);
1:b99c863:     }
1:b99c863: 
1:2457599:     public int dataSize()
1:2457599:     {
1:2457599:         int size = complexDeletion.dataSize();
1:639d4b2:         for (Cell cell : this)
1:2457599:             size += cell.dataSize();
1:2457599:         return size;
1:2457599:     }
1:2457599: 
1:2457599:     public long unsharedHeapSizeExcludingData()
1:2457599:     {
1:2457599:         long heapSize = EMPTY_SIZE + ObjectSizes.sizeOfArray(cells);
1:639d4b2:         // TODO: this can be turned into a simple multiplication, at least while we have only one Cell implementation
1:639d4b2:         for (Cell cell : this)
1:2457599:             heapSize += cell.unsharedHeapSizeExcludingData();
1:2457599:         return heapSize;
1:2457599:     }
1:2457599: 
1:2457599:     public void validate()
1:2457599:     {
1:639d4b2:         for (Cell cell : this)
1:2457599:             cell.validate();
1:2457599:     }
1:2457599: 
1:2457599:     public void digest(MessageDigest digest)
1:2457599:     {
1:2457599:         if (!complexDeletion.isLive())
1:2457599:             complexDeletion.digest(digest);
1:2457599: 
1:639d4b2:         for (Cell cell : this)
1:2457599:             cell.digest(digest);
1:2457599:     }
1:2457599: 
1:2457599:     public ComplexColumnData markCounterLocalToBeCleared()
1:2457599:     {
1:639d4b2:         return transformAndFilter(complexDeletion, Cell::markCounterLocalToBeCleared);
1:2457599:     }
1:2457599: 
1:fd74a03:     public ComplexColumnData filter(ColumnFilter filter, DeletionTime activeDeletion, CFMetaData.DroppedColumn dropped, LivenessInfo rowLiveness)
1:2457599:     {
1:2457599:         ColumnFilter.Tester cellTester = filter.newTester(column);
1:2457599:         if (cellTester == null && activeDeletion.isLive() && dropped == null)
2:2457599:             return this;
1:2457599: 
1:639d4b2:         DeletionTime newDeletion = activeDeletion.supersedes(complexDeletion) ? DeletionTime.LIVE : complexDeletion;
1:fd74a03:         return transformAndFilter(newDeletion, (cell) ->
1:fd74a03:         {
1:fd74a03:             boolean isForDropped = dropped != null && cell.timestamp() <= dropped.droppedTime;
1:fd74a03:             boolean isShadowed = activeDeletion.deletes(cell);
1:fd74a03:             boolean isSkippable = cellTester != null && (!cellTester.fetches(cell.path())
1:fd74a03:                                                          || (!cellTester.fetchedCellIsQueried(cell.path()) && cell.timestamp() < rowLiveness.timestamp()));
1:fd74a03:             return isForDropped || isShadowed || isSkippable ? null : cell;
1:fd74a03:         });
1:2457599:     }
1:2457599: 
1:2457599:     public ComplexColumnData purge(DeletionPurger purger, int nowInSec)
1:2457599:     {
1:2457599:         DeletionTime newDeletion = complexDeletion.isLive() || purger.shouldPurge(complexDeletion) ? DeletionTime.LIVE : complexDeletion;
1:639d4b2:         return transformAndFilter(newDeletion, (cell) -> cell.purge(purger, nowInSec));
1:2457599:     }
1:2457599: 
1:fd74a03:     public ComplexColumnData withOnlyQueriedData(ColumnFilter filter)
1:fd74a03:     {
1:fd74a03:         return transformAndFilter(complexDeletion, (cell) -> filter.fetchedCellIsQueried(column, cell.path()) ? null : cell);
1:fd74a03:     }
1:fd74a03: 
1:639d4b2:     private ComplexColumnData transformAndFilter(DeletionTime newDeletion, Function<? super Cell, ? extends Cell> function)
1:2457599:     {
1:639d4b2:         Object[] transformed = BTree.transformAndFilter(cells, function);
1:2457599: 
1:639d4b2:         if (cells == transformed && newDeletion == complexDeletion)
1:2457599:             return this;
1:2457599: 
1:639d4b2:         if (newDeletion == DeletionTime.LIVE && BTree.isEmpty(transformed))
1:639d4b2:             return null;
1:2457599: 
1:639d4b2:         return new ComplexColumnData(column, transformed, newDeletion);
1:2457599:     }
1:2457599: 
1:2457599:     public ComplexColumnData updateAllTimestamp(long newTimestamp)
1:2457599:     {
1:2457599:         DeletionTime newDeletion = complexDeletion.isLive() ? complexDeletion : new DeletionTime(newTimestamp - 1, complexDeletion.localDeletionTime());
1:639d4b2:         return transformAndFilter(newDeletion, (cell) -> (Cell) cell.updateAllTimestamp(newTimestamp));
1:2457599:     }
1:2457599: 
1:86ba227:     public long maxTimestamp()
1:86ba227:     {
1:86ba227:         long timestamp = complexDeletion.markedForDeleteAt();
1:86ba227:         for (Cell cell : this)
1:86ba227:             timestamp = Math.max(timestamp, cell.timestamp());
1:86ba227:         return timestamp;
1:86ba227:     }
1:86ba227: 
1:2457599:     // This is the partner in crime of ArrayBackedRow.setValue. The exact warning apply. The short
1:2457599:     // version is: "don't use that method".
1:2457599:     void setValue(CellPath path, ByteBuffer value)
1:2457599:     {
1:639d4b2:         Cell current = (Cell) BTree.<Object>find(cells, column.asymmetricCellPathComparator(), path);
1:639d4b2:         BTree.replaceInSitu(cells, column.cellComparator(), current, current.withUpdatedValue(value));
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public boolean equals(Object other)
1:2457599:     {
1:2457599:         if (this == other)
1:2457599:             return true;
1:2457599: 
1:2457599:         if(!(other instanceof ComplexColumnData))
1:2457599:             return false;
1:2457599: 
1:2457599:         ComplexColumnData that = (ComplexColumnData)other;
1:2457599:         return this.column().equals(that.column())
1:2457599:             && this.complexDeletion().equals(that.complexDeletion)
1:639d4b2:             && BTree.equals(this.cells, that.cells);
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public int hashCode()
1:2457599:     {
1:2457599:         return Objects.hash(column(), complexDeletion(), cells);
1:2457599:     }
1:2457599: 
1:2457599:     public static Builder builder()
1:2457599:     {
1:2457599:         return new Builder();
1:2457599:     }
1:2457599: 
1:2457599:     public static class Builder
1:2457599:     {
1:2457599:         private DeletionTime complexDeletion;
1:2457599:         private ColumnDefinition column;
1:639d4b2:         private BTree.Builder<Cell> builder;
1:2457599: 
1:2457599:         public void newColumn(ColumnDefinition column)
1:2457599:         {
2:2457599:             this.column = column;
1:2457599:             this.complexDeletion = DeletionTime.LIVE; // default if writeComplexDeletion is not called
1:1e92ce4:             this.builder = BTree.builder(column.cellComparator());
1:2457599:         }
1:2457599: 
1:2457599:         public void addComplexDeletion(DeletionTime complexDeletion)
1:2457599:         {
1:2457599:             this.complexDeletion = complexDeletion;
1:2457599:         }
1:2457599: 
1:2457599:         public void addCell(Cell cell)
1:2457599:         {
1:639d4b2:             builder.add(cell);
1:2457599:         }
1:2457599: 
1:2457599:         public ComplexColumnData build()
1:2457599:         {
1:639d4b2:             if (complexDeletion.isLive() && builder.isEmpty())
1:2457599:                 return null;
1:2457599: 
1:639d4b2:             return new ComplexColumnData(column, builder.build(), complexDeletion);
1:2457599:         }
1:2457599:     }
1:2457599: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:e7064b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Alex Petrov
-------------------------------------------------------------------------------
commit:0d5984b
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:89a645a
commit:a87fd71
commit:86ba227
/////////////////////////////////////////////////////////////////////////
1:     public long maxTimestamp()
1:     {
1:         long timestamp = complexDeletion.markedForDeleteAt();
1:         for (Cell cell : this)
1:             timestamp = Math.max(timestamp, cell.timestamp());
1:         return timestamp;
1:     }
1: 
commit:fd74a03
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.LivenessInfo;
/////////////////////////////////////////////////////////////////////////
1:     public ComplexColumnData filter(ColumnFilter filter, DeletionTime activeDeletion, CFMetaData.DroppedColumn dropped, LivenessInfo rowLiveness)
1:         return transformAndFilter(newDeletion, (cell) ->
1:         {
1:             boolean isForDropped = dropped != null && cell.timestamp() <= dropped.droppedTime;
1:             boolean isShadowed = activeDeletion.deletes(cell);
1:             boolean isSkippable = cellTester != null && (!cellTester.fetches(cell.path())
1:                                                          || (!cellTester.fetchedCellIsQueried(cell.path()) && cell.timestamp() < rowLiveness.timestamp()));
1:             return isForDropped || isShadowed || isSkippable ? null : cell;
1:         });
/////////////////////////////////////////////////////////////////////////
1:     public ComplexColumnData withOnlyQueriedData(ColumnFilter filter)
1:     {
1:         return transformAndFilter(complexDeletion, (cell) -> filter.fetchedCellIsQueried(column, cell.path()) ? null : cell);
1:     }
1: 
commit:b99c863
/////////////////////////////////////////////////////////////////////////
1:     public Iterator<Cell> reverseIterator()
1:     {
1:         return BTree.iterator(cells, BTree.Dir.DESC);
1:     }
1: 
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.nio.ByteBuffer;
1: import java.security.MessageDigest;
0: import java.util.*;
1: 
0: import com.google.common.collect.Iterators;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.DeletionTime;
1: import org.apache.cassandra.db.DeletionPurger;
1: import org.apache.cassandra.db.filter.ColumnFilter;
1: import org.apache.cassandra.db.marshal.ByteType;
1: import org.apache.cassandra.db.marshal.SetType;
1: import org.apache.cassandra.utils.ObjectSizes;
1: 
1: /**
1:  * The data for a complex column, that is it's cells and potential complex
1:  * deletion time.
1:  */
0: public class ComplexColumnData implements ColumnData, Iterable<Cell>
1: {
1:     static final Cell[] NO_CELLS = new Cell[0];
1: 
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new ComplexColumnData(ColumnDefinition.regularDef("", "", "", SetType.getInstance(ByteType.instance, true)), NO_CELLS, new DeletionTime(0, 0)));
1: 
0:     private final ColumnDefinition column;
1: 
1:     // The cells for 'column' sorted by cell path.
0:     private final Cell[] cells;
1: 
1:     private final DeletionTime complexDeletion;
1: 
1:     // Only ArrayBackedRow should call this.
0:     ComplexColumnData(ColumnDefinition column, Cell[] cells, DeletionTime complexDeletion)
1:     {
1:         assert column.isComplex();
1:         assert cells.length > 0 || !complexDeletion.isLive();
1:         this.column = column;
1:         this.cells = cells;
1:         this.complexDeletion = complexDeletion;
1:     }
1: 
1:     public boolean hasCells()
1:     {
0:         return cellsCount() > 0;
1:     }
1: 
1:     public int cellsCount()
1:     {
0:         return cells.length;
1:     }
1: 
0:     public ColumnDefinition column()
1:     {
0:         return column;
1:     }
1: 
1:     public Cell getCell(CellPath path)
1:     {
0:         int idx = binarySearch(path);
0:         return idx < 0 ? null : cells[idx];
1:     }
1: 
0:     public Cell getCellByIndex(int i)
1:     {
0:         assert 0 <= i && i < cells.length;
0:         return cells[i];
1:     }
1: 
1:     /**
1:      * The complex deletion time of the complex column.
1:      * <p>
1:      * The returned "complex deletion" is a deletion of all the cells of the column. For instance,
1:      * for a collection, this correspond to a full collection deletion.
1:      * Please note that this deletion says nothing about the individual cells of the complex column:
1:      * there can be no complex deletion but some of the individual cells can be deleted.
1:      *
1:      * @return the complex deletion time for the column this is the data of or {@code DeletionTime.LIVE}
1:      * if the column is not deleted.
1:      */
1:     public DeletionTime complexDeletion()
1:     {
1:         return complexDeletion;
1:     }
1: 
1:     public Iterator<Cell> iterator()
1:     {
0:         return Iterators.forArray(cells);
1:     }
1: 
1:     public int dataSize()
1:     {
1:         int size = complexDeletion.dataSize();
0:         for (Cell cell : cells)
1:             size += cell.dataSize();
1:         return size;
1:     }
1: 
1:     public long unsharedHeapSizeExcludingData()
1:     {
1:         long heapSize = EMPTY_SIZE + ObjectSizes.sizeOfArray(cells);
0:         for (Cell cell : cells)
1:             heapSize += cell.unsharedHeapSizeExcludingData();
1:         return heapSize;
1:     }
1: 
1:     public void validate()
1:     {
0:         for (Cell cell : cells)
1:             cell.validate();
1:     }
1: 
0:     public ComplexColumnData filter(ColumnFilter filter, DeletionTime activeDeletion, CFMetaData.DroppedColumn dropped)
1:     {
1:         ColumnFilter.Tester cellTester = filter.newTester(column);
1:         if (cellTester == null && activeDeletion.isLive() && dropped == null)
1:             return this;
1: 
0:         DeletionTime newComplexDeletion = activeDeletion.supersedes(complexDeletion) ? DeletionTime.LIVE : complexDeletion;
1: 
0:         int newSize = 0;
0:         for (Cell cell : cells)
1:         {
0:             // The cell must be:
0:             //   - Included by the query
0:             //   - not shadowed by the active deletion
0:             //   - not being for a dropped column
0:             if ((cellTester == null || cellTester.includes(cell.path()))
0:                  && !activeDeletion.deletes(cell)
0:                  && (dropped == null || cell.timestamp() > dropped.droppedTime))
0:                 ++newSize;
1:         }
1: 
1: 
0:         if (newSize == 0)
0:             return newComplexDeletion.isLive() ? null : new ComplexColumnData(column, NO_CELLS, newComplexDeletion);
1: 
0:         if (newSize == cells.length && newComplexDeletion == complexDeletion)
1:             return this;
1: 
0:         Cell[] newCells = new Cell[newSize];
0:         int j = 0;
0:         cellTester = filter.newTester(column); // we need to reste the tester
0:         for (Cell cell : cells)
1:         {
0:             if ((cellTester == null || cellTester.includes(cell.path()))
0:                 && !activeDeletion.deletes(cell)
0:                 && (dropped == null || cell.timestamp() > dropped.droppedTime))
0:                 newCells[j++] = cell;
1:         }
0:         assert j == newSize;
1: 
0:         return new ComplexColumnData(column, newCells, newComplexDeletion);
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         if (!complexDeletion.isLive())
1:             complexDeletion.digest(digest);
1: 
0:         for (Cell cell : cells)
1:             cell.digest(digest);
1:     }
1: 
1:     public ComplexColumnData markCounterLocalToBeCleared()
1:     {
0:         Cell[] newCells = null;
0:         for (int i = 0; i < cells.length; i++)
1:         {
0:             Cell cell = cells[i];
0:             Cell marked = cell.markCounterLocalToBeCleared();
0:             if (marked != cell)
1:             {
0:                 if (newCells == null)
0:                     newCells = Arrays.copyOf(cells, cells.length);
0:                 newCells[i] = marked;
1:             }
1:         }
1: 
0:         return newCells == null
0:              ? this
0:              : new ComplexColumnData(column, newCells, complexDeletion);
1:     }
1: 
1:     public ComplexColumnData purge(DeletionPurger purger, int nowInSec)
1:     {
1:         DeletionTime newDeletion = complexDeletion.isLive() || purger.shouldPurge(complexDeletion) ? DeletionTime.LIVE : complexDeletion;
1: 
0:         int newSize = 0;
0:         for (Cell cell : cells)
1:         {
0:             Cell purged = cell.purge(purger, nowInSec);
0:             if (purged != null)
0:                 ++newSize;
1:         }
1: 
0:         if (newSize == 0)
0:             return newDeletion.isLive() ? null : new ComplexColumnData(column, NO_CELLS, newDeletion);
1: 
0:         if (newDeletion == complexDeletion && newSize == cells.length)
1:             return this;
1: 
0:         Cell[] newCells = new Cell[newSize];
0:         int j = 0;
0:         for (Cell cell : cells)
1:         {
0:             Cell purged = cell.purge(purger, nowInSec);
0:             if (purged != null)
0:                 newCells[j++] = purged;
1:         }
0:         assert j == newSize;
1: 
0:         return new ComplexColumnData(column, newCells, newDeletion);
1:     }
1: 
1:     public ComplexColumnData updateAllTimestamp(long newTimestamp)
1:     {
1:         DeletionTime newDeletion = complexDeletion.isLive() ? complexDeletion : new DeletionTime(newTimestamp - 1, complexDeletion.localDeletionTime());
0:         Cell[] newCells = new Cell[cells.length];
0:         for (int i = 0; i < cells.length; i++)
0:             newCells[i] = (Cell)cells[i].updateAllTimestamp(newTimestamp);
1: 
0:         return new ComplexColumnData(column, newCells, newDeletion);
1:     }
1: 
1:     // This is the partner in crime of ArrayBackedRow.setValue. The exact warning apply. The short
1:     // version is: "don't use that method".
1:     void setValue(CellPath path, ByteBuffer value)
1:     {
0:         int idx = binarySearch(path);
0:         assert idx >= 0;
0:         cells[idx] = cells[idx].withUpdatedValue(value);
1:     }
1: 
0:     private int binarySearch(CellPath path)
1:     {
0:         return binarySearch(path, 0, cells.length);
1:     }
1: 
1:     /**
0:      * Simple binary search for a given cell (in the cells array).
1:      *
0:      * The return value has the exact same meaning that the one of Collections.binarySearch() but
0:      * we don't use the later because we're searching for a 'CellPath' in an array of 'Cell'.
1:      */
0:     private int binarySearch(CellPath path, int fromIndex, int toIndex)
1:     {
0:         int low = fromIndex;
0:         int mid = toIndex;
0:         int high = mid - 1;
0:         int result = -1;
0:         while (low <= high)
1:         {
0:             mid = (low + high) >> 1;
0:             if ((result = column.cellPathComparator().compare(path, cells[mid].path())) > 0)
0:                 low = mid + 1;
0:             else if (result == 0)
0:                 return mid;
0:             else
0:                 high = mid - 1;
1:         }
0:         return -mid - (result < 0 ? 1 : 2);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if (this == other)
1:             return true;
1: 
1:         if(!(other instanceof ComplexColumnData))
1:             return false;
1: 
1:         ComplexColumnData that = (ComplexColumnData)other;
1:         return this.column().equals(that.column())
1:             && this.complexDeletion().equals(that.complexDeletion)
0:             && Arrays.equals(this.cells, that.cells);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hash(column(), complexDeletion(), cells);
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static class Builder
1:     {
1:         private ColumnDefinition column;
1:         private DeletionTime complexDeletion;
0:         public final List<Cell> cells = new ArrayList<>();
1: 
1:         public void newColumn(ColumnDefinition column)
1:         {
1:             this.column = column;
1:             this.complexDeletion = DeletionTime.LIVE; // default if writeComplexDeletion is not called
0:             this.cells.clear();
1:         }
1: 
1:         public void addComplexDeletion(DeletionTime complexDeletion)
1:         {
1:             this.complexDeletion = complexDeletion;
1:         }
1: 
1:         public void addCell(Cell cell)
1:         {
0:             assert cell.column().equals(column);
0:             assert cells.isEmpty() || cell.column().cellPathComparator().compare(cells.get(cells.size() - 1).path(), cell.path()) < 0;
0:             cells.add(cell);
1:         }
1: 
1:         public ComplexColumnData build()
1:         {
0:             if (complexDeletion.isLive() && cells.isEmpty())
1:                 return null;
1: 
0:             return new ComplexColumnData(column, cells.toArray(new Cell[cells.size()]), complexDeletion);
1:         }
1:     }
1: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.Objects;
0: import org.apache.cassandra.db.DeletionTime;
/////////////////////////////////////////////////////////////////////////
1:             this.builder = BTree.builder(column.cellComparator());
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
0: import java.util.function.BiFunction;
1: import com.google.common.base.Function;
0: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.btree.BTree;
0: import org.apache.cassandra.utils.btree.UpdateFunction;
1: public class ComplexColumnData extends ColumnData implements Iterable<Cell>
1:     private final Object[] cells;
1:     ComplexColumnData(ColumnDefinition column, Object[] cells, DeletionTime complexDeletion)
1:         super(column);
1:         return !BTree.isEmpty(cells);
1:         return BTree.size(cells);
1:         return (Cell) BTree.<Object>find(cells, column.asymmetricCellPathComparator(), path);
1:     public Cell getCellByIndex(int idx)
1:         return BTree.findByIndex(cells, idx);
/////////////////////////////////////////////////////////////////////////
1:         return BTree.iterator(cells);
1:         for (Cell cell : this)
/////////////////////////////////////////////////////////////////////////
1:         // TODO: this can be turned into a simple multiplication, at least while we have only one Cell implementation
1:         for (Cell cell : this)
1:         for (Cell cell : this)
0:     public void digest(MessageDigest digest)
0:     {
0:         if (!complexDeletion.isLive())
0:             complexDeletion.digest(digest);
0: 
1:         for (Cell cell : this)
0:             cell.digest(digest);
0:     }
0: 
0:     public ComplexColumnData markCounterLocalToBeCleared()
0:     {
1:         return transformAndFilter(complexDeletion, Cell::markCounterLocalToBeCleared);
0:     }
0: 
1:         DeletionTime newDeletion = activeDeletion.supersedes(complexDeletion) ? DeletionTime.LIVE : complexDeletion;
0:         return transformAndFilter(newDeletion,
0:                                   (cell) ->
0:                                            (cellTester == null || cellTester.includes(cell.path()))
0:                                         && !activeDeletion.deletes(cell)
0:                                         && (dropped == null || cell.timestamp() > dropped.droppedTime)
0:                                            ? cell : null);
1:         return transformAndFilter(newDeletion, (cell) -> cell.purge(purger, nowInSec));
0:     }
1:     private ComplexColumnData transformAndFilter(DeletionTime newDeletion, Function<? super Cell, ? extends Cell> function)
0:     {
1:         Object[] transformed = BTree.transformAndFilter(cells, function);
1:         if (cells == transformed && newDeletion == complexDeletion)
1:         if (newDeletion == DeletionTime.LIVE && BTree.isEmpty(transformed))
1:             return null;
1:         return new ComplexColumnData(column, transformed, newDeletion);
1:         return transformAndFilter(newDeletion, (cell) -> (Cell) cell.updateAllTimestamp(newTimestamp));
1:         Cell current = (Cell) BTree.<Object>find(cells, column.asymmetricCellPathComparator(), path);
1:         BTree.replaceInSitu(cells, column.cellComparator(), current, current.withUpdatedValue(value));
/////////////////////////////////////////////////////////////////////////
1:             && BTree.equals(this.cells, that.cells);
/////////////////////////////////////////////////////////////////////////
0:         private static BiFunction<Cell, Cell, Cell> noResolve = (a, b) -> {
0:             throw new IllegalStateException();
0:         };
0: 
0:         private ColumnDefinition column;
1:         private BTree.Builder<Cell> builder;
0:             if (builder == null) builder = BTree.builder(column.cellComparator());
0:             else builder.reuse(column.cellComparator());
/////////////////////////////////////////////////////////////////////////
1:             builder.add(cell);
1:             if (complexDeletion.isLive() && builder.isEmpty())
1:             return new ComplexColumnData(column, builder.build(), complexDeletion);
============================================================================