1:b7563f8: /*
1:b7563f8: * Licensed to the Apache Software Foundation (ASF) under one
1:b7563f8: * or more contributor license agreements.  See the NOTICE file
1:b7563f8: * distributed with this work for additional information
1:b7563f8: * regarding copyright ownership.  The ASF licenses this file
1:b7563f8: * to you under the Apache License, Version 2.0 (the
1:b7563f8: * "License"); you may not use this file except in compliance
1:b7563f8: * with the License.  You may obtain a copy of the License at
1:b7563f8: *
1:b7563f8: *    http://www.apache.org/licenses/LICENSE-2.0
1:b7563f8: *
1:b7563f8: * Unless required by applicable law or agreed to in writing,
1:b7563f8: * software distributed under the License is distributed on an
1:b7563f8: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b7563f8: * KIND, either express or implied.  See the License for the
1:b7563f8: * specific language governing permissions and limitations
1:b7563f8: * under the License.
1:b7563f8: */
1:b7563f8: package org.apache.cassandra.io.util;
1:b7563f8: 
1:ce63ccc: import java.io.EOFException;
1:ce63ccc: import java.io.IOException;
1:b7563f8: import java.nio.ByteBuffer;
1:b7563f8: import java.nio.ByteOrder;
1:ce63ccc: import java.util.Arrays;
1:b7563f8: import java.util.concurrent.ThreadLocalRandom;
1:b7563f8: 
1:b7563f8: import org.junit.Test;
1:b7563f8: 
1:b7563f8: import junit.framework.Assert;
1:b7563f8: import org.apache.cassandra.utils.memory.MemoryUtil;
1:b7563f8: 
1:ce63ccc: import static org.junit.Assert.assertEquals;
1:ce63ccc: import static org.junit.Assert.assertTrue;
1:ce63ccc: import static org.junit.Assert.fail;
1:ce63ccc: 
1:b7563f8: public class MemoryTest
1:b7563f8: {
1:b7563f8: 
1:b7563f8:     @Test
1:b7563f8:     public void testByteBuffers()
1:b7563f8:     {
1:b7563f8:         byte[] bytes = new byte[1000];
1:b7563f8:         ThreadLocalRandom.current().nextBytes(bytes);
1:b7563f8:         final Memory memory = Memory.allocate(bytes.length);
1:b7563f8:         memory.setBytes(0, bytes, 0, bytes.length);
1:b7563f8:         ByteBuffer canon = ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder());
1:b7563f8:         test(canon, memory);
1:b7563f8:         memory.setBytes(0, new byte[1000], 0, 1000);
1:b7563f8:         memory.setBytes(0, canon.duplicate());
1:b7563f8:         test(canon, memory);
1:4e29b7a:         memory.close();
1:b7563f8:     }
1:b7563f8: 
1:ce63ccc:     @Test
1:ce63ccc:     public void testInputStream() throws IOException
1:ce63ccc:     {
1:ce63ccc:         byte[] bytes = new byte[4096];
1:ce63ccc:         ThreadLocalRandom.current().nextBytes(bytes);
1:ce63ccc:         final Memory memory = Memory.allocate(bytes.length);
1:ce63ccc:         memory.setBytes(0, bytes, 0, bytes.length);
1:ce63ccc: 
1:ce63ccc:         try(MemoryInputStream stream = new MemoryInputStream(memory, 1024))
1:ce63ccc:         {
1:ce63ccc:             byte[] bb = new byte[bytes.length];
1:ce63ccc:             assertEquals(bytes.length, stream.available());
1:ce63ccc: 
1:ce63ccc:             stream.readFully(bb);
1:ce63ccc:             assertEquals(0, stream.available());
1:ce63ccc: 
1:ce63ccc:             assertTrue(Arrays.equals(bytes, bb));
1:ce63ccc: 
1:ce63ccc:             try
1:ce63ccc:             {
1:ce63ccc:                 stream.readInt();
1:ce63ccc:                 fail("Expected EOF exception");
1:ce63ccc:             }
1:ce63ccc:             catch (EOFException e)
1:ce63ccc:             {
1:ce63ccc:                 //pass
1:ce63ccc:             }
1:ce63ccc:         }
1:ce63ccc:     }
1:ce63ccc: 
1:b7563f8:     private static void test(ByteBuffer canon, Memory memory)
1:b7563f8:     {
1:b7563f8:         ByteBuffer hollow = MemoryUtil.getHollowDirectByteBuffer();
1:b7563f8:         test(canon, hollow, memory, 0, 1000);
1:b7563f8:         test(canon, hollow, memory, 33, 100);
1:b7563f8:         test(canon, hollow, memory, 77, 77);
1:b7563f8:         test(canon, hollow, memory, 903, 96);
1:b7563f8:     }
1:b7563f8: 
1:b7563f8:     private static void test(ByteBuffer canon, ByteBuffer hollow, Memory memory, int offset, int length)
1:b7563f8:     {
1:b7563f8:         canon = canon.duplicate();
1:b7563f8:         canon.position(offset).limit(offset + length);
1:b7563f8:         canon = canon.slice().order(ByteOrder.nativeOrder());
1:b7563f8:         test(canon, memory.asByteBuffer(offset, length));
1:b7563f8:         memory.setByteBuffer(hollow, offset, length);
1:b7563f8:         test(canon, hollow);
1:b7563f8:     }
1:b7563f8: 
1:b7563f8:     private static void test(ByteBuffer canon, ByteBuffer test)
1:b7563f8:     {
1:b7563f8:         Assert.assertEquals(canon, test);
1:b7563f8:         for (int i = 0 ; i <= canon.limit() - 4 ; i += 4)
1:b7563f8:             Assert.assertEquals(canon.getInt(i), test.getInt(i));
1:b7563f8:         for (int i = 0 ; i <= canon.limit() - 8 ; i += 8)
1:b7563f8:             Assert.assertEquals(canon.getLong(i), test.getLong(i));
1:b7563f8:     }
1:b7563f8: 
1:b7563f8: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testInputStream() throws IOException
1:     {
1:         byte[] bytes = new byte[4096];
1:         ThreadLocalRandom.current().nextBytes(bytes);
1:         final Memory memory = Memory.allocate(bytes.length);
1:         memory.setBytes(0, bytes, 0, bytes.length);
1: 
1:         try(MemoryInputStream stream = new MemoryInputStream(memory, 1024))
1:         {
1:             byte[] bb = new byte[bytes.length];
1:             assertEquals(bytes.length, stream.available());
1: 
1:             stream.readFully(bb);
1:             assertEquals(0, stream.available());
1: 
1:             assertTrue(Arrays.equals(bytes, bb));
1: 
1:             try
1:             {
1:                 stream.readInt();
1:                 fail("Expected EOF exception");
1:             }
1:             catch (EOFException e)
1:             {
1:                 //pass
1:             }
1:         }
1:     }
1: 
commit:4e29b7a
/////////////////////////////////////////////////////////////////////////
1:         memory.close();
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:b7563f8
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.io.util;
1: 
1: import java.nio.ByteBuffer;
1: import java.nio.ByteOrder;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.utils.memory.MemoryUtil;
1: 
1: public class MemoryTest
1: {
1: 
1:     @Test
1:     public void testByteBuffers()
1:     {
1:         byte[] bytes = new byte[1000];
1:         ThreadLocalRandom.current().nextBytes(bytes);
1:         final Memory memory = Memory.allocate(bytes.length);
1:         memory.setBytes(0, bytes, 0, bytes.length);
1:         ByteBuffer canon = ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder());
1:         test(canon, memory);
1:         memory.setBytes(0, new byte[1000], 0, 1000);
1:         memory.setBytes(0, canon.duplicate());
1:         test(canon, memory);
1:     }
1: 
1:     private static void test(ByteBuffer canon, Memory memory)
1:     {
1:         ByteBuffer hollow = MemoryUtil.getHollowDirectByteBuffer();
1:         test(canon, hollow, memory, 0, 1000);
1:         test(canon, hollow, memory, 33, 100);
1:         test(canon, hollow, memory, 77, 77);
1:         test(canon, hollow, memory, 903, 96);
1:     }
1: 
1:     private static void test(ByteBuffer canon, ByteBuffer hollow, Memory memory, int offset, int length)
1:     {
1:         canon = canon.duplicate();
1:         canon.position(offset).limit(offset + length);
1:         canon = canon.slice().order(ByteOrder.nativeOrder());
1:         test(canon, memory.asByteBuffer(offset, length));
1:         memory.setByteBuffer(hollow, offset, length);
1:         test(canon, hollow);
1:     }
1: 
1:     private static void test(ByteBuffer canon, ByteBuffer test)
1:     {
1:         Assert.assertEquals(canon, test);
1:         for (int i = 0 ; i <= canon.limit() - 4 ; i += 4)
1:             Assert.assertEquals(canon.getInt(i), test.getInt(i));
1:         for (int i = 0 ; i <= canon.limit() - 8 ; i += 8)
1:             Assert.assertEquals(canon.getLong(i), test.getLong(i));
1:     }
1: 
1: }
============================================================================