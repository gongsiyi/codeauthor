1:7536429: package org.apache.cassandra.stress.settings;
1:0bc9841: /*
1:3c95d47:  *
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
1:3c95d47:  *
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c95d47:  *
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:3c95d47:  *
1:0bc9841:  */
1:7536429: 
1:7536429: 
1:6c579a0: import java.util.*;
1:7536429: 
1:0bc9841: 
1:7536429: public final class OptionAnyProbabilities extends OptionMulti
1:7536429: {
1:7536429:     public OptionAnyProbabilities(String name, String description)
1:7536429:     {
1:7536429:         super(name, description, false);
1:7536429:     }
1:7536429: 
1:7536429:     final CollectRatios ratios = new CollectRatios();
1:7536429: 
1:7536429:     private static final class CollectRatios extends Option
1:7536429:     {
1:7536429:         Map<String, Double> options = new LinkedHashMap<>();
1:7536429: 
1:7536429:         boolean accept(String param)
1:7536429:         {
1:7536429:             String[] args = param.split("=");
1:7536429:             if (args.length == 2 && args[1].length() > 0 && args[0].length() > 0)
1:7536429:             {
1:5cc7a11:                 if (options.put(args[0], Double.valueOf(args[1])) != null)
1:7536429:                     throw new IllegalArgumentException(args[0] + " set twice");
1:7536429:                 return true;
1:7536429:             }
1:7536429:             return false;
1:7536429:         }
1:7536429: 
1:7536429:         boolean happy()
1:7536429:         {
1:7536429:             return !options.isEmpty();
1:7536429:         }
1:6bbfb55: 
1:7536429:         String shortDisplay()
1:7536429:         {
1:7536429:             return null;
1:7536429:         }
1:938faa2:         public String getOptionAsString()
1:938faa2:         {
1:938faa2:             StringBuilder sb = new StringBuilder();
1:938faa2:             for (Map.Entry<String, Double> entry : options.entrySet())
1:938faa2:             {
1:3c95d47:                 sb.append(entry.getKey()).append("=").append(entry.getValue()).append(",");
1:938faa2:             }
1:938faa2:             return sb.toString();
1:938faa2:         }
1:7536429: 
1:7536429:         String longDisplay()
1:7536429:         {
1:7536429:             return null;
1:7536429:         }
1:7536429: 
1:7536429:         List<String> multiLineDisplay()
1:7536429:         {
1:7536429:             return Collections.emptyList();
1:7536429:         }
1:7536429: 
1:7536429:         boolean setByUser()
1:7536429:         {
1:7536429:             return !options.isEmpty();
1:7536429:         }
1:7536429: 
1:6bbfb55:         boolean present()
1:6bbfb55:         {
1:6bbfb55:             return setByUser();
1:6bbfb55:         }
1:7536429:     }
1:7536429: 
1:7536429: 
1:7536429:     @Override
1:7536429:     public List<? extends Option> options()
1:7536429:     {
1:7536429:         return Arrays.asList(ratios);
1:7536429:     }
1:7536429: 
1:24f6f03:     Map<String, Double> ratios()
1:7536429:     {
1:24f6f03:         return ratios.options;
1:7536429:     }
1:938faa2:     public String getOptionAsString()
1:938faa2:     {
1:938faa2:         StringBuilder sb = new StringBuilder(super.getOptionAsString());
1:938faa2:         sb.append(" [Ratios: ");
1:938faa2:         sb.append(ratios.getOptionAsString());
1:938faa2:         sb.append("];");
1:938faa2:         return sb.toString();
1:938faa2:     }
1:938faa2: 
1:7536429: }
1:7536429: 
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:3c95d47
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:                 sb.append(entry.getKey()).append("=").append(entry.getValue()).append(",");
commit:5cc7a11
/////////////////////////////////////////////////////////////////////////
1:                 if (options.put(args[0], Double.valueOf(args[1])) != null)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
1:         public String getOptionAsString()
1:         {
1:             StringBuilder sb = new StringBuilder();
1:             for (Map.Entry<String, Double> entry : options.entrySet())
1:             {
0:                 sb.append(entry.getKey() + "=" + entry.getValue() + ",");
1:             }
1:             return sb.toString();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public String getOptionAsString()
1:     {
1:         StringBuilder sb = new StringBuilder(super.getOptionAsString());
1:         sb.append(" [Ratios: ");
1:         sb.append(ratios.getOptionAsString());
1:         sb.append("];");
1:         return sb.toString();
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:a0586f6
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean present()
1:         {
1:             return setByUser();
1:         }
commit:36280a0
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
commit:24f6f03
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:     Map<String, Double> ratios()
1:         return ratios.options;
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.LinkedHashMap;
0: import java.util.List;
0: import java.util.Map;
1: 
0: import org.apache.commons.math3.util.Pair;
1: 
1: public final class OptionAnyProbabilities extends OptionMulti
1: {
1:     public OptionAnyProbabilities(String name, String description)
1:     {
1:         super(name, description, false);
1:     }
1: 
1:     final CollectRatios ratios = new CollectRatios();
1: 
1:     private static final class CollectRatios extends Option
1:     {
1:         Map<String, Double> options = new LinkedHashMap<>();
1: 
1:         boolean accept(String param)
1:         {
1:             String[] args = param.split("=");
1:             if (args.length == 2 && args[1].length() > 0 && args[0].length() > 0)
1:             {
0:                 if (options.put(args[0], Double.parseDouble(args[1])) != null)
1:                     throw new IllegalArgumentException(args[0] + " set twice");
1:                 return true;
1:             }
1:             return false;
1:         }
1: 
1:         boolean happy()
1:         {
1:             return !options.isEmpty();
1:         }
1: 
1:         String shortDisplay()
1:         {
1:             return null;
1:         }
1: 
1:         String longDisplay()
1:         {
1:             return null;
1:         }
1: 
1:         List<String> multiLineDisplay()
1:         {
1:             return Collections.emptyList();
1:         }
1: 
1:         boolean setByUser()
1:         {
1:             return !options.isEmpty();
1:         }
1:     }
1: 
1: 
1:     @Override
1:     public List<? extends Option> options()
1:     {
1:         return Arrays.asList(ratios);
1:     }
1: 
0:     List<Pair<String, Double>> ratios()
1:     {
0:         List<Pair<String, Double>> ratiosOut = new ArrayList<>();
0:         for (Map.Entry<String, Double> e : ratios.options.entrySet())
0:             ratiosOut.add(new Pair<String, Double>(e.getKey(), e.getValue()));
0:         return ratiosOut;
1:     }
1: }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
============================================================================