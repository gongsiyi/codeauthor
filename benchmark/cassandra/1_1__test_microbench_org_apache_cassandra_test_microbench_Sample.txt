1:c235603: /**
1:c235603:  * Licensed to the Apache Software Foundation (ASF) under one
1:c235603:  * or more contributor license agreements.  See the NOTICE file
1:c235603:  * distributed with this work for additional information
1:c235603:  * regarding copyright ownership.  The ASF licenses this file
1:c235603:  * to you under the Apache License, Version 2.0 (the
1:c235603:  * "License"); you may not use this file except in compliance
1:c235603:  * with the License.  You may obtain a copy of the License at
1:c235603:  *
1:c235603:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c235603:  *
1:c235603:  * Unless required by applicable law or agreed to in writing, software
1:c235603:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c235603:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c235603:  * See the License for the specific language governing permissions and
1:c235603:  * limitations under the License.
1:c235603:  */
1:c235603: 
1:c235603: package org.apache.cassandra.test.microbench;
1:c235603: 
1:c235603: import net.jpountz.lz4.LZ4Compressor;
1:c235603: import net.jpountz.lz4.LZ4Factory;
1:c235603: import net.jpountz.lz4.LZ4FastDecompressor;
1:c235603: import org.openjdk.jmh.annotations.*;
1:c235603: import org.xerial.snappy.Snappy;
1:c235603: 
1:c235603: import java.io.IOException;
1:c235603: import java.util.concurrent.ThreadLocalRandom;
1:c235603: import java.util.concurrent.TimeUnit;
1:c235603: 
1:c235603: @BenchmarkMode(Mode.Throughput)
1:c235603: @OutputTimeUnit(TimeUnit.MILLISECONDS)
1:c235603: @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)
1:c235603: @Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)
1:c235603: @Fork(value = 1,jvmArgsAppend = "-Xmx512M")
1:c235603: @Threads(1)
1:c235603: @State(Scope.Benchmark)
1:c235603: public class Sample
1:c235603: {
1:c235603:     @Param({"65536"})
1:c235603:     private int pageSize;
1:c235603: 
1:c235603:     @Param({"1024"})
1:c235603:     private int uniquePages;
1:c235603: 
1:c235603:     @Param({"0.1"})
1:c235603:     private double randomRatio;
1:c235603: 
1:c235603:     @Param({"4..16"})
1:c235603:     private String randomRunLength;
1:c235603: 
1:c235603:     @Param({"4..128"})
1:c235603:     private String duplicateLookback;
1:c235603: 
1:c235603:     private byte[][] lz4Bytes;
1:c235603:     private byte[][] snappyBytes;
1:c235603:     private byte[][] rawBytes;
1:c235603: 
1:c235603:     private LZ4FastDecompressor lz4Decompressor = LZ4Factory.fastestInstance().fastDecompressor();
1:c235603: 
1:c235603:     private LZ4Compressor lz4Compressor = LZ4Factory.fastestInstance().fastCompressor();
1:c235603: 
1:c235603:     @State(Scope.Thread)
1:c235603:     public static class ThreadState
1:c235603:     {
1:c235603:         byte[] bytes;
1:c235603:     }
1:c235603: 
1:c235603:     @Setup
1:c235603:     public void setup() throws IOException
1:c235603:     {
1:c235603:         ThreadLocalRandom random = ThreadLocalRandom.current();
1:c235603:         int[] randomRunLength = range(this.randomRunLength);
1:c235603:         int[] duplicateLookback = range(this.duplicateLookback);
1:c235603:         rawBytes = new byte[uniquePages][pageSize];
1:c235603:         lz4Bytes = new byte[uniquePages][];
1:c235603:         snappyBytes = new byte[uniquePages][];
1:c235603:         byte[][] runs = new byte[duplicateLookback[1] - duplicateLookback[0]][];
1:c235603:         for (int i = 0 ; i < rawBytes.length ; i++)
1:c235603:         {
1:c235603:             byte[] trg = rawBytes[0];
1:c235603:             int runCount = 0;
1:c235603:             int byteCount = 0;
1:c235603:             while (byteCount < trg.length)
1:c235603:             {
1:c235603:                 byte[] nextRun;
1:c235603:                 if (runCount == 0 || random.nextDouble() < this.randomRatio)
1:c235603:                 {
1:c235603:                     nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])];
1:c235603:                     random.nextBytes(nextRun );
1:c235603:                     runs[runCount % runs.length] = nextRun;
1:c235603:                     runCount++;
1:c235603:                 }
1:c235603:                 else
1:c235603:                 {
1:c235603:                     int index = runCount < duplicateLookback[1]
1:c235603:                             ? random.nextInt(runCount)
1:c235603:                             : (runCount - random.nextInt(duplicateLookback[0], duplicateLookback[1]));
1:c235603:                     nextRun = runs[index % runs.length];
1:c235603:                 }
1:c235603:                 System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount));
1:c235603:                 byteCount += nextRun.length;
1:c235603:             }
1:c235603:             lz4Bytes[i] = lz4Compressor.compress(trg);
1:c235603:             snappyBytes[i] = Snappy.compress(trg);
1:c235603:         }
1:c235603:     }
1:c235603: 
1:c235603:     static int[] range(String spec)
1:c235603:     {
1:c235603:         String[] split = spec.split("\\.\\.");
1:c235603:         return new int[] { Integer.parseInt(split[0]), Integer.parseInt(split[1]) };
1:c235603:     }
1:c235603: 
1:c235603:     @Benchmark
1:c235603:     public void lz4(ThreadState state)
1:c235603:     {
1:c235603:         if (state.bytes == null)
1:c235603:             state.bytes = new byte[this.pageSize];
1:c235603:         byte[] in = lz4Bytes[ThreadLocalRandom.current().nextInt(lz4Bytes.length)];
1:c235603:         lz4Decompressor.decompress(in, state.bytes);
1:c235603:     }
1:c235603: 
1:c235603:     @Benchmark
1:c235603:     public void snappy(ThreadState state) throws IOException
1:c235603:     {
1:c235603:         byte[] in = snappyBytes[ThreadLocalRandom.current().nextInt(snappyBytes.length)];
1:c235603:         state.bytes = Snappy.uncompress(in);
1:c235603:     }
1:c235603: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:c235603
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.test.microbench;
1: 
1: import net.jpountz.lz4.LZ4Compressor;
1: import net.jpountz.lz4.LZ4Factory;
1: import net.jpountz.lz4.LZ4FastDecompressor;
1: import org.openjdk.jmh.annotations.*;
1: import org.xerial.snappy.Snappy;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.ThreadLocalRandom;
1: import java.util.concurrent.TimeUnit;
1: 
1: @BenchmarkMode(Mode.Throughput)
1: @OutputTimeUnit(TimeUnit.MILLISECONDS)
1: @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)
1: @Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)
1: @Fork(value = 1,jvmArgsAppend = "-Xmx512M")
1: @Threads(1)
1: @State(Scope.Benchmark)
1: public class Sample
1: {
1:     @Param({"65536"})
1:     private int pageSize;
1: 
1:     @Param({"1024"})
1:     private int uniquePages;
1: 
1:     @Param({"0.1"})
1:     private double randomRatio;
1: 
1:     @Param({"4..16"})
1:     private String randomRunLength;
1: 
1:     @Param({"4..128"})
1:     private String duplicateLookback;
1: 
1:     private byte[][] lz4Bytes;
1:     private byte[][] snappyBytes;
1:     private byte[][] rawBytes;
1: 
1:     private LZ4FastDecompressor lz4Decompressor = LZ4Factory.fastestInstance().fastDecompressor();
1: 
1:     private LZ4Compressor lz4Compressor = LZ4Factory.fastestInstance().fastCompressor();
1: 
1:     @State(Scope.Thread)
1:     public static class ThreadState
1:     {
1:         byte[] bytes;
1:     }
1: 
1:     @Setup
1:     public void setup() throws IOException
1:     {
1:         ThreadLocalRandom random = ThreadLocalRandom.current();
1:         int[] randomRunLength = range(this.randomRunLength);
1:         int[] duplicateLookback = range(this.duplicateLookback);
1:         rawBytes = new byte[uniquePages][pageSize];
1:         lz4Bytes = new byte[uniquePages][];
1:         snappyBytes = new byte[uniquePages][];
1:         byte[][] runs = new byte[duplicateLookback[1] - duplicateLookback[0]][];
1:         for (int i = 0 ; i < rawBytes.length ; i++)
1:         {
1:             byte[] trg = rawBytes[0];
1:             int runCount = 0;
1:             int byteCount = 0;
1:             while (byteCount < trg.length)
1:             {
1:                 byte[] nextRun;
1:                 if (runCount == 0 || random.nextDouble() < this.randomRatio)
1:                 {
1:                     nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])];
1:                     random.nextBytes(nextRun );
1:                     runs[runCount % runs.length] = nextRun;
1:                     runCount++;
1:                 }
1:                 else
1:                 {
1:                     int index = runCount < duplicateLookback[1]
1:                             ? random.nextInt(runCount)
1:                             : (runCount - random.nextInt(duplicateLookback[0], duplicateLookback[1]));
1:                     nextRun = runs[index % runs.length];
1:                 }
1:                 System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount));
1:                 byteCount += nextRun.length;
1:             }
1:             lz4Bytes[i] = lz4Compressor.compress(trg);
1:             snappyBytes[i] = Snappy.compress(trg);
1:         }
1:     }
1: 
1:     static int[] range(String spec)
1:     {
1:         String[] split = spec.split("\\.\\.");
1:         return new int[] { Integer.parseInt(split[0]), Integer.parseInt(split[1]) };
1:     }
1: 
1:     @Benchmark
1:     public void lz4(ThreadState state)
1:     {
1:         if (state.bytes == null)
1:             state.bytes = new byte[this.pageSize];
1:         byte[] in = lz4Bytes[ThreadLocalRandom.current().nextInt(lz4Bytes.length)];
1:         lz4Decompressor.decompress(in, state.bytes);
1:     }
1: 
1:     @Benchmark
1:     public void snappy(ThreadState state) throws IOException
1:     {
1:         byte[] in = snappyBytes[ThreadLocalRandom.current().nextInt(snappyBytes.length)];
1:         state.bytes = Snappy.uncompress(in);
1:     }
1: }
============================================================================