1:d43b9ce: /*
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information
1:d43b9ce:  * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing, software
1:d43b9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d43b9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d43b9ce:  * See the License for the specific language governing permissions and
1:d43b9ce:  * limitations under the License.
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.utils;
1:d43b9ce: 
1:d43b9ce: import java.util.concurrent.TimeUnit;
1:d43b9ce: 
1:d43b9ce: import com.google.common.util.concurrent.Uninterruptibles;
1:d43b9ce: 
1:d43b9ce: /**
1:d43b9ce:  * Time source backed by JVM clock.
1:d43b9ce:  */
1:d43b9ce: public class SystemTimeSource implements TimeSource
1:d43b9ce: {
1:d43b9ce:     @Override
1:d43b9ce:     public long currentTimeMillis()
1:d43b9ce:     {
1:d43b9ce:         return System.currentTimeMillis();
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public long nanoTime()
1:d43b9ce:     {
1:d43b9ce:         return System.nanoTime();
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public TimeSource sleepUninterruptibly(long sleepFor, TimeUnit unit)
1:d43b9ce:     {
1:d43b9ce:         Uninterruptibles.sleepUninterruptibly(sleepFor, unit);
1:d43b9ce:         return this;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public TimeSource sleep(long sleepFor, TimeUnit unit) throws InterruptedException
1:d43b9ce:     {
1:d43b9ce:         TimeUnit.NANOSECONDS.sleep(TimeUnit.NANOSECONDS.convert(sleepFor, unit));
1:d43b9ce:         return this;
1:d43b9ce:     }
1:d43b9ce: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.util.concurrent.Uninterruptibles;
1: 
1: /**
1:  * Time source backed by JVM clock.
1:  */
1: public class SystemTimeSource implements TimeSource
1: {
1:     @Override
1:     public long currentTimeMillis()
1:     {
1:         return System.currentTimeMillis();
1:     }
1: 
1:     @Override
1:     public long nanoTime()
1:     {
1:         return System.nanoTime();
1:     }
1: 
1:     @Override
1:     public TimeSource sleepUninterruptibly(long sleepFor, TimeUnit unit)
1:     {
1:         Uninterruptibles.sleepUninterruptibly(sleepFor, unit);
1:         return this;
1:     }
1: 
1:     @Override
1:     public TimeSource sleep(long sleepFor, TimeUnit unit) throws InterruptedException
1:     {
1:         TimeUnit.NANOSECONDS.sleep(TimeUnit.NANOSECONDS.convert(sleepFor, unit));
1:         return this;
1:     }
1: }
============================================================================