1:bfd57d1: /*
1:bfd57d1:  * Licensed to the Apache Software Foundation (ASF) under one
1:bfd57d1:  * or more contributor license agreements.  See the NOTICE file
1:bfd57d1:  * distributed with this work for additional information
1:bfd57d1:  * regarding copyright ownership.  The ASF licenses this file
1:bfd57d1:  * to you under the Apache License, Version 2.0 (the
1:bfd57d1:  * "License"); you may not use this file except in compliance
1:bfd57d1:  * with the License.  You may obtain a copy of the License at
1:bfd57d1:  *
1:bfd57d1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bfd57d1:  *
1:bfd57d1:  * Unless required by applicable law or agreed to in writing, software
1:bfd57d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bfd57d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bfd57d1:  * See the License for the specific language governing permissions and
1:bfd57d1:  * limitations under the License.
1:bfd57d1:  */
1:bfd57d1: package org.apache.cassandra.serializers;
1:bfd57d1: 
1:bfd57d1: import java.io.IOException;
1:bfd57d1: import java.nio.ByteBuffer;
1:bfd57d1: 
1:bfd57d1: import org.apache.cassandra.cql3.Duration;
1:bfd57d1: import org.apache.cassandra.io.util.DataInputBuffer;
1:bfd57d1: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1:bfd57d1: import org.apache.cassandra.utils.ByteBufferUtil;
1:bfd57d1: import org.apache.cassandra.utils.vint.VIntCoding;
1:bfd57d1: 
1:bfd57d1: public final class DurationSerializer implements TypeSerializer<Duration>
1:bfd57d1: {
1:bfd57d1:     public static final DurationSerializer instance = new DurationSerializer();
1:bfd57d1: 
1:bfd57d1:     public ByteBuffer serialize(Duration duration)
1:bfd57d1:     {
1:bfd57d1:         if (duration == null)
1:bfd57d1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:bfd57d1: 
1:bfd57d1:         long months = duration.getMonths();
1:bfd57d1:         long days = duration.getDays();
1:bfd57d1:         long nanoseconds = duration.getNanoseconds();
1:bfd57d1: 
1:bfd57d1:         int size = VIntCoding.computeVIntSize(months)
1:bfd57d1:                 + VIntCoding.computeVIntSize(days)
1:bfd57d1:                 + VIntCoding.computeVIntSize(nanoseconds);
1:bfd57d1: 
1:bfd57d1:         try (DataOutputBufferFixed output = new DataOutputBufferFixed(size))
1:bfd57d1:         {
1:bfd57d1:             output.writeVInt(months);
1:bfd57d1:             output.writeVInt(days);
1:bfd57d1:             output.writeVInt(nanoseconds);
1:bfd57d1:             return output.buffer();
1:bfd57d1:         }
1:bfd57d1:         catch (IOException e)
1:bfd57d1:         {
1:bfd57d1:             // this should never happen with a DataOutputBufferFixed
1:bfd57d1:             throw new AssertionError("Unexpected error", e);
1:bfd57d1:         }
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     public Duration deserialize(ByteBuffer bytes)
1:bfd57d1:     {
1:bfd57d1:         if (bytes.remaining() == 0)
1:bfd57d1:             return null;
1:bfd57d1: 
1:bfd57d1:         try (DataInputBuffer in = new DataInputBuffer(bytes, true))
1:bfd57d1:         {
1:bfd57d1:             int months = (int) in.readVInt();
1:bfd57d1:             int days = (int) in.readVInt();
1:bfd57d1:             long nanoseconds = in.readVInt();
1:bfd57d1:             return Duration.newInstance(months, days, nanoseconds);
1:bfd57d1:         }
1:bfd57d1:         catch (IOException e)
1:bfd57d1:         {
1:bfd57d1:             // this should never happen with a DataInputBuffer
1:bfd57d1:             throw new AssertionError("Unexpected error", e);
1:bfd57d1:         }
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     public void validate(ByteBuffer bytes) throws MarshalException
1:bfd57d1:     {
1:bfd57d1:         if (bytes.remaining() < 3)
1:bfd57d1:             throw new MarshalException(String.format("Expected at least 3 bytes for a duration (%d)", bytes.remaining()));
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     public String toString(Duration duration)
1:bfd57d1:     {
1:bfd57d1:         return duration == null ? "" : duration.toString();
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     public Class<Duration> getType()
1:bfd57d1:     {
1:bfd57d1:         return Duration.class;
1:bfd57d1:     }
1:bfd57d1: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:bfd57d1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.serializers;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.cql3.Duration;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.vint.VIntCoding;
1: 
1: public final class DurationSerializer implements TypeSerializer<Duration>
1: {
1:     public static final DurationSerializer instance = new DurationSerializer();
1: 
1:     public ByteBuffer serialize(Duration duration)
1:     {
1:         if (duration == null)
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
1:         long months = duration.getMonths();
1:         long days = duration.getDays();
1:         long nanoseconds = duration.getNanoseconds();
1: 
1:         int size = VIntCoding.computeVIntSize(months)
1:                 + VIntCoding.computeVIntSize(days)
1:                 + VIntCoding.computeVIntSize(nanoseconds);
1: 
1:         try (DataOutputBufferFixed output = new DataOutputBufferFixed(size))
1:         {
1:             output.writeVInt(months);
1:             output.writeVInt(days);
1:             output.writeVInt(nanoseconds);
1:             return output.buffer();
1:         }
1:         catch (IOException e)
1:         {
1:             // this should never happen with a DataOutputBufferFixed
1:             throw new AssertionError("Unexpected error", e);
1:         }
1:     }
1: 
1:     public Duration deserialize(ByteBuffer bytes)
1:     {
1:         if (bytes.remaining() == 0)
1:             return null;
1: 
1:         try (DataInputBuffer in = new DataInputBuffer(bytes, true))
1:         {
1:             int months = (int) in.readVInt();
1:             int days = (int) in.readVInt();
1:             long nanoseconds = in.readVInt();
1:             return Duration.newInstance(months, days, nanoseconds);
1:         }
1:         catch (IOException e)
1:         {
1:             // this should never happen with a DataInputBuffer
1:             throw new AssertionError("Unexpected error", e);
1:         }
1:     }
1: 
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (bytes.remaining() < 3)
1:             throw new MarshalException(String.format("Expected at least 3 bytes for a duration (%d)", bytes.remaining()));
1:     }
1: 
1:     public String toString(Duration duration)
1:     {
1:         return duration == null ? "" : duration.toString();
1:     }
1: 
1:     public Class<Duration> getType()
1:     {
1:         return Duration.class;
1:     }
1: }
============================================================================