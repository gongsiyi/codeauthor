1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
8:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:2457599: import java.util.*;
1:a991b64: 
1:2457599: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.context.CounterContext;
1:a991b64: import org.apache.cassandra.db.filter.ColumnFilter;
1:a991b64: 
1:a991b64: public class SerializationHelper
6:a991b64: {
1:a991b64:     /**
1:a991b64:      * Flag affecting deserialization behavior (this only affect counters in practice).
1:a991b64:      *  - LOCAL: for deserialization of local data (Expired columns are
1:a991b64:      *      converted to tombstones (to gain disk space)).
1:a991b64:      *  - FROM_REMOTE: for deserialization of data received from remote hosts
1:a991b64:      *      (Expired columns are converted to tombstone and counters have
1:a991b64:      *      their delta cleared)
1:a991b64:      *  - PRESERVE_SIZE: used when no transformation must be performed, i.e,
1:a991b64:      *      when we must ensure that deserializing and reserializing the
1:a991b64:      *      result yield the exact same bytes. Streaming uses this.
1:a991b64:      */
1:2457599:     public enum Flag
1:a991b64:     {
1:2457599:         LOCAL, FROM_REMOTE, PRESERVE_SIZE
6:a991b64:     }
1:a991b64: 
1:a991b64:     private final Flag flag;
1:a991b64:     public final int version;
1:a991b64: 
1:a991b64:     private final ColumnFilter columnsToFetch;
1:a991b64:     private ColumnFilter.Tester tester;
1:a991b64: 
1:2457599:     private final Map<ByteBuffer, CFMetaData.DroppedColumn> droppedColumns;
1:2457599:     private CFMetaData.DroppedColumn currentDroppedComplex;
1:2457599: 
1:2457599: 
1:2457599:     public SerializationHelper(CFMetaData metadata, int version, Flag flag, ColumnFilter columnsToFetch)
1:a991b64:     {
1:a991b64:         this.flag = flag;
1:a991b64:         this.version = version;
1:a991b64:         this.columnsToFetch = columnsToFetch;
1:2457599:         this.droppedColumns = metadata.getDroppedColumns();
1:a991b64:     }
1:a991b64: 
1:2457599:     public SerializationHelper(CFMetaData metadata, int version, Flag flag)
1:a991b64:     {
1:2457599:         this(metadata, version, flag, null);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean includes(ColumnDefinition column)
1:a991b64:     {
1:fd74a03:         return columnsToFetch == null || columnsToFetch.fetches(column);
1:fd74a03:     }
1:fd74a03: 
1:fd74a03:     public boolean includes(Cell cell, LivenessInfo rowLiveness)
1:fd74a03:     {
1:fd74a03:         if (columnsToFetch == null)
1:fd74a03:             return true;
1:fd74a03: 
1:fd74a03:         // During queries, some columns are included even though they are not queried by the user because
1:fd74a03:         // we always need to distinguish between having a row (with potentially only null values) and not
1:fd74a03:         // having a row at all (see #CASSANDRA-7085 for background). In the case where the column is not
1:fd74a03:         // actually requested by the user however (canSkipValue), we can skip the full cell if the cell
1:fd74a03:         // timestamp is lower than the row one, because in that case, the row timestamp is enough proof
1:fd74a03:         // of the liveness of the row. Otherwise, we'll only be able to skip the values of those cells.
1:fd74a03:         ColumnDefinition column = cell.column();
1:fd74a03:         if (column.isComplex())
1:fd74a03:         {
1:fd74a03:             if (!includes(cell.path()))
1:fd74a03:                 return false;
1:fd74a03: 
1:fd74a03:             return !canSkipValue(cell.path()) || cell.timestamp() >= rowLiveness.timestamp();
1:fd74a03:         }
1:fd74a03:         else
1:fd74a03:         {
1:fd74a03:             return columnsToFetch.fetchedColumnIsQueried(column) || cell.timestamp() >= rowLiveness.timestamp();
1:fd74a03:         }
1:a991b64:     }
1:a991b64: 
1:2457599:     public boolean includes(CellPath path)
1:2457599:     {
1:fd74a03:         return path == null || tester == null || tester.fetches(path);
1:2457599:     }
1:2457599: 
1:a991b64:     public boolean canSkipValue(ColumnDefinition column)
1:a991b64:     {
1:fd74a03:         return columnsToFetch != null && !columnsToFetch.fetchedColumnIsQueried(column);
1:a991b64:     }
1:a991b64: 
1:2457599:     public boolean canSkipValue(CellPath path)
1:2457599:     {
1:fd74a03:         return path != null && tester != null && !tester.fetchedCellIsQueried(path);
1:2457599:     }
1:2457599: 
1:a991b64:     public void startOfComplexColumn(ColumnDefinition column)
1:a991b64:     {
1:a991b64:         this.tester = columnsToFetch == null ? null : columnsToFetch.newTester(column);
1:2457599:         this.currentDroppedComplex = droppedColumns.get(column.name.bytes);
1:a991b64:     }
1:a991b64: 
1:2457599:     public void endOfComplexColumn()
1:a991b64:     {
1:a991b64:         this.tester = null;
1:a991b64:     }
1:a991b64: 
1:2457599:     public boolean isDropped(Cell cell, boolean isComplex)
1:a991b64:     {
1:2457599:         CFMetaData.DroppedColumn dropped = isComplex ? currentDroppedComplex : droppedColumns.get(cell.column().name.bytes);
1:2457599:         return dropped != null && cell.timestamp() <= dropped.droppedTime;
1:2457599:     }
1:a991b64: 
1:2457599:     public boolean isDroppedComplexDeletion(DeletionTime complexDeletion)
1:2457599:     {
1:2457599:         return currentDroppedComplex != null && complexDeletion.markedForDeleteAt() <= currentDroppedComplex.droppedTime;
1:2457599:     }
1:a991b64: 
1:2457599:     public ByteBuffer maybeClearCounterValue(ByteBuffer value)
1:2457599:     {
1:2457599:         return flag == Flag.FROM_REMOTE || (flag == Flag.LOCAL && CounterContext.instance().shouldClearLocal(value))
1:2457599:              ? CounterContext.instance().clearAllLocal(value)
1:2457599:              : value;
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:fd74a03
/////////////////////////////////////////////////////////////////////////
1:         return columnsToFetch == null || columnsToFetch.fetches(column);
1:     }
1: 
1:     public boolean includes(Cell cell, LivenessInfo rowLiveness)
1:     {
1:         if (columnsToFetch == null)
1:             return true;
1: 
1:         // During queries, some columns are included even though they are not queried by the user because
1:         // we always need to distinguish between having a row (with potentially only null values) and not
1:         // having a row at all (see #CASSANDRA-7085 for background). In the case where the column is not
1:         // actually requested by the user however (canSkipValue), we can skip the full cell if the cell
1:         // timestamp is lower than the row one, because in that case, the row timestamp is enough proof
1:         // of the liveness of the row. Otherwise, we'll only be able to skip the values of those cells.
1:         ColumnDefinition column = cell.column();
1:         if (column.isComplex())
1:         {
1:             if (!includes(cell.path()))
1:                 return false;
1: 
1:             return !canSkipValue(cell.path()) || cell.timestamp() >= rowLiveness.timestamp();
1:         }
1:         else
1:         {
1:             return columnsToFetch.fetchedColumnIsQueried(column) || cell.timestamp() >= rowLiveness.timestamp();
1:         }
1:         return path == null || tester == null || tester.fetches(path);
1:         return columnsToFetch != null && !columnsToFetch.fetchedColumnIsQueried(column);
1:         return path != null && tester != null && !tester.fetchedCellIsQueried(path);
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import org.apache.cassandra.config.CFMetaData;
/////////////////////////////////////////////////////////////////////////
1:     public enum Flag
1:         LOCAL, FROM_REMOTE, PRESERVE_SIZE
1:     private final Map<ByteBuffer, CFMetaData.DroppedColumn> droppedColumns;
1:     private CFMetaData.DroppedColumn currentDroppedComplex;
1: 
1: 
1:     public SerializationHelper(CFMetaData metadata, int version, Flag flag, ColumnFilter columnsToFetch)
1:         this.droppedColumns = metadata.getDroppedColumns();
1:     public SerializationHelper(CFMetaData metadata, int version, Flag flag)
1:         this(metadata, version, flag, null);
0:     public Columns fetchedStaticColumns(SerializationHeader header)
0:         return columnsToFetch == null ? header.columns().statics : columnsToFetch.fetchedColumns().statics;
0:     public Columns fetchedRegularColumns(SerializationHeader header)
0:         return columnsToFetch == null ? header.columns().regulars : columnsToFetch.fetchedColumns().regulars;
/////////////////////////////////////////////////////////////////////////
1:     public boolean includes(CellPath path)
1:     {
0:         return path == null || tester == null || tester.includes(path);
1:     }
1: 
1:     public boolean canSkipValue(CellPath path)
1:     {
0:         return path != null && tester != null && tester.canSkipValue(path);
1:     }
1: 
1:         this.currentDroppedComplex = droppedColumns.get(column.name.bytes);
1:     public void endOfComplexColumn()
1:     public boolean isDropped(Cell cell, boolean isComplex)
1:         CFMetaData.DroppedColumn dropped = isComplex ? currentDroppedComplex : droppedColumns.get(cell.column().name.bytes);
1:         return dropped != null && cell.timestamp() <= dropped.droppedTime;
1:     }
1:     public boolean isDroppedComplexDeletion(DeletionTime complexDeletion)
1:     {
1:         return currentDroppedComplex != null && complexDeletion.markedForDeleteAt() <= currentDroppedComplex.droppedTime;
1:     }
1:     public ByteBuffer maybeClearCounterValue(ByteBuffer value)
1:     {
1:         return flag == Flag.FROM_REMOTE || (flag == Flag.LOCAL && CounterContext.instance().shouldClearLocal(value))
1:              ? CounterContext.instance().clearAllLocal(value)
1:              : value;
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.context.CounterContext;
1: import org.apache.cassandra.db.filter.ColumnFilter;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class SerializationHelper
1: {
1:     /**
1:      * Flag affecting deserialization behavior (this only affect counters in practice).
1:      *  - LOCAL: for deserialization of local data (Expired columns are
1:      *      converted to tombstones (to gain disk space)).
1:      *  - FROM_REMOTE: for deserialization of data received from remote hosts
1:      *      (Expired columns are converted to tombstone and counters have
1:      *      their delta cleared)
1:      *  - PRESERVE_SIZE: used when no transformation must be performed, i.e,
1:      *      when we must ensure that deserializing and reserializing the
1:      *      result yield the exact same bytes. Streaming uses this.
1:      */
0:     public static enum Flag
1:     {
0:         LOCAL, FROM_REMOTE, PRESERVE_SIZE;
1:     }
1: 
1:     private final Flag flag;
1:     public final int version;
1: 
0:     private final ReusableLivenessInfo livenessInfo = new ReusableLivenessInfo();
1: 
0:     // The currently read row liveness infos (timestamp, ttl and localDeletionTime).
0:     private long rowTimestamp;
0:     private int rowTTL;
0:     private int rowLocalDeletionTime;
1: 
1:     private final ColumnFilter columnsToFetch;
1:     private ColumnFilter.Tester tester;
1: 
0:     public SerializationHelper(int version, Flag flag, ColumnFilter columnsToFetch)
1:     {
1:         this.flag = flag;
1:         this.version = version;
1:         this.columnsToFetch = columnsToFetch;
1:     }
1: 
0:     public SerializationHelper(int version, Flag flag)
1:     {
0:         this(version, flag, null);
1:     }
1: 
0:     public void writePartitionKeyLivenessInfo(Row.Writer writer, long timestamp, int ttl, int localDeletionTime)
1:     {
0:         livenessInfo.setTo(timestamp, ttl, localDeletionTime);
0:         writer.writePartitionKeyLivenessInfo(livenessInfo);
1: 
0:         rowTimestamp = timestamp;
0:         rowTTL = ttl;
0:         rowLocalDeletionTime = localDeletionTime;
1:     }
1: 
0:     public long getRowTimestamp()
1:     {
0:         return rowTimestamp;
1:     }
1: 
0:     public int getRowTTL()
1:     {
0:         return rowTTL;
1:     }
1: 
0:     public int getRowLocalDeletionTime()
1:     {
0:         return rowLocalDeletionTime;
1:     }
1: 
1:     public boolean includes(ColumnDefinition column)
1:     {
0:         return columnsToFetch == null || columnsToFetch.includes(column);
1:     }
1: 
1:     public boolean canSkipValue(ColumnDefinition column)
1:     {
0:         return columnsToFetch != null && columnsToFetch.canSkipValue(column);
1:     }
1: 
1:     public void startOfComplexColumn(ColumnDefinition column)
1:     {
1:         this.tester = columnsToFetch == null ? null : columnsToFetch.newTester(column);
1:     }
1: 
0:     public void endOfComplexColumn(ColumnDefinition column)
1:     {
1:         this.tester = null;
1:     }
1: 
0:     public void writeCell(Row.Writer writer,
0:                           ColumnDefinition column,
0:                           boolean isCounter,
0:                           ByteBuffer value,
0:                           long timestamp,
0:                           int localDelTime,
0:                           int ttl,
0:                           CellPath path)
1:     {
0:         livenessInfo.setTo(timestamp, ttl, localDelTime);
1: 
0:         if (isCounter && ((flag == Flag.FROM_REMOTE || (flag == Flag.LOCAL && CounterContext.instance().shouldClearLocal(value)))))
0:             value = CounterContext.instance().clearAllLocal(value);
1: 
0:         if (!column.isComplex() || tester == null || tester.includes(path))
1:         {
0:             if (tester != null && tester.canSkipValue(path))
0:                 value = ByteBufferUtil.EMPTY_BYTE_BUFFER;
0:             writer.writeCell(column, isCounter, value, livenessInfo, path);
1:         }
1:     }
1: }
============================================================================