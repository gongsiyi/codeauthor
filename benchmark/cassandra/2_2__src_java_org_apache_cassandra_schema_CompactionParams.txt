1:b31845c: /*
1:b31845c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b31845c:  * or more contributor license agreements.  See the NOTICE file
1:b31845c:  * distributed with this work for additional information
1:b31845c:  * regarding copyright ownership.  The ASF licenses this file
1:b31845c:  * to you under the Apache License, Version 2.0 (the
1:b31845c:  * "License"); you may not use this file except in compliance
1:b31845c:  * with the License.  You may obtain a copy of the License at
1:b31845c:  *
1:b31845c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b31845c:  *
1:b31845c:  * Unless required by applicable law or agreed to in writing, software
1:b31845c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b31845c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b31845c:  * See the License for the specific language governing permissions and
1:b31845c:  * limitations under the License.
1:b31845c:  */
1:b31845c: package org.apache.cassandra.schema;
1:b31845c: 
1:b31845c: import java.lang.reflect.InvocationTargetException;
1:b31845c: import java.util.HashMap;
1:b31845c: import java.util.Map;
1:b31845c: import java.util.Objects;
1:b31845c: 
1:b31845c: import com.google.common.base.MoreObjects;
1:b31845c: import com.google.common.collect.ImmutableMap;
1:b31845c: import org.apache.commons.lang3.StringUtils;
1:b31845c: import org.slf4j.Logger;
1:b31845c: import org.slf4j.LoggerFactory;
1:b31845c: 
1:b31845c: import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
1:b31845c: import org.apache.cassandra.db.compaction.LeveledCompactionStrategy;
1:b31845c: import org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy;
1:b31845c: import org.apache.cassandra.exceptions.ConfigurationException;
1:b31845c: import org.apache.cassandra.utils.FBUtilities;
1:b31845c: 
1:b31845c: import static java.lang.String.format;
1:b31845c: 
1:b31845c: public final class CompactionParams
1:b31845c: {
1:b31845c:     private static final Logger logger = LoggerFactory.getLogger(CompactionParams.class);
1:b31845c: 
1:b31845c:     public enum Option
1:b31845c:     {
1:b31845c:         CLASS,
1:b31845c:         ENABLED,
1:b31845c:         MIN_THRESHOLD,
1:d40ac78:         MAX_THRESHOLD,
1:d40ac78:         PROVIDE_OVERLAPPING_TOMBSTONES;
1:b31845c: 
1:b31845c:         @Override
1:b31845c:         public String toString()
1:b31845c:         {
1:b31845c:             return name().toLowerCase();
1:b31845c:         }
1:b31845c:     }
1:b31845c: 
1:d40ac78:     public enum TombstoneOption
1:d40ac78:     {
1:d40ac78:         NONE,
1:d40ac78:         ROW,
1:d40ac78:         CELL;
1:d40ac78:     }
1:d40ac78: 
1:b31845c:     public static final int DEFAULT_MIN_THRESHOLD = 4;
1:b31845c:     public static final int DEFAULT_MAX_THRESHOLD = 32;
1:b31845c: 
1:b31845c:     public static final boolean DEFAULT_ENABLED = true;
1:d40ac78:     public static final TombstoneOption DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES =
1:d40ac78:             TombstoneOption.valueOf(System.getProperty("default.provide.overlapping.tombstones", TombstoneOption.NONE.toString()).toUpperCase());
1:b31845c: 
1:b31845c:     public static final Map<String, String> DEFAULT_THRESHOLDS =
1:b31845c:         ImmutableMap.of(Option.MIN_THRESHOLD.toString(), Integer.toString(DEFAULT_MIN_THRESHOLD),
1:b31845c:                         Option.MAX_THRESHOLD.toString(), Integer.toString(DEFAULT_MAX_THRESHOLD));
1:b31845c: 
1:b31845c:     public static final CompactionParams DEFAULT =
1:d40ac78:         new CompactionParams(SizeTieredCompactionStrategy.class, DEFAULT_THRESHOLDS, DEFAULT_ENABLED, DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES);
1:b31845c: 
1:b31845c:     private final Class<? extends AbstractCompactionStrategy> klass;
1:b31845c:     private final ImmutableMap<String, String> options;
1:b31845c:     private final boolean isEnabled;
1:d40ac78:     private final TombstoneOption tombstoneOption;
1:b31845c: 
1:d40ac78:     private CompactionParams(Class<? extends AbstractCompactionStrategy> klass, Map<String, String> options, boolean isEnabled, TombstoneOption tombstoneOption)
1:b31845c:     {
1:b31845c:         this.klass = klass;
1:b31845c:         this.options = ImmutableMap.copyOf(options);
1:b31845c:         this.isEnabled = isEnabled;
1:d40ac78:         this.tombstoneOption = tombstoneOption;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static CompactionParams create(Class<? extends AbstractCompactionStrategy> klass, Map<String, String> options)
1:b31845c:     {
1:b31845c:         boolean isEnabled = options.containsKey(Option.ENABLED.toString())
1:b31845c:                           ? Boolean.parseBoolean(options.get(Option.ENABLED.toString()))
1:b31845c:                           : DEFAULT_ENABLED;
1:d40ac78:         TombstoneOption tombstoneOption = TombstoneOption.valueOf(options.getOrDefault(Option.PROVIDE_OVERLAPPING_TOMBSTONES.toString(),
1:d40ac78:                                                                                        DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES.toString()).toUpperCase());
1:b31845c: 
1:b31845c:         Map<String, String> allOptions = new HashMap<>(options);
1:b31845c:         if (supportsThresholdParams(klass))
1:b31845c:         {
1:b31845c:             allOptions.putIfAbsent(Option.MIN_THRESHOLD.toString(), Integer.toString(DEFAULT_MIN_THRESHOLD));
1:b31845c:             allOptions.putIfAbsent(Option.MAX_THRESHOLD.toString(), Integer.toString(DEFAULT_MAX_THRESHOLD));
1:b31845c:         }
1:b31845c: 
1:d40ac78:         return new CompactionParams(klass, allOptions, isEnabled, tombstoneOption);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static CompactionParams scts(Map<String, String> options)
1:b31845c:     {
1:b31845c:         return create(SizeTieredCompactionStrategy.class, options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static CompactionParams lcs(Map<String, String> options)
1:b31845c:     {
1:b31845c:         return create(LeveledCompactionStrategy.class, options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public int minCompactionThreshold()
1:b31845c:     {
1:b31845c:         String threshold = options.get(Option.MIN_THRESHOLD.toString());
1:b31845c:         return threshold == null
1:b31845c:              ? DEFAULT_MIN_THRESHOLD
1:b31845c:              : Integer.parseInt(threshold);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public int maxCompactionThreshold()
1:b31845c:     {
1:b31845c:         String threshold = options.get(Option.MAX_THRESHOLD.toString());
1:b31845c:         return threshold == null
1:b31845c:              ? DEFAULT_MAX_THRESHOLD
1:b31845c:              : Integer.parseInt(threshold);
1:b31845c:     }
1:b31845c: 
1:d40ac78:     public TombstoneOption tombstoneOption()
1:d40ac78:     {
1:d40ac78:         return tombstoneOption;
1:d40ac78:     }
1:d40ac78: 
1:b31845c:     public void validate()
1:b31845c:     {
1:b31845c:         try
1:b31845c:         {
1:b31845c:             Map<?, ?> unknownOptions = (Map) klass.getMethod("validateOptions", Map.class).invoke(null, options);
1:b31845c:             if (!unknownOptions.isEmpty())
1:b31845c:             {
1:b31845c:                 throw new ConfigurationException(format("Properties specified %s are not understood by %s",
1:b31845c:                                                         unknownOptions.keySet(),
1:b31845c:                                                         klass.getSimpleName()));
1:b31845c:             }
1:b31845c:         }
1:b31845c:         catch (NoSuchMethodException e)
1:b31845c:         {
1:b31845c:             logger.warn("Compaction strategy {} does not have a static validateOptions method. Validation ignored",
1:b31845c:                         klass.getName());
1:b31845c:         }
1:b31845c:         catch (InvocationTargetException e)
1:b31845c:         {
1:b31845c:             if (e.getTargetException() instanceof ConfigurationException)
1:b31845c:                 throw (ConfigurationException) e.getTargetException();
1:b31845c: 
1:b31845c:             Throwable cause = e.getCause() == null
1:b31845c:                             ? e
1:b31845c:                             : e.getCause();
1:b31845c: 
1:b31845c:             throw new ConfigurationException(format("%s.validateOptions() threw an error: %s %s",
1:b31845c:                                                     klass.getName(),
1:b31845c:                                                     cause.getClass().getName(),
1:b31845c:                                                     cause.getMessage()),
1:b31845c:                                              e);
1:b31845c:         }
1:b31845c:         catch (IllegalAccessException e)
1:b31845c:         {
1:b31845c:             throw new ConfigurationException("Cannot access method validateOptions in " + klass.getName(), e);
1:b31845c:         }
1:b31845c: 
1:b31845c:         String minThreshold = options.get(Option.MIN_THRESHOLD.toString());
1:b31845c:         if (minThreshold != null && !StringUtils.isNumeric(minThreshold))
1:b31845c:         {
1:b31845c:             throw new ConfigurationException(format("Invalid value %s for '%s' compaction sub-option - must be an integer",
1:b31845c:                                                     minThreshold,
1:b31845c:                                                     Option.MIN_THRESHOLD));
1:b31845c:         }
1:b31845c: 
1:b31845c:         String maxThreshold = options.get(Option.MAX_THRESHOLD.toString());
1:b31845c:         if (maxThreshold != null && !StringUtils.isNumeric(maxThreshold))
1:b31845c:         {
1:b31845c:             throw new ConfigurationException(format("Invalid value %s for '%s' compaction sub-option - must be an integer",
1:b31845c:                                                     maxThreshold,
1:b31845c:                                                     Option.MAX_THRESHOLD));
1:b31845c:         }
1:b31845c: 
1:b31845c:         if (minCompactionThreshold() <= 0 || maxCompactionThreshold() <= 0)
1:b31845c:         {
1:b31845c:             throw new ConfigurationException("Disabling compaction by setting compaction thresholds to 0 has been removed,"
1:b31845c:                                              + " set the compaction option 'enabled' to false instead.");
1:b31845c:         }
1:b31845c: 
1:b31845c:         if (minCompactionThreshold() <= 1)
1:b31845c:         {
1:b31845c:             throw new ConfigurationException(format("Min compaction threshold cannot be less than 2 (got %d)",
1:b31845c:                                                     minCompactionThreshold()));
1:b31845c:         }
1:b31845c: 
1:b31845c:         if (minCompactionThreshold() > maxCompactionThreshold())
1:b31845c:         {
1:b31845c:             throw new ConfigurationException(format("Min compaction threshold (got %d) cannot be greater than max compaction threshold (got %d)",
1:b31845c:                                                     minCompactionThreshold(),
1:b31845c:                                                     maxCompactionThreshold()));
1:b31845c:         }
1:b31845c:     }
1:b31845c: 
1:b31845c:     double defaultBloomFilterFbChance()
1:b31845c:     {
1:b31845c:         return klass.equals(LeveledCompactionStrategy.class) ? 0.1 : 0.01;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public Class<? extends AbstractCompactionStrategy> klass()
1:b31845c:     {
1:b31845c:         return klass;
1:b31845c:     }
1:b31845c: 
1:b31845c:     /**
1:b31845c:      * All strategy options - excluding 'class'.
1:b31845c:      */
1:b31845c:     public Map<String, String> options()
1:b31845c:     {
1:b31845c:         return options;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public boolean isEnabled()
1:b31845c:     {
1:b31845c:         return isEnabled;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static CompactionParams fromMap(Map<String, String> map)
1:b31845c:     {
1:b31845c:         Map<String, String> options = new HashMap<>(map);
1:b31845c: 
1:b31845c:         String className = options.remove(Option.CLASS.toString());
1:b31845c:         if (className == null)
1:b31845c:         {
1:b31845c:             throw new ConfigurationException(format("Missing sub-option '%s' for the '%s' option",
1:b31845c:                                                     Option.CLASS,
1:b31845c:                                                     TableParams.Option.COMPACTION));
1:b31845c:         }
1:b31845c: 
1:b31845c:         return create(classFromName(className), options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     private static Class<? extends AbstractCompactionStrategy> classFromName(String name)
1:b31845c:     {
1:b31845c:         String className = name.contains(".")
1:b31845c:                          ? name
1:b31845c:                          : "org.apache.cassandra.db.compaction." + name;
1:b31845c:         Class<AbstractCompactionStrategy> strategyClass = FBUtilities.classForName(className, "compaction strategy");
1:b31845c: 
1:b31845c:         if (!AbstractCompactionStrategy.class.isAssignableFrom(strategyClass))
1:b31845c:         {
1:b31845c:             throw new ConfigurationException(format("Compaction strategy class %s is not derived from AbstractReplicationStrategy",
1:b31845c:                                                     className));
1:b31845c:         }
1:b31845c: 
1:b31845c:         return strategyClass;
1:b31845c:     }
1:b31845c: 
1:b31845c:     /*
1:b31845c:      * LCS doesn't, STCS and DTCS do
1:b31845c:      */
1:b31845c:     @SuppressWarnings("unchecked")
1:b31845c:     public static boolean supportsThresholdParams(Class<? extends AbstractCompactionStrategy> klass)
1:b31845c:     {
1:b31845c:         try
1:b31845c:         {
1:b31845c:             Map<String, String> unrecognizedOptions =
1:b31845c:                 (Map<String, String>) klass.getMethod("validateOptions", Map.class)
1:b31845c:                                            .invoke(null, DEFAULT_THRESHOLDS);
1:b31845c: 
1:b31845c:             return unrecognizedOptions.isEmpty();
1:b31845c:         }
1:b31845c:         catch (Exception e)
1:b31845c:         {
1:b31845c:             throw new RuntimeException(e);
1:b31845c:         }
1:b31845c:     }
1:b31845c: 
1:b31845c:     public Map<String, String> asMap()
1:b31845c:     {
1:b31845c:         Map<String, String> map = new HashMap<>(options());
1:b31845c:         map.put(Option.CLASS.toString(), klass.getName());
1:b31845c:         return map;
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public String toString()
1:b31845c:     {
1:b31845c:         return MoreObjects.toStringHelper(this)
1:b31845c:                           .add("class", klass.getName())
1:b31845c:                           .add("options", options)
1:b31845c:                           .toString();
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public boolean equals(Object o)
1:b31845c:     {
1:b31845c:         if (this == o)
1:b31845c:             return true;
1:b31845c: 
1:b31845c:         if (!(o instanceof CompactionParams))
1:b31845c:             return false;
1:b31845c: 
1:b31845c:         CompactionParams cp = (CompactionParams) o;
1:b31845c: 
1:b31845c:         return klass.equals(cp.klass) && options.equals(cp.options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public int hashCode()
1:b31845c:     {
1:b31845c:         return Objects.hash(klass, options);
1:b31845c:     }
1:b31845c: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d40ac78
/////////////////////////////////////////////////////////////////////////
1:         MAX_THRESHOLD,
1:         PROVIDE_OVERLAPPING_TOMBSTONES;
/////////////////////////////////////////////////////////////////////////
1:     public enum TombstoneOption
1:     {
1:         NONE,
1:         ROW,
1:         CELL;
1:     }
1: 
1:     public static final TombstoneOption DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES =
1:             TombstoneOption.valueOf(System.getProperty("default.provide.overlapping.tombstones", TombstoneOption.NONE.toString()).toUpperCase());
1:         new CompactionParams(SizeTieredCompactionStrategy.class, DEFAULT_THRESHOLDS, DEFAULT_ENABLED, DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES);
1:     private final TombstoneOption tombstoneOption;
1:     private CompactionParams(Class<? extends AbstractCompactionStrategy> klass, Map<String, String> options, boolean isEnabled, TombstoneOption tombstoneOption)
1:         this.tombstoneOption = tombstoneOption;
/////////////////////////////////////////////////////////////////////////
1:         TombstoneOption tombstoneOption = TombstoneOption.valueOf(options.getOrDefault(Option.PROVIDE_OVERLAPPING_TOMBSTONES.toString(),
1:                                                                                        DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES.toString()).toUpperCase());
/////////////////////////////////////////////////////////////////////////
1:         return new CompactionParams(klass, allOptions, isEnabled, tombstoneOption);
/////////////////////////////////////////////////////////////////////////
1:     public TombstoneOption tombstoneOption()
1:     {
1:         return tombstoneOption;
1:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Objects;
1: 
1: import com.google.common.base.MoreObjects;
1: import com.google.common.collect.ImmutableMap;
1: import org.apache.commons.lang3.StringUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
1: import org.apache.cassandra.db.compaction.LeveledCompactionStrategy;
1: import org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static java.lang.String.format;
1: 
1: public final class CompactionParams
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(CompactionParams.class);
1: 
1:     public enum Option
1:     {
1:         CLASS,
1:         ENABLED,
1:         MIN_THRESHOLD,
0:         MAX_THRESHOLD;
1: 
1:         @Override
1:         public String toString()
1:         {
1:             return name().toLowerCase();
1:         }
1:     }
1: 
1:     public static final int DEFAULT_MIN_THRESHOLD = 4;
1:     public static final int DEFAULT_MAX_THRESHOLD = 32;
1: 
1:     public static final boolean DEFAULT_ENABLED = true;
1: 
1:     public static final Map<String, String> DEFAULT_THRESHOLDS =
1:         ImmutableMap.of(Option.MIN_THRESHOLD.toString(), Integer.toString(DEFAULT_MIN_THRESHOLD),
1:                         Option.MAX_THRESHOLD.toString(), Integer.toString(DEFAULT_MAX_THRESHOLD));
1: 
1:     public static final CompactionParams DEFAULT =
0:         new CompactionParams(SizeTieredCompactionStrategy.class, DEFAULT_THRESHOLDS, DEFAULT_ENABLED);
1: 
1:     private final Class<? extends AbstractCompactionStrategy> klass;
1:     private final ImmutableMap<String, String> options;
1:     private final boolean isEnabled;
1: 
0:     private CompactionParams(Class<? extends AbstractCompactionStrategy> klass, Map<String, String> options, boolean isEnabled)
1:     {
1:         this.klass = klass;
1:         this.options = ImmutableMap.copyOf(options);
1:         this.isEnabled = isEnabled;
1:     }
1: 
1:     public static CompactionParams create(Class<? extends AbstractCompactionStrategy> klass, Map<String, String> options)
1:     {
1:         boolean isEnabled = options.containsKey(Option.ENABLED.toString())
1:                           ? Boolean.parseBoolean(options.get(Option.ENABLED.toString()))
1:                           : DEFAULT_ENABLED;
1: 
1:         Map<String, String> allOptions = new HashMap<>(options);
1:         if (supportsThresholdParams(klass))
1:         {
1:             allOptions.putIfAbsent(Option.MIN_THRESHOLD.toString(), Integer.toString(DEFAULT_MIN_THRESHOLD));
1:             allOptions.putIfAbsent(Option.MAX_THRESHOLD.toString(), Integer.toString(DEFAULT_MAX_THRESHOLD));
1:         }
1: 
0:         return new CompactionParams(klass, allOptions, isEnabled);
1:     }
1: 
1:     public static CompactionParams scts(Map<String, String> options)
1:     {
1:         return create(SizeTieredCompactionStrategy.class, options);
1:     }
1: 
1:     public static CompactionParams lcs(Map<String, String> options)
1:     {
1:         return create(LeveledCompactionStrategy.class, options);
1:     }
1: 
1:     public int minCompactionThreshold()
1:     {
1:         String threshold = options.get(Option.MIN_THRESHOLD.toString());
1:         return threshold == null
1:              ? DEFAULT_MIN_THRESHOLD
1:              : Integer.parseInt(threshold);
1:     }
1: 
1:     public int maxCompactionThreshold()
1:     {
1:         String threshold = options.get(Option.MAX_THRESHOLD.toString());
1:         return threshold == null
1:              ? DEFAULT_MAX_THRESHOLD
1:              : Integer.parseInt(threshold);
1:     }
1: 
1:     public void validate()
1:     {
1:         try
1:         {
1:             Map<?, ?> unknownOptions = (Map) klass.getMethod("validateOptions", Map.class).invoke(null, options);
1:             if (!unknownOptions.isEmpty())
1:             {
1:                 throw new ConfigurationException(format("Properties specified %s are not understood by %s",
1:                                                         unknownOptions.keySet(),
1:                                                         klass.getSimpleName()));
1:             }
1:         }
1:         catch (NoSuchMethodException e)
1:         {
1:             logger.warn("Compaction strategy {} does not have a static validateOptions method. Validation ignored",
1:                         klass.getName());
1:         }
1:         catch (InvocationTargetException e)
1:         {
1:             if (e.getTargetException() instanceof ConfigurationException)
1:                 throw (ConfigurationException) e.getTargetException();
1: 
1:             Throwable cause = e.getCause() == null
1:                             ? e
1:                             : e.getCause();
1: 
1:             throw new ConfigurationException(format("%s.validateOptions() threw an error: %s %s",
1:                                                     klass.getName(),
1:                                                     cause.getClass().getName(),
1:                                                     cause.getMessage()),
1:                                              e);
1:         }
1:         catch (IllegalAccessException e)
1:         {
1:             throw new ConfigurationException("Cannot access method validateOptions in " + klass.getName(), e);
1:         }
1: 
1:         String minThreshold = options.get(Option.MIN_THRESHOLD.toString());
1:         if (minThreshold != null && !StringUtils.isNumeric(minThreshold))
1:         {
1:             throw new ConfigurationException(format("Invalid value %s for '%s' compaction sub-option - must be an integer",
1:                                                     minThreshold,
1:                                                     Option.MIN_THRESHOLD));
1:         }
1: 
1:         String maxThreshold = options.get(Option.MAX_THRESHOLD.toString());
1:         if (maxThreshold != null && !StringUtils.isNumeric(maxThreshold))
1:         {
1:             throw new ConfigurationException(format("Invalid value %s for '%s' compaction sub-option - must be an integer",
1:                                                     maxThreshold,
1:                                                     Option.MAX_THRESHOLD));
1:         }
1: 
1:         if (minCompactionThreshold() <= 0 || maxCompactionThreshold() <= 0)
1:         {
1:             throw new ConfigurationException("Disabling compaction by setting compaction thresholds to 0 has been removed,"
1:                                              + " set the compaction option 'enabled' to false instead.");
1:         }
1: 
1:         if (minCompactionThreshold() <= 1)
1:         {
1:             throw new ConfigurationException(format("Min compaction threshold cannot be less than 2 (got %d)",
1:                                                     minCompactionThreshold()));
1:         }
1: 
1:         if (minCompactionThreshold() > maxCompactionThreshold())
1:         {
1:             throw new ConfigurationException(format("Min compaction threshold (got %d) cannot be greater than max compaction threshold (got %d)",
1:                                                     minCompactionThreshold(),
1:                                                     maxCompactionThreshold()));
1:         }
1:     }
1: 
1:     double defaultBloomFilterFbChance()
1:     {
1:         return klass.equals(LeveledCompactionStrategy.class) ? 0.1 : 0.01;
1:     }
1: 
1:     public Class<? extends AbstractCompactionStrategy> klass()
1:     {
1:         return klass;
1:     }
1: 
1:     /**
1:      * All strategy options - excluding 'class'.
1:      */
1:     public Map<String, String> options()
1:     {
1:         return options;
1:     }
1: 
1:     public boolean isEnabled()
1:     {
1:         return isEnabled;
1:     }
1: 
1:     public static CompactionParams fromMap(Map<String, String> map)
1:     {
1:         Map<String, String> options = new HashMap<>(map);
1: 
1:         String className = options.remove(Option.CLASS.toString());
1:         if (className == null)
1:         {
1:             throw new ConfigurationException(format("Missing sub-option '%s' for the '%s' option",
1:                                                     Option.CLASS,
1:                                                     TableParams.Option.COMPACTION));
1:         }
1: 
1:         return create(classFromName(className), options);
1:     }
1: 
1:     private static Class<? extends AbstractCompactionStrategy> classFromName(String name)
1:     {
1:         String className = name.contains(".")
1:                          ? name
1:                          : "org.apache.cassandra.db.compaction." + name;
1:         Class<AbstractCompactionStrategy> strategyClass = FBUtilities.classForName(className, "compaction strategy");
1: 
1:         if (!AbstractCompactionStrategy.class.isAssignableFrom(strategyClass))
1:         {
1:             throw new ConfigurationException(format("Compaction strategy class %s is not derived from AbstractReplicationStrategy",
1:                                                     className));
1:         }
1: 
1:         return strategyClass;
1:     }
1: 
1:     /*
1:      * LCS doesn't, STCS and DTCS do
1:      */
1:     @SuppressWarnings("unchecked")
1:     public static boolean supportsThresholdParams(Class<? extends AbstractCompactionStrategy> klass)
1:     {
1:         try
1:         {
1:             Map<String, String> unrecognizedOptions =
1:                 (Map<String, String>) klass.getMethod("validateOptions", Map.class)
1:                                            .invoke(null, DEFAULT_THRESHOLDS);
1: 
1:             return unrecognizedOptions.isEmpty();
1:         }
1:         catch (Exception e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public Map<String, String> asMap()
1:     {
1:         Map<String, String> map = new HashMap<>(options());
1:         map.put(Option.CLASS.toString(), klass.getName());
1:         return map;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return MoreObjects.toStringHelper(this)
1:                           .add("class", klass.getName())
1:                           .add("options", options)
1:                           .toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof CompactionParams))
1:             return false;
1: 
1:         CompactionParams cp = (CompactionParams) o;
1: 
1:         return klass.equals(cp.klass) && options.equals(cp.options);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hash(klass, options);
1:     }
1: }
============================================================================