1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer.filter;
1:72790dc: 
1:72790dc: import java.lang.reflect.Constructor;
1:72790dc: import java.util.HashMap;
1:72790dc: import java.util.Locale;
1:72790dc: import java.util.Map;
1:72790dc: 
1:72790dc: import org.tartarus.snowball.SnowballStemmer;
1:72790dc: import org.tartarus.snowball.ext.*;
1:72790dc: 
1:72790dc: import com.google.common.cache.CacheBuilder;
1:72790dc: import com.google.common.cache.CacheLoader;
1:72790dc: import com.google.common.cache.LoadingCache;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Returns a SnowballStemmer instance appropriate for
1:72790dc:  * a given language
1:72790dc:  */
1:72790dc: public class StemmerFactory
1:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(StemmerFactory.class);
1:72790dc:     private static final LoadingCache<Class, Constructor<?>> STEMMER_CONSTRUCTOR_CACHE = CacheBuilder.newBuilder()
1:72790dc:             .build(new CacheLoader<Class, Constructor<?>>()
1:72790dc:             {
1:72790dc:                 public Constructor<?> load(Class aClass) throws Exception
1:72790dc:                 {
1:72790dc:                     try
1:72790dc:                     {
1:72790dc:                         return aClass.getConstructor();
1:72790dc:                     }
1:68d2526:                     catch (Exception e) 
1:68d2526:                     {
1:72790dc:                         logger.error("Failed to get stemmer constructor", e);
1:72790dc:                     }
1:72790dc:                     return null;
1:72790dc:                 }
1:72790dc:             });
1:72790dc: 
1:72790dc:     private static final Map<String, Class> SUPPORTED_LANGUAGES;
1:72790dc: 
1:72790dc:     static
1:72790dc:     {
1:72790dc:         SUPPORTED_LANGUAGES = new HashMap<>();
1:72790dc:         SUPPORTED_LANGUAGES.put("de", germanStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("da", danishStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("es", spanishStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("en", englishStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("fl", finnishStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("fr", frenchStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("hu", hungarianStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("it", italianStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("nl", dutchStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("no", norwegianStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("pt", portugueseStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("ro", romanianStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("ru", russianStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("sv", swedishStemmer.class);
1:72790dc:         SUPPORTED_LANGUAGES.put("tr", turkishStemmer.class);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static SnowballStemmer getStemmer(Locale locale)
1:72790dc:     {
1:72790dc:         if (locale == null)
1:72790dc:             return null;
1:72790dc: 
1:72790dc:         String rootLang = locale.getLanguage().substring(0, 2);
1:72790dc:         try
1:72790dc:         {
1:72790dc:             Class clazz = SUPPORTED_LANGUAGES.get(rootLang);
1:72790dc:             if(clazz == null)
1:72790dc:                 return null;
1:72790dc:             Constructor<?> ctor = STEMMER_CONSTRUCTOR_CACHE.get(clazz);
1:72790dc:             return (SnowballStemmer) ctor.newInstance();
1:72790dc:         }
1:72790dc:         catch (Exception e)
1:72790dc:         {
1:72790dc:             logger.debug("Failed to create new SnowballStemmer instance " +
1:72790dc:                     "for language [{}]", locale.getLanguage(), e);
1:72790dc:         }
1:72790dc:         return null;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:                     catch (Exception e) 
1:                     {
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer.filter;
1: 
1: import java.lang.reflect.Constructor;
1: import java.util.HashMap;
1: import java.util.Locale;
1: import java.util.Map;
1: 
1: import org.tartarus.snowball.SnowballStemmer;
1: import org.tartarus.snowball.ext.*;
1: 
1: import com.google.common.cache.CacheBuilder;
1: import com.google.common.cache.CacheLoader;
1: import com.google.common.cache.LoadingCache;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Returns a SnowballStemmer instance appropriate for
1:  * a given language
1:  */
1: public class StemmerFactory
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(StemmerFactory.class);
1:     private static final LoadingCache<Class, Constructor<?>> STEMMER_CONSTRUCTOR_CACHE = CacheBuilder.newBuilder()
1:             .build(new CacheLoader<Class, Constructor<?>>()
1:             {
1:                 public Constructor<?> load(Class aClass) throws Exception
1:                 {
1:                     try
1:                     {
1:                         return aClass.getConstructor();
1:                     }
0:                     catch (Exception e) {
1:                         logger.error("Failed to get stemmer constructor", e);
1:                     }
1:                     return null;
1:                 }
1:             });
1: 
1:     private static final Map<String, Class> SUPPORTED_LANGUAGES;
1: 
1:     static
1:     {
1:         SUPPORTED_LANGUAGES = new HashMap<>();
1:         SUPPORTED_LANGUAGES.put("de", germanStemmer.class);
1:         SUPPORTED_LANGUAGES.put("da", danishStemmer.class);
1:         SUPPORTED_LANGUAGES.put("es", spanishStemmer.class);
1:         SUPPORTED_LANGUAGES.put("en", englishStemmer.class);
1:         SUPPORTED_LANGUAGES.put("fl", finnishStemmer.class);
1:         SUPPORTED_LANGUAGES.put("fr", frenchStemmer.class);
1:         SUPPORTED_LANGUAGES.put("hu", hungarianStemmer.class);
1:         SUPPORTED_LANGUAGES.put("it", italianStemmer.class);
1:         SUPPORTED_LANGUAGES.put("nl", dutchStemmer.class);
1:         SUPPORTED_LANGUAGES.put("no", norwegianStemmer.class);
1:         SUPPORTED_LANGUAGES.put("pt", portugueseStemmer.class);
1:         SUPPORTED_LANGUAGES.put("ro", romanianStemmer.class);
1:         SUPPORTED_LANGUAGES.put("ru", russianStemmer.class);
1:         SUPPORTED_LANGUAGES.put("sv", swedishStemmer.class);
1:         SUPPORTED_LANGUAGES.put("tr", turkishStemmer.class);
1:     }
1: 
1:     public static SnowballStemmer getStemmer(Locale locale)
1:     {
1:         if (locale == null)
1:             return null;
1: 
1:         String rootLang = locale.getLanguage().substring(0, 2);
1:         try
1:         {
1:             Class clazz = SUPPORTED_LANGUAGES.get(rootLang);
1:             if(clazz == null)
1:                 return null;
1:             Constructor<?> ctor = STEMMER_CONSTRUCTOR_CACHE.get(clazz);
1:             return (SnowballStemmer) ctor.newInstance();
1:         }
1:         catch (Exception e)
1:         {
1:             logger.debug("Failed to create new SnowballStemmer instance " +
1:                     "for language [{}]", locale.getLanguage(), e);
1:         }
1:         return null;
1:     }
1: }
============================================================================