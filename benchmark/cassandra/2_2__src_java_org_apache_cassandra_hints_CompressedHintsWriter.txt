1:c20566f: /*
1:c20566f:  * Licensed to the Apache Software Foundation (ASF) under one
1:c20566f:  * or more contributor license agreements.  See the NOTICE file
1:c20566f:  * distributed with this work for additional information
1:c20566f:  * regarding copyright ownership.  The ASF licenses this file
1:c20566f:  * to you under the Apache License, Version 2.0 (the
1:c20566f:  * "License"); you may not use this file except in compliance
1:c20566f:  * with the License.  You may obtain a copy of the License at
1:c20566f:  *
1:c20566f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c20566f:  *
1:c20566f:  * Unless required by applicable law or agreed to in writing, software
1:c20566f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c20566f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c20566f:  * See the License for the specific language governing permissions and
1:c20566f:  * limitations under the License.
1:c20566f:  */
1:c20566f: 
1:c20566f: package org.apache.cassandra.hints;
1:c20566f: 
1:c20566f: import java.io.File;
1:c20566f: import java.io.IOException;
1:c20566f: import java.nio.ByteBuffer;
1:c20566f: import java.nio.channels.FileChannel;
1:c20566f: import java.util.zip.CRC32;
1:c20566f: 
1:90033b9: import com.google.common.annotations.VisibleForTesting;
1:90033b9: 
1:c20566f: import org.apache.cassandra.io.compress.ICompressor;
1:c20566f: 
1:c20566f: public class CompressedHintsWriter extends HintsWriter
1:c20566f: {
1:c20566f:     // compressed and uncompressed size is stored at the beginning of each compressed block
1:c20566f:     static final int METADATA_SIZE = 8;
1:c20566f: 
1:c20566f:     private final ICompressor compressor;
1:c20566f: 
1:c20566f:     private volatile ByteBuffer compressionBuffer = null;
1:c20566f: 
1:c20566f:     public CompressedHintsWriter(File directory, HintsDescriptor descriptor, File file, FileChannel channel, int fd, CRC32 globalCRC)
1:c20566f:     {
1:c20566f:         super(directory, descriptor, file, channel, fd, globalCRC);
1:c20566f:         compressor = descriptor.createCompressor();
1:c20566f:         assert compressor != null;
1:c20566f:     }
1:c20566f: 
1:c20566f:     protected void writeBuffer(ByteBuffer bb) throws IOException
1:c20566f:     {
1:c20566f:         int originalSize = bb.remaining();
1:c20566f:         int estimatedSize = compressor.initialCompressedBufferLength(originalSize) + METADATA_SIZE;
1:c20566f: 
1:c20566f:         if (compressionBuffer == null || compressionBuffer.capacity() < estimatedSize)
1:c20566f:         {
1:c20566f:             compressionBuffer = compressor.preferredBufferType().allocate(estimatedSize);
1:c20566f:         }
1:c20566f:         compressionBuffer.clear();
1:c20566f: 
1:c20566f:         compressionBuffer.position(METADATA_SIZE);
1:c20566f:         compressor.compress(bb, compressionBuffer);
1:c20566f:         int compressedSize = compressionBuffer.position() - METADATA_SIZE;
1:c20566f: 
1:c20566f:         compressionBuffer.rewind();
1:c20566f:         compressionBuffer.putInt(originalSize);
1:c20566f:         compressionBuffer.putInt(compressedSize);
1:c20566f:         compressionBuffer.rewind();
1:c20566f:         compressionBuffer.limit(compressedSize + METADATA_SIZE);
1:c20566f:         super.writeBuffer(compressionBuffer);
1:c20566f:     }
1:90033b9: 
1:90033b9:     @VisibleForTesting
1:90033b9:     ICompressor getCompressor()
1:90033b9:     {
1:90033b9:         return compressor;
1:90033b9:     }
1:c20566f: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @VisibleForTesting
1:     ICompressor getCompressor()
1:     {
1:         return compressor;
1:     }
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.util.zip.CRC32;
1: 
1: import org.apache.cassandra.io.compress.ICompressor;
1: 
1: public class CompressedHintsWriter extends HintsWriter
1: {
1:     // compressed and uncompressed size is stored at the beginning of each compressed block
1:     static final int METADATA_SIZE = 8;
1: 
1:     private final ICompressor compressor;
1: 
1:     private volatile ByteBuffer compressionBuffer = null;
1: 
1:     public CompressedHintsWriter(File directory, HintsDescriptor descriptor, File file, FileChannel channel, int fd, CRC32 globalCRC)
1:     {
1:         super(directory, descriptor, file, channel, fd, globalCRC);
1:         compressor = descriptor.createCompressor();
1:         assert compressor != null;
1:     }
1: 
1:     protected void writeBuffer(ByteBuffer bb) throws IOException
1:     {
1:         int originalSize = bb.remaining();
1:         int estimatedSize = compressor.initialCompressedBufferLength(originalSize) + METADATA_SIZE;
1: 
1:         if (compressionBuffer == null || compressionBuffer.capacity() < estimatedSize)
1:         {
1:             compressionBuffer = compressor.preferredBufferType().allocate(estimatedSize);
1:         }
1:         compressionBuffer.clear();
1: 
1:         compressionBuffer.position(METADATA_SIZE);
1:         compressor.compress(bb, compressionBuffer);
1:         int compressedSize = compressionBuffer.position() - METADATA_SIZE;
1: 
1:         compressionBuffer.rewind();
1:         compressionBuffer.putInt(originalSize);
1:         compressionBuffer.putInt(compressedSize);
1:         compressionBuffer.rewind();
1:         compressionBuffer.limit(compressedSize + METADATA_SIZE);
1:         super.writeBuffer(compressionBuffer);
1:     }
1: }
============================================================================