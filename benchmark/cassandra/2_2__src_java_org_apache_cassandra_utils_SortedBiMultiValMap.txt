1:60bf68c: /*
1:60bf68c:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf68c:  * or more contributor license agreements.  See the NOTICE file
1:60bf68c:  * distributed with this work for additional information
1:60bf68c:  * regarding copyright ownership.  The ASF licenses this file
1:60bf68c:  * to you under the Apache License, Version 2.0 (the
1:60bf68c:  * "License"); you may not use this file except in compliance
1:60bf68c:  * with the License.  You may obtain a copy of the License at
1:60bf68c:  *
1:60bf68c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:60bf68c:  *
1:60bf68c:  * Unless required by applicable law or agreed to in writing, software
1:60bf68c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:60bf68c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:60bf68c:  * See the License for the specific language governing permissions and
1:60bf68c:  * limitations under the License.
1:60bf68c:  */
1:19a4537: package org.apache.cassandra.utils;
1:19a4537: 
1:19a4537: import java.util.Comparator;
1:19a4537: import java.util.SortedMap;
1:19a4537: import java.util.TreeMap;
1:19a4537: 
1:19a4537: import com.google.common.collect.SortedSetMultimap;
1:19a4537: import com.google.common.collect.TreeMultimap;
1:19a4537: 
1:19a4537: public class SortedBiMultiValMap<K, V> extends BiMultiValMap<K, V>
1:19a4537: {
1:19a4537:     protected SortedBiMultiValMap(SortedMap<K, V> forwardMap, SortedSetMultimap<V, K> reverseMap)
1:19a4537:     {
1:19a4537:         super(forwardMap, reverseMap);
1:19a4537:     }
1:19a4537: 
1:19a4537:     public static <K extends Comparable<K>, V extends Comparable<V>> SortedBiMultiValMap<K, V> create()
1:19a4537:     {
1:19a4537:         return new SortedBiMultiValMap<K, V>(new TreeMap<K,V>(), TreeMultimap.<V, K>create());
1:19a4537:     }
1:19a4537: 
1:19a4537:     public static <K, V> SortedBiMultiValMap<K, V> create(Comparator<K> keyComparator, Comparator<V> valueComparator)
1:19a4537:     {
1:19a4537:         if (keyComparator == null)
1:19a4537:             keyComparator = defaultComparator();
1:19a4537:         if (valueComparator == null)
1:19a4537:             valueComparator = defaultComparator();
1:19a4537:         return new SortedBiMultiValMap<K, V>(new TreeMap<K,V>(keyComparator), TreeMultimap.<V, K>create(valueComparator, keyComparator));
1:19a4537:     }
1:19a4537: 
1:19a4537:     public static <K extends Comparable<K>, V extends Comparable<V>> SortedBiMultiValMap<K, V> create(BiMultiValMap<K, V> map)
1:19a4537:     {
1:19a4537:         SortedBiMultiValMap<K, V> newMap = SortedBiMultiValMap.<K,V>create();
1:19a4537:         newMap.forwardMap.putAll(map);
1:19a4537:         newMap.reverseMap.putAll(map.inverse());
1:19a4537:         return newMap;
1:19a4537:     }
1:19a4537: 
1:19a4537:     public static <K, V> SortedBiMultiValMap<K, V> create(BiMultiValMap<K, V> map, Comparator<K> keyComparator, Comparator<V> valueComparator)
1:19a4537:     {
1:19a4537:         SortedBiMultiValMap<K, V> newMap = create(keyComparator, valueComparator);
1:19a4537:         newMap.forwardMap.putAll(map);
1:19a4537:         newMap.reverseMap.putAll(map.inverse());
1:19a4537:         return newMap;
1:19a4537:     }
1:19a4537: 
1:19a4537:     private static <T> Comparator<T> defaultComparator()
1:19a4537:     {
1:19a4537:         return new Comparator<T>()
1:19a4537:         {
1:19a4537:             @SuppressWarnings("unchecked")
1:19a4537:             public int compare(T o1, T o2)
1:19a4537:             {
1:19a4537:                 return ((Comparable<T>) o1).compareTo(o2);
1:19a4537:             }
1:19a4537:         };
1:19a4537:     }
1:19a4537: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:60bf68c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Eric Evans
-------------------------------------------------------------------------------
commit:19a4537
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Comparator;
1: import java.util.SortedMap;
1: import java.util.TreeMap;
1: 
1: import com.google.common.collect.SortedSetMultimap;
1: import com.google.common.collect.TreeMultimap;
1: 
1: public class SortedBiMultiValMap<K, V> extends BiMultiValMap<K, V>
1: {
1:     protected SortedBiMultiValMap(SortedMap<K, V> forwardMap, SortedSetMultimap<V, K> reverseMap)
1:     {
1:         super(forwardMap, reverseMap);
1:     }
1: 
1:     public static <K extends Comparable<K>, V extends Comparable<V>> SortedBiMultiValMap<K, V> create()
1:     {
1:         return new SortedBiMultiValMap<K, V>(new TreeMap<K,V>(), TreeMultimap.<V, K>create());
1:     }
1: 
1:     public static <K, V> SortedBiMultiValMap<K, V> create(Comparator<K> keyComparator, Comparator<V> valueComparator)
1:     {
1:         if (keyComparator == null)
1:             keyComparator = defaultComparator();
1:         if (valueComparator == null)
1:             valueComparator = defaultComparator();
1:         return new SortedBiMultiValMap<K, V>(new TreeMap<K,V>(keyComparator), TreeMultimap.<V, K>create(valueComparator, keyComparator));
1:     }
1: 
1:     public static <K extends Comparable<K>, V extends Comparable<V>> SortedBiMultiValMap<K, V> create(BiMultiValMap<K, V> map)
1:     {
1:         SortedBiMultiValMap<K, V> newMap = SortedBiMultiValMap.<K,V>create();
1:         newMap.forwardMap.putAll(map);
1:         newMap.reverseMap.putAll(map.inverse());
1:         return newMap;
1:     }
1: 
1:     public static <K, V> SortedBiMultiValMap<K, V> create(BiMultiValMap<K, V> map, Comparator<K> keyComparator, Comparator<V> valueComparator)
1:     {
1:         SortedBiMultiValMap<K, V> newMap = create(keyComparator, valueComparator);
1:         newMap.forwardMap.putAll(map);
1:         newMap.reverseMap.putAll(map.inverse());
1:         return newMap;
1:     }
1: 
1:     private static <T> Comparator<T> defaultComparator()
1:     {
1:         return new Comparator<T>()
1:         {
1:             @SuppressWarnings("unchecked")
1:             public int compare(T o1, T o2)
1:             {
1:                 return ((Comparable<T>) o1).compareTo(o2);
1:             }
1:         };
1:     }
1: }
============================================================================