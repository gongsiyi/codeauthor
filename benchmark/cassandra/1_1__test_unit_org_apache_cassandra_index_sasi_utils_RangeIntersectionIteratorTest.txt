1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.io.IOException;
1:72790dc: import java.util.*;
1:72790dc: import java.util.concurrent.ThreadLocalRandom;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator.Strategy;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator.LookupIntersectionIterator;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator.BounceIntersectionIterator;
1:72790dc: import org.apache.cassandra.io.util.FileUtils;
1:72790dc: 
1:72790dc: import com.carrotsearch.hppc.LongOpenHashSet;
1:72790dc: import com.carrotsearch.hppc.LongSet;
1:72790dc: 
1:72790dc: import org.junit.Assert;
1:72790dc: import org.junit.Test;
1:72790dc: 
1:72790dc: import static org.apache.cassandra.index.sasi.utils.LongIterator.convert;
1:72790dc: 
1:72790dc: public class RangeIntersectionIteratorTest
1:72790dc: {
1:72790dc:     @Test
1:72790dc:     public void testNoOverlappingValues()
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testNoOverlappingValues(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testNoOverlappingValues(Strategy strategy)
1:72790dc:     {
1:72790dc:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 7L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 8L, 9L, 10L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(), convert(builder.build()));
1:72790dc: 
1:72790dc:         builder = RangeIntersectionIterator.builder(strategy);
1:72790dc:         // both ranges overlap by min/max but not by value
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 5L, 7L, 9L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 6L }));
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> range = builder.build();
1:72790dc: 
1:72790dc:         Assert.assertNotNull(range);
1:72790dc:         Assert.assertFalse(range.hasNext());
1:72790dc: 
1:72790dc:         builder = RangeIntersectionIterator.builder(strategy);
1:72790dc:         // both ranges overlap by min/max but not by value
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 5L, 7L, 9L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 0L, 10L, 12L }));
1:72790dc: 
1:72790dc:         range = builder.build();
1:72790dc: 
1:72790dc:         Assert.assertNotNull(range);
1:72790dc:         Assert.assertFalse(range.hasNext());
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testOverlappingValues()
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testOverlappingValues(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testOverlappingValues(Strategy strategy)
1:72790dc:     {
1:72790dc:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 4L, 6L, 7L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 2L, 4L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 6L, 8L, 9L, 10L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(4L, 6L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testSingleIterator()
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testSingleIterator(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testSingleIterator(Strategy strategy)
1:72790dc:     {
1:72790dc:         RangeIntersectionIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 4L, 9L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(1L, 2L, 4L, 9L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testSkipTo()
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testSkipTo(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testSkipTo(Strategy strategy)
1:72790dc:     {
1:72790dc:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 4L, 6L, 7L, 9L, 10L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 2L, 4L, 5L, 6L, 7L, 10L, 12L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 6L, 7L, 9L, 10L }));
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> range = builder.build();
1:72790dc:         Assert.assertNotNull(range);
1:72790dc: 
1:72790dc:         // first let's skipTo something before range
1:72790dc:         Assert.assertEquals(4L, (long) range.skipTo(3L).get());
1:72790dc:         Assert.assertEquals(4L, (long) range.getCurrent());
1:72790dc: 
1:72790dc:         // now let's skip right to the send value
1:72790dc:         Assert.assertEquals(6L, (long) range.skipTo(5L).get());
1:72790dc:         Assert.assertEquals(6L, (long) range.getCurrent());
1:72790dc: 
1:72790dc:         // now right to the element
1:72790dc:         Assert.assertEquals(7L, (long) range.skipTo(7L).get());
1:72790dc:         Assert.assertEquals(7L, (long) range.getCurrent());
1:72790dc:         Assert.assertEquals(7L, (long) range.next().get());
1:72790dc: 
1:72790dc:         Assert.assertTrue(range.hasNext());
1:72790dc:         Assert.assertEquals(10L, (long) range.getCurrent());
1:72790dc: 
1:72790dc:         // now right after the last element
1:72790dc:         Assert.assertNull(range.skipTo(11L));
1:72790dc:         Assert.assertFalse(range.hasNext());
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testMinMaxAndCount()
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testMinMaxAndCount(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testMinMaxAndCount(Strategy strategy)
1:72790dc:     {
1:72790dc:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[]{1L, 2L, 9L}));
1:72790dc:         builder.add(new LongIterator(new long[]{4L, 5L, 9L}));
1:72790dc:         builder.add(new LongIterator(new long[]{7L, 8L, 9L}));
1:72790dc: 
1:72790dc:         Assert.assertEquals(9L, (long) builder.getMaximum());
1:72790dc:         Assert.assertEquals(9L, builder.getTokenCount());
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> tokens = builder.build();
1:72790dc: 
1:72790dc:         Assert.assertNotNull(tokens);
1:72790dc:         Assert.assertEquals(7L, (long) tokens.getMinimum());
1:72790dc:         Assert.assertEquals(9L, (long) tokens.getMaximum());
1:72790dc:         Assert.assertEquals(9L, tokens.getCount());
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(9L), convert(builder.build()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testBuilder()
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testBuilder(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testBuilder(Strategy strategy)
1:72790dc:     {
1:72790dc:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:72790dc: 
1:72790dc:         Assert.assertNull(builder.getMinimum());
1:72790dc:         Assert.assertNull(builder.getMaximum());
1:72790dc:         Assert.assertEquals(0L, builder.getTokenCount());
1:72790dc:         Assert.assertEquals(0L, builder.rangeCount());
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 6L, 8L, 9L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(6L, (long) builder.getMinimum());
1:72790dc:         Assert.assertEquals(6L, (long) builder.getMaximum());
1:72790dc:         Assert.assertEquals(9L, builder.getTokenCount());
1:72790dc:         Assert.assertEquals(3L, builder.rangeCount());
1:72790dc:         Assert.assertFalse(builder.statistics.isDisjoint());
1:72790dc: 
1:72790dc:         Assert.assertEquals(1L, (long) builder.ranges.poll().getMinimum());
1:72790dc:         Assert.assertEquals(4L, (long) builder.ranges.poll().getMinimum());
1:72790dc:         Assert.assertEquals(6L, (long) builder.ranges.poll().getMinimum());
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 6L, 8L, 9L }));
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(6L), convert(builder.build()));
1:72790dc: 
1:72790dc:         builder = RangeIntersectionIterator.builder(strategy);
1:72790dc:         builder.add(new LongIterator(new long[]{ 1L, 5L, 6L }));
1:72790dc:         builder.add(new LongIterator(new long[]{ 3L, 5L, 6L }));
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> tokens = builder.build();
1:72790dc: 
1:72790dc:         Assert.assertEquals(convert(5L, 6L), convert(tokens));
1:72790dc: 
1:72790dc:         FileUtils.closeQuietly(tokens);
1:72790dc: 
1:72790dc:         RangeIterator emptyTokens = RangeIntersectionIterator.builder(strategy).build();
1:72790dc:         Assert.assertNull(emptyTokens);
1:72790dc: 
1:72790dc:         builder = RangeIntersectionIterator.builder(strategy);
1:72790dc:         Assert.assertEquals(0L, builder.add((RangeIterator<Long, Token>) null).rangeCount());
1:72790dc:         Assert.assertEquals(0L, builder.add((List<RangeIterator<Long, Token>>) null).getTokenCount());
1:72790dc:         Assert.assertEquals(0L, builder.add(new LongIterator(new long[] {})).rangeCount());
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> single = new LongIterator(new long[] { 1L, 2L, 3L });
1:72790dc:         RangeIterator<Long, Token> range = RangeIntersectionIterator.<Long, Token>builder().add(single).build();
1:72790dc: 
1:72790dc:         // because build should return first element if it's only one instead of building yet another iterator
1:72790dc:         Assert.assertEquals(range, single);
1:72790dc: 
1:72790dc:         // disjoint case
1:72790dc:         builder = RangeIntersectionIterator.builder();
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:72790dc: 
1:72790dc:         Assert.assertTrue(builder.statistics.isDisjoint());
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> disjointIntersection = builder.build();
1:72790dc:         Assert.assertNotNull(disjointIntersection);
1:72790dc:         Assert.assertFalse(disjointIntersection.hasNext());
1:72790dc: 
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testClose() throws IOException
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testClose(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testClose(Strategy strategy) throws IOException
1:72790dc:     {
1:72790dc:         RangeIterator<Long, Token> tokens = RangeIntersectionIterator.<Long, Token>builder(strategy)
1:72790dc:                                             .add(new LongIterator(new long[] { 1L, 2L, 3L }))
1:72790dc:                                             .build();
1:72790dc: 
1:72790dc:         Assert.assertNotNull(tokens);
1:72790dc:         tokens.close();
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testIsOverlapping()
1:72790dc:     {
1:72790dc:         RangeIterator<Long, Token> rangeA, rangeB;
1:72790dc: 
1:72790dc:         rangeA = new LongIterator(new long[] { 1L, 5L });
1:72790dc:         rangeB = new LongIterator(new long[] { 5L, 9L });
1:72790dc:         Assert.assertTrue(RangeIterator.isOverlapping(rangeA, rangeB));
1:72790dc: 
1:72790dc:         rangeA = new LongIterator(new long[] { 5L, 9L });
1:72790dc:         rangeB = new LongIterator(new long[] { 1L, 6L });
1:72790dc:         Assert.assertTrue(RangeIterator.isOverlapping(rangeA, rangeB));
1:72790dc: 
1:72790dc:         rangeA = new LongIterator(new long[] { 5L, 9L });
1:72790dc:         rangeB = new LongIterator(new long[] { 5L, 9L });
1:72790dc:         Assert.assertTrue(RangeIterator.isOverlapping(rangeA, rangeB));
1:72790dc: 
1:72790dc:         rangeA = new LongIterator(new long[] { 1L, 4L });
1:72790dc:         rangeB = new LongIterator(new long[] { 5L, 9L });
1:72790dc:         Assert.assertFalse(RangeIterator.isOverlapping(rangeA, rangeB));
1:72790dc: 
1:72790dc:         rangeA = new LongIterator(new long[] { 6L, 9L });
1:72790dc:         rangeB = new LongIterator(new long[] { 1L, 4L });
1:72790dc:         Assert.assertFalse(RangeIterator.isOverlapping(rangeA, rangeB));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testIntersectionOfRandomRanges()
1:72790dc:     {
1:72790dc:         for (Strategy strategy : Strategy.values())
1:72790dc:             testIntersectionOfRandomRanges(strategy);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private void testIntersectionOfRandomRanges(Strategy strategy)
1:72790dc:     {
1:72790dc:         for (int attempt = 0; attempt < 16; attempt++)
1:72790dc:         {
1:72790dc:             final ThreadLocalRandom random = ThreadLocalRandom.current();
1:72790dc:             final int maxRanges = random.nextInt(2, 16);
1:72790dc: 
1:72790dc:             // generate randomize ranges
1:72790dc:             long[][] ranges = new long[maxRanges][];
1:72790dc:             for (int i = 0; i < ranges.length; i++)
1:72790dc:             {
1:72790dc:                 int rangeSize = random.nextInt(16, 512);
1:72790dc:                 LongSet range = new LongOpenHashSet(rangeSize);
1:72790dc: 
1:72790dc:                 for (int j = 0; j < rangeSize; j++)
1:72790dc:                     range.add(random.nextLong(0, 100));
1:72790dc: 
1:72790dc:                 ranges[i] = range.toArray();
1:72790dc:                 Arrays.sort(ranges[i]);
1:72790dc:             }
1:72790dc: 
1:72790dc:             List<Long> expected = new ArrayList<>();
1:72790dc:             // determine unique tokens which intersect every range
1:72790dc:             for (long token : ranges[0])
1:72790dc:             {
1:72790dc:                 boolean intersectsAll = true;
1:72790dc:                 for (int i = 1; i < ranges.length; i++)
1:72790dc:                 {
1:72790dc:                     if (Arrays.binarySearch(ranges[i], token) < 0)
1:72790dc:                     {
1:72790dc:                         intersectsAll = false;
1:72790dc:                         break;
1:72790dc:                     }
1:72790dc:                 }
1:72790dc: 
1:72790dc:                 if (intersectsAll)
1:72790dc:                     expected.add(token);
1:72790dc:             }
1:72790dc: 
1:72790dc:             RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:72790dc:             for (long[] range : ranges)
1:72790dc:                 builder.add(new LongIterator(range));
1:72790dc: 
1:72790dc:             Assert.assertEquals(expected, convert(builder.build()));
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Test
1:72790dc:     public void testIteratorPeeking()
1:72790dc:     {
1:72790dc:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder();
1:72790dc: 
1:72790dc:         // iterator with only one element
1:72790dc:         builder.add(new LongIterator(new long[] { 10L }));
1:72790dc: 
1:72790dc:         // iterator with 150 elements (lookup is going to be advantageous over bound in this case)
1:72790dc:         long[] tokens = new long[150];
1:72790dc:         for (int i = 0; i < tokens.length; i++)
1:72790dc:             tokens[i] = i;
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(tokens));
1:72790dc: 
1:72790dc:         RangeIterator<Long, Token> intersection = builder.build();
1:72790dc: 
1:72790dc:         Assert.assertNotNull(intersection);
1:72790dc:         Assert.assertEquals(LookupIntersectionIterator.class, intersection.getClass());
1:72790dc: 
1:72790dc:         Assert.assertTrue(intersection.hasNext());
1:72790dc:         Assert.assertEquals(convert(10L), convert(intersection));
1:72790dc: 
1:72790dc:         builder = RangeIntersectionIterator.builder();
1:72790dc: 
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 3L, 5L, 7L, 9L }));
1:72790dc:         builder.add(new LongIterator(new long[] { 1L, 2L, 5L, 6L }));
1:72790dc: 
1:72790dc:         intersection = builder.build();
1:72790dc: 
1:72790dc:         // in the situation when there is a similar number of elements inside ranges
1:72790dc:         // ping-pong (bounce) intersection is preferred as it covers gaps quicker then linear scan + lookup.
1:72790dc:         Assert.assertNotNull(intersection);
1:72790dc:         Assert.assertEquals(BounceIntersectionIterator.class, intersection.getClass());
1:72790dc: 
1:72790dc:         Assert.assertTrue(intersection.hasNext());
1:72790dc:         Assert.assertEquals(convert(1L, 5L), convert(intersection));
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.io.IOException;
1: import java.util.*;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator.Strategy;
1: import org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator.LookupIntersectionIterator;
1: import org.apache.cassandra.index.sasi.utils.RangeIntersectionIterator.BounceIntersectionIterator;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: import com.carrotsearch.hppc.LongOpenHashSet;
1: import com.carrotsearch.hppc.LongSet;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import static org.apache.cassandra.index.sasi.utils.LongIterator.convert;
1: 
1: public class RangeIntersectionIteratorTest
1: {
1:     @Test
1:     public void testNoOverlappingValues()
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testNoOverlappingValues(strategy);
1:     }
1: 
1:     private void testNoOverlappingValues(Strategy strategy)
1:     {
1:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1: 
1:         builder.add(new LongIterator(new long[] { 2L, 3L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 1L, 7L }));
1:         builder.add(new LongIterator(new long[] { 4L, 8L, 9L, 10L }));
1: 
1:         Assert.assertEquals(convert(), convert(builder.build()));
1: 
1:         builder = RangeIntersectionIterator.builder(strategy);
1:         // both ranges overlap by min/max but not by value
1:         builder.add(new LongIterator(new long[] { 1L, 5L, 7L, 9L }));
1:         builder.add(new LongIterator(new long[] { 6L }));
1: 
1:         RangeIterator<Long, Token> range = builder.build();
1: 
1:         Assert.assertNotNull(range);
1:         Assert.assertFalse(range.hasNext());
1: 
1:         builder = RangeIntersectionIterator.builder(strategy);
1:         // both ranges overlap by min/max but not by value
1:         builder.add(new LongIterator(new long[] { 1L, 5L, 7L, 9L }));
1:         builder.add(new LongIterator(new long[] { 0L, 10L, 12L }));
1: 
1:         range = builder.build();
1: 
1:         Assert.assertNotNull(range);
1:         Assert.assertFalse(range.hasNext());
1:     }
1: 
1:     @Test
1:     public void testOverlappingValues()
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testOverlappingValues(strategy);
1:     }
1: 
1:     private void testOverlappingValues(Strategy strategy)
1:     {
1:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 4L, 6L, 7L }));
1:         builder.add(new LongIterator(new long[] { 2L, 4L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 4L, 6L, 8L, 9L, 10L }));
1: 
1:         Assert.assertEquals(convert(4L, 6L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testSingleIterator()
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testSingleIterator(strategy);
1:     }
1: 
1:     private void testSingleIterator(Strategy strategy)
1:     {
1:         RangeIntersectionIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 4L, 9L }));
1: 
1:         Assert.assertEquals(convert(1L, 2L, 4L, 9L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testSkipTo()
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testSkipTo(strategy);
1:     }
1: 
1:     private void testSkipTo(Strategy strategy)
1:     {
1:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 4L, 6L, 7L, 9L, 10L }));
1:         builder.add(new LongIterator(new long[] { 2L, 4L, 5L, 6L, 7L, 10L, 12L }));
1:         builder.add(new LongIterator(new long[] { 4L, 6L, 7L, 9L, 10L }));
1: 
1:         RangeIterator<Long, Token> range = builder.build();
1:         Assert.assertNotNull(range);
1: 
1:         // first let's skipTo something before range
1:         Assert.assertEquals(4L, (long) range.skipTo(3L).get());
1:         Assert.assertEquals(4L, (long) range.getCurrent());
1: 
1:         // now let's skip right to the send value
1:         Assert.assertEquals(6L, (long) range.skipTo(5L).get());
1:         Assert.assertEquals(6L, (long) range.getCurrent());
1: 
1:         // now right to the element
1:         Assert.assertEquals(7L, (long) range.skipTo(7L).get());
1:         Assert.assertEquals(7L, (long) range.getCurrent());
1:         Assert.assertEquals(7L, (long) range.next().get());
1: 
1:         Assert.assertTrue(range.hasNext());
1:         Assert.assertEquals(10L, (long) range.getCurrent());
1: 
1:         // now right after the last element
1:         Assert.assertNull(range.skipTo(11L));
1:         Assert.assertFalse(range.hasNext());
1:     }
1: 
1:     @Test
1:     public void testMinMaxAndCount()
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testMinMaxAndCount(strategy);
1:     }
1: 
1:     private void testMinMaxAndCount(Strategy strategy)
1:     {
1:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1: 
1:         builder.add(new LongIterator(new long[]{1L, 2L, 9L}));
1:         builder.add(new LongIterator(new long[]{4L, 5L, 9L}));
1:         builder.add(new LongIterator(new long[]{7L, 8L, 9L}));
1: 
1:         Assert.assertEquals(9L, (long) builder.getMaximum());
1:         Assert.assertEquals(9L, builder.getTokenCount());
1: 
1:         RangeIterator<Long, Token> tokens = builder.build();
1: 
1:         Assert.assertNotNull(tokens);
1:         Assert.assertEquals(7L, (long) tokens.getMinimum());
1:         Assert.assertEquals(9L, (long) tokens.getMaximum());
1:         Assert.assertEquals(9L, tokens.getCount());
1: 
1:         Assert.assertEquals(convert(9L), convert(builder.build()));
1:     }
1: 
1:     @Test
1:     public void testBuilder()
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testBuilder(strategy);
1:     }
1: 
1:     private void testBuilder(Strategy strategy)
1:     {
1:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1: 
1:         Assert.assertNull(builder.getMinimum());
1:         Assert.assertNull(builder.getMaximum());
1:         Assert.assertEquals(0L, builder.getTokenCount());
1:         Assert.assertEquals(0L, builder.rangeCount());
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 6L }));
1:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 6L, 8L, 9L }));
1: 
1:         Assert.assertEquals(6L, (long) builder.getMinimum());
1:         Assert.assertEquals(6L, (long) builder.getMaximum());
1:         Assert.assertEquals(9L, builder.getTokenCount());
1:         Assert.assertEquals(3L, builder.rangeCount());
1:         Assert.assertFalse(builder.statistics.isDisjoint());
1: 
1:         Assert.assertEquals(1L, (long) builder.ranges.poll().getMinimum());
1:         Assert.assertEquals(4L, (long) builder.ranges.poll().getMinimum());
1:         Assert.assertEquals(6L, (long) builder.ranges.poll().getMinimum());
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 6L }));
1:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[] { 6L, 8L, 9L }));
1: 
1:         Assert.assertEquals(convert(6L), convert(builder.build()));
1: 
1:         builder = RangeIntersectionIterator.builder(strategy);
1:         builder.add(new LongIterator(new long[]{ 1L, 5L, 6L }));
1:         builder.add(new LongIterator(new long[]{ 3L, 5L, 6L }));
1: 
1:         RangeIterator<Long, Token> tokens = builder.build();
1: 
1:         Assert.assertEquals(convert(5L, 6L), convert(tokens));
1: 
1:         FileUtils.closeQuietly(tokens);
1: 
1:         RangeIterator emptyTokens = RangeIntersectionIterator.builder(strategy).build();
1:         Assert.assertNull(emptyTokens);
1: 
1:         builder = RangeIntersectionIterator.builder(strategy);
1:         Assert.assertEquals(0L, builder.add((RangeIterator<Long, Token>) null).rangeCount());
1:         Assert.assertEquals(0L, builder.add((List<RangeIterator<Long, Token>>) null).getTokenCount());
1:         Assert.assertEquals(0L, builder.add(new LongIterator(new long[] {})).rangeCount());
1: 
1:         RangeIterator<Long, Token> single = new LongIterator(new long[] { 1L, 2L, 3L });
1:         RangeIterator<Long, Token> range = RangeIntersectionIterator.<Long, Token>builder().add(single).build();
1: 
1:         // because build should return first element if it's only one instead of building yet another iterator
1:         Assert.assertEquals(range, single);
1: 
1:         // disjoint case
1:         builder = RangeIntersectionIterator.builder();
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 3L }));
1:         builder.add(new LongIterator(new long[] { 4L, 5L, 6L }));
1: 
1:         Assert.assertTrue(builder.statistics.isDisjoint());
1: 
1:         RangeIterator<Long, Token> disjointIntersection = builder.build();
1:         Assert.assertNotNull(disjointIntersection);
1:         Assert.assertFalse(disjointIntersection.hasNext());
1: 
1:     }
1: 
1:     @Test
1:     public void testClose() throws IOException
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testClose(strategy);
1:     }
1: 
1:     private void testClose(Strategy strategy) throws IOException
1:     {
1:         RangeIterator<Long, Token> tokens = RangeIntersectionIterator.<Long, Token>builder(strategy)
1:                                             .add(new LongIterator(new long[] { 1L, 2L, 3L }))
1:                                             .build();
1: 
1:         Assert.assertNotNull(tokens);
1:         tokens.close();
1:     }
1: 
1:     @Test
1:     public void testIsOverlapping()
1:     {
1:         RangeIterator<Long, Token> rangeA, rangeB;
1: 
1:         rangeA = new LongIterator(new long[] { 1L, 5L });
1:         rangeB = new LongIterator(new long[] { 5L, 9L });
1:         Assert.assertTrue(RangeIterator.isOverlapping(rangeA, rangeB));
1: 
1:         rangeA = new LongIterator(new long[] { 5L, 9L });
1:         rangeB = new LongIterator(new long[] { 1L, 6L });
1:         Assert.assertTrue(RangeIterator.isOverlapping(rangeA, rangeB));
1: 
1:         rangeA = new LongIterator(new long[] { 5L, 9L });
1:         rangeB = new LongIterator(new long[] { 5L, 9L });
1:         Assert.assertTrue(RangeIterator.isOverlapping(rangeA, rangeB));
1: 
1:         rangeA = new LongIterator(new long[] { 1L, 4L });
1:         rangeB = new LongIterator(new long[] { 5L, 9L });
1:         Assert.assertFalse(RangeIterator.isOverlapping(rangeA, rangeB));
1: 
1:         rangeA = new LongIterator(new long[] { 6L, 9L });
1:         rangeB = new LongIterator(new long[] { 1L, 4L });
1:         Assert.assertFalse(RangeIterator.isOverlapping(rangeA, rangeB));
1:     }
1: 
1:     @Test
1:     public void testIntersectionOfRandomRanges()
1:     {
1:         for (Strategy strategy : Strategy.values())
1:             testIntersectionOfRandomRanges(strategy);
1:     }
1: 
1:     private void testIntersectionOfRandomRanges(Strategy strategy)
1:     {
1:         for (int attempt = 0; attempt < 16; attempt++)
1:         {
1:             final ThreadLocalRandom random = ThreadLocalRandom.current();
1:             final int maxRanges = random.nextInt(2, 16);
1: 
1:             // generate randomize ranges
1:             long[][] ranges = new long[maxRanges][];
1:             for (int i = 0; i < ranges.length; i++)
1:             {
1:                 int rangeSize = random.nextInt(16, 512);
1:                 LongSet range = new LongOpenHashSet(rangeSize);
1: 
1:                 for (int j = 0; j < rangeSize; j++)
1:                     range.add(random.nextLong(0, 100));
1: 
1:                 ranges[i] = range.toArray();
1:                 Arrays.sort(ranges[i]);
1:             }
1: 
1:             List<Long> expected = new ArrayList<>();
1:             // determine unique tokens which intersect every range
1:             for (long token : ranges[0])
1:             {
1:                 boolean intersectsAll = true;
1:                 for (int i = 1; i < ranges.length; i++)
1:                 {
1:                     if (Arrays.binarySearch(ranges[i], token) < 0)
1:                     {
1:                         intersectsAll = false;
1:                         break;
1:                     }
1:                 }
1: 
1:                 if (intersectsAll)
1:                     expected.add(token);
1:             }
1: 
1:             RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder(strategy);
1:             for (long[] range : ranges)
1:                 builder.add(new LongIterator(range));
1: 
1:             Assert.assertEquals(expected, convert(builder.build()));
1:         }
1:     }
1: 
1:     @Test
1:     public void testIteratorPeeking()
1:     {
1:         RangeIterator.Builder<Long, Token> builder = RangeIntersectionIterator.builder();
1: 
1:         // iterator with only one element
1:         builder.add(new LongIterator(new long[] { 10L }));
1: 
1:         // iterator with 150 elements (lookup is going to be advantageous over bound in this case)
1:         long[] tokens = new long[150];
1:         for (int i = 0; i < tokens.length; i++)
1:             tokens[i] = i;
1: 
1:         builder.add(new LongIterator(tokens));
1: 
1:         RangeIterator<Long, Token> intersection = builder.build();
1: 
1:         Assert.assertNotNull(intersection);
1:         Assert.assertEquals(LookupIntersectionIterator.class, intersection.getClass());
1: 
1:         Assert.assertTrue(intersection.hasNext());
1:         Assert.assertEquals(convert(10L), convert(intersection));
1: 
1:         builder = RangeIntersectionIterator.builder();
1: 
1:         builder.add(new LongIterator(new long[] { 1L, 3L, 5L, 7L, 9L }));
1:         builder.add(new LongIterator(new long[] { 1L, 2L, 5L, 6L }));
1: 
1:         intersection = builder.build();
1: 
1:         // in the situation when there is a similar number of elements inside ranges
1:         // ping-pong (bounce) intersection is preferred as it covers gaps quicker then linear scan + lookup.
1:         Assert.assertNotNull(intersection);
1:         Assert.assertEquals(BounceIntersectionIterator.class, intersection.getClass());
1: 
1:         Assert.assertTrue(intersection.hasNext());
1:         Assert.assertEquals(convert(1L, 5L), convert(intersection));
1:     }
1: }
============================================================================