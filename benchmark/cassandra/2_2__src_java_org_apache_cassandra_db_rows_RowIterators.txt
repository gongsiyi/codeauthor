1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
14:a991b64: 
1:a991b64: import java.security.MessageDigest;
1:a991b64: 
1:a991b64: import org.slf4j.Logger;
1:a991b64: import org.slf4j.LoggerFactory;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:fd74a03: import org.apache.cassandra.db.filter.ColumnFilter;
1:6094974: import org.apache.cassandra.db.transform.Transformation;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Static methods to work with row iterators.
1:a991b64:  */
1:a991b64: public abstract class RowIterators
13:a991b64: {
1:a991b64:     private static final Logger logger = LoggerFactory.getLogger(RowIterators.class);
1:a991b64: 
1:a991b64:     private RowIterators() {}
1:a991b64: 
1:a991b64:     public static void digest(RowIterator iterator, MessageDigest digest)
1:a991b64:     {
1:4f14bc5:         // TODO: we're not computing digest the same way that old nodes. This is
1:4f14bc5:         // currently ok as this is only used for schema digest and the is no exchange
1:4f14bc5:         // of schema digest between different versions. If this changes however,
1:4f14bc5:         // we'll need to agree on a version.
1:a991b64:         digest.update(iterator.partitionKey().getKey().duplicate());
1:4f14bc5:         iterator.columns().regulars.digest(digest);
1:4f14bc5:         iterator.columns().statics.digest(digest);
1:a991b64:         FBUtilities.updateWithBoolean(digest, iterator.isReverseOrder());
1:a991b64:         iterator.staticRow().digest(digest);
1:a991b64: 
2:a991b64:         while (iterator.hasNext())
1:a991b64:             iterator.next().digest(digest);
11:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:fd74a03:      * Filter the provided iterator to only include cells that are selected by the user.
1:fd74a03:      *
1:fd74a03:      * @param iterator the iterator to filter.
1:fd74a03:      * @param filter the {@code ColumnFilter} to use when deciding which cells are queried by the user. This should be the filter
1:fd74a03:      * that was used when querying {@code iterator}.
1:fd74a03:      * @return the filtered iterator..
1:fd74a03:      */
1:fd74a03:     public static RowIterator withOnlyQueriedData(RowIterator iterator, ColumnFilter filter)
1:fd74a03:     {
1:fd74a03:         if (filter.allFetchedColumnsAreQueried())
1:fd74a03:             return iterator;
1:fd74a03: 
1:fd74a03:         return Transformation.apply(iterator, new WithOnlyQueriedData(filter));
1:fd74a03:     }
1:fd74a03: 
1:fd74a03:     /**
1:a991b64:      * Wraps the provided iterator so it logs the returned rows for debugging purposes.
1:a991b64:      * <p>
1:a991b64:      * Note that this is only meant for debugging as this can log a very large amount of
1:a991b64:      * logging at INFO.
1:a991b64:      */
1:a991b64:     public static RowIterator loggingIterator(RowIterator iterator, final String id)
1:a991b64:     {
1:a991b64:         CFMetaData metadata = iterator.metadata();
1:a991b64:         logger.info("[{}] Logging iterator on {}.{}, partition key={}, reversed={}",
1:2457599:                     id,
1:2457599:                     metadata.ksName,
1:2457599:                     metadata.cfName,
1:2457599:                     metadata.getKeyValidator().getString(iterator.partitionKey().getKey()),
1:2457599:                     iterator.isReverseOrder());
1:a991b64: 
1:6094974:         class Log extends Transformation
1:a991b64:         {
1:a991b64:             @Override
1:6094974:             public Row applyToStatic(Row row)
1:a991b64:             {
1:a991b64:                 if (!row.isEmpty())
1:6094974:                     logger.info("[{}] {}", id, row.toString(metadata));
1:a991b64:                 return row;
1:a991b64:             }
1:a991b64: 
1:a991b64:             @Override
1:6094974:             public Row applyToRow(Row row)
1:a991b64:             {
1:6094974:                 logger.info("[{}] {}", id, row.toString(metadata));
1:6094974:                 return row;
1:a991b64:             }
1:a991b64:         }
1:6094974:         return Transformation.apply(iterator, new Log());
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3dceaab
commit:4f14bc5
/////////////////////////////////////////////////////////////////////////
1:         // TODO: we're not computing digest the same way that old nodes. This is
1:         // currently ok as this is only used for schema digest and the is no exchange
1:         // of schema digest between different versions. If this changes however,
1:         // we'll need to agree on a version.
1:         iterator.columns().regulars.digest(digest);
1:         iterator.columns().statics.digest(digest);
commit:fd74a03
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.filter.ColumnFilter;
/////////////////////////////////////////////////////////////////////////
1:      * Filter the provided iterator to only include cells that are selected by the user.
1:      *
1:      * @param iterator the iterator to filter.
1:      * @param filter the {@code ColumnFilter} to use when deciding which cells are queried by the user. This should be the filter
1:      * that was used when querying {@code iterator}.
1:      * @return the filtered iterator..
1:      */
1:     public static RowIterator withOnlyQueriedData(RowIterator iterator, ColumnFilter filter)
1:     {
1:         if (filter.allFetchedColumnsAreQueried())
1:             return iterator;
1: 
1:         return Transformation.apply(iterator, new WithOnlyQueriedData(filter));
1:     }
1: 
1:     /**
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     id,
1:                     metadata.ksName,
1:                     metadata.cfName,
1:                     metadata.getKeyValidator().getString(iterator.partitionKey().getKey()),
1:                     iterator.isReverseOrder());
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import java.util.*;
1: import java.security.MessageDigest;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * Static methods to work with row iterators.
1:  */
1: public abstract class RowIterators
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(RowIterators.class);
1: 
1:     private RowIterators() {}
1: 
0:     public static PartitionUpdate toUpdate(RowIterator iterator)
1:     {
0:         PartitionUpdate update = new PartitionUpdate(iterator.metadata(), iterator.partitionKey(), iterator.columns(), 1);
1: 
0:         if (iterator.staticRow() != Rows.EMPTY_STATIC_ROW)
0:             iterator.staticRow().copyTo(update.staticWriter());
1: 
1:         while (iterator.hasNext())
0:             iterator.next().copyTo(update.writer());
1: 
0:         return update;
1:     }
1: 
1:     public static void digest(RowIterator iterator, MessageDigest digest)
1:     {
0:         // TODO: we're not computing digest the same way that old nodes so we'll need
0:         // to pass the version we're computing the digest for and deal with that.
1:         digest.update(iterator.partitionKey().getKey().duplicate());
0:         iterator.columns().digest(digest);
1:         FBUtilities.updateWithBoolean(digest, iterator.isReverseOrder());
1:         iterator.staticRow().digest(digest);
1: 
1:         while (iterator.hasNext())
1:             iterator.next().digest(digest);
1:     }
1: 
0:     public static RowIterator emptyIterator(final CFMetaData cfm, final DecoratedKey partitionKey, final boolean isReverseOrder)
1:     {
0:         return new RowIterator()
1:         {
0:             public CFMetaData metadata()
1:             {
0:                 return cfm;
1:             }
1: 
0:             public boolean isReverseOrder()
1:             {
0:                 return isReverseOrder;
1:             }
1: 
0:             public PartitionColumns columns()
1:             {
0:                 return PartitionColumns.NONE;
1:             }
1: 
0:             public DecoratedKey partitionKey()
1:             {
0:                 return partitionKey;
1:             }
1: 
0:             public Row staticRow()
1:             {
0:                 return Rows.EMPTY_STATIC_ROW;
1:             }
1: 
0:             public boolean hasNext()
1:             {
0:                 return false;
1:             }
1: 
0:             public Row next()
1:             {
0:                 throw new NoSuchElementException();
1:             }
1: 
0:             public void remove()
1:             {
0:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             public void close()
1:             {
1:             }
0:         };
1:     }
1: 
1:     /**
1:      * Wraps the provided iterator so it logs the returned rows for debugging purposes.
1:      * <p>
1:      * Note that this is only meant for debugging as this can log a very large amount of
1:      * logging at INFO.
1:      */
1:     public static RowIterator loggingIterator(RowIterator iterator, final String id)
1:     {
1:         CFMetaData metadata = iterator.metadata();
1:         logger.info("[{}] Logging iterator on {}.{}, partition key={}, reversed={}",
0:                     new Object[]{ id,
0:                                   metadata.ksName,
0:                                   metadata.cfName,
0:                                   metadata.getKeyValidator().getString(iterator.partitionKey().getKey()),
0:                                   iterator.isReverseOrder() });
1: 
0:         return new WrappingRowIterator(iterator)
1:         {
1:             @Override
0:             public Row staticRow()
1:             {
0:                 Row row = super.staticRow();
1:                 if (!row.isEmpty())
0:                     logger.info("[{}] {}", id, row.toString(metadata()));
1:                 return row;
1:             }
1: 
1:             @Override
0:             public Row next()
1:             {
0:                 Row next = super.next();
0:                 logger.info("[{}] {}", id, next.toString(metadata()));
0:                 return next;
1:             }
0:         };
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.transform.Transformation;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         class Log extends Transformation
1:             public Row applyToStatic(Row row)
1:                     logger.info("[{}] {}", id, row.toString(metadata));
1:             public Row applyToRow(Row row)
1:                 logger.info("[{}] {}", id, row.toString(metadata));
1:                 return row;
0:         }
1:         return Transformation.apply(iterator, new Log());
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
0:     public static RowIterator emptyIterator(CFMetaData cfm, DecoratedKey partitionKey, boolean isReverseOrder)
0:     {
0:         return iterator(cfm, partitionKey, isReverseOrder, Collections.emptyIterator());
0:     }
0: 
0:     public static RowIterator iterator(CFMetaData cfm, DecoratedKey partitionKey, boolean isReverseOrder, Iterator<Row> iterator)
/////////////////////////////////////////////////////////////////////////
0:             public void close() { }
0: 
0:                 return iterator.hasNext();
0:                 return iterator.next();
============================================================================