1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer;
1:72790dc: 
1:72790dc: import java.io.IOException;
1:72790dc: import java.io.Reader;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Internal interface for supporting versioned grammars.
1:72790dc:  */
1:72790dc: public interface StandardTokenizerInterface
1:72790dc: {
1:72790dc: 
1:72790dc:     String getText();
1:72790dc: 
1:72790dc:     char[] getArray();
1:72790dc: 
1:72790dc:     byte[] getBytes();
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Returns the current position.
1:72790dc:      */
1:72790dc:     int yychar();
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Returns the length of the matched text region.
1:72790dc:      */
1:72790dc:     int yylength();
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Resumes scanning until the next regular expression is matched,
1:72790dc:      * the end of input is encountered or an I/O-Error occurs.
1:72790dc:      *
1:72790dc:      * @return      the next token, {@link #YYEOF} on end of stream
1:72790dc:      * @exception   java.io.IOException  if any I/O-Error occurs
1:72790dc:      */
1:72790dc:     int getNextToken() throws IOException;
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Resets the scanner to read from a new input stream.
1:72790dc:      * Does not close the old reader.
1:72790dc:      *
1:72790dc:      * All internal variables are reset, the old input stream
1:72790dc:      * <b>cannot</b> be reused (internal buffer is discarded and lost).
1:72790dc:      * Lexical state is set to <tt>ZZ_INITIAL</tt>.
1:72790dc:      *
1:72790dc:      * @param reader   the new input stream
1:72790dc:      */
1:72790dc:     void yyreset(Reader reader);
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer;
1: 
1: import java.io.IOException;
1: import java.io.Reader;
1: 
1: /**
1:  * Internal interface for supporting versioned grammars.
1:  */
1: public interface StandardTokenizerInterface
1: {
1: 
1:     String getText();
1: 
1:     char[] getArray();
1: 
1:     byte[] getBytes();
1: 
1:     /**
1:      * Returns the current position.
1:      */
1:     int yychar();
1: 
1:     /**
1:      * Returns the length of the matched text region.
1:      */
1:     int yylength();
1: 
1:     /**
1:      * Resumes scanning until the next regular expression is matched,
1:      * the end of input is encountered or an I/O-Error occurs.
1:      *
1:      * @return      the next token, {@link #YYEOF} on end of stream
1:      * @exception   java.io.IOException  if any I/O-Error occurs
1:      */
1:     int getNextToken() throws IOException;
1: 
1:     /**
1:      * Resets the scanner to read from a new input stream.
1:      * Does not close the old reader.
1:      *
1:      * All internal variables are reset, the old input stream
1:      * <b>cannot</b> be reused (internal buffer is discarded and lost).
1:      * Lexical state is set to <tt>ZZ_INITIAL</tt>.
1:      *
1:      * @param reader   the new input stream
1:      */
1:     void yyreset(Reader reader);
1: }
============================================================================