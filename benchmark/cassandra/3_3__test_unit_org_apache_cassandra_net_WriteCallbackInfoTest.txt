1:40f4daa: /*
1:40f4daa: * Licensed to the Apache Software Foundation (ASF) under one
1:40f4daa: * or more contributor license agreements.  See the NOTICE file
1:40f4daa: * distributed with this work for additional information
1:40f4daa: * regarding copyright ownership.  The ASF licenses this file
1:40f4daa: * to you under the Apache License, Version 2.0 (the
1:40f4daa: * "License"); you may not use this file except in compliance
1:40f4daa: * with the License.  You may obtain a copy of the License at
1:40f4daa: *
1:40f4daa: *    http://www.apache.org/licenses/LICENSE-2.0
1:40f4daa: *
1:40f4daa: * Unless required by applicable law or agreed to in writing,
1:40f4daa: * software distributed under the License is distributed on an
1:40f4daa: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:40f4daa: * KIND, either express or implied.  See the License for the
1:40f4daa: * specific language governing permissions and limitations
1:40f4daa: * under the License.
1:40f4daa: */
1:40f4daa: package org.apache.cassandra.net;
1:40f4daa: 
1:40f4daa: import java.net.InetAddress;
1:40f4daa: import java.util.UUID;
1:40f4daa: 
1:9797511: import org.junit.BeforeClass;
1:40f4daa: import org.junit.Test;
1:40f4daa: 
1:40f4daa: import junit.framework.Assert;
1:40f4daa: import org.apache.cassandra.MockSchema;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:40f4daa: import org.apache.cassandra.db.BufferDecoratedKey;
1:40f4daa: import org.apache.cassandra.db.ConsistencyLevel;
1:40f4daa: import org.apache.cassandra.db.Mutation;
1:40f4daa: import org.apache.cassandra.db.PartitionColumns;
1:40f4daa: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:40f4daa: import org.apache.cassandra.dht.Murmur3Partitioner;
1:40f4daa: import org.apache.cassandra.net.MessagingService.Verb;
1:40f4daa: import org.apache.cassandra.service.paxos.Commit;
1:40f4daa: import org.apache.cassandra.utils.ByteBufferUtil;
1:40f4daa: 
1:40f4daa: public class WriteCallbackInfoTest
1:40f4daa: {
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:40f4daa: 
1:40f4daa:     @Test
1:0693db7:     public void testShouldHint() throws Exception
1:40f4daa:     {
1:40f4daa:         testShouldHint(Verb.COUNTER_MUTATION, ConsistencyLevel.ALL, true, false);
1:40f4daa:         for (Verb verb : new Verb[] { Verb.PAXOS_COMMIT, Verb.MUTATION })
1:40f4daa:         {
1:40f4daa:             testShouldHint(verb, ConsistencyLevel.ALL, true, true);
1:40f4daa:             testShouldHint(verb, ConsistencyLevel.ANY, true, false);
1:40f4daa:             testShouldHint(verb, ConsistencyLevel.ALL, false, false);
1:40f4daa:         }
1:40f4daa:     }
1:40f4daa: 
1:0693db7:     private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) throws Exception
1:40f4daa:     {
1:40f4daa:         Object payload = verb == Verb.PAXOS_COMMIT
1:40f4daa:                          ? new Commit(UUID.randomUUID(), new PartitionUpdate(MockSchema.newCFMetaData("", ""), ByteBufferUtil.EMPTY_BYTE_BUFFER, PartitionColumns.NONE, 1))
1:40f4daa:                          : new Mutation("", new BufferDecoratedKey(new Murmur3Partitioner.LongToken(0), ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:40f4daa: 
1:0693db7:         WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getByName("192.168.1.1"), null, new MessageOut(verb, payload, null), null, cl, allowHints);
1:40f4daa:         Assert.assertEquals(expectHint, wcbi.shouldHint());
1:40f4daa:         if (expectHint)
1:40f4daa:         {
1:40f4daa:             Assert.assertNotNull(wcbi.mutation());
1:40f4daa:         }
1:40f4daa:         else
1:40f4daa:         {
1:40f4daa:             boolean fail = false;
1:40f4daa:             try
1:40f4daa:             {
1:40f4daa:                 wcbi.mutation();
1:40f4daa:             }
1:40f4daa:             catch (Throwable t)
1:40f4daa:             {
1:40f4daa:                 fail = true;
1:40f4daa:             }
1:40f4daa:             Assert.assertTrue(fail);
1:40f4daa:         }
1:40f4daa:     }
1:40f4daa: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:0693db7
/////////////////////////////////////////////////////////////////////////
1:     public void testShouldHint() throws Exception
/////////////////////////////////////////////////////////////////////////
1:     private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) throws Exception
1:         WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getByName("192.168.1.1"), null, new MessageOut(verb, payload, null), null, cl, allowHints);
commit:9803d66
/////////////////////////////////////////////////////////////////////////
0:     public void testShouldHint() throws Exception
/////////////////////////////////////////////////////////////////////////
0:     private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) throws Exception
0:         WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getByName("192.168.1.1"), null, new MessageOut(verb, payload, null), null, cl, allowHints);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:40f4daa
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.net;
1: 
1: import java.net.InetAddress;
1: import java.util.UUID;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.MockSchema;
1: import org.apache.cassandra.db.BufferDecoratedKey;
1: import org.apache.cassandra.db.ConsistencyLevel;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.PartitionColumns;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.dht.Murmur3Partitioner;
1: import org.apache.cassandra.net.MessagingService.Verb;
1: import org.apache.cassandra.service.paxos.Commit;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class WriteCallbackInfoTest
1: {
1: 
1:     @Test
0:     public void testShouldHint()
1:     {
1:         testShouldHint(Verb.COUNTER_MUTATION, ConsistencyLevel.ALL, true, false);
1:         for (Verb verb : new Verb[] { Verb.PAXOS_COMMIT, Verb.MUTATION })
1:         {
1:             testShouldHint(verb, ConsistencyLevel.ALL, true, true);
1:             testShouldHint(verb, ConsistencyLevel.ANY, true, false);
1:             testShouldHint(verb, ConsistencyLevel.ALL, false, false);
1:         }
1:     }
1: 
0:     private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint)
1:     {
1:         Object payload = verb == Verb.PAXOS_COMMIT
1:                          ? new Commit(UUID.randomUUID(), new PartitionUpdate(MockSchema.newCFMetaData("", ""), ByteBufferUtil.EMPTY_BYTE_BUFFER, PartitionColumns.NONE, 1))
1:                          : new Mutation("", new BufferDecoratedKey(new Murmur3Partitioner.LongToken(0), ByteBufferUtil.EMPTY_BYTE_BUFFER));
1: 
0:         WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getLoopbackAddress(), null, new MessageOut(verb, payload, null), null, cl, allowHints);
1:         Assert.assertEquals(expectHint, wcbi.shouldHint());
1:         if (expectHint)
1:         {
1:             Assert.assertNotNull(wcbi.mutation());
1:         }
1:         else
1:         {
1:             boolean fail = false;
1:             try
1:             {
1:                 wcbi.mutation();
1:             }
1:             catch (Throwable t)
1:             {
1:                 fail = true;
1:             }
1:             Assert.assertTrue(fail);
1:         }
1:     }
1: }
============================================================================