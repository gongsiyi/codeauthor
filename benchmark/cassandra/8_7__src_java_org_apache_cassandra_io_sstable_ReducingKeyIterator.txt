1:763ada2: /*
1:763ada2:  * Licensed to the Apache Software Foundation (ASF) under one
1:763ada2:  * or more contributor license agreements.  See the NOTICE file
1:763ada2:  * distributed with this work for additional information
1:763ada2:  * regarding copyright ownership.  The ASF licenses this file
1:763ada2:  * to you under the Apache License, Version 2.0 (the
1:763ada2:  * "License"); you may not use this file except in compliance
1:763ada2:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:763ada2:  */
1:8e68f3b: package org.apache.cassandra.io.sstable;
1:8e68f3b: 
1:d8b1fc3: import java.util.ArrayList;
1:8e68f3b: import java.util.Collection;
1:177bf5f: import java.util.Iterator;
1:8e68f3b: 
1:8e68f3b: import org.apache.cassandra.db.DecoratedKey;
1:0368e97: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:d8b1fc3: import org.apache.cassandra.utils.CloseableIterator;
1:a4f75e2: import org.apache.cassandra.utils.IMergeIterator;
1:d8b1fc3: import org.apache.cassandra.utils.MergeIterator;
1:8e68f3b: 
1:bca27bd: /**
1:bca27bd:  * Caller must acquire and release references to the sstables used here.
1:bca27bd:  */
1:d8b1fc3: public class ReducingKeyIterator implements CloseableIterator<DecoratedKey>
2:8e68f3b: {
1:17dd4cc:     private final ArrayList<KeyIterator> iters;
1:17dd4cc:     private IMergeIterator<DecoratedKey,DecoratedKey> mi;
1:8e68f3b: 
1:8e68f3b:     public ReducingKeyIterator(Collection<SSTableReader> sstables)
1:8e68f3b:     {
1:17dd4cc:         iters = new ArrayList<>(sstables.size());
1:8e68f3b:         for (SSTableReader sstable : sstables)
1:0a08525:             iters.add(new KeyIterator(sstable.descriptor, sstable.metadata));
2:8e68f3b:     }
1:8e68f3b: 
1:17dd4cc:     private void maybeInit()
1:8e68f3b:     {
1:17dd4cc:         if (mi == null)
1:8e68f3b:         {
1:d8b1fc3:             mi = MergeIterator.get(iters, DecoratedKey.comparator, new MergeIterator.Reducer<DecoratedKey,DecoratedKey>()
1:8e68f3b:             {
1:7e4ef1c:                 DecoratedKey reduced = null;
1:8e68f3b: 
1:ea82722:                 @Override
1:2a585c0:                 public boolean trivialReduceIsTrivial()
1:2a585c0:                 {
1:2a585c0:                     return true;
1:2a585c0:                 }
1:2a585c0: 
1:a991b64:                 public void reduce(int idx, DecoratedKey current)
1:8e68f3b:                 {
1:8e68f3b:                     reduced = current;
1:8e68f3b:                 }
1:8e68f3b: 
1:7e4ef1c:                 protected DecoratedKey getReduced()
1:8e68f3b:                 {
1:8e68f3b:                     return reduced;
1:8e68f3b:                 }
1:d8b1fc3:             });
1:8e68f3b:         }
1:8e68f3b:     }
1:8e68f3b: 
1:6094974:     public void close()
1:8e68f3b:     {
1:17dd4cc:         if (mi != null)
1:177bf5f:             mi.close();
1:8e68f3b:     }
1:8e68f3b: 
1:8e68f3b:     public long getTotalBytes()
1:8e68f3b:     {
1:17dd4cc:         maybeInit();
1:8e68f3b: 
1:8e68f3b:         long m = 0;
1:177bf5f:         for (Iterator<DecoratedKey> iter : mi.iterators())
1:8e68f3b:         {
1:177bf5f:             m += ((KeyIterator) iter).getTotalBytes();
1:8e68f3b:         }
1:8e68f3b:         return m;
1:b182e5e:     }
1:b182e5e: 
1:8e68f3b:     public long getBytesRead()
1:b182e5e:     {
1:17dd4cc:         maybeInit();
1:8e68f3b: 
1:8e68f3b:         long m = 0;
1:177bf5f:         for (Iterator<DecoratedKey> iter : mi.iterators())
1:8e68f3b:         {
1:177bf5f:             m += ((KeyIterator) iter).getBytesRead();
1:8e68f3b:         }
1:8e68f3b:         return m;
1:8e68f3b:     }
1:8e68f3b: 
1:8e68f3b:     public boolean hasNext()
1:8e68f3b:     {
1:17dd4cc:         maybeInit();
1:d8b1fc3:         return mi.hasNext();
1:8e68f3b:     }
1:8e68f3b: 
1:7e4ef1c:     public DecoratedKey next()
1:8e68f3b:     {
1:17dd4cc:         maybeInit();
1:d8b1fc3:         return mi.next();
1:8e68f3b:     }
1:8e68f3b: 
1:8e68f3b:     public void remove()
1:8e68f3b:     {
1:8e68f3b:         throw new UnsupportedOperationException();
1:8e68f3b:     }
1:8e68f3b: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void close()
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:             iters.add(new KeyIterator(sstable.descriptor, sstable.metadata));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:             iters.add(new KeyIterator(sstable.descriptor));
commit:177bf5f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:         mi.close();
1:         for (Iterator<DecoratedKey> iter : mi.iterators())
1:             m += ((KeyIterator) iter).getTotalBytes();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<DecoratedKey> iter : mi.iterators())
1:             m += ((KeyIterator) iter).getBytesRead();
commit:5613f8f
commit:7e4ef1c
/////////////////////////////////////////////////////////////////////////
1:             DecoratedKey reduced = null;
/////////////////////////////////////////////////////////////////////////
1:             protected DecoratedKey getReduced()
/////////////////////////////////////////////////////////////////////////
1:     public DecoratedKey next()
commit:38ee718
/////////////////////////////////////////////////////////////////////////
0:         ArrayList<KeyIterator> iters = new ArrayList<KeyIterator>(sstables.size());
commit:bca27bd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Caller must acquire and release references to the sstables used here.
1:  */
commit:ea82722
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:2a585c0
/////////////////////////////////////////////////////////////////////////
1:             public boolean trivialReduceIsTrivial()
1:             {
1:                 return true;
1:             }
1: 
commit:a4f75e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.IMergeIterator;
0:     private final IMergeIterator<DecoratedKey,DecoratedKey> mi;
commit:a19f7f1
/////////////////////////////////////////////////////////////////////////
0:             DecoratedKey<?> reduced = null;
0:             protected DecoratedKey<?> getReduced()
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey<?> next()
commit:d8b1fc3
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import org.apache.cassandra.utils.CloseableIterator;
1: import org.apache.cassandra.utils.MergeIterator;
1: public class ReducingKeyIterator implements CloseableIterator<DecoratedKey>
0:     private final MergeIterator<DecoratedKey,DecoratedKey> mi;
0:         ArrayList<KeyIterator> iters = new ArrayList<KeyIterator>();
0:             iters.add(new KeyIterator(sstable.descriptor));
1:         mi = MergeIterator.get(iters, DecoratedKey.comparator, new MergeIterator.Reducer<DecoratedKey,DecoratedKey>()
/////////////////////////////////////////////////////////////////////////
1:         });
0:         for (Object o : mi.iterators())
0:             ((CloseableIterator)o).close();
0:         for (Object o : mi.iterators())
/////////////////////////////////////////////////////////////////////////
0:         for (Object o : mi.iterators())
/////////////////////////////////////////////////////////////////////////
1:         return mi.hasNext();
1:         return mi.next();
commit:e34283c
/////////////////////////////////////////////////////////////////////////
0:             ci.addIterator(new KeyIterator(sstable.descriptor));
commit:cebdb30
/////////////////////////////////////////////////////////////////////////
0: import java.io.Closeable;
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0: public class ReducingKeyIterator implements Iterator<DecoratedKey>, Closeable
commit:b182e5e
/////////////////////////////////////////////////////////////////////////
0:     public String getTaskType()
1:     {
0:         return "Secondary index build";
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         return iter.next();
commit:8e68f3b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.io.sstable;
1: 
0: import java.io.IOException;
1: import java.util.Collection;
1: 
0: import org.apache.commons.collections.iterators.CollatingIterator;
1: 
1: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.cassandra.utils.ReducingIterator;
1: 
0: public class ReducingKeyIterator implements IKeyIterator
1: {
0:     private final CollatingIterator ci;
0:     private final ReducingIterator<DecoratedKey, DecoratedKey> iter;
1: 
1:     public ReducingKeyIterator(Collection<SSTableReader> sstables)
1:     {
0:         ci = FBUtilities.getCollatingIterator();
1:         for (SSTableReader sstable : sstables)
1:         {
0:             ci.addIterator(new KeyIterator(sstable.desc));
1:         }
1: 
0:         iter = new ReducingIterator<DecoratedKey, DecoratedKey>(ci)
1:         {
0:             DecoratedKey reduced = null;
1: 
0:             public void reduce(DecoratedKey current)
1:             {
1:                 reduced = current;
1:             }
1: 
0:             protected DecoratedKey getReduced()
1:             {
1:                 return reduced;
1:             }
0:         };
1:     }
1: 
0:     public void close() throws IOException
1:     {
0:         for (Object o : ci.getIterators())
1:         {
0:             ((KeyIterator) o).close();
1:         }
1:     }
1: 
1:     public long getTotalBytes()
1:     {
1:         long m = 0;
0:         for (Object o : ci.getIterators())
1:         {
0:             m += ((KeyIterator) o).getTotalBytes();
1:         }
1:         return m;
1:     }
1: 
1:     public long getBytesRead()
1:     {
1:         long m = 0;
0:         for (Object o : ci.getIterators())
1:         {
0:             m += ((KeyIterator) o).getBytesRead();
1:         }
1:         return m;
1:     }
1: 
1:     public boolean hasNext()
1:     {
0:         return iter.hasNext();
1:     }
1: 
0:     public DecoratedKey next()
1:     {
0:         return (DecoratedKey) iter.next();
1:     }
1: 
1:     public void remove()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:             iters.add(new KeyIterator(sstable.descriptor, sstable.metadata));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:                 public void reduce(int idx, DecoratedKey current)
commit:5f43a69
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.io.sstable;
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<KeyIterator> iters;
1:     private IMergeIterator<DecoratedKey,DecoratedKey> mi;
1:         iters = new ArrayList<>(sstables.size());
0:     }
0: 
1:     private void maybeInit()
0:     {
1:         if (mi == null)
0:             mi = MergeIterator.get(iters, DecoratedKey.comparator, new MergeIterator.Reducer<DecoratedKey,DecoratedKey>()
0:                 DecoratedKey reduced = null;
0:                 @Override
0:                 public boolean trivialReduceIsTrivial()
0:                 {
0:                     return true;
0:                 }
0:                 public void reduce(DecoratedKey current)
0:                 {
0:                     reduced = current;
0:                 }
0: 
0:                 protected DecoratedKey getReduced()
0:                 {
0:                     return reduced;
0:                 }
0:             });
0:         }
1:         if (mi != null)
0:         {
0:             mi.close();
0:         }
1:         maybeInit();
0: 
/////////////////////////////////////////////////////////////////////////
1:         maybeInit();
0: 
/////////////////////////////////////////////////////////////////////////
1:         maybeInit();
1:         maybeInit();
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
author:Eric Evans
-------------------------------------------------------------------------------
commit:763ada2
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================