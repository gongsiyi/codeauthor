1:8704006: /*
1:8704006: * Licensed to the Apache Software Foundation (ASF) under one
1:8704006: * or more contributor license agreements.  See the NOTICE file
1:8704006: * distributed with this work for additional information
1:8704006: * regarding copyright ownership.  The ASF licenses this file
1:8704006: * to you under the Apache License, Version 2.0 (the
1:8704006: * "License"); you may not use this file except in compliance
1:8704006: * with the License.  You may obtain a copy of the License at
1:8704006: *
1:8704006: *    http://www.apache.org/licenses/LICENSE-2.0
1:8704006: *
1:8704006: * Unless required by applicable law or agreed to in writing,
1:8704006: * software distributed under the License is distributed on an
1:8704006: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8704006: * KIND, either express or implied.  See the License for the
1:8704006: * specific language governing permissions and limitations
1:8704006: * under the License.
1:8704006: */
1:8704006: package org.apache.cassandra.io.util;
1:8704006: 
1:8704006: import java.io.File;
1:8704006: import java.io.IOException;
1:8704006: import java.util.ArrayList;
1:8704006: import java.util.List;
1:8704006: 
1:8704006: import org.junit.After;
1:9797511: import org.junit.BeforeClass;
1:8704006: 
1:8704006: import junit.framework.Assert;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:8704006: 
1:8704006: public class ChecksummedSequentialWriterTest extends SequentialWriterTest
1:8704006: {
1:8704006: 
1:8704006:     private final List<TestableCSW> writers = new ArrayList<>();
1:8704006: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:8704006:     @After
1:8704006:     public void cleanup()
1:8704006:     {
1:8704006:         for (TestableSW sw : writers)
1:8704006:             sw.file.delete();
1:8704006:         writers.clear();
1:8704006:     }
1:8704006: 
1:8704006:     protected TestableTransaction newTest() throws IOException
1:8704006:     {
1:8704006:         TestableCSW sw = new TestableCSW();
1:8704006:         writers.add(sw);
1:8704006:         return sw;
1:8704006:     }
1:8704006: 
1:8704006:     private static class TestableCSW extends TestableSW
1:8704006:     {
1:8704006:         final File crcFile;
1:8704006: 
1:8704006:         private TestableCSW() throws IOException
1:8704006:         {
1:8704006:             this(tempFile("compressedsequentialwriter"),
1:8704006:                  tempFile("compressedsequentialwriter.checksum"));
1:8704006:         }
1:8704006: 
1:8704006:         private TestableCSW(File file, File crcFile) throws IOException
1:8704006:         {
1:fb22109:             this(file, crcFile, new ChecksummedSequentialWriter(file, crcFile, null, SequentialWriterOption.newBuilder()
1:fb22109:                                                                                                            .bufferSize(BUFFER_SIZE)
1:fb22109:                                                                                                            .build()));
1:8704006:         }
1:8704006: 
1:8704006:         private TestableCSW(File file, File crcFile, SequentialWriter sw) throws IOException
1:8704006:         {
1:8704006:             super(file, sw);
1:8704006:             this.crcFile = crcFile;
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertInProgress() throws Exception
1:8704006:         {
1:8704006:             super.assertInProgress();
1:8704006:             Assert.assertTrue(crcFile.exists());
1:8704006:             Assert.assertEquals(0, crcFile.length());
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertPrepared() throws Exception
1:8704006:         {
1:8704006:             super.assertPrepared();
1:8704006:             Assert.assertTrue(crcFile.exists());
1:8704006:             Assert.assertFalse(0 == crcFile.length());
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertAborted() throws Exception
1:8704006:         {
1:8704006:             super.assertAborted();
1:8704006:         }
1:8704006:     }
1:8704006: 
1:8704006: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:fb22109
/////////////////////////////////////////////////////////////////////////
1:             this(file, crcFile, new ChecksummedSequentialWriter(file, crcFile, null, SequentialWriterOption.newBuilder()
1:                                                                                                            .bufferSize(BUFFER_SIZE)
1:                                                                                                            .build()));
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c163d0b
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8704006
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.junit.After;
1: 
1: import junit.framework.Assert;
1: 
1: public class ChecksummedSequentialWriterTest extends SequentialWriterTest
1: {
1: 
1:     private final List<TestableCSW> writers = new ArrayList<>();
1: 
1:     @After
1:     public void cleanup()
1:     {
1:         for (TestableSW sw : writers)
1:             sw.file.delete();
1:         writers.clear();
1:     }
1: 
1:     protected TestableTransaction newTest() throws IOException
1:     {
1:         TestableCSW sw = new TestableCSW();
1:         writers.add(sw);
1:         return sw;
1:     }
1: 
1:     private static class TestableCSW extends TestableSW
1:     {
1:         final File crcFile;
1: 
1:         private TestableCSW() throws IOException
1:         {
1:             this(tempFile("compressedsequentialwriter"),
1:                  tempFile("compressedsequentialwriter.checksum"));
1:         }
1: 
1:         private TestableCSW(File file, File crcFile) throws IOException
1:         {
0:             this(file, crcFile, new ChecksummedSequentialWriter(file, BUFFER_SIZE, crcFile));
1:         }
1: 
1:         private TestableCSW(File file, File crcFile, SequentialWriter sw) throws IOException
1:         {
1:             super(file, sw);
1:             this.crcFile = crcFile;
1:         }
1: 
1:         protected void assertInProgress() throws Exception
1:         {
1:             super.assertInProgress();
1:             Assert.assertTrue(crcFile.exists());
1:             Assert.assertEquals(0, crcFile.length());
1:         }
1: 
1:         protected void assertPrepared() throws Exception
1:         {
1:             super.assertPrepared();
1:             Assert.assertTrue(crcFile.exists());
1:             Assert.assertFalse(0 == crcFile.length());
1:         }
1: 
1:         protected void assertAborted() throws Exception
1:         {
1:             super.assertAborted();
0:             Assert.assertFalse(crcFile.exists());
1:         }
1:     }
1: 
1: }
============================================================================