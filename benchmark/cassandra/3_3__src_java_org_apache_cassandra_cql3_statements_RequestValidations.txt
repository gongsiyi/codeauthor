1:65a7088: /*
1:65a7088:  * Licensed to the Apache Software Foundation (ASF) under one
1:65a7088:  * or more contributor license agreements.  See the NOTICE file
1:65a7088:  * distributed with this work for additional information
1:65a7088:  * regarding copyright ownership.  The ASF licenses this file
1:65a7088:  * to you under the Apache License, Version 2.0 (the
1:65a7088:  * "License"); you may not use this file except in compliance
1:65a7088:  * with the License.  You may obtain a copy of the License at
1:65a7088:  *
1:65a7088:  *     http://www.apache.org/licenses/LICENSE-2.0
1:65a7088:  *
1:65a7088:  * Unless required by applicable law or agreed to in writing, software
1:65a7088:  * distributed under the License is distributed on an "AS IS" BASIS,
1:65a7088:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:65a7088:  * See the License for the specific language governing permissions and
1:65a7088:  * limitations under the License.
1:65a7088:  */
1:65a7088: package org.apache.cassandra.cql3.statements;
1:65a7088: 
1:48f6446: import java.nio.ByteBuffer;
1:65a7088: import java.util.ArrayList;
1:65a7088: import java.util.HashSet;
1:65a7088: import java.util.List;
1:65a7088: 
1:65a7088: import org.apache.cassandra.exceptions.InvalidRequestException;
1:48f6446: import org.apache.cassandra.utils.ByteBufferUtil;
1:65a7088: 
1:65a7088: import static org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
1:65a7088: 
1:65a7088: /**
1:65a7088:  * Utility methods use to perform request validation.
1:65a7088:  */
1:65a7088: public final class RequestValidations
1:65a7088: {
1:65a7088:     /**
1:65a7088:      * Checks that the specified expression is <code>true</code>. If not an <code>InvalidRequestException</code> will
1:65a7088:      * be thrown.
1:65a7088:      *
1:65a7088:      * @param expression the expression to test
1:222ea95:      * @param message the error message
1:65a7088:      * @throws InvalidRequestException if the specified expression is <code>false</code>.
1:65a7088:      */
1:65a7088:     public static void checkTrue(boolean expression, String message) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         checkTrue(expression, message, EMPTY_OBJECT_ARRAY);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks that the specified expression is <code>true</code>. If not an <code>InvalidRequestException</code> will
1:65a7088:      * be thrown.
1:65a7088:      *
1:65a7088:      * @param expression the expression to test
2:65a7088:      * @param messageTemplate the template used to build the error message
3:65a7088:      * @param messageArgs the message arguments
1:65a7088:      * @throws InvalidRequestException if the specified expression is <code>false</code>.
1:65a7088:      */
1:65a7088:     public static void checkTrue(boolean expression,
1:65a7088:                                  String messageTemplate,
1:65a7088:                                  Object... messageArgs)
1:65a7088:                                  throws InvalidRequestException
1:65a7088:     {
1:65a7088:         if (!expression)
1:65a7088:             throw invalidRequest(messageTemplate, messageArgs);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks that the specified list does not contains duplicates.
1:65a7088:      *
1:65a7088:      * @param list the list to test
1:222ea95:      * @param message the error message
1:65a7088:      * @throws InvalidRequestException if the specified list contains duplicates.
1:65a7088:      */
1:65a7088:     public static void checkContainsNoDuplicates(List<?> list, String message) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         if (new HashSet<>(list).size() != list.size())
1:65a7088:             throw invalidRequest(message);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks that the specified list contains only the specified elements.
1:65a7088:      *
1:65a7088:      * @param list the list to test
1:65a7088:      * @param expectedElements the expected elements
1:65a7088:      * @param message the error message
1:65a7088:      * @throws InvalidRequestException if the specified list contains duplicates.
1:65a7088:      */
1:65a7088:     public static <E> void checkContainsOnly(List<E> list,
1:65a7088:                                              List<E> expectedElements,
1:65a7088:                                              String message) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         List<E> copy = new ArrayList<>(list);
1:65a7088:         copy.removeAll(expectedElements);
1:65a7088:         if (!copy.isEmpty())
1:65a7088:             throw invalidRequest(message);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks that the specified expression is <code>false</code>. If not an <code>InvalidRequestException</code> will
1:65a7088:      * be thrown.
1:65a7088:      *
1:65a7088:      * @param expression the expression to test
1:65a7088:      * @param messageTemplate the template used to build the error message
1:65a7088:      * @param messageArgs the message arguments
1:65a7088:      * @throws InvalidRequestException if the specified expression is <code>true</code>.
1:65a7088:      */
1:65a7088:     public static void checkFalse(boolean expression,
1:65a7088:                                   String messageTemplate,
1:65a7088:                                   Object... messageArgs)
1:65a7088:                                   throws InvalidRequestException
1:65a7088:     {
1:65a7088:         checkTrue(!expression, messageTemplate, messageArgs);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks that the specified expression is <code>false</code>. If not an <code>InvalidRequestException</code> will
1:65a7088:      * be thrown.
1:65a7088:      *
1:65a7088:      * @param expression the expression to test
1:65a7088:      * @param message the error message
1:65a7088:      * @throws InvalidRequestException if the specified expression is <code>true</code>.
1:65a7088:      */
1:65a7088:     public static void checkFalse(boolean expression, String message) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         checkTrue(!expression, message);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks that the specified object is NOT <code>null</code>.
1:65a7088:      * If it is an <code>InvalidRequestException</code> will be throws.
1:65a7088:      *
1:65a7088:      * @param object the object to test
1:65a7088:      * @param messageTemplate the template used to build the error message
1:65a7088:      * @param messageArgs the message arguments
1:65a7088:      * @return the object
1:65a7088:      * @throws InvalidRequestException if the specified object is <code>null</code>.
1:65a7088:      */
1:65a7088:     public static <T> T checkNotNull(T object, String messageTemplate, Object... messageArgs)
1:65a7088:             throws InvalidRequestException
1:65a7088:     {
1:65a7088:         checkTrue(object != null, messageTemplate, messageArgs);
1:65a7088:         return object;
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:48f6446:      * Checks that the specified bind marker value is set to a meaningful value.
1:48f6446:      * If it is not a <code>InvalidRequestException</code> will be thrown.
1:48f6446:      *
1:48f6446:      * @param b the <code>ByteBuffer</code> to test
1:48f6446:      * @param messageTemplate the template used to build the error message
1:48f6446:      * @param messageArgs the message arguments
1:48f6446:      * @throws InvalidRequestException if the specified bind marker value is not set to a meaningful value.
1:48f6446:      */
1:48f6446:     public static void checkBindValueSet(ByteBuffer b, String messageTemplate, Object... messageArgs)
1:48f6446:             throws InvalidRequestException
1:48f6446:     {
1:48f6446:         checkTrue(b != ByteBufferUtil.UNSET_BYTE_BUFFER, messageTemplate, messageArgs);
1:48f6446:     }
1:48f6446: 
1:48f6446:     /**
1:65a7088:      * Checks that the specified object is <code>null</code>.
1:65a7088:      * If it is not an <code>InvalidRequestException</code> will be throws.
1:65a7088:      *
1:65a7088:      * @param object the object to test
1:65a7088:      * @param messageTemplate the template used to build the error message
1:65a7088:      * @param messageArgs the message arguments
1:65a7088:      * @return the object
1:65a7088:      * @throws InvalidRequestException if the specified object is not <code>null</code>.
1:65a7088:      */
1:65a7088:     public static <T> T checkNull(T object, String messageTemplate, Object... messageArgs)
1:65a7088:             throws InvalidRequestException
1:65a7088:     {
1:65a7088:         checkTrue(object == null, messageTemplate, messageArgs);
1:65a7088:         return object;
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks that the specified object is <code>null</code>.
1:65a7088:      * If it is not an <code>InvalidRequestException</code> will be throws.
1:65a7088:      *
1:65a7088:      * @param object the object to test
1:65a7088:      * @param message the error message
1:65a7088:      * @return the object
1:65a7088:      * @throws InvalidRequestException if the specified object is not <code>null</code>.
1:65a7088:      */
1:65a7088:     public static <T> T checkNull(T object, String message) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         return checkNull(object, message, EMPTY_OBJECT_ARRAY);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Returns an <code>InvalidRequestException</code> with the specified message.
1:65a7088:      *
1:65a7088:      * @param messageTemplate the template used to build the error message
1:65a7088:      * @param messageArgs the message arguments
1:65a7088:      * @return an <code>InvalidRequestException</code> with the specified message.
1:65a7088:      */
1:65a7088:     public static InvalidRequestException invalidRequest(String messageTemplate, Object... messageArgs)
1:65a7088:     {
1:65a7088:         return new InvalidRequestException(String.format(messageTemplate, messageArgs));
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * This class must not be instantiated as it only contains static methods.
1:65a7088:      */
1:65a7088:     private RequestValidations()
1:65a7088:     {
1:65a7088: 
1:65a7088:     }
1:65a7088: }
============================================================================
author:Oded Peer
-------------------------------------------------------------------------------
commit:48f6446
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:      * Checks that the specified bind marker value is set to a meaningful value.
1:      * If it is not a <code>InvalidRequestException</code> will be thrown.
1:      *
1:      * @param b the <code>ByteBuffer</code> to test
1:      * @param messageTemplate the template used to build the error message
1:      * @param messageArgs the message arguments
1:      * @throws InvalidRequestException if the specified bind marker value is not set to a meaningful value.
1:      */
1:     public static void checkBindValueSet(ByteBuffer b, String messageTemplate, Object... messageArgs)
1:             throws InvalidRequestException
1:     {
1:         checkTrue(b != ByteBufferUtil.UNSET_BYTE_BUFFER, messageTemplate, messageArgs);
1:     }
1: 
1:     /**
author:Dave Brosius
-------------------------------------------------------------------------------
commit:222ea95
/////////////////////////////////////////////////////////////////////////
1:      * @param message the error message
/////////////////////////////////////////////////////////////////////////
1:      * @param message the error message
author:blerer
-------------------------------------------------------------------------------
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: 
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: import static org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
1: 
1: /**
1:  * Utility methods use to perform request validation.
1:  */
1: public final class RequestValidations
1: {
1:     /**
1:      * Checks that the specified expression is <code>true</code>. If not an <code>InvalidRequestException</code> will
1:      * be thrown.
1:      *
1:      * @param expression the expression to test
0:      * @param messageTemplate the error message
1:      * @param messageArgs the message arguments
1:      * @throws InvalidRequestException if the specified expression is <code>false</code>.
1:      */
1:     public static void checkTrue(boolean expression, String message) throws InvalidRequestException
1:     {
1:         checkTrue(expression, message, EMPTY_OBJECT_ARRAY);
1:     }
1: 
1:     /**
1:      * Checks that the specified expression is <code>true</code>. If not an <code>InvalidRequestException</code> will
1:      * be thrown.
1:      *
1:      * @param expression the expression to test
1:      * @param messageTemplate the template used to build the error message
1:      * @param messageArgs the message arguments
1:      * @throws InvalidRequestException if the specified expression is <code>false</code>.
1:      */
1:     public static void checkTrue(boolean expression,
1:                                  String messageTemplate,
1:                                  Object... messageArgs)
1:                                  throws InvalidRequestException
1:     {
1:         if (!expression)
1:             throw invalidRequest(messageTemplate, messageArgs);
1:     }
1: 
1:     /**
1:      * Checks that the specified list does not contains duplicates.
1:      *
1:      * @param list the list to test
1:      * @param messageTemplate the template used to build the error message
1:      * @param messageArgs the message arguments
1:      * @throws InvalidRequestException if the specified list contains duplicates.
1:      */
1:     public static void checkContainsNoDuplicates(List<?> list, String message) throws InvalidRequestException
1:     {
1:         if (new HashSet<>(list).size() != list.size())
1:             throw invalidRequest(message);
1:     }
1: 
1:     /**
1:      * Checks that the specified list contains only the specified elements.
1:      *
1:      * @param list the list to test
1:      * @param expectedElements the expected elements
1:      * @param message the error message
1:      * @throws InvalidRequestException if the specified list contains duplicates.
1:      */
1:     public static <E> void checkContainsOnly(List<E> list,
1:                                              List<E> expectedElements,
1:                                              String message) throws InvalidRequestException
1:     {
1:         List<E> copy = new ArrayList<>(list);
1:         copy.removeAll(expectedElements);
1:         if (!copy.isEmpty())
1:             throw invalidRequest(message);
1:     }
1: 
1:     /**
1:      * Checks that the specified expression is <code>false</code>. If not an <code>InvalidRequestException</code> will
1:      * be thrown.
1:      *
1:      * @param expression the expression to test
1:      * @param messageTemplate the template used to build the error message
1:      * @param messageArgs the message arguments
1:      * @throws InvalidRequestException if the specified expression is <code>true</code>.
1:      */
1:     public static void checkFalse(boolean expression,
1:                                   String messageTemplate,
1:                                   Object... messageArgs)
1:                                   throws InvalidRequestException
1:     {
1:         checkTrue(!expression, messageTemplate, messageArgs);
1:     }
1: 
1:     /**
1:      * Checks that the specified expression is <code>false</code>. If not an <code>InvalidRequestException</code> will
1:      * be thrown.
1:      *
1:      * @param expression the expression to test
1:      * @param message the error message
1:      * @throws InvalidRequestException if the specified expression is <code>true</code>.
1:      */
1:     public static void checkFalse(boolean expression, String message) throws InvalidRequestException
1:     {
1:         checkTrue(!expression, message);
1:     }
1: 
1:     /**
1:      * Checks that the specified object is NOT <code>null</code>.
1:      * If it is an <code>InvalidRequestException</code> will be throws.
1:      *
1:      * @param object the object to test
1:      * @param messageTemplate the template used to build the error message
1:      * @param messageArgs the message arguments
1:      * @return the object
1:      * @throws InvalidRequestException if the specified object is <code>null</code>.
1:      */
1:     public static <T> T checkNotNull(T object, String messageTemplate, Object... messageArgs)
1:             throws InvalidRequestException
1:     {
1:         checkTrue(object != null, messageTemplate, messageArgs);
1:         return object;
1:     }
1: 
1:     /**
1:      * Checks that the specified object is <code>null</code>.
1:      * If it is not an <code>InvalidRequestException</code> will be throws.
1:      *
1:      * @param object the object to test
1:      * @param messageTemplate the template used to build the error message
1:      * @param messageArgs the message arguments
1:      * @return the object
1:      * @throws InvalidRequestException if the specified object is not <code>null</code>.
1:      */
1:     public static <T> T checkNull(T object, String messageTemplate, Object... messageArgs)
1:             throws InvalidRequestException
1:     {
1:         checkTrue(object == null, messageTemplate, messageArgs);
1:         return object;
1:     }
1: 
1:     /**
1:      * Checks that the specified object is <code>null</code>.
1:      * If it is not an <code>InvalidRequestException</code> will be throws.
1:      *
1:      * @param object the object to test
1:      * @param message the error message
1:      * @return the object
1:      * @throws InvalidRequestException if the specified object is not <code>null</code>.
1:      */
1:     public static <T> T checkNull(T object, String message) throws InvalidRequestException
1:     {
1:         return checkNull(object, message, EMPTY_OBJECT_ARRAY);
1:     }
1: 
1:     /**
1:      * Returns an <code>InvalidRequestException</code> with the specified message.
1:      *
1:      * @param messageTemplate the template used to build the error message
1:      * @param messageArgs the message arguments
1:      * @return an <code>InvalidRequestException</code> with the specified message.
1:      */
1:     public static InvalidRequestException invalidRequest(String messageTemplate, Object... messageArgs)
1:     {
1:         return new InvalidRequestException(String.format(messageTemplate, messageArgs));
1:     }
1: 
1:     /**
1:      * This class must not be instantiated as it only contains static methods.
1:      */
1:     private RequestValidations()
1:     {
1: 
1:     }
1: }
============================================================================