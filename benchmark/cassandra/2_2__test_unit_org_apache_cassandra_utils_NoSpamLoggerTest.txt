1:bade5cf: /*
1:bade5cf: * Licensed to the Apache Software Foundation (ASF) under one
1:bade5cf: * or more contributor license agreements.  See the NOTICE file
1:bade5cf: * distributed with this work for additional information
1:bade5cf: * regarding copyright ownership.  The ASF licenses this file
1:bade5cf: * to you under the Apache License, Version 2.0 (the
1:bade5cf: * "License"); you may not use this file except in compliance
1:bade5cf: * with the License.  You may obtain a copy of the License at
1:bade5cf: *
1:bade5cf: *    http://www.apache.org/licenses/LICENSE-2.0
1:bade5cf: *
1:bade5cf: * Unless required by applicable law or agreed to in writing,
1:bade5cf: * software distributed under the License is distributed on an
1:bade5cf: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bade5cf: * KIND, either express or implied.  See the License for the
1:bade5cf: * specific language governing permissions and limitations
1:bade5cf: * under the License.
1:bade5cf: */
1:bade5cf: package org.apache.cassandra.utils;
1:bade5cf: 
1:bade5cf: import static org.junit.Assert.*;
1:bade5cf: 
1:b449126: import java.util.ArrayDeque;
1:bade5cf: import java.util.HashMap;
1:bade5cf: import java.util.Map;
1:b449126: import java.util.Queue;
1:bade5cf: import java.util.concurrent.TimeUnit;
1:bade5cf: 
1:bade5cf: import org.apache.cassandra.utils.NoSpamLogger.Level;
1:bade5cf: import org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement;
1:bade5cf: import org.junit.Before;
1:bade5cf: import org.junit.BeforeClass;
1:bade5cf: import org.junit.Test;
1:bade5cf: import org.slf4j.Logger;
1:bade5cf: import org.slf4j.helpers.SubstituteLogger;
1:bade5cf: 
1:bade5cf: 
1:bade5cf: public class NoSpamLoggerTest
1:bade5cf: {
1:b449126:     Map<Level, Queue<Pair<String, Object[]>>> logged = new HashMap<>();
1:bade5cf: 
1:bade5cf:    Logger mock = new SubstituteLogger(null)
1:bade5cf:    {
1:bade5cf: 
1:bade5cf:        @Override
1:bade5cf:        public void info(String statement, Object... args)
1:bade5cf:        {
1:b449126:            logged.get(Level.INFO).offer(Pair.create(statement, args));
1:bade5cf:        }
1:bade5cf: 
1:bade5cf:        @Override
1:bade5cf:        public void warn(String statement, Object... args)
1:bade5cf:        {
1:b449126:            logged.get(Level.WARN).offer(Pair.create(statement, args));
1:bade5cf:        }
1:bade5cf: 
1:bade5cf:        @Override
1:bade5cf:        public void error(String statement, Object... args)
1:bade5cf:        {
1:b449126:            logged.get(Level.ERROR).offer(Pair.create(statement, args));
1:bade5cf:        }
1:bade5cf: 
1:bade5cf:        @Override
1:bade5cf:        public int hashCode()
1:bade5cf:        {
1:bade5cf:            return 42;//It's a valid hash code
1:bade5cf:        }
1:bade5cf: 
1:bade5cf:        @Override
1:bade5cf:        public boolean equals(Object o)
1:bade5cf:        {
1:bade5cf:            return this == o;
1:bade5cf:        }
1:bade5cf:    };
1:bade5cf: 
1:bade5cf: 
1:b449126:    static final String statement = "swizzle{}";
1:b449126:    static final String param = "";
1:bade5cf:    static long now;
1:bade5cf: 
1:bade5cf:    @BeforeClass
1:bade5cf:    public static void setUpClass() throws Exception
1:bade5cf:    {
1:bade5cf:        NoSpamLogger.CLOCK = new NoSpamLogger.Clock()
1:bade5cf:        {
1:bade5cf:         @Override
1:bade5cf:         public long nanoTime()
1:bade5cf:         {
1:bade5cf:             return now;
1:bade5cf:         }
1:bade5cf:        };
1:bade5cf:    }
1:bade5cf: 
1:bade5cf:    @Before
1:bade5cf:    public void setUp() throws Exception
1:bade5cf:    {
1:b449126:        logged.put(Level.INFO, new ArrayDeque<Pair<String, Object[]>>());
1:b449126:        logged.put(Level.WARN, new ArrayDeque<Pair<String, Object[]>>());
1:b449126:        logged.put(Level.ERROR, new ArrayDeque<Pair<String, Object[]>>());
1:b449126:        NoSpamLogger.clearWrappedLoggersForTest();
1:bade5cf:    }
1:bade5cf: 
1:bade5cf:    @Test
1:bade5cf:    public void testNoSpamLogger() throws Exception
1:bade5cf:    {
1:bade5cf:        testLevel(Level.INFO);
1:bade5cf:        testLevel(Level.WARN);
1:bade5cf:        testLevel(Level.ERROR);
1:bade5cf:    }
1:bade5cf: 
1:bade5cf:    private void testLevel(Level l) throws Exception
1:bade5cf:    {
1:bade5cf:        setUp();
1:bade5cf:        now = 5;
1:bade5cf: 
1:cb06283:        assertTrue(NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param));
1:bade5cf: 
1:bade5cf:        assertEquals(1, logged.get(l).size());
1:bade5cf: 
1:cb06283:        assertFalse(NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param));
1:bade5cf: 
1:bade5cf:        assertEquals(1, logged.get(l).size());
1:bade5cf: 
1:bade5cf:        now += 5;
1:bade5cf: 
1:cb06283:        assertTrue(NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param));
1:bade5cf: 
1:bade5cf:        assertEquals(2, logged.get(l).size());
1:f3668e1: 
1:f3668e1:        assertTrue(NoSpamLogger.log( mock, l, "key", 5,  TimeUnit.NANOSECONDS, statement, param));
1:f3668e1: 
1:f3668e1:        assertEquals(3, logged.get(l).size());
1:f3668e1: 
1:f3668e1:        assertFalse(NoSpamLogger.log( mock, l, "key", 5,  TimeUnit.NANOSECONDS, statement, param));
1:f3668e1: 
1:f3668e1:        assertEquals(3, logged.get(l).size());
1:bade5cf:    }
1:bade5cf: 
1:bade5cf:    private void assertLoggedSizes(int info, int warn, int error)
1:bade5cf:    {
1:bade5cf:        assertEquals(info, logged.get(Level.INFO).size());
1:bade5cf:        assertEquals(warn, logged.get(Level.WARN).size());
1:bade5cf:        assertEquals(error, logged.get(Level.ERROR).size());
1:bade5cf:    }
1:bade5cf: 
1:bade5cf:    @Test
1:bade5cf:    public void testNoSpamLoggerDirect() throws Exception
1:bade5cf:    {
1:bade5cf:        now = 5;
1:bade5cf:        NoSpamLogger logger = NoSpamLogger.getLogger( mock, 5, TimeUnit.NANOSECONDS);
1:bade5cf: 
1:cb06283:        assertTrue(logger.info(statement, param));
1:cb06283:        assertFalse(logger.info(statement, param));
1:cb06283:        assertFalse(logger.warn(statement, param));
1:cb06283:        assertFalse(logger.error(statement, param));
1:bade5cf: 
1:bade5cf:        assertLoggedSizes(1, 0, 0);
1:bade5cf: 
1:bade5cf:        NoSpamLogStatement statement = logger.getStatement("swizzle2{}", 10, TimeUnit.NANOSECONDS);
1:cb06283:        assertFalse(statement.warn(param));
1:bade5cf:        //now is 5 so it won't log
1:bade5cf:        assertLoggedSizes(1, 0, 0);
1:bade5cf: 
1:bade5cf:        now = 10;
1:cb06283:        assertTrue(statement.warn(param));
1:bade5cf:        assertLoggedSizes(1, 1, 0);
1:bade5cf: 
1:bade5cf:    }
1:bade5cf: 
1:bade5cf:    @Test
1:bade5cf:    public void testNoSpamLoggerStatementDirect() throws Exception
1:bade5cf:    {
1:b449126:        NoSpamLogger.NoSpamLogStatement nospam = NoSpamLogger.getStatement( mock, statement, 5, TimeUnit.NANOSECONDS);
1:b449126: 
1:bade5cf:        now = 5;
1:bade5cf: 
1:cb06283:        assertTrue(nospam.info(statement, param));
1:cb06283:        assertFalse(nospam.info(statement, param));
1:cb06283:        assertFalse(nospam.warn(statement, param));
1:cb06283:        assertFalse(nospam.error(statement, param));
1:bade5cf: 
1:bade5cf:        assertLoggedSizes(1, 0, 0);
1:bade5cf:    }
1:bade5cf: 
1:b449126:    private void checkMock(Level l)
1:b449126:    {
1:b449126:        Pair<String, Object[]> p = logged.get(l).poll();
1:b449126:        assertNotNull(p);
1:b449126:        assertEquals(statement, p.left);
1:b449126:        Object objs[] = p.right;
1:b449126:        assertEquals(1, objs.length);
1:b449126:        assertEquals(param, objs[0]);
1:b449126:        assertTrue(logged.get(l).isEmpty());
1:b449126:    }
1:b449126: 
1:b449126:    /*
1:b449126:     * Make sure that what is passed to the underlying logger is the correct set of objects
1:b449126:     */
1:b449126:    @Test
1:b449126:    public void testLoggedResult() throws Exception
1:b449126:    {
1:77b5da7:        now = 5;
1:77b5da7: 
1:cb06283:        assertTrue(NoSpamLogger.log( mock, Level.INFO, 5,  TimeUnit.NANOSECONDS, statement, param));
1:b449126:        checkMock(Level.INFO);
1:b449126: 
1:b449126:        now = 10;
1:b449126: 
1:cb06283:        assertTrue(NoSpamLogger.log( mock, Level.WARN, 5,  TimeUnit.NANOSECONDS, statement, param));
1:b449126:        checkMock(Level.WARN);
1:b449126: 
1:b449126:        now = 15;
1:b449126: 
1:cb06283:        assertTrue(NoSpamLogger.log( mock, Level.ERROR, 5,  TimeUnit.NANOSECONDS, statement, param));
1:b449126:        checkMock(Level.ERROR);
1:b449126: 
1:b449126:        now = 20;
1:b449126: 
1:b449126:        NoSpamLogger logger = NoSpamLogger.getLogger(mock, 5, TimeUnit.NANOSECONDS);
1:b449126: 
1:cb06283:        assertTrue(logger.info(statement, param));
1:b449126:        checkMock(Level.INFO);
1:b449126: 
1:b449126:        now = 25;
1:b449126: 
1:cb06283:        assertTrue(logger.warn(statement, param));
1:b449126:        checkMock(Level.WARN);
1:b449126: 
1:b449126:        now = 30;
1:b449126: 
1:cb06283:        assertTrue(logger.error(statement, param));
1:b449126:        checkMock(Level.ERROR);
1:b449126: 
1:b449126:        NoSpamLogger.NoSpamLogStatement nospamStatement = logger.getStatement(statement);
1:b449126: 
1:b449126:        now = 35;
1:b449126: 
1:cb06283:        assertTrue(nospamStatement.info(param));
1:b449126:        checkMock(Level.INFO);
1:b449126: 
1:b449126:        now = 40;
1:b449126: 
1:cb06283:        assertTrue(nospamStatement.warn(param));
1:b449126:        checkMock(Level.WARN);
1:b449126: 
1:b449126:        now = 45;
1:b449126: 
1:cb06283:        assertTrue(nospamStatement.error(param));
1:b449126:        checkMock(Level.ERROR);
1:b449126:    }
1:bade5cf: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:f3668e1
/////////////////////////////////////////////////////////////////////////
1: 
1:        assertTrue(NoSpamLogger.log( mock, l, "key", 5,  TimeUnit.NANOSECONDS, statement, param));
1: 
1:        assertEquals(3, logged.get(l).size());
1: 
1:        assertFalse(NoSpamLogger.log( mock, l, "key", 5,  TimeUnit.NANOSECONDS, statement, param));
1: 
1:        assertEquals(3, logged.get(l).size());
commit:77b5da7
/////////////////////////////////////////////////////////////////////////
1:        now = 5;
1: 
commit:b449126
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayDeque;
1: import java.util.Queue;
/////////////////////////////////////////////////////////////////////////
1:     Map<Level, Queue<Pair<String, Object[]>>> logged = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:            logged.get(Level.INFO).offer(Pair.create(statement, args));
1:            logged.get(Level.WARN).offer(Pair.create(statement, args));
1:            logged.get(Level.ERROR).offer(Pair.create(statement, args));
/////////////////////////////////////////////////////////////////////////
1:    static final String statement = "swizzle{}";
1:    static final String param = "";
/////////////////////////////////////////////////////////////////////////
1:        logged.put(Level.INFO, new ArrayDeque<Pair<String, Object[]>>());
1:        logged.put(Level.WARN, new ArrayDeque<Pair<String, Object[]>>());
1:        logged.put(Level.ERROR, new ArrayDeque<Pair<String, Object[]>>());
1:        NoSpamLogger.clearWrappedLoggersForTest();
/////////////////////////////////////////////////////////////////////////
0:        NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param);
0:        NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param);
0:        NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param);
/////////////////////////////////////////////////////////////////////////
0:        logger.info(statement, param);
0:        logger.info(statement, param);
0:        logger.warn(statement, param);
0:        logger.error(statement, param);
0:        statement.warn(param);
0:        statement.warn(param);
/////////////////////////////////////////////////////////////////////////
1:        NoSpamLogger.NoSpamLogStatement nospam = NoSpamLogger.getStatement( mock, statement, 5, TimeUnit.NANOSECONDS);
0:        nospam.info(statement, param);
0:        nospam.info(statement, param);
0:        nospam.warn(statement, param);
0:        nospam.error(statement, param);
1: 
1:    private void checkMock(Level l)
1:    {
1:        Pair<String, Object[]> p = logged.get(l).poll();
1:        assertNotNull(p);
1:        assertEquals(statement, p.left);
1:        Object objs[] = p.right;
1:        assertEquals(1, objs.length);
1:        assertEquals(param, objs[0]);
1:        assertTrue(logged.get(l).isEmpty());
1:    }
1: 
1:    /*
1:     * Make sure that what is passed to the underlying logger is the correct set of objects
1:     */
1:    @Test
1:    public void testLoggedResult() throws Exception
1:    {
0:        NoSpamLogger.log( mock, Level.INFO, 5,  TimeUnit.NANOSECONDS, statement, param);
1:        checkMock(Level.INFO);
1: 
1:        now = 10;
1: 
0:        NoSpamLogger.log( mock, Level.WARN, 5,  TimeUnit.NANOSECONDS, statement, param);
1:        checkMock(Level.WARN);
1: 
1:        now = 15;
1: 
0:        NoSpamLogger.log( mock, Level.ERROR, 5,  TimeUnit.NANOSECONDS, statement, param);
1:        checkMock(Level.ERROR);
1: 
1:        now = 20;
1: 
1:        NoSpamLogger logger = NoSpamLogger.getLogger(mock, 5, TimeUnit.NANOSECONDS);
1: 
0:        logger.info(statement, param);
1:        checkMock(Level.INFO);
1: 
1:        now = 25;
1: 
0:        logger.warn(statement, param);
1:        checkMock(Level.WARN);
1: 
1:        now = 30;
1: 
0:        logger.error(statement, param);
1:        checkMock(Level.ERROR);
1: 
1:        NoSpamLogger.NoSpamLogStatement nospamStatement = logger.getStatement(statement);
1: 
1:        now = 35;
1: 
0:        nospamStatement.info(param);
1:        checkMock(Level.INFO);
1: 
1:        now = 40;
1: 
0:        nospamStatement.warn(param);
1:        checkMock(Level.WARN);
1: 
1:        now = 45;
1: 
0:        nospamStatement.error(param);
1:        checkMock(Level.ERROR);
1:    }
commit:bade5cf
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils;
1: 
1: import static org.junit.Assert.*;
1: 
0: import java.util.ArrayList;
1: import java.util.HashMap;
0: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.cassandra.utils.NoSpamLogger.Level;
1: import org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.helpers.SubstituteLogger;
1: 
1: 
1: public class NoSpamLoggerTest
1: {
0:     Map<Level, List<Pair<String, Object[]>>> logged = new HashMap<>();
1: 
1:    Logger mock = new SubstituteLogger(null)
1:    {
1: 
1:        @Override
1:        public void info(String statement, Object... args)
1:        {
0:            logged.get(Level.INFO).add(Pair.create(statement, args));
1:        }
1: 
1:        @Override
1:        public void warn(String statement, Object... args)
1:        {
0:            logged.get(Level.WARN).add(Pair.create(statement, args));
1:        }
1: 
1:        @Override
1:        public void error(String statement, Object... args)
1:        {
0:            logged.get(Level.ERROR).add(Pair.create(statement, args));
1:        }
1: 
1:        @Override
1:        public int hashCode()
1:        {
1:            return 42;//It's a valid hash code
1:        }
1: 
1:        @Override
1:        public boolean equals(Object o)
1:        {
1:            return this == o;
1:        }
1:    };
1: 
1: 
1:    static long now;
1: 
1:    @BeforeClass
1:    public static void setUpClass() throws Exception
1:    {
1:        NoSpamLogger.CLOCK = new NoSpamLogger.Clock()
1:        {
1:         @Override
1:         public long nanoTime()
1:         {
1:             return now;
1:         }
1:        };
1:    }
1: 
1:    @Before
1:    public void setUp() throws Exception
1:    {
0:        logged.put(Level.INFO, new ArrayList<Pair<String, Object[]>>());
0:        logged.put(Level.WARN, new ArrayList<Pair<String, Object[]>>());
0:        logged.put(Level.ERROR, new ArrayList<Pair<String, Object[]>>());
1:    }
1: 
1:    @Test
1:    public void testNoSpamLogger() throws Exception
1:    {
1:        testLevel(Level.INFO);
1:        testLevel(Level.WARN);
1:        testLevel(Level.ERROR);
1:    }
1: 
1:    private void testLevel(Level l) throws Exception
1:    {
1:        setUp();
1:        now = 5;
0:        NoSpamLogger.clearWrappedLoggersForTest();
1: 
0:        NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, "swizzle{}", "a");
1: 
1:        assertEquals(1, logged.get(l).size());
1: 
0:        NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, "swizzle{}", "a");
1: 
1:        assertEquals(1, logged.get(l).size());
1: 
1:        now += 5;
1: 
0:        NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, "swizzle{}", "a");
1: 
1:        assertEquals(2, logged.get(l).size());
1:    }
1: 
1:    private void assertLoggedSizes(int info, int warn, int error)
1:    {
1:        assertEquals(info, logged.get(Level.INFO).size());
1:        assertEquals(warn, logged.get(Level.WARN).size());
1:        assertEquals(error, logged.get(Level.ERROR).size());
1:    }
1: 
1:    @Test
1:    public void testNoSpamLoggerDirect() throws Exception
1:    {
1:        now = 5;
1:        NoSpamLogger logger = NoSpamLogger.getLogger( mock, 5, TimeUnit.NANOSECONDS);
1: 
0:        logger.info("swizzle{}", "a");
0:        logger.info("swizzle{}", "a");
0:        logger.warn("swizzle{}", "a");
0:        logger.error("swizzle{}", "a");
1: 
1:        assertLoggedSizes(1, 0, 0);
1: 
1:        NoSpamLogStatement statement = logger.getStatement("swizzle2{}", 10, TimeUnit.NANOSECONDS);
0:        statement.warn("a");
1:        //now is 5 so it won't log
1:        assertLoggedSizes(1, 0, 0);
1: 
1:        now = 10;
0:        statement.warn("a");
1:        assertLoggedSizes(1, 1, 0);
1: 
1:    }
1: 
1:    @Test
1:    public void testNoSpamLoggerStatementDirect() throws Exception
1:    {
0:        NoSpamLogger.NoSpamLogStatement statement = NoSpamLogger.getStatement( mock, "swizzle{}", 5, TimeUnit.NANOSECONDS);
1: 
1:        now = 5;
1: 
0:        statement.info("swizzle{}", "a");
0:        statement.info("swizzle{}", "a");
0:        statement.warn("swizzle{}", "a");
0:        statement.error("swizzle{}", "a");
1: 
1:        assertLoggedSizes(1, 0, 0);
1:    }
1: }
author:ariel
-------------------------------------------------------------------------------
commit:cb06283
/////////////////////////////////////////////////////////////////////////
1:        assertTrue(NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param));
1:        assertFalse(NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param));
1:        assertTrue(NoSpamLogger.log( mock, l, 5,  TimeUnit.NANOSECONDS, statement, param));
/////////////////////////////////////////////////////////////////////////
1:        assertTrue(logger.info(statement, param));
1:        assertFalse(logger.info(statement, param));
1:        assertFalse(logger.warn(statement, param));
1:        assertFalse(logger.error(statement, param));
1:        assertFalse(statement.warn(param));
1:        assertTrue(statement.warn(param));
/////////////////////////////////////////////////////////////////////////
1:        assertTrue(nospam.info(statement, param));
1:        assertFalse(nospam.info(statement, param));
1:        assertFalse(nospam.warn(statement, param));
1:        assertFalse(nospam.error(statement, param));
/////////////////////////////////////////////////////////////////////////
1:        assertTrue(NoSpamLogger.log( mock, Level.INFO, 5,  TimeUnit.NANOSECONDS, statement, param));
1:        assertTrue(NoSpamLogger.log( mock, Level.WARN, 5,  TimeUnit.NANOSECONDS, statement, param));
1:        assertTrue(NoSpamLogger.log( mock, Level.ERROR, 5,  TimeUnit.NANOSECONDS, statement, param));
1:        assertTrue(logger.info(statement, param));
1:        assertTrue(logger.warn(statement, param));
1:        assertTrue(logger.error(statement, param));
1:        assertTrue(nospamStatement.info(param));
1:        assertTrue(nospamStatement.warn(param));
1:        assertTrue(nospamStatement.error(param));
============================================================================