1:e5a76bd: /*
1:e5a76bd: * Licensed to the Apache Software Foundation (ASF) under one
1:e5a76bd: * or more contributor license agreements.  See the NOTICE file
1:e5a76bd: * distributed with this work for additional information
1:e5a76bd: * regarding copyright ownership.  The ASF licenses this file
1:e5a76bd: * to you under the Apache License, Version 2.0 (the
1:e5a76bd: * "License"); you may not use this file except in compliance
1:e5a76bd: * with the License.  You may obtain a copy of the License at
1:e5a76bd: *
1:e5a76bd: *    http://www.apache.org/licenses/LICENSE-2.0
1:e5a76bd: *
1:e5a76bd: * Unless required by applicable law or agreed to in writing,
1:e5a76bd: * software distributed under the License is distributed on an
1:e5a76bd: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e5a76bd: * KIND, either express or implied.  See the License for the
1:e5a76bd: * specific language governing permissions and limitations
1:e5a76bd: * under the License.
1:e5a76bd: */
1:e5a76bd: package org.apache.cassandra.utils.concurrent;
1:e5a76bd: 
1:e5a76bd: import java.util.concurrent.locks.Condition;
1:e5a76bd: import java.util.concurrent.locks.ReentrantLock;
1:e5a76bd: 
1:e5a76bd: public class Blocker
1:e5a76bd: {
1:e5a76bd:     private final ReentrantLock lock = new ReentrantLock();
1:e5a76bd:     private final Condition unblocked = lock.newCondition();
1:e5a76bd:     private volatile boolean block = false;
1:e5a76bd: 
1:e5a76bd:     public void block(boolean block)
1:e5a76bd:     {
1:e5a76bd:         this.block = block;
1:e5a76bd:         if (!block)
1:e5a76bd:         {
1:e5a76bd:             lock.lock();
1:e5a76bd:             try
1:e5a76bd:             {
1:e5a76bd:                 unblocked.signalAll();
1:e5a76bd:             }
1:e5a76bd:             finally
1:e5a76bd:             {
1:e5a76bd:                 lock.unlock();
1:e5a76bd:             }
1:e5a76bd:         }
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     public void ask()
1:e5a76bd:     {
1:e5a76bd:         if (block)
1:e5a76bd:         {
1:e5a76bd:             lock.lock();
1:e5a76bd:             try
1:e5a76bd:             {
1:e5a76bd:                 while (block)
1:e5a76bd:                     unblocked.awaitUninterruptibly();
1:e5a76bd:             }
1:e5a76bd:             finally
1:e5a76bd:             {
1:e5a76bd:                 lock.unlock();
1:e5a76bd:             }
1:e5a76bd:         }
1:e5a76bd:     }
1:e5a76bd: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import java.util.concurrent.locks.Condition;
1: import java.util.concurrent.locks.ReentrantLock;
1: 
1: public class Blocker
1: {
1:     private final ReentrantLock lock = new ReentrantLock();
1:     private final Condition unblocked = lock.newCondition();
1:     private volatile boolean block = false;
1: 
1:     public void block(boolean block)
1:     {
1:         this.block = block;
1:         if (!block)
1:         {
1:             lock.lock();
1:             try
1:             {
1:                 unblocked.signalAll();
1:             }
1:             finally
1:             {
1:                 lock.unlock();
1:             }
1:         }
1:     }
1: 
1:     public void ask()
1:     {
1:         if (block)
1:         {
1:             lock.lock();
1:             try
1:             {
1:                 while (block)
1:                     unblocked.awaitUninterruptibly();
1:             }
1:             finally
1:             {
1:                 lock.unlock();
1:             }
1:         }
1:     }
1: }
============================================================================