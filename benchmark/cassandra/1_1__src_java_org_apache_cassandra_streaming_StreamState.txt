1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming;
1:5151169: 
1:5151169: import java.io.Serializable;
1:5151169: import java.util.Set;
1:5151169: import java.util.UUID;
1:5151169: 
1:5151169: import com.google.common.base.Predicate;
1:5151169: import com.google.common.collect.Iterables;
1:5151169: 
1:5151169: /**
1:5151169:  * Current snapshot of streaming progress.
1:5151169:  */
1:5151169: public class StreamState implements Serializable
1:5151169: {
1:5151169:     public final UUID planId;
1:5151169:     public final String description;
1:5151169:     public final Set<SessionInfo> sessions;
1:5151169: 
1:5151169:     public StreamState(UUID planId, String description, Set<SessionInfo> sessions)
1:5151169:     {
1:5151169:         this.planId = planId;
1:5151169:         this.description = description;
1:5151169:         this.sessions = sessions;
1:5151169:     }
1:5151169: 
1:5151169:     public boolean hasFailedSession()
1:5151169:     {
1:5151169:         return Iterables.any(sessions, new Predicate<SessionInfo>()
1:5151169:         {
1:5151169:             public boolean apply(SessionInfo session)
1:5151169:             {
1:5151169:                 return session.isFailed();
1:5151169:             }
1:5151169:         });
1:5151169:     }
1:5151169: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming;
1: 
1: import java.io.Serializable;
1: import java.util.Set;
1: import java.util.UUID;
1: 
1: import com.google.common.base.Predicate;
1: import com.google.common.collect.Iterables;
1: 
1: /**
1:  * Current snapshot of streaming progress.
1:  */
1: public class StreamState implements Serializable
1: {
1:     public final UUID planId;
1:     public final String description;
1:     public final Set<SessionInfo> sessions;
1: 
1:     public StreamState(UUID planId, String description, Set<SessionInfo> sessions)
1:     {
1:         this.planId = planId;
1:         this.description = description;
1:         this.sessions = sessions;
1:     }
1: 
1:     public boolean hasFailedSession()
1:     {
1:         return Iterables.any(sessions, new Predicate<SessionInfo>()
1:         {
1:             public boolean apply(SessionInfo session)
1:             {
1:                 return session.isFailed();
1:             }
1:         });
1:     }
1: }
============================================================================