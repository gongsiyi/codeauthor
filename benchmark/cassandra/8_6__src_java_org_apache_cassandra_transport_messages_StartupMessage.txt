1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport.messages;
15:6d3a3ee: 
1:86b26b6: import java.util.HashMap;
1:6d3a3ee: import java.util.Map;
1:6d3a3ee: 
1:cbf304e: import io.netty.buffer.ByteBuf;
1:6d3a3ee: 
1:6d3a3ee: import org.apache.cassandra.config.DatabaseDescriptor;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:6d3a3ee: import org.apache.cassandra.transport.*;
1:2385dc2: import org.apache.cassandra.utils.CassandraVersion;
1:6d3a3ee: 
1:6d3a3ee: /**
1:6d3a3ee:  * The initial message of the protocol.
1:6d3a3ee:  * Sets up a number of connection options.
1:6d3a3ee:  */
1:6d3a3ee: public class StartupMessage extends Message.Request
14:6d3a3ee: {
1:f171179:     public static final String CQL_VERSION = "CQL_VERSION";
1:f171179:     public static final String COMPRESSION = "COMPRESSION";
1:e0adc16:     public static final String PROTOCOL_VERSIONS = "PROTOCOL_VERSIONS";
1:f199fa3: 
1:6d3a3ee:     public static final Message.Codec<StartupMessage> codec = new Message.Codec<StartupMessage>()
1:6d3a3ee:     {
1:e0adc16:         public StartupMessage decode(ByteBuf body, ProtocolVersion version)
1:6d3a3ee:         {
1:86b26b6:             return new StartupMessage(upperCaseKeys(CBUtil.readStringMap(body)));
14:6d3a3ee:         }
1:e27a955: 
1:e0adc16:         public void encode(StartupMessage msg, ByteBuf dest, ProtocolVersion version)
1:6d3a3ee:         {
1:f8be23a:             CBUtil.writeStringMap(msg.options, dest);
1:f8be23a:         }
1:f8be23a: 
1:e0adc16:         public int encodedSize(StartupMessage msg, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:             return CBUtil.sizeOfStringMap(msg.options);
1:6d3a3ee:         }
1:6d3a3ee:     };
1:f171179: 
1:f171179:     public final Map<String, String> options;
1:6d3a3ee: 
1:f171179:     public StartupMessage(Map<String, String> options)
1:6d3a3ee:     {
1:6d3a3ee:         super(Message.Type.STARTUP);
1:6d3a3ee:         this.options = options;
1:6d3a3ee:     }
1:6d3a3ee: 
1:aa83c94:     public Message.Response execute(QueryState state, long queryStartNanoTime)
1:6d3a3ee:     {
1:e27a955:         String cqlVersion = options.get(CQL_VERSION);
1:e27a955:         if (cqlVersion == null)
1:e27a955:             throw new ProtocolException("Missing value CQL_VERSION in STARTUP message");
1:e27a955: 
1:e0adc16:         try
1:6d3a3ee:         {
1:2385dc2:             if (new CassandraVersion(cqlVersion).compareTo(new CassandraVersion("2.99.0")) < 0)
1:e27a955:                 throw new ProtocolException(String.format("CQL version %s is not supported by the binary protocol (supported version are >= 3.0.0)", cqlVersion));
1:6d3a3ee:         }
1:2621707:         catch (IllegalArgumentException e)
1:6d3a3ee:         {
1:e27a955:             throw new ProtocolException(e.getMessage());
1:6d3a3ee:         }
1:e27a955: 
1:e27a955:         if (options.containsKey(COMPRESSION))
1:e27a955:         {
1:e27a955:             String compression = options.get(COMPRESSION).toLowerCase();
1:e27a955:             if (compression.equals("snappy"))
1:e27a955:             {
1:e27a955:                 if (FrameCompressor.SnappyCompressor.instance == null)
1:e27a955:                     throw new ProtocolException("This instance does not support Snappy compression");
1:e27a955:                 connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
1:e27a955:             }
1:4c129ae:             else if (compression.equals("lz4"))
1:4c129ae:             {
1:4c129ae:                 connection.setCompressor(FrameCompressor.LZ4Compressor.instance);
1:4c129ae:             }
1:e27a955:             else
1:e27a955:             {
1:e27a955:                 throw new ProtocolException(String.format("Unknown compression algorithm: %s", compression));
1:e27a955:             }
1:e27a955:         }
1:e27a955: 
1:bddfa9e:         if (DatabaseDescriptor.getAuthenticator().requireAuthentication())
1:e27a955:             return new AuthenticateMessage(DatabaseDescriptor.getAuthenticator().getClass().getName());
1:e27a955:         else
1:e27a955:             return new ReadyMessage();
1:6d3a3ee:     }
1:6d3a3ee: 
1:86b26b6:     private static Map<String, String> upperCaseKeys(Map<String, String> options)
1:86b26b6:     {
1:86b26b6:         Map<String, String> newMap = new HashMap<String, String>(options.size());
1:86b26b6:         for (Map.Entry<String, String> entry : options.entrySet())
1:86b26b6:             newMap.put(entry.getKey().toUpperCase(), entry.getValue());
1:86b26b6:         return newMap;
1:86b26b6:     }
1:86b26b6: 
1:6d3a3ee:     @Override
1:6d3a3ee:     public String toString()
1:6d3a3ee:     {
1:f171179:         return "STARTUP " + options;
1:6d3a3ee:     }
1:6d3a3ee: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:     public static final String PROTOCOL_VERSIONS = "PROTOCOL_VERSIONS";
1:         public StartupMessage decode(ByteBuf body, ProtocolVersion version)
1:         public void encode(StartupMessage msg, ByteBuf dest, ProtocolVersion version)
1:         public int encodedSize(StartupMessage msg, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:         try
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public Message.Response execute(QueryState state, long queryStartNanoTime)
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:2385dc2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.CassandraVersion;
/////////////////////////////////////////////////////////////////////////
1:             if (new CassandraVersion(cqlVersion).compareTo(new CassandraVersion("2.99.0")) < 0)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:49642e7
commit:86b26b6
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:             return new StartupMessage(upperCaseKeys(CBUtil.readStringMap(body)));
/////////////////////////////////////////////////////////////////////////
1:     private static Map<String, String> upperCaseKeys(Map<String, String> options)
1:     {
1:         Map<String, String> newMap = new HashMap<String, String>(options.size());
1:         for (Map.Entry<String, String> entry : options.entrySet())
1:             newMap.put(entry.getKey().toUpperCase(), entry.getValue());
1:         return newMap;
1:     }
1: 
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
0:         public void encode(StartupMessage msg, ChannelBuffer dest, int version)
1:             CBUtil.writeStringMap(msg.options, dest);
1:         }
1: 
0:         public int encodedSize(StartupMessage msg, int version)
1:         {
1:             return CBUtil.sizeOfStringMap(msg.options);
/////////////////////////////////////////////////////////////////////////
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:4c129ae
/////////////////////////////////////////////////////////////////////////
1:             else if (compression.equals("lz4"))
1:             {
1:                 connection.setCompressor(FrameCompressor.LZ4Compressor.instance);
1:             }
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:         public ChannelBuffer encode(StartupMessage msg, int version)
/////////////////////////////////////////////////////////////////////////
0:         return codec.encode(this, getVersion());
commit:e27a955
/////////////////////////////////////////////////////////////////////////
0:         ClientState cState = state.getClientState();
1:         String cqlVersion = options.get(CQL_VERSION);
1:         if (cqlVersion == null)
1:             throw new ProtocolException("Missing value CQL_VERSION in STARTUP message");
1: 
0:         try 
1:             throw new ProtocolException(e.getMessage());
1: 
0:         if (cState.getCQLVersion().compareTo(new SemanticVersion("2.99.0")) < 0)
1:             throw new ProtocolException(String.format("CQL version %s is not supported by the binary protocol (supported version are >= 3.0.0)", cqlVersion));
1: 
1:         if (options.containsKey(COMPRESSION))
1:         {
1:             String compression = options.get(COMPRESSION).toLowerCase();
1:             if (compression.equals("snappy"))
1:             {
1:                 if (FrameCompressor.SnappyCompressor.instance == null)
1:                     throw new ProtocolException("This instance does not support Snappy compression");
1:                 connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
1:             }
1:             else
1:             {
1:                 throw new ProtocolException(String.format("Unknown compression algorithm: %s", compression));
1:             }
1:         }
1: 
0:         if (cState.isLogged())
1:             return new ReadyMessage();
1:         else
1:             return new AuthenticateMessage(DatabaseDescriptor.getAuthenticator().getClass().getName());
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.QueryState;
/////////////////////////////////////////////////////////////////////////
0:     public Message.Response execute(QueryState state)
0:             ClientState cState = state.getClientState();
0:             cState.setCQLVersion(cqlVersion);
0:             if (cState.getCQLVersion().compareTo(new SemanticVersion("2.99.0")) < 0)
/////////////////////////////////////////////////////////////////////////
0:             if (cState.isLogged())
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
0:             assert connection instanceof ServerConnection;
0:             ServerConnection c = (ServerConnection)connection;
1: 
0:             c.clientState().setCQLVersion(cqlVersion);
0:             if (c.clientState().getCQLVersion().compareTo(new SemanticVersion("2.99.0")) < 0)
/////////////////////////////////////////////////////////////////////////
0:             if (c.clientState().isLogged())
commit:f171179
/////////////////////////////////////////////////////////////////////////
1:     public static final String CQL_VERSION = "CQL_VERSION";
1:     public static final String COMPRESSION = "COMPRESSION";
0:             return new StartupMessage(CBUtil.readStringMap(body));
0:             ChannelBuffer cb = ChannelBuffers.dynamicBuffer();
0:             CBUtil.writeStringMap(cb, msg.options);
0:             return cb;
1:     public final Map<String, String> options;
1:     public StartupMessage(Map<String, String> options)
/////////////////////////////////////////////////////////////////////////
0:             String cqlVersion = options.get(CQL_VERSION);
0:             if (cqlVersion == null)
0:                 throw new ProtocolException("Missing value CQL_VERSION in STARTUP message");
1: 
0:             if (options.containsKey(COMPRESSION))
0:                 String compression = options.get(COMPRESSION).toLowerCase();
/////////////////////////////////////////////////////////////////////////
1:         return "STARTUP " + options;
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.InvalidRequestException;
/////////////////////////////////////////////////////////////////////////
0:                         throw new ProtocolException("This instance does not support Snappy compression");
0:                     throw new ProtocolException(String.format("Unknown compression algorithm: %s", compression));
/////////////////////////////////////////////////////////////////////////
0:             return ErrorMessage.fromException(new ProtocolException(e.getMessage()));
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
1: 
0: import java.util.EnumMap;
1: import java.util.Map;
1: 
0: import com.google.common.base.Charsets;
0: import org.jboss.netty.buffer.ChannelBuffer;
0: import org.jboss.netty.buffer.ChannelBuffers;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.transport.*;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: import org.apache.cassandra.utils.SemanticVersion;
1: 
1: /**
1:  * The initial message of the protocol.
1:  * Sets up a number of connection options.
1:  */
1: public class StartupMessage extends Message.Request
1: {
0:     public enum Option implements OptionCodec.Codecable<Option>
1:     {
0:         COMPRESSION(1);
1: 
0:         private final int id;
1: 
0:         private Option(int id)
1:         {
0:             this.id = id;
1:         }
1: 
0:         public int getId()
1:         {
0:             return id;
1:         }
1: 
0:         public Object readValue(ChannelBuffer cb)
1:         {
0:             switch (this)
1:             {
0:                 case COMPRESSION:
0:                     return CBUtil.readString(cb);
0:                 default:
0:                     throw new AssertionError();
1:             }
1:         }
1: 
0:         public void writeValue(Object value, ChannelBuffer cb)
1:         {
0:             switch (this)
1:             {
0:                 case COMPRESSION:
0:                     assert value instanceof String;
0:                     cb.writeBytes(CBUtil.stringToCB((String)value));
0:                     break;
1:             }
1:         }
1: 
0:         public int serializedValueSize(Object value)
1:         {
0:             switch (this)
1:             {
0:                 case COMPRESSION:
0:                     return 2 + ((String)value).getBytes(Charsets.UTF_8).length;
0:                 default:
0:                     throw new AssertionError();
1:             }
1:         }
1:     }
1: 
0:     private static OptionCodec<Option> optionCodec = new OptionCodec<Option>(Option.class);
1: 
1:     public static final Message.Codec<StartupMessage> codec = new Message.Codec<StartupMessage>()
1:     {
0:         public StartupMessage decode(ChannelBuffer body)
1:         {
0:             String verString = CBUtil.readString(body);
1: 
0:             Map<Option, Object> options = optionCodec.decode(body);
0:             return new StartupMessage(verString, options);
1:         }
1: 
0:         public ChannelBuffer encode(StartupMessage msg)
1:         {
0:             ChannelBuffer vcb = CBUtil.stringToCB(msg.cqlVersion);
0:             ChannelBuffer ocb = optionCodec.encode(msg.options);
0:             return ChannelBuffers.wrappedBuffer(vcb, ocb);
1:         }
1:     };
1: 
0:     public final String cqlVersion;
0:     public final Map<Option, Object> options;
1: 
0:     public StartupMessage(String cqlVersion, Map<Option, Object> options)
1:     {
1:         super(Message.Type.STARTUP);
0:         this.cqlVersion = cqlVersion;
1:         this.options = options;
1:     }
1: 
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
1: 
0:     public Message.Response execute()
1:     {
0:         try
1:         {
0:             connection.clientState().setCQLVersion(cqlVersion);
0:             if (connection.clientState().getCQLVersion().compareTo(new SemanticVersion("2.99.0")) < 0)
0:                 throw new ProtocolException(String.format("CQL version %s is not support by the binary protocol (supported version are >= 3.0.0)", cqlVersion));
1: 
0:             if (options.containsKey(Option.COMPRESSION))
1:             {
0:                 String compression = ((String)options.get(Option.COMPRESSION)).toLowerCase();
0:                 if (compression.equals("snappy"))
1:                 {
0:                     if (FrameCompressor.SnappyCompressor.instance == null)
0:                         throw new InvalidRequestException("This instance does not support Snappy compression");
0:                     connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
1:                 }
0:                 else
1:                 {
0:                     throw new InvalidRequestException(String.format("Unknown compression algorithm: %s", compression));
1:                 }
1:             }
1: 
0:             if (connection.clientState().isLogged())
0:                 return new ReadyMessage();
0:             else
0:                 return new AuthenticateMessage(DatabaseDescriptor.getAuthenticator().getClass().getName());
1:         }
0:         catch (InvalidRequestException e)
1:         {
0:             return ErrorMessage.fromException(e);
1:         }
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return "STARTUP cqlVersion=" + cqlVersion;
1:     }
1: }
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public StartupMessage decode(ByteBuf body, int version)
0:         public void encode(StartupMessage msg, ByteBuf dest, int version)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:2621707
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (new SemanticVersion(cqlVersion).compareTo(new SemanticVersion("2.99.0")) < 0)
0:                 throw new ProtocolException(String.format("CQL version %s is not supported by the binary protocol (supported version are >= 3.0.0)", cqlVersion));
1:         catch (IllegalArgumentException e)
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1:         if (DatabaseDescriptor.getAuthenticator().requireAuthentication())
0:         else
0:             return new ReadyMessage();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:bf2ee04
/////////////////////////////////////////////////////////////////////////
0:         public StartupMessage decode(ChannelBuffer body, int version)
============================================================================