1:879b694: /*
1:879b694:  * Licensed to the Apache Software Foundation (ASF) under one
1:879b694:  * or more contributor license agreements.  See the NOTICE file
1:879b694:  * distributed with this work for additional information
1:879b694:  * regarding copyright ownership.  The ASF licenses this file
1:879b694:  * to you under the Apache License, Version 2.0 (the
1:879b694:  * "License"); you may not use this file except in compliance
1:879b694:  * with the License.  You may obtain a copy of the License at
1:879b694:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:879b694:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:879b694:  */
1:879b694: package org.apache.cassandra.cql3.statements;
2:879b694: 
1:2f3fd41: import org.apache.cassandra.auth.*;
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:879b694: import org.apache.cassandra.cql3.RoleName;
1:879b694: import org.apache.cassandra.exceptions.*;
1:879b694: import org.apache.cassandra.service.ClientState;
1:879b694: import org.apache.cassandra.transport.messages.ResultMessage;
1:879b694: 
1:217721a: public class CreateRoleStatement extends AuthenticationStatement
2:879b694: {
1:217721a:     private final RoleResource role;
1:879b694:     private final RoleOptions opts;
1:879b694:     private final boolean ifNotExists;
1:879b694: 
1:879b694:     public CreateRoleStatement(RoleName name, RoleOptions options, boolean ifNotExists)
1:879b694:     {
1:217721a:         this.role = RoleResource.role(name.getName());
1:879b694:         this.opts = options;
1:879b694:         this.ifNotExists = ifNotExists;
2:879b694:     }
1:879b694: 
1:217721a:     public void checkAccess(ClientState state) throws UnauthorizedException
1:879b694:     {
1:217721a:         super.checkPermission(state, Permission.CREATE, RoleResource.root());
1:2f3fd41:         if (opts.getSuperuser().isPresent())
1:217721a:         {
1:2f3fd41:             if (opts.getSuperuser().get() && !state.getUser().isSuper())
1:217721a:                 throw new UnauthorizedException("Only superusers can create a role with superuser status");
1:217721a:         }
1:879b694:     }
1:879b694: 
1:879b694:     public void validate(ClientState state) throws RequestValidationException
1:879b694:     {
1:879b694:         opts.validate();
1:879b694: 
1:217721a:         if (role.getRoleName().isEmpty())
1:879b694:             throw new InvalidRequestException("Role name can't be an empty string");
1:879b694: 
1:879b694:         // validate login here before checkAccess to avoid leaking role existence to anonymous users.
1:879b694:         state.ensureNotAnonymous();
1:879b694: 
1:879b694:         if (!ifNotExists && DatabaseDescriptor.getRoleManager().isExistingRole(role))
1:217721a:             throw new InvalidRequestException(String.format("%s already exists", role.getRoleName()));
1:879b694:     }
1:879b694: 
1:879b694:     public ResultMessage execute(ClientState state) throws RequestExecutionException, RequestValidationException
1:879b694:     {
1:879b694:         // not rejected in validate()
1:879b694:         if (ifNotExists && DatabaseDescriptor.getRoleManager().isExistingRole(role))
1:879b694:             return null;
1:879b694: 
1:2f3fd41:         DatabaseDescriptor.getRoleManager().createRole(state.getUser(), role, opts);
1:9072757:         grantPermissionsToCreator(state);
1:879b694:         return null;
1:879b694:     }
1:9072757: 
1:9072757:     /**
1:9072757:      * Grant all applicable permissions on the newly created role to the user performing the request
1:9072757:      * see also: SchemaAlteringStatement#grantPermissionsToCreator and the overridden implementations
1:9072757:      * of it in subclasses CreateKeyspaceStatement & CreateTableStatement.
1:9072757:      * @param state
1:9072757:      */
1:9072757:     private void grantPermissionsToCreator(ClientState state)
1:9072757:     {
1:9072757:         // The creator of a Role automatically gets ALTER/DROP/AUTHORIZE permissions on it if:
1:9072757:         // * the user is not anonymous
1:9072757:         // * the configured IAuthorizer supports granting of permissions (not all do, AllowAllAuthorizer doesn't and
1:9072757:         //   custom external implementations may not)
1:9072757:         if (!state.getUser().isAnonymous())
1:9072757:         {
1:9072757:             try
1:9072757:             {
1:9072757:                 DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:9072757:                                                          role.applicablePermissions(),
1:9072757:                                                          role,
1:9072757:                                                          RoleResource.role(state.getUser().getName()));
1:9072757:             }
1:9072757:             catch (UnsupportedOperationException e)
1:9072757:             {
1:9072757:                 // not a problem, grant is an optional method on IAuthorizer
1:9072757:             }
1:9072757:         }
1:9072757:     }
1:879b694: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2f3fd41
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
/////////////////////////////////////////////////////////////////////////
1:         if (opts.getSuperuser().isPresent())
1:             if (opts.getSuperuser().get() && !state.getUser().isSuper())
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.getRoleManager().createRole(state.getUser(), role, opts);
commit:9072757
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.AuthenticatedUser;
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.auth.RoleResource;
/////////////////////////////////////////////////////////////////////////
1:         grantPermissionsToCreator(state);
1: 
1:     /**
1:      * Grant all applicable permissions on the newly created role to the user performing the request
1:      * see also: SchemaAlteringStatement#grantPermissionsToCreator and the overridden implementations
1:      * of it in subclasses CreateKeyspaceStatement & CreateTableStatement.
1:      * @param state
1:      */
1:     private void grantPermissionsToCreator(ClientState state)
1:     {
1:         // The creator of a Role automatically gets ALTER/DROP/AUTHORIZE permissions on it if:
1:         // * the user is not anonymous
1:         // * the configured IAuthorizer supports granting of permissions (not all do, AllowAllAuthorizer doesn't and
1:         //   custom external implementations may not)
1:         if (!state.getUser().isAnonymous())
1:         {
1:             try
1:             {
1:                 DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:                                                          role.applicablePermissions(),
1:                                                          role,
1:                                                          RoleResource.role(state.getUser().getName()));
1:             }
1:             catch (UnsupportedOperationException e)
1:             {
1:                 // not a problem, grant is an optional method on IAuthorizer
1:             }
1:         }
1:     }
commit:217721a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.*;
/////////////////////////////////////////////////////////////////////////
1: public class CreateRoleStatement extends AuthenticationStatement
1:     private final RoleResource role;
1:         this.role = RoleResource.role(name.getName());
1:     public void checkAccess(ClientState state) throws UnauthorizedException
1:         super.checkPermission(state, Permission.CREATE, RoleResource.root());
0:         if (opts.getOptions().containsKey(Option.SUPERUSER))
1:         {
0:             if ((Boolean)opts.getOptions().get(Option.SUPERUSER) && !state.getUser().isSuper())
1:                 throw new UnauthorizedException("Only superusers can create a role with superuser status");
1:         }
1:         if (role.getRoleName().isEmpty())
1:             throw new InvalidRequestException(String.format("%s already exists", role.getRoleName()));
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import org.apache.cassandra.auth.IRoleManager.Option;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.RoleName;
0: import org.apache.cassandra.cql3.RoleOptions;
1: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
0: public class CreateRoleStatement extends AuthorizationStatement
1: {
0:     private final String role;
1:     private final RoleOptions opts;
1:     private final boolean ifNotExists;
1: 
1:     public CreateRoleStatement(RoleName name, RoleOptions options, boolean ifNotExists)
1:     {
0:         this.role = name.getName();
1:         this.opts = options;
1:         this.ifNotExists = ifNotExists;
1:     }
1: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:     {
0:         if (!state.getUser().isSuper())
0:             throw new UnauthorizedException("Only superusers are allowed to perform CREATE [ROLE|USER] queries");
1:     }
1: 
1:     public void validate(ClientState state) throws RequestValidationException
1:     {
1:         opts.validate();
1: 
0:         if (role.isEmpty())
1:             throw new InvalidRequestException("Role name can't be an empty string");
1: 
1:         // validate login here before checkAccess to avoid leaking role existence to anonymous users.
1:         state.ensureNotAnonymous();
1: 
1:         if (!ifNotExists && DatabaseDescriptor.getRoleManager().isExistingRole(role))
0:             throw new InvalidRequestException(String.format("%s already exists", role));
1: 
0:         for (Option option : opts.getOptions().keySet())
1:         {
0:             if (!DatabaseDescriptor.getRoleManager().supportedOptions().contains(option))
0:                 throw new UnauthorizedException(String.format("You aren't allowed to alter %s", option));
1:         }
1:     }
1: 
1:     public ResultMessage execute(ClientState state) throws RequestExecutionException, RequestValidationException
1:     {
1:         // not rejected in validate()
1:         if (ifNotExists && DatabaseDescriptor.getRoleManager().isExistingRole(role))
1:             return null;
1: 
0:         DatabaseDescriptor.getRoleManager().createRole(state.getUser(), role, opts.getOptions());
1:         return null;
1:     }
1: }
============================================================================