1:5288d43: /*
1:5288d43:  * Licensed to the Apache Software Foundation (ASF) under one
1:5288d43:  * or more contributor license agreements.  See the NOTICE file
1:5288d43:  * distributed with this work for additional information
1:5288d43:  * regarding copyright ownership.  The ASF licenses this file
1:5288d43:  * to you under the Apache License, Version 2.0 (the
1:5288d43:  * "License"); you may not use this file except in compliance
1:5288d43:  * with the License.  You may obtain a copy of the License at
1:5288d43:  *
1:5288d43:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5288d43:  *
1:5288d43:  * Unless required by applicable law or agreed to in writing, software
1:5288d43:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5288d43:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5288d43:  * See the License for the specific language governing permissions and
1:5288d43:  * limitations under the License.
1:5288d43:  */
1:5288d43: 
1:5288d43: package org.apache.cassandra.cql3.functions;
1:5288d43: 
1:5288d43: import java.util.HashMap;
1:5288d43: import java.util.List;
1:5288d43: import java.util.Map;
1:5288d43: import java.util.Optional;
1:5288d43: 
1:5288d43: import com.datastax.driver.core.DataType;
1:5288d43: import com.datastax.driver.core.TupleType;
1:5288d43: import com.datastax.driver.core.TupleValue;
1:5288d43: import com.datastax.driver.core.TypeCodec;
1:5288d43: import com.datastax.driver.core.UDTValue;
1:5288d43: import com.datastax.driver.core.UserType;
1:5288d43: import org.apache.cassandra.cql3.ColumnIdentifier;
1:5288d43: import org.apache.cassandra.db.marshal.AbstractType;
1:5288d43: import org.apache.cassandra.schema.CQLTypeParser;
1:5288d43: import org.apache.cassandra.schema.KeyspaceMetadata;
1:5288d43: import org.apache.cassandra.utils.ByteBufferUtil;
1:5288d43: 
1:5288d43: /**
1:5288d43:  * Package private implementation of {@link UDFContext}
1:5288d43:  */
1:5288d43: public final class UDFContextImpl implements UDFContext
1:5288d43: {
1:5288d43:     private final KeyspaceMetadata keyspaceMetadata;
1:5288d43:     private final Map<String, TypeCodec<Object>> byName = new HashMap<>();
1:5288d43:     private final TypeCodec<Object>[] argCodecs;
1:5288d43:     private final TypeCodec<Object> returnCodec;
1:5288d43: 
1:5288d43:     UDFContextImpl(List<ColumnIdentifier> argNames, TypeCodec<Object>[] argCodecs, TypeCodec<Object> returnCodec,
1:5288d43:                    KeyspaceMetadata keyspaceMetadata)
1:5288d43:     {
1:5288d43:         for (int i = 0; i < argNames.size(); i++)
1:5288d43:             byName.put(argNames.get(i).toString(), argCodecs[i]);
1:5288d43:         this.argCodecs = argCodecs;
1:5288d43:         this.returnCodec = returnCodec;
1:5288d43:         this.keyspaceMetadata = keyspaceMetadata;
1:5288d43:     }
1:5288d43: 
1:5288d43:     public UDTValue newArgUDTValue(String argName)
1:5288d43:     {
1:5288d43:         return newUDTValue(codecFor(argName));
1:5288d43:     }
1:5288d43: 
1:5288d43:     public UDTValue newArgUDTValue(int argNum)
1:5288d43:     {
1:5288d43:         return newUDTValue(codecFor(argNum));
1:5288d43:     }
1:5288d43: 
1:5288d43:     public UDTValue newReturnUDTValue()
1:5288d43:     {
1:5288d43:         return newUDTValue(returnCodec);
1:5288d43:     }
1:5288d43: 
1:5288d43:     public UDTValue newUDTValue(String udtName)
1:5288d43:     {
1:5288d43:         Optional<org.apache.cassandra.db.marshal.UserType> udtType = keyspaceMetadata.types.get(ByteBufferUtil.bytes(udtName));
1:5288d43:         DataType dataType = UDHelper.driverType(udtType.orElseThrow(
1:5288d43:                 () -> new IllegalArgumentException("No UDT named " + udtName + " in keyspace " + keyspaceMetadata.name)
1:5288d43:             ));
1:5288d43:         return newUDTValue(dataType);
1:5288d43:     }
1:5288d43: 
1:5288d43:     public TupleValue newArgTupleValue(String argName)
1:5288d43:     {
1:5288d43:         return newTupleValue(codecFor(argName));
1:5288d43:     }
1:5288d43: 
1:5288d43:     public TupleValue newArgTupleValue(int argNum)
1:5288d43:     {
1:5288d43:         return newTupleValue(codecFor(argNum));
1:5288d43:     }
1:5288d43: 
1:5288d43:     public TupleValue newReturnTupleValue()
1:5288d43:     {
1:5288d43:         return newTupleValue(returnCodec);
1:5288d43:     }
1:5288d43: 
1:5288d43:     public TupleValue newTupleValue(String cqlDefinition)
1:5288d43:     {
1:5288d43:         AbstractType<?> abstractType = CQLTypeParser.parse(keyspaceMetadata.name, cqlDefinition, keyspaceMetadata.types);
1:5288d43:         DataType dataType = UDHelper.driverType(abstractType);
1:5288d43:         return newTupleValue(dataType);
1:5288d43:     }
1:5288d43: 
1:5288d43:     private TypeCodec<Object> codecFor(int argNum)
1:5288d43:     {
1:5288d43:         if (argNum < 0 || argNum >= argCodecs.length)
1:5288d43:             throw new IllegalArgumentException("Function does not declare an argument with index " + argNum);
1:5288d43:         return argCodecs[argNum];
1:5288d43:     }
1:5288d43: 
1:5288d43:     private TypeCodec<Object> codecFor(String argName)
1:5288d43:     {
1:5288d43:         TypeCodec<Object> codec = byName.get(argName);
1:5288d43:         if (codec == null)
1:5288d43:             throw new IllegalArgumentException("Function does not declare an argument named '" + argName + '\'');
1:5288d43:         return codec;
1:5288d43:     }
1:5288d43: 
1:5288d43:     private static UDTValue newUDTValue(TypeCodec<Object> codec)
1:5288d43:     {
1:5288d43:         DataType dataType = codec.getCqlType();
1:5288d43:         return newUDTValue(dataType);
1:5288d43:     }
1:5288d43: 
1:5288d43:     private static UDTValue newUDTValue(DataType dataType)
1:5288d43:     {
1:5288d43:         if (!(dataType instanceof UserType))
1:5288d43:             throw new IllegalStateException("Function argument is not a UDT but a " + dataType.getName());
1:5288d43:         UserType userType = (UserType) dataType;
1:5288d43:         return userType.newValue();
1:5288d43:     }
1:5288d43: 
1:5288d43:     private static TupleValue newTupleValue(TypeCodec<Object> codec)
1:5288d43:     {
1:5288d43:         DataType dataType = codec.getCqlType();
1:5288d43:         return newTupleValue(dataType);
1:5288d43:     }
1:5288d43: 
1:5288d43:     private static TupleValue newTupleValue(DataType dataType)
1:5288d43:     {
1:5288d43:         if (!(dataType instanceof TupleType))
1:5288d43:             throw new IllegalStateException("Function argument is not a tuple type but a " + dataType.getName());
1:5288d43:         TupleType tupleType = (TupleType) dataType;
1:5288d43:         return tupleType.newValue();
1:5288d43:     }
1:5288d43: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:5288d43
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Optional;
1: 
1: import com.datastax.driver.core.DataType;
1: import com.datastax.driver.core.TupleType;
1: import com.datastax.driver.core.TupleValue;
1: import com.datastax.driver.core.TypeCodec;
1: import com.datastax.driver.core.UDTValue;
1: import com.datastax.driver.core.UserType;
1: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.schema.CQLTypeParser;
1: import org.apache.cassandra.schema.KeyspaceMetadata;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * Package private implementation of {@link UDFContext}
1:  */
1: public final class UDFContextImpl implements UDFContext
1: {
1:     private final KeyspaceMetadata keyspaceMetadata;
1:     private final Map<String, TypeCodec<Object>> byName = new HashMap<>();
1:     private final TypeCodec<Object>[] argCodecs;
1:     private final TypeCodec<Object> returnCodec;
1: 
1:     UDFContextImpl(List<ColumnIdentifier> argNames, TypeCodec<Object>[] argCodecs, TypeCodec<Object> returnCodec,
1:                    KeyspaceMetadata keyspaceMetadata)
1:     {
1:         for (int i = 0; i < argNames.size(); i++)
1:             byName.put(argNames.get(i).toString(), argCodecs[i]);
1:         this.argCodecs = argCodecs;
1:         this.returnCodec = returnCodec;
1:         this.keyspaceMetadata = keyspaceMetadata;
1:     }
1: 
1:     public UDTValue newArgUDTValue(String argName)
1:     {
1:         return newUDTValue(codecFor(argName));
1:     }
1: 
1:     public UDTValue newArgUDTValue(int argNum)
1:     {
1:         return newUDTValue(codecFor(argNum));
1:     }
1: 
1:     public UDTValue newReturnUDTValue()
1:     {
1:         return newUDTValue(returnCodec);
1:     }
1: 
1:     public UDTValue newUDTValue(String udtName)
1:     {
1:         Optional<org.apache.cassandra.db.marshal.UserType> udtType = keyspaceMetadata.types.get(ByteBufferUtil.bytes(udtName));
1:         DataType dataType = UDHelper.driverType(udtType.orElseThrow(
1:                 () -> new IllegalArgumentException("No UDT named " + udtName + " in keyspace " + keyspaceMetadata.name)
1:             ));
1:         return newUDTValue(dataType);
1:     }
1: 
1:     public TupleValue newArgTupleValue(String argName)
1:     {
1:         return newTupleValue(codecFor(argName));
1:     }
1: 
1:     public TupleValue newArgTupleValue(int argNum)
1:     {
1:         return newTupleValue(codecFor(argNum));
1:     }
1: 
1:     public TupleValue newReturnTupleValue()
1:     {
1:         return newTupleValue(returnCodec);
1:     }
1: 
1:     public TupleValue newTupleValue(String cqlDefinition)
1:     {
1:         AbstractType<?> abstractType = CQLTypeParser.parse(keyspaceMetadata.name, cqlDefinition, keyspaceMetadata.types);
1:         DataType dataType = UDHelper.driverType(abstractType);
1:         return newTupleValue(dataType);
1:     }
1: 
1:     private TypeCodec<Object> codecFor(int argNum)
1:     {
1:         if (argNum < 0 || argNum >= argCodecs.length)
1:             throw new IllegalArgumentException("Function does not declare an argument with index " + argNum);
1:         return argCodecs[argNum];
1:     }
1: 
1:     private TypeCodec<Object> codecFor(String argName)
1:     {
1:         TypeCodec<Object> codec = byName.get(argName);
1:         if (codec == null)
1:             throw new IllegalArgumentException("Function does not declare an argument named '" + argName + '\'');
1:         return codec;
1:     }
1: 
1:     private static UDTValue newUDTValue(TypeCodec<Object> codec)
1:     {
1:         DataType dataType = codec.getCqlType();
1:         return newUDTValue(dataType);
1:     }
1: 
1:     private static UDTValue newUDTValue(DataType dataType)
1:     {
1:         if (!(dataType instanceof UserType))
1:             throw new IllegalStateException("Function argument is not a UDT but a " + dataType.getName());
1:         UserType userType = (UserType) dataType;
1:         return userType.newValue();
1:     }
1: 
1:     private static TupleValue newTupleValue(TypeCodec<Object> codec)
1:     {
1:         DataType dataType = codec.getCqlType();
1:         return newTupleValue(dataType);
1:     }
1: 
1:     private static TupleValue newTupleValue(DataType dataType)
1:     {
1:         if (!(dataType instanceof TupleType))
1:             throw new IllegalStateException("Function argument is not a tuple type but a " + dataType.getName());
1:         TupleType tupleType = (TupleType) dataType;
1:         return tupleType.newValue();
1:     }
1: }
============================================================================