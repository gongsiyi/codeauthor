1:037d24e: /*
1:037d24e:  * Licensed to the Apache Software Foundation (ASF) under one
1:037d24e:  * or more contributor license agreements.  See the NOTICE file
1:037d24e:  * distributed with this work for additional information
1:037d24e:  * regarding copyright ownership.  The ASF licenses this file
1:037d24e:  * to you under the Apache License, Version 2.0 (the
1:037d24e:  * "License"); you may not use this file except in compliance
1:037d24e:  * with the License.  You may obtain a copy of the License at
1:037d24e:  *
1:037d24e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:037d24e:  *
1:037d24e:  * Unless required by applicable law or agreed to in writing, software
1:037d24e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:037d24e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:037d24e:  * See the License for the specific language governing permissions and
1:037d24e:  * limitations under the License.
1:037d24e:  */
1:037d24e: package org.apache.cassandra.hints;
1:037d24e: 
1:037d24e: import org.apache.cassandra.Util;
1:037d24e: import org.jboss.byteman.contrib.bmunit.BMRule;
1:037d24e: import org.jboss.byteman.contrib.bmunit.BMUnitRunner;
1:037d24e: import org.junit.BeforeClass;
1:037d24e: import org.junit.Test;
1:037d24e: import org.junit.runner.RunWith;
1:037d24e: 
1:037d24e: import com.google.common.collect.ImmutableList;
1:037d24e: 
1:037d24e: import static junit.framework.Assert.*;
1:037d24e: 
1:037d24e: import java.lang.Thread.State;
1:037d24e: import java.util.Queue;
1:037d24e: import java.util.UUID;
1:037d24e: import java.util.concurrent.ConcurrentLinkedQueue;
1:037d24e: 
1:037d24e: @RunWith(BMUnitRunner.class)
1:037d24e: public class HintsBufferPoolTest
1:037d24e: {
1:037d24e: 
1:037d24e:     @BeforeClass
1:037d24e:     public static void defineSchema()
1:037d24e:     {
1:037d24e:         HintsBufferTest.defineSchema();
1:037d24e:     }
1:037d24e: 
1:037d24e:     /*
1:037d24e:      * Check that the hints buffer pool will only drain a limited number of buffers
1:037d24e:      */
1:037d24e:     static volatile boolean blockedOnBackpressure = false;
1:037d24e:     @Test
1:037d24e:     @BMRule(name = "Greatest name in the world",
1:037d24e:             targetClass="HintsBufferPool",
1:037d24e:             targetMethod="switchCurrentBuffer",
1:037d24e:             targetLocation="AT INVOKE java.util.concurrent.BlockingQueue.take",
1:037d24e:             action="org.apache.cassandra.hints.HintsBufferPoolTest.blockedOnBackpressure = true;")
1:037d24e:     public void testBackpressure() throws Exception
1:037d24e:     {
1:037d24e:         Queue<HintsBuffer> returnedBuffers = new ConcurrentLinkedQueue<>();
1:037d24e:         HintsBufferPool pool = new HintsBufferPool(256, (buffer, p) -> returnedBuffers.offer(buffer));
1:037d24e: 
1:037d24e:         Thread blocked = new Thread(() -> {
1:037d24e:             for (int ii = 0; ii < 512; ii++)
1:037d24e:                 pool.write(ImmutableList.of(UUID.randomUUID()), HintsBufferTest.createHint(ii, ii));
1:037d24e:         });
1:037d24e:         blocked.start();
1:037d24e: 
1:037d24e:         Util.spinAssertEquals(State.WAITING, () -> blocked.getState(), 1);
1:037d24e: 
1:037d24e:         while (blocked.isAlive())
1:037d24e:             if (!returnedBuffers.isEmpty())
1:037d24e:                 pool.offer(returnedBuffers.poll().recycle());
1:037d24e: 
1:037d24e:         assertTrue(blockedOnBackpressure);
1:037d24e:     }
1:037d24e: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:037d24e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import org.apache.cassandra.Util;
1: import org.jboss.byteman.contrib.bmunit.BMRule;
1: import org.jboss.byteman.contrib.bmunit.BMUnitRunner;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
1: import com.google.common.collect.ImmutableList;
1: 
1: import static junit.framework.Assert.*;
1: 
1: import java.lang.Thread.State;
1: import java.util.Queue;
1: import java.util.UUID;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: 
1: @RunWith(BMUnitRunner.class)
1: public class HintsBufferPoolTest
1: {
1: 
1:     @BeforeClass
1:     public static void defineSchema()
1:     {
1:         HintsBufferTest.defineSchema();
1:     }
1: 
1:     /*
1:      * Check that the hints buffer pool will only drain a limited number of buffers
1:      */
1:     static volatile boolean blockedOnBackpressure = false;
1:     @Test
1:     @BMRule(name = "Greatest name in the world",
1:             targetClass="HintsBufferPool",
1:             targetMethod="switchCurrentBuffer",
1:             targetLocation="AT INVOKE java.util.concurrent.BlockingQueue.take",
1:             action="org.apache.cassandra.hints.HintsBufferPoolTest.blockedOnBackpressure = true;")
1:     public void testBackpressure() throws Exception
1:     {
1:         Queue<HintsBuffer> returnedBuffers = new ConcurrentLinkedQueue<>();
1:         HintsBufferPool pool = new HintsBufferPool(256, (buffer, p) -> returnedBuffers.offer(buffer));
1: 
1:         Thread blocked = new Thread(() -> {
1:             for (int ii = 0; ii < 512; ii++)
1:                 pool.write(ImmutableList.of(UUID.randomUUID()), HintsBufferTest.createHint(ii, ii));
1:         });
1:         blocked.start();
1: 
1:         Util.spinAssertEquals(State.WAITING, () -> blocked.getState(), 1);
1: 
1:         while (blocked.isAlive())
1:             if (!returnedBuffers.isEmpty())
1:                 pool.offer(returnedBuffers.poll().recycle());
1: 
1:         assertTrue(blockedOnBackpressure);
1:     }
1: }
============================================================================