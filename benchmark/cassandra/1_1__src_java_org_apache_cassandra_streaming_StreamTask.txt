1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming;
1:5151169: 
1:5151169: import java.util.UUID;
1:5151169: 
1:5151169: /**
1:5151169:  * StreamTask is an abstraction of the streaming task performed over specific ColumnFamily.
1:5151169:  */
1:5151169: public abstract class StreamTask
1:5151169: {
1:5151169:     /** StreamSession that this task belongs */
1:5151169:     protected final StreamSession session;
1:5151169: 
1:5151169:     protected final UUID cfId;
1:5151169: 
1:5151169:     protected StreamTask(StreamSession session, UUID cfId)
1:5151169:     {
1:5151169:         this.session = session;
1:5151169:         this.cfId = cfId;
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total number of files this task receives/streams.
1:5151169:      */
1:5151169:     public abstract int getTotalNumberOfFiles();
1:5151169: 
1:5151169:     /**
1:5151169:      * @return total bytes expected to receive
1:5151169:      */
1:5151169:     public abstract long getTotalSize();
1:5151169: 
1:5151169:     /**
1:04fd84c:      * Abort the task.
1:04fd84c:      * Subclass should implement cleaning up resources.
1:04fd84c:      */
1:04fd84c:     public abstract void abort();
1:04fd84c: 
1:04fd84c:     /**
1:5151169:      * @return StreamSummary that describes this task
1:5151169:      */
1:5151169:     public StreamSummary getSummary()
1:5151169:     {
1:5151169:         return new StreamSummary(cfId, getTotalNumberOfFiles(), getTotalSize());
1:5151169:     }
1:5151169: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:04fd84c
/////////////////////////////////////////////////////////////////////////
1:      * Abort the task.
1:      * Subclass should implement cleaning up resources.
1:      */
1:     public abstract void abort();
1: 
1:     /**
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming;
1: 
1: import java.util.UUID;
1: 
1: /**
1:  * StreamTask is an abstraction of the streaming task performed over specific ColumnFamily.
1:  */
1: public abstract class StreamTask
1: {
1:     /** StreamSession that this task belongs */
1:     protected final StreamSession session;
1: 
1:     protected final UUID cfId;
1: 
1:     protected StreamTask(StreamSession session, UUID cfId)
1:     {
1:         this.session = session;
1:         this.cfId = cfId;
1:     }
1: 
1:     /**
1:      * @return total number of files this task receives/streams.
1:      */
1:     public abstract int getTotalNumberOfFiles();
1: 
1:     /**
1:      * @return total bytes expected to receive
1:      */
1:     public abstract long getTotalSize();
1: 
1:     /**
1:      * @return StreamSummary that describes this task
1:      */
1:     public StreamSummary getSummary()
1:     {
1:         return new StreamSummary(cfId, getTotalNumberOfFiles(), getTotalSize());
1:     }
1: }
============================================================================