1:88edbed: /*
1:88edbed: * Licensed to the Apache Software Foundation (ASF) under one
1:88edbed: * or more contributor license agreements.  See the NOTICE file
1:88edbed: * distributed with this work for additional information
1:88edbed: * regarding copyright ownership.  The ASF licenses this file
1:88edbed: * to you under the Apache License, Version 2.0 (the
1:88edbed: * "License"); you may not use this file except in compliance
1:88edbed: * with the License.  You may obtain a copy of the License at
1:88edbed: *
1:88edbed: *    http://www.apache.org/licenses/LICENSE-2.0
1:88edbed: *
1:88edbed: * Unless required by applicable law or agreed to in writing,
1:88edbed: * software distributed under the License is distributed on an
1:88edbed: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:88edbed: * KIND, either express or implied.  See the License for the
1:88edbed: * specific language governing permissions and limitations
1:88edbed: * under the License.
1:88edbed: */
1:7e648c8: package org.apache.cassandra.utils;
1:7e648c8: 
1:a991b64: import java.io.*;
1:e7a385a: import java.nio.ByteBuffer;
1:7e648c8: import java.util.Random;
1:7e648c8: 
1:a991b64: public class KeyGenerator
1:a991b64: {
1:9484783:     private static ByteBuffer randomKey(Random r) 
1:9484783:     {
1:790cca1:         byte[] bytes = new byte[48];
1:790cca1:         r.nextBytes(bytes);
1:e7a385a:         return ByteBuffer.wrap(bytes);
2:7e648c8:     }
1:7e648c8: 
1:a991b64:     static class RandomStringGenerator implements ResetableIterator<ByteBuffer>
1:a991b64:     {
1:7e648c8:         int i, n, seed;
1:7e648c8:         Random random;
1:7e648c8: 
1:9484783:         RandomStringGenerator(int seed, int n) 
1:9484783:         {
1:7e648c8:             i = 0;
1:7e648c8:             this.seed = seed;
1:7e648c8:             this.n = n;
1:7e648c8:             reset();
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public int size() 
1:9484783:         {
1:7e648c8:             return n;
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public void reset() 
1:9484783:         {
1:7e648c8:             random = new Random(seed);
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public boolean hasNext() 
1:9484783:         {
1:7e648c8:             return i < n;
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public ByteBuffer next() 
1:9484783:         {
1:7e648c8:             i++;
1:7e648c8:             return randomKey(random);
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public void remove() 
1:9484783:         {
1:7e648c8:             throw new UnsupportedOperationException();
1:7e648c8:         }
1:7e648c8:     }
1:7e648c8: 
1:a991b64:     static class IntGenerator implements ResetableIterator<ByteBuffer>
1:a991b64:     {
1:7e648c8:         private int i, start, n;
1:7e648c8: 
1:9484783:         IntGenerator(int n) 
1:9484783:         {
1:7e648c8:             this(0, n);
1:7e648c8:         }
1:7e648c8: 
1:9484783:         IntGenerator(int start, int n) 
1:9484783:         {
1:7e648c8:             this.start = start;
1:7e648c8:             this.n = n;
1:7e648c8:             reset();
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public int size() 
1:9484783:         {
1:7e648c8:             return n - start;
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public void reset() 
1:9484783:         {
1:7e648c8:             i = start;
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public boolean hasNext() 
1:9484783:         {
1:7e648c8:             return i < n;
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public ByteBuffer next() 
1:9484783:         {
1:b62b0ae:             return ByteBufferUtil.bytes(Integer.toString(i++));
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public void remove() 
1:9484783:         {
1:7e648c8:             throw new UnsupportedOperationException();
1:7e648c8:         }
1:7e648c8:     }
1:7e648c8: 
1:a991b64:     static class WordGenerator implements ResetableIterator<ByteBuffer>
1:a991b64:     {
1:7e648c8:         static int WORDS;
1:7e648c8: 
1:9484783:         static 
1:9484783:         {
1:9484783:             try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("/usr/share/dict/words")))) 
1:9484783:             {
1:9484783:                 while (br.ready()) 
1:9484783:                 {
1:7e648c8:                     br.readLine();
1:7e648c8:                     WORDS++;
1:9484783:                 }
1:7e648c8:             } 
1:9484783:             catch (IOException e) 
1:9484783:             {
1:0c0c6e5:                 WORDS = 0;
1:7e648c8:             }
1:7e648c8:         }
1:7e648c8: 
1:7e648c8:         BufferedReader reader;
1:7e648c8:         private int modulo;
1:7e648c8:         private int skip;
1:790cca1:         byte[] next;
1:7e648c8: 
1:9484783:         WordGenerator(int skip, int modulo) 
1:9484783:         {
1:7e648c8:             this.skip = skip;
1:7e648c8:             this.modulo = modulo;
1:7e648c8:             reset();
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public int size() 
1:9484783:         {
1:7e648c8:             return (1 + WORDS - skip) / modulo;
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public void reset() 
1:9484783:         {
1:9484783:             try 
1:9484783:             {
1:7e648c8:                 reader = new BufferedReader(new InputStreamReader(new FileInputStream("/usr/share/dict/words")));
1:9484783:             } 
1:9484783:             catch (FileNotFoundException e) 
1:9484783:             {
2:7e648c8:                 throw new RuntimeException(e);
1:7e648c8:             }
1:9484783:             for (int i = 0; i < skip; i++) 
1:9484783:             {
1:9484783:                 try 
1:9484783:                 {
1:7e648c8:                     reader.readLine();
1:9484783:                 } 
1:9484783:                 catch (IOException e) 
1:9484783:                 {
1:7e648c8:                     throw new RuntimeException(e);
1:7e648c8:                 }
1:7e648c8:             }
1:7e648c8:             next();
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public boolean hasNext() 
1:9484783:         {
1:7e648c8:             return next != null;
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public ByteBuffer next() 
1:9484783:         {
1:9484783:             try 
1:9484783:             {
1:790cca1:                 byte[] s = next;
1:9484783:                 for (int i = 0; i < modulo; i++) 
1:9484783:                 {
1:790cca1:                     String line = reader.readLine();
1:790cca1:                     next = line == null ? null : line.getBytes();
1:7e648c8:                 }
1:e7a385a:                 return s == null ? null : ByteBuffer.wrap(s);
1:9484783:             } 
1:9484783:             catch (IOException e) 
1:9484783:             {
1:7e648c8:                 throw new RuntimeException(e);
1:7e648c8:             }
1:7e648c8:         }
1:7e648c8: 
1:9484783:         public void remove() 
1:9484783:         {
1:7e648c8:             throw new UnsupportedOperationException();
1:7e648c8:         }
1:7e648c8:     }
1:7e648c8: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9484783
/////////////////////////////////////////////////////////////////////////
1:     private static ByteBuffer randomKey(Random r) 
1:     {
/////////////////////////////////////////////////////////////////////////
1:         RandomStringGenerator(int seed, int n) 
1:         {
1:         public int size() 
1:         {
1:         public void reset() 
1:         {
1:         public boolean hasNext() 
1:         {
1:         public ByteBuffer next() 
1:         {
1:         public void remove() 
1:         {
/////////////////////////////////////////////////////////////////////////
1:         IntGenerator(int n) 
1:         {
1:         IntGenerator(int start, int n) 
1:         {
1:         public int size() 
1:         {
1:         public void reset() 
1:         {
1:         public boolean hasNext() 
1:         {
1:         public ByteBuffer next() 
1:         {
1:         public void remove() 
1:         {
/////////////////////////////////////////////////////////////////////////
1:         static 
1:         {
1:             try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("/usr/share/dict/words")))) 
1:             {
1:                 while (br.ready()) 
1:                 {
1:             } 
1:             catch (IOException e) 
1:             {
/////////////////////////////////////////////////////////////////////////
1:         WordGenerator(int skip, int modulo) 
1:         {
1:         public int size() 
1:         {
1:         public void reset() 
1:         {
1:             try 
1:             {
1:             } 
1:             catch (FileNotFoundException e) 
1:             {
1:             for (int i = 0; i < skip; i++) 
1:             {
1:                 try 
1:                 {
1:                 } 
1:                 catch (IOException e) 
1:                 {
1:         public boolean hasNext() 
1:         {
1:         public ByteBuffer next() 
1:         {
1:             try 
1:             {
1:                 for (int i = 0; i < modulo; i++) 
1:                 {
1:             } 
1:             catch (IOException e) 
1:             {
1:         public void remove() 
1:         {
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
1: public class KeyGenerator
1: {
1:     static class RandomStringGenerator implements ResetableIterator<ByteBuffer>
1:     {
/////////////////////////////////////////////////////////////////////////
1:     static class IntGenerator implements ResetableIterator<ByteBuffer>
1:     {
/////////////////////////////////////////////////////////////////////////
1:     static class WordGenerator implements ResetableIterator<ByteBuffer>
1:     {
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
1:             return ByteBufferUtil.bytes(Integer.toString(i++));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedReader;
0: import java.io.FileInputStream;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: import java.io.InputStreamReader;
1: import java.nio.ByteBuffer;
0:     private static ByteBuffer randomKey(Random r) {
1:         return ByteBuffer.wrap(bytes);
0:     static class RandomStringGenerator implements ResetableIterator<ByteBuffer> {
/////////////////////////////////////////////////////////////////////////
0:         public ByteBuffer next() {
/////////////////////////////////////////////////////////////////////////
0:     static class IntGenerator implements ResetableIterator<ByteBuffer> {
/////////////////////////////////////////////////////////////////////////
0:         public ByteBuffer next() {
0:             return ByteBuffer.wrap(Integer.toString(i++).getBytes());
/////////////////////////////////////////////////////////////////////////
0:     static class WordGenerator implements ResetableIterator<ByteBuffer> {
/////////////////////////////////////////////////////////////////////////
0:         public ByteBuffer next() {
1:                 return s == null ? null : ByteBuffer.wrap(s);
commit:0172497
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder buffer = new StringBuilder();
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
commit:afd3c27
commit:0c0c6e5
/////////////////////////////////////////////////////////////////////////
1:                 WORDS = 0;
commit:7e648c8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
0: import java.io.*;
1: import java.util.Random;
1: 
0: public class KeyGenerator {
0:     private static String randomKey(Random r) {
0:         StringBuffer buffer = new StringBuffer();
0:         for (int j = 0; j < 16; j++) {
0:             buffer.append((char)r.nextInt());
1:         }
0:         return buffer.toString();
1:     }
1: 
0:     static class RandomStringGenerator implements ResetableIterator<String> {
1:         int i, n, seed;
1:         Random random;
1: 
0:         RandomStringGenerator(int seed, int n) {
1:             i = 0;
1:             this.seed = seed;
1:             this.n = n;
1:             reset();
1:         }
1: 
0:         public int size() {
1:             return n;
1:         }
1: 
0:         public void reset() {
1:             random = new Random(seed);
1:         }
1: 
0:         public boolean hasNext() {
1:             return i < n;
1:         }
1: 
0:         public String next() {
1:             i++;
1:             return randomKey(random);
1:         }
1: 
0:         public void remove() {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: 
0:     static class IntGenerator implements ResetableIterator<String> {
1:         private int i, start, n;
1: 
0:         IntGenerator(int n) {
1:             this(0, n);
1:         }
1: 
0:         IntGenerator(int start, int n) {
1:             this.start = start;
1:             this.n = n;
1:             reset();
1:         }
1: 
0:         public int size() {
1:             return n - start;
1:         }
1: 
0:         public void reset() {
1:             i = start;
1:         }
1: 
0:         public boolean hasNext() {
1:             return i < n;
1:         }
1: 
0:         public String next() {
0:             return Integer.toString(i++);
1:         }
1: 
0:         public void remove() {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: 
0:     static class WordGenerator implements ResetableIterator<String> {
1:         static int WORDS;
1: 
0:         static {
0:             try {
0:                 BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("/usr/share/dict/words")));
0:                 while (br.ready()) {
1:                     br.readLine();
1:                     WORDS++;
1:                 }
0:             } catch (IOException e) {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         BufferedReader reader;
1:         private int modulo;
1:         private int skip;
0:         String next;
1: 
0:         WordGenerator(int skip, int modulo) {
1:             this.skip = skip;
1:             this.modulo = modulo;
1:             reset();
1:         }
1: 
0:         public int size() {
1:             return (1 + WORDS - skip) / modulo;
1:         }
1: 
0:         public void reset() {
0:             try {
1:                 reader = new BufferedReader(new InputStreamReader(new FileInputStream("/usr/share/dict/words")));
0:             } catch (FileNotFoundException e) {
1:                 throw new RuntimeException(e);
1:             }
0:             for (int i = 0; i < skip; i++) {
0:                 try {
1:                     reader.readLine();
0:                 } catch (IOException e) {
1:                     throw new RuntimeException(e);
1:                 }
1:             }
1:             next();
1:         }
1: 
0:         public boolean hasNext() {
1:             return next != null;
1:         }
1: 
0:         public String next() {
0:             try {
0:                 String s = next;
0:                 for (int i = 0; i < modulo; i++) {
0:                     next = reader.readLine();
1:                 }
0:                 return s;
0:             } catch (IOException e) {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1: 
0:         public void remove() {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: }
commit:7a6f421
/////////////////////////////////////////////////////////////////////////
commit:a996c82
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.utils;
0: 
0: import java.io.*;
0: import java.util.Random;
0: 
0: public class KeyGenerator {
0:     private static String randomKey(Random r) {
0:         StringBuffer buffer = new StringBuffer();
0:         for (int j = 0; j < 16; j++) {
0:             buffer.append((char)r.nextInt());
0:         }
0:         return buffer.toString();
0:     }
0: 
0:     static class RandomStringGenerator implements ResetableIterator<String> {
0:         int i, n, seed;
0:         Random random;
0: 
0:         RandomStringGenerator(int seed, int n) {
0:             i = 0;
0:             this.seed = seed;
0:             this.n = n;
0:             reset();
0:         }
0: 
0:         public int size() {
0:             return n;
0:         }
0: 
0:         public void reset() {
0:             random = new Random(seed);
0:         }
0: 
0:         public boolean hasNext() {
0:             return i < n;
0:         }
0: 
0:         public String next() {
0:             i++;
0:             return randomKey(random);
0:         }
0: 
0:         public void remove() {
0:             throw new UnsupportedOperationException();
0:         }
0:     }
0: 
0:     static class IntGenerator implements ResetableIterator<String> {
0:         private int i, start, n;
0: 
0:         IntGenerator(int n) {
0:             this(0, n);
0:         }
0: 
0:         IntGenerator(int start, int n) {
0:             this.start = start;
0:             this.n = n;
0:             reset();
0:         }
0: 
0:         public int size() {
0:             return n - start;
0:         }
0: 
0:         public void reset() {
0:             i = start;
0:         }
0: 
0:         public boolean hasNext() {
0:             return i < n;
0:         }
0: 
0:         public String next() {
0:             return Integer.toString(i++);
0:         }
0: 
0:         public void remove() {
0:             throw new UnsupportedOperationException();
0:         }
0:     }
0: 
0:     static class WordGenerator implements ResetableIterator<String> {
0:         static int WORDS;
0: 
0:         static {
0:             try {
0:                 BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("/usr/share/dict/words")));
0:                 while (br.ready()) {
0:                     br.readLine();
0:                     WORDS++;
0:                 }
0:             } catch (IOException e) {
0:                 throw new RuntimeException(e);
0:             }
0:         }
0: 
0:         BufferedReader reader;
0:         private int modulo;
0:         private int skip;
0:         String next;
0: 
0:         WordGenerator(int skip, int modulo) {
0:             this.skip = skip;
0:             this.modulo = modulo;
0:             reset();
0:         }
0: 
0:         public int size() {
0:             return (1 + WORDS - skip) / modulo;
0:         }
0: 
0:         public void reset() {
0:             try {
0:                 reader = new BufferedReader(new InputStreamReader(new FileInputStream("/usr/share/dict/words")));
0:             } catch (FileNotFoundException e) {
0:                 throw new RuntimeException(e);
0:             }
0:             for (int i = 0; i < skip; i++) {
0:                 try {
0:                     reader.readLine();
0:                 } catch (IOException e) {
0:                     throw new RuntimeException(e);
0:                 }
0:             }
0:             next();
0:         }
0: 
0:         public boolean hasNext() {
0:             return next != null;
0:         }
0: 
0:         public String next() {
0:             try {
0:                 String s = next;
0:                 for (int i = 0; i < modulo; i++) {
0:                     next = reader.readLine();
0:                 }
0:                 return s;
0:             } catch (IOException e) {
0:                 throw new RuntimeException(e);
0:             }
0:         }
0: 
0:         public void remove() {
0:             throw new UnsupportedOperationException();
0:         }
0:     }
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:790cca1
/////////////////////////////////////////////////////////////////////////
0:     private static byte[] randomKey(Random r) {
1:         byte[] bytes = new byte[48];
1:         r.nextBytes(bytes);
0:         return bytes;
0:     static class RandomStringGenerator implements ResetableIterator<byte[]> {
/////////////////////////////////////////////////////////////////////////
0:         public byte[] next() {
/////////////////////////////////////////////////////////////////////////
0:     static class IntGenerator implements ResetableIterator<byte[]> {
/////////////////////////////////////////////////////////////////////////
0:         public byte[] next() {
0:             return Integer.toString(i++).getBytes();
/////////////////////////////////////////////////////////////////////////
0:     static class WordGenerator implements ResetableIterator<byte[]> {
/////////////////////////////////////////////////////////////////////////
1:         byte[] next;
/////////////////////////////////////////////////////////////////////////
0:         public byte[] next() {
1:                 byte[] s = next;
1:                     String line = reader.readLine();
1:                     next = line == null ? null : line.getBytes();
============================================================================