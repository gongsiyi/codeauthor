1:7536429: package org.apache.cassandra.stress.settings;
1:7536429: /*
1:7536429:  * 
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  * 
1:7536429:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  * 
1:7536429:  * Unless required by applicable law or agreed to in writing,
1:7536429:  * software distributed under the License is distributed on an
1:7536429:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7536429:  * KIND, either express or implied.  See the License for the
1:7536429:  * specific language governing permissions and limitations
1:7536429:  * under the License.
1:7536429:  * 
1:7536429:  */
3:7536429: 
1:7536429: 
1:7536429: import java.util.Arrays;
1:7536429: import java.util.List;
1:7536429: import java.util.regex.Matcher;
1:7536429: import java.util.regex.Pattern;
1:7536429: 
1:0580fb2: import com.google.common.base.Function;
1:7536429: 
1:7536429: import org.apache.cassandra.stress.generate.DistributionFactory;
1:7536429: import org.apache.cassandra.stress.generate.RatioDistribution;
1:7536429: import org.apache.cassandra.stress.generate.RatioDistributionFactory;
1:7536429: 
1:7536429: /**
1:7536429:  * For selecting a mathematical distribution
1:7536429:  */
1:7536429: public class OptionRatioDistribution extends Option
3:7536429: {
1:7536429: 
1:0580fb2:     public static final Function<String, RatioDistributionFactory> BUILDER = new Function<String, RatioDistributionFactory>()
1:0580fb2:     {
1:0580fb2:         public RatioDistributionFactory apply(String s)
1:0580fb2:         {
1:0580fb2:             return get(s);
1:0580fb2:         }
1:0580fb2:     };
1:0580fb2: 
1:7536429:     private static final Pattern FULL = Pattern.compile("(.*)/([0-9]+[KMB]?)", Pattern.CASE_INSENSITIVE);
1:7536429: 
1:7536429:     final OptionDistribution delegate;
1:7536429:     private double divisor;
1:0580fb2:     final String defaultSpec;
1:7536429: 
1:7536429:     public OptionRatioDistribution(String prefix, String defaultSpec, String description)
1:7536429:     {
1:0580fb2:         this(prefix, defaultSpec, description, defaultSpec != null);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public OptionRatioDistribution(String prefix, String defaultSpec, String description, boolean required)
1:0580fb2:     {
1:0580fb2:         delegate = new OptionDistribution(prefix, null, description, required);
1:0580fb2:         this.defaultSpec = defaultSpec;
3:7536429:     }
1:7536429: 
2:7536429:     @Override
1:7536429:     public boolean accept(String param)
1:7536429:     {
1:7536429:         Matcher m = FULL.matcher(param);
1:7536429:         if (!m.matches() || !delegate.accept(m.group(1)))
1:7536429:             return false;
1:7536429:         divisor = OptionDistribution.parseLong(m.group(2));
1:7536429:         return true;
1:7536429:     }
1:7536429: 
1:7536429:     public static RatioDistributionFactory get(String spec)
1:7536429:     {
1:0580fb2:         OptionRatioDistribution opt = new OptionRatioDistribution("", "", "", true);
1:7536429:         if (!opt.accept(spec))
1:b3573f3:             throw new IllegalArgumentException("Invalid ratio definition: "+spec);
1:7536429:         return opt.get();
1:7536429:     }
1:7536429: 
1:7536429:     public RatioDistributionFactory get()
1:7536429:     {
1:0580fb2:         if (delegate.setByUser())
1:0580fb2:             return new DelegateFactory(delegate.get(), divisor);
1:0580fb2:         if (defaultSpec == null)
1:0580fb2:             return null;
1:f708c1e:         OptionRatioDistribution sub = new OptionRatioDistribution("", null, null, true);
1:0580fb2:         if (!sub.accept(defaultSpec))
1:0580fb2:             throw new IllegalStateException("Invalid default spec: " + defaultSpec);
1:0580fb2:         return sub.get();
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public boolean happy()
1:7536429:     {
1:7536429:         return delegate.happy();
1:7536429:     }
1:7536429: 
1:7536429:     public String longDisplay()
1:7536429:     {
1:7536429:         return delegate.longDisplay();
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public List<String> multiLineDisplay()
1:7536429:     {
1:7536429:         return Arrays.asList(
1:7536429:                 GroupedOptions.formatMultiLine("EXP(min..max)/divisor", "An exponential ratio distribution over the range [min..max]/divisor"),
1:7536429:                 GroupedOptions.formatMultiLine("EXTREME(min..max,shape)/divisor", "An extreme value (Weibull) ratio distribution over the range [min..max]/divisor"),
1:7536429:                 GroupedOptions.formatMultiLine("GAUSSIAN(min..max,stdvrng)/divisor", "A gaussian/normal ratio distribution, where mean=(min+max)/2, and stdev is ((mean-min)/stdvrng)/divisor"),
1:7536429:                 GroupedOptions.formatMultiLine("GAUSSIAN(min..max,mean,stdev)/divisor", "A gaussian/normal ratio distribution, with explicitly defined mean and stdev"),
1:7536429:                 GroupedOptions.formatMultiLine("UNIFORM(min..max)/divisor", "A uniform ratio distribution over the range [min, max]/divisor"),
1:7536429:                 GroupedOptions.formatMultiLine("FIXED(val)/divisor", "A fixed ratio distribution, always returning the same value"),
1:7536429:                 "Preceding the name with ~ will invert the distribution, e.g. ~exp(1..10)/10 will yield 0.1 least, instead of most, often",
1:7536429:                 "Aliases: extr, gauss, normal, norm, weibull"
1:7536429:         );
1:7536429:     }
1:7536429: 
1:7536429:     boolean setByUser()
1:7536429:     {
1:7536429:         return delegate.setByUser();
1:7536429:     }
1:7536429: 
1:6bbfb55:     boolean present()
1:6bbfb55:     {
1:6bbfb55:         return delegate.present();
1:6bbfb55:     }
1:6bbfb55: 
1:7536429:     @Override
1:7536429:     public String shortDisplay()
1:7536429:     {
1:7536429:         return delegate.shortDisplay();
1:7536429:     }
1:938faa2:     public String getOptionAsString()
1:938faa2:     {
1:938faa2:         return delegate.getOptionAsString();
1:938faa2:     }
1:938faa2: 
1:7536429: 
1:7536429:     // factories
1:7536429: 
1:7536429:     private static final class DelegateFactory implements RatioDistributionFactory
1:7536429:     {
1:7536429:         final DistributionFactory delegate;
1:7536429:         final double divisor;
1:7536429: 
1:7536429:         private DelegateFactory(DistributionFactory delegate, double divisor)
1:7536429:         {
1:7536429:             this.delegate = delegate;
1:7536429:             this.divisor = divisor;
1:7536429:         }
1:7536429: 
1:7536429:         @Override
2:7536429:         public RatioDistribution get()
1:7536429:         {
1:7536429:             return new RatioDistribution(delegate.get(), divisor);
1:7536429:         }
1:938faa2: 
1:938faa2:         @Override
1:11aeeea:         public String getConfigAsString(){return String.format("Ratio: divisor=%f;delegate=%s",divisor, delegate.getConfigAsString());};
1:938faa2: 
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public int hashCode()
1:7536429:     {
1:7536429:         return delegate.hashCode();
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public boolean equals(Object that)
1:7536429:     {
1:7536429:         return super.equals(that) && ((OptionRatioDistribution) that).delegate.equals(this.delegate);
1:7536429:     }
1:7536429: 
1:7536429: }
============================================================================
author:Ben Slater
-------------------------------------------------------------------------------
commit:11aeeea
/////////////////////////////////////////////////////////////////////////
1:         public String getConfigAsString(){return String.format("Ratio: divisor=%f;delegate=%s",divisor, delegate.getConfigAsString());};
commit:938faa2
/////////////////////////////////////////////////////////////////////////
1:     public String getOptionAsString()
1:     {
1:         return delegate.getOptionAsString();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
0:         public String getConfigAsString(){return String.format("Ration: divisor=%f;delegate=%s",divisor, delegate.getConfigAsString());};
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:f708c1e
/////////////////////////////////////////////////////////////////////////
1:         OptionRatioDistribution sub = new OptionRatioDistribution("", null, null, true);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
1:     boolean present()
1:     {
1:         return delegate.present();
1:     }
1: 
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
/////////////////////////////////////////////////////////////////////////
1:     public static final Function<String, RatioDistributionFactory> BUILDER = new Function<String, RatioDistributionFactory>()
1:     {
1:         public RatioDistributionFactory apply(String s)
1:         {
1:             return get(s);
1:         }
1:     };
1: 
1:     final String defaultSpec;
1:         this(prefix, defaultSpec, description, defaultSpec != null);
1:     }
1: 
1:     public OptionRatioDistribution(String prefix, String defaultSpec, String description, boolean required)
1:     {
1:         delegate = new OptionDistribution(prefix, null, description, required);
1:         this.defaultSpec = defaultSpec;
/////////////////////////////////////////////////////////////////////////
1:         OptionRatioDistribution opt = new OptionRatioDistribution("", "", "", true);
/////////////////////////////////////////////////////////////////////////
1:         if (delegate.setByUser())
1:             return new DelegateFactory(delegate.get(), divisor);
1:         if (defaultSpec == null)
1:             return null;
0:         OptionRatioDistribution sub = new OptionRatioDistribution(delegate.prefix, null, null, true);
1:         if (!sub.accept(defaultSpec))
1:             throw new IllegalStateException("Invalid default spec: " + defaultSpec);
1:         return sub.get();
/////////////////////////////////////////////////////////////////////////
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import java.util.ArrayList;
1: import java.util.Arrays;
0: import java.util.HashMap;
1: import java.util.List;
0: import java.util.Map;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
0: import org.apache.commons.math3.distribution.ExponentialDistribution;
0: import org.apache.commons.math3.distribution.NormalDistribution;
0: import org.apache.commons.math3.distribution.UniformRealDistribution;
0: import org.apache.commons.math3.distribution.WeibullDistribution;
0: import org.apache.commons.math3.random.JDKRandomGenerator;
1: 
0: import org.apache.cassandra.stress.generate.Distribution;
0: import org.apache.cassandra.stress.generate.DistributionBoundApache;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
0: import org.apache.cassandra.stress.generate.DistributionFixed;
0: import org.apache.cassandra.stress.generate.DistributionInverted;
0: import org.apache.cassandra.stress.generate.DistributionOffsetApache;
1: import org.apache.cassandra.stress.generate.RatioDistribution;
1: import org.apache.cassandra.stress.generate.RatioDistributionFactory;
1: 
1: /**
1:  * For selecting a mathematical distribution
1:  */
1: public class OptionRatioDistribution extends Option
1: {
1: 
1:     private static final Pattern FULL = Pattern.compile("(.*)/([0-9]+[KMB]?)", Pattern.CASE_INSENSITIVE);
1: 
1:     final OptionDistribution delegate;
1:     private double divisor;
1: 
0:     private static final RatioDistribution DEFAULT = new RatioDistribution(new DistributionFixed(1), 1);
1: 
1:     public OptionRatioDistribution(String prefix, String defaultSpec, String description)
1:     {
0:         delegate = new OptionDistribution(prefix, defaultSpec, description);
1:     }
1: 
1:     @Override
1:     public boolean accept(String param)
1:     {
1:         Matcher m = FULL.matcher(param);
1:         if (!m.matches() || !delegate.accept(m.group(1)))
1:             return false;
1:         divisor = OptionDistribution.parseLong(m.group(2));
1:         return true;
1:     }
1: 
1:     public static RatioDistributionFactory get(String spec)
1:     {
0:         OptionRatioDistribution opt = new OptionRatioDistribution("", "", "");
1:         if (!opt.accept(spec))
0:             throw new IllegalArgumentException();
1:         return opt.get();
1:     }
1: 
1:     public RatioDistributionFactory get()
1:     {
0:         return !delegate.setByUser() ? new DefaultFactory() : new DelegateFactory(delegate.get(), divisor);
1:     }
1: 
1:     @Override
1:     public boolean happy()
1:     {
1:         return delegate.happy();
1:     }
1: 
1:     public String longDisplay()
1:     {
1:         return delegate.longDisplay();
1:     }
1: 
1:     @Override
1:     public List<String> multiLineDisplay()
1:     {
1:         return Arrays.asList(
1:                 GroupedOptions.formatMultiLine("EXP(min..max)/divisor", "An exponential ratio distribution over the range [min..max]/divisor"),
1:                 GroupedOptions.formatMultiLine("EXTREME(min..max,shape)/divisor", "An extreme value (Weibull) ratio distribution over the range [min..max]/divisor"),
1:                 GroupedOptions.formatMultiLine("GAUSSIAN(min..max,stdvrng)/divisor", "A gaussian/normal ratio distribution, where mean=(min+max)/2, and stdev is ((mean-min)/stdvrng)/divisor"),
1:                 GroupedOptions.formatMultiLine("GAUSSIAN(min..max,mean,stdev)/divisor", "A gaussian/normal ratio distribution, with explicitly defined mean and stdev"),
1:                 GroupedOptions.formatMultiLine("UNIFORM(min..max)/divisor", "A uniform ratio distribution over the range [min, max]/divisor"),
1:                 GroupedOptions.formatMultiLine("FIXED(val)/divisor", "A fixed ratio distribution, always returning the same value"),
1:                 "Preceding the name with ~ will invert the distribution, e.g. ~exp(1..10)/10 will yield 0.1 least, instead of most, often",
1:                 "Aliases: extr, gauss, normal, norm, weibull"
1:         );
1:     }
1: 
1:     boolean setByUser()
1:     {
1:         return delegate.setByUser();
1:     }
1: 
1:     @Override
1:     public String shortDisplay()
1:     {
1:         return delegate.shortDisplay();
1:     }
1: 
1:     // factories
1: 
0:     private static final class DefaultFactory implements RatioDistributionFactory
1:     {
1:         @Override
1:         public RatioDistribution get()
1:         {
0:             return DEFAULT;
1:         }
1:     }
1: 
1:     private static final class DelegateFactory implements RatioDistributionFactory
1:     {
1:         final DistributionFactory delegate;
1:         final double divisor;
1: 
1:         private DelegateFactory(DistributionFactory delegate, double divisor)
1:         {
1:             this.delegate = delegate;
1:             this.divisor = divisor;
1:         }
1: 
1:         @Override
1:         public RatioDistribution get()
1:         {
1:             return new RatioDistribution(delegate.get(), divisor);
1:         }
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return delegate.hashCode();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object that)
1:     {
1:         return super.equals(that) && ((OptionRatioDistribution) that).delegate.equals(this.delegate);
1:     }
1: 
1: }
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b3573f3
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalArgumentException("Invalid ratio definition: "+spec);
============================================================================