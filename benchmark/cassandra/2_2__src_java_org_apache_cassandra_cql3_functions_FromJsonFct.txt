1:c7b02d1: /*
1:c7b02d1:  * Licensed to the Apache Software Foundation (ASF) under one
1:c7b02d1:  * or more contributor license agreements.  See the NOTICE file
1:c7b02d1:  * distributed with this work for additional information
1:c7b02d1:  * regarding copyright ownership.  The ASF licenses this file
1:c7b02d1:  * to you under the Apache License, Version 2.0 (the
1:c7b02d1:  * "License"); you may not use this file except in compliance
1:c7b02d1:  * with the License.  You may obtain a copy of the License at
1:c7b02d1:  *
1:c7b02d1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c7b02d1:  *
1:c7b02d1:  * Unless required by applicable law or agreed to in writing, software
1:c7b02d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c7b02d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7b02d1:  * See the License for the specific language governing permissions and
1:c7b02d1:  * limitations under the License.
1:c7b02d1:  */
1:c7b02d1: package org.apache.cassandra.cql3.functions;
1:c7b02d1: 
1:c7b02d1: import java.io.IOException;
1:c7b02d1: import java.nio.ByteBuffer;
1:c7b02d1: import java.util.*;
1:c7b02d1: import java.util.concurrent.ConcurrentHashMap;
1:c7b02d1: 
1:c7b02d1: import org.apache.cassandra.cql3.Json;
1:c7b02d1: 
1:c7b02d1: import org.apache.cassandra.cql3.QueryOptions;
1:c7b02d1: import org.apache.cassandra.db.marshal.*;
1:c7b02d1: import org.apache.cassandra.exceptions.FunctionExecutionException;
1:c7b02d1: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:c7b02d1: 
1:c7b02d1: public class FromJsonFct extends NativeScalarFunction
1:c7b02d1: {
1:c7b02d1:     public static final FunctionName NAME = FunctionName.nativeFunction("fromjson");
1:c7b02d1: 
1:c7b02d1:     private static final Map<AbstractType<?>, FromJsonFct> instances = new ConcurrentHashMap<>();
1:c7b02d1: 
1:c7b02d1:     public static FromJsonFct getInstance(AbstractType<?> returnType)
1:c7b02d1:     {
1:c7b02d1:         FromJsonFct func = instances.get(returnType);
1:c7b02d1:         if (func == null)
1:c7b02d1:         {
1:c7b02d1:             func = new FromJsonFct(returnType);
1:c7b02d1:             instances.put(returnType, func);
1:c7b02d1:         }
1:c7b02d1:         return func;
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     private FromJsonFct(AbstractType<?> returnType)
1:c7b02d1:     {
1:c7b02d1:         super("fromjson", returnType, UTF8Type.instance);
1:c7b02d1:     }
1:c7b02d1: 
1:e0adc16:     public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c7b02d1:     {
1:c7b02d1:         assert parameters.size() == 1 : "Unexpectedly got " + parameters.size() + " arguments for fromJson()";
1:c7b02d1:         ByteBuffer argument = parameters.get(0);
1:c7b02d1:         if (argument == null)
1:c7b02d1:             return null;
1:c7b02d1: 
1:c7b02d1:         String jsonArg = UTF8Type.instance.getSerializer().deserialize(argument);
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             Object object = Json.JSON_OBJECT_MAPPER.readValue(jsonArg, Object.class);
1:c7b02d1:             if (object == null)
1:c7b02d1:                 return null;
1:c7b02d1:             return returnType.fromJSONObject(object).bindAndGet(QueryOptions.forProtocolVersion(protocolVersion));
1:c7b02d1:         }
1:c7b02d1:         catch (IOException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new FunctionExecutionException(NAME, Collections.singletonList("text"), String.format("Could not decode JSON string '%s': %s", jsonArg, exc.toString()));
1:c7b02d1:         }
1:c7b02d1:         catch (MarshalException exc)
1:c7b02d1:         {
1:c7b02d1:             throw FunctionExecutionException.create(this, exc);
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.cassandra.cql3.Json;
1: 
1: import org.apache.cassandra.cql3.QueryOptions;
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.exceptions.FunctionExecutionException;
1: import org.apache.cassandra.serializers.MarshalException;
1: 
1: public class FromJsonFct extends NativeScalarFunction
1: {
1:     public static final FunctionName NAME = FunctionName.nativeFunction("fromjson");
1: 
1:     private static final Map<AbstractType<?>, FromJsonFct> instances = new ConcurrentHashMap<>();
1: 
1:     public static FromJsonFct getInstance(AbstractType<?> returnType)
1:     {
1:         FromJsonFct func = instances.get(returnType);
1:         if (func == null)
1:         {
1:             func = new FromJsonFct(returnType);
1:             instances.put(returnType, func);
1:         }
1:         return func;
1:     }
1: 
1:     private FromJsonFct(AbstractType<?> returnType)
1:     {
1:         super("fromjson", returnType, UTF8Type.instance);
1:     }
1: 
0:     public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:     {
1:         assert parameters.size() == 1 : "Unexpectedly got " + parameters.size() + " arguments for fromJson()";
1:         ByteBuffer argument = parameters.get(0);
1:         if (argument == null)
1:             return null;
1: 
1:         String jsonArg = UTF8Type.instance.getSerializer().deserialize(argument);
1:         try
1:         {
1:             Object object = Json.JSON_OBJECT_MAPPER.readValue(jsonArg, Object.class);
1:             if (object == null)
1:                 return null;
1:             return returnType.fromJSONObject(object).bindAndGet(QueryOptions.forProtocolVersion(protocolVersion));
1:         }
1:         catch (IOException exc)
1:         {
1:             throw new FunctionExecutionException(NAME, Collections.singletonList("text"), String.format("Could not decode JSON string '%s': %s", jsonArg, exc.toString()));
1:         }
1:         catch (MarshalException exc)
1:         {
1:             throw FunctionExecutionException.create(this, exc);
1:         }
1:     }
1: }
============================================================================