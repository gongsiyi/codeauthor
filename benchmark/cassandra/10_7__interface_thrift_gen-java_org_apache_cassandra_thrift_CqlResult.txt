1:5630e15: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:5630e15:  *
1:5630e15:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:5630e15:  */
1:5630e15: package org.apache.cassandra.thrift;
1:5630e15: /*
1:5630e15:  * 
1:5630e15:  * Licensed to the Apache Software Foundation (ASF) under one
1:5630e15:  * or more contributor license agreements.  See the NOTICE file
1:5630e15:  * distributed with this work for additional information
1:5630e15:  * regarding copyright ownership.  The ASF licenses this file
1:5630e15:  * to you under the Apache License, Version 2.0 (the
1:5630e15:  * "License"); you may not use this file except in compliance
1:5630e15:  * with the License.  You may obtain a copy of the License at
1:5630e15:  * 
1:5630e15:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5630e15:  * 
1:5630e15:  * Unless required by applicable law or agreed to in writing,
1:5630e15:  * software distributed under the License is distributed on an
1:5630e15:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5630e15:  * KIND, either express or implied.  See the License for the
1:5630e15:  * specific language governing permissions and limitations
1:5630e15:  * under the License.
1:5630e15:  * 
1:5630e15:  */
9:5630e15: 
1:5630e15: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:b153d45: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:5630e15: import java.util.List;
1:5630e15: import java.util.ArrayList;
1:5630e15: import java.util.Map;
1:5630e15: import java.util.HashMap;
1:5630e15: import java.util.EnumMap;
1:5630e15: import java.util.Set;
1:5630e15: import java.util.HashSet;
1:5630e15: import java.util.EnumSet;
1:5630e15: import java.util.Collections;
1:5630e15: import java.util.BitSet;
1:5630e15: import java.nio.ByteBuffer;
1:5630e15: import java.util.Arrays;
1:5630e15: import org.slf4j.Logger;
1:5630e15: import org.slf4j.LoggerFactory;
1:5630e15: 
1:bffd9ea: public class CqlResult implements org.apache.thrift.TBase<CqlResult, CqlResult._Fields>, java.io.Serializable, Cloneable, Comparable<CqlResult> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlResult");
1:5630e15: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.LIST, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)3);
1:cc83c44:   private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)4);
1:5630e15: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new CqlResultStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new CqlResultTupleSchemeFactory());
1:b153d45:   }
1:b153d45: 
1:5630e15:   /**
1:5630e15:    * 
1:5630e15:    * @see CqlResultType
1:5630e15:    */
1:7c8c570:   public CqlResultType type; // required
1:b153d45:   public List<CqlRow> rows; // optional
1:b153d45:   public int num; // optional
1:b153d45:   public CqlMetadata schema; // optional
1:c8afd76: 
1:5630e15:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:5630e15:     /**
1:5630e15:      * 
1:5630e15:      * @see CqlResultType
1:5630e15:      */
1:5630e15:     TYPE((short)1, "type"),
1:5630e15:     ROWS((short)2, "rows"),
1:cc83c44:     NUM((short)3, "num"),
1:cc83c44:     SCHEMA((short)4, "schema");
1:5630e15: 
1:5630e15:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:5630e15: 
1:5630e15:     static {
1:5630e15:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:5630e15:         byName.put(field.getFieldName(), field);
1:c8afd76:       }
1:c8afd76:     }
1:5630e15: 
1:5630e15:     /**
1:5630e15:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:5630e15:      */
1:5630e15:     public static _Fields findByThriftId(int fieldId) {
1:5630e15:       switch(fieldId) {
2:5630e15:         case 1: // TYPE
1:5630e15:           return TYPE;
2:5630e15:         case 2: // ROWS
1:5630e15:           return ROWS;
2:5630e15:         case 3: // NUM
1:5630e15:           return NUM;
1:cc83c44:         case 4: // SCHEMA
1:cc83c44:           return SCHEMA;
2:5630e15:         default:
1:5630e15:           return null;
1:c8afd76:       }
1:c8afd76:     }
1:5630e15: 
1:5630e15:     /**
1:5630e15:      * Find the _Fields constant that matches fieldId, throwing an exception
1:5630e15:      * if it is not found.
1:5630e15:      */
1:5630e15:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:5630e15:       _Fields fields = findByThriftId(fieldId);
1:5630e15:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:5630e15:       return fields;
1:4ec9511:     }
1:5630e15: 
1:5630e15:     /**
1:5630e15:      * Find the _Fields constant that matches name, or null if its not found.
1:5630e15:      */
1:5630e15:     public static _Fields findByName(String name) {
1:5630e15:       return byName.get(name);
26:5630e15:     }
1:5630e15: 
1:5630e15:     private final short _thriftId;
1:5630e15:     private final String _fieldName;
1:5630e15: 
1:5630e15:     _Fields(short thriftId, String fieldName) {
1:5630e15:       _thriftId = thriftId;
1:5630e15:       _fieldName = fieldName;
1:5630e15:     }
1:5630e15: 
1:5630e15:     public short getThriftFieldId() {
1:5630e15:       return _thriftId;
1:5630e15:     }
1:5630e15: 
1:5630e15:     public String getFieldName() {
1:5630e15:       return _fieldName;
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   // isset id assignments
1:5630e15:   private static final int __NUM_ISSET_ID = 0;
1:b153d45:   private byte __isset_bitfield = 0;
1:b153d45:   private _Fields optionals[] = {_Fields.ROWS,_Fields.NUM,_Fields.SCHEMA};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:5630e15:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CqlResultType.class)));
1:4ec9511:     tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:4ec9511:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CqlRow.class))));
1:4ec9511:     tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:cc83c44:     tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:cc83c44:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CqlMetadata.class)));
1:5630e15:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlResult.class, metaDataMap);
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlResult() {
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlResult(
1:5630e15:     CqlResultType type)
6:5630e15:   {
1:5630e15:     this();
1:5630e15:     this.type = type;
1:5630e15:   }
1:5630e15: 
1:5630e15:   /**
1:5630e15:    * Performs a deep copy on <i>other</i>.
1:5630e15:    */
1:5630e15:   public CqlResult(CqlResult other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:5630e15:     if (other.isSetType()) {
1:5630e15:       this.type = other.type;
1:5630e15:     }
1:5630e15:     if (other.isSetRows()) {
1:bffd9ea:       List<CqlRow> __this__rows = new ArrayList<CqlRow>(other.rows.size());
1:5630e15:       for (CqlRow other_element : other.rows) {
1:5630e15:         __this__rows.add(new CqlRow(other_element));
1:5630e15:       }
1:5630e15:       this.rows = __this__rows;
1:5630e15:     }
1:5630e15:     this.num = other.num;
1:cc83c44:     if (other.isSetSchema()) {
1:cc83c44:       this.schema = new CqlMetadata(other.schema);
1:cc83c44:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlResult deepCopy() {
1:5630e15:     return new CqlResult(this);
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public void clear() {
1:5630e15:     this.type = null;
1:5630e15:     this.rows = null;
1:5630e15:     setNumIsSet(false);
1:5630e15:     this.num = 0;
1:cc83c44:     this.schema = null;
1:5630e15:   }
1:5630e15: 
1:5630e15:   /**
1:5630e15:    * 
1:5630e15:    * @see CqlResultType
1:5630e15:    */
1:5630e15:   public CqlResultType getType() {
1:5630e15:     return this.type;
1:5630e15:   }
1:5630e15: 
1:5630e15:   /**
1:5630e15:    * 
1:5630e15:    * @see CqlResultType
1:5630e15:    */
1:5630e15:   public CqlResult setType(CqlResultType type) {
1:5630e15:     this.type = type;
1:5630e15:     return this;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void unsetType() {
1:5630e15:     this.type = null;
1:5630e15:   }
1:5630e15: 
1:4ec9511:   /** Returns true if field type is set (has been assigned a value) and false otherwise */
1:5630e15:   public boolean isSetType() {
1:5630e15:     return this.type != null;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void setTypeIsSet(boolean value) {
1:5630e15:     if (!value) {
1:5630e15:       this.type = null;
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public int getRowsSize() {
1:5630e15:     return (this.rows == null) ? 0 : this.rows.size();
1:5630e15:   }
1:5630e15: 
1:5630e15:   public java.util.Iterator<CqlRow> getRowsIterator() {
1:5630e15:     return (this.rows == null) ? null : this.rows.iterator();
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void addToRows(CqlRow elem) {
1:5630e15:     if (this.rows == null) {
1:5630e15:       this.rows = new ArrayList<CqlRow>();
1:5630e15:     }
1:5630e15:     this.rows.add(elem);
1:5630e15:   }
1:5630e15: 
1:5630e15:   public List<CqlRow> getRows() {
1:5630e15:     return this.rows;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlResult setRows(List<CqlRow> rows) {
1:5630e15:     this.rows = rows;
1:5630e15:     return this;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void unsetRows() {
1:5630e15:     this.rows = null;
1:5630e15:   }
1:5630e15: 
1:4ec9511:   /** Returns true if field rows is set (has been assigned a value) and false otherwise */
1:5630e15:   public boolean isSetRows() {
1:5630e15:     return this.rows != null;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void setRowsIsSet(boolean value) {
1:5630e15:     if (!value) {
1:5630e15:       this.rows = null;
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public int getNum() {
1:5630e15:     return this.num;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlResult setNum(int num) {
1:5630e15:     this.num = num;
2:5630e15:     setNumIsSet(true);
1:5630e15:     return this;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void unsetNum() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
1:5630e15:   }
1:5630e15: 
1:4ec9511:   /** Returns true if field num is set (has been assigned a value) and false otherwise */
1:5630e15:   public boolean isSetNum() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void setNumIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
1:5630e15:   }
1:5630e15: 
1:cc83c44:   public CqlMetadata getSchema() {
1:cc83c44:     return this.schema;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlResult setSchema(CqlMetadata schema) {
1:cc83c44:     this.schema = schema;
1:cc83c44:     return this;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void unsetSchema() {
1:cc83c44:     this.schema = null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   /** Returns true if field schema is set (has been assigned a value) and false otherwise */
1:cc83c44:   public boolean isSetSchema() {
1:cc83c44:     return this.schema != null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void setSchemaIsSet(boolean value) {
1:cc83c44:     if (!value) {
1:cc83c44:       this.schema = null;
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:5630e15:   public void setFieldValue(_Fields field, Object value) {
1:5630e15:     switch (field) {
1:5630e15:     case TYPE:
1:5630e15:       if (value == null) {
1:5630e15:         unsetType();
5:5630e15:       } else {
1:5630e15:         setType((CqlResultType)value);
1:5630e15:       }
6:5630e15:       break;
1:5630e15: 
1:5630e15:     case ROWS:
1:5630e15:       if (value == null) {
1:5630e15:         unsetRows();
1:cc83c44:       } else {
1:5630e15:         setRows((List<CqlRow>)value);
1:cc83c44:       }
1:cc83c44:       break;
1:5630e15: 
1:5630e15:     case NUM:
1:5630e15:       if (value == null) {
1:5630e15:         unsetNum();
1:5630e15:       } else {
1:5630e15:         setNum((Integer)value);
1:b153d45:       }
1:5630e15:       break;
1:5630e15: 
1:cc83c44:     case SCHEMA:
1:cc83c44:       if (value == null) {
1:cc83c44:         unsetSchema();
1:cc83c44:       } else {
1:cc83c44:         setSchema((CqlMetadata)value);
1:cc83c44:       }
1:cc83c44:       break;
1:cc83c44: 
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public Object getFieldValue(_Fields field) {
1:5630e15:     switch (field) {
1:5630e15:     case TYPE:
1:5630e15:       return getType();
1:5630e15: 
1:5630e15:     case ROWS:
1:5630e15:       return getRows();
1:5630e15: 
1:5630e15:     case NUM:
1:7c8c570:       return Integer.valueOf(getNum());
1:5630e15: 
1:cc83c44:     case SCHEMA:
1:cc83c44:       return getSchema();
1:cc83c44: 
1:5630e15:     }
1:5630e15:     throw new IllegalStateException();
1:5630e15:   }
1:5630e15: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:5630e15:   public boolean isSet(_Fields field) {
1:5630e15:     if (field == null) {
1:5630e15:       throw new IllegalArgumentException();
1:5630e15:     }
1:5630e15: 
1:5630e15:     switch (field) {
1:5630e15:     case TYPE:
1:5630e15:       return isSetType();
1:5630e15:     case ROWS:
1:5630e15:       return isSetRows();
1:5630e15:     case NUM:
1:5630e15:       return isSetNum();
1:cc83c44:     case SCHEMA:
1:cc83c44:       return isSetSchema();
1:5630e15:     }
1:5630e15:     throw new IllegalStateException();
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public boolean equals(Object that) {
1:5630e15:     if (that == null)
1:5630e15:       return false;
1:5630e15:     if (that instanceof CqlResult)
1:5630e15:       return this.equals((CqlResult)that);
1:5630e15:     return false;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public boolean equals(CqlResult that) {
1:5630e15:     if (that == null)
1:5630e15:       return false;
1:5630e15: 
1:5630e15:     boolean this_present_type = true && this.isSetType();
1:5630e15:     boolean that_present_type = true && that.isSetType();
1:5630e15:     if (this_present_type || that_present_type) {
1:5630e15:       if (!(this_present_type && that_present_type))
1:5630e15:         return false;
1:5630e15:       if (!this.type.equals(that.type))
1:5630e15:         return false;
1:5630e15:     }
1:5630e15: 
1:5630e15:     boolean this_present_rows = true && this.isSetRows();
1:5630e15:     boolean that_present_rows = true && that.isSetRows();
1:5630e15:     if (this_present_rows || that_present_rows) {
1:5630e15:       if (!(this_present_rows && that_present_rows))
1:5630e15:         return false;
1:5630e15:       if (!this.rows.equals(that.rows))
1:5630e15:         return false;
1:5630e15:     }
1:5630e15: 
1:5630e15:     boolean this_present_num = true && this.isSetNum();
1:5630e15:     boolean that_present_num = true && that.isSetNum();
1:5630e15:     if (this_present_num || that_present_num) {
1:5630e15:       if (!(this_present_num && that_present_num))
1:5630e15:         return false;
1:5630e15:       if (this.num != that.num)
1:5630e15:         return false;
1:5630e15:     }
1:5630e15: 
1:cc83c44:     boolean this_present_schema = true && this.isSetSchema();
1:cc83c44:     boolean that_present_schema = true && that.isSetSchema();
1:cc83c44:     if (this_present_schema || that_present_schema) {
1:cc83c44:       if (!(this_present_schema && that_present_schema))
1:cc83c44:         return false;
1:cc83c44:       if (!this.schema.equals(that.schema))
1:cc83c44:         return false;
1:cc83c44:     }
1:cc83c44: 
1:5630e15:     return true;
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public int hashCode() {
1:5630e15:     HashCodeBuilder builder = new HashCodeBuilder();
1:5630e15: 
1:5630e15:     boolean present_type = true && (isSetType());
1:5630e15:     builder.append(present_type);
1:5630e15:     if (present_type)
1:5630e15:       builder.append(type.getValue());
1:5630e15: 
1:5630e15:     boolean present_rows = true && (isSetRows());
1:5630e15:     builder.append(present_rows);
1:5630e15:     if (present_rows)
1:5630e15:       builder.append(rows);
1:5630e15: 
1:5630e15:     boolean present_num = true && (isSetNum());
1:5630e15:     builder.append(present_num);
1:5630e15:     if (present_num)
1:5630e15:       builder.append(num);
1:5630e15: 
1:cc83c44:     boolean present_schema = true && (isSetSchema());
1:cc83c44:     builder.append(present_schema);
1:cc83c44:     if (present_schema)
1:cc83c44:       builder.append(schema);
1:cc83c44: 
1:5630e15:     return builder.toHashCode();
1:5630e15:   }
1:5630e15: 
1:bffd9ea:   @Override
1:5630e15:   public int compareTo(CqlResult other) {
1:5630e15:     if (!getClass().equals(other.getClass())) {
1:5630e15:       return getClass().getName().compareTo(other.getClass().getName());
1:5630e15:     }
1:5630e15: 
1:5630e15:     int lastComparison = 0;
1:5630e15: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
1:5630e15:     if (lastComparison != 0) {
1:5630e15:       return lastComparison;
1:cc83c44:     }
1:5630e15:     if (isSetType()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
1:cc83c44:       if (lastComparison != 0) {
1:cc83c44:         return lastComparison;
1:5630e15:       }
1:5630e15:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
1:5630e15:     if (lastComparison != 0) {
1:5630e15:       return lastComparison;
1:5630e15:     }
2:5630e15:     if (isSetRows()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
1:5630e15:       if (lastComparison != 0) {
1:5630e15:         return lastComparison;
1:5630e15:       }
1:5630e15:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
1:5630e15:     if (lastComparison != 0) {
1:5630e15:       return lastComparison;
1:5630e15:     }
2:5630e15:     if (isSetNum()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
1:5630e15:       if (lastComparison != 0) {
1:5630e15:         return lastComparison;
1:5630e15:       }
1:5630e15:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
1:5630e15:     if (lastComparison != 0) {
1:5630e15:       return lastComparison;
1:5630e15:     }
1:cc83c44:     if (isSetSchema()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
1:cc83c44:       if (lastComparison != 0) {
1:cc83c44:         return lastComparison;
1:cc83c44:       }
1:cc83c44:     }
1:5630e15:     return 0;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public _Fields fieldForId(int fieldId) {
1:5630e15:     return _Fields.findByThriftId(fieldId);
1:5630e15:   }
1:5630e15: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:5630e15:   }
1:5630e15: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public String toString() {
1:5630e15:     StringBuilder sb = new StringBuilder("CqlResult(");
1:5630e15:     boolean first = true;
1:5630e15: 
1:5630e15:     sb.append("type:");
1:5630e15:     if (this.type == null) {
1:5630e15:       sb.append("null");
1:5630e15:     } else {
1:5630e15:       sb.append(this.type);
1:5630e15:     }
1:5630e15:     first = false;
1:5630e15:     if (isSetRows()) {
1:5630e15:       if (!first) sb.append(", ");
1:5630e15:       sb.append("rows:");
1:5630e15:       if (this.rows == null) {
1:5630e15:         sb.append("null");
1:5630e15:       } else {
1:5630e15:         sb.append(this.rows);
1:5630e15:       }
1:5630e15:       first = false;
1:5630e15:     }
1:5630e15:     if (isSetNum()) {
1:5630e15:       if (!first) sb.append(", ");
1:5630e15:       sb.append("num:");
1:5630e15:       sb.append(this.num);
1:5630e15:       first = false;
1:5630e15:     }
1:cc83c44:     if (isSetSchema()) {
1:cc83c44:       if (!first) sb.append(", ");
1:cc83c44:       sb.append("schema:");
1:cc83c44:       if (this.schema == null) {
1:cc83c44:         sb.append("null");
1:cc83c44:       } else {
1:cc83c44:         sb.append(this.schema);
1:cc83c44:       }
1:cc83c44:       first = false;
1:cc83c44:     }
1:5630e15:     sb.append(")");
1:5630e15:     return sb.toString();
1:4ec9511:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:5630e15:     // check for required fields
1:5630e15:     if (type == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
1:4ec9511:     }
1:b153d45:     // check for sub-struct validity
1:b153d45:     if (schema != null) {
1:b153d45:       schema.validate();
1:b153d45:     }
1:4ec9511:   }
1:4ec9511: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class CqlResultStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlResultStandardScheme getScheme() {
1:b153d45:       return new CqlResultStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlResultStandardScheme extends StandardScheme<CqlResult> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlResult struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:b153d45:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b153d45:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:b153d45:           case 1: // TYPE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.type = CqlResultType.findByValue(iprot.readI32());
1:b153d45:               struct.setTypeIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 2: // ROWS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:b153d45:               {
1:a965977:                 org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
1:a965977:                 struct.rows = new ArrayList<CqlRow>(_list192.size);
1:a965977:                 for (int _i193 = 0; _i193 < _list192.size; ++_i193)
1:b153d45:                 {
1:bffd9ea:                   CqlRow _elem194;
1:a965977:                   _elem194 = new CqlRow();
1:a965977:                   _elem194.read(iprot);
1:a965977:                   struct.rows.add(_elem194);
1:b153d45:                 }
1:b153d45:                 iprot.readListEnd();
1:b153d45:               }
1:b153d45:               struct.setRowsIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 3: // NUM
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.num = iprot.readI32();
1:b153d45:               struct.setNumIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:cc83c44:           case 4: // SCHEMA
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.schema = new CqlMetadata();
1:b153d45:               struct.schema.read(iprot);
1:b153d45:               struct.setSchemaIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:b153d45:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:b153d45:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlResult struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:b153d45:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.type != null) {
1:b153d45:         oprot.writeFieldBegin(TYPE_FIELD_DESC);
1:b153d45:         oprot.writeI32(struct.type.getValue());
2:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.rows != null) {
1:b153d45:         if (struct.isSetRows()) {
1:b153d45:           oprot.writeFieldBegin(ROWS_FIELD_DESC);
1:b153d45:           {
1:b153d45:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rows.size()));
1:a965977:             for (CqlRow _iter195 : struct.rows)
1:b153d45:             {
1:a965977:               _iter195.write(oprot);
1:b153d45:             }
1:b153d45:             oprot.writeListEnd();
1:b153d45:           }
1:b153d45:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.isSetNum()) {
1:b153d45:         oprot.writeFieldBegin(NUM_FIELD_DESC);
1:b153d45:         oprot.writeI32(struct.num);
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.schema != null) {
1:b153d45:         if (struct.isSetSchema()) {
1:cc83c44:           oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
1:b153d45:           struct.schema.write(oprot);
1:cc83c44:           oprot.writeFieldEnd();
1:cc83c44:         }
1:cc83c44:       }
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:b153d45:     }
1:b153d45: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlResultTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlResultTupleScheme getScheme() {
1:b153d45:       return new CqlResultTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlResultTupleScheme extends TupleScheme<CqlResult> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlResult struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeI32(struct.type.getValue());
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetRows()) {
1:b153d45:         optionals.set(0);
1:b153d45:       }
1:b153d45:       if (struct.isSetNum()) {
1:b153d45:         optionals.set(1);
1:b153d45:       }
1:b153d45:       if (struct.isSetSchema()) {
1:b153d45:         optionals.set(2);
1:b153d45:       }
1:b153d45:       oprot.writeBitSet(optionals, 3);
1:b153d45:       if (struct.isSetRows()) {
1:b153d45:         {
1:b153d45:           oprot.writeI32(struct.rows.size());
1:a965977:           for (CqlRow _iter196 : struct.rows)
1:b153d45:           {
1:a965977:             _iter196.write(oprot);
1:b153d45:           }
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.isSetNum()) {
1:b153d45:         oprot.writeI32(struct.num);
1:b153d45:       }
1:b153d45:       if (struct.isSetSchema()) {
1:b153d45:         struct.schema.write(oprot);
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlResult struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.type = CqlResultType.findByValue(iprot.readI32());
1:b153d45:       struct.setTypeIsSet(true);
1:b153d45:       BitSet incoming = iprot.readBitSet(3);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         {
1:a965977:           org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:a965977:           struct.rows = new ArrayList<CqlRow>(_list197.size);
1:a965977:           for (int _i198 = 0; _i198 < _list197.size; ++_i198)
1:b153d45:           {
1:bffd9ea:             CqlRow _elem199;
1:a965977:             _elem199 = new CqlRow();
1:a965977:             _elem199.read(iprot);
1:a965977:             struct.rows.add(_elem199);
1:b153d45:           }
1:b153d45:         }
1:b153d45:         struct.setRowsIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.num = iprot.readI32();
1:b153d45:         struct.setNumIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         struct.schema = new CqlMetadata();
1:b153d45:         struct.schema.read(iprot);
1:b153d45:         struct.setSchemaIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:c8afd76: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class CqlResult implements org.apache.thrift.TBase<CqlResult, CqlResult._Fields>, java.io.Serializable, Cloneable, Comparable<CqlResult> {
/////////////////////////////////////////////////////////////////////////
1:       List<CqlRow> __this__rows = new ArrayList<CqlRow>(other.rows.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
1:     lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
1:     lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
1:     lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
/////////////////////////////////////////////////////////////////////////
1:                   CqlRow _elem194;
/////////////////////////////////////////////////////////////////////////
1:             CqlRow _elem199;
commit:a965977
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
1:                 struct.rows = new ArrayList<CqlRow>(_list192.size);
1:                 for (int _i193 = 0; _i193 < _list192.size; ++_i193)
0:                   CqlRow _elem194; // required
1:                   _elem194 = new CqlRow();
1:                   _elem194.read(iprot);
1:                   struct.rows.add(_elem194);
/////////////////////////////////////////////////////////////////////////
1:             for (CqlRow _iter195 : struct.rows)
1:               _iter195.write(oprot);
/////////////////////////////////////////////////////////////////////////
1:           for (CqlRow _iter196 : struct.rows)
1:             _iter196.write(oprot);
/////////////////////////////////////////////////////////////////////////
1:           org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:           struct.rows = new ArrayList<CqlRow>(_list197.size);
1:           for (int _i198 = 0; _i198 < _list197.size; ++_i198)
0:             CqlRow _elem199; // required
1:             _elem199 = new CqlRow();
1:             _elem199.read(iprot);
1:             struct.rows.add(_elem199);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfe1e1c
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
0:                 struct.rows = new ArrayList<CqlRow>(_list194.size);
0:                 for (int _i195 = 0; _i195 < _list194.size; ++_i195)
0:                   CqlRow _elem196; // required
0:                   _elem196 = new CqlRow();
0:                   _elem196.read(iprot);
0:                   struct.rows.add(_elem196);
/////////////////////////////////////////////////////////////////////////
0:             for (CqlRow _iter197 : struct.rows)
0:               _iter197.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter198 : struct.rows)
0:             _iter198.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:           struct.rows = new ArrayList<CqlRow>(_list199.size);
0:           for (int _i200 = 0; _i200 < _list199.size; ++_i200)
0:             CqlRow _elem201; // required
0:             _elem201 = new CqlRow();
0:             _elem201.read(iprot);
0:             struct.rows.add(_elem201);
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   CqlRow _elem188; // required
/////////////////////////////////////////////////////////////////////////
0:             CqlRow _elem193; // required
commit:1ea2a60
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list83.size);
0:               for (int _i84 = 0; _i84 < _list83.size; ++_i84)
0:                 CqlRow _elem85; // required
0:                 _elem85 = new CqlRow();
0:                 _elem85.read(iprot);
0:                 this.rows.add(_elem85);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter86 : this.rows)
0:             _iter86.write(oprot);
commit:087d24a
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list87.size);
0:               for (int _i88 = 0; _i88 < _list87.size; ++_i88)
0:                 CqlRow _elem89; // required
0:                 _elem89 = new CqlRow();
0:                 _elem89.read(iprot);
0:                 this.rows.add(_elem89);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter90 : this.rows)
0:             _iter90.write(oprot);
commit:3297a96
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list83.size);
0:               for (int _i84 = 0; _i84 < _list83.size; ++_i84)
0:                 CqlRow _elem85;
0:                 _elem85 = new CqlRow();
0:                 _elem85.read(iprot);
0:                 this.rows.add(_elem85);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter86 : this.rows)
0:             _iter86.write(oprot);
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8bf6e15
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
0:                 struct.rows = new ArrayList<CqlRow>(_list186.size);
0:                 for (int _i187 = 0; _i187 < _list186.size; ++_i187)
0:                   CqlRow _elem188; // optional
0:                   _elem188 = new CqlRow();
0:                   _elem188.read(iprot);
0:                   struct.rows.add(_elem188);
/////////////////////////////////////////////////////////////////////////
0:             for (CqlRow _iter189 : struct.rows)
0:               _iter189.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter190 : struct.rows)
0:             _iter190.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:           struct.rows = new ArrayList<CqlRow>(_list191.size);
0:           for (int _i192 = 0; _i192 < _list191.size; ++_i192)
0:             CqlRow _elem193; // optional
0:             _elem193 = new CqlRow();
0:             _elem193.read(iprot);
0:             struct.rows.add(_elem193);
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
0:                 struct.rows = new ArrayList<CqlRow>(_list174.size);
0:                 for (int _i175 = 0; _i175 < _list174.size; ++_i175)
0:                   CqlRow _elem176; // optional
0:                   _elem176 = new CqlRow();
0:                   _elem176.read(iprot);
0:                   struct.rows.add(_elem176);
/////////////////////////////////////////////////////////////////////////
0:             for (CqlRow _iter177 : struct.rows)
0:               _iter177.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter178 : struct.rows)
0:             _iter178.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           org.apache.thrift.protocol.TList _list179 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:           struct.rows = new ArrayList<CqlRow>(_list179.size);
0:           for (int _i180 = 0; _i180 < _list179.size; ++_i180)
0:             CqlRow _elem181; // optional
0:             _elem181 = new CqlRow();
0:             _elem181.read(iprot);
0:             struct.rows.add(_elem181);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:b8434fc
commit:b391600
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list75.size);
0:               for (int _i76 = 0; _i76 < _list75.size; ++_i76)
0:                 CqlRow _elem77;
0:                 _elem77 = new CqlRow();
0:                 _elem77.read(iprot);
0:                 this.rows.add(_elem77);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter78 : this.rows)
0:             _iter78.write(oprot);
commit:cc83c44
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)4);
/////////////////////////////////////////////////////////////////////////
0:   public CqlMetadata schema;
/////////////////////////////////////////////////////////////////////////
1:     NUM((short)3, "num"),
1:     SCHEMA((short)4, "schema");
/////////////////////////////////////////////////////////////////////////
1:         case 4: // SCHEMA
1:           return SCHEMA;
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CqlMetadata.class)));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetSchema()) {
1:       this.schema = new CqlMetadata(other.schema);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     this.schema = null;
/////////////////////////////////////////////////////////////////////////
1:   public CqlMetadata getSchema() {
1:     return this.schema;
1:   }
1: 
1:   public CqlResult setSchema(CqlMetadata schema) {
1:     this.schema = schema;
1:     return this;
1:   }
1: 
1:   public void unsetSchema() {
1:     this.schema = null;
1:   }
1: 
1:   /** Returns true if field schema is set (has been assigned a value) and false otherwise */
1:   public boolean isSetSchema() {
1:     return this.schema != null;
1:   }
1: 
1:   public void setSchemaIsSet(boolean value) {
1:     if (!value) {
1:       this.schema = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case SCHEMA:
1:       if (value == null) {
1:         unsetSchema();
1:       } else {
1:         setSchema((CqlMetadata)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case SCHEMA:
1:       return getSchema();
1: 
/////////////////////////////////////////////////////////////////////////
1:     case SCHEMA:
1:       return isSetSchema();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_schema = true && this.isSetSchema();
1:     boolean that_present_schema = true && that.isSetSchema();
1:     if (this_present_schema || that_present_schema) {
1:       if (!(this_present_schema && that_present_schema))
1:         return false;
1:       if (!this.schema.equals(that.schema))
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_schema = true && (isSetSchema());
1:     builder.append(present_schema);
1:     if (present_schema)
1:       builder.append(schema);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetSchema()).compareTo(typedOther.isSetSchema());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetSchema()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, typedOther.schema);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list71.size);
0:               for (int _i72 = 0; _i72 < _list71.size; ++_i72)
0:                 CqlRow _elem73;
0:                 _elem73 = new CqlRow();
0:                 _elem73.read(iprot);
0:                 this.rows.add(_elem73);
/////////////////////////////////////////////////////////////////////////
1:         case 4: // SCHEMA
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             this.schema = new CqlMetadata();
0:             this.schema.read(iprot);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter74 : this.rows)
0:             _iter74.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:     if (this.schema != null) {
1:       if (isSetSchema()) {
1:         oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
0:         this.schema.write(oprot);
1:         oprot.writeFieldEnd();
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetSchema()) {
1:       if (!first) sb.append(", ");
1:       sb.append("schema:");
1:       if (this.schema == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.schema);
1:       }
1:       first = false;
1:     }
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:129d80a
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list51.size);
0:               for (int _i52 = 0; _i52 < _list51.size; ++_i52)
0:                 CqlRow _elem53;
0:                 _elem53 = new CqlRow();
0:                 _elem53.read(iprot);
0:                 this.rows.add(_elem53);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter54 : this.rows)
0:             _iter54.write(oprot);
commit:4f9b160
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
commit:effb653
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list75.size);
0:               for (int _i76 = 0; _i76 < _list75.size; ++_i76)
0:                 CqlRow _elem77;
0:                 _elem77 = new CqlRow();
0:                 _elem77.read(iprot);
0:                 this.rows.add(_elem77);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter78 : this.rows)
0:             _iter78.write(oprot);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new CqlResultStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new CqlResultTupleSchemeFactory());
1:   }
1: 
1:   public List<CqlRow> rows; // optional
1:   public int num; // optional
1:   public CqlMetadata schema; // optional
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.ROWS,_Fields.NUM,_Fields.SCHEMA};
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
1:     if (schema != null) {
1:       schema.validate();
1:     }
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class CqlResultStandardSchemeFactory implements SchemeFactory {
1:     public CqlResultStandardScheme getScheme() {
1:       return new CqlResultStandardScheme();
1:     }
1:   }
1: 
1:   private static class CqlResultStandardScheme extends StandardScheme<CqlResult> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlResult struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // TYPE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.type = CqlResultType.findByValue(iprot.readI32());
1:               struct.setTypeIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // ROWS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
0:                 org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
0:                 struct.rows = new ArrayList<CqlRow>(_list166.size);
0:                 for (int _i167 = 0; _i167 < _list166.size; ++_i167)
1:                 {
0:                   CqlRow _elem168; // required
0:                   _elem168 = new CqlRow();
0:                   _elem168.read(iprot);
0:                   struct.rows.add(_elem168);
1:                 }
1:                 iprot.readListEnd();
1:               }
1:               struct.setRowsIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 3: // NUM
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.num = iprot.readI32();
1:               struct.setNumIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 4: // SCHEMA
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.schema = new CqlMetadata();
1:               struct.schema.read(iprot);
1:               struct.setSchemaIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlResult struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.type != null) {
1:         oprot.writeFieldBegin(TYPE_FIELD_DESC);
1:         oprot.writeI32(struct.type.getValue());
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.rows != null) {
1:         if (struct.isSetRows()) {
1:           oprot.writeFieldBegin(ROWS_FIELD_DESC);
1:           {
1:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rows.size()));
0:             for (CqlRow _iter169 : struct.rows)
1:             {
0:               _iter169.write(oprot);
1:             }
1:             oprot.writeListEnd();
1:           }
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.isSetNum()) {
1:         oprot.writeFieldBegin(NUM_FIELD_DESC);
1:         oprot.writeI32(struct.num);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.schema != null) {
1:         if (struct.isSetSchema()) {
0:           oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
1:           struct.schema.write(oprot);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class CqlResultTupleSchemeFactory implements SchemeFactory {
1:     public CqlResultTupleScheme getScheme() {
1:       return new CqlResultTupleScheme();
1:     }
1:   }
1: 
1:   private static class CqlResultTupleScheme extends TupleScheme<CqlResult> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlResult struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeI32(struct.type.getValue());
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetRows()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetNum()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetSchema()) {
1:         optionals.set(2);
1:       }
1:       oprot.writeBitSet(optionals, 3);
1:       if (struct.isSetRows()) {
1:         {
1:           oprot.writeI32(struct.rows.size());
0:           for (CqlRow _iter170 : struct.rows)
1:           {
0:             _iter170.write(oprot);
1:           }
1:         }
1:       }
1:       if (struct.isSetNum()) {
1:         oprot.writeI32(struct.num);
1:       }
1:       if (struct.isSetSchema()) {
1:         struct.schema.write(oprot);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlResult struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.type = CqlResultType.findByValue(iprot.readI32());
1:       struct.setTypeIsSet(true);
1:       BitSet incoming = iprot.readBitSet(3);
1:       if (incoming.get(0)) {
1:         {
0:           org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:           struct.rows = new ArrayList<CqlRow>(_list171.size);
0:           for (int _i172 = 0; _i172 < _list171.size; ++_i172)
1:           {
0:             CqlRow _elem173; // required
0:             _elem173 = new CqlRow();
0:             _elem173.read(iprot);
0:             struct.rows.add(_elem173);
1:           }
1:         }
1:         struct.setRowsIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.num = iprot.readI32();
1:         struct.setNumIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         struct.schema = new CqlMetadata();
1:         struct.schema.read(iprot);
1:         struct.setSchemaIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public CqlResultType type; // required
0:   public List<CqlRow> rows; // required
0:   public int num; // required
0:   public CqlMetadata schema; // required
/////////////////////////////////////////////////////////////////////////
1:       return Integer.valueOf(getNum());
/////////////////////////////////////////////////////////////////////////
0:                 CqlRow _elem85; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list56.size);
0:               for (int _i57 = 0; _i57 < _list56.size; ++_i57)
0:                 CqlRow _elem58;
0:                 _elem58 = new CqlRow();
0:                 _elem58.read(iprot);
0:                 this.rows.add(_elem58);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter59 : this.rows)
0:             _iter59.write(oprot);
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list61.size);
0:               for (int _i62 = 0; _i62 < _list61.size; ++_i62)
0:                 CqlRow _elem63;
0:                 _elem63 = new CqlRow();
0:                 _elem63.read(iprot);
0:                 this.rows.add(_elem63);
/////////////////////////////////////////////////////////////////////////
0:           for (CqlRow _iter64 : this.rows)
0:             _iter64.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class CqlResult implements org.apache.thrift.TBase<CqlResult, CqlResult._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlResult");
1:   private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
1:   private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.LIST, (short)2);
1:   private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)3);
/////////////////////////////////////////////////////////////////////////
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CqlResultType.class)));
1:     tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CqlRow.class))));
1:     tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlResult.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field type is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field rows is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field num is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, typedOther.rows);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, typedOther.num);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
0:               org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
0:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.rows.size()));
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
1:     }
1:   }
1: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
author:Eric Evans
-------------------------------------------------------------------------------
commit:5630e15
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.transport.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class CqlResult implements TBase<CqlResult, CqlResult._Fields>, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("CqlResult");
1: 
0:   private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
0:   private static final TField ROWS_FIELD_DESC = new TField("rows", TType.LIST, (short)2);
0:   private static final TField NUM_FIELD_DESC = new TField("num", TType.I32, (short)3);
1: 
1:   /**
1:    * 
1:    * @see CqlResultType
1:    */
0:   public CqlResultType type;
0:   public List<CqlRow> rows;
0:   public int num;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     /**
1:      * 
1:      * @see CqlResultType
1:      */
1:     TYPE((short)1, "type"),
1:     ROWS((short)2, "rows"),
0:     NUM((short)3, "num");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // TYPE
1:           return TYPE;
1:         case 2: // ROWS
1:           return ROWS;
1:         case 3: // NUM
1:           return NUM;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __NUM_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.REQUIRED, 
0:         new EnumMetaData(TType.ENUM, CqlResultType.class)));
0:     tmpMap.put(_Fields.ROWS, new FieldMetaData("rows", TFieldRequirementType.OPTIONAL, 
0:         new ListMetaData(TType.LIST, 
0:             new StructMetaData(TType.STRUCT, CqlRow.class))));
0:     tmpMap.put(_Fields.NUM, new FieldMetaData("num", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.I32)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     FieldMetaData.addStructMetaDataMap(CqlResult.class, metaDataMap);
1:   }
1: 
1:   public CqlResult() {
1:   }
1: 
1:   public CqlResult(
1:     CqlResultType type)
1:   {
1:     this();
1:     this.type = type;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public CqlResult(CqlResult other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetType()) {
1:       this.type = other.type;
1:     }
1:     if (other.isSetRows()) {
0:       List<CqlRow> __this__rows = new ArrayList<CqlRow>();
1:       for (CqlRow other_element : other.rows) {
1:         __this__rows.add(new CqlRow(other_element));
1:       }
1:       this.rows = __this__rows;
1:     }
1:     this.num = other.num;
1:   }
1: 
1:   public CqlResult deepCopy() {
1:     return new CqlResult(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.type = null;
1:     this.rows = null;
1:     setNumIsSet(false);
1:     this.num = 0;
1:   }
1: 
1:   /**
1:    * 
1:    * @see CqlResultType
1:    */
1:   public CqlResultType getType() {
1:     return this.type;
1:   }
1: 
1:   /**
1:    * 
1:    * @see CqlResultType
1:    */
1:   public CqlResult setType(CqlResultType type) {
1:     this.type = type;
1:     return this;
1:   }
1: 
1:   public void unsetType() {
1:     this.type = null;
1:   }
1: 
0:   /** Returns true if field type is set (has been asigned a value) and false otherwise */
1:   public boolean isSetType() {
1:     return this.type != null;
1:   }
1: 
1:   public void setTypeIsSet(boolean value) {
1:     if (!value) {
1:       this.type = null;
1:     }
1:   }
1: 
1:   public int getRowsSize() {
1:     return (this.rows == null) ? 0 : this.rows.size();
1:   }
1: 
1:   public java.util.Iterator<CqlRow> getRowsIterator() {
1:     return (this.rows == null) ? null : this.rows.iterator();
1:   }
1: 
1:   public void addToRows(CqlRow elem) {
1:     if (this.rows == null) {
1:       this.rows = new ArrayList<CqlRow>();
1:     }
1:     this.rows.add(elem);
1:   }
1: 
1:   public List<CqlRow> getRows() {
1:     return this.rows;
1:   }
1: 
1:   public CqlResult setRows(List<CqlRow> rows) {
1:     this.rows = rows;
1:     return this;
1:   }
1: 
1:   public void unsetRows() {
1:     this.rows = null;
1:   }
1: 
0:   /** Returns true if field rows is set (has been asigned a value) and false otherwise */
1:   public boolean isSetRows() {
1:     return this.rows != null;
1:   }
1: 
1:   public void setRowsIsSet(boolean value) {
1:     if (!value) {
1:       this.rows = null;
1:     }
1:   }
1: 
1:   public int getNum() {
1:     return this.num;
1:   }
1: 
1:   public CqlResult setNum(int num) {
1:     this.num = num;
1:     setNumIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetNum() {
0:     __isset_bit_vector.clear(__NUM_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field num is set (has been asigned a value) and false otherwise */
1:   public boolean isSetNum() {
0:     return __isset_bit_vector.get(__NUM_ISSET_ID);
1:   }
1: 
1:   public void setNumIsSet(boolean value) {
0:     __isset_bit_vector.set(__NUM_ISSET_ID, value);
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case TYPE:
1:       if (value == null) {
1:         unsetType();
1:       } else {
1:         setType((CqlResultType)value);
1:       }
1:       break;
1: 
1:     case ROWS:
1:       if (value == null) {
1:         unsetRows();
1:       } else {
1:         setRows((List<CqlRow>)value);
1:       }
1:       break;
1: 
1:     case NUM:
1:       if (value == null) {
1:         unsetNum();
1:       } else {
1:         setNum((Integer)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case TYPE:
1:       return getType();
1: 
1:     case ROWS:
1:       return getRows();
1: 
1:     case NUM:
0:       return new Integer(getNum());
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case TYPE:
1:       return isSetType();
1:     case ROWS:
1:       return isSetRows();
1:     case NUM:
1:       return isSetNum();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof CqlResult)
1:       return this.equals((CqlResult)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(CqlResult that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_type = true && this.isSetType();
1:     boolean that_present_type = true && that.isSetType();
1:     if (this_present_type || that_present_type) {
1:       if (!(this_present_type && that_present_type))
1:         return false;
1:       if (!this.type.equals(that.type))
1:         return false;
1:     }
1: 
1:     boolean this_present_rows = true && this.isSetRows();
1:     boolean that_present_rows = true && that.isSetRows();
1:     if (this_present_rows || that_present_rows) {
1:       if (!(this_present_rows && that_present_rows))
1:         return false;
1:       if (!this.rows.equals(that.rows))
1:         return false;
1:     }
1: 
1:     boolean this_present_num = true && this.isSetNum();
1:     boolean that_present_num = true && that.isSetNum();
1:     if (this_present_num || that_present_num) {
1:       if (!(this_present_num && that_present_num))
1:         return false;
1:       if (this.num != that.num)
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_type = true && (isSetType());
1:     builder.append(present_type);
1:     if (present_type)
1:       builder.append(type.getValue());
1: 
1:     boolean present_rows = true && (isSetRows());
1:     builder.append(present_rows);
1:     if (present_rows)
1:       builder.append(rows);
1: 
1:     boolean present_num = true && (isSetNum());
1:     builder.append(present_num);
1:     if (present_num)
1:       builder.append(num);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(CqlResult other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     CqlResult typedOther = (CqlResult)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetType()) {
0:       lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetRows()).compareTo(typedOther.isSetRows());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetRows()) {
0:       lastComparison = TBaseHelper.compareTo(this.rows, typedOther.rows);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetNum()) {
0:       lastComparison = TBaseHelper.compareTo(this.num, typedOther.num);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // TYPE
0:           if (field.type == TType.I32) {
0:             this.type = CqlResultType.findByValue(iprot.readI32());
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // ROWS
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list46 = iprot.readListBegin();
0:               this.rows = new ArrayList<CqlRow>(_list46.size);
0:               for (int _i47 = 0; _i47 < _list46.size; ++_i47)
1:               {
0:                 CqlRow _elem48;
0:                 _elem48 = new CqlRow();
0:                 _elem48.read(iprot);
0:                 this.rows.add(_elem48);
1:               }
0:               iprot.readListEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // NUM
0:           if (field.type == TType.I32) {
0:             this.num = iprot.readI32();
1:             setNumIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
0:       iprot.readFieldEnd();
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.type != null) {
0:       oprot.writeFieldBegin(TYPE_FIELD_DESC);
0:       oprot.writeI32(this.type.getValue());
0:       oprot.writeFieldEnd();
1:     }
0:     if (this.rows != null) {
1:       if (isSetRows()) {
0:         oprot.writeFieldBegin(ROWS_FIELD_DESC);
1:         {
0:           oprot.writeListBegin(new TList(TType.STRUCT, this.rows.size()));
0:           for (CqlRow _iter49 : this.rows)
1:           {
0:             _iter49.write(oprot);
1:           }
0:           oprot.writeListEnd();
1:         }
0:         oprot.writeFieldEnd();
1:       }
1:     }
1:     if (isSetNum()) {
0:       oprot.writeFieldBegin(NUM_FIELD_DESC);
0:       oprot.writeI32(this.num);
0:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("CqlResult(");
1:     boolean first = true;
1: 
1:     sb.append("type:");
1:     if (this.type == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.type);
1:     }
1:     first = false;
1:     if (isSetRows()) {
1:       if (!first) sb.append(", ");
1:       sb.append("rows:");
1:       if (this.rows == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.rows);
1:       }
1:       first = false;
1:     }
1:     if (isSetNum()) {
1:       if (!first) sb.append(", ");
1:       sb.append("num:");
1:       sb.append(this.num);
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (type == null) {
0:       throw new TProtocolException("Required field 'type' was not present! Struct: " + toString());
1:     }
1:   }
1: 
1: }
1: 
============================================================================