1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
1:066ef58:  */
1:066ef58: package org.apache.cassandra.concurrent;
4:066ef58: 
1:e98eb1c: import java.util.concurrent.ThreadFactory;
1:e98eb1c: import java.util.concurrent.atomic.AtomicInteger;
1:066ef58: 
1:1e92ce4: import io.netty.util.concurrent.FastThreadLocalThread;
1:1e92ce4: 
2:066ef58: /**
1:07cdfd0:  * This class is an implementation of the <i>ThreadFactory</i> interface. This
1:07cdfd0:  * is useful to give Java threads meaningful names which is useful when using
1:066ef58:  * a tool like JConsole.
1:066ef58:  */
1:066ef58: 
1:d7bd37a: public class NamedThreadFactory implements ThreadFactory
3:066ef58: {
1:269f078:     public final String id;
1:5ab5e1b:     private final int priority;
1:5790b4a:     private final ClassLoader contextClassLoader;
1:5790b4a:     private final ThreadGroup threadGroup;
1:d7bd37a:     protected final AtomicInteger n = new AtomicInteger(1);
1:d7bd37a: 
1:d7bd37a:     public NamedThreadFactory(String id)
1:5ab5e1b:     {
1:5ab5e1b:         this(id, Thread.NORM_PRIORITY);
1:5ab5e1b:     }
1:5ab5e1b: 
1:5ab5e1b:     public NamedThreadFactory(String id, int priority)
1:2fd3268:     {
1:5790b4a:         this(id, priority, null, null);
1:5790b4a:     }
1:5ab5e1b: 
1:5790b4a:     public NamedThreadFactory(String id, int priority, ClassLoader contextClassLoader, ThreadGroup threadGroup)
1:5790b4a:     {
1:d7bd37a:         this.id = id;
1:5ab5e1b:         this.priority = priority;
1:5790b4a:         this.contextClassLoader = contextClassLoader;
1:5790b4a:         this.threadGroup = threadGroup;
1:d7bd37a:     }
1:d7bd37a: 
1:066ef58:     public Thread newThread(Runnable runnable)
1:07cdfd0:     {
1:d7bd37a:         String name = id + ":" + n.getAndIncrement();
1:1e92ce4:         Thread thread = new FastThreadLocalThread(threadGroup, runnable, name);
1:5ab5e1b:         thread.setPriority(priority);
1:185eca5:         thread.setDaemon(true);
1:5790b4a:         if (contextClassLoader != null)
1:5790b4a:             thread.setContextClassLoader(contextClassLoader);
1:5ab5e1b:         return thread;
2:066ef58:     }
1:066ef58: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.concurrent.FastThreadLocalThread;
1: 
/////////////////////////////////////////////////////////////////////////
1:         Thread thread = new FastThreadLocalThread(threadGroup, runnable, name);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:269f078
/////////////////////////////////////////////////////////////////////////
1:     public final String id;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:5790b4a
/////////////////////////////////////////////////////////////////////////
1:     private final ClassLoader contextClassLoader;
1:     private final ThreadGroup threadGroup;
/////////////////////////////////////////////////////////////////////////
1:         this(id, priority, null, null);
1:     }
1:     public NamedThreadFactory(String id, int priority, ClassLoader contextClassLoader, ThreadGroup threadGroup)
1:     {
1:         this.contextClassLoader = contextClassLoader;
1:         this.threadGroup = threadGroup;
0:         Thread thread = new Thread(threadGroup, runnable, name);
1:         if (contextClassLoader != null)
1:             thread.setContextClassLoader(contextClassLoader);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  * This class is an implementation of the <i>ThreadFactory</i> interface. This
1:  * is useful to give Java threads meaningful names which is useful when using
/////////////////////////////////////////////////////////////////////////
1:     {
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  * This class is an implementation of the <i>ThreadFactory</i> interface. This
0:  * is useful to give Java threads meaningful names which is useful when using
/////////////////////////////////////////////////////////////////////////
1:     {
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:185eca5
/////////////////////////////////////////////////////////////////////////
1:         thread.setDaemon(true);
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.atomic.AtomicInteger;
commit:5ab5e1b
/////////////////////////////////////////////////////////////////////////
1:     private final int priority;
1:         this(id, Thread.NORM_PRIORITY);
1:     }
1: 
1:     public NamedThreadFactory(String id, int priority)
1:     {
1: 
1:         this.priority = priority;
0:         Thread thread = new Thread(runnable, name);
1:         thread.setPriority(priority);
1:         return thread;
commit:d7bd37a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class NamedThreadFactory implements ThreadFactory
0:     protected final String id;
1:     protected final AtomicInteger n = new AtomicInteger(1);
1: 
1:     public NamedThreadFactory(String id)
1:         this.id = id;
1:     }
1: 
1:         String name = id + ":" + n.getAndIncrement();
0:         return new Thread(runnable, name);
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.concurrent;
1: 
0: import java.util.concurrent.*;
0: import java.util.concurrent.atomic.*;
0: import org.apache.cassandra.utils.*;
1: 
1: /**
0:  * This class is an implementation of the <i>ThreadFactory</i> interface. This 
0:  * is useful to give Java threads meaningful names which is useful when using 
1:  * a tool like JConsole.
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
1: 
0: public class ThreadFactoryImpl implements ThreadFactory
1: {
0:     protected String id_;
0:     protected ThreadGroup threadGroup_;
0:     protected final AtomicInteger threadNbr_ = new AtomicInteger(1);
1:     
0:     public ThreadFactoryImpl(String id)
1:     {
0:         SecurityManager sm = System.getSecurityManager();
0:         threadGroup_ = ( sm != null ) ? sm.getThreadGroup() : Thread.currentThread().getThreadGroup();
0:         id_ = id;
1:     }    
1:     
1:     public Thread newThread(Runnable runnable)
1:     {        
0:         String name = id_ + ":" + threadNbr_.getAndIncrement();       
0:         Thread thread = new Thread(threadGroup_, runnable, name);        
0:         return thread;
1:     }
1: }
commit:71739ef
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.concurrent;
0: 
0: import java.util.concurrent.*;
0: import java.util.concurrent.atomic.*;
0: import org.apache.cassandra.utils.*;
0: 
0: /**
0:  * This class is an implementation of the <i>ThreadFactory</i> interface. This 
0:  * is useful to give Java threads meaningful names which is useful when using 
0:  * a tool like JConsole.
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: public class ThreadFactoryImpl implements ThreadFactory
0: {
0:     protected String id_;
0:     protected ThreadGroup threadGroup_;
0:     protected final AtomicInteger threadNbr_ = new AtomicInteger(1);
0:     
0:     public ThreadFactoryImpl(String id)
0:     {
0:         SecurityManager sm = System.getSecurityManager();
0:         threadGroup_ = ( sm != null ) ? sm.getThreadGroup() : Thread.currentThread().getThreadGroup();
0:         id_ = id;
0:     }    
0:     
0:     public Thread newThread(Runnable runnable)
0:     {        
0:         String name = id_ + ":" + threadNbr_.getAndIncrement();       
0:         Thread thread = new Thread(threadGroup_, runnable, name);        
0:         return thread;
0:     }
0: }
============================================================================