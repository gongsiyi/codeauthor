1:cc83c44: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:cc83c44:  *
1:cc83c44:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:cc83c44:  */
1:cc83c44: package org.apache.cassandra.thrift;
1:cc83c44: /*
1:cc83c44:  * 
1:cc83c44:  * Licensed to the Apache Software Foundation (ASF) under one
1:cc83c44:  * or more contributor license agreements.  See the NOTICE file
1:cc83c44:  * distributed with this work for additional information
1:cc83c44:  * regarding copyright ownership.  The ASF licenses this file
1:cc83c44:  * to you under the Apache License, Version 2.0 (the
1:cc83c44:  * "License"); you may not use this file except in compliance
1:cc83c44:  * with the License.  You may obtain a copy of the License at
1:cc83c44:  * 
1:cc83c44:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cc83c44:  * 
1:cc83c44:  * Unless required by applicable law or agreed to in writing,
1:cc83c44:  * software distributed under the License is distributed on an
1:cc83c44:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cc83c44:  * KIND, either express or implied.  See the License for the
1:cc83c44:  * specific language governing permissions and limitations
1:cc83c44:  * under the License.
1:cc83c44:  * 
1:cc83c44:  */
1:cc83c44: 
1:cc83c44: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:cc83c44: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:cc83c44: import java.util.List;
1:cc83c44: import java.util.ArrayList;
1:cc83c44: import java.util.Map;
1:cc83c44: import java.util.HashMap;
1:cc83c44: import java.util.EnumMap;
1:cc83c44: import java.util.Set;
1:cc83c44: import java.util.HashSet;
1:cc83c44: import java.util.EnumSet;
1:cc83c44: import java.util.Collections;
1:cc83c44: import java.util.BitSet;
1:cc83c44: import java.nio.ByteBuffer;
1:cc83c44: import java.util.Arrays;
1:cc83c44: import org.slf4j.Logger;
1:cc83c44: import org.slf4j.LoggerFactory;
1:cc83c44: 
1:bffd9ea: public class CqlMetadata implements org.apache.thrift.TBase<CqlMetadata, CqlMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<CqlMetadata> {
1:cc83c44:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlMetadata");
1:cc83c44: 
1:cc83c44:   private static final org.apache.thrift.protocol.TField NAME_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("name_types", org.apache.thrift.protocol.TType.MAP, (short)1);
1:cc83c44:   private static final org.apache.thrift.protocol.TField VALUE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("value_types", org.apache.thrift.protocol.TType.MAP, (short)2);
1:cc83c44:   private static final org.apache.thrift.protocol.TField DEFAULT_NAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_name_type", org.apache.thrift.protocol.TType.STRING, (short)3);
1:cc83c44:   private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value_type", org.apache.thrift.protocol.TType.STRING, (short)4);
1:cc83c44: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new CqlMetadataStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new CqlMetadataTupleSchemeFactory());
1:cc83c44:   }
1:cc83c44: 
1:7c8c570:   public Map<ByteBuffer,String> name_types; // required
1:7c8c570:   public Map<ByteBuffer,String> value_types; // required
1:7c8c570:   public String default_name_type; // required
1:7c8c570:   public String default_value_type; // required
1:cc83c44: 
1:cc83c44:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:cc83c44:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:cc83c44:     NAME_TYPES((short)1, "name_types"),
1:cc83c44:     VALUE_TYPES((short)2, "value_types"),
1:cc83c44:     DEFAULT_NAME_TYPE((short)3, "default_name_type"),
1:cc83c44:     DEFAULT_VALUE_TYPE((short)4, "default_value_type");
1:cc83c44: 
1:cc83c44:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:cc83c44: 
1:cc83c44:     static {
1:cc83c44:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:cc83c44:         byName.put(field.getFieldName(), field);
1:cc83c44:       }
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     /**
1:cc83c44:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:cc83c44:      */
1:cc83c44:     public static _Fields findByThriftId(int fieldId) {
1:cc83c44:       switch(fieldId) {
1:cc83c44:         case 1: // NAME_TYPES
1:cc83c44:           return NAME_TYPES;
1:cc83c44:         case 2: // VALUE_TYPES
1:cc83c44:           return VALUE_TYPES;
1:cc83c44:         case 3: // DEFAULT_NAME_TYPE
1:cc83c44:           return DEFAULT_NAME_TYPE;
1:cc83c44:         case 4: // DEFAULT_VALUE_TYPE
1:cc83c44:           return DEFAULT_VALUE_TYPE;
1:cc83c44:         default:
1:cc83c44:           return null;
1:cc83c44:       }
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     /**
1:cc83c44:      * Find the _Fields constant that matches fieldId, throwing an exception
1:cc83c44:      * if it is not found.
1:cc83c44:      */
1:cc83c44:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:cc83c44:       _Fields fields = findByThriftId(fieldId);
1:cc83c44:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:cc83c44:       return fields;
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     /**
1:cc83c44:      * Find the _Fields constant that matches name, or null if its not found.
1:cc83c44:      */
1:cc83c44:     public static _Fields findByName(String name) {
1:cc83c44:       return byName.get(name);
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     private final short _thriftId;
1:cc83c44:     private final String _fieldName;
1:cc83c44: 
1:cc83c44:     _Fields(short thriftId, String fieldName) {
1:cc83c44:       _thriftId = thriftId;
1:cc83c44:       _fieldName = fieldName;
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     public short getThriftFieldId() {
1:cc83c44:       return _thriftId;
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     public String getFieldName() {
1:cc83c44:       return _fieldName;
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   // isset id assignments
1:cc83c44:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:cc83c44:   static {
1:cc83c44:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:cc83c44:     tmpMap.put(_Fields.NAME_TYPES, new org.apache.thrift.meta_data.FieldMetaData("name_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:cc83c44:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:cc83c44:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
1:cc83c44:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:cc83c44:     tmpMap.put(_Fields.VALUE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("value_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:cc83c44:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:cc83c44:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
1:cc83c44:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:cc83c44:     tmpMap.put(_Fields.DEFAULT_NAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("default_name_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:cc83c44:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:cc83c44:     tmpMap.put(_Fields.DEFAULT_VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("default_value_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:cc83c44:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:cc83c44:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:cc83c44:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlMetadata.class, metaDataMap);
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlMetadata() {
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlMetadata(
1:cc83c44:     Map<ByteBuffer,String> name_types,
1:cc83c44:     Map<ByteBuffer,String> value_types,
1:cc83c44:     String default_name_type,
1:cc83c44:     String default_value_type)
1:cc83c44:   {
1:cc83c44:     this();
1:cc83c44:     this.name_types = name_types;
1:cc83c44:     this.value_types = value_types;
1:cc83c44:     this.default_name_type = default_name_type;
1:cc83c44:     this.default_value_type = default_value_type;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   /**
1:cc83c44:    * Performs a deep copy on <i>other</i>.
1:cc83c44:    */
1:cc83c44:   public CqlMetadata(CqlMetadata other) {
1:cc83c44:     if (other.isSetName_types()) {
1:bffd9ea:       Map<ByteBuffer,String> __this__name_types = new HashMap<ByteBuffer,String>(other.name_types);
1:cc83c44:       this.name_types = __this__name_types;
1:cc83c44:     }
1:cc83c44:     if (other.isSetValue_types()) {
1:bffd9ea:       Map<ByteBuffer,String> __this__value_types = new HashMap<ByteBuffer,String>(other.value_types);
1:cc83c44:       this.value_types = __this__value_types;
1:cc83c44:     }
1:cc83c44:     if (other.isSetDefault_name_type()) {
1:cc83c44:       this.default_name_type = other.default_name_type;
1:cc83c44:     }
1:cc83c44:     if (other.isSetDefault_value_type()) {
1:cc83c44:       this.default_value_type = other.default_value_type;
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlMetadata deepCopy() {
1:cc83c44:     return new CqlMetadata(this);
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   @Override
1:cc83c44:   public void clear() {
1:cc83c44:     this.name_types = null;
1:cc83c44:     this.value_types = null;
1:cc83c44:     this.default_name_type = null;
1:cc83c44:     this.default_value_type = null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public int getName_typesSize() {
1:cc83c44:     return (this.name_types == null) ? 0 : this.name_types.size();
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void putToName_types(ByteBuffer key, String val) {
1:cc83c44:     if (this.name_types == null) {
1:cc83c44:       this.name_types = new HashMap<ByteBuffer,String>();
1:cc83c44:     }
1:cc83c44:     this.name_types.put(key, val);
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public Map<ByteBuffer,String> getName_types() {
1:cc83c44:     return this.name_types;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlMetadata setName_types(Map<ByteBuffer,String> name_types) {
1:cc83c44:     this.name_types = name_types;
1:cc83c44:     return this;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void unsetName_types() {
1:cc83c44:     this.name_types = null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   /** Returns true if field name_types is set (has been assigned a value) and false otherwise */
1:cc83c44:   public boolean isSetName_types() {
1:cc83c44:     return this.name_types != null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void setName_typesIsSet(boolean value) {
1:cc83c44:     if (!value) {
1:cc83c44:       this.name_types = null;
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public int getValue_typesSize() {
1:cc83c44:     return (this.value_types == null) ? 0 : this.value_types.size();
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void putToValue_types(ByteBuffer key, String val) {
1:cc83c44:     if (this.value_types == null) {
1:cc83c44:       this.value_types = new HashMap<ByteBuffer,String>();
1:cc83c44:     }
1:cc83c44:     this.value_types.put(key, val);
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public Map<ByteBuffer,String> getValue_types() {
1:cc83c44:     return this.value_types;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlMetadata setValue_types(Map<ByteBuffer,String> value_types) {
1:cc83c44:     this.value_types = value_types;
1:cc83c44:     return this;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void unsetValue_types() {
1:cc83c44:     this.value_types = null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   /** Returns true if field value_types is set (has been assigned a value) and false otherwise */
1:cc83c44:   public boolean isSetValue_types() {
1:cc83c44:     return this.value_types != null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void setValue_typesIsSet(boolean value) {
1:cc83c44:     if (!value) {
1:cc83c44:       this.value_types = null;
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public String getDefault_name_type() {
1:cc83c44:     return this.default_name_type;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlMetadata setDefault_name_type(String default_name_type) {
1:cc83c44:     this.default_name_type = default_name_type;
1:cc83c44:     return this;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void unsetDefault_name_type() {
1:cc83c44:     this.default_name_type = null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   /** Returns true if field default_name_type is set (has been assigned a value) and false otherwise */
1:cc83c44:   public boolean isSetDefault_name_type() {
1:cc83c44:     return this.default_name_type != null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void setDefault_name_typeIsSet(boolean value) {
1:cc83c44:     if (!value) {
1:cc83c44:       this.default_name_type = null;
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public String getDefault_value_type() {
1:cc83c44:     return this.default_value_type;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public CqlMetadata setDefault_value_type(String default_value_type) {
1:cc83c44:     this.default_value_type = default_value_type;
1:cc83c44:     return this;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void unsetDefault_value_type() {
1:cc83c44:     this.default_value_type = null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   /** Returns true if field default_value_type is set (has been assigned a value) and false otherwise */
1:cc83c44:   public boolean isSetDefault_value_type() {
1:cc83c44:     return this.default_value_type != null;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void setDefault_value_typeIsSet(boolean value) {
1:cc83c44:     if (!value) {
1:cc83c44:       this.default_value_type = null;
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void setFieldValue(_Fields field, Object value) {
1:cc83c44:     switch (field) {
1:cc83c44:     case NAME_TYPES:
1:cc83c44:       if (value == null) {
1:cc83c44:         unsetName_types();
1:cc83c44:       } else {
1:cc83c44:         setName_types((Map<ByteBuffer,String>)value);
1:cc83c44:       }
1:cc83c44:       break;
1:cc83c44: 
1:cc83c44:     case VALUE_TYPES:
1:cc83c44:       if (value == null) {
1:cc83c44:         unsetValue_types();
1:cc83c44:       } else {
1:cc83c44:         setValue_types((Map<ByteBuffer,String>)value);
1:cc83c44:       }
1:cc83c44:       break;
1:cc83c44: 
1:cc83c44:     case DEFAULT_NAME_TYPE:
1:cc83c44:       if (value == null) {
1:cc83c44:         unsetDefault_name_type();
1:cc83c44:       } else {
1:cc83c44:         setDefault_name_type((String)value);
1:cc83c44:       }
1:cc83c44:       break;
1:cc83c44: 
1:cc83c44:     case DEFAULT_VALUE_TYPE:
1:cc83c44:       if (value == null) {
1:cc83c44:         unsetDefault_value_type();
1:cc83c44:       } else {
1:cc83c44:         setDefault_value_type((String)value);
1:cc83c44:       }
1:cc83c44:       break;
1:cc83c44: 
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public Object getFieldValue(_Fields field) {
1:cc83c44:     switch (field) {
1:cc83c44:     case NAME_TYPES:
1:cc83c44:       return getName_types();
1:cc83c44: 
1:cc83c44:     case VALUE_TYPES:
1:cc83c44:       return getValue_types();
1:cc83c44: 
1:cc83c44:     case DEFAULT_NAME_TYPE:
1:cc83c44:       return getDefault_name_type();
1:cc83c44: 
1:cc83c44:     case DEFAULT_VALUE_TYPE:
1:cc83c44:       return getDefault_value_type();
1:cc83c44: 
1:cc83c44:     }
1:cc83c44:     throw new IllegalStateException();
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:cc83c44:   public boolean isSet(_Fields field) {
1:cc83c44:     if (field == null) {
1:cc83c44:       throw new IllegalArgumentException();
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     switch (field) {
1:cc83c44:     case NAME_TYPES:
1:cc83c44:       return isSetName_types();
1:cc83c44:     case VALUE_TYPES:
1:cc83c44:       return isSetValue_types();
1:cc83c44:     case DEFAULT_NAME_TYPE:
1:cc83c44:       return isSetDefault_name_type();
1:cc83c44:     case DEFAULT_VALUE_TYPE:
1:cc83c44:       return isSetDefault_value_type();
1:cc83c44:     }
1:cc83c44:     throw new IllegalStateException();
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   @Override
1:cc83c44:   public boolean equals(Object that) {
1:cc83c44:     if (that == null)
1:cc83c44:       return false;
1:cc83c44:     if (that instanceof CqlMetadata)
1:cc83c44:       return this.equals((CqlMetadata)that);
1:cc83c44:     return false;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public boolean equals(CqlMetadata that) {
1:cc83c44:     if (that == null)
1:cc83c44:       return false;
1:cc83c44: 
1:cc83c44:     boolean this_present_name_types = true && this.isSetName_types();
1:cc83c44:     boolean that_present_name_types = true && that.isSetName_types();
1:cc83c44:     if (this_present_name_types || that_present_name_types) {
1:cc83c44:       if (!(this_present_name_types && that_present_name_types))
1:cc83c44:         return false;
1:cc83c44:       if (!this.name_types.equals(that.name_types))
1:cc83c44:         return false;
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     boolean this_present_value_types = true && this.isSetValue_types();
1:cc83c44:     boolean that_present_value_types = true && that.isSetValue_types();
1:cc83c44:     if (this_present_value_types || that_present_value_types) {
1:cc83c44:       if (!(this_present_value_types && that_present_value_types))
1:cc83c44:         return false;
1:cc83c44:       if (!this.value_types.equals(that.value_types))
1:cc83c44:         return false;
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     boolean this_present_default_name_type = true && this.isSetDefault_name_type();
1:cc83c44:     boolean that_present_default_name_type = true && that.isSetDefault_name_type();
1:cc83c44:     if (this_present_default_name_type || that_present_default_name_type) {
1:cc83c44:       if (!(this_present_default_name_type && that_present_default_name_type))
1:cc83c44:         return false;
1:cc83c44:       if (!this.default_name_type.equals(that.default_name_type))
1:cc83c44:         return false;
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     boolean this_present_default_value_type = true && this.isSetDefault_value_type();
1:cc83c44:     boolean that_present_default_value_type = true && that.isSetDefault_value_type();
1:cc83c44:     if (this_present_default_value_type || that_present_default_value_type) {
1:cc83c44:       if (!(this_present_default_value_type && that_present_default_value_type))
1:cc83c44:         return false;
1:cc83c44:       if (!this.default_value_type.equals(that.default_value_type))
1:cc83c44:         return false;
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     return true;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   @Override
1:cc83c44:   public int hashCode() {
1:cc83c44:     HashCodeBuilder builder = new HashCodeBuilder();
1:cc83c44: 
1:cc83c44:     boolean present_name_types = true && (isSetName_types());
1:cc83c44:     builder.append(present_name_types);
1:cc83c44:     if (present_name_types)
1:cc83c44:       builder.append(name_types);
1:cc83c44: 
1:cc83c44:     boolean present_value_types = true && (isSetValue_types());
1:cc83c44:     builder.append(present_value_types);
1:cc83c44:     if (present_value_types)
1:cc83c44:       builder.append(value_types);
1:cc83c44: 
1:cc83c44:     boolean present_default_name_type = true && (isSetDefault_name_type());
1:cc83c44:     builder.append(present_default_name_type);
1:cc83c44:     if (present_default_name_type)
1:cc83c44:       builder.append(default_name_type);
1:cc83c44: 
1:cc83c44:     boolean present_default_value_type = true && (isSetDefault_value_type());
1:cc83c44:     builder.append(present_default_value_type);
1:cc83c44:     if (present_default_value_type)
1:cc83c44:       builder.append(default_value_type);
1:cc83c44: 
1:cc83c44:     return builder.toHashCode();
1:cc83c44:   }
1:cc83c44: 
1:bffd9ea:   @Override
1:cc83c44:   public int compareTo(CqlMetadata other) {
1:cc83c44:     if (!getClass().equals(other.getClass())) {
1:cc83c44:       return getClass().getName().compareTo(other.getClass().getName());
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:     int lastComparison = 0;
1:cc83c44: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetName_types()).compareTo(other.isSetName_types());
1:cc83c44:     if (lastComparison != 0) {
1:cc83c44:       return lastComparison;
1:cc83c44:     }
1:cc83c44:     if (isSetName_types()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_types, other.name_types);
1:cc83c44:       if (lastComparison != 0) {
1:cc83c44:         return lastComparison;
1:cc83c44:       }
1:cc83c44:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetValue_types()).compareTo(other.isSetValue_types());
1:cc83c44:     if (lastComparison != 0) {
1:cc83c44:       return lastComparison;
1:cc83c44:     }
1:cc83c44:     if (isSetValue_types()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_types, other.value_types);
1:cc83c44:       if (lastComparison != 0) {
1:cc83c44:         return lastComparison;
1:cc83c44:       }
1:cc83c44:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetDefault_name_type()).compareTo(other.isSetDefault_name_type());
1:cc83c44:     if (lastComparison != 0) {
1:cc83c44:       return lastComparison;
1:cc83c44:     }
1:cc83c44:     if (isSetDefault_name_type()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_name_type, other.default_name_type);
1:cc83c44:       if (lastComparison != 0) {
1:cc83c44:         return lastComparison;
1:cc83c44:       }
1:cc83c44:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetDefault_value_type()).compareTo(other.isSetDefault_value_type());
1:cc83c44:     if (lastComparison != 0) {
1:cc83c44:       return lastComparison;
1:cc83c44:     }
1:cc83c44:     if (isSetDefault_value_type()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value_type, other.default_value_type);
1:cc83c44:       if (lastComparison != 0) {
1:cc83c44:         return lastComparison;
1:cc83c44:       }
1:cc83c44:     }
1:cc83c44:     return 0;
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public _Fields fieldForId(int fieldId) {
1:cc83c44:     return _Fields.findByThriftId(fieldId);
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   @Override
1:cc83c44:   public String toString() {
1:cc83c44:     StringBuilder sb = new StringBuilder("CqlMetadata(");
1:cc83c44:     boolean first = true;
1:cc83c44: 
1:cc83c44:     sb.append("name_types:");
1:cc83c44:     if (this.name_types == null) {
1:cc83c44:       sb.append("null");
1:cc83c44:     } else {
1:cc83c44:       sb.append(this.name_types);
1:cc83c44:     }
1:cc83c44:     first = false;
1:cc83c44:     if (!first) sb.append(", ");
1:cc83c44:     sb.append("value_types:");
1:cc83c44:     if (this.value_types == null) {
1:cc83c44:       sb.append("null");
1:cc83c44:     } else {
1:cc83c44:       sb.append(this.value_types);
1:cc83c44:     }
1:cc83c44:     first = false;
1:cc83c44:     if (!first) sb.append(", ");
1:cc83c44:     sb.append("default_name_type:");
1:cc83c44:     if (this.default_name_type == null) {
1:cc83c44:       sb.append("null");
1:cc83c44:     } else {
1:cc83c44:       sb.append(this.default_name_type);
1:cc83c44:     }
1:cc83c44:     first = false;
1:cc83c44:     if (!first) sb.append(", ");
1:cc83c44:     sb.append("default_value_type:");
1:cc83c44:     if (this.default_value_type == null) {
1:cc83c44:       sb.append("null");
1:cc83c44:     } else {
1:cc83c44:       sb.append(this.default_value_type);
1:cc83c44:     }
1:cc83c44:     first = false;
1:cc83c44:     sb.append(")");
1:cc83c44:     return sb.toString();
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   public void validate() throws org.apache.thrift.TException {
1:cc83c44:     // check for required fields
1:cc83c44:     if (name_types == null) {
1:cc83c44:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name_types' was not present! Struct: " + toString());
1:cc83c44:     }
1:cc83c44:     if (value_types == null) {
1:cc83c44:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'value_types' was not present! Struct: " + toString());
1:cc83c44:     }
1:cc83c44:     if (default_name_type == null) {
1:cc83c44:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'default_name_type' was not present! Struct: " + toString());
1:cc83c44:     }
1:cc83c44:     if (default_value_type == null) {
1:cc83c44:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'default_value_type' was not present! Struct: " + toString());
1:cc83c44:     }
1:b153d45:     // check for sub-struct validity
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:cc83c44:     try {
1:cc83c44:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:cc83c44:     } catch (org.apache.thrift.TException te) {
1:cc83c44:       throw new java.io.IOException(te);
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:cc83c44:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:cc83c44:     try {
1:cc83c44:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:cc83c44:     } catch (org.apache.thrift.TException te) {
1:cc83c44:       throw new java.io.IOException(te);
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:b153d45:   private static class CqlMetadataStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlMetadataStandardScheme getScheme() {
1:b153d45:       return new CqlMetadataStandardScheme();
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:b153d45:   private static class CqlMetadataStandardScheme extends StandardScheme<CqlMetadata> {
1:cc83c44: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlMetadata struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:cc83c44:       iprot.readStructBegin();
1:cc83c44:       while (true)
1:cc83c44:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:cc83c44:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:cc83c44:           case 1: // NAME_TYPES
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:cc83c44:               {
1:a965977:                 org.apache.thrift.protocol.TMap _map172 = iprot.readMapBegin();
1:a965977:                 struct.name_types = new HashMap<ByteBuffer,String>(2*_map172.size);
1:a965977:                 for (int _i173 = 0; _i173 < _map172.size; ++_i173)
1:cc83c44:                 {
1:bffd9ea:                   ByteBuffer _key174;
1:bffd9ea:                   String _val175;
1:a965977:                   _key174 = iprot.readBinary();
1:a965977:                   _val175 = iprot.readString();
1:a965977:                   struct.name_types.put(_key174, _val175);
22:b153d45:                 }
1:cc83c44:                 iprot.readMapEnd();
1:cc83c44:               }
1:b153d45:               struct.setName_typesIsSet(true);
1:cc83c44:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:cc83c44:             }
1:cc83c44:             break;
1:cc83c44:           case 2: // VALUE_TYPES
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:cc83c44:               {
1:a965977:                 org.apache.thrift.protocol.TMap _map176 = iprot.readMapBegin();
1:a965977:                 struct.value_types = new HashMap<ByteBuffer,String>(2*_map176.size);
1:a965977:                 for (int _i177 = 0; _i177 < _map176.size; ++_i177)
1:cc83c44:                 {
1:bffd9ea:                   ByteBuffer _key178;
1:bffd9ea:                   String _val179;
1:a965977:                   _key178 = iprot.readBinary();
1:a965977:                   _val179 = iprot.readString();
1:a965977:                   struct.value_types.put(_key178, _val179);
1:cc83c44:                 }
1:cc83c44:                 iprot.readMapEnd();
1:b153d45:               }
1:b153d45:               struct.setValue_typesIsSet(true);
1:cc83c44:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:cc83c44:             break;
1:cc83c44:           case 3: // DEFAULT_NAME_TYPE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.default_name_type = iprot.readString();
1:b153d45:               struct.setDefault_name_typeIsSet(true);
1:cc83c44:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:cc83c44:             break;
1:cc83c44:           case 4: // DEFAULT_VALUE_TYPE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.default_value_type = iprot.readString();
1:b153d45:               struct.setDefault_value_typeIsSet(true);
1:cc83c44:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:cc83c44:             break;
1:cc83c44:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:cc83c44:         iprot.readFieldEnd();
1:b153d45:       }
1:cc83c44:       iprot.readStructEnd();
1:cc83c44: 
1:cc83c44:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:cc83c44: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlMetadata struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:cc83c44: 
1:cc83c44:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.name_types != null) {
1:cc83c44:         oprot.writeFieldBegin(NAME_TYPES_FIELD_DESC);
1:cc83c44:         {
1:b153d45:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.name_types.size()));
1:a965977:           for (Map.Entry<ByteBuffer, String> _iter180 : struct.name_types.entrySet())
1:cc83c44:           {
1:a965977:             oprot.writeBinary(_iter180.getKey());
1:a965977:             oprot.writeString(_iter180.getValue());
1:cc83c44:           }
1:cc83c44:           oprot.writeMapEnd();
1:b153d45:         }
1:cc83c44:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.value_types != null) {
1:cc83c44:         oprot.writeFieldBegin(VALUE_TYPES_FIELD_DESC);
1:cc83c44:         {
1:b153d45:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.value_types.size()));
1:a965977:           for (Map.Entry<ByteBuffer, String> _iter181 : struct.value_types.entrySet())
1:cc83c44:           {
1:a965977:             oprot.writeBinary(_iter181.getKey());
1:a965977:             oprot.writeString(_iter181.getValue());
1:cc83c44:           }
1:cc83c44:           oprot.writeMapEnd();
1:b153d45:         }
1:cc83c44:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.default_name_type != null) {
1:cc83c44:         oprot.writeFieldBegin(DEFAULT_NAME_TYPE_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.default_name_type);
1:cc83c44:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.default_value_type != null) {
1:cc83c44:         oprot.writeFieldBegin(DEFAULT_VALUE_TYPE_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.default_value_type);
1:cc83c44:         oprot.writeFieldEnd();
1:b153d45:       }
1:cc83c44:       oprot.writeFieldStop();
1:cc83c44:       oprot.writeStructEnd();
1:cc83c44:     }
1:cc83c44: 
1:cc83c44:   }
1:cc83c44: 
1:b153d45:   private static class CqlMetadataTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlMetadataTupleScheme getScheme() {
1:b153d45:       return new CqlMetadataTupleScheme();
1:cc83c44:     }
1:cc83c44:   }
1:cc83c44: 
1:b153d45:   private static class CqlMetadataTupleScheme extends TupleScheme<CqlMetadata> {
1:cc83c44: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlMetadata struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
10:b153d45:       {
1:b153d45:         oprot.writeI32(struct.name_types.size());
1:a965977:         for (Map.Entry<ByteBuffer, String> _iter182 : struct.name_types.entrySet())
1:b153d45:         {
1:a965977:           oprot.writeBinary(_iter182.getKey());
1:a965977:           oprot.writeString(_iter182.getValue());
1:cc83c44:         }
1:cc83c44:       }
1:b153d45:       {
1:b153d45:         oprot.writeI32(struct.value_types.size());
1:a965977:         for (Map.Entry<ByteBuffer, String> _iter183 : struct.value_types.entrySet())
1:b153d45:         {
1:a965977:           oprot.writeBinary(_iter183.getKey());
1:a965977:           oprot.writeString(_iter183.getValue());
1:cc83c44:         }
1:cc83c44:       }
1:b153d45:       oprot.writeString(struct.default_name_type);
1:b153d45:       oprot.writeString(struct.default_value_type);
1:cc83c44:     }
1:cc83c44: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlMetadata struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       {
1:a965977:         org.apache.thrift.protocol.TMap _map184 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:a965977:         struct.name_types = new HashMap<ByteBuffer,String>(2*_map184.size);
1:a965977:         for (int _i185 = 0; _i185 < _map184.size; ++_i185)
1:b153d45:         {
1:bffd9ea:           ByteBuffer _key186;
1:bffd9ea:           String _val187;
1:a965977:           _key186 = iprot.readBinary();
1:a965977:           _val187 = iprot.readString();
1:a965977:           struct.name_types.put(_key186, _val187);
1:cc83c44:         }
1:cc83c44:       }
1:b153d45:       struct.setName_typesIsSet(true);
1:b153d45:       {
1:a965977:         org.apache.thrift.protocol.TMap _map188 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:a965977:         struct.value_types = new HashMap<ByteBuffer,String>(2*_map188.size);
1:a965977:         for (int _i189 = 0; _i189 < _map188.size; ++_i189)
1:b153d45:         {
1:bffd9ea:           ByteBuffer _key190;
1:bffd9ea:           String _val191;
1:a965977:           _key190 = iprot.readBinary();
1:a965977:           _val191 = iprot.readString();
1:a965977:           struct.value_types.put(_key190, _val191);
1:cc83c44:         }
1:cc83c44:       }
1:b153d45:       struct.setValue_typesIsSet(true);
1:b153d45:       struct.default_name_type = iprot.readString();
1:b153d45:       struct.setDefault_name_typeIsSet(true);
1:b153d45:       struct.default_value_type = iprot.readString();
1:b153d45:       struct.setDefault_value_typeIsSet(true);
1:cc83c44:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class CqlMetadata implements org.apache.thrift.TBase<CqlMetadata, CqlMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<CqlMetadata> {
/////////////////////////////////////////////////////////////////////////
1:       Map<ByteBuffer,String> __this__name_types = new HashMap<ByteBuffer,String>(other.name_types);
1:       Map<ByteBuffer,String> __this__value_types = new HashMap<ByteBuffer,String>(other.value_types);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetName_types()).compareTo(other.isSetName_types());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_types, other.name_types);
1:     lastComparison = Boolean.valueOf(isSetValue_types()).compareTo(other.isSetValue_types());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_types, other.value_types);
1:     lastComparison = Boolean.valueOf(isSetDefault_name_type()).compareTo(other.isSetDefault_name_type());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_name_type, other.default_name_type);
1:     lastComparison = Boolean.valueOf(isSetDefault_value_type()).compareTo(other.isSetDefault_value_type());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value_type, other.default_value_type);
/////////////////////////////////////////////////////////////////////////
1:                   ByteBuffer _key174;
1:                   String _val175;
/////////////////////////////////////////////////////////////////////////
1:                   ByteBuffer _key178;
1:                   String _val179;
/////////////////////////////////////////////////////////////////////////
1:           ByteBuffer _key186;
1:           String _val187;
/////////////////////////////////////////////////////////////////////////
1:           ByteBuffer _key190;
1:           String _val191;
commit:a965977
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TMap _map172 = iprot.readMapBegin();
1:                 struct.name_types = new HashMap<ByteBuffer,String>(2*_map172.size);
1:                 for (int _i173 = 0; _i173 < _map172.size; ++_i173)
0:                   ByteBuffer _key174; // optional
0:                   String _val175; // required
1:                   _key174 = iprot.readBinary();
1:                   _val175 = iprot.readString();
1:                   struct.name_types.put(_key174, _val175);
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TMap _map176 = iprot.readMapBegin();
1:                 struct.value_types = new HashMap<ByteBuffer,String>(2*_map176.size);
1:                 for (int _i177 = 0; _i177 < _map176.size; ++_i177)
0:                   ByteBuffer _key178; // optional
0:                   String _val179; // required
1:                   _key178 = iprot.readBinary();
1:                   _val179 = iprot.readString();
1:                   struct.value_types.put(_key178, _val179);
/////////////////////////////////////////////////////////////////////////
1:           for (Map.Entry<ByteBuffer, String> _iter180 : struct.name_types.entrySet())
1:             oprot.writeBinary(_iter180.getKey());
1:             oprot.writeString(_iter180.getValue());
/////////////////////////////////////////////////////////////////////////
1:           for (Map.Entry<ByteBuffer, String> _iter181 : struct.value_types.entrySet())
1:             oprot.writeBinary(_iter181.getKey());
1:             oprot.writeString(_iter181.getValue());
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<ByteBuffer, String> _iter182 : struct.name_types.entrySet())
1:           oprot.writeBinary(_iter182.getKey());
1:           oprot.writeString(_iter182.getValue());
1:         for (Map.Entry<ByteBuffer, String> _iter183 : struct.value_types.entrySet())
1:           oprot.writeBinary(_iter183.getKey());
1:           oprot.writeString(_iter183.getValue());
/////////////////////////////////////////////////////////////////////////
1:         org.apache.thrift.protocol.TMap _map184 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:         struct.name_types = new HashMap<ByteBuffer,String>(2*_map184.size);
1:         for (int _i185 = 0; _i185 < _map184.size; ++_i185)
0:           ByteBuffer _key186; // optional
0:           String _val187; // required
1:           _key186 = iprot.readBinary();
1:           _val187 = iprot.readString();
1:           struct.name_types.put(_key186, _val187);
1:         org.apache.thrift.protocol.TMap _map188 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:         struct.value_types = new HashMap<ByteBuffer,String>(2*_map188.size);
1:         for (int _i189 = 0; _i189 < _map188.size; ++_i189)
0:           ByteBuffer _key190; // optional
0:           String _val191; // required
1:           _key190 = iprot.readBinary();
1:           _val191 = iprot.readString();
1:           struct.value_types.put(_key190, _val191);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
0:                   ByteBuffer _key174; // required
/////////////////////////////////////////////////////////////////////////
0:                   ByteBuffer _key178; // required
/////////////////////////////////////////////////////////////////////////
0:           ByteBuffer _key186; // required
/////////////////////////////////////////////////////////////////////////
0:           ByteBuffer _key190; // required
commit:bfe1e1c
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map174 = iprot.readMapBegin();
0:                 struct.name_types = new HashMap<ByteBuffer,String>(2*_map174.size);
0:                 for (int _i175 = 0; _i175 < _map174.size; ++_i175)
0:                   ByteBuffer _key176; // required
0:                   String _val177; // required
0:                   _key176 = iprot.readBinary();
0:                   _val177 = iprot.readString();
0:                   struct.name_types.put(_key176, _val177);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map178 = iprot.readMapBegin();
0:                 struct.value_types = new HashMap<ByteBuffer,String>(2*_map178.size);
0:                 for (int _i179 = 0; _i179 < _map178.size; ++_i179)
0:                   ByteBuffer _key180; // required
0:                   String _val181; // required
0:                   _key180 = iprot.readBinary();
0:                   _val181 = iprot.readString();
0:                   struct.value_types.put(_key180, _val181);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<ByteBuffer, String> _iter182 : struct.name_types.entrySet())
0:             oprot.writeBinary(_iter182.getKey());
0:             oprot.writeString(_iter182.getValue());
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<ByteBuffer, String> _iter183 : struct.value_types.entrySet())
0:             oprot.writeBinary(_iter183.getKey());
0:             oprot.writeString(_iter183.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter184 : struct.name_types.entrySet())
0:           oprot.writeBinary(_iter184.getKey());
0:           oprot.writeString(_iter184.getValue());
0:         for (Map.Entry<ByteBuffer, String> _iter185 : struct.value_types.entrySet())
0:           oprot.writeBinary(_iter185.getKey());
0:           oprot.writeString(_iter185.getValue());
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TMap _map186 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.name_types = new HashMap<ByteBuffer,String>(2*_map186.size);
0:         for (int _i187 = 0; _i187 < _map186.size; ++_i187)
0:           ByteBuffer _key188; // required
0:           String _val189; // required
0:           _key188 = iprot.readBinary();
0:           _val189 = iprot.readString();
0:           struct.name_types.put(_key188, _val189);
0:         org.apache.thrift.protocol.TMap _map190 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.value_types = new HashMap<ByteBuffer,String>(2*_map190.size);
0:         for (int _i191 = 0; _i191 < _map190.size; ++_i191)
0:           ByteBuffer _key192; // required
0:           String _val193; // required
0:           _key192 = iprot.readBinary();
0:           _val193 = iprot.readString();
0:           struct.value_types.put(_key192, _val193);
commit:1ea2a60
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
0:               this.name_types = new HashMap<ByteBuffer,String>(2*_map73.size);
0:               for (int _i74 = 0; _i74 < _map73.size; ++_i74)
0:                 ByteBuffer _key75; // required
0:                 String _val76; // required
0:                 _key75 = iprot.readBinary();
0:                 _val76 = iprot.readString();
0:                 this.name_types.put(_key75, _val76);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map77 = iprot.readMapBegin();
0:               this.value_types = new HashMap<ByteBuffer,String>(2*_map77.size);
0:               for (int _i78 = 0; _i78 < _map77.size; ++_i78)
0:                 ByteBuffer _key79; // required
0:                 String _val80; // required
0:                 _key79 = iprot.readBinary();
0:                 _val80 = iprot.readString();
0:                 this.value_types.put(_key79, _val80);
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter81 : this.name_types.entrySet())
0:           oprot.writeBinary(_iter81.getKey());
0:           oprot.writeString(_iter81.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter82 : this.value_types.entrySet())
0:           oprot.writeBinary(_iter82.getKey());
0:           oprot.writeString(_iter82.getValue());
commit:087d24a
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map77 = iprot.readMapBegin();
0:               this.name_types = new HashMap<ByteBuffer,String>(2*_map77.size);
0:               for (int _i78 = 0; _i78 < _map77.size; ++_i78)
0:                 ByteBuffer _key79; // required
0:                 String _val80; // required
0:                 _key79 = iprot.readBinary();
0:                 _val80 = iprot.readString();
0:                 this.name_types.put(_key79, _val80);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map81 = iprot.readMapBegin();
0:               this.value_types = new HashMap<ByteBuffer,String>(2*_map81.size);
0:               for (int _i82 = 0; _i82 < _map81.size; ++_i82)
0:                 ByteBuffer _key83; // required
0:                 String _val84; // required
0:                 _key83 = iprot.readBinary();
0:                 _val84 = iprot.readString();
0:                 this.value_types.put(_key83, _val84);
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter85 : this.name_types.entrySet())
0:           oprot.writeBinary(_iter85.getKey());
0:           oprot.writeString(_iter85.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter86 : this.value_types.entrySet())
0:           oprot.writeBinary(_iter86.getKey());
0:           oprot.writeString(_iter86.getValue());
commit:3297a96
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
0:               this.name_types = new HashMap<ByteBuffer,String>(2*_map73.size);
0:               for (int _i74 = 0; _i74 < _map73.size; ++_i74)
0:                 ByteBuffer _key75;
0:                 String _val76;
0:                 _key75 = iprot.readBinary();
0:                 _val76 = iprot.readString();
0:                 this.name_types.put(_key75, _val76);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map77 = iprot.readMapBegin();
0:               this.value_types = new HashMap<ByteBuffer,String>(2*_map77.size);
0:               for (int _i78 = 0; _i78 < _map77.size; ++_i78)
0:                 ByteBuffer _key79;
0:                 String _val80;
0:                 _key79 = iprot.readBinary();
0:                 _val80 = iprot.readString();
0:                 this.value_types.put(_key79, _val80);
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter81 : this.name_types.entrySet())
0:           oprot.writeBinary(_iter81.getKey());
0:           oprot.writeString(_iter81.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter82 : this.value_types.entrySet())
0:           oprot.writeBinary(_iter82.getKey());
0:           oprot.writeString(_iter82.getValue());
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8bf6e15
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map166 = iprot.readMapBegin();
0:                 struct.name_types = new HashMap<ByteBuffer,String>(2*_map166.size);
0:                 for (int _i167 = 0; _i167 < _map166.size; ++_i167)
0:                   ByteBuffer _key168; // required
0:                   String _val169; // required
0:                   _key168 = iprot.readBinary();
0:                   _val169 = iprot.readString();
0:                   struct.name_types.put(_key168, _val169);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin();
0:                 struct.value_types = new HashMap<ByteBuffer,String>(2*_map170.size);
0:                 for (int _i171 = 0; _i171 < _map170.size; ++_i171)
0:                   ByteBuffer _key172; // required
0:                   String _val173; // required
0:                   _key172 = iprot.readBinary();
0:                   _val173 = iprot.readString();
0:                   struct.value_types.put(_key172, _val173);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<ByteBuffer, String> _iter174 : struct.name_types.entrySet())
0:             oprot.writeBinary(_iter174.getKey());
0:             oprot.writeString(_iter174.getValue());
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<ByteBuffer, String> _iter175 : struct.value_types.entrySet())
0:             oprot.writeBinary(_iter175.getKey());
0:             oprot.writeString(_iter175.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter176 : struct.name_types.entrySet())
0:           oprot.writeBinary(_iter176.getKey());
0:           oprot.writeString(_iter176.getValue());
0:         for (Map.Entry<ByteBuffer, String> _iter177 : struct.value_types.entrySet())
0:           oprot.writeBinary(_iter177.getKey());
0:           oprot.writeString(_iter177.getValue());
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.name_types = new HashMap<ByteBuffer,String>(2*_map178.size);
0:         for (int _i179 = 0; _i179 < _map178.size; ++_i179)
0:           ByteBuffer _key180; // required
0:           String _val181; // required
0:           _key180 = iprot.readBinary();
0:           _val181 = iprot.readString();
0:           struct.name_types.put(_key180, _val181);
0:         org.apache.thrift.protocol.TMap _map182 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.value_types = new HashMap<ByteBuffer,String>(2*_map182.size);
0:         for (int _i183 = 0; _i183 < _map182.size; ++_i183)
0:           ByteBuffer _key184; // required
0:           String _val185; // required
0:           _key184 = iprot.readBinary();
0:           _val185 = iprot.readString();
0:           struct.value_types.put(_key184, _val185);
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map154 = iprot.readMapBegin();
0:                 struct.name_types = new HashMap<ByteBuffer,String>(2*_map154.size);
0:                 for (int _i155 = 0; _i155 < _map154.size; ++_i155)
0:                   ByteBuffer _key156; // required
0:                   String _val157; // required
0:                   _key156 = iprot.readBinary();
0:                   _val157 = iprot.readString();
0:                   struct.name_types.put(_key156, _val157);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
0:                 struct.value_types = new HashMap<ByteBuffer,String>(2*_map158.size);
0:                 for (int _i159 = 0; _i159 < _map158.size; ++_i159)
0:                   ByteBuffer _key160; // required
0:                   String _val161; // required
0:                   _key160 = iprot.readBinary();
0:                   _val161 = iprot.readString();
0:                   struct.value_types.put(_key160, _val161);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<ByteBuffer, String> _iter162 : struct.name_types.entrySet())
0:             oprot.writeBinary(_iter162.getKey());
0:             oprot.writeString(_iter162.getValue());
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<ByteBuffer, String> _iter163 : struct.value_types.entrySet())
0:             oprot.writeBinary(_iter163.getKey());
0:             oprot.writeString(_iter163.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter164 : struct.name_types.entrySet())
0:           oprot.writeBinary(_iter164.getKey());
0:           oprot.writeString(_iter164.getValue());
0:         for (Map.Entry<ByteBuffer, String> _iter165 : struct.value_types.entrySet())
0:           oprot.writeBinary(_iter165.getKey());
0:           oprot.writeString(_iter165.getValue());
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TMap _map166 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.name_types = new HashMap<ByteBuffer,String>(2*_map166.size);
0:         for (int _i167 = 0; _i167 < _map166.size; ++_i167)
0:           ByteBuffer _key168; // required
0:           String _val169; // required
0:           _key168 = iprot.readBinary();
0:           _val169 = iprot.readString();
0:           struct.name_types.put(_key168, _val169);
0:         org.apache.thrift.protocol.TMap _map170 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.value_types = new HashMap<ByteBuffer,String>(2*_map170.size);
0:         for (int _i171 = 0; _i171 < _map170.size; ++_i171)
0:           ByteBuffer _key172; // required
0:           String _val173; // required
0:           _key172 = iprot.readBinary();
0:           _val173 = iprot.readString();
0:           struct.value_types.put(_key172, _val173);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:b8434fc
commit:b391600
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
0:               this.name_types = new HashMap<ByteBuffer,String>(2*_map65.size);
0:               for (int _i66 = 0; _i66 < _map65.size; ++_i66)
0:                 ByteBuffer _key67;
0:                 String _val68;
0:                 _key67 = iprot.readBinary();
0:                 _val68 = iprot.readString();
0:                 this.name_types.put(_key67, _val68);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin();
0:               this.value_types = new HashMap<ByteBuffer,String>(2*_map69.size);
0:               for (int _i70 = 0; _i70 < _map69.size; ++_i70)
0:                 ByteBuffer _key71;
0:                 String _val72;
0:                 _key71 = iprot.readBinary();
0:                 _val72 = iprot.readString();
0:                 this.value_types.put(_key71, _val72);
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter73 : this.name_types.entrySet())
0:           oprot.writeBinary(_iter73.getKey());
0:           oprot.writeString(_iter73.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter74 : this.value_types.entrySet())
0:           oprot.writeBinary(_iter74.getKey());
0:           oprot.writeString(_iter74.getValue());
commit:cc83c44
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class CqlMetadata implements org.apache.thrift.TBase<CqlMetadata, CqlMetadata._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlMetadata");
1: 
1:   private static final org.apache.thrift.protocol.TField NAME_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("name_types", org.apache.thrift.protocol.TType.MAP, (short)1);
1:   private static final org.apache.thrift.protocol.TField VALUE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("value_types", org.apache.thrift.protocol.TType.MAP, (short)2);
1:   private static final org.apache.thrift.protocol.TField DEFAULT_NAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_name_type", org.apache.thrift.protocol.TType.STRING, (short)3);
1:   private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value_type", org.apache.thrift.protocol.TType.STRING, (short)4);
1: 
0:   public Map<ByteBuffer,String> name_types;
0:   public Map<ByteBuffer,String> value_types;
0:   public String default_name_type;
0:   public String default_value_type;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     NAME_TYPES((short)1, "name_types"),
1:     VALUE_TYPES((short)2, "value_types"),
1:     DEFAULT_NAME_TYPE((short)3, "default_name_type"),
1:     DEFAULT_VALUE_TYPE((short)4, "default_value_type");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // NAME_TYPES
1:           return NAME_TYPES;
1:         case 2: // VALUE_TYPES
1:           return VALUE_TYPES;
1:         case 3: // DEFAULT_NAME_TYPE
1:           return DEFAULT_NAME_TYPE;
1:         case 4: // DEFAULT_VALUE_TYPE
1:           return DEFAULT_VALUE_TYPE;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1: 
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.NAME_TYPES, new org.apache.thrift.meta_data.FieldMetaData("name_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:     tmpMap.put(_Fields.VALUE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("value_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:     tmpMap.put(_Fields.DEFAULT_NAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("default_name_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.DEFAULT_VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("default_value_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlMetadata.class, metaDataMap);
1:   }
1: 
1:   public CqlMetadata() {
1:   }
1: 
1:   public CqlMetadata(
1:     Map<ByteBuffer,String> name_types,
1:     Map<ByteBuffer,String> value_types,
1:     String default_name_type,
1:     String default_value_type)
1:   {
1:     this();
1:     this.name_types = name_types;
1:     this.value_types = value_types;
1:     this.default_name_type = default_name_type;
1:     this.default_value_type = default_value_type;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public CqlMetadata(CqlMetadata other) {
1:     if (other.isSetName_types()) {
0:       Map<ByteBuffer,String> __this__name_types = new HashMap<ByteBuffer,String>();
0:       for (Map.Entry<ByteBuffer, String> other_element : other.name_types.entrySet()) {
1: 
0:         ByteBuffer other_element_key = other_element.getKey();
0:         String other_element_value = other_element.getValue();
1: 
0:         ByteBuffer __this__name_types_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
0: ;
1: 
0:         String __this__name_types_copy_value = other_element_value;
1: 
0:         __this__name_types.put(__this__name_types_copy_key, __this__name_types_copy_value);
1:       }
1:       this.name_types = __this__name_types;
1:     }
1:     if (other.isSetValue_types()) {
0:       Map<ByteBuffer,String> __this__value_types = new HashMap<ByteBuffer,String>();
0:       for (Map.Entry<ByteBuffer, String> other_element : other.value_types.entrySet()) {
1: 
0:         ByteBuffer other_element_key = other_element.getKey();
0:         String other_element_value = other_element.getValue();
1: 
0:         ByteBuffer __this__value_types_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
0: ;
1: 
0:         String __this__value_types_copy_value = other_element_value;
1: 
0:         __this__value_types.put(__this__value_types_copy_key, __this__value_types_copy_value);
1:       }
1:       this.value_types = __this__value_types;
1:     }
1:     if (other.isSetDefault_name_type()) {
1:       this.default_name_type = other.default_name_type;
1:     }
1:     if (other.isSetDefault_value_type()) {
1:       this.default_value_type = other.default_value_type;
1:     }
1:   }
1: 
1:   public CqlMetadata deepCopy() {
1:     return new CqlMetadata(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.name_types = null;
1:     this.value_types = null;
1:     this.default_name_type = null;
1:     this.default_value_type = null;
1:   }
1: 
1:   public int getName_typesSize() {
1:     return (this.name_types == null) ? 0 : this.name_types.size();
1:   }
1: 
1:   public void putToName_types(ByteBuffer key, String val) {
1:     if (this.name_types == null) {
1:       this.name_types = new HashMap<ByteBuffer,String>();
1:     }
1:     this.name_types.put(key, val);
1:   }
1: 
1:   public Map<ByteBuffer,String> getName_types() {
1:     return this.name_types;
1:   }
1: 
1:   public CqlMetadata setName_types(Map<ByteBuffer,String> name_types) {
1:     this.name_types = name_types;
1:     return this;
1:   }
1: 
1:   public void unsetName_types() {
1:     this.name_types = null;
1:   }
1: 
1:   /** Returns true if field name_types is set (has been assigned a value) and false otherwise */
1:   public boolean isSetName_types() {
1:     return this.name_types != null;
1:   }
1: 
1:   public void setName_typesIsSet(boolean value) {
1:     if (!value) {
1:       this.name_types = null;
1:     }
1:   }
1: 
1:   public int getValue_typesSize() {
1:     return (this.value_types == null) ? 0 : this.value_types.size();
1:   }
1: 
1:   public void putToValue_types(ByteBuffer key, String val) {
1:     if (this.value_types == null) {
1:       this.value_types = new HashMap<ByteBuffer,String>();
1:     }
1:     this.value_types.put(key, val);
1:   }
1: 
1:   public Map<ByteBuffer,String> getValue_types() {
1:     return this.value_types;
1:   }
1: 
1:   public CqlMetadata setValue_types(Map<ByteBuffer,String> value_types) {
1:     this.value_types = value_types;
1:     return this;
1:   }
1: 
1:   public void unsetValue_types() {
1:     this.value_types = null;
1:   }
1: 
1:   /** Returns true if field value_types is set (has been assigned a value) and false otherwise */
1:   public boolean isSetValue_types() {
1:     return this.value_types != null;
1:   }
1: 
1:   public void setValue_typesIsSet(boolean value) {
1:     if (!value) {
1:       this.value_types = null;
1:     }
1:   }
1: 
1:   public String getDefault_name_type() {
1:     return this.default_name_type;
1:   }
1: 
1:   public CqlMetadata setDefault_name_type(String default_name_type) {
1:     this.default_name_type = default_name_type;
1:     return this;
1:   }
1: 
1:   public void unsetDefault_name_type() {
1:     this.default_name_type = null;
1:   }
1: 
1:   /** Returns true if field default_name_type is set (has been assigned a value) and false otherwise */
1:   public boolean isSetDefault_name_type() {
1:     return this.default_name_type != null;
1:   }
1: 
1:   public void setDefault_name_typeIsSet(boolean value) {
1:     if (!value) {
1:       this.default_name_type = null;
1:     }
1:   }
1: 
1:   public String getDefault_value_type() {
1:     return this.default_value_type;
1:   }
1: 
1:   public CqlMetadata setDefault_value_type(String default_value_type) {
1:     this.default_value_type = default_value_type;
1:     return this;
1:   }
1: 
1:   public void unsetDefault_value_type() {
1:     this.default_value_type = null;
1:   }
1: 
1:   /** Returns true if field default_value_type is set (has been assigned a value) and false otherwise */
1:   public boolean isSetDefault_value_type() {
1:     return this.default_value_type != null;
1:   }
1: 
1:   public void setDefault_value_typeIsSet(boolean value) {
1:     if (!value) {
1:       this.default_value_type = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case NAME_TYPES:
1:       if (value == null) {
1:         unsetName_types();
1:       } else {
1:         setName_types((Map<ByteBuffer,String>)value);
1:       }
1:       break;
1: 
1:     case VALUE_TYPES:
1:       if (value == null) {
1:         unsetValue_types();
1:       } else {
1:         setValue_types((Map<ByteBuffer,String>)value);
1:       }
1:       break;
1: 
1:     case DEFAULT_NAME_TYPE:
1:       if (value == null) {
1:         unsetDefault_name_type();
1:       } else {
1:         setDefault_name_type((String)value);
1:       }
1:       break;
1: 
1:     case DEFAULT_VALUE_TYPE:
1:       if (value == null) {
1:         unsetDefault_value_type();
1:       } else {
1:         setDefault_value_type((String)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case NAME_TYPES:
1:       return getName_types();
1: 
1:     case VALUE_TYPES:
1:       return getValue_types();
1: 
1:     case DEFAULT_NAME_TYPE:
1:       return getDefault_name_type();
1: 
1:     case DEFAULT_VALUE_TYPE:
1:       return getDefault_value_type();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case NAME_TYPES:
1:       return isSetName_types();
1:     case VALUE_TYPES:
1:       return isSetValue_types();
1:     case DEFAULT_NAME_TYPE:
1:       return isSetDefault_name_type();
1:     case DEFAULT_VALUE_TYPE:
1:       return isSetDefault_value_type();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof CqlMetadata)
1:       return this.equals((CqlMetadata)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(CqlMetadata that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_name_types = true && this.isSetName_types();
1:     boolean that_present_name_types = true && that.isSetName_types();
1:     if (this_present_name_types || that_present_name_types) {
1:       if (!(this_present_name_types && that_present_name_types))
1:         return false;
1:       if (!this.name_types.equals(that.name_types))
1:         return false;
1:     }
1: 
1:     boolean this_present_value_types = true && this.isSetValue_types();
1:     boolean that_present_value_types = true && that.isSetValue_types();
1:     if (this_present_value_types || that_present_value_types) {
1:       if (!(this_present_value_types && that_present_value_types))
1:         return false;
1:       if (!this.value_types.equals(that.value_types))
1:         return false;
1:     }
1: 
1:     boolean this_present_default_name_type = true && this.isSetDefault_name_type();
1:     boolean that_present_default_name_type = true && that.isSetDefault_name_type();
1:     if (this_present_default_name_type || that_present_default_name_type) {
1:       if (!(this_present_default_name_type && that_present_default_name_type))
1:         return false;
1:       if (!this.default_name_type.equals(that.default_name_type))
1:         return false;
1:     }
1: 
1:     boolean this_present_default_value_type = true && this.isSetDefault_value_type();
1:     boolean that_present_default_value_type = true && that.isSetDefault_value_type();
1:     if (this_present_default_value_type || that_present_default_value_type) {
1:       if (!(this_present_default_value_type && that_present_default_value_type))
1:         return false;
1:       if (!this.default_value_type.equals(that.default_value_type))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_name_types = true && (isSetName_types());
1:     builder.append(present_name_types);
1:     if (present_name_types)
1:       builder.append(name_types);
1: 
1:     boolean present_value_types = true && (isSetValue_types());
1:     builder.append(present_value_types);
1:     if (present_value_types)
1:       builder.append(value_types);
1: 
1:     boolean present_default_name_type = true && (isSetDefault_name_type());
1:     builder.append(present_default_name_type);
1:     if (present_default_name_type)
1:       builder.append(default_name_type);
1: 
1:     boolean present_default_value_type = true && (isSetDefault_value_type());
1:     builder.append(present_default_value_type);
1:     if (present_default_value_type)
1:       builder.append(default_value_type);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(CqlMetadata other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     CqlMetadata typedOther = (CqlMetadata)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetName_types()).compareTo(typedOther.isSetName_types());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetName_types()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_types, typedOther.name_types);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetValue_types()).compareTo(typedOther.isSetValue_types());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetValue_types()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_types, typedOther.value_types);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetDefault_name_type()).compareTo(typedOther.isSetDefault_name_type());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetDefault_name_type()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_name_type, typedOther.default_name_type);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetDefault_value_type()).compareTo(typedOther.isSetDefault_value_type());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetDefault_value_type()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value_type, typedOther.default_value_type);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // NAME_TYPES
0:           if (field.type == org.apache.thrift.protocol.TType.MAP) {
1:             {
0:               org.apache.thrift.protocol.TMap _map61 = iprot.readMapBegin();
0:               this.name_types = new HashMap<ByteBuffer,String>(2*_map61.size);
0:               for (int _i62 = 0; _i62 < _map61.size; ++_i62)
1:               {
0:                 ByteBuffer _key63;
0:                 String _val64;
0:                 _key63 = iprot.readBinary();
0:                 _val64 = iprot.readString();
0:                 this.name_types.put(_key63, _val64);
1:               }
1:               iprot.readMapEnd();
1:             }
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // VALUE_TYPES
0:           if (field.type == org.apache.thrift.protocol.TType.MAP) {
1:             {
0:               org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
0:               this.value_types = new HashMap<ByteBuffer,String>(2*_map65.size);
0:               for (int _i66 = 0; _i66 < _map65.size; ++_i66)
1:               {
0:                 ByteBuffer _key67;
0:                 String _val68;
0:                 _key67 = iprot.readBinary();
0:                 _val68 = iprot.readString();
0:                 this.value_types.put(_key67, _val68);
1:               }
1:               iprot.readMapEnd();
1:             }
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // DEFAULT_NAME_TYPE
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.default_name_type = iprot.readString();
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 4: // DEFAULT_VALUE_TYPE
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.default_value_type = iprot.readString();
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:       }
1:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.name_types != null) {
1:       oprot.writeFieldBegin(NAME_TYPES_FIELD_DESC);
1:       {
0:         oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.name_types.size()));
0:         for (Map.Entry<ByteBuffer, String> _iter69 : this.name_types.entrySet())
1:         {
0:           oprot.writeBinary(_iter69.getKey());
0:           oprot.writeString(_iter69.getValue());
1:         }
1:         oprot.writeMapEnd();
1:       }
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.value_types != null) {
1:       oprot.writeFieldBegin(VALUE_TYPES_FIELD_DESC);
1:       {
0:         oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.value_types.size()));
0:         for (Map.Entry<ByteBuffer, String> _iter70 : this.value_types.entrySet())
1:         {
0:           oprot.writeBinary(_iter70.getKey());
0:           oprot.writeString(_iter70.getValue());
1:         }
1:         oprot.writeMapEnd();
1:       }
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.default_name_type != null) {
1:       oprot.writeFieldBegin(DEFAULT_NAME_TYPE_FIELD_DESC);
0:       oprot.writeString(this.default_name_type);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.default_value_type != null) {
1:       oprot.writeFieldBegin(DEFAULT_VALUE_TYPE_FIELD_DESC);
0:       oprot.writeString(this.default_value_type);
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("CqlMetadata(");
1:     boolean first = true;
1: 
1:     sb.append("name_types:");
1:     if (this.name_types == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.name_types);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("value_types:");
1:     if (this.value_types == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.value_types);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("default_name_type:");
1:     if (this.default_name_type == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.default_name_type);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("default_value_type:");
1:     if (this.default_value_type == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.default_value_type);
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:     if (name_types == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name_types' was not present! Struct: " + toString());
1:     }
1:     if (value_types == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'value_types' was not present! Struct: " + toString());
1:     }
1:     if (default_name_type == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'default_name_type' was not present! Struct: " + toString());
1:     }
1:     if (default_value_type == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'default_value_type' was not present! Struct: " + toString());
1:     }
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
commit:effb653
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
0:               this.name_types = new HashMap<ByteBuffer,String>(2*_map65.size);
0:               for (int _i66 = 0; _i66 < _map65.size; ++_i66)
0:                 ByteBuffer _key67;
0:                 String _val68;
0:                 _key67 = iprot.readBinary();
0:                 _val68 = iprot.readString();
0:                 this.name_types.put(_key67, _val68);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin();
0:               this.value_types = new HashMap<ByteBuffer,String>(2*_map69.size);
0:               for (int _i70 = 0; _i70 < _map69.size; ++_i70)
0:                 ByteBuffer _key71;
0:                 String _val72;
0:                 _key71 = iprot.readBinary();
0:                 _val72 = iprot.readString();
0:                 this.value_types.put(_key71, _val72);
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter73 : this.name_types.entrySet())
0:           oprot.writeBinary(_iter73.getKey());
0:           oprot.writeString(_iter73.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ByteBuffer, String> _iter74 : this.value_types.entrySet())
0:           oprot.writeBinary(_iter74.getKey());
0:           oprot.writeString(_iter74.getValue());
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new CqlMetadataStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new CqlMetadataTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class CqlMetadataStandardSchemeFactory implements SchemeFactory {
1:     public CqlMetadataStandardScheme getScheme() {
1:       return new CqlMetadataStandardScheme();
1:     }
1:   }
0: 
1:   private static class CqlMetadataStandardScheme extends StandardScheme<CqlMetadata> {
0: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlMetadata struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // NAME_TYPES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:               {
0:                 org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin();
0:                 struct.name_types = new HashMap<ByteBuffer,String>(2*_map146.size);
0:                 for (int _i147 = 0; _i147 < _map146.size; ++_i147)
1:                 {
0:                   ByteBuffer _key148; // required
0:                   String _val149; // required
0:                   _key148 = iprot.readBinary();
0:                   _val149 = iprot.readString();
0:                   struct.name_types.put(_key148, _val149);
1:                 }
0:                 iprot.readMapEnd();
1:               }
1:               struct.setName_typesIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // VALUE_TYPES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:               {
0:                 org.apache.thrift.protocol.TMap _map150 = iprot.readMapBegin();
0:                 struct.value_types = new HashMap<ByteBuffer,String>(2*_map150.size);
0:                 for (int _i151 = 0; _i151 < _map150.size; ++_i151)
1:                 {
0:                   ByteBuffer _key152; // required
0:                   String _val153; // required
0:                   _key152 = iprot.readBinary();
0:                   _val153 = iprot.readString();
0:                   struct.value_types.put(_key152, _val153);
1:                 }
0:                 iprot.readMapEnd();
1:               }
1:               struct.setValue_typesIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 3: // DEFAULT_NAME_TYPE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.default_name_type = iprot.readString();
1:               struct.setDefault_name_typeIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 4: // DEFAULT_VALUE_TYPE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.default_value_type = iprot.readString();
1:               struct.setDefault_value_typeIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
0: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlMetadata struct) throws org.apache.thrift.TException {
1:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.name_types != null) {
0:         oprot.writeFieldBegin(NAME_TYPES_FIELD_DESC);
1:         {
1:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.name_types.size()));
0:           for (Map.Entry<ByteBuffer, String> _iter154 : struct.name_types.entrySet())
1:           {
0:             oprot.writeBinary(_iter154.getKey());
0:             oprot.writeString(_iter154.getValue());
1:           }
0:           oprot.writeMapEnd();
1:         }
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.value_types != null) {
0:         oprot.writeFieldBegin(VALUE_TYPES_FIELD_DESC);
1:         {
1:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.value_types.size()));
0:           for (Map.Entry<ByteBuffer, String> _iter155 : struct.value_types.entrySet())
1:           {
0:             oprot.writeBinary(_iter155.getKey());
0:             oprot.writeString(_iter155.getValue());
1:           }
0:           oprot.writeMapEnd();
1:         }
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.default_name_type != null) {
0:         oprot.writeFieldBegin(DEFAULT_NAME_TYPE_FIELD_DESC);
1:         oprot.writeString(struct.default_name_type);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.default_value_type != null) {
0:         oprot.writeFieldBegin(DEFAULT_VALUE_TYPE_FIELD_DESC);
1:         oprot.writeString(struct.default_value_type);
0:         oprot.writeFieldEnd();
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
0: 
1:   }
0: 
1:   private static class CqlMetadataTupleSchemeFactory implements SchemeFactory {
1:     public CqlMetadataTupleScheme getScheme() {
1:       return new CqlMetadataTupleScheme();
1:     }
1:   }
0: 
1:   private static class CqlMetadataTupleScheme extends TupleScheme<CqlMetadata> {
0: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlMetadata struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       {
1:         oprot.writeI32(struct.name_types.size());
0:         for (Map.Entry<ByteBuffer, String> _iter156 : struct.name_types.entrySet())
1:         {
0:           oprot.writeBinary(_iter156.getKey());
0:           oprot.writeString(_iter156.getValue());
1:         }
1:       }
1:       {
1:         oprot.writeI32(struct.value_types.size());
0:         for (Map.Entry<ByteBuffer, String> _iter157 : struct.value_types.entrySet())
1:         {
0:           oprot.writeBinary(_iter157.getKey());
0:           oprot.writeString(_iter157.getValue());
1:         }
1:       }
1:       oprot.writeString(struct.default_name_type);
1:       oprot.writeString(struct.default_value_type);
1:     }
0: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlMetadata struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       {
0:         org.apache.thrift.protocol.TMap _map158 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.name_types = new HashMap<ByteBuffer,String>(2*_map158.size);
0:         for (int _i159 = 0; _i159 < _map158.size; ++_i159)
1:         {
0:           ByteBuffer _key160; // required
0:           String _val161; // required
0:           _key160 = iprot.readBinary();
0:           _val161 = iprot.readString();
0:           struct.name_types.put(_key160, _val161);
1:         }
1:       }
1:       struct.setName_typesIsSet(true);
1:       {
0:         org.apache.thrift.protocol.TMap _map162 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:         struct.value_types = new HashMap<ByteBuffer,String>(2*_map162.size);
0:         for (int _i163 = 0; _i163 < _map162.size; ++_i163)
1:         {
0:           ByteBuffer _key164; // required
0:           String _val165; // required
0:           _key164 = iprot.readBinary();
0:           _val165 = iprot.readString();
0:           struct.value_types.put(_key164, _val165);
1:         }
1:       }
1:       struct.setValue_typesIsSet(true);
1:       struct.default_name_type = iprot.readString();
1:       struct.setDefault_name_typeIsSet(true);
1:       struct.default_value_type = iprot.readString();
1:       struct.setDefault_value_typeIsSet(true);
1:     }
1:   }
0: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public Map<ByteBuffer,String> name_types; // required
1:   public Map<ByteBuffer,String> value_types; // required
1:   public String default_name_type; // required
1:   public String default_value_type; // required
/////////////////////////////////////////////////////////////////////////
0:                 ByteBuffer _key75; // required
0:                 String _val76; // required
/////////////////////////////////////////////////////////////////////////
0:                 ByteBuffer _key79; // required
0:                 String _val80; // required
============================================================================