1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: package org.apache.cassandra.index.internal.composites;
1:0626be8: 
1:0626be8: import java.nio.ByteBuffer;
1:0626be8: 
1:0626be8: import org.apache.cassandra.config.ColumnDefinition;
1:0626be8: import org.apache.cassandra.db.Clustering;
1:0626be8: import org.apache.cassandra.db.ColumnFamilyStore;
1:0626be8: import org.apache.cassandra.db.marshal.AbstractType;
1:0626be8: import org.apache.cassandra.db.marshal.CollectionType;
1:0626be8: import org.apache.cassandra.db.marshal.CompositeType;
1:0626be8: import org.apache.cassandra.db.rows.Cell;
1:0626be8: import org.apache.cassandra.db.rows.CellPath;
1:0626be8: import org.apache.cassandra.db.rows.Row;
1:0626be8: import org.apache.cassandra.schema.IndexMetadata;
1:0626be8: 
1:0626be8: /**
1:0626be8:  * Index on the element and value of cells participating in a collection.
1:0626be8:  *
1:0626be8:  * The row keys for this index are a composite of the collection element
1:0626be8:  * and value of indexed columns.
1:0626be8:  */
1:0626be8: public class CollectionEntryIndex extends CollectionKeyIndexBase
1:0626be8: {
1:0626be8:     public CollectionEntryIndex(ColumnFamilyStore baseCfs,
1:0626be8:                                 IndexMetadata indexDef)
1:0626be8:     {
1:0626be8:         super(baseCfs, indexDef);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:0626be8:                                       Clustering clustering,
1:0626be8:                                       CellPath path, ByteBuffer cellValue)
1:0626be8:     {
1:0626be8:         return CompositeType.build(path.get(0), cellValue);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:0626be8:     {
1:0626be8:         ByteBuffer[] components = ((CompositeType)functions.getIndexedValueType(indexedColumn)).split(indexValue);
1:0626be8:         ByteBuffer mapKey = components[0];
1:0626be8:         ByteBuffer mapValue = components[1];
1:0626be8: 
1:0626be8:         ColumnDefinition columnDef = indexedColumn;
1:0626be8:         Cell cell = data.getCell(columnDef, CellPath.create(mapKey));
1:0626be8:         if (cell == null || !cell.isLive(nowInSec))
1:0626be8:             return true;
1:0626be8: 
1:0626be8:         AbstractType<?> valueComparator = ((CollectionType)columnDef.type).valueComparator();
1:0626be8:         return valueComparator.compare(mapValue, cell.value()) != 0;
1:0626be8:     }
1:0626be8: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.internal.composites;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.Clustering;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.CollectionType;
1: import org.apache.cassandra.db.marshal.CompositeType;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.CellPath;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.schema.IndexMetadata;
1: 
1: /**
1:  * Index on the element and value of cells participating in a collection.
1:  *
1:  * The row keys for this index are a composite of the collection element
1:  * and value of indexed columns.
1:  */
1: public class CollectionEntryIndex extends CollectionKeyIndexBase
1: {
1:     public CollectionEntryIndex(ColumnFamilyStore baseCfs,
1:                                 IndexMetadata indexDef)
1:     {
1:         super(baseCfs, indexDef);
1:     }
1: 
1:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:                                       Clustering clustering,
1:                                       CellPath path, ByteBuffer cellValue)
1:     {
1:         return CompositeType.build(path.get(0), cellValue);
1:     }
1: 
1:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:     {
1:         ByteBuffer[] components = ((CompositeType)functions.getIndexedValueType(indexedColumn)).split(indexValue);
1:         ByteBuffer mapKey = components[0];
1:         ByteBuffer mapValue = components[1];
1: 
1:         ColumnDefinition columnDef = indexedColumn;
1:         Cell cell = data.getCell(columnDef, CellPath.create(mapKey));
1:         if (cell == null || !cell.isLive(nowInSec))
1:             return true;
1: 
1:         AbstractType<?> valueComparator = ((CollectionType)columnDef.type).valueComparator();
1:         return valueComparator.compare(mapValue, cell.value()) != 0;
1:     }
1: }
============================================================================