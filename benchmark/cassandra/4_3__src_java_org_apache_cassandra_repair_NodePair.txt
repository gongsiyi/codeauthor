1:eb4fa4a: /*
1:eb4fa4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:eb4fa4a:  * or more contributor license agreements.  See the NOTICE file
1:eb4fa4a:  * distributed with this work for additional information
1:eb4fa4a:  * regarding copyright ownership.  The ASF licenses this file
1:eb4fa4a:  * to you under the Apache License, Version 2.0 (the
1:eb4fa4a:  * "License"); you may not use this file except in compliance
1:eb4fa4a:  * with the License.  You may obtain a copy of the License at
1:eb4fa4a:  *
1:eb4fa4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb4fa4a:  *
1:eb4fa4a:  * Unless required by applicable law or agreed to in writing, software
1:eb4fa4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb4fa4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb4fa4a:  * See the License for the specific language governing permissions and
1:eb4fa4a:  * limitations under the License.
1:eb4fa4a:  */
1:eb4fa4a: package org.apache.cassandra.repair;
1:eb4fa4a: 
1:eb4fa4a: import java.io.IOException;
1:eb4fa4a: import java.net.InetAddress;
1:eb4fa4a: 
1:eb4fa4a: import com.google.common.base.Objects;
1:eb4fa4a: 
1:eb4fa4a: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:eb4fa4a: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1:eb4fa4a: 
1:eb4fa4a: /**
1:eb4fa4a:  * NodePair is used for repair message body to indicate the pair of nodes.
1:eb4fa4a:  *
1:eb4fa4a:  * @since 2.0
1:eb4fa4a:  */
1:eb4fa4a: public class NodePair
1:eb4fa4a: {
1:eb4fa4a:     public static IVersionedSerializer<NodePair> serializer = new NodePairSerializer();
1:eb4fa4a: 
1:eb4fa4a:     public final InetAddress endpoint1;
1:eb4fa4a:     public final InetAddress endpoint2;
1:eb4fa4a: 
1:eb4fa4a:     public NodePair(InetAddress endpoint1, InetAddress endpoint2)
1:eb4fa4a:     {
1:eb4fa4a:         this.endpoint1 = endpoint1;
1:eb4fa4a:         this.endpoint2 = endpoint2;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     @Override
1:eb4fa4a:     public boolean equals(Object o)
1:eb4fa4a:     {
1:eb4fa4a:         if (this == o) return true;
1:eb4fa4a:         if (o == null || getClass() != o.getClass()) return false;
1:eb4fa4a: 
1:eb4fa4a:         NodePair nodePair = (NodePair) o;
1:eb4fa4a:         return endpoint1.equals(nodePair.endpoint1) && endpoint2.equals(nodePair.endpoint2);
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     @Override
1:eb4fa4a:     public int hashCode()
1:eb4fa4a:     {
1:eb4fa4a:         return Objects.hashCode(endpoint1, endpoint2);
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     public static class NodePairSerializer implements IVersionedSerializer<NodePair>
1:eb4fa4a:     {
1:75508ec:         public void serialize(NodePair nodePair, DataOutputPlus out, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             CompactEndpointSerializationHelper.serialize(nodePair.endpoint1, out);
1:eb4fa4a:             CompactEndpointSerializationHelper.serialize(nodePair.endpoint2, out);
1:eb4fa4a:         }
1:eb4fa4a: 
1:03f72ac:         public NodePair deserialize(DataInputPlus in, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             InetAddress ep1 = CompactEndpointSerializationHelper.deserialize(in);
1:eb4fa4a:             InetAddress ep2 = CompactEndpointSerializationHelper.deserialize(in);
1:eb4fa4a:             return new NodePair(ep1, ep2);
1:eb4fa4a:         }
1:eb4fa4a: 
1:eb4fa4a:         public long serializedSize(NodePair nodePair, int version)
1:eb4fa4a:         {
1:eb4fa4a:             return 2 * CompactEndpointSerializationHelper.serializedSize(nodePair.endpoint1);
1:eb4fa4a:         }
1:eb4fa4a:     }
1:eb4fa4a: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public NodePair deserialize(DataInputPlus in, int version) throws IOException
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(NodePair nodePair, DataOutputPlus out, int version) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:66f3014
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb4fa4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.net.InetAddress;
1: 
1: import com.google.common.base.Objects;
0: import com.google.common.collect.Sets;
1: 
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1: 
1: /**
1:  * NodePair is used for repair message body to indicate the pair of nodes.
1:  *
1:  * @since 2.0
1:  */
1: public class NodePair
1: {
1:     public static IVersionedSerializer<NodePair> serializer = new NodePairSerializer();
1: 
1:     public final InetAddress endpoint1;
1:     public final InetAddress endpoint2;
1: 
1:     public NodePair(InetAddress endpoint1, InetAddress endpoint2)
1:     {
1:         this.endpoint1 = endpoint1;
1:         this.endpoint2 = endpoint2;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         NodePair nodePair = (NodePair) o;
1:         return endpoint1.equals(nodePair.endpoint1) && endpoint2.equals(nodePair.endpoint2);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(endpoint1, endpoint2);
1:     }
1: 
1:     public static class NodePairSerializer implements IVersionedSerializer<NodePair>
1:     {
0:         public void serialize(NodePair nodePair, DataOutput out, int version) throws IOException
1:         {
1:             CompactEndpointSerializationHelper.serialize(nodePair.endpoint1, out);
1:             CompactEndpointSerializationHelper.serialize(nodePair.endpoint2, out);
1:         }
1: 
0:         public NodePair deserialize(DataInput in, int version) throws IOException
1:         {
1:             InetAddress ep1 = CompactEndpointSerializationHelper.deserialize(in);
1:             InetAddress ep2 = CompactEndpointSerializationHelper.deserialize(in);
1:             return new NodePair(ep1, ep2);
1:         }
1: 
1:         public long serializedSize(NodePair nodePair, int version)
1:         {
1:             return 2 * CompactEndpointSerializationHelper.serializedSize(nodePair.endpoint1);
1:         }
1:     }
1: }
============================================================================