1:79410e4: /*
1:79410e4:  * Licensed to the Apache Software Foundation (ASF) under one
1:79410e4:  * or more contributor license agreements.  See the NOTICE file
1:79410e4:  * distributed with this work for additional information
1:79410e4:  * regarding copyright ownership.  The ASF licenses this file
1:79410e4:  * to you under the Apache License, Version 2.0 (the
1:79410e4:  * "License"); you may not use this file except in compliance
1:79410e4:  * with the License.  You may obtain a copy of the License at
1:79410e4:  *
1:79410e4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:79410e4:  *
1:79410e4:  * Unless required by applicable law or agreed to in writing, software
1:79410e4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79410e4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79410e4:  * See the License for the specific language governing permissions and
1:79410e4:  * limitations under the License.
1:e75e33f:  */
1:ded233e: 
1:ded233e: package org.apache.cassandra.locator;
1:ded233e: 
1:ded233e: import java.net.InetAddress;
1:ded233e: import java.net.UnknownHostException;
1:ded233e: 
1:54140bf: import org.apache.cassandra.gms.*;
1:ded233e: import org.apache.cassandra.net.MessagingService;
1:ded233e: import org.slf4j.Logger;
1:ded233e: import org.slf4j.LoggerFactory;
1:ded233e: 
1:ded233e: /**
1:ded233e:  * Sidekick helper for snitches that want to reconnect from one IP addr for a node to another.
1:ded233e:  * Typically, this is for situations like EC2 where a node will have a public address and a private address,
1:ded233e:  * where we connect on the public, discover the private, and reconnect on the private.
1:ded233e:  */
1:ded233e: public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber
1:ded233e: {
1:ded233e:     private static final Logger logger = LoggerFactory.getLogger(ReconnectableSnitchHelper.class);
1:ded233e:     private final IEndpointSnitch snitch;
1:ded233e:     private final String localDc;
1:ded233e:     private final boolean preferLocal;
1:ded233e: 
1:ded233e:     public ReconnectableSnitchHelper(IEndpointSnitch snitch, String localDc, boolean preferLocal)
1:ded233e:     {
1:ded233e:         this.snitch = snitch;
1:ded233e:         this.localDc = localDc;
1:ded233e:         this.preferLocal = preferLocal;
1:ded233e:     }
1:5eddf18: 
1:ded233e:     private void reconnect(InetAddress publicAddress, VersionedValue localAddressValue)
1:ded233e:     {
1:ded233e:         try
1:ded233e:         {
1:ded233e:             reconnect(publicAddress, InetAddress.getByName(localAddressValue.value));
1:ded233e:         }
1:ded233e:         catch (UnknownHostException e)
1:ded233e:         {
1:ded233e:             logger.error("Error in getting the IP address resolved: ", e);
1:ded233e:         }
1:ded233e:     }
1:ded233e: 
1:ded233e:     private void reconnect(InetAddress publicAddress, InetAddress localAddress)
1:ded233e:     {
1:ded233e:         if (snitch.getDatacenter(publicAddress).equals(localDc)
1:ded233e:                 && !MessagingService.instance().getConnectionPool(publicAddress).endPoint().equals(localAddress))
1:ded233e:         {
1:ded233e:             MessagingService.instance().getConnectionPool(publicAddress).reset(localAddress);
1:2dc2bb8:             logger.debug("Initiated reconnect to an Internal IP {} for the {}", localAddress, publicAddress);
1:ded233e:         }
1:ded233e:     }
1:2dc2bb8: 
1:5eddf18:     public void beforeChange(InetAddress endpoint, EndpointState currentState, ApplicationState newStateKey, VersionedValue newValue)
1:5eddf18:     {
1:5eddf18:         // no-op
1:5eddf18:     }
1:ded233e: 
1:ded233e:     public void onJoin(InetAddress endpoint, EndpointState epState)
1:ded233e:     {
1:54140bf:         if (preferLocal && !Gossiper.instance.isDeadState(epState) && epState.getApplicationState(ApplicationState.INTERNAL_IP) != null)
1:ded233e:             reconnect(endpoint, epState.getApplicationState(ApplicationState.INTERNAL_IP));
1:ded233e:     }
1:ded233e: 
1:ded233e:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)
1:ded233e:     {
1:73793d6:         if (preferLocal && state == ApplicationState.INTERNAL_IP && !Gossiper.instance.isDeadState(Gossiper.instance.getEndpointStateForEndpoint(endpoint)))
1:ded233e:             reconnect(endpoint, value);
1:ded233e:     }
1:ded233e: 
1:ded233e:     public void onAlive(InetAddress endpoint, EndpointState state)
1:ded233e:     {
1:ded233e:         if (preferLocal && state.getApplicationState(ApplicationState.INTERNAL_IP) != null)
1:ded233e:             reconnect(endpoint, state.getApplicationState(ApplicationState.INTERNAL_IP));
1:ded233e:     }
1:ded233e: 
1:ded233e:     public void onDead(InetAddress endpoint, EndpointState state)
1:ded233e:     {
1:ded233e:         // do nothing.
1:ded233e:     }
1:ded233e: 
1:ded233e:     public void onRemove(InetAddress endpoint)
1:ded233e:     {
1:ded233e:         // do nothing.
1:ded233e:     }
1:ded233e: 
1:ded233e:     public void onRestart(InetAddress endpoint, EndpointState state)
1:ded233e:     {
1:ded233e:         // do nothing.
1:ded233e:     }
1:ded233e: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:2dc2bb8
/////////////////////////////////////////////////////////////////////////
1:             logger.debug("Initiated reconnect to an Internal IP {} for the {}", localAddress, publicAddress);
1: 
commit:73793d6
/////////////////////////////////////////////////////////////////////////
1:         if (preferLocal && state == ApplicationState.INTERNAL_IP && !Gossiper.instance.isDeadState(Gossiper.instance.getEndpointStateForEndpoint(endpoint)))
author:Paulo Motta
-------------------------------------------------------------------------------
commit:94c361d
/////////////////////////////////////////////////////////////////////////
0:             logger.debug(String.format("Intiated reconnect to an Internal IP %s for the %s", localAddress, publicAddress));
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
0:             logger.trace(String.format("Intiated reconnect to an Internal IP %s for the %s", localAddress, publicAddress));
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:a7cae32
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:738229b
/////////////////////////////////////////////////////////////////////////
0:         if (preferLocal && !Gossiper.instance.isDeadState(Gossiper.instance.getEndpointStateForEndpoint(endpoint)) && state == ApplicationState.INTERNAL_IP)
commit:54140bf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.gms.*;
/////////////////////////////////////////////////////////////////////////
1:         if (preferLocal && !Gossiper.instance.isDeadState(epState) && epState.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:         if (preferLocal && !Gossiper.instance.isDeadState(epState) && state == ApplicationState.INTERNAL_IP)
commit:5eddf18
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void beforeChange(InetAddress endpoint, EndpointState currentState, ApplicationState newStateKey, VersionedValue newValue)
1:     {
1:         // no-op
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7fcdd80
commit:ded233e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.locator;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: 
0: import org.apache.cassandra.gms.ApplicationState;
0: import org.apache.cassandra.gms.EndpointState;
0: import org.apache.cassandra.gms.IEndpointStateChangeSubscriber;
0: import org.apache.cassandra.gms.VersionedValue;
1: import org.apache.cassandra.net.MessagingService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Sidekick helper for snitches that want to reconnect from one IP addr for a node to another.
1:  * Typically, this is for situations like EC2 where a node will have a public address and a private address,
1:  * where we connect on the public, discover the private, and reconnect on the private.
1:  */
1: public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(ReconnectableSnitchHelper.class);
1:     private final IEndpointSnitch snitch;
1:     private final String localDc;
1:     private final boolean preferLocal;
1: 
1:     public ReconnectableSnitchHelper(IEndpointSnitch snitch, String localDc, boolean preferLocal)
1:     {
1:         this.snitch = snitch;
1:         this.localDc = localDc;
1:         this.preferLocal = preferLocal;
1:     }
1: 
1:     private void reconnect(InetAddress publicAddress, VersionedValue localAddressValue)
1:     {
1:         try
1:         {
1:             reconnect(publicAddress, InetAddress.getByName(localAddressValue.value));
1:         }
1:         catch (UnknownHostException e)
1:         {
1:             logger.error("Error in getting the IP address resolved: ", e);
1:         }
1:     }
1: 
1:     private void reconnect(InetAddress publicAddress, InetAddress localAddress)
1:     {
1:         if (snitch.getDatacenter(publicAddress).equals(localDc)
0:                 && MessagingService.instance().getVersion(publicAddress) == MessagingService.current_version
1:                 && !MessagingService.instance().getConnectionPool(publicAddress).endPoint().equals(localAddress))
1:         {
1:             MessagingService.instance().getConnectionPool(publicAddress).reset(localAddress);
0:             logger.debug(String.format("Intiated reconnect to an Internal IP %s for the %s", localAddress, publicAddress));
1:         }
1:     }
1: 
1:     public void onJoin(InetAddress endpoint, EndpointState epState)
1:     {
0:         if (preferLocal && epState.getApplicationState(ApplicationState.INTERNAL_IP) != null)
1:             reconnect(endpoint, epState.getApplicationState(ApplicationState.INTERNAL_IP));
1:     }
1: 
1:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)
1:     {
0:         if (preferLocal && state == ApplicationState.INTERNAL_IP)
1:             reconnect(endpoint, value);
1:     }
1: 
1:     public void onAlive(InetAddress endpoint, EndpointState state)
1:     {
1:         if (preferLocal && state.getApplicationState(ApplicationState.INTERNAL_IP) != null)
1:             reconnect(endpoint, state.getApplicationState(ApplicationState.INTERNAL_IP));
1:     }
1: 
1:     public void onDead(InetAddress endpoint, EndpointState state)
1:     {
1:         // do nothing.
1:     }
1: 
1:     public void onRemove(InetAddress endpoint)
1:     {
1:         // do nothing.
1:     }
1: 
1:     public void onRestart(InetAddress endpoint, EndpointState state)
1:     {
1:         // do nothing.
1:     }
1: }
commit:e75e33f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.locator;
0: 
0: import java.net.InetAddress;
0: import java.net.UnknownHostException;
0: 
0: import org.apache.cassandra.gms.ApplicationState;
0: import org.apache.cassandra.gms.EndpointState;
0: import org.apache.cassandra.gms.IEndpointStateChangeSubscriber;
0: import org.apache.cassandra.gms.VersionedValue;
0: import org.apache.cassandra.net.MessagingService;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * Sidekick helper for snitches that want to reconnect from one IP addr for a node to another.
0:  * Typically, this is for situations like EC2 where a node will have a public address and a private address,
0:  * where we connect on the public, discover the private, and reconnect on the private.
1:  */
0: public class ReconnectableSnitchHelper implements IEndpointStateChangeSubscriber
0: {
0:     private static final Logger logger = LoggerFactory.getLogger(ReconnectableSnitchHelper.class);
0:     private final IEndpointSnitch snitch;
0:     private final String localDc;
0:     private final boolean preferLocal;
0: 
0:     public ReconnectableSnitchHelper(IEndpointSnitch snitch, String localDc, boolean preferLocal)
0:     {
0:         this.snitch = snitch;
0:         this.localDc = localDc;
0:         this.preferLocal = preferLocal;
0:     }
0: 
0:     private void reconnect(InetAddress publicAddress, VersionedValue localAddressValue)
0:     {
0:         try
0:         {
0:             reconnect(publicAddress, InetAddress.getByName(localAddressValue.value));
0:         }
0:         catch (UnknownHostException e)
0:         {
0:             logger.error("Error in getting the IP address resolved: ", e);
0:         }
0:     }
0: 
0:     private void reconnect(InetAddress publicAddress, InetAddress localAddress)
0:     {
0:         if (snitch.getDatacenter(publicAddress).equals(localDc)
0:                 && MessagingService.instance().getVersion(publicAddress) == MessagingService.current_version
0:                 && !MessagingService.instance().getConnectionPool(publicAddress).endPoint().equals(localAddress))
0:         {
0:             MessagingService.instance().getConnectionPool(publicAddress).reset(localAddress);
0:             logger.debug(String.format("Intiated reconnect to an Internal IP %s for the %s", localAddress, publicAddress));
0:         }
0:     }
0: 
0:     public void onJoin(InetAddress endpoint, EndpointState epState)
0:     {
0:         if (preferLocal && epState.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reconnect(endpoint, epState.getApplicationState(ApplicationState.INTERNAL_IP));
0:     }
0: 
0:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)
0:     {
0:         if (preferLocal && state == ApplicationState.INTERNAL_IP)
0:             reconnect(endpoint, value);
0:     }
0: 
0:     public void onAlive(InetAddress endpoint, EndpointState state)
0:     {
0:         if (preferLocal && state.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reconnect(endpoint, state.getApplicationState(ApplicationState.INTERNAL_IP));
0:     }
0: 
0:     public void onDead(InetAddress endpoint, EndpointState state)
0:     {
0:         // do nothing.
0:     }
0: 
0:     public void onRemove(InetAddress endpoint)
0:     {
0:         // do nothing.
0:     }
0: 
0:     public void onRestart(InetAddress endpoint, EndpointState state)
0:     {
0:         // do nothing.
0:     }
0: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:79410e4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
============================================================================