1:97b4589: package org.apache.cassandra.io;
1:5ab5e1b: /*
1:07cdfd0:  *
1:5ab5e1b:  * Licensed to the Apache Software Foundation (ASF) under one
1:5ab5e1b:  * or more contributor license agreements.  See the NOTICE file
1:5ab5e1b:  * distributed with this work for additional information
1:5ab5e1b:  * regarding copyright ownership.  The ASF licenses this file
1:5ab5e1b:  * to you under the Apache License, Version 2.0 (the
1:5ab5e1b:  * "License"); you may not use this file except in compliance
1:5ab5e1b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:5ab5e1b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:5ab5e1b:  * Unless required by applicable law or agreed to in writing,
1:5ab5e1b:  * software distributed under the License is distributed on an
1:5ab5e1b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5ab5e1b:  * KIND, either express or implied.  See the License for the
1:5ab5e1b:  * specific language governing permissions and limitations
1:5ab5e1b:  * under the License.
1:07cdfd0:  *
1:5ab5e1b:  */
1:5ab5e1b: 
1:97b4589: 
1:97b4589: import org.junit.Test;
1:97b4589: 
1:4ef44c6: import org.apache.cassandra.io.sstable.BloomFilterTracker;
1:97b4589: 
1:97b4589: import static org.junit.Assert.assertEquals;
1:97b4589: 
1:d2a3827: public class BloomFilterTrackerTest
1:97b4589: {
1:97b4589:     @Test
1:97b4589:     public void testAddingFalsePositives()
1:97b4589:     {
1:97b4589:         BloomFilterTracker bft = new BloomFilterTracker();
1:97b4589:         assertEquals(0L, bft.getFalsePositiveCount());
1:97b4589:         assertEquals(0L, bft.getRecentFalsePositiveCount());
1:97b4589:         bft.addFalsePositive();
1:97b4589:         bft.addFalsePositive();
1:97b4589:         assertEquals(2L, bft.getFalsePositiveCount());
1:97b4589:         assertEquals(2L, bft.getRecentFalsePositiveCount());
1:97b4589:         assertEquals(0L, bft.getRecentFalsePositiveCount());
1:97b4589:         assertEquals(2L, bft.getFalsePositiveCount()); // sanity check
1:97b4589:     }
1:97b4589: 
1:97b4589:     @Test
1:97b4589:     public void testAddingTruePositives()
1:97b4589:     {
1:97b4589:         BloomFilterTracker bft = new BloomFilterTracker();
1:97b4589:         assertEquals(0L, bft.getTruePositiveCount());
1:97b4589:         assertEquals(0L, bft.getRecentTruePositiveCount());
1:97b4589:         bft.addTruePositive();
1:97b4589:         bft.addTruePositive();
1:97b4589:         assertEquals(2L, bft.getTruePositiveCount());
1:97b4589:         assertEquals(2L, bft.getRecentTruePositiveCount());
1:97b4589:         assertEquals(0L, bft.getRecentTruePositiveCount());
1:97b4589:         assertEquals(2L, bft.getTruePositiveCount()); // sanity check
1:97b4589:     }
1:97b4589: 
1:97b4589:     @Test
1:97b4589:     public void testAddingToOneLeavesTheOtherAlone()
1:97b4589:     {
1:97b4589:         BloomFilterTracker bft = new BloomFilterTracker();
1:97b4589:         bft.addFalsePositive();
1:97b4589:         assertEquals(0L, bft.getTruePositiveCount());
1:97b4589:         assertEquals(0L, bft.getRecentTruePositiveCount());
1:97b4589:         bft.addTruePositive();
1:97b4589:         assertEquals(1L, bft.getFalsePositiveCount());
1:97b4589:         assertEquals(1L, bft.getRecentFalsePositiveCount());
1:97b4589:     }
1:97b4589: }
============================================================================
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
1: public class BloomFilterTrackerTest
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:438acfc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.SchemaLoader;
0: public class BloomFilterTrackerTest extends SchemaLoader
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:5ab5e1b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
commit:4ef44c6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.BloomFilterTracker;
commit:97b4589
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.io;
1: 
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.CleanupHelper;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
0: public class BloomFilterTrackerTest extends CleanupHelper
1: {
1:     @Test
1:     public void testAddingFalsePositives()
1:     {
1:         BloomFilterTracker bft = new BloomFilterTracker();
1:         assertEquals(0L, bft.getFalsePositiveCount());
1:         assertEquals(0L, bft.getRecentFalsePositiveCount());
1:         bft.addFalsePositive();
1:         bft.addFalsePositive();
1:         assertEquals(2L, bft.getFalsePositiveCount());
1:         assertEquals(2L, bft.getRecentFalsePositiveCount());
1:         assertEquals(0L, bft.getRecentFalsePositiveCount());
1:         assertEquals(2L, bft.getFalsePositiveCount()); // sanity check
1:     }
1: 
1:     @Test
1:     public void testAddingTruePositives()
1:     {
1:         BloomFilterTracker bft = new BloomFilterTracker();
1:         assertEquals(0L, bft.getTruePositiveCount());
1:         assertEquals(0L, bft.getRecentTruePositiveCount());
1:         bft.addTruePositive();
1:         bft.addTruePositive();
1:         assertEquals(2L, bft.getTruePositiveCount());
1:         assertEquals(2L, bft.getRecentTruePositiveCount());
1:         assertEquals(0L, bft.getRecentTruePositiveCount());
1:         assertEquals(2L, bft.getTruePositiveCount()); // sanity check
1:     }
1: 
1:     @Test
1:     public void testAddingToOneLeavesTheOtherAlone()
1:     {
1:         BloomFilterTracker bft = new BloomFilterTracker();
1:         bft.addFalsePositive();
1:         assertEquals(0L, bft.getTruePositiveCount());
1:         assertEquals(0L, bft.getRecentTruePositiveCount());
1:         bft.addTruePositive();
1:         assertEquals(1L, bft.getFalsePositiveCount());
1:         assertEquals(1L, bft.getRecentFalsePositiveCount());
1:     }
1: }
============================================================================