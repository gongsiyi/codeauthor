1:c20566f: /*
1:c20566f:  * Licensed to the Apache Software Foundation (ASF) under one
1:c20566f:  * or more contributor license agreements.  See the NOTICE file
1:c20566f:  * distributed with this work for additional information
1:c20566f:  * regarding copyright ownership.  The ASF licenses this file
1:c20566f:  * to you under the Apache License, Version 2.0 (the
1:c20566f:  * "License"); you may not use this file except in compliance
1:c20566f:  * with the License.  You may obtain a copy of the License at
1:c20566f:  *
1:c20566f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c20566f:  *
1:c20566f:  * Unless required by applicable law or agreed to in writing, software
1:c20566f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c20566f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c20566f:  * See the License for the specific language governing permissions and
1:c20566f:  * limitations under the License.
1:c20566f:  */
12:c20566f: 
1:c20566f: package org.apache.cassandra.hints;
1:c20566f: 
1:c20566f: import com.google.common.collect.ImmutableMap;
1:c20566f: import org.junit.Test;
1:c20566f: 
1:c20566f: import org.apache.cassandra.config.ParameterizedClass;
1:c20566f: import org.apache.cassandra.io.compress.DeflateCompressor;
1:c20566f: import org.apache.cassandra.io.compress.ICompressor;
1:c20566f: import org.apache.cassandra.io.compress.LZ4Compressor;
1:c20566f: import org.apache.cassandra.io.compress.SnappyCompressor;
1:c20566f: 
1:90033b9: public class HintsCompressionTest extends AlteredHints
11:c20566f: {
1:90033b9:     private Class<? extends ICompressor> compressorClass;
1:c20566f: 
1:90033b9:     ImmutableMap<String, Object> params()
1:c20566f:     {
1:c20566f:         ImmutableMap<String, Object> compressionParams = ImmutableMap.<String, Object>builder()
1:c20566f:                                                                      .put(ParameterizedClass.CLASS_NAME, compressorClass.getSimpleName())
2:c20566f:                                                                      .build();
1:c20566f:         return ImmutableMap.<String, Object>builder()
1:c20566f:                            .put(HintsDescriptor.COMPRESSION, compressionParams)
1:c20566f:                            .build();
11:c20566f:     }
1:c20566f: 
1:90033b9:     boolean looksLegit(HintsWriter writer)
1:c20566f:     {
1:90033b9:         if (!(writer instanceof CompressedHintsWriter))
1:90033b9:             return false;
1:90033b9:         CompressedHintsWriter compressedHintsWriter = (CompressedHintsWriter)writer;
1:90033b9:         return compressedHintsWriter.getCompressor().getClass().isAssignableFrom(compressorClass);
1:90033b9:     }
1:c20566f: 
1:90033b9:     boolean looksLegit(ChecksummedDataInput checksummedDataInput)
1:90033b9:     {
1:90033b9:         if (!(checksummedDataInput instanceof CompressedChecksummedDataInput))
1:90033b9:             return false;
1:90033b9:         CompressedChecksummedDataInput compressedChecksummedDataInput = (CompressedChecksummedDataInput)checksummedDataInput;
1:90033b9:         return compressedChecksummedDataInput.getCompressor().getClass().isAssignableFrom(compressorClass);
1:c20566f:     }
1:c20566f: 
1:c20566f:     @Test
1:c20566f:     public void lz4Compressor() throws Exception
1:c20566f:     {
1:90033b9:         compressorClass = LZ4Compressor.class;
1:90033b9:         multiFlushAndDeserializeTest();
1:c20566f:     }
1:c20566f: 
1:c20566f:     @Test
1:c20566f:     public void snappyCompressor() throws Exception
1:c20566f:     {
1:90033b9:         compressorClass = SnappyCompressor.class;
1:90033b9:         multiFlushAndDeserializeTest();
1:c20566f:     }
1:c20566f: 
1:c20566f:     @Test
1:c20566f:     public void deflateCompressor() throws Exception
1:c20566f:     {
1:90033b9:         compressorClass = DeflateCompressor.class;
1:90033b9:         multiFlushAndDeserializeTest();
1:c20566f:     }
1:c20566f: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: public class HintsCompressionTest extends AlteredHints
1:     private Class<? extends ICompressor> compressorClass;
1:     ImmutableMap<String, Object> params()
/////////////////////////////////////////////////////////////////////////
1:     boolean looksLegit(HintsWriter writer)
1:         if (!(writer instanceof CompressedHintsWriter))
1:             return false;
1:         CompressedHintsWriter compressedHintsWriter = (CompressedHintsWriter)writer;
1:         return compressedHintsWriter.getCompressor().getClass().isAssignableFrom(compressorClass);
1:     }
1:     boolean looksLegit(ChecksummedDataInput checksummedDataInput)
1:     {
1:         if (!(checksummedDataInput instanceof CompressedChecksummedDataInput))
1:             return false;
1:         CompressedChecksummedDataInput compressedChecksummedDataInput = (CompressedChecksummedDataInput)checksummedDataInput;
1:         return compressedChecksummedDataInput.getCompressor().getClass().isAssignableFrom(compressorClass);
1:         compressorClass = LZ4Compressor.class;
1:         multiFlushAndDeserializeTest();
1:         compressorClass = SnappyCompressor.class;
1:         multiFlushAndDeserializeTest();
1:         compressorClass = DeflateCompressor.class;
1:         multiFlushAndDeserializeTest();
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.hints;
1: 
0: import java.io.File;
0: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.LinkedList;
0: import java.util.List;
0: import java.util.UUID;
0: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.collect.ImmutableMap;
0: import com.google.common.io.Files;
0: import org.junit.Assert;
0: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ParameterizedClass;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.db.Mutation;
0: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.io.compress.DeflateCompressor;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.io.compress.LZ4Compressor;
1: import org.apache.cassandra.io.compress.SnappyCompressor;
0: import org.apache.cassandra.schema.KeyspaceParams;
0: import org.apache.cassandra.utils.UUIDGen;
1: 
0: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
0: public class HintsCompressionTest
1: {
0:     private static final String KEYSPACE = "hints_compression_test";
0:     private static final String TABLE = "table";
1: 
1: 
0:     private static Mutation createMutation(int index, long timestamp)
1:     {
0:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
0:         return new RowUpdateBuilder(table, timestamp, bytes(index))
0:                .clustering(bytes(index))
0:                .add("val", bytes(index))
1:                .build();
1:     }
1: 
0:     private static Hint createHint(int idx, long baseTimestamp)
1:     {
0:         long timestamp = baseTimestamp + idx;
0:         return Hint.create(createMutation(idx, TimeUnit.MILLISECONDS.toMicros(timestamp)), timestamp);
1:     }
1: 
0:     @BeforeClass
0:     public static void defineSchema()
1:     {
0:         SchemaLoader.prepareServer();
0:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:     }
1: 
0:     private ImmutableMap<String, Object> params(Class<? extends ICompressor> compressorClass)
1:     {
1:         ImmutableMap<String, Object> compressionParams = ImmutableMap.<String, Object>builder()
1:                                                                      .put(ParameterizedClass.CLASS_NAME, compressorClass.getSimpleName())
1:                                                                      .build();
1:         return ImmutableMap.<String, Object>builder()
1:                            .put(HintsDescriptor.COMPRESSION, compressionParams)
1:                            .build();
1:     }
1: 
0:     public void multiFlushAndDeserializeTest(Class<? extends ICompressor> compressorClass) throws Exception
1:     {
0:         int hintNum = 0;
0:         int bufferSize = HintsWriteExecutor.WRITE_BUFFER_SIZE;
0:         List<Hint> hints = new LinkedList<>();
1: 
0:         UUID hostId = UUIDGen.getTimeUUID();
0:         long ts = System.currentTimeMillis();
1: 
0:         HintsDescriptor descriptor = new HintsDescriptor(hostId, ts, params(compressorClass));
0:         File dir = Files.createTempDir();
0:         try (HintsWriter writer = HintsWriter.create(dir, descriptor))
1:         {
0:             assert writer instanceof CompressedHintsWriter;
1: 
0:             ByteBuffer writeBuffer = ByteBuffer.allocateDirect(bufferSize);
0:             try (HintsWriter.Session session = writer.newSession(writeBuffer))
1:             {
0:                 while (session.getBytesWritten() < bufferSize * 3)
1:                 {
0:                     Hint hint = createHint(hintNum, ts+hintNum);
0:                     session.append(hint);
0:                     hints.add(hint);
0:                     hintNum++;
1:                 }
1:             }
1:         }
1: 
0:         try (HintsReader reader = HintsReader.open(new File(dir, descriptor.fileName())))
1:         {
0:             List<Hint> deserialized = new ArrayList<>(hintNum);
1: 
0:             for (HintsReader.Page page: reader)
1:             {
0:                 Iterator<Hint> iterator = page.hintsIterator();
0:                 while (iterator.hasNext())
1:                 {
0:                     deserialized.add(iterator.next());
1:                 }
1:             }
1: 
0:             Assert.assertEquals(hints.size(), deserialized.size());
0:             hintNum = 0;
0:             for (Hint expected: hints)
1:             {
0:                 HintsTestUtil.assertHintsEqual(expected, deserialized.get(hintNum));
0:                 hintNum++;
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void lz4Compressor() throws Exception
1:     {
0:         multiFlushAndDeserializeTest(LZ4Compressor.class);
1:     }
1: 
1:     @Test
1:     public void snappyCompressor() throws Exception
1:     {
0:         multiFlushAndDeserializeTest(SnappyCompressor.class);
1:     }
1: 
1:     @Test
1:     public void deflateCompressor() throws Exception
1:     {
0:         multiFlushAndDeserializeTest(DeflateCompressor.class);
1:     }
1: }
============================================================================