1:72790dc: /*
1:72790dc:  * Copyright 2005-2010 Roger Kapsi
1:72790dc:  *
1:72790dc:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:72790dc:  *   you may not use this file except in compliance with the License.
1:72790dc:  *   You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *       http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  *   Unless required by applicable law or agreed to in writing, software
1:72790dc:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  *   See the License for the specific language governing permissions and
1:72790dc:  *   limitations under the License.
1:72790dc:  */
1:72790dc: 
5:72790dc: /**
1:72790dc:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:72790dc:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:72790dc:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:72790dc:  * on rkapsi/patricia-trie project) only supports String keys)
1:72790dc:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:72790dc:  */
1:72790dc: 
1:72790dc: package org.apache.cassandra.index.sasi.utils.trie;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * A collection of {@link Trie} utilities
1:72790dc:  */
1:72790dc: public class Tries
1:72790dc: {
1:68d2526:     /**
1:72790dc:      * Returns true if bitIndex is a {@link KeyAnalyzer#OUT_OF_BOUNDS_BIT_KEY}
1:72790dc:      */
1:72790dc:     static boolean isOutOfBoundsIndex(int bitIndex)
1:72790dc:     {
1:72790dc:         return bitIndex == KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY;
1:72790dc:     }
1:72790dc: 
1:68d2526:     /**
1:72790dc:      * Returns true if bitIndex is a {@link KeyAnalyzer#EQUAL_BIT_KEY}
1:72790dc:      */
1:72790dc:     static boolean isEqualBitKey(int bitIndex)
1:72790dc:     {
1:72790dc:         return bitIndex == KeyAnalyzer.EQUAL_BIT_KEY;
1:72790dc:     }
1:72790dc: 
1:68d2526:     /**
1:68d2526:      * Returns true if bitIndex is a {@link KeyAnalyzer#NULL_BIT_KEY}
1:72790dc:      */
1:72790dc:     static boolean isNullBitKey(int bitIndex)
1:72790dc:     {
1:72790dc:         return bitIndex == KeyAnalyzer.NULL_BIT_KEY;
1:72790dc:     }
1:72790dc: 
1:68d2526:     /**
1:68d2526:      * Returns true if the given bitIndex is valid. Indices
1:68d2526:      * are considered valid if they're between 0 and
1:72790dc:      * {@link Integer#MAX_VALUE}
1:72790dc:      */
1:72790dc:     static boolean isValidBitIndex(int bitIndex)
1:72790dc:     {
1:72790dc:         return 0 <= bitIndex;
1:72790dc:     }
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Returns true if both values are either null or equal
1:72790dc:      */
1:72790dc:     static boolean areEqual(Object a, Object b)
1:72790dc:     {
1:72790dc:         return (a == null ? b == null : a.equals(b));
1:72790dc:     }
1:72790dc: 
1:72790dc:     /**
1:68d2526:      * Throws a {@link NullPointerException} with the given message if
1:72790dc:      * the argument is null.
1:72790dc:      */
1:72790dc:     static <T> T notNull(T o, String message)
1:72790dc:     {
1:72790dc:         if (o == null)
1:72790dc:             throw new NullPointerException(message);
1:72790dc: 
1:72790dc:         return o;
1:72790dc:     }
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * A utility method to cast keys. It actually doesn't
1:72790dc:      * cast anything. It's just fooling the compiler!
1:72790dc:      */
1:72790dc:     @SuppressWarnings("unchecked")
1:72790dc:     static <K> K cast(Object key)
1:72790dc:     {
1:72790dc:         return (K)key;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns true if bitIndex is a {@link KeyAnalyzer#NULL_BIT_KEY}
1:     /**
1:      * Returns true if the given bitIndex is valid. Indices
1:      * are considered valid if they're between 0 and
/////////////////////////////////////////////////////////////////////////
1:      * Throws a {@link NullPointerException} with the given message if
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2005-2010 Roger Kapsi
1:  *
1:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:  *   you may not use this file except in compliance with the License.
1:  *   You may obtain a copy of the License at
1:  *
1:  *       http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *   Unless required by applicable law or agreed to in writing, software
1:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *   See the License for the specific language governing permissions and
1:  *   limitations under the License.
1:  */
1: 
1: /**
1:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:  * on rkapsi/patricia-trie project) only supports String keys)
1:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.utils.trie;
1: 
1: /**
1:  * A collection of {@link Trie} utilities
1:  */
1: public class Tries
1: {
1:     /** 
1:      * Returns true if bitIndex is a {@link KeyAnalyzer#OUT_OF_BOUNDS_BIT_KEY}
1:      */
1:     static boolean isOutOfBoundsIndex(int bitIndex)
1:     {
1:         return bitIndex == KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY;
1:     }
1: 
1:     /** 
1:      * Returns true if bitIndex is a {@link KeyAnalyzer#EQUAL_BIT_KEY}
1:      */
1:     static boolean isEqualBitKey(int bitIndex)
1:     {
1:         return bitIndex == KeyAnalyzer.EQUAL_BIT_KEY;
1:     }
1: 
1:     /** 
0:      * Returns true if bitIndex is a {@link KeyAnalyzer#NULL_BIT_KEY} 
1:      */
1:     static boolean isNullBitKey(int bitIndex)
1:     {
1:         return bitIndex == KeyAnalyzer.NULL_BIT_KEY;
1:     }
1: 
1:     /** 
0:      * Returns true if the given bitIndex is valid. Indices 
0:      * are considered valid if they're between 0 and 
1:      * {@link Integer#MAX_VALUE}
1:      */
1:     static boolean isValidBitIndex(int bitIndex)
1:     {
1:         return 0 <= bitIndex;
1:     }
1: 
1:     /**
1:      * Returns true if both values are either null or equal
1:      */
1:     static boolean areEqual(Object a, Object b)
1:     {
1:         return (a == null ? b == null : a.equals(b));
1:     }
1: 
1:     /**
0:      * Throws a {@link NullPointerException} with the given message if 
1:      * the argument is null.
1:      */
1:     static <T> T notNull(T o, String message)
1:     {
1:         if (o == null)
1:             throw new NullPointerException(message);
1: 
1:         return o;
1:     }
1: 
1:     /**
1:      * A utility method to cast keys. It actually doesn't
1:      * cast anything. It's just fooling the compiler!
1:      */
1:     @SuppressWarnings("unchecked")
1:     static <K> K cast(Object key)
1:     {
1:         return (K)key;
1:     }
1: }
============================================================================