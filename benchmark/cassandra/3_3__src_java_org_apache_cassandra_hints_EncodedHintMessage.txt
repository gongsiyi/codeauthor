1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.nio.ByteBuffer;
1:96d41f0: import java.util.UUID;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.db.TypeSizes;
1:96d41f0: import org.apache.cassandra.io.IVersionedSerializer;
1:96d41f0: import org.apache.cassandra.io.util.DataInputPlus;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputPlus;
1:96d41f0: import org.apache.cassandra.net.MessageOut;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:96d41f0: import org.apache.cassandra.utils.UUIDSerializer;
1:96d41f0: 
1:96d41f0: /**
1:96d41f0:  * A specialized version of {@link HintMessage} that takes an already encoded in a bytebuffer hint and sends it verbatim.
1:96d41f0:  *
1:96d41f0:  * An optimization for when dispatching a hint file of the current messaging version to a node of the same messaging version,
1:96d41f0:  * which is the most common case. Saves on extra ByteBuffer allocations one redundant hint deserialization-serialization cycle.
1:96d41f0:  *
1:96d41f0:  * Never deserialized as an EncodedHintMessage - the receiving side will always deserialize the message as vanilla
1:96d41f0:  * {@link HintMessage}.
1:96d41f0:  */
1:96d41f0: final class EncodedHintMessage
1:96d41f0: {
1:96d41f0:     private static final IVersionedSerializer<EncodedHintMessage> serializer = new Serializer();
1:96d41f0: 
1:96d41f0:     private final UUID hostId;
1:96d41f0:     private final ByteBuffer hint;
1:96d41f0:     private final int version;
1:96d41f0: 
1:96d41f0:     EncodedHintMessage(UUID hostId, ByteBuffer hint, int version)
1:96d41f0:     {
1:96d41f0:         this.hostId = hostId;
1:96d41f0:         this.hint = hint;
1:96d41f0:         this.version = version;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     MessageOut<EncodedHintMessage> createMessageOut()
1:96d41f0:     {
1:96d41f0:         return new MessageOut<>(MessagingService.Verb.HINT, this, serializer);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static class Serializer implements IVersionedSerializer<EncodedHintMessage>
1:96d41f0:     {
1:96d41f0:         public long serializedSize(EncodedHintMessage message, int version)
1:96d41f0:         {
1:96d41f0:             if (version != message.version)
1:96d41f0:                 throw new IllegalArgumentException("serializedSize() called with non-matching version " + version);
1:96d41f0: 
1:53a177a:             long size = UUIDSerializer.serializer.serializedSize(message.hostId, version);
1:649a106:             size += TypeSizes.sizeofUnsignedVInt(message.hint.remaining());
1:96d41f0:             size += message.hint.remaining();
1:96d41f0:             return size;
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         public void serialize(EncodedHintMessage message, DataOutputPlus out, int version) throws IOException
1:96d41f0:         {
1:96d41f0:             if (version != message.version)
1:96d41f0:                 throw new IllegalArgumentException("serialize() called with non-matching version " + version);
1:96d41f0: 
1:96d41f0:             UUIDSerializer.serializer.serialize(message.hostId, out, version);
1:649a106:             out.writeUnsignedVInt(message.hint.remaining());
1:96d41f0:             out.write(message.hint);
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         public EncodedHintMessage deserialize(DataInputPlus in, int version) throws IOException
1:96d41f0:         {
1:96d41f0:             throw new UnsupportedOperationException();
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:649a106
/////////////////////////////////////////////////////////////////////////
1:             size += TypeSizes.sizeofUnsignedVInt(message.hint.remaining());
/////////////////////////////////////////////////////////////////////////
1:             out.writeUnsignedVInt(message.hint.remaining());
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1:             long size = UUIDSerializer.serializer.serializedSize(message.hostId, version);
0:             size += TypeSizes.sizeofVInt(message.hint.remaining());
/////////////////////////////////////////////////////////////////////////
0:             out.writeVInt(message.hint.remaining());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.UUID;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.net.MessageOut;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: /**
1:  * A specialized version of {@link HintMessage} that takes an already encoded in a bytebuffer hint and sends it verbatim.
1:  *
1:  * An optimization for when dispatching a hint file of the current messaging version to a node of the same messaging version,
1:  * which is the most common case. Saves on extra ByteBuffer allocations one redundant hint deserialization-serialization cycle.
1:  *
1:  * Never deserialized as an EncodedHintMessage - the receiving side will always deserialize the message as vanilla
1:  * {@link HintMessage}.
1:  */
1: final class EncodedHintMessage
1: {
1:     private static final IVersionedSerializer<EncodedHintMessage> serializer = new Serializer();
1: 
1:     private final UUID hostId;
1:     private final ByteBuffer hint;
1:     private final int version;
1: 
1:     EncodedHintMessage(UUID hostId, ByteBuffer hint, int version)
1:     {
1:         this.hostId = hostId;
1:         this.hint = hint;
1:         this.version = version;
1:     }
1: 
1:     MessageOut<EncodedHintMessage> createMessageOut()
1:     {
1:         return new MessageOut<>(MessagingService.Verb.HINT, this, serializer);
1:     }
1: 
1:     private static class Serializer implements IVersionedSerializer<EncodedHintMessage>
1:     {
1:         public long serializedSize(EncodedHintMessage message, int version)
1:         {
1:             if (version != message.version)
1:                 throw new IllegalArgumentException("serializedSize() called with non-matching version " + version);
1: 
0:             int size = (int) UUIDSerializer.serializer.serializedSize(message.hostId, version);
0:             size += TypeSizes.sizeof(message.hint.remaining());
1:             size += message.hint.remaining();
1:             return size;
1:         }
1: 
1:         public void serialize(EncodedHintMessage message, DataOutputPlus out, int version) throws IOException
1:         {
1:             if (version != message.version)
1:                 throw new IllegalArgumentException("serialize() called with non-matching version " + version);
1: 
1:             UUIDSerializer.serializer.serialize(message.hostId, out, version);
0:             out.writeInt(message.hint.remaining());
1:             out.write(message.hint);
1:         }
1: 
1:         public EncodedHintMessage deserialize(DataInputPlus in, int version) throws IOException
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: }
============================================================================