1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
14:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.util.*;
1:a991b64: 
1:a991b64: import org.apache.cassandra.db.*;
1:2457599: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * A marker for a range tombstone bound.
1:a991b64:  * <p>
1:6536c05:  * There is 2 types of markers: bounds (see {@link RangeTombstoneBoundMarker}) and boundaries (see {@link RangeTombstoneBoundaryMarker}).
1:6536c05:  * </p>
1:a991b64:  */
1:a991b64: public interface RangeTombstoneMarker extends Unfiltered
14:a991b64: {
1:a991b64:     @Override
1:2cc26eb:     public ClusteringBoundOrBoundary clustering();
1:a991b64: 
1:a991b64:     public boolean isBoundary();
1:a991b64: 
1:a991b64:     public boolean isOpen(boolean reversed);
1:a991b64:     public boolean isClose(boolean reversed);
1:2457599: 
1:a991b64:     public DeletionTime openDeletionTime(boolean reversed);
1:a991b64:     public DeletionTime closeDeletionTime(boolean reversed);
1:7813dee:     public boolean openIsInclusive(boolean reversed);
1:7813dee:     public boolean closeIsInclusive(boolean reversed);
1:a991b64: 
1:2cc26eb:     public ClusteringBound openBound(boolean reversed);
1:2cc26eb:     public ClusteringBound closeBound(boolean reversed);
1:a991b64: 
1:2457599:     public RangeTombstoneMarker copy(AbstractAllocator allocator);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Utility class to help merging range tombstone markers coming from multiple inputs (UnfilteredRowIterators).
1:a991b64:      * <p>
1:a991b64:      * The assumption that each individual input must validate and that we must preserve in the output is that every
1:a991b64:      * open marker has a corresponding close marker with the exact same deletion info, and that there is no other range
1:a991b64:      * tombstone marker between those open and close marker (of course, they could be rows in between). In other word,
1:a991b64:      * for any {@code UnfilteredRowIterator}, you only ever have to remenber the last open marker (if any) to have the
1:a991b64:      * full picture of what is deleted by range tombstones at any given point of iterating that iterator.
1:a991b64:      * <p>
1:a991b64:      * Note that this class can merge both forward and reverse iterators. To deal with reverse, we just reverse how we
1:a991b64:      * deal with open and close markers (in forward order, we'll get open-close, open-close, ..., while in reverse we'll
1:a991b64:      * get close-open, close-open, ...).
1:a991b64:      */
1:a991b64:     public static class Merger
1:a991b64:     {
1:a991b64:         private final DeletionTime partitionDeletion;
1:a991b64:         private final boolean reversed;
1:a991b64: 
1:2cc26eb:         private ClusteringBoundOrBoundary bound;
1:a991b64:         private final RangeTombstoneMarker[] markers;
1:a991b64: 
1:a991b64:         // For each iterator, what is the currently open marker deletion time (or null if there is no open marker on that iterator)
1:a991b64:         private final DeletionTime[] openMarkers;
1:a991b64:         // The index in openMarkers of the "biggest" marker, the one with the biggest deletion time. Is < 0 iff there is no open
1:a991b64:         // marker on any iterator.
1:a991b64:         private int biggestOpenMarker = -1;
1:a991b64: 
1:2457599:         public Merger(int size, DeletionTime partitionDeletion, boolean reversed)
1:a991b64:         {
1:a991b64:             this.partitionDeletion = partitionDeletion;
1:a991b64:             this.reversed = reversed;
1:a991b64: 
1:a991b64:             this.markers = new RangeTombstoneMarker[size];
1:a991b64:             this.openMarkers = new DeletionTime[size];
14:a991b64:         }
1:a991b64: 
1:a991b64:         public void clear()
1:a991b64:         {
1:a991b64:             Arrays.fill(markers, null);
1:a991b64:         }
1:a991b64: 
1:a991b64:         public void add(int i, RangeTombstoneMarker marker)
1:a991b64:         {
1:a991b64:             bound = marker.clustering();
1:a991b64:             markers[i] = marker;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public RangeTombstoneMarker merge()
1:a991b64:         {
1:a991b64:             /*
1:a991b64:              * Merging of range tombstones works this way:
1:a991b64:              *   1) We remember what is the currently open marker in the merged stream
1:a991b64:              *   2) We update our internal states of what range is opened on the input streams based on the new markers to merge
1:a991b64:              *   3) We compute what should be the state in the merge stream after 2)
1:a991b64:              *   4) We return what marker should be issued on the merged stream based on the difference between the state from 1) and 3)
1:a991b64:              */
1:a991b64: 
1:a991b64:             DeletionTime previousDeletionTimeInMerged = currentOpenDeletionTimeInMerged();
1:a991b64: 
1:a991b64:             updateOpenMarkers();
1:a991b64: 
1:a991b64:             DeletionTime newDeletionTimeInMerged = currentOpenDeletionTimeInMerged();
1:a991b64:             if (previousDeletionTimeInMerged.equals(newDeletionTimeInMerged))
1:a991b64:                 return null;
1:a991b64: 
1:7813dee:             boolean isBeforeClustering = bound.kind().comparedToClustering < 0;
1:7813dee:             if (reversed)
1:7813dee:                 isBeforeClustering = !isBeforeClustering;
1:a991b64: 
1:7813dee:             ByteBuffer[] values = bound.getRawValues();
1:a991b64:             RangeTombstoneMarker merged;
1:7813dee:             if (previousDeletionTimeInMerged.isLive())
1:a991b64:             {
1:7813dee:                 merged = isBeforeClustering
1:7813dee:                        ? RangeTombstoneBoundMarker.inclusiveOpen(reversed, values, newDeletionTimeInMerged)
1:7813dee:                        : RangeTombstoneBoundMarker.exclusiveOpen(reversed, values, newDeletionTimeInMerged);
1:7813dee:             }
1:7813dee:             else if (newDeletionTimeInMerged.isLive())
1:7813dee:             {
1:7813dee:                 merged = isBeforeClustering
1:7813dee:                        ? RangeTombstoneBoundMarker.exclusiveClose(reversed, values, previousDeletionTimeInMerged)
1:7813dee:                        : RangeTombstoneBoundMarker.inclusiveClose(reversed, values, previousDeletionTimeInMerged);
1:7813dee:             }
1:7813dee:             else
1:7813dee:             {
1:7813dee:                 merged = isBeforeClustering
1:7813dee:                        ? RangeTombstoneBoundaryMarker.exclusiveCloseInclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged)
1:7813dee:                        : RangeTombstoneBoundaryMarker.inclusiveCloseExclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged);
1:a991b64:             }
1:a991b64: 
1:a991b64:             return merged;
1:a991b64:         }
1:a991b64: 
1:2457599:         public RangeTombstoneMarker[] mergedMarkers()
1:2457599:         {
1:2457599:             return markers;
1:2457599:         }
1:2457599: 
1:a991b64:         private DeletionTime currentOpenDeletionTimeInMerged()
1:a991b64:         {
1:a991b64:             if (biggestOpenMarker < 0)
1:a991b64:                 return DeletionTime.LIVE;
1:a991b64: 
1:a991b64:             DeletionTime biggestDeletionTime = openMarkers[biggestOpenMarker];
1:a991b64:             // it's only open in the merged iterator if it's not shadowed by the partition level deletion
1:2457599:             return partitionDeletion.supersedes(biggestDeletionTime) ? DeletionTime.LIVE : biggestDeletionTime;
1:a991b64:         }
1:a991b64: 
1:a991b64:         private void updateOpenMarkers()
1:a991b64:         {
1:a991b64:             for (int i = 0; i < markers.length; i++)
1:a991b64:             {
1:a991b64:                 RangeTombstoneMarker marker = markers[i];
1:a991b64:                 if (marker == null)
1:a991b64:                     continue;
1:a991b64: 
1:a991b64:                 // Note that we can have boundaries that are both open and close, but in that case all we care about
1:a991b64:                 // is what it the open deletion after the marker, so we favor the opening part in this case.
1:a991b64:                 if (marker.isOpen(reversed))
1:2457599:                     openMarkers[i] = marker.openDeletionTime(reversed);
2:a991b64:                 else
1:a991b64:                     openMarkers[i] = null;
1:a991b64:             }
1:a991b64: 
1:a991b64:             // Recompute what is now the biggest open marker
1:a991b64:             biggestOpenMarker = -1;
1:a991b64:             for (int i = 0; i < openMarkers.length; i++)
1:a991b64:             {
1:a991b64:                 if (openMarkers[i] != null && (biggestOpenMarker < 0 || openMarkers[i].supersedes(openMarkers[biggestOpenMarker])))
1:a991b64:                     biggestOpenMarker = i;
1:a991b64:             }
1:a991b64:         }
1:a991b64: 
1:a991b64:         public DeletionTime activeDeletion()
1:a991b64:         {
1:a991b64:             DeletionTime openMarker = currentOpenDeletionTimeInMerged();
1:a991b64:             // We only have an open marker in the merged stream if it's not shadowed by the partition deletion (which can be LIVE itself), so
1:a991b64:             // if have an open marker, we know it's the "active" deletion for the merged stream.
1:a991b64:             return openMarker.isLive() ? partitionDeletion : openMarker;
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:2cc26eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public ClusteringBoundOrBoundary clustering();
/////////////////////////////////////////////////////////////////////////
1:     public ClusteringBound openBound(boolean reversed);
1:     public ClusteringBound closeBound(boolean reversed);
/////////////////////////////////////////////////////////////////////////
1:         private ClusteringBoundOrBoundary bound;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6536c05
/////////////////////////////////////////////////////////////////////////
1:  * There is 2 types of markers: bounds (see {@link RangeTombstoneBoundMarker}) and boundaries (see {@link RangeTombstoneBoundaryMarker}).
1:  * </p>
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public RangeTombstone.Bound openBound(boolean reversed);
0:     public RangeTombstone.Bound closeBound(boolean reversed);
1:     public RangeTombstoneMarker copy(AbstractAllocator allocator);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         public Merger(int size, DeletionTime partitionDeletion, boolean reversed)
/////////////////////////////////////////////////////////////////////////
1:         public RangeTombstoneMarker[] mergedMarkers()
1:         {
1:             return markers;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             return partitionDeletion.supersedes(biggestDeletionTime) ? DeletionTime.LIVE : biggestDeletionTime;
/////////////////////////////////////////////////////////////////////////
1:                     openMarkers[i] = marker.openDeletionTime(reversed);
commit:7813dee
/////////////////////////////////////////////////////////////////////////
1:     public boolean openIsInclusive(boolean reversed);
1:     public boolean closeIsInclusive(boolean reversed);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             boolean isBeforeClustering = bound.kind().comparedToClustering < 0;
1:             if (reversed)
1:                 isBeforeClustering = !isBeforeClustering;
1:             ByteBuffer[] values = bound.getRawValues();
1:             if (previousDeletionTimeInMerged.isLive())
1:                 merged = isBeforeClustering
1:                        ? RangeTombstoneBoundMarker.inclusiveOpen(reversed, values, newDeletionTimeInMerged)
1:                        : RangeTombstoneBoundMarker.exclusiveOpen(reversed, values, newDeletionTimeInMerged);
1:             }
1:             else if (newDeletionTimeInMerged.isLive())
1:             {
1:                 merged = isBeforeClustering
1:                        ? RangeTombstoneBoundMarker.exclusiveClose(reversed, values, previousDeletionTimeInMerged)
1:                        : RangeTombstoneBoundMarker.inclusiveClose(reversed, values, previousDeletionTimeInMerged);
1:             }
1:             else
1:             {
1:                 merged = isBeforeClustering
1:                        ? RangeTombstoneBoundaryMarker.exclusiveCloseInclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged)
1:                        : RangeTombstoneBoundaryMarker.inclusiveCloseExclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * A marker for a range tombstone bound.
1:  * <p>
0:  * There is 2 types of markers: bounds (see {@link RangeTombstoneBound}) and boundaries (see {@link RangeTombstoneBoundary}).
1:  */
1: public interface RangeTombstoneMarker extends Unfiltered
1: {
1:     @Override
0:     public RangeTombstone.Bound clustering();
1: 
1:     public boolean isBoundary();
1: 
0:     public void copyTo(RangeTombstoneMarker.Writer writer);
1: 
1:     public boolean isOpen(boolean reversed);
1:     public boolean isClose(boolean reversed);
1:     public DeletionTime openDeletionTime(boolean reversed);
1:     public DeletionTime closeDeletionTime(boolean reversed);
1: 
0:     public interface Writer extends Slice.Bound.Writer
1:     {
0:         public void writeBoundDeletion(DeletionTime deletion);
0:         public void writeBoundaryDeletion(DeletionTime endDeletion, DeletionTime startDeletion);
0:         public void endOfMarker();
1:     }
1: 
0:     public static class Builder implements Writer
1:     {
0:         private final ByteBuffer[] values;
0:         private int size;
1: 
0:         private RangeTombstone.Bound.Kind kind;
0:         private DeletionTime firstDeletion;
0:         private DeletionTime secondDeletion;
1: 
0:         public Builder(int maxClusteringSize)
1:         {
0:             this.values = new ByteBuffer[maxClusteringSize];
1:         }
1: 
0:         public void writeClusteringValue(ByteBuffer value)
1:         {
0:             values[size++] = value;
1:         }
1: 
0:         public void writeBoundKind(RangeTombstone.Bound.Kind kind)
1:         {
0:             this.kind = kind;
1:         }
1: 
0:         public void writeBoundDeletion(DeletionTime deletion)
1:         {
0:             firstDeletion = deletion;
1:         }
1: 
0:         public void writeBoundaryDeletion(DeletionTime endDeletion, DeletionTime startDeletion)
1:         {
0:             firstDeletion = endDeletion;
0:             secondDeletion = startDeletion;
1:         }
1: 
0:         public void endOfMarker()
1:         {
1:         }
1: 
0:         public RangeTombstoneMarker build()
1:         {
0:             assert kind != null : "Nothing has been written";
0:             if (kind.isBoundary())
0:                 return new RangeTombstoneBoundaryMarker(new RangeTombstone.Bound(kind, Arrays.copyOfRange(values, 0, size)), firstDeletion, secondDeletion);
1:             else
0:                 return new RangeTombstoneBoundMarker(new RangeTombstone.Bound(kind, Arrays.copyOfRange(values, 0, size)), firstDeletion);
1:         }
1: 
0:         public Builder reset()
1:         {
0:             Arrays.fill(values, null);
0:             size = 0;
0:             kind = null;
0:             return this;
1:         }
1:     }
1: 
1:     /**
1:      * Utility class to help merging range tombstone markers coming from multiple inputs (UnfilteredRowIterators).
1:      * <p>
1:      * The assumption that each individual input must validate and that we must preserve in the output is that every
1:      * open marker has a corresponding close marker with the exact same deletion info, and that there is no other range
1:      * tombstone marker between those open and close marker (of course, they could be rows in between). In other word,
1:      * for any {@code UnfilteredRowIterator}, you only ever have to remenber the last open marker (if any) to have the
1:      * full picture of what is deleted by range tombstones at any given point of iterating that iterator.
1:      * <p>
1:      * Note that this class can merge both forward and reverse iterators. To deal with reverse, we just reverse how we
1:      * deal with open and close markers (in forward order, we'll get open-close, open-close, ..., while in reverse we'll
1:      * get close-open, close-open, ...).
1:      */
1:     public static class Merger
1:     {
0:         // Boundaries sorts like the bound that have their equivalent "inclusive" part and that's the main action we
0:         // care about as far as merging goes. So MergedKind just group those as the same case, and tell us whether
0:         // we're dealing with an open or a close (based on whether we're dealing with reversed iterators or not).
0:         // Really this enum is just a convenience for merging.
0:         private enum MergedKind
1:         {
0:             INCL_OPEN, EXCL_CLOSE, EXCL_OPEN, INCL_CLOSE;
1: 
0:             public static MergedKind forBound(RangeTombstone.Bound bound, boolean reversed)
1:             {
0:                 switch (bound.kind())
1:                 {
0:                     case INCL_START_BOUND:
0:                     case EXCL_END_INCL_START_BOUNDARY:
0:                         return reversed ? INCL_CLOSE : INCL_OPEN;
0:                     case EXCL_END_BOUND:
0:                         return reversed ? EXCL_OPEN : EXCL_CLOSE;
0:                     case EXCL_START_BOUND:
0:                         return reversed ? EXCL_CLOSE : EXCL_OPEN;
0:                     case INCL_END_EXCL_START_BOUNDARY:
0:                     case INCL_END_BOUND:
0:                         return reversed ? INCL_OPEN : INCL_CLOSE;
1:                 }
0:                 throw new AssertionError();
1:             }
1:         }
1: 
0:         private final CFMetaData metadata;
0:         private final UnfilteredRowIterators.MergeListener listener;
1:         private final DeletionTime partitionDeletion;
1:         private final boolean reversed;
1: 
0:         private RangeTombstone.Bound bound;
1:         private final RangeTombstoneMarker[] markers;
1: 
1:         // For each iterator, what is the currently open marker deletion time (or null if there is no open marker on that iterator)
1:         private final DeletionTime[] openMarkers;
1:         // The index in openMarkers of the "biggest" marker, the one with the biggest deletion time. Is < 0 iff there is no open
1:         // marker on any iterator.
1:         private int biggestOpenMarker = -1;
1: 
0:         public Merger(CFMetaData metadata, int size, DeletionTime partitionDeletion, boolean reversed, UnfilteredRowIterators.MergeListener listener)
1:         {
0:             this.metadata = metadata;
0:             this.listener = listener;
1:             this.partitionDeletion = partitionDeletion;
1:             this.reversed = reversed;
1: 
1:             this.markers = new RangeTombstoneMarker[size];
1:             this.openMarkers = new DeletionTime[size];
1:         }
1: 
1:         public void clear()
1:         {
1:             Arrays.fill(markers, null);
1:         }
1: 
1:         public void add(int i, RangeTombstoneMarker marker)
1:         {
1:             bound = marker.clustering();
1:             markers[i] = marker;
1:         }
1: 
1:         public RangeTombstoneMarker merge()
1:         {
1:             /*
1:              * Merging of range tombstones works this way:
1:              *   1) We remember what is the currently open marker in the merged stream
1:              *   2) We update our internal states of what range is opened on the input streams based on the new markers to merge
1:              *   3) We compute what should be the state in the merge stream after 2)
1:              *   4) We return what marker should be issued on the merged stream based on the difference between the state from 1) and 3)
1:              */
1: 
1:             DeletionTime previousDeletionTimeInMerged = currentOpenDeletionTimeInMerged();
1: 
1:             updateOpenMarkers();
1: 
1:             DeletionTime newDeletionTimeInMerged = currentOpenDeletionTimeInMerged();
1:             if (previousDeletionTimeInMerged.equals(newDeletionTimeInMerged))
1:                 return null;
1: 
0:             ByteBuffer[] values = bound.getRawValues();
1: 
1:             RangeTombstoneMarker merged;
0:             switch (MergedKind.forBound(bound, reversed))
1:             {
0:                 case INCL_OPEN:
0:                     merged = previousDeletionTimeInMerged.isLive()
0:                            ? RangeTombstoneBoundMarker.inclusiveOpen(reversed, values, newDeletionTimeInMerged)
0:                            : RangeTombstoneBoundaryMarker.exclusiveCloseInclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged);
0:                     break;
0:                 case EXCL_CLOSE:
0:                     merged = newDeletionTimeInMerged.isLive()
0:                            ? RangeTombstoneBoundMarker.exclusiveClose(reversed, values, previousDeletionTimeInMerged)
0:                            : RangeTombstoneBoundaryMarker.exclusiveCloseInclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged);
0:                     break;
0:                 case EXCL_OPEN:
0:                     merged = previousDeletionTimeInMerged.isLive()
0:                            ? RangeTombstoneBoundMarker.exclusiveOpen(reversed, values, newDeletionTimeInMerged)
0:                            : RangeTombstoneBoundaryMarker.inclusiveCloseExclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged);
0:                     break;
0:                 case INCL_CLOSE:
0:                     merged = newDeletionTimeInMerged.isLive()
0:                            ? RangeTombstoneBoundMarker.inclusiveClose(reversed, values, previousDeletionTimeInMerged)
0:                            : RangeTombstoneBoundaryMarker.inclusiveCloseExclusiveOpen(reversed, values, previousDeletionTimeInMerged, newDeletionTimeInMerged);
0:                     break;
0:                 default:
0:                     throw new AssertionError();
1:             }
1: 
0:             if (listener != null)
0:                 listener.onMergedRangeTombstoneMarkers(merged, markers);
1: 
1:             return merged;
1:         }
1: 
1:         private DeletionTime currentOpenDeletionTimeInMerged()
1:         {
1:             if (biggestOpenMarker < 0)
1:                 return DeletionTime.LIVE;
1: 
1:             DeletionTime biggestDeletionTime = openMarkers[biggestOpenMarker];
1:             // it's only open in the merged iterator if it's not shadowed by the partition level deletion
0:             return partitionDeletion.supersedes(biggestDeletionTime) ? DeletionTime.LIVE : biggestDeletionTime.takeAlias();
1:         }
1: 
1:         private void updateOpenMarkers()
1:         {
1:             for (int i = 0; i < markers.length; i++)
1:             {
1:                 RangeTombstoneMarker marker = markers[i];
1:                 if (marker == null)
1:                     continue;
1: 
1:                 // Note that we can have boundaries that are both open and close, but in that case all we care about
1:                 // is what it the open deletion after the marker, so we favor the opening part in this case.
1:                 if (marker.isOpen(reversed))
0:                     openMarkers[i] = marker.openDeletionTime(reversed).takeAlias();
1:                 else
1:                     openMarkers[i] = null;
1:             }
1: 
1:             // Recompute what is now the biggest open marker
1:             biggestOpenMarker = -1;
1:             for (int i = 0; i < openMarkers.length; i++)
1:             {
1:                 if (openMarkers[i] != null && (biggestOpenMarker < 0 || openMarkers[i].supersedes(openMarkers[biggestOpenMarker])))
1:                     biggestOpenMarker = i;
1:             }
1:         }
1: 
1:         public DeletionTime activeDeletion()
1:         {
1:             DeletionTime openMarker = currentOpenDeletionTimeInMerged();
1:             // We only have an open marker in the merged stream if it's not shadowed by the partition deletion (which can be LIVE itself), so
1:             // if have an open marker, we know it's the "active" deletion for the merged stream.
1:             return openMarker.isLive() ? partitionDeletion : openMarker;
1:         }
1:     }
1: }
============================================================================