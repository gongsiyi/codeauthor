1:3f55c35: /*
1:3f55c35:  * Licensed to the Apache Software Foundation (ASF) under one
1:3f55c35:  * or more contributor license agreements.  See the NOTICE file
1:3f55c35:  * distributed with this work for additional information
1:3f55c35:  * regarding copyright ownership.  The ASF licenses this file
1:3f55c35:  * to you under the Apache License, Version 2.0 (the
1:3f55c35:  * "License"); you may not use this file except in compliance
1:3f55c35:  * with the License.  You may obtain a copy of the License at
1:3f55c35:  *
1:3f55c35:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3f55c35:  *
1:3f55c35:  * Unless required by applicable law or agreed to in writing, software
1:3f55c35:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f55c35:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f55c35:  * See the License for the specific language governing permissions and
1:3f55c35:  * limitations under the License.
1:3f55c35:  */
1:0626be8: package org.apache.cassandra.index.internal.composites;
3:3f55c35: 
1:3f55c35: import java.nio.ByteBuffer;
1:3f55c35: 
1:3f55c35: import org.apache.cassandra.db.*;
1:0626be8: import org.apache.cassandra.db.rows.CellPath;
1:0626be8: import org.apache.cassandra.db.rows.Row;
1:0626be8: import org.apache.cassandra.index.internal.CassandraIndex;
1:0626be8: import org.apache.cassandra.index.internal.IndexEntry;
1:0626be8: import org.apache.cassandra.schema.IndexMetadata;
1:3f55c35: 
1:3f55c35: /**
1:3f55c35:  * Common superclass for indexes that capture collection keys, including
1:3f55c35:  * indexes on such keys themselves.
1:3f55c35:  *
1:3f55c35:  * A cell indexed by this index will have the general form:
1:3f55c35:  *   ck_0 ... ck_n c_name [col_elt] : v
1:3f55c35:  * where ck_i are the cluster keys, c_name the CQL3 column name, col_elt the
1:3f55c35:  * collection element that we want to index (which may or may not be there depending
1:3f55c35:  * on whether c_name is the collection we're indexing), and v the cell value.
1:3f55c35:  *
1:3f55c35:  * Such a cell is indexed if c_name is the indexed collection (in which case we are guaranteed to have
1:3f55c35:  * col_elt). The index entry can be viewed in the following way:
1:3f55c35:  *   - the row key is determined by subclasses of this type.
1:3f55c35:  *   - the cell name will be 'rk ck_0 ... ck_n' where rk is the row key of the initial cell.
1:3f55c35:  */
1:0626be8: public abstract class CollectionKeyIndexBase extends CassandraIndex
3:3f55c35: {
1:0626be8:     public CollectionKeyIndexBase(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:0626be8:     {
1:0626be8:         super(baseCfs, indexDef);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:0626be8:                                                ClusteringPrefix prefix,
1:0626be8:                                                CellPath path)
1:3f55c35:     {
1:a991b64:         CBuilder builder = CBuilder.create(getIndexComparator());
1:0626be8:         builder.add(partitionKey);
1:9e74891: 
1:9e74891:         // When indexing a static column, prefix will be empty but only the
1:9e74891:         // partition key is needed at query time.
1:a991b64:         for (int i = 0; i < prefix.size(); i++)
1:a991b64:             builder.add(prefix.get(i));
1:0626be8: 
1:a991b64:         return builder;
3:3f55c35:     }
1:3f55c35: 
1:0626be8:     public IndexEntry decodeEntry(DecoratedKey indexedValue,
1:0626be8:                                   Row indexEntry)
1:3f55c35:     {
1:a991b64:         Clustering clustering = indexEntry.clustering();
1:9e74891: 
1:9e74891:         Clustering indexedEntryClustering = null;
1:9e74891:         if (getIndexedColumn().isStatic())
1:9e74891:             indexedEntryClustering = Clustering.STATIC_CLUSTERING;
1:9e74891:         else
1:9e74891:         {
1:9e74891:             int count = 1 + baseCfs.metadata.clusteringColumns().size();
1:9e74891:             CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:9e74891:             for (int i = 0; i < count - 1; i++)
1:9e74891:                 builder.add(clustering.get(i + 1));
1:9e74891:             indexedEntryClustering = builder.build();
1:9e74891:         }
1:0626be8: 
1:0626be8:         return new IndexEntry(indexedValue,
1:0626be8:                               clustering,
1:0626be8:                               indexEntry.primaryKeyLivenessInfo().timestamp(),
1:0626be8:                               clustering.get(0),
1:9e74891:                               indexedEntryClustering);
1:3f55c35:     }
1:3f55c35: }
============================================================================
author:Taiyuan Zhang
-------------------------------------------------------------------------------
commit:9e74891
/////////////////////////////////////////////////////////////////////////
1: 
1:         // When indexing a static column, prefix will be empty but only the
1:         // partition key is needed at query time.
/////////////////////////////////////////////////////////////////////////
1: 
1:         Clustering indexedEntryClustering = null;
1:         if (getIndexedColumn().isStatic())
1:             indexedEntryClustering = Clustering.STATIC_CLUSTERING;
1:         else
1:         {
1:             int count = 1 + baseCfs.metadata.clusteringColumns().size();
1:             CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:             for (int i = 0; i < count - 1; i++)
1:                 builder.add(clustering.get(i + 1));
1:             indexedEntryClustering = builder.build();
1:         }
1:                               indexedEntryClustering);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.index.internal.composites;
1: import org.apache.cassandra.db.rows.CellPath;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.index.internal.CassandraIndex;
1: import org.apache.cassandra.index.internal.IndexEntry;
1: import org.apache.cassandra.schema.IndexMetadata;
/////////////////////////////////////////////////////////////////////////
1: public abstract class CollectionKeyIndexBase extends CassandraIndex
1:     public CollectionKeyIndexBase(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:     {
1:         super(baseCfs, indexDef);
1:     }
1: 
1:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:                                                ClusteringPrefix prefix,
1:                                                CellPath path)
1:         builder.add(partitionKey);
1: 
1:     public IndexEntry decodeEntry(DecoratedKey indexedValue,
1:                                   Row indexEntry)
1: 
1:         return new IndexEntry(indexedValue,
1:                               clustering,
1:                               indexEntry.primaryKeyLivenessInfo().timestamp(),
1:                               clustering.get(0),
0:                               builder.build());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.rows.*;
/////////////////////////////////////////////////////////////////////////
0:     protected CBuilder buildIndexClusteringPrefix(ByteBuffer rowKey, ClusteringPrefix prefix, CellPath path)
1:         CBuilder builder = CBuilder.create(getIndexComparator());
1:         for (int i = 0; i < prefix.size(); i++)
1:             builder.add(prefix.get(i));
1:         return builder;
0:     public IndexedEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1:         Clustering clustering = indexEntry.clustering();
0:         CBuilder builder = CBuilder.create(baseCfs.getComparator());
0:             builder.add(clustering.get(i + 1));
0:         return new IndexedEntry(indexedValue, clustering, indexEntry.primaryKeyLivenessInfo().timestamp(), clustering.get(0), builder.build());
author:Samuel Klock
-------------------------------------------------------------------------------
commit:3f55c35
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.db.index.composites;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.composites.CBuilder;
0: import org.apache.cassandra.db.composites.CellName;
0: import org.apache.cassandra.db.composites.CellNameType;
0: import org.apache.cassandra.db.composites.Composite;
0: import org.apache.cassandra.db.composites.CompoundDenseCellNameType;
0: import org.apache.cassandra.db.index.SecondaryIndex;
0: import org.apache.cassandra.db.marshal.*;
1: 
1: /**
1:  * Common superclass for indexes that capture collection keys, including
1:  * indexes on such keys themselves.
1:  *
1:  * A cell indexed by this index will have the general form:
1:  *   ck_0 ... ck_n c_name [col_elt] : v
1:  * where ck_i are the cluster keys, c_name the CQL3 column name, col_elt the
1:  * collection element that we want to index (which may or may not be there depending
1:  * on whether c_name is the collection we're indexing), and v the cell value.
1:  *
1:  * Such a cell is indexed if c_name is the indexed collection (in which case we are guaranteed to have
1:  * col_elt). The index entry can be viewed in the following way:
1:  *   - the row key is determined by subclasses of this type.
1:  *   - the cell name will be 'rk ck_0 ... ck_n' where rk is the row key of the initial cell.
1:  */
0: public abstract class CompositesIndexIncludingCollectionKey extends CompositesIndex
1: {
0:     public static CellNameType buildIndexComparator(CFMetaData baseMetadata, ColumnDefinition columnDef)
1:     {
0:         int count = 1 + baseMetadata.clusteringColumns().size(); // row key + clustering prefix
0:         List<AbstractType<?>> types = new ArrayList<AbstractType<?>>(count);
0:         types.add(SecondaryIndex.keyComparator);
0:         for (int i = 0; i < count - 1; i++)
0:             types.add(baseMetadata.comparator.subtype(i));
0:         return new CompoundDenseCellNameType(types);
1:     }
1: 
0:     protected Composite makeIndexColumnPrefix(ByteBuffer rowKey, Composite cellName)
1:     {
0:         int count = 1 + baseCfs.metadata.clusteringColumns().size();
0:         CBuilder builder = getIndexComparator().builder();
0:         builder.add(rowKey);
0:         for (int i = 0; i < Math.min(cellName.size(), count - 1); i++)
0:             builder.add(cellName.get(i));
0:         return builder.build();
1:     }
1: 
0:     public IndexedEntry decodeEntry(DecoratedKey indexedValue, Cell indexEntry)
1:     {
0:         int count = 1 + baseCfs.metadata.clusteringColumns().size();
0:         CBuilder builder = baseCfs.getComparator().builder();
0:         for (int i = 0; i < count - 1; i++)
0:             builder.add(indexEntry.name().get(i + 1));
0:         return new IndexedEntry(indexedValue, indexEntry.name(), indexEntry.timestamp(), indexEntry.name().get(0), builder.build());
1:     }
1: 
0:     @Override
0:     public boolean indexes(CellName name)
1:     {
0:         // We index if the CQL3 column name is the one of the collection we index
0:         AbstractType<?> comp = baseCfs.metadata.getColumnDefinitionComparator(columnDef);
0:         return name.size() > columnDef.position()
0:             && comp.compare(name.get(columnDef.position()), columnDef.name.bytes) == 0;
1:     }
1: }
============================================================================