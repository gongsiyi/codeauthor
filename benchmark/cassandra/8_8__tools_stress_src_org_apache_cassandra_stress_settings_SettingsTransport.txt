1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
4:2e1e98a: 
1:2e1e98a: import java.io.Serializable;
1:2e1e98a: import java.util.Arrays;
1:016a2b0: import java.util.HashMap;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Map;
1:2e1e98a: 
1:016a2b0: import org.apache.cassandra.config.EncryptionOptions;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:016a2b0: import org.apache.cassandra.thrift.ITransportFactory;
1:016a2b0: import org.apache.cassandra.thrift.SSLTransportFactory;
1:016a2b0: import org.apache.cassandra.thrift.TFramedTransportFactory;
1:2e1e98a: 
1:2e1e98a: public class SettingsTransport implements Serializable
5:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     private final String fqFactoryClass;
1:016a2b0:     private final TOptions options;
1:016a2b0:     private ITransportFactory factory;
1:2e1e98a: 
1:2e1e98a:     public SettingsTransport(TOptions options)
1:2e1e98a:     {
1:016a2b0:         this.options = options;
1:016a2b0:         this.fqFactoryClass = options.factory.value();
1:016a2b0:         try
1:2e1e98a:         {
1:016a2b0:             Class<?> clazz = Class.forName(fqFactoryClass);
1:016a2b0:             if (!ITransportFactory.class.isAssignableFrom(clazz))
1:3e2c610:                 throw new IllegalArgumentException(clazz + " is not a valid transport factory");
1:016a2b0:             // check we can instantiate it
1:016a2b0:             clazz.newInstance();
5:2e1e98a:         }
1:016a2b0:         catch (Exception e)
1:2e1e98a:         {
1:016a2b0:             throw new IllegalArgumentException("Invalid transport factory class: " + options.factory.value(), e);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:016a2b0:     private void configureTransportFactory(ITransportFactory transportFactory, TOptions options)
1:016a2b0:     {
1:016a2b0:         Map<String, String> factoryOptions = new HashMap<>();
1:016a2b0:         // If the supplied factory supports the same set of options as our SSL impl, set those
1:016a2b0:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.TRUSTSTORE))
1:016a2b0:             factoryOptions.put(SSLTransportFactory.TRUSTSTORE, options.trustStore.value());
1:016a2b0:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.TRUSTSTORE_PASSWORD))
1:016a2b0:             factoryOptions.put(SSLTransportFactory.TRUSTSTORE_PASSWORD, options.trustStorePw.value());
1:106750c:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.KEYSTORE))
1:106750c:             factoryOptions.put(SSLTransportFactory.KEYSTORE, options.keyStore.value());
1:106750c:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.KEYSTORE_PASSWORD))
1:106750c:             factoryOptions.put(SSLTransportFactory.KEYSTORE_PASSWORD, options.keyStorePw.value());
1:016a2b0:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.PROTOCOL))
1:016a2b0:             factoryOptions.put(SSLTransportFactory.PROTOCOL, options.protocol.value());
1:016a2b0:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.CIPHER_SUITES))
1:016a2b0:             factoryOptions.put(SSLTransportFactory.CIPHER_SUITES, options.ciphers.value());
1:016a2b0:         // Now check if any of the factory's supported options are set as system properties
1:016a2b0:         for (String optionKey : transportFactory.supportedOptions())
1:016a2b0:             if (System.getProperty(optionKey) != null)
1:016a2b0:                 factoryOptions.put(optionKey, System.getProperty(optionKey));
1:016a2b0: 
1:016a2b0:         transportFactory.setOptions(factoryOptions);
1:016a2b0:     }
1:016a2b0: 
1:016a2b0:     public synchronized ITransportFactory getFactory()
1:2e1e98a:     {
1:2e1e98a:         if (factory == null)
1:2e1e98a:         {
2:2e1e98a:             try
1:2e1e98a:             {
1:016a2b0:                 this.factory = (ITransportFactory) Class.forName(fqFactoryClass).newInstance();
1:016a2b0:                 configureTransportFactory(this.factory, this.options);
1:2e1e98a:             }
2:2e1e98a:             catch (Exception e)
1:2e1e98a:             {
1:2e1e98a:                 throw new RuntimeException(e);
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:         return factory;
1:2e1e98a:     }
1:2e1e98a: 
1:016a2b0:     public EncryptionOptions.ClientEncryptionOptions getEncryptionOptions()
1:016a2b0:     {
1:016a2b0:         EncryptionOptions.ClientEncryptionOptions encOptions = new EncryptionOptions.ClientEncryptionOptions();
1:016a2b0:         if (options.trustStore.present())
1:016a2b0:         {
1:016a2b0:             encOptions.enabled = true;
1:016a2b0:             encOptions.truststore = options.trustStore.value();
1:016a2b0:             encOptions.truststore_password = options.trustStorePw.value();
1:106750c:             if (options.keyStore.present())
1:106750c:             {
1:106750c:                 encOptions.keystore = options.keyStore.value();
1:106750c:                 encOptions.keystore_password = options.keyStorePw.value();
1:106750c:             }
1:106750c:             else
1:106750c:             {
1:106750c:                 // mandatory for SSLFactory.createSSLContext(), see CASSANDRA-9325
1:106750c:                 encOptions.keystore = encOptions.truststore;
1:106750c:             }
1:016a2b0:             encOptions.algorithm = options.alg.value();
1:016a2b0:             encOptions.protocol = options.protocol.value();
1:016a2b0:             encOptions.cipher_suites = options.ciphers.value().split(",");
1:016a2b0:         }
1:016a2b0:         return encOptions;
1:016a2b0:     }
1:016a2b0: 
1:2e1e98a:     // Option Declarations
1:2e1e98a: 
1:7536429:     static class TOptions extends GroupedOptions implements Serializable
1:2e1e98a:     {
1:016a2b0:         final OptionSimple factory = new OptionSimple("factory=", ".*", TFramedTransportFactory.class.getName(), "Fully-qualified ITransportFactory class name for creating a connection. Note: For Thrift over SSL, use org.apache.cassandra.thrift.SSLTransportFactory.", false);
1:2e1e98a:         final OptionSimple trustStore = new OptionSimple("truststore=", ".*", null, "SSL: full path to truststore", false);
1:016a2b0:         final OptionSimple trustStorePw = new OptionSimple("truststore-password=", ".*", null, "SSL: truststore password", false);
1:106750c:         final OptionSimple keyStore = new OptionSimple("keystore=", ".*", null, "SSL: full path to keystore", false);
1:106750c:         final OptionSimple keyStorePw = new OptionSimple("keystore-password=", ".*", null, "SSL: keystore password", false);
1:016a2b0:         final OptionSimple protocol = new OptionSimple("ssl-protocol=", ".*", "TLS", "SSL: connection protocol to use", false);
1:2e1e98a:         final OptionSimple alg = new OptionSimple("ssl-alg=", ".*", "SunX509", "SSL: algorithm", false);
1:016a2b0:         final OptionSimple storeType = new OptionSimple("store-type=", ".*", "JKS", "SSL: keystore format", false);
1:016a2b0:         final OptionSimple ciphers = new OptionSimple("ssl-ciphers=", ".*", "TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA", "SSL: comma delimited list of encryption suites to use", false);
1:2e1e98a: 
2:2e1e98a:         @Override
2:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:106750c:             return Arrays.asList(factory, trustStore, trustStorePw, keyStore, keyStorePw, protocol, alg, storeType, ciphers);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // CLI Utility Methods
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.println("  " + options.getOptionAsString());
1:938faa2:     }
1:2e1e98a: 
1:2e1e98a:     public static SettingsTransport get(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         String[] params = clArgs.remove("-transport");
1:2e1e98a:         if (params == null)
1:2e1e98a:             return new SettingsTransport(new TOptions());
1:2e1e98a: 
1:2e1e98a:         GroupedOptions options = GroupedOptions.select(params, new TOptions());
1:2e1e98a:         if (options == null)
1:2e1e98a:         {
1:2e1e98a:             printHelp();
1:2e1e98a:             System.out.println("Invalid -transport options provided, see output for valid options");
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a:         return new SettingsTransport((TOptions) options);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static void printHelp()
1:2e1e98a:     {
1:2e1e98a:         GroupedOptions.printOptions(System.out, "-transport", new TOptions());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static Runnable helpPrinter()
1:2e1e98a:     {
1:2e1e98a:         return new Runnable()
1:2e1e98a:         {
1:2e1e98a:             @Override
1:2e1e98a:             public void run()
1:2e1e98a:             {
1:2e1e98a:                 printHelp();
1:2e1e98a:             }
1:2e1e98a:         };
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.println("  " + options.getOptionAsString());
1:     }
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:106750c
/////////////////////////////////////////////////////////////////////////
1:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.KEYSTORE))
1:             factoryOptions.put(SSLTransportFactory.KEYSTORE, options.keyStore.value());
1:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.KEYSTORE_PASSWORD))
1:             factoryOptions.put(SSLTransportFactory.KEYSTORE_PASSWORD, options.keyStorePw.value());
/////////////////////////////////////////////////////////////////////////
1:             if (options.keyStore.present())
1:             {
1:                 encOptions.keystore = options.keyStore.value();
1:                 encOptions.keystore_password = options.keyStorePw.value();
1:             }
1:             else
1:             {
1:                 // mandatory for SSLFactory.createSSLContext(), see CASSANDRA-9325
1:                 encOptions.keystore = encOptions.truststore;
1:             }
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple keyStore = new OptionSimple("keystore=", ".*", null, "SSL: full path to keystore", false);
1:         final OptionSimple keyStorePw = new OptionSimple("keystore-password=", ".*", null, "SSL: keystore password", false);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(factory, trustStore, trustStorePw, keyStore, keyStorePw, protocol, alg, storeType, ciphers);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:7536429
/////////////////////////////////////////////////////////////////////////
1:     static class TOptions extends GroupedOptions implements Serializable
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
1:                 throw new IllegalArgumentException(clazz + " is not a valid transport factory");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:016a2b0
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import org.apache.cassandra.config.EncryptionOptions;
1: import org.apache.cassandra.thrift.ITransportFactory;
1: import org.apache.cassandra.thrift.SSLTransportFactory;
1: import org.apache.cassandra.thrift.TFramedTransportFactory;
1:     private final TOptions options;
1:     private ITransportFactory factory;
1:         this.options = options;
1:         this.fqFactoryClass = options.factory.value();
1:         try
1:             Class<?> clazz = Class.forName(fqFactoryClass);
1:             if (!ITransportFactory.class.isAssignableFrom(clazz))
0:                 throw new ClassCastException();
1:             // check we can instantiate it
1:             clazz.newInstance();
1:         catch (Exception e)
1:             throw new IllegalArgumentException("Invalid transport factory class: " + options.factory.value(), e);
1:     private void configureTransportFactory(ITransportFactory transportFactory, TOptions options)
1:     {
1:         Map<String, String> factoryOptions = new HashMap<>();
1:         // If the supplied factory supports the same set of options as our SSL impl, set those
1:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.TRUSTSTORE))
1:             factoryOptions.put(SSLTransportFactory.TRUSTSTORE, options.trustStore.value());
1:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.TRUSTSTORE_PASSWORD))
1:             factoryOptions.put(SSLTransportFactory.TRUSTSTORE_PASSWORD, options.trustStorePw.value());
1:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.PROTOCOL))
1:             factoryOptions.put(SSLTransportFactory.PROTOCOL, options.protocol.value());
1:         if (transportFactory.supportedOptions().contains(SSLTransportFactory.CIPHER_SUITES))
1:             factoryOptions.put(SSLTransportFactory.CIPHER_SUITES, options.ciphers.value());
1:         // Now check if any of the factory's supported options are set as system properties
1:         for (String optionKey : transportFactory.supportedOptions())
1:             if (System.getProperty(optionKey) != null)
1:                 factoryOptions.put(optionKey, System.getProperty(optionKey));
1: 
1:         transportFactory.setOptions(factoryOptions);
1:     }
1: 
1:     public synchronized ITransportFactory getFactory()
1:                 this.factory = (ITransportFactory) Class.forName(fqFactoryClass).newInstance();
1:                 configureTransportFactory(this.factory, this.options);
/////////////////////////////////////////////////////////////////////////
1:     public EncryptionOptions.ClientEncryptionOptions getEncryptionOptions()
1:     {
1:         EncryptionOptions.ClientEncryptionOptions encOptions = new EncryptionOptions.ClientEncryptionOptions();
1:         if (options.trustStore.present())
1:         {
1:             encOptions.enabled = true;
1:             encOptions.truststore = options.trustStore.value();
1:             encOptions.truststore_password = options.trustStorePw.value();
1:             encOptions.algorithm = options.alg.value();
1:             encOptions.protocol = options.protocol.value();
1:             encOptions.cipher_suites = options.ciphers.value().split(",");
1:         }
1:         return encOptions;
1:     }
1: 
1:         final OptionSimple factory = new OptionSimple("factory=", ".*", TFramedTransportFactory.class.getName(), "Fully-qualified ITransportFactory class name for creating a connection. Note: For Thrift over SSL, use org.apache.cassandra.thrift.SSLTransportFactory.", false);
1:         final OptionSimple trustStorePw = new OptionSimple("truststore-password=", ".*", null, "SSL: truststore password", false);
1:         final OptionSimple protocol = new OptionSimple("ssl-protocol=", ".*", "TLS", "SSL: connection protocol to use", false);
1:         final OptionSimple storeType = new OptionSimple("store-type=", ".*", "JKS", "SSL: keystore format", false);
1:         final OptionSimple ciphers = new OptionSimple("ssl-ciphers=", ".*", "TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA", "SSL: comma delimited list of encryption suites to use", false);
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.thrift.transport.TTransportFactory;
1: 
1: public class SettingsTransport implements Serializable
1: {
1: 
1:     private final String fqFactoryClass;
0:     private TTransportFactory factory;
1: 
1:     public SettingsTransport(TOptions options)
1:     {
0:         if (options instanceof SSLOptions)
1:         {
0:             throw new UnsupportedOperationException();
1:         }
0:         else
1:         {
0:             this.fqFactoryClass = options.factory.value();
1:             try
1:             {
0:                 Class<?> clazz = Class.forName(fqFactoryClass);
0:                 if (!TTransportFactory.class.isAssignableFrom(clazz))
0:                     throw new ClassCastException();
0:                 // check we can instantiate it
0:                 clazz.newInstance();
1:             }
1:             catch (Exception e)
1:             {
0:                 throw new IllegalArgumentException("Invalid transport factory class: " + options.factory.value(), e);
1:             }
1: 
1:         }
1:     }
1: 
0:     public synchronized TTransportFactory getFactory()
1:     {
1:         if (factory == null)
1:         {
1:             try
1:             {
0:                 this.factory = (TTransportFactory) Class.forName(fqFactoryClass).newInstance();
1:             }
1:             catch (Exception e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:         return factory;
1:     }
1: 
1:     // Option Declarations
1: 
0:     static class TOptions extends GroupedOptions
1:     {
0:         final OptionSimple factory = new OptionSimple("factory=", ".*", "org.apache.cassandra.cli.transport.FramedTransportFactory", "Fully-qualified TTransportFactory class name for creating a connection. Note: For Thrift over SSL, use org.apache.cassandra.stress.SSLTransportFactory.", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(factory);
1:         }
1:     }
1: 
0:     static final class SSLOptions extends TOptions
1:     {
1:         final OptionSimple trustStore = new OptionSimple("truststore=", ".*", null, "SSL: full path to truststore", false);
0:         final OptionSimple trustStorePw = new OptionSimple("truststore-password=", ".*", null, "", false);
0:         final OptionSimple protocol = new OptionSimple("ssl-protocol=", ".*", "TLS", "SSL: connections protocol to use", false);
1:         final OptionSimple alg = new OptionSimple("ssl-alg=", ".*", "SunX509", "SSL: algorithm", false);
0:         final OptionSimple storeType = new OptionSimple("store-type=", ".*", "TLS", "SSL: comma delimited list of encryption suites to use", false);
0:         final OptionSimple ciphers = new OptionSimple("ssl-ciphers=", ".*", "TLS", "SSL: comma delimited list of encryption suites to use", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(factory, trustStore, trustStorePw, protocol, alg, storeType, ciphers);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     public static SettingsTransport get(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-transport");
1:         if (params == null)
1:             return new SettingsTransport(new TOptions());
1: 
1:         GroupedOptions options = GroupedOptions.select(params, new TOptions());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -transport options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsTransport((TOptions) options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-transport", new TOptions());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: 
1: }
============================================================================