1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.Map;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Default noOp tokenizer. The iterator will iterate only once
1:72790dc:  * returning the unmodified input
1:72790dc:  */
1:72790dc: public class NoOpAnalyzer extends AbstractAnalyzer
1:72790dc: {
1:72790dc:     private ByteBuffer input;
1:72790dc:     private boolean hasNext = false;
1:72790dc: 
1:72790dc:     public void init(Map<String, String> options, AbstractType validator)
1:72790dc:     {}
1:72790dc: 
1:72790dc:     public boolean hasNext()
1:72790dc:     {
1:72790dc:         if (hasNext)
1:72790dc:         {
1:72790dc:             this.next = input;
1:72790dc:             this.hasNext = false;
1:72790dc:             return true;
1:72790dc:         }
1:72790dc:         return false;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void reset(ByteBuffer input)
1:72790dc:     {
1:72790dc:         this.next = null;
1:72790dc:         this.input = input;
1:72790dc:         this.hasNext = true;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: /**
1:  * Default noOp tokenizer. The iterator will iterate only once
1:  * returning the unmodified input
1:  */
1: public class NoOpAnalyzer extends AbstractAnalyzer
1: {
1:     private ByteBuffer input;
1:     private boolean hasNext = false;
1: 
1:     public void init(Map<String, String> options, AbstractType validator)
1:     {}
1: 
1:     public boolean hasNext()
1:     {
1:         if (hasNext)
1:         {
1:             this.next = input;
1:             this.hasNext = false;
1:             return true;
1:         }
1:         return false;
1:     }
1: 
1:     public void reset(ByteBuffer input)
1:     {
1:         this.next = null;
1:         this.input = input;
1:         this.hasNext = true;
1:     }
1: }
============================================================================