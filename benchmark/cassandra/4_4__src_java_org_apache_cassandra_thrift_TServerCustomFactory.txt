1:8264eb2: /*
1:8264eb2:  * Licensed to the Apache Software Foundation (ASF) under one
1:8264eb2:  * or more contributor license agreements. See the NOTICE file
1:8264eb2:  * distributed with this work for additional information
1:8264eb2:  * regarding copyright ownership. The ASF licenses this file
1:8264eb2:  * to you under the Apache License, Version 2.0 (the
1:8264eb2:  * "License"); you may not use this file except in compliance
1:8264eb2:  * with the License. You may obtain a copy of the License at
1:8264eb2:  *
1:8264eb2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8264eb2:  *
1:8264eb2:  * Unless required by applicable law or agreed to in writing,
1:8264eb2:  * software distributed under the License is distributed on an
1:8264eb2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8264eb2:  * KIND, either express or implied. See the License for the
1:8264eb2:  * specific language governing permissions and limitations
1:8264eb2:  * under the License.
1:8264eb2:  */
1:8264eb2: package org.apache.cassandra.thrift;
1:8264eb2: 
1:8264eb2: import org.slf4j.Logger;
1:8264eb2: import org.slf4j.LoggerFactory;
1:8264eb2: 
1:8264eb2: import org.apache.thrift.server.TServer;
1:8264eb2: 
1:8264eb2: /**
1:2f31bde:  * Helper implementation to create a thrift TServer based on one of the common types we support (sync, hsha),
1:8264eb2:  * or a custom type by setting the fully qualified java class name in the rpc_server_type setting.
1:8264eb2:  */
1:8264eb2: public class TServerCustomFactory implements TServerFactory
1:8264eb2: {
1:8264eb2:     private static Logger logger = LoggerFactory.getLogger(TServerCustomFactory.class);
1:8264eb2:     private final String serverType;
1:8264eb2: 
1:8264eb2:     public TServerCustomFactory(String serverType)
1:8264eb2:     {
1:8264eb2:         assert serverType != null;
1:8264eb2:         this.serverType = serverType;
1:8264eb2:     }
1:8264eb2: 
1:8264eb2:     public TServer buildTServer(TServerFactory.Args args)
1:8264eb2:     {
1:8264eb2:         TServer server;
1:9797511:         if (ThriftServer.ThriftServerType.SYNC.equalsIgnoreCase(serverType))
1:8264eb2:         {
1:8264eb2:             server = new CustomTThreadPoolServer.Factory().buildTServer(args);
1:8264eb2:         }
1:9797511:         else if(ThriftServer.ThriftServerType.ASYNC.equalsIgnoreCase(serverType))
1:8264eb2:         {
1:8264eb2:             server = new CustomTNonBlockingServer.Factory().buildTServer(args);
1:2dc2bb8:             logger.info("Using non-blocking/asynchronous thrift server on {} : {}", args.addr.getHostName(), args.addr.getPort());
1:8264eb2:         }
1:9797511:         else if(ThriftServer.ThriftServerType.HSHA.equalsIgnoreCase(serverType))
1:8264eb2:         {
1:98eec0a:             server = new THsHaDisruptorServer.Factory().buildTServer(args);
1:2dc2bb8:             logger.info("Using custom half-sync/half-async thrift server on {} : {}", args.addr.getHostName(), args.addr.getPort());
1:8264eb2:         }
1:8264eb2:         else
1:8264eb2:         {
1:8264eb2:             TServerFactory serverFactory;
1:8264eb2:             try
1:8264eb2:             {
1:8264eb2:                 serverFactory = (TServerFactory) Class.forName(serverType).newInstance();
1:8264eb2:             }
1:8264eb2:             catch (Exception e)
1:8264eb2:             {
1:8264eb2:                 throw new RuntimeException("Failed to instantiate server factory:" + serverType, e);
1:8264eb2:             }
1:8264eb2:             server = serverFactory.buildTServer(args);
1:2dc2bb8:             logger.info("Using custom thrift server {} on {} : {}", server.getClass().getName(), args.addr.getHostName(), args.addr.getPort());
1:8264eb2:         }
1:8264eb2:         return server;
1:8264eb2:     }
1:8264eb2: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:2dc2bb8
/////////////////////////////////////////////////////////////////////////
1:             logger.info("Using non-blocking/asynchronous thrift server on {} : {}", args.addr.getHostName(), args.addr.getPort());
1:             logger.info("Using custom half-sync/half-async thrift server on {} : {}", args.addr.getHostName(), args.addr.getPort());
/////////////////////////////////////////////////////////////////////////
1:             logger.info("Using custom thrift server {} on {} : {}", server.getClass().getName(), args.addr.getHostName(), args.addr.getPort());
commit:ed4d455
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:         if (ThriftServer.ThriftServerType.SYNC.equalsIgnoreCase(serverType))
1:         else if(ThriftServer.ThriftServerType.ASYNC.equalsIgnoreCase(serverType))
1:         else if(ThriftServer.ThriftServerType.HSHA.equalsIgnoreCase(serverType))
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:3834a85
/////////////////////////////////////////////////////////////////////////
commit:2f31bde
/////////////////////////////////////////////////////////////////////////
1:  * Helper implementation to create a thrift TServer based on one of the common types we support (sync, hsha),
commit:5b5b20a
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:98eec0a
/////////////////////////////////////////////////////////////////////////
0: import com.thinkaurelius.thrift.TDisruptorServer;
/////////////////////////////////////////////////////////////////////////
1:             server = new THsHaDisruptorServer.Factory().buildTServer(args);
commit:6b83663
commit:8264eb2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.thrift;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.thrift.server.TServer;
1: 
1: /**
0:  * Helper implementation to create a thrift TServer based on one of the common types we support (sync, async, hsha),
1:  * or a custom type by setting the fully qualified java class name in the rpc_server_type setting.
1:  */
1: public class TServerCustomFactory implements TServerFactory
1: {
1:     private static Logger logger = LoggerFactory.getLogger(TServerCustomFactory.class);
1:     private final String serverType;
1: 
1:     public TServerCustomFactory(String serverType)
1:     {
1:         assert serverType != null;
1:         this.serverType = serverType;
1:     }
1: 
1:     public TServer buildTServer(TServerFactory.Args args)
1:     {
1:         TServer server;
0:         if (CassandraDaemon.SYNC.equalsIgnoreCase(serverType))
1:         {
1:             server = new CustomTThreadPoolServer.Factory().buildTServer(args);
0:             logger.info(String.format("Using synchronous/threadpool thrift server on %s : %s", args.addr.getHostName(), args.addr.getPort()));
1:         }
0:         else if(CassandraDaemon.ASYNC.equalsIgnoreCase(serverType))
1:         {
1:             server = new CustomTNonBlockingServer.Factory().buildTServer(args);
0:             logger.info(String.format("Using non-blocking/asynchronous thrift server on %s : %s", args.addr.getHostName(), args.addr.getPort()));
1:         }
0:         else if(CassandraDaemon.HSHA.equalsIgnoreCase(serverType))
1:         {
0:             server = new CustomTHsHaServer.Factory().buildTServer(args);
0:             logger.info(String.format("Using custom half-sync/half-async thrift server on %s : %s", args.addr.getHostName(), args.addr.getPort()));
1:         }
1:         else
1:         {
1:             TServerFactory serverFactory;
1:             try
1:             {
1:                 serverFactory = (TServerFactory) Class.forName(serverType).newInstance();
1:             }
1:             catch (Exception e)
1:             {
1:                 throw new RuntimeException("Failed to instantiate server factory:" + serverType, e);
1:             }
1:             server = serverFactory.buildTServer(args);
0:             logger.info(String.format("Using custom thrift server %s on %s : %s", server.getClass().getName(), args.addr.getHostName(), args.addr.getPort()));
1:         }
1:         return server;
1:     }
1: }
============================================================================