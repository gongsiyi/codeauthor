1:9797511: /*
1:9797511:  * Licensed to the Apache Software Foundation (ASF) under one
1:9797511:  * or more contributor license agreements.  See the NOTICE file
1:9797511:  * distributed with this work for additional information
1:9797511:  * regarding copyright ownership.  The ASF licenses this file
1:9797511:  * to you under the Apache License, Version 2.0 (the
1:9797511:  * "License"); you may not use this file except in compliance
1:9797511:  * with the License.  You may obtain a copy of the License at
1:9797511:  *
1:9797511:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9797511:  *
1:9797511:  * Unless required by applicable law or agreed to in writing, software
1:9797511:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9797511:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9797511:  * See the License for the specific language governing permissions and
1:9797511:  * limitations under the License.
1:9797511:  */
1:9797511: 
1:9797511: package org.apache.cassandra.tools;
1:9797511: 
1:9797511: import java.io.File;
1:9797511: import java.io.IOException;
1:9797511: import java.lang.management.ManagementFactory;
1:9797511: import java.lang.management.ThreadInfo;
1:9797511: import java.lang.management.ThreadMXBean;
1:9797511: import java.lang.reflect.InvocationTargetException;
1:9797511: import java.lang.reflect.Method;
1:9797511: import java.security.Permission;
1:9797511: import java.util.Arrays;
1:9797511: import java.util.Collections;
1:9797511: import java.util.List;
1:9797511: import java.util.Set;
1:9797511: import java.util.regex.Pattern;
1:9797511: import java.util.stream.Collectors;
1:9797511: 
1:9797511: import org.apache.commons.io.FileUtils;
1:9797511: import org.junit.BeforeClass;
1:9797511: 
1:9797511: import org.slf4j.LoggerFactory;
1:9797511: 
1:9797511: import static org.junit.Assert.assertEquals;
1:9797511: import static org.junit.Assert.assertFalse;
1:9797511: import static org.junit.Assert.assertTrue;
1:9797511: import static org.junit.Assert.fail;
1:9797511: 
1:9797511: /**
1:9797511:  * Base unit test class for standalone tools
1:9797511:  */
1:9797511: public abstract class ToolsTester
1:9797511: {
1:9797511:     private static List<ThreadInfo> initialThreads;
1:9797511: 
1:9797511:     static final String[] EXPECTED_THREADS_WITH_SCHEMA = {
1:9797511:     "NativePoolCleaner",
1:9797511:     "COMMIT-LOG-ALLOCATOR",
1:9797511:     "COMMIT-LOG-WRITER",
1:9797511:     "PerDiskMemtableFlushWriter_0:[1-9]",
1:9797511:     "MemtablePostFlush:[1-9]",
1:9797511:     "MemtableFlushWriter:[1-9]",
1:9797511:     "MemtableReclaimMemory:[1-9]",
1:9797511:     };
1:9797511:     static final String[] OPTIONAL_THREADS_WITH_SCHEMA = {
1:9797511:     "ScheduledTasks:[1-9]",
1:9797511:     "OptionalTasks:[1-9]",
1:9797511:     "Reference-Reaper:[1-9]",
1:9797511:     "LocalPool-Cleaner:[1-9]",
1:9797511:     "CacheCleanupExecutor:[1-9]",
1:9797511:     "CompactionExecutor:[1-9]",
1:9797511:     "ValidationExecutor:[1-9]",
1:9797511:     "NonPeriodicTasks:[1-9]",
1:9797511:     "Sampler:[1-9]",
1:9797511:     "SecondaryIndexManagement:[1-9]",
1:9797511:     "Strong-Reference-Leak-Detector:[1-9]",
1:9797511:     "Background_Reporter:[1-9]",
1:9797511:     "EXPIRING-MAP-REAPER:[1-9]",
1:9797511:     };
1:9797511: 
1:9797511:     public void assertNoUnexpectedThreadsStarted(String[] expectedThreadNames, String[] optionalThreadNames)
1:9797511:     {
1:9797511:         ThreadMXBean threads = ManagementFactory.getThreadMXBean();
1:9797511: 
1:9797511:         Set<String> initial = initialThreads
1:9797511:                               .stream()
1:9797511:                               .map(ThreadInfo::getThreadName)
1:9797511:                               .collect(Collectors.toSet());
1:9797511: 
1:9797511:         Set<String> current = Arrays.stream(threads.getThreadInfo(threads.getAllThreadIds()))
1:9797511:                                     .map(ThreadInfo::getThreadName)
1:9797511:                                     .collect(Collectors.toSet());
1:9797511: 
1:9797511:         List<Pattern> expected = expectedThreadNames != null
1:9797511:                                  ? Arrays.stream(expectedThreadNames).map(Pattern::compile).collect(Collectors.toList())
1:9797511:                                  : Collections.emptyList();
1:9797511: 
1:9797511:         List<Pattern> optional = optionalThreadNames != null
1:9797511:                                  ? Arrays.stream(optionalThreadNames).map(Pattern::compile).collect(Collectors.toList())
1:9797511:                                  : Collections.emptyList();
1:9797511: 
1:9797511:         current.removeAll(initial);
1:9797511: 
1:9797511:         List<Pattern> notPresent = expected.stream()
1:9797511:                                            .filter(threadNamePattern -> !current.stream().anyMatch(threadName -> threadNamePattern.matcher(threadName).matches()))
1:9797511:                                            .collect(Collectors.toList());
1:9797511: 
1:9797511:         Set<String> remain = current.stream()
1:9797511:                                     .filter(threadName -> expected.stream().anyMatch(pattern -> pattern.matcher(threadName).matches()))
1:9797511:                                     .filter(threadName -> optional.stream().anyMatch(pattern -> pattern.matcher(threadName).matches()))
1:9797511:                                     .collect(Collectors.toSet());
1:9797511: 
1:9797511:         if (!current.isEmpty())
1:9797511:             System.err.println("Unexpected thread names: " + remain);
1:9797511:         if (!notPresent.isEmpty())
1:9797511:             System.err.println("Mandatory thread missing: " + notPresent);
1:9797511: 
1:9797511:         assertTrue("Wrong thread status", remain.isEmpty() && notPresent.isEmpty());
1:9797511:     }
1:9797511: 
1:9797511:     public void assertSchemaNotLoaded()
1:9797511:     {
1:9797511:         assertClassNotLoaded("org.apache.cassandra.config.Schema");
1:9797511:     }
1:9797511: 
1:9797511:     public void assertSchemaLoaded()
1:9797511:     {
1:9797511:         assertClassLoaded("org.apache.cassandra.config.Schema");
1:9797511:     }
1:9797511: 
1:9797511:     public void assertKeyspaceNotLoaded()
1:9797511:     {
1:9797511:         assertClassNotLoaded("org.apache.cassandra.db.Keyspace");
1:9797511:     }
1:9797511: 
1:9797511:     public void assertKeyspaceLoaded()
1:9797511:     {
1:9797511:         assertClassLoaded("org.apache.cassandra.db.Keyspace");
1:9797511:     }
1:9797511: 
1:9797511:     public void assertServerNotLoaded()
1:9797511:     {
1:9797511:         assertClassNotLoaded("org.apache.cassandra.transport.Server");
1:9797511:     }
1:9797511: 
1:9797511:     public void assertSystemKSNotLoaded()
1:9797511:     {
1:9797511:         assertClassNotLoaded("org.apache.cassandra.db.SystemKeyspace");
1:9797511:     }
1:9797511: 
1:9797511:     public void assertCLSMNotLoaded()
1:9797511:     {
1:9797511:         assertClassNotLoaded("org.apache.cassandra.db.commitlog.CommitLogSegmentManager");
1:9797511:     }
1:9797511: 
1:9797511:     public void assertClassLoaded(String clazz)
1:9797511:     {
1:9797511:         assertClassLoadedStatus(clazz, true);
1:9797511:     }
1:9797511: 
1:9797511:     public void assertClassNotLoaded(String clazz)
1:9797511:     {
1:9797511:         assertClassLoadedStatus(clazz, false);
1:9797511:     }
1:9797511: 
1:9797511:     private void assertClassLoadedStatus(String clazz, boolean expected)
1:9797511:     {
1:9797511:         for (ClassLoader cl = Thread.currentThread().getContextClassLoader(); cl != null; cl = cl.getParent())
1:9797511:         {
1:9797511:             try
1:9797511:             {
1:9797511:                 Method mFindLoadedClass = ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class);
1:9797511:                 mFindLoadedClass.setAccessible(true);
1:9797511:                 boolean loaded = mFindLoadedClass.invoke(cl, clazz) != null;
1:9797511: 
1:9797511:                 if (expected)
1:9797511:                 {
1:9797511:                     if (loaded)
1:9797511:                         return;
1:9797511:                 }
1:9797511:                 else
1:9797511:                     assertFalse(clazz + " has been loaded", loaded);
1:9797511:             }
1:9797511:             catch (Exception e)
1:9797511:             {
1:9797511:                 throw new RuntimeException(e);
1:9797511:             }
1:9797511:         }
1:9797511: 
1:9797511:         if (expected)
1:9797511:             fail(clazz + " has not been loaded");
1:9797511:     }
1:9797511: 
1:9797511:     public void runTool(int expectedExitCode, String clazz, String... args)
1:9797511:     {
1:9797511:         try
1:9797511:         {
1:9797511:             // install security manager to get informed about the exit-code
1:9797511:             System.setSecurityManager(new SecurityManager()
1:9797511:             {
1:9797511:                 public void checkExit(int status)
1:9797511:                 {
1:9797511:                     throw new SystemExitException(status);
1:9797511:                 }
1:9797511: 
1:9797511:                 public void checkPermission(Permission perm)
1:9797511:                 {
1:9797511:                 }
1:9797511: 
1:9797511:                 public void checkPermission(Permission perm, Object context)
1:9797511:                 {
1:9797511:                 }
1:9797511:             });
1:9797511: 
1:9797511:             try
1:9797511:             {
1:9797511:                 Class.forName(clazz).getDeclaredMethod("main", String[].class).invoke(null, (Object) args);
1:9797511:             }
1:9797511:             catch (InvocationTargetException e)
1:9797511:             {
1:9797511:                 Throwable cause = e.getCause();
1:9797511:                 if (cause instanceof Error)
1:9797511:                     throw (Error) cause;
1:9797511:                 if (cause instanceof RuntimeException)
1:9797511:                     throw (RuntimeException) cause;
1:9797511:                 throw e;
1:9797511:             }
1:9797511: 
1:9797511:             assertEquals("Unexpected exit code", expectedExitCode, 0);
1:9797511:         }
1:9797511:         catch (SystemExitException e)
1:9797511:         {
1:9797511:             assertEquals("Unexpected exit code", expectedExitCode, e.status);
1:9797511:         }
1:9797511:         catch (InvocationTargetException e)
1:9797511:         {
1:9797511:             throw new RuntimeException(e.getTargetException());
1:9797511:         }
1:9797511:         catch (Exception e)
1:9797511:         {
1:9797511:             throw new RuntimeException(e);
1:9797511:         }
1:9797511:         finally
1:9797511:         {
1:9797511:             // uninstall security manager
1:9797511:             System.setSecurityManager(null);
1:9797511:         }
1:9797511:     }
1:9797511: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupTester()
1:9797511:     {
1:9797511:         System.setProperty("cassandra.partitioner", "org.apache.cassandra.dht.Murmur3Partitioner");
1:9797511: 
1:9797511:         // may start an async appender
1:9797511:         LoggerFactory.getLogger(ToolsTester.class);
1:9797511: 
1:9797511:         ThreadMXBean threads = ManagementFactory.getThreadMXBean();
1:9797511:         initialThreads = Arrays.asList(threads.getThreadInfo(threads.getAllThreadIds()));
1:9797511:     }
1:9797511: 
1:9797511:     public static class SystemExitException extends Error
1:9797511:     {
1:9797511:         public final int status;
1:9797511: 
1:9797511:         public SystemExitException(int status)
1:9797511:         {
1:9797511:             this.status = status;
1:9797511:         }
1:9797511:     }
1:9797511: 
1:9797511:     public static String findOneSSTable(String ks, String cf) throws IOException
1:9797511:     {
1:9797511:         File cfDir = sstableDir(ks, cf);
1:9797511:         File[] sstableFiles = cfDir.listFiles((file) -> file.isFile() && file.getName().endsWith("-Data.db"));
1:9797511:         return sstableFiles[0].getAbsolutePath();
1:9797511:     }
1:9797511: 
1:9797511:     public static String sstableDirName(String ks, String cf) throws IOException
1:9797511:     {
1:9797511:         return sstableDir(ks, cf).getAbsolutePath();
1:9797511:     }
1:9797511: 
1:9797511:     public static File sstableDir(String ks, String cf) throws IOException
1:9797511:     {
1:9797511:         File dataDir = copySSTables();
1:9797511:         File ksDir = new File(dataDir, ks);
1:9797511:         File[] cfDirs = ksDir.listFiles((dir, name) -> cf.equals(name) || name.startsWith(cf + '-'));
1:9797511:         return cfDirs[0];
1:9797511:     }
1:9797511: 
1:9797511:     public static File copySSTables() throws IOException
1:9797511:     {
1:9797511:         File dataDir = new File("build/test/cassandra/data");
1:9797511:         File srcDir = new File("test/data/legacy-sstables/ma");
1:9797511:         FileUtils.copyDirectory(new File(srcDir, "legacy_tables"), new File(dataDir, "legacy_sstables"));
1:9797511:         return dataDir;
1:9797511:     }
1:9797511: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.lang.management.ManagementFactory;
1: import java.lang.management.ThreadInfo;
1: import java.lang.management.ThreadMXBean;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.security.Permission;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.regex.Pattern;
1: import java.util.stream.Collectors;
1: 
1: import org.apache.commons.io.FileUtils;
1: import org.junit.BeforeClass;
1: 
1: import org.slf4j.LoggerFactory;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: /**
1:  * Base unit test class for standalone tools
1:  */
1: public abstract class ToolsTester
1: {
1:     private static List<ThreadInfo> initialThreads;
1: 
1:     static final String[] EXPECTED_THREADS_WITH_SCHEMA = {
1:     "NativePoolCleaner",
1:     "COMMIT-LOG-ALLOCATOR",
1:     "COMMIT-LOG-WRITER",
1:     "PerDiskMemtableFlushWriter_0:[1-9]",
1:     "MemtablePostFlush:[1-9]",
1:     "MemtableFlushWriter:[1-9]",
1:     "MemtableReclaimMemory:[1-9]",
1:     };
1:     static final String[] OPTIONAL_THREADS_WITH_SCHEMA = {
1:     "ScheduledTasks:[1-9]",
1:     "OptionalTasks:[1-9]",
1:     "Reference-Reaper:[1-9]",
1:     "LocalPool-Cleaner:[1-9]",
1:     "CacheCleanupExecutor:[1-9]",
1:     "CompactionExecutor:[1-9]",
1:     "ValidationExecutor:[1-9]",
1:     "NonPeriodicTasks:[1-9]",
1:     "Sampler:[1-9]",
1:     "SecondaryIndexManagement:[1-9]",
1:     "Strong-Reference-Leak-Detector:[1-9]",
1:     "Background_Reporter:[1-9]",
1:     "EXPIRING-MAP-REAPER:[1-9]",
1:     };
1: 
1:     public void assertNoUnexpectedThreadsStarted(String[] expectedThreadNames, String[] optionalThreadNames)
1:     {
1:         ThreadMXBean threads = ManagementFactory.getThreadMXBean();
1: 
1:         Set<String> initial = initialThreads
1:                               .stream()
1:                               .map(ThreadInfo::getThreadName)
1:                               .collect(Collectors.toSet());
1: 
1:         Set<String> current = Arrays.stream(threads.getThreadInfo(threads.getAllThreadIds()))
1:                                     .map(ThreadInfo::getThreadName)
1:                                     .collect(Collectors.toSet());
1: 
1:         List<Pattern> expected = expectedThreadNames != null
1:                                  ? Arrays.stream(expectedThreadNames).map(Pattern::compile).collect(Collectors.toList())
1:                                  : Collections.emptyList();
1: 
1:         List<Pattern> optional = optionalThreadNames != null
1:                                  ? Arrays.stream(optionalThreadNames).map(Pattern::compile).collect(Collectors.toList())
1:                                  : Collections.emptyList();
1: 
1:         current.removeAll(initial);
1: 
1:         List<Pattern> notPresent = expected.stream()
1:                                            .filter(threadNamePattern -> !current.stream().anyMatch(threadName -> threadNamePattern.matcher(threadName).matches()))
1:                                            .collect(Collectors.toList());
1: 
1:         Set<String> remain = current.stream()
1:                                     .filter(threadName -> expected.stream().anyMatch(pattern -> pattern.matcher(threadName).matches()))
1:                                     .filter(threadName -> optional.stream().anyMatch(pattern -> pattern.matcher(threadName).matches()))
1:                                     .collect(Collectors.toSet());
1: 
1:         if (!current.isEmpty())
1:             System.err.println("Unexpected thread names: " + remain);
1:         if (!notPresent.isEmpty())
1:             System.err.println("Mandatory thread missing: " + notPresent);
1: 
1:         assertTrue("Wrong thread status", remain.isEmpty() && notPresent.isEmpty());
1:     }
1: 
1:     public void assertSchemaNotLoaded()
1:     {
1:         assertClassNotLoaded("org.apache.cassandra.config.Schema");
1:     }
1: 
1:     public void assertSchemaLoaded()
1:     {
1:         assertClassLoaded("org.apache.cassandra.config.Schema");
1:     }
1: 
1:     public void assertKeyspaceNotLoaded()
1:     {
1:         assertClassNotLoaded("org.apache.cassandra.db.Keyspace");
1:     }
1: 
1:     public void assertKeyspaceLoaded()
1:     {
1:         assertClassLoaded("org.apache.cassandra.db.Keyspace");
1:     }
1: 
1:     public void assertServerNotLoaded()
1:     {
1:         assertClassNotLoaded("org.apache.cassandra.transport.Server");
1:     }
1: 
1:     public void assertSystemKSNotLoaded()
1:     {
1:         assertClassNotLoaded("org.apache.cassandra.db.SystemKeyspace");
1:     }
1: 
1:     public void assertCLSMNotLoaded()
1:     {
1:         assertClassNotLoaded("org.apache.cassandra.db.commitlog.CommitLogSegmentManager");
1:     }
1: 
1:     public void assertClassLoaded(String clazz)
1:     {
1:         assertClassLoadedStatus(clazz, true);
1:     }
1: 
1:     public void assertClassNotLoaded(String clazz)
1:     {
1:         assertClassLoadedStatus(clazz, false);
1:     }
1: 
1:     private void assertClassLoadedStatus(String clazz, boolean expected)
1:     {
1:         for (ClassLoader cl = Thread.currentThread().getContextClassLoader(); cl != null; cl = cl.getParent())
1:         {
1:             try
1:             {
1:                 Method mFindLoadedClass = ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class);
1:                 mFindLoadedClass.setAccessible(true);
1:                 boolean loaded = mFindLoadedClass.invoke(cl, clazz) != null;
1: 
1:                 if (expected)
1:                 {
1:                     if (loaded)
1:                         return;
1:                 }
1:                 else
1:                     assertFalse(clazz + " has been loaded", loaded);
1:             }
1:             catch (Exception e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         if (expected)
1:             fail(clazz + " has not been loaded");
1:     }
1: 
1:     public void runTool(int expectedExitCode, String clazz, String... args)
1:     {
1:         try
1:         {
1:             // install security manager to get informed about the exit-code
1:             System.setSecurityManager(new SecurityManager()
1:             {
1:                 public void checkExit(int status)
1:                 {
1:                     throw new SystemExitException(status);
1:                 }
1: 
1:                 public void checkPermission(Permission perm)
1:                 {
1:                 }
1: 
1:                 public void checkPermission(Permission perm, Object context)
1:                 {
1:                 }
1:             });
1: 
1:             try
1:             {
1:                 Class.forName(clazz).getDeclaredMethod("main", String[].class).invoke(null, (Object) args);
1:             }
1:             catch (InvocationTargetException e)
1:             {
1:                 Throwable cause = e.getCause();
1:                 if (cause instanceof Error)
1:                     throw (Error) cause;
1:                 if (cause instanceof RuntimeException)
1:                     throw (RuntimeException) cause;
1:                 throw e;
1:             }
1: 
1:             assertEquals("Unexpected exit code", expectedExitCode, 0);
1:         }
1:         catch (SystemExitException e)
1:         {
1:             assertEquals("Unexpected exit code", expectedExitCode, e.status);
1:         }
1:         catch (InvocationTargetException e)
1:         {
1:             throw new RuntimeException(e.getTargetException());
1:         }
1:         catch (Exception e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         finally
1:         {
1:             // uninstall security manager
1:             System.setSecurityManager(null);
1:         }
1:     }
1: 
1:     @BeforeClass
1:     public static void setupTester()
1:     {
1:         System.setProperty("cassandra.partitioner", "org.apache.cassandra.dht.Murmur3Partitioner");
1: 
1:         // may start an async appender
1:         LoggerFactory.getLogger(ToolsTester.class);
1: 
1:         ThreadMXBean threads = ManagementFactory.getThreadMXBean();
1:         initialThreads = Arrays.asList(threads.getThreadInfo(threads.getAllThreadIds()));
1:     }
1: 
1:     public static class SystemExitException extends Error
1:     {
1:         public final int status;
1: 
1:         public SystemExitException(int status)
1:         {
1:             this.status = status;
1:         }
1:     }
1: 
1:     public static String findOneSSTable(String ks, String cf) throws IOException
1:     {
1:         File cfDir = sstableDir(ks, cf);
1:         File[] sstableFiles = cfDir.listFiles((file) -> file.isFile() && file.getName().endsWith("-Data.db"));
1:         return sstableFiles[0].getAbsolutePath();
1:     }
1: 
1:     public static String sstableDirName(String ks, String cf) throws IOException
1:     {
1:         return sstableDir(ks, cf).getAbsolutePath();
1:     }
1: 
1:     public static File sstableDir(String ks, String cf) throws IOException
1:     {
1:         File dataDir = copySSTables();
1:         File ksDir = new File(dataDir, ks);
1:         File[] cfDirs = ksDir.listFiles((dir, name) -> cf.equals(name) || name.startsWith(cf + '-'));
1:         return cfDirs[0];
1:     }
1: 
1:     public static File copySSTables() throws IOException
1:     {
1:         File dataDir = new File("build/test/cassandra/data");
1:         File srcDir = new File("test/data/legacy-sstables/ma");
1:         FileUtils.copyDirectory(new File(srcDir, "legacy_tables"), new File(dataDir, "legacy_sstables"));
1:         return dataDir;
1:     }
1: }
============================================================================