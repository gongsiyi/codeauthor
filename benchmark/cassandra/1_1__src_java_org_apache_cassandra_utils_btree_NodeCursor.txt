1:5250d7f: /*
1:5250d7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:5250d7f:  * or more contributor license agreements.  See the NOTICE file
1:5250d7f:  * distributed with this work for additional information
1:5250d7f:  * regarding copyright ownership.  The ASF licenses this file
1:5250d7f:  * to you under the Apache License, Version 2.0 (the
1:5250d7f:  * "License"); you may not use this file except in compliance
1:5250d7f:  * with the License.  You may obtain a copy of the License at
1:5250d7f:  *
1:5250d7f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5250d7f:  *
1:5250d7f:  * Unless required by applicable law or agreed to in writing,
1:5250d7f:  * software distributed under the License is distributed on an
1:5250d7f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5250d7f:  * KIND, either express or implied.  See the License for the
1:5250d7f:  * specific language governing permissions and limitations
1:5250d7f:  * under the License.
1:5250d7f:  */
1:5250d7f: package org.apache.cassandra.utils.btree;
1:5250d7f: 
1:5250d7f: import java.util.Arrays;
1:5250d7f: import java.util.Comparator;
1:5250d7f: 
1:5250d7f: import static org.apache.cassandra.utils.btree.BTree.*;
1:5250d7f: 
1:5250d7f: /**
1:5250d7f:  * A class for searching within one node of a btree: a linear chain (stack) of these is built of tree height
1:5250d7f:  * to form a Cursor. Some corollaries of the basic building block operations in TreeCursor (moveOne and seekTo),
1:5250d7f:  * along with some other methods for helping implement movement between two NodeCursor
1:5250d7f:  *
1:5250d7f:  * The behaviour is not dissimilar to that of NodeBuilder and TreeBuilder, wherein functions that may move
1:5250d7f:  * us to a different node pass us the node we should move to, from which we continue our operations.
1:5250d7f:  * @param <K>
1:5250d7f:  */
1:5250d7f: class NodeCursor<K>
1:5250d7f: {
1:5250d7f:     // TODO: consider splitting forwards from backwards
1:5250d7f:     final NodeCursor<K> parent, child;
1:5250d7f:     final Comparator<? super K> comparator;
1:5250d7f: 
1:5250d7f:     boolean inChild;
1:5250d7f:     // if !inChild, this is the key position we are currently on;
1:5250d7f:     // if inChild, this is the child position we are currently descending into
1:5250d7f:     int position;
1:5250d7f:     Object[] node;
1:5250d7f:     int nodeOffset;
1:5250d7f: 
1:5250d7f:     NodeCursor(Object[] node, NodeCursor<K> parent, Comparator<? super K> comparator)
1:5250d7f:     {
1:5250d7f:         this.node = node;
1:5250d7f:         this.parent = parent;
1:5250d7f:         this.comparator = comparator;
1:5250d7f:         // a well formed b-tree (text book, or ours) must be balanced, so by building a stack following the left-most branch
1:5250d7f:         // we have a stack capable of visiting any path in the tree
1:5250d7f:         this.child = BTree.isLeaf(node) ? null : new NodeCursor<>((Object[]) node[getChildStart(node)], this, comparator);
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     void resetNode(Object[] node, int nodeOffset)
1:5250d7f:     {
1:5250d7f:         this.node = node;
1:5250d7f:         this.nodeOffset = nodeOffset;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     /**
1:5250d7f:      * adapt child position to key position within branch, knowing it is safe to do so
1:5250d7f:      */
1:5250d7f:     void safeAdvanceIntoBranchFromChild(boolean forwards)
1:5250d7f:     {
1:5250d7f:         if (!forwards)
1:5250d7f:             --position;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     /**
1:5250d7f:      * adapt child position to key position within branch, and return if this was successful or we're now out of bounds
1:5250d7f:      */
1:5250d7f:     boolean advanceIntoBranchFromChild(boolean forwards)
1:5250d7f:     {
1:5250d7f:         return forwards ? position < getBranchKeyEnd(node) : --position >= 0;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     boolean advanceLeafNode(boolean forwards)
1:5250d7f:     {
1:5250d7f:         return forwards ? ++position < getLeafKeyEnd(node)
1:5250d7f:                         : --position >= 0;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     /**
1:5250d7f:      * @return the upper/lower bound of the child we are currently descended in
1:5250d7f:      */
1:5250d7f:     K bound(boolean upper)
1:5250d7f:     {
1:5250d7f:         return (K) node[position - (upper ? 0 : 1)];
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     /**
1:5250d7f:      * The parent that covers a range wider than ourselves, either ascending or descending,
1:5250d7f:      * i.e. that defines the upper or lower bound on the subtree rooted at our node
1:5250d7f:      * @param upper
1:5250d7f:      * @return the NodeCursor parent that can tell us the upper/lower bound of ourselves
1:5250d7f:      */
1:5250d7f:     NodeCursor<K> boundIterator(boolean upper)
1:5250d7f:     {
1:5250d7f:         NodeCursor<K> bound = this.parent;
1:5250d7f:         while (bound != null && (upper ? bound.position >= getChildCount(bound.node) - 1
1:5250d7f:                                        : bound.position <= 0))
1:5250d7f:             bound = bound.parent;
1:5250d7f:         return bound;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     /**
1:5250d7f:      * look for the provided key in this node, in the specified direction:
1:5250d7f:      * forwards => ceil search; otherwise floor
1:5250d7f:      *
1:5250d7f:      * we require that the node's "current" key (including the relevant bound if we are a parent we have ascended into)
1:5250d7f:      * be already excluded by the search. this is useful for the following reasons:
1:5250d7f:      *   1: we must ensure we never go backwards, so excluding that key from our binary search prevents our
1:5250d7f:      *      descending into a child we have already visited (without any further checks)
1:5250d7f:      *   2: we already check the bounds as we search upwards for our natural parent;
1:5250d7f:      *   3: we want to cheaply check sequential access, so we always check the first key we're on anyway (if it can be done easily)
1:5250d7f:      */
1:5250d7f:     boolean seekInNode(K key, boolean forwards)
1:5250d7f:     {
1:5250d7f:         int position = this.position;
1:5250d7f:         int lb, ub;
1:5250d7f:         if (forwards)
1:5250d7f:         {
1:5250d7f:             lb = position + 1;
1:5250d7f:             ub = getKeyEnd(node);
1:5250d7f:         }
1:5250d7f:         else
1:5250d7f:         {
1:5250d7f:             ub = position;
1:5250d7f:             lb = 0;
1:5250d7f:         }
1:5250d7f: 
1:5250d7f:         int find = Arrays.binarySearch((K[]) node, lb, ub, key, comparator);
1:5250d7f:         if (find >= 0)
1:5250d7f:         {
1:5250d7f:             // exact key match, so we're in the correct node already. return success
1:5250d7f:             this.position = find;
1:5250d7f:             inChild = false;
1:5250d7f:             return true;
1:5250d7f:         }
1:5250d7f: 
1:5250d7f:         // if we are a branch, and we are an inequality match, the direction of travel doesn't matter
1:5250d7f:         // so we only need to modify if we are going backwards on a leaf node, to produce floor semantics
1:5250d7f:         int delta = isLeaf() & !forwards ? -1 : 0;
1:5250d7f:         this.position = delta -1 -find;
1:5250d7f:         return false;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     NodeCursor<K> descendToFirstChild(boolean forwards)
1:5250d7f:     {
1:5250d7f:         if (isLeaf())
1:5250d7f:         {
1:5250d7f:             position = forwards ? 0 : getLeafKeyEnd(node) - 1;
1:5250d7f:             return null;
1:5250d7f:         }
1:5250d7f:         inChild = true;
1:5250d7f:         position = forwards ? 0 : getChildCount(node) - 1;
1:5250d7f:         return descend();
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     // descend into the child at "position"
1:5250d7f:     NodeCursor<K> descend()
1:5250d7f:     {
1:5250d7f:         Object[] childNode = (Object[]) node[position + getChildStart(node)];
1:5250d7f:         int childOffset = nodeOffset + treeIndexOffsetOfChild(node, position);
1:5250d7f:         child.resetNode(childNode, childOffset);
1:5250d7f:         inChild = true;
1:5250d7f:         return child;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     boolean isLeaf()
1:5250d7f:     {
1:5250d7f:         return child == null;
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     int globalIndex()
1:5250d7f:     {
1:5250d7f:         return nodeOffset + treeIndexOfKey(node, position);
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     int globalLeafIndex()
1:5250d7f:     {
1:5250d7f:         return nodeOffset + treeIndexOfLeafKey(position);
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     int globalBranchIndex()
1:5250d7f:     {
1:5250d7f:         return nodeOffset + treeIndexOfBranchKey(node, position);
1:5250d7f:     }
1:5250d7f: 
1:5250d7f:     K value()
1:5250d7f:     {
1:5250d7f:         return (K) node[position];
1:5250d7f:     }
1:5250d7f: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:5250d7f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.utils.btree;
1: 
1: import java.util.Arrays;
1: import java.util.Comparator;
1: 
1: import static org.apache.cassandra.utils.btree.BTree.*;
1: 
1: /**
1:  * A class for searching within one node of a btree: a linear chain (stack) of these is built of tree height
1:  * to form a Cursor. Some corollaries of the basic building block operations in TreeCursor (moveOne and seekTo),
1:  * along with some other methods for helping implement movement between two NodeCursor
1:  *
1:  * The behaviour is not dissimilar to that of NodeBuilder and TreeBuilder, wherein functions that may move
1:  * us to a different node pass us the node we should move to, from which we continue our operations.
1:  * @param <K>
1:  */
1: class NodeCursor<K>
1: {
1:     // TODO: consider splitting forwards from backwards
1:     final NodeCursor<K> parent, child;
1:     final Comparator<? super K> comparator;
1: 
1:     boolean inChild;
1:     // if !inChild, this is the key position we are currently on;
1:     // if inChild, this is the child position we are currently descending into
1:     int position;
1:     Object[] node;
1:     int nodeOffset;
1: 
1:     NodeCursor(Object[] node, NodeCursor<K> parent, Comparator<? super K> comparator)
1:     {
1:         this.node = node;
1:         this.parent = parent;
1:         this.comparator = comparator;
1:         // a well formed b-tree (text book, or ours) must be balanced, so by building a stack following the left-most branch
1:         // we have a stack capable of visiting any path in the tree
1:         this.child = BTree.isLeaf(node) ? null : new NodeCursor<>((Object[]) node[getChildStart(node)], this, comparator);
1:     }
1: 
1:     void resetNode(Object[] node, int nodeOffset)
1:     {
1:         this.node = node;
1:         this.nodeOffset = nodeOffset;
1:     }
1: 
1:     /**
1:      * adapt child position to key position within branch, knowing it is safe to do so
1:      */
1:     void safeAdvanceIntoBranchFromChild(boolean forwards)
1:     {
1:         if (!forwards)
1:             --position;
1:     }
1: 
1:     /**
1:      * adapt child position to key position within branch, and return if this was successful or we're now out of bounds
1:      */
1:     boolean advanceIntoBranchFromChild(boolean forwards)
1:     {
1:         return forwards ? position < getBranchKeyEnd(node) : --position >= 0;
1:     }
1: 
1:     boolean advanceLeafNode(boolean forwards)
1:     {
1:         return forwards ? ++position < getLeafKeyEnd(node)
1:                         : --position >= 0;
1:     }
1: 
1:     /**
1:      * @return the upper/lower bound of the child we are currently descended in
1:      */
1:     K bound(boolean upper)
1:     {
1:         return (K) node[position - (upper ? 0 : 1)];
1:     }
1: 
1:     /**
1:      * The parent that covers a range wider than ourselves, either ascending or descending,
1:      * i.e. that defines the upper or lower bound on the subtree rooted at our node
1:      * @param upper
1:      * @return the NodeCursor parent that can tell us the upper/lower bound of ourselves
1:      */
1:     NodeCursor<K> boundIterator(boolean upper)
1:     {
1:         NodeCursor<K> bound = this.parent;
1:         while (bound != null && (upper ? bound.position >= getChildCount(bound.node) - 1
1:                                        : bound.position <= 0))
1:             bound = bound.parent;
1:         return bound;
1:     }
1: 
1:     /**
1:      * look for the provided key in this node, in the specified direction:
1:      * forwards => ceil search; otherwise floor
1:      *
1:      * we require that the node's "current" key (including the relevant bound if we are a parent we have ascended into)
1:      * be already excluded by the search. this is useful for the following reasons:
1:      *   1: we must ensure we never go backwards, so excluding that key from our binary search prevents our
1:      *      descending into a child we have already visited (without any further checks)
1:      *   2: we already check the bounds as we search upwards for our natural parent;
1:      *   3: we want to cheaply check sequential access, so we always check the first key we're on anyway (if it can be done easily)
1:      */
1:     boolean seekInNode(K key, boolean forwards)
1:     {
1:         int position = this.position;
1:         int lb, ub;
1:         if (forwards)
1:         {
1:             lb = position + 1;
1:             ub = getKeyEnd(node);
1:         }
1:         else
1:         {
1:             ub = position;
1:             lb = 0;
1:         }
1: 
1:         int find = Arrays.binarySearch((K[]) node, lb, ub, key, comparator);
1:         if (find >= 0)
1:         {
1:             // exact key match, so we're in the correct node already. return success
1:             this.position = find;
1:             inChild = false;
1:             return true;
1:         }
1: 
1:         // if we are a branch, and we are an inequality match, the direction of travel doesn't matter
1:         // so we only need to modify if we are going backwards on a leaf node, to produce floor semantics
1:         int delta = isLeaf() & !forwards ? -1 : 0;
1:         this.position = delta -1 -find;
1:         return false;
1:     }
1: 
1:     NodeCursor<K> descendToFirstChild(boolean forwards)
1:     {
1:         if (isLeaf())
1:         {
1:             position = forwards ? 0 : getLeafKeyEnd(node) - 1;
1:             return null;
1:         }
1:         inChild = true;
1:         position = forwards ? 0 : getChildCount(node) - 1;
1:         return descend();
1:     }
1: 
1:     // descend into the child at "position"
1:     NodeCursor<K> descend()
1:     {
1:         Object[] childNode = (Object[]) node[position + getChildStart(node)];
1:         int childOffset = nodeOffset + treeIndexOffsetOfChild(node, position);
1:         child.resetNode(childNode, childOffset);
1:         inChild = true;
1:         return child;
1:     }
1: 
1:     boolean isLeaf()
1:     {
1:         return child == null;
1:     }
1: 
1:     int globalIndex()
1:     {
1:         return nodeOffset + treeIndexOfKey(node, position);
1:     }
1: 
1:     int globalLeafIndex()
1:     {
1:         return nodeOffset + treeIndexOfLeafKey(position);
1:     }
1: 
1:     int globalBranchIndex()
1:     {
1:         return nodeOffset + treeIndexOfBranchKey(node, position);
1:     }
1: 
1:     K value()
1:     {
1:         return (K) node[position];
1:     }
1: }
============================================================================