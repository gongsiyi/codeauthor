1:5a3eb1a: /*
1:5a3eb1a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a3eb1a:  * or more contributor license agreements.  See the NOTICE file
1:5a3eb1a:  * distributed with this work for additional information
1:5a3eb1a:  * regarding copyright ownership.  The ASF licenses this file
1:5a3eb1a:  * to you under the Apache License, Version 2.0 (the
1:5a3eb1a:  * "License"); you may not use this file except in compliance
1:5a3eb1a:  * with the License.  You may obtain a copy of the License at
1:5a3eb1a:  *
1:5a3eb1a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a3eb1a:  *
1:5a3eb1a:  * Unless required by applicable law or agreed to in writing, software
1:5a3eb1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a3eb1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a3eb1a:  * See the License for the specific language governing permissions and
1:5a3eb1a:  * limitations under the License.
1:5a3eb1a:  */
1:5a3eb1a: package org.apache.cassandra.cql3.statements;
3:5a3eb1a: 
1:5a3eb1a: import java.util.*;
1:5a3eb1a: 
1:5a3eb1a: import org.apache.cassandra.auth.*;
1:bddfa9e: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:879b694: import org.apache.cassandra.cql3.*;
1:5a3eb1a: import org.apache.cassandra.db.marshal.UTF8Type;
1:5a3eb1a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:0b83682: import org.apache.cassandra.exceptions.RequestExecutionException;
1:0b83682: import org.apache.cassandra.exceptions.RequestValidationException;
1:5a3eb1a: import org.apache.cassandra.service.ClientState;
1:5a3eb1a: import org.apache.cassandra.transport.messages.ResultMessage;
1:5a3eb1a: 
1:5a3eb1a: public class ListPermissionsStatement extends AuthorizationStatement
2:5a3eb1a: {
1:9797511:     private static final String KS = SchemaConstants.AUTH_KEYSPACE_NAME;
1:5a3eb1a:     private static final String CF = "permissions"; // virtual cf to use for now.
1:5a3eb1a: 
1:5a3eb1a:     private static final List<ColumnSpecification> metadata;
1:5a3eb1a: 
1:5a3eb1a:     static
1:5a3eb1a:     {
1:5a3eb1a:         List<ColumnSpecification> columns = new ArrayList<ColumnSpecification>(4);
1:879b694:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("role", true), UTF8Type.instance));
1:5a3eb1a:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("username", true), UTF8Type.instance));
1:5a3eb1a:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("resource", true), UTF8Type.instance));
1:5a3eb1a:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("permission", true), UTF8Type.instance));
1:5a3eb1a:         metadata = Collections.unmodifiableList(columns);
3:5a3eb1a:     }
1:bddfa9e: 
1:879b694:     protected final Set<Permission> permissions;
1:217721a:     protected IResource resource;
1:879b694:     protected final boolean recursive;
1:217721a:     private final RoleResource grantee;
1:5a3eb1a: 
1:217721a:     public ListPermissionsStatement(Set<Permission> permissions, IResource resource, RoleName grantee, boolean recursive)
1:bddfa9e:     {
1:5a3eb1a:         this.permissions = permissions;
1:b5a232b:         this.resource = resource;
1:5a3eb1a:         this.recursive = recursive;
1:217721a:         this.grantee = grantee.hasName()? RoleResource.role(grantee.getName()) : null;
1:5a3eb1a:     }
1:bddfa9e: 
1:0b83682:     public void validate(ClientState state) throws RequestValidationException
1:bddfa9e:     {
1:bddfa9e:         // a check to ensure the existence of the user isn't being leaked by user existence check.
1:0b83682:         state.ensureNotAnonymous();
1:0b83682: 
1:5a3eb1a:         if (resource != null)
1:5a3eb1a:         {
1:5a3eb1a:             resource = maybeCorrectResource(resource, state);
1:5a3eb1a:             if (!resource.exists())
1:5a3eb1a:                 throw new InvalidRequestException(String.format("%s doesn't exist", resource));
1:bddfa9e:         }
1:879b694: 
1:879b694:         if ((grantee != null) && !DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
1:879b694:             throw new InvalidRequestException(String.format("%s doesn't exist", grantee));
1:879b694:    }
1:bddfa9e: 
1:0b83682:     public void checkAccess(ClientState state)
1:5a3eb1a:     {
1:0b83682:         // checked in validate
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     // TODO: Create a new ResultMessage type (?). Rows will do for now.
1:0b83682:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:5a3eb1a:     {
1:5a3eb1a:         List<PermissionDetails> details = new ArrayList<PermissionDetails>();
1:5a3eb1a: 
1:5a3eb1a:         if (resource != null && recursive)
1:5a3eb1a:         {
1:5a3eb1a:             for (IResource r : Resources.chain(resource))
1:bddfa9e:                 details.addAll(list(state, r));
1:5a3eb1a:         }
1:5a3eb1a:         else
1:5a3eb1a:         {
1:bddfa9e:             details.addAll(list(state, resource));
1:5a3eb1a:         }
1:5a3eb1a: 
1:5a3eb1a:         Collections.sort(details);
1:5a3eb1a:         return resultMessage(details);
1:5a3eb1a:     }
1:5a3eb1a: 
1:879b694:     private Set<PermissionDetails> list(ClientState state, IResource resource)
1:879b694:     throws RequestValidationException, RequestExecutionException
1:879b694:     {
1:9072757:         try
1:9072757:         {
1:9072757:             return DatabaseDescriptor.getAuthorizer().list(state.getUser(), permissions, resource, grantee);
1:9072757:         }
1:9072757:         catch (UnsupportedOperationException e)
1:9072757:         {
1:9072757:             throw new InvalidRequestException(e.getMessage());
1:9072757:         }
1:879b694:     }
1:879b694: 
1:5a3eb1a:     private ResultMessage resultMessage(List<PermissionDetails> details)
1:5a3eb1a:     {
1:5a3eb1a:         if (details.isEmpty())
1:5a3eb1a:             return new ResultMessage.Void();
1:5a3eb1a: 
1:5a3eb1a:         ResultSet result = new ResultSet(metadata);
1:5a3eb1a:         for (PermissionDetails pd : details)
1:5a3eb1a:         {
1:879b694:             result.addColumnValue(UTF8Type.instance.decompose(pd.grantee));
1:879b694:             result.addColumnValue(UTF8Type.instance.decompose(pd.grantee));
1:5a3eb1a:             result.addColumnValue(UTF8Type.instance.decompose(pd.resource.toString()));
1:5a3eb1a:             result.addColumnValue(UTF8Type.instance.decompose(pd.permission.toString()));
1:5a3eb1a:         }
1:5a3eb1a:         return new ResultMessage.Rows(result);
1:bddfa9e:     }
1:5a3eb1a: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:     private static final String KS = SchemaConstants.AUTH_KEYSPACE_NAME;
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:9072757
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
1:             return DatabaseDescriptor.getAuthorizer().list(state.getUser(), permissions, resource, grantee);
1:         }
1:         catch (UnsupportedOperationException e)
1:         {
1:             throw new InvalidRequestException(e.getMessage());
1:         }
commit:217721a
/////////////////////////////////////////////////////////////////////////
1:     protected IResource resource;
1:     private final RoleResource grantee;
1:     public ListPermissionsStatement(Set<Permission> permissions, IResource resource, RoleName grantee, boolean recursive)
1:         this.grantee = grantee.hasName()? RoleResource.role(grantee.getName()) : null;
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.*;
/////////////////////////////////////////////////////////////////////////
0:     private static final String KS = AuthKeyspace.NAME;
/////////////////////////////////////////////////////////////////////////
1:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("role", true), UTF8Type.instance));
1:     protected final Set<Permission> permissions;
0:     protected DataResource resource;
1:     protected final boolean recursive;
0:     private final String grantee;
0:     public ListPermissionsStatement(Set<Permission> permissions, DataResource resource, RoleName grantee, boolean recursive)
0:         this.grantee = grantee.getName();
/////////////////////////////////////////////////////////////////////////
1: 
1:         if ((grantee != null) && !DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
1:             throw new InvalidRequestException(String.format("%s doesn't exist", grantee));
1:    }
/////////////////////////////////////////////////////////////////////////
1:     private Set<PermissionDetails> list(ClientState state, IResource resource)
1:     throws RequestValidationException, RequestExecutionException
1:     {
0:         return DatabaseDescriptor.getAuthorizer().list(state.getUser(), permissions, resource, grantee);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             result.addColumnValue(UTF8Type.instance.decompose(pd.grantee));
1:             result.addColumnValue(UTF8Type.instance.decompose(pd.grantee));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b5a232b
/////////////////////////////////////////////////////////////////////////
0:     public ListPermissionsStatement(Set<Permission> permissions, DataResource resource, String username, boolean recursive)
1:         this.resource = resource;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0b83682
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state) throws RequestValidationException
1:         state.ensureNotAnonymous();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void checkAccess(ClientState state)
1:         // checked in validate
1:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
/////////////////////////////////////////////////////////////////////////
0:     private Set<PermissionDetails> list(ClientState state, IResource resource)
0:     throws RequestValidationException, RequestExecutionException
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0:     private static final String KS = Auth.AUTH_KS;
/////////////////////////////////////////////////////////////////////////
1:         // a check to ensure the existence of the user isn't being leaked by user existence check.
0:         if (username != null && !Auth.isExistingUser(username))
0:             throw new InvalidRequestException(String.format("User %s doesn't exist", username));
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws UnauthorizedException
1:     {
0:         state.ensureNotAnonymous();
1:     }
1: 
0:     public ResultMessage execute(ClientState state) throws UnauthorizedException, InvalidRequestException
1:                 details.addAll(list(state, r));
1:             details.addAll(list(state, resource));
/////////////////////////////////////////////////////////////////////////
1: 
0:     private Set<PermissionDetails> list(ClientState state, IResource resource) throws UnauthorizedException, InvalidRequestException
1:     {
0:         return DatabaseDescriptor.getAuthorizer().list(state.getUser(), permissions, resource, username);
1:     }
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.auth.*;
0: import org.apache.cassandra.cql3.ColumnIdentifier;
0: import org.apache.cassandra.cql3.ColumnSpecification;
0: import org.apache.cassandra.cql3.ResultSet;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: public class ListPermissionsStatement extends AuthorizationStatement
1: {
0:     private static final String KS = "auth"; // virtual keyspace to use for now.
1:     private static final String CF = "permissions"; // virtual cf to use for now.
1: 
1:     private static final List<ColumnSpecification> metadata;
1: 
1:     static
1:     {
1:         List<ColumnSpecification> columns = new ArrayList<ColumnSpecification>(4);
1:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("username", true), UTF8Type.instance));
1:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("resource", true), UTF8Type.instance));
1:         columns.add(new ColumnSpecification(KS, CF, new ColumnIdentifier("permission", true), UTF8Type.instance));
1:         metadata = Collections.unmodifiableList(columns);
1:     }
1: 
0:     private final Set<Permission> permissions;
0:     private DataResource resource;
0:     private final String username;
0:     private final boolean recursive;
1: 
0:     public ListPermissionsStatement(Set<Permission> permissions, IResource resource, String username, boolean recursive)
1:     {
1:         this.permissions = permissions;
0:         this.resource = (DataResource) resource;
0:         this.username = username;
1:         this.recursive = recursive;
1:     }
1: 
0:     // TODO: user existence check (when IAuthenticator rewrite is done)
0:     public void validate(ClientState state) throws InvalidRequestException
1:     {
1:         if (resource != null)
1:         {
1:             resource = maybeCorrectResource(resource, state);
1:             if (!resource.exists())
1:                 throw new InvalidRequestException(String.format("%s doesn't exist", resource));
1:         }
1:     }
1: 
1:     // TODO: Create a new ResultMessage type (?). Rows will do for now.
0:     public ResultMessage execute(ClientState state, List<ByteBuffer> variables) throws UnauthorizedException, InvalidRequestException
1:     {
1:         List<PermissionDetails> details = new ArrayList<PermissionDetails>();
1: 
1:         if (resource != null && recursive)
1:         {
1:             for (IResource r : Resources.chain(resource))
0:                 details.addAll(state.listPermissions(permissions, r, username));
1:         }
1:         else
1:         {
0:             details.addAll(state.listPermissions(permissions, resource, username));
1:         }
1: 
1:         Collections.sort(details);
1:         return resultMessage(details);
1:     }
1: 
1:     private ResultMessage resultMessage(List<PermissionDetails> details)
1:     {
1:         if (details.isEmpty())
1:             return new ResultMessage.Void();
1: 
1:         ResultSet result = new ResultSet(metadata);
1:         for (PermissionDetails pd : details)
1:         {
0:             result.addColumnValue(UTF8Type.instance.decompose(pd.username));
1:             result.addColumnValue(UTF8Type.instance.decompose(pd.resource.toString()));
1:             result.addColumnValue(UTF8Type.instance.decompose(pd.permission.toString()));
1:         }
1:         return new ResultMessage.Rows(result);
1:     }
1: }
============================================================================