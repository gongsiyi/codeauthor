1:a552b30: /*
1:a552b30:  * Licensed to the Apache Software Foundation (ASF) under one
1:a552b30:  * or more contributor license agreements.  See the NOTICE file
1:a552b30:  * distributed with this work for additional information
1:a552b30:  * regarding copyright ownership.  The ASF licenses this file
1:a552b30:  * to you under the Apache License, Version 2.0 (the
1:a552b30:  * "License"); you may not use this file except in compliance
1:a552b30:  * with the License.  You may obtain a copy of the License at
1:a552b30:  *
1:a552b30:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a552b30:  *
1:a552b30:  * Unless required by applicable law or agreed to in writing, software
1:a552b30:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a552b30:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a552b30:  * See the License for the specific language governing permissions and
1:a552b30:  * limitations under the License.
1:a552b30:  */
1:a552b30: package org.apache.cassandra.cql3.statements;
1:a552b30: 
1:a552b30: import java.util.*;
1:cc90d04: import java.util.stream.Collectors;
1:a552b30: 
1:a552b30: import org.apache.cassandra.auth.Permission;
1:a552b30: import org.apache.cassandra.config.*;
1:a552b30: import org.apache.cassandra.cql3.*;
1:a552b30: import org.apache.cassandra.db.marshal.AbstractType;
1:a552b30: import org.apache.cassandra.db.marshal.UserType;
1:a552b30: import org.apache.cassandra.exceptions.*;
1:a89597d: import org.apache.cassandra.schema.KeyspaceMetadata;
1:cc90d04: import org.apache.cassandra.schema.Types;
1:a552b30: import org.apache.cassandra.service.ClientState;
1:a552b30: import org.apache.cassandra.service.MigrationManager;
1:2fe6de6: import org.apache.cassandra.transport.Event;
1:a552b30: 
1:a552b30: public class CreateTypeStatement extends SchemaAlteringStatement
1:a552b30: {
1:d63d07b:     private final UTName name;
1:4ed0060:     private final List<FieldIdentifier> columnNames = new ArrayList<>();
1:d63d07b:     private final List<CQL3Type.Raw> columnTypes = new ArrayList<>();
1:a552b30:     private final boolean ifNotExists;
1:a552b30: 
1:d63d07b:     public CreateTypeStatement(UTName name, boolean ifNotExists)
1:a552b30:     {
1:a552b30:         super();
1:a552b30:         this.name = name;
1:a552b30:         this.ifNotExists = ifNotExists;
1:a552b30:     }
1:a552b30: 
1:d63d07b:     @Override
1:d63d07b:     public void prepareKeyspace(ClientState state) throws InvalidRequestException
1:d63d07b:     {
1:d63d07b:         if (!name.hasKeyspace())
1:d63d07b:             name.setKeyspace(state.getKeyspace());
1:d63d07b:     }
1:d63d07b: 
1:4ed0060:     public void addDefinition(FieldIdentifier name, CQL3Type.Raw type)
1:a552b30:     {
1:a552b30:         columnNames.add(name);
1:a552b30:         columnTypes.add(type);
1:a552b30:     }
1:d63d07b: 
1:a552b30:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:a552b30:     {
1:d63d07b:         state.hasKeyspaceAccess(keyspace(), Permission.CREATE);
1:a552b30:     }
1:a552b30: 
1:a552b30:     public void validate(ClientState state) throws RequestValidationException
1:a552b30:     {
1:a89597d:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(name.getKeyspace());
1:d63d07b:         if (ksm == null)
1:d63d07b:             throw new InvalidRequestException(String.format("Cannot add type in unknown keyspace %s", name.getKeyspace()));
1:a552b30: 
1:2f2b58d:         if (ksm.types.get(name.getUserTypeName()).isPresent() && !ifNotExists)
1:fb3995a:             throw new InvalidRequestException(String.format("A user type of name %s already exists", name));
1:a552b30: 
1:fb3995a:         for (CQL3Type.Raw type : columnTypes)
1:cc90d04:         {
1:fb3995a:             if (type.isCounter())
1:fb3995a:                 throw new InvalidRequestException("A user type cannot contain counters");
1:677230d:             if (type.isUDT() && !type.isFrozen())
1:677230d:                 throw new InvalidRequestException("A user type cannot contain non-frozen UDTs");
1:a552b30:         }
1:cc90d04:     }
1:a552b30: 
1:a552b30:     public static void checkForDuplicateNames(UserType type) throws InvalidRequestException
1:a552b30:     {
1:0932ed6:         for (int i = 0; i < type.size() - 1; i++)
1:a552b30:         {
1:4ed0060:             FieldIdentifier fieldName = type.fieldName(i);
1:0932ed6:             for (int j = i+1; j < type.size(); j++)
1:a552b30:             {
1:0932ed6:                 if (fieldName.equals(type.fieldName(j)))
1:4ed0060:                     throw new InvalidRequestException(String.format("Duplicate field name %s in type %s", fieldName, type.name));
1:a552b30:             }
1:a552b30:         }
1:a552b30:     }
1:a552b30: 
1:cc90d04:     public void addToRawBuilder(Types.RawBuilder builder) throws InvalidRequestException
1:a552b30:     {
1:cc90d04:         builder.add(name.getStringTypeName(),
1:4ed0060:                     columnNames.stream().map(FieldIdentifier::toString).collect(Collectors.toList()),
1:cc90d04:                     columnTypes.stream().map(CQL3Type.Raw::toString).collect(Collectors.toList()));
1:a552b30:     }
1:a552b30: 
1:a552b30:     @Override
1:a552b30:     public String keyspace()
1:a552b30:     {
1:d63d07b:         return name.getKeyspace();
1:a552b30:     }
1:a552b30: 
1:cc90d04:     public UserType createType() throws InvalidRequestException
1:a552b30:     {
1:a552b30:         List<AbstractType<?>> types = new ArrayList<>(columnTypes.size());
1:d63d07b:         for (CQL3Type.Raw type : columnTypes)
1:d63d07b:             types.add(type.prepare(keyspace()).getType());
1:a552b30: 
1:4ed0060:         return new UserType(name.getKeyspace(), name.getUserTypeName(), columnNames, types, true);
1:a552b30:     }
1:a552b30: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
1:a552b30:     {
1:a89597d:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(name.getKeyspace());
1:d63d07b:         assert ksm != null; // should haven't validate otherwise
1:d63d07b: 
1:a552b30:         // Can happen with ifNotExists
1:2f2b58d:         if (ksm.types.get(name.getUserTypeName()).isPresent())
1:2cbd776:             return null;
1:a552b30: 
1:a552b30:         UserType type = createType();
1:a552b30:         checkForDuplicateNames(type);
1:78e91c4:         MigrationManager.announceNewType(type, isLocalOnly);
1:2cbd776:         return new Event.SchemaChange(Event.SchemaChange.Change.CREATED, Event.SchemaChange.Target.TYPE, keyspace(), name.getStringTypeName());
1:a552b30:     }
1:a552b30: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1:     private final List<FieldIdentifier> columnNames = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     public void addDefinition(FieldIdentifier name, CQL3Type.Raw type)
/////////////////////////////////////////////////////////////////////////
1:             FieldIdentifier fieldName = type.fieldName(i);
1:                     throw new InvalidRequestException(String.format("Duplicate field name %s in type %s", fieldName, type.name));
/////////////////////////////////////////////////////////////////////////
1:                     columnNames.stream().map(FieldIdentifier::toString).collect(Collectors.toList()),
/////////////////////////////////////////////////////////////////////////
1:         return new UserType(name.getKeyspace(), name.getUserTypeName(), columnNames, types, true);
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
1:             return null;
1:         return new Event.SchemaChange(Event.SchemaChange.Change.CREATED, Event.SchemaChange.Target.TYPE, keyspace(), name.getStringTypeName());
commit:2fe6de6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.Event;
/////////////////////////////////////////////////////////////////////////
0:     public Event.SchemaChange changeEvent()
0:         return new Event.SchemaChange(Event.SchemaChange.Change.CREATED, Event.SchemaChange.Target.TYPE, keyspace(), name.getStringTypeName());
commit:78e91c4
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
/////////////////////////////////////////////////////////////////////////
1:         MigrationManager.announceNewType(type, isLocalOnly);
commit:0932ed6
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < type.size() - 1; i++)
0:             ByteBuffer fieldName = type.fieldName(i);
1:             for (int j = i+1; j < type.size(); j++)
1:                 if (fieldName.equals(type.fieldName(j)))
commit:db9ef0b
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < type.fieldTypes.size() - 1; i++)
0:             ByteBuffer fieldName = type.fieldNames.get(i);
0:             for (int j = i+1; j < type.fieldTypes.size(); j++)
0:                 if (fieldName.equals(type.fieldNames.get(j)))
commit:c045690
/////////////////////////////////////////////////////////////////////////
commit:d63d07b
/////////////////////////////////////////////////////////////////////////
1:     private final UTName name;
1:     private final List<CQL3Type.Raw> columnTypes = new ArrayList<>();
1:     public CreateTypeStatement(UTName name, boolean ifNotExists)
1:     @Override
1:     public void prepareKeyspace(ClientState state) throws InvalidRequestException
1:     {
1:         if (!name.hasKeyspace())
1:             name.setKeyspace(state.getKeyspace());
1: 
0:         if (name.getKeyspace() == null)
0:             throw new InvalidRequestException("You need to be logged in a keyspace or use a fully qualified user type name");
1:     }
1: 
0:     public void addDefinition(ColumnIdentifier name, CQL3Type.Raw type)
/////////////////////////////////////////////////////////////////////////
1:         state.hasKeyspaceAccess(keyspace(), Permission.CREATE);
0:         KSMetaData ksm = Schema.instance.getKSMetaData(name.getKeyspace());
1:         if (ksm == null)
1:             throw new InvalidRequestException(String.format("Cannot add type in unknown keyspace %s", name.getKeyspace()));
0:         if (ksm.userTypes.getType(name.getUserTypeName()) != null && !ifNotExists)
/////////////////////////////////////////////////////////////////////////
0:         return ResultMessage.SchemaChange.Change.UPDATED;
1:         return name.getKeyspace();
0:     private UserType createType() throws InvalidRequestException
1:         for (CQL3Type.Raw type : columnTypes)
1:             types.add(type.prepare(keyspace()).getType());
0:         return new UserType(name.getKeyspace(), name.getUserTypeName(), names, types);
0:         KSMetaData ksm = Schema.instance.getKSMetaData(name.getKeyspace());
1:         assert ksm != null; // should haven't validate otherwise
1: 
0:         if (ksm.userTypes.getType(name.getUserTypeName()) != null)
commit:a552b30
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.config.*;
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.db.marshal.UserType;
1: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.MigrationManager;
0: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: public class CreateTypeStatement extends SchemaAlteringStatement
1: {
0:     private final ColumnIdentifier name;
0:     private final List<ColumnIdentifier> columnNames = new ArrayList<>();
0:     private final List<CQL3Type> columnTypes = new ArrayList<>();
1:     private final boolean ifNotExists;
1: 
0:     public CreateTypeStatement(ColumnIdentifier name, boolean ifNotExists)
1:     {
1:         super();
1:         this.name = name;
1:         this.ifNotExists = ifNotExists;
1:     }
1: 
0:     public void addDefinition(ColumnIdentifier name, CQL3Type type)
1:     {
1:         columnNames.add(name);
1:         columnTypes.add(type);
1:     }
1: 
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:     {
0:         // We may want a slightly different permission?
0:         state.hasAllKeyspacesAccess(Permission.CREATE);
1:     }
1: 
1:     public void validate(ClientState state) throws RequestValidationException
1:     {
0:         if (Schema.instance.userTypes.getType(name) != null && !ifNotExists)
0:             throw new InvalidRequestException(String.format("A user type of name %s already exists.", name));
1:     }
1: 
1:     public static void checkForDuplicateNames(UserType type) throws InvalidRequestException
1:     {
0:         for (int i = 0; i < type.types.size() - 1; i++)
1:         {
0:             ByteBuffer fieldName = type.columnNames.get(i);
0:             for (int j = i+1; j < type.types.size(); j++)
1:             {
0:                 if (fieldName.equals(type.columnNames.get(j)))
0:                     throw new InvalidRequestException(String.format("Duplicate field name %s in type %s",
0:                                                                     UTF8Type.instance.getString(fieldName),
0:                                                                     UTF8Type.instance.getString(type.name)));
1:             }
1:         }
1:     }
1: 
0:     public ResultMessage.SchemaChange.Change changeType()
1:     {
0:         return ResultMessage.SchemaChange.Change.CREATED;
1:     }
1: 
1:     @Override
1:     public String keyspace()
1:     {
0:         // Kind of ugly, but SchemaAlteringStatement uses that for notifying change, and an empty keyspace
0:         // there kind of make sense
0:         return "";
1:     }
1: 
0:     private UserType createType()
1:     {
0:         List<ByteBuffer> names = new ArrayList<>(columnNames.size());
0:         for (ColumnIdentifier name : columnNames)
0:             names.add(name.bytes);
1: 
1:         List<AbstractType<?>> types = new ArrayList<>(columnTypes.size());
0:         for (CQL3Type type : columnTypes)
0:             types.add(type.getType());
1: 
0:         return new UserType(name.bytes, names, types);
1:     }
1: 
0:     public void announceMigration() throws InvalidRequestException, ConfigurationException
1:     {
1:         // Can happen with ifNotExists
0:         if (Schema.instance.userTypes.getType(name) != null)
0:             return;
1: 
1:         UserType type = createType();
1:         checkForDuplicateNames(type);
0:         MigrationManager.announceNewType(type);
1:     }
1: }
author:Alex Petrov
-------------------------------------------------------------------------------
commit:cc90d04
/////////////////////////////////////////////////////////////////////////
1: import java.util.stream.Collectors;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.Types;
/////////////////////////////////////////////////////////////////////////
1:     public void addToRawBuilder(Types.RawBuilder builder) throws InvalidRequestException
1:     {
1:         builder.add(name.getStringTypeName(),
0:                     columnNames.stream().map(ColumnIdentifier::toString).collect(Collectors.toList()),
1:                     columnTypes.stream().map(CQL3Type.Raw::toString).collect(Collectors.toList()));
1:     }
0: 
1:     public UserType createType() throws InvalidRequestException
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
0:         {
1:             if (type.isUDT() && !type.isFrozen())
1:                 throw new InvalidRequestException("A user type cannot contain non-frozen UDTs");
0:         }
/////////////////////////////////////////////////////////////////////////
0:         return new UserType(name.getKeyspace(), name.getUserTypeName(), names, types, true);
commit:664efd4
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:a89597d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceMetadata;
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(name.getKeyspace());
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(name.getKeyspace());
commit:2f2b58d
/////////////////////////////////////////////////////////////////////////
1:         if (ksm.types.get(name.getUserTypeName()).isPresent() && !ifNotExists)
/////////////////////////////////////////////////////////////////////////
1:         if (ksm.types.get(name.getUserTypeName()).isPresent())
commit:fb3995a
/////////////////////////////////////////////////////////////////////////
0: 
1:             throw new InvalidRequestException(String.format("A user type of name %s already exists", name));
0: 
1:         for (CQL3Type.Raw type : columnTypes)
1:             if (type.isCounter())
1:                 throw new InvalidRequestException("A user type cannot contain counters");
============================================================================