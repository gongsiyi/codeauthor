1:7374e9b: /*
1:7374e9b:  * Licensed to the Apache Software Foundation (ASF) under one
1:7374e9b:  * or more contributor license agreements.  See the NOTICE file
1:7374e9b:  * distributed with this work for additional information
1:7374e9b:  * regarding copyright ownership.  The ASF licenses this file
1:7374e9b:  * to you under the Apache License, Version 2.0 (the
1:7374e9b:  * "License"); you may not use this file except in compliance
1:7374e9b:  * with the License.  You may obtain a copy of the License at
1:ee40e3b:  *
1:7374e9b:  *     http://www.apache.org/licenses/LICENSE-2.0
2:7374e9b:  *
1:7374e9b:  * Unless required by applicable law or agreed to in writing, software
1:7374e9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7374e9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7374e9b:  * See the License for the specific language governing permissions and
1:7374e9b:  * limitations under the License.
1:ee40e3b:  */
1:7374e9b: package org.apache.cassandra.db.commitlog;
11:7374e9b: 
1:7374e9b: import java.io.IOException;
1:7374e9b: import java.nio.ByteBuffer;
1:ee40e3b: 
1:7374e9b: import org.apache.cassandra.io.FSWriteError;
1:7374e9b: 
1:ee40e3b: /**
1:7374e9b:  * Writes to the backing commit log file only on sync, allowing transformations of the mutations,
1:7374e9b:  * such as compression or encryption, before writing out to disk.
1:ee40e3b:  */
1:7374e9b: public abstract class FileDirectSegment extends CommitLogSegment
7:7374e9b: {
1:7374e9b:     volatile long lastWrittenPos = 0;
1:ee40e3b: 
1:e8907c1:     FileDirectSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager)
1:7374e9b:     {
1:e31e216:         super(commitLog, manager);
6:7374e9b:     }
1:7374e9b: 
1:e31e216:     @Override
1:7374e9b:     void writeLogHeader()
1:7374e9b:     {
1:7374e9b:         super.writeLogHeader();
1:ee40e3b:         try
1:ee40e3b:         {
1:7374e9b:             channel.write((ByteBuffer) buffer.duplicate().flip());
1:e31e216:             manager.addSize(lastWrittenPos = buffer.position());
1:ee40e3b:         }
1:7374e9b:         catch (IOException e)
1:ee40e3b:         {
1:7374e9b:             throw new FSWriteError(e, getPath());
1:ee40e3b:         }
1:7374e9b:     }
1:ee40e3b: 
1:7374e9b:     @Override
1:7374e9b:     protected void internalClose()
1:7374e9b:     {
1:7374e9b:         try
1:7374e9b:         {
1:e31e216:             manager.getBufferPool().releaseBuffer(buffer);
1:ee40e3b:             super.internalClose();
1:7374e9b:         }
1:ee40e3b:         finally
1:ee40e3b:         {
1:e8907c1:             manager.notifyBufferFreed();
1:ee40e3b:         }
1:7374e9b:     }
1:7374e9b: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e8907c1
/////////////////////////////////////////////////////////////////////////
1:     FileDirectSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager)
/////////////////////////////////////////////////////////////////////////
1:             manager.notifyBufferFreed();
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     FileDirectSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager, Runnable onClose)
1:         super(commitLog, manager);
1:     @Override
1:             manager.addSize(lastWrittenPos = buffer.position());
/////////////////////////////////////////////////////////////////////////
1:             manager.getBufferPool().releaseBuffer(buffer);
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
0: import io.netty.util.concurrent.FastThreadLocal;
/////////////////////////////////////////////////////////////////////////
0:     protected static final FastThreadLocal<ByteBuffer> reusableBufferHolder = new FastThreadLocal<ByteBuffer>()
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:ee40e3b
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * The number of buffers in use
1:      */
0:     private static AtomicInteger usedBuffers = new AtomicInteger(0);
1: 
0:     private final Runnable onClose;
1: 
0:     FileDirectSegment(CommitLog commitLog, Runnable onClose)
0:         this.onClose = onClose;
/////////////////////////////////////////////////////////////////////////
0:         usedBuffers.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
0:         usedBuffers.decrementAndGet();
1:         try
1:         {
0:             if (bufferPool.size() < MAX_BUFFERPOOL_SIZE)
0:                 bufferPool.add(buffer);
0:             else
0:                 FileUtils.clean(buffer);
1:             super.internalClose();
1:         }
1:         finally
1:         {
0:             onClose.run();
1:         }
1: 
0:     /**
0:      * Checks if the number of buffers in use is greater or equals to the maximum number of buffers allowed in the pool.
1:      *
0:      * @return <code>true</code> if the number of buffers in use is greater or equals to the maximum number of buffers
0:      * allowed in the pool, <code>false</code> otherwise.
1:      */
0:     static boolean hasReachedPoolLimit()
1:     {
0:         return usedBuffers.get() >= MAX_BUFFERPOOL_SIZE;
1:     }
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
0: import java.util.Queue;
0: import java.util.concurrent.ConcurrentLinkedQueue;
1: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.io.FSWriteError;
0: import org.apache.cassandra.io.compress.BufferType;
0: import org.apache.cassandra.io.compress.ICompressor;
0: import org.apache.cassandra.io.util.FileUtils;
1: 
0: /**
1:  * Writes to the backing commit log file only on sync, allowing transformations of the mutations,
1:  * such as compression or encryption, before writing out to disk.
0:  */
1: public abstract class FileDirectSegment extends CommitLogSegment
1: {
0:     protected static final ThreadLocal<ByteBuffer> reusableBufferHolder = new ThreadLocal<ByteBuffer>()
1:     {
0:         protected ByteBuffer initialValue()
1:         {
0:             return ByteBuffer.allocate(0);
1:         }
0:     };
1: 
0:     static Queue<ByteBuffer> bufferPool = new ConcurrentLinkedQueue<>();
1: 
0:     /**
0:      * Maximum number of buffers in the compression pool. The default value is 3, it should not be set lower than that
0:      * (one segment in compression, one written to, one in reserve); delays in compression may cause the log to use
0:      * more, depending on how soon the sync policy stops all writing threads.
0:      */
0:     static final int MAX_BUFFERPOOL_SIZE = DatabaseDescriptor.getCommitLogMaxCompressionBuffersInPool();
1: 
1:     volatile long lastWrittenPos = 0;
1: 
0:     FileDirectSegment(CommitLog commitLog)
1:     {
0:         super(commitLog);
1:     }
1: 
1:     void writeLogHeader()
1:     {
1:         super.writeLogHeader();
1:         try
1:         {
1:             channel.write((ByteBuffer) buffer.duplicate().flip());
0:             commitLog.allocator.addSize(lastWrittenPos = buffer.position());
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSWriteError(e, getPath());
1:         }
1:     }
1: 
0:     ByteBuffer createBuffer(BufferType bufferType)
1:     {
0:         ByteBuffer buf = bufferPool.poll();
0:         if (buf != null)
1:         {
0:             buf.clear();
0:             return buf;
1:         }
1: 
0:         return bufferType.allocate(DatabaseDescriptor.getCommitLogSegmentSize());
1:     }
1: 
1:     @Override
1:     protected void internalClose()
1:     {
0:         if (bufferPool.size() < MAX_BUFFERPOOL_SIZE)
0:             bufferPool.add(buffer);
0:         else
0:             FileUtils.clean(buffer);
1: 
0:         super.internalClose();
1:     }
1: 
0:     static void shutdown()
1:     {
0:         bufferPool.clear();
1:     }
1: }
============================================================================