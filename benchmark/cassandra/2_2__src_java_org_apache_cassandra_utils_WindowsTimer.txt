1:d6d32d2: /*
1:d6d32d2:  * Licensed to the Apache Software Foundation (ASF) under one
1:d6d32d2:  * or more contributor license agreements.  See the NOTICE file
1:d6d32d2:  * distributed with this work for additional information
1:d6d32d2:  * regarding copyright ownership.  The ASF licenses this file
1:d6d32d2:  * to you under the Apache License, Version 2.0 (the
1:d6d32d2:  * "License"); you may not use this file except in compliance
1:d6d32d2:  * with the License.  You may obtain a copy of the License at
1:d6d32d2:  *
1:d6d32d2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d6d32d2:  *
1:d6d32d2:  * Unless required by applicable law or agreed to in writing, software
1:d6d32d2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d6d32d2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d6d32d2:  * See the License for the specific language governing permissions and
1:d6d32d2:  * limitations under the License.
1:d6d32d2:  */
1:d6d32d2: 
1:d6d32d2: package org.apache.cassandra.utils;
1:d6d32d2: 
1:d6d32d2: import org.slf4j.Logger;
1:d6d32d2: import org.slf4j.LoggerFactory;
1:d6d32d2: 
1:d6d32d2: import com.sun.jna.LastErrorException;
1:d6d32d2: import com.sun.jna.Native;
1:d6d32d2: 
1:d6d32d2: public final class WindowsTimer
1:d6d32d2: {
1:d6d32d2:     private static final Logger logger = LoggerFactory.getLogger(WindowsTimer.class);
1:d6d32d2: 
1:d6d32d2:     static
1:d6d32d2:     {
1:d6d32d2:         try
1:d6d32d2:         {
1:d6d32d2:             Native.register("winmm");
1:d6d32d2:         }
1:d6d32d2:         catch (Exception e)
1:d6d32d2:         {
1:d6d32d2:             logger.error("Failed to register winmm.dll. Performance will be negatively impacted on this node.");
1:d6d32d2:         }
1:d6d32d2:     }
1:d6d32d2: 
1:d6d32d2:     private static native int timeBeginPeriod(int period) throws LastErrorException;
1:d6d32d2:     private static native int timeEndPeriod(int period) throws LastErrorException;
1:d6d32d2: 
1:d6d32d2:     private WindowsTimer() {}
1:d6d32d2: 
1:d6d32d2:     public static void startTimerPeriod(int period)
1:d6d32d2:     {
1:d6d32d2:         if (period == 0)
1:d6d32d2:             return;
1:d6d32d2:         assert(period > 0);
1:d6d32d2:         if (timeBeginPeriod(period) != 0)
1:f147ca9:             logger.warn("Failed to set timer to : {}. Performance will be degraded.", period);
1:d6d32d2:     }
1:d6d32d2: 
1:d6d32d2:     public static void endTimerPeriod(int period)
1:d6d32d2:     {
1:d6d32d2:         if (period == 0)
1:d6d32d2:             return;
1:d6d32d2:         assert(period > 0);
1:d6d32d2:         if (timeEndPeriod(period) != 0)
1:f147ca9:             logger.warn("Failed to end accelerated timer period. System timer will remain set to: {} ms.", period);
1:d6d32d2:     }
1:d6d32d2: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f147ca9
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Failed to set timer to : {}. Performance will be degraded.", period);
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Failed to end accelerated timer period. System timer will remain set to: {} ms.", period);
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:d6d32d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.utils;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import com.sun.jna.LastErrorException;
1: import com.sun.jna.Native;
1: 
1: public final class WindowsTimer
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(WindowsTimer.class);
1: 
1:     static
1:     {
1:         try
1:         {
1:             Native.register("winmm");
1:         }
1:         catch (Exception e)
1:         {
1:             logger.error("Failed to register winmm.dll. Performance will be negatively impacted on this node.");
1:         }
1:     }
1: 
1:     private static native int timeBeginPeriod(int period) throws LastErrorException;
1:     private static native int timeEndPeriod(int period) throws LastErrorException;
1: 
1:     private WindowsTimer() {}
1: 
1:     public static void startTimerPeriod(int period)
1:     {
1:         if (period == 0)
1:             return;
1:         assert(period > 0);
1:         if (timeBeginPeriod(period) != 0)
0:             logger.warn("Failed to set timer to : " + period + ". Performance will be degraded.");
1:     }
1: 
1:     public static void endTimerPeriod(int period)
1:     {
1:         if (period == 0)
1:             return;
1:         assert(period > 0);
1:         if (timeEndPeriod(period) != 0)
0:             logger.warn("Failed to end accelerated timer period. System timer will remain set to: " + period + " ms.");
1:     }
1: }
============================================================================