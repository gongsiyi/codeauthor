1:690fbf3: /*
1:690fbf3:  * Licensed to the Apache Software Foundation (ASF) under one
1:690fbf3:  * or more contributor license agreements.  See the NOTICE file
1:690fbf3:  * distributed with this work for additional information
1:690fbf3:  * regarding copyright ownership.  The ASF licenses this file
1:690fbf3:  * to you under the Apache License, Version 2.0 (the
1:690fbf3:  * "License"); you may not use this file except in compliance
1:690fbf3:  * with the License.  You may obtain a copy of the License at
1:690fbf3:  *
1:690fbf3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:690fbf3:  *
1:690fbf3:  * Unless required by applicable law or agreed to in writing, software
1:690fbf3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:690fbf3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:690fbf3:  * See the License for the specific language governing permissions and
1:690fbf3:  * limitations under the License.
1:690fbf3:  */
1:690fbf3: package org.apache.cassandra.dht;
1:690fbf3: 
1:690fbf3: import java.util.Set;
1:690fbf3: 
1:690fbf3: import org.apache.cassandra.db.SystemKeyspace;
1:690fbf3: import org.apache.cassandra.streaming.StreamEvent;
1:690fbf3: import org.apache.cassandra.streaming.StreamEventHandler;
1:690fbf3: import org.apache.cassandra.streaming.StreamRequest;
1:690fbf3: import org.apache.cassandra.streaming.StreamState;
1:690fbf3: 
1:690fbf3: /**
1:690fbf3:  * Store and update available ranges (data already received) to system keyspace.
1:690fbf3:  */
1:690fbf3: public class StreamStateStore implements StreamEventHandler
1:690fbf3: {
1:690fbf3:     public Set<Range<Token>> getAvailableRanges(String keyspace, IPartitioner partitioner)
1:690fbf3:     {
1:690fbf3:         return SystemKeyspace.getAvailableRanges(keyspace, partitioner);
1:690fbf3:     }
1:690fbf3: 
1:690fbf3:     /**
1:690fbf3:      * Check if given token's data is available in this node.
1:690fbf3:      *
1:690fbf3:      * @param keyspace keyspace name
1:690fbf3:      * @param token token to check
1:690fbf3:      * @return true if given token in the keyspace is already streamed and ready to be served.
1:690fbf3:      */
1:690fbf3:     public boolean isDataAvailable(String keyspace, Token token)
1:690fbf3:     {
1:690fbf3:         Set<Range<Token>> availableRanges = getAvailableRanges(keyspace, token.getPartitioner());
1:690fbf3:         for (Range<Token> range : availableRanges)
1:690fbf3:         {
1:690fbf3:             if (range.contains(token))
1:690fbf3:                 return true;
1:690fbf3:         }
1:690fbf3:         return false;
1:690fbf3:     }
1:690fbf3: 
1:690fbf3:     /**
1:690fbf3:      * When StreamSession completes, make all keyspaces/ranges in session available to be served.
1:690fbf3:      *
1:690fbf3:      * @param event Stream event.
1:690fbf3:      */
1:690fbf3:     @Override
1:690fbf3:     public void handleStreamEvent(StreamEvent event)
1:690fbf3:     {
1:690fbf3:         if (event.eventType == StreamEvent.Type.STREAM_COMPLETE)
1:690fbf3:         {
1:690fbf3:             StreamEvent.SessionCompleteEvent se = (StreamEvent.SessionCompleteEvent) event;
1:690fbf3:             if (se.success)
1:690fbf3:             {
1:fa4255f:                 Set<String> keyspaces = se.transferredRangesPerKeyspace.keySet();
1:fa4255f:                 for (String keyspace : keyspaces)
1:fa4255f:                 {
1:fa4255f:                     SystemKeyspace.updateTransferredRanges(se.description, se.peer, keyspace, se.transferredRangesPerKeyspace.get(keyspace));
1:fa4255f:                 }
1:690fbf3:                 for (StreamRequest request : se.requests)
1:690fbf3:                 {
1:690fbf3:                     SystemKeyspace.updateAvailableRanges(request.keyspace, request.ranges);
1:690fbf3:                 }
1:690fbf3:             }
1:690fbf3:         }
1:690fbf3:     }
1:690fbf3: 
1:690fbf3:     @Override
1:690fbf3:     public void onSuccess(StreamState streamState) {}
1:690fbf3: 
1:690fbf3:     @Override
1:690fbf3:     public void onFailure(Throwable throwable) {}
1:690fbf3: }
============================================================================
author:Kaide Mu
-------------------------------------------------------------------------------
commit:fa4255f
/////////////////////////////////////////////////////////////////////////
1:                 Set<String> keyspaces = se.transferredRangesPerKeyspace.keySet();
1:                 for (String keyspace : keyspaces)
1:                 {
1:                     SystemKeyspace.updateTransferredRanges(se.description, se.peer, keyspace, se.transferredRangesPerKeyspace.get(keyspace));
1:                 }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:690fbf3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.dht;
1: 
1: import java.util.Set;
1: 
1: import org.apache.cassandra.db.SystemKeyspace;
1: import org.apache.cassandra.streaming.StreamEvent;
1: import org.apache.cassandra.streaming.StreamEventHandler;
1: import org.apache.cassandra.streaming.StreamRequest;
1: import org.apache.cassandra.streaming.StreamState;
1: 
1: /**
1:  * Store and update available ranges (data already received) to system keyspace.
1:  */
1: public class StreamStateStore implements StreamEventHandler
1: {
1:     public Set<Range<Token>> getAvailableRanges(String keyspace, IPartitioner partitioner)
1:     {
1:         return SystemKeyspace.getAvailableRanges(keyspace, partitioner);
1:     }
1: 
1:     /**
1:      * Check if given token's data is available in this node.
1:      *
1:      * @param keyspace keyspace name
1:      * @param token token to check
1:      * @return true if given token in the keyspace is already streamed and ready to be served.
1:      */
1:     public boolean isDataAvailable(String keyspace, Token token)
1:     {
1:         Set<Range<Token>> availableRanges = getAvailableRanges(keyspace, token.getPartitioner());
1:         for (Range<Token> range : availableRanges)
1:         {
1:             if (range.contains(token))
1:                 return true;
1:         }
1:         return false;
1:     }
1: 
1:     /**
1:      * When StreamSession completes, make all keyspaces/ranges in session available to be served.
1:      *
1:      * @param event Stream event.
1:      */
1:     @Override
1:     public void handleStreamEvent(StreamEvent event)
1:     {
1:         if (event.eventType == StreamEvent.Type.STREAM_COMPLETE)
1:         {
1:             StreamEvent.SessionCompleteEvent se = (StreamEvent.SessionCompleteEvent) event;
1:             if (se.success)
1:             {
1:                 for (StreamRequest request : se.requests)
1:                 {
1:                     SystemKeyspace.updateAvailableRanges(request.keyspace, request.ranges);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void onSuccess(StreamState streamState) {}
1: 
1:     @Override
1:     public void onFailure(Throwable throwable) {}
1: }
============================================================================