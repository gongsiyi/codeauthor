1:4dfe8ea: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:4dfe8ea:  *
1:4dfe8ea:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:4dfe8ea:  */
1:4dfe8ea: package org.apache.cassandra.thrift;
1:4dfe8ea: /*
1:4dfe8ea:  * 
1:4dfe8ea:  * Licensed to the Apache Software Foundation (ASF) under one
1:4dfe8ea:  * or more contributor license agreements.  See the NOTICE file
1:4dfe8ea:  * distributed with this work for additional information
1:4dfe8ea:  * regarding copyright ownership.  The ASF licenses this file
1:4dfe8ea:  * to you under the Apache License, Version 2.0 (the
1:4dfe8ea:  * "License"); you may not use this file except in compliance
1:4dfe8ea:  * with the License.  You may obtain a copy of the License at
1:4dfe8ea:  * 
1:4dfe8ea:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4dfe8ea:  * 
1:4dfe8ea:  * Unless required by applicable law or agreed to in writing,
1:4dfe8ea:  * software distributed under the License is distributed on an
1:4dfe8ea:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4dfe8ea:  * KIND, either express or implied.  See the License for the
1:4dfe8ea:  * specific language governing permissions and limitations
1:4dfe8ea:  * under the License.
1:4dfe8ea:  * 
1:4dfe8ea:  */
8:4dfe8ea: 
1:4dfe8ea: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:b153d45: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:4dfe8ea: import java.util.List;
1:4dfe8ea: import java.util.ArrayList;
1:4dfe8ea: import java.util.Map;
1:4dfe8ea: import java.util.HashMap;
1:4dfe8ea: import java.util.EnumMap;
1:4dfe8ea: import java.util.Set;
1:4dfe8ea: import java.util.HashSet;
1:4dfe8ea: import java.util.EnumSet;
1:4dfe8ea: import java.util.Collections;
1:4dfe8ea: import java.util.BitSet;
1:4dfe8ea: import java.nio.ByteBuffer;
1:4dfe8ea: import java.util.Arrays;
1:4dfe8ea: import org.slf4j.Logger;
1:4dfe8ea: import org.slf4j.LoggerFactory;
1:4dfe8ea: 
1:4dfe8ea: /**
1:b38ca28:  * NOTE: This up outdated exception left for backward compatibility reasons,
1:b38ca28:  * no actual schema agreement validation is done starting from Cassandra 1.2
1:b38ca28:  * 
1:4dfe8ea:  * schemas are not in agreement across all nodes
1:4dfe8ea:  */
1:bffd9ea: public class SchemaDisagreementException extends TException implements org.apache.thrift.TBase<SchemaDisagreementException, SchemaDisagreementException._Fields>, java.io.Serializable, Cloneable, Comparable<SchemaDisagreementException> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SchemaDisagreementException");
1:4dfe8ea: 
1:4dfe8ea: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new SchemaDisagreementExceptionStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new SchemaDisagreementExceptionTupleSchemeFactory());
1:b153d45:   }
1:b153d45: 
1:4ec9511: 
1:4dfe8ea:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:4dfe8ea: ;
1:4dfe8ea: 
1:4dfe8ea:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:4dfe8ea: 
1:4dfe8ea:     static {
1:4dfe8ea:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:4dfe8ea:         byName.put(field.getFieldName(), field);
1:c8afd76:       }
1:c8afd76:     }
1:4dfe8ea: 
1:4dfe8ea:     /**
1:4dfe8ea:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:4dfe8ea:      */
1:4dfe8ea:     public static _Fields findByThriftId(int fieldId) {
1:4dfe8ea:       switch(fieldId) {
2:4dfe8ea:         default:
1:4dfe8ea:           return null;
1:4ec9511:       }
1:4ec9511:     }
1:4dfe8ea: 
1:4dfe8ea:     /**
1:4dfe8ea:      * Find the _Fields constant that matches fieldId, throwing an exception
1:4dfe8ea:      * if it is not found.
1:4dfe8ea:      */
1:4dfe8ea:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:4dfe8ea:       _Fields fields = findByThriftId(fieldId);
1:4dfe8ea:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:4dfe8ea:       return fields;
1:4ec9511:     }
1:4dfe8ea: 
1:4dfe8ea:     /**
1:4dfe8ea:      * Find the _Fields constant that matches name, or null if its not found.
1:4dfe8ea:      */
1:4dfe8ea:     public static _Fields findByName(String name) {
1:4dfe8ea:       return byName.get(name);
12:4dfe8ea:     }
1:4dfe8ea: 
1:4dfe8ea:     private final short _thriftId;
1:4dfe8ea:     private final String _fieldName;
1:4dfe8ea: 
1:4dfe8ea:     _Fields(short thriftId, String fieldName) {
1:4dfe8ea:       _thriftId = thriftId;
1:4dfe8ea:       _fieldName = fieldName;
1:4dfe8ea:     }
1:4dfe8ea: 
1:4dfe8ea:     public short getThriftFieldId() {
1:4dfe8ea:       return _thriftId;
1:4dfe8ea:     }
1:4dfe8ea: 
1:4dfe8ea:     public String getFieldName() {
1:4dfe8ea:       return _fieldName;
1:4dfe8ea:     }
1:4dfe8ea:   }
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:4dfe8ea:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4dfe8ea:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SchemaDisagreementException.class, metaDataMap);
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   public SchemaDisagreementException() {
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   /**
1:4dfe8ea:    * Performs a deep copy on <i>other</i>.
1:4dfe8ea:    */
1:4dfe8ea:   public SchemaDisagreementException(SchemaDisagreementException other) {
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   public SchemaDisagreementException deepCopy() {
1:4dfe8ea:     return new SchemaDisagreementException(this);
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   @Override
1:4dfe8ea:   public void clear() {
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   public void setFieldValue(_Fields field, Object value) {
1:4dfe8ea:     switch (field) {
1:4dfe8ea:     }
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   public Object getFieldValue(_Fields field) {
1:4dfe8ea:     switch (field) {
1:4dfe8ea:     }
1:4dfe8ea:     throw new IllegalStateException();
1:4dfe8ea:   }
1:4dfe8ea: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:4dfe8ea:   public boolean isSet(_Fields field) {
1:4dfe8ea:     if (field == null) {
1:4dfe8ea:       throw new IllegalArgumentException();
1:4dfe8ea:     }
1:4dfe8ea: 
1:4dfe8ea:     switch (field) {
1:4dfe8ea:     }
1:4dfe8ea:     throw new IllegalStateException();
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   @Override
1:4dfe8ea:   public boolean equals(Object that) {
1:4dfe8ea:     if (that == null)
1:4dfe8ea:       return false;
1:4dfe8ea:     if (that instanceof SchemaDisagreementException)
1:4dfe8ea:       return this.equals((SchemaDisagreementException)that);
1:4dfe8ea:     return false;
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   public boolean equals(SchemaDisagreementException that) {
1:4dfe8ea:     if (that == null)
1:4dfe8ea:       return false;
1:4dfe8ea: 
1:4dfe8ea:     return true;
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   @Override
1:4dfe8ea:   public int hashCode() {
1:4dfe8ea:     HashCodeBuilder builder = new HashCodeBuilder();
1:4dfe8ea: 
1:4dfe8ea:     return builder.toHashCode();
1:4dfe8ea:   }
1:4dfe8ea: 
1:bffd9ea:   @Override
1:4dfe8ea:   public int compareTo(SchemaDisagreementException other) {
1:4dfe8ea:     if (!getClass().equals(other.getClass())) {
1:4dfe8ea:       return getClass().getName().compareTo(other.getClass().getName());
1:4dfe8ea:     }
1:4dfe8ea: 
1:4dfe8ea:     int lastComparison = 0;
1:4dfe8ea: 
1:4dfe8ea:     return 0;
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   public _Fields fieldForId(int fieldId) {
1:4dfe8ea:     return _Fields.findByThriftId(fieldId);
1:4dfe8ea:   }
1:4dfe8ea: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:4dfe8ea:   }
1:4dfe8ea: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:4dfe8ea:   }
1:4dfe8ea: 
1:4dfe8ea:   @Override
1:4dfe8ea:   public String toString() {
1:4dfe8ea:     StringBuilder sb = new StringBuilder("SchemaDisagreementException(");
1:4dfe8ea:     boolean first = true;
1:4dfe8ea: 
1:4dfe8ea:     sb.append(")");
1:4dfe8ea:     return sb.toString();
1:4ec9511:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:4dfe8ea:     // check for required fields
1:b153d45:     // check for sub-struct validity
1:c8afd76:   }
1:c8afd76: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class SchemaDisagreementExceptionStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public SchemaDisagreementExceptionStandardScheme getScheme() {
1:b153d45:       return new SchemaDisagreementExceptionStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class SchemaDisagreementExceptionStandardScheme extends StandardScheme<SchemaDisagreementException> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:b153d45:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b153d45:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:b153d45:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:b153d45:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:b153d45:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:b153d45:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:b153d45:     }
1:b153d45: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class SchemaDisagreementExceptionTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public SchemaDisagreementExceptionTupleScheme getScheme() {
1:b153d45:       return new SchemaDisagreementExceptionTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class SchemaDisagreementExceptionTupleScheme extends TupleScheme<SchemaDisagreementException> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:c8afd76: }
1:c8afd76: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class SchemaDisagreementException extends TException implements org.apache.thrift.TBase<SchemaDisagreementException, SchemaDisagreementException._Fields>, java.io.Serializable, Cloneable, Comparable<SchemaDisagreementException> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:b38ca28
/////////////////////////////////////////////////////////////////////////
1:  * NOTE: This up outdated exception left for backward compatibility reasons,
1:  * no actual schema agreement validation is done starting from Cassandra 1.2
1:  * 
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
0: public class SchemaDisagreementException extends TException implements org.apache.thrift.TBase<SchemaDisagreementException, SchemaDisagreementException._Fields>, java.io.Serializable, Cloneable {
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new SchemaDisagreementExceptionStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new SchemaDisagreementExceptionTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class SchemaDisagreementExceptionStandardSchemeFactory implements SchemeFactory {
1:     public SchemaDisagreementExceptionStandardScheme getScheme() {
1:       return new SchemaDisagreementExceptionStandardScheme();
1:     }
1:   }
1: 
1:   private static class SchemaDisagreementExceptionStandardScheme extends StandardScheme<SchemaDisagreementException> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class SchemaDisagreementExceptionTupleSchemeFactory implements SchemeFactory {
1:     public SchemaDisagreementExceptionTupleScheme getScheme() {
1:       return new SchemaDisagreementExceptionTupleScheme();
1:     }
1:   }
1: 
1:   private static class SchemaDisagreementExceptionTupleScheme extends TupleScheme<SchemaDisagreementException> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, SchemaDisagreementException struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class SchemaDisagreementException extends Exception implements org.apache.thrift.TBase<SchemaDisagreementException, SchemaDisagreementException._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SchemaDisagreementException");
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SchemaDisagreementException.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:4dfe8ea
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.transport.*;
0: import org.apache.thrift.protocol.*;
1: 
1: /**
1:  * schemas are not in agreement across all nodes
1:  */
0: public class SchemaDisagreementException extends Exception implements TBase<SchemaDisagreementException, SchemaDisagreementException._Fields>, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("SchemaDisagreementException");
1: 
1: 
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1: ;
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     FieldMetaData.addStructMetaDataMap(SchemaDisagreementException.class, metaDataMap);
1:   }
1: 
1:   public SchemaDisagreementException() {
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public SchemaDisagreementException(SchemaDisagreementException other) {
1:   }
1: 
1:   public SchemaDisagreementException deepCopy() {
1:     return new SchemaDisagreementException(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof SchemaDisagreementException)
1:       return this.equals((SchemaDisagreementException)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(SchemaDisagreementException that) {
1:     if (that == null)
1:       return false;
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(SchemaDisagreementException other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     SchemaDisagreementException typedOther = (SchemaDisagreementException)other;
1: 
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
0:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
0:         break;
1:       }
0:       switch (field.id) {
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
0:       iprot.readFieldEnd();
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("SchemaDisagreementException(");
1:     boolean first = true;
1: 
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:   }
1: 
1: }
1: 
============================================================================