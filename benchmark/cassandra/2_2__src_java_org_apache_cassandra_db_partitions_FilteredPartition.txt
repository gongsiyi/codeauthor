1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.partitions;
17:a991b64: 
1:e51f83b: import java.util.Iterator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:e51f83b: import org.apache.cassandra.db.DecoratedKey;
1:e51f83b: import org.apache.cassandra.db.DeletionInfo;
1:e51f83b: import org.apache.cassandra.db.PartitionColumns;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: 
1:e51f83b: public class FilteredPartition extends ImmutableBTreePartition
9:a991b64: {
1:e51f83b:     public FilteredPartition(RowIterator rows)
1:a991b64:     {
1:c3bc856:         super(rows.metadata(), rows.partitionKey(), build(rows, DeletionInfo.LIVE, false, 16));
1:2457599:     }
1:2457599: 
1:a991b64:     /**
1:a991b64:      * Create a FilteredPartition holding all the rows of the provided iterator.
1:a991b64:      *
1:a991b64:      * Warning: Note that this method does not close the provided iterator and it is
1:a991b64:      * up to the caller to do so.
1:a991b64:      */
1:a991b64:     public static FilteredPartition create(RowIterator iterator)
1:2457599:     {
1:e51f83b:         return new FilteredPartition(iterator);
1:2457599:     }
1:2457599: 
1:a991b64:     public RowIterator rowIterator()
1:2457599:     {
1:a991b64:         final Iterator<Row> iter = iterator();
1:a991b64:         return new RowIterator()
1:a991b64:         {
1:a991b64:             public CFMetaData metadata()
1:a991b64:             {
1:a991b64:                 return metadata;
1:2457599:             }
1:a991b64: 
1:a991b64:             public boolean isReverseOrder()
1:a991b64:             {
1:2457599:                 return false;
9:a991b64:             }
1:2457599: 
1:a991b64:             public PartitionColumns columns()
1:a991b64:             {
1:c3bc856:                 return FilteredPartition.this.columns();
1:a991b64:             }
1:a991b64: 
1:a991b64:             public DecoratedKey partitionKey()
1:a991b64:             {
1:2f41243:                 return FilteredPartition.this.partitionKey();
1:a991b64:             }
1:a991b64: 
1:2457599:             public Row staticRow()
1:2457599:             {
1:2457599:                 return FilteredPartition.this.staticRow();
1:2457599:             }
1:2457599: 
1:e51f83b:             public void close() {}
1:e51f83b: 
1:a991b64:             public boolean hasNext()
1:2457599:             {
1:a991b64:                 return iter.hasNext();
1:2457599:             }
1:2457599: 
1:a991b64:             public Row next()
1:2457599:             {
1:a991b64:                 return iter.next();
1:a991b64:             }
1:a991b64: 
1:e51f83b:             public boolean isEmpty()
1:a991b64:             {
1:e51f83b:                 return staticRow().isEmpty() && !hasRows();
1:a991b64:             }
1:a991b64:         };
1:a991b64:     }
1:a991b64: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1:                 return FilteredPartition.this.partitionKey();
commit:c3bc856
/////////////////////////////////////////////////////////////////////////
1:         super(rows.metadata(), rows.partitionKey(), build(rows, DeletionInfo.LIVE, false, 16));
/////////////////////////////////////////////////////////////////////////
1:                 return FilteredPartition.this.columns();
commit:520089b
/////////////////////////////////////////////////////////////////////////
0:         super(rows.metadata(), rows.partitionKey(), build(rows, DeletionInfo.LIVE, false, 16));
/////////////////////////////////////////////////////////////////////////
0:                 return FilteredPartition.this.columns();
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.DeletionInfo;
1: import org.apache.cassandra.db.PartitionColumns;
1: public class FilteredPartition extends ImmutableBTreePartition
1:     public FilteredPartition(RowIterator rows)
0:         super(rows.metadata(), rows.partitionKey(), rows.columns(), build(rows, DeletionInfo.LIVE, false, 16));
/////////////////////////////////////////////////////////////////////////
1:         return new FilteredPartition(iterator);
/////////////////////////////////////////////////////////////////////////
0:                 return partitionKey;
/////////////////////////////////////////////////////////////////////////
1:             public void close() {}
1: 
/////////////////////////////////////////////////////////////////////////
1:             public boolean isEmpty()
1:                 return staticRow().isEmpty() && !hasRows();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
0:     public EncodingStats stats()
0:         return EncodingStats.NO_STATS;
commit:2457599
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: public class FilteredPartition extends AbstractThreadUnsafePartition
0:     private final Row staticRow;
1: 
0:                               Row staticRow,
0:                               List<Row> rows)
0:         super(metadata, partitionKey, columns, rows);
0:         this.staticRow = staticRow;
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData metadata = iterator.metadata();
0:         boolean reversed = iterator.isReverseOrder();
0:         List<Row> rows = new ArrayList<>();
1:         {
0:             Unfiltered unfiltered = iterator.next();
0:             if (unfiltered.isRow())
0:                 rows.add((Row)unfiltered);
1:         }
0:         if (reversed)
0:             Collections.reverse(rows);
0:         return new FilteredPartition(metadata, iterator.partitionKey(), iterator.columns(), iterator.staticRow(), rows);
1:     }
1: 
0:     protected boolean canHaveShadowedData()
1:     {
0:         // We only create instances from RowIterator that don't have shadowed data (nor deletion info really)
1:         return false;
1:     }
1: 
1:     public Row staticRow()
1:     {
0:         return staticRow;
1:     }
1: 
0:     public DeletionInfo deletionInfo()
1:     {
0:         return DeletionInfo.LIVE;
1:     }
1: 
0:     public RowStats stats()
1:     {
0:         return RowStats.NO_STATS;
/////////////////////////////////////////////////////////////////////////
1:                 return FilteredPartition.this.staticRow();
/////////////////////////////////////////////////////////////////////////
0:         StringBuilder sb = new StringBuilder();
0:         sb.append(String.format("[%s.%s] key=%s columns=%s",
0:                     metadata.ksName,
0:                     metadata.cfName,
0:                     metadata.getKeyValidator().getString(partitionKey().getKey()),
0:                     columns));
0:         if (staticRow() != Rows.EMPTY_STATIC_ROW)
0:             sb.append("\n    ").append(staticRow().toString(metadata));
0:         for (Row row : this)
0:             sb.append("\n    ").append(row.toString(metadata));
0:         return sb.toString();
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.partitions;
1: 
0: import java.util.Iterator;
1: 
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
1: 
0: public class FilteredPartition extends AbstractPartitionData implements Iterable<Row>
1: {
0:     private FilteredPartition(CFMetaData metadata,
0:                               DecoratedKey partitionKey,
0:                               PartitionColumns columns,
0:                               int initialRowCapacity,
0:                               boolean sortable)
1:     {
0:         super(metadata, partitionKey, DeletionTime.LIVE, columns, initialRowCapacity, sortable);
1:     }
1: 
1:     /**
1:      * Create a FilteredPartition holding all the rows of the provided iterator.
1:      *
1:      * Warning: Note that this method does not close the provided iterator and it is
1:      * up to the caller to do so.
1:      */
1:     public static FilteredPartition create(RowIterator iterator)
1:     {
0:         FilteredPartition partition = new FilteredPartition(iterator.metadata(),
0:                                                             iterator.partitionKey(),
0:                                                             iterator.columns(),
0:                                                             4,
0:                                                             iterator.isReverseOrder());
1: 
0:         partition.staticRow = iterator.staticRow().takeAlias();
1: 
0:         Writer writer = partition.new Writer(true);
1: 
0:         while (iterator.hasNext())
0:             iterator.next().copyTo(writer);
1: 
0:         // A Partition (or more precisely AbstractPartitionData) always assumes that its data is in clustering
0:         // order. So if we've just added them in reverse clustering order, reverse them.
0:         if (iterator.isReverseOrder())
0:             partition.reverse();
1: 
0:         return partition;
1:     }
1: 
1:     public RowIterator rowIterator()
1:     {
1:         final Iterator<Row> iter = iterator();
1:         return new RowIterator()
1:         {
1:             public CFMetaData metadata()
1:             {
1:                 return metadata;
1:             }
1: 
1:             public boolean isReverseOrder()
1:             {
0:                 return false;
1:             }
1: 
1:             public PartitionColumns columns()
1:             {
0:                 return columns;
1:             }
1: 
1:             public DecoratedKey partitionKey()
1:             {
0:                 return key;
1:             }
1: 
0:             public Row staticRow()
1:             {
0:                 return staticRow == null ? Rows.EMPTY_STATIC_ROW : staticRow;
1:             }
1: 
1:             public boolean hasNext()
1:             {
1:                 return iter.hasNext();
1:             }
1: 
1:             public Row next()
1:             {
1:                 return iter.next();
1:             }
1: 
0:             public void remove()
1:             {
0:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             public void close()
1:             {
1:             }
1:         };
1:     }
1: 
0:     @Override
0:     public String toString()
1:     {
0:         try (RowIterator iterator = rowIterator())
1:         {
0:             StringBuilder sb = new StringBuilder();
0:             CFMetaData metadata = iterator.metadata();
0:             PartitionColumns columns = iterator.columns();
1: 
0:             sb.append(String.format("[%s.%s] key=%s columns=%s reversed=%b",
0:                                     metadata.ksName,
0:                                     metadata.cfName,
0:                                     metadata.getKeyValidator().getString(iterator.partitionKey().getKey()),
0:                                     columns,
0:                                     iterator.isReverseOrder()));
1: 
0:             if (iterator.staticRow() != Rows.EMPTY_STATIC_ROW)
0:                 sb.append("\n    ").append(iterator.staticRow().toString(metadata));
1: 
0:             while (iterator.hasNext())
0:                 sb.append("\n    ").append(iterator.next().toString(metadata));
1: 
0:             return sb.toString();
1:         }
1:     }
1: }
============================================================================