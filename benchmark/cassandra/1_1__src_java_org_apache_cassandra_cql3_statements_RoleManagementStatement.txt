1:879b694: /*
1:879b694:  * Licensed to the Apache Software Foundation (ASF) under one
1:879b694:  * or more contributor license agreements.  See the NOTICE file
1:879b694:  * distributed with this work for additional information
1:879b694:  * regarding copyright ownership.  The ASF licenses this file
1:879b694:  * to you under the Apache License, Version 2.0 (the
1:879b694:  * "License"); you may not use this file except in compliance
1:879b694:  * with the License.  You may obtain a copy of the License at
1:879b694:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:879b694:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:879b694:  */
1:879b694: package org.apache.cassandra.cql3.statements;
1:879b694: 
1:217721a: import org.apache.cassandra.auth.Permission;
1:217721a: import org.apache.cassandra.auth.RoleResource;
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:879b694: import org.apache.cassandra.cql3.RoleName;
1:879b694: import org.apache.cassandra.exceptions.InvalidRequestException;
1:879b694: import org.apache.cassandra.exceptions.RequestValidationException;
1:879b694: import org.apache.cassandra.exceptions.UnauthorizedException;
1:879b694: import org.apache.cassandra.service.ClientState;
1:879b694: 
1:217721a: public abstract class RoleManagementStatement extends AuthenticationStatement
1:879b694: {
1:217721a:     protected final RoleResource role;
1:217721a:     protected final RoleResource grantee;
1:879b694: 
1:879b694:     public RoleManagementStatement(RoleName name, RoleName grantee)
1:879b694:     {
1:217721a:         this.role = RoleResource.role(name.getName());
1:217721a:         this.grantee = RoleResource.role(grantee.getName());
1:879b694:     }
1:879b694: 
1:217721a:     public void checkAccess(ClientState state) throws UnauthorizedException
1:879b694:     {
1:217721a:         super.checkPermission(state, Permission.AUTHORIZE, role);
1:879b694:     }
1:879b694: 
1:879b694:     public void validate(ClientState state) throws RequestValidationException
1:879b694:     {
1:879b694:         state.ensureNotAnonymous();
1:879b694: 
1:879b694:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(role))
1:217721a:             throw new InvalidRequestException(String.format("%s doesn't exist", role.getRoleName()));
1:879b694: 
1:879b694:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
1:217721a:             throw new InvalidRequestException(String.format("%s doesn't exist", grantee.getRoleName()));
1:879b694:     }
1:879b694: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.auth.RoleResource;
/////////////////////////////////////////////////////////////////////////
1: public abstract class RoleManagementStatement extends AuthenticationStatement
1:     protected final RoleResource role;
1:     protected final RoleResource grantee;
1:         this.role = RoleResource.role(name.getName());
1:         this.grantee = RoleResource.role(grantee.getName());
1:     public void checkAccess(ClientState state) throws UnauthorizedException
1:         super.checkPermission(state, Permission.AUTHORIZE, role);
/////////////////////////////////////////////////////////////////////////
1:             throw new InvalidRequestException(String.format("%s doesn't exist", role.getRoleName()));
1:             throw new InvalidRequestException(String.format("%s doesn't exist", grantee.getRoleName()));
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.RoleName;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: 
0: public abstract class RoleManagementStatement extends AuthorizationStatement
1: {
0:     protected final String role;
0:     protected final String grantee;
1: 
1:     public RoleManagementStatement(RoleName name, RoleName grantee)
1:     {
0:         this.role = name.getName();
0:         this.grantee = grantee.getName();
1:     }
1: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:     {
0:         if (!state.getUser().isSuper())
0:             throw new UnauthorizedException("Only superusers are allowed to perform role management queries");
1:     }
1: 
1:     public void validate(ClientState state) throws RequestValidationException
1:     {
1:         state.ensureNotAnonymous();
1: 
1:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(role))
0:             throw new InvalidRequestException(String.format("%s doesn't exist", role));
1: 
1:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
0:             throw new InvalidRequestException(String.format("%s doesn't exist", grantee));
1:     }
1: }
============================================================================