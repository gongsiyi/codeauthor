1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.conf;
3:72790dc: 
1:72790dc: import java.util.HashSet;
1:72790dc: import java.util.Map;
1:72790dc: import java.util.Optional;
1:72790dc: import java.util.Set;
1:72790dc: 
1:72790dc: import org.apache.cassandra.config.ColumnDefinition;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.Mode;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.db.marshal.AsciiType;
1:72790dc: import org.apache.cassandra.db.marshal.UTF8Type;
1:72790dc: import org.apache.cassandra.exceptions.ConfigurationException;
1:3928665: import org.apache.cassandra.index.sasi.plan.Expression.Op;
1:72790dc: import org.apache.cassandra.schema.IndexMetadata;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: public class IndexMode
5:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(IndexMode.class);
1:72790dc: 
1:72790dc:     public static final IndexMode NOT_INDEXED = new IndexMode(Mode.PREFIX, true, false, NonTokenizingAnalyzer.class, 0);
1:72790dc: 
1:72790dc:     private static final Set<AbstractType<?>> TOKENIZABLE_TYPES = new HashSet<AbstractType<?>>()
1:72790dc:     {{
1:72790dc:         add(UTF8Type.instance);
1:72790dc:         add(AsciiType.instance);
1:72790dc:     }};
1:72790dc: 
1:72790dc:     private static final String INDEX_MODE_OPTION = "mode";
1:72790dc:     private static final String INDEX_ANALYZED_OPTION = "analyzed";
1:72790dc:     private static final String INDEX_ANALYZER_CLASS_OPTION = "analyzer_class";
1:72790dc:     private static final String INDEX_IS_LITERAL_OPTION = "is_literal";
1:72790dc:     private static final String INDEX_MAX_FLUSH_MEMORY_OPTION = "max_compaction_flush_memory_in_mb";
1:72790dc:     private static final double INDEX_MAX_FLUSH_DEFAULT_MULTIPLIER = 0.15;
1:72790dc: 
1:72790dc:     public final Mode mode;
1:72790dc:     public final boolean isAnalyzed, isLiteral;
1:72790dc:     public final Class analyzerClass;
1:72790dc:     public final long maxCompactionFlushMemoryInMb;
1:72790dc: 
1:72790dc:     private IndexMode(Mode mode, boolean isLiteral, boolean isAnalyzed, Class analyzerClass, long maxFlushMemMb)
1:72790dc:     {
1:72790dc:         this.mode = mode;
1:72790dc:         this.isLiteral = isLiteral;
1:72790dc:         this.isAnalyzed = isAnalyzed;
1:72790dc:         this.analyzerClass = analyzerClass;
1:72790dc:         this.maxCompactionFlushMemoryInMb = maxFlushMemMb;
5:72790dc:     }
1:72790dc: 
1:72790dc:     public AbstractAnalyzer getAnalyzer(AbstractType<?> validator)
1:72790dc:     {
1:72790dc:         AbstractAnalyzer analyzer = new NoOpAnalyzer();
1:72790dc: 
2:72790dc:         try
1:72790dc:         {
1:72790dc:             if (isAnalyzed)
1:72790dc:             {
1:72790dc:                 if (analyzerClass != null)
1:72790dc:                     analyzer = (AbstractAnalyzer) analyzerClass.newInstance();
1:72790dc:                 else if (TOKENIZABLE_TYPES.contains(validator))
1:72790dc:                     analyzer = new StandardAnalyzer();
1:72790dc:             }
1:72790dc:         }
1:72790dc:         catch (InstantiationException | IllegalAccessException e)
1:72790dc:         {
1:72790dc:             logger.error("Failed to create new instance of analyzer with class [{}]", analyzerClass.getName(), e);
1:72790dc:         }
1:72790dc: 
1:72790dc:         return analyzer;
1:72790dc:     }
1:72790dc: 
1:f8e86eb:     public static void validateAnalyzer(Map<String, String> indexOptions) throws ConfigurationException
1:72790dc:     {
1:f8e86eb:         // validate that a valid analyzer class was provided if specified
1:f8e86eb:         if (indexOptions.containsKey(INDEX_ANALYZER_CLASS_OPTION))
1:f8e86eb:         {
1:f8e86eb:             try
1:f8e86eb:             {
1:f8e86eb:                 Class.forName(indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));
1:f8e86eb:             }
1:f8e86eb:             catch (ClassNotFoundException e)
1:f8e86eb:             {
1:f8e86eb:                 throw new ConfigurationException(String.format("Invalid analyzer class option specified [%s]",
1:f8e86eb:                                                                indexOptions.get(INDEX_ANALYZER_CLASS_OPTION)));
1:f8e86eb:             }
1:f8e86eb:         }
1:f8e86eb:     }
1:f8e86eb: 
1:f8e86eb:     public static IndexMode getMode(ColumnDefinition column, Optional<IndexMetadata> config) throws ConfigurationException
1:f8e86eb:     {
1:f8e86eb:         return getMode(column, config.isPresent() ? config.get().options : null);
1:f8e86eb:     }
1:f8e86eb: 
1:f8e86eb:     public static IndexMode getMode(ColumnDefinition column, Map<String, String> indexOptions) throws ConfigurationException
1:f8e86eb:     {
1:72790dc:         if (indexOptions == null || indexOptions.isEmpty())
1:72790dc:             return IndexMode.NOT_INDEXED;
1:72790dc: 
1:f8e86eb:         Mode mode;
1:f8e86eb: 
1:f8e86eb:         try
1:f8e86eb:         {
1:f8e86eb:             mode = indexOptions.get(INDEX_MODE_OPTION) == null
1:f8e86eb:                             ? Mode.PREFIX
1:f8e86eb:                             : Mode.mode(indexOptions.get(INDEX_MODE_OPTION));
1:f8e86eb:         }
1:f8e86eb:         catch (IllegalArgumentException e)
1:f8e86eb:         {
1:f8e86eb:             throw new ConfigurationException("Incorrect index mode: " + indexOptions.get(INDEX_MODE_OPTION));
1:f8e86eb:         }
1:72790dc: 
1:72790dc:         boolean isAnalyzed = false;
1:72790dc:         Class analyzerClass = null;
1:72790dc:         try
1:72790dc:         {
1:72790dc:             if (indexOptions.get(INDEX_ANALYZER_CLASS_OPTION) != null)
1:72790dc:             {
1:72790dc:                 analyzerClass = Class.forName(indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));
1:72790dc:                 isAnalyzed = indexOptions.get(INDEX_ANALYZED_OPTION) == null
1:7dccb31:                               ? true : Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION));
1:72790dc:             }
1:72790dc:             else if (indexOptions.get(INDEX_ANALYZED_OPTION) != null)
1:72790dc:             {
1:7dccb31:                 isAnalyzed = Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION));
1:72790dc:             }
1:72790dc:         }
2:72790dc:         catch (ClassNotFoundException e)
1:72790dc:         {
1:f8e86eb:             // should not happen as we already validated we could instantiate an instance in validateAnalyzer()
1:72790dc:             logger.error("Failed to find specified analyzer class [{}]. Falling back to default analyzer",
1:72790dc:                          indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));
1:72790dc:         }
1:72790dc: 
1:72790dc:         boolean isLiteral = false;
1:72790dc:         try
1:72790dc:         {
1:72790dc:             String literalOption = indexOptions.get(INDEX_IS_LITERAL_OPTION);
1:72790dc:             AbstractType<?> validator = column.cellValueType();
1:72790dc: 
1:72790dc:             isLiteral = literalOption == null
1:72790dc:                             ? (validator instanceof UTF8Type || validator instanceof AsciiType)
1:7dccb31:                             : Boolean.parseBoolean(literalOption);
1:72790dc:         }
1:72790dc:         catch (Exception e)
1:72790dc:         {
1:f8e86eb:             logger.error("failed to parse {} option, defaulting to 'false'.", INDEX_IS_LITERAL_OPTION);
1:72790dc:         }
1:72790dc: 
1:72790dc:         Long maxMemMb = indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION) == null
1:72790dc:                 ? (long) (1073741824 * INDEX_MAX_FLUSH_DEFAULT_MULTIPLIER) // 1G default for memtable
1:72790dc:                 : Long.parseLong(indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION));
1:72790dc: 
1:72790dc:         return new IndexMode(mode, isLiteral, isAnalyzed, analyzerClass, maxMemMb);
1:72790dc:     }
1:3928665: 
1:3928665:     public boolean supports(Op operator)
1:3928665:     {
1:479e8af:         return mode.supports(operator);
1:3928665:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7dccb31
/////////////////////////////////////////////////////////////////////////
1:                               ? true : Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION));
1:                 isAnalyzed = Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION));
/////////////////////////////////////////////////////////////////////////
1:                             : Boolean.parseBoolean(literalOption);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:479e8af
/////////////////////////////////////////////////////////////////////////
1:         return mode.supports(operator);
commit:f8e86eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static void validateAnalyzer(Map<String, String> indexOptions) throws ConfigurationException
1:         // validate that a valid analyzer class was provided if specified
1:         if (indexOptions.containsKey(INDEX_ANALYZER_CLASS_OPTION))
1:         {
1:             try
1:             {
1:                 Class.forName(indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));
1:             }
1:             catch (ClassNotFoundException e)
1:             {
1:                 throw new ConfigurationException(String.format("Invalid analyzer class option specified [%s]",
1:                                                                indexOptions.get(INDEX_ANALYZER_CLASS_OPTION)));
1:             }
1:         }
1:     }
1: 
1:     public static IndexMode getMode(ColumnDefinition column, Optional<IndexMetadata> config) throws ConfigurationException
1:     {
1:         return getMode(column, config.isPresent() ? config.get().options : null);
1:     }
1: 
1:     public static IndexMode getMode(ColumnDefinition column, Map<String, String> indexOptions) throws ConfigurationException
1:     {
1:         Mode mode;
1: 
1:         try
1:         {
1:             mode = indexOptions.get(INDEX_MODE_OPTION) == null
1:                             ? Mode.PREFIX
1:                             : Mode.mode(indexOptions.get(INDEX_MODE_OPTION));
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             throw new ConfigurationException("Incorrect index mode: " + indexOptions.get(INDEX_MODE_OPTION));
1:         }
/////////////////////////////////////////////////////////////////////////
1:             // should not happen as we already validated we could instantiate an instance in validateAnalyzer()
/////////////////////////////////////////////////////////////////////////
1:             logger.error("failed to parse {} option, defaulting to 'false'.", INDEX_IS_LITERAL_OPTION);
commit:3928665
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.plan.Expression.Op;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean supports(Op operator)
1:     {
0:         return !(isLiteral && operator == Op.RANGE) && mode.supports(operator);
1:     }
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.conf;
1: 
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Optional;
1: import java.util.Set;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer;
1: import org.apache.cassandra.index.sasi.analyzer.NoOpAnalyzer;
1: import org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer;
1: import org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.Mode;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.schema.IndexMetadata;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class IndexMode
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(IndexMode.class);
1: 
1:     public static final IndexMode NOT_INDEXED = new IndexMode(Mode.PREFIX, true, false, NonTokenizingAnalyzer.class, 0);
1: 
1:     private static final Set<AbstractType<?>> TOKENIZABLE_TYPES = new HashSet<AbstractType<?>>()
1:     {{
1:         add(UTF8Type.instance);
1:         add(AsciiType.instance);
1:     }};
1: 
1:     private static final String INDEX_MODE_OPTION = "mode";
1:     private static final String INDEX_ANALYZED_OPTION = "analyzed";
1:     private static final String INDEX_ANALYZER_CLASS_OPTION = "analyzer_class";
1:     private static final String INDEX_IS_LITERAL_OPTION = "is_literal";
1:     private static final String INDEX_MAX_FLUSH_MEMORY_OPTION = "max_compaction_flush_memory_in_mb";
1:     private static final double INDEX_MAX_FLUSH_DEFAULT_MULTIPLIER = 0.15;
1: 
1:     public final Mode mode;
1:     public final boolean isAnalyzed, isLiteral;
1:     public final Class analyzerClass;
1:     public final long maxCompactionFlushMemoryInMb;
1: 
1:     private IndexMode(Mode mode, boolean isLiteral, boolean isAnalyzed, Class analyzerClass, long maxFlushMemMb)
1:     {
1:         this.mode = mode;
1:         this.isLiteral = isLiteral;
1:         this.isAnalyzed = isAnalyzed;
1:         this.analyzerClass = analyzerClass;
1:         this.maxCompactionFlushMemoryInMb = maxFlushMemMb;
1:     }
1: 
0:     public void validate(Optional<IndexMetadata> config) throws ConfigurationException
1:     {
0:         if (!config.isPresent())
0:             return;
1: 
0:         Map<String, String> indexOptions = config.get().options;
0:         // validate that a valid analyzer class was provided if specified
0:         if (indexOptions.containsKey(INDEX_ANALYZER_CLASS_OPTION))
1:         {
1:             try
1:             {
0:                 Class.forName(indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));
1:             }
1:             catch (ClassNotFoundException e)
1:             {
0:                 throw new ConfigurationException(String.format("Invalid analyzer class option specified [%s]",
0:                         indexOptions.get(INDEX_ANALYZER_CLASS_OPTION)));
1:             }
1:         }
1:     }
1: 
1:     public AbstractAnalyzer getAnalyzer(AbstractType<?> validator)
1:     {
1:         AbstractAnalyzer analyzer = new NoOpAnalyzer();
1: 
1:         try
1:         {
1:             if (isAnalyzed)
1:             {
1:                 if (analyzerClass != null)
1:                     analyzer = (AbstractAnalyzer) analyzerClass.newInstance();
1:                 else if (TOKENIZABLE_TYPES.contains(validator))
1:                     analyzer = new StandardAnalyzer();
1:             }
1:         }
1:         catch (InstantiationException | IllegalAccessException e)
1:         {
1:             logger.error("Failed to create new instance of analyzer with class [{}]", analyzerClass.getName(), e);
1:         }
1: 
1:         return analyzer;
1:     }
1: 
0:     public static IndexMode getMode(ColumnDefinition column, Optional<IndexMetadata> config)
1:     {
0:         Map<String, String> indexOptions = config.isPresent() ? config.get().options : null;
1:         if (indexOptions == null || indexOptions.isEmpty())
1:             return IndexMode.NOT_INDEXED;
1: 
0:         Mode mode = indexOptions.get(INDEX_MODE_OPTION) == null
0:                         ? Mode.PREFIX
0:                         : Mode.mode(indexOptions.get(INDEX_MODE_OPTION));
1: 
1:         boolean isAnalyzed = false;
1:         Class analyzerClass = null;
1:         try
1:         {
1:             if (indexOptions.get(INDEX_ANALYZER_CLASS_OPTION) != null)
1:             {
1:                 analyzerClass = Class.forName(indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));
1:                 isAnalyzed = indexOptions.get(INDEX_ANALYZED_OPTION) == null
0:                               ? true : Boolean.valueOf(indexOptions.get(INDEX_ANALYZED_OPTION));
1:             }
1:             else if (indexOptions.get(INDEX_ANALYZED_OPTION) != null)
1:             {
0:                 isAnalyzed = Boolean.valueOf(indexOptions.get(INDEX_ANALYZED_OPTION));
1:             }
1:         }
1:         catch (ClassNotFoundException e)
1:         {
0:             // should not happen as we already validated we could instantiate an instance in validateOptions()
1:             logger.error("Failed to find specified analyzer class [{}]. Falling back to default analyzer",
1:                          indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));
1:         }
1: 
1:         boolean isLiteral = false;
1:         try
1:         {
1:             String literalOption = indexOptions.get(INDEX_IS_LITERAL_OPTION);
1:             AbstractType<?> validator = column.cellValueType();
1: 
1:             isLiteral = literalOption == null
1:                             ? (validator instanceof UTF8Type || validator instanceof AsciiType)
0:                             : Boolean.valueOf(literalOption);
1:         }
1:         catch (Exception e)
1:         {
0:             logger.error("failed to parse {} option, defaulting to 'false' for {} index.", INDEX_IS_LITERAL_OPTION, config.get().name);
1:         }
1: 
1:         Long maxMemMb = indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION) == null
1:                 ? (long) (1073741824 * INDEX_MAX_FLUSH_DEFAULT_MULTIPLIER) // 1G default for memtable
1:                 : Long.parseLong(indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION));
1: 
1:         return new IndexMode(mode, isLiteral, isAnalyzed, analyzerClass, maxMemMb);
1:     }
1: }
============================================================================