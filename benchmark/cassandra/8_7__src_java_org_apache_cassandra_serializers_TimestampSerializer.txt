1:e9c6742: /*
1:e9c6742:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9c6742:  * or more contributor license agreements.  See the NOTICE file
1:e9c6742:  * distributed with this work for additional information
1:e9c6742:  * regarding copyright ownership.  The ASF licenses this file
1:e9c6742:  * to you under the Apache License, Version 2.0 (the
1:e9c6742:  * "License"); you may not use this file except in compliance
1:e9c6742:  * with the License.  You may obtain a copy of the License at
1:e9c6742:  *
1:e9c6742:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9c6742:  *
1:e9c6742:  * Unless required by applicable law or agreed to in writing, software
1:e9c6742:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9c6742:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9c6742:  * See the License for the specific language governing permissions and
1:e9c6742:  * limitations under the License.
1:e9c6742:  */
1:fc8b76f: package org.apache.cassandra.serializers;
6:e9c6742: 
1:e9c6742: import org.apache.cassandra.utils.ByteBufferUtil;
1:e9c6742: 
1:e9c6742: import java.nio.ByteBuffer;
1:e9c6742: import java.text.SimpleDateFormat;
1:2635632: import java.text.ParseException;
1:e9c6742: import java.util.Date;
1:e94032a: import java.util.TimeZone;
1:2635632: import java.util.regex.Pattern;
1:2635632: 
1:2635632: import org.apache.commons.lang3.time.DateUtils;
1:e9c6742: 
1:fc8b76f: public class TimestampSerializer implements TypeSerializer<Date>
4:e9c6742: {
1:437bb9d: 
1:437bb9d:     //NOTE: This list is used below and if you change the order
1:437bb9d:     //      you need to update the default format and json formats in the code below.
1:68d2526:     private static final String[] dateStringPatterns = new String[]
1:68d2526:     {
1:e9c6742:             "yyyy-MM-dd HH:mm",
1:e9c6742:             "yyyy-MM-dd HH:mm:ss",
1:9dc8c21:             "yyyy-MM-dd HH:mm z",
1:9dc8c21:             "yyyy-MM-dd HH:mm zz",
1:9dc8c21:             "yyyy-MM-dd HH:mm zzz",
1:2635632:             "yyyy-MM-dd HH:mmX",
1:c7b02d1:             "yyyy-MM-dd HH:mmXX",  // DEFAULT_FORMAT
1:2635632:             "yyyy-MM-dd HH:mmXXX",
1:9dc8c21:             "yyyy-MM-dd HH:mm:ss",
1:9dc8c21:             "yyyy-MM-dd HH:mm:ss z",
1:9dc8c21:             "yyyy-MM-dd HH:mm:ss zz",
1:9dc8c21:             "yyyy-MM-dd HH:mm:ss zzz",
1:2635632:             "yyyy-MM-dd HH:mm:ssX",
1:2635632:             "yyyy-MM-dd HH:mm:ssXX",
1:2635632:             "yyyy-MM-dd HH:mm:ssXXX",
1:88f22b9:             "yyyy-MM-dd HH:mm:ss.SSS",
1:9dc8c21:             "yyyy-MM-dd HH:mm:ss.SSS z",
1:9dc8c21:             "yyyy-MM-dd HH:mm:ss.SSS zz",
1:9dc8c21:             "yyyy-MM-dd HH:mm:ss.SSS zzz",
1:88f22b9:             "yyyy-MM-dd HH:mm:ss.SSSX", // TO_JSON_FORMAT
1:2635632:             "yyyy-MM-dd HH:mm:ss.SSSXX",
1:2635632:             "yyyy-MM-dd HH:mm:ss.SSSXXX",
1:e9c6742:             "yyyy-MM-dd'T'HH:mm",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm z",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm zz",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm zzz",
1:2635632:             "yyyy-MM-dd'T'HH:mmX",
1:2635632:             "yyyy-MM-dd'T'HH:mmXX",
1:2635632:             "yyyy-MM-dd'T'HH:mmXXX",
1:e9c6742:             "yyyy-MM-dd'T'HH:mm:ss",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm:ss z",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm:ss zz",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm:ss zzz",
1:2635632:             "yyyy-MM-dd'T'HH:mm:ssX",
1:2635632:             "yyyy-MM-dd'T'HH:mm:ssXX",
1:2635632:             "yyyy-MM-dd'T'HH:mm:ssXXX",
1:9aebf9d:             "yyyy-MM-dd'T'HH:mm:ss.SSS",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm:ss.SSS z",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm:ss.SSS zz",
1:9dc8c21:             "yyyy-MM-dd'T'HH:mm:ss.SSS zzz",
1:e94032a:             "yyyy-MM-dd'T'HH:mm:ss.SSSX",  // UTC_FORMAT
1:2635632:             "yyyy-MM-dd'T'HH:mm:ss.SSSXX",
1:2635632:             "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
1:e9c6742:             "yyyy-MM-dd",
1:9dc8c21:             "yyyy-MM-dd z",
1:9dc8c21:             "yyyy-MM-dd zz",
1:9dc8c21:             "yyyy-MM-dd zzz",
1:2635632:             "yyyy-MM-ddX",
1:2635632:             "yyyy-MM-ddXX",
1:2635632:             "yyyy-MM-ddXXX"
1:e9c6742:     };
1:68d2526: 
1:437bb9d:     private static final String DEFAULT_FORMAT = dateStringPatterns[6];
1:2635632:     private static final Pattern timestampPattern = Pattern.compile("^-?\\d+$");
1:e9c6742: 
1:2635632:     private static final ThreadLocal<SimpleDateFormat> FORMATTER = new ThreadLocal<SimpleDateFormat>()
1:e9c6742:     {
1:e9c6742:         protected SimpleDateFormat initialValue()
1:e9c6742:         {
1:e9c6742:             return new SimpleDateFormat(DEFAULT_FORMAT);
4:e9c6742:         }
1:e9c6742:     };
1:ebbd516: 
1:e94032a:     private static final String UTC_FORMAT = dateStringPatterns[40];
1:e94032a:     private static final ThreadLocal<SimpleDateFormat> FORMATTER_UTC = new ThreadLocal<SimpleDateFormat>()
1:ebbd516:     {
1:e94032a:         protected SimpleDateFormat initialValue()
1:e94032a:         {
1:e94032a:             SimpleDateFormat sdf = new SimpleDateFormat(UTC_FORMAT);
1:ae063e8:             sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
1:ae063e8:             return sdf;
1:e94032a:         }
1:e94032a:     };
1:68d2526: 
1:88f22b9:     private static final String TO_JSON_FORMAT = dateStringPatterns[19];
1:ebbd516:     private static final ThreadLocal<SimpleDateFormat> FORMATTER_TO_JSON = new ThreadLocal<SimpleDateFormat>()
1:ebbd516:     {
1:ebbd516:         protected SimpleDateFormat initialValue()
1:e94032a:         {
1:88f22b9:             SimpleDateFormat sdf = new SimpleDateFormat(TO_JSON_FORMAT);
1:88f22b9:             sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
1:88f22b9:             return sdf;
1:ebbd516:         }
1:ebbd516:     };
1:ebbd516: 
1:e94032a: 
1:c7b02d1: 
1:9ec7b80:     public static final TimestampSerializer instance = new TimestampSerializer();
1:e9c6742: 
1:daff1fc:     public Date deserialize(ByteBuffer bytes)
1:e9c6742:     {
1:daff1fc:         return bytes.remaining() == 0 ? null : new Date(ByteBufferUtil.toLong(bytes));
1:e9c6742:     }
1:e9c6742: 
1:daff1fc:     public ByteBuffer serialize(Date value)
1:e9c6742:     {
1:daff1fc:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value.getTime());
1:e9c6742:     }
1:e9c6742: 
1:2635632:     public static long dateStringToTimestamp(String source) throws MarshalException
1:2635632:     {
1:2635632:         if (source.equalsIgnoreCase("now"))
1:2635632:             return System.currentTimeMillis();
1:2635632: 
1:2635632:         // Milliseconds since epoch?
1:2635632:         if (timestampPattern.matcher(source).matches())
1:2635632:         {
1:2635632:             try
1:2635632:             {
1:2635632:                 return Long.parseLong(source);
1:2635632:             }
1:2635632:             catch (NumberFormatException e)
1:2635632:             {
1:c7b02d1:                 throw new MarshalException(String.format("Unable to make long (for date) from: '%s'", source), e);
1:2635632:             }
1:2635632:         }
1:2635632: 
1:2635632:         // Last chance, attempt to parse as date-time string
1:2635632:         try
1:2635632:         {
1:2635632:             return DateUtils.parseDateStrictly(source, dateStringPatterns).getTime();
1:2635632:         }
1:2635632:         catch (ParseException e1)
1:2635632:         {
1:c7b02d1:             throw new MarshalException(String.format("Unable to coerce '%s' to a formatted date (long)", source), e1);
1:2635632:         }
1:2635632:     }
1:68d2526: 
1:68d2526:     public static SimpleDateFormat getJsonDateFormatter()
1:ebbd516:     {
1:ebbd516:     	return FORMATTER_TO_JSON.get();
1:ebbd516:     }
1:2635632: 
1:e9c6742:     public void validate(ByteBuffer bytes) throws MarshalException
1:e9c6742:     {
1:e9c6742:         if (bytes.remaining() != 8 && bytes.remaining() != 0)
1:e9c6742:             throw new MarshalException(String.format("Expected 8 or 0 byte long for date (%d)", bytes.remaining()));
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public String toString(Date value)
1:e9c6742:     {
1:d6f32e4:         return value == null ? "" : FORMATTER.get().format(value);
1:e9c6742:     }
1:e9c6742: 
1:e94032a:     public String toStringUTC(Date value)
1:e94032a:     {
1:e94032a:         return value == null ? "" : FORMATTER_UTC.get().format(value);
1:e94032a:     }
1:e94032a: 
1:e9c6742:     public Class<Date> getType()
1:e9c6742:     {
1:e9c6742:         return Date.class;
1:e9c6742:     }
1:e94032a: 
1:e94032a:     /**
1:e94032a:      * Builds CQL literal for a timestamp using time zone UTC and fixed date format.
1:e94032a:      * @see #FORMATTER_UTC
1:e94032a:      */
1:e94032a:     @Override
1:c6ed2e0:     public String toCQLLiteral(ByteBuffer buffer)
1:e94032a:     {
1:c6ed2e0:         return buffer == null || !buffer.hasRemaining()
1:c6ed2e0:              ? "null"
1:c6ed2e0:              : FORMATTER_UTC.get().format(deserialize(buffer));
1:e94032a:     }
1:e9c6742: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     private static final String[] dateStringPatterns = new String[]
1:     {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static SimpleDateFormat getJsonDateFormatter()
commit:8e35f84
commit:ebbd516
/////////////////////////////////////////////////////////////////////////
1:     private static final ThreadLocal<SimpleDateFormat> FORMATTER_TO_JSON = new ThreadLocal<SimpleDateFormat>()
1:     {
1:         protected SimpleDateFormat initialValue()
1:         {
0:             return new SimpleDateFormat(dateStringPatterns[15]);
1:         }
1:     };
1:     
/////////////////////////////////////////////////////////////////////////
1:     
0:     public static SimpleDateFormat getJsonDateFormatter() 
1:     {
1:     	return FORMATTER_TO_JSON.get();
1:     }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:b360653
author:Alex Petrov
-------------------------------------------------------------------------------
commit:88f22b9
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:             "yyyy-MM-dd HH:mm:ss.SSS",
1:             "yyyy-MM-dd HH:mm:ss.SSSX", // TO_JSON_FORMAT
/////////////////////////////////////////////////////////////////////////
1:     private static final String TO_JSON_FORMAT = dateStringPatterns[19];
1:             SimpleDateFormat sdf = new SimpleDateFormat(TO_JSON_FORMAT);
1:             sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
1:             return sdf;
commit:ae063e8
/////////////////////////////////////////////////////////////////////////
0:             "yyyy-MM-dd HH:mm:ss.SSS",
0:             "yyyy-MM-dd HH:mm:ss.SSSX", // TO_JSON_FORMAT
/////////////////////////////////////////////////////////////////////////
0:     private static final String TO_JSON_FORMAT = dateStringPatterns[19];
0:             SimpleDateFormat sdf = new SimpleDateFormat(TO_JSON_FORMAT);
1:             sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
1:             return sdf;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:c6ed2e0
/////////////////////////////////////////////////////////////////////////
1:     public String toCQLLiteral(ByteBuffer buffer)
1:         return buffer == null || !buffer.hasRemaining()
1:              ? "null"
1:              : FORMATTER_UTC.get().format(deserialize(buffer));
commit:e94032a
/////////////////////////////////////////////////////////////////////////
1: import java.util.TimeZone;
/////////////////////////////////////////////////////////////////////////
1:             "yyyy-MM-dd'T'HH:mm:ss.SSSX",  // UTC_FORMAT
/////////////////////////////////////////////////////////////////////////
1:     private static final String UTC_FORMAT = dateStringPatterns[40];
1:     private static final ThreadLocal<SimpleDateFormat> FORMATTER_UTC = new ThreadLocal<SimpleDateFormat>()
1:     {
1:         protected SimpleDateFormat initialValue()
1:         {
1:             SimpleDateFormat sdf = new SimpleDateFormat(UTC_FORMAT);
0:             sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
0:             return sdf;
1:         }
1:     };
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String toStringUTC(Date value)
1:     {
1:         return value == null ? "" : FORMATTER_UTC.get().format(value);
1:     }
1: 
1: 
1:     /**
1:      * Builds CQL literal for a timestamp using time zone UTC and fixed date format.
1:      * @see #FORMATTER_UTC
1:      */
1:     @Override
0:     public void toCQLLiteral(ByteBuffer buffer, StringBuilder target)
1:     {
0:         if (buffer == null || !buffer.hasRemaining())
0:             target.append("null");
0:         else
0:             target.append(FORMATTER_UTC.get().format(deserialize(buffer)));
1:     }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:437bb9d
/////////////////////////////////////////////////////////////////////////
1: 
1:     //NOTE: This list is used below and if you change the order
1:     //      you need to update the default format and json formats in the code below.
/////////////////////////////////////////////////////////////////////////
1:     private static final String DEFAULT_FORMAT = dateStringPatterns[6];
/////////////////////////////////////////////////////////////////////////
0:     public static final SimpleDateFormat TO_JSON_FORMAT = new SimpleDateFormat(dateStringPatterns[15]);
commit:9dc8c21
/////////////////////////////////////////////////////////////////////////
1:             "yyyy-MM-dd HH:mm z",
1:             "yyyy-MM-dd HH:mm zz",
1:             "yyyy-MM-dd HH:mm zzz",
1:             "yyyy-MM-dd HH:mm:ss",
1:             "yyyy-MM-dd HH:mm:ss z",
1:             "yyyy-MM-dd HH:mm:ss zz",
1:             "yyyy-MM-dd HH:mm:ss zzz",
0:             "yyyy-MM-dd HH:mm:ss.SSS",   // TO_JSON_FORMAT
1:             "yyyy-MM-dd HH:mm:ss.SSS z",
1:             "yyyy-MM-dd HH:mm:ss.SSS zz",
1:             "yyyy-MM-dd HH:mm:ss.SSS zzz",
1:             "yyyy-MM-dd'T'HH:mm z",
1:             "yyyy-MM-dd'T'HH:mm zz",
1:             "yyyy-MM-dd'T'HH:mm zzz",
1:             "yyyy-MM-dd'T'HH:mm:ss z",
1:             "yyyy-MM-dd'T'HH:mm:ss zz",
1:             "yyyy-MM-dd'T'HH:mm:ss zzz",
1:             "yyyy-MM-dd'T'HH:mm:ss.SSS z",
1:             "yyyy-MM-dd'T'HH:mm:ss.SSS zz",
1:             "yyyy-MM-dd'T'HH:mm:ss.SSS zzz",
1:             "yyyy-MM-dd z",
1:             "yyyy-MM-dd zz",
1:             "yyyy-MM-dd zzz",
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1:             "yyyy-MM-dd HH:mmXX",  // DEFAULT_FORMAT
0:             "yyyy-MM-dd HH:mm:ss.SSS",  // TO_JSON_FORMAT
/////////////////////////////////////////////////////////////////////////
0:     public static final SimpleDateFormat TO_JSON_FORMAT = new SimpleDateFormat(dateStringPatterns[8]);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 throw new MarshalException(String.format("Unable to make long (for date) from: '%s'", source), e);
/////////////////////////////////////////////////////////////////////////
1:             throw new MarshalException(String.format("Unable to coerce '%s' to a formatted date (long)", source), e1);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2635632
/////////////////////////////////////////////////////////////////////////
1: import java.text.ParseException;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.commons.lang3.time.DateUtils;
0:     private static final String[] dateStringPatterns = new String[] {
1:             "yyyy-MM-dd HH:mmX",
0:             "yyyy-MM-dd HH:mmXX",
1:             "yyyy-MM-dd HH:mmXXX",
1:             "yyyy-MM-dd HH:mm:ssX",
1:             "yyyy-MM-dd HH:mm:ssXX",
1:             "yyyy-MM-dd HH:mm:ssXXX",
0:             "yyyy-MM-dd HH:mm:ss.SSSX",
1:             "yyyy-MM-dd HH:mm:ss.SSSXX",
1:             "yyyy-MM-dd HH:mm:ss.SSSXXX",
1:             "yyyy-MM-dd'T'HH:mmX",
1:             "yyyy-MM-dd'T'HH:mmXX",
1:             "yyyy-MM-dd'T'HH:mmXXX",
1:             "yyyy-MM-dd'T'HH:mm:ssX",
1:             "yyyy-MM-dd'T'HH:mm:ssXX",
1:             "yyyy-MM-dd'T'HH:mm:ssXXX",
0:             "yyyy-MM-dd'T'HH:mm:ss.SSSX",
1:             "yyyy-MM-dd'T'HH:mm:ss.SSSXX",
1:             "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
1:             "yyyy-MM-ddX",
1:             "yyyy-MM-ddXX",
1:             "yyyy-MM-ddXXX"
0:     private static final String DEFAULT_FORMAT = dateStringPatterns[3];
1:     private static final Pattern timestampPattern = Pattern.compile("^-?\\d+$");
1:     private static final ThreadLocal<SimpleDateFormat> FORMATTER = new ThreadLocal<SimpleDateFormat>()
/////////////////////////////////////////////////////////////////////////
1:     public static long dateStringToTimestamp(String source) throws MarshalException
1:     {
1:         if (source.equalsIgnoreCase("now"))
1:             return System.currentTimeMillis();
1: 
1:         // Milliseconds since epoch?
1:         if (timestampPattern.matcher(source).matches())
1:         {
1:             try
1:             {
1:                 return Long.parseLong(source);
1:             }
1:             catch (NumberFormatException e)
1:             {
0:                 throw new MarshalException(String.format("unable to make long (for date) from: '%s'", source), e);
1:             }
1:         }
1: 
1:         // Last chance, attempt to parse as date-time string
1:         try
1:         {
1:             return DateUtils.parseDateStrictly(source, dateStringPatterns).getTime();
1:         }
1:         catch (ParseException e1)
1:         {
0:             throw new MarshalException(String.format("unable to coerce '%s' to a  formatted date (long)", source), e1);
1:         }
1:     }
1: 
commit:d6f32e4
/////////////////////////////////////////////////////////////////////////
1:         return value == null ? "" : FORMATTER.get().format(value);
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     public Date deserialize(ByteBuffer bytes)
1:         return bytes.remaining() == 0 ? null : new Date(ByteBufferUtil.toLong(bytes));
1:     public ByteBuffer serialize(Date value)
1:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value.getTime());
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
/////////////////////////////////////////////////////////////////////////
1: public class TimestampSerializer implements TypeSerializer<Date>
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9ec7b80
/////////////////////////////////////////////////////////////////////////
0: public class TimestampSerializer extends AbstractSerializer<Date>
/////////////////////////////////////////////////////////////////////////
1:     public static final TimestampSerializer instance = new TimestampSerializer();
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.type;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.nio.ByteBuffer;
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: 
0: public class DateSerializer extends AbstractSerializer<Date>
1: {
0:     public static final String[] iso8601Patterns = new String[] {
1:             "yyyy-MM-dd HH:mm",
1:             "yyyy-MM-dd HH:mm:ss",
0:             "yyyy-MM-dd HH:mmZ",
0:             "yyyy-MM-dd HH:mm:ssZ",
1:             "yyyy-MM-dd'T'HH:mm",
0:             "yyyy-MM-dd'T'HH:mmZ",
1:             "yyyy-MM-dd'T'HH:mm:ss",
0:             "yyyy-MM-dd'T'HH:mm:ssZ",
1:             "yyyy-MM-dd",
0:             "yyyy-MM-ddZ"
1:     };
1: 
0:     static final String DEFAULT_FORMAT = iso8601Patterns[3];
1: 
0:     static final ThreadLocal<SimpleDateFormat> FORMATTER = new ThreadLocal<SimpleDateFormat>()
1:     {
1:         protected SimpleDateFormat initialValue()
1:         {
1:             return new SimpleDateFormat(DEFAULT_FORMAT);
1:         }
1:     };
1: 
0:     public static final DateSerializer instance = new DateSerializer();
1: 
0:     @Override
0:     public Date serialize(ByteBuffer bytes)
1:     {
0:         return bytes.remaining() > 0
0:                 ? new Date(ByteBufferUtil.toLong(bytes))
0:                 : null;
1:     }
1: 
0:     @Override
0:     public ByteBuffer deserialize(Date value)
1:     {
0:         return (value == null)
0:                 ? ByteBufferUtil.EMPTY_BYTE_BUFFER
0:                 : ByteBufferUtil.bytes(value.getTime());
1:     }
1: 
0:     @Override
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (bytes.remaining() != 8 && bytes.remaining() != 0)
1:             throw new MarshalException(String.format("Expected 8 or 0 byte long for date (%d)", bytes.remaining()));
1:     }
1: 
0:     @Override
0:     public String getString(ByteBuffer bytes)
1:     {
0:         if (bytes.remaining() == 0)
1:         {
0:             return "";
1:         }
0:         if (bytes.remaining() != 8)
1:         {
0:             throw new MarshalException("A date is exactly 8 bytes (stored as a long): " + bytes.remaining());
1:         }
1: 
0:         // uses ISO-8601 formatted string
0:         return FORMATTER.get().format(new Date(ByteBufferUtil.toLong(bytes)));
1:     }
1: 
0:     @Override
1:     public String toString(Date value)
1:     {
0:         return FORMATTER.get().format(value);
1:     }
1: 
0:     @Override
1:     public Class<Date> getType()
1:     {
1:         return Date.class;
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:9aebf9d
/////////////////////////////////////////////////////////////////////////
0:             "yyyy-MM-dd HH:mm:ss.SSS",
0:             "yyyy-MM-dd HH:mm:ss.SSSZ",
1:             "yyyy-MM-dd'T'HH:mm:ss.SSS",
0:             "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
============================================================================