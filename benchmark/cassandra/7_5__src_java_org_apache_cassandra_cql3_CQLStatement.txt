1:655ccc3: /*
1:655ccc3:  * Licensed to the Apache Software Foundation (ASF) under one
1:655ccc3:  * or more contributor license agreements.  See the NOTICE file
1:655ccc3:  * distributed with this work for additional information
1:655ccc3:  * regarding copyright ownership.  The ASF licenses this file
1:655ccc3:  * to you under the Apache License, Version 2.0 (the
1:655ccc3:  * "License"); you may not use this file except in compliance
1:655ccc3:  * with the License.  You may obtain a copy of the License at
1:655ccc3:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:655ccc3:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:655ccc3:  */
1:655ccc3: package org.apache.cassandra.cql3;
1:c74a871: 
1:cb5897f: import org.apache.cassandra.cql3.functions.Function;
1:cb5897f: import org.apache.cassandra.exceptions.*;
1:655ccc3: import org.apache.cassandra.service.ClientState;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:cb5897f: import org.apache.cassandra.transport.messages.ResultMessage;
5:655ccc3: 
1:e10eb19: public interface CQLStatement
3:655ccc3: {
1:c74a871:     /**
1:e10eb19:      * Returns the number of bound terms in this statement.
1:e10eb19:      */
1:b97c523:     public int getBoundTerms();
1:655ccc3: 
1:e10eb19:     /**
1:655ccc3:      * Perform any access verification necessary for the statement.
1:c74a871:      *
1:c74a871:      * @param state the current client state
1:c74a871:      */
1:3a2faf9:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException;
1:655ccc3: 
1:655ccc3:     /**
1:655ccc3:      * Perform additional validation required by the statment.
1:655ccc3:      * To be overriden by subclasses if needed.
1:655ccc3:      *
3:655ccc3:      * @param state the current client state
1:655ccc3:      */
1:3a2faf9:     public void validate(ClientState state) throws RequestValidationException;
1:655ccc3: 
1:655ccc3:     /**
1:655ccc3:      * Execute the statement and return the resulting result or null if there is no result.
1:655ccc3:      *
1:45b4fd8:      * @param state the current query state
1:bfd73be:      * @param options options for this query (consistency, variables, pageSize, ...)
1:aa83c94:      * @param queryStartNanoTime the timestamp returned by System.nanoTime() when this statement was received
1:655ccc3:      */
1:aa83c94:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException;
1:b4d7f3b: 
1:655ccc3:     /**
1:d9836e0:      * Variant of execute used for internal query against the system tables, and thus only query the local node.
1:655ccc3:      *
1:45b4fd8:      * @param state the current query state
1:655ccc3:      */
1:1147ee3:     public ResultMessage executeInternal(QueryState state, QueryOptions options) throws RequestValidationException, RequestExecutionException;
1:cb5897f: 
1:d9836e0:     /**
1:d9836e0:      * Return an Iterable over all of the functions (both native and user-defined) used by any component
1:d9836e0:      * of the statement
1:d9836e0:      * @return functions all functions found (may contain duplicates)
1:d9836e0:      */
1:cb5897f:     public Iterable<Function> getFunctions();
3:655ccc3: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:      * @param queryStartNanoTime the timestamp returned by System.nanoTime() when this statement was received
1:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException;
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:d9836e0
/////////////////////////////////////////////////////////////////////////
1:      * Variant of execute used for internal query against the system tables, and thus only query the local node.
1:     /**
1:      * Return an Iterable over all of the functions (both native and user-defined) used by any component
1:      * of the statement
1:      * @return functions all functions found (may contain duplicates)
1:      */
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.functions.Function;
1: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.transport.messages.ResultMessage;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Iterable<Function> getFunctions();
author:Robert Stupp
-------------------------------------------------------------------------------
commit:b4d7f3b
/////////////////////////////////////////////////////////////////////////
1: 
0:     boolean usesFunction(String ksName, String functionName);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:1147ee3
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage executeInternal(QueryState state, QueryOptions options) throws RequestValidationException, RequestExecutionException;
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param options options for this query (consistency, variables, pageSize, ...)
0:     public ResultMessage execute(QueryState state, QueryOptions options) throws RequestValidationException, RequestExecutionException;
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.pager.PagingState;
/////////////////////////////////////////////////////////////////////////
0:      * @param pageState the paging state for paged query. All statement except Select should ignore
0:      * that value.
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables, int pageSize, PagingState pageState) throws RequestValidationException, RequestExecutionException;
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:      * @param cl the consistency level for the query
0:      * @param pageSize the initial page size for the result set potentially returned. A negative value
0:      * means no paging needs to be done. Statements that do not return result sets can ignore this value.
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables, int pageSize) throws RequestValidationException, RequestExecutionException;
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.QueryState;
/////////////////////////////////////////////////////////////////////////
1:      * @param state the current query state
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables) throws RequestValidationException, RequestExecutionException;
1:      * @param state the current query state
0:     public ResultMessage executeInternal(QueryState state) throws RequestValidationException, RequestExecutionException;
commit:297f530
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ConsistencyLevel;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, ClientState state, List<ByteBuffer> variables) throws RequestValidationException, RequestExecutionException;
commit:c74a871
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Variante of execute used for internal query against the system tables, and thus only query the local node.
1:      *
1:      * @param state the current client state
1:      */
0:     public ResultMessage executeInternal(ClientState state) throws RequestValidationException, RequestExecutionException;
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.*;
/////////////////////////////////////////////////////////////////////////
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException;
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state) throws RequestValidationException;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ClientState state, List<ByteBuffer> variables) throws RequestValidationException, RequestExecutionException;
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.messages.ResultMessage;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ClientState state, List<ByteBuffer> variables) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException;
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:e10eb19
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.utils.Pair;
1: public interface CQLStatement
1:     /**
1:      * Returns the number of bound terms in this statement.
1:      */
0:     public int getBoundsTerms();
0:     public void checkAccess(ClientState state) throws InvalidRequestException;
/////////////////////////////////////////////////////////////////////////
0:     public void validate(ClientState state) throws InvalidRequestException, SchemaDisagreementException;
/////////////////////////////////////////////////////////////////////////
0:     public CqlResult execute(ClientState state, List<ByteBuffer> variables) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException;
commit:655ccc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.List;
1: 
1: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.thrift.CqlResult;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: import org.apache.cassandra.thrift.SchemaDisagreementException;
0: import org.apache.cassandra.thrift.TimedOutException;
0: import org.apache.cassandra.thrift.UnavailableException;
1: 
0: public abstract class CQLStatement
1: {
0:     private int boundTerms;
1: 
0:     public int getBoundsTerms()
1:     {
0:         return boundTerms;
1:     }
1: 
0:     // Used by the parser and preparable statement
0:     public void setBoundTerms(int boundTerms)
1:     {
0:         this.boundTerms = boundTerms;
1:     }
1: 
1:     /**
1:      * Perform any access verification necessary for the statement.
1:      *
1:      * @param state the current client state
1:      */
0:     public abstract void checkAccess(ClientState state) throws InvalidRequestException;
1: 
1:     /**
1:      * Perform additional validation required by the statment.
1:      * To be overriden by subclasses if needed.
1:      *
1:      * @param state the current client state
1:      */
0:     public void validate(ClientState state) throws InvalidRequestException, SchemaDisagreementException
0:     {}
1: 
1:     /**
1:      * Execute the statement and return the resulting result or null if there is no result.
1:      *
1:      * @param state the current client state
0:      * @param variables the values for bounded variables. The implementation
0:      * can assume that each bound term have a corresponding value.
1:      */
0:     public abstract CqlResult execute(ClientState state, List<ByteBuffer> variables) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException;
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b1435ff
commit:b97c523
/////////////////////////////////////////////////////////////////////////
1:     public int getBoundTerms();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:71f5d91
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void validate(ClientState state) throws InvalidRequestException;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ClientState state, List<ByteBuffer> variables) throws InvalidRequestException, UnavailableException, TimedOutException;
============================================================================