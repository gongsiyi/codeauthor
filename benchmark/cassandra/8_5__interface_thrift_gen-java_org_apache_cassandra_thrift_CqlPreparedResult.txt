1:e15f3aa: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:e15f3aa:  *
1:e15f3aa:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:e15f3aa:  */
1:e15f3aa: package org.apache.cassandra.thrift;
1:e15f3aa: /*
1:e15f3aa:  * 
1:e15f3aa:  * Licensed to the Apache Software Foundation (ASF) under one
1:e15f3aa:  * or more contributor license agreements.  See the NOTICE file
1:e15f3aa:  * distributed with this work for additional information
1:e15f3aa:  * regarding copyright ownership.  The ASF licenses this file
1:e15f3aa:  * to you under the Apache License, Version 2.0 (the
1:e15f3aa:  * "License"); you may not use this file except in compliance
1:e15f3aa:  * with the License.  You may obtain a copy of the License at
1:e15f3aa:  * 
1:e15f3aa:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e15f3aa:  * 
1:e15f3aa:  * Unless required by applicable law or agreed to in writing,
1:e15f3aa:  * software distributed under the License is distributed on an
1:e15f3aa:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e15f3aa:  * KIND, either express or implied.  See the License for the
1:e15f3aa:  * specific language governing permissions and limitations
1:e15f3aa:  * under the License.
1:e15f3aa:  * 
1:e15f3aa:  */
4:e15f3aa: 
1:e15f3aa: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:b153d45: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:e15f3aa: import java.util.List;
1:e15f3aa: import java.util.ArrayList;
1:e15f3aa: import java.util.Map;
1:e15f3aa: import java.util.HashMap;
1:e15f3aa: import java.util.EnumMap;
1:e15f3aa: import java.util.Set;
1:e15f3aa: import java.util.HashSet;
1:e15f3aa: import java.util.EnumSet;
1:e15f3aa: import java.util.Collections;
1:e15f3aa: import java.util.BitSet;
1:e15f3aa: import java.nio.ByteBuffer;
1:e15f3aa: import java.util.Arrays;
1:e15f3aa: import org.slf4j.Logger;
1:e15f3aa: import org.slf4j.LoggerFactory;
1:e15f3aa: 
1:bffd9ea: public class CqlPreparedResult implements org.apache.thrift.TBase<CqlPreparedResult, CqlPreparedResult._Fields>, java.io.Serializable, Cloneable, Comparable<CqlPreparedResult> {
1:e15f3aa:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlPreparedResult");
1:e15f3aa: 
1:e15f3aa:   private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
1:e15f3aa:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
1:e10eb19:   private static final org.apache.thrift.protocol.TField VARIABLE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_types", org.apache.thrift.protocol.TType.LIST, (short)3);
1:a0e0e2c:   private static final org.apache.thrift.protocol.TField VARIABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_names", org.apache.thrift.protocol.TType.LIST, (short)4);
1:e15f3aa: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new CqlPreparedResultStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new CqlPreparedResultTupleSchemeFactory());
1:b153d45:   }
1:b153d45: 
1:7c8c570:   public int itemId; // required
1:7c8c570:   public int count; // required
1:b153d45:   public List<String> variable_types; // optional
1:b153d45:   public List<String> variable_names; // optional
1:e15f3aa: 
1:e15f3aa:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:e15f3aa:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:e15f3aa:     ITEM_ID((short)1, "itemId"),
1:e10eb19:     COUNT((short)2, "count"),
1:a0e0e2c:     VARIABLE_TYPES((short)3, "variable_types"),
1:a0e0e2c:     VARIABLE_NAMES((short)4, "variable_names");
1:e15f3aa: 
1:e15f3aa:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:e15f3aa: 
1:e15f3aa:     static {
1:e15f3aa:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:e15f3aa:         byName.put(field.getFieldName(), field);
24:e15f3aa:       }
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     /**
1:e15f3aa:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:e15f3aa:      */
1:e15f3aa:     public static _Fields findByThriftId(int fieldId) {
1:e15f3aa:       switch(fieldId) {
2:e15f3aa:         case 1: // ITEM_ID
1:e15f3aa:           return ITEM_ID;
2:e15f3aa:         case 2: // COUNT
1:e15f3aa:           return COUNT;
1:e10eb19:         case 3: // VARIABLE_TYPES
1:e10eb19:           return VARIABLE_TYPES;
1:a0e0e2c:         case 4: // VARIABLE_NAMES
1:a0e0e2c:           return VARIABLE_NAMES;
2:e15f3aa:         default:
1:e15f3aa:           return null;
1:e15f3aa:       }
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     /**
1:e15f3aa:      * Find the _Fields constant that matches fieldId, throwing an exception
1:e15f3aa:      * if it is not found.
1:e15f3aa:      */
1:e15f3aa:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:e15f3aa:       _Fields fields = findByThriftId(fieldId);
1:e15f3aa:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:e15f3aa:       return fields;
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     /**
1:e15f3aa:      * Find the _Fields constant that matches name, or null if its not found.
1:e15f3aa:      */
1:e15f3aa:     public static _Fields findByName(String name) {
1:e15f3aa:       return byName.get(name);
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     private final short _thriftId;
1:e15f3aa:     private final String _fieldName;
1:e15f3aa: 
1:e15f3aa:     _Fields(short thriftId, String fieldName) {
1:e15f3aa:       _thriftId = thriftId;
1:e15f3aa:       _fieldName = fieldName;
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     public short getThriftFieldId() {
1:e15f3aa:       return _thriftId;
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     public String getFieldName() {
1:e15f3aa:       return _fieldName;
1:e15f3aa:     }
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   // isset id assignments
1:e15f3aa:   private static final int __ITEMID_ISSET_ID = 0;
1:e15f3aa:   private static final int __COUNT_ISSET_ID = 1;
1:b153d45:   private byte __isset_bitfield = 0;
1:b153d45:   private _Fields optionals[] = {_Fields.VARIABLE_TYPES,_Fields.VARIABLE_NAMES};
1:e15f3aa:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:e15f3aa:   static {
1:e15f3aa:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:e15f3aa:     tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:e15f3aa:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:e15f3aa:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:e15f3aa:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:e10eb19:     tmpMap.put(_Fields.VARIABLE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("variable_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:e10eb19:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:e10eb19:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:a0e0e2c:     tmpMap.put(_Fields.VARIABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("variable_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:a0e0e2c:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:a0e0e2c:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:e15f3aa:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:e15f3aa:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlPreparedResult.class, metaDataMap);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public CqlPreparedResult() {
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public CqlPreparedResult(
1:e15f3aa:     int itemId,
1:e15f3aa:     int count)
8:b153d45:   {
1:e15f3aa:     this();
1:e15f3aa:     this.itemId = itemId;
2:e15f3aa:     setItemIdIsSet(true);
1:e15f3aa:     this.count = count;
2:e15f3aa:     setCountIsSet(true);
1:a0e0e2c:   }
1:e15f3aa: 
1:e15f3aa:   /**
1:e15f3aa:    * Performs a deep copy on <i>other</i>.
1:e15f3aa:    */
1:e15f3aa:   public CqlPreparedResult(CqlPreparedResult other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:e15f3aa:     this.itemId = other.itemId;
1:e15f3aa:     this.count = other.count;
1:e10eb19:     if (other.isSetVariable_types()) {
1:bffd9ea:       List<String> __this__variable_types = new ArrayList<String>(other.variable_types);
1:e10eb19:       this.variable_types = __this__variable_types;
1:a0e0e2c:     }
1:a0e0e2c:     if (other.isSetVariable_names()) {
1:bffd9ea:       List<String> __this__variable_names = new ArrayList<String>(other.variable_names);
1:a0e0e2c:       this.variable_names = __this__variable_names;
1:a0e0e2c:     }
1:e10eb19:   }
1:e15f3aa: 
1:e15f3aa:   public CqlPreparedResult deepCopy() {
1:e15f3aa:     return new CqlPreparedResult(this);
1:e10eb19:   }
1:e15f3aa: 
1:e15f3aa:   @Override
1:e15f3aa:   public void clear() {
1:e15f3aa:     setItemIdIsSet(false);
1:e15f3aa:     this.itemId = 0;
1:e15f3aa:     setCountIsSet(false);
1:e15f3aa:     this.count = 0;
1:e10eb19:     this.variable_types = null;
1:a0e0e2c:     this.variable_names = null;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public int getItemId() {
1:e15f3aa:     return this.itemId;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public CqlPreparedResult setItemId(int itemId) {
1:e15f3aa:     this.itemId = itemId;
1:e15f3aa:     setItemIdIsSet(true);
1:e15f3aa:     return this;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public void unsetItemId() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
1:e15f3aa:   public boolean isSetItemId() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public void setItemIdIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public int getCount() {
1:e15f3aa:     return this.count;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public CqlPreparedResult setCount(int count) {
1:e15f3aa:     this.count = count;
1:e15f3aa:     setCountIsSet(true);
1:e15f3aa:     return this;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public void unsetCount() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:e15f3aa:   public boolean isSetCount() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public void setCountIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
1:e15f3aa:   }
1:e15f3aa: 
1:e10eb19:   public int getVariable_typesSize() {
1:e10eb19:     return (this.variable_types == null) ? 0 : this.variable_types.size();
1:e10eb19:   }
1:e10eb19: 
1:e10eb19:   public java.util.Iterator<String> getVariable_typesIterator() {
1:e10eb19:     return (this.variable_types == null) ? null : this.variable_types.iterator();
1:e10eb19:   }
1:e10eb19: 
1:e10eb19:   public void addToVariable_types(String elem) {
1:e10eb19:     if (this.variable_types == null) {
1:e10eb19:       this.variable_types = new ArrayList<String>();
1:e10eb19:     }
1:e10eb19:     this.variable_types.add(elem);
1:e10eb19:   }
1:e10eb19: 
1:e10eb19:   public List<String> getVariable_types() {
1:e10eb19:     return this.variable_types;
1:e10eb19:   }
1:e10eb19: 
1:e10eb19:   public CqlPreparedResult setVariable_types(List<String> variable_types) {
1:e10eb19:     this.variable_types = variable_types;
1:e10eb19:     return this;
1:e10eb19:   }
1:e10eb19: 
1:e10eb19:   public void unsetVariable_types() {
1:e10eb19:     this.variable_types = null;
1:e10eb19:   }
1:e10eb19: 
1:e10eb19:   /** Returns true if field variable_types is set (has been assigned a value) and false otherwise */
1:e10eb19:   public boolean isSetVariable_types() {
1:e10eb19:     return this.variable_types != null;
1:e10eb19:   }
1:e10eb19: 
1:e10eb19:   public void setVariable_typesIsSet(boolean value) {
1:e10eb19:     if (!value) {
1:e10eb19:       this.variable_types = null;
1:e10eb19:     }
1:e10eb19:   }
1:e10eb19: 
1:a0e0e2c:   public int getVariable_namesSize() {
1:a0e0e2c:     return (this.variable_names == null) ? 0 : this.variable_names.size();
1:a0e0e2c:   }
1:a0e0e2c: 
1:a0e0e2c:   public java.util.Iterator<String> getVariable_namesIterator() {
1:a0e0e2c:     return (this.variable_names == null) ? null : this.variable_names.iterator();
1:a0e0e2c:   }
1:a0e0e2c: 
1:a0e0e2c:   public void addToVariable_names(String elem) {
1:a0e0e2c:     if (this.variable_names == null) {
1:a0e0e2c:       this.variable_names = new ArrayList<String>();
1:a0e0e2c:     }
1:a0e0e2c:     this.variable_names.add(elem);
1:a0e0e2c:   }
1:a0e0e2c: 
1:a0e0e2c:   public List<String> getVariable_names() {
1:a0e0e2c:     return this.variable_names;
1:a0e0e2c:   }
1:a0e0e2c: 
1:a0e0e2c:   public CqlPreparedResult setVariable_names(List<String> variable_names) {
1:a0e0e2c:     this.variable_names = variable_names;
1:a0e0e2c:     return this;
1:a0e0e2c:   }
1:a0e0e2c: 
1:a0e0e2c:   public void unsetVariable_names() {
1:a0e0e2c:     this.variable_names = null;
1:a0e0e2c:   }
1:a0e0e2c: 
1:a0e0e2c:   /** Returns true if field variable_names is set (has been assigned a value) and false otherwise */
1:a0e0e2c:   public boolean isSetVariable_names() {
1:a0e0e2c:     return this.variable_names != null;
1:a0e0e2c:   }
1:a0e0e2c: 
1:a0e0e2c:   public void setVariable_namesIsSet(boolean value) {
1:a0e0e2c:     if (!value) {
1:a0e0e2c:       this.variable_names = null;
1:a0e0e2c:     }
1:a0e0e2c:   }
1:a0e0e2c: 
1:e15f3aa:   public void setFieldValue(_Fields field, Object value) {
1:e15f3aa:     switch (field) {
1:e15f3aa:     case ITEM_ID:
1:e15f3aa:       if (value == null) {
1:e15f3aa:         unsetItemId();
1:b153d45:       } else {
1:e15f3aa:         setItemId((Integer)value);
1:e15f3aa:       }
1:b153d45:       break;
1:e15f3aa: 
1:e15f3aa:     case COUNT:
1:e15f3aa:       if (value == null) {
1:e15f3aa:         unsetCount();
1:b153d45:       } else {
1:e15f3aa:         setCount((Integer)value);
1:a0e0e2c:       }
1:b153d45:       break;
1:e15f3aa: 
1:e10eb19:     case VARIABLE_TYPES:
1:e10eb19:       if (value == null) {
1:e10eb19:         unsetVariable_types();
1:e10eb19:       } else {
1:e10eb19:         setVariable_types((List<String>)value);
1:e10eb19:       }
1:e10eb19:       break;
1:e10eb19: 
1:a0e0e2c:     case VARIABLE_NAMES:
1:a0e0e2c:       if (value == null) {
1:a0e0e2c:         unsetVariable_names();
1:a0e0e2c:       } else {
1:a0e0e2c:         setVariable_names((List<String>)value);
1:a0e0e2c:       }
1:a0e0e2c:       break;
1:a0e0e2c: 
1:e10eb19:     }
1:b153d45:   }
1:e15f3aa: 
1:e15f3aa:   public Object getFieldValue(_Fields field) {
1:e15f3aa:     switch (field) {
1:e15f3aa:     case ITEM_ID:
1:7c8c570:       return Integer.valueOf(getItemId());
1:e15f3aa: 
1:e15f3aa:     case COUNT:
1:7c8c570:       return Integer.valueOf(getCount());
1:e15f3aa: 
1:e10eb19:     case VARIABLE_TYPES:
1:e10eb19:       return getVariable_types();
1:e10eb19: 
1:a0e0e2c:     case VARIABLE_NAMES:
1:a0e0e2c:       return getVariable_names();
1:a0e0e2c: 
1:b153d45:     }
1:e15f3aa:     throw new IllegalStateException();
1:b153d45:   }
1:e15f3aa: 
1:e15f3aa:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:e15f3aa:   public boolean isSet(_Fields field) {
1:e15f3aa:     if (field == null) {
1:e15f3aa:       throw new IllegalArgumentException();
1:b153d45:     }
1:e15f3aa: 
1:e15f3aa:     switch (field) {
1:e15f3aa:     case ITEM_ID:
1:e15f3aa:       return isSetItemId();
1:e15f3aa:     case COUNT:
1:e15f3aa:       return isSetCount();
1:e10eb19:     case VARIABLE_TYPES:
1:e10eb19:       return isSetVariable_types();
1:a0e0e2c:     case VARIABLE_NAMES:
1:a0e0e2c:       return isSetVariable_names();
1:b153d45:     }
1:e15f3aa:     throw new IllegalStateException();
1:b153d45:   }
1:e15f3aa: 
1:e15f3aa:   @Override
1:e15f3aa:   public boolean equals(Object that) {
1:e15f3aa:     if (that == null)
1:e15f3aa:       return false;
1:e15f3aa:     if (that instanceof CqlPreparedResult)
1:e15f3aa:       return this.equals((CqlPreparedResult)that);
1:e15f3aa:     return false;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public boolean equals(CqlPreparedResult that) {
1:e15f3aa:     if (that == null)
1:e15f3aa:       return false;
1:e15f3aa: 
1:e15f3aa:     boolean this_present_itemId = true;
1:e15f3aa:     boolean that_present_itemId = true;
1:e15f3aa:     if (this_present_itemId || that_present_itemId) {
1:e15f3aa:       if (!(this_present_itemId && that_present_itemId))
1:e15f3aa:         return false;
1:e15f3aa:       if (this.itemId != that.itemId)
1:e15f3aa:         return false;
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     boolean this_present_count = true;
1:e15f3aa:     boolean that_present_count = true;
1:e15f3aa:     if (this_present_count || that_present_count) {
1:e15f3aa:       if (!(this_present_count && that_present_count))
1:e15f3aa:         return false;
1:e15f3aa:       if (this.count != that.count)
1:e15f3aa:         return false;
1:e15f3aa:     }
1:e15f3aa: 
1:e10eb19:     boolean this_present_variable_types = true && this.isSetVariable_types();
1:e10eb19:     boolean that_present_variable_types = true && that.isSetVariable_types();
1:e10eb19:     if (this_present_variable_types || that_present_variable_types) {
1:e10eb19:       if (!(this_present_variable_types && that_present_variable_types))
1:e10eb19:         return false;
1:e10eb19:       if (!this.variable_types.equals(that.variable_types))
1:e10eb19:         return false;
1:e10eb19:     }
1:e10eb19: 
1:a0e0e2c:     boolean this_present_variable_names = true && this.isSetVariable_names();
1:a0e0e2c:     boolean that_present_variable_names = true && that.isSetVariable_names();
1:a0e0e2c:     if (this_present_variable_names || that_present_variable_names) {
1:a0e0e2c:       if (!(this_present_variable_names && that_present_variable_names))
1:a0e0e2c:         return false;
1:a0e0e2c:       if (!this.variable_names.equals(that.variable_names))
1:a0e0e2c:         return false;
1:a0e0e2c:     }
1:a0e0e2c: 
1:e15f3aa:     return true;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   @Override
1:e15f3aa:   public int hashCode() {
1:e15f3aa:     HashCodeBuilder builder = new HashCodeBuilder();
1:e15f3aa: 
1:e15f3aa:     boolean present_itemId = true;
1:e15f3aa:     builder.append(present_itemId);
1:e15f3aa:     if (present_itemId)
1:e15f3aa:       builder.append(itemId);
1:e15f3aa: 
1:e15f3aa:     boolean present_count = true;
1:e15f3aa:     builder.append(present_count);
1:e15f3aa:     if (present_count)
1:e15f3aa:       builder.append(count);
1:e15f3aa: 
1:e10eb19:     boolean present_variable_types = true && (isSetVariable_types());
1:e10eb19:     builder.append(present_variable_types);
1:e10eb19:     if (present_variable_types)
1:e10eb19:       builder.append(variable_types);
1:e10eb19: 
1:a0e0e2c:     boolean present_variable_names = true && (isSetVariable_names());
1:a0e0e2c:     builder.append(present_variable_names);
1:a0e0e2c:     if (present_variable_names)
1:a0e0e2c:       builder.append(variable_names);
1:a0e0e2c: 
1:e15f3aa:     return builder.toHashCode();
1:e15f3aa:   }
1:e15f3aa: 
1:bffd9ea:   @Override
1:e15f3aa:   public int compareTo(CqlPreparedResult other) {
1:e15f3aa:     if (!getClass().equals(other.getClass())) {
1:e15f3aa:       return getClass().getName().compareTo(other.getClass().getName());
1:e15f3aa:     }
1:e15f3aa: 
1:e15f3aa:     int lastComparison = 0;
1:e15f3aa: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
1:e15f3aa:     if (lastComparison != 0) {
1:e15f3aa:       return lastComparison;
1:a0e0e2c:     }
1:e15f3aa:     if (isSetItemId()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
1:a0e0e2c:       if (lastComparison != 0) {
1:a0e0e2c:         return lastComparison;
1:e10eb19:       }
1:e15f3aa:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:e10eb19:     if (lastComparison != 0) {
1:e10eb19:       return lastComparison;
1:e15f3aa:     }
1:e15f3aa:     if (isSetCount()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:e15f3aa:       if (lastComparison != 0) {
1:e15f3aa:         return lastComparison;
1:e15f3aa:       }
1:e15f3aa:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetVariable_types()).compareTo(other.isSetVariable_types());
1:e15f3aa:     if (lastComparison != 0) {
1:e15f3aa:       return lastComparison;
1:e15f3aa:     }
1:e10eb19:     if (isSetVariable_types()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_types, other.variable_types);
1:e10eb19:       if (lastComparison != 0) {
1:e10eb19:         return lastComparison;
1:e10eb19:       }
1:e10eb19:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetVariable_names()).compareTo(other.isSetVariable_names());
1:e15f3aa:     if (lastComparison != 0) {
1:e15f3aa:       return lastComparison;
1:e15f3aa:     }
1:a0e0e2c:     if (isSetVariable_names()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_names, other.variable_names);
1:a0e0e2c:       if (lastComparison != 0) {
1:a0e0e2c:         return lastComparison;
1:a0e0e2c:       }
1:a0e0e2c:     }
1:e15f3aa:     return 0;
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public _Fields fieldForId(int fieldId) {
1:e15f3aa:     return _Fields.findByThriftId(fieldId);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   @Override
1:e15f3aa:   public String toString() {
1:e15f3aa:     StringBuilder sb = new StringBuilder("CqlPreparedResult(");
1:e15f3aa:     boolean first = true;
1:e15f3aa: 
1:e15f3aa:     sb.append("itemId:");
1:e15f3aa:     sb.append(this.itemId);
1:e15f3aa:     first = false;
1:a0e0e2c:     if (!first) sb.append(", ");
1:e15f3aa:     sb.append("count:");
1:e15f3aa:     sb.append(this.count);
1:e15f3aa:     first = false;
1:e10eb19:     if (isSetVariable_types()) {
1:e10eb19:       if (!first) sb.append(", ");
1:e10eb19:       sb.append("variable_types:");
1:e10eb19:       if (this.variable_types == null) {
1:e10eb19:         sb.append("null");
1:e10eb19:       } else {
1:e10eb19:         sb.append(this.variable_types);
1:e10eb19:       }
1:e10eb19:       first = false;
1:e10eb19:     }
1:a0e0e2c:     if (isSetVariable_names()) {
1:e15f3aa:       if (!first) sb.append(", ");
1:a0e0e2c:       sb.append("variable_names:");
1:a0e0e2c:       if (this.variable_names == null) {
1:a0e0e2c:         sb.append("null");
1:a0e0e2c:       } else {
1:a0e0e2c:         sb.append(this.variable_names);
1:a0e0e2c:       }
1:a0e0e2c:       first = false;
1:a0e0e2c:     }
1:e15f3aa:     sb.append(")");
1:e15f3aa:     return sb.toString();
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   public void validate() throws org.apache.thrift.TException {
1:e15f3aa:     // check for required fields
1:e15f3aa:     // alas, we cannot check 'itemId' because it's a primitive and you chose the non-beans generator.
1:e15f3aa:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:b153d45:     // check for sub-struct validity
1:e15f3aa:   }
1:e15f3aa: 
1:e15f3aa:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e15f3aa:     try {
1:e15f3aa:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e15f3aa:     } catch (org.apache.thrift.TException te) {
1:e15f3aa:       throw new java.io.IOException(te);
1:b153d45:     }
1:b153d45:   }
1:e15f3aa: 
1:e15f3aa:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e15f3aa:     try {
1:e15f3aa:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e15f3aa:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e15f3aa:     } catch (org.apache.thrift.TException te) {
1:e15f3aa:       throw new java.io.IOException(te);
1:b153d45:     }
1:b153d45:   }
1:e15f3aa: 
1:b153d45:   private static class CqlPreparedResultStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlPreparedResultStandardScheme getScheme() {
1:b153d45:       return new CqlPreparedResultStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlPreparedResultStandardScheme extends StandardScheme<CqlPreparedResult> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:a0e0e2c:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b153d45:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:b153d45:           case 1: // ITEM_ID
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.itemId = iprot.readI32();
1:b153d45:               struct.setItemIdIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 2: // COUNT
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.count = iprot.readI32();
1:b153d45:               struct.setCountIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:e10eb19:           case 3: // VARIABLE_TYPES
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:a0e0e2c:               {
1:a965977:                 org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
1:a965977:                 struct.variable_types = new ArrayList<String>(_list200.size);
1:a965977:                 for (int _i201 = 0; _i201 < _list200.size; ++_i201)
1:e10eb19:                 {
1:bffd9ea:                   String _elem202;
1:a965977:                   _elem202 = iprot.readString();
1:a965977:                   struct.variable_types.add(_elem202);
1:b153d45:                 }
1:a0e0e2c:                 iprot.readListEnd();
1:a0e0e2c:               }
1:b153d45:               struct.setVariable_typesIsSet(true);
1:a0e0e2c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:a0e0e2c:             }
1:a0e0e2c:             break;
1:a0e0e2c:           case 4: // VARIABLE_NAMES
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:e10eb19:               {
1:a965977:                 org.apache.thrift.protocol.TList _list203 = iprot.readListBegin();
1:a965977:                 struct.variable_names = new ArrayList<String>(_list203.size);
1:a965977:                 for (int _i204 = 0; _i204 < _list203.size; ++_i204)
1:b153d45:                 {
1:bffd9ea:                   String _elem205;
1:a965977:                   _elem205 = iprot.readString();
1:a965977:                   struct.variable_names.add(_elem205);
1:e10eb19:                 }
1:e10eb19:                 iprot.readListEnd();
1:e10eb19:               }
1:b153d45:               struct.setVariable_namesIsSet(true);
1:e10eb19:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:e10eb19:             break;
1:b153d45:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:b153d45:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:b153d45:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       if (!struct.isSetItemId()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemId' was not found in serialized data! Struct: " + toString());
1:b153d45:       }
1:b153d45:       if (!struct.isSetCount()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:b153d45:       }
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:b153d45:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
1:b153d45:       oprot.writeI32(struct.itemId);
3:b153d45:       oprot.writeFieldEnd();
1:b153d45:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:b153d45:       oprot.writeI32(struct.count);
1:b153d45:       oprot.writeFieldEnd();
1:b153d45:       if (struct.variable_types != null) {
1:b153d45:         if (struct.isSetVariable_types()) {
1:e10eb19:           oprot.writeFieldBegin(VARIABLE_TYPES_FIELD_DESC);
1:e10eb19:           {
1:b153d45:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variable_types.size()));
1:a965977:             for (String _iter206 : struct.variable_types)
1:e10eb19:             {
1:a965977:               oprot.writeString(_iter206);
1:e10eb19:             }
1:a0e0e2c:             oprot.writeListEnd();
1:a0e0e2c:           }
1:a0e0e2c:           oprot.writeFieldEnd();
1:a0e0e2c:         }
1:a0e0e2c:       }
1:b153d45:       if (struct.variable_names != null) {
1:b153d45:         if (struct.isSetVariable_names()) {
1:a0e0e2c:           oprot.writeFieldBegin(VARIABLE_NAMES_FIELD_DESC);
1:a0e0e2c:           {
1:b153d45:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variable_names.size()));
1:a965977:             for (String _iter207 : struct.variable_names)
1:a0e0e2c:             {
1:a965977:               oprot.writeString(_iter207);
1:e10eb19:             }
1:e10eb19:             oprot.writeListEnd();
1:e10eb19:           }
1:e10eb19:           oprot.writeFieldEnd();
1:e10eb19:         }
1:b153d45:       }
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:b153d45:     }
1:b153d45: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlPreparedResultTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlPreparedResultTupleScheme getScheme() {
1:b153d45:       return new CqlPreparedResultTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlPreparedResultTupleScheme extends TupleScheme<CqlPreparedResult> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeI32(struct.itemId);
1:b153d45:       oprot.writeI32(struct.count);
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetVariable_types()) {
1:b153d45:         optionals.set(0);
1:b153d45:       }
1:b153d45:       if (struct.isSetVariable_names()) {
1:b153d45:         optionals.set(1);
1:b153d45:       }
1:b153d45:       oprot.writeBitSet(optionals, 2);
1:b153d45:       if (struct.isSetVariable_types()) {
1:b153d45:         {
1:b153d45:           oprot.writeI32(struct.variable_types.size());
1:a965977:           for (String _iter208 : struct.variable_types)
1:b153d45:           {
1:a965977:             oprot.writeString(_iter208);
1:b153d45:           }
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.isSetVariable_names()) {
1:b153d45:         {
1:b153d45:           oprot.writeI32(struct.variable_names.size());
1:a965977:           for (String _iter209 : struct.variable_names)
1:b153d45:           {
1:a965977:             oprot.writeString(_iter209);
1:b153d45:           }
1:b153d45:         }
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.itemId = iprot.readI32();
1:b153d45:       struct.setItemIdIsSet(true);
1:b153d45:       struct.count = iprot.readI32();
1:b153d45:       struct.setCountIsSet(true);
1:b153d45:       BitSet incoming = iprot.readBitSet(2);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         {
1:a965977:           org.apache.thrift.protocol.TList _list210 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:a965977:           struct.variable_types = new ArrayList<String>(_list210.size);
1:a965977:           for (int _i211 = 0; _i211 < _list210.size; ++_i211)
1:b153d45:           {
1:bffd9ea:             String _elem212;
1:a965977:             _elem212 = iprot.readString();
1:a965977:             struct.variable_types.add(_elem212);
1:b153d45:           }
1:b153d45:         }
1:b153d45:         struct.setVariable_typesIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         {
1:a965977:           org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:a965977:           struct.variable_names = new ArrayList<String>(_list213.size);
1:a965977:           for (int _i214 = 0; _i214 < _list213.size; ++_i214)
1:b153d45:           {
1:bffd9ea:             String _elem215;
1:a965977:             _elem215 = iprot.readString();
1:a965977:             struct.variable_names.add(_elem215);
1:b153d45:           }
1:b153d45:         }
1:b153d45:         struct.setVariable_namesIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:e15f3aa: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class CqlPreparedResult implements org.apache.thrift.TBase<CqlPreparedResult, CqlPreparedResult._Fields>, java.io.Serializable, Cloneable, Comparable<CqlPreparedResult> {
/////////////////////////////////////////////////////////////////////////
1:       List<String> __this__variable_types = new ArrayList<String>(other.variable_types);
1:       List<String> __this__variable_names = new ArrayList<String>(other.variable_names);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
1:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:     lastComparison = Boolean.valueOf(isSetVariable_types()).compareTo(other.isSetVariable_types());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_types, other.variable_types);
1:     lastComparison = Boolean.valueOf(isSetVariable_names()).compareTo(other.isSetVariable_names());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_names, other.variable_names);
/////////////////////////////////////////////////////////////////////////
1:                   String _elem202;
/////////////////////////////////////////////////////////////////////////
1:                   String _elem205;
/////////////////////////////////////////////////////////////////////////
1:             String _elem212;
/////////////////////////////////////////////////////////////////////////
1:             String _elem215;
commit:a965977
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
1:                 struct.variable_types = new ArrayList<String>(_list200.size);
1:                 for (int _i201 = 0; _i201 < _list200.size; ++_i201)
0:                   String _elem202; // required
1:                   _elem202 = iprot.readString();
1:                   struct.variable_types.add(_elem202);
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TList _list203 = iprot.readListBegin();
1:                 struct.variable_names = new ArrayList<String>(_list203.size);
1:                 for (int _i204 = 0; _i204 < _list203.size; ++_i204)
0:                   String _elem205; // required
1:                   _elem205 = iprot.readString();
1:                   struct.variable_names.add(_elem205);
/////////////////////////////////////////////////////////////////////////
1:             for (String _iter206 : struct.variable_types)
1:               oprot.writeString(_iter206);
/////////////////////////////////////////////////////////////////////////
1:             for (String _iter207 : struct.variable_names)
1:               oprot.writeString(_iter207);
/////////////////////////////////////////////////////////////////////////
1:           for (String _iter208 : struct.variable_types)
1:             oprot.writeString(_iter208);
1:           for (String _iter209 : struct.variable_names)
1:             oprot.writeString(_iter209);
/////////////////////////////////////////////////////////////////////////
1:           org.apache.thrift.protocol.TList _list210 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:           struct.variable_types = new ArrayList<String>(_list210.size);
1:           for (int _i211 = 0; _i211 < _list210.size; ++_i211)
0:             String _elem212; // required
1:             _elem212 = iprot.readString();
1:             struct.variable_types.add(_elem212);
1:           org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:           struct.variable_names = new ArrayList<String>(_list213.size);
1:           for (int _i214 = 0; _i214 < _list213.size; ++_i214)
0:             String _elem215; // required
1:             _elem215 = iprot.readString();
1:             struct.variable_names.add(_elem215);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfe1e1c
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
0:                 struct.variable_types = new ArrayList<String>(_list202.size);
0:                 for (int _i203 = 0; _i203 < _list202.size; ++_i203)
0:                   String _elem204; // required
0:                   _elem204 = iprot.readString();
0:                   struct.variable_types.add(_elem204);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list205 = iprot.readListBegin();
0:                 struct.variable_names = new ArrayList<String>(_list205.size);
0:                 for (int _i206 = 0; _i206 < _list205.size; ++_i206)
0:                   String _elem207; // required
0:                   _elem207 = iprot.readString();
0:                   struct.variable_names.add(_elem207);
/////////////////////////////////////////////////////////////////////////
0:             for (String _iter208 : struct.variable_types)
0:               oprot.writeString(_iter208);
/////////////////////////////////////////////////////////////////////////
0:             for (String _iter209 : struct.variable_names)
0:               oprot.writeString(_iter209);
/////////////////////////////////////////////////////////////////////////
0:           for (String _iter210 : struct.variable_types)
0:             oprot.writeString(_iter210);
0:           for (String _iter211 : struct.variable_names)
0:             oprot.writeString(_iter211);
/////////////////////////////////////////////////////////////////////////
0:           org.apache.thrift.protocol.TList _list212 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_types = new ArrayList<String>(_list212.size);
0:           for (int _i213 = 0; _i213 < _list212.size; ++_i213)
0:             String _elem214; // required
0:             _elem214 = iprot.readString();
0:             struct.variable_types.add(_elem214);
0:           org.apache.thrift.protocol.TList _list215 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_names = new ArrayList<String>(_list215.size);
0:           for (int _i216 = 0; _i216 < _list215.size; ++_i216)
0:             String _elem217; // required
0:             _elem217 = iprot.readString();
0:             struct.variable_names.add(_elem217);
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   String _elem196; // required
/////////////////////////////////////////////////////////////////////////
0:                   String _elem199; // required
/////////////////////////////////////////////////////////////////////////
0:             String _elem206; // required
/////////////////////////////////////////////////////////////////////////
0:             String _elem209; // required
commit:a0e0e2c
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField VARIABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_names", org.apache.thrift.protocol.TType.LIST, (short)4);
0:   public List<String> variable_names; // required
1:     VARIABLE_TYPES((short)3, "variable_types"),
1:     VARIABLE_NAMES((short)4, "variable_names");
/////////////////////////////////////////////////////////////////////////
1:         case 4: // VARIABLE_NAMES
1:           return VARIABLE_NAMES;
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.VARIABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("variable_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetVariable_names()) {
0:       List<String> __this__variable_names = new ArrayList<String>();
0:       for (String other_element : other.variable_names) {
0:         __this__variable_names.add(other_element);
1:       }
1:       this.variable_names = __this__variable_names;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     this.variable_names = null;
/////////////////////////////////////////////////////////////////////////
1:   public int getVariable_namesSize() {
1:     return (this.variable_names == null) ? 0 : this.variable_names.size();
1:   }
1: 
1:   public java.util.Iterator<String> getVariable_namesIterator() {
1:     return (this.variable_names == null) ? null : this.variable_names.iterator();
1:   }
1: 
1:   public void addToVariable_names(String elem) {
1:     if (this.variable_names == null) {
1:       this.variable_names = new ArrayList<String>();
1:     }
1:     this.variable_names.add(elem);
1:   }
1: 
1:   public List<String> getVariable_names() {
1:     return this.variable_names;
1:   }
1: 
1:   public CqlPreparedResult setVariable_names(List<String> variable_names) {
1:     this.variable_names = variable_names;
1:     return this;
1:   }
1: 
1:   public void unsetVariable_names() {
1:     this.variable_names = null;
1:   }
1: 
1:   /** Returns true if field variable_names is set (has been assigned a value) and false otherwise */
1:   public boolean isSetVariable_names() {
1:     return this.variable_names != null;
1:   }
1: 
1:   public void setVariable_namesIsSet(boolean value) {
1:     if (!value) {
1:       this.variable_names = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case VARIABLE_NAMES:
1:       if (value == null) {
1:         unsetVariable_names();
1:       } else {
1:         setVariable_names((List<String>)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case VARIABLE_NAMES:
1:       return getVariable_names();
1: 
/////////////////////////////////////////////////////////////////////////
1:     case VARIABLE_NAMES:
1:       return isSetVariable_names();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_variable_names = true && this.isSetVariable_names();
1:     boolean that_present_variable_names = true && that.isSetVariable_names();
1:     if (this_present_variable_names || that_present_variable_names) {
1:       if (!(this_present_variable_names && that_present_variable_names))
1:         return false;
1:       if (!this.variable_names.equals(that.variable_names))
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_variable_names = true && (isSetVariable_names());
1:     builder.append(present_variable_names);
1:     if (present_variable_names)
1:       builder.append(variable_names);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetVariable_names()).compareTo(typedOther.isSetVariable_names());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetVariable_names()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_names, typedOther.variable_names);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 4: // VARIABLE_NAMES
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
1:             {
0:               org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
0:               this.variable_names = new ArrayList<String>(_list90.size);
0:               for (int _i91 = 0; _i91 < _list90.size; ++_i91)
1:               {
0:                 String _elem92; // required
0:                 _elem92 = iprot.readString();
0:                 this.variable_names.add(_elem92);
1:               }
1:               iprot.readListEnd();
1:             }
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
0:           for (String _iter93 : this.variable_types)
0:             oprot.writeString(_iter93);
1:           }
1:           oprot.writeListEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.variable_names != null) {
1:       if (isSetVariable_names()) {
1:         oprot.writeFieldBegin(VARIABLE_NAMES_FIELD_DESC);
1:         {
0:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.variable_names.size()));
0:           for (String _iter94 : this.variable_names)
1:           {
0:             oprot.writeString(_iter94);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetVariable_names()) {
1:       if (!first) sb.append(", ");
1:       sb.append("variable_names:");
1:       if (this.variable_names == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.variable_names);
1:       }
1:       first = false;
1:     }
commit:1ea2a60
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
0:               this.variable_types = new ArrayList<String>(_list87.size);
0:               for (int _i88 = 0; _i88 < _list87.size; ++_i88)
0:                 String _elem89; // required
0:                 _elem89 = iprot.readString();
0:                 this.variable_types.add(_elem89);
/////////////////////////////////////////////////////////////////////////
0:           for (String _iter90 : this.variable_types)
0:             oprot.writeString(_iter90);
commit:e10eb19
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField VARIABLE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_types", org.apache.thrift.protocol.TType.LIST, (short)3);
0:   public List<String> variable_types; // required
1:     COUNT((short)2, "count"),
0:     VARIABLE_TYPES((short)3, "variable_types");
/////////////////////////////////////////////////////////////////////////
1:         case 3: // VARIABLE_TYPES
1:           return VARIABLE_TYPES;
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.VARIABLE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("variable_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetVariable_types()) {
0:       List<String> __this__variable_types = new ArrayList<String>();
0:       for (String other_element : other.variable_types) {
0:         __this__variable_types.add(other_element);
1:       }
1:       this.variable_types = __this__variable_types;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     this.variable_types = null;
/////////////////////////////////////////////////////////////////////////
1:   public int getVariable_typesSize() {
1:     return (this.variable_types == null) ? 0 : this.variable_types.size();
1:   }
1: 
1:   public java.util.Iterator<String> getVariable_typesIterator() {
1:     return (this.variable_types == null) ? null : this.variable_types.iterator();
1:   }
1: 
1:   public void addToVariable_types(String elem) {
1:     if (this.variable_types == null) {
1:       this.variable_types = new ArrayList<String>();
1:     }
1:     this.variable_types.add(elem);
1:   }
1: 
1:   public List<String> getVariable_types() {
1:     return this.variable_types;
1:   }
1: 
1:   public CqlPreparedResult setVariable_types(List<String> variable_types) {
1:     this.variable_types = variable_types;
1:     return this;
1:   }
1: 
1:   public void unsetVariable_types() {
1:     this.variable_types = null;
1:   }
1: 
1:   /** Returns true if field variable_types is set (has been assigned a value) and false otherwise */
1:   public boolean isSetVariable_types() {
1:     return this.variable_types != null;
1:   }
1: 
1:   public void setVariable_typesIsSet(boolean value) {
1:     if (!value) {
1:       this.variable_types = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case VARIABLE_TYPES:
1:       if (value == null) {
1:         unsetVariable_types();
1:       } else {
1:         setVariable_types((List<String>)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case VARIABLE_TYPES:
1:       return getVariable_types();
1: 
/////////////////////////////////////////////////////////////////////////
1:     case VARIABLE_TYPES:
1:       return isSetVariable_types();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_variable_types = true && this.isSetVariable_types();
1:     boolean that_present_variable_types = true && that.isSetVariable_types();
1:     if (this_present_variable_types || that_present_variable_types) {
1:       if (!(this_present_variable_types && that_present_variable_types))
1:         return false;
1:       if (!this.variable_types.equals(that.variable_types))
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_variable_types = true && (isSetVariable_types());
1:     builder.append(present_variable_types);
1:     if (present_variable_types)
1:       builder.append(variable_types);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetVariable_types()).compareTo(typedOther.isSetVariable_types());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetVariable_types()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_types, typedOther.variable_types);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 3: // VARIABLE_TYPES
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
1:             {
0:               org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
0:               this.variable_types = new ArrayList<String>(_list91.size);
0:               for (int _i92 = 0; _i92 < _list91.size; ++_i92)
1:               {
0:                 String _elem93; // required
0:                 _elem93 = iprot.readString();
0:                 this.variable_types.add(_elem93);
1:               }
1:               iprot.readListEnd();
1:             }
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (this.variable_types != null) {
1:       if (isSetVariable_types()) {
1:         oprot.writeFieldBegin(VARIABLE_TYPES_FIELD_DESC);
1:         {
0:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.variable_types.size()));
0:           for (String _iter94 : this.variable_types)
1:           {
0:             oprot.writeString(_iter94);
1:           }
1:           oprot.writeListEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetVariable_types()) {
1:       if (!first) sb.append(", ");
1:       sb.append("variable_types:");
1:       if (this.variable_types == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.variable_types);
1:       }
1:       first = false;
1:     }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8bf6e15
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
0:                 struct.variable_types = new ArrayList<String>(_list194.size);
0:                 for (int _i195 = 0; _i195 < _list194.size; ++_i195)
0:                   String _elem196; // optional
0:                   _elem196 = iprot.readString();
0:                   struct.variable_types.add(_elem196);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list197 = iprot.readListBegin();
0:                 struct.variable_names = new ArrayList<String>(_list197.size);
0:                 for (int _i198 = 0; _i198 < _list197.size; ++_i198)
0:                   String _elem199; // optional
0:                   _elem199 = iprot.readString();
0:                   struct.variable_names.add(_elem199);
/////////////////////////////////////////////////////////////////////////
0:             for (String _iter200 : struct.variable_types)
0:               oprot.writeString(_iter200);
/////////////////////////////////////////////////////////////////////////
0:             for (String _iter201 : struct.variable_names)
0:               oprot.writeString(_iter201);
/////////////////////////////////////////////////////////////////////////
0:           for (String _iter202 : struct.variable_types)
0:             oprot.writeString(_iter202);
0:           for (String _iter203 : struct.variable_names)
0:             oprot.writeString(_iter203);
/////////////////////////////////////////////////////////////////////////
0:           org.apache.thrift.protocol.TList _list204 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_types = new ArrayList<String>(_list204.size);
0:           for (int _i205 = 0; _i205 < _list204.size; ++_i205)
0:             String _elem206; // optional
0:             _elem206 = iprot.readString();
0:             struct.variable_types.add(_elem206);
0:           org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_names = new ArrayList<String>(_list207.size);
0:           for (int _i208 = 0; _i208 < _list207.size; ++_i208)
0:             String _elem209; // optional
0:             _elem209 = iprot.readString();
0:             struct.variable_names.add(_elem209);
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
0:                 struct.variable_types = new ArrayList<String>(_list182.size);
0:                 for (int _i183 = 0; _i183 < _list182.size; ++_i183)
0:                   String _elem184; // optional
0:                   _elem184 = iprot.readString();
0:                   struct.variable_types.add(_elem184);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list185 = iprot.readListBegin();
0:                 struct.variable_names = new ArrayList<String>(_list185.size);
0:                 for (int _i186 = 0; _i186 < _list185.size; ++_i186)
0:                   String _elem187; // optional
0:                   _elem187 = iprot.readString();
0:                   struct.variable_names.add(_elem187);
/////////////////////////////////////////////////////////////////////////
0:             for (String _iter188 : struct.variable_types)
0:               oprot.writeString(_iter188);
/////////////////////////////////////////////////////////////////////////
0:             for (String _iter189 : struct.variable_names)
0:               oprot.writeString(_iter189);
/////////////////////////////////////////////////////////////////////////
0:           for (String _iter190 : struct.variable_types)
0:             oprot.writeString(_iter190);
0:           for (String _iter191 : struct.variable_names)
0:             oprot.writeString(_iter191);
/////////////////////////////////////////////////////////////////////////
0:           org.apache.thrift.protocol.TList _list192 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_types = new ArrayList<String>(_list192.size);
0:           for (int _i193 = 0; _i193 < _list192.size; ++_i193)
0:             String _elem194; // optional
0:             _elem194 = iprot.readString();
0:             struct.variable_types.add(_elem194);
0:           org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_names = new ArrayList<String>(_list195.size);
0:           for (int _i196 = 0; _i196 < _list195.size; ++_i196)
0:             String _elem197; // optional
0:             _elem197 = iprot.readString();
0:             struct.variable_names.add(_elem197);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new CqlPreparedResultStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new CqlPreparedResultTupleSchemeFactory());
1:   }
1: 
1:   public List<String> variable_types; // optional
1:   public List<String> variable_names; // optional
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.VARIABLE_TYPES,_Fields.VARIABLE_NAMES};
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class CqlPreparedResultStandardSchemeFactory implements SchemeFactory {
1:     public CqlPreparedResultStandardScheme getScheme() {
1:       return new CqlPreparedResultStandardScheme();
1:     }
1:   }
1: 
1:   private static class CqlPreparedResultStandardScheme extends StandardScheme<CqlPreparedResult> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // ITEM_ID
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.itemId = iprot.readI32();
1:               struct.setItemIdIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // COUNT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.count = iprot.readI32();
1:               struct.setCountIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 3: // VARIABLE_TYPES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
0:                 org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
0:                 struct.variable_types = new ArrayList<String>(_list174.size);
0:                 for (int _i175 = 0; _i175 < _list174.size; ++_i175)
1:                 {
0:                   String _elem176; // required
0:                   _elem176 = iprot.readString();
0:                   struct.variable_types.add(_elem176);
1:                 }
0:                 iprot.readListEnd();
1:               }
1:               struct.setVariable_typesIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 4: // VARIABLE_NAMES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
0:                 org.apache.thrift.protocol.TList _list177 = iprot.readListBegin();
0:                 struct.variable_names = new ArrayList<String>(_list177.size);
0:                 for (int _i178 = 0; _i178 < _list177.size; ++_i178)
1:                 {
0:                   String _elem179; // required
0:                   _elem179 = iprot.readString();
0:                   struct.variable_names.add(_elem179);
1:                 }
0:                 iprot.readListEnd();
1:               }
1:               struct.setVariable_namesIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetItemId()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemId' was not found in serialized data! Struct: " + toString());
1:       }
1:       if (!struct.isSetCount()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:       }
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
1:       oprot.writeI32(struct.itemId);
1:       oprot.writeFieldEnd();
1:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:       oprot.writeI32(struct.count);
1:       oprot.writeFieldEnd();
1:       if (struct.variable_types != null) {
1:         if (struct.isSetVariable_types()) {
0:           oprot.writeFieldBegin(VARIABLE_TYPES_FIELD_DESC);
1:           {
1:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variable_types.size()));
0:             for (String _iter180 : struct.variable_types)
1:             {
0:               oprot.writeString(_iter180);
1:             }
0:             oprot.writeListEnd();
1:           }
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.variable_names != null) {
1:         if (struct.isSetVariable_names()) {
0:           oprot.writeFieldBegin(VARIABLE_NAMES_FIELD_DESC);
1:           {
1:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variable_names.size()));
0:             for (String _iter181 : struct.variable_names)
1:             {
0:               oprot.writeString(_iter181);
1:             }
0:             oprot.writeListEnd();
1:           }
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class CqlPreparedResultTupleSchemeFactory implements SchemeFactory {
1:     public CqlPreparedResultTupleScheme getScheme() {
1:       return new CqlPreparedResultTupleScheme();
1:     }
1:   }
1: 
1:   private static class CqlPreparedResultTupleScheme extends TupleScheme<CqlPreparedResult> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeI32(struct.itemId);
1:       oprot.writeI32(struct.count);
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetVariable_types()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetVariable_names()) {
1:         optionals.set(1);
1:       }
1:       oprot.writeBitSet(optionals, 2);
1:       if (struct.isSetVariable_types()) {
1:         {
1:           oprot.writeI32(struct.variable_types.size());
0:           for (String _iter182 : struct.variable_types)
1:           {
0:             oprot.writeString(_iter182);
1:           }
1:         }
1:       }
1:       if (struct.isSetVariable_names()) {
1:         {
1:           oprot.writeI32(struct.variable_names.size());
0:           for (String _iter183 : struct.variable_names)
1:           {
0:             oprot.writeString(_iter183);
1:           }
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlPreparedResult struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.itemId = iprot.readI32();
1:       struct.setItemIdIsSet(true);
1:       struct.count = iprot.readI32();
1:       struct.setCountIsSet(true);
1:       BitSet incoming = iprot.readBitSet(2);
1:       if (incoming.get(0)) {
1:         {
0:           org.apache.thrift.protocol.TList _list184 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_types = new ArrayList<String>(_list184.size);
0:           for (int _i185 = 0; _i185 < _list184.size; ++_i185)
1:           {
0:             String _elem186; // required
0:             _elem186 = iprot.readString();
0:             struct.variable_types.add(_elem186);
1:           }
1:         }
1:         struct.setVariable_typesIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         {
0:           org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.variable_names = new ArrayList<String>(_list187.size);
0:           for (int _i188 = 0; _i188 < _list187.size; ++_i188)
1:           {
0:             String _elem189; // required
0:             _elem189 = iprot.readString();
0:             struct.variable_names.add(_elem189);
1:           }
1:         }
1:         struct.setVariable_namesIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public int itemId; // required
1:   public int count; // required
/////////////////////////////////////////////////////////////////////////
1:       return Integer.valueOf(getItemId());
1:       return Integer.valueOf(getCount());
author:Eric Evans
-------------------------------------------------------------------------------
commit:e15f3aa
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class CqlPreparedResult implements org.apache.thrift.TBase<CqlPreparedResult, CqlPreparedResult._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlPreparedResult");
1: 
1:   private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
1:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
1: 
0:   public int itemId;
0:   public int count;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     ITEM_ID((short)1, "itemId"),
0:     COUNT((short)2, "count");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // ITEM_ID
1:           return ITEM_ID;
1:         case 2: // COUNT
1:           return COUNT;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __ITEMID_ISSET_ID = 0;
1:   private static final int __COUNT_ISSET_ID = 1;
0:   private BitSet __isset_bit_vector = new BitSet(2);
1: 
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlPreparedResult.class, metaDataMap);
1:   }
1: 
1:   public CqlPreparedResult() {
1:   }
1: 
1:   public CqlPreparedResult(
1:     int itemId,
1:     int count)
0:   {
1:     this();
1:     this.itemId = itemId;
1:     setItemIdIsSet(true);
1:     this.count = count;
1:     setCountIsSet(true);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public CqlPreparedResult(CqlPreparedResult other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     this.itemId = other.itemId;
1:     this.count = other.count;
1:   }
1: 
1:   public CqlPreparedResult deepCopy() {
1:     return new CqlPreparedResult(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     setItemIdIsSet(false);
1:     this.itemId = 0;
1:     setCountIsSet(false);
1:     this.count = 0;
1:   }
1: 
1:   public int getItemId() {
1:     return this.itemId;
1:   }
1: 
1:   public CqlPreparedResult setItemId(int itemId) {
1:     this.itemId = itemId;
1:     setItemIdIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetItemId() {
0:     __isset_bit_vector.clear(__ITEMID_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
1:   public boolean isSetItemId() {
0:     return __isset_bit_vector.get(__ITEMID_ISSET_ID);
1:   }
1: 
1:   public void setItemIdIsSet(boolean value) {
0:     __isset_bit_vector.set(__ITEMID_ISSET_ID, value);
1:   }
1: 
1:   public int getCount() {
1:     return this.count;
1:   }
1: 
1:   public CqlPreparedResult setCount(int count) {
1:     this.count = count;
1:     setCountIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetCount() {
0:     __isset_bit_vector.clear(__COUNT_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:   public boolean isSetCount() {
0:     return __isset_bit_vector.get(__COUNT_ISSET_ID);
1:   }
1: 
1:   public void setCountIsSet(boolean value) {
0:     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case ITEM_ID:
1:       if (value == null) {
1:         unsetItemId();
0:       } else {
1:         setItemId((Integer)value);
1:       }
0:       break;
1: 
1:     case COUNT:
1:       if (value == null) {
1:         unsetCount();
0:       } else {
1:         setCount((Integer)value);
1:       }
0:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case ITEM_ID:
0:       return new Integer(getItemId());
1: 
1:     case COUNT:
0:       return new Integer(getCount());
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case ITEM_ID:
1:       return isSetItemId();
1:     case COUNT:
1:       return isSetCount();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof CqlPreparedResult)
1:       return this.equals((CqlPreparedResult)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(CqlPreparedResult that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_itemId = true;
1:     boolean that_present_itemId = true;
1:     if (this_present_itemId || that_present_itemId) {
1:       if (!(this_present_itemId && that_present_itemId))
1:         return false;
1:       if (this.itemId != that.itemId)
1:         return false;
1:     }
1: 
1:     boolean this_present_count = true;
1:     boolean that_present_count = true;
1:     if (this_present_count || that_present_count) {
1:       if (!(this_present_count && that_present_count))
1:         return false;
1:       if (this.count != that.count)
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_itemId = true;
1:     builder.append(present_itemId);
1:     if (present_itemId)
1:       builder.append(itemId);
1: 
1:     boolean present_count = true;
1:     builder.append(present_count);
1:     if (present_count)
1:       builder.append(count);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(CqlPreparedResult other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     CqlPreparedResult typedOther = (CqlPreparedResult)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetItemId()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetCount()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:     iprot.readStructBegin();
0:     while (true)
0:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // ITEM_ID
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             this.itemId = iprot.readI32();
1:             setItemIdIsSet(true);
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
1:         case 2: // COUNT
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             this.count = iprot.readI32();
1:             setCountIsSet(true);
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
1:         default:
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:       }
0:       iprot.readFieldEnd();
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetItemId()) {
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemId' was not found in serialized data! Struct: " + toString());
1:     }
0:     if (!isSetCount()) {
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
0:     oprot.writeI32(this.itemId);
0:     oprot.writeFieldEnd();
0:     oprot.writeFieldBegin(COUNT_FIELD_DESC);
0:     oprot.writeI32(this.count);
0:     oprot.writeFieldEnd();
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("CqlPreparedResult(");
1:     boolean first = true;
1: 
1:     sb.append("itemId:");
1:     sb.append(this.itemId);
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("count:");
1:     sb.append(this.count);
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:     // alas, we cannot check 'itemId' because it's a primitive and you chose the non-beans generator.
1:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1: }
1: 
============================================================================