1:9f14856: /*
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  */
1:4b54b8a: package org.apache.cassandra.utils.memory;
2:1a3b5db: 
1:8541cca: public class HeapPool extends MemtablePool
4:8541cca: {
1:4b54b8a:     public HeapPool(long maxOnHeapMemory, float cleanupThreshold, Runnable cleaner)
1:8541cca:     {
1:1a3b5db:         super(maxOnHeapMemory, 0, cleanupThreshold, cleaner);
4:8541cca:     }
1:8541cca: 
1:8541cca:     public MemtableAllocator newAllocator()
1:8541cca:     {
1:a991b64:         // TODO
1:a991b64:         throw new UnsupportedOperationException();
1:a991b64:         //return new Allocator(this);
1:8541cca:     }
1:8541cca: 
1:a991b64:     // TODO
1:a991b64:     //public static class Allocator extends MemtableBufferAllocator
1:a991b64:     //{
1:a991b64:     //    Allocator(HeapPool pool)
1:a991b64:     //    {
1:a991b64:     //        super(pool.onHeap.newAllocator(), pool.offHeap.newAllocator());
1:a991b64:     //    }
1:8541cca: 
1:a991b64:     //    public ByteBuffer allocate(int size, OpOrder.Group opGroup)
1:a991b64:     //    {
1:a991b64:     //        super.onHeap().allocate(size, opGroup);
1:a991b64:     //        return ByteBuffer.allocate(size);
1:a991b64:     //    }
1:8541cca: 
1:a991b64:     //    public DataReclaimer reclaimer()
1:a991b64:     //    {
1:a991b64:     //        return new Reclaimer();
1:a991b64:     //    }
1:8541cca: 
1:a991b64:     //    private class Reclaimer implements DataReclaimer
1:a991b64:     //    {
1:a991b64:     //        List<Cell> delayed;
1:8541cca: 
1:a991b64:     //        public Reclaimer reclaim(Cell cell)
1:a991b64:     //        {
1:a991b64:     //            if (delayed == null)
1:a991b64:     //                delayed = new ArrayList<>();
1:a991b64:     //            delayed.add(cell);
1:a991b64:     //            return this;
1:a991b64:     //        }
1:1a3b5db: 
1:a991b64:     //        public Reclaimer reclaimImmediately(Cell cell)
1:a991b64:     //        {
1:a991b64:     //            onHeap().release(cell.name().dataSize() + cell.value().remaining());
1:a991b64:     //            return this;
1:a991b64:     //        }
1:1a3b5db: 
1:a991b64:     //        public Reclaimer reclaimImmediately(DecoratedKey key)
1:a991b64:     //        {
1:a991b64:     //            onHeap().release(key.getKey().remaining());
1:a991b64:     //            return this;
1:a991b64:     //        }
1:1a3b5db: 
1:a991b64:     //        public void cancel()
1:a991b64:     //        {
1:a991b64:     //            if (delayed != null)
1:a991b64:     //                delayed.clear();
1:a991b64:     //        }
1:1a3b5db: 
1:a991b64:     //        public void commit()
1:a991b64:     //        {
1:a991b64:     //            if (delayed != null)
1:a991b64:     //                for (Cell cell : delayed)
1:a991b64:     //                    reclaimImmediately(cell);
1:a991b64:     //        }
1:a991b64:     //    }
1:a991b64:     //}
1:8541cca: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:0d11731
/////////////////////////////////////////////////////////////////////////
0:     public static class Allocator extends MemtableBufferAllocator
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // TODO
1:         throw new UnsupportedOperationException();
1:         //return new Allocator(this);
1:     // TODO
1:     //public static class Allocator extends MemtableBufferAllocator
1:     //{
1:     //    Allocator(HeapPool pool)
1:     //    {
1:     //        super(pool.onHeap.newAllocator(), pool.offHeap.newAllocator());
1:     //    }
1:     //    public ByteBuffer allocate(int size, OpOrder.Group opGroup)
1:     //    {
1:     //        super.onHeap().allocate(size, opGroup);
1:     //        return ByteBuffer.allocate(size);
1:     //    }
1:     //    public DataReclaimer reclaimer()
1:     //    {
1:     //        return new Reclaimer();
1:     //    }
1:     //    private class Reclaimer implements DataReclaimer
1:     //    {
1:     //        List<Cell> delayed;
1:     //        public Reclaimer reclaim(Cell cell)
1:     //        {
1:     //            if (delayed == null)
1:     //                delayed = new ArrayList<>();
1:     //            delayed.add(cell);
1:     //            return this;
1:     //        }
1:     //        public Reclaimer reclaimImmediately(Cell cell)
1:     //        {
1:     //            onHeap().release(cell.name().dataSize() + cell.value().remaining());
1:     //            return this;
1:     //        }
1:     //        public Reclaimer reclaimImmediately(DecoratedKey key)
1:     //        {
1:     //            onHeap().release(key.getKey().remaining());
1:     //            return this;
1:     //        }
1:     //        public void cancel()
1:     //        {
1:     //            if (delayed != null)
1:     //                delayed.clear();
1:     //        }
1:     //        public void commit()
1:     //        {
1:     //            if (delayed != null)
1:     //                for (Cell cell : delayed)
1:     //                    reclaimImmediately(cell);
1:     //        }
1:     //    }
1:     //}
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
0: import org.apache.cassandra.db.Cell;
0: import org.apache.cassandra.db.DecoratedKey;
1: public class HeapPool extends MemtablePool
/////////////////////////////////////////////////////////////////////////
1:     public MemtableAllocator newAllocator()
0:     public class Allocator extends MemtableBufferAllocator
0:             super.onHeap().allocate(size, opGroup);
0:         public DataReclaimer reclaimer()
0:             return new Reclaimer();
1:         }
1: 
0:         private class Reclaimer implements DataReclaimer
1:         {
0:             List<Cell> delayed;
1: 
0:             public Reclaimer reclaim(Cell cell)
1:             {
0:                 if (delayed == null)
0:                     delayed = new ArrayList<>();
0:                 delayed.add(cell);
0:                 return this;
1:             }
1: 
0:             public Reclaimer reclaimImmediately(Cell cell)
1:             {
0:                 onHeap().release(cell.name().dataSize() + cell.value().remaining());
0:                 return this;
1:             }
1: 
0:             public Reclaimer reclaimImmediately(DecoratedKey key)
1:             {
0:                 onHeap().release(key.getKey().remaining());
0:                 return this;
1:             }
1: 
0:             public void cancel()
1:             {
0:                 if (delayed != null)
0:                     delayed.clear();
1:             }
1: 
0:             public void commit()
1:             {
0:                 if (delayed != null)
0:                     for (Cell cell : delayed)
0:                         reclaimImmediately(cell);
1:             }
commit:1a3b5db
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
1: 
1:         super(maxOnHeapMemory, 0, cleanupThreshold, cleaner);
0:     public boolean needToCopyOnHeap()
0:         return false;
0:     }
1: 
0:     public Allocator newAllocator()
0:     {
0:         return new Allocator(this);
0:     }
1: 
0:     public final class Allocator extends PoolAllocator
0:     {
0:         Allocator(HeapPool pool)
0:         {
0:             super(pool.onHeap.newAllocator(), pool.offHeap.newAllocator());
0:         }
1: 
0:         public ByteBuffer allocate(int size)
0:         {
0:             return allocate(size, null);
0:         }
1: 
0:         public ByteBuffer allocate(int size, OpOrder.Group opGroup)
0:         {
0:             onHeap().allocate(size, opGroup);
0:             // must loop trying to acquire
0:             return ByteBuffer.allocate(size);
0:         }
1: 
0:         public void free(ByteBuffer buffer)
0:         {
0:             onHeap().release(buffer.remaining());
0:         }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.memory;
0: 
0: import org.apache.cassandra.utils.concurrent.OpOrder;
0: 
0: public class HeapPool extends Pool
0: {
1:     public HeapPool(long maxOnHeapMemory, float cleanupThreshold, Runnable cleaner)
0:     {
0:         super(maxOnHeapMemory, cleanupThreshold, cleaner);
0:     }
0: 
0:     public HeapPoolAllocator newAllocator(OpOrder writes)
0:     {
0:         return new HeapPoolAllocator(this);
0:     }
0: }
============================================================================