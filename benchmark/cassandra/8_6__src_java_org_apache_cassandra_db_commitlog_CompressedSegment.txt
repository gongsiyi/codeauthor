2:44f8254: /*
1:44f8254:  * Licensed to the Apache Software Foundation (ASF) under one
1:44f8254:  * or more contributor license agreements.  See the NOTICE file
1:44f8254:  * distributed with this work for additional information
1:44f8254:  * regarding copyright ownership.  The ASF licenses this file
1:44f8254:  * to you under the Apache License, Version 2.0 (the
1:44f8254:  * "License"); you may not use this file except in compliance
1:44f8254:  * with the License.  You may obtain a copy of the License at
1:7374e9b:  *
1:44f8254:  *     http://www.apache.org/licenses/LICENSE-2.0
2:44f8254:  *
1:44f8254:  * Unless required by applicable law or agreed to in writing, software
1:44f8254:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44f8254:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44f8254:  * See the License for the specific language governing permissions and
1:44f8254:  * limitations under the License.
4:44f8254:  */
1:44f8254: package org.apache.cassandra.db.commitlog;
13:44f8254: 
1:44f8254: import java.nio.ByteBuffer;
1:9995521: 
1:44f8254: import org.apache.cassandra.io.FSWriteError;
1:44f8254: import org.apache.cassandra.io.compress.ICompressor;
1:91187b5: import org.apache.cassandra.utils.SyncUtil;
1:675a0f4: 
1:9995521: /**
1:44f8254:  * Compressed commit log segment. Provides an in-memory buffer for the mutation threads. On sync compresses the written
1:44f8254:  * section of the buffer and writes it to the destination channel.
1:9995521:  *
1:7374e9b:  * The format of the compressed commit log is as follows:
1:7374e9b:  * - standard commit log header (as written by {@link CommitLogDescriptor#writeHeader(ByteBuffer, CommitLogDescriptor)})
1:7374e9b:  * - a series of 'sync segments' that are written every time the commit log is sync()'ed
1:7374e9b:  * -- a sync section header, see {@link CommitLogSegment#writeSyncMarker(ByteBuffer, int, int, int)}
1:7374e9b:  * -- total plain text length for this section
1:7374e9b:  * -- a block of compressed data
1:9995521:  */
1:7374e9b: public class CompressedSegment extends FileDirectSegment
12:44f8254: {
1:44f8254:     static final int COMPRESSED_MARKER_SIZE = SYNC_MARKER_SIZE + 4;
1:44f8254:     final ICompressor compressor;
1:9995521: 
1:9995521:     /**
1:44f8254:      * Constructs a new segment file.
1:9995521:      */
1:e8907c1:     CompressedSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager)
1:44f8254:     {
1:e8907c1:         super(commitLog, manager);
1:6c445d6:         this.compressor = commitLog.configuration.getCompressor();
1:1f74142:         manager.getBufferPool().setPreferredReusableBufferType(compressor.preferredBufferType());
12:44f8254:     }
1:675a0f4: 
1:44f8254:     ByteBuffer createBuffer(CommitLog commitLog)
1:44f8254:     {
1:e31e216:         return manager.getBufferPool().createBuffer(commitLog.configuration.getCompressor().preferredBufferType());
1:44f8254:     }
1:44f8254: 
1:675a0f4:     @Override
1:44f8254:     void write(int startMarker, int nextMarker)
1:9995521:     {
1:44f8254:         int contentStart = startMarker + SYNC_MARKER_SIZE;
1:44f8254:         int length = nextMarker - contentStart;
1:44f8254:         // The length may be 0 when the segment is being closed.
1:44f8254:         assert length > 0 || length == 0 && !isStillAllocating();
1:44f8254: 
1:3adfd15:         try
1:3adfd15:         {
1:3adfd15:             int neededBufferSize = compressor.initialCompressedBufferLength(length) + COMPRESSED_MARKER_SIZE;
1:1f74142:             ByteBuffer compressedBuffer = manager.getBufferPool().getThreadLocalReusableBuffer(neededBufferSize);
1:44f8254: 
1:44f8254:             ByteBuffer inputBuffer = buffer.duplicate();
1:44f8254:             inputBuffer.limit(contentStart + length).position(contentStart);
1:44f8254:             compressedBuffer.limit(compressedBuffer.capacity()).position(COMPRESSED_MARKER_SIZE);
1:3adfd15:             compressor.compress(inputBuffer, compressedBuffer);
1:44f8254: 
1:3adfd15:             compressedBuffer.flip();
1:44f8254:             compressedBuffer.putInt(SYNC_MARKER_SIZE, length);
1:44f8254: 
1:44f8254:             // Only one thread can be here at a given time.
1:44f8254:             // Protected by synchronization on CommitLogSegment.sync().
1:44f8254:             writeSyncMarker(compressedBuffer, 0, (int) channel.position(), (int) channel.position() + compressedBuffer.remaining());
1:e31e216:             manager.addSize(compressedBuffer.limit());
1:44f8254:             channel.write(compressedBuffer);
1:675a0f4:             assert channel.position() - lastWrittenPos == compressedBuffer.limit();
1:675a0f4:             lastWrittenPos = channel.position();
1:91187b5:             SyncUtil.force(channel, true);
1:9995521:         }
1:44f8254:         catch (Exception e)
1:9995521:         {
2:44f8254:             throw new FSWriteError(e, getPath());
1:9995521:         }
1:9995521:     }
1:44f8254: 
2:44f8254:     @Override
1:675a0f4:     public long onDiskSize()
1:675a0f4:     {
1:675a0f4:         return lastWrittenPos;
1:675a0f4:     }
1:44f8254: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e8907c1
/////////////////////////////////////////////////////////////////////////
1:     CompressedSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager)
1:         super(commitLog, manager);
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.compress.BufferType;
/////////////////////////////////////////////////////////////////////////
0:     static private final ThreadLocal<ByteBuffer> compressedBufferHolder = new ThreadLocal<ByteBuffer>() {
0:         protected ByteBuffer initialValue()
0:             return ByteBuffer.allocate(0);
/////////////////////////////////////////////////////////////////////////
0:         return compressor.preferredBufferType().allocate(size);
/////////////////////////////////////////////////////////////////////////
0:             buf = commitLog.compressor.preferredBufferType().allocate(DatabaseDescriptor.getCommitLogSegmentSize());
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
1:             int neededBufferSize = compressor.initialCompressedBufferLength(length) + COMPRESSED_MARKER_SIZE;
0:             ByteBuffer compressedBuffer = compressedBufferHolder.get();
0:             if (compressor.preferredBufferType() != BufferType.typeOf(compressedBuffer) ||
0:                 compressedBuffer.capacity() < neededBufferSize)
0:                 FileUtils.clean(compressedBuffer);
0:                 compressedBuffer = allocate(neededBufferSize);
0:                 compressedBufferHolder.set(compressedBuffer);
1:             compressor.compress(inputBuffer, compressedBuffer);
1:             compressedBuffer.flip();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:1f74142
/////////////////////////////////////////////////////////////////////////
1:         manager.getBufferPool().setPreferredReusableBufferType(compressor.preferredBufferType());
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer compressedBuffer = manager.getBufferPool().getThreadLocalReusableBuffer(neededBufferSize);
commit:e31e216
/////////////////////////////////////////////////////////////////////////
0:     CompressedSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager, Runnable onClose)
0:         super(commitLog, manager, onClose);
/////////////////////////////////////////////////////////////////////////
1:         return manager.getBufferPool().createBuffer(commitLog.configuration.getCompressor().preferredBufferType());
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer compressedBuffer = manager.getBufferPool().getThreadLocalReusableBuffer();
0:                 manager.getBufferPool().setThreadLocalReusableBuffer(compressedBuffer);
/////////////////////////////////////////////////////////////////////////
1:             manager.addSize(compressedBuffer.limit());
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:dc6ffc2
commit:1e82695
commit:6c445d6
/////////////////////////////////////////////////////////////////////////
1:         this.compressor = commitLog.configuration.getCompressor();
/////////////////////////////////////////////////////////////////////////
0:             buf = commitLog.configuration.getCompressor()
0:                                          .preferredBufferType()
0:                                          .allocate(DatabaseDescriptor.getCommitLogSegmentSize());
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:ee40e3b
/////////////////////////////////////////////////////////////////////////
0:     CompressedSegment(CommitLog commitLog, Runnable onClose)
0:         super(commitLog, onClose);
commit:9995521
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
0:      * The number of buffers in use
1:      */
0:     private static AtomicInteger usedBuffers = new AtomicInteger(0);
1: 
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     final Runnable onClose;
0:     CompressedSegment(CommitLog commitLog, Runnable onClose)
0:         this.onClose = onClose;
/////////////////////////////////////////////////////////////////////////
0:         usedBuffers.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
0:         usedBuffers.decrementAndGet();
0:         try {
0:             if (bufferPool.size() < MAX_BUFFERPOOL_SIZE)
0:                 bufferPool.add(buffer);
0:             else
0:                 FileUtils.clean(buffer);
0:             super.internalClose();
1:         }
0:         finally
1:         {
0:             onClose.run();
1:         }
1:     }
1:     /**
0:      * Checks if the number of buffers in use is greater or equals to the maximum number of buffers allowed in the pool.
1:      *
0:      * @return <code>true</code> if the number of buffers in use is greater or equals to the maximum number of buffers
0:      * allowed in the pool, <code>false</code> otherwise.
1:      */
0:     static boolean hasReachedPoolLimit()
1:     {
0:         return usedBuffers.get() >= MAX_BUFFERPOOL_SIZE;
commit:91187b5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.SyncUtil;
/////////////////////////////////////////////////////////////////////////
1:             SyncUtil.force(channel, true);
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *
1:  * The format of the compressed commit log is as follows:
1:  * - standard commit log header (as written by {@link CommitLogDescriptor#writeHeader(ByteBuffer, CommitLogDescriptor)})
1:  * - a series of 'sync segments' that are written every time the commit log is sync()'ed
1:  * -- a sync section header, see {@link CommitLogSegment#writeSyncMarker(ByteBuffer, int, int, int)}
1:  * -- total plain text length for this section
1:  * -- a block of compressed data
1: public class CompressedSegment extends FileDirectSegment
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return createBuffer(commitLog.compressor.preferredBufferType());
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer compressedBuffer = reusableBufferHolder.get();
0:                 reusableBufferHolder.set(compressedBuffer);
/////////////////////////////////////////////////////////////////////////
commit:675a0f4
/////////////////////////////////////////////////////////////////////////
0:     volatile long lastWrittenPos = 0;
1: 
/////////////////////////////////////////////////////////////////////////
0:             commitLog.allocator.addSize(lastWrittenPos = buffer.position());
/////////////////////////////////////////////////////////////////////////
0:             commitLog.allocator.addSize(compressedBuffer.limit());
1:             assert channel.position() - lastWrittenPos == compressedBuffer.limit();
1:             lastWrittenPos = channel.position();
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public long onDiskSize()
1:     {
1:         return lastWrittenPos;
1:     }
author:branimir
-------------------------------------------------------------------------------
commit:9a3fa88
/////////////////////////////////////////////////////////////////////////
0:     private static final ThreadLocal<ByteBuffer> compressedBufferHolder = new ThreadLocal<ByteBuffer>() {
author:blambov
-------------------------------------------------------------------------------
commit:44f8254
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
0: import java.io.IOException;
1: import java.nio.ByteBuffer;
0: import java.util.Queue;
0: import java.util.concurrent.ConcurrentLinkedQueue;
1: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.io.FSWriteError;
1: import org.apache.cassandra.io.compress.ICompressor;
0: import org.apache.cassandra.io.compress.ICompressor.WrappedByteBuffer;
0: import org.apache.cassandra.io.util.FileUtils;
1: 
1: /*
1:  * Compressed commit log segment. Provides an in-memory buffer for the mutation threads. On sync compresses the written
1:  * section of the buffer and writes it to the destination channel.
1:  */
0: public class CompressedSegment extends CommitLogSegment
1: {
0:     static private final ThreadLocal<WrappedByteBuffer> compressedBufferHolder = new ThreadLocal<WrappedByteBuffer>() {
0:         protected WrappedByteBuffer initialValue()
1:         {
0:             return new WrappedByteBuffer(ByteBuffer.allocate(0));
1:         }
0:     };
0:     static Queue<ByteBuffer> bufferPool = new ConcurrentLinkedQueue<>();
1: 
0:     /**
0:      * Maximum number of buffers in the compression pool. The default value is 3, it should not be set lower than that
0:      * (one segment in compression, one written to, one in reserve); delays in compression may cause the log to use
0:      * more, depending on how soon the sync policy stops all writing threads.
1:      */
0:     static final int MAX_BUFFERPOOL_SIZE = DatabaseDescriptor.getCommitLogMaxCompressionBuffersInPool();
1: 
1:     static final int COMPRESSED_MARKER_SIZE = SYNC_MARKER_SIZE + 4;
1:     final ICompressor compressor;
1: 
0:     /**
1:      * Constructs a new segment file.
1:      */
0:     CompressedSegment(CommitLog commitLog)
1:     {
0:         super(commitLog);
0:         this.compressor = commitLog.compressor;
0:         try
1:         {
0:             channel.write((ByteBuffer) buffer.duplicate().flip());
1:         }
0:         catch (IOException e)
1:         {
1:             throw new FSWriteError(e, getPath());
1:         }
1:     }
1: 
0:     static ByteBuffer allocate(ICompressor compressor, int size)
1:     {
0:         if (compressor.useDirectOutputByteBuffers())
0:             return ByteBuffer.allocateDirect(size);
0:         else
0:             return ByteBuffer.allocate(size);
1:     }
1:     
0:     ByteBuffer allocate(int size)
1:     {
0:         return allocate(compressor, size);
1:     }
1: 
1:     ByteBuffer createBuffer(CommitLog commitLog)
1:     {
0:         ByteBuffer buf = bufferPool.poll();
0:         if (buf == null)
1:         {
0:             // this.compressor is not yet set, so we must use the commitLog's one.
0:             buf = allocate(commitLog.compressor, DatabaseDescriptor.getCommitLogSegmentSize());
0:         } else
0:             buf.clear();
0:         return buf;
1:     }
1: 
0:     static long startMillis = System.currentTimeMillis();
1: 
1:     @Override
1:     void write(int startMarker, int nextMarker)
1:     {
1:         int contentStart = startMarker + SYNC_MARKER_SIZE;
1:         int length = nextMarker - contentStart;
1:         // The length may be 0 when the segment is being closed.
1:         assert length > 0 || length == 0 && !isStillAllocating();
1: 
0:         try {
1: 
0:             int compressedLength = compressor.initialCompressedBufferLength(length);
0:             WrappedByteBuffer wrappedCompressedBuffer = compressedBufferHolder.get();
0:             ByteBuffer compressedBuffer = wrappedCompressedBuffer.buffer;
0:             if (compressedBuffer.isDirect() != compressor.useDirectOutputByteBuffers() ||
0:                 compressedBuffer.capacity() < compressedLength + COMPRESSED_MARKER_SIZE)
1:             {
0:                 compressedBuffer = allocate(compressedLength + COMPRESSED_MARKER_SIZE);
0:                 FileUtils.clean(wrappedCompressedBuffer.buffer);
0:                 wrappedCompressedBuffer.buffer = compressedBuffer;
1:             }
1: 
1:             ByteBuffer inputBuffer = buffer.duplicate();
1:             inputBuffer.limit(contentStart + length).position(contentStart);
1:             compressedBuffer.limit(compressedBuffer.capacity()).position(COMPRESSED_MARKER_SIZE);
0:             compressedLength = compressor.compress(inputBuffer, wrappedCompressedBuffer);
1: 
0:             compressedBuffer.position(0);
0:             compressedBuffer.limit(COMPRESSED_MARKER_SIZE + compressedLength);
1:             compressedBuffer.putInt(SYNC_MARKER_SIZE, length);
1: 
1:             // Only one thread can be here at a given time.
1:             // Protected by synchronization on CommitLogSegment.sync().
1:             writeSyncMarker(compressedBuffer, 0, (int) channel.position(), (int) channel.position() + compressedBuffer.remaining());
1:             channel.write(compressedBuffer);
0:             channel.force(true);
1:         }
1:         catch (Exception e)
1:         {
1:             throw new FSWriteError(e, getPath());
1:         }
1:     }
1: 
1:     @Override
0:     protected void internalClose()
1:     {
0:         if (bufferPool.size() < MAX_BUFFERPOOL_SIZE)
0:             bufferPool.add(buffer);
0:         else
0:             FileUtils.clean(buffer);
1: 
0:         super.internalClose();
1:     }
1: 
0:     static void shutdown()
1:     {
0:         bufferPool.clear();
1:     }
1: }
============================================================================