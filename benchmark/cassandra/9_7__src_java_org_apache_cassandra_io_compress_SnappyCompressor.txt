1:07cf56f: /*
1:c8afd76:  * Licensed to the Apache Software Foundation (ASF) under one
1:c8afd76:  * or more contributor license agreements.  See the NOTICE file
1:c8afd76:  * distributed with this work for additional information
1:c8afd76:  * regarding copyright ownership.  The ASF licenses this file
1:c8afd76:  * to you under the Apache License, Version 2.0 (the
1:c8afd76:  * "License"); you may not use this file except in compliance
1:c8afd76:  * with the License.  You may obtain a copy of the License at
1:c8afd76:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c8afd76:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:c8afd76:  */
1:c8afd76: package org.apache.cassandra.io.compress;
1:c8afd76: 
1:c8afd76: import java.io.IOException;
1:895ec3e: import java.nio.ByteBuffer;
1:820411f: import java.util.Collections;
1:c8afd76: import java.util.Map;
1:820411f: import java.util.Set;
1:c8afd76: 
1:820411f: import org.slf4j.Logger;
1:820411f: import org.slf4j.LoggerFactory;
1:c8afd76: import org.xerial.snappy.Snappy;
1:9a8a890: import org.xerial.snappy.SnappyError;
1:c8afd76: 
1:f25da97: import org.apache.cassandra.utils.JVMStabilityInspector;
1:f25da97: 
1:c8afd76: public class SnappyCompressor implements ICompressor
1:820411f: {
1:c8afd76:     public static final SnappyCompressor instance = new SnappyCompressor();
1:c8afd76: 
1:820411f:     private static Logger logger = LoggerFactory.getLogger(SnappyCompressor.class);
1:820411f:     static
1:820411f:     {
1:820411f:         if (!isAvailable())
1:0e96e58:             logger.warn("Cannot initialize native Snappy library. Compression on new sstables will be disabled.");
1:820411f:     }
1:895ec3e: 
1:c8afd76:     public static SnappyCompressor create(Map<String, String> compressionOptions)
1:895ec3e:     {
1:0d805c7:         // this would throw java.lang.NoClassDefFoundError if Snappy class
1:0d805c7:         // wasn't found at runtime which should be processed by calling method
1:0d805c7:         Snappy.getNativeLibraryVersion();
1:895ec3e: 
1:c8afd76:         // no specific options supported so far
1:c8afd76:         return instance;
1:895ec3e:     }
1:820411f: 
1:820411f:     public static boolean isAvailable()
1:895ec3e:     {
1:820411f:         try
1:9a8a890:         {
1:820411f:             create(Collections.<String, String>emptyMap());
1:895ec3e:             return true;
1:820411f:         }
1:820411f:         catch (Exception e)
1:820411f:         {
1:f25da97:             JVMStabilityInspector.inspectThrowable(e);
1:9a8a890:             return false;
1:9a8a890:         }
1:01880a4:         catch (NoClassDefFoundError | SnappyError | UnsatisfiedLinkError e)
1:9a8a890:         {
1:9a8a890:             return false;
1:9a8a890:         }
1:820411f:     }
1:820411f: 
1:820411f:     public Set<String> supportedOptions()
1:820411f:     {
1:820411f:         return Collections.emptySet();
1:820411f:     }
1:820411f: 
1:c8afd76:     public int initialCompressedBufferLength(int chunkLength)
1:820411f:     {
1:c8afd76:         return Snappy.maxCompressedLength(chunkLength);
1:820411f:     }
1:bc7941c: 
1:3adfd15:     public void compress(ByteBuffer input, ByteBuffer output) throws IOException
1:820411f:     {
1:3adfd15:         int dlimit = output.limit();
1:3adfd15:         Snappy.compress(input, output);
1:0d805c7: 
1:3adfd15:         // Snappy doesn't match the ICompressor contract w/regards to state it leaves dest ByteBuffer's counters in
1:3adfd15:         output.position(output.limit());
1:3adfd15:         output.limit(dlimit);
1:3adfd15:         input.position(input.limit());
1:820411f:     }
1:c8afd76: 
1:c8afd76:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException
3:c8afd76:     {
1:c8afd76:         return Snappy.rawUncompress(input, inputOffset, inputLength, output, outputOffset);
1:895ec3e:     }
1:c8afd76: 
1:3adfd15:     public void uncompress(ByteBuffer input, ByteBuffer output)
1:3adfd15:             throws IOException
1:c8afd76:     {
1:3adfd15:         int dlimit = output.limit();
1:3adfd15:         Snappy.uncompress(input, output);
1:3adfd15: 
1:3adfd15:         // Snappy doesn't match the ICompressor contract w/regards to state it leaves dest ByteBuffer's counters in
1:3adfd15:         output.position(output.limit());
1:3adfd15:         output.limit(dlimit);
1:3adfd15:         input.position(input.limit());
3:c8afd76:     }
1:c8afd76: 
1:3adfd15:     public BufferType preferredBufferType()
1:c8afd76:     {
1:3adfd15:         return BufferType.OFF_HEAP;
1:3adfd15:     }
1:3adfd15: 
1:3adfd15:     public boolean supports(BufferType bufferType)
1:3adfd15:     {
1:3adfd15:         // Snappy can't deal with different input and output buffer types.
1:3adfd15:         // To avoid possible problems, pretend it can't support array-backed at all.
1:3adfd15:         return bufferType == BufferType.OFF_HEAP;
1:c8afd76:     }
1:c8afd76: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
1:     public void compress(ByteBuffer input, ByteBuffer output) throws IOException
1:         int dlimit = output.limit();
1:         Snappy.compress(input, output);
1:         // Snappy doesn't match the ICompressor contract w/regards to state it leaves dest ByteBuffer's counters in
1:         output.position(output.limit());
1:         output.limit(dlimit);
1:         input.position(input.limit());
/////////////////////////////////////////////////////////////////////////
1:     public void uncompress(ByteBuffer input, ByteBuffer output)
1:             throws IOException
1:         int dlimit = output.limit();
1:         Snappy.uncompress(input, output);
1: 
1:         // Snappy doesn't match the ICompressor contract w/regards to state it leaves dest ByteBuffer's counters in
1:         output.position(output.limit());
1:         output.limit(dlimit);
1:         input.position(input.limit());
1:     public BufferType preferredBufferType()
1:         return BufferType.OFF_HEAP;
1:     }
1: 
1:     public boolean supports(BufferType bufferType)
1:     {
1:         // Snappy can't deal with different input and output buffer types.
1:         // To avoid possible problems, pretend it can't support array-backed at all.
1:         return bufferType == BufferType.OFF_HEAP;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aedce5f
/////////////////////////////////////////////////////////////////////////
0:         if (input.hasArray() && output.hasArray())
0:             return Snappy.rawUncompress(input.array(), input.arrayOffset() + input.position(), input.remaining(), output.array(), output.arrayOffset() + output.position());
author:Dave Brosius
-------------------------------------------------------------------------------
commit:01880a4
/////////////////////////////////////////////////////////////////////////
1:         catch (NoClassDefFoundError | SnappyError | UnsatisfiedLinkError e)
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bc7941c
/////////////////////////////////////////////////////////////////////////
0:     public int compress(ByteBuffer src, WrappedByteBuffer dest) throws IOException
0:         int result = Snappy.compress(src, dest.buffer);
1: 
0:         // Snappy doesn't match LZ4 and Deflate w/regards to state it leaves dest ByteBuffer's counters in
0:         dest.buffer.position(dest.buffer.limit());
0:         dest.buffer.limit(dest.buffer.capacity());
0:         return result;
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: 
/////////////////////////////////////////////////////////////////////////
1:             JVMStabilityInspector.inspectThrowable(e);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:895ec3e
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public int uncompress(ByteBuffer input, ByteBuffer output) throws IOException
1:     {
0:         return Snappy.uncompress(input, output);
1:     }
1: 
0:     @Override
0:     public boolean useDirectOutputByteBuffers()
1:     {
1:         return true;
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Cannot initialize native Snappy library. Compression on new sstables will be disabled.");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:1a89ea4
commit:9a8a890
/////////////////////////////////////////////////////////////////////////
1: import org.xerial.snappy.SnappyError;
/////////////////////////////////////////////////////////////////////////
0:         catch (SnappyError e)
1:         {
1:             return false;
1:         }
0:         catch (UnsatisfiedLinkError e)
1:         {
1:             return false;
1:         }
commit:820411f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Set;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static Logger logger = LoggerFactory.getLogger(SnappyCompressor.class);
1:     static
1:     {
1:         if (!isAvailable())
0:             logger.warn("Cannot initialize native Snappy library. Compression on new tables will be disabled.");
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isAvailable()
1:     {
1:         try
1:         {
1:             create(Collections.<String, String>emptyMap());
0:             return true;
1:         }
1:         catch (Exception e)
1:         {
0:             return false;
1:         }
0:         catch (NoClassDefFoundError e)
1:         {
0:             return false;
1:         }
1:     }
1: 
1:     public Set<String> supportedOptions()
1:     {
1:         return Collections.emptySet();
1:     }
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6e8c237
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:0d805c7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // this would throw java.lang.NoClassDefFoundError if Snappy class
1:         // wasn't found at runtime which should be processed by calling method
1:         Snappy.getNativeLibraryVersion();
1: 
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.io.compress;
1: 
1: import java.io.IOException;
0: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.xerial.snappy.Snappy;
1: 
1: public class SnappyCompressor implements ICompressor
1: {
1:     public static final SnappyCompressor instance = new SnappyCompressor();
1: 
1:     public static SnappyCompressor create(Map<String, String> compressionOptions)
1:     {
1:         // no specific options supported so far
1:         return instance;
1:     }
1: 
1:     public int initialCompressedBufferLength(int chunkLength)
1:     {
1:         return Snappy.maxCompressedLength(chunkLength);
1:     }
1: 
0:     public int compress(byte[] input, int inputOffset, int inputLength, ICompressor.WrappedArray output, int outputOffset) throws IOException
1:     {
0:         return Snappy.rawCompress(input, inputOffset, inputLength, output.buffer, outputOffset);
1:     }
1: 
1:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException
1:     {
1:         return Snappy.rawUncompress(input, inputOffset, inputLength, output, outputOffset);
1:     }
1: }
============================================================================