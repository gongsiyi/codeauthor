1:861c4cf: /*
1:861c4cf:  * Licensed to the Apache Software Foundation (ASF) under one
1:861c4cf:  * or more contributor license agreements.  See the NOTICE file
1:861c4cf:  * distributed with this work for additional information
1:861c4cf:  * regarding copyright ownership.  The ASF licenses this file
1:861c4cf:  * to you under the Apache License, Version 2.0 (the
1:861c4cf:  * "License"); you may not use this file except in compliance
1:861c4cf:  * with the License.  You may obtain a copy of the License at
1:861c4cf:  *
1:861c4cf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:861c4cf:  *
1:861c4cf:  * Unless required by applicable law or agreed to in writing, software
1:861c4cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:861c4cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:861c4cf:  * See the License for the specific language governing permissions and
1:861c4cf:  * limitations under the License.
1:861c4cf:  */
1:861c4cf: package org.apache.cassandra.utils;
1:861c4cf: 
1:861c4cf: import org.hyperic.sigar.*;
1:861c4cf: import org.slf4j.LoggerFactory;
1:861c4cf: import org.slf4j.Logger;
1:861c4cf: 
1:861c4cf: public class SigarLibrary
1:861c4cf: {
1:861c4cf:     private Logger logger = LoggerFactory.getLogger(SigarLibrary.class);
1:861c4cf: 
1:47e8ef9:     public static final SigarLibrary instance = new SigarLibrary();
1:47e8ef9: 
1:861c4cf:     private Sigar sigar;
1:861c4cf:     private FileSystemMap mounts = null;
1:861c4cf:     private boolean initialized = false;
1:861c4cf:     private long INFINITY = -1;
1:861c4cf:     private long EXPECTED_MIN_NOFILE = 10000l; // number of files that can be opened
1:861c4cf:     private long EXPECTED_NPROC = 32768l; // number of processes
1:861c4cf:     private long EXPECTED_AS = INFINITY; // address space
1:861c4cf: 
1:861c4cf:     // TODO: Determine memlock limits if possible
1:861c4cf:     // TODO: Determine if file system is remote or local
1:861c4cf:     // TODO: Determine if disk latency is within acceptable limits
1:861c4cf: 
1:47e8ef9:     private SigarLibrary()
1:861c4cf:     {
1:861c4cf:         logger.info("Initializing SIGAR library");
1:861c4cf:         try
1:861c4cf:         {
1:861c4cf:             sigar = new Sigar();
1:861c4cf:             mounts = sigar.getFileSystemMap();
1:861c4cf:             initialized = true;
1:861c4cf:         }
1:861c4cf:         catch (SigarException e)
1:861c4cf:         {
1:861c4cf:             logger.info("Could not initialize SIGAR library {} ", e.getMessage());
1:861c4cf:         }
1:861c4cf:         catch (UnsatisfiedLinkError linkError)
1:861c4cf:         {
1:861c4cf:             logger.info("Could not initialize SIGAR library {} ", linkError.getMessage());
1:861c4cf:         }
1:861c4cf:     }
1:861c4cf: 
1:861c4cf:     /**
1:861c4cf:      *
1:861c4cf:      * @return true or false indicating if sigar was successfully initialized
1:861c4cf:      */
1:861c4cf:     public boolean initialized()
1:861c4cf:     {
1:861c4cf:         return initialized;
1:861c4cf:     }
1:861c4cf: 
1:861c4cf:     private boolean hasAcceptableProcNumber()
1:861c4cf:     {
1:861c4cf:         try
1:861c4cf:         {
1:861c4cf:             long fileMax = sigar.getResourceLimit().getProcessesMax();
1:861c4cf:             if (fileMax >= EXPECTED_NPROC || fileMax == INFINITY)
1:861c4cf:             {
2:861c4cf:                 return true;
1:861c4cf:             }
1:861c4cf:             else
1:861c4cf:             {
2:861c4cf:                 return false;
1:861c4cf:             }
1:861c4cf:         }
1:861c4cf:         catch (SigarException sigarException)
1:861c4cf:         {
1:f3399a2:             logger.warn("Could not determine if max processes was acceptable. Error message: {}", sigarException);
1:861c4cf:             return false;
1:861c4cf:         }
1:861c4cf:     }
1:861c4cf: 
1:861c4cf:     private boolean hasAcceptableFileLimits()
1:861c4cf:     {
1:861c4cf:         try
1:861c4cf:         {
1:861c4cf:             long fileMax = sigar.getResourceLimit().getOpenFilesMax();
1:861c4cf:             if (fileMax >= EXPECTED_MIN_NOFILE || fileMax == INFINITY)
1:861c4cf:             {
1:861c4cf:                 return true;
1:861c4cf:             }
1:861c4cf:             else
1:861c4cf:             {
1:861c4cf:                 return false;
1:861c4cf:             }
1:861c4cf:         }
1:861c4cf:         catch (SigarException sigarException)
1:861c4cf:         {
1:f3399a2:             logger.warn("Could not determine if max open file handle limit is correctly configured. Error message: {}", sigarException);
1:861c4cf:             return false;
1:861c4cf:         }
1:861c4cf:     }
1:861c4cf: 
1:861c4cf:     private boolean hasAcceptableAddressSpace()
1:861c4cf:     {
1:861c4cf:         // Check is invalid on Windows
1:54836ec:         if (FBUtilities.isWindows)
1:861c4cf:             return true;
1:861c4cf: 
1:861c4cf:         try
1:861c4cf:         {
1:861c4cf:             long fileMax = sigar.getResourceLimit().getVirtualMemoryMax();
1:861c4cf:             if (fileMax == EXPECTED_AS)
1:861c4cf:             {
1:861c4cf:                 return true;
1:861c4cf:             }
1:861c4cf:             else
1:861c4cf:             {
1:861c4cf:                 return false;
1:861c4cf:             }
1:861c4cf:         }
1:861c4cf:         catch (SigarException sigarException)
1:861c4cf:         {
1:f3399a2:             logger.warn("Could not determine if VirtualMemoryMax was acceptable. Error message: {}", sigarException);
1:861c4cf:             return false;
1:861c4cf:         }
1:861c4cf:     }
1:861c4cf: 
1:861c4cf:     private boolean isSwapEnabled()
1:861c4cf:     {
1:861c4cf:         try
1:861c4cf:         {
1:861c4cf:             Swap swap = sigar.getSwap();
1:861c4cf:             long swapSize = swap.getTotal();
1:861c4cf:             if (swapSize > 0)
1:861c4cf:             {
1:e983956:                 return true;
1:861c4cf:             }
1:861c4cf:             else
1:861c4cf:             {
1:e983956:                 return false;
1:861c4cf:             }
1:861c4cf:         }
1:861c4cf:         catch (SigarException sigarException)
1:861c4cf:         {
1:f3399a2:             logger.warn("Could not determine if swap configuration is acceptable. Error message: {}", sigarException);
1:861c4cf:             return false;
1:861c4cf:         }
1:861c4cf:     }
1:861c4cf: 
1:47e8ef9:     public long getPid()
1:47e8ef9:     {
1:47e8ef9:         return initialized ? sigar.getPid() : -1;
1:47e8ef9:     }
1:47e8ef9: 
1:861c4cf:     public void warnIfRunningInDegradedMode()
1:861c4cf:     {
1:861c4cf:         if (initialized)
1:861c4cf:         {
1:861c4cf:             boolean swapEnabled = isSwapEnabled();
1:861c4cf:             boolean goodAddressSpace = hasAcceptableAddressSpace();
1:861c4cf:             boolean goodFileLimits = hasAcceptableFileLimits();
1:861c4cf:             boolean goodProcNumber = hasAcceptableProcNumber();
1:861c4cf:             if (swapEnabled || !goodAddressSpace || !goodFileLimits || !goodProcNumber)
1:861c4cf:             {
1:861c4cf:                 logger.warn("Cassandra server running in degraded mode. Is swap disabled? : {},  Address space adequate? : {}, " +
1:1e865ed:                             " nofile limit adequate? : {}, nproc limit adequate? : {} ", !swapEnabled, goodAddressSpace,
1:861c4cf:                             goodFileLimits, goodProcNumber );
1:861c4cf:             }
1:861c4cf:             else
1:861c4cf:             {
1:861c4cf:                 logger.info("Checked OS settings and found them configured for optimal performance.");
1:861c4cf:             }
1:861c4cf:         }
1:861c4cf:         else
1:861c4cf:         {
1:861c4cf:             logger.info("Sigar could not be initialized, test for checking degraded mode omitted.");
1:861c4cf:         }
1:861c4cf:     }
1:861c4cf: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:54836ec
/////////////////////////////////////////////////////////////////////////
1:         if (FBUtilities.isWindows)
commit:1e865ed
/////////////////////////////////////////////////////////////////////////
1:                             " nofile limit adequate? : {}, nproc limit adequate? : {} ", !swapEnabled, goodAddressSpace,
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:47e8ef9
/////////////////////////////////////////////////////////////////////////
1:     public static final SigarLibrary instance = new SigarLibrary();
1: 
/////////////////////////////////////////////////////////////////////////
1:     private SigarLibrary()
/////////////////////////////////////////////////////////////////////////
1:     public long getPid()
1:     {
1:         return initialized ? sigar.getPid() : -1;
1:     }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:e983956
/////////////////////////////////////////////////////////////////////////
1:                 return true;
1:                 return false;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f3399a2
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Could not determine if max processes was acceptable. Error message: {}", sigarException);
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Could not determine if max open file handle limit is correctly configured. Error message: {}", sigarException);
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Could not determine if VirtualMemoryMax was acceptable. Error message: {}", sigarException);
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("Could not determine if swap configuration is acceptable. Error message: {}", sigarException);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:574e265
/////////////////////////////////////////////////////////////////////////
0:         if (FBUtilities.isWindows())
commit:861c4cf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import org.hyperic.sigar.*;
1: import org.slf4j.LoggerFactory;
1: import org.slf4j.Logger;
1: 
1: public class SigarLibrary
1: {
1:     private Logger logger = LoggerFactory.getLogger(SigarLibrary.class);
1: 
1:     private Sigar sigar;
1:     private FileSystemMap mounts = null;
1:     private boolean initialized = false;
1:     private long INFINITY = -1;
1:     private long EXPECTED_MIN_NOFILE = 10000l; // number of files that can be opened
1:     private long EXPECTED_NPROC = 32768l; // number of processes
1:     private long EXPECTED_AS = INFINITY; // address space
1: 
1:     // TODO: Determine memlock limits if possible
1:     // TODO: Determine if file system is remote or local
1:     // TODO: Determine if disk latency is within acceptable limits
1: 
0:     public SigarLibrary()
1:     {
1:         logger.info("Initializing SIGAR library");
1:         try
1:         {
1:             sigar = new Sigar();
1:             mounts = sigar.getFileSystemMap();
1:             initialized = true;
1:         }
1:         catch (SigarException e)
1:         {
1:             logger.info("Could not initialize SIGAR library {} ", e.getMessage());
1:         }
1:         catch (UnsatisfiedLinkError linkError)
1:         {
1:             logger.info("Could not initialize SIGAR library {} ", linkError.getMessage());
1:         }
1:     }
1: 
1:     /**
1:      *
1:      * @return true or false indicating if sigar was successfully initialized
1:      */
1:     public boolean initialized()
1:     {
1:         return initialized;
1:     }
1: 
1:     private boolean hasAcceptableProcNumber()
1:     {
1:         try
1:         {
1:             long fileMax = sigar.getResourceLimit().getProcessesMax();
1:             if (fileMax >= EXPECTED_NPROC || fileMax == INFINITY)
1:             {
1:                 return true;
1:             }
1:             else
1:             {
1:                 return false;
1:             }
1:         }
1:         catch (SigarException sigarException)
1:         {
0:             logger.warn("Could not determine if max processes was acceptable. Error message: " + sigarException);
1:             return false;
1:         }
1:     }
1: 
1:     private boolean hasAcceptableFileLimits()
1:     {
1:         try
1:         {
1:             long fileMax = sigar.getResourceLimit().getOpenFilesMax();
1:             if (fileMax >= EXPECTED_MIN_NOFILE || fileMax == INFINITY)
1:             {
1:                 return true;
1:             }
1:             else
1:             {
1:                 return false;
1:             }
1:         }
1:         catch (SigarException sigarException)
1:         {
0:             logger.warn("Could not determine if max open file handle limit is correctly configured. Error message: " + sigarException);
1:             return false;
1:         }
1:     }
1: 
1:     private boolean hasAcceptableAddressSpace()
1:     {
1:         // Check is invalid on Windows
0:         if (!FBUtilities.isUnix())
1:             return true;
1: 
1:         try
1:         {
1:             long fileMax = sigar.getResourceLimit().getVirtualMemoryMax();
1:             if (fileMax == EXPECTED_AS)
1:             {
1:                 return true;
1:             }
1:             else
1:             {
1:                 return false;
1:             }
1:         }
1:         catch (SigarException sigarException)
1:         {
0:             logger.warn("Could not determine if VirtualMemoryMax was acceptable. Error message: " + sigarException);
1:             return false;
1:         }
1:     }
1: 
1:     private boolean isSwapEnabled()
1:     {
1:         try
1:         {
1:             Swap swap = sigar.getSwap();
1:             long swapSize = swap.getTotal();
1:             if (swapSize > 0)
1:             {
1:                 return false;
1:             }
1:             else
1:             {
1:                 return true;
1:             }
1:         }
1:         catch (SigarException sigarException)
1:         {
0:             logger.warn("Could not determine if swap configuration is acceptable. Error message: " + sigarException);
1:             return false;
1:         }
1:     }
1: 
1:     public void warnIfRunningInDegradedMode()
1:     {
1:         if (initialized)
1:         {
1:             boolean swapEnabled = isSwapEnabled();
1:             boolean goodAddressSpace = hasAcceptableAddressSpace();
1:             boolean goodFileLimits = hasAcceptableFileLimits();
1:             boolean goodProcNumber = hasAcceptableProcNumber();
1:             if (swapEnabled || !goodAddressSpace || !goodFileLimits || !goodProcNumber)
1:             {
1:                 logger.warn("Cassandra server running in degraded mode. Is swap disabled? : {},  Address space adequate? : {}, " +
0:                             " nofile limit adequate? : {}, nproc limit adequate? : {} ", swapEnabled, goodAddressSpace,
1:                             goodFileLimits, goodProcNumber );
1:             }
1:             else
1:             {
1:                 logger.info("Checked OS settings and found them configured for optimal performance.");
1:             }
1:         }
1:         else
1:         {
1:             logger.info("Sigar could not be initialized, test for checking degraded mode omitted.");
1:         }
1:     }
1: }
============================================================================