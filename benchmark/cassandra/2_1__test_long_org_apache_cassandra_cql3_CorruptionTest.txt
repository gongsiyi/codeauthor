1:b3ada2b: /*
1:b3ada2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:b3ada2b:  * or more contributor license agreements.  See the NOTICE file
1:b3ada2b:  * distributed with this work for additional information
1:b3ada2b:  * regarding copyright ownership.  The ASF licenses this file
1:b3ada2b:  * to you under the Apache License, Version 2.0 (the
1:b3ada2b:  * "License"); you may not use this file except in compliance
1:b3ada2b:  * with the License.  You may obtain a copy of the License at
1:b3ada2b:  *
1:b3ada2b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b3ada2b:  *
1:b3ada2b:  * Unless required by applicable law or agreed to in writing, software
1:b3ada2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b3ada2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b3ada2b:  * See the License for the specific language governing permissions and
1:b3ada2b:  * limitations under the License.
1:b3ada2b:  */
1:b3ada2b: package org.apache.cassandra.cql3;
1:b3ada2b: 
1:b3ada2b: 
1:b3ada2b: import java.io.File;
1:b3ada2b: import java.io.FileWriter;
1:b3ada2b: import java.io.IOException;
1:b3ada2b: import java.nio.ByteBuffer;
1:b3ada2b: import java.util.Arrays;
1:b3ada2b: import java.util.concurrent.CountDownLatch;
1:b3ada2b: import java.util.concurrent.ExecutorService;
1:b3ada2b: import java.util.concurrent.Executors;
1:b3ada2b: import java.util.concurrent.TimeUnit;
1:b3ada2b: 
1:b3ada2b: import org.junit.BeforeClass;
1:b3ada2b: import org.junit.Test;
1:b3ada2b: 
1:b3ada2b: import com.datastax.driver.core.*;
1:b3ada2b: import com.datastax.driver.core.policies.LoggingRetryPolicy;
1:b3ada2b: import com.datastax.driver.core.policies.Policies;
1:b3ada2b: import com.datastax.driver.core.utils.Bytes;
1:b3ada2b: import org.apache.cassandra.SchemaLoader;
1:b3ada2b: import org.apache.cassandra.config.DatabaseDescriptor;
1:b3ada2b: import org.apache.cassandra.config.Schema;
1:b3ada2b: import org.apache.cassandra.exceptions.ConfigurationException;
1:b3ada2b: import org.apache.cassandra.service.EmbeddedCassandraService;
1:b3ada2b: 
1:b3ada2b: public class CorruptionTest extends SchemaLoader
1:b3ada2b: {
1:b3ada2b: 
1:b3ada2b:     private static EmbeddedCassandraService cassandra;
1:b3ada2b:     private static Cluster cluster;
1:b3ada2b:     private static Session session;
1:b3ada2b: 
1:b3ada2b:     private static PreparedStatement getStatement;
1:b3ada2b:     private static PreparedStatement putStatement;
1:b3ada2b:     private static String KEYSPACE = "cass_test";
1:b3ada2b:     private static final String TABLE="put_test";
1:b3ada2b:     private static final String KEY = "SingleFailingKey";
1:b3ada2b:     private static String VALUE;
1:b3ada2b:     private final int THREADPOOL_SIZE=40;
1:b3ada2b: 
1:b3ada2b:     @BeforeClass()
1:b3ada2b:     public static void setup() throws ConfigurationException, IOException
1:b3ada2b:     {
1:b3ada2b:         Schema.instance.clear();
1:b3ada2b: 
1:b3ada2b:         cassandra = new EmbeddedCassandraService();
1:b3ada2b:         cassandra.start();
1:b3ada2b: 
1:b3ada2b:         cluster = Cluster.builder().addContactPoint("127.0.0.1")
1:b3ada2b:                          .withRetryPolicy(new LoggingRetryPolicy(Policies.defaultRetryPolicy()))
1:b3ada2b:                          .withPort(DatabaseDescriptor.getNativeTransportPort()).build();
1:b3ada2b:         session = cluster.connect();
1:b3ada2b: 
1:b3ada2b:         session.execute("CREATE KEYSPACE IF NOT EXISTS " + KEYSPACE +" WITH replication " +
1:b3ada2b:                         "= {'class':'SimpleStrategy', 'replication_factor':1};");
1:b3ada2b:         session.execute("USE " + KEYSPACE);
1:b3ada2b:         session.execute("CREATE TABLE IF NOT EXISTS " + TABLE + " (" +
1:b3ada2b:                          "key blob," +
1:b3ada2b:                          "value blob," +
1:b3ada2b:                          "PRIMARY KEY (key));");
1:b3ada2b: 
1:b3ada2b: 
1:b3ada2b:         // Prepared statements
1:b3ada2b:         getStatement = session.prepare("SELECT value FROM " + TABLE + " WHERE key = ?;");
1:b3ada2b:         getStatement.setConsistencyLevel(ConsistencyLevel.LOCAL_QUORUM);
1:b3ada2b: 
1:b3ada2b:         putStatement = session.prepare("INSERT INTO " + TABLE + " (key, value) VALUES (?, ?);");
1:b3ada2b:         putStatement.setConsistencyLevel(ConsistencyLevel.LOCAL_QUORUM);
1:b3ada2b: 
1:b3ada2b: 
1:b3ada2b: 
1:b3ada2b:         StringBuilder s = new StringBuilder();
1:b3ada2b:         char a='a';
1:b3ada2b:         char z='z';
1:b3ada2b:         for (int i = 0; i < 500*1024; i++)
1:b3ada2b:         {
1:b3ada2b:             char x = (char)((i%((z-a)+1))+a);
1:b3ada2b:             if (x == 'a')
1:b3ada2b:             {
1:b3ada2b:                 x = '\n';
1:b3ada2b:             }
1:b3ada2b:             s.append(x);
1:b3ada2b:         }
1:b3ada2b:         VALUE = s.toString();
1:b3ada2b:     }
1:b3ada2b: 
1:b3ada2b:     @Test
1:b3ada2b:     public void runCorruptionTest()
1:b3ada2b:     {
1:b3ada2b: 
1:b3ada2b:         final CountDownLatch failure = new CountDownLatch(1);
1:b3ada2b: 
1:b3ada2b: 
1:b3ada2b:         ExecutorService executor = Executors.newFixedThreadPool(THREADPOOL_SIZE);
1:b3ada2b:         for (int i = 0; i < THREADPOOL_SIZE; i++)
1:b3ada2b:         {
1:b3ada2b:             executor.execute(new Runnable()
1:b3ada2b:             {
1:b3ada2b:                 @Override
1:b3ada2b:                 public void run()
1:b3ada2b:                 {
1:b3ada2b:                     for (int i = 0; i < 100000; i++)
1:b3ada2b:                     {
1:b3ada2b:                         put(KEY.getBytes(), VALUE.getBytes());
1:b3ada2b:                         byte[] res = get(KEY.getBytes());
1:b3ada2b:                         //since we're flooding the server we might get some timeouts, that's not
1:b3ada2b:                         //relevant for this test
1:b3ada2b:                         if (res == null)
1:b3ada2b:                             continue;
1:b3ada2b: 
1:b3ada2b:                         if (!Arrays.equals(VALUE.getBytes(), res))
1:b3ada2b:                         {
1:b3ada2b:                             /*try
1:b3ada2b:                             {
1:b3ada2b:                                 dumpKeys(VALUE.getBytes(), res);
1:b3ada2b:                             }
1:b3ada2b:                             catch (IOException e)
1:b3ada2b:                             {
1:b3ada2b:                                 e.printStackTrace();
1:b3ada2b:                             }*/
1:b3ada2b:                             failure.countDown();
1:b3ada2b:                         }
1:b3ada2b:                     }
1:b3ada2b:                 }
1:b3ada2b: 
1:b3ada2b:                 private void dumpKeys(byte[] putdata, byte[] getdata) throws IOException {
1:b3ada2b:                     String basename = "bad-data-tid" + Thread.currentThread().getId();
1:b3ada2b:                     File put = new File(basename+"-put");
1:b3ada2b:                     File get = new File(basename+"-get");
1:b3ada2b:                     try(FileWriter pw = new FileWriter(put)) {
1:b3ada2b:                         pw.write(new String(putdata));
1:b3ada2b:                     }
1:b3ada2b:                     try(FileWriter pw = new FileWriter(get)) {
1:b3ada2b:                         pw.write(new String(getdata));
1:b3ada2b:                     }
1:b3ada2b:                 }
1:b3ada2b:             });
1:b3ada2b:         }
1:b3ada2b: 
1:b3ada2b:         try
1:b3ada2b:         {
1:b3ada2b:             assert!failure.await(2, TimeUnit.MINUTES);
1:b3ada2b:         }
1:b3ada2b:         catch (InterruptedException e)
1:b3ada2b:         {
1:b3ada2b: 
1:b3ada2b:         }
1:b3ada2b:         executor.shutdownNow();
1:b3ada2b: 
1:b3ada2b:     }
1:b3ada2b: 
1:b3ada2b:     public static byte[] get(byte[] key)
1:b3ada2b:     {
1:b3ada2b:         BoundStatement boundStatement = new BoundStatement(getStatement);
1:b3ada2b:         boundStatement.setBytes(0, ByteBuffer.wrap(key));
1:b3ada2b: 
1:b3ada2b:         final com.datastax.driver.core.ResultSet resultSet =  session.execute(boundStatement);
1:b3ada2b:         final Row row = resultSet.one();
1:b3ada2b:         if (row != null)
1:b3ada2b:         {
1:b3ada2b:             final ByteBuffer byteBuf = row.getBytes("value");
1:b3ada2b:             return Bytes.getArray(byteBuf);
1:b3ada2b:         }
1:b3ada2b: 
1:b3ada2b:         return null;
1:b3ada2b:     }
1:b3ada2b: 
1:b3ada2b:     public static void put(byte[] key, byte[] value)
1:b3ada2b:     {
1:b3ada2b:         BoundStatement boundStatement = new BoundStatement(putStatement);
1:b3ada2b:         boundStatement.setBytes(0, ByteBuffer.wrap(key));
1:b3ada2b:         boundStatement.setBytes(1, ByteBuffer.wrap(value));
1:b3ada2b: 
1:b3ada2b:         session.execute(boundStatement);
1:b3ada2b:     }
1:b3ada2b: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b3ada2b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: 
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
0: import org.junit.Assert;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import com.datastax.driver.core.*;
1: import com.datastax.driver.core.policies.LoggingRetryPolicy;
1: import com.datastax.driver.core.policies.Policies;
1: import com.datastax.driver.core.utils.Bytes;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.service.EmbeddedCassandraService;
1: 
1: public class CorruptionTest extends SchemaLoader
1: {
1: 
1:     private static EmbeddedCassandraService cassandra;
1:     private static Cluster cluster;
1:     private static Session session;
1: 
1:     private static PreparedStatement getStatement;
1:     private static PreparedStatement putStatement;
1:     private static String KEYSPACE = "cass_test";
1:     private static final String TABLE="put_test";
1:     private static final String KEY = "SingleFailingKey";
1:     private static String VALUE;
1:     private final int THREADPOOL_SIZE=40;
1: 
1:     @BeforeClass()
1:     public static void setup() throws ConfigurationException, IOException
1:     {
1:         Schema.instance.clear();
1: 
1:         cassandra = new EmbeddedCassandraService();
1:         cassandra.start();
1: 
1:         cluster = Cluster.builder().addContactPoint("127.0.0.1")
1:                          .withRetryPolicy(new LoggingRetryPolicy(Policies.defaultRetryPolicy()))
1:                          .withPort(DatabaseDescriptor.getNativeTransportPort()).build();
1:         session = cluster.connect();
1: 
1:         session.execute("CREATE KEYSPACE IF NOT EXISTS " + KEYSPACE +" WITH replication " +
1:                         "= {'class':'SimpleStrategy', 'replication_factor':1};");
1:         session.execute("USE " + KEYSPACE);
1:         session.execute("CREATE TABLE IF NOT EXISTS " + TABLE + " (" +
1:                          "key blob," +
1:                          "value blob," +
1:                          "PRIMARY KEY (key));");
1: 
1: 
1:         // Prepared statements
1:         getStatement = session.prepare("SELECT value FROM " + TABLE + " WHERE key = ?;");
1:         getStatement.setConsistencyLevel(ConsistencyLevel.LOCAL_QUORUM);
1: 
1:         putStatement = session.prepare("INSERT INTO " + TABLE + " (key, value) VALUES (?, ?);");
1:         putStatement.setConsistencyLevel(ConsistencyLevel.LOCAL_QUORUM);
1: 
1: 
1: 
1:         StringBuilder s = new StringBuilder();
1:         char a='a';
1:         char z='z';
1:         for (int i = 0; i < 500*1024; i++)
1:         {
1:             char x = (char)((i%((z-a)+1))+a);
1:             if (x == 'a')
1:             {
1:                 x = '\n';
1:             }
1:             s.append(x);
1:         }
1:         VALUE = s.toString();
1:     }
1: 
1:     @Test
1:     public void runCorruptionTest()
1:     {
1: 
1:         final CountDownLatch failure = new CountDownLatch(1);
1: 
1: 
1:         ExecutorService executor = Executors.newFixedThreadPool(THREADPOOL_SIZE);
1:         for (int i = 0; i < THREADPOOL_SIZE; i++)
1:         {
1:             executor.execute(new Runnable()
1:             {
1:                 @Override
1:                 public void run()
1:                 {
1:                     for (int i = 0; i < 100000; i++)
1:                     {
1:                         put(KEY.getBytes(), VALUE.getBytes());
1:                         byte[] res = get(KEY.getBytes());
1:                         //since we're flooding the server we might get some timeouts, that's not
1:                         //relevant for this test
1:                         if (res == null)
1:                             continue;
1: 
1:                         if (!Arrays.equals(VALUE.getBytes(), res))
1:                         {
1:                             /*try
1:                             {
1:                                 dumpKeys(VALUE.getBytes(), res);
1:                             }
1:                             catch (IOException e)
1:                             {
1:                                 e.printStackTrace();
1:                             }*/
1:                             failure.countDown();
1:                         }
1:                     }
1:                 }
1: 
1:                 private void dumpKeys(byte[] putdata, byte[] getdata) throws IOException {
1:                     String basename = "bad-data-tid" + Thread.currentThread().getId();
1:                     File put = new File(basename+"-put");
1:                     File get = new File(basename+"-get");
1:                     try(FileWriter pw = new FileWriter(put)) {
1:                         pw.write(new String(putdata));
1:                     }
1:                     try(FileWriter pw = new FileWriter(get)) {
1:                         pw.write(new String(getdata));
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         try
1:         {
1:             assert!failure.await(2, TimeUnit.MINUTES);
1:         }
1:         catch (InterruptedException e)
1:         {
1: 
1:         }
1:         executor.shutdownNow();
1: 
1:     }
1: 
1:     public static byte[] get(byte[] key)
1:     {
1:         BoundStatement boundStatement = new BoundStatement(getStatement);
1:         boundStatement.setBytes(0, ByteBuffer.wrap(key));
1: 
1:         final com.datastax.driver.core.ResultSet resultSet =  session.execute(boundStatement);
1:         final Row row = resultSet.one();
1:         if (row != null)
1:         {
1:             final ByteBuffer byteBuf = row.getBytes("value");
1:             return Bytes.getArray(byteBuf);
1:         }
1: 
1:         return null;
1:     }
1: 
1:     public static void put(byte[] key, byte[] value)
1:     {
1:         BoundStatement boundStatement = new BoundStatement(putStatement);
1:         boundStatement.setBytes(0, ByteBuffer.wrap(key));
1:         boundStatement.setBytes(1, ByteBuffer.wrap(value));
1: 
1:         session.execute(boundStatement);
1:     }
1: }
============================================================================