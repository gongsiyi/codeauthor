1:9a90e98: /*
1:9a90e98:  * Licensed to the Apache Software Foundation (ASF) under one
1:9a90e98:  * or more contributor license agreements.  See the NOTICE file
1:9a90e98:  * distributed with this work for additional information
1:9a90e98:  * regarding copyright ownership.  The ASF licenses this file
1:9a90e98:  * to you under the Apache License, Version 2.0 (the
1:9a90e98:  * "License"); you may not use this file except in compliance
1:9a90e98:  * with the License.  You may obtain a copy of the License at
1:9a90e98:  *
1:9a90e98:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9a90e98:  *
1:9a90e98:  * Unless required by applicable law or agreed to in writing, software
1:9a90e98:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9a90e98:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a90e98:  * See the License for the specific language governing permissions and
1:9a90e98:  * limitations under the License.
1:9a90e98:  */
1:9a90e98: 
1:9a90e98: package org.apache.cassandra.gms;
1:9a90e98: 
1:9a90e98: import java.util.Collections;
1:9a90e98: import java.util.EnumMap;
1:9a90e98: import java.util.List;
1:9a90e98: import java.util.Map;
1:9a90e98: import java.util.Set;
1:9a90e98: import java.util.UUID;
1:9a90e98: import java.util.concurrent.atomic.AtomicInteger;
1:9a90e98: 
1:9797511: import org.junit.BeforeClass;
1:9a90e98: import org.junit.Test;
1:9a90e98: 
1:9a90e98: import org.apache.cassandra.config.DatabaseDescriptor;
1:9a90e98: import org.apache.cassandra.dht.Token;
1:9a90e98: 
1:9a90e98: import static org.junit.Assert.assertEquals;
1:9a90e98: import static org.junit.Assert.assertTrue;
1:9a90e98: 
1:9a90e98: public class EndpointStateTest
1:9a90e98: {
1:9a90e98:     public volatile VersionedValue.VersionedValueFactory valueFactory =
1:9a90e98:         new VersionedValue.VersionedValueFactory(DatabaseDescriptor.getPartitioner());
1:9a90e98: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:9a90e98:     @Test
1:9a90e98:     public void testMultiThreadedReadConsistency() throws InterruptedException
1:9a90e98:     {
1:9a90e98:         for (int i = 0; i < 500; i++)
1:9a90e98:             innerTestMultiThreadedReadConsistency();
1:9a90e98:     }
1:9a90e98: 
1:9a90e98:     /**
1:9a90e98:      * Test that a thread reading values whilst they are updated by another thread will
1:9a90e98:      * not see an entry unless it sees the entry previously added as well, even though
1:9a90e98:      * we are accessing the map via an iterator backed by the underlying map. This
1:9a90e98:      * works because EndpointState copies the map each time values are added.
1:9a90e98:      */
1:9a90e98:     private void innerTestMultiThreadedReadConsistency() throws InterruptedException
1:9a90e98:     {
1:9a90e98:         final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();
1:9a90e98:         final List<Token> tokens = Collections.singletonList(token);
1:9a90e98:         final HeartBeatState hb = new HeartBeatState(0);
1:9a90e98:         final EndpointState state = new EndpointState(hb);
1:9a90e98:         final AtomicInteger numFailures = new AtomicInteger();
1:9a90e98: 
1:9a90e98:         Thread t1 = new Thread(new Runnable()
1:9a90e98:         {
1:9a90e98:             public void run()
1:9a90e98:             {
1:9a90e98:                 state.addApplicationState(ApplicationState.TOKENS, valueFactory.tokens(tokens));
1:9a90e98:                 state.addApplicationState(ApplicationState.STATUS, valueFactory.normal(tokens));
1:9a90e98:             }
1:9a90e98:         });
1:9a90e98: 
1:9a90e98:         Thread t2 = new Thread(new Runnable()
1:9a90e98:         {
1:9a90e98:             public void run()
1:9a90e98:             {
1:9a90e98:                 for (int i = 0; i < 50; i++)
1:9a90e98:                 {
1:9a90e98:                     Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);
1:9a90e98:                     for (Map.Entry<ApplicationState, VersionedValue> entry : state.states())
1:9a90e98:                         values.put(entry.getKey(), entry.getValue());
1:9a90e98: 
1:9a90e98:                     if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS))
1:9a90e98:                     {
1:9a90e98:                         numFailures.incrementAndGet();
1:9a90e98:                         System.out.println(String.format("Failed: %s", values));
1:9a90e98:                     }
1:9a90e98:                 }
1:9a90e98:             }
1:9a90e98:         });
1:9a90e98: 
1:9a90e98:         t1.start();
1:9a90e98:         t2.start();
1:9a90e98: 
1:9a90e98:         t1.join();
1:9a90e98:         t2.join();
1:9a90e98: 
1:9a90e98:         assertTrue(numFailures.get() == 0);
1:9a90e98:     }
1:9a90e98: 
1:9a90e98:     @Test
1:9a90e98:     public void testMultiThreadWriteConsistency() throws InterruptedException
1:9a90e98:     {
1:9a90e98:         for (int i = 0; i < 500; i++)
1:9a90e98:             innerTestMultiThreadWriteConsistency();
1:9a90e98:     }
1:9a90e98: 
1:9a90e98:     /**
1:9a90e98:      * Test that two threads can update the state map concurrently.
1:9a90e98:      */
1:9a90e98:     private void innerTestMultiThreadWriteConsistency() throws InterruptedException
1:9a90e98:     {
1:9a90e98:         final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();
1:9a90e98:         final List<Token> tokens = Collections.singletonList(token);
1:9a90e98:         final String ip = "127.0.0.1";
1:9a90e98:         final UUID hostId = UUID.randomUUID();
1:9a90e98:         final HeartBeatState hb = new HeartBeatState(0);
1:9a90e98:         final EndpointState state = new EndpointState(hb);
1:9a90e98: 
1:9a90e98:         Thread t1 = new Thread(new Runnable()
1:9a90e98:         {
1:9a90e98:             public void run()
1:9a90e98:             {
1:9a90e98:                 Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);
1:9a90e98:                 states.put(ApplicationState.TOKENS, valueFactory.tokens(tokens));
1:9a90e98:                 states.put(ApplicationState.STATUS, valueFactory.normal(tokens));
1:9a90e98:                 state.addApplicationStates(states);
1:9a90e98:             }
1:9a90e98:         });
1:9a90e98: 
1:9a90e98:         Thread t2 = new Thread(new Runnable()
1:9a90e98:         {
1:9a90e98:             public void run()
1:9a90e98:             {
1:9a90e98:                 Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);
1:9a90e98:                 states.put(ApplicationState.INTERNAL_IP, valueFactory.internalIP(ip));
1:9a90e98:                 states.put(ApplicationState.HOST_ID, valueFactory.hostId(hostId));
1:9a90e98:                 state.addApplicationStates(states);
1:9a90e98:             }
1:9a90e98:         });
1:9a90e98: 
1:9a90e98:         t1.start();
1:9a90e98:         t2.start();
1:9a90e98: 
1:9a90e98:         t1.join();
1:9a90e98:         t2.join();
1:9a90e98: 
1:9a90e98:         Set<Map.Entry<ApplicationState, VersionedValue>> states = state.states();
1:9a90e98:         assertEquals(4, states.size());
1:9a90e98: 
1:9a90e98:         Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);
1:9a90e98:         for (Map.Entry<ApplicationState, VersionedValue> entry : states)
1:9a90e98:             values.put(entry.getKey(), entry.getValue());
1:9a90e98: 
1:9a90e98:         assertTrue(values.containsKey(ApplicationState.STATUS));
1:9a90e98:         assertTrue(values.containsKey(ApplicationState.TOKENS));
1:9a90e98:         assertTrue(values.containsKey(ApplicationState.INTERNAL_IP));
1:9a90e98:         assertTrue(values.containsKey(ApplicationState.HOST_ID));
1:9a90e98:     }
1:9a90e98: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:9a90e98
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
1: import java.util.Collections;
1: import java.util.EnumMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.UUID;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.dht.Token;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class EndpointStateTest
1: {
1:     public volatile VersionedValue.VersionedValueFactory valueFactory =
1:         new VersionedValue.VersionedValueFactory(DatabaseDescriptor.getPartitioner());
1: 
1:     @Test
1:     public void testMultiThreadedReadConsistency() throws InterruptedException
1:     {
1:         for (int i = 0; i < 500; i++)
1:             innerTestMultiThreadedReadConsistency();
1:     }
1: 
1:     /**
1:      * Test that a thread reading values whilst they are updated by another thread will
1:      * not see an entry unless it sees the entry previously added as well, even though
1:      * we are accessing the map via an iterator backed by the underlying map. This
1:      * works because EndpointState copies the map each time values are added.
1:      */
1:     private void innerTestMultiThreadedReadConsistency() throws InterruptedException
1:     {
1:         final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();
1:         final List<Token> tokens = Collections.singletonList(token);
1:         final HeartBeatState hb = new HeartBeatState(0);
1:         final EndpointState state = new EndpointState(hb);
1:         final AtomicInteger numFailures = new AtomicInteger();
1: 
1:         Thread t1 = new Thread(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 state.addApplicationState(ApplicationState.TOKENS, valueFactory.tokens(tokens));
1:                 state.addApplicationState(ApplicationState.STATUS, valueFactory.normal(tokens));
1:             }
1:         });
1: 
1:         Thread t2 = new Thread(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 for (int i = 0; i < 50; i++)
1:                 {
1:                     Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);
1:                     for (Map.Entry<ApplicationState, VersionedValue> entry : state.states())
1:                         values.put(entry.getKey(), entry.getValue());
1: 
1:                     if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS))
1:                     {
1:                         numFailures.incrementAndGet();
1:                         System.out.println(String.format("Failed: %s", values));
1:                     }
1:                 }
1:             }
1:         });
1: 
1:         t1.start();
1:         t2.start();
1: 
1:         t1.join();
1:         t2.join();
1: 
1:         assertTrue(numFailures.get() == 0);
1:     }
1: 
1:     @Test
1:     public void testMultiThreadWriteConsistency() throws InterruptedException
1:     {
1:         for (int i = 0; i < 500; i++)
1:             innerTestMultiThreadWriteConsistency();
1:     }
1: 
1:     /**
1:      * Test that two threads can update the state map concurrently.
1:      */
1:     private void innerTestMultiThreadWriteConsistency() throws InterruptedException
1:     {
1:         final Token token = DatabaseDescriptor.getPartitioner().getRandomToken();
1:         final List<Token> tokens = Collections.singletonList(token);
1:         final String ip = "127.0.0.1";
1:         final UUID hostId = UUID.randomUUID();
1:         final HeartBeatState hb = new HeartBeatState(0);
1:         final EndpointState state = new EndpointState(hb);
1: 
1:         Thread t1 = new Thread(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);
1:                 states.put(ApplicationState.TOKENS, valueFactory.tokens(tokens));
1:                 states.put(ApplicationState.STATUS, valueFactory.normal(tokens));
1:                 state.addApplicationStates(states);
1:             }
1:         });
1: 
1:         Thread t2 = new Thread(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);
1:                 states.put(ApplicationState.INTERNAL_IP, valueFactory.internalIP(ip));
1:                 states.put(ApplicationState.HOST_ID, valueFactory.hostId(hostId));
1:                 state.addApplicationStates(states);
1:             }
1:         });
1: 
1:         t1.start();
1:         t2.start();
1: 
1:         t1.join();
1:         t2.join();
1: 
1:         Set<Map.Entry<ApplicationState, VersionedValue>> states = state.states();
1:         assertEquals(4, states.size());
1: 
1:         Map<ApplicationState, VersionedValue> values = new EnumMap<>(ApplicationState.class);
1:         for (Map.Entry<ApplicationState, VersionedValue> entry : states)
1:             values.put(entry.getKey(), entry.getValue());
1: 
1:         assertTrue(values.containsKey(ApplicationState.STATUS));
1:         assertTrue(values.containsKey(ApplicationState.TOKENS));
1:         assertTrue(values.containsKey(ApplicationState.INTERNAL_IP));
1:         assertTrue(values.containsKey(ApplicationState.HOST_ID));
1:     }
1: }
============================================================================