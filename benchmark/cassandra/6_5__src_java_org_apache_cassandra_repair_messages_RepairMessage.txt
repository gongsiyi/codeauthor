1:eb4fa4a: /*
1:eb4fa4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:eb4fa4a:  * or more contributor license agreements.  See the NOTICE file
1:eb4fa4a:  * distributed with this work for additional information
1:eb4fa4a:  * regarding copyright ownership.  The ASF licenses this file
1:eb4fa4a:  * to you under the Apache License, Version 2.0 (the
1:eb4fa4a:  * "License"); you may not use this file except in compliance
1:eb4fa4a:  * with the License.  You may obtain a copy of the License at
1:eb4fa4a:  *
1:eb4fa4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb4fa4a:  *
1:eb4fa4a:  * Unless required by applicable law or agreed to in writing, software
1:eb4fa4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb4fa4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb4fa4a:  * See the License for the specific language governing permissions and
1:eb4fa4a:  * limitations under the License.
1:eb4fa4a:  */
1:eb4fa4a: package org.apache.cassandra.repair.messages;
1:eb4fa4a: 
1:eb4fa4a: import java.io.IOException;
1:eb4fa4a: 
1:eb4fa4a: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:eb4fa4a: import org.apache.cassandra.net.MessageOut;
1:eb4fa4a: import org.apache.cassandra.net.MessagingService;
1:eb4fa4a: import org.apache.cassandra.repair.RepairJobDesc;
1:eb4fa4a: 
1:eb4fa4a: /**
1:eb4fa4a:  * Base class of all repair related request/response messages.
1:eb4fa4a:  *
1:eb4fa4a:  * @since 2.0
1:eb4fa4a:  */
1:eb4fa4a: public abstract class RepairMessage
1:eb4fa4a: {
1:eb4fa4a:     public static final IVersionedSerializer<RepairMessage> serializer = new RepairMessageSerializer();
1:eb4fa4a: 
1:eb4fa4a:     public static interface MessageSerializer<T extends RepairMessage> extends IVersionedSerializer<T> {}
1:eb4fa4a: 
1:eb4fa4a:     public static enum Type
1:eb4fa4a:     {
1:eb4fa4a:         VALIDATION_REQUEST(0, ValidationRequest.serializer),
1:eb4fa4a:         VALIDATION_COMPLETE(1, ValidationComplete.serializer),
1:eb4fa4a:         SYNC_REQUEST(2, SyncRequest.serializer),
1:a7b7214:         SYNC_COMPLETE(3, SyncComplete.serializer),
1:a7b7214:         ANTICOMPACTION_REQUEST(4, AnticompactionRequest.serializer),
1:de8a479:         PREPARE_MESSAGE(5, PrepareMessage.serializer),
1:0108748:         SNAPSHOT(6, SnapshotMessage.serializer),
1:0108748:         CLEANUP(7, CleanupMessage.serializer);
1:eb4fa4a: 
1:eb4fa4a:         private final byte type;
1:eb4fa4a:         private final MessageSerializer<RepairMessage> serializer;
1:eb4fa4a: 
1:eb4fa4a:         private Type(int type, MessageSerializer<RepairMessage> serializer)
1:eb4fa4a:         {
1:eb4fa4a:             this.type = (byte) type;
1:eb4fa4a:             this.serializer = serializer;
1:eb4fa4a:         }
1:eb4fa4a: 
1:eb4fa4a:         public static Type fromByte(byte b)
1:eb4fa4a:         {
1:eb4fa4a:             for (Type t : values())
1:eb4fa4a:             {
1:eb4fa4a:                if (t.type == b)
1:eb4fa4a:                    return t;
1:eb4fa4a:             }
1:eb4fa4a:             throw new IllegalArgumentException("Unknown RepairMessage.Type: " + b);
1:eb4fa4a:         }
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     public final Type messageType;
1:eb4fa4a:     public final RepairJobDesc desc;
1:eb4fa4a: 
1:eb4fa4a:     protected RepairMessage(Type messageType, RepairJobDesc desc)
1:eb4fa4a:     {
1:eb4fa4a:         this.messageType = messageType;
1:eb4fa4a:         this.desc = desc;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     public MessageOut<RepairMessage> createMessage()
1:eb4fa4a:     {
1:eb4fa4a:         return new MessageOut<>(MessagingService.Verb.REPAIR_MESSAGE, this, RepairMessage.serializer);
1:eb4fa4a:     }
1:eb4fa4a: 
1:806facc:     public static class RepairMessageSerializer implements MessageSerializer<RepairMessage>
1:eb4fa4a:     {
1:75508ec:         public void serialize(RepairMessage message, DataOutputPlus out, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             out.write(message.messageType.type);
1:eb4fa4a:             message.messageType.serializer.serialize(message, out, version);
1:eb4fa4a:         }
1:eb4fa4a: 
1:03f72ac:         public RepairMessage deserialize(DataInputPlus in, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             RepairMessage.Type messageType = RepairMessage.Type.fromByte(in.readByte());
1:eb4fa4a:             return messageType.serializer.deserialize(in, version);
1:eb4fa4a:         }
1:eb4fa4a: 
1:eb4fa4a:         public long serializedSize(RepairMessage message, int version)
1:eb4fa4a:         {
1:eb4fa4a:             long size = 1; // for messageType byte
1:eb4fa4a:             size += message.messageType.serializer.serializedSize(message, version);
1:eb4fa4a:             return size;
1:eb4fa4a:         }
1:eb4fa4a:     }
1:eb4fa4a: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public RepairMessage deserialize(DataInputPlus in, int version) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:d4419ff
commit:0108748
/////////////////////////////////////////////////////////////////////////
1:         SNAPSHOT(6, SnapshotMessage.serializer),
1:         CLEANUP(7, CleanupMessage.serializer);
commit:de8a479
/////////////////////////////////////////////////////////////////////////
1:         PREPARE_MESSAGE(5, PrepareMessage.serializer),
0:         SNAPSHOT(6, SnapshotMessage.serializer);
commit:eb4fa4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair.messages;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: 
0: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.net.MessageOut;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.repair.RepairJobDesc;
1: 
1: /**
1:  * Base class of all repair related request/response messages.
1:  *
1:  * @since 2.0
1:  */
1: public abstract class RepairMessage
1: {
1:     public static final IVersionedSerializer<RepairMessage> serializer = new RepairMessageSerializer();
1: 
1:     public static interface MessageSerializer<T extends RepairMessage> extends IVersionedSerializer<T> {}
1: 
1:     public static enum Type
1:     {
1:         VALIDATION_REQUEST(0, ValidationRequest.serializer),
1:         VALIDATION_COMPLETE(1, ValidationComplete.serializer),
1:         SYNC_REQUEST(2, SyncRequest.serializer),
0:         SYNC_COMPLETE(3, SyncComplete.serializer);
1: 
1:         private final byte type;
1:         private final MessageSerializer<RepairMessage> serializer;
1: 
1:         private Type(int type, MessageSerializer<RepairMessage> serializer)
1:         {
1:             this.type = (byte) type;
1:             this.serializer = serializer;
1:         }
1: 
1:         public static Type fromByte(byte b)
1:         {
1:             for (Type t : values())
1:             {
1:                if (t.type == b)
1:                    return t;
1:             }
1:             throw new IllegalArgumentException("Unknown RepairMessage.Type: " + b);
1:         }
1:     }
1: 
1:     public final Type messageType;
1:     public final RepairJobDesc desc;
1: 
1:     protected RepairMessage(Type messageType, RepairJobDesc desc)
1:     {
1:         this.messageType = messageType;
1:         this.desc = desc;
1:     }
1: 
1:     public MessageOut<RepairMessage> createMessage()
1:     {
1:         return new MessageOut<>(MessagingService.Verb.REPAIR_MESSAGE, this, RepairMessage.serializer);
1:     }
1: 
0:     public static class RepairMessageSerializer implements IVersionedSerializer<RepairMessage>
1:     {
0:         public void serialize(RepairMessage message, DataOutput out, int version) throws IOException
1:         {
1:             out.write(message.messageType.type);
1:             message.messageType.serializer.serialize(message, out, version);
1:         }
1: 
0:         public RepairMessage deserialize(DataInput in, int version) throws IOException
1:         {
1:             RepairMessage.Type messageType = RepairMessage.Type.fromByte(in.readByte());
1:             return messageType.serializer.deserialize(in, version);
1:         }
1: 
1:         public long serializedSize(RepairMessage message, int version)
1:         {
1:             long size = 1; // for messageType byte
1:             size += message.messageType.serializer.serializedSize(message, version);
1:             return size;
1:         }
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:806facc
/////////////////////////////////////////////////////////////////////////
1:     public static class RepairMessageSerializer implements MessageSerializer<RepairMessage>
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(RepairMessage message, DataOutputPlus out, int version) throws IOException
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a7b7214
/////////////////////////////////////////////////////////////////////////
1:         SYNC_COMPLETE(3, SyncComplete.serializer),
1:         ANTICOMPACTION_REQUEST(4, AnticompactionRequest.serializer),
0:         PREPARE_MESSAGE(5, PrepareMessage.serializer);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:66f3014
/////////////////////////////////////////////////////////////////////////
============================================================================