1:64e2f5d: /*
1:64e2f5d:  * Licensed to the Apache Software Foundation (ASF) under one
1:64e2f5d:  * or more contributor license agreements.  See the NOTICE file
1:64e2f5d:  * distributed with this work for additional information
1:64e2f5d:  * regarding copyright ownership.  The ASF licenses this file
1:64e2f5d:  * to you under the Apache License, Version 2.0 (the
1:64e2f5d:  * "License"); you may not use this file except in compliance
1:64e2f5d:  * with the License.  You may obtain a copy of the License at
1:64e2f5d:  *
1:64e2f5d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:64e2f5d:  *
1:64e2f5d:  * Unless required by applicable law or agreed to in writing, software
1:64e2f5d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:64e2f5d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:64e2f5d:  * See the License for the specific language governing permissions and
1:64e2f5d:  * limitations under the License.
1:64e2f5d:  */
1:64e2f5d: 
1:64e2f5d: package org.apache.cassandra.cql3.restrictions;
1:64e2f5d: 
1:64e2f5d: import java.util.ArrayList;
1:64e2f5d: import java.util.List;
1:64e2f5d: 
1:64e2f5d: import org.apache.cassandra.config.CFMetaData;
1:64e2f5d: import org.apache.cassandra.cql3.IndexName;
1:64e2f5d: import org.apache.cassandra.exceptions.InvalidRequestException;
1:64e2f5d: 
1:64e2f5d: public class IndexRestrictions
1:64e2f5d: {
1:64e2f5d:     public static final String INDEX_NOT_FOUND = "Invalid index expression, index %s not found for %s.%s";
1:64e2f5d:     public static final String INVALID_INDEX = "Target index %s cannot be used to query %s.%s";
1:64e2f5d:     public static final String CUSTOM_EXPRESSION_NOT_SUPPORTED = "Index %s does not support custom expressions";
1:64e2f5d:     public static final String NON_CUSTOM_INDEX_IN_EXPRESSION = "Only CUSTOM indexes may be used in custom index expressions, %s is not valid";
1:64e2f5d:     public static final String MULTIPLE_EXPRESSIONS = "Multiple custom index expressions in a single query are not supported";
1:64e2f5d: 
1:64e2f5d:     private final List<Restrictions> regularRestrictions = new ArrayList<>();
1:64e2f5d:     private final List<CustomIndexExpression> customExpressions = new ArrayList<>();
1:64e2f5d: 
1:64e2f5d:     public void add(Restrictions restrictions)
1:64e2f5d:     {
1:64e2f5d:         regularRestrictions.add(restrictions);
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     public void add(CustomIndexExpression expression)
1:64e2f5d:     {
1:64e2f5d:         customExpressions.add(expression);
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     public boolean isEmpty()
1:64e2f5d:     {
1:64e2f5d:         return regularRestrictions.isEmpty() && customExpressions.isEmpty();
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     public List<Restrictions> getRestrictions()
1:64e2f5d:     {
1:64e2f5d:         return regularRestrictions;
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     public List<CustomIndexExpression> getCustomIndexExpressions()
1:64e2f5d:     {
1:64e2f5d:         return customExpressions;
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     static InvalidRequestException invalidIndex(IndexName indexName, CFMetaData cfm)
1:64e2f5d:     {
1:64e2f5d:         return new InvalidRequestException(String.format(INVALID_INDEX, indexName.getIdx(), cfm.ksName, cfm.cfName));
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     static InvalidRequestException indexNotFound(IndexName indexName, CFMetaData cfm)
1:64e2f5d:     {
1:64e2f5d:         return new InvalidRequestException(String.format(INDEX_NOT_FOUND,indexName.getIdx(), cfm.ksName, cfm.cfName));
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     static InvalidRequestException nonCustomIndexInExpression(IndexName indexName)
1:64e2f5d:     {
1:64e2f5d:         return new InvalidRequestException(String.format(NON_CUSTOM_INDEX_IN_EXPRESSION, indexName.getIdx()));
1:64e2f5d:     }
1:64e2f5d: 
1:64e2f5d:     static InvalidRequestException customExpressionNotSupported(IndexName indexName)
1:64e2f5d:     {
1:64e2f5d:         return new InvalidRequestException(String.format(CUSTOM_EXPRESSION_NOT_SUPPORTED, indexName.getIdx()));
1:64e2f5d:     }
1:64e2f5d: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:64e2f5d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.restrictions;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.cql3.IndexName;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: public class IndexRestrictions
1: {
1:     public static final String INDEX_NOT_FOUND = "Invalid index expression, index %s not found for %s.%s";
1:     public static final String INVALID_INDEX = "Target index %s cannot be used to query %s.%s";
1:     public static final String CUSTOM_EXPRESSION_NOT_SUPPORTED = "Index %s does not support custom expressions";
1:     public static final String NON_CUSTOM_INDEX_IN_EXPRESSION = "Only CUSTOM indexes may be used in custom index expressions, %s is not valid";
1:     public static final String MULTIPLE_EXPRESSIONS = "Multiple custom index expressions in a single query are not supported";
1: 
1:     private final List<Restrictions> regularRestrictions = new ArrayList<>();
1:     private final List<CustomIndexExpression> customExpressions = new ArrayList<>();
1: 
1:     public void add(Restrictions restrictions)
1:     {
1:         regularRestrictions.add(restrictions);
1:     }
1: 
1:     public void add(CustomIndexExpression expression)
1:     {
1:         customExpressions.add(expression);
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return regularRestrictions.isEmpty() && customExpressions.isEmpty();
1:     }
1: 
1:     public List<Restrictions> getRestrictions()
1:     {
1:         return regularRestrictions;
1:     }
1: 
1:     public List<CustomIndexExpression> getCustomIndexExpressions()
1:     {
1:         return customExpressions;
1:     }
1: 
1:     static InvalidRequestException invalidIndex(IndexName indexName, CFMetaData cfm)
1:     {
1:         return new InvalidRequestException(String.format(INVALID_INDEX, indexName.getIdx(), cfm.ksName, cfm.cfName));
1:     }
1: 
1:     static InvalidRequestException indexNotFound(IndexName indexName, CFMetaData cfm)
1:     {
1:         return new InvalidRequestException(String.format(INDEX_NOT_FOUND,indexName.getIdx(), cfm.ksName, cfm.cfName));
1:     }
1: 
1:     static InvalidRequestException nonCustomIndexInExpression(IndexName indexName)
1:     {
1:         return new InvalidRequestException(String.format(NON_CUSTOM_INDEX_IN_EXPRESSION, indexName.getIdx()));
1:     }
1: 
1:     static InvalidRequestException customExpressionNotSupported(IndexName indexName)
1:     {
1:         return new InvalidRequestException(String.format(CUSTOM_EXPRESSION_NOT_SUPPORTED, indexName.getIdx()));
1:     }
1: }
============================================================================