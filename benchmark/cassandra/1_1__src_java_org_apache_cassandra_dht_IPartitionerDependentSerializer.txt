1:806facc: /*
1:806facc:  * Licensed to the Apache Software Foundation (ASF) under one
1:806facc:  * or more contributor license agreements.  See the NOTICE file
1:806facc:  * distributed with this work for additional information
1:806facc:  * regarding copyright ownership.  The ASF licenses this file
1:806facc:  * to you under the Apache License, Version 2.0 (the
1:806facc:  * "License"); you may not use this file except in compliance
1:806facc:  * with the License.  You may obtain a copy of the License at
1:806facc:  *
1:806facc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:806facc:  *
1:806facc:  * Unless required by applicable law or agreed to in writing, software
1:806facc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:806facc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:806facc:  * See the License for the specific language governing permissions and
1:806facc:  * limitations under the License.
1:806facc:  */
1:806facc: package org.apache.cassandra.dht;
1:806facc: 
1:806facc: import java.io.DataInput;
1:806facc: import java.io.IOException;
1:806facc: 
1:806facc: import org.apache.cassandra.io.util.DataOutputPlus;
1:806facc: 
1:806facc: /**
1:806facc:  * Versioned serializer where the serialization depends on partitioner.
1:806facc:  *
1:806facc:  * On serialization the partitioner is given by the entity being serialized. To deserialize the partitioner used must
1:806facc:  * be known to the calling method.
1:806facc:  */
1:806facc: public interface IPartitionerDependentSerializer<T>
1:806facc: {
1:806facc:     /**
1:806facc:      * Serialize the specified type into the specified DataOutputStream instance.
1:806facc:      *
1:806facc:      * @param t type that needs to be serialized
1:806facc:      * @param out DataOutput into which serialization needs to happen.
1:806facc:      * @param version protocol version
1:806facc:      * @throws java.io.IOException if serialization fails
1:806facc:      */
1:806facc:     public void serialize(T t, DataOutputPlus out, int version) throws IOException;
1:806facc: 
1:806facc:     /**
1:806facc:      * Deserialize into the specified DataInputStream instance.
1:806facc:      * @param in DataInput from which deserialization needs to happen.
1:806facc:      * @param p Partitioner that will be used to construct tokens. Needs to match the partitioner that was used to
1:806facc:      *     serialize the token.
1:806facc:      * @param version protocol version
1:806facc:      * @return the type that was deserialized
1:806facc:      * @throws IOException if deserialization fails
1:806facc:      */
1:806facc:     public T deserialize(DataInput in, IPartitioner p, int version) throws IOException;
1:806facc: 
1:806facc:     /**
1:806facc:      * Calculate serialized size of object without actually serializing.
1:806facc:      * @param t object to calculate serialized size
1:806facc:      * @param version protocol version
1:806facc:      * @return serialized size of object t
1:806facc:      */
1:806facc:     public long serializedSize(T t, int version);
1:806facc: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:806facc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.dht;
1: 
1: import java.io.DataInput;
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * Versioned serializer where the serialization depends on partitioner.
1:  *
1:  * On serialization the partitioner is given by the entity being serialized. To deserialize the partitioner used must
1:  * be known to the calling method.
1:  */
1: public interface IPartitionerDependentSerializer<T>
1: {
1:     /**
1:      * Serialize the specified type into the specified DataOutputStream instance.
1:      *
1:      * @param t type that needs to be serialized
1:      * @param out DataOutput into which serialization needs to happen.
1:      * @param version protocol version
1:      * @throws java.io.IOException if serialization fails
1:      */
1:     public void serialize(T t, DataOutputPlus out, int version) throws IOException;
1: 
1:     /**
1:      * Deserialize into the specified DataInputStream instance.
1:      * @param in DataInput from which deserialization needs to happen.
1:      * @param p Partitioner that will be used to construct tokens. Needs to match the partitioner that was used to
1:      *     serialize the token.
1:      * @param version protocol version
1:      * @return the type that was deserialized
1:      * @throws IOException if deserialization fails
1:      */
1:     public T deserialize(DataInput in, IPartitioner p, int version) throws IOException;
1: 
1:     /**
1:      * Calculate serialized size of object without actually serializing.
1:      * @param t object to calculate serialized size
1:      * @param version protocol version
1:      * @return serialized size of object t
1:      */
1:     public long serializedSize(T t, int version);
1: }
============================================================================