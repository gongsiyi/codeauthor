1:16044a6: /*
1:16044a6:  * Licensed to the Apache Software Foundation (ASF) under one
1:16044a6:  * or more contributor license agreements.  See the NOTICE file
1:16044a6:  * distributed with this work for additional information
1:16044a6:  * regarding copyright ownership.  The ASF licenses this file
1:16044a6:  * to you under the Apache License, Version 2.0 (the
1:16044a6:  * "License"); you may not use this file except in compliance
1:16044a6:  * with the License.  You may obtain a copy of the License at
1:16044a6:  *
1:16044a6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:16044a6:  *
1:16044a6:  * Unless required by applicable law or agreed to in writing, software
1:16044a6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:16044a6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:16044a6:  * See the License for the specific language governing permissions and
1:16044a6:  * limitations under the License.
1:16044a6:  */
1:16044a6: package org.apache.cassandra.schema;
1:16044a6: 
1:16044a6: import java.util.Iterator;
1:16044a6: import java.util.Optional;
1:16044a6: 
1:16044a6: import com.google.common.collect.ImmutableMap;
1:16044a6: 
1:16044a6: import static com.google.common.collect.Iterables.filter;
1:16044a6: 
1:16044a6: public final class Triggers implements Iterable<TriggerMetadata>
1:16044a6: {
1:16044a6:     private final ImmutableMap<String, TriggerMetadata> triggers;
1:16044a6: 
1:16044a6:     private Triggers(Builder builder)
1:16044a6:     {
1:16044a6:         triggers = builder.triggers.build();
1:16044a6:     }
1:16044a6: 
1:16044a6:     public static Builder builder()
1:16044a6:     {
1:16044a6:         return new Builder();
1:16044a6:     }
1:16044a6: 
1:16044a6:     public static Triggers none()
1:16044a6:     {
1:16044a6:         return builder().build();
1:16044a6:     }
1:16044a6: 
1:16044a6:     public Iterator<TriggerMetadata> iterator()
1:16044a6:     {
1:16044a6:         return triggers.values().iterator();
1:16044a6:     }
1:16044a6: 
1:16044a6:     public int size()
1:16044a6:     {
1:16044a6:         return triggers.size();
1:16044a6:     }
1:16044a6: 
1:16044a6:     public boolean isEmpty()
1:16044a6:     {
1:16044a6:         return triggers.isEmpty();
1:16044a6:     }
1:16044a6: 
1:16044a6:     /**
1:16044a6:      * Get the trigger with the specified name
1:16044a6:      *
1:16044a6:      * @param name a non-qualified trigger name
1:16044a6:      * @return an empty {@link Optional} if the trigger name is not found; a non-empty optional of {@link TriggerMetadata} otherwise
1:16044a6:      */
1:16044a6:     public Optional<TriggerMetadata> get(String name)
1:16044a6:     {
1:16044a6:         return Optional.ofNullable(triggers.get(name));
1:16044a6:     }
1:16044a6: 
1:16044a6:     /**
1:16044a6:      * Create a Triggers instance with the provided trigger added
1:16044a6:      */
1:16044a6:     public Triggers with(TriggerMetadata trigger)
1:16044a6:     {
1:16044a6:         if (get(trigger.name).isPresent())
1:16044a6:             throw new IllegalStateException(String.format("Trigger %s already exists", trigger.name));
1:16044a6: 
1:16044a6:         return builder().add(this).add(trigger).build();
1:16044a6:     }
1:16044a6: 
1:16044a6:     /**
1:16044a6:      * Creates a Triggers instance with the trigger with the provided name removed
1:16044a6:      */
1:16044a6:     public Triggers without(String name)
1:16044a6:     {
1:16044a6:         TriggerMetadata trigger =
1:16044a6:             get(name).orElseThrow(() -> new IllegalStateException(String.format("Trigger %s doesn't exists", name)));
1:16044a6: 
1:16044a6:         return builder().add(filter(this, t -> t != trigger)).build();
1:16044a6:     }
1:16044a6: 
1:16044a6:     @Override
1:16044a6:     public boolean equals(Object o)
1:16044a6:     {
1:16044a6:         return this == o || (o instanceof Triggers && triggers.equals(((Triggers) o).triggers));
1:16044a6:     }
1:16044a6: 
1:16044a6:     @Override
1:16044a6:     public int hashCode()
1:16044a6:     {
1:16044a6:         return triggers.hashCode();
1:16044a6:     }
1:16044a6: 
1:16044a6:     @Override
1:16044a6:     public String toString()
1:16044a6:     {
1:16044a6:         return triggers.values().toString();
1:16044a6:     }
1:16044a6: 
1:16044a6:     public static final class Builder
1:16044a6:     {
1:16044a6:         final ImmutableMap.Builder<String, TriggerMetadata> triggers = new ImmutableMap.Builder<>();
1:16044a6: 
1:16044a6:         private Builder()
1:16044a6:         {
1:16044a6:         }
1:16044a6: 
1:16044a6:         public Triggers build()
1:16044a6:         {
1:16044a6:             return new Triggers(this);
1:16044a6:         }
1:16044a6: 
1:16044a6:         public Builder add(TriggerMetadata trigger)
1:16044a6:         {
1:16044a6:             triggers.put(trigger.name, trigger);
1:16044a6:             return this;
1:16044a6:         }
1:16044a6: 
1:16044a6:         public Builder add(Iterable<TriggerMetadata> triggers)
1:16044a6:         {
1:16044a6:             triggers.forEach(this::add);
1:16044a6:             return this;
1:16044a6:         }
1:16044a6:     }
1:16044a6: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:16044a6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.util.Iterator;
1: import java.util.Optional;
1: 
1: import com.google.common.collect.ImmutableMap;
1: 
1: import static com.google.common.collect.Iterables.filter;
1: 
1: public final class Triggers implements Iterable<TriggerMetadata>
1: {
1:     private final ImmutableMap<String, TriggerMetadata> triggers;
1: 
1:     private Triggers(Builder builder)
1:     {
1:         triggers = builder.triggers.build();
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static Triggers none()
1:     {
1:         return builder().build();
1:     }
1: 
1:     public Iterator<TriggerMetadata> iterator()
1:     {
1:         return triggers.values().iterator();
1:     }
1: 
1:     public int size()
1:     {
1:         return triggers.size();
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return triggers.isEmpty();
1:     }
1: 
1:     /**
1:      * Get the trigger with the specified name
1:      *
1:      * @param name a non-qualified trigger name
1:      * @return an empty {@link Optional} if the trigger name is not found; a non-empty optional of {@link TriggerMetadata} otherwise
1:      */
1:     public Optional<TriggerMetadata> get(String name)
1:     {
1:         return Optional.ofNullable(triggers.get(name));
1:     }
1: 
1:     /**
1:      * Create a Triggers instance with the provided trigger added
1:      */
1:     public Triggers with(TriggerMetadata trigger)
1:     {
1:         if (get(trigger.name).isPresent())
1:             throw new IllegalStateException(String.format("Trigger %s already exists", trigger.name));
1: 
1:         return builder().add(this).add(trigger).build();
1:     }
1: 
1:     /**
1:      * Creates a Triggers instance with the trigger with the provided name removed
1:      */
1:     public Triggers without(String name)
1:     {
1:         TriggerMetadata trigger =
1:             get(name).orElseThrow(() -> new IllegalStateException(String.format("Trigger %s doesn't exists", name)));
1: 
1:         return builder().add(filter(this, t -> t != trigger)).build();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         return this == o || (o instanceof Triggers && triggers.equals(((Triggers) o).triggers));
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return triggers.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return triggers.values().toString();
1:     }
1: 
1:     public static final class Builder
1:     {
1:         final ImmutableMap.Builder<String, TriggerMetadata> triggers = new ImmutableMap.Builder<>();
1: 
1:         private Builder()
1:         {
1:         }
1: 
1:         public Triggers build()
1:         {
1:             return new Triggers(this);
1:         }
1: 
1:         public Builder add(TriggerMetadata trigger)
1:         {
1:             triggers.put(trigger.name, trigger);
1:             return this;
1:         }
1: 
1:         public Builder add(Iterable<TriggerMetadata> triggers)
1:         {
1:             triggers.forEach(this::add);
1:             return this;
1:         }
1:     }
1: }
============================================================================