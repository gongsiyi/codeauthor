1:910170c: /*
1:910170c:  * Licensed to the Apache Software Foundation (ASF) under one
1:910170c:  * or more contributor license agreements.  See the NOTICE file
1:910170c:  * distributed with this work for additional information
1:910170c:  * regarding copyright ownership.  The ASF licenses this file
1:910170c:  * to you under the Apache License, Version 2.0 (the
1:910170c:  * "License"); you may not use this file except in compliance
1:910170c:  * with the License.  You may obtain a copy of the License at
1:910170c:  *
1:910170c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:910170c:  *
1:910170c:  * Unless required by applicable law or agreed to in writing, software
1:910170c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:910170c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:910170c:  * See the License for the specific language governing permissions and
1:910170c:  * limitations under the License.
1:910170c:  */
1:910170c: package org.apache.cassandra.db.compaction.writers;
3:910170c: 
1:910170c: 
1:910170c: import java.util.Set;
1:910170c: 
1:910170c: import org.slf4j.Logger;
1:910170c: import org.slf4j.LoggerFactory;
1:910170c: 
1:910170c: import org.apache.cassandra.db.ColumnFamilyStore;
1:9ed2727: import org.apache.cassandra.db.Directories;
1:a991b64: import org.apache.cassandra.db.SerializationHeader;
1:a991b64: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:e5a76bd: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:910170c: import org.apache.cassandra.io.sstable.Descriptor;
1:910170c: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:910170c: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1:910170c: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1:910170c: 
1:910170c: /**
1:910170c:  * The default compaction writer - creates one output file in L0
1:910170c:  */
1:910170c: public class DefaultCompactionWriter extends CompactionAwareWriter
2:910170c: {
1:910170c:     protected static final Logger logger = LoggerFactory.getLogger(DefaultCompactionWriter.class);
1:e2c6341:     private final int sstableLevel;
1:910170c: 
1:9ed2727:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables)
1:910170c:     {
1:f9a1a80:         this(cfs, directories, txn, nonExpiredSSTables, false, 0);
1:f9a1a80:     }
1:f9a1a80: 
1:f9a1a80:     @Deprecated
1:f9a1a80:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean offline, boolean keepOriginals, int sstableLevel)
1:f9a1a80:     {
1:f9a1a80:         this(cfs, directories, txn, nonExpiredSSTables, keepOriginals, sstableLevel);
2:910170c:     }
1:910170c: 
1:605bcdc:     @SuppressWarnings("resource")
1:f9a1a80:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean keepOriginals, int sstableLevel)
1:910170c:     {
1:f9a1a80:         super(cfs, directories, txn, nonExpiredSSTables, keepOriginals);
1:e2c6341:         this.sstableLevel = sstableLevel;
1:910170c:     }
1:910170c: 
3:910170c:     @Override
1:9ed2727:     public boolean realAppend(UnfilteredRowIterator partition)
1:e2c6341:     {
1:9ed2727:         return sstableWriter.append(partition) != null;
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     @Override
1:e2c6341:     public void switchCompactionLocation(Directories.DataDirectory directory)
1:910170c:     {
2:7aafe05:         @SuppressWarnings("resource")
1:9ed2727:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(getDirectories().getLocationForDisk(directory))),
1:910170c:                                                     estimatedTotalKeys,
1:910170c:                                                     minRepairedAt,
1:910170c:                                                     cfs.metadata,
1:e2c6341:                                                     new MetadataCollector(txn.originals(), cfs.metadata.comparator, sstableLevel),
1:b09e60f:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
1:f81a91d:                                                     cfs.indexManager.listIndexes(),
1:b09e60f:                                                     txn);
1:910170c:         sstableWriter.switchWriter(writer);
1:910170c:     }
1:910170c: 
1:910170c:     @Override
1:910170c:     public long estimatedKeys()
1:910170c:     {
1:910170c:         return estimatedTotalKeys;
1:910170c:     }
1:910170c: }
============================================================================
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:2952500
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f9a1a80
/////////////////////////////////////////////////////////////////////////
1:         this(cfs, directories, txn, nonExpiredSSTables, false, 0);
1:     }
1: 
1:     @Deprecated
1:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean offline, boolean keepOriginals, int sstableLevel)
1:     {
1:         this(cfs, directories, txn, nonExpiredSSTables, keepOriginals, sstableLevel);
1:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean keepOriginals, int sstableLevel)
1:         super(cfs, directories, txn, nonExpiredSSTables, keepOriginals);
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     private final int sstableLevel;
0:         this(cfs, directories, txn, nonExpiredSSTables, false, false, 0);
0:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean offline, boolean keepOriginals, int sstableLevel)
1:         this.sstableLevel = sstableLevel;
/////////////////////////////////////////////////////////////////////////
1:     public void switchCompactionLocation(Directories.DataDirectory directory)
1:                                                     new MetadataCollector(txn.originals(), cfs.metadata.comparator, sstableLevel),
/////////////////////////////////////////////////////////////////////////
0:     public List<SSTableReader> finish(long repairedAt)
1:     {
0:         return sstableWriter.setRepairedAt(repairedAt).finish();
1:     }
1: 
1:     @Override
commit:910170c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction.writers;
1: 
1: 
0: import java.io.File;
0: import java.util.List;
1: import java.util.Set;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.compaction.AbstractCompactedRow;
0: import org.apache.cassandra.db.compaction.OperationType;
1: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.io.sstable.SSTableRewriter;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1: 
1: 
1: /**
1:  * The default compaction writer - creates one output file in L0
1:  */
1: public class DefaultCompactionWriter extends CompactionAwareWriter
1: {
1:     protected static final Logger logger = LoggerFactory.getLogger(DefaultCompactionWriter.class);
0:     private final SSTableRewriter sstableWriter;
1: 
0:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Set<SSTableReader> allSSTables, Set<SSTableReader> nonExpiredSSTables, boolean offline, OperationType compactionType)
1:     {
0:         super(cfs, nonExpiredSSTables);
0:         logger.debug("Expected bloom filter size : {}", estimatedTotalKeys);
0:         sstableWriter = new SSTableRewriter(cfs, allSSTables, maxAge, offline);
0:         long expectedWriteSize = cfs.getExpectedCompactedFileSize(nonExpiredSSTables, compactionType);
0:         File sstableDirectory = cfs.directories.getLocationForDisk(getWriteDirectory(expectedWriteSize));
0:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getTempSSTablePath(sstableDirectory)),
1:                                                     estimatedTotalKeys,
1:                                                     minRepairedAt,
1:                                                     cfs.metadata,
0:                                                     cfs.partitioner,
0:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, 0));
1:         sstableWriter.switchWriter(writer);
1:     }
1: 
1:     @Override
0:     public boolean append(AbstractCompactedRow row)
1:     {
0:         return sstableWriter.append(row) != null;
1:     }
1: 
1:     @Override
0:     public void abort()
1:     {
0:         sstableWriter.abort();
1:     }
1: 
1:     @Override
0:     public List<SSTableReader> finish()
1:     {
0:         return sstableWriter.finish();
1:     }
1: 
1:     @Override
1:     public long estimatedKeys()
1:     {
1:         return estimatedTotalKeys;
1:     }
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:f81a91d
/////////////////////////////////////////////////////////////////////////
1:                                                     cfs.indexManager.listIndexes(),
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Directories;
/////////////////////////////////////////////////////////////////////////
1:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables)
0:         this(cfs, directories, txn, nonExpiredSSTables, false, false);
0:     public DefaultCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean offline, boolean keepOriginals)
0:         super(cfs, directories, txn, nonExpiredSSTables, offline, keepOriginals);
0:     }
0: 
0:     @Override
1:     public boolean realAppend(UnfilteredRowIterator partition)
0:     {
1:         return sstableWriter.append(partition) != null;
0:     }
0: 
0:     @Override
0:     protected void switchCompactionLocation(Directories.DataDirectory directory)
0:     {
1:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(getDirectories().getLocationForDisk(directory))),
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:605bcdc
/////////////////////////////////////////////////////////////////////////
0:     public DefaultCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables)
0:         this(cfs, txn, nonExpiredSSTables, false, false);
0:     }
0: 
1:     @SuppressWarnings("resource")
0:     public DefaultCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean offline, boolean keepOriginals)
0:     {
0:         super(cfs, txn, nonExpiredSSTables, offline, keepOriginals);
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public DefaultCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean offline)
0:         long expectedWriteSize = cfs.getExpectedCompactedFileSize(nonExpiredSSTables, txn.opType());
0:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(sstableDirectory)),
1:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
1:                                                     txn);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:                                                     cfs.partitioner,
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.SerializationHeader;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
/////////////////////////////////////////////////////////////////////////
0:                                                     new MetadataCollector(txn.originals(), cfs.metadata.comparator, 0),
0:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables));
0:     public boolean append(UnfilteredRowIterator partition)
0:         return sstableWriter.append(partition) != null;
/////////////////////////////////////////////////////////////////////////
0: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
1:         @SuppressWarnings("resource")
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
/////////////////////////////////////////////////////////////////////////
0:     public DefaultCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, boolean offline, OperationType compactionType)
0:         super(cfs, txn, nonExpiredSSTables, offline);
/////////////////////////////////////////////////////////////////////////
0:                                                     new MetadataCollector(txn.originals(), cfs.metadata.comparator, 0));
commit:8704006
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.cassandra.utils.Throwables.maybeFail;
0: 
/////////////////////////////////////////////////////////////////////////
0:         super(cfs, allSSTables, nonExpiredSSTables, offline);
/////////////////////////////////////////////////////////////////////////
============================================================================