1:f0ee59d: package org.apache.cassandra.utils;
1:d01f8dd: /*
1:07cdfd0:  *
1:d01f8dd:  * Licensed to the Apache Software Foundation (ASF) under one
1:d01f8dd:  * or more contributor license agreements.  See the NOTICE file
1:d01f8dd:  * distributed with this work for additional information
1:d01f8dd:  * regarding copyright ownership.  The ASF licenses this file
1:d01f8dd:  * to you under the Apache License, Version 2.0 (the
1:d01f8dd:  * "License"); you may not use this file except in compliance
1:d01f8dd:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:d01f8dd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:d01f8dd:  * Unless required by applicable law or agreed to in writing,
1:d01f8dd:  * software distributed under the License is distributed on an
1:d01f8dd:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d01f8dd:  * KIND, either express or implied.  See the License for the
1:d01f8dd:  * specific language governing permissions and limitations
1:d01f8dd:  * under the License.
1:07cdfd0:  *
1:d01f8dd:  */
1:d01f8dd: 
1:83a43f1: 
1:a991b64: import java.io.IOException;
1:75508ec: import java.lang.reflect.Constructor;
1:f0ee59d: import java.util.ArrayList;
1:4d34917: import java.util.Collections;
1:f0ee59d: import java.util.List;
1:4d34917: 
1:a991b64: import org.junit.Test;
1:4d34917: import org.apache.cassandra.io.ISerializer;
1:4d34917: import org.apache.cassandra.io.IVersionedSerializer;
1:c4c9eae: import org.apache.cassandra.io.util.DataInputBuffer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputBuffer;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
9:f0ee59d: 
1:a991b64: import static org.junit.Assert.assertEquals;
1:a991b64: 
1:83a43f1: public class IntervalTreeTest
1:4d34917: {
1:f0ee59d:     @Test
1:f0ee59d:     public void testSearch() throws Exception
1:4d34917:     {
1:4d34917:         List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>();
1:f0ee59d: 
1:4d34917:         intervals.add(Interval.<Integer, Void>create(-300, -200));
1:4d34917:         intervals.add(Interval.<Integer, Void>create(-3, -2));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(1, 2));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(3, 6));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(2, 4));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(5, 7));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(1, 3));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(4, 6));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(8, 9));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(15, 20));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(40, 50));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(49, 60));
1:f0ee59d: 
1:f0ee59d: 
1:4d34917:         IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals);
1:f0ee59d: 
1:a991b64:         assertEquals(3, it.search(Interval.<Integer, Void>create(4, 4)).size());
1:4d34917:         assertEquals(4, it.search(Interval.<Integer, Void>create(4, 5)).size());
1:a991b64:         assertEquals(7, it.search(Interval.<Integer, Void>create(-1, 10)).size());
1:a991b64:         assertEquals(0, it.search(Interval.<Integer, Void>create(-1, -1)).size());
1:a991b64:         assertEquals(5, it.search(Interval.<Integer, Void>create(1, 4)).size());
1:a991b64:         assertEquals(2, it.search(Interval.<Integer, Void>create(0, 1)).size());
1:a991b64:         assertEquals(0, it.search(Interval.<Integer, Void>create(10, 12)).size());
1:f0ee59d: 
1:4d34917:         List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>();
1:f0ee59d: 
1:f0ee59d:         //stravinsky 1880-1971
1:4d34917:         intervals2.add(Interval.<Integer, Void>create(1880, 1971));
1:f0ee59d:         //Schoenberg
1:4d34917:         intervals2.add(Interval.<Integer, Void>create(1874, 1951));
1:f0ee59d:         //Grieg
1:4d34917:         intervals2.add(Interval.<Integer, Void>create(1843, 1907));
1:f0ee59d:         //Schubert
1:4d34917:         intervals2.add(Interval.<Integer, Void>create(1779, 1828));
1:f0ee59d:         //Mozart
1:4d34917:         intervals2.add(Interval.<Integer, Void>create(1756, 1828));
1:f0ee59d:         //Schuetz
1:4d34917:         intervals2.add(Interval.<Integer, Void>create(1585, 1672));
1:f0ee59d: 
1:4d34917:         IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2);
1:f0ee59d: 
1:4d34917:         assertEquals(0, it2.search(Interval.<Integer, Void>create(1829, 1842)).size());
1:f0ee59d: 
1:4d34917:         List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907));
1:f0ee59d:         assertEquals(3, intersection1.size());
1:f0ee59d: 
1:4d34917:         intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790));
1:f0ee59d:         assertEquals(2, intersection1.size());
1:4d34917: 
1:f0ee59d:     }
1:4d34917: 
1:4d34917:     @Test
1:4d34917:     public void testIteration()
1:4d34917:     {
1:4d34917:         List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>();
1:4d34917: 
1:4d34917:         intervals.add(Interval.<Integer, Void>create(-300, -200));
1:4d34917:         intervals.add(Interval.<Integer, Void>create(-3, -2));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(1, 2));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(3, 6));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(2, 4));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(5, 7));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(1, 3));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(4, 6));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(8, 9));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(15, 20));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(40, 50));
1:a991b64:         intervals.add(Interval.<Integer, Void>create(49, 60));
1:4d34917: 
1:4d34917:         IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals);
1:4d34917: 
1:52ddfe4:         Collections.sort(intervals, Interval.<Integer, Void>minOrdering());
1:f0ee59d: 
1:4d34917:         List<Interval<Integer, Void>> l = new ArrayList<Interval<Integer, Void>>();
1:4d34917:         for (Interval<Integer, Void> i : it)
1:4d34917:             l.add(i);
1:4d34917: 
1:4d34917:         assertEquals(intervals, l);
1:4d34917:     }
1:4d34917: 
1:4d34917:     @Test
1:4d34917:     public void testSerialization() throws Exception
1:4d34917:     {
1:4d34917:         List<Interval<Integer, String>> intervals = new ArrayList<Interval<Integer, String>>();
1:4d34917: 
1:4d34917:         intervals.add(Interval.<Integer, String>create(-300, -200, "a"));
1:4d34917:         intervals.add(Interval.<Integer, String>create(-3, -2, "b"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(1, 2, "c"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(1, 3, "d"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(2, 4, "e"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(3, 6, "f"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(4, 6, "g"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(5, 7, "h"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(8, 9, "i"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(15, 20, "j"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(40, 50, "k"));
1:a991b64:         intervals.add(Interval.<Integer, String>create(49, 60, "l"));
1:4d34917: 
1:4d34917:         IntervalTree<Integer, String, Interval<Integer, String>> it = IntervalTree.build(intervals);
1:4d34917: 
1:4d34917:         IVersionedSerializer<IntervalTree<Integer, String, Interval<Integer, String>>> serializer = IntervalTree.serializer(
1:a991b64:                 new ISerializer<Integer>()
1:a991b64:                 {
1:a991b64:                     public void serialize(Integer i, DataOutputPlus out) throws IOException
1:a991b64:                     {
1:a991b64:                         out.writeInt(i);
1:a991b64:                     }
1:a991b64: 
1:03f72ac:                     public Integer deserialize(DataInputPlus in) throws IOException
1:a991b64:                     {
1:a991b64:                         return in.readInt();
1:a991b64:                     }
1:a991b64: 
1:03f72ac:                     public long serializedSize(Integer i)
1:a991b64:                     {
1:a991b64:                         return 4;
1:a991b64:                     }
1:a991b64:                 },
1:a991b64:                 new ISerializer<String>()
1:a991b64:                 {
1:a991b64:                     public void serialize(String v, DataOutputPlus out) throws IOException
1:a991b64:                     {
1:a991b64:                         out.writeUTF(v);
1:a991b64:                     }
1:a991b64: 
1:03f72ac:                     public String deserialize(DataInputPlus in) throws IOException
1:a991b64:                     {
1:a991b64:                         return in.readUTF();
1:a991b64:                     }
1:a991b64: 
1:03f72ac:                     public long serializedSize(String v)
1:a991b64:                     {
1:a991b64:                         return v.length();
1:a991b64:                     }
1:a991b64:                 },
1:a991b64:                 (Constructor<Interval<Integer, String>>) (Object) Interval.class.getConstructor(Object.class, Object.class, Object.class)
1:4d34917:         );
1:4d34917: 
1:75508ec:         DataOutputBuffer out = new DataOutputBuffer();
1:4d34917: 
1:4d34917:         serializer.serialize(it, out, 0);
1:4d34917: 
1:c4c9eae:         DataInputPlus in = new DataInputBuffer(out.toByteArray());
1:4d34917: 
1:4d34917:         IntervalTree<Integer, String, Interval<Integer, String>> it2 = serializer.deserialize(in, 0);
1:4d34917:         List<Interval<Integer, String>> intervals2 = new ArrayList<Interval<Integer, String>>();
1:4d34917:         for (Interval<Integer, String> i : it2)
1:4d34917:             intervals2.add(i);
1:4d34917: 
1:4d34917:         assertEquals(intervals, intervals2);
1:4d34917:     }
1:f0ee59d: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c4c9eae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputBuffer;
/////////////////////////////////////////////////////////////////////////
1:         DataInputPlus in = new DataInputBuffer(out.toByteArray());
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
0: import org.apache.cassandra.io.util.NIODataInputStream;
/////////////////////////////////////////////////////////////////////////
1:                     public Integer deserialize(DataInputPlus in) throws IOException
1:                     public long serializedSize(Integer i)
/////////////////////////////////////////////////////////////////////////
1:                     public String deserialize(DataInputPlus in) throws IOException
1:                     public long serializedSize(String v)
/////////////////////////////////////////////////////////////////////////
0:         DataInputPlus in = new NIODataInputStream(out.toByteArray());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInput;
0: import java.io.DataInputStream;
1: import java.io.IOException;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:         intervals.add(Interval.<Integer, Void>create(1, 2));
1:         intervals.add(Interval.<Integer, Void>create(3, 6));
1:         intervals.add(Interval.<Integer, Void>create(2, 4));
1:         intervals.add(Interval.<Integer, Void>create(5, 7));
1:         intervals.add(Interval.<Integer, Void>create(1, 3));
1:         intervals.add(Interval.<Integer, Void>create(4, 6));
1:         intervals.add(Interval.<Integer, Void>create(8, 9));
1:         intervals.add(Interval.<Integer, Void>create(15, 20));
1:         intervals.add(Interval.<Integer, Void>create(40, 50));
1:         intervals.add(Interval.<Integer, Void>create(49, 60));
1:         assertEquals(3, it.search(Interval.<Integer, Void>create(4, 4)).size());
1:         assertEquals(7, it.search(Interval.<Integer, Void>create(-1, 10)).size());
1:         assertEquals(0, it.search(Interval.<Integer, Void>create(-1, -1)).size());
1:         assertEquals(5, it.search(Interval.<Integer, Void>create(1, 4)).size());
1:         assertEquals(2, it.search(Interval.<Integer, Void>create(0, 1)).size());
1:         assertEquals(0, it.search(Interval.<Integer, Void>create(10, 12)).size());
/////////////////////////////////////////////////////////////////////////
1:         intervals.add(Interval.<Integer, Void>create(1, 2));
1:         intervals.add(Interval.<Integer, Void>create(3, 6));
1:         intervals.add(Interval.<Integer, Void>create(2, 4));
1:         intervals.add(Interval.<Integer, Void>create(5, 7));
1:         intervals.add(Interval.<Integer, Void>create(1, 3));
1:         intervals.add(Interval.<Integer, Void>create(4, 6));
1:         intervals.add(Interval.<Integer, Void>create(8, 9));
1:         intervals.add(Interval.<Integer, Void>create(15, 20));
1:         intervals.add(Interval.<Integer, Void>create(40, 50));
1:         intervals.add(Interval.<Integer, Void>create(49, 60));
/////////////////////////////////////////////////////////////////////////
1:         intervals.add(Interval.<Integer, String>create(1, 2, "c"));
1:         intervals.add(Interval.<Integer, String>create(1, 3, "d"));
1:         intervals.add(Interval.<Integer, String>create(2, 4, "e"));
1:         intervals.add(Interval.<Integer, String>create(3, 6, "f"));
1:         intervals.add(Interval.<Integer, String>create(4, 6, "g"));
1:         intervals.add(Interval.<Integer, String>create(5, 7, "h"));
1:         intervals.add(Interval.<Integer, String>create(8, 9, "i"));
1:         intervals.add(Interval.<Integer, String>create(15, 20, "j"));
1:         intervals.add(Interval.<Integer, String>create(40, 50, "k"));
1:         intervals.add(Interval.<Integer, String>create(49, 60, "l"));
1:                 new ISerializer<Integer>()
1:                 {
1:                     public void serialize(Integer i, DataOutputPlus out) throws IOException
1:                     {
1:                         out.writeInt(i);
1:                     }
1: 
0:                     public Integer deserialize(DataInput in) throws IOException
1:                     {
1:                         return in.readInt();
1:                     }
1: 
0:                     public long serializedSize(Integer i, TypeSizes s)
1:                     {
1:                         return 4;
1:                     }
1:                 },
1:                 new ISerializer<String>()
1:                 {
1:                     public void serialize(String v, DataOutputPlus out) throws IOException
1:                     {
1:                         out.writeUTF(v);
1:                     }
1: 
0:                     public String deserialize(DataInput in) throws IOException
1:                     {
1:                         return in.readUTF();
1:                     }
1: 
0:                     public long serializedSize(String v, TypeSizes s)
1:                     {
1:                         return v.length();
1:                     }
1:                 },
1:                 (Constructor<Interval<Integer, String>>) (Object) Interval.class.getConstructor(Object.class, Object.class, Object.class)
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:                 public long serializedSize(Integer i, TypeSizes s) { return 4; }
0:                 public long serializedSize(String v, TypeSizes s) { return v.length(); }
commit:4d34917
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
0: import java.io.*;
1: 
0: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.ISerializer;
1: import org.apache.cassandra.io.IVersionedSerializer;
1:         List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>();
1:         intervals.add(Interval.<Integer, Void>create(-300, -200));
1:         intervals.add(Interval.<Integer, Void>create(-3, -2));
0:         intervals.add(Interval.<Integer, Void>create(1,2));
0:         intervals.add(Interval.<Integer, Void>create(3,6));
0:         intervals.add(Interval.<Integer, Void>create(2,4));
0:         intervals.add(Interval.<Integer, Void>create(5,7));
0:         intervals.add(Interval.<Integer, Void>create(1,3));
0:         intervals.add(Interval.<Integer, Void>create(4,6));
0:         intervals.add(Interval.<Integer, Void>create(8,9));
0:         intervals.add(Interval.<Integer, Void>create(15,20));
0:         intervals.add(Interval.<Integer, Void>create(40,50));
0:         intervals.add(Interval.<Integer, Void>create(49,60));
1:         IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals);
0:         assertEquals(3, it.search(Interval.<Integer, Void>create(4,4)).size());
1:         assertEquals(4, it.search(Interval.<Integer, Void>create(4, 5)).size());
0:         assertEquals(7, it.search(Interval.<Integer, Void>create(-1,10)).size());
0:         assertEquals(0, it.search(Interval.<Integer, Void>create(-1,-1)).size());
0:         assertEquals(5, it.search(Interval.<Integer, Void>create(1,4)).size());
0:         assertEquals(2, it.search(Interval.<Integer, Void>create(0,1)).size());
0:         assertEquals(0, it.search(Interval.<Integer, Void>create(10,12)).size());
1:         List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>();
1:         intervals2.add(Interval.<Integer, Void>create(1880, 1971));
1:         intervals2.add(Interval.<Integer, Void>create(1874, 1951));
1:         intervals2.add(Interval.<Integer, Void>create(1843, 1907));
1:         intervals2.add(Interval.<Integer, Void>create(1779, 1828));
1:         intervals2.add(Interval.<Integer, Void>create(1756, 1828));
1:         intervals2.add(Interval.<Integer, Void>create(1585, 1672));
1:         IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2);
1:         assertEquals(0, it2.search(Interval.<Integer, Void>create(1829, 1842)).size());
1:         List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907));
1:         intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790));
1: 
1:     @Test
1:     public void testIteration()
1:     {
1:         List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>();
1: 
1:         intervals.add(Interval.<Integer, Void>create(-300, -200));
1:         intervals.add(Interval.<Integer, Void>create(-3, -2));
0:         intervals.add(Interval.<Integer, Void>create(1,2));
0:         intervals.add(Interval.<Integer, Void>create(3,6));
0:         intervals.add(Interval.<Integer, Void>create(2,4));
0:         intervals.add(Interval.<Integer, Void>create(5,7));
0:         intervals.add(Interval.<Integer, Void>create(1,3));
0:         intervals.add(Interval.<Integer, Void>create(4,6));
0:         intervals.add(Interval.<Integer, Void>create(8,9));
0:         intervals.add(Interval.<Integer, Void>create(15,20));
0:         intervals.add(Interval.<Integer, Void>create(40,50));
0:         intervals.add(Interval.<Integer, Void>create(49,60));
1: 
1:         IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals);
1: 
0:         Collections.sort(intervals, it.minOrdering);
1: 
1:         List<Interval<Integer, Void>> l = new ArrayList<Interval<Integer, Void>>();
1:         for (Interval<Integer, Void> i : it)
1:             l.add(i);
1: 
1:         assertEquals(intervals, l);
1:     }
1: 
1:     @Test
1:     public void testSerialization() throws Exception
1:     {
1:         List<Interval<Integer, String>> intervals = new ArrayList<Interval<Integer, String>>();
1: 
1:         intervals.add(Interval.<Integer, String>create(-300, -200, "a"));
1:         intervals.add(Interval.<Integer, String>create(-3, -2, "b"));
0:         intervals.add(Interval.<Integer, String>create(1,2, "c"));
0:         intervals.add(Interval.<Integer, String>create(1,3, "d"));
0:         intervals.add(Interval.<Integer, String>create(2,4, "e"));
0:         intervals.add(Interval.<Integer, String>create(3,6, "f"));
0:         intervals.add(Interval.<Integer, String>create(4,6, "g"));
0:         intervals.add(Interval.<Integer, String>create(5,7, "h"));
0:         intervals.add(Interval.<Integer, String>create(8,9, "i"));
0:         intervals.add(Interval.<Integer, String>create(15,20, "j"));
0:         intervals.add(Interval.<Integer, String>create(40,50, "k"));
0:         intervals.add(Interval.<Integer, String>create(49,60, "l"));
1: 
1:         IntervalTree<Integer, String, Interval<Integer, String>> it = IntervalTree.build(intervals);
1: 
1:         IVersionedSerializer<IntervalTree<Integer, String, Interval<Integer, String>>> serializer = IntervalTree.serializer(
0:             new ISerializer<Integer>()
1:             {
0:                 public void serialize(Integer i, DataOutput dos) throws IOException { dos.writeInt(i); }
0:                 public Integer deserialize(DataInput dis) throws IOException { return dis.readInt(); }
0:                 public long serializedSize(Integer i, TypeSizes ts) { return 4; }
0:             },
0:             new ISerializer<String>()
1:             {
0:                 public void serialize(String v, DataOutput dos) throws IOException { dos.writeUTF(v); }
0:                 public String deserialize(DataInput dis) throws IOException { return dis.readUTF(); }
0:                 public long serializedSize(String v, TypeSizes ts) { return v.length(); }
0:             },
0:             Interval.class.getConstructor(Object.class, Object.class, Object.class)
1:         );
1: 
0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:         DataOutputStream out = new DataOutputStream(baos);
1: 
1:         serializer.serialize(it, out, 0);
1: 
0:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         IntervalTree<Integer, String, Interval<Integer, String>> it2 = serializer.deserialize(in, 0);
1:         List<Interval<Integer, String>> intervals2 = new ArrayList<Interval<Integer, String>>();
1:         for (Interval<Integer, String> i : it2)
1:             intervals2.add(i);
1: 
1:         assertEquals(intervals, intervals2);
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:d01f8dd
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:52ddfe4
/////////////////////////////////////////////////////////////////////////
1:         Collections.sort(intervals, Interval.<Integer, Void>minOrdering());
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
0:                 public void serialize(Integer i, DataOutputPlus out) throws IOException { out.writeInt(i); }
0:                 public void serialize(String v, DataOutputPlus out) throws IOException { out.writeUTF(v); }
0:             (Constructor<Interval<Integer, String>>) (Object) Interval.class.getConstructor(Object.class, Object.class, Object.class)
1:         DataOutputBuffer out = new DataOutputBuffer();
0:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(out.toByteArray()));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.*;
1: 
1: public class IntervalTreeTest
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:                 public void serialize(Integer i, DataOutput out) throws IOException { out.writeInt(i); }
0:                 public Integer deserialize(DataInput in) throws IOException { return in.readInt(); }
0:                 public void serialize(String v, DataOutput out) throws IOException { out.writeUTF(v); }
0:                 public String deserialize(DataInput in) throws IOException { return in.readUTF(); }
commit:f0ee59d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
0: import junit.framework.TestCase;
0: import org.apache.cassandra.utils.IntervalTree.*;
0: import org.junit.Test;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: public class IntervalTreeTest extends TestCase
0: {
1:     @Test
1:     public void testSearch() throws Exception
0:     {
0:         List<Interval> intervals = new ArrayList<Interval>();
1: 
0:         intervals.add(new Interval(-300, -200));
0:         intervals.add(new Interval(-3, -2));
0:         intervals.add(new Interval(1,2));
0:         intervals.add(new Interval(3,6));
0:         intervals.add(new Interval(2,4));
0:         intervals.add(new Interval(5,7));
0:         intervals.add(new Interval(1,3));
0:         intervals.add(new Interval(4,6));
0:         intervals.add(new Interval(8,9));
0:         intervals.add(new Interval(15,20));
0:         intervals.add(new Interval(40,50));
0:         intervals.add(new Interval(49,60));
1: 
1: 
0:         IntervalTree it = new IntervalTree(intervals);
1: 
0:         assertEquals(3,it.search(new Interval(4,4)).size());
1: 
0:         assertEquals(4, it.search(new Interval(4, 5)).size());
1: 
0:         assertEquals(7, it.search(new Interval(-1,10)).size());
1: 
0:         assertEquals(0, it.search(new Interval(-1,-1)).size());
1: 
0:         assertEquals(5, it.search(new Interval(1,4)).size());
1: 
0:         assertEquals(2, it.search(new Interval(0,1)).size());
1: 
0:         assertEquals(0, it.search(new Interval(10,12)).size());
1: 
0:         List<Interval> intervals2 = new ArrayList<Interval>();
1: 
1:         //stravinsky 1880-1971
0:         intervals2.add(new Interval(1880, 1971));
1:         //Schoenberg
0:         intervals2.add(new Interval(1874, 1951));
1:         //Grieg
0:         intervals2.add(new Interval(1843, 1907));
1:         //Schubert
0:         intervals2.add(new Interval(1779, 1828));
1:         //Mozart
0:         intervals2.add(new Interval(1756, 1828));
1:         //Schuetz
0:         intervals2.add(new Interval(1585, 1672));
1: 
0:         IntervalTree it2 = new IntervalTree(intervals2);
1: 
0:         assertEquals(0, it2.search(new Interval(1829, 1842)).size());
1: 
0:         List<Interval> intersection1 = it2.search(new Interval(1907, 1907));
1:         assertEquals(3, intersection1.size());
1: 
0:         intersection1 = it2.search(new Interval(1780, 1790));
1:         assertEquals(2, intersection1.size());
1: 
1:     }
1: }
commit:f9497f4
/////////////////////////////////////////////////////////////////////////
commit:ed0df5f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.utils;
0: 
0: import junit.framework.TestCase;
0: import org.apache.cassandra.utils.IntervalTree.*;
0: import org.junit.Test;
0: 
0: import java.util.ArrayList;
0: import java.util.List;
0: 
0: public class IntervalTreeTest extends TestCase
0: {
0:     @Test
0:     public void testSearch() throws Exception
0:     {
0:         List<Interval> intervals = new ArrayList<Interval>();
0: 
0:         intervals.add(new Interval(-300, -200));
0:         intervals.add(new Interval(-3, -2));
0:         intervals.add(new Interval(1,2));
0:         intervals.add(new Interval(3,6));
0:         intervals.add(new Interval(2,4));
0:         intervals.add(new Interval(5,7));
0:         intervals.add(new Interval(1,3));
0:         intervals.add(new Interval(4,6));
0:         intervals.add(new Interval(8,9));
0:         intervals.add(new Interval(15,20));
0:         intervals.add(new Interval(40,50));
0:         intervals.add(new Interval(49,60));
0: 
0: 
0:         IntervalTree it = new IntervalTree(intervals);
0: 
0:         assertEquals(3,it.search(new Interval(4,4)).size());
0: 
0:         assertEquals(4, it.search(new Interval(4, 5)).size());
0: 
0:         assertEquals(7, it.search(new Interval(-1,10)).size());
0: 
0:         assertEquals(0, it.search(new Interval(-1,-1)).size());
0: 
0:         assertEquals(5, it.search(new Interval(1,4)).size());
0: 
0:         assertEquals(2, it.search(new Interval(0,1)).size());
0: 
0:         assertEquals(0, it.search(new Interval(10,12)).size());
0: 
0:         List<Interval> intervals2 = new ArrayList<Interval>();
0: 
0:         //stravinsky 1880-1971
0:         intervals2.add(new Interval(1880, 1971));
0:         //Schoenberg
0:         intervals2.add(new Interval(1874, 1951));
0:         //Grieg
0:         intervals2.add(new Interval(1843, 1907));
0:         //Schubert
0:         intervals2.add(new Interval(1779, 1828));
0:         //Mozart
0:         intervals2.add(new Interval(1756, 1828));
0:         //Schuetz
0:         intervals2.add(new Interval(1585, 1672));
0: 
0:         IntervalTree it2 = new IntervalTree(intervals2);
0: 
0:         assertEquals(0, it2.search(new Interval(1829, 1842)).size());
0: 
0:         List<Interval> intersection1 = it2.search(new Interval(1907, 1907));
0:         assertEquals(3, intersection1.size());
0: 
0:         intersection1 = it2.search(new Interval(1780, 1790));
0:         assertEquals(2, intersection1.size());
0: 
0:     }
0: }
============================================================================