1:90a2114: /*
1:90a2114:  * Licensed to the Apache Software Foundation (ASF) under one
1:90a2114:  * or more contributor license agreements.  See the NOTICE file
1:90a2114:  * distributed with this work for additional information
1:90a2114:  * regarding copyright ownership.  The ASF licenses this file
1:90a2114:  * to you under the Apache License, Version 2.0 (the
1:90a2114:  * "License"); you may not use this file except in compliance
1:90a2114:  * with the License.  You may obtain a copy of the License at
1:90a2114:  *
1:90a2114:  *     http://www.apache.org/licenses/LICENSE-2.0
1:90a2114:  *
1:90a2114:  * Unless required by applicable law or agreed to in writing, software
1:90a2114:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90a2114:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90a2114:  * See the License for the specific language governing permissions and
1:90a2114:  * limitations under the License.
1:90a2114:  */
1:90a2114: package org.apache.cassandra.cql3;
1:90a2114: 
1:63cb95e: import org.junit.AfterClass;
1:63cb95e: import org.junit.BeforeClass;
1:63cb95e: import org.junit.Test;
1:63cb95e: 
1:90a2114: import com.datastax.driver.core.Cluster;
1:90a2114: import com.datastax.driver.core.PreparedStatement;
1:90a2114: import com.datastax.driver.core.Session;
1:64e2f5d: import com.datastax.driver.core.exceptions.SyntaxError;
1:90a2114: import org.apache.cassandra.SchemaLoader;
1:90a2114: import org.apache.cassandra.config.DatabaseDescriptor;
1:90a2114: import org.apache.cassandra.config.Schema;
1:64e2f5d: import org.apache.cassandra.index.StubIndex;
1:90a2114: import org.apache.cassandra.service.EmbeddedCassandraService;
1:63cb95e: 
1:64e2f5d: import static org.junit.Assert.assertEquals;
1:64e2f5d: import static org.junit.Assert.fail;
1:90a2114: 
1:63cb95e: public class PreparedStatementsTest extends SchemaLoader
1:90a2114: {
1:90a2114:     private static Cluster cluster;
1:90a2114:     private static Session session;
1:90a2114: 
1:90a2114:     private static final String KEYSPACE = "prepared_stmt_cleanup";
1:90a2114:     private static final String createKsStatement = "CREATE KEYSPACE " + KEYSPACE +
1:90a2114:                                                     " WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };";
1:90a2114:     private static final String dropKsStatement = "DROP KEYSPACE IF EXISTS " + KEYSPACE;
1:90a2114: 
1:90a2114:     @BeforeClass
1:90a2114:     public static void setup() throws Exception
1:90a2114:     {
1:90a2114:         Schema.instance.clear();
1:90a2114: 
1:90a2114:         EmbeddedCassandraService cassandra = new EmbeddedCassandraService();
1:90a2114:         cassandra.start();
1:90a2114: 
1:90a2114:         // Currently the native server start method return before the server is fully binded to the socket, so we need
1:90a2114:         // to wait slightly before trying to connect to it. We should fix this but in the meantime using a sleep.
1:90a2114:         Thread.sleep(500);
1:90a2114: 
1:caa4f3d:         cluster = Cluster.builder().addContactPoint("127.0.0.1")
1:90a2114:                                    .withPort(DatabaseDescriptor.getNativeTransportPort())
1:90a2114:                                    .build();
1:90a2114:         session = cluster.connect();
1:90a2114: 
2:90a2114:         session.execute(dropKsStatement);
1:90a2114:         session.execute(createKsStatement);
1:caa4f3d:     }
1:90a2114: 
1:90a2114:     @AfterClass
1:90a2114:     public static void tearDown() throws Exception
1:90a2114:     {
1:90a2114:         cluster.close();
3:90a2114:     }
1:90a2114: 
1:90a2114:     @Test
1:90a2114:     public void testInvalidatePreparedStatementsOnDrop()
1:90a2114:     {
1:90a2114:         String createTableStatement = "CREATE TABLE IF NOT EXISTS " + KEYSPACE + ".qp_cleanup (id int PRIMARY KEY, cid int, val text);";
1:90a2114:         String dropTableStatement = "DROP TABLE IF EXISTS " + KEYSPACE + ".qp_cleanup;";
1:90a2114: 
1:90a2114:         session.execute(createTableStatement);
1:caa4f3d: 
1:90a2114:         PreparedStatement prepared = session.prepare("INSERT INTO " + KEYSPACE + ".qp_cleanup (id, cid, val) VALUES (?, ?, ?)");
1:caa4f3d:         PreparedStatement preparedBatch = session.prepare("BEGIN BATCH " +
1:caa4f3d:                                                           "INSERT INTO " + KEYSPACE + ".qp_cleanup (id, cid, val) VALUES (?, ?, ?);" +
1:caa4f3d:                                                           "APPLY BATCH;");
1:90a2114:         session.execute(dropTableStatement);
1:90a2114:         session.execute(createTableStatement);
2:90a2114:         session.execute(prepared.bind(1, 1, "value"));
1:caa4f3d:         session.execute(preparedBatch.bind(2, 2, "value2"));
1:63cb95e: 
1:90a2114:         session.execute(dropKsStatement);
1:90a2114:         session.execute(createKsStatement);
1:90a2114:         session.execute(createTableStatement);
1:63cb95e: 
1:caa4f3d:         // The driver will get a response about the prepared statement being invalid, causing it to transparently
1:caa4f3d:         // re-prepare the statement.  We'll rely on the fact that we get no errors while executing this to show that
1:caa4f3d:         // the statements have been invalidated.
1:caa4f3d:         session.execute(prepared.bind(1, 1, "value"));
1:caa4f3d:         session.execute(preparedBatch.bind(2, 2, "value2"));
1:caa4f3d:         session.execute(dropKsStatement);
1:caa4f3d:     }
1:90a2114: 
1:63cb95e:     @Test
1:63cb95e:     public void testStatementRePreparationOnReconnect()
1:63cb95e:     {
1:63cb95e:         session.execute(dropKsStatement);
1:63cb95e:         session.execute(createKsStatement);
1:63cb95e: 
1:63cb95e:         session.execute("CREATE TABLE IF NOT EXISTS " + KEYSPACE + ".qp_test (id int PRIMARY KEY, cid int, val text);");
1:63cb95e: 
1:63cb95e:         String insertCQL = "INSERT INTO " + KEYSPACE + ".qp_test (id, cid, val) VALUES (?, ?, ?)";
1:63cb95e:         String selectCQL = "Select * from " + KEYSPACE + ".qp_test where id = ?";
1:63cb95e: 
1:63cb95e:         PreparedStatement preparedInsert = session.prepare(insertCQL);
1:63cb95e:         PreparedStatement preparedSelect = session.prepare(selectCQL);
1:63cb95e: 
1:63cb95e:         session.execute(preparedInsert.bind(1, 1, "value"));
1:63cb95e:         assertEquals(1, session.execute(preparedSelect.bind(1)).all().size());
1:64e2f5d: 
1:63cb95e:         cluster.close();
1:63cb95e: 
1:63cb95e:         cluster = Cluster.builder().addContactPoint("127.0.0.1")
1:63cb95e:                                    .withPort(DatabaseDescriptor.getNativeTransportPort())
1:63cb95e:                                    .build();
1:63cb95e:         session = cluster.connect();
1:63cb95e: 
1:63cb95e:         preparedInsert = session.prepare(insertCQL);
1:63cb95e:         preparedSelect = session.prepare(selectCQL);
1:63cb95e:         session.execute(preparedInsert.bind(1, 1, "value"));
1:63cb95e: 
1:63cb95e:         assertEquals(1, session.execute(preparedSelect.bind(1)).all().size());
1:63cb95e:     }
1:63cb95e: 
1:64e2f5d:     @Test
1:64e2f5d:     public void prepareAndExecuteWithCustomExpressions() throws Throwable
1:64e2f5d:     {
1:64e2f5d:         session.execute(dropKsStatement);
1:64e2f5d:         session.execute(createKsStatement);
1:64e2f5d:         String table = "custom_expr_test";
1:64e2f5d:         String index = "custom_index";
1:64e2f5d: 
1:64e2f5d:         session.execute(String.format("CREATE TABLE IF NOT EXISTS %s.%s (id int PRIMARY KEY, cid int, val text);",
1:64e2f5d:                                       KEYSPACE, table));
1:64e2f5d:         session.execute(String.format("CREATE CUSTOM INDEX %s ON %s.%s(val) USING '%s'",
1:64e2f5d:                                       index, KEYSPACE, table, StubIndex.class.getName()));
1:64e2f5d:         session.execute(String.format("INSERT INTO %s.%s(id, cid, val) VALUES (0, 0, 'test')", KEYSPACE, table));
1:64e2f5d: 
1:64e2f5d:         PreparedStatement prepared1 = session.prepare(String.format("SELECT * FROM %s.%s WHERE expr(%s, 'foo')",
1:64e2f5d:                                                                     KEYSPACE, table, index));
1:64e2f5d:         assertEquals(1, session.execute(prepared1.bind()).all().size());
1:64e2f5d: 
1:64e2f5d:         PreparedStatement prepared2 = session.prepare(String.format("SELECT * FROM %s.%s WHERE expr(%s, ?)",
1:64e2f5d:                                                                     KEYSPACE, table, index));
1:64e2f5d:         assertEquals(1, session.execute(prepared2.bind("foo bar baz")).all().size());
1:64e2f5d: 
1:64e2f5d:         try
1:64e2f5d:         {
1:64e2f5d:             session.prepare(String.format("SELECT * FROM %s.%s WHERE expr(?, 'foo bar baz')", KEYSPACE, table));
1:64e2f5d:             fail("Expected syntax exception, but none was thrown");
1:64e2f5d:         }
1:64e2f5d:         catch(SyntaxError e)
1:64e2f5d:         {
1:64e2f5d:             assertEquals("Bind variables cannot be used for index names", e.getMessage());
1:64e2f5d:         }
1:64e2f5d:     }
1:90a2114: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:64e2f5d
/////////////////////////////////////////////////////////////////////////
1: import com.datastax.driver.core.exceptions.SyntaxError;
1: import org.apache.cassandra.index.StubIndex;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void prepareAndExecuteWithCustomExpressions() throws Throwable
1:     {
1:         session.execute(dropKsStatement);
1:         session.execute(createKsStatement);
1:         String table = "custom_expr_test";
1:         String index = "custom_index";
1: 
1:         session.execute(String.format("CREATE TABLE IF NOT EXISTS %s.%s (id int PRIMARY KEY, cid int, val text);",
1:                                       KEYSPACE, table));
1:         session.execute(String.format("CREATE CUSTOM INDEX %s ON %s.%s(val) USING '%s'",
1:                                       index, KEYSPACE, table, StubIndex.class.getName()));
1:         session.execute(String.format("INSERT INTO %s.%s(id, cid, val) VALUES (0, 0, 'test')", KEYSPACE, table));
1: 
1:         PreparedStatement prepared1 = session.prepare(String.format("SELECT * FROM %s.%s WHERE expr(%s, 'foo')",
1:                                                                     KEYSPACE, table, index));
1:         assertEquals(1, session.execute(prepared1.bind()).all().size());
1: 
1:         PreparedStatement prepared2 = session.prepare(String.format("SELECT * FROM %s.%s WHERE expr(%s, ?)",
1:                                                                     KEYSPACE, table, index));
1:         assertEquals(1, session.execute(prepared2.bind("foo bar baz")).all().size());
1: 
1:         try
1:         {
1:             session.prepare(String.format("SELECT * FROM %s.%s WHERE expr(?, 'foo bar baz')", KEYSPACE, table));
1:             fail("Expected syntax exception, but none was thrown");
1:         }
1:         catch(SyntaxError e)
1:         {
1:             assertEquals("Bind variables cannot be used for index names", e.getMessage());
1:         }
1:     }
author:Edward Ribeiro
-------------------------------------------------------------------------------
commit:caa4f3d
/////////////////////////////////////////////////////////////////////////
1:         cluster = Cluster.builder().addContactPoint("127.0.0.1")
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:         PreparedStatement preparedBatch = session.prepare("BEGIN BATCH " +
1:                                                           "INSERT INTO " + KEYSPACE + ".qp_cleanup (id, cid, val) VALUES (?, ?, ?);" +
1:                                                           "APPLY BATCH;");
1:         session.execute(preparedBatch.bind(2, 2, "value2"));
1:         // The driver will get a response about the prepared statement being invalid, causing it to transparently
1:         // re-prepare the statement.  We'll rely on the fact that we get no errors while executing this to show that
1:         // the statements have been invalidated.
1:         session.execute(prepared.bind(1, 1, "value"));
1:         session.execute(preparedBatch.bind(2, 2, "value2"));
1:         session.execute(dropKsStatement);
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:63cb95e
/////////////////////////////////////////////////////////////////////////
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
0: import static junit.framework.Assert.assertEquals;
1: 
1: public class PreparedStatementsTest extends SchemaLoader
/////////////////////////////////////////////////////////////////////////
1: 
0:         // FIXME: where is invalidation actually tested?
1: 
1:     @Test
1:     public void testStatementRePreparationOnReconnect()
1:     {
1:         session.execute(dropKsStatement);
1:         session.execute(createKsStatement);
1: 
1:         session.execute("CREATE TABLE IF NOT EXISTS " + KEYSPACE + ".qp_test (id int PRIMARY KEY, cid int, val text);");
1: 
1:         String insertCQL = "INSERT INTO " + KEYSPACE + ".qp_test (id, cid, val) VALUES (?, ?, ?)";
1:         String selectCQL = "Select * from " + KEYSPACE + ".qp_test where id = ?";
1: 
1:         PreparedStatement preparedInsert = session.prepare(insertCQL);
1:         PreparedStatement preparedSelect = session.prepare(selectCQL);
1: 
1:         session.execute(preparedInsert.bind(1, 1, "value"));
1:         assertEquals(1, session.execute(preparedSelect.bind(1)).all().size());
1: 
1:         cluster.close();
1: 
1:         cluster = Cluster.builder().addContactPoint("127.0.0.1")
1:                                    .withPort(DatabaseDescriptor.getNativeTransportPort())
1:                                    .build();
1:         session = cluster.connect();
1: 
1:         preparedInsert = session.prepare(insertCQL);
1:         preparedSelect = session.prepare(selectCQL);
1:         session.execute(preparedInsert.bind(1, 1, "value"));
1: 
1:         assertEquals(1, session.execute(preparedSelect.bind(1)).all().size());
1:     }
author:Viju Kothuvatiparambil
-------------------------------------------------------------------------------
commit:90a2114
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import com.datastax.driver.core.Cluster;
1: import com.datastax.driver.core.PreparedStatement;
1: import com.datastax.driver.core.Session;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.service.EmbeddedCassandraService;
0: import org.junit.AfterClass;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
1: 
0: public class PreparedStatementCleanupTest extends SchemaLoader
1: {
1:     private static Cluster cluster;
1:     private static Session session;
1: 
1:     private static final String KEYSPACE = "prepared_stmt_cleanup";
1:     private static final String createKsStatement = "CREATE KEYSPACE " + KEYSPACE +
1:                                                     " WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };";
1:     private static final String dropKsStatement = "DROP KEYSPACE IF EXISTS " + KEYSPACE;
1: 
1:     @BeforeClass
1:     public static void setup() throws Exception
1:     {
1:         Schema.instance.clear();
1: 
1:         EmbeddedCassandraService cassandra = new EmbeddedCassandraService();
1:         cassandra.start();
1: 
1:         // Currently the native server start method return before the server is fully binded to the socket, so we need
1:         // to wait slightly before trying to connect to it. We should fix this but in the meantime using a sleep.
1:         Thread.sleep(500);
1: 
0: 		cluster = Cluster.builder().addContactPoint("127.0.0.1")
1:                                    .withPort(DatabaseDescriptor.getNativeTransportPort())
1:                                    .build();
1:         session = cluster.connect();
1: 
1:         session.execute(dropKsStatement);
1:         session.execute(createKsStatement);
1: 	}
1: 
1:     @AfterClass
1:     public static void tearDown() throws Exception
1:     {
1:         cluster.close();
1:     }
1: 
1:     @Test
1:     public void testInvalidatePreparedStatementsOnDrop()
1:     {
1:         String createTableStatement = "CREATE TABLE IF NOT EXISTS " + KEYSPACE + ".qp_cleanup (id int PRIMARY KEY, cid int, val text);";
1:         String dropTableStatement = "DROP TABLE IF EXISTS " + KEYSPACE + ".qp_cleanup;";
1: 
1:         session.execute(createTableStatement);
1:         PreparedStatement prepared = session.prepare("INSERT INTO " + KEYSPACE + ".qp_cleanup (id, cid, val) VALUES (?, ?, ?)");
1:         session.execute(dropTableStatement);
1:         session.execute(createTableStatement);
1:         session.execute(prepared.bind(1, 1, "value"));
1: 
1:         session.execute(dropKsStatement);
1:         session.execute(createKsStatement);
1:         session.execute(createTableStatement);
1:         session.execute(prepared.bind(1, 1, "value"));
1:         session.execute(dropKsStatement);
1: 	}
1: }
============================================================================