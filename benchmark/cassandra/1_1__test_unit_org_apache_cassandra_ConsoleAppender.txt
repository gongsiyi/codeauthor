1:c8d3cc1: /*
1:c8d3cc1:  * Licensed to the Apache Software Foundation (ASF) under one
1:c8d3cc1:  * or more contributor license agreements.  See the NOTICE file
1:c8d3cc1:  * distributed with this work for additional information
1:c8d3cc1:  * regarding copyright ownership.  The ASF licenses this file
1:c8d3cc1:  * to you under the Apache License, Version 2.0 (the
1:c8d3cc1:  * "License"); you may not use this file except in compliance
1:c8d3cc1:  * with the License.  You may obtain a copy of the License at
1:c8d3cc1:  *
1:c8d3cc1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c8d3cc1:  *
1:c8d3cc1:  * Unless required by applicable law or agreed to in writing, software
1:c8d3cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c8d3cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8d3cc1:  * See the License for the specific language governing permissions and
1:c8d3cc1:  * limitations under the License.
1:c8d3cc1:  */
1:c8d3cc1: package org.apache.cassandra;
1:c8d3cc1: 
1:c8d3cc1: import java.io.IOException;
1:c8d3cc1: import java.io.OutputStream;
1:c8d3cc1: import java.io.PrintStream;
1:c8d3cc1: 
1:c8d3cc1: import ch.qos.logback.core.OutputStreamAppender;
1:c8d3cc1: import ch.qos.logback.core.status.Status;
1:c8d3cc1: import ch.qos.logback.core.status.WarnStatus;
1:c8d3cc1: 
1:c8d3cc1: public class ConsoleAppender<E> extends OutputStreamAppender<E>
1:c8d3cc1: {
1:c8d3cc1:     private String target = "System.out";
1:c8d3cc1: 
1:c8d3cc1:     public void setTarget(String target)
1:c8d3cc1:     {
1:c8d3cc1:         if(!(target.equals("System.out") || target.equals("System.err")))
1:c8d3cc1:         {
1:c8d3cc1:             Status status = new WarnStatus("[" + target + "] should be one of System.out or System.err", this);
1:c8d3cc1:             status.add(new WarnStatus("Using default target System.out", this));
1:c8d3cc1:             addStatus(status);
1:c8d3cc1:             return;
1:c8d3cc1:         }
1:c8d3cc1:         this.target = target;
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     public String getTarget()
1:c8d3cc1:     {
1:c8d3cc1:         return target;
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public void start()
1:c8d3cc1:     {
1:c8d3cc1:         @SuppressWarnings("resource")
1:c8d3cc1:         final PrintStream targetStream = target.equals("System.out") ? LogbackStatusListener.originalOut : LogbackStatusListener.originalErr;
1:c8d3cc1:         setOutputStream(new OutputStream() {
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(int b)
1:c8d3cc1:             {
1:c8d3cc1:                 targetStream.write(b);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(byte[] b) throws IOException
1:c8d3cc1:             {
1:c8d3cc1:                 targetStream.write(b);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(byte[] b, int off, int len)
1:c8d3cc1:             {
1:c8d3cc1:                 targetStream.write(b, off, len);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void flush()
1:c8d3cc1:             {
1:c8d3cc1:                 targetStream.flush();
1:c8d3cc1:             }
1:c8d3cc1:         });
1:c8d3cc1:         super.start();
1:c8d3cc1:     }
1:c8d3cc1: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c8d3cc1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.PrintStream;
1: 
1: import ch.qos.logback.core.OutputStreamAppender;
1: import ch.qos.logback.core.status.Status;
1: import ch.qos.logback.core.status.WarnStatus;
1: 
1: public class ConsoleAppender<E> extends OutputStreamAppender<E>
1: {
1:     private String target = "System.out";
1: 
1:     public void setTarget(String target)
1:     {
1:         if(!(target.equals("System.out") || target.equals("System.err")))
1:         {
1:             Status status = new WarnStatus("[" + target + "] should be one of System.out or System.err", this);
1:             status.add(new WarnStatus("Using default target System.out", this));
1:             addStatus(status);
1:             return;
1:         }
1:         this.target = target;
1:     }
1: 
1:     public String getTarget()
1:     {
1:         return target;
1:     }
1: 
1:     @Override
1:     public void start()
1:     {
1:         @SuppressWarnings("resource")
1:         final PrintStream targetStream = target.equals("System.out") ? LogbackStatusListener.originalOut : LogbackStatusListener.originalErr;
1:         setOutputStream(new OutputStream() {
1:             @Override
1:             public void write(int b)
1:             {
1:                 targetStream.write(b);
1:             }
1: 
1:             @Override
1:             public void write(byte[] b) throws IOException
1:             {
1:                 targetStream.write(b);
1:             }
1: 
1:             @Override
1:             public void write(byte[] b, int off, int len)
1:             {
1:                 targetStream.write(b, off, len);
1:             }
1: 
1:             @Override
1:             public void flush()
1:             {
1:                 targetStream.flush();
1:             }
1:         });
1:         super.start();
1:     }
1: }
============================================================================