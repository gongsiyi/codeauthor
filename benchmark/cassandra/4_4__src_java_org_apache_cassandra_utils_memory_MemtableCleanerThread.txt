1:9f14856: /*
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  */
1:4b54b8a: package org.apache.cassandra.utils.memory;
1:4b54b8a: 
1:4b54b8a: import org.apache.cassandra.utils.concurrent.WaitQueue;
1:4b54b8a: 
1:4b54b8a: /**
1:8541cca:  * A thread that reclaims memory from a MemtablePool on demand.  The actual reclaiming work is delegated to the
1:4b54b8a:  * cleaner Runnable, e.g., FlushLargestColumnFamily
1:4b54b8a:  */
1:8541cca: class MemtableCleanerThread<P extends MemtablePool> extends Thread
1:4b54b8a: {
1:4b54b8a:     /** The pool we're cleaning */
1:4b54b8a:     final P pool;
1:4b54b8a: 
1:4b54b8a:     /** should ensure that at least some memory has been marked reclaiming after completion */
1:4b54b8a:     final Runnable cleaner;
1:4b54b8a: 
1:4b54b8a:     /** signalled whenever needsCleaning() may return true */
1:4b54b8a:     final WaitQueue wait = new WaitQueue();
1:4b54b8a: 
1:8541cca:     MemtableCleanerThread(P pool, Runnable cleaner)
1:4b54b8a:     {
1:4b54b8a:         super(pool.getClass().getSimpleName() + "Cleaner");
1:4b54b8a:         this.pool = pool;
1:4b54b8a:         this.cleaner = cleaner;
1:81bf2b0:         setDaemon(true);
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     boolean needsCleaning()
1:4b54b8a:     {
1:1a3b5db:         return pool.onHeap.needsCleaning() || pool.offHeap.needsCleaning();
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     // should ONLY be called when we really think it already needs cleaning
1:4b54b8a:     void trigger()
1:4b54b8a:     {
1:4b54b8a:         wait.signal();
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     @Override
1:4b54b8a:     public void run()
1:4b54b8a:     {
1:4b54b8a:         while (true)
1:4b54b8a:         {
1:4b54b8a:             while (!needsCleaning())
1:4b54b8a:             {
1:4b54b8a:                 final WaitQueue.Signal signal = wait.register();
1:4b54b8a:                 if (!needsCleaning())
1:4b54b8a:                     signal.awaitUninterruptibly();
1:4b54b8a:                 else
1:4b54b8a:                     signal.cancel();
1:4b54b8a:             }
1:4b54b8a: 
1:4b54b8a:             cleaner.run();
1:4b54b8a:         }
1:4b54b8a:     }
1:4b54b8a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:81bf2b0
/////////////////////////////////////////////////////////////////////////
1:         setDaemon(true);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
1:  * A thread that reclaims memory from a MemtablePool on demand.  The actual reclaiming work is delegated to the
1: class MemtableCleanerThread<P extends MemtablePool> extends Thread
/////////////////////////////////////////////////////////////////////////
1:     MemtableCleanerThread(P pool, Runnable cleaner)
commit:1a3b5db
/////////////////////////////////////////////////////////////////////////
0:  * A thread that reclaims memory from a Pool on demand.  The actual reclaiming work is delegated to the
/////////////////////////////////////////////////////////////////////////
1:         return pool.onHeap.needsCleaning() || pool.offHeap.needsCleaning();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.memory;
1: 
1: import org.apache.cassandra.utils.concurrent.WaitQueue;
1: 
1: /**
0:  * A thread that reclaims memor from a Pool on demand.  The actual reclaiming work is delegated to the
1:  * cleaner Runnable, e.g., FlushLargestColumnFamily
1:  */
0: class PoolCleanerThread<P extends Pool> extends Thread
1: {
1:     /** The pool we're cleaning */
1:     final P pool;
1: 
1:     /** should ensure that at least some memory has been marked reclaiming after completion */
1:     final Runnable cleaner;
1: 
1:     /** signalled whenever needsCleaning() may return true */
1:     final WaitQueue wait = new WaitQueue();
1: 
0:     PoolCleanerThread(P pool, Runnable cleaner)
1:     {
1:         super(pool.getClass().getSimpleName() + "Cleaner");
1:         this.pool = pool;
1:         this.cleaner = cleaner;
1:     }
1: 
1:     boolean needsCleaning()
1:     {
0:         return pool.needsCleaning();
1:     }
1: 
1:     // should ONLY be called when we really think it already needs cleaning
1:     void trigger()
1:     {
1:         wait.signal();
1:     }
1: 
1:     @Override
1:     public void run()
1:     {
1:         while (true)
1:         {
1:             while (!needsCleaning())
1:             {
1:                 final WaitQueue.Signal signal = wait.register();
1:                 if (!needsCleaning())
1:                     signal.awaitUninterruptibly();
1:                 else
1:                     signal.cancel();
1:             }
1: 
1:             cleaner.run();
1:         }
1:     }
1: }
============================================================================