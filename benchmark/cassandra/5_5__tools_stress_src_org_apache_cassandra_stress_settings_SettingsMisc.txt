1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
3:2e1e98a: 
1:eaf4b91: import java.io.IOException;
1:2e1e98a: import java.io.PrintStream;
1:2e1e98a: import java.io.Serializable;
1:eaf4b91: import java.net.URL;
1:2e1e98a: import java.util.Arrays;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Map;
1:eaf4b91: import java.util.regex.Matcher;
1:eaf4b91: import java.util.regex.Pattern;
1:eaf4b91: 
1:eaf4b91: import com.google.common.base.Charsets;
1:eaf4b91: import com.google.common.io.Resources;
1:2e1e98a: 
1:7536429: import org.apache.cassandra.stress.generate.Distribution;
1:2e1e98a: 
1:eaf4b91: class SettingsMisc implements Serializable
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     static boolean maybeDoSpecial(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         if (maybePrintHelp(clArgs))
1:2e1e98a:             return true;
1:2e1e98a:         if (maybePrintDistribution(clArgs))
1:2e1e98a:             return true;
1:eaf4b91:         if (maybePrintVersion(clArgs))
1:eaf4b91:             return true;
1:2e1e98a:         return false;
1:2e1e98a:     }
1:eaf4b91: 
1:eaf4b91:     private static final class PrintDistribution extends GroupedOptions
1:2e1e98a:     {
1:3e2c610:         final OptionDistribution dist = new OptionDistribution("dist=", null, "A mathematical distribution");
1:2e1e98a: 
1:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:2e1e98a:             return Arrays.asList(dist);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: 
1:eaf4b91:     private static boolean maybePrintDistribution(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         final String[] args = clArgs.get("print");
1:2e1e98a:         if (args == null)
1:2e1e98a:             return false;
1:2e1e98a:         final PrintDistribution dist = new PrintDistribution();
1:2e1e98a:         if (null == GroupedOptions.select(args, dist))
1:2e1e98a:         {
1:2e1e98a:             printHelpPrinter().run();
1:2e1e98a:             System.out.println("Invalid print options provided, see output for valid options");
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a:         printDistribution(dist.dist.get().get());
1:2e1e98a:         return true;
1:2e1e98a:     }
1:2e1e98a: 
1:eaf4b91:     private static void printDistribution(Distribution dist)
1:2e1e98a:     {
1:2e1e98a:         PrintStream out = System.out;
1:2e1e98a:         out.println("% of samples    Range       % of total");
1:2e1e98a:         String format = "%-16.1f%-12d%12.1f";
1:2e1e98a:         double rangemax = dist.inverseCumProb(1d) / 100d;
1:eaf4b91:         for (double d : new double[]{ 0.1d, 0.2d, 0.3d, 0.4d, 0.5d, 0.6d, 0.7d, 0.8d, 0.9d, 0.95d, 0.99d, 1d })
1:2e1e98a:         {
1:2e1e98a:             double sampleperc = d * 100;
1:2e1e98a:             long max = dist.inverseCumProb(d);
1:eaf4b91:             double rangeperc = max / rangemax;
1:2e1e98a:             out.println(String.format(format, sampleperc, max, rangeperc));
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     private static boolean maybePrintHelp(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         if (!clArgs.containsKey("-?") && !clArgs.containsKey("help"))
1:2e1e98a:             return false;
1:2e1e98a:         String[] params = clArgs.remove("-?");
1:2e1e98a:         if (params == null)
1:2e1e98a:             params = clArgs.remove("help");
1:2e1e98a:         if (params.length == 0)
1:2e1e98a:         {
1:2e1e98a:             if (!clArgs.isEmpty())
1:2e1e98a:             {
1:2e1e98a:                 if (clArgs.size() == 1)
1:2e1e98a:                 {
1:2e1e98a:                     String p = clArgs.keySet().iterator().next();
1:2e1e98a:                     if (clArgs.get(p).length == 0)
1:eaf4b91:                         params = new String[]{ p };
1:2e1e98a:                 }
1:2e1e98a:             }
1:2e1e98a:             else
1:2e1e98a:             {
1:2e1e98a:                 printHelp();
1:2e1e98a:                 return true;
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:         if (params.length == 1)
1:2e1e98a:         {
1:2e1e98a:             printHelp(params[0]);
1:2e1e98a:             return true;
1:2e1e98a:         }
1:2e1e98a:         throw new IllegalArgumentException("Invalid command/option provided to help");
1:2e1e98a:     }
1:2e1e98a: 
1:eaf4b91:     private static boolean maybePrintVersion(Map<String, String[]> clArgs)
1:eaf4b91:     {
1:eaf4b91:         if (clArgs.containsKey("version"))
1:eaf4b91:         {
1:eaf4b91:             try
1:eaf4b91:             {
1:eaf4b91:                 URL url = Resources.getResource("org/apache/cassandra/config/version.properties");
1:eaf4b91:                 System.out.println(parseVersionFile(Resources.toString(url, Charsets.UTF_8)));
1:eaf4b91:             }
1:eaf4b91:             catch (IOException e)
1:eaf4b91:             {
1:eaf4b91:                 e.printStackTrace(System.err);
1:eaf4b91:             }
1:eaf4b91:             return true;
1:eaf4b91:         }
1:eaf4b91:         return false;
1:eaf4b91:     }
1:eaf4b91: 
1:eaf4b91:     static String parseVersionFile(String versionFileContents)
1:eaf4b91:     {
1:eaf4b91:         Matcher matcher = Pattern.compile(".*?CassandraVersion=(.*?)$").matcher(versionFileContents);
1:eaf4b91:         if (matcher.find())
1:eaf4b91:         {
1:eaf4b91:             return "Version: " + matcher.group(1);
1:eaf4b91:         }
1:eaf4b91:         else
1:eaf4b91:         {
1:eaf4b91:             return "Unable to find version information";
1:eaf4b91:         }
1:eaf4b91:     }
1:eaf4b91: 
1:2e1e98a:     public static void printHelp()
1:2e1e98a:     {
1:92381fd:         System.out.println("Usage:      cassandra-stress <command> [options]");
1:92381fd:         System.out.println("Help usage: cassandra-stress help <command>");
1:2e1e98a:         System.out.println();
1:2e1e98a:         System.out.println("---Commands---");
1:2e1e98a:         for (Command cmd : Command.values())
1:2e1e98a:         {
1:2e1e98a:             System.out.println(String.format("%-20s : %s", cmd.toString().toLowerCase(), cmd.description));
1:2e1e98a:         }
1:2e1e98a:         System.out.println();
1:2e1e98a:         System.out.println("---Options---");
1:2e1e98a:         for (CliOption cmd : CliOption.values())
1:2e1e98a:         {
1:2e1e98a:             System.out.println(String.format("-%-20s : %s", cmd.toString().toLowerCase(), cmd.description));
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static void printHelp(String command)
1:2e1e98a:     {
1:2e1e98a:         Command cmd = Command.get(command);
1:2e1e98a:         if (cmd != null)
1:2e1e98a:         {
1:2e1e98a:             cmd.printHelp();
1:2e1e98a:             return;
1:2e1e98a:         }
1:2e1e98a:         CliOption opt = CliOption.get(command);
1:2e1e98a:         if (opt != null)
1:2e1e98a:         {
1:2e1e98a:             opt.printHelp();
1:2e1e98a:             return;
1:2e1e98a:         }
1:2e1e98a:         printHelp();
1:2e1e98a:         throw new IllegalArgumentException("Invalid command or option provided to command help");
1:2e1e98a:     }
1:2e1e98a: 
1:eaf4b91:     static Runnable helpHelpPrinter()
1:2e1e98a:     {
1:2e1e98a:         return new Runnable()
1:2e1e98a:         {
1:2e1e98a:             @Override
1:2e1e98a:             public void run()
1:2e1e98a:             {
1:2e1e98a:                 System.out.println("Usage: ./bin/cassandra-stress help <command|option>");
1:2e1e98a:                 System.out.println("Commands:");
1:2e1e98a:                 for (Command cmd : Command.values())
1:92381fd:                     System.out.println("    " + cmd.names.toString().replaceAll("\\[|\\]", ""));
1:2e1e98a:                 System.out.println("Options:");
1:2e1e98a:                 for (CliOption op : CliOption.values())
1:2e1e98a:                     System.out.println("    -" + op.toString().toLowerCase() + (op.extraName != null ? ", " + op.extraName : ""));
1:2e1e98a:             }
1:2e1e98a:         };
1:2e1e98a:     }
1:2e1e98a: 
1:eaf4b91:     static Runnable printHelpPrinter()
1:2e1e98a:     {
1:2e1e98a:         return new Runnable()
1:2e1e98a:         {
1:2e1e98a:             @Override
1:2e1e98a:             public void run()
1:2e1e98a:             {
1:2e1e98a:                 GroupedOptions.printOptions(System.out, "print", new GroupedOptions()
1:2e1e98a:                 {
1:2e1e98a:                     @Override
1:2e1e98a:                     public List<? extends Option> options()
1:2e1e98a:                     {
1:3e2c610:                         return Arrays.asList(new OptionDistribution("dist=", null, "A mathematical distribution"));
1:2e1e98a:                     }
1:2e1e98a:                 });
1:2e1e98a:             }
1:2e1e98a:         };
1:2e1e98a:     }
1:2e1e98a: 
1:eaf4b91:     static Runnable sendToDaemonHelpPrinter()
1:2e1e98a:     {
1:2e1e98a:         return new Runnable()
1:2e1e98a:         {
1:2e1e98a:             @Override
1:2e1e98a:             public void run()
1:2e1e98a:             {
1:2e1e98a:                 System.out.println("Usage: -sendToDaemon <host>");
1:2e1e98a:                 System.out.println();
1:2e1e98a:                 System.out.println("Specify a host running the stress server to send this stress command to");
1:2e1e98a:             }
1:2e1e98a:         };
1:2e1e98a:     }
1:2e1e98a: 
1:eaf4b91:     static String getSendToDaemon(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         String[] params = clArgs.remove("-send-to");
1:2e1e98a:         if (params == null)
1:2e1e98a:             params = clArgs.remove("-sendto");
1:2e1e98a:         if (params == null)
1:2e1e98a:             return null;
1:2e1e98a:         if (params.length != 1)
1:2e1e98a:         {
1:2e1e98a:             sendToDaemonHelpPrinter().run();
1:2e1e98a:             System.out.println("Invalid -send-to specifier: " + Arrays.toString(params));
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a:         return params[0];
1:2e1e98a:     }
1:2e1e98a: }
============================================================================
author:Chris Batey
-------------------------------------------------------------------------------
commit:eaf4b91
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URL;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import com.google.common.base.Charsets;
1: import com.google.common.io.Resources;
1: class SettingsMisc implements Serializable
/////////////////////////////////////////////////////////////////////////
1:         if (maybePrintVersion(clArgs))
1:             return true;
1:     private static final class PrintDistribution extends GroupedOptions
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static boolean maybePrintDistribution(Map<String, String[]> clArgs)
/////////////////////////////////////////////////////////////////////////
1:     private static void printDistribution(Distribution dist)
1:         for (double d : new double[]{ 0.1d, 0.2d, 0.3d, 0.4d, 0.5d, 0.6d, 0.7d, 0.8d, 0.9d, 0.95d, 0.99d, 1d })
1:             double rangeperc = max / rangemax;
/////////////////////////////////////////////////////////////////////////
1:                         params = new String[]{ p };
/////////////////////////////////////////////////////////////////////////
1:     private static boolean maybePrintVersion(Map<String, String[]> clArgs)
1:     {
1:         if (clArgs.containsKey("version"))
1:         {
1:             try
1:             {
1:                 URL url = Resources.getResource("org/apache/cassandra/config/version.properties");
1:                 System.out.println(parseVersionFile(Resources.toString(url, Charsets.UTF_8)));
1:             }
1:             catch (IOException e)
1:             {
1:                 e.printStackTrace(System.err);
1:             }
1:             return true;
1:         }
1:         return false;
1:     }
1: 
1:     static String parseVersionFile(String versionFileContents)
1:     {
1:         Matcher matcher = Pattern.compile(".*?CassandraVersion=(.*?)$").matcher(versionFileContents);
1:         if (matcher.find())
1:         {
1:             return "Version: " + matcher.group(1);
1:         }
1:         else
1:         {
1:             return "Unable to find version information";
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     static Runnable helpHelpPrinter()
/////////////////////////////////////////////////////////////////////////
1:     static Runnable printHelpPrinter()
/////////////////////////////////////////////////////////////////////////
1:     static Runnable sendToDaemonHelpPrinter()
/////////////////////////////////////////////////////////////////////////
1:     static String getSendToDaemon(Map<String, String[]> clArgs)
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.Distribution;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:92381fd
/////////////////////////////////////////////////////////////////////////
1:         System.out.println("Usage:      cassandra-stress <command> [options]");
1:         System.out.println("Help usage: cassandra-stress help <command>");
/////////////////////////////////////////////////////////////////////////
1:                     System.out.println("    " + cmd.names.toString().replaceAll("\\[|\\]", ""));
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
1:         final OptionDistribution dist = new OptionDistribution("dist=", null, "A mathematical distribution");
/////////////////////////////////////////////////////////////////////////
1:                         return Arrays.asList(new OptionDistribution("dist=", null, "A mathematical distribution"));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.io.PrintStream;
1: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.cassandra.stress.generatedata.Distribution;
1: 
0: public class SettingsMisc implements Serializable
1: {
1: 
1:     static boolean maybeDoSpecial(Map<String, String[]> clArgs)
1:     {
1:         if (maybePrintHelp(clArgs))
1:             return true;
1:         if (maybePrintDistribution(clArgs))
1:             return true;
1:         return false;
1:     }
1: 
0:     static final class PrintDistribution extends GroupedOptions
1:     {
0:         final OptionDistribution dist = new OptionDistribution("dist=", null);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
1:             return Arrays.asList(dist);
1:         }
1:     }
1: 
0:     static boolean maybePrintDistribution(Map<String, String[]> clArgs)
1:     {
1:         final String[] args = clArgs.get("print");
1:         if (args == null)
1:             return false;
1:         final PrintDistribution dist = new PrintDistribution();
1:         if (null == GroupedOptions.select(args, dist))
1:         {
1:             printHelpPrinter().run();
1:             System.out.println("Invalid print options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         printDistribution(dist.dist.get().get());
1:         return true;
1:     }
1: 
0:     static void printDistribution(Distribution dist)
1:     {
1:         PrintStream out = System.out;
1:         out.println("% of samples    Range       % of total");
1:         String format = "%-16.1f%-12d%12.1f";
1:         double rangemax = dist.inverseCumProb(1d) / 100d;
0:         for (double d : new double[] { 0.1d, 0.2d, 0.3d, 0.4d, 0.5d, 0.6d, 0.7d, 0.8d, 0.9d, 0.95d, 0.99d, 1d })
1:         {
1:             double sampleperc = d * 100;
1:             long max = dist.inverseCumProb(d);
0:             double rangeperc = max/ rangemax;
1:             out.println(String.format(format, sampleperc, max, rangeperc));
1:         }
1:     }
1: 
1:     private static boolean maybePrintHelp(Map<String, String[]> clArgs)
1:     {
1:         if (!clArgs.containsKey("-?") && !clArgs.containsKey("help"))
1:             return false;
1:         String[] params = clArgs.remove("-?");
1:         if (params == null)
1:             params = clArgs.remove("help");
1:         if (params.length == 0)
1:         {
1:             if (!clArgs.isEmpty())
1:             {
1:                 if (clArgs.size() == 1)
1:                 {
1:                     String p = clArgs.keySet().iterator().next();
1:                     if (clArgs.get(p).length == 0)
0:                         params = new String[] {p};
1:                 }
1:             }
1:             else
1:             {
1:                 printHelp();
1:                 return true;
1:             }
1:         }
1:         if (params.length == 1)
1:         {
1:             printHelp(params[0]);
1:             return true;
1:         }
1:         throw new IllegalArgumentException("Invalid command/option provided to help");
1:     }
1: 
1:     public static void printHelp()
1:     {
0:         System.out.println("Usage: ./bin/cassandra-stress <command> [options]");
1:         System.out.println();
1:         System.out.println("---Commands---");
1:         for (Command cmd : Command.values())
1:         {
1:             System.out.println(String.format("%-20s : %s", cmd.toString().toLowerCase(), cmd.description));
1:         }
1:         System.out.println();
1:         System.out.println("---Options---");
1:         for (CliOption cmd : CliOption.values())
1:         {
1:             System.out.println(String.format("-%-20s : %s", cmd.toString().toLowerCase(), cmd.description));
1:         }
1:     }
1: 
1:     public static void printHelp(String command)
1:     {
1:         Command cmd = Command.get(command);
1:         if (cmd != null)
1:         {
1:             cmd.printHelp();
1:             return;
1:         }
1:         CliOption opt = CliOption.get(command);
1:         if (opt != null)
1:         {
1:             opt.printHelp();
1:             return;
1:         }
1:         printHelp();
1:         throw new IllegalArgumentException("Invalid command or option provided to command help");
1:     }
1: 
0:     public static Runnable helpHelpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 System.out.println("Usage: ./bin/cassandra-stress help <command|option>");
1:                 System.out.println("Commands:");
1:                 for (Command cmd : Command.values())
0:                     System.out.println("    " + cmd.toString().toLowerCase() + (cmd.extraName != null ? ", " + cmd.extraName : ""));
1:                 System.out.println("Options:");
1:                 for (CliOption op : CliOption.values())
1:                     System.out.println("    -" + op.toString().toLowerCase() + (op.extraName != null ? ", " + op.extraName : ""));
1:             }
1:         };
1:     }
1: 
0:     public static Runnable printHelpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 GroupedOptions.printOptions(System.out, "print", new GroupedOptions()
1:                 {
1:                     @Override
1:                     public List<? extends Option> options()
1:                     {
0:                         return Arrays.asList(new OptionDistribution("dist=", null));
1:                     }
1:                 });
1:             }
1:         };
1:     }
1: 
0:     public static Runnable sendToDaemonHelpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 System.out.println("Usage: -sendToDaemon <host>");
1:                 System.out.println();
1:                 System.out.println("Specify a host running the stress server to send this stress command to");
1:             }
1:         };
1:     }
1: 
0:     public static String getSendToDaemon(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-send-to");
1:         if (params == null)
1:             params = clArgs.remove("-sendto");
1:         if (params == null)
1:             return null;
1:         if (params.length != 1)
1:         {
1:             sendToDaemonHelpPrinter().run();
1:             System.out.println("Invalid -send-to specifier: " + Arrays.toString(params));
1:             System.exit(1);
1:         }
1:         return params[0];
1: 
1:     }
1: 
1: }
============================================================================