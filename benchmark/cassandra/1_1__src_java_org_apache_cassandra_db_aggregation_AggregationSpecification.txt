1:4205011: /*
1:4205011:  * Licensed to the Apache Software Foundation (ASF) under one
1:4205011:  * or more contributor license agreements.  See the NOTICE file
1:4205011:  * distributed with this work for additional information
1:4205011:  * regarding copyright ownership.  The ASF licenses this file
1:4205011:  * to you under the Apache License, Version 2.0 (the
1:4205011:  * "License"); you may not use this file except in compliance
1:4205011:  * with the License.  You may obtain a copy of the License at
1:4205011:  *
1:4205011:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4205011:  *
1:4205011:  * Unless required by applicable law or agreed to in writing, software
1:4205011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4205011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4205011:  * See the License for the specific language governing permissions and
1:4205011:  * limitations under the License.
1:4205011:  */
1:4205011: package org.apache.cassandra.db.aggregation;
1:4205011: 
1:4205011: import java.io.IOException;
1:4205011: 
1:4205011: import org.apache.cassandra.db.ClusteringComparator;
1:4205011: import org.apache.cassandra.db.TypeSizes;
1:4205011: import org.apache.cassandra.io.util.DataInputPlus;
1:4205011: import org.apache.cassandra.io.util.DataOutputPlus;
1:4205011: 
1:4205011: /**
1:4205011:  * Defines how rows should be grouped for creating aggregates.
1:4205011:  */
1:4205011: public abstract class AggregationSpecification
1:4205011: {
1:4205011:     public static final Serializer serializer = new Serializer();
1:4205011: 
1:4205011:     /**
1:4205011:      * <code>AggregationSpecification</code> that group all the row together.
1:4205011:      */
1:4205011:     public static final AggregationSpecification AGGREGATE_EVERYTHING = new AggregationSpecification(Kind.AGGREGATE_EVERYTHING)
1:4205011:     {
1:4205011:         @Override
1:4205011:         public GroupMaker newGroupMaker(GroupingState state)
1:4205011:         {
1:4205011:             return GroupMaker.GROUP_EVERYTHING;
1:4205011:         }
1:4205011:     };
1:4205011: 
1:4205011:     /**
1:4205011:      * The <code>AggregationSpecification</code> kind.
1:4205011:      */
1:4205011:     private final Kind kind;
1:4205011: 
1:4205011:     /**
1:4205011:      * The <code>AggregationSpecification</code> kinds.
1:4205011:      */
1:4205011:     public static enum Kind
1:4205011:     {
1:4205011:         AGGREGATE_EVERYTHING, AGGREGATE_BY_PK_PREFIX
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Returns the <code>AggregationSpecification</code> kind.
1:4205011:      * @return the <code>AggregationSpecification</code> kind
1:4205011:      */
1:4205011:     public Kind kind()
1:4205011:     {
1:4205011:         return kind;
1:4205011:     }
1:4205011: 
1:4205011:     private AggregationSpecification(Kind kind)
1:4205011:     {
1:4205011:         this.kind = kind;
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Creates a new <code>GroupMaker</code> instance.
1:4205011:      *
1:4205011:      * @return a new <code>GroupMaker</code> instance
1:4205011:      */
1:4205011:     public final GroupMaker newGroupMaker()
1:4205011:     {
1:4205011:         return newGroupMaker(GroupingState.EMPTY_STATE);
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Creates a new <code>GroupMaker</code> instance.
1:4205011:      *
1:4205011:      * @param state <code>GroupMaker</code> state
1:4205011:      * @return a new <code>GroupMaker</code> instance
1:4205011:      */
1:4205011:     public abstract GroupMaker newGroupMaker(GroupingState state);
1:4205011: 
1:4205011:     /**
1:4205011:      * Creates a new <code>AggregationSpecification</code> instance that will build aggregates based on primary key
1:4205011:      * columns.
1:4205011:      *
1:4205011:      * @param comparator the comparator used to compare the clustering prefixes
1:4205011:      * @param clusteringPrefixSize the number of clustering columns used to create the aggregates
1:4205011:      * @return a new <code>AggregationSpecification</code> instance that will build aggregates based on primary key
1:4205011:      * columns
1:4205011:      */
1:4205011:     public static AggregationSpecification aggregatePkPrefix(ClusteringComparator comparator, int clusteringPrefixSize)
1:4205011:     {
1:4205011:         return new AggregateByPkPrefix(comparator, clusteringPrefixSize);
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * <code>AggregationSpecification</code> that build aggregates based on primary key columns
1:4205011:      */
1:4205011:     private static final class AggregateByPkPrefix extends AggregationSpecification
1:4205011:     {
1:4205011:         /**
1:4205011:          * The number of clustering component to compare.
1:4205011:          */
1:4205011:         private final int clusteringPrefixSize;
1:4205011: 
1:4205011:         /**
1:4205011:          * The comparator used to compare the clustering prefixes.
1:4205011:          */
1:4205011:         private final ClusteringComparator comparator;
1:4205011: 
1:4205011:         public AggregateByPkPrefix(ClusteringComparator comparator, int clusteringPrefixSize)
1:4205011:         {
1:4205011:             super(Kind.AGGREGATE_BY_PK_PREFIX);
1:4205011:             this.comparator = comparator;
1:4205011:             this.clusteringPrefixSize = clusteringPrefixSize;
1:4205011:         }
1:4205011: 
1:4205011:         @Override
1:4205011:         public GroupMaker newGroupMaker(GroupingState state)
1:4205011:         {
1:4205011:             return GroupMaker.newInstance(comparator, clusteringPrefixSize, state);
1:4205011:         }
1:4205011:     }
1:4205011: 
1:4205011:     public static class Serializer
1:4205011:     {
1:4205011:         public void serialize(AggregationSpecification aggregationSpec, DataOutputPlus out, int version) throws IOException
1:4205011:         {
1:4205011:             out.writeByte(aggregationSpec.kind().ordinal());
1:4205011:             switch (aggregationSpec.kind())
1:4205011:             {
1:4205011:                 case AGGREGATE_EVERYTHING:
1:4205011:                     break;
1:4205011:                 case AGGREGATE_BY_PK_PREFIX:
1:4205011:                     out.writeUnsignedVInt(((AggregateByPkPrefix) aggregationSpec).clusteringPrefixSize);
1:4205011:                     break;
1:4205011:                 default:
1:4205011:                     throw new AssertionError();
1:4205011:             }
1:4205011:         }
1:4205011: 
1:4205011:         public AggregationSpecification deserialize(DataInputPlus in, int version, ClusteringComparator comparator) throws IOException
1:4205011:         {
1:4205011:             Kind kind = Kind.values()[in.readUnsignedByte()];
1:4205011:             switch (kind)
1:4205011:             {
1:4205011:                 case AGGREGATE_EVERYTHING:
1:4205011:                     return AggregationSpecification.AGGREGATE_EVERYTHING;
1:4205011:                 case AGGREGATE_BY_PK_PREFIX:
1:4205011:                     int clusteringPrefixSize = (int) in.readUnsignedVInt();
1:4205011:                     return AggregationSpecification.aggregatePkPrefix(comparator, clusteringPrefixSize);
1:4205011:                 default:
1:4205011:                     throw new AssertionError();
1:4205011:             }
1:4205011:         }
1:4205011: 
1:4205011:         public long serializedSize(AggregationSpecification aggregationSpec, int version)
1:4205011:         {
1:4205011:             long size = TypeSizes.sizeof((byte) aggregationSpec.kind().ordinal());
1:4205011:             switch (aggregationSpec.kind())
1:4205011:             {
1:4205011:                 case AGGREGATE_EVERYTHING:
1:4205011:                     break;
1:4205011:                 case AGGREGATE_BY_PK_PREFIX:
1:4205011:                     size += TypeSizes.sizeofUnsignedVInt(((AggregateByPkPrefix) aggregationSpec).clusteringPrefixSize);
1:4205011:                     break;
1:4205011:                 default:
1:4205011:                     throw new AssertionError();
1:4205011:             }
1:4205011:             return size;
1:4205011:         }
1:4205011:     }
1:4205011: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.aggregation;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.ClusteringComparator;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * Defines how rows should be grouped for creating aggregates.
1:  */
1: public abstract class AggregationSpecification
1: {
1:     public static final Serializer serializer = new Serializer();
1: 
1:     /**
1:      * <code>AggregationSpecification</code> that group all the row together.
1:      */
1:     public static final AggregationSpecification AGGREGATE_EVERYTHING = new AggregationSpecification(Kind.AGGREGATE_EVERYTHING)
1:     {
1:         @Override
1:         public GroupMaker newGroupMaker(GroupingState state)
1:         {
1:             return GroupMaker.GROUP_EVERYTHING;
1:         }
1:     };
1: 
1:     /**
1:      * The <code>AggregationSpecification</code> kind.
1:      */
1:     private final Kind kind;
1: 
1:     /**
1:      * The <code>AggregationSpecification</code> kinds.
1:      */
1:     public static enum Kind
1:     {
1:         AGGREGATE_EVERYTHING, AGGREGATE_BY_PK_PREFIX
1:     }
1: 
1:     /**
1:      * Returns the <code>AggregationSpecification</code> kind.
1:      * @return the <code>AggregationSpecification</code> kind
1:      */
1:     public Kind kind()
1:     {
1:         return kind;
1:     }
1: 
1:     private AggregationSpecification(Kind kind)
1:     {
1:         this.kind = kind;
1:     }
1: 
1:     /**
1:      * Creates a new <code>GroupMaker</code> instance.
1:      *
1:      * @return a new <code>GroupMaker</code> instance
1:      */
1:     public final GroupMaker newGroupMaker()
1:     {
1:         return newGroupMaker(GroupingState.EMPTY_STATE);
1:     }
1: 
1:     /**
1:      * Creates a new <code>GroupMaker</code> instance.
1:      *
1:      * @param state <code>GroupMaker</code> state
1:      * @return a new <code>GroupMaker</code> instance
1:      */
1:     public abstract GroupMaker newGroupMaker(GroupingState state);
1: 
1:     /**
1:      * Creates a new <code>AggregationSpecification</code> instance that will build aggregates based on primary key
1:      * columns.
1:      *
1:      * @param comparator the comparator used to compare the clustering prefixes
1:      * @param clusteringPrefixSize the number of clustering columns used to create the aggregates
1:      * @return a new <code>AggregationSpecification</code> instance that will build aggregates based on primary key
1:      * columns
1:      */
1:     public static AggregationSpecification aggregatePkPrefix(ClusteringComparator comparator, int clusteringPrefixSize)
1:     {
1:         return new AggregateByPkPrefix(comparator, clusteringPrefixSize);
1:     }
1: 
1:     /**
1:      * <code>AggregationSpecification</code> that build aggregates based on primary key columns
1:      */
1:     private static final class AggregateByPkPrefix extends AggregationSpecification
1:     {
1:         /**
1:          * The number of clustering component to compare.
1:          */
1:         private final int clusteringPrefixSize;
1: 
1:         /**
1:          * The comparator used to compare the clustering prefixes.
1:          */
1:         private final ClusteringComparator comparator;
1: 
1:         public AggregateByPkPrefix(ClusteringComparator comparator, int clusteringPrefixSize)
1:         {
1:             super(Kind.AGGREGATE_BY_PK_PREFIX);
1:             this.comparator = comparator;
1:             this.clusteringPrefixSize = clusteringPrefixSize;
1:         }
1: 
1:         @Override
1:         public GroupMaker newGroupMaker(GroupingState state)
1:         {
1:             return GroupMaker.newInstance(comparator, clusteringPrefixSize, state);
1:         }
1:     }
1: 
1:     public static class Serializer
1:     {
1:         public void serialize(AggregationSpecification aggregationSpec, DataOutputPlus out, int version) throws IOException
1:         {
1:             out.writeByte(aggregationSpec.kind().ordinal());
1:             switch (aggregationSpec.kind())
1:             {
1:                 case AGGREGATE_EVERYTHING:
1:                     break;
1:                 case AGGREGATE_BY_PK_PREFIX:
1:                     out.writeUnsignedVInt(((AggregateByPkPrefix) aggregationSpec).clusteringPrefixSize);
1:                     break;
1:                 default:
1:                     throw new AssertionError();
1:             }
1:         }
1: 
1:         public AggregationSpecification deserialize(DataInputPlus in, int version, ClusteringComparator comparator) throws IOException
1:         {
1:             Kind kind = Kind.values()[in.readUnsignedByte()];
1:             switch (kind)
1:             {
1:                 case AGGREGATE_EVERYTHING:
1:                     return AggregationSpecification.AGGREGATE_EVERYTHING;
1:                 case AGGREGATE_BY_PK_PREFIX:
1:                     int clusteringPrefixSize = (int) in.readUnsignedVInt();
1:                     return AggregationSpecification.aggregatePkPrefix(comparator, clusteringPrefixSize);
1:                 default:
1:                     throw new AssertionError();
1:             }
1:         }
1: 
1:         public long serializedSize(AggregationSpecification aggregationSpec, int version)
1:         {
1:             long size = TypeSizes.sizeof((byte) aggregationSpec.kind().ordinal());
1:             switch (aggregationSpec.kind())
1:             {
1:                 case AGGREGATE_EVERYTHING:
1:                     break;
1:                 case AGGREGATE_BY_PK_PREFIX:
1:                     size += TypeSizes.sizeofUnsignedVInt(((AggregateByPkPrefix) aggregationSpec).clusteringPrefixSize);
1:                     break;
1:                 default:
1:                     throw new AssertionError();
1:             }
1:             return size;
1:         }
1:     }
1: }
============================================================================