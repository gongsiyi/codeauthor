1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
5:c5a8190: 
1:c5a8190: import io.airlift.command.Command;
1:05300b2: 
1:27d25c6: import io.airlift.command.Option;
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:27d25c6: import org.apache.cassandra.tools.nodetool.stats.TpStatsHolder;
1:27d25c6: import org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter;
1:27d25c6: import org.apache.cassandra.tools.nodetool.stats.*;
1:27d25c6: 
1:c5a8190: 
1:c5a8190: @Command(name = "tpstats", description = "Print usage statistics of thread pools")
1:c5a8190: public class TpStats extends NodeToolCmd
1:c5a8190: {
1:27d25c6:     @Option(title = "format",
1:27d25c6:             name = {"-F", "--format"},
1:27d25c6:             description = "Output format (json, yaml)")
1:27d25c6:     private String outputFormat = "";
1:27d25c6: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:27d25c6:         if (!outputFormat.isEmpty() && !"json".equals(outputFormat) && !"yaml".equals(outputFormat))
1:c5a8190:         {
1:27d25c6:             throw new IllegalArgumentException("arguments for -F are json,yaml only.");
1:c5a8190:         }
1:05300b2: 
1:27d25c6:         StatsHolder data = new TpStatsHolder(probe);
1:27d25c6:         StatsPrinter printer = TpStatsPrinter.from(outputFormat);
1:27d25c6:         printer.print(data, System.out);
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Hiroyuki Nishi
-------------------------------------------------------------------------------
commit:27d25c6
/////////////////////////////////////////////////////////////////////////
1: import io.airlift.command.Option;
1: import org.apache.cassandra.tools.nodetool.stats.TpStatsHolder;
1: import org.apache.cassandra.tools.nodetool.stats.TpStatsPrinter;
1: import org.apache.cassandra.tools.nodetool.stats.*;
1: 
1:     @Option(title = "format",
1:             name = {"-F", "--format"},
1:             description = "Output format (json, yaml)")
1:     private String outputFormat = "";
1: 
1:         if (!outputFormat.isEmpty() && !"json".equals(outputFormat) && !"yaml".equals(outputFormat))
1:             throw new IllegalArgumentException("arguments for -F are json,yaml only.");
1:         StatsHolder data = new TpStatsHolder(probe);
1:         StatsPrinter printer = TpStatsPrinter.from(outputFormat);
1:         printer.print(data, System.out);
author:Joel Knighton
-------------------------------------------------------------------------------
commit:05300b2
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Multimap;
1: 
/////////////////////////////////////////////////////////////////////////
0:         System.out.printf("%-25s%10s%10s%15s%10s%18s%n", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All time blocked");
1: 
0:         Multimap<String, String> threadPools = probe.getThreadPools();
0:         for (Map.Entry<String, String> tpool : threadPools.entries())
0:             System.out.printf("%-25s%10s%10s%15s%10s%18s%n",
0:                               tpool.getValue(),
0:                               probe.getThreadPoolMetric(tpool.getKey(), tpool.getValue(), "ActiveTasks"),
0:                               probe.getThreadPoolMetric(tpool.getKey(), tpool.getValue(), "PendingTasks"),
0:                               probe.getThreadPoolMetric(tpool.getKey(), tpool.getValue(), "CompletedTasks"),
0:                               probe.getThreadPoolMetric(tpool.getKey(), tpool.getValue(), "CurrentlyBlockedTasks"),
0:                               probe.getThreadPoolMetric(tpool.getKey(), tpool.getValue(), "TotalBlockedTasks"));
author:Paulo Motta
-------------------------------------------------------------------------------
commit:f8089e8
/////////////////////////////////////////////////////////////////////////
0:         System.out.printf("%-30s%10s%10s%15s%10s%18s%n", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All time blocked");
0:             System.out.printf("%-30s%10s%10s%15s%10s%18s%n",
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import io.airlift.command.Command;
1: 
0: import java.util.Map;
1: 
0: import org.apache.cassandra.concurrent.Stage;
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "tpstats", description = "Print usage statistics of thread pools")
1: public class TpStats extends NodeToolCmd
1: {
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
0:         System.out.printf("%-25s%10s%10s%15s%10s%18s%n", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All time blocked");
1: 
0:         for (Stage stage : Stage.jmxEnabledStages())
1:         {
0:             System.out.printf("%-25s%10s%10s%15s%10s%18s%n",
0:                               stage.getJmxName(),
0:                               probe.getThreadPoolMetric(stage, "ActiveTasks"),
0:                               probe.getThreadPoolMetric(stage, "PendingTasks"),
0:                               probe.getThreadPoolMetric(stage, "CompletedTasks"),
0:                               probe.getThreadPoolMetric(stage, "CurrentlyBlockedTasks"),
0:                               probe.getThreadPoolMetric(stage, "TotalBlockedTasks"));
1:         }
1: 
0:         System.out.printf("%n%-20s%10s%n", "Message type", "Dropped");
0:         for (Map.Entry<String, Integer> entry : probe.getDroppedMessages().entrySet())
0:             System.out.printf("%-20s%10s%n", entry.getKey(), entry.getValue());
1:     }
1: }
============================================================================