1:6c867f0: /*
1:6c867f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:6c867f0:  * or more contributor license agreements.  See the NOTICE file
1:6c867f0:  * distributed with this work for additional information
1:6c867f0:  * regarding copyright ownership.  The ASF licenses this file
1:6c867f0:  * to you under the Apache License, Version 2.0 (the
1:6c867f0:  * "License"); you may not use this file except in compliance
1:6c867f0:  * with the License.  You may obtain a copy of the License at
1:6c867f0:  *
1:6c867f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6c867f0:  *
1:6c867f0:  * Unless required by applicable law or agreed to in writing, software
1:6c867f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c867f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c867f0:  * See the License for the specific language governing permissions and
1:6c867f0:  * limitations under the License.
1:6c867f0:  */
1:6c867f0: 
1:6c867f0: package org.apache.cassandra.db.compaction;
1:6c867f0: 
1:6c867f0: import com.google.common.collect.ImmutableList;
1:6c867f0: 
1:6c867f0: import java.util.Map;
1:6c867f0: import java.util.concurrent.TimeUnit;
1:6c867f0: 
1:6c867f0: import org.slf4j.Logger;
1:6c867f0: import org.slf4j.LoggerFactory;
1:6c867f0: 
1:6c867f0: import org.apache.cassandra.exceptions.ConfigurationException;
1:6c867f0: 
1:6c867f0: public final class TimeWindowCompactionStrategyOptions
1:6c867f0: {
1:6c867f0:     private static final Logger logger = LoggerFactory.getLogger(TimeWindowCompactionStrategyOptions.class);
1:6c867f0: 
1:6c867f0:     protected static final TimeUnit DEFAULT_TIMESTAMP_RESOLUTION = TimeUnit.MICROSECONDS;
1:6c867f0:     protected static final TimeUnit DEFAULT_COMPACTION_WINDOW_UNIT = TimeUnit.DAYS;
1:6c867f0:     protected static final int DEFAULT_COMPACTION_WINDOW_SIZE = 1;
1:6c867f0:     protected static final int DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS = 60 * 10;
1:6c867f0: 
1:6c867f0:     protected static final String TIMESTAMP_RESOLUTION_KEY = "timestamp_resolution";
1:6c867f0:     protected static final String COMPACTION_WINDOW_UNIT_KEY = "compaction_window_unit";
1:6c867f0:     protected static final String COMPACTION_WINDOW_SIZE_KEY = "compaction_window_size";
1:6c867f0:     protected static final String EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY = "expired_sstable_check_frequency_seconds";
1:6c867f0: 
1:6c867f0:     protected final int sstableWindowSize;
1:6c867f0:     protected final TimeUnit sstableWindowUnit;
1:6c867f0:     protected final TimeUnit timestampResolution;
1:6c867f0:     protected final long expiredSSTableCheckFrequency;
1:6c867f0: 
1:6c867f0:     SizeTieredCompactionStrategyOptions stcsOptions;
1:6c867f0: 
1:6c867f0:     protected final static ImmutableList<TimeUnit> validTimestampTimeUnits = ImmutableList.of(TimeUnit.SECONDS, TimeUnit.MILLISECONDS, TimeUnit.MICROSECONDS, TimeUnit.NANOSECONDS);
1:6c867f0:     protected final static ImmutableList<TimeUnit> validWindowTimeUnits = ImmutableList.of(TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS);
1:6c867f0: 
1:6c867f0:     public TimeWindowCompactionStrategyOptions(Map<String, String> options)
1:6c867f0:     {
1:6c867f0:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
1:6c867f0:         timestampResolution = optionValue == null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit.valueOf(optionValue);
1:6c867f0:         if (timestampResolution != DEFAULT_TIMESTAMP_RESOLUTION)
1:6c867f0:             logger.warn("Using a non-default timestamp_resolution {} - are you really doing inserts with USING TIMESTAMP <non_microsecond_timestamp> (or driver equivalent)?", timestampResolution.toString());
1:6c867f0: 
1:6c867f0:         optionValue = options.get(COMPACTION_WINDOW_UNIT_KEY);
1:6c867f0:         sstableWindowUnit = optionValue == null ? DEFAULT_COMPACTION_WINDOW_UNIT : TimeUnit.valueOf(optionValue);
1:6c867f0: 
1:6c867f0:         optionValue = options.get(COMPACTION_WINDOW_SIZE_KEY);
1:6c867f0:         sstableWindowSize = optionValue == null ? DEFAULT_COMPACTION_WINDOW_SIZE : Integer.parseInt(optionValue);
1:6c867f0: 
1:6c867f0:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:6c867f0:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1:6c867f0: 
1:6c867f0:         stcsOptions = new SizeTieredCompactionStrategyOptions(options);
1:6c867f0:     }
1:6c867f0: 
1:6c867f0:     public TimeWindowCompactionStrategyOptions()
1:6c867f0:     {
1:6c867f0:         sstableWindowUnit = DEFAULT_COMPACTION_WINDOW_UNIT;
1:6c867f0:         timestampResolution = DEFAULT_TIMESTAMP_RESOLUTION;
1:6c867f0:         sstableWindowSize = DEFAULT_COMPACTION_WINDOW_SIZE;
1:6c867f0:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS, TimeUnit.SECONDS);
1:6c867f0:         stcsOptions = new SizeTieredCompactionStrategyOptions();
1:6c867f0:     }
1:6c867f0: 
1:6c867f0:     public static Map<String, String> validateOptions(Map<String, String> options, Map<String, String> uncheckedOptions) throws  ConfigurationException
1:6c867f0:     {
1:6c867f0:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
1:6c867f0:         try
1:6c867f0:         {
1:6c867f0:             if (optionValue != null)
1:6c867f0:                 if (!validTimestampTimeUnits.contains(TimeUnit.valueOf(optionValue)))
1:6c867f0:                     throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, TIMESTAMP_RESOLUTION_KEY));
1:6c867f0:         }
1:6c867f0:         catch (IllegalArgumentException e)
1:6c867f0:         {
1:6c867f0:             throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, TIMESTAMP_RESOLUTION_KEY));
1:6c867f0:         }
1:6c867f0: 
1:6c867f0: 
1:6c867f0:         optionValue = options.get(COMPACTION_WINDOW_UNIT_KEY);
1:6c867f0:         try
1:6c867f0:         {
1:6c867f0:             if (optionValue != null)
1:6c867f0:                 if (!validWindowTimeUnits.contains(TimeUnit.valueOf(optionValue)))
1:6c867f0:                     throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, COMPACTION_WINDOW_UNIT_KEY));
1:6c867f0: 
1:6c867f0:         }
1:6c867f0:         catch (IllegalArgumentException e)
1:6c867f0:         {
1:6c867f0:             throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, COMPACTION_WINDOW_UNIT_KEY), e);
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         optionValue = options.get(COMPACTION_WINDOW_SIZE_KEY);
1:6c867f0:         try
1:6c867f0:         {
1:6c867f0:             int sstableWindowSize = optionValue == null ? DEFAULT_COMPACTION_WINDOW_SIZE : Integer.parseInt(optionValue);
1:6c867f0:             if (sstableWindowSize < 1)
1:6c867f0:             {
1:5895280:                 throw new ConfigurationException(String.format("%d must be greater than 1 for %s", sstableWindowSize, COMPACTION_WINDOW_SIZE_KEY));
1:6c867f0:             }
1:6c867f0:         }
1:6c867f0:         catch (NumberFormatException e)
1:6c867f0:         {
1:5895280:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, COMPACTION_WINDOW_SIZE_KEY), e);
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:6c867f0:         try
1:6c867f0:         {
1:6c867f0:             long expiredCheckFrequency = optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue);
1:6c867f0:             if (expiredCheckFrequency < 0)
1:6c867f0:             {
1:6c867f0:                 throw new ConfigurationException(String.format("%s must not be negative, but was %d", EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, expiredCheckFrequency));
1:6c867f0:              }
1:6c867f0:         }
1:6c867f0:         catch (NumberFormatException e)
1:6c867f0:         {
1:6c867f0:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY), e);
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         uncheckedOptions.remove(COMPACTION_WINDOW_SIZE_KEY);
1:6c867f0:         uncheckedOptions.remove(COMPACTION_WINDOW_UNIT_KEY);
1:6c867f0:         uncheckedOptions.remove(TIMESTAMP_RESOLUTION_KEY);
1:6c867f0:         uncheckedOptions.remove(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:6c867f0: 
1:6c867f0:         uncheckedOptions = SizeTieredCompactionStrategyOptions.validateOptions(options, uncheckedOptions);
1:6c867f0: 
1:6c867f0:         return uncheckedOptions;
1:6c867f0:     }
1:6c867f0: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:5895280
/////////////////////////////////////////////////////////////////////////
1:                 throw new ConfigurationException(String.format("%d must be greater than 1 for %s", sstableWindowSize, COMPACTION_WINDOW_SIZE_KEY));
1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, COMPACTION_WINDOW_SIZE_KEY), e);
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:6c867f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.compaction;
1: 
1: import com.google.common.collect.ImmutableList;
1: 
1: import java.util.Map;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: public final class TimeWindowCompactionStrategyOptions
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(TimeWindowCompactionStrategyOptions.class);
1: 
1:     protected static final TimeUnit DEFAULT_TIMESTAMP_RESOLUTION = TimeUnit.MICROSECONDS;
1:     protected static final TimeUnit DEFAULT_COMPACTION_WINDOW_UNIT = TimeUnit.DAYS;
1:     protected static final int DEFAULT_COMPACTION_WINDOW_SIZE = 1;
1:     protected static final int DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS = 60 * 10;
1: 
1:     protected static final String TIMESTAMP_RESOLUTION_KEY = "timestamp_resolution";
1:     protected static final String COMPACTION_WINDOW_UNIT_KEY = "compaction_window_unit";
1:     protected static final String COMPACTION_WINDOW_SIZE_KEY = "compaction_window_size";
1:     protected static final String EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY = "expired_sstable_check_frequency_seconds";
1: 
1:     protected final int sstableWindowSize;
1:     protected final TimeUnit sstableWindowUnit;
1:     protected final TimeUnit timestampResolution;
1:     protected final long expiredSSTableCheckFrequency;
1: 
1:     SizeTieredCompactionStrategyOptions stcsOptions;
1: 
1:     protected final static ImmutableList<TimeUnit> validTimestampTimeUnits = ImmutableList.of(TimeUnit.SECONDS, TimeUnit.MILLISECONDS, TimeUnit.MICROSECONDS, TimeUnit.NANOSECONDS);
1:     protected final static ImmutableList<TimeUnit> validWindowTimeUnits = ImmutableList.of(TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS);
1: 
1:     public TimeWindowCompactionStrategyOptions(Map<String, String> options)
1:     {
1:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
1:         timestampResolution = optionValue == null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit.valueOf(optionValue);
1:         if (timestampResolution != DEFAULT_TIMESTAMP_RESOLUTION)
1:             logger.warn("Using a non-default timestamp_resolution {} - are you really doing inserts with USING TIMESTAMP <non_microsecond_timestamp> (or driver equivalent)?", timestampResolution.toString());
1: 
1:         optionValue = options.get(COMPACTION_WINDOW_UNIT_KEY);
1:         sstableWindowUnit = optionValue == null ? DEFAULT_COMPACTION_WINDOW_UNIT : TimeUnit.valueOf(optionValue);
1: 
1:         optionValue = options.get(COMPACTION_WINDOW_SIZE_KEY);
1:         sstableWindowSize = optionValue == null ? DEFAULT_COMPACTION_WINDOW_SIZE : Integer.parseInt(optionValue);
1: 
1:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1: 
1:         stcsOptions = new SizeTieredCompactionStrategyOptions(options);
1:     }
1: 
1:     public TimeWindowCompactionStrategyOptions()
1:     {
1:         sstableWindowUnit = DEFAULT_COMPACTION_WINDOW_UNIT;
1:         timestampResolution = DEFAULT_TIMESTAMP_RESOLUTION;
1:         sstableWindowSize = DEFAULT_COMPACTION_WINDOW_SIZE;
1:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS, TimeUnit.SECONDS);
1:         stcsOptions = new SizeTieredCompactionStrategyOptions();
1:     }
1: 
1:     public static Map<String, String> validateOptions(Map<String, String> options, Map<String, String> uncheckedOptions) throws  ConfigurationException
1:     {
1:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
1:         try
1:         {
1:             if (optionValue != null)
1:                 if (!validTimestampTimeUnits.contains(TimeUnit.valueOf(optionValue)))
1:                     throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, TIMESTAMP_RESOLUTION_KEY));
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, TIMESTAMP_RESOLUTION_KEY));
1:         }
1: 
1: 
1:         optionValue = options.get(COMPACTION_WINDOW_UNIT_KEY);
1:         try
1:         {
1:             if (optionValue != null)
1:                 if (!validWindowTimeUnits.contains(TimeUnit.valueOf(optionValue)))
1:                     throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, COMPACTION_WINDOW_UNIT_KEY));
1: 
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not valid for %s", optionValue, COMPACTION_WINDOW_UNIT_KEY), e);
1:         }
1: 
1:         optionValue = options.get(COMPACTION_WINDOW_SIZE_KEY);
1:         try
1:         {
1:             int sstableWindowSize = optionValue == null ? DEFAULT_COMPACTION_WINDOW_SIZE : Integer.parseInt(optionValue);
1:             if (sstableWindowSize < 1)
1:             {
0:                 throw new ConfigurationException(String.format("%s must be greater than 1", DEFAULT_COMPACTION_WINDOW_SIZE, sstableWindowSize));
1:             }
1:         }
1:         catch (NumberFormatException e)
1:         {
0:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, DEFAULT_COMPACTION_WINDOW_SIZE), e);
1:         }
1: 
1:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:         try
1:         {
1:             long expiredCheckFrequency = optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue);
1:             if (expiredCheckFrequency < 0)
1:             {
1:                 throw new ConfigurationException(String.format("%s must not be negative, but was %d", EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, expiredCheckFrequency));
1:              }
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY), e);
1:         }
1: 
1:         uncheckedOptions.remove(COMPACTION_WINDOW_SIZE_KEY);
1:         uncheckedOptions.remove(COMPACTION_WINDOW_UNIT_KEY);
1:         uncheckedOptions.remove(TIMESTAMP_RESOLUTION_KEY);
1:         uncheckedOptions.remove(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1: 
1:         uncheckedOptions = SizeTieredCompactionStrategyOptions.validateOptions(options, uncheckedOptions);
1: 
1:         return uncheckedOptions;
1:     }
1: }
============================================================================