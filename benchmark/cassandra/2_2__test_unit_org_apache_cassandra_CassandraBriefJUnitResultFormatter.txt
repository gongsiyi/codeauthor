1:1352ebd: /*
1:1352ebd:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:1352ebd:  *  contributor license agreements.  See the NOTICE file distributed with
1:1352ebd:  *  this work for additional information regarding copyright ownership.
1:1352ebd:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:1352ebd:  *  (the "License"); you may not use this file except in compliance with
1:1352ebd:  *  the License.  You may obtain a copy of the License at
1:1352ebd:  *
1:1352ebd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1352ebd:  *
1:1352ebd:  *  Unless required by applicable law or agreed to in writing, software
1:1352ebd:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:1352ebd:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1352ebd:  *  See the License for the specific language governing permissions and
1:1352ebd:  *  limitations under the License.
1:1352ebd:  *
1:1352ebd:  */
1:1352ebd: 
1:1352ebd: package org.apache.cassandra;
1:1352ebd: 
1:1352ebd: import java.io.BufferedWriter;
1:1352ebd: import java.io.IOException;
1:1352ebd: import java.io.OutputStream;
1:1352ebd: import java.io.StringWriter;
1:1352ebd: import java.text.NumberFormat;
1:1352ebd: 
1:1352ebd: import junit.framework.AssertionFailedError;
1:1352ebd: import junit.framework.Test;
1:1352ebd: 
1:1352ebd: import org.apache.tools.ant.BuildException;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.IgnoredTestListener;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelper;
1:1352ebd: import org.apache.tools.ant.util.FileUtils;
1:1352ebd: import org.apache.tools.ant.util.StringUtils;
1:1352ebd: 
1:1352ebd: /**
1:1352ebd:  * Prints plain text output of the test to a specified Writer.
1:1352ebd:  * Inspired by the PlainJUnitResultFormatter.
1:1352ebd:  *
1:1352ebd:  * @see FormatterElement
1:1352ebd:  * @see PlainJUnitResultFormatter
1:1352ebd:  */
1:1352ebd: public class CassandraBriefJUnitResultFormatter implements JUnitResultFormatter, IgnoredTestListener {
1:1352ebd: 
1:1352ebd:     private static final double ONE_SECOND = 1000.0;
1:1352ebd: 
1:1352ebd:     private static final String tag = System.getProperty("cassandra.testtag", "");
1:1352ebd: 
1:c8d3cc1:     private static final Boolean keepBriefBrief = Boolean.getBoolean("cassandra.keepBriefBrief");
1:c8d3cc1: 
1:1352ebd:     /**
1:1352ebd:      * Where to write the log to.
1:1352ebd:      */
1:1352ebd:     private OutputStream out;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Used for writing the results.
1:1352ebd:      */
1:1352ebd:     private BufferedWriter output;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Used as part of formatting the results.
1:1352ebd:      */
1:1352ebd:     private StringWriter results;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Used for writing formatted results to.
1:1352ebd:      */
1:1352ebd:     private BufferedWriter resultWriter;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Formatter for timings.
1:1352ebd:      */
1:1352ebd:     private NumberFormat numberFormat = NumberFormat.getInstance();
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Output suite has written to System.out
1:1352ebd:      */
1:1352ebd:     private String systemOutput = null;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Output suite has written to System.err
1:1352ebd:      */
1:1352ebd:     private String systemError = null;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Constructor for BriefJUnitResultFormatter.
1:1352ebd:      */
1:1352ebd:     public CassandraBriefJUnitResultFormatter() {
1:1352ebd:         results = new StringWriter();
1:1352ebd:         resultWriter = new BufferedWriter(results);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Sets the stream the formatter is supposed to write its results to.
1:1352ebd:      * @param out the output stream to write to
1:1352ebd:      */
1:1352ebd:     public void setOutput(OutputStream out) {
1:1352ebd:         this.out = out;
1:1352ebd:         output = new BufferedWriter(new java.io.OutputStreamWriter(out));
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * @see JUnitResultFormatter#setSystemOutput(String)
1:1352ebd:      */
1:1352ebd:     /** {@inheritDoc}. */
1:1352ebd:     public void setSystemOutput(String out) {
1:1352ebd:         systemOutput = out;
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * @see JUnitResultFormatter#setSystemError(String)
1:1352ebd:      */
1:1352ebd:     /** {@inheritDoc}. */
1:1352ebd:     public void setSystemError(String err) {
1:1352ebd:         systemError = err;
1:1352ebd:     }
1:1352ebd: 
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * The whole testsuite started.
1:1352ebd:      * @param suite the test suite
1:1352ebd:      */
1:1352ebd:     public void startTestSuite(JUnitTest suite) {
1:1352ebd:         if (output == null) {
1:1352ebd:             return; // Quick return - no output do nothing.
1:1352ebd:         }
1:1352ebd:         StringBuffer sb = new StringBuffer("Testsuite: ");
1:1352ebd:         String n = suite.getName();
1:1352ebd:         if (n != null && !tag.isEmpty())
1:1352ebd:             n = n + "-" + tag;
1:1352ebd:         sb.append(n);
1:1352ebd:         sb.append(StringUtils.LINE_SEP);
1:1352ebd:         try {
1:1352ebd:             output.write(sb.toString());
1:1352ebd:             output.flush();
1:1352ebd:         } catch (IOException ex) {
1:1352ebd:             throw new BuildException(ex);
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * The whole testsuite ended.
1:1352ebd:      * @param suite the test suite
1:1352ebd:      */
1:1352ebd:     public void endTestSuite(JUnitTest suite) {
1:c8d3cc1:         StringBuffer sb = new StringBuffer("Testsuite: ");
1:c8d3cc1:         String n = suite.getName();
1:c8d3cc1:         if (n != null && !tag.isEmpty())
1:c8d3cc1:             n = n + "-" + tag;
1:c8d3cc1:         sb.append(n);
1:c8d3cc1:         sb.append(" Tests run: ");
1:1352ebd:         sb.append(suite.runCount());
1:1352ebd:         sb.append(", Failures: ");
1:1352ebd:         sb.append(suite.failureCount());
1:1352ebd:         sb.append(", Errors: ");
1:1352ebd:         sb.append(suite.errorCount());
1:1352ebd:         sb.append(", Skipped: ");
1:1352ebd:         sb.append(suite.skipCount());
1:1352ebd:         sb.append(", Time elapsed: ");
1:1352ebd:         sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));
1:1352ebd:         sb.append(" sec");
1:1352ebd:         sb.append(StringUtils.LINE_SEP);
1:1352ebd:         sb.append(StringUtils.LINE_SEP);
1:1352ebd: 
1:1352ebd:         // append the err and output streams to the log
1:c8d3cc1:         if (!keepBriefBrief && systemOutput != null && systemOutput.length() > 0) {
1:1352ebd:             sb.append("------------- Standard Output ---------------")
1:1352ebd:                     .append(StringUtils.LINE_SEP)
1:1352ebd:                     .append(systemOutput)
1:1352ebd:                     .append("------------- ---------------- ---------------")
1:1352ebd:                     .append(StringUtils.LINE_SEP);
1:1352ebd:         }
1:1352ebd: 
1:c8d3cc1:         if (!keepBriefBrief && systemError != null && systemError.length() > 0) {
1:1352ebd:             sb.append("------------- Standard Error -----------------")
1:1352ebd:                     .append(StringUtils.LINE_SEP)
1:1352ebd:                     .append(systemError)
1:1352ebd:                     .append("------------- ---------------- ---------------")
1:1352ebd:                     .append(StringUtils.LINE_SEP);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         if (output != null) {
1:1352ebd:             try {
1:1352ebd:                 output.write(sb.toString());
1:1352ebd:                 resultWriter.close();
1:1352ebd:                 output.write(results.toString());
1:1352ebd:             } catch (IOException ex) {
1:1352ebd:                 throw new BuildException(ex);
1:1352ebd:             } finally {
1:1352ebd:                 try {
1:1352ebd:                     output.flush();
1:1352ebd:                 } catch (IOException ex) {
1:1352ebd:                     // swallow, there has likely been an exception before this
1:1352ebd:                 }
1:1352ebd:                 if (out != System.out && out != System.err) {
1:1352ebd:                     FileUtils.close(out);
1:1352ebd:                 }
1:1352ebd:             }
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * A test started.
1:1352ebd:      * @param test a test
1:1352ebd:      */
1:1352ebd:     public void startTest(Test test) {
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * A test ended.
1:1352ebd:      * @param test a test
1:1352ebd:      */
1:1352ebd:     public void endTest(Test test) {
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Interface TestListener for JUnit &lt;= 3.4.
1:1352ebd:      *
1:1352ebd:      * <p>A Test failed.
1:1352ebd:      * @param test a test
1:1352ebd:      * @param t    the exception thrown by the test
1:1352ebd:      */
1:1352ebd:     public void addFailure(Test test, Throwable t) {
1:1352ebd:         formatError("\tFAILED", test, t);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Interface TestListener for JUnit &gt; 3.4.
1:1352ebd:      *
1:1352ebd:      * <p>A Test failed.
1:1352ebd:      * @param test a test
1:1352ebd:      * @param t    the assertion failed by the test
1:1352ebd:      */
1:1352ebd:     public void addFailure(Test test, AssertionFailedError t) {
1:1352ebd:         addFailure(test, (Throwable) t);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * A test caused an error.
1:1352ebd:      * @param test  a test
1:1352ebd:      * @param error the error thrown by the test
1:1352ebd:      */
1:1352ebd:     public void addError(Test test, Throwable error) {
1:1352ebd:         formatError("\tCaused an ERROR", test, error);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Format the test for printing..
1:1352ebd:      * @param test a test
1:1352ebd:      * @return the formatted testname
1:1352ebd:      */
1:1352ebd:     protected String formatTest(Test test) {
1:1352ebd:         if (test == null) {
1:1352ebd:             return "Null Test: ";
1:1352ebd:         } else {
1:1352ebd:             if (!tag.isEmpty())
1:1352ebd:                 return "Testcase: " + test.toString() + "-" + tag + ":";
1:1352ebd:             return "Testcase: " + test.toString() + ":";
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Format an error and print it.
1:1352ebd:      * @param type the type of error
1:1352ebd:      * @param test the test that failed
1:1352ebd:      * @param error the exception that the test threw
1:1352ebd:      */
1:1352ebd:     protected synchronized void formatError(String type, Test test,
1:1352ebd:                                             Throwable error) {
1:1352ebd:         if (test != null) {
1:1352ebd:             endTest(test);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         try {
1:1352ebd:             resultWriter.write(formatTest(test) + type);
1:1352ebd:             resultWriter.newLine();
1:1352ebd:             resultWriter.write(String.valueOf(error.getMessage()));
1:1352ebd:             resultWriter.newLine();
1:1352ebd:             String strace = JUnitTestRunner.getFilteredTrace(error);
1:1352ebd:             resultWriter.write(strace);
1:1352ebd:             resultWriter.newLine();
1:1352ebd:             resultWriter.newLine();
1:1352ebd:         } catch (IOException ex) {
1:1352ebd:             throw new BuildException(ex);
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd: 
1:1352ebd:     public void testIgnored(Test test) {
1:1352ebd:         formatSkip(test, JUnitVersionHelper.getIgnoreMessage(test));
1:1352ebd:     }
1:1352ebd: 
1:1352ebd: 
1:1352ebd:     public void formatSkip(Test test, String message) {
1:1352ebd:         if (test != null) {
1:1352ebd:             endTest(test);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         try {
1:1352ebd:             resultWriter.write(formatTest(test) + "SKIPPED");
1:1352ebd:             if (message != null) {
1:1352ebd:                 resultWriter.write(": ");
1:1352ebd:                 resultWriter.write(message);
1:1352ebd:             }
1:1352ebd:             resultWriter.newLine();
1:1352ebd:         } catch (IOException ex) {
1:1352ebd:             throw new BuildException(ex);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     public void testAssumptionFailure(Test test, Throwable cause) {
1:1352ebd:         formatSkip(test, cause.getMessage());
1:1352ebd:     }
1:1352ebd: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c8d3cc1
/////////////////////////////////////////////////////////////////////////
1:     private static final Boolean keepBriefBrief = Boolean.getBoolean("cassandra.keepBriefBrief");
1: 
/////////////////////////////////////////////////////////////////////////
1:         StringBuffer sb = new StringBuffer("Testsuite: ");
1:         String n = suite.getName();
1:         if (n != null && !tag.isEmpty())
1:             n = n + "-" + tag;
1:         sb.append(n);
1:         sb.append(" Tests run: ");
/////////////////////////////////////////////////////////////////////////
1:         if (!keepBriefBrief && systemOutput != null && systemOutput.length() > 0) {
/////////////////////////////////////////////////////////////////////////
1:         if (!keepBriefBrief && systemError != null && systemError.length() > 0) {
author:Jason Brown
-------------------------------------------------------------------------------
commit:1352ebd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  *
1:  */
1: 
1: package org.apache.cassandra;
1: 
1: import java.io.BufferedWriter;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.StringWriter;
1: import java.text.NumberFormat;
1: 
1: import junit.framework.AssertionFailedError;
1: import junit.framework.Test;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.taskdefs.optional.junit.IgnoredTestListener;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelper;
1: import org.apache.tools.ant.util.FileUtils;
1: import org.apache.tools.ant.util.StringUtils;
1: 
1: /**
1:  * Prints plain text output of the test to a specified Writer.
1:  * Inspired by the PlainJUnitResultFormatter.
1:  *
1:  * @see FormatterElement
1:  * @see PlainJUnitResultFormatter
1:  */
1: public class CassandraBriefJUnitResultFormatter implements JUnitResultFormatter, IgnoredTestListener {
1: 
1:     private static final double ONE_SECOND = 1000.0;
1: 
1:     private static final String tag = System.getProperty("cassandra.testtag", "");
1: 
1:     /**
1:      * Where to write the log to.
1:      */
1:     private OutputStream out;
1: 
1:     /**
1:      * Used for writing the results.
1:      */
1:     private BufferedWriter output;
1: 
1:     /**
1:      * Used as part of formatting the results.
1:      */
1:     private StringWriter results;
1: 
1:     /**
1:      * Used for writing formatted results to.
1:      */
1:     private BufferedWriter resultWriter;
1: 
1:     /**
1:      * Formatter for timings.
1:      */
1:     private NumberFormat numberFormat = NumberFormat.getInstance();
1: 
1:     /**
1:      * Output suite has written to System.out
1:      */
1:     private String systemOutput = null;
1: 
1:     /**
1:      * Output suite has written to System.err
1:      */
1:     private String systemError = null;
1: 
1:     /**
1:      * Constructor for BriefJUnitResultFormatter.
1:      */
1:     public CassandraBriefJUnitResultFormatter() {
1:         results = new StringWriter();
1:         resultWriter = new BufferedWriter(results);
1:     }
1: 
1:     /**
1:      * Sets the stream the formatter is supposed to write its results to.
1:      * @param out the output stream to write to
1:      */
1:     public void setOutput(OutputStream out) {
1:         this.out = out;
1:         output = new BufferedWriter(new java.io.OutputStreamWriter(out));
1:     }
1: 
1:     /**
1:      * @see JUnitResultFormatter#setSystemOutput(String)
1:      */
1:     /** {@inheritDoc}. */
1:     public void setSystemOutput(String out) {
1:         systemOutput = out;
1:     }
1: 
1:     /**
1:      * @see JUnitResultFormatter#setSystemError(String)
1:      */
1:     /** {@inheritDoc}. */
1:     public void setSystemError(String err) {
1:         systemError = err;
1:     }
1: 
1: 
1:     /**
1:      * The whole testsuite started.
1:      * @param suite the test suite
1:      */
1:     public void startTestSuite(JUnitTest suite) {
1:         if (output == null) {
1:             return; // Quick return - no output do nothing.
1:         }
1:         StringBuffer sb = new StringBuffer("Testsuite: ");
1:         String n = suite.getName();
1:         if (n != null && !tag.isEmpty())
1:             n = n + "-" + tag;
1:         sb.append(n);
1:         sb.append(StringUtils.LINE_SEP);
1:         try {
1:             output.write(sb.toString());
1:             output.flush();
1:         } catch (IOException ex) {
1:             throw new BuildException(ex);
1:         }
1:     }
1: 
1:     /**
1:      * The whole testsuite ended.
1:      * @param suite the test suite
1:      */
1:     public void endTestSuite(JUnitTest suite) {
0:         StringBuffer sb = new StringBuffer("Tests run: ");
1:         sb.append(suite.runCount());
1:         sb.append(", Failures: ");
1:         sb.append(suite.failureCount());
1:         sb.append(", Errors: ");
1:         sb.append(suite.errorCount());
1:         sb.append(", Skipped: ");
1:         sb.append(suite.skipCount());
1:         sb.append(", Time elapsed: ");
1:         sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));
1:         sb.append(" sec");
1:         sb.append(StringUtils.LINE_SEP);
1:         sb.append(StringUtils.LINE_SEP);
1: 
1:         // append the err and output streams to the log
0:         if (systemOutput != null && systemOutput.length() > 0) {
1:             sb.append("------------- Standard Output ---------------")
1:                     .append(StringUtils.LINE_SEP)
1:                     .append(systemOutput)
1:                     .append("------------- ---------------- ---------------")
1:                     .append(StringUtils.LINE_SEP);
1:         }
1: 
0:         if (systemError != null && systemError.length() > 0) {
1:             sb.append("------------- Standard Error -----------------")
1:                     .append(StringUtils.LINE_SEP)
1:                     .append(systemError)
1:                     .append("------------- ---------------- ---------------")
1:                     .append(StringUtils.LINE_SEP);
1:         }
1: 
1:         if (output != null) {
1:             try {
1:                 output.write(sb.toString());
1:                 resultWriter.close();
1:                 output.write(results.toString());
1:             } catch (IOException ex) {
1:                 throw new BuildException(ex);
1:             } finally {
1:                 try {
1:                     output.flush();
1:                 } catch (IOException ex) {
1:                     // swallow, there has likely been an exception before this
1:                 }
1:                 if (out != System.out && out != System.err) {
1:                     FileUtils.close(out);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * A test started.
1:      * @param test a test
1:      */
1:     public void startTest(Test test) {
1:     }
1: 
1:     /**
1:      * A test ended.
1:      * @param test a test
1:      */
1:     public void endTest(Test test) {
1:     }
1: 
1:     /**
1:      * Interface TestListener for JUnit &lt;= 3.4.
1:      *
1:      * <p>A Test failed.
1:      * @param test a test
1:      * @param t    the exception thrown by the test
1:      */
1:     public void addFailure(Test test, Throwable t) {
1:         formatError("\tFAILED", test, t);
1:     }
1: 
1:     /**
1:      * Interface TestListener for JUnit &gt; 3.4.
1:      *
1:      * <p>A Test failed.
1:      * @param test a test
1:      * @param t    the assertion failed by the test
1:      */
1:     public void addFailure(Test test, AssertionFailedError t) {
1:         addFailure(test, (Throwable) t);
1:     }
1: 
1:     /**
1:      * A test caused an error.
1:      * @param test  a test
1:      * @param error the error thrown by the test
1:      */
1:     public void addError(Test test, Throwable error) {
1:         formatError("\tCaused an ERROR", test, error);
1:     }
1: 
1:     /**
1:      * Format the test for printing..
1:      * @param test a test
1:      * @return the formatted testname
1:      */
1:     protected String formatTest(Test test) {
1:         if (test == null) {
1:             return "Null Test: ";
1:         } else {
1:             if (!tag.isEmpty())
1:                 return "Testcase: " + test.toString() + "-" + tag + ":";
1:             return "Testcase: " + test.toString() + ":";
1:         }
1:     }
1: 
1:     /**
1:      * Format an error and print it.
1:      * @param type the type of error
1:      * @param test the test that failed
1:      * @param error the exception that the test threw
1:      */
1:     protected synchronized void formatError(String type, Test test,
1:                                             Throwable error) {
1:         if (test != null) {
1:             endTest(test);
1:         }
1: 
1:         try {
1:             resultWriter.write(formatTest(test) + type);
1:             resultWriter.newLine();
1:             resultWriter.write(String.valueOf(error.getMessage()));
1:             resultWriter.newLine();
1:             String strace = JUnitTestRunner.getFilteredTrace(error);
1:             resultWriter.write(strace);
1:             resultWriter.newLine();
1:             resultWriter.newLine();
1:         } catch (IOException ex) {
1:             throw new BuildException(ex);
1:         }
1:     }
1: 
1: 
1:     public void testIgnored(Test test) {
1:         formatSkip(test, JUnitVersionHelper.getIgnoreMessage(test));
1:     }
1: 
1: 
1:     public void formatSkip(Test test, String message) {
1:         if (test != null) {
1:             endTest(test);
1:         }
1: 
1:         try {
1:             resultWriter.write(formatTest(test) + "SKIPPED");
1:             if (message != null) {
1:                 resultWriter.write(": ");
1:                 resultWriter.write(message);
1:             }
1:             resultWriter.newLine();
1:         } catch (IOException ex) {
1:             throw new BuildException(ex);
1:         }
1: 
1:     }
1: 
1:     public void testAssumptionFailure(Test test, Throwable cause) {
1:         formatSkip(test, cause.getMessage());
1:     }
1: }
============================================================================