1:30bb255: /*
1:30bb255:  * Licensed to the Apache Software Foundation (ASF) under one
1:30bb255:  * or more contributor license agreements.  See the NOTICE file
1:30bb255:  * distributed with this work for additional information
1:30bb255:  * regarding copyright ownership.  The ASF licenses this file
1:30bb255:  * to you under the Apache License, Version 2.0 (the
1:30bb255:  * "License"); you may not use this file except in compliance
1:30bb255:  * with the License.  You may obtain a copy of the License at
1:30bb255:  *
1:30bb255:  *     http://www.apache.org/licenses/LICENSE-2.0
1:30bb255:  *
1:30bb255:  * Unless required by applicable law or agreed to in writing, software
1:30bb255:  * distributed under the License is distributed on an "AS IS" BASIS,
1:30bb255:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:30bb255:  * See the License for the specific language governing permissions and
1:30bb255:  * limitations under the License.
1:30bb255:  */
1:30bb255: package org.apache.cassandra.metrics;
1:30bb255: 
1:30bb255: import com.codahale.metrics.Gauge;
1:30bb255: import com.codahale.metrics.Meter;
1:30bb255: import com.codahale.metrics.RatioGauge;
1:30bb255: import com.codahale.metrics.Timer;
1:30bb255: import org.apache.cassandra.cache.CacheSize;
1:30bb255: 
1:30bb255: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:30bb255: 
1:30bb255: /**
1:30bb255:  * Metrics for {@code ICache}.
1:30bb255:  */
1:30bb255: public class CacheMissMetrics
1:30bb255: {
1:30bb255:     /** Cache capacity in bytes */
1:30bb255:     public final Gauge<Long> capacity;
1:30bb255:     /** Total number of cache hits */
1:30bb255:     public final Meter misses;
1:30bb255:     /** Total number of cache requests */
1:30bb255:     public final Meter requests;
1:30bb255:     /** Latency of misses */
1:30bb255:     public final Timer missLatency;
1:30bb255:     /** all time cache hit rate */
1:30bb255:     public final Gauge<Double> hitRate;
1:30bb255:     /** 1m hit rate */
1:30bb255:     public final Gauge<Double> oneMinuteHitRate;
1:30bb255:     /** 5m hit rate */
1:30bb255:     public final Gauge<Double> fiveMinuteHitRate;
1:30bb255:     /** 15m hit rate */
1:30bb255:     public final Gauge<Double> fifteenMinuteHitRate;
1:30bb255:     /** Total size of cache, in bytes */
1:30bb255:     public final Gauge<Long> size;
1:30bb255:     /** Total number of cache entries */
1:30bb255:     public final Gauge<Integer> entries;
1:30bb255: 
1:30bb255:     /**
1:30bb255:      * Create metrics for given cache.
1:30bb255:      *
1:30bb255:      * @param type Type of Cache to identify metrics.
1:30bb255:      * @param cache Cache to measure metrics
1:30bb255:      */
1:30bb255:     public CacheMissMetrics(String type, final CacheSize cache)
1:30bb255:     {
1:30bb255:         MetricNameFactory factory = new DefaultNameFactory("Cache", type);
1:30bb255: 
1:30bb255:         capacity = Metrics.register(factory.createMetricName("Capacity"), (Gauge<Long>) cache::capacity);
1:30bb255:         misses = Metrics.meter(factory.createMetricName("Misses"));
1:30bb255:         requests = Metrics.meter(factory.createMetricName("Requests"));
1:30bb255:         missLatency = Metrics.timer(factory.createMetricName("MissLatency"));
1:30bb255:         hitRate = Metrics.register(factory.createMetricName("HitRate"), new RatioGauge()
1:30bb255:         {
1:30bb255:             @Override
1:30bb255:             public Ratio getRatio()
1:30bb255:             {
1:30bb255:                 long req = requests.getCount();
1:30bb255:                 long mis = misses.getCount();
1:30bb255:                 return Ratio.of(req - mis, req);
1:30bb255:             }
1:30bb255:         });
1:30bb255:         oneMinuteHitRate = Metrics.register(factory.createMetricName("OneMinuteHitRate"), new RatioGauge()
1:30bb255:         {
1:30bb255:             protected Ratio getRatio()
1:30bb255:             {
1:30bb255:                 double req = requests.getOneMinuteRate();
1:30bb255:                 double mis = misses.getOneMinuteRate();
1:30bb255:                 return Ratio.of(req - mis, req);
1:30bb255:             }
1:30bb255:         });
1:30bb255:         fiveMinuteHitRate = Metrics.register(factory.createMetricName("FiveMinuteHitRate"), new RatioGauge()
1:30bb255:         {
1:30bb255:             protected Ratio getRatio()
1:30bb255:             {
1:30bb255:                 double req = requests.getFiveMinuteRate();
1:30bb255:                 double mis = misses.getFiveMinuteRate();
1:30bb255:                 return Ratio.of(req - mis, req);
1:30bb255:             }
1:30bb255:         });
1:30bb255:         fifteenMinuteHitRate = Metrics.register(factory.createMetricName("FifteenMinuteHitRate"), new RatioGauge()
1:30bb255:         {
1:30bb255:             protected Ratio getRatio()
1:30bb255:             {
1:30bb255:                 double req = requests.getFifteenMinuteRate();
1:30bb255:                 double mis = misses.getFifteenMinuteRate();
1:30bb255:                 return Ratio.of(req - mis, req);
1:30bb255:             }
1:30bb255:         });
1:30bb255:         size = Metrics.register(factory.createMetricName("Size"), (Gauge<Long>) cache::weightedSize);
1:30bb255:         entries = Metrics.register(factory.createMetricName("Entries"), (Gauge<Integer>) cache::size);
1:30bb255:     }
1:30bb255: 
1:30bb255:     public void reset()
1:30bb255:     {
1:30bb255:         requests.mark(-requests.getCount());
1:30bb255:         misses.mark(-misses.getCount());
1:30bb255:     }
1:30bb255: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import com.codahale.metrics.Gauge;
1: import com.codahale.metrics.Meter;
1: import com.codahale.metrics.RatioGauge;
1: import com.codahale.metrics.Timer;
1: import org.apache.cassandra.cache.CacheSize;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
1: /**
1:  * Metrics for {@code ICache}.
1:  */
1: public class CacheMissMetrics
1: {
1:     /** Cache capacity in bytes */
1:     public final Gauge<Long> capacity;
1:     /** Total number of cache hits */
1:     public final Meter misses;
1:     /** Total number of cache requests */
1:     public final Meter requests;
1:     /** Latency of misses */
1:     public final Timer missLatency;
1:     /** all time cache hit rate */
1:     public final Gauge<Double> hitRate;
1:     /** 1m hit rate */
1:     public final Gauge<Double> oneMinuteHitRate;
1:     /** 5m hit rate */
1:     public final Gauge<Double> fiveMinuteHitRate;
1:     /** 15m hit rate */
1:     public final Gauge<Double> fifteenMinuteHitRate;
1:     /** Total size of cache, in bytes */
1:     public final Gauge<Long> size;
1:     /** Total number of cache entries */
1:     public final Gauge<Integer> entries;
1: 
1:     /**
1:      * Create metrics for given cache.
1:      *
1:      * @param type Type of Cache to identify metrics.
1:      * @param cache Cache to measure metrics
1:      */
1:     public CacheMissMetrics(String type, final CacheSize cache)
1:     {
1:         MetricNameFactory factory = new DefaultNameFactory("Cache", type);
1: 
1:         capacity = Metrics.register(factory.createMetricName("Capacity"), (Gauge<Long>) cache::capacity);
1:         misses = Metrics.meter(factory.createMetricName("Misses"));
1:         requests = Metrics.meter(factory.createMetricName("Requests"));
1:         missLatency = Metrics.timer(factory.createMetricName("MissLatency"));
1:         hitRate = Metrics.register(factory.createMetricName("HitRate"), new RatioGauge()
1:         {
1:             @Override
1:             public Ratio getRatio()
1:             {
1:                 long req = requests.getCount();
1:                 long mis = misses.getCount();
1:                 return Ratio.of(req - mis, req);
1:             }
1:         });
1:         oneMinuteHitRate = Metrics.register(factory.createMetricName("OneMinuteHitRate"), new RatioGauge()
1:         {
1:             protected Ratio getRatio()
1:             {
1:                 double req = requests.getOneMinuteRate();
1:                 double mis = misses.getOneMinuteRate();
1:                 return Ratio.of(req - mis, req);
1:             }
1:         });
1:         fiveMinuteHitRate = Metrics.register(factory.createMetricName("FiveMinuteHitRate"), new RatioGauge()
1:         {
1:             protected Ratio getRatio()
1:             {
1:                 double req = requests.getFiveMinuteRate();
1:                 double mis = misses.getFiveMinuteRate();
1:                 return Ratio.of(req - mis, req);
1:             }
1:         });
1:         fifteenMinuteHitRate = Metrics.register(factory.createMetricName("FifteenMinuteHitRate"), new RatioGauge()
1:         {
1:             protected Ratio getRatio()
1:             {
1:                 double req = requests.getFifteenMinuteRate();
1:                 double mis = misses.getFifteenMinuteRate();
1:                 return Ratio.of(req - mis, req);
1:             }
1:         });
1:         size = Metrics.register(factory.createMetricName("Size"), (Gauge<Long>) cache::weightedSize);
1:         entries = Metrics.register(factory.createMetricName("Entries"), (Gauge<Integer>) cache::size);
1:     }
1: 
1:     public void reset()
1:     {
1:         requests.mark(-requests.getCount());
1:         misses.mark(-misses.getCount());
1:     }
1: }
============================================================================