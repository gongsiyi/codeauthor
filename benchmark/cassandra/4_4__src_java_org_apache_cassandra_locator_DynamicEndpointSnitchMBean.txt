1:67c5720: /*
1:67c5720:  * Licensed to the Apache Software Foundation (ASF) under one
1:67c5720:  * or more contributor license agreements.  See the NOTICE file
1:67c5720:  * distributed with this work for additional information
1:67c5720:  * regarding copyright ownership.  The ASF licenses this file
1:67c5720:  * to you under the Apache License, Version 2.0 (the
1:67c5720:  * "License"); you may not use this file except in compliance
1:67c5720:  * with the License.  You may obtain a copy of the License at
1:67c5720:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:67c5720:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:67c5720:  */
1:67c5720: package org.apache.cassandra.locator;
2:67c5720: 
1:67c5720: import java.net.InetAddress;
1:c7b4740: import java.net.UnknownHostException;
1:67c5720: import java.util.Map;
1:c7b4740: import java.util.List;
1:67c5720: 
1:68d2526: public interface DynamicEndpointSnitchMBean 
1:68d2526: {
1:67c5720:     public Map<InetAddress, Double> getScores();
1:de83a3e:     public int getUpdateInterval();
1:de83a3e:     public int getResetInterval();
1:de83a3e:     public double getBadnessThreshold();
1:de83a3e:     public String getSubsnitchClassName();
1:c7b4740:     public List<Double> dumpTimings(String hostname) throws UnknownHostException;
1:286f6a1: 
1:98a70bd:     /**
1:286f6a1:      * Setting a Severity allows operators to inject preference information into the Dynamic Snitch
1:286f6a1:      * replica selection.
1:286f6a1:      *
1:286f6a1:      * When choosing which replicas to participate in a read request, the DSnitch sorts replicas
1:286f6a1:      * by response latency, and selects the fastest replicas.  Latencies are normalized to a score
1:286f6a1:      * from 0 to 1,  with lower scores being faster.
1:286f6a1:      *
1:286f6a1:      * The Severity injected here will be added to the normalized score.
1:286f6a1:      *
1:286f6a1:      * Thus, adding a Severity greater than 1 will mean the replica will never be contacted
1:286f6a1:      * (unless needed for ALL or if it is added later for rapid read protection).
1:286f6a1:      *
1:286f6a1:      * Conversely, adding a negative Severity means the replica will *always* be contacted.
1:286f6a1:      *
1:286f6a1:      * (The "Severity" term is historical and dates to when this was used to represent how
1:286f6a1:      * badly background tasks like compaction were affecting a replica's performance.
1:286f6a1:      * See CASSANDRA-3722 for when this was introduced and CASSANDRA-11738 for why it was removed.)
1:98a70bd:      */
1:98a70bd:     public void setSeverity(double severity);
1:286f6a1: 
1:286f6a1:     /**
1:286f6a1:      * @return the current manually injected Severity.
1:286f6a1:      */
1:98a70bd:     public double getSeverity();
1:67c5720: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: public interface DynamicEndpointSnitchMBean 
1: {
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:286f6a1
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Setting a Severity allows operators to inject preference information into the Dynamic Snitch
1:      * replica selection.
1:      *
1:      * When choosing which replicas to participate in a read request, the DSnitch sorts replicas
1:      * by response latency, and selects the fastest replicas.  Latencies are normalized to a score
1:      * from 0 to 1,  with lower scores being faster.
1:      *
1:      * The Severity injected here will be added to the normalized score.
1:      *
1:      * Thus, adding a Severity greater than 1 will mean the replica will never be contacted
1:      * (unless needed for ALL or if it is added later for rapid read protection).
1:      *
1:      * Conversely, adding a negative Severity means the replica will *always* be contacted.
1:      *
1:      * (The "Severity" term is historical and dates to when this was used to represent how
1:      * badly background tasks like compaction were affecting a replica's performance.
1:      * See CASSANDRA-3722 for when this was introduced and CASSANDRA-11738 for why it was removed.)
1: 
1:     /**
1:      * @return the current manually injected Severity.
1:      */
commit:de83a3e
/////////////////////////////////////////////////////////////////////////
1:     public int getUpdateInterval();
1:     public int getResetInterval();
1:     public double getBadnessThreshold();
1:     public String getSubsnitchClassName();
author:Brandon Williams
-------------------------------------------------------------------------------
commit:bc42835
/////////////////////////////////////////////////////////////////////////
0:      * Use this if you want to specify a severity; it can be negative
commit:98a70bd
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Use this if you want to specify a severity it can be -ve
0:      * Example: Page cache is cold and you want data to be sent 
0:      *          though it is not preferred one.
1:      */
1:     public void setSeverity(double severity);
1:     public double getSeverity();
commit:c7b4740
/////////////////////////////////////////////////////////////////////////
1: import java.net.UnknownHostException;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     public List<Double> dumpTimings(String hostname) throws UnknownHostException;
commit:67c5720
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
1: */
1: 
1: package org.apache.cassandra.locator;
1: 
1: import java.net.InetAddress;
1: import java.util.Map;
1: 
0: public interface DynamicEndpointSnitchMBean {
1:     public Map<InetAddress, Double> getScores();
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
============================================================================