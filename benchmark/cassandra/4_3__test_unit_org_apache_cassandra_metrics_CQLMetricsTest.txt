1:ad89d44: /*
1:ad89d44:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad89d44:  * or more contributor license agreements.  See the NOTICE file
1:ad89d44:  * distributed with this work for additional information
1:ad89d44:  * regarding copyright ownership.  The ASF licenses this file
1:ad89d44:  * to you under the Apache License, Version 2.0 (the
1:ad89d44:  * "License"); you may not use this file except in compliance
1:ad89d44:  * with the License.  You may obtain a copy of the License at
1:ad89d44:  *
1:ad89d44:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ad89d44:  *
1:ad89d44:  * Unless required by applicable law or agreed to in writing, software
1:ad89d44:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad89d44:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad89d44:  * See the License for the specific language governing permissions and
1:ad89d44:  * limitations under the License.
1:ad89d44:  */
1:a991b64: 
1:ad89d44: package org.apache.cassandra.metrics;
3:ad89d44: 
1:ad89d44: import java.io.IOException;
1:ad89d44: 
1:a991b64: import org.junit.BeforeClass;
1:a991b64: import org.junit.Test;
1:a991b64: import org.junit.runner.RunWith;
1:a991b64: 
1:ad89d44: import com.datastax.driver.core.Cluster;
1:ad89d44: import com.datastax.driver.core.PreparedStatement;
1:ad89d44: import com.datastax.driver.core.Session;
1:ad89d44: import org.apache.cassandra.OrderedJUnit4ClassRunner;
1:ad89d44: import org.apache.cassandra.SchemaLoader;
1:ad89d44: import org.apache.cassandra.config.DatabaseDescriptor;
1:ad89d44: import org.apache.cassandra.config.Schema;
1:ad89d44: import org.apache.cassandra.cql3.QueryProcessor;
1:ad89d44: import org.apache.cassandra.exceptions.ConfigurationException;
1:ad89d44: import org.apache.cassandra.service.EmbeddedCassandraService;
1:ad89d44: 
1:ad89d44: import static junit.framework.Assert.assertEquals;
1:ad89d44: 
1:ad89d44: @RunWith(OrderedJUnit4ClassRunner.class)
1:ad89d44: public class CQLMetricsTest extends SchemaLoader
1:ad89d44: {
1:ad89d44:     private static EmbeddedCassandraService cassandra;
1:ad89d44: 
1:ad89d44:     private static Cluster cluster;
1:ad89d44:     private static Session session;
1:ad89d44: 
1:ad89d44:     @BeforeClass()
1:ad89d44:     public static void setup() throws ConfigurationException, IOException
1:ad89d44:     {
1:ad89d44:         Schema.instance.clear();
1:ad89d44: 
1:ad89d44:         cassandra = new EmbeddedCassandraService();
1:ad89d44:         cassandra.start();
1:ad89d44: 
1:ad89d44:         cluster = Cluster.builder().addContactPoint("127.0.0.1").withPort(DatabaseDescriptor.getNativeTransportPort()).build();
1:ad89d44:         session = cluster.connect();
1:ad89d44: 
1:ad89d44:         session.execute("CREATE KEYSPACE IF NOT EXISTS junit WITH replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };");
1:ad89d44:         session.execute("CREATE TABLE IF NOT EXISTS junit.metricstest (id int PRIMARY KEY, val text);");
1:ad89d44:     }
1:ad89d44: 
1:ad89d44:     @Test
1:ad89d44:     public void testPreparedStatementsCount()
1:ad89d44:     {
1:30e14a3:         int n = (int) QueryProcessor.metrics.preparedStatementsCount.getValue();
1:30e14a3:         session.prepare("SELECT * FROM junit.metricstest WHERE id = ?");
1:30e14a3:         assertEquals(n+1, (int) QueryProcessor.metrics.preparedStatementsCount.getValue());
1:ad89d44:     }
1:ad89d44: 
1:ad89d44:     @Test
1:ad89d44:     public void testRegularStatementsExecuted()
1:ad89d44:     {
1:ad89d44:         clearMetrics();
1:30e14a3:         PreparedStatement metricsStatement = session.prepare("INSERT INTO junit.metricstest (id, val) VALUES (?, ?)");
1:ad89d44: 
1:8896a70:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:8896a70:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:ad89d44: 
1:ad89d44:         for (int i = 0; i < 10; i++)
1:ad89d44:             session.execute(String.format("INSERT INTO junit.metricstest (id, val) VALUES (%d, '%s')", i, "val" + i));
1:ad89d44: 
1:8896a70:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:8896a70:         assertEquals(10, QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:ad89d44:     }
1:ad89d44: 
1:ad89d44:     @Test
1:ad89d44:     public void testPreparedStatementsExecuted()
1:ad89d44:     {
1:ad89d44:         clearMetrics();
1:30e14a3:         PreparedStatement metricsStatement = session.prepare("INSERT INTO junit.metricstest (id, val) VALUES (?, ?)");
1:ad89d44: 
1:8896a70:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:8896a70:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:ad89d44: 
1:ad89d44:         for (int i = 0; i < 10; i++)
1:ad89d44:             session.execute(metricsStatement.bind(i, "val" + i));
1:ad89d44: 
1:8896a70:         assertEquals(10, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:8896a70:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:ad89d44:     }
1:ad89d44: 
1:ad89d44:     @Test
1:ad89d44:     public void testPreparedStatementsRatio()
1:ad89d44:     {
1:ad89d44:         clearMetrics();
1:30e14a3:         PreparedStatement metricsStatement = session.prepare("INSERT INTO junit.metricstest (id, val) VALUES (?, ?)");
1:ad89d44: 
1:8896a70:         assertEquals(Double.NaN, QueryProcessor.metrics.preparedStatementsRatio.getValue());
1:ad89d44: 
1:ad89d44:         for (int i = 0; i < 10; i++)
1:ad89d44:             session.execute(metricsStatement.bind(i, "val" + i));
1:8896a70:         assertEquals(1.0, QueryProcessor.metrics.preparedStatementsRatio.getValue());
1:ad89d44: 
1:ad89d44:         for (int i = 0; i < 10; i++)
1:ad89d44:             session.execute(String.format("INSERT INTO junit.metricstest (id, val) VALUES (%d, '%s')", i, "val" + i));
1:8896a70:         assertEquals(0.5, QueryProcessor.metrics.preparedStatementsRatio.getValue());
1:ad89d44:     }
1:ad89d44: 
1:ad89d44:     private void clearMetrics()
1:ad89d44:     {
1:8896a70:         QueryProcessor.metrics.preparedStatementsExecuted.dec(QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:8896a70:         QueryProcessor.metrics.regularStatementsExecuted.dec(QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:8896a70:         QueryProcessor.metrics.preparedStatementsEvicted.dec(QueryProcessor.metrics.preparedStatementsEvicted.getCount());
1:ad89d44:     }
1:ad89d44: }
1:ad89d44: 
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:30e14a3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int n = (int) QueryProcessor.metrics.preparedStatementsCount.getValue();
1:         session.prepare("SELECT * FROM junit.metricstest WHERE id = ?");
1:         assertEquals(n+1, (int) QueryProcessor.metrics.preparedStatementsCount.getValue());
1:         PreparedStatement metricsStatement = session.prepare("INSERT INTO junit.metricstest (id, val) VALUES (?, ?)");
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement metricsStatement = session.prepare("INSERT INTO junit.metricstest (id, val) VALUES (?, ?)");
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement metricsStatement = session.prepare("INSERT INTO junit.metricstest (id, val) VALUES (?, ?)");
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(0, (int) QueryProcessor.metrics.preparedStatementsCount.getValue());
0:         assertEquals(1, (int) QueryProcessor.metrics.preparedStatementsCount.getValue());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:         assertEquals(10, QueryProcessor.metrics.regularStatementsExecuted.getCount());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:         assertEquals(10, QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.getCount());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(Double.NaN, QueryProcessor.metrics.preparedStatementsRatio.getValue());
1:         assertEquals(1.0, QueryProcessor.metrics.preparedStatementsRatio.getValue());
1:         assertEquals(0.5, QueryProcessor.metrics.preparedStatementsRatio.getValue());
1:         QueryProcessor.metrics.preparedStatementsExecuted.dec(QueryProcessor.metrics.preparedStatementsExecuted.getCount());
1:         QueryProcessor.metrics.regularStatementsExecuted.dec(QueryProcessor.metrics.regularStatementsExecuted.getCount());
1:         QueryProcessor.metrics.preparedStatementsEvicted.dec(QueryProcessor.metrics.preparedStatementsEvicted.getCount());
author:Nate McCall
-------------------------------------------------------------------------------
commit:5ba1f80
/////////////////////////////////////////////////////////////////////////
0:         QueryProcessor.metrics.preparedStatementsEvicted.clear();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:ad89d44
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import java.io.IOException;
1: 
1: import com.datastax.driver.core.Cluster;
1: import com.datastax.driver.core.PreparedStatement;
1: import com.datastax.driver.core.Session;
1: 
1: import org.apache.cassandra.OrderedJUnit4ClassRunner;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.cql3.QueryProcessor;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.service.EmbeddedCassandraService;
1: 
1: import static junit.framework.Assert.assertEquals;
1: 
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
1: 
1: @RunWith(OrderedJUnit4ClassRunner.class)
1: public class CQLMetricsTest extends SchemaLoader
1: {
1:     private static EmbeddedCassandraService cassandra;
1: 
1:     private static Cluster cluster;
1:     private static Session session;
0:     private static PreparedStatement metricsStatement;
1: 
1:     @BeforeClass()
1:     public static void setup() throws ConfigurationException, IOException
1:     {
1:         Schema.instance.clear();
1: 
1:         cassandra = new EmbeddedCassandraService();
1:         cassandra.start();
1: 
1:         cluster = Cluster.builder().addContactPoint("127.0.0.1").withPort(DatabaseDescriptor.getNativeTransportPort()).build();
1:         session = cluster.connect();
1: 
1:         session.execute("CREATE KEYSPACE IF NOT EXISTS junit WITH replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };");
1:         session.execute("CREATE TABLE IF NOT EXISTS junit.metricstest (id int PRIMARY KEY, val text);");
1:     }
1: 
1:     @Test
1:     public void testPreparedStatementsCount()
1:     {
0:         assertEquals(0, (int) QueryProcessor.metrics.preparedStatementsCount.value());
0:         metricsStatement = session.prepare("INSERT INTO junit.metricstest (id, val) VALUES (?, ?)");
0:         assertEquals(1, (int) QueryProcessor.metrics.preparedStatementsCount.value());
1:     }
1: 
1:     @Test
1:     public void testRegularStatementsExecuted()
1:     {
1:         clearMetrics();
1: 
0:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.count());
0:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.count());
1: 
1:         for (int i = 0; i < 10; i++)
1:             session.execute(String.format("INSERT INTO junit.metricstest (id, val) VALUES (%d, '%s')", i, "val" + i));
1: 
0:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.count());
0:         assertEquals(10, QueryProcessor.metrics.regularStatementsExecuted.count());
1:     }
1: 
1:     @Test
1:     public void testPreparedStatementsExecuted()
1:     {
1:         clearMetrics();
1: 
0:         assertEquals(0, QueryProcessor.metrics.preparedStatementsExecuted.count());
0:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.count());
1: 
1:         for (int i = 0; i < 10; i++)
1:             session.execute(metricsStatement.bind(i, "val" + i));
1: 
0:         assertEquals(10, QueryProcessor.metrics.preparedStatementsExecuted.count());
0:         assertEquals(0, QueryProcessor.metrics.regularStatementsExecuted.count());
1:     }
1: 
1:     @Test
1:     public void testPreparedStatementsRatio()
1:     {
1:         clearMetrics();
1: 
0:         assertEquals(Double.NaN, QueryProcessor.metrics.preparedStatementsRatio.value());
1: 
1:         for (int i = 0; i < 10; i++)
1:             session.execute(metricsStatement.bind(i, "val" + i));
0:         assertEquals(1.0, QueryProcessor.metrics.preparedStatementsRatio.value());
1: 
1:         for (int i = 0; i < 10; i++)
1:             session.execute(String.format("INSERT INTO junit.metricstest (id, val) VALUES (%d, '%s')", i, "val" + i));
0:         assertEquals(0.5, QueryProcessor.metrics.preparedStatementsRatio.value());
1:     }
1: 
1:     private void clearMetrics()
1:     {
0:         QueryProcessor.metrics.preparedStatementsExecuted.clear();
0:         QueryProcessor.metrics.regularStatementsExecuted.clear();
1:     }
1: }
1: 
============================================================================