1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
1:01115f7:  */
1:01115f7: package org.apache.cassandra.cql3.validation.miscellaneous;
1:01115f7: 
1:01115f7: import java.math.BigInteger;
1:01115f7: 
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import static junit.framework.Assert.assertNull;
1:01115f7: import static org.junit.Assert.assertArrayEquals;
1:01115f7: import static org.junit.Assert.assertEquals;
1:01115f7: import static org.junit.Assert.assertTrue;
1:01115f7: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: import org.apache.cassandra.exceptions.SyntaxException;
1:01115f7: import org.apache.cassandra.utils.ByteBufferUtil;
1:01115f7: 
1:01115f7: /**
1:01115f7:  * Any tests that do not fit in any other category,
1:01115f7:  * migrated from python dtests, CASSANDRA-9160
1:01115f7:  **/
1:01115f7: public class OverflowTest extends CQLTester
1:01115f7: {
1:01115f7:     /**
1:01115f7:      * Test support for nulls
1:01115f7:      * migrated from cql_tests.py:TestCQL.null_support_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testNullSupport() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, c int, v1 int, v2 set<text>, PRIMARY KEY (k, c))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, c, v1, v2) VALUES (0, 0, null, {'1', '2'})");
1:01115f7:         execute("INSERT INTO %s (k, c, v1) VALUES (0, 1, 1)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(0, 0, null, set("1", "2")),
1:01115f7:                    row(0, 1, 1, null));
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, c, v1) VALUES (0, 1, null)");
1:01115f7:         execute("INSERT INTO %s (k, c, v2) VALUES (0, 0, null)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(0, 0, null, null),
1:01115f7:                    row(0, 1, null, null));
1:01115f7: 
1:01115f7:         assertInvalid("INSERT INTO %s (k, c, v2) VALUES (0, 2, {1, null})");
1:01115f7:         assertInvalid("SELECT * FROM %s WHERE k = null");
1:01115f7:         assertInvalid("INSERT INTO %s (k, c, v2) VALUES (0, 0, { 'foo', 'bar', null })");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test reserved keywords
1:01115f7:      * migrated from cql_tests.py:TestCQL.reserved_keyword_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testReservedKeywords() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (key text PRIMARY KEY, count counter)");
1:01115f7: 
1:01115f7:         String tableName = createTableName();
1:01115f7:         assertInvalidThrow(SyntaxException.class, String.format("CREATE TABLE %s.%s (select text PRIMARY KEY, x int)", keyspace(), tableName));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test identifiers
1:01115f7:      * migrated from cql_tests.py:TestCQL.identifier_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testIdentifiers() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (key_23 int PRIMARY KEY, CoLuMn int)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (Key_23, Column) VALUES (0, 0)");
1:01115f7:         execute("INSERT INTO %s (KEY_23, COLUMN) VALUES (0, 0)");
1:01115f7: 
1:01115f7:         assertInvalid("INSERT INTO %s (key_23, column, column) VALUES (0, 0, 0)");
1:01115f7:         assertInvalid("INSERT INTO %s (key_23, column, COLUMN) VALUES (0, 0, 0)");
1:01115f7:         assertInvalid("INSERT INTO %s (key_23, key_23, column) VALUES (0, 0, 0)");
1:01115f7:         assertInvalid("INSERT INTO %s (key_23, KEY_23, column) VALUES (0, 0, 0)");
1:01115f7: 
1:01115f7:         String tableName = createTableName();
1:01115f7:         assertInvalidThrow(SyntaxException.class, String.format("CREATE TABLE %s.%s (select int PRIMARY KEY, column int)", keyspace(), tableName));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test table options
1:01115f7:      * migrated from cql_tests.py:TestCQL.table_options_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testTableOptions() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s ( k int PRIMARY KEY, c int ) WITH "
1:01115f7:                     + "comment = 'My comment' "
1:01115f7:                     + "AND read_repair_chance = 0.5 "
1:01115f7:                     + "AND dclocal_read_repair_chance = 0.5 "
1:01115f7:                     + "AND gc_grace_seconds = 4 "
1:01115f7:                     + "AND bloom_filter_fp_chance = 0.01 "
1:9fc14bc:                     + "AND compaction = { 'class' : 'LeveledCompactionStrategy', 'sstable_size_in_mb' : 10, 'fanout_size' : 5 } "
1:b31845c:                     + "AND compression = { 'enabled': false } "
1:b31845c:                     + "AND caching = { 'keys': 'ALL', 'rows_per_partition': 'ALL' }");
1:01115f7: 
1:01115f7:         execute("ALTER TABLE %s WITH "
1:01115f7:                 + "comment = 'other comment' "
1:01115f7:                 + "AND read_repair_chance = 0.3 "
1:01115f7:                 + "AND dclocal_read_repair_chance = 0.3 "
1:01115f7:                 + "AND gc_grace_seconds = 100 "
1:01115f7:                 + "AND bloom_filter_fp_chance = 0.1 "
1:01115f7:                 + "AND compaction = { 'class': 'SizeTieredCompactionStrategy', 'min_sstable_size' : 42 } "
1:b31845c:                 + "AND compression = { 'class' : 'SnappyCompressor' } "
1:b31845c:                 + "AND caching = { 'rows_per_partition': 'ALL' }");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.unescaped_string_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testUnescapedString() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s ( k text PRIMARY KEY, c text, )");
1:01115f7: 
1:01115f7:         //The \ in this query string is not forwarded to cassandra.
1:01115f7:         //The ' is being escaped in python, but only ' is forwarded
1:01115f7:         //over the wire instead of \'.
1:01115f7:         assertInvalidThrow(SyntaxException.class, "INSERT INTO %s (k, c) VALUES ('foo', 'CQL is cassandra\'s best friend')");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.boolean_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testBoolean() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k boolean PRIMARY KEY, b boolean)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, b) VALUES (true, false)");
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k = true"),
1:01115f7:                    row(true, false));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.float_with_exponent_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testFloatWithExponent() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, d double, f float)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, d, f) VALUES (0, 3E+10, 3.4E3)");
1:01115f7:         execute("INSERT INTO %s (k, d, f) VALUES (1, 3.E10, -23.44E-3)");
1:01115f7:         execute("INSERT INTO %s (k, d, f) VALUES (2, 3, -2)");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test regression from #5189,
1:01115f7:      * migrated from cql_tests.py:TestCQL.compact_metadata_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testCompactMetadata() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (id int primary key, i int ) WITH COMPACT STORAGE");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (id, i) VALUES (1, 2)");
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(1, 2));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.conversion_functions_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testConversionFunctions() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, i varint, b blob)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, i, b) VALUES (0, blobAsVarint(bigintAsBlob(3)), textAsBlob('foobar'))");
1:01115f7:         assertRows(execute("SELECT i, blobAsText(b) FROM %s WHERE k = 0"),
1:01115f7:                    row(BigInteger.valueOf(3), "foobar"));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.empty_blob_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testEmptyBlob() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, b blob)");
1:01115f7:         execute("INSERT INTO %s (k, b) VALUES (0, 0x)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(0, ByteBufferUtil.bytes("")));
1:01115f7:     }
1:01115f7: 
1:01115f7:     private Object[][] fill() throws Throwable
1:01115f7:     {
1:01115f7:         for (int i = 0; i < 2; i++)
1:01115f7:             for (int j = 0; j < 2; j++)
1:01115f7:                 execute("INSERT INTO %s (k1, k2, v) VALUES (?, ?, ?)", i, j, i + j);
1:01115f7: 
1:01115f7:         return getRows(execute("SELECT * FROM %s"));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.empty_in_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testEmpty() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY (k1, k2))");
1:01115f7: 
1:01115f7:         // Inserts a few rows to make sure we don 't actually query something
1:01115f7:         Object[][] rows = fill();
1:01115f7: 
1:01115f7:         // Test empty IN() in SELECT
1:01115f7:         assertEmpty(execute("SELECT v FROM %s WHERE k1 IN ()"));
1:01115f7:         assertEmpty(execute("SELECT v FROM %s WHERE k1 = 0 AND k2 IN ()"));
1:01115f7: 
1:01115f7:         // Test empty IN() in DELETE
1:01115f7:         execute("DELETE FROM %s WHERE k1 IN ()");
1:01115f7:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1:01115f7: 
1:01115f7:         // Test empty IN() in UPDATE
1:01115f7:         execute("UPDATE %s SET v = 3 WHERE k1 IN () AND k2 = 2");
1:01115f7:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1:01115f7: 
1:01115f7:         // Same test, but for compact
1:01115f7:         createTable("CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY (k1, k2)) WITH COMPACT STORAGE");
1:01115f7: 
1:01115f7:         rows = fill();
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT v FROM %s WHERE k1 IN ()"));
1:01115f7:         assertEmpty(execute("SELECT v FROM %s WHERE k1 = 0 AND k2 IN ()"));
1:01115f7: 
1:01115f7:         // Test empty IN() in DELETE
1:01115f7:         execute("DELETE FROM %s WHERE k1 IN ()");
1:01115f7:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1:01115f7: 
1:01115f7:         // Test empty IN() in UPDATE
1:01115f7:         execute("UPDATE %s SET v = 3 WHERE k1 IN () AND k2 = 2");
1:01115f7:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.function_with_null_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testFunctionWithNull() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t timeuuid,)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k) VALUES (0)");
1:01115f7:         Object[][] rows = getRows(execute("SELECT dateOf(t) FROM %s WHERE k=0"));
1:01115f7:         assertNull(rows[0][0]);
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.column_name_validation_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testColumnNameValidation() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k text, c int, v timeuuid, PRIMARY KEY (k, c))");
1:01115f7: 
1:01115f7:         assertInvalid("INSERT INTO %s (k, c) VALUES ('', 0)");
1:01115f7: 
1:01115f7:         // Insert a value that don't fit 'int'
1:01115f7:         assertInvalid("INSERT INTO %s (k, c) VALUES (0, 10000000000)");
1:01115f7: 
1:01115f7:         // Insert a non-version 1 uuid
1:01115f7:         assertInvalid("INSERT INTO %s (k, c, v) VALUES (0, 0, 550e8400-e29b-41d4-a716-446655440000)");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.nan_infinity_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testNanInfinityValues() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (f float PRIMARY KEY)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (f) VALUES (NaN)");
1:01115f7:         execute("INSERT INTO %s (f) VALUES (-NaN)");
1:01115f7:         execute("INSERT INTO %s (f) VALUES (Infinity)");
1:01115f7:         execute("INSERT INTO %s (f) VALUES (-Infinity)");
1:01115f7: 
1:01115f7:         Object[][] selected = getRows(execute("SELECT * FROM %s"));
1:01115f7: 
1:01115f7:         // selected should be[[nan],[inf],[-inf]],
1:01115f7:         // but assert element - wise because NaN!=NaN
1:01115f7:         assertEquals(3, selected.length);
1:01115f7:         assertEquals(1, selected[0].length);
1:01115f7:         assertTrue(Float.isNaN((Float) selected[0][0]));
1:01115f7: 
1:01115f7:         assertTrue(Float.isInfinite((Float) selected[1][0])); //inf
1:01115f7:         assertTrue(((Float) selected[1][0]) > 0);
1:01115f7: 
1:01115f7:         assertTrue(Float.isInfinite((Float) selected[2][0])); //-inf
1:01115f7:         assertTrue(((Float) selected[2][0]) < 0);
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.blobAs_functions_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testBlobAsFunction() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int)");
1:01115f7: 
1:01115f7:         //  A blob that is not 4 bytes should be rejected
1:01115f7:         assertInvalid("INSERT INTO %s (k, v) VALUES (0, blobAsInt(0x01))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, v) VALUES (0, blobAsInt(0x00000001))");
1:01115f7:         assertRows(execute("select v from %s where k=0"), row(1));
1:01115f7:     }
1:01115f7: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:9fc14bc
/////////////////////////////////////////////////////////////////////////
1:                     + "AND compaction = { 'class' : 'LeveledCompactionStrategy', 'sstable_size_in_mb' : 10, 'fanout_size' : 5 } "
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1:                     + "AND compression = { 'enabled': false } "
1:                     + "AND caching = { 'keys': 'ALL', 'rows_per_partition': 'ALL' }");
/////////////////////////////////////////////////////////////////////////
1:                 + "AND compression = { 'class' : 'SnappyCompressor' } "
1:                 + "AND caching = { 'rows_per_partition': 'ALL' }");
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.validation.miscellaneous;
1: 
1: import java.math.BigInteger;
1: 
1: import org.junit.Test;
1: 
0: import static junit.framework.Assert.assertFalse;
1: import static junit.framework.Assert.assertNull;
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.exceptions.SyntaxException;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * Any tests that do not fit in any other category,
1:  * migrated from python dtests, CASSANDRA-9160
1:  **/
1: public class OverflowTest extends CQLTester
1: {
1:     /**
1:      * Test support for nulls
1:      * migrated from cql_tests.py:TestCQL.null_support_test()
1:      */
1:     @Test
1:     public void testNullSupport() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, c int, v1 int, v2 set<text>, PRIMARY KEY (k, c))");
1: 
1:         execute("INSERT INTO %s (k, c, v1, v2) VALUES (0, 0, null, {'1', '2'})");
1:         execute("INSERT INTO %s (k, c, v1) VALUES (0, 1, 1)");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, 0, null, set("1", "2")),
1:                    row(0, 1, 1, null));
1: 
1:         execute("INSERT INTO %s (k, c, v1) VALUES (0, 1, null)");
1:         execute("INSERT INTO %s (k, c, v2) VALUES (0, 0, null)");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, 0, null, null),
1:                    row(0, 1, null, null));
1: 
1:         assertInvalid("INSERT INTO %s (k, c, v2) VALUES (0, 2, {1, null})");
1:         assertInvalid("SELECT * FROM %s WHERE k = null");
1:         assertInvalid("INSERT INTO %s (k, c, v2) VALUES (0, 0, { 'foo', 'bar', null })");
1:     }
1: 
1:     /**
1:      * Test reserved keywords
1:      * migrated from cql_tests.py:TestCQL.reserved_keyword_test()
1:      */
1:     @Test
1:     public void testReservedKeywords() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key text PRIMARY KEY, count counter)");
1: 
1:         String tableName = createTableName();
1:         assertInvalidThrow(SyntaxException.class, String.format("CREATE TABLE %s.%s (select text PRIMARY KEY, x int)", keyspace(), tableName));
1:     }
1: 
1:     /**
1:      * Test identifiers
1:      * migrated from cql_tests.py:TestCQL.identifier_test()
1:      */
1:     @Test
1:     public void testIdentifiers() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key_23 int PRIMARY KEY, CoLuMn int)");
1: 
1:         execute("INSERT INTO %s (Key_23, Column) VALUES (0, 0)");
1:         execute("INSERT INTO %s (KEY_23, COLUMN) VALUES (0, 0)");
1: 
1:         assertInvalid("INSERT INTO %s (key_23, column, column) VALUES (0, 0, 0)");
1:         assertInvalid("INSERT INTO %s (key_23, column, COLUMN) VALUES (0, 0, 0)");
1:         assertInvalid("INSERT INTO %s (key_23, key_23, column) VALUES (0, 0, 0)");
1:         assertInvalid("INSERT INTO %s (key_23, KEY_23, column) VALUES (0, 0, 0)");
1: 
1:         String tableName = createTableName();
1:         assertInvalidThrow(SyntaxException.class, String.format("CREATE TABLE %s.%s (select int PRIMARY KEY, column int)", keyspace(), tableName));
1:     }
1: 
1:     /**
1:      * Test table options
1:      * migrated from cql_tests.py:TestCQL.table_options_test()
1:      */
1:     @Test
1:     public void testTableOptions() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s ( k int PRIMARY KEY, c int ) WITH "
1:                     + "comment = 'My comment' "
1:                     + "AND read_repair_chance = 0.5 "
1:                     + "AND dclocal_read_repair_chance = 0.5 "
1:                     + "AND gc_grace_seconds = 4 "
1:                     + "AND bloom_filter_fp_chance = 0.01 "
0:                     + "AND compaction = { 'class' : 'LeveledCompactionStrategy', 'sstable_size_in_mb' : 10 } "
0:                     + "AND compression = { 'sstable_compression' : '' } "
0:                     + "AND caching = 'all' ");
1: 
1:         execute("ALTER TABLE %s WITH "
1:                 + "comment = 'other comment' "
1:                 + "AND read_repair_chance = 0.3 "
1:                 + "AND dclocal_read_repair_chance = 0.3 "
1:                 + "AND gc_grace_seconds = 100 "
1:                 + "AND bloom_filter_fp_chance = 0.1 "
1:                 + "AND compaction = { 'class': 'SizeTieredCompactionStrategy', 'min_sstable_size' : 42 } "
0:                 + "AND compression = { 'sstable_compression' : 'SnappyCompressor' } "
0:                 + "AND caching = 'rows_only' ");
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.unescaped_string_test()
1:      */
1:     @Test
1:     public void testUnescapedString() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s ( k text PRIMARY KEY, c text, )");
1: 
1:         //The \ in this query string is not forwarded to cassandra.
1:         //The ' is being escaped in python, but only ' is forwarded
1:         //over the wire instead of \'.
1:         assertInvalidThrow(SyntaxException.class, "INSERT INTO %s (k, c) VALUES ('foo', 'CQL is cassandra\'s best friend')");
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.boolean_test()
1:      */
1:     @Test
1:     public void testBoolean() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k boolean PRIMARY KEY, b boolean)");
1: 
1:         execute("INSERT INTO %s (k, b) VALUES (true, false)");
1:         assertRows(execute("SELECT * FROM %s WHERE k = true"),
1:                    row(true, false));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.float_with_exponent_test()
1:      */
1:     @Test
1:     public void testFloatWithExponent() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, d double, f float)");
1: 
1:         execute("INSERT INTO %s (k, d, f) VALUES (0, 3E+10, 3.4E3)");
1:         execute("INSERT INTO %s (k, d, f) VALUES (1, 3.E10, -23.44E-3)");
1:         execute("INSERT INTO %s (k, d, f) VALUES (2, 3, -2)");
1:     }
1: 
1:     /**
1:      * Test regression from #5189,
1:      * migrated from cql_tests.py:TestCQL.compact_metadata_test()
1:      */
1:     @Test
1:     public void testCompactMetadata() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (id int primary key, i int ) WITH COMPACT STORAGE");
1: 
1:         execute("INSERT INTO %s (id, i) VALUES (1, 2)");
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(1, 2));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.conversion_functions_test()
1:      */
1:     @Test
1:     public void testConversionFunctions() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, i varint, b blob)");
1: 
1:         execute("INSERT INTO %s (k, i, b) VALUES (0, blobAsVarint(bigintAsBlob(3)), textAsBlob('foobar'))");
1:         assertRows(execute("SELECT i, blobAsText(b) FROM %s WHERE k = 0"),
1:                    row(BigInteger.valueOf(3), "foobar"));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.empty_blob_test()
1:      */
1:     @Test
1:     public void testEmptyBlob() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, b blob)");
1:         execute("INSERT INTO %s (k, b) VALUES (0, 0x)");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, ByteBufferUtil.bytes("")));
1:     }
1: 
1:     private Object[][] fill() throws Throwable
1:     {
1:         for (int i = 0; i < 2; i++)
1:             for (int j = 0; j < 2; j++)
1:                 execute("INSERT INTO %s (k1, k2, v) VALUES (?, ?, ?)", i, j, i + j);
1: 
1:         return getRows(execute("SELECT * FROM %s"));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.empty_in_test()
1:      */
1:     @Test
1:     public void testEmpty() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY (k1, k2))");
1: 
1:         // Inserts a few rows to make sure we don 't actually query something
1:         Object[][] rows = fill();
1: 
1:         // Test empty IN() in SELECT
1:         assertEmpty(execute("SELECT v FROM %s WHERE k1 IN ()"));
1:         assertEmpty(execute("SELECT v FROM %s WHERE k1 = 0 AND k2 IN ()"));
1: 
1:         // Test empty IN() in DELETE
1:         execute("DELETE FROM %s WHERE k1 IN ()");
1:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1: 
1:         // Test empty IN() in UPDATE
1:         execute("UPDATE %s SET v = 3 WHERE k1 IN () AND k2 = 2");
1:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1: 
1:         // Same test, but for compact
1:         createTable("CREATE TABLE %s (k1 int, k2 int, v int, PRIMARY KEY (k1, k2)) WITH COMPACT STORAGE");
1: 
1:         rows = fill();
1: 
1:         assertEmpty(execute("SELECT v FROM %s WHERE k1 IN ()"));
1:         assertEmpty(execute("SELECT v FROM %s WHERE k1 = 0 AND k2 IN ()"));
1: 
1:         // Test empty IN() in DELETE
1:         execute("DELETE FROM %s WHERE k1 IN ()");
1:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1: 
1:         // Test empty IN() in UPDATE
1:         execute("UPDATE %s SET v = 3 WHERE k1 IN () AND k2 = 2");
1:         assertArrayEquals(rows, getRows(execute("SELECT * FROM %s")));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.function_with_null_test()
1:      */
1:     @Test
1:     public void testFunctionWithNull() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t timeuuid,)");
1: 
1:         execute("INSERT INTO %s (k) VALUES (0)");
1:         Object[][] rows = getRows(execute("SELECT dateOf(t) FROM %s WHERE k=0"));
1:         assertNull(rows[0][0]);
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.column_name_validation_test()
1:      */
1:     @Test
1:     public void testColumnNameValidation() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k text, c int, v timeuuid, PRIMARY KEY (k, c))");
1: 
1:         assertInvalid("INSERT INTO %s (k, c) VALUES ('', 0)");
1: 
1:         // Insert a value that don't fit 'int'
1:         assertInvalid("INSERT INTO %s (k, c) VALUES (0, 10000000000)");
1: 
1:         // Insert a non-version 1 uuid
1:         assertInvalid("INSERT INTO %s (k, c, v) VALUES (0, 0, 550e8400-e29b-41d4-a716-446655440000)");
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.nan_infinity_test()
1:      */
1:     @Test
1:     public void testNanInfinityValues() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (f float PRIMARY KEY)");
1: 
1:         execute("INSERT INTO %s (f) VALUES (NaN)");
1:         execute("INSERT INTO %s (f) VALUES (-NaN)");
1:         execute("INSERT INTO %s (f) VALUES (Infinity)");
1:         execute("INSERT INTO %s (f) VALUES (-Infinity)");
1: 
1:         Object[][] selected = getRows(execute("SELECT * FROM %s"));
1: 
1:         // selected should be[[nan],[inf],[-inf]],
1:         // but assert element - wise because NaN!=NaN
1:         assertEquals(3, selected.length);
1:         assertEquals(1, selected[0].length);
1:         assertTrue(Float.isNaN((Float) selected[0][0]));
1: 
1:         assertTrue(Float.isInfinite((Float) selected[1][0])); //inf
1:         assertTrue(((Float) selected[1][0]) > 0);
1: 
1:         assertTrue(Float.isInfinite((Float) selected[2][0])); //-inf
1:         assertTrue(((Float) selected[2][0]) < 0);
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.blobAs_functions_test()
1:      */
1:     @Test
1:     public void testBlobAsFunction() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int)");
1: 
1:         //  A blob that is not 4 bytes should be rejected
1:         assertInvalid("INSERT INTO %s (k, v) VALUES (0, blobAsInt(0x01))");
1: 
1:         execute("INSERT INTO %s (k, v) VALUES (0, blobAsInt(0x00000001))");
1:         assertRows(execute("select v from %s where k=0"), row(1));
1:     }
1: }
============================================================================