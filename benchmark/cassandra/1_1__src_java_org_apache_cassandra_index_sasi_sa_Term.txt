1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.sa;
1:72790dc: 
1:72790dc: import java.nio.Buffer;
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.disk.TokenTreeBuilder;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public abstract class Term<T extends Buffer>
1:72790dc: {
1:72790dc:     protected final int position;
1:72790dc:     protected final T value;
1:72790dc:     protected TokenTreeBuilder tokens;
1:72790dc: 
1:72790dc: 
1:72790dc:     public Term(int position, T value, TokenTreeBuilder tokens)
1:72790dc:     {
1:72790dc:         this.position = position;
1:72790dc:         this.value = value;
1:72790dc:         this.tokens = tokens;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int getPosition()
1:72790dc:     {
1:72790dc:         return position;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public abstract ByteBuffer getTerm();
1:72790dc:     public abstract ByteBuffer getSuffix(int start);
1:72790dc: 
1:72790dc:     public TokenTreeBuilder getTokens()
1:72790dc:     {
1:72790dc:         return tokens;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public abstract int compareTo(AbstractType<?> comparator, Term other);
1:72790dc: 
1:72790dc:     public abstract int length();
1:72790dc: 
1:72790dc: }
1:72790dc: 
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.sa;
1: 
1: import java.nio.Buffer;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.index.sasi.disk.TokenTreeBuilder;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: public abstract class Term<T extends Buffer>
1: {
1:     protected final int position;
1:     protected final T value;
1:     protected TokenTreeBuilder tokens;
1: 
1: 
1:     public Term(int position, T value, TokenTreeBuilder tokens)
1:     {
1:         this.position = position;
1:         this.value = value;
1:         this.tokens = tokens;
1:     }
1: 
1:     public int getPosition()
1:     {
1:         return position;
1:     }
1: 
1:     public abstract ByteBuffer getTerm();
1:     public abstract ByteBuffer getSuffix(int start);
1: 
1:     public TokenTreeBuilder getTokens()
1:     {
1:         return tokens;
1:     }
1: 
1:     public abstract int compareTo(AbstractType<?> comparator, Term other);
1: 
1:     public abstract int length();
1: 
1: }
1: 
============================================================================