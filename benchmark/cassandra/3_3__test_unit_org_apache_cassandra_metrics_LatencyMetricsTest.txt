1:05b0882: /*
1:05b0882:  * Licensed to the Apache Software Foundation (ASF) under one
1:05b0882:  * or more contributor license agreements.  See the NOTICE file
1:05b0882:  * distributed with this work for additional information
1:05b0882:  * regarding copyright ownership.  The ASF licenses this file
1:05b0882:  * to you under the Apache License, Version 2.0 (the
1:05b0882:  * "License"); you may not use this file except in compliance
1:05b0882:  * with the License.  You may obtain a copy of the License at
1:05b0882:  *
1:05b0882:  *     http://www.apache.org/licenses/LICENSE-2.0
1:05b0882:  *
1:05b0882:  * Unless required by applicable law or agreed to in writing, software
1:05b0882:  * distributed under the License is distributed on an "AS IS" BASIS,
1:05b0882:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:05b0882:  * See the License for the specific language governing permissions and
1:05b0882:  * limitations under the License.
1:05b0882:  */
1:a991b64: 
1:05b0882: package org.apache.cassandra.metrics;
1:05b0882: 
1:05b0882: import org.junit.Test;
1:a991b64: 
1:05b0882: import static junit.framework.Assert.assertFalse;
1:05b0882: 
1:05b0882: public class LatencyMetricsTest
1:05b0882: {
1:05b0882:     /**
1:05b0882:      * Test bitsets in a "real-world" environment, i.e., bloom filters
1:05b0882:      */
1:05b0882:     @Test
1:05b0882:     public void testGetRecentLatency()
1:05b0882:     {
1:05b0882:         final LatencyMetrics l = new LatencyMetrics("test", "test");
1:05b0882:         Runnable r = new Runnable()
1:05b0882:         {
1:05b0882:             public void run()
1:05b0882:             {
1:05b0882:                 for (int i = 0; i < 10000; i++)
1:05b0882:                 {
1:05b0882:                     l.addNano(1000);
1:05b0882:                 }
1:05b0882:             }
1:05b0882:         };
1:05b0882:         new Thread(r).start();
1:05b0882: 
1:05b0882:         for (int i = 0; i < 10000; i++)
1:05b0882:         {
1:8896a70:             Double recent = l.latency.getOneMinuteRate();
1:05b0882:             assertFalse(recent.equals(Double.POSITIVE_INFINITY));
1:05b0882:         }
1:05b0882:     }
1:05b0882: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1:             Double recent = l.latency.getOneMinuteRate();
author:Brandon Williams
-------------------------------------------------------------------------------
commit:05b0882
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import org.junit.Test;
1: import static junit.framework.Assert.assertFalse;
1: 
1: public class LatencyMetricsTest
1: {
1:     /**
1:      * Test bitsets in a "real-world" environment, i.e., bloom filters
1:      */
1:     @Test
1:     public void testGetRecentLatency()
1:     {
1:         final LatencyMetrics l = new LatencyMetrics("test", "test");
1:         Runnable r = new Runnable()
1:         {
1:             public void run()
1:             {
1:                 for (int i = 0; i < 10000; i++)
1:                 {
1:                     l.addNano(1000);
1:                 }
1:             }
1:         };
1:         new Thread(r).start();
1: 
1:         for (int i = 0; i < 10000; i++)
1:         {
0:             Double recent = l.getRecentLatency();
1:             assertFalse(recent.equals(Double.POSITIVE_INFINITY));
1:         }
1:     }
1: }
============================================================================