1:457b546: /*
1:457b546:  * Licensed to the Apache Software Foundation (ASF) under one
1:457b546:  * or more contributor license agreements.  See the NOTICE file
1:457b546:  * distributed with this work for additional information
1:457b546:  * regarding copyright ownership.  The ASF licenses this file
1:457b546:  * to you under the Apache License, Version 2.0 (the
1:457b546:  * "License"); you may not use this file except in compliance
1:457b546:  * with the License.  You may obtain a copy of the License at
1:457b546:  *
1:457b546:  *     http://www.apache.org/licenses/LICENSE-2.0
1:457b546:  *
1:457b546:  * Unless required by applicable law or agreed to in writing, software
1:457b546:  * distributed under the License is distributed on an "AS IS" BASIS,
1:457b546:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:457b546:  * See the License for the specific language governing permissions and
1:457b546:  * limitations under the License.
1:457b546:  */
1:457b546: package org.apache.cassandra.io.util;
1:457b546: 
1:457b546: import java.io.FilterInputStream;
1:457b546: import java.io.IOException;
1:457b546: import java.io.InputStream;
1:457b546: 
1:457b546: /**
1:457b546:  * a FilterInputStream that returns the remaining bytes to read from available()
1:457b546:  * regardless of whether the device is ready to provide them.
1:457b546:  */
1:457b546: public class LengthAvailableInputStream extends FilterInputStream
1:457b546: {
1:457b546:     private long remainingBytes;
1:457b546: 
1:457b546:     public LengthAvailableInputStream(InputStream in, long totalLength)
1:457b546:     {
1:457b546:         super(in);
1:457b546:         remainingBytes = totalLength;
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public int read() throws IOException
1:457b546:     {
1:457b546:         int b = in.read();
1:457b546:         --remainingBytes;
1:457b546:         return b;
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public int read(byte[] b) throws IOException
1:457b546:     {
1:457b546:         int length = in.read(b);
1:457b546:         remainingBytes -= length;
1:457b546:         return length;
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public int read(byte[] b, int off, int len) throws IOException
1:457b546:     {
1:457b546:         int length = in.read(b, off, len);
1:457b546:         remainingBytes -= length;
1:457b546:         return length;
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public long skip(long n) throws IOException
1:457b546:     {
1:457b546:         long length = in.skip(n);
1:457b546:         remainingBytes -= length;
1:457b546:         return length;
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public int available() throws IOException
1:457b546:     {
1:457b546:         return (remainingBytes <= 0) ? 0 : ((remainingBytes > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)remainingBytes);
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public void close() throws IOException
1:457b546:     {
1:457b546:         in.close();
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public synchronized void mark(int readlimit)
1:457b546:     {
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public synchronized void reset() throws IOException
1:457b546:     {
1:457b546:         throw new IOException("Mark/Reset not supported");
1:457b546:     }
1:457b546: 
1:457b546:     @Override
1:457b546:     public boolean markSupported()
1:457b546:     {
1:457b546:         return false;
1:457b546:     }
1:457b546: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:457b546
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.FilterInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: /**
1:  * a FilterInputStream that returns the remaining bytes to read from available()
1:  * regardless of whether the device is ready to provide them.
1:  */
1: public class LengthAvailableInputStream extends FilterInputStream
1: {
1:     private long remainingBytes;
1: 
1:     public LengthAvailableInputStream(InputStream in, long totalLength)
1:     {
1:         super(in);
1:         remainingBytes = totalLength;
1:     }
1: 
1:     @Override
1:     public int read() throws IOException
1:     {
1:         int b = in.read();
1:         --remainingBytes;
1:         return b;
1:     }
1: 
1:     @Override
1:     public int read(byte[] b) throws IOException
1:     {
1:         int length = in.read(b);
1:         remainingBytes -= length;
1:         return length;
1:     }
1: 
1:     @Override
1:     public int read(byte[] b, int off, int len) throws IOException
1:     {
1:         int length = in.read(b, off, len);
1:         remainingBytes -= length;
1:         return length;
1:     }
1: 
1:     @Override
1:     public long skip(long n) throws IOException
1:     {
1:         long length = in.skip(n);
1:         remainingBytes -= length;
1:         return length;
1:     }
1: 
1:     @Override
1:     public int available() throws IOException
1:     {
1:         return (remainingBytes <= 0) ? 0 : ((remainingBytes > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)remainingBytes);
1:     }
1: 
1:     @Override
1:     public void close() throws IOException
1:     {
1:         in.close();
1:     }
1: 
1:     @Override
1:     public synchronized void mark(int readlimit)
1:     {
1:     }
1: 
1:     @Override
1:     public synchronized void reset() throws IOException
1:     {
1:         throw new IOException("Mark/Reset not supported");
1:     }
1: 
1:     @Override
1:     public boolean markSupported()
1:     {
1:         return false;
1:     }
1: }
commit:1d641f5
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.io.util;
0: 
0: import java.io.FilterInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: 
0: /**
0:  * a FilterInputStream that returns the remaining bytes to read from available()
0:  * regardless of whether the device is ready to provide them.
0:  */
0: public class LengthAvailableInputStream extends FilterInputStream
0: {
0:     private long remainingBytes;
0: 
0:     public LengthAvailableInputStream(InputStream in, long totalLength)
0:     {
0:         super(in);
0:         remainingBytes = totalLength;
0:     }
0: 
0:     @Override
0:     public int read() throws IOException
0:     {
0:         int b = in.read();
0:         --remainingBytes;
0:         return b;
0:     }
0: 
0:     @Override
0:     public int read(byte[] b) throws IOException
0:     {
0:         int length = in.read(b);
0:         remainingBytes -= length;
0:         return length;
0:     }
0: 
0:     @Override
0:     public int read(byte[] b, int off, int len) throws IOException
0:     {
0:         int length = in.read(b, off, len);
0:         remainingBytes -= length;
0:         return length;
0:     }
0: 
0:     @Override
0:     public long skip(long n) throws IOException
0:     {
0:         long length = in.skip(n);
0:         remainingBytes -= length;
0:         return length;
0:     }
0: 
0:     @Override
0:     public int available() throws IOException
0:     {
0:         return (remainingBytes <= 0) ? 0 : ((remainingBytes > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)remainingBytes);
0:     }
0: 
0:     @Override
0:     public void close() throws IOException
0:     {
0:         in.close();
0:     }
0: 
0:     @Override
0:     public synchronized void mark(int readlimit)
0:     {
0:     }
0: 
0:     @Override
0:     public synchronized void reset() throws IOException
0:     {
0:         throw new IOException("Mark/Reset not supported");
0:     }
0: 
0:     @Override
0:     public boolean markSupported()
0:     {
0:         return false;
0:     }
0: }
============================================================================