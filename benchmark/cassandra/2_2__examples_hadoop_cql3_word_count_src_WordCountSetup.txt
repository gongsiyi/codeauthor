1:90052d5: /**
1:90052d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:90052d5:  * or more contributor license agreements.  See the NOTICE file
1:90052d5:  * distributed with this work for additional information
1:90052d5:  * regarding copyright ownership.  The ASF licenses this file
1:90052d5:  * to you under the Apache License, Version 2.0 (the
1:90052d5:  * "License"); you may not use this file except in compliance
1:90052d5:  * with the License.  You may obtain a copy of the License at
1:90052d5:  *
1:90052d5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:90052d5:  *
1:90052d5:  * Unless required by applicable law or agreed to in writing, software
1:90052d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90052d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90052d5:  * See the License for the specific language governing permissions and
1:90052d5:  * limitations under the License.
1:90052d5:  */
3:90052d5: 
1:90052d5: import java.nio.ByteBuffer;
1:90052d5: import java.util.*;
1:90052d5: 
1:90052d5: import org.apache.cassandra.thrift.*;
1:90052d5: import org.apache.cassandra.utils.ByteBufferUtil;
1:90052d5: import org.apache.thrift.TException;
1:90052d5: import org.apache.thrift.protocol.TBinaryProtocol;
1:90052d5: import org.apache.thrift.protocol.TProtocol;
1:90052d5: import org.apache.thrift.transport.TFramedTransport;
1:90052d5: import org.apache.thrift.transport.TSocket;
1:90052d5: import org.apache.thrift.transport.TTransport;
1:90052d5: import org.apache.thrift.transport.TTransportException;
1:90052d5: 
1:90052d5: import org.slf4j.Logger;
1:90052d5: import org.slf4j.LoggerFactory;
1:90052d5: 
1:90052d5: public class WordCountSetup
4:90052d5: {
1:90052d5:     private static final Logger logger = LoggerFactory.getLogger(WordCountSetup.class);
1:90052d5: 
1:90052d5:     public static final int TEST_COUNT = 6;
1:90052d5: 
1:90052d5:     public static void main(String[] args) throws Exception
1:90052d5:     {
1:90052d5:         Cassandra.Iface client = createConnection();
1:90052d5: 
1:90052d5:         setupKeyspace(client);
1:90052d5:         client.set_keyspace(WordCount.KEYSPACE);
1:90052d5:         setupTable(client);
1:90052d5:         insertData(client);
1:90052d5: 
1:90052d5:         System.exit(0);
5:90052d5:     }
1:90052d5: 
1:90052d5:     private static void setupKeyspace(Cassandra.Iface client)  
1:90052d5:             throws InvalidRequestException, 
1:90052d5:             UnavailableException, 
1:90052d5:             TimedOutException, 
1:90052d5:             SchemaDisagreementException, 
1:90052d5:             TException
1:90052d5:     {
1:90052d5:         KsDef ks;
2:90052d5:         try
1:90052d5:         {
1:90052d5:             ks = client.describe_keyspace(WordCount.KEYSPACE);
1:90052d5:         }
1:90052d5:         catch(NotFoundException e)
1:90052d5:         {
1:90052d5:             logger.info("set up keyspace " + WordCount.KEYSPACE);
1:90052d5:             String query = "CREATE KEYSPACE " + WordCount.KEYSPACE +
1:90052d5:                               " WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 1}"; 
1:90052d5: 
2:90052d5:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
1:90052d5: 
1:8fd8832:             String verifyQuery = "select count(*) from system.peers";
1:8fd8832:             CqlResult result = client.execute_cql3_query(ByteBufferUtil.bytes(verifyQuery), Compression.NONE, ConsistencyLevel.ONE);
1:8fd8832: 
1:8fd8832:             long magnitude = ByteBufferUtil.toLong(result.rows.get(0).columns.get(0).value);
1:90052d5:             try
1:90052d5:             {
1:90052d5:                 Thread.sleep(1000 * magnitude);
1:90052d5:             }
1:90052d5:             catch (InterruptedException ie)
1:90052d5:             {
1:90052d5:                 throw new RuntimeException(ie);
1:90052d5:             }
1:90052d5:         }
1:90052d5:     }
1:90052d5: 
1:90052d5:     private static void setupTable(Cassandra.Iface client)  
1:90052d5:             throws InvalidRequestException, 
1:90052d5:             UnavailableException, 
1:90052d5:             TimedOutException, 
1:90052d5:             SchemaDisagreementException, 
1:90052d5:             TException
1:90052d5:     {
1:90052d5:         String query = "CREATE TABLE " + WordCount.KEYSPACE + "."  + WordCount.COLUMN_FAMILY + 
1:b4f2ff1:                           " ( id uuid," +
1:b4f2ff1:                           "   line text, " +
1:b4f2ff1:                           "   PRIMARY KEY (id) ) ";
1:90052d5: 
1:90052d5:         try
1:90052d5:         {
1:90052d5:             logger.info("set up table " + WordCount.COLUMN_FAMILY);
1:90052d5:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
1:90052d5:         }
2:90052d5:         catch (InvalidRequestException e)
1:90052d5:         {
1:90052d5:             logger.error("failed to create table " + WordCount.KEYSPACE + "."  + WordCount.COLUMN_FAMILY, e);
1:90052d5:         }
1:90052d5: 
1:90052d5:         query = "CREATE TABLE " + WordCount.KEYSPACE + "."  + WordCount.OUTPUT_COLUMN_FAMILY + 
1:b4f2ff1:                 " ( word text," +
1:90052d5:                 "   count_num text," +
1:b4f2ff1:                 "   PRIMARY KEY (word) ) ";
1:90052d5: 
1:90052d5:         try
1:90052d5:         {
1:90052d5:             logger.info("set up table " + WordCount.OUTPUT_COLUMN_FAMILY);
1:90052d5:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
1:90052d5:         }
1:90052d5:         catch (InvalidRequestException e)
1:90052d5:         {
1:90052d5:             logger.error("failed to create table " + WordCount.KEYSPACE + "."  + WordCount.OUTPUT_COLUMN_FAMILY, e);
1:90052d5:         }
1:90052d5:     }
1:90052d5:     
1:90052d5:     private static Cassandra.Iface createConnection() throws TTransportException
1:90052d5:     {
1:90052d5:         if (System.getProperty("cassandra.host") == null || System.getProperty("cassandra.port") == null)
1:90052d5:         {
1:90052d5:             logger.warn("cassandra.host or cassandra.port is not defined, using default");
1:90052d5:         }
1:90052d5:         return createConnection(System.getProperty("cassandra.host", "localhost"),
1:90052d5:                                 Integer.valueOf(System.getProperty("cassandra.port", "9160")));
1:90052d5:     }
1:90052d5: 
1:90052d5:     private static Cassandra.Client createConnection(String host, Integer port) throws TTransportException
1:90052d5:     {
1:90052d5:         TSocket socket = new TSocket(host, port);
1:90052d5:         TTransport trans = new TFramedTransport(socket);
1:90052d5:         trans.open();
1:90052d5:         TProtocol protocol = new TBinaryProtocol(trans);
1:90052d5: 
1:90052d5:         return new Cassandra.Client(protocol);
1:90052d5:     }
1:90052d5: 
1:90052d5:     private static void insertData(Cassandra.Iface client) 
1:90052d5:             throws InvalidRequestException, 
1:90052d5:             UnavailableException, 
1:90052d5:             TimedOutException, 
1:90052d5:             SchemaDisagreementException, 
1:90052d5:             TException
1:90052d5:     {
1:90052d5:         String query = "INSERT INTO " + WordCount.COLUMN_FAMILY +  
1:b4f2ff1:                            "(id, line) " +
1:b4f2ff1:                            " values (?, ?) ";
1:90052d5:         CqlPreparedResult result = client.prepare_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE);
1:90052d5: 
1:90052d5:         String [] body = bodyData();
1:b4f2ff1:         for (int i = 0; i < 5; i++)
1:90052d5:         {         
1:b4f2ff1:             for (int j = 1; j <= 200; j++)
1:90052d5:             {
1:90052d5:                     List<ByteBuffer> values = new ArrayList<ByteBuffer>();
1:b4f2ff1:                     values.add(ByteBufferUtil.bytes(UUID.randomUUID()));
1:90052d5:                     values.add(ByteBufferUtil.bytes(body[i]));
1:90052d5:                     client.execute_prepared_cql3_query(result.itemId, values, ConsistencyLevel.ONE);
1:90052d5:             }
1:90052d5:         } 
1:90052d5:     }
1:90052d5: 
1:90052d5:     private static String[] bodyData()
2:90052d5:     {   // Public domain context, source http://en.wikisource.org/wiki/If%E2%80%94
2:90052d5:         return new String[]{
1:90052d5:                 "If you can keep your head when all about you",
1:90052d5:                 "Are losing theirs and blaming it on you",
1:90052d5:                 "If you can trust yourself when all men doubt you,",
1:90052d5:                 "But make allowance for their doubting too:",
1:90052d5:                 "If you can wait and not be tired by waiting,"
2:90052d5:         };
1:90052d5:     }
1:90052d5: }
============================================================================
author:Brandon Williams
-------------------------------------------------------------------------------
commit:8fd8832
/////////////////////////////////////////////////////////////////////////
1:             String verifyQuery = "select count(*) from system.peers";
1:             CqlResult result = client.execute_cql3_query(ByteBufferUtil.bytes(verifyQuery), Compression.NONE, ConsistencyLevel.ONE);
1: 
1:             long magnitude = ByteBufferUtil.toLong(result.rows.get(0).columns.get(0).value);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b4f2ff1
/////////////////////////////////////////////////////////////////////////
1:                           " ( id uuid," +
1:                           "   line text, " +
1:                           "   PRIMARY KEY (id) ) ";
/////////////////////////////////////////////////////////////////////////
1:                 " ( word text," +
1:                 "   PRIMARY KEY (word) ) ";
/////////////////////////////////////////////////////////////////////////
1:                            "(id, line) " +
1:                            " values (?, ?) ";
1:         for (int i = 0; i < 5; i++)
1:             for (int j = 1; j <= 200; j++)
1:                     values.add(ByteBufferUtil.bytes(UUID.randomUUID()));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:90052d5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.thrift.*;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.thrift.TException;
1: import org.apache.thrift.protocol.TBinaryProtocol;
1: import org.apache.thrift.protocol.TProtocol;
1: import org.apache.thrift.transport.TFramedTransport;
1: import org.apache.thrift.transport.TSocket;
1: import org.apache.thrift.transport.TTransport;
1: import org.apache.thrift.transport.TTransportException;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class WordCountSetup
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(WordCountSetup.class);
1: 
1:     public static final int TEST_COUNT = 6;
1: 
1:     public static void main(String[] args) throws Exception
1:     {
1:         Cassandra.Iface client = createConnection();
1: 
1:         setupKeyspace(client);
1:         client.set_keyspace(WordCount.KEYSPACE);
1:         setupTable(client);
1:         insertData(client);
1: 
1:         System.exit(0);
1:     }
1: 
1:     private static void setupKeyspace(Cassandra.Iface client)  
1:             throws InvalidRequestException, 
1:             UnavailableException, 
1:             TimedOutException, 
1:             SchemaDisagreementException, 
1:             TException
1:     {
1:         KsDef ks;
1:         try
1:         {
1:             ks = client.describe_keyspace(WordCount.KEYSPACE);
1:         }
1:         catch(NotFoundException e)
1:         {
1:             logger.info("set up keyspace " + WordCount.KEYSPACE);
1:             String query = "CREATE KEYSPACE " + WordCount.KEYSPACE +
1:                               " WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 1}"; 
1: 
1:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
1: 
0:             int magnitude = client.describe_ring(WordCount.KEYSPACE).size();
1:             try
1:             {
1:                 Thread.sleep(1000 * magnitude);
1:             }
1:             catch (InterruptedException ie)
1:             {
1:                 throw new RuntimeException(ie);
1:             }
1:         }
1:     }
1: 
1:     private static void setupTable(Cassandra.Iface client)  
1:             throws InvalidRequestException, 
1:             UnavailableException, 
1:             TimedOutException, 
1:             SchemaDisagreementException, 
1:             TException
1:     {
1:         String query = "CREATE TABLE " + WordCount.KEYSPACE + "."  + WordCount.COLUMN_FAMILY + 
0:                           " ( user_id text," +
0:                           "   category_id text, " +
0:                           "   sub_category_id text," +
0:                           "   title  text," +
0:                           "   body  text," +
0:                           "   PRIMARY KEY (user_id, category_id, sub_category_id) ) ";
1: 
1:         try
1:         {
1:             logger.info("set up table " + WordCount.COLUMN_FAMILY);
1:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
1:         }
1:         catch (InvalidRequestException e)
1:         {
1:             logger.error("failed to create table " + WordCount.KEYSPACE + "."  + WordCount.COLUMN_FAMILY, e);
1:         }
1: 
0:         query = "CREATE INDEX title on " + WordCount.COLUMN_FAMILY + "(title)";
1:         try
1:         {
0:             logger.info("set up index on title column ");
1:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
1:         }
1:         catch (InvalidRequestException e)
1:         {
0:             logger.error("Failed to create index on title", e);
1:         }
1: 
1:         query = "CREATE TABLE " + WordCount.KEYSPACE + "."  + WordCount.OUTPUT_COLUMN_FAMILY + 
0:                 " ( row_id text," +
0:                 "   word text, " +
1:                 "   count_num text," +
0:                 "   PRIMARY KEY (row_id, word) ) ";
1: 
1:         try
1:         {
1:             logger.info("set up table " + WordCount.OUTPUT_COLUMN_FAMILY);
1:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
1:         }
1:         catch (InvalidRequestException e)
1:         {
1:             logger.error("failed to create table " + WordCount.KEYSPACE + "."  + WordCount.OUTPUT_COLUMN_FAMILY, e);
1:         }
1:     }
1:     
1:     private static Cassandra.Iface createConnection() throws TTransportException
1:     {
1:         if (System.getProperty("cassandra.host") == null || System.getProperty("cassandra.port") == null)
1:         {
1:             logger.warn("cassandra.host or cassandra.port is not defined, using default");
1:         }
1:         return createConnection(System.getProperty("cassandra.host", "localhost"),
1:                                 Integer.valueOf(System.getProperty("cassandra.port", "9160")));
1:     }
1: 
1:     private static Cassandra.Client createConnection(String host, Integer port) throws TTransportException
1:     {
1:         TSocket socket = new TSocket(host, port);
1:         TTransport trans = new TFramedTransport(socket);
1:         trans.open();
1:         TProtocol protocol = new TBinaryProtocol(trans);
1: 
1:         return new Cassandra.Client(protocol);
1:     }
1: 
1:     private static void insertData(Cassandra.Iface client) 
1:             throws InvalidRequestException, 
1:             UnavailableException, 
1:             TimedOutException, 
1:             SchemaDisagreementException, 
1:             TException
1:     {
1:         String query = "INSERT INTO " + WordCount.COLUMN_FAMILY +  
0:                            "(user_id, category_id, sub_category_id, title, body ) " +
0:                            " values (?, ?, ?, ?, ?) ";
1:         CqlPreparedResult result = client.prepare_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE);
1: 
0:         String [] title = titleData();
1:         String [] body = bodyData();
0:         for (int i=1; i<5; i++)
1:         {         
0:             for (int j=1; j<444; j++) 
1:             {
0:                 for (int k=1; k<4; k++)
1:                 {
1:                     List<ByteBuffer> values = new ArrayList<ByteBuffer>();
0:                     values.add(ByteBufferUtil.bytes(String.valueOf(j)));
0:                     values.add(ByteBufferUtil.bytes(String.valueOf(i)));
0:                     values.add(ByteBufferUtil.bytes(String.valueOf(k)));
0:                     values.add(ByteBufferUtil.bytes(title[i]));
1:                     values.add(ByteBufferUtil.bytes(body[i]));
1:                     client.execute_prepared_cql3_query(result.itemId, values, ConsistencyLevel.ONE);
1:                 }
1:             }
1:         } 
1:     }
1: 
1:     private static String[] bodyData()
1:     {   // Public domain context, source http://en.wikisource.org/wiki/If%E2%80%94
1:         return new String[]{
0:                 "",
1:                 "If you can keep your head when all about you",
1:                 "Are losing theirs and blaming it on you",
1:                 "If you can trust yourself when all men doubt you,",
1:                 "But make allowance for their doubting too:",
1:                 "If you can wait and not be tired by waiting,"
1:         };
1:     }
1: 
0:     private static String[] titleData()
1:     {   // Public domain context, source http://en.wikisource.org/wiki/If%E2%80%94
1:         return new String[]{
0:                 "",
0:                 "A",
0:                 "B",
0:                 "C",
0:                 "D",
0:                 "E"            
1:         };
1:     }
1: }
commit:56e0ad1
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: import java.nio.ByteBuffer;
0: import java.util.*;
0: 
0: import org.apache.cassandra.thrift.*;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.thrift.TException;
0: import org.apache.thrift.protocol.TBinaryProtocol;
0: import org.apache.thrift.protocol.TProtocol;
0: import org.apache.thrift.transport.TFramedTransport;
0: import org.apache.thrift.transport.TSocket;
0: import org.apache.thrift.transport.TTransport;
0: import org.apache.thrift.transport.TTransportException;
0: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: public class WordCountSetup
0: {
0:     private static final Logger logger = LoggerFactory.getLogger(WordCountSetup.class);
0: 
0:     public static final int TEST_COUNT = 6;
0: 
0:     public static void main(String[] args) throws Exception
0:     {
0:         Cassandra.Iface client = createConnection();
0: 
0:         setupKeyspace(client);
0:         client.set_keyspace(WordCount.KEYSPACE);
0:         setupTable(client);
0:         insertData(client);
0: 
0:         System.exit(0);
0:     }
0: 
0:     private static void setupKeyspace(Cassandra.Iface client)  
0:             throws InvalidRequestException, 
0:             UnavailableException, 
0:             TimedOutException, 
0:             SchemaDisagreementException, 
0:             TException
0:     {
0:         KsDef ks;
0:         try
0:         {
0:             ks = client.describe_keyspace(WordCount.KEYSPACE);
0:         }
0:         catch(NotFoundException e)
0:         {
0:             logger.info("set up keyspace " + WordCount.KEYSPACE);
0:             String query = "CREATE KEYSPACE " + WordCount.KEYSPACE +
0:                               " WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 1}"; 
0: 
0:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
0: 
0:             int magnitude = client.describe_ring(WordCount.KEYSPACE).size();
0:             try
0:             {
0:                 Thread.sleep(1000 * magnitude);
0:             }
0:             catch (InterruptedException ie)
0:             {
0:                 throw new RuntimeException(ie);
0:             }
0:         }
0:     }
0: 
0:     private static void setupTable(Cassandra.Iface client)  
0:             throws InvalidRequestException, 
0:             UnavailableException, 
0:             TimedOutException, 
0:             SchemaDisagreementException, 
0:             TException
0:     {
0:         String query = "CREATE TABLE " + WordCount.KEYSPACE + "."  + WordCount.COLUMN_FAMILY + 
0:                           " ( user_id text," +
0:                           "   category_id text, " +
0:                           "   sub_category_id text," +
0:                           "   title  text," +
0:                           "   body  text," +
0:                           "   PRIMARY KEY (user_id, category_id, sub_category_id) ) ";
0: 
0:         try
0:         {
0:             logger.info("set up table " + WordCount.COLUMN_FAMILY);
0:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
0:         }
0:         catch (InvalidRequestException e)
0:         {
0:             logger.error("failed to create table " + WordCount.KEYSPACE + "."  + WordCount.COLUMN_FAMILY, e);
0:         }
0: 
0:         query = "CREATE INDEX title on " + WordCount.COLUMN_FAMILY + "(title)";
0:         try
0:         {
0:             logger.info("set up index on title column ");
0:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
0:         }
0:         catch (InvalidRequestException e)
0:         {
0:             logger.error("Failed to create index on title", e);
0:         }
0: 
0:         query = "CREATE TABLE " + WordCount.KEYSPACE + "."  + WordCount.OUTPUT_COLUMN_FAMILY + 
0:                 " ( row_id1 text, " +
0:                 "   row_id2 text, " +
0:                 "   word text, " +
0:                 "   count_num text," +
0:                 "   PRIMARY KEY ((row_id1, row_id2), word) ) ";
0: 
0:         try
0:         {
0:             logger.info("set up table " + WordCount.OUTPUT_COLUMN_FAMILY);
0:             client.execute_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE, ConsistencyLevel.ONE);
0:         }
0:         catch (InvalidRequestException e)
0:         {
0:             logger.error("failed to create table " + WordCount.KEYSPACE + "."  + WordCount.OUTPUT_COLUMN_FAMILY, e);
0:         }
0:     }
0:     
0:     private static Cassandra.Iface createConnection() throws TTransportException
0:     {
0:         if (System.getProperty("cassandra.host") == null || System.getProperty("cassandra.port") == null)
0:         {
0:             logger.warn("cassandra.host or cassandra.port is not defined, using default");
0:         }
0:         return createConnection(System.getProperty("cassandra.host", "localhost"),
0:                                 Integer.valueOf(System.getProperty("cassandra.port", "9160")));
0:     }
0: 
0:     private static Cassandra.Client createConnection(String host, Integer port) throws TTransportException
0:     {
0:         TSocket socket = new TSocket(host, port);
0:         TTransport trans = new TFramedTransport(socket);
0:         trans.open();
0:         TProtocol protocol = new TBinaryProtocol(trans);
0: 
0:         return new Cassandra.Client(protocol);
0:     }
0: 
0:     private static void insertData(Cassandra.Iface client) 
0:             throws InvalidRequestException, 
0:             UnavailableException, 
0:             TimedOutException, 
0:             SchemaDisagreementException, 
0:             TException
0:     {
0:         String query = "INSERT INTO " + WordCount.COLUMN_FAMILY +  
0:                            "(user_id, category_id, sub_category_id, title, body ) " +
0:                            " values (?, ?, ?, ?, ?) ";
0:         CqlPreparedResult result = client.prepare_cql3_query(ByteBufferUtil.bytes(query), Compression.NONE);
0: 
0:         String [] title = titleData();
0:         String [] body = bodyData();
0:         for (int i=1; i<5; i++)
0:         {         
0:             for (int j=1; j<444; j++) 
0:             {
0:                 for (int k=1; k<4; k++)
0:                 {
0:                     List<ByteBuffer> values = new ArrayList<ByteBuffer>();
0:                     values.add(ByteBufferUtil.bytes(String.valueOf(j)));
0:                     values.add(ByteBufferUtil.bytes(String.valueOf(i)));
0:                     values.add(ByteBufferUtil.bytes(String.valueOf(k)));
0:                     values.add(ByteBufferUtil.bytes(title[i]));
0:                     values.add(ByteBufferUtil.bytes(body[i]));
0:                     client.execute_prepared_cql3_query(result.itemId, values, ConsistencyLevel.ONE);
0:                 }
0:             }
0:         } 
0:     }
0: 
0:     private static String[] bodyData()
0:     {   // Public domain context, source http://en.wikisource.org/wiki/If%E2%80%94
0:         return new String[]{
0:                 "",
0:                 "If you can keep your head when all about you",
0:                 "Are losing theirs and blaming it on you",
0:                 "If you can trust yourself when all men doubt you,",
0:                 "But make allowance for their doubting too:",
0:                 "If you can wait and not be tired by waiting,"
0:         };
0:     }
0: 
0:     private static String[] titleData()
0:     {   // Public domain context, source http://en.wikisource.org/wiki/If%E2%80%94
0:         return new String[]{
0:                 "",
0:                 "A",
0:                 "B",
0:                 "C",
0:                 "D",
0:                 "E"            
0:         };
0:     }
0: }
============================================================================