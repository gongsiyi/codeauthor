1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.disk.Descriptor;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndex;
1:72790dc: import org.apache.cassandra.index.sasi.disk.TokenTreeBuilder;
1:2ca2fff: import org.apache.cassandra.index.sasi.sa.IndexedTerm;
1:72790dc: import org.apache.cassandra.index.sasi.sa.TermIterator;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.utils.Pair;
1:72790dc: 
1:733d1ee: @SuppressWarnings("resource")
1:72790dc: public class CombinedTermIterator extends TermIterator
1:72790dc: {
1:72790dc:     final Descriptor descriptor;
1:72790dc:     final RangeIterator<OnDiskIndex.DataTerm, CombinedTerm> union;
1:72790dc:     final ByteBuffer min;
1:72790dc:     final ByteBuffer max;
1:72790dc: 
1:72790dc:     public CombinedTermIterator(OnDiskIndex... sas)
1:72790dc:     {
1:72790dc:         this(Descriptor.CURRENT, sas);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public CombinedTermIterator(Descriptor d, OnDiskIndex... parts)
1:72790dc:     {
1:72790dc:         descriptor = d;
1:72790dc:         union = OnDiskIndexIterator.union(parts);
1:72790dc: 
1:72790dc:         AbstractType<?> comparator = parts[0].getComparator(); // assumes all SAs have same comparator
1:72790dc:         ByteBuffer minimum = parts[0].minTerm();
1:72790dc:         ByteBuffer maximum = parts[0].maxTerm();
1:72790dc: 
1:72790dc:         for (int i = 1; i < parts.length; i++)
1:72790dc:         {
1:72790dc:             OnDiskIndex part = parts[i];
1:72790dc:             if (part == null)
1:72790dc:                 continue;
1:72790dc: 
1:72790dc:             minimum = comparator.compare(minimum, part.minTerm()) > 0 ? part.minTerm() : minimum;
1:72790dc:             maximum = comparator.compare(maximum, part.maxTerm()) < 0 ? part.maxTerm() : maximum;
1:72790dc:         }
1:72790dc: 
1:72790dc:         min = minimum;
1:72790dc:         max = maximum;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer minTerm()
1:72790dc:     {
1:72790dc:         return min;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer maxTerm()
1:72790dc:     {
1:72790dc:         return max;
1:72790dc:     }
1:72790dc: 
1:2ca2fff:     protected Pair<IndexedTerm, TokenTreeBuilder> computeNext()
1:72790dc:     {
1:72790dc:         if (!union.hasNext())
1:72790dc:         {
1:72790dc:             return endOfData();
1:72790dc:         }
1:72790dc:         else
1:72790dc:         {
1:72790dc:             CombinedTerm term = union.next();
1:2ca2fff:             return Pair.create(new IndexedTerm(term.getTerm(), term.isPartial()), term.getTokenTreeBuilder());
1:72790dc:         }
1:72790dc: 
1:72790dc:     }
1:72790dc: }
============================================================================
author:Jordan West
-------------------------------------------------------------------------------
commit:2ca2fff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.sa.IndexedTerm;
/////////////////////////////////////////////////////////////////////////
1:     protected Pair<IndexedTerm, TokenTreeBuilder> computeNext()
/////////////////////////////////////////////////////////////////////////
1:             return Pair.create(new IndexedTerm(term.getTerm(), term.isPartial()), term.getTokenTreeBuilder());
author:Jason Brown
-------------------------------------------------------------------------------
commit:733d1ee
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("resource")
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.index.sasi.disk.Descriptor;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndex;
1: import org.apache.cassandra.index.sasi.disk.TokenTreeBuilder;
1: import org.apache.cassandra.index.sasi.sa.TermIterator;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.utils.Pair;
1: 
1: public class CombinedTermIterator extends TermIterator
1: {
1:     final Descriptor descriptor;
1:     final RangeIterator<OnDiskIndex.DataTerm, CombinedTerm> union;
1:     final ByteBuffer min;
1:     final ByteBuffer max;
1: 
1:     public CombinedTermIterator(OnDiskIndex... sas)
1:     {
1:         this(Descriptor.CURRENT, sas);
1:     }
1: 
1:     public CombinedTermIterator(Descriptor d, OnDiskIndex... parts)
1:     {
1:         descriptor = d;
1:         union = OnDiskIndexIterator.union(parts);
1: 
1:         AbstractType<?> comparator = parts[0].getComparator(); // assumes all SAs have same comparator
1:         ByteBuffer minimum = parts[0].minTerm();
1:         ByteBuffer maximum = parts[0].maxTerm();
1: 
1:         for (int i = 1; i < parts.length; i++)
1:         {
1:             OnDiskIndex part = parts[i];
1:             if (part == null)
1:                 continue;
1: 
1:             minimum = comparator.compare(minimum, part.minTerm()) > 0 ? part.minTerm() : minimum;
1:             maximum = comparator.compare(maximum, part.maxTerm()) < 0 ? part.maxTerm() : maximum;
1:         }
1: 
1:         min = minimum;
1:         max = maximum;
1:     }
1: 
1:     public ByteBuffer minTerm()
1:     {
1:         return min;
1:     }
1: 
1:     public ByteBuffer maxTerm()
1:     {
1:         return max;
1:     }
1: 
0:     protected Pair<ByteBuffer, TokenTreeBuilder> computeNext()
1:     {
1:         if (!union.hasNext())
1:         {
1:             return endOfData();
1:         }
1:         else
1:         {
1:             CombinedTerm term = union.next();
0:             return Pair.create(term.getTerm(), term.getTokenTreeBuilder());
1:         }
1: 
1:     }
1: }
============================================================================