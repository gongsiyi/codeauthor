1:b4133f3: /*
1:b4133f3:  * Licensed to the Apache Software Foundation (ASF) under one
1:b4133f3:  * or more contributor license agreements.  See the NOTICE file
1:b4133f3:  * distributed with this work for additional information
1:b4133f3:  * regarding copyright ownership.  The ASF licenses this file
1:b4133f3:  * to you under the Apache License, Version 2.0 (the
1:b4133f3:  * "License"); you may not use this file except in compliance
1:b4133f3:  * with the License.  You may obtain a copy of the License at
1:b4133f3:  *
1:b4133f3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b4133f3:  *
1:b4133f3:  * Unless required by applicable law or agreed to in writing, software
1:b4133f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b4133f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b4133f3:  * See the License for the specific language governing permissions and
1:b4133f3:  * limitations under the License.
1:b4133f3:  */
1:b4133f3: 
1:b4133f3: package org.apache.cassandra.io.util;
1:b4133f3: 
1:b4133f3: public interface DiskOptimizationStrategy
1:b4133f3: {
1:b4133f3:     // The maximum buffer size, we will never buffer more than this size. Further,
1:b4133f3:     // when the limiter is not null, i.e. when throttling is enabled, we read exactly
1:b4133f3:     // this size, since when throttling the intention is to eventually read everything,
1:b4133f3:     // see CASSANDRA-8630
1:b4133f3:     // NOTE: this size is chosen both for historical consistency, as a reasonable upper bound,
1:b4133f3:     //       and because our BufferPool currently has a maximum allocation size of this.
1:b4133f3:     int MAX_BUFFER_SIZE = 1 << 16; // 64k
1:b4133f3: 
1:b4133f3:     /**
1:b4133f3:      * @param recordSize record size
1:b4133f3:      * @return the buffer size for a given record size.
1:b4133f3:      */
1:b4133f3:     int bufferSize(long recordSize);
1:b4133f3: 
1:b4133f3:     /**
1:b4133f3:      * Round up to the next multiple of 4k but no more than {@link #MAX_BUFFER_SIZE}.
1:b4133f3:      */
1:b4133f3:     default int roundBufferSize(long size)
1:b4133f3:     {
1:b4133f3:         if (size <= 0)
1:b4133f3:             return 4096;
1:b4133f3: 
1:b4133f3:         size = (size + 4095) & ~4095;
1:b4133f3:         return (int)Math.min(size, MAX_BUFFER_SIZE);
1:b4133f3:     }
1:b4133f3: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: public interface DiskOptimizationStrategy
1: {
1:     // The maximum buffer size, we will never buffer more than this size. Further,
1:     // when the limiter is not null, i.e. when throttling is enabled, we read exactly
1:     // this size, since when throttling the intention is to eventually read everything,
1:     // see CASSANDRA-8630
1:     // NOTE: this size is chosen both for historical consistency, as a reasonable upper bound,
1:     //       and because our BufferPool currently has a maximum allocation size of this.
1:     int MAX_BUFFER_SIZE = 1 << 16; // 64k
1: 
1:     /**
1:      * @param recordSize record size
1:      * @return the buffer size for a given record size.
1:      */
1:     int bufferSize(long recordSize);
1: 
1:     /**
1:      * Round up to the next multiple of 4k but no more than {@link #MAX_BUFFER_SIZE}.
1:      */
1:     default int roundBufferSize(long size)
1:     {
1:         if (size <= 0)
1:             return 4096;
1: 
1:         size = (size + 4095) & ~4095;
1:         return (int)Math.min(size, MAX_BUFFER_SIZE);
1:     }
1: }
============================================================================