1:5117a5d: /*
1:5117a5d:  * Licensed to the Apache Software Foundation (ASF) under one
1:5117a5d:  * or more contributor license agreements.  See the NOTICE file
1:5117a5d:  * distributed with this work for additional information
1:5117a5d:  * regarding copyright ownership.  The ASF licenses this file
1:5117a5d:  * to you under the Apache License, Version 2.0 (the
1:5117a5d:  * "License"); you may not use this file except in compliance
1:5117a5d:  * with the License.  You may obtain a copy of the License at
2:5117a5d:  *
1:5117a5d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5117a5d:  *
1:5117a5d:  * Unless required by applicable law or agreed to in writing, software
1:5117a5d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5117a5d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5117a5d:  * See the License for the specific language governing permissions and
1:5117a5d:  * limitations under the License.
2:5117a5d:  */
1:5117a5d: package org.apache.cassandra.cql3;
6:5117a5d: 
1:5117a5d: import java.io.DataInput;
1:5117a5d: import java.io.DataOutput;
1:5117a5d: import java.io.IOException;
1:a991b64: import java.nio.ByteBuffer;
1:5a4253b: import java.util.List;
1:5a4253b: import java.util.Map;
1:5a4253b: import java.util.Set;
1:a991b64: 
1:bdae452: import org.apache.cassandra.db.marshal.*;
1:3928665: import org.apache.cassandra.utils.ByteBufferUtil;
1:65a7088: 
1:5117a5d: public enum Operator
1:65a7088: {
1:65a7088:     EQ(0)
1:65a7088:     {
4:65a7088:         @Override
1:65a7088:         public String toString()
1:65a7088:         {
1:65a7088:             return "=";
1:65a7088:         }
1:65a7088:     },
1:65a7088:     LT(4)
1:65a7088:     {
1:65a7088:         @Override
1:65a7088:         public String toString()
1:65a7088:         {
1:65a7088:             return "<";
1:65a7088:         }
1:65a7088:     },
1:65a7088:     LTE(3)
1:65a7088:     {
1:65a7088:         @Override
1:65a7088:         public String toString()
1:65a7088:         {
1:65a7088:             return "<=";
1:65a7088:         }
1:65a7088:     },
1:65a7088:     GTE(1)
1:65a7088:     {
1:65a7088:         @Override
1:65a7088:         public String toString()
1:65a7088:         {
1:65a7088:             return ">=";
1:65a7088:         }
1:65a7088:     },
1:65a7088:     GT(2)
1:65a7088:     {
1:65a7088:         @Override
1:65a7088:         public String toString()
1:65a7088:         {
1:65a7088:             return ">";
1:65a7088:         }
1:65a7088:     },
1:65a7088:     IN(7)
1:65a7088:     {
1:65a7088:     },
1:65a7088:     CONTAINS(5)
1:65a7088:     {
1:65a7088:     },
1:65a7088:     CONTAINS_KEY(6)
1:65a7088:     {
1:65a7088:         @Override
1:65a7088:         public String toString()
1:65a7088:         {
1:65a7088:             return "CONTAINS KEY";
1:65a7088:         }
1:65a7088:     },
1:65a7088:     NEQ(8)
1:65a7088:     {
1:65a7088:         @Override
1:65a7088:         public String toString()
1:65a7088:         {
1:65a7088:             return "!=";
1:65a7088:         }
1:5a4253b:     },
1:5a4253b:     IS_NOT(9)
1:5a4253b:     {
1:5a4253b:         @Override
1:5a4253b:         public String toString()
1:5a4253b:         {
1:5a4253b:             return "IS NOT";
1:5a4253b:         }
1:3928665:     },
1:3928665:     LIKE_PREFIX(10)
1:3928665:     {
1:3928665:         @Override
1:3928665:         public String toString()
1:3928665:         {
1:3928665:             return "LIKE '<term>%'";
1:3928665:         }
1:3928665:     },
1:3928665:     LIKE_SUFFIX(11)
1:3928665:     {
1:3928665:         @Override
1:3928665:         public String toString()
1:3928665:         {
1:3928665:             return "LIKE '%<term>'";
1:3928665:         }
1:3928665:     },
1:3928665:     LIKE_CONTAINS(12)
1:3928665:     {
1:3928665:         @Override
1:3928665:         public String toString()
1:3928665:         {
1:3928665:             return "LIKE '%<term>%'";
1:3928665:         }
1:479e8af:     },
1:479e8af:     LIKE_MATCHES(13)
1:479e8af:     {
1:479e8af:         @Override
1:479e8af:         public String toString()
1:479e8af:         {
1:479e8af:             return "LIKE '<term>'";
1:479e8af:         }
1:bdae452:     },
1:bdae452:     LIKE(14)
1:bdae452:     {
1:bdae452:         @Override
1:bdae452:         public String toString()
1:bdae452:         {
1:bdae452:             return "LIKE";
1:bdae452:         }
1:65a7088:     };
1:65a7088: 
1:65a7088:     /**
1:5117a5d:      * The binary representation of this <code>Enum</code> value.
1:65a7088:      */
1:5117a5d:     private final int b;
1:65a7088: 
2:5117a5d:     /**
1:5117a5d:      * Creates a new <code>Operator</code> with the specified binary representation.
1:5117a5d:      * @param b the binary representation of this <code>Enum</code> value
1:5117a5d:      */
1:5117a5d:     private Operator(int b)
1:65a7088:     {
1:5117a5d:         this.b = b;
1:65a7088:     }
1:65a7088: 
1:5117a5d:     /**
1:5117a5d:      * Write the serialized version of this <code>Operator</code> to the specified output.
1:65a7088:      *
1:5117a5d:      * @param output the output to write to
1:5117a5d:      * @throws IOException if an I/O problem occurs while writing to the specified output
1:5117a5d:      */
1:5117a5d:     public void writeTo(DataOutput output) throws IOException
1:65a7088:     {
1:5117a5d:         output.writeInt(b);
1:65a7088:     }
1:65a7088: 
1:5a4253b:     public int getValue()
1:5a4253b:     {
1:5a4253b:         return b;
1:5a4253b:     }
1:5a4253b: 
1:5117a5d:     /**
1:5117a5d:      * Deserializes a <code>Operator</code> instance from the specified input.
1:5117a5d:      *
1:5117a5d:      * @param input the input to read from
1:5117a5d:      * @return the <code>Operator</code> instance deserialized
1:5117a5d:      * @throws IOException if a problem occurs while deserializing the <code>Type</code> instance.
1:5117a5d:      */
1:5117a5d:     public static Operator readFrom(DataInput input) throws IOException
1:65a7088:     {
1:5117a5d:           int b = input.readInt();
1:5117a5d:           for (Operator operator : values())
1:5117a5d:               if (operator.b == b)
1:5117a5d:                   return operator;
1:5117a5d: 
1:5117a5d:           throw new IOException(String.format("Cannot resolve Relation.Type from binary representation: %s", b));
1:65a7088:     }
1:5117a5d: 
1:a991b64:     /**
1:a991b64:      * Whether 2 values satisfy this operator (given the type they should be compared with).
1:a991b64:      *
1:5a4253b:      * @throws AssertionError for CONTAINS and CONTAINS_KEY as this doesn't support those operators yet
1:a991b64:      */
1:a991b64:     public boolean isSatisfiedBy(AbstractType<?> type, ByteBuffer leftOperand, ByteBuffer rightOperand)
1:a991b64:     {
1:a991b64:         switch (this)
1:a991b64:         {
1:a991b64:             case EQ:
1:5a4253b:                 return type.compareForCQL(leftOperand, rightOperand) == 0;
1:a991b64:             case LT:
1:5a4253b:                 return type.compareForCQL(leftOperand, rightOperand) < 0;
1:a991b64:             case LTE:
1:5a4253b:                 return type.compareForCQL(leftOperand, rightOperand) <= 0;
1:a991b64:             case GT:
1:5a4253b:                 return type.compareForCQL(leftOperand, rightOperand) > 0;
1:a991b64:             case GTE:
1:5a4253b:                 return type.compareForCQL(leftOperand, rightOperand) >= 0;
1:a991b64:             case NEQ:
1:5a4253b:                 return type.compareForCQL(leftOperand, rightOperand) != 0;
1:5a4253b:             case IN:
1:5a4253b:                 List inValues = ((List) ListType.getInstance(type, false).getSerializer().deserialize(rightOperand));
1:5a4253b:                 return inValues.contains(type.getSerializer().deserialize(leftOperand));
1:5a4253b:             case CONTAINS:
1:5a4253b:                 if (type instanceof ListType)
1:5a4253b:                 {
1:5a4253b:                     List list = (List) type.getSerializer().deserialize(leftOperand);
1:5a4253b:                     return list.contains(((ListType) type).getElementsType().getSerializer().deserialize(rightOperand));
1:5a4253b:                 }
1:5a4253b:                 else if (type instanceof SetType)
1:5a4253b:                 {
1:5a4253b:                     Set set = (Set) type.getSerializer().deserialize(leftOperand);
1:5a4253b:                     return set.contains(((SetType) type).getElementsType().getSerializer().deserialize(rightOperand));
1:5a4253b:                 }
1:5a4253b:                 else  // MapType
1:5a4253b:                 {
1:5a4253b:                     Map map = (Map) type.getSerializer().deserialize(leftOperand);
1:5a4253b:                     return map.containsValue(((MapType) type).getValuesType().getSerializer().deserialize(rightOperand));
1:5a4253b:                 }
1:5a4253b:             case CONTAINS_KEY:
1:5a4253b:                 Map map = (Map) type.getSerializer().deserialize(leftOperand);
1:5a4253b:                 return map.containsKey(((MapType) type).getKeysType().getSerializer().deserialize(rightOperand));
1:3928665:             case LIKE_PREFIX:
1:3928665:                 return ByteBufferUtil.startsWith(leftOperand, rightOperand);
1:3928665:             case LIKE_SUFFIX:
1:3928665:                 return ByteBufferUtil.endsWith(leftOperand, rightOperand);
1:479e8af:             case LIKE_MATCHES:
1:3928665:             case LIKE_CONTAINS:
1:3928665:                 return ByteBufferUtil.contains(leftOperand, rightOperand);
1:a991b64:             default:
1:bdae452:                 // we shouldn't get LIKE, CONTAINS, CONTAINS KEY, or IS NOT here
1:a991b64:                 throw new AssertionError();
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     public int serializedSize()
1:a991b64:     {
1:a991b64:         return 4;
1:a991b64:     }
1:a991b64: 
1:65a7088:     @Override
1:5117a5d:     public String toString()
1:65a7088:     {
1:65a7088:          return this.name();
1:65a7088:     }
2:65a7088: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:bdae452
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.*;
/////////////////////////////////////////////////////////////////////////
1:     },
1:     LIKE(14)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "LIKE";
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 // we shouldn't get LIKE, CONTAINS, CONTAINS KEY, or IS NOT here
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:479e8af
/////////////////////////////////////////////////////////////////////////
1:     },
1:     LIKE_MATCHES(13)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "LIKE '<term>'";
1:         }
/////////////////////////////////////////////////////////////////////////
1:             case LIKE_MATCHES:
commit:3928665
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:     },
1:     LIKE_PREFIX(10)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "LIKE '<term>%'";
1:         }
1:     },
1:     LIKE_SUFFIX(11)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "LIKE '%<term>'";
1:         }
1:     },
1:     LIKE_CONTAINS(12)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "LIKE '%<term>%'";
1:         }
/////////////////////////////////////////////////////////////////////////
1:             case LIKE_PREFIX:
1:                 return ByteBufferUtil.startsWith(leftOperand, rightOperand);
1:             case LIKE_SUFFIX:
1:                 return ByteBufferUtil.endsWith(leftOperand, rightOperand);
1:             case LIKE_CONTAINS:
1:                 return ByteBufferUtil.contains(leftOperand, rightOperand);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
0: import org.apache.cassandra.db.marshal.ListType;
0: import org.apache.cassandra.db.marshal.MapType;
0: import org.apache.cassandra.db.marshal.SetType;
/////////////////////////////////////////////////////////////////////////
1:     },
1:     IS_NOT(9)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "IS NOT";
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public int getValue()
1:     {
1:         return b;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @throws AssertionError for CONTAINS and CONTAINS_KEY as this doesn't support those operators yet
1:                 return type.compareForCQL(leftOperand, rightOperand) == 0;
1:                 return type.compareForCQL(leftOperand, rightOperand) < 0;
1:                 return type.compareForCQL(leftOperand, rightOperand) <= 0;
1:                 return type.compareForCQL(leftOperand, rightOperand) > 0;
1:                 return type.compareForCQL(leftOperand, rightOperand) >= 0;
1:                 return type.compareForCQL(leftOperand, rightOperand) != 0;
1:             case IN:
1:                 List inValues = ((List) ListType.getInstance(type, false).getSerializer().deserialize(rightOperand));
1:                 return inValues.contains(type.getSerializer().deserialize(leftOperand));
1:             case CONTAINS:
1:                 if (type instanceof ListType)
1:                 {
1:                     List list = (List) type.getSerializer().deserialize(leftOperand);
1:                     return list.contains(((ListType) type).getElementsType().getSerializer().deserialize(rightOperand));
1:                 }
1:                 else if (type instanceof SetType)
1:                 {
1:                     Set set = (Set) type.getSerializer().deserialize(leftOperand);
1:                     return set.contains(((SetType) type).getElementsType().getSerializer().deserialize(rightOperand));
1:                 }
1:                 else  // MapType
1:                 {
1:                     Map map = (Map) type.getSerializer().deserialize(leftOperand);
1:                     return map.containsValue(((MapType) type).getValuesType().getSerializer().deserialize(rightOperand));
1:                 }
1:             case CONTAINS_KEY:
1:                 Map map = (Map) type.getSerializer().deserialize(leftOperand);
1:                 return map.containsKey(((MapType) type).getKeysType().getSerializer().deserialize(rightOperand));
0:                 // we shouldn't get CONTAINS, CONTAINS KEY, or IS NOT here
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.db.marshal.AbstractType;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Whether 2 values satisfy this operator (given the type they should be compared with).
1:      *
0:      * @throws AssertionError for IN, CONTAINS and CONTAINS_KEY as this doesn't make sense for this function.
1:      */
1:     public boolean isSatisfiedBy(AbstractType<?> type, ByteBuffer leftOperand, ByteBuffer rightOperand)
1:     {
0:         int comparison = type.compareForCQL(leftOperand, rightOperand);
1:         switch (this)
1:         {
1:             case EQ:
0:                 return comparison == 0;
1:             case LT:
0:                 return comparison < 0;
1:             case LTE:
0:                 return comparison <= 0;
1:             case GT:
0:                 return comparison > 0;
1:             case GTE:
0:                 return comparison >= 0;
1:             case NEQ:
0:                 return comparison != 0;
1:             default:
0:                 // we shouldn't get IN, CONTAINS, or CONTAINS KEY here
1:                 throw new AssertionError();
1:         }
1:     }
1: 
1:     public int serializedSize()
1:     {
1:         return 4;
1:     }
1: 
author:blerer
-------------------------------------------------------------------------------
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1:     EQ(0)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "=";
1:         }
1:     },
1:     LT(4)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "<";
1:         }
1: 
1:         @Override
0:         public Operator reverse()
1:         {
0:             return GT;
1:         }
1:     },
1:     LTE(3)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "<=";
1:         }
1: 
1:         @Override
0:         public Operator reverse()
1:         {
0:             return GTE;
1:         }
1:     },
1:     GTE(1)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return ">=";
1:         }
1: 
1:         @Override
0:         public Operator reverse()
1:         {
0:             return LTE;
1:         }
1:     },
1:     GT(2)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return ">";
1:         }
1: 
1:         @Override
0:         public Operator reverse()
1:         {
0:             return LT;
1:         }
1:     },
1:     IN(7)
1:     {
1:     },
1:     CONTAINS(5)
1:     {
1:     },
1:     CONTAINS_KEY(6)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "CONTAINS KEY";
1:         }
1:     },
1:     NEQ(8)
1:     {
1:         @Override
1:         public String toString()
1:         {
1:             return "!=";
1:         }
1:     };
/////////////////////////////////////////////////////////////////////////
1:          return this.name();
1: 
1:     /**
0:      * Returns the reverse operator if this one.
1:      *
0:      * @return the reverse operator of this one.
1:      */
0:     public Operator reverse()
1:     {
0:         return this;
1:     }
1: }
commit:5117a5d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: public enum Operator
0: {
0:     EQ(0), LT(4), LTE(3), GTE(1), GT(2), IN(7), CONTAINS(5), CONTAINS_KEY(6), NEQ(8);
1: 
1:     /**
1:      * The binary representation of this <code>Enum</code> value.
1:      */
1:     private final int b;
1: 
1:     /**
1:      * Creates a new <code>Operator</code> with the specified binary representation.
1:      * @param b the binary representation of this <code>Enum</code> value
1:      */
1:     private Operator(int b)
0:     {
1:         this.b = b;
0:     }
1: 
1:     /**
1:      * Write the serialized version of this <code>Operator</code> to the specified output.
1:      *
1:      * @param output the output to write to
1:      * @throws IOException if an I/O problem occurs while writing to the specified output
1:      */
1:     public void writeTo(DataOutput output) throws IOException
0:     {
1:         output.writeInt(b);
0:     }
1: 
1:     /**
1:      * Deserializes a <code>Operator</code> instance from the specified input.
1:      *
1:      * @param input the input to read from
1:      * @return the <code>Operator</code> instance deserialized
1:      * @throws IOException if a problem occurs while deserializing the <code>Type</code> instance.
1:      */
1:     public static Operator readFrom(DataInput input) throws IOException
0:     {
1:           int b = input.readInt();
1:           for (Operator operator : values())
1:               if (operator.b == b)
1:                   return operator;
1: 
1:           throw new IOException(String.format("Cannot resolve Relation.Type from binary representation: %s", b));
0:     }
1: 
0:     @Override
1:     public String toString()
0:     {
0:         switch (this)
0:         {
0:             case EQ:
0:                 return "=";
0:             case LT:
0:                 return "<";
0:             case LTE:
0:                 return "<=";
0:             case GT:
0:                 return ">";
0:             case GTE:
0:                 return ">=";
0:             case NEQ:
0:                 return "!=";
0:             case CONTAINS_KEY:
0:                 return "CONTAINS KEY";
0:             default:
0:                 return this.name();
0:         }
0:     }
0: }
============================================================================