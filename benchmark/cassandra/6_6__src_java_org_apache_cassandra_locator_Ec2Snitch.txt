1:07cf56f: /*
1:f6f5e0e:  * Licensed to the Apache Software Foundation (ASF) under one
1:f6f5e0e:  * or more contributor license agreements.  See the NOTICE file
1:f6f5e0e:  * distributed with this work for additional information
1:f6f5e0e:  * regarding copyright ownership.  The ASF licenses this file
1:f6f5e0e:  * to you under the Apache License, Version 2.0 (the
1:f6f5e0e:  * "License"); you may not use this file except in compliance
1:f6f5e0e:  * with the License.  You may obtain a copy of the License at
1:f6f5e0e:  *
1:f6f5e0e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f6f5e0e:  *
1:f6f5e0e:  * Unless required by applicable law or agreed to in writing, software
1:f6f5e0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f6f5e0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f6f5e0e:  * See the License for the specific language governing permissions and
1:f6f5e0e:  * limitations under the License.
1:f6f5e0e:  */
1:f6f5e0e: package org.apache.cassandra.locator;
1:07cdfd0: 
1:f6f5e0e: import java.io.DataInputStream;
1:f6f5e0e: import java.io.FilterInputStream;
1:f6f5e0e: import java.io.IOException;
1:f6f5e0e: import java.net.HttpURLConnection;
1:f6f5e0e: import java.net.InetAddress;
1:f6f5e0e: import java.net.URL;
1:ce206e2: import java.nio.charset.StandardCharsets;
1:db4da73: import java.util.Map;
1:c552c29: 
1:f6f5e0e: import org.slf4j.Logger;
1:f6f5e0e: import org.slf4j.LoggerFactory;
1:db4da73: import org.apache.cassandra.db.SystemKeyspace;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:f6f5e0e: import org.apache.cassandra.gms.ApplicationState;
1:e6499d8: import org.apache.cassandra.gms.EndpointState;
1:f6f5e0e: import org.apache.cassandra.gms.Gossiper;
1:c552c29: import org.apache.cassandra.io.util.FileUtils;
1:f6f5e0e: import org.apache.cassandra.utils.FBUtilities;
1:2fd3268: 
2:f6f5e0e: /**
1:f6f5e0e:  * A snitch that assumes an EC2 region is a DC and an EC2 availability_zone
1:f6f5e0e:  *  is a rack. This information is available in the config for the node.
1:f6f5e0e:  */
1:f6f5e0e: public class Ec2Snitch extends AbstractNetworkTopologySnitch
1:a71e526: {
1:5a6e2b0:     protected static final Logger logger = LoggerFactory.getLogger(Ec2Snitch.class);
1:e6499d8:     protected static final String ZONE_NAME_QUERY_URL = "http://169.254.169.254/latest/meta-data/placement/availability-zone";
1:fa70ed5:     private static final String DEFAULT_DC = "UNKNOWN-DC";
1:fa70ed5:     private static final String DEFAULT_RACK = "UNKNOWN-RACK";
1:db4da73:     private Map<InetAddress, Map<String, String>> savedEndpoints;
1:f6f5e0e:     protected String ec2zone;
1:f6f5e0e:     protected String ec2region;
1:a7b9d09: 
1:f6f5e0e:     public Ec2Snitch() throws IOException, ConfigurationException
5:f6f5e0e:     {
1:34060fc:         String az = awsApiCall(ZONE_NAME_QUERY_URL);
1:f6f5e0e:         // Split "us-east-1a" or "asia-1a" into "us-east"/"1a" and "asia"/"1a".
1:34060fc:         String[] splits = az.split("-");
1:f6f5e0e:         ec2zone = splits[splits.length - 1];
1:34060fc: 
1:34060fc:         // hack for CASSANDRA-4026
1:34060fc:         ec2region = az.substring(0, az.length() - 1);
1:34060fc:         if (ec2region.endsWith("1"))
1:34060fc:             ec2region = az.substring(0, az.length() - 3);
1:95f94a4: 
1:f67b7a4:         String datacenterSuffix = (new SnitchProperties()).get("dc_suffix", "");
1:9939458:         ec2region = ec2region.concat(datacenterSuffix);
1:db9bc69:         logger.info("EC2Snitch using region: {}, zone: {}.", ec2region, ec2zone);
5:f6f5e0e:     }
1:e6499d8: 
1:e6499d8:     String awsApiCall(String url) throws IOException, ConfigurationException
1:e6499d8:     {
1:e6499d8:         // Populate the region and zone by introspection, fail if 404 on metadata
1:e6499d8:         HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
1:c552c29:         DataInputStream d = null;
1:e6499d8:         try
1:e6499d8:         {
1:e6499d8:             conn.setRequestMethod("GET");
1:e6499d8:             if (conn.getResponseCode() != 200)
1:e6499d8:                 throw new ConfigurationException("Ec2Snitch was unable to execute the API call. Not an ec2 node?");
1:e6499d8: 
1:e6499d8:             // Read the information. I wish I could say (String) conn.getContent() here...
1:e6499d8:             int cl = conn.getContentLength();
1:e6499d8:             byte[] b = new byte[cl];
1:c552c29:             d = new DataInputStream((FilterInputStream) conn.getContent());
1:e6499d8:             d.readFully(b);
1:ce206e2:             return new String(b, StandardCharsets.UTF_8);
1:e6499d8:         }
1:e6499d8:         finally
1:e6499d8:         {
1:c552c29:             FileUtils.close(d);
1:e6499d8:             conn.disconnect();
1:e6499d8:         }
1:e6499d8:     }
1:9939458: 
1:f6f5e0e:     public String getRack(InetAddress endpoint)
1:f6f5e0e:     {
1:127c028:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:f6f5e0e:             return ec2zone;
1:fa70ed5:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:7d857e6:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null)
1:db4da73:         {
1:db4da73:             if (savedEndpoints == null)
1:db4da73:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:db4da73:             if (savedEndpoints.containsKey(endpoint))
1:db4da73:                 return savedEndpoints.get(endpoint).get("rack");
1:fa70ed5:             return DEFAULT_RACK;
1:db4da73:         }
1:fa70ed5:         return state.getApplicationState(ApplicationState.RACK).value;
1:a71e526:     }
1:a7b9d09: 
1:f6f5e0e:     public String getDatacenter(InetAddress endpoint)
1:a71e526:     {
1:127c028:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:f6f5e0e:             return ec2region;
1:fa70ed5:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:d7468ea:         if (state == null || state.getApplicationState(ApplicationState.DC) == null)
1:db4da73:         {
1:db4da73:             if (savedEndpoints == null)
1:db4da73:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:db4da73:             if (savedEndpoints.containsKey(endpoint))
1:db4da73:                 return savedEndpoints.get(endpoint).get("data_center");
1:fa70ed5:             return DEFAULT_DC;
1:db4da73:         }
1:fa70ed5:         return state.getApplicationState(ApplicationState.DC).value;
1:a71e526:     }
1:f6f5e0e: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:f67b7a4
/////////////////////////////////////////////////////////////////////////
1:         String datacenterSuffix = (new SnitchProperties()).get("dc_suffix", "");
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:5c21711
commit:ce206e2
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
/////////////////////////////////////////////////////////////////////////
1:             return new String(b, StandardCharsets.UTF_8);
commit:d7468ea
/////////////////////////////////////////////////////////////////////////
1:         if (state == null || state.getApplicationState(ApplicationState.DC) == null)
commit:7d857e6
/////////////////////////////////////////////////////////////////////////
1:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null)
commit:845f407
commit:c290372
commit:e6499d8
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
1: import org.apache.cassandra.gms.EndpointState;
/////////////////////////////////////////////////////////////////////////
1:     protected static final String ZONE_NAME_QUERY_URL = "http://169.254.169.254/latest/meta-data/placement/availability-zone";
0:         String[] splits = awsApiCall(ZONE_NAME_QUERY_URL).split("-");
0:         ec2region = splits.length < 3 ? splits[0] : splits[0] + "-" + splits[1];
1:     
1:     String awsApiCall(String url) throws IOException, ConfigurationException
1:     {
1:         // Populate the region and zone by introspection, fail if 404 on metadata
1:         HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
1:         try
1:         {
1:             conn.setRequestMethod("GET");
1:             if (conn.getResponseCode() != 200)
1:                 throw new ConfigurationException("Ec2Snitch was unable to execute the API call. Not an ec2 node?");
1: 
1:             // Read the information. I wish I could say (String) conn.getContent() here...
1:             int cl = conn.getContentLength();
1:             byte[] b = new byte[cl];
0:             DataInputStream d = new DataInputStream((FilterInputStream) conn.getContent());
1:             d.readFully(b);
0:             return new String(b, Charsets.UTF_8);
1:         }
1:         finally
1:         {
1:             conn.disconnect();
1:         }
1:     }
0:         if (endpoint.equals(FBUtilities.getLocalAddress()))
0:         return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RACK).value;
0:         if (endpoint.equals(FBUtilities.getLocalAddress()))
0:         return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.DC).value;
commit:9fa7a32
/////////////////////////////////////////////////////////////////////////
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(ec2region));
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.RACK, StorageService.instance.valueFactory.rack(ec2zone));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:db9bc69
/////////////////////////////////////////////////////////////////////////
1:         logger.info("EC2Snitch using region: {}, zone: {}.", ec2region, ec2zone);
commit:c552c29
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.cassandra.io.util.FileUtils;
/////////////////////////////////////////////////////////////////////////
1:         DataInputStream d = null;
/////////////////////////////////////////////////////////////////////////
1:             d = new DataInputStream((FilterInputStream) conn.getContent());
1:             FileUtils.close(d);
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:db4da73
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.cassandra.db.SystemKeyspace;
/////////////////////////////////////////////////////////////////////////
1:     private Map<InetAddress, Map<String, String>> savedEndpoints;
/////////////////////////////////////////////////////////////////////////
1:         {
1:             if (savedEndpoints == null)
1:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:             if (savedEndpoints.containsKey(endpoint))
1:                 return savedEndpoints.get(endpoint).get("rack");
1:         }
/////////////////////////////////////////////////////////////////////////
1:         {
1:             if (savedEndpoints == null)
1:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:             if (savedEndpoints.containsKey(endpoint))
1:                 return savedEndpoints.get(endpoint).get("data_center");
1:         }
commit:a71e526
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import org.apache.cassandra.db.SystemTable;
/////////////////////////////////////////////////////////////////////////
0:     private Map<InetAddress, Map<String, String>> savedEndpoints;
/////////////////////////////////////////////////////////////////////////
1:         {
0:             if (savedEndpoints == null)
0:                 savedEndpoints = SystemTable.loadDcRackInfo();
0:             if (savedEndpoints.containsKey(endpoint))
0:                 return savedEndpoints.get(endpoint).get("rack");
1:         }
/////////////////////////////////////////////////////////////////////////
1:         {
0:             if (savedEndpoints == null)
0:                 savedEndpoints = SystemTable.loadDcRackInfo();
0:             if (savedEndpoints.containsKey(endpoint))
0:                 return savedEndpoints.get(endpoint).get("data_center");
1:         }
commit:9939458
/////////////////////////////////////////////////////////////////////////
1: 
0:         String datacenterSuffix = SnitchProperties.get("dc_suffix", "");
1:         ec2region = ec2region.concat(datacenterSuffix);
commit:e90dcd5
/////////////////////////////////////////////////////////////////////////
0:         String datacenterSuffix = SnitchProperties.get("dc_suffix", "");
0:         ec2region = ec2region.concat(datacenterSuffix);
commit:34060fc
/////////////////////////////////////////////////////////////////////////
1:         String az = awsApiCall(ZONE_NAME_QUERY_URL);
1:         String[] splits = az.split("-");
1: 
1:         // hack for CASSANDRA-4026
1:         ec2region = az.substring(0, az.length() - 1);
1:         if (ec2region.endsWith("1"))
1:             ec2region = az.substring(0, az.length() - 3);
commit:a7b9d09
/////////////////////////////////////////////////////////////////////////
0:         String az = awsApiCall(ZONE_NAME_QUERY_URL);
0:         String[] splits = az.split("-");
1:         
0:         // hack for CASSANDRA-4026
0:         ec2region = az.substring(0, az.length() - 1);
0:         if (ec2region.endsWith("1"))
0:             ec2region = az.substring(0, az.length() - 3);
1:         
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:59bd0e7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:eb775fe
/////////////////////////////////////////////////////////////////////////
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     protected static final Logger logger = LoggerFactory.getLogger(Ec2Snitch.class);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:fa70ed5
/////////////////////////////////////////////////////////////////////////
1:     private static final String DEFAULT_DC = "UNKNOWN-DC";
1:     private static final String DEFAULT_RACK = "UNKNOWN-RACK";
/////////////////////////////////////////////////////////////////////////
1:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
0:         if (null == state || null == state.getApplicationState(ApplicationState.RACK))
1:             return DEFAULT_RACK;
1:         return state.getApplicationState(ApplicationState.RACK).value;
1:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
0:         if (null == state || null == state.getApplicationState(ApplicationState.DC))
1:             return DEFAULT_DC;
1:         return state.getApplicationState(ApplicationState.DC).value;
commit:127c028
/////////////////////////////////////////////////////////////////////////
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
commit:f6f5e0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.locator;
0: 
1: import java.io.DataInputStream;
1: import java.io.FilterInputStream;
1: import java.io.IOException;
1: import java.net.HttpURLConnection;
1: import java.net.InetAddress;
1: import java.net.URL;
0: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
0: import org.apache.cassandra.config.ConfigurationException;
1: import org.apache.cassandra.gms.ApplicationState;
1: import org.apache.cassandra.gms.Gossiper;
0: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.FBUtilities;
0: 
1: /**
1:  * A snitch that assumes an EC2 region is a DC and an EC2 availability_zone
1:  *  is a rack. This information is available in the config for the node.
1:  */
1: public class Ec2Snitch extends AbstractNetworkTopologySnitch
1: {
0:     protected static Logger logger = LoggerFactory.getLogger(Ec2Snitch.class);
1:     protected String ec2zone;
1:     protected String ec2region;
0: 
1:     public Ec2Snitch() throws IOException, ConfigurationException
1:     {
0:         // Populate the region and zone by introspection, fail if 404 on metadata
0:         HttpURLConnection conn = (HttpURLConnection) new URL("http://169.254.169.254/latest/meta-data/placement/availability-zone").openConnection();
0:         conn.setRequestMethod("GET");
0:         if (conn.getResponseCode() != 200)
1:         {
0:             throw new ConfigurationException("Ec2Snitch was unable to find region/zone data. Not an ec2 node?");
1:         }
0: 
0:         // Read the information. I wish I could say (String) conn.getContent() here...
0:         int cl = conn.getContentLength();
0:         byte[] b = new byte[cl];
0:         DataInputStream d = new DataInputStream((FilterInputStream)conn.getContent());
0:         d.readFully(b);
0: 
1:         // Split "us-east-1a" or "asia-1a" into "us-east"/"1a" and "asia"/"1a".
0:         String azone = new String(b ,"UTF-8");
0:         String[] splits = azone.split("-");
1:         ec2zone = splits[splits.length - 1];
0:         ec2region = splits.length < 3 ? splits[0] : splits[0]+"-"+splits[1];
0:         logger.info("EC2Snitch using region: " + ec2region + ", zone: " + ec2zone + ".");
1:     }
0: 
1:     public String getRack(InetAddress endpoint)
1:     {
0:         if (endpoint == FBUtilities.getLocalAddress())
1:             return ec2zone;
0:         else
0:             return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RACK).value;
1:     }
0: 
1:     public String getDatacenter(InetAddress endpoint)
1:     {
0:         if (endpoint == FBUtilities.getLocalAddress())
1:             return ec2region;
0:         else
0:             return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.DC).value;
1:     }
0: 
0:     @Override
0:     public void gossiperStarting()
1:     {
0:         // Share EC2 info via gossip.  We have to wait until Gossiper is initialized though.
0:         logger.info("Ec2Snitch adding ApplicationState ec2region=" + ec2region + " ec2zone=" + ec2zone);
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.DC, StorageService.valueFactory.datacenter(ec2region));
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.RACK, StorageService.valueFactory.rack(ec2zone));
1:     }
1: }
============================================================================