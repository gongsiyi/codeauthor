1:68722e7: /*
1:68722e7:  * Licensed to the Apache Software Foundation (ASF) under one
1:68722e7:  * or more contributor license agreements.  See the NOTICE file
1:68722e7:  * distributed with this work for additional information
1:68722e7:  * regarding copyright ownership.  The ASF licenses this file
1:68722e7:  * to you under the Apache License, Version 2.0 (the
1:68722e7:  * "License"); you may not use this file except in compliance
1:68722e7:  * with the License.  You may obtain a copy of the License at
1:68722e7:  *
1:68722e7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:68722e7:  *
1:68722e7:  * Unless required by applicable law or agreed to in writing, software
1:68722e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:68722e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:68722e7:  * See the License for the specific language governing permissions and
1:68722e7:  * limitations under the License.
1:68722e7:  */
1:68722e7: package org.apache.cassandra.service;
2:68722e7: 
1:68722e7: import java.util.ArrayList;
1:68722e7: import java.util.List;
1:68722e7: 
1:dc9ed46: import io.netty.util.concurrent.FastThreadLocal;
1:dbf6e62: import org.apache.cassandra.concurrent.ExecutorLocal;
1:68722e7: import org.apache.cassandra.utils.FBUtilities;
1:68722e7: 
1:dbf6e62: public class ClientWarn implements ExecutorLocal<ClientWarn.State>
3:68722e7: {
1:68722e7:     private static final String TRUNCATED = " [truncated]";
1:dc9ed46:     private static final FastThreadLocal<State> warnLocal = new FastThreadLocal<>();
1:dbf6e62:     public static ClientWarn instance = new ClientWarn();
1:68722e7: 
1:68722e7:     private ClientWarn()
1:68722e7:     {
1:68722e7:     }
1:68722e7: 
1:68d2526:     public State get()
1:68d2526:     {
1:dbf6e62:         return warnLocal.get();
1:68722e7:     }
1:68722e7: 
1:68d2526:     public void set(State value)
1:68d2526:     {
1:dbf6e62:         warnLocal.set(value);
1:68722e7:     }
1:68722e7: 
1:dbf6e62:     public void warn(String text)
1:68722e7:     {
1:dbf6e62:         State state = warnLocal.get();
1:dbf6e62:         if (state != null)
1:dbf6e62:             state.add(text);
1:68722e7:     }
1:68722e7: 
1:dbf6e62:     public void captureWarnings()
1:68722e7:     {
1:dbf6e62:         warnLocal.set(new State());
1:68722e7:     }
1:68722e7: 
1:dbf6e62:     public List<String> getWarnings()
1:68722e7:     {
1:dbf6e62:         State state = warnLocal.get();
1:dbf6e62:         if (state == null || state.warnings.isEmpty())
1:68722e7:             return null;
1:dbf6e62:         return state.warnings;
1:68722e7:     }
1:68722e7: 
1:dbf6e62:     public void resetWarnings()
1:68722e7:     {
1:68722e7:         warnLocal.remove();
1:68722e7:     }
1:dbf6e62: 
1:dbf6e62:     public static class State
1:dbf6e62:     {
1:dbf6e62:         private final List<String> warnings = new ArrayList<>();
1:dbf6e62: 
1:dbf6e62:         private void add(String warning)
1:dbf6e62:         {
1:dbf6e62:             if (warnings.size() < FBUtilities.MAX_UNSIGNED_SHORT)
1:dbf6e62:                 warnings.add(maybeTruncate(warning));
1:dbf6e62:         }
1:dbf6e62: 
1:dbf6e62:         private static String maybeTruncate(String warning)
1:dbf6e62:         {
1:dbf6e62:             return warning.length() > FBUtilities.MAX_UNSIGNED_SHORT
1:dbf6e62:                    ? warning.substring(0, FBUtilities.MAX_UNSIGNED_SHORT - TRUNCATED.length()) + TRUNCATED
1:dbf6e62:                    : warning;
1:dbf6e62:         }
1:dbf6e62: 
1:dbf6e62:     }
1:68722e7: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public State get()
1:     {
1:     public void set(State value)
1:     {
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.concurrent.FastThreadLocal;
1:     private static final FastThreadLocal<State> warnLocal = new FastThreadLocal<>();
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:dbf6e62
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.concurrent.ExecutorLocal;
1: public class ClientWarn implements ExecutorLocal<ClientWarn.State>
0:     private static final ThreadLocal<ClientWarn.State> warnLocal = new ThreadLocal<>();
1:     public static ClientWarn instance = new ClientWarn();
0:     public State get() {
1:         return warnLocal.get();
0:     public void set(State value) {
1:         warnLocal.set(value);
1:     public void warn(String text)
1:         State state = warnLocal.get();
1:         if (state != null)
1:             state.add(text);
1:     public void captureWarnings()
1:         warnLocal.set(new State());
1:     public List<String> getWarnings()
1:         State state = warnLocal.get();
1:         if (state == null || state.warnings.isEmpty())
1:         return state.warnings;
1:     public void resetWarnings()
1: 
1:     public static class State
1:     {
1:         private final List<String> warnings = new ArrayList<>();
1: 
1:         private void add(String warning)
1:         {
1:             if (warnings.size() < FBUtilities.MAX_UNSIGNED_SHORT)
1:                 warnings.add(maybeTruncate(warning));
1:         }
1: 
1:         private static String maybeTruncate(String warning)
1:         {
1:             return warning.length() > FBUtilities.MAX_UNSIGNED_SHORT
1:                    ? warning.substring(0, FBUtilities.MAX_UNSIGNED_SHORT - TRUNCATED.length()) + TRUNCATED
1:                    : warning;
1:         }
1: 
1:     }
commit:68722e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public class ClientWarn
1: {
1:     private static final String TRUNCATED = " [truncated]";
0:     private static final ThreadLocal<ClientWarn> warnLocal = new ThreadLocal<>();
1: 
0:     private final List<String> warnings = new ArrayList<>();
1: 
1:     private ClientWarn()
1:     {
1:     }
1: 
0:     public static void warn(String text)
1:     {
0:         ClientWarn warner = warnLocal.get();
0:         if (warner != null)
0:             warner.add(text);
1:     }
1: 
0:     private void add(String warning)
1:     {
0:         if (warnings.size() < FBUtilities.MAX_UNSIGNED_SHORT)
0:             warnings.add(maybeTruncate(warning));
1:     }
1: 
0:     private static String maybeTruncate(String warning)
1:     {
0:         return warning.length() > FBUtilities.MAX_UNSIGNED_SHORT
0:              ? warning.substring(0, FBUtilities.MAX_UNSIGNED_SHORT - TRUNCATED.length()) + TRUNCATED
0:              : warning;
1:     }
1: 
0:     public static void captureWarnings()
1:     {
0:         warnLocal.set(new ClientWarn());
1:     }
1: 
0:     public static List<String> getWarnings()
1:     {
0:         ClientWarn warner = warnLocal.get();
0:         if (warner == null || warner.warnings.isEmpty())
1:             return null;
0:         return warner.warnings;
1:     }
1: 
0:     public static void resetWarnings()
1:     {
1:         warnLocal.remove();
1:     }
1: }
============================================================================