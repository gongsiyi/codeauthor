1:e31e216: /*
1:e31e216:  * Licensed to the Apache Software Foundation (ASF) under one
1:e31e216:  * or more contributor license agreements.  See the NOTICE file
1:e31e216:  * distributed with this work for additional information
1:e31e216:  * regarding copyright ownership.  The ASF licenses this file
1:e31e216:  * to you under the Apache License, Version 2.0 (the
1:e31e216:  * "License"); you may not use this file except in compliance
1:e31e216:  * with the License.  You may obtain a copy of the License at
1:e31e216:  *
1:e31e216:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e31e216:  *
1:e31e216:  * Unless required by applicable law or agreed to in writing, software
1:e31e216:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e31e216:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e31e216:  * See the License for the specific language governing permissions and
1:e31e216:  * limitations under the License.
1:e31e216:  */
1:e31e216: 
1:e31e216: package org.apache.cassandra.db.commitlog;
1:e31e216: 
1:e31e216: import java.nio.ByteBuffer;
1:e31e216: import java.util.Queue;
1:e31e216: import java.util.concurrent.ConcurrentLinkedQueue;
1:e31e216: import java.util.concurrent.atomic.AtomicInteger;
1:e31e216: 
1:e31e216: import io.netty.util.concurrent.FastThreadLocal;
1:e31e216: import org.apache.cassandra.io.compress.BufferType;
1:e31e216: import org.apache.cassandra.io.util.FileUtils;
1:e31e216: 
1:e31e216: /**
1:e31e216:  * A very simple Bytebuffer pool with a fixed allocation size and a cached max allocation count. Will allow
1:e31e216:  * you to go past the "max", freeing all buffers allocated beyond the max buffer count on release.
1:e31e216:  *
1:e31e216:  * Has a reusable thread local ByteBuffer that users can make use of.
1:e31e216:  */
1:e31e216: public class SimpleCachedBufferPool
2:e31e216: {
1:e31e216:     protected static final FastThreadLocal<ByteBuffer> reusableBufferHolder = new FastThreadLocal<ByteBuffer>()
1:e31e216:     {
1:e31e216:         protected ByteBuffer initialValue()
1:e31e216:         {
1:e31e216:             return ByteBuffer.allocate(0);
1:e31e216:         }
1:e31e216:     };
1:e31e216: 
1:e31e216:     private Queue<ByteBuffer> bufferPool = new ConcurrentLinkedQueue<>();
1:e31e216:     private AtomicInteger usedBuffers = new AtomicInteger(0);
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * Maximum number of buffers in the compression pool. Any buffers above this count that are allocated will be cleaned
1:e31e216:      * upon release rather than held and re-used.
1:e31e216:      */
1:e31e216:     private final int maxBufferPoolSize;
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * Size of individual buffer segments on allocation.
1:e31e216:      */
1:e31e216:     private final int bufferSize;
1:e31e216: 
1:1f74142:     private BufferType preferredReusableBufferType = BufferType.ON_HEAP;
1:1f74142: 
1:e31e216:     public SimpleCachedBufferPool(int maxBufferPoolSize, int bufferSize)
1:e31e216:     {
1:e31e216:         this.maxBufferPoolSize = maxBufferPoolSize;
1:e31e216:         this.bufferSize = bufferSize;
1:e31e216:     }
1:e31e216: 
1:e31e216:     public ByteBuffer createBuffer(BufferType bufferType)
1:e31e216:     {
1:e31e216:         usedBuffers.incrementAndGet();
1:e31e216:         ByteBuffer buf = bufferPool.poll();
1:e31e216:         if (buf != null)
1:e31e216:         {
1:e31e216:             buf.clear();
1:e31e216:             return buf;
1:e31e216:         }
1:e31e216:         return bufferType.allocate(bufferSize);
1:e31e216:     }
1:e31e216: 
1:1f74142:     public ByteBuffer getThreadLocalReusableBuffer(int size)
1:e31e216:     {
1:1f74142:         ByteBuffer result = reusableBufferHolder.get();
1:68d2526:         if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
1:68d2526:         {
1:1f74142:             FileUtils.clean(result);
1:1f74142:             result = preferredReusableBufferType.allocate(size);
1:1f74142:             reusableBufferHolder.set(result);
1:1f74142:         }
1:1f74142:         return result;
1:e31e216:     }
1:e31e216: 
1:68d2526:     public void setPreferredReusableBufferType(BufferType type)
1:68d2526:     {
1:1f74142:         preferredReusableBufferType = type;
1:e31e216:     }
1:e31e216: 
1:e31e216:     public void releaseBuffer(ByteBuffer buffer)
1:e31e216:     {
1:e31e216:         usedBuffers.decrementAndGet();
1:e31e216: 
1:e31e216:         if (bufferPool.size() < maxBufferPoolSize)
1:e31e216:             bufferPool.add(buffer);
1:e31e216:         else
1:e31e216:             FileUtils.clean(buffer);
1:e31e216:     }
1:e31e216: 
1:e31e216:     public void shutdown()
1:e31e216:     {
1:e31e216:         bufferPool.clear();
1:e31e216:     }
1:e31e216: 
1:e31e216:     public boolean atLimit()
1:e31e216:     {
1:e31e216:         return usedBuffers.get() >= maxBufferPoolSize;
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Override
1:e31e216:     public String toString()
1:e31e216:     {
1:e31e216:         return new StringBuilder()
1:e31e216:                .append("SimpleBufferPool:")
1:e31e216:                .append(" bufferCount:").append(usedBuffers.get())
1:e31e216:                .append(", bufferSize:").append(maxBufferPoolSize)
1:e31e216:                .append(", buffer size:").append(bufferSize)
1:e31e216:                .toString();
1:e31e216:     }
1:e31e216: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:         if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     public void setPreferredReusableBufferType(BufferType type)
1:     {
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:1f74142
/////////////////////////////////////////////////////////////////////////
1:     private BufferType preferredReusableBufferType = BufferType.ON_HEAP;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer getThreadLocalReusableBuffer(int size)
1:         ByteBuffer result = reusableBufferHolder.get();
0:         if (result.capacity() < size || BufferType.typeOf(result) != preferredReusableBufferType) {
1:             FileUtils.clean(result);
1:             result = preferredReusableBufferType.allocate(size);
1:             reusableBufferHolder.set(result);
1:         }
1:         return result;
0:     public void setPreferredReusableBufferType(BufferType type) {
1:         preferredReusableBufferType = type;
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Queue;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import io.netty.util.concurrent.FastThreadLocal;
1: import org.apache.cassandra.io.compress.BufferType;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: /**
1:  * A very simple Bytebuffer pool with a fixed allocation size and a cached max allocation count. Will allow
1:  * you to go past the "max", freeing all buffers allocated beyond the max buffer count on release.
1:  *
1:  * Has a reusable thread local ByteBuffer that users can make use of.
1:  */
1: public class SimpleCachedBufferPool
1: {
1:     protected static final FastThreadLocal<ByteBuffer> reusableBufferHolder = new FastThreadLocal<ByteBuffer>()
1:     {
1:         protected ByteBuffer initialValue()
1:         {
1:             return ByteBuffer.allocate(0);
1:         }
1:     };
1: 
1:     private Queue<ByteBuffer> bufferPool = new ConcurrentLinkedQueue<>();
1:     private AtomicInteger usedBuffers = new AtomicInteger(0);
1: 
1:     /**
1:      * Maximum number of buffers in the compression pool. Any buffers above this count that are allocated will be cleaned
1:      * upon release rather than held and re-used.
1:      */
1:     private final int maxBufferPoolSize;
1: 
1:     /**
1:      * Size of individual buffer segments on allocation.
1:      */
1:     private final int bufferSize;
1: 
1:     public SimpleCachedBufferPool(int maxBufferPoolSize, int bufferSize)
1:     {
1:         this.maxBufferPoolSize = maxBufferPoolSize;
1:         this.bufferSize = bufferSize;
1:     }
1: 
1:     public ByteBuffer createBuffer(BufferType bufferType)
1:     {
1:         usedBuffers.incrementAndGet();
1:         ByteBuffer buf = bufferPool.poll();
1:         if (buf != null)
1:         {
1:             buf.clear();
1:             return buf;
1:         }
1:         return bufferType.allocate(bufferSize);
1:     }
1: 
0:     public ByteBuffer getThreadLocalReusableBuffer()
1:     {
0:         return reusableBufferHolder.get();
1:     }
1: 
0:     public void setThreadLocalReusableBuffer(ByteBuffer buffer)
1:     {
0:         reusableBufferHolder.set(buffer);
1:     }
1: 
1:     public void releaseBuffer(ByteBuffer buffer)
1:     {
1:         usedBuffers.decrementAndGet();
1: 
1:         if (bufferPool.size() < maxBufferPoolSize)
1:             bufferPool.add(buffer);
1:         else
1:             FileUtils.clean(buffer);
1:     }
1: 
1:     public void shutdown()
1:     {
1:         bufferPool.clear();
1:     }
1: 
1:     public boolean atLimit()
1:     {
1:         return usedBuffers.get() >= maxBufferPoolSize;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return new StringBuilder()
1:                .append("SimpleBufferPool:")
1:                .append(" bufferCount:").append(usedBuffers.get())
1:                .append(", bufferSize:").append(maxBufferPoolSize)
1:                .append(", buffer size:").append(bufferSize)
1:                .toString();
1:     }
1: }
============================================================================