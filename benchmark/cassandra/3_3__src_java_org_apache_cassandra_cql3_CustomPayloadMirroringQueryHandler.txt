1:cc5128a: /*
1:cc5128a:  * Licensed to the Apache Software Foundation (ASF) under one
1:cc5128a:  * or more contributor license agreements.  See the NOTICE file
1:cc5128a:  * distributed with this work for additional information
1:cc5128a:  * regarding copyright ownership.  The ASF licenses this file
1:cc5128a:  * to you under the Apache License, Version 2.0 (the
1:cc5128a:  * "License"); you may not use this file except in compliance
1:cc5128a:  * with the License.  You may obtain a copy of the License at
1:cc5128a:  *
1:cc5128a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:cc5128a:  *
1:cc5128a:  * Unless required by applicable law or agreed to in writing, software
1:cc5128a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cc5128a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cc5128a:  * See the License for the specific language governing permissions and
1:cc5128a:  * limitations under the License.
1:cc5128a:  */
1:cc5128a: package org.apache.cassandra.cql3;
1:cc5128a: 
1:6f93bd1: import java.nio.ByteBuffer;
1:cc5128a: import java.util.Map;
1:cc5128a: 
1:cc5128a: import org.apache.cassandra.cql3.statements.BatchStatement;
1:cc5128a: import org.apache.cassandra.cql3.statements.ParsedStatement;
1:cc5128a: import org.apache.cassandra.service.QueryState;
1:cc5128a: import org.apache.cassandra.transport.messages.ResultMessage;
1:cc5128a: import org.apache.cassandra.utils.MD5Digest;
1:cc5128a: 
1:cc5128a: /**
1:cc5128a:  * Custom QueryHandler that sends custom request payloads back with the result.
1:cc5128a:  * Used to facilitate testing.
1:cc5128a:  * Enabled with system property cassandra.custom_query_handler_class.
1:cc5128a:  */
1:cc5128a: public class CustomPayloadMirroringQueryHandler implements QueryHandler
1:cc5128a: {
1:cc5128a:     static QueryProcessor queryProcessor = QueryProcessor.instance;
1:cc5128a: 
1:6f93bd1:     public ResultMessage process(String query,
1:6f93bd1:                                  QueryState state,
1:6f93bd1:                                  QueryOptions options,
1:aa83c94:                                  Map<String, ByteBuffer> customPayload,
1:aa83c94:                                  long queryStartNanoTime)
1:cc5128a:     {
1:aa83c94:         ResultMessage result = queryProcessor.process(query, state, options, customPayload, queryStartNanoTime);
1:cc5128a:         result.setCustomPayload(customPayload);
1:cc5128a:         return result;
1:cc5128a:     }
1:cc5128a: 
1:6f93bd1:     public ResultMessage.Prepared prepare(String query, QueryState state, Map<String, ByteBuffer> customPayload)
1:cc5128a:     {
1:cc5128a:         ResultMessage.Prepared prepared = queryProcessor.prepare(query, state, customPayload);
1:cc5128a:         prepared.setCustomPayload(customPayload);
1:cc5128a:         return prepared;
1:cc5128a:     }
1:cc5128a: 
1:cc5128a:     public ParsedStatement.Prepared getPrepared(MD5Digest id)
1:cc5128a:     {
1:cc5128a:         return queryProcessor.getPrepared(id);
1:cc5128a:     }
1:cc5128a: 
1:cc5128a:     public ParsedStatement.Prepared getPreparedForThrift(Integer id)
1:cc5128a:     {
1:cc5128a:         return queryProcessor.getPreparedForThrift(id);
1:cc5128a:     }
1:cc5128a: 
1:6f93bd1:     public ResultMessage processPrepared(CQLStatement statement,
1:6f93bd1:                                          QueryState state,
1:6f93bd1:                                          QueryOptions options,
1:aa83c94:                                          Map<String, ByteBuffer> customPayload,
1:aa83c94:                                          long queryStartNanoTime)
1:cc5128a:     {
1:aa83c94:         ResultMessage result = queryProcessor.processPrepared(statement, state, options, customPayload, queryStartNanoTime);
1:cc5128a:         result.setCustomPayload(customPayload);
1:cc5128a:         return result;
1:cc5128a:     }
1:cc5128a: 
1:6f93bd1:     public ResultMessage processBatch(BatchStatement statement,
1:6f93bd1:                                       QueryState state,
1:6f93bd1:                                       BatchQueryOptions options,
1:aa83c94:                                       Map<String, ByteBuffer> customPayload,
1:aa83c94:                                       long queryStartNanoTime)
1:cc5128a:     {
1:aa83c94:         ResultMessage result = queryProcessor.processBatch(statement, state, options, customPayload, queryStartNanoTime);
1:cc5128a:         result.setCustomPayload(customPayload);
1:cc5128a:         return result;
1:cc5128a:     }
1:cc5128a: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:                                  Map<String, ByteBuffer> customPayload,
1:                                  long queryStartNanoTime)
1:         ResultMessage result = queryProcessor.process(query, state, options, customPayload, queryStartNanoTime);
/////////////////////////////////////////////////////////////////////////
1:                                          Map<String, ByteBuffer> customPayload,
1:                                          long queryStartNanoTime)
1:         ResultMessage result = queryProcessor.processPrepared(statement, state, options, customPayload, queryStartNanoTime);
/////////////////////////////////////////////////////////////////////////
1:                                       Map<String, ByteBuffer> customPayload,
1:                                       long queryStartNanoTime)
1:         ResultMessage result = queryProcessor.processBatch(statement, state, options, customPayload, queryStartNanoTime);
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:6f93bd1
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage process(String query,
1:                                  QueryState state,
1:                                  QueryOptions options,
0:                                  Map<String, ByteBuffer> customPayload)
1:     public ResultMessage.Prepared prepare(String query, QueryState state, Map<String, ByteBuffer> customPayload)
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage processPrepared(CQLStatement statement,
1:                                          QueryState state,
1:                                          QueryOptions options,
0:                                          Map<String, ByteBuffer> customPayload)
1:     public ResultMessage processBatch(BatchStatement statement,
1:                                       QueryState state,
1:                                       BatchQueryOptions options,
0:                                       Map<String, ByteBuffer> customPayload)
author:Adam Holmberg
-------------------------------------------------------------------------------
commit:cc5128a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Map;
1: 
1: import org.apache.cassandra.cql3.statements.BatchStatement;
1: import org.apache.cassandra.cql3.statements.ParsedStatement;
1: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: import org.apache.cassandra.utils.MD5Digest;
1: 
1: /**
1:  * Custom QueryHandler that sends custom request payloads back with the result.
1:  * Used to facilitate testing.
1:  * Enabled with system property cassandra.custom_query_handler_class.
1:  */
1: public class CustomPayloadMirroringQueryHandler implements QueryHandler
1: {
1:     static QueryProcessor queryProcessor = QueryProcessor.instance;
1: 
0:     public ResultMessage process(String query, QueryState state, QueryOptions options, Map<String, byte[]> customPayload)
1:     {
0:         ResultMessage result = queryProcessor.process(query, state, options, customPayload);
1:         result.setCustomPayload(customPayload);
1:         return result;
1:     }
1: 
0:     public ResultMessage.Prepared prepare(String query, QueryState state, Map<String, byte[]> customPayload)
1:     {
1:         ResultMessage.Prepared prepared = queryProcessor.prepare(query, state, customPayload);
1:         prepared.setCustomPayload(customPayload);
1:         return prepared;
1:     }
1: 
1:     public ParsedStatement.Prepared getPrepared(MD5Digest id)
1:     {
1:         return queryProcessor.getPrepared(id);
1:     }
1: 
1:     public ParsedStatement.Prepared getPreparedForThrift(Integer id)
1:     {
1:         return queryProcessor.getPreparedForThrift(id);
1:     }
1: 
0:     public ResultMessage processPrepared(CQLStatement statement, QueryState state, QueryOptions options, Map<String, byte[]> customPayload)
1:     {
0:         ResultMessage result = queryProcessor.processPrepared(statement, state, options, customPayload);
1:         result.setCustomPayload(customPayload);
1:         return result;
1:     }
1: 
0:     public ResultMessage processBatch(BatchStatement statement, QueryState state, BatchQueryOptions options, Map<String, byte[]> customPayload)
1:     {
0:         ResultMessage result = queryProcessor.processBatch(statement, state, options, customPayload);
1:         result.setCustomPayload(customPayload);
1:         return result;
1:     }
1: }
============================================================================