1:1aeca2b: /*
1:1aeca2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:1aeca2b:  * or more contributor license agreements.  See the NOTICE file
1:1aeca2b:  * distributed with this work for additional information
1:1aeca2b:  * regarding copyright ownership.  The ASF licenses this file
1:1aeca2b:  * to you under the Apache License, Version 2.0 (the
1:1aeca2b:  * "License"); you may not use this file except in compliance
1:1aeca2b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1aeca2b:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
1:a67f779: 
1:e7a385a: import java.nio.ByteBuffer;
1:07cdfd0: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.BytesSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:e7a385a: import org.apache.cassandra.utils.ByteBufferUtil;
1:56492f5: import org.apache.cassandra.utils.Hex;
1:2fd3268: 
1:05d8ffd: public class BytesType extends AbstractType<ByteBuffer>
6:835669a: {
1:242b717:     public static final BytesType instance = new BytesType();
1:a67f779: 
1:07594ee:     BytesType() {super(ComparisonType.BYTE_ORDER);} // singleton
1:07cdfd0: 
1:ad38251:     public ByteBuffer fromString(String source)
1:0fdab63:     {
1:df235c1:         try
1:835669a:         {
1:56492f5:             return ByteBuffer.wrap(Hex.hexToBytes(source));
6:835669a:         }
1:df235c1:         catch (NumberFormatException e)
1:acf1b18:         {
1:df235c1:             throw new MarshalException(String.format("cannot parse '%s' as hex bytes", source), e);
1:a67f779:         }
1:835669a:     }
1:e9c6742: 
1:e9c6742:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             String parsedString = (String) parsed;
1:c7b02d1:             if (!parsedString.startsWith("0x"))
1:c7b02d1:                 throw new MarshalException(String.format("String representation of blob is missing 0x prefix: %s", parsedString));
1:c7b02d1: 
1:c7b02d1:             return new Constants.Value(BytesType.instance.fromString(parsedString.substring(2)));
1:c7b02d1:         }
1:c7b02d1:         catch (ClassCastException | MarshalException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format("Value '%s' is not a valid blob representation: %s", parsed, exc.getMessage()));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return "\"0x" + ByteBufferUtil.bytesToHex(buffer) + '"';
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:0fdab63:     public boolean isCompatibleWith(AbstractType<?> previous)
1:a67f779:     {
1:0fdab63:         // Both asciiType and utf8Type really use bytes comparison and
1:0fdab63:         // bytesType validate everything, so it is compatible with the former.
1:0fdab63:         return this == previous || previous == AsciiType.instance || previous == UTF8Type.instance;
1:189a607:     }
1:189a607: 
1:189a607:     @Override
1:9da742d:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:189a607:     {
1:189a607:         // BytesType can read anything
1:acf1b18:         return true;
1:acf1b18:     }
1:acf1b18: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.BLOB;
1:a67f779:     }
1:a67f779: 
1:fc8b76f:     public TypeSerializer<ByteBuffer> getSerializer()
1:e9c6742:     {
1:e9c6742:         return BytesSerializer.instance;
1:e9c6742:     }
1:0fdab63: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     BytesType() {super(ComparisonType.BYTE_ORDER);} // singleton
/////////////////////////////////////////////////////////////////////////
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             String parsedString = (String) parsed;
1:             if (!parsedString.startsWith("0x"))
1:                 throw new MarshalException(String.format("String representation of blob is missing 0x prefix: %s", parsedString));
1: 
1:             return new Constants.Value(BytesType.instance.fromString(parsedString.substring(2)));
1:         }
1:         catch (ClassCastException | MarshalException exc)
1:         {
1:             throw new MarshalException(String.format("Value '%s' is not a valid blob representation: %s", parsed, exc.getMessage()));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return "\"0x" + ByteBufferUtil.bytesToHex(buffer) + '"';
1:     }
1: 
1:     @Override
commit:9dcdb8b
commit:9da742d
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public boolean isByteOrderComparable()
1:     {
1:         return true;
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5c54262
commit:189a607
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public boolean isValueCompatibleWith(AbstractType<?> previous)
1:     {
1:         // BytesType can read anything
0:         return true;
1:     }
1: 
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.BytesSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<ByteBuffer> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.BytesSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         return BytesSerializer.instance.serialize(bytes);
0:         return BytesSerializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         return BytesSerializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         BytesSerializer.instance.validate(bytes);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public AbstractSerializer<ByteBuffer> asComposer()
1:     {
1:         return BytesSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.HEX);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.BLOB;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
commit:0fdab63
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Override
1:     public boolean isCompatibleWith(AbstractType<?> previous)
1:     {
1:         // Both asciiType and utf8Type really use bytes comparison and
1:         // bytesType validate everything, so it is compatible with the former.
1:         return this == previous || previous == AsciiType.instance || previous == UTF8Type.instance;
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d7468ea
/////////////////////////////////////////////////////////////////////////
0:         if (o1 == null)
0:             return o2 == null ? 0 : -1;
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.JdbcBytes;
/////////////////////////////////////////////////////////////////////////
0:         return JdbcBytes.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return JdbcBytes.instance.getString(bytes);
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:835669a
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public boolean isSigned()
1:     {
0:         return false;
1:     }
0: 
0:     public boolean isCaseSensitive()
1:     {
0:         return false;
1:     }
0: 
0:     public boolean isCurrency()
1:     {
0:         return false;
1:     }
0: 
0:     public int getPrecision(ByteBuffer obj)
1:     {
0:         return -1;
1:     }
0: 
0:     public int getScale(ByteBuffer obj)
1:     {
0:         return -1;
1:     }
0: 
0:     public int getJdbcType()
1:     {
0:         return Types.BINARY;
1:     }
0: 
0:     public boolean needsQuotes()
1:     {
0:         return true;
1:     }
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0: 
0:     public ByteBuffer decompose(ByteBuffer value)
0:     {
0:         return value;
0:     }
0: 
commit:6350c16
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.bytesToHex(bytes);
commit:ad38251
/////////////////////////////////////////////////////////////////////////
0: 
1:     public ByteBuffer fromString(String source)
0:     {
0:         return ByteBuffer.wrap(source.getBytes());
0:     }
commit:187761a
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.compareUnsigned(o1, o2);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
0:         if(null == o1){
0:             if(null == o2) return 0;
0:             else return -1;
0:         }
0:               
0:         return ByteBufferUtil.compare(o1, o2);
0:     public String getString(ByteBuffer bytes)
commit:242b717
/////////////////////////////////////////////////////////////////////////
1:     public static final BytesType instance = new BytesType();
0: 
0:     BytesType() {} // singleton
0:     
commit:f8fa6d2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
0: 
0:         return FBUtilities.compareByteArrays(o1, o2);
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:88b0ee7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: 
/////////////////////////////////////////////////////////////////////////
0:         return Arrays.toString(bytes);
commit:438f387
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
0: 
0: public class BytesType extends AbstractType
0: {
0:     public int compare(byte[] o1, byte[] o2)
0:     {
0:         int length = Math.max(o1.length, o2.length);
0:         for (int i = 0; i < length; i++)
0:         {
0:             int index = i + 1;
0:             if (index > o1.length && index <= o2.length)
0:             {
0:                 return -1;
0:             }
0:             if (index > o2.length && index <= o1.length)
0:             {
0:                 return 1;
0:             }
0: 
0:             int delta = o1[i] - o2[i];
0:             if (delta != 0)
0:             {
0:                 return delta;
0:             }
0:         }
0:         return 0;
0:     }
0: 
0:     public String getString(byte[] bytes)
0:     {
0:         return bytes.toString();
0:     }
0: }
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:         return JdbcBytes.instance.decompose(value);
commit:56492f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Hex;
/////////////////////////////////////////////////////////////////////////
1:             return ByteBuffer.wrap(Hex.hexToBytes(source));
commit:2395fb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.term.BytesTerm;
/////////////////////////////////////////////////////////////////////////
0:         return BytesTerm.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return BytesTerm.instance.getString(bytes);
0:         return BytesTerm.instance.toString(byteBuffer);
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
commit:df235c1
/////////////////////////////////////////////////////////////////////////
1:         try
0:         {
0:             return ByteBuffer.wrap(FBUtilities.hexToBytes(source));
0:         }
1:         catch (NumberFormatException e)
0:         {
1:             throw new MarshalException(String.format("cannot parse '%s' as hex bytes", source), e);
0:         }
commit:079920a
/////////////////////////////////////////////////////////////////////////
0:         return FBUtilities.bytesToHex(bytes);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
0:     public String toString(ByteBuffer byteBuffer)
0:     {
0:         return getString(byteBuffer);
0:     }
0: 
commit:d4c800b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Class<ByteBuffer> getType()
0:     {
0:         return ByteBuffer.class;
0:     }
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
1: public class BytesType extends AbstractType<ByteBuffer>
0: 
0:     public ByteBuffer compose(ByteBuffer bytes)
0:     {
0:         return bytes.duplicate();
0:     }
0:         return BytesType.bytesCompare(o1, o2);
0:  
0:     }
0: 
0:     
0:     public static int bytesCompare(ByteBuffer o1, ByteBuffer o2)
0:     {
commit:8919434
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         return ByteBuffer.wrap(FBUtilities.hexToBytes(source));
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         // all bytes are legal.
0:     }
============================================================================