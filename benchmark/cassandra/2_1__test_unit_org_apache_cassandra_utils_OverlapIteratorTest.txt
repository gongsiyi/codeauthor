1:8b3221a: package org.apache.cassandra.utils;
1:8b3221a: /*
1:8b3221a:  *
1:8b3221a:  * Licensed to the Apache Software Foundation (ASF) under one
1:8b3221a:  * or more contributor license agreements.  See the NOTICE file
1:8b3221a:  * distributed with this work for additional information
1:8b3221a:  * regarding copyright ownership.  The ASF licenses this file
1:8b3221a:  * to you under the Apache License, Version 2.0 (the
1:8b3221a:  * "License"); you may not use this file except in compliance
1:8b3221a:  * with the License.  You may obtain a copy of the License at
1:8b3221a:  *
1:8b3221a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8b3221a:  *
1:8b3221a:  * Unless required by applicable law or agreed to in writing,
1:8b3221a:  * software distributed under the License is distributed on an
1:8b3221a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8b3221a:  * KIND, either express or implied.  See the License for the
1:8b3221a:  * specific language governing permissions and limitations
1:8b3221a:  * under the License.
1:8b3221a:  *
1:8b3221a:  */
2:8b3221a: 
1:8b3221a: 
1:8b3221a: import java.util.ArrayList;
1:8b3221a: import java.util.Collections;
1:8b3221a: import java.util.List;
1:8b3221a: import java.util.TreeSet;
1:8b3221a: import java.util.concurrent.ThreadLocalRandom;
1:8b3221a: 
1:8b3221a: import org.junit.Test;
1:8b3221a: 
1:8b3221a: import static org.junit.Assert.assertTrue;
1:8b3221a: 
1:8b3221a: public class OverlapIteratorTest
1:8b3221a: {
1:8b3221a: 
1:8b3221a:     private static List<Interval<Integer, Integer>> randomIntervals(int range, int increment, int count)
1:8b3221a:     {
1:8b3221a:         List<Integer> a = random(range, increment, count);
1:8b3221a:         List<Integer> b = random(range, increment, count);
1:8b3221a:         List<Interval<Integer, Integer>> r = new ArrayList<>();
1:8b3221a:         for (int i = 0 ; i < count ; i++)
1:8b3221a:         {
1:8b3221a:             r.add(a.get(i) < b.get(i) ? Interval.create(a.get(i), b.get(i), i)
1:8b3221a:                                       : Interval.create(b.get(i), a.get(i), i));
1:8b3221a:         }
1:8b3221a:         return r;
1:8b3221a:     }
1:8b3221a: 
1:8b3221a:     private static List<Integer> random(int range, int increment, int count)
1:8b3221a:     {
1:8b3221a:         List<Integer> random = new ArrayList<>();
1:8b3221a:         for (int i = 0 ; i < count ; i++)
1:8b3221a:         {
1:8b3221a:             int base = i * increment;
1:8b3221a:             random.add(ThreadLocalRandom.current().nextInt(base, base + range));
1:8b3221a:         }
1:8b3221a:         return random;
1:8b3221a:     }
1:8b3221a: 
1:8b3221a:     @Test
1:8b3221a:     public void test()
1:8b3221a:     {
1:8b3221a:         for (int i = 0 ; i < 10 ; i++)
1:8b3221a:         {
1:8b3221a:             test(1000, 0, 1000);
1:8b3221a:             test(100000, 100, 1000);
1:8b3221a:             test(1000000, 0, 1000);
1:8b3221a:         }
1:8b3221a:     }
1:8b3221a: 
1:8b3221a:     private void test(int range, int increment, int count)
1:8b3221a:     {
1:8b3221a:         compare(randomIntervals(range, increment, count), random(range, increment, count), 1);
1:8b3221a:         compare(randomIntervals(range, increment, count), random(range, increment, count), 2);
1:8b3221a:         compare(randomIntervals(range, increment, count), random(range, increment, count), 3);
1:8b3221a:     }
1:8b3221a: 
1:8b3221a:     private <I extends Comparable<I>, V> void compare(List<Interval<I, V>> intervals, List<I> points, int initCount)
1:8b3221a:     {
1:8b3221a:         Collections.sort(points);
1:8b3221a:         IntervalTree<I, V, Interval<I, V>> tree = IntervalTree.build(intervals);
1:8b3221a:         OverlapIterator<I, V> iter = new OverlapIterator<>(intervals);
1:8b3221a:         int initPoint = points.size() / initCount;
1:8b3221a:         int i = 0;
1:8b3221a:         for (I point : points)
1:8b3221a:         {
1:8b3221a:             if (i++ == initPoint)
1:8b3221a:                 iter = new OverlapIterator<>(intervals);
1:8b3221a:             iter.update(point);
1:8b3221a:             TreeSet<V> act = new TreeSet<>(iter.overlaps);
1:8b3221a:             TreeSet<V> exp = new TreeSet<>(tree.search(point));
1:8b3221a:             TreeSet<V> extra = new TreeSet<>(act);
1:8b3221a:             extra.removeAll(exp);
1:8b3221a:             TreeSet<V> missing = new TreeSet<>(exp);
1:8b3221a:             missing.removeAll(act);
1:8b3221a:             assertTrue(extra.isEmpty());
1:8b3221a:             assertTrue(missing.isEmpty());
1:8b3221a:         }
1:8b3221a:     }
1:8b3221a: 
1:8b3221a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8b3221a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: 
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInput;
0: import java.io.DataInputStream;
0: import java.io.IOException;
0: import java.lang.reflect.Constructor;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.TreeSet;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.db.TypeSizes;
0: import org.apache.cassandra.io.ISerializer;
0: import org.apache.cassandra.io.IVersionedSerializer;
0: import org.apache.cassandra.io.util.DataOutputBuffer;
0: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class OverlapIteratorTest
1: {
1: 
1:     private static List<Interval<Integer, Integer>> randomIntervals(int range, int increment, int count)
1:     {
1:         List<Integer> a = random(range, increment, count);
1:         List<Integer> b = random(range, increment, count);
1:         List<Interval<Integer, Integer>> r = new ArrayList<>();
1:         for (int i = 0 ; i < count ; i++)
1:         {
1:             r.add(a.get(i) < b.get(i) ? Interval.create(a.get(i), b.get(i), i)
1:                                       : Interval.create(b.get(i), a.get(i), i));
1:         }
1:         return r;
1:     }
1: 
1:     private static List<Integer> random(int range, int increment, int count)
1:     {
1:         List<Integer> random = new ArrayList<>();
1:         for (int i = 0 ; i < count ; i++)
1:         {
1:             int base = i * increment;
1:             random.add(ThreadLocalRandom.current().nextInt(base, base + range));
1:         }
1:         return random;
1:     }
1: 
1:     @Test
1:     public void test()
1:     {
1:         for (int i = 0 ; i < 10 ; i++)
1:         {
1:             test(1000, 0, 1000);
1:             test(100000, 100, 1000);
1:             test(1000000, 0, 1000);
1:         }
1:     }
1: 
1:     private void test(int range, int increment, int count)
1:     {
1:         compare(randomIntervals(range, increment, count), random(range, increment, count), 1);
1:         compare(randomIntervals(range, increment, count), random(range, increment, count), 2);
1:         compare(randomIntervals(range, increment, count), random(range, increment, count), 3);
1:     }
1: 
1:     private <I extends Comparable<I>, V> void compare(List<Interval<I, V>> intervals, List<I> points, int initCount)
1:     {
1:         Collections.sort(points);
1:         IntervalTree<I, V, Interval<I, V>> tree = IntervalTree.build(intervals);
1:         OverlapIterator<I, V> iter = new OverlapIterator<>(intervals);
1:         int initPoint = points.size() / initCount;
1:         int i = 0;
1:         for (I point : points)
1:         {
1:             if (i++ == initPoint)
1:                 iter = new OverlapIterator<>(intervals);
1:             iter.update(point);
1:             TreeSet<V> act = new TreeSet<>(iter.overlaps);
1:             TreeSet<V> exp = new TreeSet<>(tree.search(point));
1:             TreeSet<V> extra = new TreeSet<>(act);
1:             extra.removeAll(exp);
1:             TreeSet<V> missing = new TreeSet<>(exp);
1:             missing.removeAll(act);
1:             assertTrue(extra.isEmpty());
1:             assertTrue(missing.isEmpty());
1:         }
1:     }
1: 
1: }
============================================================================