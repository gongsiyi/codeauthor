1:18f0234: /*
1:18f0234:  * Licensed to the Apache Software Foundation (ASF) under one
1:18f0234:  * or more contributor license agreements.  See the NOTICE file
1:18f0234:  * distributed with this work for additional information
1:18f0234:  * regarding copyright ownership.  The ASF licenses this file
1:18f0234:  * to you under the Apache License, Version 2.0 (the
1:18f0234:  * "License"); you may not use this file except in compliance
1:18f0234:  * with the License.  You may obtain a copy of the License at
1:18f0234:  *
1:18f0234:  *     http://www.apache.org/licenses/LICENSE-2.0
1:18f0234:  *
1:18f0234:  * Unless required by applicable law or agreed to in writing, software
1:18f0234:  * distributed under the License is distributed on an "AS IS" BASIS,
1:18f0234:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:18f0234:  * See the License for the specific language governing permissions and
1:18f0234:  * limitations under the License.
1:18f0234:  */
1:18f0234: package org.apache.cassandra.utils;
1:18f0234: 
1:18f0234: import java.util.concurrent.atomic.AtomicLongArray;
1:18f0234: 
1:18f0234: import org.junit.Test;
1:18f0234: 
1:a991b64: import static org.junit.Assert.assertArrayEquals;
1:18f0234: 
1:18f0234: public class HistogramBuilderTest
1:18f0234: {
1:18f0234: 
1:18f0234:     @Test
1:18f0234:     public void testStdevEmpty()
1:18f0234:     {
1:18f0234:         EstimatedHistogram hist = new HistogramBuilder().buildWithStdevRangesAroundMean();
1:18f0234:         assertArrayEquals(new long[] { }, hist.getBucketOffsets());
1:18f0234:         assertArrayEquals(new long[] { 0 }, toArray(hist.buckets));
1:18f0234:     }
1:18f0234: 
1:18f0234:     @Test
1:18f0234:     public void testStdevSingletonRanges()
1:18f0234:     {
1:18f0234:         EstimatedHistogram hist;
1:18f0234:         hist = new HistogramBuilder(new long[] { 5, 5, 5, 5, 5 }).buildWithStdevRangesAroundMean();
1:18f0234:         assertArrayEquals(new long[] { 4, 5 }, hist.getBucketOffsets());
1:18f0234:         assertArrayEquals(new long[] { 0, 5, 0 }, toArray(hist.buckets));
1:18f0234:         // should behave exactly the same for negative numbers
1:18f0234:         hist = new HistogramBuilder(new long[] { -1 }).buildWithStdevRangesAroundMean();
1:18f0234:         assertArrayEquals(new long[] { -2, -1 }, hist.getBucketOffsets());
1:18f0234:         assertArrayEquals(new long[] { 0, 1, 0 }, toArray(hist.buckets));
1:18f0234:     }
1:18f0234: 
1:18f0234:     @Test
1:18f0234:     public void testStdevNearZeroStdev()
1:18f0234:     {
1:18f0234:         EstimatedHistogram hist;
1:18f0234:         long[] vals = new long[100000];
1:18f0234:         vals[0] = 99;
1:18f0234:         vals[1] = 101;
1:18f0234:         for (int i = 2 ; i < vals.length ; i++)
1:18f0234:             vals[i] = 100;
1:18f0234:         hist = new HistogramBuilder(vals).buildWithStdevRangesAroundMean();
1:18f0234:         assertArrayEquals(new long[] { 98, 99, 100, 101 }, hist.getBucketOffsets());
1:18f0234:         assertArrayEquals(new long[] { 0, 1, vals.length - 2, 1, 0 }, toArray(hist.buckets));
1:18f0234:     }
1:18f0234: 
1:18f0234:     @Test
1:18f0234:     public void testStdev()
1:18f0234:     {
1:18f0234:         long[] vals;
1:18f0234:         EstimatedHistogram hist;
1:18f0234:         vals = new long[] { -10, -3, -2, -2, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 10 };
1:18f0234:         hist = new HistogramBuilder(vals).buildWithStdevRangesAroundMean(2);
1:18f0234:         assertArrayEquals(new long[] { -11, -6, -3, 0, 3, 6, 10 }, hist.getBucketOffsets());
1:18f0234:         assertArrayEquals(new long[] { 0, 1, 1, 10, 10, 0, 1, 0 }, toArray(hist.buckets));
1:18f0234:     }
1:18f0234: 
1:18f0234:     private static long[] toArray(AtomicLongArray a)
1:18f0234:     {
1:18f0234:         final long[] r = new long[a.length()];
1:18f0234:         for (int i = 0 ; i < r.length ; i++)
1:18f0234:             r[i] = a.get(i);
1:18f0234:         return r;
1:18f0234:     }
1:18f0234: 
1:18f0234:     @Test
1:18f0234:     public void testStdevLargeNumbers()
1:18f0234:     {
1:18f0234:         long[] vals;
1:18f0234:         EstimatedHistogram hist;
1:18f0234:         vals = new long[100000];
1:18f0234:         for (int i = 0 ; i < vals.length ; i++)
1:18f0234:         {
1:18f0234:             if (i < vals.length * 0.6f)
1:18f0234:                 vals[i] = 60;
1:18f0234:             else if (i < vals.length * 0.8f)
1:18f0234:                 vals[i] = 120;
1:18f0234:             else if (i < vals.length * 0.9f)
1:18f0234:                 vals[i] = 180;
1:18f0234:             else if (i < vals.length * 0.95f)
1:18f0234:                 vals[i] = 240;
1:18f0234:             else if (i < vals.length * 0.98f)
1:18f0234:                 vals[i] = 320;
1:18f0234:             else
1:18f0234:                 vals[i] = 1000;
1:18f0234:         }
1:18f0234:         hist = new HistogramBuilder(vals).buildWithStdevRangesAroundMean(2);
1:18f0234:         assertArrayEquals(new long[] { 59, 120, 260, 400, 1000 }, hist.getBucketOffsets());
1:18f0234:         assertArrayEquals(new long[] { 0, 80000, 15000, 3000, 2000, 0 }, toArray(hist.buckets));
1:18f0234:     }
1:18f0234: 
1:18f0234: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertArrayEquals;
author:Benedict
-------------------------------------------------------------------------------
commit:18f0234
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.atomic.AtomicLongArray;
1: 
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class HistogramBuilderTest
1: {
1: 
1:     @Test
1:     public void testStdevEmpty()
1:     {
1:         EstimatedHistogram hist = new HistogramBuilder().buildWithStdevRangesAroundMean();
1:         assertArrayEquals(new long[] { }, hist.getBucketOffsets());
1:         assertArrayEquals(new long[] { 0 }, toArray(hist.buckets));
1:     }
1: 
1:     @Test
1:     public void testStdevSingletonRanges()
1:     {
1:         EstimatedHistogram hist;
1:         hist = new HistogramBuilder(new long[] { 5, 5, 5, 5, 5 }).buildWithStdevRangesAroundMean();
1:         assertArrayEquals(new long[] { 4, 5 }, hist.getBucketOffsets());
1:         assertArrayEquals(new long[] { 0, 5, 0 }, toArray(hist.buckets));
1:         // should behave exactly the same for negative numbers
1:         hist = new HistogramBuilder(new long[] { -1 }).buildWithStdevRangesAroundMean();
1:         assertArrayEquals(new long[] { -2, -1 }, hist.getBucketOffsets());
1:         assertArrayEquals(new long[] { 0, 1, 0 }, toArray(hist.buckets));
1:     }
1: 
1:     @Test
1:     public void testStdevNearZeroStdev()
1:     {
1:         EstimatedHistogram hist;
1:         long[] vals = new long[100000];
1:         vals[0] = 99;
1:         vals[1] = 101;
1:         for (int i = 2 ; i < vals.length ; i++)
1:             vals[i] = 100;
1:         hist = new HistogramBuilder(vals).buildWithStdevRangesAroundMean();
1:         assertArrayEquals(new long[] { 98, 99, 100, 101 }, hist.getBucketOffsets());
1:         assertArrayEquals(new long[] { 0, 1, vals.length - 2, 1, 0 }, toArray(hist.buckets));
1:     }
1: 
1:     @Test
1:     public void testStdev()
1:     {
1:         long[] vals;
1:         EstimatedHistogram hist;
1:         vals = new long[] { -10, -3, -2, -2, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 10 };
1:         hist = new HistogramBuilder(vals).buildWithStdevRangesAroundMean(2);
1:         assertArrayEquals(new long[] { -11, -6, -3, 0, 3, 6, 10 }, hist.getBucketOffsets());
1:         assertArrayEquals(new long[] { 0, 1, 1, 10, 10, 0, 1, 0 }, toArray(hist.buckets));
1:     }
1: 
1:     private static long[] toArray(AtomicLongArray a)
1:     {
1:         final long[] r = new long[a.length()];
1:         for (int i = 0 ; i < r.length ; i++)
1:             r[i] = a.get(i);
1:         return r;
1:     }
1: 
1:     @Test
1:     public void testStdevLargeNumbers()
1:     {
1:         long[] vals;
1:         EstimatedHistogram hist;
1:         vals = new long[100000];
1:         for (int i = 0 ; i < vals.length ; i++)
1:         {
1:             if (i < vals.length * 0.6f)
1:                 vals[i] = 60;
1:             else if (i < vals.length * 0.8f)
1:                 vals[i] = 120;
1:             else if (i < vals.length * 0.9f)
1:                 vals[i] = 180;
1:             else if (i < vals.length * 0.95f)
1:                 vals[i] = 240;
1:             else if (i < vals.length * 0.98f)
1:                 vals[i] = 320;
1:             else
1:                 vals[i] = 1000;
1:         }
1:         hist = new HistogramBuilder(vals).buildWithStdevRangesAroundMean(2);
1:         assertArrayEquals(new long[] { 59, 120, 260, 400, 1000 }, hist.getBucketOffsets());
1:         assertArrayEquals(new long[] { 0, 80000, 15000, 3000, 2000, 0 }, toArray(hist.buckets));
1:     }
1: 
1: }
============================================================================