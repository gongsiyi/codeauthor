1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
3:96d41f0: 
1:96d41f0: import java.util.UUID;
1:037d24e: import java.util.concurrent.BlockingQueue;
1:037d24e: import java.util.concurrent.LinkedBlockingQueue;
1:96d41f0: 
1:037d24e: import org.apache.cassandra.config.Config;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:96d41f0: 
1:96d41f0: /**
1:96d41f0:  * A primitive pool of {@link HintsBuffer} buffers. Under normal conditions should only hold two buffers - the currently
1:96d41f0:  * written to one, and a reserve buffer to switch to when the first one is beyond capacity.
1:96d41f0:  */
1:96d41f0: final class HintsBufferPool
1:96d41f0: {
1:96d41f0:     interface FlushCallback
1:96d41f0:     {
1:96d41f0:         void flush(HintsBuffer buffer, HintsBufferPool pool);
1:96d41f0:     }
1:96d41f0: 
1:037d24e:     static final int MAX_ALLOCATED_BUFFERS = Integer.getInteger(Config.PROPERTY_PREFIX + "MAX_HINT_BUFFERS", 3);
1:96d41f0:     private volatile HintsBuffer currentBuffer;
1:037d24e:     private final BlockingQueue<HintsBuffer> reserveBuffers;
1:96d41f0:     private final int bufferSize;
1:96d41f0:     private final FlushCallback flushCallback;
1:037d24e:     private int allocatedBuffers = 0;
1:96d41f0: 
1:96d41f0:     HintsBufferPool(int bufferSize, FlushCallback flushCallback)
1:96d41f0:     {
1:037d24e:         reserveBuffers = new LinkedBlockingQueue<>();
1:96d41f0:         this.bufferSize = bufferSize;
1:96d41f0:         this.flushCallback = flushCallback;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     /**
1:96d41f0:      * @param hostIds host ids of the hint's target nodes
1:96d41f0:      * @param hint the hint to store
1:96d41f0:      */
1:96d41f0:     void write(Iterable<UUID> hostIds, Hint hint)
1:96d41f0:     {
1:96d41f0:         int hintSize = (int) Hint.serializer.serializedSize(hint, MessagingService.current_version);
1:96d41f0:         try (HintsBuffer.Allocation allocation = allocate(hintSize))
1:96d41f0:         {
1:96d41f0:             allocation.write(hostIds, hint);
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private HintsBuffer.Allocation allocate(int hintSize)
1:96d41f0:     {
1:96d41f0:         HintsBuffer current = currentBuffer();
1:96d41f0: 
1:96d41f0:         while (true)
1:96d41f0:         {
1:96d41f0:             HintsBuffer.Allocation allocation = current.allocate(hintSize);
1:96d41f0:             if (allocation != null)
1:96d41f0:                 return allocation;
1:96d41f0: 
1:96d41f0:             // allocation failed due to insufficient size remaining in the buffer
1:96d41f0:             if (switchCurrentBuffer(current))
1:96d41f0:                 flushCallback.flush(current, this);
1:96d41f0: 
1:96d41f0:             current = currentBuffer;
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:037d24e:     void offer(HintsBuffer buffer)
1:96d41f0:     {
1:037d24e:         if (!reserveBuffers.offer(buffer))
1:037d24e:             throw new RuntimeException("Failed to store buffer");
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     // A wrapper to ensure a non-null currentBuffer value on the first call.
1:96d41f0:     HintsBuffer currentBuffer()
1:96d41f0:     {
1:96d41f0:         if (currentBuffer == null)
1:96d41f0:             initializeCurrentBuffer();
1:96d41f0: 
1:96d41f0:         return currentBuffer;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private synchronized void initializeCurrentBuffer()
1:96d41f0:     {
1:96d41f0:         if (currentBuffer == null)
1:96d41f0:             currentBuffer = createBuffer();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private synchronized boolean switchCurrentBuffer(HintsBuffer previous)
1:96d41f0:     {
1:96d41f0:         if (currentBuffer != previous)
2:96d41f0:             return false;
1:96d41f0: 
1:96d41f0:         HintsBuffer buffer = reserveBuffers.poll();
1:037d24e:         if (buffer == null && allocatedBuffers >= MAX_ALLOCATED_BUFFERS)
1:037d24e:         {
1:037d24e:             try
1:037d24e:             {
1:037d24e:                 //This BlockingQueue.take is a target for byteman in HintsBufferPoolTest
1:037d24e:                 buffer = reserveBuffers.take();
1:037d24e:             }
1:037d24e:             catch (InterruptedException e)
1:037d24e:             {
1:037d24e:                 throw new RuntimeException(e);
1:037d24e:             }
1:037d24e:         }
1:96d41f0:         currentBuffer = buffer == null ? createBuffer() : buffer;
1:96d41f0: 
2:96d41f0:         return true;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private HintsBuffer createBuffer()
1:96d41f0:     {
1:037d24e:         allocatedBuffers++;
1:96d41f0:         return HintsBuffer.create(bufferSize);
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:037d24e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import org.apache.cassandra.config.Config;
/////////////////////////////////////////////////////////////////////////
1:     static final int MAX_ALLOCATED_BUFFERS = Integer.getInteger(Config.PROPERTY_PREFIX + "MAX_HINT_BUFFERS", 3);
1:     private final BlockingQueue<HintsBuffer> reserveBuffers;
1:     private int allocatedBuffers = 0;
1:         reserveBuffers = new LinkedBlockingQueue<>();
/////////////////////////////////////////////////////////////////////////
1:     void offer(HintsBuffer buffer)
1:         if (!reserveBuffers.offer(buffer))
1:             throw new RuntimeException("Failed to store buffer");
/////////////////////////////////////////////////////////////////////////
1:         if (buffer == null && allocatedBuffers >= MAX_ALLOCATED_BUFFERS)
1:         {
1:             try
1:             {
1:                 //This BlockingQueue.take is a target for byteman in HintsBufferPoolTest
1:                 buffer = reserveBuffers.take();
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:         allocatedBuffers++;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
0: import java.util.Queue;
1: import java.util.UUID;
0: import java.util.concurrent.ConcurrentLinkedQueue;
1: 
1: import org.apache.cassandra.net.MessagingService;
1: 
1: /**
1:  * A primitive pool of {@link HintsBuffer} buffers. Under normal conditions should only hold two buffers - the currently
1:  * written to one, and a reserve buffer to switch to when the first one is beyond capacity.
1:  */
1: final class HintsBufferPool
1: {
1:     interface FlushCallback
1:     {
1:         void flush(HintsBuffer buffer, HintsBufferPool pool);
1:     }
1: 
1:     private volatile HintsBuffer currentBuffer;
0:     private final Queue<HintsBuffer> reserveBuffers;
1:     private final int bufferSize;
1:     private final FlushCallback flushCallback;
1: 
1:     HintsBufferPool(int bufferSize, FlushCallback flushCallback)
1:     {
0:         reserveBuffers = new ConcurrentLinkedQueue<>();
1: 
1:         this.bufferSize = bufferSize;
1:         this.flushCallback = flushCallback;
1:     }
1: 
1:     /**
1:      * @param hostIds host ids of the hint's target nodes
1:      * @param hint the hint to store
1:      */
1:     void write(Iterable<UUID> hostIds, Hint hint)
1:     {
1:         int hintSize = (int) Hint.serializer.serializedSize(hint, MessagingService.current_version);
1:         try (HintsBuffer.Allocation allocation = allocate(hintSize))
1:         {
1:             allocation.write(hostIds, hint);
1:         }
1:     }
1: 
1:     private HintsBuffer.Allocation allocate(int hintSize)
1:     {
1:         HintsBuffer current = currentBuffer();
1: 
1:         while (true)
1:         {
1:             HintsBuffer.Allocation allocation = current.allocate(hintSize);
1:             if (allocation != null)
1:                 return allocation;
1: 
1:             // allocation failed due to insufficient size remaining in the buffer
1:             if (switchCurrentBuffer(current))
1:                 flushCallback.flush(current, this);
1: 
1:             current = currentBuffer;
1:         }
1:     }
1: 
0:     boolean offer(HintsBuffer buffer)
1:     {
0:         if (!reserveBuffers.isEmpty())
1:             return false;
1: 
0:         reserveBuffers.offer(buffer);
1:         return true;
1:     }
1: 
1:     // A wrapper to ensure a non-null currentBuffer value on the first call.
1:     HintsBuffer currentBuffer()
1:     {
1:         if (currentBuffer == null)
1:             initializeCurrentBuffer();
1: 
1:         return currentBuffer;
1:     }
1: 
1:     private synchronized void initializeCurrentBuffer()
1:     {
1:         if (currentBuffer == null)
1:             currentBuffer = createBuffer();
1:     }
1: 
1:     private synchronized boolean switchCurrentBuffer(HintsBuffer previous)
1:     {
1:         if (currentBuffer != previous)
1:             return false;
1: 
1:         HintsBuffer buffer = reserveBuffers.poll();
1:         currentBuffer = buffer == null ? createBuffer() : buffer;
1: 
1:         return true;
1:     }
1: 
1:     private HintsBuffer createBuffer()
1:     {
1:         return HintsBuffer.create(bufferSize);
1:     }
1: }
============================================================================