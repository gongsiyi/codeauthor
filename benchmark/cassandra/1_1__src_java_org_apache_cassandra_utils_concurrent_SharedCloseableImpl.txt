1:207751c: /*
1:207751c: * Licensed to the Apache Software Foundation (ASF) under one
1:207751c: * or more contributor license agreements.  See the NOTICE file
1:207751c: * distributed with this work for additional information
1:207751c: * regarding copyright ownership.  The ASF licenses this file
1:207751c: * to you under the Apache License, Version 2.0 (the
1:207751c: * "License"); you may not use this file except in compliance
1:207751c: * with the License.  You may obtain a copy of the License at
1:207751c: *
1:207751c: *    http://www.apache.org/licenses/LICENSE-2.0
1:207751c: *
1:207751c: * Unless required by applicable law or agreed to in writing,
1:207751c: * software distributed under the License is distributed on an
1:207751c: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:207751c: * KIND, either express or implied.  See the License for the
1:207751c: * specific language governing permissions and limitations
1:207751c: * under the License.
1:207751c: */
1:207751c: package org.apache.cassandra.utils.concurrent;
1:207751c: 
1:207751c: /**
1:207751c:  * A simple abstract implementation of SharedCloseable
1:207751c:  */
1:207751c: public abstract class SharedCloseableImpl implements SharedCloseable
1:207751c: {
1:207751c:     final Ref<?> ref;
1:207751c: 
1:207751c:     public SharedCloseableImpl(RefCounted.Tidy tidy)
1:207751c:     {
1:207751c:         ref = new Ref<Object>(null, tidy);
1:207751c:     }
1:207751c: 
1:207751c:     protected SharedCloseableImpl(SharedCloseableImpl copy)
1:207751c:     {
1:207751c:         this.ref = copy.ref.ref();
1:207751c:     }
1:207751c: 
1:207751c:     public boolean isCleanedUp()
1:207751c:     {
1:207751c:         return ref.globalCount() == 0;
1:207751c:     }
1:207751c: 
1:207751c:     public void close()
1:207751c:     {
1:207751c:         ref.ensureReleased();
1:207751c:     }
1:8704006: 
1:8704006:     public Throwable close(Throwable accumulate)
1:8704006:     {
1:8704006:         return ref.ensureReleased(accumulate);
1:8704006:     }
1:a7f4134: 
1:a7f4134:     public void addTo(Ref.IdentityCollection identities)
1:a7f4134:     {
1:a7f4134:         identities.add(ref);
1:a7f4134:     }
1:207751c: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:a7f4134
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void addTo(Ref.IdentityCollection identities)
1:     {
1:         identities.add(ref);
1:     }
commit:8704006
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Throwable close(Throwable accumulate)
1:     {
1:         return ref.ensureReleased(accumulate);
1:     }
commit:207751c
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: /**
1:  * A simple abstract implementation of SharedCloseable
1:  */
1: public abstract class SharedCloseableImpl implements SharedCloseable
1: {
1:     final Ref<?> ref;
1: 
1:     public SharedCloseableImpl(RefCounted.Tidy tidy)
1:     {
1:         ref = new Ref<Object>(null, tidy);
1:     }
1: 
1:     protected SharedCloseableImpl(SharedCloseableImpl copy)
1:     {
1:         this.ref = copy.ref.ref();
1:     }
1: 
1:     public boolean isCleanedUp()
1:     {
1:         return ref.globalCount() == 0;
1:     }
1: 
1:     public void close()
1:     {
1:         ref.ensureReleased();
1:     }
1: }
============================================================================