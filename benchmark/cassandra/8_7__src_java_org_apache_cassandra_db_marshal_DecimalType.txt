1:447e45f: /*
1:447e45f:  * Licensed to the Apache Software Foundation (ASF) under one
1:447e45f:  * or more contributor license agreements.  See the NOTICE file
1:447e45f:  * distributed with this work for additional information
1:447e45f:  * regarding copyright ownership.  The ASF licenses this file
1:447e45f:  * to you under the Apache License, Version 2.0 (the
1:447e45f:  * "License"); you may not use this file except in compliance
1:447e45f:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
2:447e45f:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
14:447e45f: 
1:447e45f: import java.math.BigDecimal;
1:447e45f: import java.nio.ByteBuffer;
1:447e45f: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.DecimalSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:447e45f: import org.apache.cassandra.utils.ByteBufferUtil;
1:447e45f: 
1:447e45f: public class DecimalType extends AbstractType<BigDecimal>
8:447e45f: {
1:447e45f:     public static final DecimalType instance = new DecimalType();
1:a67f779: 
1:07594ee:     DecimalType() {super(ComparisonType.CUSTOM);} // singleton
1:b2dcd3e: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:4df4f79:     {
1:4df4f79:         return true;
1:4df4f79:     }
1:4df4f79: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:a67f779:     {
1:acf1b18:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:acf1b18:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
1:a67f779: 
1:acf1b18:         return compose(o1).compareTo(compose(o2));
1:a67f779:     }
1:a67f779: 
1:447e45f:     public ByteBuffer fromString(String source) throws MarshalException
1:b2dcd3e:     {
1:447e45f:         // Return an empty ByteBuffer for an empty string.
1:447e45f:         if (source.isEmpty()) return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:07cdfd0: 
1:447e45f:         BigDecimal decimal;
1:07cdfd0: 
1:447e45f:         try
1:b2dcd3e:         {
1:447e45f:             decimal = new BigDecimal(source);
1:b2dcd3e:         }
1:447e45f:         catch (Exception e)
1:447e45f:         {
1:447e45f:             throw new MarshalException(String.format("unable to make BigDecimal from '%s'", source), e);
1:b2dcd3e:         }
1:2fd3268: 
1:447e45f:         return decompose(decimal);
8:447e45f:     }
1:2fd3268: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             return new Constants.Value(getSerializer().serialize(new BigDecimal(parsed.toString())));
1:c7b02d1:         }
1:c7b02d1:         catch (NumberFormatException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format("Value '%s' is not a valid representation of a decimal value", parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return getSerializer().deserialize(buffer).toString();
1:c7b02d1:     }
1:c7b02d1: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.DECIMAL;
1:a67f779:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<BigDecimal> getSerializer()
1:e9c6742:     {
1:e9c6742:         return DecimalSerializer.instance;
1:e9c6742:     }
1:447e45f: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     DecimalType() {super(ComparisonType.CUSTOM);} // singleton
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return true;
1:     }
1: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             return new Constants.Value(getSerializer().serialize(new BigDecimal(parsed.toString())));
1:         }
1:         catch (NumberFormatException exc)
1:         {
1:             throw new MarshalException(String.format("Value '%s' is not a valid representation of a decimal value", parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return getSerializer().deserialize(buffer).toString();
1:     }
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
1:         return compose(o1).compareTo(compose(o2));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.DecimalSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<BigDecimal> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.DecimalSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         return DecimalSerializer.instance.serialize(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return DecimalSerializer.instance.deserialize(value);
0:         return DecimalSerializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         DecimalSerializer.instance.validate(bytes);
1: 
0:     @Override
0:     public AbstractSerializer<BigDecimal> asComposer()
1:     {
1:         return DecimalSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.cql3.Term;
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.INTEGER, Term.Type.FLOAT);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.DECIMAL;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:     DecimalType() {} // singleton
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:     DecimalType() {} // singleton
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return JdbcDecimal.instance.decompose(value);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b2dcd3e
/////////////////////////////////////////////////////////////////////////
0:         if (bb0.remaining() == 0)
1:         {
0:             return bb1.remaining() == 0 ? 0 : -1;
1:         }
0:         if (bb1.remaining() == 0)
1:         {
0:             return 1;
1:         }
1:         
commit:447e45f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
1: import java.math.BigDecimal;
0: import java.math.BigInteger;
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.cql.jdbc.JdbcDecimal;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class DecimalType extends AbstractType<BigDecimal>
1: {
1:     public static final DecimalType instance = new DecimalType();
1: 
0:     DecimalType() {} // singleton    
1: 
0:     public int compare(ByteBuffer bb0, ByteBuffer bb1)
1:     {
0:         return compose(bb0).compareTo(compose(bb1));
1:     }
1: 
0:     public BigDecimal compose(ByteBuffer bytes)
1:     {
0:         return JdbcDecimal.instance.compose(bytes);
1:     }
1: 
0:     /**
0:      * The bytes of the ByteBuffer are made up of 4 bytes of int containing the scale
0:      * followed by the n bytes it takes to store a BigInteger.
1:      */
0:     public ByteBuffer decompose(BigDecimal value)
1:     {
0:         if (value == null) return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:         
0:         BigInteger bi = value.unscaledValue();
0:         Integer scale = value.scale();
0:         byte[] bibytes = bi.toByteArray();
0:         byte[] sbytes = ByteBufferUtil.bytes(scale).array();
0:         byte[] bytes = new byte[bi.toByteArray().length+4];
1:         
0:         for (int i = 0 ; i < 4 ; i++) bytes[i] = sbytes[i];
0:         for (int i = 4 ; i < bibytes.length+4 ; i++) bytes[i] = bibytes[i-4];
1:         
0:         return ByteBuffer.wrap(bytes);
1:     }
1: 
0:     public String getString(ByteBuffer bytes)
1:     {
0:         return JdbcDecimal.instance.getString(bytes);
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         // Return an empty ByteBuffer for an empty string.
1:         if (source.isEmpty()) return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:         
1:         BigDecimal decimal;
1: 
1:         try
1:         {
1:             decimal = new BigDecimal(source);
1:         }
1:         catch (Exception e)
1:         {
1:             throw new MarshalException(String.format("unable to make BigDecimal from '%s'", source), e);
1:         }
1: 
1:         return decompose(decimal);
1:     }
1: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
0:         // no useful check for invalid decimals.
1:     }
1: }
============================================================================