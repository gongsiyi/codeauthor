1:7536429: package org.apache.cassandra.stress.operations.userdefined;
1:0bc9841: /*
1:0bc9841:  * 
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
1:0bc9841:  * 
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0bc9841:  * 
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:0bc9841:  * 
1:0bc9841:  */
4:7536429: 
1:7536429: 
1:7536429: import java.io.IOException;
1:0580fb2: import java.nio.ByteBuffer;
1:0580fb2: import java.util.ArrayList;
1:0580fb2: import java.util.List;
1:0580fb2: import java.util.Random;
1:47d3b7e: import java.util.stream.Collectors;
1:7536429: 
1:0580fb2: import com.datastax.driver.core.BoundStatement;
1:7536429: import com.datastax.driver.core.PreparedStatement;
1:7536429: import com.datastax.driver.core.ResultSet;
1:7536429: import org.apache.cassandra.db.ConsistencyLevel;
1:6c579a0: import org.apache.cassandra.stress.generate.*;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:7536429: import org.apache.cassandra.stress.settings.StressSettings;
1:7536429: import org.apache.cassandra.stress.util.JavaDriverClient;
1:7536429: import org.apache.cassandra.stress.util.ThriftClient;
1:7536429: import org.apache.cassandra.thrift.CqlResult;
1:7536429: import org.apache.cassandra.thrift.ThriftConversion;
1:7536429: 
1:7536429: public class SchemaQuery extends SchemaStatement
5:7536429: {
1:0580fb2:     public static enum ArgSelect
1:0580fb2:     {
1:0580fb2:         MULTIROW, SAMEROW;
1:0580fb2:         //TODO: FIRSTROW, LASTROW
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     final ArgSelect argSelect;
1:0580fb2:     final Object[][] randomBuffer;
1:0580fb2:     final Random random = new Random();
1:0580fb2: 
1:3bee990:     public SchemaQuery(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, ArgSelect argSelect)
1:0580fb2:     {
1:47d3b7e:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), settings.insert.rowPopulationRatio.get(), argSelect == ArgSelect.MULTIROW ? statement.getVariables().size() : 1), statement,
1:47d3b7e:               statement.getVariables().asList().stream().map(d -> d.getName()).collect(Collectors.toList()), thriftId, cl);
1:0580fb2:         this.argSelect = argSelect;
1:0580fb2:         randomBuffer = new Object[argumentIndex.length][argumentIndex.length];
1:6c579a0:     }
1:6c579a0: 
1:7536429:     private class JavaDriverRun extends Runner
1:6c579a0:     {
1:7536429:         final JavaDriverClient client;
1:7536429: 
1:7536429:         private JavaDriverRun(JavaDriverClient client)
1:0580fb2:         {
1:7536429:             this.client = client;
1:0580fb2:         }
1:7536429: 
1:7536429:         public boolean run() throws Exception
1:7536429:         {
1:6c579a0:             ResultSet rs = client.getSession().execute(bindArgs());
1:7536429:             rowCount = rs.all().size();
1:7536429:             partitionCount = Math.min(1, rowCount);
1:7536429:             return true;
5:7536429:         }
1:7536429:     }
1:7536429: 
1:7536429:     private class ThriftRun extends Runner
1:7536429:     {
1:7536429:         final ThriftClient client;
1:7536429: 
1:7536429:         private ThriftRun(ThriftClient client)
1:7536429:         {
1:7536429:             this.client = client;
1:7536429:         }
1:7536429: 
1:7536429:         public boolean run() throws Exception
1:7536429:         {
1:6c579a0:             CqlResult rs = client.execute_prepared_cql3_query(thriftId, partitions.get(0).getToken(), thriftArgs(), ThriftConversion.toThrift(cl));
1:7536429:             rowCount = rs.getRowsSize();
1:7536429:             partitionCount = Math.min(1, rowCount);
1:7536429:             return true;
1:7536429:         }
1:7536429:     }
1:7536429: 
1:6c579a0:     private int fillRandom()
1:7536429:     {
1:0580fb2:         int c = 0;
1:6c579a0:         PartitionIterator iterator = partitions.get(0);
1:6c579a0:         while (iterator.hasNext())
1:0580fb2:         {
1:6c579a0:             Row row = iterator.next();
1:6c579a0:             Object[] randomBufferRow = randomBuffer[c++];
1:6c579a0:             for (int i = 0 ; i < argumentIndex.length ; i++)
1:6c579a0:                 randomBufferRow[i] = row.get(argumentIndex[i]);
1:6c579a0:             if (c >= randomBuffer.length)
1:6c579a0:                 break;
1:0580fb2:         }
1:6c579a0:         assert c > 0;
1:0580fb2:         return c;
1:0580fb2:     }
1:0580fb2: 
1:6c579a0:     BoundStatement bindArgs()
1:0580fb2:     {
1:0580fb2:         switch (argSelect)
1:0580fb2:         {
1:0580fb2:             case MULTIROW:
1:6c579a0:                 int c = fillRandom();
2:0580fb2:                 for (int i = 0 ; i < argumentIndex.length ; i++)
1:0580fb2:                 {
1:0580fb2:                     int argIndex = argumentIndex[i];
1:0580fb2:                     bindBuffer[i] = randomBuffer[argIndex < 0 ? 0 : random.nextInt(c)][i];
1:0580fb2:                 }
1:0580fb2:                 return statement.bind(bindBuffer);
1:0580fb2:             case SAMEROW:
1:6c579a0:                 return bindRow(partitions.get(0).next());
1:0580fb2:             default:
1:0580fb2:                 throw new IllegalStateException();
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:6c579a0:     List<ByteBuffer> thriftArgs()
1:0580fb2:     {
1:0580fb2:         switch (argSelect)
1:0580fb2:         {
1:0580fb2:             case MULTIROW:
1:0580fb2:                 List<ByteBuffer> args = new ArrayList<>();
1:6c579a0:                 int c = fillRandom();
1:0580fb2:                 for (int i = 0 ; i < argumentIndex.length ; i++)
1:0580fb2:                 {
1:0580fb2:                     int argIndex = argumentIndex[i];
1:6c579a0:                     args.add(spec.partitionGenerator.convert(argIndex, randomBuffer[argIndex < 0 ? 0 : random.nextInt(c)][i]));
1:0580fb2:                 }
1:0580fb2:                 return args;
1:0580fb2:             case SAMEROW:
1:6c579a0:                 return thriftRowArgs(partitions.get(0).next());
1:0580fb2:             default:
1:0580fb2:                 throw new IllegalStateException();
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:7536429:     @Override
1:7536429:     public void run(JavaDriverClient client) throws IOException
1:7536429:     {
1:7536429:         timeWithRetry(new JavaDriverRun(client));
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public void run(ThriftClient client) throws IOException
1:7536429:     {
1:7536429:         timeWithRetry(new ThriftRun(client));
1:7536429:     }
1:7536429: 
1:7536429: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1: import java.util.stream.Collectors;
/////////////////////////////////////////////////////////////////////////
1:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), settings.insert.rowPopulationRatio.get(), argSelect == ArgSelect.MULTIROW ? statement.getVariables().size() : 1), statement,
1:               statement.getVariables().asList().stream().map(d -> d.getName()).collect(Collectors.toList()), thriftId, cl);
commit:6d29ed0
/////////////////////////////////////////////////////////////////////////
0:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), settings.insert.rowPopulationRatio.get(), argSelect == ArgSelect.MULTIROW ? statement.getVariables().size() : 1), statement, thriftId, cl);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public SchemaQuery(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, ArgSelect argSelect)
0:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), argSelect == ArgSelect.MULTIROW ? statement.getVariables().size() : 1), statement, thriftId, cl);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f852401
/////////////////////////////////////////////////////////////////////////
0:         super(timer, settings, new DataSpec(generator, seedManager, new DistributionFixed(1), argSelect == ArgSelect.MULTIROW ? statement.getVariables().size() : 1), statement, thriftId, cl, validationType);
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.*;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public SchemaQuery(Timer timer, StressSettings settings, PartitionGenerator generator, SeedManager seedManager, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, ValidationType validationType, ArgSelect argSelect)
0:         super(timer, settings, spec(generator, seedManager, statement.getVariables().size(), argSelect), statement, thriftId, cl, validationType);
0:     static DataSpec spec(PartitionGenerator generator, SeedManager seedManager, int argCount, ArgSelect argSelect)
1:     {
0:         return new DataSpec(generator, seedManager, new DistributionFixed(1), argSelect == ArgSelect.MULTIROW ? argCount : 1);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             ResultSet rs = client.getSession().execute(bindArgs());
/////////////////////////////////////////////////////////////////////////
1:             CqlResult rs = client.execute_prepared_cql3_query(thriftId, partitions.get(0).getToken(), thriftArgs(), ThriftConversion.toThrift(cl));
/////////////////////////////////////////////////////////////////////////
1:     private int fillRandom()
1:         PartitionIterator iterator = partitions.get(0);
1:         while (iterator.hasNext())
1:             Row row = iterator.next();
1:             Object[] randomBufferRow = randomBuffer[c++];
1:             for (int i = 0 ; i < argumentIndex.length ; i++)
1:                 randomBufferRow[i] = row.get(argumentIndex[i]);
1:             if (c >= randomBuffer.length)
1:                 break;
1:         assert c > 0;
1:     BoundStatement bindArgs()
1:                 int c = fillRandom();
/////////////////////////////////////////////////////////////////////////
1:                 return bindRow(partitions.get(0).next());
1:     List<ByteBuffer> thriftArgs()
1:                 int c = fillRandom();
1:                     args.add(spec.partitionGenerator.convert(argIndex, randomBuffer[argIndex < 0 ? 0 : random.nextInt(c)][i]));
1:                 return thriftRowArgs(partitions.get(0).next());
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Random;
1: import com.datastax.driver.core.BoundStatement;
0: import org.apache.cassandra.stress.generate.Partition;
0: import org.apache.cassandra.stress.generate.Row;
/////////////////////////////////////////////////////////////////////////
1:     public static enum ArgSelect
1:     {
1:         MULTIROW, SAMEROW;
1:         //TODO: FIRSTROW, LASTROW
1:     }
1: 
1:     final ArgSelect argSelect;
1:     final Object[][] randomBuffer;
1:     final Random random = new Random();
1: 
0:     public SchemaQuery(Timer timer, PartitionGenerator generator, StressSettings settings, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, ValidationType validationType, ArgSelect argSelect)
1:         this.argSelect = argSelect;
1:         randomBuffer = new Object[argumentIndex.length][argumentIndex.length];
/////////////////////////////////////////////////////////////////////////
0:             ResultSet rs = client.getSession().execute(bindArgs(partitions.get(0)));
/////////////////////////////////////////////////////////////////////////
0:             CqlResult rs = client.execute_prepared_cql3_query(thriftId, partitions.get(0).getToken(), thriftArgs(partitions.get(0)), ThriftConversion.toThrift(cl));
/////////////////////////////////////////////////////////////////////////
0:     private int fillRandom(Partition partition)
1:     {
1:         int c = 0;
0:         while (c == 0)
1:         {
0:             for (Row row : partition.iterator(randomBuffer.length, false).next())
1:             {
0:                 Object[] randomRow = randomBuffer[c++];
1:                 for (int i = 0 ; i < argumentIndex.length ; i++)
0:                     randomRow[i] = row.get(argumentIndex[i]);
0:                 if (c >= randomBuffer.length)
0:                     break;
1:             }
1:         }
1:         return c;
1:     }
1: 
0:     BoundStatement bindArgs(Partition partition)
1:     {
1:         switch (argSelect)
1:         {
1:             case MULTIROW:
0:                 int c = fillRandom(partition);
1:                 for (int i = 0 ; i < argumentIndex.length ; i++)
1:                 {
1:                     int argIndex = argumentIndex[i];
1:                     bindBuffer[i] = randomBuffer[argIndex < 0 ? 0 : random.nextInt(c)][i];
1:                 }
1:                 return statement.bind(bindBuffer);
1:             case SAMEROW:
0:                 for (Row row : partition.iterator(1, false).next())
0:                     return bindRow(row);
1:             default:
1:                 throw new IllegalStateException();
1:         }
1:     }
1: 
0:     List<ByteBuffer> thriftArgs(Partition partition)
1:     {
1:         switch (argSelect)
1:         {
1:             case MULTIROW:
1:                 List<ByteBuffer> args = new ArrayList<>();
0:                 int c = fillRandom(partition);
1:                 for (int i = 0 ; i < argumentIndex.length ; i++)
1:                 {
1:                     int argIndex = argumentIndex[i];
0:                     args.add(generator.convert(argIndex, randomBuffer[argIndex < 0 ? 0 : random.nextInt(c)][i]));
1:                 }
1:                 return args;
1:             case SAMEROW:
0:                 for (Row row : partition.iterator(1, false).next())
0:                     return thriftRowArgs(row);
1:             default:
1:                 throw new IllegalStateException();
1:         }
1:     }
1: 
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.operations.userdefined;
1: 
1: import java.io.IOException;
1: 
1: import com.datastax.driver.core.PreparedStatement;
1: import com.datastax.driver.core.ResultSet;
1: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.stress.generate.PartitionGenerator;
0: import org.apache.cassandra.stress.settings.OptionDistribution;
1: import org.apache.cassandra.stress.settings.StressSettings;
0: import org.apache.cassandra.stress.settings.ValidationType;
1: import org.apache.cassandra.stress.util.JavaDriverClient;
1: import org.apache.cassandra.stress.util.ThriftClient;
0: import org.apache.cassandra.stress.util.Timer;
1: import org.apache.cassandra.thrift.CqlResult;
1: import org.apache.cassandra.thrift.ThriftConversion;
1: 
1: public class SchemaQuery extends SchemaStatement
1: {
1: 
0:     public SchemaQuery(Timer timer, PartitionGenerator generator, StressSettings settings, Integer thriftId, PreparedStatement statement, ConsistencyLevel cl, ValidationType validationType)
1:     {
0:         super(timer, generator, settings, OptionDistribution.get("fixed(1)").get(), statement, thriftId, cl, validationType);
1:     }
1: 
0:     int execute(JavaDriverClient client) throws Exception
1:     {
0:         return client.getSession().execute(bindRandom(partitions.get(0))).all().size();
1:     }
1: 
0:     int execute(ThriftClient client) throws Exception
1:     {
0:         return client.execute_prepared_cql3_query(thriftId, partitions.get(0).getToken(), thriftRandomArgs(partitions.get(0)), ThriftConversion.toThrift(cl)).getRowsSize();
1:     }
1: 
1:     private class JavaDriverRun extends Runner
1:     {
1:         final JavaDriverClient client;
1: 
1:         private JavaDriverRun(JavaDriverClient client)
1:         {
1:             this.client = client;
1:         }
1: 
1:         public boolean run() throws Exception
1:         {
0:             ResultSet rs = client.getSession().execute(bindRandom(partitions.get(0)));
0:             validate(rs);
1:             rowCount = rs.all().size();
1:             partitionCount = Math.min(1, rowCount);
1:             return true;
1:         }
1:     }
1: 
1:     private class ThriftRun extends Runner
1:     {
1:         final ThriftClient client;
1: 
1:         private ThriftRun(ThriftClient client)
1:         {
1:             this.client = client;
1:         }
1: 
1:         public boolean run() throws Exception
1:         {
0:             CqlResult rs = client.execute_prepared_cql3_query(thriftId, partitions.get(0).getToken(), thriftRandomArgs(partitions.get(0)), ThriftConversion.toThrift(cl));
0:             validate(rs);
1:             rowCount = rs.getRowsSize();
1:             partitionCount = Math.min(1, rowCount);
1:             return true;
1:         }
1:     }
1: 
1:     @Override
1:     public void run(JavaDriverClient client) throws IOException
1:     {
1:         timeWithRetry(new JavaDriverRun(client));
1:     }
1: 
1:     @Override
1:     public void run(ThriftClient client) throws IOException
1:     {
1:         timeWithRetry(new ThriftRun(client));
1:     }
1: 
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
0: 
============================================================================