1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.plan;
2:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.ArrayList;
1:72790dc: import java.util.List;
1:72790dc: import java.util.Objects;
1:72790dc: 
1:72790dc: import org.apache.cassandra.config.ColumnDefinition;
1:72790dc: import org.apache.cassandra.cql3.Operator;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer;
1:72790dc: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndex;
1:72790dc: import org.apache.cassandra.index.sasi.utils.TypeUtil;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.db.marshal.UTF8Type;
1:72790dc: import org.apache.cassandra.utils.ByteBufferUtil;
1:db68ac9: import org.apache.cassandra.utils.FBUtilities;
1:72790dc: 
1:72790dc: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:72790dc: 
1:72790dc: import com.google.common.annotations.VisibleForTesting;
1:72790dc: import com.google.common.collect.Iterators;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: public class Expression
1:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(Expression.class);
1:72790dc: 
1:72790dc:     public enum Op
1:72790dc:     {
1:479e8af:         EQ, MATCH, PREFIX, SUFFIX, CONTAINS, NOT_EQ, RANGE;
1:3928665: 
1:3928665:         public static Op valueOf(Operator operator)
1:3928665:         {
1:3928665:             switch (operator)
1:3928665:             {
1:3928665:                 case EQ:
1:3928665:                     return EQ;
1:3928665: 
1:3928665:                 case NEQ:
1:3928665:                     return NOT_EQ;
1:3928665: 
1:3928665:                 case LT:
1:3928665:                 case GT:
1:3928665:                 case LTE:
1:3928665:                 case GTE:
1:3928665:                     return RANGE;
1:3928665: 
1:3928665:                 case LIKE_PREFIX:
1:3928665:                     return PREFIX;
1:3928665: 
1:3928665:                 case LIKE_SUFFIX:
1:3928665:                     return SUFFIX;
1:3928665: 
1:3928665:                 case LIKE_CONTAINS:
1:3928665:                     return CONTAINS;
1:3928665: 
1:479e8af:                 case LIKE_MATCHES:
1:479e8af:                     return MATCH;
1:479e8af: 
1:3928665:                 default:
1:3928665:                     throw new IllegalArgumentException("unknown operator: " + operator);
1:3928665:             }
1:3928665:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     private final QueryController controller;
1:72790dc: 
1:72790dc:     public final AbstractAnalyzer analyzer;
1:72790dc: 
1:72790dc:     public final ColumnIndex index;
1:72790dc:     public final AbstractType<?> validator;
1:72790dc:     public final boolean isLiteral;
1:72790dc: 
1:72790dc:     @VisibleForTesting
1:72790dc:     protected Op operation;
1:72790dc: 
1:72790dc:     public Bound lower, upper;
1:72790dc:     public List<ByteBuffer> exclusions = new ArrayList<>();
1:72790dc: 
1:72790dc:     public Expression(Expression other)
1:72790dc:     {
1:72790dc:         this(other.controller, other.index);
1:72790dc:         operation = other.operation;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Expression(QueryController controller, ColumnIndex columnIndex)
1:72790dc:     {
1:72790dc:         this.controller = controller;
1:72790dc:         this.index = columnIndex;
1:72790dc:         this.analyzer = columnIndex.getAnalyzer();
1:72790dc:         this.validator = columnIndex.getValidator();
1:72790dc:         this.isLiteral = columnIndex.isLiteral();
1:72790dc:     }
1:72790dc: 
1:72790dc:     @VisibleForTesting
1:72790dc:     public Expression(String name, AbstractType<?> validator)
1:72790dc:     {
1:72790dc:         this(null, new ColumnIndex(UTF8Type.instance, ColumnDefinition.regularDef("sasi", "internal", name, validator), null));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Expression setLower(Bound newLower)
1:72790dc:     {
1:72790dc:         lower = newLower == null ? null : new Bound(newLower.value, newLower.inclusive);
1:72790dc:         return this;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Expression setUpper(Bound newUpper)
1:72790dc:     {
1:72790dc:         upper = newUpper == null ? null : new Bound(newUpper.value, newUpper.inclusive);
1:72790dc:         return this;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Expression setOp(Op op)
1:72790dc:     {
1:72790dc:         this.operation = op;
1:72790dc:         return this;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Expression add(Operator op, ByteBuffer value)
1:72790dc:     {
1:72790dc:         boolean lowerInclusive = false, upperInclusive = false;
1:72790dc:         switch (op)
1:72790dc:         {
1:3928665:             case LIKE_PREFIX:
1:3928665:             case LIKE_SUFFIX:
1:3928665:             case LIKE_CONTAINS:
1:479e8af:             case LIKE_MATCHES:
1:72790dc:             case EQ:
1:72790dc:                 lower = new Bound(value, true);
1:72790dc:                 upper = lower;
1:3928665:                 operation = Op.valueOf(op);
1:72790dc:                 break;
1:72790dc: 
1:72790dc:             case NEQ:
1:72790dc:                 // index expressions are priority sorted
1:72790dc:                 // and NOT_EQ is the lowest priority, which means that operation type
1:72790dc:                 // is always going to be set before reaching it in case of RANGE or EQ.
1:72790dc:                 if (operation == null)
1:72790dc:                 {
1:72790dc:                     operation = Op.NOT_EQ;
1:72790dc:                     lower = new Bound(value, true);
1:72790dc:                     upper = lower;
1:72790dc:                 }
1:55a45b5:                 else
1:72790dc:                     exclusions.add(value);
1:72790dc:                 break;
1:72790dc: 
1:72790dc:             case LTE:
1:55a45b5:                 if (index.getDefinition().isReversedType())
1:55a45b5:                     lowerInclusive = true;
1:55a45b5:                 else
1:55a45b5:                     upperInclusive = true;
1:72790dc:             case LT:
1:72790dc:                 operation = Op.RANGE;
1:55a45b5:                 if (index.getDefinition().isReversedType())
1:55a45b5:                     lower = new Bound(value, lowerInclusive);
1:55a45b5:                 else
1:55a45b5:                     upper = new Bound(value, upperInclusive);
1:72790dc:                 break;
1:55a45b5: 
1:72790dc:             case GTE:
1:55a45b5:                 if (index.getDefinition().isReversedType())
1:55a45b5:                     upperInclusive = true;
1:55a45b5:                 else
1:55a45b5:                     lowerInclusive = true;
1:72790dc:             case GT:
1:72790dc:                 operation = Op.RANGE;
1:55a45b5:                 if (index.getDefinition().isReversedType())
1:55a45b5:                     upper = new Bound(value, upperInclusive);
1:72790dc:                 else
1:55a45b5:                     lower = new Bound(value, lowerInclusive);
1:72790dc: 
1:72790dc:                 break;
1:72790dc:         }
1:72790dc: 
1:72790dc:         return this;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Expression addExclusion(ByteBuffer value)
1:72790dc:     {
1:72790dc:         exclusions.add(value);
1:72790dc:         return this;
1:72790dc:     }
1:72790dc: 
1:3928665:     public boolean isSatisfiedBy(ByteBuffer value)
1:72790dc:     {
1:72790dc:         if (!TypeUtil.isValid(value, validator))
1:72790dc:         {
1:72790dc:             int size = value.remaining();
1:72790dc:             if ((value = TypeUtil.tryUpcast(value, validator)) == null)
1:72790dc:             {
1:db68ac9:                 logger.error("Can't cast value for {} to size accepted by {}, value size is {}.",
1:72790dc:                              index.getColumnName(),
1:72790dc:                              validator,
1:db68ac9:                              FBUtilities.prettyPrintMemory(size));
1:72790dc:                 return false;
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         if (lower != null)
1:72790dc:         {
1:72790dc:             // suffix check
1:72790dc:             if (isLiteral)
1:72790dc:             {
1:72790dc:                 if (!validateStringValue(value, lower.value))
1:72790dc:                     return false;
1:72790dc:             }
1:72790dc:             else
1:72790dc:             {
1:72790dc:                 // range or (not-)equals - (mainly) for numeric values
1:72790dc:                 int cmp = validator.compare(lower.value, value);
1:72790dc: 
1:72790dc:                 // in case of (NOT_)EQ lower == upper
1:72790dc:                 if (operation == Op.EQ || operation == Op.NOT_EQ)
1:72790dc:                     return cmp == 0;
1:72790dc: 
1:72790dc:                 if (cmp > 0 || (cmp == 0 && !lower.inclusive))
1:72790dc:                     return false;
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         if (upper != null && lower != upper)
1:72790dc:         {
1:72790dc:             // string (prefix or suffix) check
1:72790dc:             if (isLiteral)
1:72790dc:             {
1:72790dc:                 if (!validateStringValue(value, upper.value))
1:72790dc:                     return false;
1:72790dc:             }
1:72790dc:             else
1:72790dc:             {
1:72790dc:                 // range - mainly for numeric values
1:72790dc:                 int cmp = validator.compare(upper.value, value);
1:72790dc:                 if (cmp < 0 || (cmp == 0 && !upper.inclusive))
1:72790dc:                     return false;
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         // as a last step let's check exclusions for the given field,
1:72790dc:         // this covers EQ/RANGE with exclusions.
1:72790dc:         for (ByteBuffer term : exclusions)
1:72790dc:         {
1:72790dc:             if (isLiteral && validateStringValue(value, term))
1:72790dc:                 return false;
1:72790dc:             else if (validator.compare(term, value) == 0)
1:72790dc:                 return false;
1:72790dc:         }
1:72790dc: 
1:72790dc:         return true;
1:72790dc:     }
1:72790dc: 
1:72790dc:     private boolean validateStringValue(ByteBuffer columnValue, ByteBuffer requestedValue)
1:72790dc:     {
1:72790dc:         analyzer.reset(columnValue.duplicate());
1:72790dc:         while (analyzer.hasNext())
1:72790dc:         {
1:72790dc:             ByteBuffer term = analyzer.next();
1:3928665: 
1:3928665:             boolean isMatch = false;
1:3928665:             switch (operation)
1:3928665:             {
1:3928665:                 case EQ:
1:479e8af:                 case MATCH:
1:3928665:                 // Operation.isSatisfiedBy handles conclusion on !=,
1:3928665:                 // here we just need to make sure that term matched it
1:3928665:                 case NOT_EQ:
1:3928665:                     isMatch = validator.compare(term, requestedValue) == 0;
1:3928665:                     break;
1:3928665: 
1:3928665:                 case PREFIX:
1:3928665:                     isMatch = ByteBufferUtil.startsWith(term, requestedValue);
1:3928665:                     break;
1:3928665: 
1:3928665:                 case SUFFIX:
1:3928665:                     isMatch = ByteBufferUtil.endsWith(term, requestedValue);
1:3928665:                     break;
1:3928665: 
1:3928665:                 case CONTAINS:
1:3928665:                     isMatch = ByteBufferUtil.contains(term, requestedValue);
1:3928665:                     break;
1:3928665:             }
1:3928665: 
1:3928665:             if (isMatch)
1:72790dc:                 return true;
1:72790dc:         }
1:72790dc: 
1:72790dc:         return false;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Op getOp()
1:72790dc:     {
1:72790dc:         return operation;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void checkpoint()
1:72790dc:     {
1:72790dc:         if (controller == null)
1:72790dc:             return;
1:72790dc: 
1:72790dc:         controller.checkpoint();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean hasLower()
1:72790dc:     {
1:72790dc:         return lower != null;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean hasUpper()
1:72790dc:     {
1:72790dc:         return upper != null;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean isLowerSatisfiedBy(OnDiskIndex.DataTerm term)
1:72790dc:     {
1:72790dc:         if (!hasLower())
1:72790dc:             return true;
1:72790dc: 
1:72790dc:         int cmp = term.compareTo(validator, lower.value, false);
1:72790dc:         return cmp > 0 || cmp == 0 && lower.inclusive;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean isUpperSatisfiedBy(OnDiskIndex.DataTerm term)
1:72790dc:     {
1:72790dc:         if (!hasUpper())
1:72790dc:             return true;
1:72790dc: 
1:72790dc:         int cmp = term.compareTo(validator, upper.value, false);
1:72790dc:         return cmp < 0 || cmp == 0 && upper.inclusive;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean isIndexed()
1:72790dc:     {
1:72790dc:         return index.isIndexed();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public String toString()
1:72790dc:     {
1:72790dc:         return String.format("Expression{name: %s, op: %s, lower: (%s, %s), upper: (%s, %s), exclusions: %s}",
1:72790dc:                              index.getColumnName(),
1:72790dc:                              operation,
1:72790dc:                              lower == null ? "null" : validator.getString(lower.value),
1:72790dc:                              lower != null && lower.inclusive,
1:72790dc:                              upper == null ? "null" : validator.getString(upper.value),
1:72790dc:                              upper != null && upper.inclusive,
1:72790dc:                              Iterators.toString(Iterators.transform(exclusions.iterator(), validator::getString)));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int hashCode()
1:72790dc:     {
1:72790dc:         return new HashCodeBuilder().append(index.getColumnName())
1:72790dc:                                     .append(operation)
1:72790dc:                                     .append(validator)
1:72790dc:                                     .append(lower).append(upper)
1:72790dc:                                     .append(exclusions).build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean equals(Object other)
1:72790dc:     {
1:72790dc:         if (!(other instanceof Expression))
1:72790dc:             return false;
1:72790dc: 
1:72790dc:         if (this == other)
1:72790dc:             return true;
1:72790dc: 
1:72790dc:         Expression o = (Expression) other;
1:72790dc: 
1:72790dc:         return Objects.equals(index.getColumnName(), o.index.getColumnName())
1:72790dc:                 && validator.equals(o.validator)
1:72790dc:                 && operation == o.operation
1:72790dc:                 && Objects.equals(lower, o.lower)
1:72790dc:                 && Objects.equals(upper, o.upper)
1:72790dc:                 && exclusions.equals(o.exclusions);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static class Bound
1:72790dc:     {
1:72790dc:         public final ByteBuffer value;
1:72790dc:         public final boolean inclusive;
1:72790dc: 
1:72790dc:         public Bound(ByteBuffer value, boolean inclusive)
1:72790dc:         {
1:72790dc:             this.value = value;
1:72790dc:             this.inclusive = inclusive;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public boolean equals(Object other)
1:72790dc:         {
1:72790dc:             if (!(other instanceof Bound))
1:72790dc:                 return false;
1:72790dc: 
1:72790dc:             Bound o = (Bound) other;
1:72790dc:             return value.equals(o.value) && inclusive == o.inclusive;
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:55a45b5
/////////////////////////////////////////////////////////////////////////
1:                 if (index.getDefinition().isReversedType())
1:                     lowerInclusive = true;
1:                 else
1:                     upperInclusive = true;
1:                 if (index.getDefinition().isReversedType())
1:                     lower = new Bound(value, lowerInclusive);
1:                 else
1:                     upper = new Bound(value, upperInclusive);
1:                 if (index.getDefinition().isReversedType())
1:                     upperInclusive = true;
1:                 else
1:                     lowerInclusive = true;
1:                 if (index.getDefinition().isReversedType())
1:                     upper = new Bound(value, upperInclusive);
1:                 else
1:                     lower = new Bound(value, lowerInclusive);
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:7107646
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:479e8af
/////////////////////////////////////////////////////////////////////////
1:         EQ, MATCH, PREFIX, SUFFIX, CONTAINS, NOT_EQ, RANGE;
/////////////////////////////////////////////////////////////////////////
1:                 case LIKE_MATCHES:
1:                     return MATCH;
1: 
/////////////////////////////////////////////////////////////////////////
1:             case LIKE_MATCHES:
/////////////////////////////////////////////////////////////////////////
1:                 case MATCH:
commit:3928665
/////////////////////////////////////////////////////////////////////////
0:         EQ, PREFIX, SUFFIX, CONTAINS, NOT_EQ, RANGE;
1: 
1:         public static Op valueOf(Operator operator)
1:         {
1:             switch (operator)
1:             {
1:                 case EQ:
1:                     return EQ;
1: 
1:                 case NEQ:
1:                     return NOT_EQ;
1: 
1:                 case LT:
1:                 case GT:
1:                 case LTE:
1:                 case GTE:
1:                     return RANGE;
1: 
1:                 case LIKE_PREFIX:
1:                     return PREFIX;
1: 
1:                 case LIKE_SUFFIX:
1:                     return SUFFIX;
1: 
1:                 case LIKE_CONTAINS:
1:                     return CONTAINS;
1: 
1:                 default:
1:                     throw new IllegalArgumentException("unknown operator: " + operator);
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:             case LIKE_PREFIX:
1:             case LIKE_SUFFIX:
1:             case LIKE_CONTAINS:
1:                 operation = Op.valueOf(op);
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSatisfiedBy(ByteBuffer value)
/////////////////////////////////////////////////////////////////////////
1: 
1:             boolean isMatch = false;
1:             switch (operation)
1:             {
1:                 case EQ:
1:                 // Operation.isSatisfiedBy handles conclusion on !=,
1:                 // here we just need to make sure that term matched it
1:                 case NOT_EQ:
1:                     isMatch = validator.compare(term, requestedValue) == 0;
1:                     break;
1: 
1:                 case PREFIX:
1:                     isMatch = ByteBufferUtil.startsWith(term, requestedValue);
1:                     break;
1: 
1:                 case SUFFIX:
1:                     isMatch = ByteBufferUtil.endsWith(term, requestedValue);
1:                     break;
1: 
1:                 case CONTAINS:
1:                     isMatch = ByteBufferUtil.contains(term, requestedValue);
1:                     break;
1:             }
1: 
1:             if (isMatch)
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.plan;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Objects;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.cql3.Operator;
1: import org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer;
1: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndex;
1: import org.apache.cassandra.index.sasi.utils.TypeUtil;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.collect.Iterators;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class Expression
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(Expression.class);
1: 
1:     public enum Op
1:     {
0:         EQ, NOT_EQ, RANGE
1:     }
1: 
1:     private final QueryController controller;
1: 
1:     public final AbstractAnalyzer analyzer;
1: 
1:     public final ColumnIndex index;
1:     public final AbstractType<?> validator;
1:     public final boolean isLiteral;
1: 
1:     @VisibleForTesting
1:     protected Op operation;
1: 
1:     public Bound lower, upper;
1:     public List<ByteBuffer> exclusions = new ArrayList<>();
1: 
1:     public Expression(Expression other)
1:     {
1:         this(other.controller, other.index);
1:         operation = other.operation;
1:     }
1: 
1:     public Expression(QueryController controller, ColumnIndex columnIndex)
1:     {
1:         this.controller = controller;
1:         this.index = columnIndex;
1:         this.analyzer = columnIndex.getAnalyzer();
1:         this.validator = columnIndex.getValidator();
1:         this.isLiteral = columnIndex.isLiteral();
1:     }
1: 
1:     @VisibleForTesting
1:     public Expression(String name, AbstractType<?> validator)
1:     {
1:         this(null, new ColumnIndex(UTF8Type.instance, ColumnDefinition.regularDef("sasi", "internal", name, validator), null));
1:     }
1: 
1:     public Expression setLower(Bound newLower)
1:     {
1:         lower = newLower == null ? null : new Bound(newLower.value, newLower.inclusive);
1:         return this;
1:     }
1: 
1:     public Expression setUpper(Bound newUpper)
1:     {
1:         upper = newUpper == null ? null : new Bound(newUpper.value, newUpper.inclusive);
1:         return this;
1:     }
1: 
1:     public Expression setOp(Op op)
1:     {
1:         this.operation = op;
1:         return this;
1:     }
1: 
1:     public Expression add(Operator op, ByteBuffer value)
1:     {
1:         boolean lowerInclusive = false, upperInclusive = false;
1:         switch (op)
1:         {
1:             case EQ:
1:                 lower = new Bound(value, true);
1:                 upper = lower;
0:                 operation = Op.EQ;
1:                 break;
1: 
1:             case NEQ:
1:                 // index expressions are priority sorted
1:                 // and NOT_EQ is the lowest priority, which means that operation type
1:                 // is always going to be set before reaching it in case of RANGE or EQ.
1:                 if (operation == null)
1:                 {
1:                     operation = Op.NOT_EQ;
1:                     lower = new Bound(value, true);
1:                     upper = lower;
1:                 }
1:                 else
1:                     exclusions.add(value);
1:                 break;
1: 
1:             case LTE:
0:                 upperInclusive = true;
1:             case LT:
1:                 operation = Op.RANGE;
0:                 upper = new Bound(value, upperInclusive);
1:                 break;
1: 
1:             case GTE:
0:                 lowerInclusive = true;
1:             case GT:
1:                 operation = Op.RANGE;
0:                 lower = new Bound(value, lowerInclusive);
1:                 break;
1:         }
1: 
1:         return this;
1:     }
1: 
1:     public Expression addExclusion(ByteBuffer value)
1:     {
1:         exclusions.add(value);
1:         return this;
1:     }
1: 
0:     public boolean contains(ByteBuffer value)
1:     {
1:         if (!TypeUtil.isValid(value, validator))
1:         {
1:             int size = value.remaining();
1:             if ((value = TypeUtil.tryUpcast(value, validator)) == null)
1:             {
0:                 logger.error("Can't cast value for {} to size accepted by {}, value size is {} bytes.",
1:                              index.getColumnName(),
1:                              validator,
0:                              size);
1:                 return false;
1:             }
1:         }
1: 
1:         if (lower != null)
1:         {
1:             // suffix check
1:             if (isLiteral)
1:             {
1:                 if (!validateStringValue(value, lower.value))
1:                     return false;
1:             }
1:             else
1:             {
1:                 // range or (not-)equals - (mainly) for numeric values
1:                 int cmp = validator.compare(lower.value, value);
1: 
1:                 // in case of (NOT_)EQ lower == upper
1:                 if (operation == Op.EQ || operation == Op.NOT_EQ)
1:                     return cmp == 0;
1: 
1:                 if (cmp > 0 || (cmp == 0 && !lower.inclusive))
1:                     return false;
1:             }
1:         }
1: 
1:         if (upper != null && lower != upper)
1:         {
1:             // string (prefix or suffix) check
1:             if (isLiteral)
1:             {
1:                 if (!validateStringValue(value, upper.value))
1:                     return false;
1:             }
1:             else
1:             {
1:                 // range - mainly for numeric values
1:                 int cmp = validator.compare(upper.value, value);
1:                 if (cmp < 0 || (cmp == 0 && !upper.inclusive))
1:                     return false;
1:             }
1:         }
1: 
1:         // as a last step let's check exclusions for the given field,
1:         // this covers EQ/RANGE with exclusions.
1:         for (ByteBuffer term : exclusions)
1:         {
1:             if (isLiteral && validateStringValue(value, term))
1:                 return false;
1:             else if (validator.compare(term, value) == 0)
1:                 return false;
1:         }
1: 
1:         return true;
1:     }
1: 
1:     private boolean validateStringValue(ByteBuffer columnValue, ByteBuffer requestedValue)
1:     {
1:         analyzer.reset(columnValue.duplicate());
1:         while (analyzer.hasNext())
1:         {
1:             ByteBuffer term = analyzer.next();
0:             if (ByteBufferUtil.contains(term, requestedValue))
1:                 return true;
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public Op getOp()
1:     {
1:         return operation;
1:     }
1: 
1:     public void checkpoint()
1:     {
1:         if (controller == null)
1:             return;
1: 
1:         controller.checkpoint();
1:     }
1: 
1:     public boolean hasLower()
1:     {
1:         return lower != null;
1:     }
1: 
1:     public boolean hasUpper()
1:     {
1:         return upper != null;
1:     }
1: 
1:     public boolean isLowerSatisfiedBy(OnDiskIndex.DataTerm term)
1:     {
1:         if (!hasLower())
1:             return true;
1: 
1:         int cmp = term.compareTo(validator, lower.value, false);
1:         return cmp > 0 || cmp == 0 && lower.inclusive;
1:     }
1: 
1:     public boolean isUpperSatisfiedBy(OnDiskIndex.DataTerm term)
1:     {
1:         if (!hasUpper())
1:             return true;
1: 
1:         int cmp = term.compareTo(validator, upper.value, false);
1:         return cmp < 0 || cmp == 0 && upper.inclusive;
1:     }
1: 
1:     public boolean isIndexed()
1:     {
1:         return index.isIndexed();
1:     }
1: 
1:     public String toString()
1:     {
1:         return String.format("Expression{name: %s, op: %s, lower: (%s, %s), upper: (%s, %s), exclusions: %s}",
1:                              index.getColumnName(),
1:                              operation,
1:                              lower == null ? "null" : validator.getString(lower.value),
1:                              lower != null && lower.inclusive,
1:                              upper == null ? "null" : validator.getString(upper.value),
1:                              upper != null && upper.inclusive,
1:                              Iterators.toString(Iterators.transform(exclusions.iterator(), validator::getString)));
1:     }
1: 
1:     public int hashCode()
1:     {
1:         return new HashCodeBuilder().append(index.getColumnName())
1:                                     .append(operation)
1:                                     .append(validator)
1:                                     .append(lower).append(upper)
1:                                     .append(exclusions).build();
1:     }
1: 
1:     public boolean equals(Object other)
1:     {
1:         if (!(other instanceof Expression))
1:             return false;
1: 
1:         if (this == other)
1:             return true;
1: 
1:         Expression o = (Expression) other;
1: 
1:         return Objects.equals(index.getColumnName(), o.index.getColumnName())
1:                 && validator.equals(o.validator)
1:                 && operation == o.operation
1:                 && Objects.equals(lower, o.lower)
1:                 && Objects.equals(upper, o.upper)
1:                 && exclusions.equals(o.exclusions);
1:     }
1: 
1: 
1:     public static class Bound
1:     {
1:         public final ByteBuffer value;
1:         public final boolean inclusive;
1: 
1:         public Bound(ByteBuffer value, boolean inclusive)
1:         {
1:             this.value = value;
1:             this.inclusive = inclusive;
1:         }
1: 
1:         public boolean equals(Object other)
1:         {
1:             if (!(other instanceof Bound))
1:                 return false;
1: 
1:             Bound o = (Bound) other;
1:             return value.equals(o.value) && inclusive == o.inclusive;
1:         }
1:     }
1: }
author:Jordan West
-------------------------------------------------------------------------------
commit:2ca2fff
/////////////////////////////////////////////////////////////////////////
0:         if (nonMatchingPartial(term))
0:             return false;
0: 
/////////////////////////////////////////////////////////////////////////
0:         if (nonMatchingPartial(term))
0:             return false;
0: 
/////////////////////////////////////////////////////////////////////////
0:     private boolean nonMatchingPartial(OnDiskIndex.DataTerm term)
0:     {
0:         return term.isPartial() && operation == Op.PREFIX;
0:     }
author:Giampaolo Trapasso
-------------------------------------------------------------------------------
commit:db68ac9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:                 logger.error("Can't cast value for {} to size accepted by {}, value size is {}.",
1:                              FBUtilities.prettyPrintMemory(size));
============================================================================