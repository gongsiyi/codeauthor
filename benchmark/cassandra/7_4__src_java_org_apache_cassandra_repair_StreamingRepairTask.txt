1:eb4fa4a: /*
1:eb4fa4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:eb4fa4a:  * or more contributor license agreements.  See the NOTICE file
1:eb4fa4a:  * distributed with this work for additional information
1:eb4fa4a:  * regarding copyright ownership.  The ASF licenses this file
1:eb4fa4a:  * to you under the Apache License, Version 2.0 (the
1:eb4fa4a:  * "License"); you may not use this file except in compliance
1:eb4fa4a:  * with the License.  You may obtain a copy of the License at
1:eb4fa4a:  *
1:eb4fa4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb4fa4a:  *
1:eb4fa4a:  * Unless required by applicable law or agreed to in writing, software
1:eb4fa4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb4fa4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb4fa4a:  * See the License for the specific language governing permissions and
1:eb4fa4a:  * limitations under the License.
2:eb4fa4a:  */
1:eb4fa4a: package org.apache.cassandra.repair;
7:eb4fa4a: 
1:c6867c2: import java.net.InetAddress;
1:c6867c2: 
1:eb4fa4a: import org.slf4j.Logger;
1:eb4fa4a: import org.slf4j.LoggerFactory;
1:eb4fa4a: 
1:c6867c2: import org.apache.cassandra.db.SystemKeyspace;
1:eb4fa4a: import org.apache.cassandra.net.MessagingService;
1:eb4fa4a: import org.apache.cassandra.repair.messages.SyncComplete;
1:eb4fa4a: import org.apache.cassandra.repair.messages.SyncRequest;
1:a5b90f1: import org.apache.cassandra.service.ActiveRepairService;
1:810c2d5: import org.apache.cassandra.streaming.StreamEvent;
1:810c2d5: import org.apache.cassandra.streaming.StreamEventHandler;
1:810c2d5: import org.apache.cassandra.streaming.StreamPlan;
1:810c2d5: import org.apache.cassandra.streaming.StreamState;
1:eb4fa4a: 
2:eb4fa4a: /**
1:810c2d5:  * StreamingRepairTask performs data streaming between two remote replica which neither is not repair coordinator.
1:810c2d5:  * Task will send {@link SyncComplete} message back to coordinator upon streaming completion.
1:eb4fa4a:  */
1:eb4fa4a: public class StreamingRepairTask implements Runnable, StreamEventHandler
4:eb4fa4a: {
1:eb4fa4a:     private static final Logger logger = LoggerFactory.getLogger(StreamingRepairTask.class);
1:a7b7214: 
1:810c2d5:     private final RepairJobDesc desc;
1:810c2d5:     private final SyncRequest request;
1:810c2d5:     private final long repairedAt;
1:eb4fa4a: 
1:810c2d5:     public StreamingRepairTask(RepairJobDesc desc, SyncRequest request, long repairedAt)
1:eb4fa4a:     {
1:eb4fa4a:         this.desc = desc;
1:eb4fa4a:         this.request = request;
1:810c2d5:         this.repairedAt = repairedAt;
4:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     public void run()
1:eb4fa4a:     {
1:c6867c2:         InetAddress dest = request.dst;
1:c6867c2:         InetAddress preferred = SystemKeyspace.getPreferredIP(dest);
1:2dc2bb8:         logger.info("[streaming task #{}] Performing streaming repair of {} ranges with {}", desc.sessionId, request.ranges.size(), request.dst);
1:a5b90f1:         boolean isIncremental = false;
1:a5b90f1:         if (desc.parentSessionId != null)
1:a5b90f1:         {
1:a5b90f1:             ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(desc.parentSessionId);
1:a5b90f1:             isIncremental = prs.isIncremental;
1:a5b90f1:         }
1:a018bcb:         new StreamPlan("Repair", repairedAt, 1, false, isIncremental, false).listeners(this)
1:810c2d5:                                             .flushBeforeTransfer(true)
1:810c2d5:                                             // request ranges from the remote node
1:c6867c2:                                             .requestRanges(dest, preferred, desc.keyspace, request.ranges, desc.columnFamily)
1:810c2d5:                                             // send ranges to the remote node
1:c6867c2:                                             .transferRanges(dest, preferred, desc.keyspace, request.ranges, desc.columnFamily)
1:810c2d5:                                             .execute();
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     public void handleStreamEvent(StreamEvent event)
1:eb4fa4a:     {
1:eb4fa4a:         // Nothing to do here, all we care about is the final success or failure and that's handled by
1:eb4fa4a:         // onSuccess and onFailure
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     /**
1:810c2d5:      * If we succeeded on both stream in and out, reply back to coordinator
1:eb4fa4a:      */
1:eb4fa4a:     public void onSuccess(StreamState state)
1:eb4fa4a:     {
1:2dc2bb8:         logger.info("[repair #{}] streaming task succeed, returning response to {}", desc.sessionId, request.initiator);
1:eb4fa4a:         MessagingService.instance().sendOneWay(new SyncComplete(desc, request.src, request.dst, true).createMessage(), request.initiator);
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     /**
1:810c2d5:      * If we failed on either stream in or out, reply fail to coordinator
1:eb4fa4a:      */
1:eb4fa4a:     public void onFailure(Throwable t)
1:eb4fa4a:     {
1:eb4fa4a:         MessagingService.instance().sendOneWay(new SyncComplete(desc, request.src, request.dst, false).createMessage(), request.initiator);
1:eb4fa4a:     }
1:eb4fa4a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:2dc2bb8
/////////////////////////////////////////////////////////////////////////
1:         logger.info("[streaming task #{}] Performing streaming repair of {} ranges with {}", desc.sessionId, request.ranges.size(), request.dst);
/////////////////////////////////////////////////////////////////////////
1:         logger.info("[repair #{}] streaming task succeed, returning response to {}", desc.sessionId, request.initiator);
commit:872e121
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:66f3014
/////////////////////////////////////////////////////////////////////////
author:Paulo Motta
-------------------------------------------------------------------------------
commit:a018bcb
/////////////////////////////////////////////////////////////////////////
1:         new StreamPlan("Repair", repairedAt, 1, false, isIncremental, false).listeners(this)
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a5b90f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.ActiveRepairService;
/////////////////////////////////////////////////////////////////////////
1:         boolean isIncremental = false;
1:         if (desc.parentSessionId != null)
1:         {
1:             ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(desc.parentSessionId);
1:             isIncremental = prs.isIncremental;
1:         }
0:         new StreamPlan("Repair", repairedAt, 1, false, isIncremental).listeners(this)
commit:0de0b8c
/////////////////////////////////////////////////////////////////////////
0:         new StreamPlan("Repair", repairedAt, 1, false).listeners(this)
commit:a7b7214
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.ActiveRepairService;
/////////////////////////////////////////////////////////////////////////
0:         long repairedAt = ActiveRepairService.UNREPAIRED_SSTABLE;
0:         if (desc.parentSessionId != null && ActiveRepairService.instance.getParentRepairSession(desc.parentSessionId) != null)
0:             repairedAt = ActiveRepairService.instance.getParentRepairSession(desc.parentSessionId).repairedAt;
1: 
0:         StreamResultFuture op = new StreamPlan("Repair", repairedAt)
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:c6de882
commit:6cca24f
commit:c6867c2
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: 
1: import org.apache.cassandra.db.SystemKeyspace;
/////////////////////////////////////////////////////////////////////////
1:         InetAddress dest = request.dst;
1:         InetAddress preferred = SystemKeyspace.getPreferredIP(dest);
1:                                     .requestRanges(dest, preferred, desc.keyspace, request.ranges, desc.columnFamily)
1:                                     .transferRanges(dest, preferred, desc.keyspace, request.ranges, desc.columnFamily)
commit:810c2d5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.streaming.StreamEvent;
1: import org.apache.cassandra.streaming.StreamEventHandler;
1: import org.apache.cassandra.streaming.StreamPlan;
1: import org.apache.cassandra.streaming.StreamState;
1:  * StreamingRepairTask performs data streaming between two remote replica which neither is not repair coordinator.
1:  * Task will send {@link SyncComplete} message back to coordinator upon streaming completion.
1:     private final RepairJobDesc desc;
1:     private final SyncRequest request;
1:     private final long repairedAt;
1:     public StreamingRepairTask(RepairJobDesc desc, SyncRequest request, long repairedAt)
1:         this.repairedAt = repairedAt;
0:         new StreamPlan("Repair", repairedAt, 1).listeners(this)
1:                                             .flushBeforeTransfer(true)
1:                                             // request ranges from the remote node
0:                                             .requestRanges(request.dst, desc.keyspace, request.ranges, desc.columnFamily)
1:                                             // send ranges to the remote node
0:                                             .transferRanges(request.dst, desc.keyspace, request.ranges, desc.columnFamily)
1:                                             .execute();
/////////////////////////////////////////////////////////////////////////
1:      * If we succeeded on both stream in and out, reply back to coordinator
/////////////////////////////////////////////////////////////////////////
1:      * If we failed on either stream in or out, reply fail to coordinator
commit:eb4fa4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Table;
0: import org.apache.cassandra.io.sstable.SSTableReader;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.repair.messages.SyncComplete;
1: import org.apache.cassandra.repair.messages.SyncRequest;
0: import org.apache.cassandra.streaming.*;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
0:  * Task that make two nodes exchange (stream) some ranges (for a given table/cf).
0:  * This handle the case where the local node is neither of the two nodes that
0:  * must stream their range, and allow to register a callback to be called on
0:  * completion.
1:  */
1: public class StreamingRepairTask implements Runnable, StreamEventHandler
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(StreamingRepairTask.class);
1: 
0:     /** Repair session ID that this streaming task belongs */
0:     public final RepairJobDesc desc;
0:     public final SyncRequest request;
1: 
0:     // we expect one callback for the receive, and one for the send
0:     private final AtomicInteger outstanding = new AtomicInteger(2);
1: 
0:     public StreamingRepairTask(RepairJobDesc desc, SyncRequest request)
1:     {
1:         this.desc = desc;
1:         this.request = request;
1:     }
1: 
1:     /**
0:      * Returns true if the task if the task can be executed locally, false if
0:      * it has to be forwarded.
1:      */
0:     public boolean isLocalTask()
1:     {
0:         return request.initiator.equals(request.src);
1:     }
1: 
1:     public void run()
1:     {
0:         if (request.src.equals(FBUtilities.getBroadcastAddress()))
0:             initiateStreaming();
0:         else
0:             forwardToSource();
1:     }
1: 
0:     private void initiateStreaming()
1:     {
0:         logger.info(String.format("[streaming task #%s] Performing streaming repair of %d ranges with %s", desc.sessionId, request.ranges.size(), request.dst));
0:         StreamResultFuture op = new StreamPlan("Repair")
0:                                     .flushBeforeTransfer(true)
0:                                     // request ranges from the remote node
0:                                     .requestRanges(request.dst, desc.keyspace, request.ranges, desc.columnFamily)
0:                                     // send ranges to the remote node
0:                                     .transferRanges(request.dst, desc.keyspace, request.ranges, desc.columnFamily)
0:                                     .execute();
0:         op.addEventListener(this);
1:     }
1: 
0:     private void forwardToSource()
1:     {
0:         logger.info(String.format("[repair #%s] Forwarding streaming repair of %d ranges to %s (to be streamed with %s)", desc.sessionId, request.ranges.size(), request.src, request.dst));
0:         MessagingService.instance().sendOneWay(request.createMessage(), request.src);
1:     }
1: 
1:     public void handleStreamEvent(StreamEvent event)
1:     {
1:         // Nothing to do here, all we care about is the final success or failure and that's handled by
1:         // onSuccess and onFailure
1:     }
1: 
1:     /**
0:      * If we succeeded on both stream in and out, reply back to the initiator.
1:      */
1:     public void onSuccess(StreamState state)
1:     {
0:         logger.info(String.format("[repair #%s] streaming task succeed, returning response to %s", desc.sessionId, request.initiator));
1:         MessagingService.instance().sendOneWay(new SyncComplete(desc, request.src, request.dst, true).createMessage(), request.initiator);
1:     }
1: 
1:     /**
0:      * If we failed on either stream in or out, reply fail to the initiator.
1:      */
1:     public void onFailure(Throwable t)
1:     {
1:         MessagingService.instance().sendOneWay(new SyncComplete(desc, request.src, request.dst, false).createMessage(), request.initiator);
1:     }
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:311c276
commit:dceb739
/////////////////////////////////////////////////////////////////////////
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:44fa2cd
/////////////////////////////////////////////////////////////////////////
0:         StreamResultFuture op = new StreamPlan("Repair", repairedAt, 1)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
============================================================================