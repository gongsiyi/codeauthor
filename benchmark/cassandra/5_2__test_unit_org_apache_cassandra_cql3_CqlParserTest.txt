1:8a2d8a1: /*
1:8a2d8a1:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a2d8a1:  * or more contributor license agreements.  See the NOTICE file
1:8a2d8a1:  * distributed with this work for additional information
1:8a2d8a1:  * regarding copyright ownership.  The ASF licenses this file
1:8a2d8a1:  * to you under the Apache License, Version 2.0 (the
1:8a2d8a1:  * "License"); you may not use this file except in compliance
1:8a2d8a1:  * with the License.  You may obtain a copy of the License at
1:8a2d8a1:  *
1:8a2d8a1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a2d8a1:  *
1:8a2d8a1:  * Unless required by applicable law or agreed to in writing, software
1:8a2d8a1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a2d8a1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a2d8a1:  * See the License for the specific language governing permissions and
1:8a2d8a1:  * limitations under the License.
1:8a2d8a1:  */
1:8a2d8a1: package org.apache.cassandra.cql3;
1:8a2d8a1: 
1:8a2d8a1: import org.junit.Test;
1:8a2d8a1: 
1:8a2d8a1: import org.antlr.runtime.ANTLRStringStream;
1:8a2d8a1: import org.antlr.runtime.BaseRecognizer;
1:8a2d8a1: import org.antlr.runtime.CharStream;
1:8a2d8a1: import org.antlr.runtime.CommonTokenStream;
1:8a2d8a1: import org.antlr.runtime.RecognitionException;
1:8a2d8a1: import org.antlr.runtime.TokenStream;
1:8a2d8a1: 
1:8a2d8a1: import static org.junit.Assert.*;
1:8a2d8a1: 
1:8a2d8a1: public class CqlParserTest
1:8a2d8a1: {
1:8a2d8a1:     @Test
1:8a2d8a1:     public void testAddErrorListener() throws Exception
1:8a2d8a1:     {
1:8a2d8a1:         SyntaxErrorCounter firstCounter = new SyntaxErrorCounter();
1:8a2d8a1:         SyntaxErrorCounter secondCounter = new SyntaxErrorCounter();
1:8a2d8a1: 
1:8309543:         CharStream stream = new ANTLRStringStream("SELECT * FORM FROM test");
1:8a2d8a1:         CqlLexer lexer = new CqlLexer(stream);
1:8a2d8a1: 
1:8a2d8a1:         TokenStream tokenStream = new CommonTokenStream(lexer);
1:8a2d8a1:         CqlParser parser = new CqlParser(tokenStream);
1:8a2d8a1:         parser.addErrorListener(firstCounter);
1:8a2d8a1:         parser.addErrorListener(secondCounter);
1:8a2d8a1: 
1:8309543:         // By default CqlParser should recover from the syntax error by removing FORM
1:8309543:         // but as recoverFromMismatchedToken and recover have been overloaded, it will not
1:8309543:         // and the returned ParsedStatement will be null.
1:8309543:         assertNull(parser.query());
1:8a2d8a1: 
1:8309543:         // Only one error must be reported (mismatched: FORM).
1:8309543:         assertEquals(1, firstCounter.count);
1:8309543:         assertEquals(1, secondCounter.count);
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     @Test
1:8a2d8a1:     public void testRemoveErrorListener() throws Exception
1:8a2d8a1:     {
1:8a2d8a1:         SyntaxErrorCounter firstCounter = new SyntaxErrorCounter();
1:8a2d8a1:         SyntaxErrorCounter secondCounter = new SyntaxErrorCounter();
1:8a2d8a1: 
2:8a2d8a1:         CharStream stream = new ANTLRStringStream("SELECT * FORM test;");
1:8a2d8a1:         CqlLexer lexer = new CqlLexer(stream);
1:8a2d8a1: 
1:8a2d8a1:         TokenStream tokenStream = new CommonTokenStream(lexer);
1:8a2d8a1:         CqlParser parser = new CqlParser(tokenStream);
1:8a2d8a1:         parser.addErrorListener(firstCounter);
1:8a2d8a1:         parser.addErrorListener(secondCounter);
1:8a2d8a1:         parser.removeErrorListener(secondCounter);
1:8a2d8a1: 
2:8a2d8a1:         parser.query();
1:8a2d8a1: 
1:8309543:         assertEquals(1, firstCounter.count);
1:8a2d8a1:         assertEquals(0, secondCounter.count);
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     private static final class SyntaxErrorCounter implements ErrorListener
1:8a2d8a1:     {
1:8a2d8a1:         private int count;
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void syntaxError(BaseRecognizer recognizer, String[] tokenNames, RecognitionException e)
1:8a2d8a1:         {
1:8a2d8a1:             count++;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void syntaxError(BaseRecognizer recognizer, String errorMsg)
1:8a2d8a1:         {
1:8a2d8a1:             count++;
1:8a2d8a1:         }
1:8a2d8a1:     }
1:8a2d8a1: }
============================================================================
author:Berenguer Blasi
-------------------------------------------------------------------------------
commit:8309543
/////////////////////////////////////////////////////////////////////////
1:         CharStream stream = new ANTLRStringStream("SELECT * FORM FROM test");
/////////////////////////////////////////////////////////////////////////
1:         // By default CqlParser should recover from the syntax error by removing FORM
1:         // but as recoverFromMismatchedToken and recover have been overloaded, it will not
1:         // and the returned ParsedStatement will be null.
1:         assertNull(parser.query());
1:         // Only one error must be reported (mismatched: FORM).
1:         assertEquals(1, firstCounter.count);
1:         assertEquals(1, secondCounter.count);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, firstCounter.count);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:9f4284a
author:Dave Brosius
-------------------------------------------------------------------------------
commit:2279d49
/////////////////////////////////////////////////////////////////////////
0:         // ANTLR 3.5 reports 2 errors in the sentence above (missing FROM and missing EOF).
0:         assertTrue(firstCounter.count > 0);
0:         assertTrue(secondCounter.count > 0);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(firstCounter.count > 0);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7f3a23
/////////////////////////////////////////////////////////////////////////
0:         CharStream stream = new ANTLRStringStream("SELECT * FORM users");
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(firstCounter.count > 0);
0:         assertTrue(secondCounter.count > 0);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(firstCounter.count > 0);
author:blerer
-------------------------------------------------------------------------------
commit:8a2d8a1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import org.junit.Test;
1: 
1: import org.antlr.runtime.ANTLRStringStream;
1: import org.antlr.runtime.BaseRecognizer;
1: import org.antlr.runtime.CharStream;
1: import org.antlr.runtime.CommonTokenStream;
1: import org.antlr.runtime.RecognitionException;
1: import org.antlr.runtime.TokenStream;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class CqlParserTest
1: {
1:     @Test
1:     public void testAddErrorListener() throws Exception
1:     {
1:         SyntaxErrorCounter firstCounter = new SyntaxErrorCounter();
1:         SyntaxErrorCounter secondCounter = new SyntaxErrorCounter();
1: 
1:         CharStream stream = new ANTLRStringStream("SELECT * FORM test;");
1:         CqlLexer lexer = new CqlLexer(stream);
1: 
1:         TokenStream tokenStream = new CommonTokenStream(lexer);
1:         CqlParser parser = new CqlParser(tokenStream);
1:         parser.addErrorListener(firstCounter);
1:         parser.addErrorListener(secondCounter);
1: 
1:         parser.query();
1: 
0:         assertEquals(1, firstCounter.count);
0:         assertEquals(1, secondCounter.count);
1:     }
1: 
1:     @Test
1:     public void testRemoveErrorListener() throws Exception
1:     {
1:         SyntaxErrorCounter firstCounter = new SyntaxErrorCounter();
1:         SyntaxErrorCounter secondCounter = new SyntaxErrorCounter();
1: 
1:         CharStream stream = new ANTLRStringStream("SELECT * FORM test;");
1:         CqlLexer lexer = new CqlLexer(stream);
1: 
1:         TokenStream tokenStream = new CommonTokenStream(lexer);
1:         CqlParser parser = new CqlParser(tokenStream);
1:         parser.addErrorListener(firstCounter);
1:         parser.addErrorListener(secondCounter);
1:         parser.removeErrorListener(secondCounter);
1: 
1:         parser.query();
1: 
0:         assertEquals(1, firstCounter.count);
1:         assertEquals(0, secondCounter.count);
1:     }
1: 
1:     private static final class SyntaxErrorCounter implements ErrorListener
1:     {
1:         private int count;
1: 
1:         @Override
1:         public void syntaxError(BaseRecognizer recognizer, String[] tokenNames, RecognitionException e)
1:         {
1:             count++;
1:         }
1: 
1:         @Override
1:         public void syntaxError(BaseRecognizer recognizer, String errorMsg)
1:         {
1:             count++;
1:         }
1:     }
1: }
============================================================================