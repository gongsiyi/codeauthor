1:72790dc: /*
1:72790dc:  * Copyright 2005-2010 Roger Kapsi, Sam Berlin
3:72790dc:  *
1:72790dc:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:72790dc:  *   you may not use this file except in compliance with the License.
1:72790dc:  *   You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *       http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  *   Unless required by applicable law or agreed to in writing, software
1:72790dc:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  *   See the License for the specific language governing permissions and
1:72790dc:  *   limitations under the License.
1:72790dc:  */
26:72790dc: 
1:72790dc: package org.apache.cassandra.index.sasi.utils.trie;
1:72790dc: 
1:72790dc: import java.io.Serializable;
1:72790dc: import java.util.AbstractMap;
1:72790dc: import java.util.Map;
1:72790dc: 
2:72790dc: /**
1:72790dc:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:72790dc:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:72790dc:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:72790dc:  * on rkapsi/patricia-trie project) only supports String keys)
1:72790dc:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:72790dc:  */
1:72790dc: 
1:72790dc: /**
1:68d2526:  * This class provides some basic {@link Trie} functionality and
1:72790dc:  * utility methods for actual {@link Trie} implementations.
1:72790dc:  */
1:72790dc: abstract class AbstractTrie<K, V> extends AbstractMap<K, V> implements Serializable, Trie<K, V>
1:72790dc: {
1:72790dc:     private static final long serialVersionUID = -6358111100045408883L;
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * The {@link KeyAnalyzer} that's being used to build the
1:72790dc:      * PATRICIA {@link Trie}
1:72790dc:      */
1:72790dc:     protected final KeyAnalyzer<? super K> keyAnalyzer;
1:68d2526: 
1:68d2526:     /**
1:68d2526:      * Constructs a new {@link Trie} using the given {@link KeyAnalyzer}
1:72790dc:      */
1:72790dc:     public AbstractTrie(KeyAnalyzer<? super K> keyAnalyzer)
1:72790dc:     {
1:72790dc:         this.keyAnalyzer = Tries.notNull(keyAnalyzer, "keyAnalyzer");
1:72790dc:     }
1:68d2526: 
1:72790dc:     @Override
1:72790dc:     public K selectKey(K key)
1:72790dc:     {
1:72790dc:         Map.Entry<K, V> entry = select(key);
1:72790dc:         return entry != null ? entry.getKey() : null;
1:72790dc:     }
1:68d2526: 
1:72790dc:     @Override
1:72790dc:     public V selectValue(K key)
1:72790dc:     {
1:72790dc:         Map.Entry<K, V> entry = select(key);
1:72790dc:         return entry != null ? entry.getValue() : null;
1:72790dc:     }
1:68d2526: 
1:72790dc:     @Override
1:72790dc:     public String toString()
1:72790dc:     {
1:72790dc:         StringBuilder buffer = new StringBuilder();
1:72790dc:         buffer.append("Trie[").append(size()).append("]={\n");
1:68d2526:         for (Map.Entry<K, V> entry : entrySet())
1:68d2526:         {
1:72790dc:             buffer.append("  ").append(entry).append("\n");
1:72790dc:         }
1:72790dc:         buffer.append("}\n");
1:72790dc:         return buffer.toString();
1:72790dc:     }
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * Returns the length of the given key in bits
1:68d2526:      *
1:72790dc:      * @see KeyAnalyzer#lengthInBits(Object)
1:72790dc:      */
1:72790dc:     final int lengthInBits(K key)
1:72790dc:     {
1:72790dc:         return key == null ? 0 : keyAnalyzer.lengthInBits(key);
1:72790dc:     }
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Returns whether or not the given bit on the
1:72790dc:      * key is set or false if the key is null.
1:68d2526:      *
1:72790dc:      * @see KeyAnalyzer#isBitSet(Object, int)
1:72790dc:      */
1:72790dc:     final boolean isBitSet(K key, int bitIndex)
1:72790dc:     {
1:72790dc:         return key != null && keyAnalyzer.isBitSet(key, bitIndex);
1:72790dc:     }
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * Utility method for calling {@link KeyAnalyzer#bitIndex(Object, Object)}
1:72790dc:      */
1:72790dc:     final int bitIndex(K key, K otherKey)
1:72790dc:     {
1:72790dc:         if (key != null && otherKey != null)
1:72790dc:         {
1:68d2526:             return keyAnalyzer.bitIndex(key, otherKey);
1:72790dc:         }
1:72790dc:         else if (key != null)
1:72790dc:         {
1:72790dc:             return bitIndex(key);
1:72790dc:         }
1:72790dc:         else if (otherKey != null)
1:72790dc:         {
1:72790dc:             return bitIndex(otherKey);
1:72790dc:         }
1:68d2526: 
1:72790dc:         return KeyAnalyzer.NULL_BIT_KEY;
1:72790dc:     }
1:68d2526: 
1:72790dc:     private int bitIndex(K key)
1:72790dc:     {
1:72790dc:         int lengthInBits = lengthInBits(key);
1:72790dc:         for (int i = 0; i < lengthInBits; i++)
1:72790dc:         {
1:72790dc:             if (isBitSet(key, i))
1:72790dc:                 return i;
1:72790dc:         }
1:68d2526: 
1:72790dc:         return KeyAnalyzer.NULL_BIT_KEY;
1:72790dc:     }
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * An utility method for calling {@link KeyAnalyzer#compare(Object, Object)}
1:72790dc:      */
1:72790dc:     final boolean compareKeys(K key, K other)
1:72790dc:     {
1:72790dc:         if (key == null)
1:72790dc:         {
1:72790dc:             return (other == null);
1:72790dc:         }
1:72790dc:         else if (other == null)
1:72790dc:         {
1:72790dc:             return false;
1:72790dc:         }
1:68d2526: 
1:72790dc:         return keyAnalyzer.compare(key, other) == 0;
1:72790dc:     }
1:68d2526: 
1:72790dc:     /**
1:72790dc:      * A basic implementation of {@link Entry}
1:72790dc:      */
1:72790dc:     abstract static class BasicEntry<K, V> implements Map.Entry<K, V>, Serializable
1:72790dc:     {
1:72790dc:         private static final long serialVersionUID = -944364551314110330L;
1:68d2526: 
1:72790dc:         protected K key;
1:68d2526: 
1:72790dc:         protected V value;
1:68d2526: 
1:72790dc:         private transient int hashCode = 0;
1:68d2526: 
1:72790dc:         public BasicEntry(K key, V value)
1:72790dc:         {
1:72790dc:             this.key = key;
1:72790dc:             this.value = value;
1:72790dc:         }
1:68d2526: 
1:72790dc:         /**
1:72790dc:          * Replaces the current key and value with the provided
1:72790dc:          * key &amp; value
1:72790dc:          */
1:72790dc:         public V setKeyValue(K key, V value)
1:72790dc:         {
1:72790dc:             this.key = key;
1:72790dc:             this.hashCode = 0;
1:72790dc:             return setValue(value);
1:72790dc:         }
1:68d2526: 
1:72790dc:         @Override
1:72790dc:         public K getKey()
1:72790dc:         {
1:72790dc:             return key;
1:72790dc:         }
1:68d2526: 
1:72790dc:         @Override
1:72790dc:         public V getValue()
1:72790dc:         {
1:72790dc:             return value;
1:72790dc:         }
1:68d2526: 
1:72790dc:         @Override
1:72790dc:         public V setValue(V value)
1:72790dc:         {
1:72790dc:             V previous = this.value;
1:72790dc:             this.value = value;
1:72790dc:             return previous;
1:72790dc:         }
1:68d2526: 
1:72790dc:         @Override
1:72790dc:         public int hashCode()
1:72790dc:         {
1:72790dc:             if (hashCode == 0)
1:72790dc:                 hashCode = (key != null ? key.hashCode() : 0);
1:72790dc:             return hashCode;
1:72790dc:         }
1:68d2526: 
1:72790dc:         @Override
1:72790dc:         public boolean equals(Object o)
1:72790dc:         {
1:72790dc:             if (o == this)
1:72790dc:             {
1:72790dc:                 return true;
1:72790dc:             }
1:72790dc:             else if (!(o instanceof Map.Entry<?, ?>))
1:72790dc:             {
1:72790dc:                 return false;
1:72790dc:             }
1:72790dc: 
1:72790dc:             Map.Entry<?, ?> other = (Map.Entry<?, ?>)o;
1:72790dc:             return Tries.areEqual(key, other.getKey()) && Tries.areEqual(value, other.getValue());
1:72790dc:         }
1:68d2526: 
1:72790dc:         @Override
1:72790dc:         public String toString()
1:72790dc:         {
1:72790dc:             return key + "=" + value;
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:  * This class provides some basic {@link Trie} functionality and
1: 
1:      * The {@link KeyAnalyzer} that's being used to build the
1: 
1:     /**
1:      * Constructs a new {@link Trie} using the given {@link KeyAnalyzer}
1: 
1: 
1: 
1:         for (Map.Entry<K, V> entry : entrySet())
1:         {
1: 
1:      *
1: 
1:      * Returns whether or not the given bit on the
1:      *
1: 
/////////////////////////////////////////////////////////////////////////
1:             return keyAnalyzer.bitIndex(key, otherKey);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2005-2010 Roger Kapsi, Sam Berlin
1:  *
1:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:  *   you may not use this file except in compliance with the License.
1:  *   You may obtain a copy of the License at
1:  *
1:  *       http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *   Unless required by applicable law or agreed to in writing, software
1:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *   See the License for the specific language governing permissions and
1:  *   limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.utils.trie;
1: 
1: import java.io.Serializable;
1: import java.util.AbstractMap;
1: import java.util.Map;
1: 
1: /**
1:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:  * on rkapsi/patricia-trie project) only supports String keys)
1:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:  */
1: 
1: /**
0:  * This class provides some basic {@link Trie} functionality and 
1:  * utility methods for actual {@link Trie} implementations.
1:  */
1: abstract class AbstractTrie<K, V> extends AbstractMap<K, V> implements Serializable, Trie<K, V>
1: {
1:     private static final long serialVersionUID = -6358111100045408883L;
1:     
1:     /**
0:      * The {@link KeyAnalyzer} that's being used to build the 
1:      * PATRICIA {@link Trie}
1:      */
1:     protected final KeyAnalyzer<? super K> keyAnalyzer;
1:     
1:     /** 
0:      * Constructs a new {@link Trie} using the given {@link KeyAnalyzer} 
1:      */
1:     public AbstractTrie(KeyAnalyzer<? super K> keyAnalyzer)
1:     {
1:         this.keyAnalyzer = Tries.notNull(keyAnalyzer, "keyAnalyzer");
1:     }
1:     
1:     @Override
1:     public K selectKey(K key)
1:     {
1:         Map.Entry<K, V> entry = select(key);
1:         return entry != null ? entry.getKey() : null;
1:     }
1:     
1:     @Override
1:     public V selectValue(K key)
1:     {
1:         Map.Entry<K, V> entry = select(key);
1:         return entry != null ? entry.getValue() : null;
1:     }
1:         
1:     @Override
1:     public String toString()
1:     {
1:         StringBuilder buffer = new StringBuilder();
1:         buffer.append("Trie[").append(size()).append("]={\n");
0:         for (Map.Entry<K, V> entry : entrySet()) {
1:             buffer.append("  ").append(entry).append("\n");
1:         }
1:         buffer.append("}\n");
1:         return buffer.toString();
1:     }
1:     
1:     /**
1:      * Returns the length of the given key in bits
1:      * 
1:      * @see KeyAnalyzer#lengthInBits(Object)
1:      */
1:     final int lengthInBits(K key)
1:     {
1:         return key == null ? 0 : keyAnalyzer.lengthInBits(key);
1:     }
1:     
1:     /**
0:      * Returns whether or not the given bit on the 
1:      * key is set or false if the key is null.
1:      * 
1:      * @see KeyAnalyzer#isBitSet(Object, int)
1:      */
1:     final boolean isBitSet(K key, int bitIndex)
1:     {
1:         return key != null && keyAnalyzer.isBitSet(key, bitIndex);
1:     }
1:     
1:     /**
1:      * Utility method for calling {@link KeyAnalyzer#bitIndex(Object, Object)}
1:      */
1:     final int bitIndex(K key, K otherKey)
1:     {
1:         if (key != null && otherKey != null)
1:         {
0:             return keyAnalyzer.bitIndex(key, otherKey);            
1:         }
1:         else if (key != null)
1:         {
1:             return bitIndex(key);
1:         }
1:         else if (otherKey != null)
1:         {
1:             return bitIndex(otherKey);
1:         }
1:         
1:         return KeyAnalyzer.NULL_BIT_KEY;
1:     }
1:     
1:     private int bitIndex(K key)
1:     {
1:         int lengthInBits = lengthInBits(key);
1:         for (int i = 0; i < lengthInBits; i++)
1:         {
1:             if (isBitSet(key, i))
1:                 return i;
1:         }
1:         
1:         return KeyAnalyzer.NULL_BIT_KEY;
1:     }
1:     
1:     /**
1:      * An utility method for calling {@link KeyAnalyzer#compare(Object, Object)}
1:      */
1:     final boolean compareKeys(K key, K other)
1:     {
1:         if (key == null)
1:         {
1:             return (other == null);
1:         }
1:         else if (other == null)
1:         {
1:             return false;
1:         }
1:         
1:         return keyAnalyzer.compare(key, other) == 0;
1:     }
1:     
1:     /**
1:      * A basic implementation of {@link Entry}
1:      */
1:     abstract static class BasicEntry<K, V> implements Map.Entry<K, V>, Serializable
1:     {
1:         private static final long serialVersionUID = -944364551314110330L;
1: 
1:         protected K key;
1:         
1:         protected V value;
1:         
1:         private transient int hashCode = 0;
1:         
1:         public BasicEntry(K key, V value)
1:         {
1:             this.key = key;
1:             this.value = value;
1:         }
1:         
1:         /**
1:          * Replaces the current key and value with the provided
1:          * key &amp; value
1:          */
1:         public V setKeyValue(K key, V value)
1:         {
1:             this.key = key;
1:             this.hashCode = 0;
1:             return setValue(value);
1:         }
1:         
1:         @Override
1:         public K getKey()
1:         {
1:             return key;
1:         }
1:         
1:         @Override
1:         public V getValue()
1:         {
1:             return value;
1:         }
1:         
1:         @Override
1:         public V setValue(V value)
1:         {
1:             V previous = this.value;
1:             this.value = value;
1:             return previous;
1:         }
1:         
1:         @Override
1:         public int hashCode()
1:         {
1:             if (hashCode == 0)
1:                 hashCode = (key != null ? key.hashCode() : 0);
1:             return hashCode;
1:         }
1:         
1:         @Override
1:         public boolean equals(Object o)
1:         {
1:             if (o == this)
1:             {
1:                 return true;
1:             }
1:             else if (!(o instanceof Map.Entry<?, ?>))
1:             {
1:                 return false;
1:             }
1:             
1:             Map.Entry<?, ?> other = (Map.Entry<?, ?>)o;
1:             return Tries.areEqual(key, other.getKey()) && Tries.areEqual(value, other.getValue());
1:         }
1:         
1:         @Override
1:         public String toString()
1:         {
1:             return key + "=" + value;
1:         }
1:     }
1: }
============================================================================