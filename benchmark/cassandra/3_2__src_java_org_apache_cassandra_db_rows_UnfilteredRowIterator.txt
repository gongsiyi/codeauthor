1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
6:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
8:a991b64: 
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: 
6:a991b64: /**
1:a991b64:  * An iterator over the rows of a given partition that also includes deletion informations.
1:a991b64:  * <p>
1:a991b64:  * An {@code UnfilteredRowIterator} contains a few partition top-level informations and is an
1:a991b64:  * iterator of {@code Unfiltered}, that is of either {@code Row} or {@code RangeTombstoneMarker}.
1:a991b64:  * An implementation of {@code UnfilteredRowIterator} <b>must</b> provide the following
1:a991b64:  * guarantees:
1:a991b64:  *   1. the returned {@code Unfiltered} must be in clustering order, or in reverse clustering
1:a991b64:  *      order iff {@link #isReverseOrder} returns true.
1:a991b64:  *   2. the iterator should not shadow its own data. That is, no deletion
1:a991b64:  *      (partition level deletion, row deletion, range tombstone, complex
1:a991b64:  *      deletion) should delete anything else returned by the iterator (cell, row, ...).
1:a991b64:  *   3. every "start" range tombstone marker should have a corresponding "end" marker, and no other
1:a991b64:  *      marker should be in-between this start-end pair of marker. Note that due to the
1:a991b64:  *      previous rule this means that between a "start" and a corresponding "end" marker there
1:a991b64:  *      can only be rows that are not deleted by the markers. Also note that when iterating
1:a991b64:  *      in reverse order, "end" markers are returned before their "start" counterpart (i.e.
1:a991b64:  *      "start" and "end" are always in the sense of the clustering order).
1:a991b64:  *
1:a991b64:  * Note further that the objects returned by next() are only valid until the
1:a991b64:  * next call to hasNext() or next(). If a consumer wants to keep a reference on
1:a991b64:  * the returned objects for longer than the iteration, it must make a copy of
1:a991b64:  * it explicitly.
1:a991b64:  */
1:6094974: public interface UnfilteredRowIterator extends BaseRowIterator<Unfiltered>
1:a991b64: {
1:a991b64:     /**
1:a991b64:      * The partition level deletion for the partition this iterate over.
1:a991b64:      */
1:a991b64:     public DeletionTime partitionLevelDeletion();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Return "statistics" about what is returned by this iterator. Those are used for
1:a991b64:      * performance reasons (for delta-encoding for instance) and code should not
1:a991b64:      * expect those to be exact.
1:a991b64:      */
1:c055ab9:     public EncodingStats stats();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns whether this iterator has no data (including no deletion data).
1:a991b64:      */
1:a991b64:     public default boolean isEmpty()
1:a991b64:     {
1:a991b64:         return partitionLevelDeletion().isLive()
1:a991b64:             && staticRow().isEmpty()
1:a991b64:             && !hasNext();
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: public interface UnfilteredRowIterator extends BaseRowIterator<Unfiltered>
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
1:     public EncodingStats stats();
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import java.util.Iterator;
1: 
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * An iterator over the rows of a given partition that also includes deletion informations.
1:  * <p>
1:  * An {@code UnfilteredRowIterator} contains a few partition top-level informations and is an
1:  * iterator of {@code Unfiltered}, that is of either {@code Row} or {@code RangeTombstoneMarker}.
1:  * An implementation of {@code UnfilteredRowIterator} <b>must</b> provide the following
1:  * guarantees:
1:  *   1. the returned {@code Unfiltered} must be in clustering order, or in reverse clustering
1:  *      order iff {@link #isReverseOrder} returns true.
1:  *   2. the iterator should not shadow its own data. That is, no deletion
1:  *      (partition level deletion, row deletion, range tombstone, complex
1:  *      deletion) should delete anything else returned by the iterator (cell, row, ...).
1:  *   3. every "start" range tombstone marker should have a corresponding "end" marker, and no other
1:  *      marker should be in-between this start-end pair of marker. Note that due to the
1:  *      previous rule this means that between a "start" and a corresponding "end" marker there
1:  *      can only be rows that are not deleted by the markers. Also note that when iterating
1:  *      in reverse order, "end" markers are returned before their "start" counterpart (i.e.
1:  *      "start" and "end" are always in the sense of the clustering order).
1:  *
1:  * Note further that the objects returned by next() are only valid until the
1:  * next call to hasNext() or next(). If a consumer wants to keep a reference on
1:  * the returned objects for longer than the iteration, it must make a copy of
1:  * it explicitly.
1:  */
0: public interface UnfilteredRowIterator extends Iterator<Unfiltered>, AutoCloseable
1: {
1:     /**
0:      * The metadata for the table this iterator on.
1:      */
0:     public CFMetaData metadata();
1: 
1:     /**
0:      * A subset of the columns for the (static and regular) rows returned by this iterator.
0:      * Every row returned by this iterator must guarantee that it has only those columns.
1:      */
0:     public PartitionColumns columns();
1: 
1:     /**
0:      * Whether or not the atom returned by this iterator are in reversed
0:      * clustering order.
1:      */
0:     public boolean isReverseOrder();
1: 
1:     /**
0:      * The partition key of the partition this in an iterator over.
1:      */
0:     public DecoratedKey partitionKey();
1: 
1:     /**
1:      * The partition level deletion for the partition this iterate over.
1:      */
1:     public DeletionTime partitionLevelDeletion();
1: 
1:     /**
0:      * The static part corresponding to this partition (this can be an empty
0:      * row).
1:      */
0:     public Row staticRow();
1: 
1:     /**
1:      * Return "statistics" about what is returned by this iterator. Those are used for
1:      * performance reasons (for delta-encoding for instance) and code should not
1:      * expect those to be exact.
1:      */
0:     public RowStats stats();
1: 
0:     public void close();
1: 
1:     /**
1:      * Returns whether this iterator has no data (including no deletion data).
1:      */
1:     public default boolean isEmpty()
1:     {
1:         return partitionLevelDeletion().isLive()
1:             && staticRow().isEmpty()
1:             && !hasNext();
1:     }
1: }
============================================================================