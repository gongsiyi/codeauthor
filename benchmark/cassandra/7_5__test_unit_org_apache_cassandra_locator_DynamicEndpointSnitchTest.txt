1:67c5720: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:9d44186: 
1:67c5720: package org.apache.cassandra.locator;
1:9d44186: 
1:53b49b1: import java.io.IOException;
1:67c5720: import java.net.InetAddress;
1:9d44186: import java.util.*;
1:9d44186: 
1:9797511: import org.junit.BeforeClass;
1:67c5720: import org.junit.Test;
1:9d44186: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:a991b64: import org.apache.cassandra.exceptions.ConfigurationException;
1:a991b64: import org.apache.cassandra.service.StorageService;
1:67c5720: import org.apache.cassandra.utils.FBUtilities;
1:9d44186: 
1:d21c0c9: import static org.junit.Assert.assertEquals;
3:d21c0c9: 
1:67c5720: public class DynamicEndpointSnitchTest
2:9d44186: {
1:9d44186: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:d21c0c9:     private static void setScores(DynamicEndpointSnitch dsnitch,  int rounds, List<InetAddress> hosts, Integer... scores) throws InterruptedException
1:9d44186:     {
1:d21c0c9:         for (int round = 0; round < rounds; round++)
1:9d44186:         {
1:d21c0c9:             for (int i = 0; i < hosts.size(); i++)
1:d21c0c9:                 dsnitch.receiveTiming(hosts.get(i), scores[i]);
3:9d44186:         }
1:d21c0c9:         Thread.sleep(150);
1:9d44186:     }
1:9d44186: 
1:9d44186:     @Test
1:0be34ce:     public void testSnitch() throws InterruptedException, IOException, ConfigurationException
1:9d44186:     {
1:9d44186:         // do this because SS needs to be initialized before DES can work properly.
1:6801cb0:         StorageService.instance.unsafeInitialize();
1:9d44186:         SimpleSnitch ss = new SimpleSnitch();
1:9d44186:         DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch(ss, String.valueOf(ss.hashCode()));
1:9d44186:         InetAddress self = FBUtilities.getBroadcastAddress();
1:d21c0c9:         InetAddress host1 = InetAddress.getByName("127.0.0.2");
1:d21c0c9:         InetAddress host2 = InetAddress.getByName("127.0.0.3");
1:d21c0c9:         InetAddress host3 = InetAddress.getByName("127.0.0.4");
1:d21c0c9:         List<InetAddress> hosts = Arrays.asList(host1, host2, host3);
1:9d44186: 
1:67c5720:         // first, make all hosts equal
1:d21c0c9:         setScores(dsnitch, 1, hosts, 10, 10, 10);
1:d21c0c9:         List<InetAddress> order = Arrays.asList(host1, host2, host3);
1:d21c0c9:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:9d44186: 
1:67c5720:         // make host1 a little worse
1:d21c0c9:         setScores(dsnitch, 1, hosts, 20, 10, 10);
1:d21c0c9:         order = Arrays.asList(host2, host3, host1);
1:d21c0c9:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:9d44186: 
1:d5a21ef:         // make host2 as bad as host1
1:d21c0c9:         setScores(dsnitch, 2, hosts, 15, 20, 10);
1:d21c0c9:         order = Arrays.asList(host3, host1, host2);
1:d21c0c9:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:9d44186: 
1:67c5720:         // make host3 the worst
1:d21c0c9:         setScores(dsnitch, 3, hosts, 10, 10, 30);
1:d21c0c9:         order = Arrays.asList(host1, host2, host3);
1:d21c0c9:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:9d44186: 
1:67c5720:         // make host3 equal to the others
1:d21c0c9:         setScores(dsnitch, 5, hosts, 10, 10, 10);
1:d21c0c9:         order = Arrays.asList(host1, host2, host3);
1:d21c0c9:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:9d44186: 
1:d21c0c9:         /// Tests CASSANDRA-6683 improvements
1:d21c0c9:         // make the scores differ enough from the ideal order that we sort by score; under the old
1:d21c0c9:         // dynamic snitch behavior (where we only compared neighbors), these wouldn't get sorted
1:d21c0c9:         setScores(dsnitch, 20, hosts, 10, 70, 20);
1:d21c0c9:         order = Arrays.asList(host1, host3, host2);
1:d21c0c9:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:9d44186:     }
1:9d44186: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4feaa7a
commit:d97fc9b
commit:4fcd7d4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a83407f
commit:c33ebcd
commit:9d44186
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
0: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
0:     public void testConcurrency() throws InterruptedException, IOException, ConfigurationException
1:     {
0:         // The goal of this test is to check for CASSANDRA-8448/CASSANDRA-9519
0:         double badness = DatabaseDescriptor.getDynamicBadnessThreshold();
0:         DatabaseDescriptor.setDynamicBadnessThreshold(0.0);
1: 
0:         final int ITERATIONS = 10;
1: 
1:         // do this because SS needs to be initialized before DES can work properly.
0:         StorageService.instance.initClient(0);
1:         SimpleSnitch ss = new SimpleSnitch();
1:         DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch(ss, String.valueOf(ss.hashCode()));
1:         InetAddress self = FBUtilities.getBroadcastAddress();
1: 
0:         List<InetAddress> hosts = new ArrayList<>();
0:         // We want a giant list of hosts so that sorting it takes time, making it much more likely to reproduce the
0:         // problem we're looking for.
0:         for (int i = 0; i < 10; i++)
0:             for (int j = 0; j < 256; j++)
0:                 for (int k = 0; k < 256; k++)
0:                     hosts.add(InetAddress.getByAddress(new byte[]{127, (byte)i, (byte)j, (byte)k}));
1: 
0:         ScoreUpdater updater = new ScoreUpdater(dsnitch, hosts);
0:         updater.start();
1: 
0:         List<InetAddress> result = null;
0:         for (int i = 0; i < ITERATIONS; i++)
0:             result = dsnitch.getSortedListByProximity(self, hosts);
1: 
0:         updater.stopped = true;
0:         updater.join();
1: 
0:         DatabaseDescriptor.setDynamicBadnessThreshold(badness);
1:     }
1: 
0:     public static class ScoreUpdater extends Thread
1:     {
0:         private static final int SCORE_RANGE = 100;
1: 
0:         public volatile boolean stopped;
1: 
0:         private final DynamicEndpointSnitch dsnitch;
0:         private final List<InetAddress> hosts;
0:         private final Random random = new Random();
1: 
0:         public ScoreUpdater(DynamicEndpointSnitch dsnitch, List<InetAddress> hosts)
1:         {
0:             this.dsnitch = dsnitch;
0:             this.hosts = hosts;
1:         }
1: 
0:         public void run()
1:         {
0:             while (!stopped)
1:             {
0:                 InetAddress host = hosts.get(random.nextInt(hosts.size()));
0:                 int score = random.nextInt(SCORE_RANGE);
0:                 dsnitch.receiveTiming(host, score);
1:             }
1:         }
1:     }
1: }
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.service.StorageService;
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.ConfigurationException;
author:Brandon Williams
-------------------------------------------------------------------------------
commit:6801cb0
/////////////////////////////////////////////////////////////////////////
1:         StorageService.instance.unsafeInitialize();
commit:d21c0c9
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: 
1:     private static void setScores(DynamicEndpointSnitch dsnitch,  int rounds, List<InetAddress> hosts, Integer... scores) throws InterruptedException
0:     {
1:         for (int round = 0; round < rounds; round++)
0:         {
1:             for (int i = 0; i < hosts.size(); i++)
1:                 dsnitch.receiveTiming(hosts.get(i), scores[i]);
0:         }
1:         Thread.sleep(150);
0:     }
1: 
1:         InetAddress host1 = InetAddress.getByName("127.0.0.2");
1:         InetAddress host2 = InetAddress.getByName("127.0.0.3");
1:         InetAddress host3 = InetAddress.getByName("127.0.0.4");
1:         List<InetAddress> hosts = Arrays.asList(host1, host2, host3);
1:         setScores(dsnitch, 1, hosts, 10, 10, 10);
1:         List<InetAddress> order = Arrays.asList(host1, host2, host3);
1:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:         setScores(dsnitch, 1, hosts, 20, 10, 10);
1:         order = Arrays.asList(host2, host3, host1);
1:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:         setScores(dsnitch, 2, hosts, 15, 20, 10);
1:         order = Arrays.asList(host3, host1, host2);
1:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:         setScores(dsnitch, 3, hosts, 10, 10, 30);
1:         order = Arrays.asList(host1, host2, host3);
1:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:         setScores(dsnitch, 5, hosts, 10, 10, 10);
1:         order = Arrays.asList(host1, host2, host3);
1:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
1:         /// Tests CASSANDRA-6683 improvements
1:         // make the scores differ enough from the ideal order that we sort by score; under the old
1:         // dynamic snitch behavior (where we only compared neighbors), these wouldn't get sorted
1:         setScores(dsnitch, 20, hosts, 10, 70, 20);
1:         order = Arrays.asList(host1, host3, host2);
1:         assertEquals(order, dsnitch.getSortedListByProximity(self, Arrays.asList(host1, host2, host3)));
0: }
commit:d76ad2e
commit:5f6c5ce
/////////////////////////////////////////////////////////////////////////
0:         StorageService.instance.initClient(0);
commit:338fa9a
/////////////////////////////////////////////////////////////////////////
0:         StorageService.instance.initClient();
commit:6de0495
/////////////////////////////////////////////////////////////////////////
0:         StorageService.instance.initClient();
commit:98a70bd
/////////////////////////////////////////////////////////////////////////
0:         SimpleSnitch ss = new SimpleSnitch();
0:         DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch(ss, String.valueOf(ss.hashCode()));
/////////////////////////////////////////////////////////////////////////
0:         dsnitch.receiveTiming(host2, 1.0);
0:         dsnitch.receiveTiming(host3, 1.0);
/////////////////////////////////////////////////////////////////////////
0:         dsnitch.receiveTiming(host1, 1.0);
0:         dsnitch.receiveTiming(host3, 1.0);
/////////////////////////////////////////////////////////////////////////
0:             dsnitch.receiveTiming(host1, 1.0);
0:             dsnitch.receiveTiming(host2, 1.0);
/////////////////////////////////////////////////////////////////////////
0:             dsnitch.receiveTiming(host1, 1.0);
0:             dsnitch.receiveTiming(host2, 1.0);
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         InetAddress self = FBUtilities.getBroadcastAddress();
commit:d5a21ef
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         int sleeptime = 150;
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(sleeptime);
0:         Thread.sleep(sleeptime);
0:         order.clear();
1:         // make host2 as bad as host1
0:         Thread.sleep(sleeptime);
0: 
0:         order.add(host2);
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(sleeptime);
0:         order.clear();
0:         order.add(host2);
0:         assert dsnitch.getSortedListByProximity(self, order).equals(order);
0:         Thread.sleep(sleeptime);
0:         order.clear();
commit:67c5720
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
0: 
1: package org.apache.cassandra.locator;
0: 
1: import java.net.InetAddress;
0: import java.net.UnknownHostException;
0: import java.util.ArrayList;
0: 
1: import org.junit.Test;
0: 
0: import static org.junit.Assert.*;
0: import org.apache.cassandra.locator.DynamicEndpointSnitch;
0: import org.apache.cassandra.locator.SimpleSnitch;
1: import org.apache.cassandra.utils.FBUtilities;
0: 
1: public class DynamicEndpointSnitchTest
0: {
0:     @Test
0:     public void testSnitch() throws UnknownHostException, InterruptedException
0:     {
0:         DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch(new SimpleSnitch());
0:         InetAddress self = FBUtilities.getLocalAddress();
0:         ArrayList<InetAddress> order = new ArrayList<InetAddress>();
0:         InetAddress host1 = InetAddress.getByName("127.0.0.1");
0:         InetAddress host2 = InetAddress.getByName("127.0.0.2");
0:         InetAddress host3 = InetAddress.getByName("127.0.0.3");
0: 
1:         // first, make all hosts equal
0:         for (int i = 0; i < 5; i++)
0:         {
0:             dsnitch.receiveTiming(host1, 1.0);
0:             dsnitch.receiveTiming(host2, 1.0);
0:             dsnitch.receiveTiming(host3, 1.0);
0:         }
0: 
0:         Thread.sleep(1500);
0: 
0:         order.add(host1);
0:         order.add(host2);
0:         order.add(host3);
0: 
0:         assert dsnitch.getSortedListByProximity(self, order).equals(order);
0: 
1:         // make host1 a little worse
0:         dsnitch.receiveTiming(host1, 2.0);
0:         Thread.sleep(1500);
0:         order.clear();
0: 
0:         order.add(host2);
0:         order.add(host3);
0:         order.add(host1);
0: 
0:         assert dsnitch.getSortedListByProximity(self, order).equals(order);
0: 
0:         // make host2 a little worse
0:         dsnitch.receiveTiming(host2, 2.0);
0:         Thread.sleep(1500);
0:         order.clear();
0: 
0:         order.add(host3);
0:         order.add(host2);
0:         order.add(host1);
0: 
0:         assert dsnitch.getSortedListByProximity(self, order).equals(order);
0: 
1:         // make host3 the worst
0:         for (int i = 0; i < 2; i++)
0:         {
0:             dsnitch.receiveTiming(host3, 2.0);
0:         }
0:         Thread.sleep(1500);
0:         order.clear();
0: 
0:         order.add(host2);
0:         order.add(host1);
0:         order.add(host3);
0: 
1:         // make host3 equal to the others
0:         for (int i = 0; i < 2; i++)
0:         {
0:             dsnitch.receiveTiming(host3, 1.0);
0:         }
0:         Thread.sleep(1500);
0:         order.clear();
0: 
0:         order.add(host1);
0:         order.add(host2);
0:         order.add(host3);
0: 
0:         assert dsnitch.getSortedListByProximity(self, order).equals(order);
0:     }
0: }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:3563350
/////////////////////////////////////////////////////////////////////////
0:         InetAddress host1 = InetAddress.getByName("127.0.0.4");
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:652ae9a
/////////////////////////////////////////////////////////////////////////
0:             dsnitch.receiveTiming(host1, 1L);
0:             dsnitch.receiveTiming(host2, 1L);
0:             dsnitch.receiveTiming(host3, 1L);
/////////////////////////////////////////////////////////////////////////
0:         dsnitch.receiveTiming(host1, 2L);
0:         dsnitch.receiveTiming(host2, 1L);
0:         dsnitch.receiveTiming(host3, 1L);
/////////////////////////////////////////////////////////////////////////
0:         dsnitch.receiveTiming(host2, 2L);
0:         dsnitch.receiveTiming(host1, 1L);
0:         dsnitch.receiveTiming(host3, 1L);
/////////////////////////////////////////////////////////////////////////
0:             dsnitch.receiveTiming(host1, 1L);
0:             dsnitch.receiveTiming(host2, 1L);
0:             dsnitch.receiveTiming(host3, 2L);
/////////////////////////////////////////////////////////////////////////
0:             dsnitch.receiveTiming(host1, 1L);
0:             dsnitch.receiveTiming(host2, 1L);
0:             dsnitch.receiveTiming(host3, 1L);
commit:4deb779
/////////////////////////////////////////////////////////////////////////
0:         StorageService.instance.initClient(0);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:0be34ce
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:     public void testSnitch() throws InterruptedException, IOException, ConfigurationException
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:53b49b1
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:     public void testSnitch() throws InterruptedException, IOException
0:         // do this because SS needs to be initialized before DES can work properly.
0:         StorageService.instance.initClient();
============================================================================