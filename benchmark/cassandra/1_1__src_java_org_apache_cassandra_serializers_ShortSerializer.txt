1:35a945e: /*
1:35a945e:  * Licensed to the Apache Software Foundation (ASF) under one
1:35a945e:  * or more contributor license agreements.  See the NOTICE file
1:35a945e:  * distributed with this work for additional information
1:35a945e:  * regarding copyright ownership.  The ASF licenses this file
1:35a945e:  * to you under the Apache License, Version 2.0 (the
1:35a945e:  * "License"); you may not use this file except in compliance
1:35a945e:  * with the License.  You may obtain a copy of the License at
1:35a945e:  *
1:35a945e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:35a945e:  *
1:35a945e:  * Unless required by applicable law or agreed to in writing, software
1:35a945e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:35a945e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:35a945e:  * See the License for the specific language governing permissions and
1:35a945e:  * limitations under the License.
1:35a945e:  */
1:35a945e: 
1:35a945e: package org.apache.cassandra.serializers;
1:35a945e: 
1:35a945e: import org.apache.cassandra.utils.ByteBufferUtil;
1:35a945e: 
1:35a945e: import java.nio.ByteBuffer;
1:35a945e: 
1:35a945e: public class ShortSerializer implements TypeSerializer<Short>
1:35a945e: {
1:35a945e:     public static final ShortSerializer instance = new ShortSerializer();
1:35a945e: 
1:35a945e:     public Short deserialize(ByteBuffer bytes)
1:35a945e:     {
1:35a945e:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toShort(bytes);
1:35a945e:     }
1:35a945e: 
1:35a945e:     public ByteBuffer serialize(Short value)
1:35a945e:     {
1:35a945e:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value.shortValue());
1:35a945e:     }
1:35a945e: 
1:35a945e:     public void validate(ByteBuffer bytes) throws MarshalException
1:35a945e:     {
1:35a945e:         if (bytes.remaining() != 2)
1:35a945e:             throw new MarshalException(String.format("Expected 2 bytes for a smallint (%d)", bytes.remaining()));
1:35a945e:     }
1:35a945e: 
1:35a945e:     public String toString(Short value)
1:35a945e:     {
1:35a945e:         return value == null ? "" : String.valueOf(value);
1:35a945e:     }
1:35a945e: 
1:35a945e:     public Class<Short> getType()
1:35a945e:     {
1:35a945e:         return Short.class;
1:35a945e:     }
1:35a945e: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:35a945e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.serializers;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.nio.ByteBuffer;
1: 
1: public class ShortSerializer implements TypeSerializer<Short>
1: {
1:     public static final ShortSerializer instance = new ShortSerializer();
1: 
1:     public Short deserialize(ByteBuffer bytes)
1:     {
1:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toShort(bytes);
1:     }
1: 
1:     public ByteBuffer serialize(Short value)
1:     {
1:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value.shortValue());
1:     }
1: 
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (bytes.remaining() != 2)
1:             throw new MarshalException(String.format("Expected 2 bytes for a smallint (%d)", bytes.remaining()));
1:     }
1: 
1:     public String toString(Short value)
1:     {
1:         return value == null ? "" : String.valueOf(value);
1:     }
1: 
1:     public Class<Short> getType()
1:     {
1:         return Short.class;
1:     }
1: }
============================================================================