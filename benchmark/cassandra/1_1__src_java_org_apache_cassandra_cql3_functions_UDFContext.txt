1:5288d43: /*
1:5288d43:  * Licensed to the Apache Software Foundation (ASF) under one
1:5288d43:  * or more contributor license agreements.  See the NOTICE file
1:5288d43:  * distributed with this work for additional information
1:5288d43:  * regarding copyright ownership.  The ASF licenses this file
1:5288d43:  * to you under the Apache License, Version 2.0 (the
1:5288d43:  * "License"); you may not use this file except in compliance
1:5288d43:  * with the License.  You may obtain a copy of the License at
1:5288d43:  *
1:5288d43:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5288d43:  *
1:5288d43:  * Unless required by applicable law or agreed to in writing, software
1:5288d43:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5288d43:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5288d43:  * See the License for the specific language governing permissions and
1:5288d43:  * limitations under the License.
1:5288d43:  */
1:5288d43: 
1:5288d43: package org.apache.cassandra.cql3.functions;
1:5288d43: 
1:5288d43: import com.datastax.driver.core.TupleValue;
1:5288d43: import com.datastax.driver.core.UDTValue;
1:5288d43: 
1:5288d43: /**
1:5288d43:  * Provides context information for a particular user defined function.
1:5288d43:  * Java UDFs can access implementations of this interface using the
1:5288d43:  * {@code udfContext} field, scripted UDFs can get it using the {@code udfContext}
1:5288d43:  * binding.
1:5288d43:  */
1:5288d43: public interface UDFContext
1:5288d43: {
1:5288d43:     /**
1:5288d43:      * Creates a new {@code UDTValue} instance for an argument.
1:5288d43:      *
1:5288d43:      * @param argName name of the argument as declared in the {@code CREATE FUNCTION} statement
1:5288d43:      * @return a new {@code UDTValue} instance
1:5288d43:      * @throws IllegalArgumentException if no argument for the given name exists
1:5288d43:      * @throws IllegalStateException    if the argument is not a UDT
1:5288d43:      */
1:5288d43:     UDTValue newArgUDTValue(String argName);
1:5288d43: 
1:5288d43:     /**
1:5288d43:      * Creates a new {@code UDTValue} instance for an argument.
1:5288d43:      *
1:5288d43:      * @param argNum zero-based index of the argument as declared in the {@code CREATE FUNCTION} statement
1:5288d43:      * @return a new {@code UDTValue} instance
1:5288d43:      * @throws ArrayIndexOutOfBoundsException if no argument for the given index exists
1:5288d43:      * @throws IllegalStateException          if the argument is not a UDT
1:5288d43:      */
1:5288d43:     UDTValue newArgUDTValue(int argNum);
1:5288d43: 
1:5288d43:     /**
1:5288d43:      * Creates a new {@code UDTValue} instance for the return value.
1:5288d43:      *
1:5288d43:      * @return a new {@code UDTValue} instance
1:5288d43:      * @throws IllegalStateException          if the return type is not a UDT
1:5288d43:      */
1:5288d43:     UDTValue newReturnUDTValue();
1:5288d43: 
1:5288d43:     /**
1:5288d43:      * Creates a new {@code UDTValue} instance by name in the same keyspace.
1:5288d43:      *
1:5288d43:      * @param udtName name of the user defined type in the same keyspace as the function
1:5288d43:      * @return a new {@code UDTValue} instance
1:5288d43:      * @throws IllegalArgumentException if no UDT for the given name exists
1:5288d43:      */
1:5288d43:     UDTValue newUDTValue(String udtName);
1:5288d43: 
1:5288d43:     /**
1:5288d43:      * Creates a new {@code TupleValue} instance for an argument.
1:5288d43:      *
1:5288d43:      * @param argName name of the argument as declared in the {@code CREATE FUNCTION} statement
1:5288d43:      * @return a new {@code TupleValue} instance
1:5288d43:      * @throws IllegalArgumentException if no argument for the given name exists
1:5288d43:      * @throws IllegalStateException    if the argument is not a tuple
1:5288d43:      */
1:5288d43:     TupleValue newArgTupleValue(String argName);
1:5288d43: 
1:5288d43:     /**
1:5288d43:      * Creates a new {@code TupleValue} instance for an argument.
1:5288d43:      *
1:5288d43:      * @param argNum zero-based index of the argument as declared in the {@code CREATE FUNCTION} statement
1:5288d43:      * @return a new {@code TupleValue} instance
1:5288d43:      * @throws ArrayIndexOutOfBoundsException if no argument for the given index exists
1:5288d43:      * @throws IllegalStateException          if the argument is not a tuple
1:5288d43:      */
1:5288d43:     TupleValue newArgTupleValue(int argNum);
1:5288d43: 
1:5288d43:     /**
1:5288d43:      * Creates a new {@code TupleValue} instance for the return value.
1:5288d43:      *
1:5288d43:      * @return a new {@code TupleValue} instance
1:5288d43:      * @throws IllegalStateException          if the return type is not a tuple
1:5288d43:      */
1:5288d43:     TupleValue newReturnTupleValue();
1:5288d43: 
1:5288d43:     /**
1:5288d43:      * Creates a new {@code TupleValue} instance for the CQL type definition.
1:5288d43:      *
1:5288d43:      * @param cqlDefinition CQL tuple type definition like {@code tuple<int, text, bigint>}
1:5288d43:      * @return a new {@code TupleValue} instance
1:5288d43:      * @throws IllegalStateException          if cqlDefinition type is not a tuple or an invalid type
1:5288d43:      */
1:5288d43:     TupleValue newTupleValue(String cqlDefinition);
1:5288d43: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:5288d43
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.functions;
1: 
1: import com.datastax.driver.core.TupleValue;
1: import com.datastax.driver.core.UDTValue;
1: 
1: /**
1:  * Provides context information for a particular user defined function.
1:  * Java UDFs can access implementations of this interface using the
1:  * {@code udfContext} field, scripted UDFs can get it using the {@code udfContext}
1:  * binding.
1:  */
1: public interface UDFContext
1: {
1:     /**
1:      * Creates a new {@code UDTValue} instance for an argument.
1:      *
1:      * @param argName name of the argument as declared in the {@code CREATE FUNCTION} statement
1:      * @return a new {@code UDTValue} instance
1:      * @throws IllegalArgumentException if no argument for the given name exists
1:      * @throws IllegalStateException    if the argument is not a UDT
1:      */
1:     UDTValue newArgUDTValue(String argName);
1: 
1:     /**
1:      * Creates a new {@code UDTValue} instance for an argument.
1:      *
1:      * @param argNum zero-based index of the argument as declared in the {@code CREATE FUNCTION} statement
1:      * @return a new {@code UDTValue} instance
1:      * @throws ArrayIndexOutOfBoundsException if no argument for the given index exists
1:      * @throws IllegalStateException          if the argument is not a UDT
1:      */
1:     UDTValue newArgUDTValue(int argNum);
1: 
1:     /**
1:      * Creates a new {@code UDTValue} instance for the return value.
1:      *
1:      * @return a new {@code UDTValue} instance
1:      * @throws IllegalStateException          if the return type is not a UDT
1:      */
1:     UDTValue newReturnUDTValue();
1: 
1:     /**
1:      * Creates a new {@code UDTValue} instance by name in the same keyspace.
1:      *
1:      * @param udtName name of the user defined type in the same keyspace as the function
1:      * @return a new {@code UDTValue} instance
1:      * @throws IllegalArgumentException if no UDT for the given name exists
1:      */
1:     UDTValue newUDTValue(String udtName);
1: 
1:     /**
1:      * Creates a new {@code TupleValue} instance for an argument.
1:      *
1:      * @param argName name of the argument as declared in the {@code CREATE FUNCTION} statement
1:      * @return a new {@code TupleValue} instance
1:      * @throws IllegalArgumentException if no argument for the given name exists
1:      * @throws IllegalStateException    if the argument is not a tuple
1:      */
1:     TupleValue newArgTupleValue(String argName);
1: 
1:     /**
1:      * Creates a new {@code TupleValue} instance for an argument.
1:      *
1:      * @param argNum zero-based index of the argument as declared in the {@code CREATE FUNCTION} statement
1:      * @return a new {@code TupleValue} instance
1:      * @throws ArrayIndexOutOfBoundsException if no argument for the given index exists
1:      * @throws IllegalStateException          if the argument is not a tuple
1:      */
1:     TupleValue newArgTupleValue(int argNum);
1: 
1:     /**
1:      * Creates a new {@code TupleValue} instance for the return value.
1:      *
1:      * @return a new {@code TupleValue} instance
1:      * @throws IllegalStateException          if the return type is not a tuple
1:      */
1:     TupleValue newReturnTupleValue();
1: 
1:     /**
1:      * Creates a new {@code TupleValue} instance for the CQL type definition.
1:      *
1:      * @param cqlDefinition CQL tuple type definition like {@code tuple<int, text, bigint>}
1:      * @return a new {@code TupleValue} instance
1:      * @throws IllegalStateException          if cqlDefinition type is not a tuple or an invalid type
1:      */
1:     TupleValue newTupleValue(String cqlDefinition);
1: }
============================================================================