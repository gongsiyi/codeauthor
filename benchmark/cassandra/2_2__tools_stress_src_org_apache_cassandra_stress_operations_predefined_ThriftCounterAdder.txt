1:7536429: /**
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  *
1:7536429:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  *
1:7536429:  * Unless required by applicable law or agreed to in writing, software
1:7536429:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7536429:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7536429:  * See the License for the specific language governing permissions and
1:7536429:  * limitations under the License.
1:7536429:  */
1:7536429: package org.apache.cassandra.stress.operations.predefined;
1:7536429: 
1:7536429: import java.io.IOException;
1:7536429: import java.nio.ByteBuffer;
1:7536429: import java.util.ArrayList;
1:7536429: import java.util.Collections;
1:7536429: import java.util.List;
1:7536429: import java.util.Map;
1:7536429: 
1:7536429: import org.apache.cassandra.stress.generate.Distribution;
1:7536429: import org.apache.cassandra.stress.generate.DistributionFactory;
1:7536429: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:6c579a0: import org.apache.cassandra.stress.generate.SeedManager;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:7536429: import org.apache.cassandra.stress.settings.Command;
1:7536429: import org.apache.cassandra.stress.settings.StressSettings;
1:7536429: import org.apache.cassandra.stress.util.ThriftClient;
1:6c579a0: import org.apache.cassandra.thrift.ColumnOrSuperColumn;
1:6c579a0: import org.apache.cassandra.thrift.CounterColumn;
1:6c579a0: import org.apache.cassandra.thrift.Mutation;
1:7536429: 
1:7536429: public class ThriftCounterAdder extends PredefinedOperation
1:7536429: {
1:7536429: 
1:7536429:     final Distribution counteradd;
1:6c579a0:     public ThriftCounterAdder(DistributionFactory counteradd, Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings)
1:7536429:     {
1:6c579a0:         super(Command.COUNTER_WRITE, timer, generator, seedManager, settings);
1:7536429:         this.counteradd = counteradd.get();
1:7536429:     }
1:7536429: 
1:0580fb2:     public boolean isWrite()
1:0580fb2:     {
1:0580fb2:         return true;
1:0580fb2:     }
1:0580fb2: 
1:7536429:     public void run(final ThriftClient client) throws IOException
1:7536429:     {
1:7536429:         List<CounterColumn> columns = new ArrayList<>();
1:7536429:         for (ByteBuffer name : select().select(settings.columns.names))
1:7536429:             columns.add(new CounterColumn(name, counteradd.next()));
1:7536429: 
1:7536429:         List<Mutation> mutations = new ArrayList<>(columns.size());
1:7536429:         for (CounterColumn c : columns)
1:7536429:         {
1:7536429:             ColumnOrSuperColumn cosc = new ColumnOrSuperColumn().setCounter_column(c);
1:7536429:             mutations.add(new Mutation().setColumn_or_supercolumn(cosc));
1:7536429:         }
1:7536429:         Map<String, List<Mutation>> row = Collections.singletonMap(type.table, mutations);
1:7536429: 
1:7536429:         final ByteBuffer key = getKey();
1:7536429:         final Map<ByteBuffer, Map<String, List<Mutation>>> record = Collections.singletonMap(key, row);
1:7536429: 
1:7536429:         timeWithRetry(new RunOp()
1:7536429:         {
1:7536429:             @Override
1:7536429:             public boolean run() throws Exception
1:7536429:             {
1:7536429:                 client.batch_mutate(record, settings.command.consistencyLevel);
1:7536429:                 return true;
1:7536429:             }
1:7536429: 
1:7536429:             @Override
1:7536429:             public int partitionCount()
1:7536429:             {
1:7536429:                 return 1;
1:7536429:             }
1:7536429: 
1:7536429:             @Override
1:7536429:             public int rowCount()
1:7536429:             {
1:7536429:                 return 1;
1:7536429:             }
1:7536429:         });
1:7536429:     }
1:7536429: 
1:7536429: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.SeedManager;
1: import org.apache.cassandra.thrift.ColumnOrSuperColumn;
1: import org.apache.cassandra.thrift.CounterColumn;
1: import org.apache.cassandra.thrift.Mutation;
1:     public ThriftCounterAdder(DistributionFactory counteradd, Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings)
1:         super(Command.COUNTER_WRITE, timer, generator, seedManager, settings);
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1:     public boolean isWrite()
1:     {
1:         return true;
1:     }
1: 
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.stress.operations.predefined;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.stress.generate.Distribution;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.PartitionGenerator;
1: import org.apache.cassandra.stress.settings.Command;
1: import org.apache.cassandra.stress.settings.StressSettings;
1: import org.apache.cassandra.stress.util.ThriftClient;
0: import org.apache.cassandra.stress.util.Timer;
0: import org.apache.cassandra.thrift.*;
1: 
1: public class ThriftCounterAdder extends PredefinedOperation
1: {
1: 
1:     final Distribution counteradd;
0:     public ThriftCounterAdder(DistributionFactory counteradd, Timer timer, PartitionGenerator generator, StressSettings settings)
1:     {
0:         super(Command.COUNTER_WRITE, timer, generator, settings);
1:         this.counteradd = counteradd.get();
1:     }
1: 
1:     public void run(final ThriftClient client) throws IOException
1:     {
1:         List<CounterColumn> columns = new ArrayList<>();
1:         for (ByteBuffer name : select().select(settings.columns.names))
1:             columns.add(new CounterColumn(name, counteradd.next()));
1: 
1:         List<Mutation> mutations = new ArrayList<>(columns.size());
1:         for (CounterColumn c : columns)
1:         {
1:             ColumnOrSuperColumn cosc = new ColumnOrSuperColumn().setCounter_column(c);
1:             mutations.add(new Mutation().setColumn_or_supercolumn(cosc));
1:         }
1:         Map<String, List<Mutation>> row = Collections.singletonMap(type.table, mutations);
1: 
1:         final ByteBuffer key = getKey();
1:         final Map<ByteBuffer, Map<String, List<Mutation>>> record = Collections.singletonMap(key, row);
1: 
1:         timeWithRetry(new RunOp()
1:         {
1:             @Override
1:             public boolean run() throws Exception
1:             {
1:                 client.batch_mutate(record, settings.command.consistencyLevel);
1:                 return true;
1:             }
1: 
1:             @Override
1:             public int partitionCount()
1:             {
1:                 return 1;
1:             }
1: 
1:             @Override
1:             public int rowCount()
1:             {
1:                 return 1;
1:             }
1:         });
1:     }
1: 
1: }
============================================================================