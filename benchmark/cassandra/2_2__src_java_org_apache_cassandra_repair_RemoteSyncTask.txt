1:810c2d5: /*
1:810c2d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:810c2d5:  * or more contributor license agreements.  See the NOTICE file
1:810c2d5:  * distributed with this work for additional information
1:810c2d5:  * regarding copyright ownership.  The ASF licenses this file
1:810c2d5:  * to you under the Apache License, Version 2.0 (the
1:810c2d5:  * "License"); you may not use this file except in compliance
1:810c2d5:  * with the License.  You may obtain a copy of the License at
1:810c2d5:  *
1:810c2d5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:810c2d5:  *
1:810c2d5:  * Unless required by applicable law or agreed to in writing, software
1:810c2d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:810c2d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:810c2d5:  * See the License for the specific language governing permissions and
1:810c2d5:  * limitations under the License.
1:810c2d5:  */
1:810c2d5: package org.apache.cassandra.repair;
1:810c2d5: 
1:810c2d5: import java.net.InetAddress;
1:810c2d5: import java.util.List;
1:810c2d5: 
1:810c2d5: import org.slf4j.Logger;
1:810c2d5: import org.slf4j.LoggerFactory;
1:810c2d5: 
1:810c2d5: import org.apache.cassandra.dht.Range;
1:810c2d5: import org.apache.cassandra.dht.Token;
1:810c2d5: import org.apache.cassandra.exceptions.RepairException;
1:810c2d5: import org.apache.cassandra.net.MessagingService;
1:810c2d5: import org.apache.cassandra.repair.messages.SyncRequest;
1:f5866ca: import org.apache.cassandra.tracing.Tracing;
1:810c2d5: import org.apache.cassandra.utils.FBUtilities;
1:810c2d5: 
1:810c2d5: /**
1:810c2d5:  * RemoteSyncTask sends {@link SyncRequest} to remote(non-coordinator) node
1:810c2d5:  * to repair(stream) data with other replica.
1:810c2d5:  *
1:810c2d5:  * When RemoteSyncTask receives SyncComplete from remote node, task completes.
1:810c2d5:  */
1:810c2d5: public class RemoteSyncTask extends SyncTask
1:810c2d5: {
1:810c2d5:     private static final Logger logger = LoggerFactory.getLogger(RemoteSyncTask.class);
1:810c2d5: 
1:810c2d5:     public RemoteSyncTask(RepairJobDesc desc, TreeResponse r1, TreeResponse r2)
1:810c2d5:     {
1:810c2d5:         super(desc, r1, r2);
1:810c2d5:     }
1:810c2d5: 
1:810c2d5:     protected void startSync(List<Range<Token>> differences)
1:810c2d5:     {
1:810c2d5:         InetAddress local = FBUtilities.getBroadcastAddress();
1:810c2d5:         SyncRequest request = new SyncRequest(desc, local, r1.endpoint, r2.endpoint, differences);
1:f5866ca:         String message = String.format("Forwarding streaming repair of %d ranges to %s (to be streamed with %s)", request.ranges.size(), request.src, request.dst);
1:f5866ca:         logger.info("[repair #{}] {}", desc.sessionId, message);
1:f5866ca:         Tracing.traceRepair(message);
1:810c2d5:         MessagingService.instance().sendOneWay(request.createMessage(), request.src);
1:810c2d5:     }
1:810c2d5: 
1:810c2d5:     public void syncComplete(boolean success)
1:810c2d5:     {
1:810c2d5:         if (success)
1:810c2d5:         {
1:810c2d5:             set(stat);
1:810c2d5:         }
1:810c2d5:         else
1:810c2d5:         {
1:810c2d5:             setException(new RepairException(desc, String.format("Sync failed between %s and %s", r1.endpoint, r2.endpoint)));
1:810c2d5:         }
1:810c2d5:     }
1:810c2d5: }
============================================================================
author:Ben Chan
-------------------------------------------------------------------------------
commit:f5866ca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.tracing.Tracing;
/////////////////////////////////////////////////////////////////////////
1:         String message = String.format("Forwarding streaming repair of %d ranges to %s (to be streamed with %s)", request.ranges.size(), request.src, request.dst);
1:         logger.info("[repair #{}] {}", desc.sessionId, message);
1:         Tracing.traceRepair(message);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:810c2d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
1: import java.net.InetAddress;
1: import java.util.List;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.exceptions.RepairException;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.repair.messages.SyncRequest;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * RemoteSyncTask sends {@link SyncRequest} to remote(non-coordinator) node
1:  * to repair(stream) data with other replica.
1:  *
1:  * When RemoteSyncTask receives SyncComplete from remote node, task completes.
1:  */
1: public class RemoteSyncTask extends SyncTask
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(RemoteSyncTask.class);
1: 
1:     public RemoteSyncTask(RepairJobDesc desc, TreeResponse r1, TreeResponse r2)
1:     {
1:         super(desc, r1, r2);
1:     }
1: 
1:     protected void startSync(List<Range<Token>> differences)
1:     {
1:         InetAddress local = FBUtilities.getBroadcastAddress();
1:         SyncRequest request = new SyncRequest(desc, local, r1.endpoint, r2.endpoint, differences);
0:         logger.info(String.format("[repair #%s] Forwarding streaming repair of %d ranges to %s (to be streamed with %s)", desc.sessionId, request.ranges.size(), request.src, request.dst));
1:         MessagingService.instance().sendOneWay(request.createMessage(), request.src);
1:     }
1: 
1:     public void syncComplete(boolean success)
1:     {
1:         if (success)
1:         {
1:             set(stat);
1:         }
1:         else
1:         {
1:             setException(new RepairException(desc, String.format("Sync failed between %s and %s", r1.endpoint, r2.endpoint)));
1:         }
1:     }
1: }
============================================================================