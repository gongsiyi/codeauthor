1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
2:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
2:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
4:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.util.Comparator;
1:a991b64: import java.util.List;
1:a991b64: import java.util.Objects;
1:a991b64: 
1:a991b64: import com.google.common.base.Joiner;
1:07594ee: import com.google.common.collect.ImmutableList;
1:a991b64: 
1:2457599: import org.apache.cassandra.db.rows.Row;
1:a991b64: import org.apache.cassandra.db.marshal.AbstractType;
1:2457599: import org.apache.cassandra.serializers.MarshalException;
1:a991b64: 
1:ef5bbed: import org.apache.cassandra.io.sstable.IndexInfo;
1:a991b64: 
2:a991b64: /**
1:a991b64:  * A comparator of clustering prefixes (or more generally of {@link Clusterable}}.
1:a991b64:  * <p>
1:a991b64:  * This is essentially just a composite comparator that the clustering values of the provided
1:a991b64:  * clustering prefixes in lexicographical order, with each component being compared based on
1:a991b64:  * the type of the clustering column this is a value of.
1:a991b64:  */
1:a991b64: public class ClusteringComparator implements Comparator<Clusterable>
10:a991b64: {
1:a991b64:     private final List<AbstractType<?>> clusteringTypes;
1:a991b64: 
1:a991b64:     private final Comparator<IndexInfo> indexComparator;
1:a991b64:     private final Comparator<IndexInfo> indexReverseComparator;
1:a991b64:     private final Comparator<Clusterable> reverseComparator;
1:a991b64: 
1:2457599:     private final Comparator<Row> rowComparator = (r1, r2) -> compare(r1.clustering(), r2.clustering());
1:2457599: 
1:a991b64:     public ClusteringComparator(AbstractType<?>... clusteringTypes)
1:a991b64:     {
1:07594ee:         this(ImmutableList.copyOf(clusteringTypes));
7:a991b64:     }
1:a991b64: 
1:a991b64:     public ClusteringComparator(List<AbstractType<?>> clusteringTypes)
1:a991b64:     {
1:07594ee:         // copy the list to ensure despatch is monomorphic
1:07594ee:         this.clusteringTypes = ImmutableList.copyOf(clusteringTypes);
1:a991b64: 
1:2457599:         this.indexComparator = (o1, o2) -> ClusteringComparator.this.compare(o1.lastName, o2.lastName);
1:2457599:         this.indexReverseComparator = (o1, o2) -> ClusteringComparator.this.compare(o1.firstName, o2.firstName);
1:2457599:         this.reverseComparator = (c1, c2) -> ClusteringComparator.this.compare(c2, c1);
1:07594ee:         for (AbstractType<?> type : clusteringTypes)
1:07594ee:             type.checkComparable(); // this should already be enforced by CFMetaData.rebuild, but we check again for other constructors
1:a991b64:     }
1:a991b64: 
1:2457599:     /**
1:a991b64:      * The number of clustering columns for the table this is the comparator of.
1:a991b64:      */
1:a991b64:     public int size()
1:a991b64:     {
1:a991b64:         return clusteringTypes.size();
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The "subtypes" of this clustering comparator, that is the types of the clustering
1:a991b64:      * columns for the table this is a comparator of.
1:a991b64:      */
1:a991b64:     public List<AbstractType<?>> subtypes()
1:a991b64:     {
1:a991b64:         return clusteringTypes;
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns the type of the ith clustering column of the table.
1:a991b64:      */
1:a991b64:     public AbstractType<?> subtype(int i)
1:a991b64:     {
1:a991b64:         return clusteringTypes.get(i);
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Creates a row clustering based on the clustering values.
1:a991b64:      * <p>
1:a991b64:      * Every argument can either be a {@code ByteBuffer}, in which case it is used as-is, or a object
1:a991b64:      * corresponding to the type of the corresponding clustering column, in which case it will be
1:a991b64:      * converted to a byte buffer using the column type.
1:a991b64:      *
1:a991b64:      * @param values the values to use for the created clustering. There should be exactly {@code size()}
1:a991b64:      * values which must be either byte buffers or of the type the column expect.
1:a991b64:      *
1:a991b64:      * @return the newly created clustering.
1:a991b64:      */
1:a991b64:     public Clustering make(Object... values)
1:a991b64:     {
1:a991b64:         if (values.length != size())
1:a991b64:             throw new IllegalArgumentException(String.format("Invalid number of components, expecting %d but got %d", size(), values.length));
1:a991b64: 
1:a991b64:         CBuilder builder = CBuilder.create(this);
1:2457599:         for (Object val : values)
1:a991b64:         {
1:a991b64:             if (val instanceof ByteBuffer)
1:2457599:                 builder.add((ByteBuffer) val);
1:a991b64:             else
1:a991b64:                 builder.add(val);
1:a991b64:         }
1:a991b64:         return builder.build();
1:a991b64:     }
1:a991b64: 
2:a991b64:     public int compare(Clusterable c1, Clusterable c2)
1:a991b64:     {
1:a991b64:         return compare(c1.clustering(), c2.clustering());
1:a991b64:     }
1:a991b64: 
1:a991b64:     public int compare(ClusteringPrefix c1, ClusteringPrefix c2)
1:a991b64:     {
1:a991b64:         int s1 = c1.size();
1:a991b64:         int s2 = c2.size();
1:a991b64:         int minSize = Math.min(s1, s2);
1:a991b64: 
1:a991b64:         for (int i = 0; i < minSize; i++)
1:a991b64:         {
1:a991b64:             int cmp = compareComponent(i, c1.get(i), c2.get(i));
1:a991b64:             if (cmp != 0)
1:a991b64:                 return cmp;
1:a991b64:         }
1:a991b64: 
1:a991b64:         if (s1 == s2)
1:a991b64:             return ClusteringPrefix.Kind.compare(c1.kind(), c2.kind());
1:a991b64: 
1:7813dee:         return s1 < s2 ? c1.kind().comparedToClustering : -c2.kind().comparedToClustering;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public int compare(Clustering c1, Clustering c2)
1:a991b64:     {
1:4205011:         return compare(c1, c2, size());
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Compares the specified part of the specified clusterings.
1:4205011:      *
1:4205011:      * @param c1 the first clustering
1:4205011:      * @param c2 the second clustering
1:4205011:      * @param size the number of components to compare
1:4205011:      * @return a negative integer, zero, or a positive integer as the first argument is less than,
1:4205011:      * equal to, or greater than the second.
1:4205011:      */
1:4205011:     public int compare(Clustering c1, Clustering c2, int size)
1:4205011:     {
1:4205011:         for (int i = 0; i < size; i++)
1:a991b64:         {
1:a991b64:             int cmp = compareComponent(i, c1.get(i), c2.get(i));
1:a991b64:             if (cmp != 0)
1:a991b64:                 return cmp;
1:a991b64:         }
1:a991b64:         return 0;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public int compareComponent(int i, ByteBuffer v1, ByteBuffer v2)
1:a991b64:     {
1:a991b64:         if (v1 == null)
1:2457599:             return v2 == null ? 0 : -1;
1:a991b64:         if (v2 == null)
1:a991b64:             return 1;
1:a991b64: 
1:07594ee:         return clusteringTypes.get(i).compare(v1, v2);
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns whether this clustering comparator is compatible with the provided one,
1:a991b64:      * that is if the provided one can be safely replaced by this new one.
1:a991b64:      *
1:a991b64:      * @param previous the previous comparator that we want to replace and test
1:a991b64:      * compatibility with.
1:a991b64:      *
1:a991b64:      * @return whether {@code previous} can be safely replaced by this comparator.
1:a991b64:      */
1:a991b64:     public boolean isCompatibleWith(ClusteringComparator previous)
1:a991b64:     {
1:a991b64:         if (this == previous)
2:a991b64:             return true;
1:a991b64: 
1:a991b64:         // Extending with new components is fine, shrinking is not
1:a991b64:         if (size() < previous.size())
3:a991b64:             return false;
1:a991b64: 
1:a991b64:         for (int i = 0; i < previous.size(); i++)
1:a991b64:         {
1:a991b64:             AbstractType<?> tprev = previous.subtype(i);
1:a991b64:             AbstractType<?> tnew = subtype(i);
1:a991b64:             if (!tnew.isCompatibleWith(tprev))
1:a991b64:                 return false;
1:a991b64:         }
1:a991b64:         return true;
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Validates the provided prefix for corrupted data.
1:a991b64:      *
1:a991b64:      * @param clustering the clustering prefix to validate.
1:a991b64:      *
1:a991b64:      * @throws MarshalException if {@code clustering} contains some invalid data.
1:a991b64:      */
1:a991b64:     public void validate(ClusteringPrefix clustering)
1:a991b64:     {
1:a991b64:         for (int i = 0; i < clustering.size(); i++)
1:a991b64:         {
1:a991b64:             ByteBuffer value = clustering.get(i);
1:a991b64:             if (value != null)
1:a991b64:                 subtype(i).validate(value);
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:2457599:      * A comparator for rows.
1:2457599:      *
1:2457599:      * A {@code Row} is a {@code Clusterable} so {@code ClusteringComparator} can be used
1:2457599:      * to compare rows directly, but when we know we deal with rows (and not {@code Clusterable} in
1:2457599:      * general), this is a little faster because by knowing we compare {@code Clustering} objects,
1:2457599:      * we know that 1) they all have the same size and 2) they all have the same kind.
1:2457599:      */
1:2457599:     public Comparator<Row> rowComparator()
1:2457599:     {
1:2457599:         return rowComparator;
1:2457599:     }
1:2457599: 
1:a991b64:     public Comparator<IndexInfo> indexComparator(boolean reversed)
1:a991b64:     {
1:a991b64:         return reversed ? indexReverseComparator : indexComparator;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public Comparator<Clusterable> reversed()
1:a991b64:     {
1:a991b64:         return reverseComparator;
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public String toString()
1:a991b64:     {
1:a991b64:         return String.format("comparator(%s)", Joiner.on(", ").join(clusteringTypes));
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public boolean equals(Object o)
1:a991b64:     {
1:a991b64:         if (this == o)
1:a991b64:             return true;
1:a991b64: 
1:a991b64:         if (!(o instanceof ClusteringComparator))
1:a991b64:             return false;
1:a991b64: 
1:a991b64:         ClusteringComparator that = (ClusteringComparator)o;
1:a991b64:         return this.clusteringTypes.equals(that.clusteringTypes);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public int hashCode()
1:a991b64:     {
1:a991b64:         return Objects.hashCode(clusteringTypes);
1:a991b64:     }
1:a991b64: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1:         return compare(c1, c2, size());
1:     }
1: 
1:     /**
1:      * Compares the specified part of the specified clusterings.
1:      *
1:      * @param c1 the first clustering
1:      * @param c2 the second clustering
1:      * @param size the number of components to compare
1:      * @return a negative integer, zero, or a positive integer as the first argument is less than,
1:      * equal to, or greater than the second.
1:      */
1:     public int compare(Clustering c1, Clustering c2, int size)
1:     {
1:         for (int i = 0; i < size; i++)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.IndexInfo;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.ImmutableList;
0: import org.apache.cassandra.utils.FastByteOperations;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         this(ImmutableList.copyOf(clusteringTypes));
1:         // copy the list to ensure despatch is monomorphic
1:         this.clusteringTypes = ImmutableList.copyOf(clusteringTypes);
1:         for (AbstractType<?> type : clusteringTypes)
1:             type.checkComparable(); // this should already be enforced by CFMetaData.rebuild, but we check again for other constructors
/////////////////////////////////////////////////////////////////////////
1:         return clusteringTypes.get(i).compare(v1, v2);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     private final Comparator<Row> rowComparator = (r1, r2) -> compare(r1.clustering(), r2.clustering());
1: 
0:         this(Arrays.asList(clusteringTypes));
/////////////////////////////////////////////////////////////////////////
1:         this.indexComparator = (o1, o2) -> ClusteringComparator.this.compare(o1.lastName, o2.lastName);
1:         this.indexReverseComparator = (o1, o2) -> ClusteringComparator.this.compare(o1.firstName, o2.firstName);
1:         this.reverseComparator = (c1, c2) -> ClusteringComparator.this.compare(c2, c1);
/////////////////////////////////////////////////////////////////////////
1:         for (Object val : values)
1:                 builder.add((ByteBuffer) val);
/////////////////////////////////////////////////////////////////////////
1:             return v2 == null ? 0 : -1;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * A comparator for rows.
1:      *
1:      * A {@code Row} is a {@code Clusterable} so {@code ClusteringComparator} can be used
1:      * to compare rows directly, but when we know we deal with rows (and not {@code Clusterable} in
1:      * general), this is a little faster because by knowing we compare {@code Clustering} objects,
1:      * we know that 1) they all have the same size and 2) they all have the same kind.
1:      */
1:     public Comparator<Row> rowComparator()
1:     {
1:         return rowComparator;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:7813dee
/////////////////////////////////////////////////////////////////////////
1:         return s1 < s2 ? c1.kind().comparedToClustering : -c2.kind().comparedToClustering;
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.Arrays;
1: import java.util.Comparator;
1: import java.util.List;
1: import java.util.Objects;
1: 
1: import com.google.common.base.Joiner;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
0: import static org.apache.cassandra.io.sstable.IndexHelper.IndexInfo;
1: 
1: /**
1:  * A comparator of clustering prefixes (or more generally of {@link Clusterable}}.
1:  * <p>
1:  * This is essentially just a composite comparator that the clustering values of the provided
1:  * clustering prefixes in lexicographical order, with each component being compared based on
1:  * the type of the clustering column this is a value of.
1:  */
1: public class ClusteringComparator implements Comparator<Clusterable>
1: {
1:     private final List<AbstractType<?>> clusteringTypes;
0:     private final boolean isByteOrderComparable;
1: 
1:     private final Comparator<IndexInfo> indexComparator;
1:     private final Comparator<IndexInfo> indexReverseComparator;
1:     private final Comparator<Clusterable> reverseComparator;
1: 
1:     public ClusteringComparator(AbstractType<?>... clusteringTypes)
1:     {
0:         this(Arrays.<AbstractType<?>>asList(clusteringTypes));
1:     }
1: 
1:     public ClusteringComparator(List<AbstractType<?>> clusteringTypes)
1:     {
0:         this.clusteringTypes = clusteringTypes;
0:         this.isByteOrderComparable = isByteOrderComparable(clusteringTypes);
1: 
0:         this.indexComparator = new Comparator<IndexInfo>()
1:         {
0:             public int compare(IndexInfo o1, IndexInfo o2)
1:             {
0:                 return ClusteringComparator.this.compare(o1.lastName, o2.lastName);
1:             }
0:         };
0:         this.indexReverseComparator = new Comparator<IndexInfo>()
1:         {
0:             public int compare(IndexInfo o1, IndexInfo o2)
1:             {
0:                 return ClusteringComparator.this.compare(o1.firstName, o2.firstName);
1:             }
0:         };
0:         this.reverseComparator = new Comparator<Clusterable>()
1:         {
1:             public int compare(Clusterable c1, Clusterable c2)
1:             {
0:                 return ClusteringComparator.this.compare(c2, c1);
1:             }
0:         };
1:     }
1: 
0:     private static boolean isByteOrderComparable(Iterable<AbstractType<?>> types)
1:     {
0:         boolean isByteOrderComparable = true;
0:         for (AbstractType<?> type : types)
0:             isByteOrderComparable &= type.isByteOrderComparable();
0:         return isByteOrderComparable;
1:     }
1: 
1:     /**
1:      * The number of clustering columns for the table this is the comparator of.
1:      */
1:     public int size()
1:     {
1:         return clusteringTypes.size();
1:     }
1: 
1:     /**
1:      * The "subtypes" of this clustering comparator, that is the types of the clustering
1:      * columns for the table this is a comparator of.
1:      */
1:     public List<AbstractType<?>> subtypes()
1:     {
1:         return clusteringTypes;
1:     }
1: 
1:     /**
1:      * Returns the type of the ith clustering column of the table.
1:      */
1:     public AbstractType<?> subtype(int i)
1:     {
1:         return clusteringTypes.get(i);
1:     }
1: 
1:     /**
1:      * Creates a row clustering based on the clustering values.
1:      * <p>
1:      * Every argument can either be a {@code ByteBuffer}, in which case it is used as-is, or a object
1:      * corresponding to the type of the corresponding clustering column, in which case it will be
1:      * converted to a byte buffer using the column type.
1:      *
1:      * @param values the values to use for the created clustering. There should be exactly {@code size()}
1:      * values which must be either byte buffers or of the type the column expect.
1:      *
1:      * @return the newly created clustering.
1:      */
1:     public Clustering make(Object... values)
1:     {
1:         if (values.length != size())
1:             throw new IllegalArgumentException(String.format("Invalid number of components, expecting %d but got %d", size(), values.length));
1: 
1:         CBuilder builder = CBuilder.create(this);
0:         for (int i = 0; i < values.length; i++)
1:         {
0:             Object val = values[i];
1:             if (val instanceof ByteBuffer)
0:                 builder.add((ByteBuffer)val);
1:             else
1:                 builder.add(val);
1:         }
1:         return builder.build();
1:     }
1: 
1:     public int compare(Clusterable c1, Clusterable c2)
1:     {
1:         return compare(c1.clustering(), c2.clustering());
1:     }
1: 
1:     public int compare(ClusteringPrefix c1, ClusteringPrefix c2)
1:     {
1:         int s1 = c1.size();
1:         int s2 = c2.size();
1:         int minSize = Math.min(s1, s2);
1: 
1:         for (int i = 0; i < minSize; i++)
1:         {
1:             int cmp = compareComponent(i, c1.get(i), c2.get(i));
1:             if (cmp != 0)
1:                 return cmp;
1:         }
1: 
1:         if (s1 == s2)
1:             return ClusteringPrefix.Kind.compare(c1.kind(), c2.kind());
1: 
0:         return s1 < s2 ? c1.kind().prefixComparisonResult : -c2.kind().prefixComparisonResult;
1:     }
1: 
1:     public int compare(Clustering c1, Clustering c2)
1:     {
0:         for (int i = 0; i < size(); i++)
1:         {
1:             int cmp = compareComponent(i, c1.get(i), c2.get(i));
1:             if (cmp != 0)
1:                 return cmp;
1:         }
1:         return 0;
1:     }
1: 
1:     public int compareComponent(int i, ByteBuffer v1, ByteBuffer v2)
1:     {
1:         if (v1 == null)
0:             return v1 == null ? 0 : -1;
1:         if (v2 == null)
1:             return 1;
1: 
0:         return isByteOrderComparable
0:              ? ByteBufferUtil.compareUnsigned(v1, v2)
0:              : clusteringTypes.get(i).compare(v1, v2);
1:     }
1: 
1:     /**
1:      * Returns whether this clustering comparator is compatible with the provided one,
1:      * that is if the provided one can be safely replaced by this new one.
1:      *
1:      * @param previous the previous comparator that we want to replace and test
1:      * compatibility with.
1:      *
1:      * @return whether {@code previous} can be safely replaced by this comparator.
1:      */
1:     public boolean isCompatibleWith(ClusteringComparator previous)
1:     {
1:         if (this == previous)
1:             return true;
1: 
1:         // Extending with new components is fine, shrinking is not
1:         if (size() < previous.size())
1:             return false;
1: 
1:         for (int i = 0; i < previous.size(); i++)
1:         {
1:             AbstractType<?> tprev = previous.subtype(i);
1:             AbstractType<?> tnew = subtype(i);
1:             if (!tnew.isCompatibleWith(tprev))
1:                 return false;
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Validates the provided prefix for corrupted data.
1:      *
1:      * @param clustering the clustering prefix to validate.
1:      *
1:      * @throws MarshalException if {@code clustering} contains some invalid data.
1:      */
1:     public void validate(ClusteringPrefix clustering)
1:     {
1:         for (int i = 0; i < clustering.size(); i++)
1:         {
1:             ByteBuffer value = clustering.get(i);
1:             if (value != null)
1:                 subtype(i).validate(value);
1:         }
1:     }
1: 
1:     public Comparator<IndexInfo> indexComparator(boolean reversed)
1:     {
1:         return reversed ? indexReverseComparator : indexComparator;
1:     }
1: 
1:     public Comparator<Clusterable> reversed()
1:     {
1:         return reverseComparator;
1:     }
1: 
1:     /**
0:      * Whether the two provided clustering prefix are on the same clustering values.
1:      *
0:      * @param c1 the first prefix.
0:      * @param c2 the second prefix.
0:      * @return whether {@code c1} and {@code c2} have the same clustering values (but not necessarily
0:      * the same "kind") or not.
1:      */
0:     public boolean isOnSameClustering(ClusteringPrefix c1, ClusteringPrefix c2)
1:     {
0:         if (c1.size() != c2.size())
1:             return false;
1: 
0:         for (int i = 0; i < c1.size(); i++)
1:         {
0:             if (compareComponent(i, c1.get(i), c2.get(i)) != 0)
1:                 return false;
1:         }
1:         return true;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("comparator(%s)", Joiner.on(", ").join(clusteringTypes));
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof ClusteringComparator))
1:             return false;
1: 
1:         ClusteringComparator that = (ClusteringComparator)o;
1:         return this.clusteringTypes.equals(that.clusteringTypes);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(clusteringTypes);
1:     }
1: }
============================================================================