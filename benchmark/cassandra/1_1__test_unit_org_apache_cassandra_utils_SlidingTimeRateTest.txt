1:d43b9ce: /*
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information
1:d43b9ce:  * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing, software
1:d43b9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d43b9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d43b9ce:  * See the License for the specific language governing permissions and
1:d43b9ce:  * limitations under the License.
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.utils;
1:d43b9ce: 
1:d43b9ce: import java.util.concurrent.ExecutorService;
1:d43b9ce: import java.util.concurrent.Executors;
1:d43b9ce: import java.util.concurrent.TimeUnit;
1:d43b9ce: 
1:d43b9ce: import org.junit.Assert;
1:d43b9ce: import org.junit.Test;
1:d43b9ce: 
1:d43b9ce: public class SlidingTimeRateTest
1:d43b9ce: {
1:d43b9ce:     @Test
1:d43b9ce:     public void testUpdateAndGet()
1:d43b9ce:     {
1:d43b9ce:         SlidingTimeRate rate = new SlidingTimeRate(new TestTimeSource(), 10, 1, TimeUnit.SECONDS);
1:d43b9ce:         int updates = 100;
1:d43b9ce:         for (int i = 0; i < updates; i++)
1:d43b9ce:         {
1:d43b9ce:             rate.update(1);
1:d43b9ce:         }
1:d43b9ce:         Assert.assertEquals(updates, rate.get(TimeUnit.SECONDS), 0.0);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testUpdateAndGetBetweenWindows() throws InterruptedException
1:d43b9ce:     {
1:d43b9ce:         TestTimeSource time = new TestTimeSource();
1:d43b9ce:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:d43b9ce:         int updates = 100;
1:d43b9ce:         for (int i = 0; i < updates; i++)
1:d43b9ce:         {
1:d43b9ce:             rate.update(1);
1:d43b9ce:             time.sleep(100, TimeUnit.MILLISECONDS);
1:d43b9ce:         }
1:d43b9ce:         Assert.assertEquals(10, rate.get(TimeUnit.SECONDS), 0.0);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testUpdateAndGetPastWindowSize() throws InterruptedException
1:d43b9ce:     {
1:d43b9ce:         TestTimeSource time = new TestTimeSource();
1:d43b9ce:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:d43b9ce:         int updates = 100;
1:d43b9ce:         for (int i = 0; i < updates; i++)
1:d43b9ce:         {
1:d43b9ce:             rate.update(1);
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         time.sleep(6, TimeUnit.SECONDS);
1:d43b9ce: 
1:d43b9ce:         Assert.assertEquals(0, rate.get(TimeUnit.SECONDS), 0.0);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testUpdateAndGetToPointInTime() throws InterruptedException
1:d43b9ce:     {
1:d43b9ce:         TestTimeSource time = new TestTimeSource();
1:d43b9ce:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:d43b9ce:         int updates = 10;
1:d43b9ce:         for (int i = 0; i < updates; i++)
1:d43b9ce:         {
1:d43b9ce:             rate.update(1);
1:d43b9ce:             time.sleep(100, TimeUnit.MILLISECONDS);
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         time.sleep(1, TimeUnit.SECONDS);
1:d43b9ce: 
1:d43b9ce:         Assert.assertEquals(5, rate.get(TimeUnit.SECONDS), 0.0);
1:d43b9ce:         Assert.assertEquals(10, rate.get(1, TimeUnit.SECONDS), 0.0);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testDecay() throws InterruptedException
1:d43b9ce:     {
1:d43b9ce:         TestTimeSource time = new TestTimeSource();
1:d43b9ce:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:d43b9ce:         int updates = 10;
1:d43b9ce:         for (int i = 0; i < updates; i++)
1:d43b9ce:         {
1:d43b9ce:             rate.update(1);
1:d43b9ce:             time.sleep(100, TimeUnit.MILLISECONDS);
1:d43b9ce:         }
1:d43b9ce:         Assert.assertEquals(10, rate.get(TimeUnit.SECONDS), 0.0);
1:d43b9ce: 
1:d43b9ce:         time.sleep(1, TimeUnit.SECONDS);
1:d43b9ce: 
1:d43b9ce:         Assert.assertEquals(5, rate.get(TimeUnit.SECONDS), 0.0);
1:d43b9ce: 
1:d43b9ce:         time.sleep(2, TimeUnit.SECONDS);
1:d43b9ce: 
1:d43b9ce:         Assert.assertEquals(2.5, rate.get(TimeUnit.SECONDS), 0.0);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testPruning() throws InterruptedException
1:d43b9ce:     {
1:d43b9ce:         TestTimeSource time = new TestTimeSource();
1:d43b9ce:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:d43b9ce: 
1:d43b9ce:         rate.update(1);
1:d43b9ce:         Assert.assertEquals(1, rate.size());
1:d43b9ce: 
1:d43b9ce:         time.sleep(6, TimeUnit.SECONDS);
1:d43b9ce: 
1:d43b9ce:         rate.prune();
1:d43b9ce:         Assert.assertEquals(0, rate.size());
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testConcurrentUpdateAndGet() throws InterruptedException
1:d43b9ce:     {
1:d43b9ce:         final ExecutorService executor = Executors.newFixedThreadPool(FBUtilities.getAvailableProcessors());
1:d43b9ce:         final TestTimeSource time = new TestTimeSource();
1:d43b9ce:         final SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:d43b9ce:         int updates = 100000;
1:d43b9ce:         for (int i = 0; i < updates; i++)
1:d43b9ce:         {
1:d43b9ce:             executor.submit(() -> {
1:d43b9ce:                 time.sleep(1, TimeUnit.MILLISECONDS);
1:d43b9ce:                 rate.update(1);
1:d43b9ce:             });
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         executor.shutdown();
1:d43b9ce: 
1:d43b9ce:         Assert.assertTrue(executor.awaitTermination(1, TimeUnit.MINUTES));
1:d43b9ce:         Assert.assertEquals(1000, rate.get(TimeUnit.SECONDS), 100.0);
1:d43b9ce:     }
1:d43b9ce: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class SlidingTimeRateTest
1: {
1:     @Test
1:     public void testUpdateAndGet()
1:     {
1:         SlidingTimeRate rate = new SlidingTimeRate(new TestTimeSource(), 10, 1, TimeUnit.SECONDS);
1:         int updates = 100;
1:         for (int i = 0; i < updates; i++)
1:         {
1:             rate.update(1);
1:         }
1:         Assert.assertEquals(updates, rate.get(TimeUnit.SECONDS), 0.0);
1:     }
1: 
1:     @Test
1:     public void testUpdateAndGetBetweenWindows() throws InterruptedException
1:     {
1:         TestTimeSource time = new TestTimeSource();
1:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:         int updates = 100;
1:         for (int i = 0; i < updates; i++)
1:         {
1:             rate.update(1);
1:             time.sleep(100, TimeUnit.MILLISECONDS);
1:         }
1:         Assert.assertEquals(10, rate.get(TimeUnit.SECONDS), 0.0);
1:     }
1: 
1:     @Test
1:     public void testUpdateAndGetPastWindowSize() throws InterruptedException
1:     {
1:         TestTimeSource time = new TestTimeSource();
1:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:         int updates = 100;
1:         for (int i = 0; i < updates; i++)
1:         {
1:             rate.update(1);
1:         }
1: 
1:         time.sleep(6, TimeUnit.SECONDS);
1: 
1:         Assert.assertEquals(0, rate.get(TimeUnit.SECONDS), 0.0);
1:     }
1: 
1:     @Test
1:     public void testUpdateAndGetToPointInTime() throws InterruptedException
1:     {
1:         TestTimeSource time = new TestTimeSource();
1:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:         int updates = 10;
1:         for (int i = 0; i < updates; i++)
1:         {
1:             rate.update(1);
1:             time.sleep(100, TimeUnit.MILLISECONDS);
1:         }
1: 
1:         time.sleep(1, TimeUnit.SECONDS);
1: 
1:         Assert.assertEquals(5, rate.get(TimeUnit.SECONDS), 0.0);
1:         Assert.assertEquals(10, rate.get(1, TimeUnit.SECONDS), 0.0);
1:     }
1: 
1:     @Test
1:     public void testDecay() throws InterruptedException
1:     {
1:         TestTimeSource time = new TestTimeSource();
1:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:         int updates = 10;
1:         for (int i = 0; i < updates; i++)
1:         {
1:             rate.update(1);
1:             time.sleep(100, TimeUnit.MILLISECONDS);
1:         }
1:         Assert.assertEquals(10, rate.get(TimeUnit.SECONDS), 0.0);
1: 
1:         time.sleep(1, TimeUnit.SECONDS);
1: 
1:         Assert.assertEquals(5, rate.get(TimeUnit.SECONDS), 0.0);
1: 
1:         time.sleep(2, TimeUnit.SECONDS);
1: 
1:         Assert.assertEquals(2.5, rate.get(TimeUnit.SECONDS), 0.0);
1:     }
1: 
1:     @Test
1:     public void testPruning() throws InterruptedException
1:     {
1:         TestTimeSource time = new TestTimeSource();
1:         SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1: 
1:         rate.update(1);
1:         Assert.assertEquals(1, rate.size());
1: 
1:         time.sleep(6, TimeUnit.SECONDS);
1: 
1:         rate.prune();
1:         Assert.assertEquals(0, rate.size());
1:     }
1: 
1:     @Test
1:     public void testConcurrentUpdateAndGet() throws InterruptedException
1:     {
1:         final ExecutorService executor = Executors.newFixedThreadPool(FBUtilities.getAvailableProcessors());
1:         final TestTimeSource time = new TestTimeSource();
1:         final SlidingTimeRate rate = new SlidingTimeRate(time, 5, 1, TimeUnit.SECONDS);
1:         int updates = 100000;
1:         for (int i = 0; i < updates; i++)
1:         {
1:             executor.submit(() -> {
1:                 time.sleep(1, TimeUnit.MILLISECONDS);
1:                 rate.update(1);
1:             });
1:         }
1: 
1:         executor.shutdown();
1: 
1:         Assert.assertTrue(executor.awaitTermination(1, TimeUnit.MINUTES));
1:         Assert.assertEquals(1000, rate.get(TimeUnit.SECONDS), 100.0);
1:     }
1: }
============================================================================