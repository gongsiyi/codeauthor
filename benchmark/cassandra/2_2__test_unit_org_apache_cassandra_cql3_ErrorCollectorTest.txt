1:8a2d8a1: /*
1:8a2d8a1:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a2d8a1:  * or more contributor license agreements.  See the NOTICE file
1:8a2d8a1:  * distributed with this work for additional information
1:8a2d8a1:  * regarding copyright ownership.  The ASF licenses this file
1:8a2d8a1:  * to you under the Apache License, Version 2.0 (the
1:8a2d8a1:  * "License"); you may not use this file except in compliance
1:8a2d8a1:  * with the License.  You may obtain a copy of the License at
1:8a2d8a1:  *
1:8a2d8a1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a2d8a1:  *
1:8a2d8a1:  * Unless required by applicable law or agreed to in writing, software
1:8a2d8a1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a2d8a1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a2d8a1:  * See the License for the specific language governing permissions and
1:8a2d8a1:  * limitations under the License.
1:8a2d8a1:  */
1:8a2d8a1: package org.apache.cassandra.cql3;
1:8a2d8a1: 
1:8a2d8a1: import org.antlr.runtime.CharStream;
1:8a2d8a1: import org.antlr.runtime.Token;
1:8a2d8a1: import org.junit.Test;
1:8a2d8a1: 
1:8a2d8a1: import static org.junit.Assert.assertEquals;
1:8a2d8a1: 
1:8a2d8a1: public class ErrorCollectorTest
1:8a2d8a1: {
1:8a2d8a1:     @Test
1:8a2d8a1:     public void testAppendSnippetWithEmptyQuery()
1:8a2d8a1:     {
1:8a2d8a1:         String query = ";";
1:8a2d8a1: 
1:8a2d8a1:         ErrorCollector collector = new ErrorCollector(query);
1:8a2d8a1: 
1:8a2d8a1:         StringBuilder builder = new StringBuilder();
1:8a2d8a1: 
1:8a2d8a1:         Token from = new MockToken(1, 0, ";");
1:8a2d8a1:         Token to = new MockToken(1, 0, ";");
1:8a2d8a1:         Token offending = new MockToken(1, 0, ";");
1:8a2d8a1: 
1:8a2d8a1:         collector.appendSnippet(builder, from, to, offending);
1:8a2d8a1: 
1:8a2d8a1:         String expected = " ([;])";
1:8a2d8a1: 
1:8a2d8a1:         assertEquals(expected, builder.toString());
1:8a2d8a1:     }
1:254d6f7: 
1:254d6f7:     @Test
1:8a2d8a1:     public void testAppendSnippetWithOneLines()
1:8a2d8a1:     {
1:8a2d8a1:         String query = "select * from users where user_name = ''test'';";
1:8a2d8a1: 
1:8a2d8a1:         ErrorCollector collector = new ErrorCollector(query);
1:8a2d8a1: 
1:8a2d8a1:         StringBuilder builder = new StringBuilder();
1:8a2d8a1: 
1:8a2d8a1:         Token from = new MockToken(1, 25, " ");
1:8a2d8a1:         Token to = new MockToken(1, 46, ";");
1:8a2d8a1:         Token offending = new MockToken(1, 40, "test");
1:8a2d8a1: 
1:8a2d8a1:         collector.appendSnippet(builder, from, to, offending);
1:8a2d8a1: 
1:8a2d8a1:         String expected = " (... user_name = ''[test]'';)";
1:8a2d8a1: 
1:8a2d8a1:         assertEquals(expected, builder.toString());
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     @Test
1:8a2d8a1:     public void testAppendSnippetOnSecondLine()
1:8a2d8a1:     {
1:8a2d8a1:         String query = "select * from users\n" +
1:8a2d8a1:                 "where user_name = ''test'';";
1:8a2d8a1: 
1:8a2d8a1:         ErrorCollector collector = new ErrorCollector(query);
1:8a2d8a1: 
1:8a2d8a1:         StringBuilder builder = new StringBuilder();
1:8a2d8a1: 
1:8a2d8a1:         Token from = new MockToken(2, 5, " ");
1:8a2d8a1:         Token to = new MockToken(2, 26, ";");
1:8a2d8a1:         Token offending = new MockToken(2, 20, "test");
1:8a2d8a1: 
1:8a2d8a1:         collector.appendSnippet(builder, from, to, offending);
1:8a2d8a1: 
1:8a2d8a1:         String expected = " (... user_name = ''[test]'';)";
1:8a2d8a1: 
1:8a2d8a1:         assertEquals(expected, builder.toString());
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     @Test
1:8a2d8a1:     public void testAppendSnippetWithSnippetOverTwoLines()
1:8a2d8a1:     {
1:8a2d8a1:         String query = "select * from users where user_name \n" +
1:8a2d8a1:                 "= ''test'';";
1:8a2d8a1: 
1:8a2d8a1:         ErrorCollector collector = new ErrorCollector(query);
1:8a2d8a1: 
1:8a2d8a1:         StringBuilder builder = new StringBuilder();
1:8a2d8a1: 
1:8a2d8a1:         Token from = new MockToken(1, 20, "where");
1:8a2d8a1:         Token to = new MockToken(2, 9, "'");
1:8a2d8a1:         Token offending = new MockToken(2, 4, "test");
1:8a2d8a1: 
1:8a2d8a1:         collector.appendSnippet(builder, from, to, offending);
1:8a2d8a1: 
1:8a2d8a1:         String expected = " (...where user_name = ''[test]''...)";
1:8a2d8a1: 
1:8a2d8a1:         assertEquals(expected, builder.toString());
1:8a2d8a1:     }
1:8a2d8a1: 
1:c7f3a23:     /**
1:c7f3a23:      * With ANTLR 3.5.2 it appears that some tokens can contains unexpected values: a line = 0 
1:c7f3a23:      * and a charPositionInLine = -1.
1:c7f3a23:      */
1:c7f3a23:     @Test
1:c7f3a23:     public void testAppendSnippetWithInvalidToken()
1:c7f3a23:     {
1:c7f3a23:         String query = "select * fom users";
1:c7f3a23: 
1:c7f3a23:         ErrorCollector collector = new ErrorCollector(query);
1:c7f3a23: 
1:c7f3a23:         StringBuilder builder = new StringBuilder();
1:c7f3a23: 
1:c7f3a23:         Token from = new MockToken(1, 5, "select");
1:c7f3a23:         Token to = new MockToken(0, -1, "");
1:c7f3a23:         Token offending = new MockToken(0, -1, "");
1:c7f3a23: 
1:c7f3a23:         collector.appendSnippet(builder, from, to, offending);
1:c7f3a23: 
1:c7f3a23:         String expected = "";
1:c7f3a23: 
1:c7f3a23:         assertEquals(expected, builder.toString());
1:c7f3a23:     }
1:c7f3a23: 
1:8a2d8a1:     @Test
1:254d6f7:     public void testAppendSnippetWithInvalidToToken()
1:254d6f7:     {
1:254d6f7:         String query = "CREATE TABLE test (a int PRIMARY KEY, b set<int>;";
1:254d6f7: 
1:254d6f7:         ErrorCollector collector = new ErrorCollector(query);
1:254d6f7: 
1:254d6f7:         StringBuilder builder = new StringBuilder();
1:8a2d8a1: 
1:254d6f7:         Token from = new MockToken(1, 32, " ");
1:254d6f7:         Token to = new MockToken(0, -1, "<no text>");
1:254d6f7:         Token offending = new MockToken(1, 48, ";");
1:254d6f7: 
1:254d6f7:         collector.appendSnippet(builder, from, to, offending);
1:254d6f7:         assertEquals("", builder.toString());
1:254d6f7:     }
1:254d6f7: 
1:8a2d8a1:     private final static class MockToken implements Token
1:8a2d8a1:     {
1:8a2d8a1:         /**
1:8a2d8a1:          * The line number on which this token was matched; line=1..n
1:8a2d8a1:          */
1:8a2d8a1:         private int line;
1:8a2d8a1: 
1:8a2d8a1:         /**
1:8a2d8a1:          * The index of the first character relative to the beginning of the line 0..n-1
1:8a2d8a1:          */
1:8a2d8a1:         private int charPositionInLine;
1:8a2d8a1: 
1:8a2d8a1:         /**
1:8a2d8a1:          * The text of the token
1:8a2d8a1:          */
1:8a2d8a1:         private String text;
1:8a2d8a1: 
1:8a2d8a1:         public MockToken(int line, int charPositionInLine, String text)
1:8a2d8a1:         {
1:8a2d8a1:             this.line = line;
1:8a2d8a1:             this.charPositionInLine = charPositionInLine;
1:8a2d8a1:             this.text = text;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public int getChannel()
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public int getCharPositionInLine()
1:8a2d8a1:         {
1:8a2d8a1:             return charPositionInLine;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public CharStream getInputStream()
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public int getLine()
1:8a2d8a1:         {
1:8a2d8a1:             return line;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public String getText()
1:8a2d8a1:         {
1:8a2d8a1:             return text;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public int getTokenIndex()
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public int getType()
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void setChannel(int channel)
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void setCharPositionInLine(int charPositionInLine)
1:8a2d8a1:         {
1:8a2d8a1:             this.charPositionInLine = charPositionInLine;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void setInputStream(CharStream inputStream)
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void setLine(int line)
1:8a2d8a1:         {
1:8a2d8a1:             this.line = line;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void setText(String text)
1:8a2d8a1:         {
1:8a2d8a1:             this.text = text;
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void setTokenIndex(int tokenIndex)
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1: 
1:8a2d8a1:         @Override
1:8a2d8a1:         public void setType(int type)
1:8a2d8a1:         {
1:8a2d8a1:             throw new UnsupportedOperationException();
1:8a2d8a1:         }
1:8a2d8a1:     }
1:8a2d8a1: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:3a609c2
commit:c7f3a23
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * With ANTLR 3.5.2 it appears that some tokens can contains unexpected values: a line = 0 
1:      * and a charPositionInLine = -1.
1:      */
1:     @Test
1:     public void testAppendSnippetWithInvalidToken()
1:     {
1:         String query = "select * fom users";
1: 
1:         ErrorCollector collector = new ErrorCollector(query);
1: 
1:         StringBuilder builder = new StringBuilder();
1: 
1:         Token from = new MockToken(1, 5, "select");
1:         Token to = new MockToken(0, -1, "");
1:         Token offending = new MockToken(0, -1, "");
1: 
1:         collector.appendSnippet(builder, from, to, offending);
1: 
1:         String expected = "";
1: 
1:         assertEquals(expected, builder.toString());
1:     }
1: 
author:blerer
-------------------------------------------------------------------------------
commit:254d6f7
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testAppendSnippetWithInvalidToToken()
1:     {
1:         String query = "CREATE TABLE test (a int PRIMARY KEY, b set<int>;";
1: 
1:         ErrorCollector collector = new ErrorCollector(query);
1: 
1:         StringBuilder builder = new StringBuilder();
1: 
1:         Token from = new MockToken(1, 32, " ");
1:         Token to = new MockToken(0, -1, "<no text>");
1:         Token offending = new MockToken(1, 48, ";");
1: 
1:         collector.appendSnippet(builder, from, to, offending);
1:         assertEquals("", builder.toString());
1:     }
1: 
commit:8a2d8a1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import org.antlr.runtime.CharStream;
1: import org.antlr.runtime.Token;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class ErrorCollectorTest
1: {
1:     @Test
1:     public void testAppendSnippetWithEmptyQuery()
1:     {
1:         String query = ";";
1: 
1:         ErrorCollector collector = new ErrorCollector(query);
1: 
1:         StringBuilder builder = new StringBuilder();
1: 
1:         Token from = new MockToken(1, 0, ";");
1:         Token to = new MockToken(1, 0, ";");
1:         Token offending = new MockToken(1, 0, ";");
1: 
1:         collector.appendSnippet(builder, from, to, offending);
1: 
1:         String expected = " ([;])";
1: 
1:         assertEquals(expected, builder.toString());
1:     }
1: 
1:     @Test
1:     public void testAppendSnippetWithOneLines()
1:     {
1:         String query = "select * from users where user_name = ''test'';";
1: 
1:         ErrorCollector collector = new ErrorCollector(query);
1: 
1:         StringBuilder builder = new StringBuilder();
1: 
1:         Token from = new MockToken(1, 25, " ");
1:         Token to = new MockToken(1, 46, ";");
1:         Token offending = new MockToken(1, 40, "test");
1: 
1:         collector.appendSnippet(builder, from, to, offending);
1: 
1:         String expected = " (... user_name = ''[test]'';)";
1: 
1:         assertEquals(expected, builder.toString());
1:     }
1: 
1:     @Test
1:     public void testAppendSnippetOnSecondLine()
1:     {
1:         String query = "select * from users\n" +
1:                 "where user_name = ''test'';";
1: 
1:         ErrorCollector collector = new ErrorCollector(query);
1: 
1:         StringBuilder builder = new StringBuilder();
1: 
1:         Token from = new MockToken(2, 5, " ");
1:         Token to = new MockToken(2, 26, ";");
1:         Token offending = new MockToken(2, 20, "test");
1: 
1:         collector.appendSnippet(builder, from, to, offending);
1: 
1:         String expected = " (... user_name = ''[test]'';)";
1: 
1:         assertEquals(expected, builder.toString());
1:     }
1: 
1:     @Test
1:     public void testAppendSnippetWithSnippetOverTwoLines()
1:     {
1:         String query = "select * from users where user_name \n" +
1:                 "= ''test'';";
1: 
1:         ErrorCollector collector = new ErrorCollector(query);
1: 
1:         StringBuilder builder = new StringBuilder();
1: 
1:         Token from = new MockToken(1, 20, "where");
1:         Token to = new MockToken(2, 9, "'");
1:         Token offending = new MockToken(2, 4, "test");
1: 
1:         collector.appendSnippet(builder, from, to, offending);
1: 
1:         String expected = " (...where user_name = ''[test]''...)";
1: 
1:         assertEquals(expected, builder.toString());
1:     }
1: 
1:     private final static class MockToken implements Token
1:     {
1:         /**
1:          * The line number on which this token was matched; line=1..n
1:          */
1:         private int line;
1: 
1:         /**
1:          * The index of the first character relative to the beginning of the line 0..n-1
1:          */
1:         private int charPositionInLine;
1: 
1:         /**
1:          * The text of the token
1:          */
1:         private String text;
1: 
1:         public MockToken(int line, int charPositionInLine, String text)
1:         {
1:             this.line = line;
1:             this.charPositionInLine = charPositionInLine;
1:             this.text = text;
1:         }
1: 
1:         @Override
1:         public int getChannel()
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public int getCharPositionInLine()
1:         {
1:             return charPositionInLine;
1:         }
1: 
1:         @Override
1:         public CharStream getInputStream()
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public int getLine()
1:         {
1:             return line;
1:         }
1: 
1:         @Override
1:         public String getText()
1:         {
1:             return text;
1:         }
1: 
1:         @Override
1:         public int getTokenIndex()
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public int getType()
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public void setChannel(int channel)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public void setCharPositionInLine(int charPositionInLine)
1:         {
1:             this.charPositionInLine = charPositionInLine;
1:         }
1: 
1:         @Override
1:         public void setInputStream(CharStream inputStream)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public void setLine(int line)
1:         {
1:             this.line = line;
1:         }
1: 
1:         @Override
1:         public void setText(String text)
1:         {
1:             this.text = text;
1:         }
1: 
1:         @Override
1:         public void setTokenIndex(int tokenIndex)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public void setType(int type)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: }
============================================================================