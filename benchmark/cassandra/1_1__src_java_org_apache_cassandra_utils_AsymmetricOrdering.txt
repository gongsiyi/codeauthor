1:52ddfe4: /*
1:52ddfe4: * Licensed to the Apache Software Foundation (ASF) under one
1:52ddfe4: * or more contributor license agreements.  See the NOTICE file
1:52ddfe4: * distributed with this work for additional information
1:52ddfe4: * regarding copyright ownership.  The ASF licenses this file
1:52ddfe4: * to you under the Apache License, Version 2.0 (the
1:52ddfe4: * "License"); you may not use this file except in compliance
1:52ddfe4: * with the License.  You may obtain a copy of the License at
1:52ddfe4: *
1:52ddfe4: *    http://www.apache.org/licenses/LICENSE-2.0
1:52ddfe4: *
1:52ddfe4: * Unless required by applicable law or agreed to in writing,
1:52ddfe4: * software distributed under the License is distributed on an
1:52ddfe4: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:52ddfe4: * KIND, either express or implied.  See the License for the
1:52ddfe4: * specific language governing permissions and limitations
1:52ddfe4: * under the License.
1:52ddfe4: */
1:52ddfe4: package org.apache.cassandra.utils;
4:52ddfe4: 
1:52ddfe4: import java.util.List;
1:52ddfe4: 
1:52ddfe4: import com.google.common.collect.Ordering;
1:52ddfe4: 
1:52ddfe4: import net.nicoulaj.compilecommand.annotations.Inline;
1:52ddfe4: 
1:52ddfe4: public abstract class AsymmetricOrdering<T1, T2> extends Ordering<T1>
1:52ddfe4: {
1:52ddfe4: 
1:52ddfe4:     public abstract int compareAsymmetric(T1 left, T2 right);
1:52ddfe4: 
1:52ddfe4:     public static enum Op
1:52ddfe4:     {
1:52ddfe4:         // maximum index < key; -1 if no such key. == CEIL - 1
1:52ddfe4:         LOWER,
1:52ddfe4: 
1:52ddfe4:         // maximum index <= key; -1 if no such key. == HIGHER + 1
1:52ddfe4:         FLOOR,
1:52ddfe4: 
1:52ddfe4:         // minimum index >= key; size() if no such key.  == LOWER + 1
1:52ddfe4:         CEIL,
1:52ddfe4: 
1:52ddfe4:         // minimum index > key; size() if no such key. == FLOOR - 1
1:52ddfe4:         HIGHER
1:52ddfe4:     }
1:52ddfe4: 
1:52ddfe4:     /**
1:52ddfe4:      * @param searchIn sorted list to look in
1:52ddfe4:      * @param searchFor key to find
1:52ddfe4:      */
1:52ddfe4:     public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op)
1:52ddfe4:     {
1:52ddfe4:         final int strictnessOfLessThan = strictnessOfLessThan(op);
1:52ddfe4:         int lb = -1;
1:52ddfe4:         int ub = searchIn.size();
1:52ddfe4:         // a[-1]            ^= -infinity
1:52ddfe4:         // a[search.size()] ^= +infinity
1:52ddfe4: 
1:52ddfe4:         while (lb + 1 < ub)
1:52ddfe4:         {
1:52ddfe4:             int m = (lb + ub) / 2;
1:52ddfe4:             int c = compareAsymmetric(searchIn.get(m), searchFor);
1:52ddfe4: 
1:52ddfe4:             if (c < strictnessOfLessThan) lb = m;
1:52ddfe4:             else ub = m;
1:52ddfe4:         }
1:52ddfe4: 
1:52ddfe4:         return selectBoundary(op, lb, ub);
1:52ddfe4:     }
1:52ddfe4: 
1:52ddfe4:     @Inline
1:52ddfe4:     // this value, used as the right operand to a less than operator for the result
1:52ddfe4:     // of a compare() makes its behaviour either strict (<) or not strict (<=).
1:52ddfe4:     // a value of 1 is not strict, whereas 0 is strict
1:52ddfe4:     private static int strictnessOfLessThan(Op op)
1:52ddfe4:     {
1:52ddfe4:         switch (op)
1:52ddfe4:         {
1:52ddfe4:             case FLOOR: case HIGHER:
1:52ddfe4: 
1:52ddfe4:             // { a[lb] <= v ^ a[ub] > v }
1:52ddfe4:             return 1;
1:52ddfe4: 
1:52ddfe4:             // { a[m] >  v   ==>   a[ub] >  v   ==>   a[lb] <= v ^ a[ub] > v }
1:52ddfe4:             // { a[m] <= v   ==>   a[lb] <= v   ==>   a[lb] <= v ^ a[ub] > v }
1:52ddfe4: 
1:52ddfe4:             case CEIL: case LOWER:
1:52ddfe4: 
1:52ddfe4:             // { a[lb] < v ^ a[ub] >= v }
1:52ddfe4: 
1:52ddfe4:             return 0;
1:52ddfe4: 
1:52ddfe4:             // { a[m] >= v   ==>   a[ub] >= v   ==>   a[lb] < v ^ a[ub] >= v }
1:52ddfe4:             // { a[m] <  v   ==>   a[lb] <  v   ==>   a[lb] < v ^ a[ub] >= v }
1:52ddfe4:         }
1:52ddfe4:         throw new IllegalStateException();
1:52ddfe4:     }
1:52ddfe4: 
1:52ddfe4:     @Inline
1:52ddfe4:     private static int selectBoundary(Op op, int lb, int ub)
1:52ddfe4:     {
1:52ddfe4:         switch (op)
1:52ddfe4:         {
1:52ddfe4:             case CEIL:
1:52ddfe4:                 // { a[lb] < v ^ a[ub] >= v }
1:52ddfe4:             case HIGHER:
1:52ddfe4:                 // { a[lb] <= v ^ a[ub] > v }
1:52ddfe4:                 return ub;
1:52ddfe4:             case FLOOR:
1:52ddfe4:                 // { a[lb] <= v ^ a[ub] > v }
1:52ddfe4:             case LOWER:
1:52ddfe4:                 // { a[lb] < v ^ a[ub] >= v }
1:52ddfe4:                 return lb;
1:52ddfe4:         }
1:52ddfe4:         throw new IllegalStateException();
1:52ddfe4:     }
1:52ddfe4: 
1:52ddfe4:     private class Reversed extends AsymmetricOrdering<T1, T2>
1:52ddfe4:     {
1:52ddfe4:         public int compareAsymmetric(T1 left, T2 right)
1:52ddfe4:         {
1:52ddfe4:             return -AsymmetricOrdering.this.compareAsymmetric(left, right);
1:52ddfe4:         }
1:52ddfe4: 
1:52ddfe4:         public int compare(T1 left, T1 right)
1:52ddfe4:         {
1:52ddfe4:             return AsymmetricOrdering.this.compare(right, left);
1:52ddfe4:         }
1:52ddfe4: 
1:52ddfe4:         public AsymmetricOrdering<T1, T2> reverse()
1:52ddfe4:         {
1:52ddfe4:             return AsymmetricOrdering.this;
1:52ddfe4:         }
1:52ddfe4:     }
1:52ddfe4: 
1:52ddfe4:     public AsymmetricOrdering<T1, T2> reverse()
1:52ddfe4:     {
1:52ddfe4:         return new Reversed();
1:52ddfe4:     }
1:52ddfe4: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8b3221a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:52ddfe4
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.List;
1: 
1: import com.google.common.collect.Ordering;
1: 
1: import net.nicoulaj.compilecommand.annotations.Inline;
1: 
1: public abstract class AsymmetricOrdering<T1, T2> extends Ordering<T1>
1: {
1: 
1:     public abstract int compareAsymmetric(T1 left, T2 right);
1: 
1:     public static enum Op
1:     {
1:         // maximum index < key; -1 if no such key. == CEIL - 1
1:         LOWER,
1: 
1:         // maximum index <= key; -1 if no such key. == HIGHER + 1
1:         FLOOR,
1: 
1:         // minimum index >= key; size() if no such key.  == LOWER + 1
1:         CEIL,
1: 
1:         // minimum index > key; size() if no such key. == FLOOR - 1
1:         HIGHER
1:     }
1: 
1:     /**
1:      * @param searchIn sorted list to look in
1:      * @param searchFor key to find
1:      */
1:     public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op)
1:     {
1:         final int strictnessOfLessThan = strictnessOfLessThan(op);
1:         int lb = -1;
1:         int ub = searchIn.size();
1:         // a[-1]            ^= -infinity
1:         // a[search.size()] ^= +infinity
1: 
1:         while (lb + 1 < ub)
1:         {
1:             int m = (lb + ub) / 2;
1:             int c = compareAsymmetric(searchIn.get(m), searchFor);
1: 
1:             if (c < strictnessOfLessThan) lb = m;
1:             else ub = m;
1:         }
1: 
1:         return selectBoundary(op, lb, ub);
1:     }
1: 
1:     @Inline
1:     // this value, used as the right operand to a less than operator for the result
1:     // of a compare() makes its behaviour either strict (<) or not strict (<=).
1:     // a value of 1 is not strict, whereas 0 is strict
1:     private static int strictnessOfLessThan(Op op)
1:     {
1:         switch (op)
1:         {
1:             case FLOOR: case HIGHER:
1: 
1:             // { a[lb] <= v ^ a[ub] > v }
1:             return 1;
1: 
1:             // { a[m] >  v   ==>   a[ub] >  v   ==>   a[lb] <= v ^ a[ub] > v }
1:             // { a[m] <= v   ==>   a[lb] <= v   ==>   a[lb] <= v ^ a[ub] > v }
1: 
1:             case CEIL: case LOWER:
1: 
1:             // { a[lb] < v ^ a[ub] >= v }
1: 
1:             return 0;
1: 
1:             // { a[m] >= v   ==>   a[ub] >= v   ==>   a[lb] < v ^ a[ub] >= v }
1:             // { a[m] <  v   ==>   a[lb] <  v   ==>   a[lb] < v ^ a[ub] >= v }
1:         }
1: 
1:         throw new IllegalStateException();
1:     }
1: 
1:     @Inline
1:     private static int selectBoundary(Op op, int lb, int ub)
1:     {
1:         switch (op)
1:         {
1:             case CEIL:
1:                 // { a[lb] < v ^ a[ub] >= v }
1:             case HIGHER:
1:                 // { a[lb] <= v ^ a[ub] > v }
1:                 return ub;
1:             case FLOOR:
1:                 // { a[lb] <= v ^ a[ub] > v }
1:             case LOWER:
1:                 // { a[lb] < v ^ a[ub] >= v }
1:                 return lb;
1:         }
1:         throw new IllegalStateException();
1:     }
1: 
1: 
1: 
1:     private class Reversed extends AsymmetricOrdering<T1, T2>
1:     {
1:         public int compareAsymmetric(T1 left, T2 right)
1:         {
1:             return -AsymmetricOrdering.this.compareAsymmetric(left, right);
1:         }
1: 
1:         public int compare(T1 left, T1 right)
1:         {
1:             return AsymmetricOrdering.this.compare(right, left);
1:         }
1: 
1:         public AsymmetricOrdering<T1, T2> reverse()
1:         {
1:             return AsymmetricOrdering.this;
1:         }
1:     }
1: 
1:     public AsymmetricOrdering<T1, T2> reverse()
1:     {
1:         return new Reversed();
1:     }
1: }
============================================================================