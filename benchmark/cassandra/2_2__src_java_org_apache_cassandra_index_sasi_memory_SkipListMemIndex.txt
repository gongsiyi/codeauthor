1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.memory;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.*;
1:72790dc: import java.util.concurrent.ConcurrentSkipListMap;
1:72790dc: import java.util.concurrent.ConcurrentSkipListSet;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.*;
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeUnionIterator;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public class SkipListMemIndex extends MemIndex
1:72790dc: {
1:72790dc:     public static final int CSLM_OVERHEAD = 128; // average overhead of CSLM
1:72790dc: 
1:7d857b4:     private final ConcurrentSkipListMap<ByteBuffer, ConcurrentSkipListSet<RowKey>> index;
1:72790dc: 
1:72790dc:     public SkipListMemIndex(AbstractType<?> keyValidator, ColumnIndex columnIndex)
1:72790dc:     {
1:72790dc:         super(keyValidator, columnIndex);
1:72790dc:         index = new ConcurrentSkipListMap<>(columnIndex.getValidator());
1:72790dc:     }
1:72790dc: 
1:7d857b4:     public long add(RowKey key, ByteBuffer value)
1:72790dc:     {
1:72790dc:         long overhead = CSLM_OVERHEAD; // DKs are shared
1:7d857b4:         ConcurrentSkipListSet<RowKey> keys = index.get(value);
1:72790dc: 
1:72790dc:         if (keys == null)
1:72790dc:         {
1:7d857b4:             ConcurrentSkipListSet<RowKey> newKeys = new ConcurrentSkipListSet<>();
1:72790dc:             keys = index.putIfAbsent(value, newKeys);
1:72790dc:             if (keys == null)
1:72790dc:             {
1:72790dc:                 overhead += CSLM_OVERHEAD + value.remaining();
1:72790dc:                 keys = newKeys;
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         keys.add(key);
1:72790dc: 
1:72790dc:         return overhead;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public RangeIterator<Long, Token> search(Expression expression)
1:72790dc:     {
1:72790dc:         ByteBuffer min = expression.lower == null ? null : expression.lower.value;
1:72790dc:         ByteBuffer max = expression.upper == null ? null : expression.upper.value;
1:72790dc: 
1:7d857b4:         SortedMap<ByteBuffer, ConcurrentSkipListSet<RowKey>> search;
1:72790dc: 
1:72790dc:         if (min == null && max == null)
1:72790dc:         {
1:72790dc:             throw new IllegalArgumentException();
1:72790dc:         }
1:72790dc:         if (min != null && max != null)
1:72790dc:         {
1:72790dc:             search = index.subMap(min, expression.lower.inclusive, max, expression.upper.inclusive);
1:72790dc:         }
1:72790dc:         else if (min == null)
1:72790dc:         {
1:72790dc:             search = index.headMap(max, expression.upper.inclusive);
1:72790dc:         }
1:72790dc:         else
1:72790dc:         {
1:72790dc:             search = index.tailMap(min, expression.lower.inclusive);
1:72790dc:         }
1:72790dc: 
1:72790dc:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:72790dc:         search.values().stream()
1:72790dc:                        .filter(keys -> !keys.isEmpty())
1:72790dc:                        .forEach(keys -> builder.add(new KeyRangeIterator(keys)));
1:72790dc: 
1:72790dc:         return builder.build();
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.*;
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentSkipListMap<ByteBuffer, ConcurrentSkipListSet<RowKey>> index;
/////////////////////////////////////////////////////////////////////////
1:     public long add(RowKey key, ByteBuffer value)
1:         ConcurrentSkipListSet<RowKey> keys = index.get(value);
1:             ConcurrentSkipListSet<RowKey> newKeys = new ConcurrentSkipListSet<>();
/////////////////////////////////////////////////////////////////////////
1:         SortedMap<ByteBuffer, ConcurrentSkipListSet<RowKey>> search;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.memory;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: import java.util.concurrent.ConcurrentSkipListMap;
1: import java.util.concurrent.ConcurrentSkipListSet;
1: 
0: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.index.sasi.utils.RangeUnionIterator;
1: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: public class SkipListMemIndex extends MemIndex
1: {
1:     public static final int CSLM_OVERHEAD = 128; // average overhead of CSLM
1: 
0:     private final ConcurrentSkipListMap<ByteBuffer, ConcurrentSkipListSet<DecoratedKey>> index;
1: 
1:     public SkipListMemIndex(AbstractType<?> keyValidator, ColumnIndex columnIndex)
1:     {
1:         super(keyValidator, columnIndex);
1:         index = new ConcurrentSkipListMap<>(columnIndex.getValidator());
1:     }
1: 
0:     public long add(DecoratedKey key, ByteBuffer value)
1:     {
1:         long overhead = CSLM_OVERHEAD; // DKs are shared
0:         ConcurrentSkipListSet<DecoratedKey> keys = index.get(value);
1: 
1:         if (keys == null)
1:         {
0:             ConcurrentSkipListSet<DecoratedKey> newKeys = new ConcurrentSkipListSet<>(DecoratedKey.comparator);
1:             keys = index.putIfAbsent(value, newKeys);
1:             if (keys == null)
1:             {
1:                 overhead += CSLM_OVERHEAD + value.remaining();
1:                 keys = newKeys;
1:             }
1:         }
1: 
1:         keys.add(key);
1: 
1:         return overhead;
1:     }
1: 
1:     public RangeIterator<Long, Token> search(Expression expression)
1:     {
1:         ByteBuffer min = expression.lower == null ? null : expression.lower.value;
1:         ByteBuffer max = expression.upper == null ? null : expression.upper.value;
1: 
0:         SortedMap<ByteBuffer, ConcurrentSkipListSet<DecoratedKey>> search;
1: 
1:         if (min == null && max == null)
1:         {
1:             throw new IllegalArgumentException();
1:         }
1:         if (min != null && max != null)
1:         {
1:             search = index.subMap(min, expression.lower.inclusive, max, expression.upper.inclusive);
1:         }
1:         else if (min == null)
1:         {
1:             search = index.headMap(max, expression.upper.inclusive);
1:         }
1:         else
1:         {
1:             search = index.tailMap(min, expression.lower.inclusive);
1:         }
1: 
1:         RangeUnionIterator.Builder<Long, Token> builder = RangeUnionIterator.builder();
1:         search.values().stream()
1:                        .filter(keys -> !keys.isEmpty())
1:                        .forEach(keys -> builder.add(new KeyRangeIterator(keys)));
1: 
1:         return builder.build();
1:     }
1: }
============================================================================