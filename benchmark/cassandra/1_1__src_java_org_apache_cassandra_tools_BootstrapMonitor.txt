1:e5b5a91: /*
1:e5b5a91:  * Licensed to the Apache Software Foundation (ASF) under one
1:e5b5a91:  * or more contributor license agreements.  See the NOTICE file
1:e5b5a91:  * distributed with this work for additional information
1:e5b5a91:  * regarding copyright ownership.  The ASF licenses this file
1:e5b5a91:  * to you under the Apache License, Version 2.0 (the
1:e5b5a91:  * "License"); you may not use this file except in compliance
1:e5b5a91:  * with the License.  You may obtain a copy of the License at
1:e5b5a91:  *
1:e5b5a91:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e5b5a91:  *
1:e5b5a91:  * Unless required by applicable law or agreed to in writing, software
1:e5b5a91:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e5b5a91:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e5b5a91:  * See the License for the specific language governing permissions and
1:e5b5a91:  * limitations under the License.
1:e5b5a91:  */
1:e5b5a91: package org.apache.cassandra.tools;
1:e5b5a91: 
1:e5b5a91: import java.io.IOException;
1:e5b5a91: import java.io.PrintStream;
1:e5b5a91: import java.text.SimpleDateFormat;
1:e5b5a91: import java.util.concurrent.locks.Condition;
1:e5b5a91: 
1:e5b5a91: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1:e5b5a91: import org.apache.cassandra.utils.progress.ProgressEvent;
1:e5b5a91: import org.apache.cassandra.utils.progress.ProgressEventType;
1:e5b5a91: import org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener;
1:e5b5a91: 
1:e5b5a91: public class BootstrapMonitor extends JMXNotificationProgressListener
1:e5b5a91: {
1:e5b5a91:     private final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");
1:e5b5a91:     private final PrintStream out;
1:e5b5a91:     private final Condition condition = new SimpleCondition();
1:e5b5a91: 
1:e5b5a91:     public BootstrapMonitor(PrintStream out)
1:e5b5a91:     {
1:e5b5a91:         this.out = out;
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     public void awaitCompletion() throws InterruptedException
1:e5b5a91:     {
1:e5b5a91:         condition.await();
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     @Override
1:e5b5a91:     public boolean isInterestedIn(String tag)
1:e5b5a91:     {
1:e5b5a91:         return "bootstrap".equals(tag);
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     @Override
1:e5b5a91:     public void handleNotificationLost(long timestamp, String message)
1:e5b5a91:     {
1:e5b5a91:         super.handleNotificationLost(timestamp, message);
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     @Override
1:e5b5a91:     public void handleConnectionClosed(long timestamp, String message)
1:e5b5a91:     {
1:e5b5a91:         handleConnectionFailed(timestamp, message);
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     @Override
1:e5b5a91:     public void handleConnectionFailed(long timestamp, String message)
1:e5b5a91:     {
1:e5b5a91:         Exception error = new IOException(String.format("[%s] JMX connection closed. (%s)",
1:e5b5a91:                                               format.format(timestamp), message));
1:e5b5a91:         out.println(error.getMessage());
1:e5b5a91:         condition.signalAll();
1:e5b5a91:     }
1:e5b5a91: 
1:e5b5a91:     @Override
1:e5b5a91:     public void progress(String tag, ProgressEvent event)
1:e5b5a91:     {
1:e5b5a91:         ProgressEventType type = event.getType();
1:e5b5a91:         String message = String.format("[%s] %s", format.format(System.currentTimeMillis()), event.getMessage());
1:e5b5a91:         if (type == ProgressEventType.PROGRESS)
1:e5b5a91:         {
1:e5b5a91:             message = message + " (progress: " + (int)event.getProgressPercentage() + "%)";
1:e5b5a91:         }
1:e5b5a91:         out.println(message);
1:e5b5a91:         if (type == ProgressEventType.COMPLETE)
1:e5b5a91:         {
1:e5b5a91:             condition.signalAll();
1:e5b5a91:         }
1:e5b5a91:     }
1:e5b5a91: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:e5b5a91
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools;
1: 
1: import java.io.IOException;
1: import java.io.PrintStream;
1: import java.text.SimpleDateFormat;
1: import java.util.concurrent.locks.Condition;
1: 
1: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1: import org.apache.cassandra.utils.progress.ProgressEvent;
1: import org.apache.cassandra.utils.progress.ProgressEventType;
1: import org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener;
1: 
1: public class BootstrapMonitor extends JMXNotificationProgressListener
1: {
1:     private final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");
1:     private final PrintStream out;
1:     private final Condition condition = new SimpleCondition();
1: 
1:     public BootstrapMonitor(PrintStream out)
1:     {
1:         this.out = out;
1:     }
1: 
1:     public void awaitCompletion() throws InterruptedException
1:     {
1:         condition.await();
1:     }
1: 
1:     @Override
1:     public boolean isInterestedIn(String tag)
1:     {
1:         return "bootstrap".equals(tag);
1:     }
1: 
1:     @Override
1:     public void handleNotificationLost(long timestamp, String message)
1:     {
1:         super.handleNotificationLost(timestamp, message);
1:     }
1: 
1:     @Override
1:     public void handleConnectionClosed(long timestamp, String message)
1:     {
1:         handleConnectionFailed(timestamp, message);
1:     }
1: 
1:     @Override
1:     public void handleConnectionFailed(long timestamp, String message)
1:     {
1:         Exception error = new IOException(String.format("[%s] JMX connection closed. (%s)",
1:                                               format.format(timestamp), message));
1:         out.println(error.getMessage());
1:         condition.signalAll();
1:     }
1: 
1:     @Override
1:     public void progress(String tag, ProgressEvent event)
1:     {
1:         ProgressEventType type = event.getType();
1:         String message = String.format("[%s] %s", format.format(System.currentTimeMillis()), event.getMessage());
1:         if (type == ProgressEventType.PROGRESS)
1:         {
1:             message = message + " (progress: " + (int)event.getProgressPercentage() + "%)";
1:         }
1:         out.println(message);
1:         if (type == ProgressEventType.COMPLETE)
1:         {
1:             condition.signalAll();
1:         }
1:     }
1: }
============================================================================