1:765ab3f: /*
1:765ab3f:  * Licensed to the Apache Software Foundation (ASF) under one
1:765ab3f:  * or more contributor license agreements.  See the NOTICE file
1:765ab3f:  * distributed with this work for additional information
1:765ab3f:  * regarding copyright ownership.  The ASF licenses this file
1:765ab3f:  * to you under the Apache License, Version 2.0 (the
1:765ab3f:  * "License"); you may not use this file except in compliance
1:765ab3f:  * with the License.  You may obtain a copy of the License at
1:765ab3f:  *
1:765ab3f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:765ab3f:  *
1:765ab3f:  * Unless required by applicable law or agreed to in writing, software
1:765ab3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:765ab3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:765ab3f:  * See the License for the specific language governing permissions and
1:765ab3f:  * limitations under the License.
1:765ab3f:  */
1:765ab3f: package org.apache.cassandra.security;
1:765ab3f: 
1:765ab3f: import java.io.FileInputStream;
1:765ab3f: import java.io.IOException;
1:765ab3f: import java.security.Key;
1:765ab3f: import java.security.KeyStore;
1:765ab3f: 
1:765ab3f: import org.slf4j.Logger;
1:765ab3f: import org.slf4j.LoggerFactory;
1:765ab3f: 
1:765ab3f: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1:765ab3f: 
1:765ab3f: /**
1:765ab3f:  * A {@code KeyProvider} that retrieves keys from a java keystore.
1:765ab3f:  */
1:765ab3f: public class JKSKeyProvider implements KeyProvider
2:765ab3f: {
1:0ad1adb:     private static final Logger logger = LoggerFactory.getLogger(JKSKeyProvider.class);
1:765ab3f:     static final String PROP_KEYSTORE = "keystore";
1:765ab3f:     static final String PROP_KEYSTORE_PW = "keystore_password";
1:765ab3f:     static final String PROP_KEYSTORE_TYPE = "store_type";
1:765ab3f:     static final String PROP_KEY_PW = "key_password";
1:765ab3f: 
1:765ab3f:     private final KeyStore store;
1:765ab3f:     private final boolean isJceks;
1:765ab3f:     private final TransparentDataEncryptionOptions options;
1:765ab3f: 
1:765ab3f:     public JKSKeyProvider(TransparentDataEncryptionOptions options)
1:765ab3f:     {
1:765ab3f:         this.options = options;
1:765ab3f:         logger.info("initializing keystore from file {}", options.get(PROP_KEYSTORE));
1:127f7c5:         try (FileInputStream inputStream = new FileInputStream(options.get(PROP_KEYSTORE)))
1:765ab3f:         {
1:765ab3f:             store = KeyStore.getInstance(options.get(PROP_KEYSTORE_TYPE));
1:765ab3f:             store.load(inputStream, options.get(PROP_KEYSTORE_PW).toCharArray());
1:765ab3f:             isJceks = store.getType().equalsIgnoreCase("jceks");
2:765ab3f:         }
1:765ab3f:         catch (Exception e)
1:765ab3f:         {
1:765ab3f:             throw new RuntimeException("couldn't load keystore", e);
1:765ab3f:         }
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public Key getSecretKey(String keyAlias) throws IOException
1:765ab3f:     {
1:765ab3f:         // there's a lovely behavior with jceks files that all aliases are lower-cased
1:765ab3f:         if (isJceks)
1:765ab3f:             keyAlias = keyAlias.toLowerCase();
1:765ab3f: 
1:765ab3f:         Key key;
2:765ab3f:         try
1:765ab3f:         {
1:765ab3f:             String password = options.get(PROP_KEY_PW);
1:765ab3f:             if (password == null || password.isEmpty())
1:765ab3f:                 password = options.get(PROP_KEYSTORE_PW);
1:765ab3f:             key = store.getKey(keyAlias, password.toCharArray());
1:765ab3f:         }
1:765ab3f:         catch (Exception e)
1:765ab3f:         {
1:765ab3f:             throw new IOException("unable to load key from keystore");
1:765ab3f:         }
1:765ab3f:         if (key == null)
1:765ab3f:             throw new IOException(String.format("key %s was not found in keystore", keyAlias));
1:765ab3f:         return key;
1:765ab3f:     }
1:765ab3f: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:0ad1adb
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(JKSKeyProvider.class);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:127f7c5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         try (FileInputStream inputStream = new FileInputStream(options.get(PROP_KEYSTORE)))
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ef59624
/////////////////////////////////////////////////////////////////////////
author:Jason Brown
-------------------------------------------------------------------------------
commit:765ab3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.security;
1: 
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.security.Key;
1: import java.security.KeyStore;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
0: import org.apache.cassandra.io.util.FileUtils;
1: 
1: /**
1:  * A {@code KeyProvider} that retrieves keys from a java keystore.
1:  */
1: public class JKSKeyProvider implements KeyProvider
1: {
0:     private final Logger logger = LoggerFactory.getLogger(JKSKeyProvider.class);
1:     static final String PROP_KEYSTORE = "keystore";
1:     static final String PROP_KEYSTORE_PW = "keystore_password";
1:     static final String PROP_KEYSTORE_TYPE = "store_type";
1:     static final String PROP_KEY_PW = "key_password";
1: 
1:     private final KeyStore store;
1:     private final boolean isJceks;
1:     private final TransparentDataEncryptionOptions options;
1: 
1:     public JKSKeyProvider(TransparentDataEncryptionOptions options)
1:     {
1:         this.options = options;
1:         logger.info("initializing keystore from file {}", options.get(PROP_KEYSTORE));
0:         FileInputStream inputStream = null;
1:         try
1:         {
0:             inputStream = new FileInputStream(options.get(PROP_KEYSTORE));
1:             store = KeyStore.getInstance(options.get(PROP_KEYSTORE_TYPE));
1:             store.load(inputStream, options.get(PROP_KEYSTORE_PW).toCharArray());
1:             isJceks = store.getType().equalsIgnoreCase("jceks");
1:         }
1:         catch (Exception e)
1:         {
1:             throw new RuntimeException("couldn't load keystore", e);
1:         }
0:         finally
1:         {
0:             FileUtils.closeQuietly(inputStream);
1:         }
1:     }
1: 
1:     public Key getSecretKey(String keyAlias) throws IOException
1:     {
1:         // there's a lovely behavior with jceks files that all aliases are lower-cased
1:         if (isJceks)
1:             keyAlias = keyAlias.toLowerCase();
1: 
1:         Key key;
1:         try
1:         {
1:             String password = options.get(PROP_KEY_PW);
1:             if (password == null || password.isEmpty())
1:                 password = options.get(PROP_KEYSTORE_PW);
1:             key = store.getKey(keyAlias, password.toCharArray());
1:         }
1:         catch (Exception e)
1:         {
1:             throw new IOException("unable to load key from keystore");
1:         }
1:         if (key == null)
1:             throw new IOException(String.format("key %s was not found in keystore", keyAlias));
1:         return key;
1:     }
1: }
commit:72f5fbd
/////////////////////////////////////////////////////////////////////////
commit:37160e1
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.security;
0: 
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: import java.security.Key;
0: import java.security.KeyStore;
0: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
0: import org.apache.cassandra.io.util.FileUtils;
0: 
0: /**
0:  * A {@code KeyProvider} that retrieves keys from a java keystore.
0:  */
0: public class JKSKeyProvider implements KeyProvider
0: {
0:     private final Logger logger = LoggerFactory.getLogger(JKSKeyProvider.class);
0:     static final String PROP_KEYSTORE = "keystore";
0:     static final String PROP_KEYSTORE_PW = "keystore_password";
0:     static final String PROP_KEYSTORE_TYPE = "store_type";
0:     static final String PROP_KEY_PW = "key_password";
0: 
0:     private final KeyStore store;
0:     private final boolean isJceks;
0:     private final TransparentDataEncryptionOptions options;
0: 
0:     public JKSKeyProvider(TransparentDataEncryptionOptions options)
0:     {
0:         this.options = options;
0:         logger.info("initializing keystore from file {}", options.get(PROP_KEYSTORE));
0:         FileInputStream inputStream = null;
0:         try
0:         {
0:             inputStream = new FileInputStream(options.get(PROP_KEYSTORE));
0:             store = KeyStore.getInstance(options.get(PROP_KEYSTORE_TYPE));
0:             store.load(inputStream, options.get(PROP_KEYSTORE_PW).toCharArray());
0:             isJceks = store.getType().equalsIgnoreCase("jceks");
0:         }
0:         catch (Exception e)
0:         {
0:             throw new RuntimeException("couldn't load keystore", e);
0:         }
0:         finally
0:         {
0:             FileUtils.closeQuietly(inputStream);
0:         }
0:     }
0: 
0:     public Key getSecretKey(String keyAlias) throws IOException
0:     {
0:         // there's a lovely behavior with jceks files that all aliases are lower-cased
0:         if (isJceks)
0:             keyAlias = keyAlias.toLowerCase();
0: 
0:         Key key;
0:         try
0:         {
0:             String password = options.get(PROP_KEY_PW);
0:             if (password == null || password.isEmpty())
0:                 password = options.get(PROP_KEYSTORE_PW);
0:             key = store.getKey(keyAlias, password.toCharArray());
0:         }
0:         catch (Exception e)
0:         {
0:             throw new IOException("unable to load key from keystore");
0:         }
0:         if (key == null)
0:             throw new IOException(String.format("key %s was not found in keystore", keyAlias));
0:         return key;
0:     }
0: }
============================================================================