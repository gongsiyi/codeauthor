1:c75ee41: /*
1:c75ee41: * Licensed to the Apache Software Foundation (ASF) under one
1:c75ee41: * or more contributor license agreements.  See the NOTICE file
1:c75ee41: * distributed with this work for additional information
1:c75ee41: * regarding copyright ownership.  The ASF licenses this file
1:c75ee41: * to you under the Apache License, Version 2.0 (the
1:c75ee41: * "License"); you may not use this file except in compliance
1:c75ee41: * with the License.  You may obtain a copy of the License at
1:c75ee41: *
1:c75ee41: *    http://www.apache.org/licenses/LICENSE-2.0
1:c75ee41: *
1:c75ee41: * Unless required by applicable law or agreed to in writing,
1:c75ee41: * software distributed under the License is distributed on an
1:c75ee41: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c75ee41: * KIND, either express or implied.  See the License for the
1:c75ee41: * specific language governing permissions and limitations
1:c75ee41: * under the License.
1:c75ee41: */
1:c75ee41: package org.apache.cassandra.utils.concurrent;
1:c75ee41: 
1:c75ee41: import org.junit.Test;
1:c75ee41: 
1:c75ee41: import junit.framework.Assert;
1:c75ee41: 
1:f3668e1: import java.io.File;
1:15092e6: import java.lang.ref.WeakReference;
1:f3668e1: import java.util.HashMap;
1:15092e6: import java.util.HashSet;
1:f3668e1: import java.util.LinkedList;
1:f3668e1: import java.util.List;
1:f3668e1: import java.util.Map;
1:f3668e1: import java.util.Queue;
1:f3668e1: import java.util.concurrent.BlockingQueue;
1:f3668e1: import java.util.concurrent.ConcurrentHashMap;
1:f3668e1: import java.util.concurrent.ConcurrentLinkedQueue;
1:f3668e1: import java.util.concurrent.LinkedBlockingQueue;
1:f3668e1: import java.util.concurrent.atomic.AtomicReference;
1:f3668e1: 
1:f3668e1: import org.apache.cassandra.utils.ObjectSizes;
1:f3668e1: import org.apache.cassandra.utils.Pair;
1:f3668e1: import org.apache.cassandra.utils.concurrent.Ref.Visitor;
1:f3668e1: 
1:f3668e1: @SuppressWarnings({"unused", "unchecked", "rawtypes"})
1:c75ee41: public class RefCountedTest
1:c75ee41: {
1:f3668e1:     static
1:f3668e1:     {
1:f3668e1:         if (Ref.STRONG_LEAK_DETECTOR != null)
1:f3668e1:             Ref.STRONG_LEAK_DETECTOR.submit(() -> { Thread.sleep(Integer.MAX_VALUE); return null; });
1:f3668e1:     }
1:7c5fc40: 
1:c75ee41:     private static final class Tidier implements RefCounted.Tidy
1:c75ee41:     {
1:c75ee41:         boolean tidied;
1:c75ee41: 
1:c75ee41:         public void tidy()
1:c75ee41:         {
1:c75ee41:             tidied = true;
1:c75ee41:         }
1:c75ee41: 
1:c75ee41:         public String name()
1:c75ee41:         {
1:c75ee41:             return "test tidy";
1:c75ee41:         }
1:c75ee41:     }
1:c75ee41: 
1:7c5fc40:     @Test
1:c75ee41:     public void testLeak() throws InterruptedException
1:c75ee41:     {
1:c75ee41:         Tidier tidier = new Tidier();
1:61384c5:         Ref<?> obj = new Ref(null, tidier);
1:c75ee41:         obj.tryRef();
1:61384c5:         obj.release();
1:c75ee41:         System.gc();
1:c75ee41:         System.gc();
1:c75ee41:         Thread.sleep(1000);
1:c75ee41:         Assert.assertTrue(tidier.tidied);
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     @Test
1:c75ee41:     public void testSeriousLeak() throws InterruptedException
1:c75ee41:     {
1:c75ee41:         Tidier tidier = new Tidier();
1:61384c5:         new Ref(null, tidier);
1:c75ee41:         System.gc();
1:c75ee41:         System.gc();
1:c75ee41:         System.gc();
1:c75ee41:         System.gc();
1:c75ee41:         Thread.sleep(1000);
1:c75ee41:         Assert.assertTrue(tidier.tidied);
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     @Test
1:c75ee41:     public void testDoubleRelease() throws InterruptedException
1:c75ee41:     {
1:c75ee41:         Tidier tidier = null;
1:c75ee41:         try
1:c75ee41:         {
1:c75ee41:             tidier = new Tidier();
1:61384c5:             Ref<?> obj = new Ref(null, tidier);
1:61384c5:             obj.release();
1:61384c5:             obj.release();
1:c75ee41:             Assert.assertTrue(false);
1:c75ee41:         }
1:c75ee41:         catch (Exception e)
1:c75ee41:         {
1:c75ee41:         }
1:c75ee41:     }
1:c75ee41: 
1:c75ee41:     @Test
1:7c5fc40:     public void testMemoryLeak()
1:7c5fc40:     {
1:7c5fc40:         Tidier tidier = new Tidier();
1:7c5fc40:         Ref<Object> ref = new Ref(null, tidier);
1:7c5fc40:         long initialSize = ObjectSizes.measureDeep(ref);
1:7c5fc40:         for (int i = 0 ; i < 1000 ; i++)
1:7c5fc40:             ref.ref().release();
1:7c5fc40:         long finalSize = ObjectSizes.measureDeep(ref);
1:7c5fc40:         if (finalSize > initialSize * 2)
1:7c5fc40:             throw new AssertionError();
1:7c5fc40:         ref.release();
1:7c5fc40:     }
1:f3668e1: 
1:f3668e1:     static final int entryCount = 1000000;
1:f3668e1:     static final int fudgeFactor = 20;
1:f3668e1: 
1:f3668e1:     @Test
1:f3668e1:     public void testLinkedList()
1:f3668e1:     {
1:f3668e1:         final List<Object> iterable = new LinkedList<Object>();
1:f3668e1:         Pair<Object, Object> p = Pair.create(iterable, iterable);
1:f3668e1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:f3668e1:             Object ref = iterable;
1:f3668e1:             @Override
1:f3668e1:             public void tidy() throws Exception
1:f3668e1:             {
1:f3668e1:             }
1:f3668e1: 
1:f3668e1:             @Override
1:f3668e1:             public String name()
1:f3668e1:             {
1:f3668e1:                 return "42";
1:f3668e1:             }
1:f3668e1:         };
1:f3668e1:         Ref<Object> ref = new Ref(new AtomicReference<List<Object>>(iterable), tidier);
1:f3668e1:         for (int i = 0; i < entryCount; i++)
1:f3668e1:         {
1:f3668e1:             iterable.add(p);
1:f3668e1:         }
1:f3668e1:         Visitor visitor = new Visitor();
1:f3668e1:         visitor.run();
1:f3668e1:         ref.close();
1:f3668e1: 
1:f3668e1:         System.out.println("LinkedList visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:f3668e1:         //Should visit a lot of list nodes, but no more since there is only one object stored in the list
1:f3668e1:         Assert.assertTrue(visitor.lastVisitedCount > entryCount && visitor.lastVisitedCount < entryCount + fudgeFactor);
1:f3668e1:         //Should have a lot of iterations to walk the list, but linear to the number of entries
1:f3668e1:         Assert.assertTrue(visitor.iterations > (entryCount * 3) && visitor.iterations < (entryCount * 3) + fudgeFactor);
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     /*
1:f3668e1:      * There was a traversal error terminating traversal for an object upon encountering a null
1:f3668e1:      * field. Test for the bug here using CLQ.
1:f3668e1:      */
1:f3668e1:     @Test
1:f3668e1:     public void testCLQBug()
1:f3668e1:     {
1:f3668e1:         Ref.concurrentIterables.remove(ConcurrentLinkedQueue.class);
1:f3668e1:         try
1:f3668e1:         {
1:f3668e1:             testConcurrentLinkedQueueImpl(true);
1:f3668e1:         }
1:f3668e1:         finally
1:f3668e1:         {
1:f3668e1:             Ref.concurrentIterables.add(ConcurrentLinkedQueue.class);
1:f3668e1:         }
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     private void testConcurrentLinkedQueueImpl(boolean bugTest)
1:f3668e1:     {
1:f3668e1:         final Queue<Object> iterable = new ConcurrentLinkedQueue<Object>();
1:f3668e1:         Pair<Object, Object> p = Pair.create(iterable, iterable);
1:f3668e1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:f3668e1:             Object ref = iterable;
1:f3668e1:             @Override
1:f3668e1:             public void tidy() throws Exception
1:f3668e1:             {
1:f3668e1:             }
1:f3668e1: 
1:f3668e1:             @Override
1:f3668e1:             public String name()
1:f3668e1:             {
1:f3668e1:                 return "42";
1:f3668e1:             }
1:f3668e1:         };
1:f3668e1:         Ref<Object> ref = new Ref(new AtomicReference<Queue<Object>>(iterable), tidier);
1:f3668e1:         for (int i = 0; i < entryCount; i++)
1:f3668e1:         {
1:f3668e1:             iterable.add(p);
1:f3668e1:         }
1:f3668e1:         Visitor visitor = new Visitor();
1:f3668e1:         visitor.run();
1:f3668e1:         ref.close();
1:f3668e1: 
1:f3668e1:         System.out.println("ConcurrentLinkedQueue visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations + " bug test " + bugTest);
1:f3668e1: 
1:f3668e1:         if (bugTest)
1:f3668e1:         {
1:f3668e1:             //Should have to visit a lot of queue nodes
1:f3668e1:             Assert.assertTrue(visitor.lastVisitedCount > entryCount && visitor.lastVisitedCount < entryCount + fudgeFactor);
1:f3668e1:             //Should have a lot of iterations to walk the queue, but linear to the number of entries
1:f3668e1:             Assert.assertTrue(visitor.iterations > (entryCount * 2) && visitor.iterations < (entryCount * 2) + fudgeFactor);
1:f3668e1:         }
1:f3668e1:         else
1:f3668e1:         {
1:f3668e1:             //There are almost no objects in this linked list once it's iterated as a collection so visited count
1:f3668e1:             //should be small
1:f3668e1:             Assert.assertTrue(visitor.lastVisitedCount < 10);
1:f3668e1:             //Should have a lot of iterations to walk the collection, but linear to the number of entries
1:f3668e1:             Assert.assertTrue(visitor.iterations > entryCount && visitor.iterations < entryCount + fudgeFactor);
1:f3668e1:         }
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     @Test
1:f3668e1:     public void testConcurrentLinkedQueue()
1:f3668e1:     {
1:f3668e1:         testConcurrentLinkedQueueImpl(false);
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     @Test
1:f3668e1:     public void testBlockingQueue()
1:f3668e1:     {
1:f3668e1:         final BlockingQueue<Object> iterable = new LinkedBlockingQueue<Object>();
1:f3668e1:         Pair<Object, Object> p = Pair.create(iterable, iterable);
1:f3668e1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:f3668e1:             Object ref = iterable;
1:f3668e1:             @Override
1:f3668e1:             public void tidy() throws Exception
1:f3668e1:             {
1:f3668e1:             }
1:f3668e1: 
1:f3668e1:             @Override
1:f3668e1:             public String name()
1:f3668e1:             {
1:f3668e1:                 return "42";
1:f3668e1:             }
1:f3668e1:         };
1:f3668e1:         Ref<Object> ref = new Ref(new AtomicReference<BlockingQueue<Object>>(iterable), tidier);
1:f3668e1:         for (int i = 0; i < entryCount; i++)
1:f3668e1:         {
1:f3668e1:             iterable.add(p);
1:f3668e1:         }
1:f3668e1:         Visitor visitor = new Visitor();
1:f3668e1:         visitor.run();
1:f3668e1:         ref.close();
1:f3668e1: 
1:f3668e1:         System.out.println("BlockingQueue visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:f3668e1:         //There are almost no objects in this queue once it's iterated as a collection so visited count
1:f3668e1:         //should be small
1:f3668e1:         Assert.assertTrue(visitor.lastVisitedCount < 10);
1:f3668e1:         //Should have a lot of iterations to walk the collection, but linear to the number of entries
1:f3668e1:         Assert.assertTrue(visitor.iterations > entryCount && visitor.iterations < entryCount + fudgeFactor);
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     @Test
1:f3668e1:     public void testConcurrentMap()
1:f3668e1:     {
1:f3668e1:         final Map<Object, Object> map = new ConcurrentHashMap<Object, Object>();
1:f3668e1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:f3668e1:             Object ref = map;
1:f3668e1:             @Override
1:f3668e1:             public void tidy() throws Exception
1:f3668e1:             {
1:f3668e1:             }
1:f3668e1: 
1:f3668e1:             @Override
1:f3668e1:             public String name()
1:f3668e1:             {
1:f3668e1:                 return "42";
1:f3668e1:             }
1:f3668e1:         };
1:f3668e1:         Ref<Object> ref = new Ref(new AtomicReference<Map<Object, Object>>(map), tidier);
1:f3668e1: 
1:f3668e1:         Object o = new Object();
1:f3668e1:         for (int i = 0; i < entryCount; i++)
1:f3668e1:         {
1:f3668e1:             map.put(new Object(), o);
1:f3668e1:         }
1:f3668e1:         Visitor visitor = new Visitor();
1:f3668e1:         visitor.run();
1:f3668e1:         ref.close();
1:f3668e1: 
1:f3668e1:         System.out.println("ConcurrentHashMap visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:f3668e1: 
1:f3668e1:         //Should visit roughly the same number of objects as entries because the value object is constant
1:f3668e1:         //Map.Entry objects shouldn't be counted since it is iterated as a collection
1:f3668e1:         Assert.assertTrue(visitor.lastVisitedCount > entryCount && visitor.lastVisitedCount < entryCount + fudgeFactor);
1:f3668e1:         //Should visit 2x the number of entries since we have to traverse the key and value separately
1:f3668e1:         Assert.assertTrue(visitor.iterations > entryCount * 2 && visitor.iterations < entryCount * 2 + fudgeFactor);
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     @Test
1:f3668e1:     public void testHashMap()
1:f3668e1:     {
1:f3668e1:         final Map<Object, Object> map = new HashMap<Object, Object>();
1:f3668e1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:f3668e1:             Object ref = map;
1:f3668e1:             @Override
1:f3668e1:             public void tidy() throws Exception
1:f3668e1:             {
1:f3668e1:             }
1:f3668e1: 
1:f3668e1:             @Override
1:f3668e1:             public String name()
1:f3668e1:             {
1:f3668e1:                 return "42";
1:f3668e1:             }
1:f3668e1:         };
1:f3668e1:         Ref<Object> ref = new Ref(new AtomicReference<Map<Object, Object>>(map), tidier);
1:f3668e1: 
1:f3668e1:         Object o = new Object();
1:f3668e1:         for (int i = 0; i < entryCount; i++)
1:f3668e1:         {
1:f3668e1:             map.put(new Object(), o);
1:f3668e1:         }
1:f3668e1:         Visitor visitor = new Visitor();
1:f3668e1:         visitor.run();
1:f3668e1:         ref.close();
1:f3668e1: 
1:f3668e1:         System.out.println("HashMap visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:f3668e1: 
1:f3668e1:         //Should visit 2x  the number of entries because of the wrapper Map.Entry objects
1:f3668e1:         Assert.assertTrue(visitor.lastVisitedCount > (entryCount * 2) && visitor.lastVisitedCount < (entryCount * 2) + fudgeFactor);
1:f3668e1:         //Should iterate 3x the number of entries since we have to traverse the key and value separately
1:f3668e1:         Assert.assertTrue(visitor.iterations > (entryCount * 3) && visitor.iterations < (entryCount * 3) + fudgeFactor);
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     @Test
1:f3668e1:     public void testArray() throws Exception
1:f3668e1:     {
1:f3668e1:         final Object objects[] = new Object[entryCount];
1:f3668e1:         for (int i = 0; i < entryCount; i += 2)
1:f3668e1:             objects[i] = new Object();
1:f3668e1: 
1:f3668e1:         File f = File.createTempFile("foo", "bar");
1:f3668e1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:f3668e1:             Object ref = objects;
1:f3668e1:             //Checking we don't get an infinite loop out of traversing file refs
1:f3668e1:             File fileRef = f;
1:f3668e1: 
1:f3668e1:             @Override
1:f3668e1:             public void tidy() throws Exception
1:f3668e1:             {
1:f3668e1:             }
1:f3668e1: 
1:f3668e1:             @Override
1:f3668e1:             public String name()
1:f3668e1:             {
1:f3668e1:                 return "42";
1:f3668e1:             }
1:f3668e1:         };
1:f3668e1:         Ref<Object> ref = new Ref(new AtomicReference<Object[]>(objects), tidier);
1:f3668e1: 
1:f3668e1:         Visitor visitor = new Visitor();
1:f3668e1:         visitor.run();
1:f3668e1:         ref.close();
1:f3668e1: 
1:f3668e1:         System.out.println("Array visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:f3668e1:         //Should iterate the elements in the array and get a unique object from every other one
1:f3668e1:         Assert.assertTrue(visitor.lastVisitedCount > (entryCount / 2) && visitor.lastVisitedCount < (entryCount / 2) + fudgeFactor);
1:f3668e1:         //Should iterate over the array touching roughly the same number of objects as entries
1:f3668e1:         Assert.assertTrue(visitor.iterations > (entryCount / 2) && visitor.iterations < (entryCount / 2) + fudgeFactor);
1:f3668e1:     }
1:15092e6: 
1:15092e6:     //Make sure a weak ref is ignored by the visitor looking for strong ref leaks
1:15092e6:     @Test
1:15092e6:     public void testWeakRef() throws Exception
1:15092e6:     {
1:15092e6:         AtomicReference dontRefMe = new AtomicReference();
1:15092e6: 
1:15092e6:         WeakReference<Object> weakRef = new WeakReference(dontRefMe);
1:15092e6: 
1:15092e6:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:15092e6:             WeakReference<Object> ref = weakRef;
1:15092e6: 
1:15092e6:             @Override
1:15092e6:             public void tidy() throws Exception
1:15092e6:             {
1:15092e6:             }
1:15092e6: 
1:15092e6:             @Override
1:15092e6:             public String name()
1:15092e6:             {
1:15092e6:                 return "42";
1:15092e6:             }
1:15092e6:         };
1:15092e6: 
1:15092e6:         Ref<Object> ref = new Ref(dontRefMe, tidier);
1:15092e6:         dontRefMe.set(ref);
1:15092e6: 
1:15092e6:         Visitor visitor = new Visitor();
1:15092e6:         visitor.haveLoops = new HashSet<>();
1:15092e6:         visitor.run();
1:15092e6:         ref.close();
1:15092e6: 
1:15092e6:         Assert.assertTrue(visitor.haveLoops.isEmpty());
1:15092e6:     }
1:c75ee41: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:15092e6
/////////////////////////////////////////////////////////////////////////
1: import java.lang.ref.WeakReference;
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1: 
1:     //Make sure a weak ref is ignored by the visitor looking for strong ref leaks
1:     @Test
1:     public void testWeakRef() throws Exception
1:     {
1:         AtomicReference dontRefMe = new AtomicReference();
1: 
1:         WeakReference<Object> weakRef = new WeakReference(dontRefMe);
1: 
1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:             WeakReference<Object> ref = weakRef;
1: 
1:             @Override
1:             public void tidy() throws Exception
1:             {
1:             }
1: 
1:             @Override
1:             public String name()
1:             {
1:                 return "42";
1:             }
1:         };
1: 
1:         Ref<Object> ref = new Ref(dontRefMe, tidier);
1:         dontRefMe.set(ref);
1: 
1:         Visitor visitor = new Visitor();
1:         visitor.haveLoops = new HashSet<>();
1:         visitor.run();
1:         ref.close();
1: 
1:         Assert.assertTrue(visitor.haveLoops.isEmpty());
1:     }
commit:f3668e1
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.HashMap;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Queue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.apache.cassandra.utils.ObjectSizes;
1: import org.apache.cassandra.utils.Pair;
1: import org.apache.cassandra.utils.concurrent.Ref.Visitor;
1: 
1: @SuppressWarnings({"unused", "unchecked", "rawtypes"})
1:     static
1:     {
1:         if (Ref.STRONG_LEAK_DETECTOR != null)
1:             Ref.STRONG_LEAK_DETECTOR.submit(() -> { Thread.sleep(Integer.MAX_VALUE); return null; });
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:     static final int entryCount = 1000000;
1:     static final int fudgeFactor = 20;
1: 
1:     @Test
1:     public void testLinkedList()
1:     {
1:         final List<Object> iterable = new LinkedList<Object>();
1:         Pair<Object, Object> p = Pair.create(iterable, iterable);
1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:             Object ref = iterable;
1:             @Override
1:             public void tidy() throws Exception
1:             {
1:             }
1: 
1:             @Override
1:             public String name()
1:             {
1:                 return "42";
1:             }
1:         };
1:         Ref<Object> ref = new Ref(new AtomicReference<List<Object>>(iterable), tidier);
1:         for (int i = 0; i < entryCount; i++)
1:         {
1:             iterable.add(p);
1:         }
1:         Visitor visitor = new Visitor();
1:         visitor.run();
1:         ref.close();
1: 
1:         System.out.println("LinkedList visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:         //Should visit a lot of list nodes, but no more since there is only one object stored in the list
1:         Assert.assertTrue(visitor.lastVisitedCount > entryCount && visitor.lastVisitedCount < entryCount + fudgeFactor);
1:         //Should have a lot of iterations to walk the list, but linear to the number of entries
1:         Assert.assertTrue(visitor.iterations > (entryCount * 3) && visitor.iterations < (entryCount * 3) + fudgeFactor);
1:     }
1: 
1:     /*
1:      * There was a traversal error terminating traversal for an object upon encountering a null
1:      * field. Test for the bug here using CLQ.
1:      */
1:     @Test
1:     public void testCLQBug()
1:     {
1:         Ref.concurrentIterables.remove(ConcurrentLinkedQueue.class);
1:         try
1:         {
1:             testConcurrentLinkedQueueImpl(true);
1:         }
1:         finally
1:         {
1:             Ref.concurrentIterables.add(ConcurrentLinkedQueue.class);
1:         }
1:     }
1: 
1:     private void testConcurrentLinkedQueueImpl(boolean bugTest)
1:     {
1:         final Queue<Object> iterable = new ConcurrentLinkedQueue<Object>();
1:         Pair<Object, Object> p = Pair.create(iterable, iterable);
1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:             Object ref = iterable;
1:             @Override
1:             public void tidy() throws Exception
1:             {
1:             }
1: 
1:             @Override
1:             public String name()
1:             {
1:                 return "42";
1:             }
1:         };
1:         Ref<Object> ref = new Ref(new AtomicReference<Queue<Object>>(iterable), tidier);
1:         for (int i = 0; i < entryCount; i++)
1:         {
1:             iterable.add(p);
1:         }
1:         Visitor visitor = new Visitor();
1:         visitor.run();
1:         ref.close();
1: 
1:         System.out.println("ConcurrentLinkedQueue visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations + " bug test " + bugTest);
1: 
1:         if (bugTest)
1:         {
1:             //Should have to visit a lot of queue nodes
1:             Assert.assertTrue(visitor.lastVisitedCount > entryCount && visitor.lastVisitedCount < entryCount + fudgeFactor);
1:             //Should have a lot of iterations to walk the queue, but linear to the number of entries
1:             Assert.assertTrue(visitor.iterations > (entryCount * 2) && visitor.iterations < (entryCount * 2) + fudgeFactor);
1:         }
1:         else
1:         {
1:             //There are almost no objects in this linked list once it's iterated as a collection so visited count
1:             //should be small
1:             Assert.assertTrue(visitor.lastVisitedCount < 10);
1:             //Should have a lot of iterations to walk the collection, but linear to the number of entries
1:             Assert.assertTrue(visitor.iterations > entryCount && visitor.iterations < entryCount + fudgeFactor);
1:         }
1:     }
1: 
1:     @Test
1:     public void testConcurrentLinkedQueue()
1:     {
1:         testConcurrentLinkedQueueImpl(false);
1:     }
1: 
1:     @Test
1:     public void testBlockingQueue()
1:     {
1:         final BlockingQueue<Object> iterable = new LinkedBlockingQueue<Object>();
1:         Pair<Object, Object> p = Pair.create(iterable, iterable);
1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:             Object ref = iterable;
1:             @Override
1:             public void tidy() throws Exception
1:             {
1:             }
1: 
1:             @Override
1:             public String name()
1:             {
1:                 return "42";
1:             }
1:         };
1:         Ref<Object> ref = new Ref(new AtomicReference<BlockingQueue<Object>>(iterable), tidier);
1:         for (int i = 0; i < entryCount; i++)
1:         {
1:             iterable.add(p);
1:         }
1:         Visitor visitor = new Visitor();
1:         visitor.run();
1:         ref.close();
1: 
1:         System.out.println("BlockingQueue visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:         //There are almost no objects in this queue once it's iterated as a collection so visited count
1:         //should be small
1:         Assert.assertTrue(visitor.lastVisitedCount < 10);
1:         //Should have a lot of iterations to walk the collection, but linear to the number of entries
1:         Assert.assertTrue(visitor.iterations > entryCount && visitor.iterations < entryCount + fudgeFactor);
1:     }
1: 
1:     @Test
1:     public void testConcurrentMap()
1:     {
1:         final Map<Object, Object> map = new ConcurrentHashMap<Object, Object>();
1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:             Object ref = map;
1:             @Override
1:             public void tidy() throws Exception
1:             {
1:             }
1: 
1:             @Override
1:             public String name()
1:             {
1:                 return "42";
1:             }
1:         };
1:         Ref<Object> ref = new Ref(new AtomicReference<Map<Object, Object>>(map), tidier);
1: 
1:         Object o = new Object();
1:         for (int i = 0; i < entryCount; i++)
1:         {
1:             map.put(new Object(), o);
1:         }
1:         Visitor visitor = new Visitor();
1:         visitor.run();
1:         ref.close();
1: 
1:         System.out.println("ConcurrentHashMap visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1: 
1:         //Should visit roughly the same number of objects as entries because the value object is constant
1:         //Map.Entry objects shouldn't be counted since it is iterated as a collection
1:         Assert.assertTrue(visitor.lastVisitedCount > entryCount && visitor.lastVisitedCount < entryCount + fudgeFactor);
1:         //Should visit 2x the number of entries since we have to traverse the key and value separately
1:         Assert.assertTrue(visitor.iterations > entryCount * 2 && visitor.iterations < entryCount * 2 + fudgeFactor);
1:     }
1: 
1:     @Test
1:     public void testHashMap()
1:     {
1:         final Map<Object, Object> map = new HashMap<Object, Object>();
1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:             Object ref = map;
1:             @Override
1:             public void tidy() throws Exception
1:             {
1:             }
1: 
1:             @Override
1:             public String name()
1:             {
1:                 return "42";
1:             }
1:         };
1:         Ref<Object> ref = new Ref(new AtomicReference<Map<Object, Object>>(map), tidier);
1: 
1:         Object o = new Object();
1:         for (int i = 0; i < entryCount; i++)
1:         {
1:             map.put(new Object(), o);
1:         }
1:         Visitor visitor = new Visitor();
1:         visitor.run();
1:         ref.close();
1: 
1:         System.out.println("HashMap visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1: 
1:         //Should visit 2x  the number of entries because of the wrapper Map.Entry objects
1:         Assert.assertTrue(visitor.lastVisitedCount > (entryCount * 2) && visitor.lastVisitedCount < (entryCount * 2) + fudgeFactor);
1:         //Should iterate 3x the number of entries since we have to traverse the key and value separately
1:         Assert.assertTrue(visitor.iterations > (entryCount * 3) && visitor.iterations < (entryCount * 3) + fudgeFactor);
1:     }
1: 
1:     @Test
1:     public void testArray() throws Exception
1:     {
1:         final Object objects[] = new Object[entryCount];
1:         for (int i = 0; i < entryCount; i += 2)
1:             objects[i] = new Object();
1: 
1:         File f = File.createTempFile("foo", "bar");
1:         RefCounted.Tidy tidier = new RefCounted.Tidy() {
1:             Object ref = objects;
1:             //Checking we don't get an infinite loop out of traversing file refs
1:             File fileRef = f;
1: 
1:             @Override
1:             public void tidy() throws Exception
1:             {
1:             }
1: 
1:             @Override
1:             public String name()
1:             {
1:                 return "42";
1:             }
1:         };
1:         Ref<Object> ref = new Ref(new AtomicReference<Object[]>(objects), tidier);
1: 
1:         Visitor visitor = new Visitor();
1:         visitor.run();
1:         ref.close();
1: 
1:         System.out.println("Array visited " + visitor.lastVisitedCount + " iterations " + visitor.iterations);
1:         //Should iterate the elements in the array and get a unique object from every other one
1:         Assert.assertTrue(visitor.lastVisitedCount > (entryCount / 2) && visitor.lastVisitedCount < (entryCount / 2) + fudgeFactor);
1:         //Should iterate over the array touching roughly the same number of objects as entries
1:         Assert.assertTrue(visitor.iterations > (entryCount / 2) && visitor.iterations < (entryCount / 2) + fudgeFactor);
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:7c5fc40
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ObjectSizes;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testMemoryLeak()
1:     {
1:         Tidier tidier = new Tidier();
1:         Ref<Object> ref = new Ref(null, tidier);
1:         long initialSize = ObjectSizes.measureDeep(ref);
1:         for (int i = 0 ; i < 1000 ; i++)
1:             ref.ref().release();
1:         long finalSize = ObjectSizes.measureDeep(ref);
1:         if (finalSize > initialSize * 2)
1:             throw new AssertionError();
1:         ref.release();
1:     }
commit:61384c5
/////////////////////////////////////////////////////////////////////////
1:         Ref<?> obj = new Ref(null, tidier);
1:         obj.release();
/////////////////////////////////////////////////////////////////////////
1:         new Ref(null, tidier);
/////////////////////////////////////////////////////////////////////////
1:             Ref<?> obj = new Ref(null, tidier);
1:             obj.release();
1:             obj.release();
commit:c75ee41
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: 
1: public class RefCountedTest
1: {
1: 
1:     private static final class Tidier implements RefCounted.Tidy
1:     {
1:         boolean tidied;
1: 
1:         public void tidy()
1:         {
1:             tidied = true;
1:         }
1: 
1:         public String name()
1:         {
1:             return "test tidy";
1:         }
1:     }
1: 
1:     @Test
1:     public void testLeak() throws InterruptedException
1:     {
1:         Tidier tidier = new Tidier();
0:         RefCounted obj = RefCounted.Impl.get(tidier);
1:         obj.tryRef();
0:         obj.sharedRef().release();
1:         System.gc();
1:         System.gc();
1:         Thread.sleep(1000);
1:         Assert.assertTrue(tidier.tidied);
1:     }
1: 
1:     @Test
1:     public void testSeriousLeak() throws InterruptedException
1:     {
1:         Tidier tidier = new Tidier();
0:         RefCounted.Impl.get(tidier);
1:         System.gc();
1:         System.gc();
1:         System.gc();
1:         System.gc();
1:         Thread.sleep(1000);
1:         Assert.assertTrue(tidier.tidied);
1:     }
1: 
1:     @Test
1:     public void testDoubleRelease() throws InterruptedException
1:     {
1:         Tidier tidier = null;
1:         try
1:         {
1:             tidier = new Tidier();
0:             RefCounted obj = RefCounted.Impl.get(tidier);
0:             obj.sharedRef().release();
0:             obj.sharedRef().release();
1:             Assert.assertTrue(false);
1:         }
1:         catch (Exception e)
1:         {
1:         }
1:     }
1: }
============================================================================