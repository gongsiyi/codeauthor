1:746c458: /*
1:746c458: * Licensed to the Apache Software Foundation (ASF) under one
1:746c458: * or more contributor license agreements.  See the NOTICE file
1:746c458: * distributed with this work for additional information
1:746c458: * regarding copyright ownership.  The ASF licenses this file
1:746c458: * to you under the Apache License, Version 2.0 (the
1:746c458: * "License"); you may not use this file except in compliance
1:746c458: * with the License.  You may obtain a copy of the License at
1:746c458: *
1:746c458: *    http://www.apache.org/licenses/LICENSE-2.0
1:746c458: *
1:746c458: * Unless required by applicable law or agreed to in writing,
1:746c458: * software distributed under the License is distributed on an
1:746c458: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:746c458: * KIND, either express or implied.  See the License for the
1:746c458: * specific language governing permissions and limitations
1:746c458: * under the License.
1:746c458: */
1:746c458: package org.apache.cassandra.io.util;
1:746c458: 
1:746c458: import net.nicoulaj.compilecommand.annotations.Inline;
1:746c458: import org.apache.cassandra.utils.concurrent.Ref;
1:746c458: import org.apache.cassandra.utils.concurrent.RefCounted;
1:746c458: import org.apache.cassandra.utils.concurrent.SharedCloseable;
1:0d2ec11: import org.apache.cassandra.utils.memory.MemoryUtil;
1:746c458: 
1:746c458: public class SafeMemory extends Memory implements SharedCloseable
1:746c458: {
1:746c458:     private final Ref<?> ref;
1:746c458:     public SafeMemory(long size)
1:746c458:     {
1:746c458:         super(size);
1:746c458:         ref = new Ref<>(null, new MemoryTidy(peer, size));
1:746c458:     }
1:746c458: 
1:746c458:     private SafeMemory(SafeMemory copyOf)
1:746c458:     {
1:746c458:         super(copyOf);
1:746c458:         ref = copyOf.ref.ref();
1:746c458:         /** see {@link Memory#Memory(long)} re: null pointers*/
1:746c458:         if (peer == 0 && size != 0)
1:746c458:         {
1:746c458:             ref.ensureReleased();
1:746c458:             throw new IllegalStateException("Cannot create a sharedCopy of a SafeMemory object that has already been closed");
1:746c458:         }
1:746c458:     }
1:746c458: 
1:746c458:     public SafeMemory sharedCopy()
1:746c458:     {
1:746c458:         return new SafeMemory(this);
1:746c458:     }
1:746c458: 
1:746c458:     public void free()
1:746c458:     {
1:746c458:         ref.release();
1:c397165:         peer = 0;
1:746c458:     }
1:746c458: 
1:746c458:     public void close()
1:746c458:     {
1:746c458:         ref.ensureReleased();
1:c397165:         peer = 0;
1:746c458:     }
1:746c458: 
1:8704006:     public Throwable close(Throwable accumulate)
1:8704006:     {
1:8704006:         return ref.ensureReleased(accumulate);
1:8704006:     }
1:8704006: 
1:746c458:     public SafeMemory copy(long newSize)
1:746c458:     {
1:746c458:         SafeMemory copy = new SafeMemory(newSize);
1:746c458:         copy.put(0, this, 0, Math.min(size(), newSize));
1:746c458:         return copy;
1:746c458:     }
1:746c458: 
1:746c458:     private static final class MemoryTidy implements RefCounted.Tidy
1:746c458:     {
1:746c458:         final long peer;
1:746c458:         final long size;
1:746c458:         private MemoryTidy(long peer, long size)
1:746c458:         {
1:746c458:             this.peer = peer;
1:746c458:             this.size = size;
1:746c458:         }
1:746c458: 
1:fed476f:         public void tidy()
1:746c458:         {
1:746c458:             /** see {@link Memory#Memory(long)} re: null pointers*/
1:746c458:             if (peer != 0)
1:0d2ec11:                 MemoryUtil.free(peer);
1:746c458:         }
1:746c458: 
1:746c458:         public String name()
1:746c458:         {
1:746c458:             return Memory.toString(peer, size);
1:746c458:         }
1:746c458:     }
1:746c458: 
1:746c458:     @Inline
1:6065f2c:     protected void checkBounds(long start, long end)
1:746c458:     {
1:746c458:         assert peer != 0 || size == 0 : ref.printDebugInfo();
1:6065f2c:         super.checkBounds(start, end);
1:746c458:     }
1:a7f4134: 
1:a7f4134:     public void addTo(Ref.IdentityCollection identities)
1:a7f4134:     {
1:a7f4134:         identities.add(ref);
1:a7f4134:     }
1:746c458: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:fed476f
/////////////////////////////////////////////////////////////////////////
1:         public void tidy()
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:a7f4134
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void addTo(Ref.IdentityCollection identities)
1:     {
1:         identities.add(ref);
1:     }
commit:8704006
/////////////////////////////////////////////////////////////////////////
1:     public Throwable close(Throwable accumulate)
1:     {
1:         return ref.ensureReleased(accumulate);
1:     }
1: 
commit:966ff21
commit:c397165
/////////////////////////////////////////////////////////////////////////
1:         peer = 0;
1:         peer = 0;
commit:6065f2c
/////////////////////////////////////////////////////////////////////////
1:     protected void checkBounds(long start, long end)
1:         super.checkBounds(start, end);
commit:746c458
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.io.util;
1: 
1: import net.nicoulaj.compilecommand.annotations.Inline;
1: import org.apache.cassandra.utils.concurrent.Ref;
1: import org.apache.cassandra.utils.concurrent.RefCounted;
1: import org.apache.cassandra.utils.concurrent.SharedCloseable;
1: 
1: public class SafeMemory extends Memory implements SharedCloseable
1: {
1:     private final Ref<?> ref;
1:     public SafeMemory(long size)
1:     {
1:         super(size);
1:         ref = new Ref<>(null, new MemoryTidy(peer, size));
1:     }
1: 
1:     private SafeMemory(SafeMemory copyOf)
1:     {
1:         super(copyOf);
1:         ref = copyOf.ref.ref();
1:         /** see {@link Memory#Memory(long)} re: null pointers*/
1:         if (peer == 0 && size != 0)
1:         {
1:             ref.ensureReleased();
1:             throw new IllegalStateException("Cannot create a sharedCopy of a SafeMemory object that has already been closed");
1:         }
1:     }
1: 
1:     public SafeMemory sharedCopy()
1:     {
1:         return new SafeMemory(this);
1:     }
1: 
1:     public void free()
1:     {
1:         ref.release();
1:     }
1: 
1:     public void close()
1:     {
1:         ref.ensureReleased();
1:     }
1: 
1:     public SafeMemory copy(long newSize)
1:     {
1:         SafeMemory copy = new SafeMemory(newSize);
1:         copy.put(0, this, 0, Math.min(size(), newSize));
1:         return copy;
1:     }
1: 
1:     private static final class MemoryTidy implements RefCounted.Tidy
1:     {
1:         final long peer;
1:         final long size;
1:         private MemoryTidy(long peer, long size)
1:         {
1:             this.peer = peer;
1:             this.size = size;
1:         }
1: 
0:         public void tidy() throws Exception
1:         {
1:             /** see {@link Memory#Memory(long)} re: null pointers*/
1:             if (peer != 0)
0:                 Memory.allocator.free(peer);
1:         }
1: 
1:         public String name()
1:         {
1:             return Memory.toString(peer, size);
1:         }
1:     }
1: 
1:     @Inline
0:     protected void checkPosition(long offset)
1:     {
1:         assert peer != 0 || size == 0 : ref.printDebugInfo();
0:         super.checkPosition(offset);
1:     }
1: }
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0d2ec11
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.memory.MemoryUtil;
/////////////////////////////////////////////////////////////////////////
1:                 MemoryUtil.free(peer);
============================================================================