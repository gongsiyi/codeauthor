1:e31e216: /*
1:e31e216:  * Licensed to the Apache Software Foundation (ASF) under one
1:e31e216:  * or more contributor license agreements.  See the NOTICE file
1:e31e216:  * distributed with this work for additional information
1:e31e216:  * regarding copyright ownership.  The ASF licenses this file
1:e31e216:  * to you under the Apache License, Version 2.0 (the
1:e31e216:  * "License"); you may not use this file except in compliance
1:e31e216:  * with the License.  You may obtain a copy of the License at
1:e31e216:  *
1:e31e216:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e31e216:  *
1:e31e216:  * Unless required by applicable law or agreed to in writing, software
1:e31e216:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e31e216:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e31e216:  * See the License for the specific language governing permissions and
1:e31e216:  * limitations under the License.
1:e31e216:  */
1:e31e216: package org.apache.cassandra.db.commitlog;
1:e31e216: 
1:e31e216: import java.io.File;
1:e31e216: import java.io.IOException;
1:e31e216: import java.util.ArrayList;
1:e31e216: import java.util.List;
1:e31e216: 
1:e31e216: import org.junit.Assert;
1:e31e216: import org.junit.Before;
1:e31e216: import org.junit.BeforeClass;
1:e31e216: import org.junit.Test;
1:e31e216: 
1:e31e216: import org.apache.cassandra.config.CFMetaData;
1:e31e216: import org.apache.cassandra.config.ColumnDefinition;
1:e31e216: import org.apache.cassandra.config.Config;
1:e31e216: import org.apache.cassandra.config.DatabaseDescriptor;
1:e31e216: import org.apache.cassandra.cql3.CQLTester;
1:e31e216: import org.apache.cassandra.cql3.ColumnIdentifier;
1:e31e216: import org.apache.cassandra.db.Keyspace;
1:e31e216: import org.apache.cassandra.db.Mutation;
1:e31e216: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:e31e216: import org.apache.cassandra.db.rows.Row;
1:e31e216: import org.apache.cassandra.utils.JVMStabilityInspector;
1:e31e216: import org.apache.cassandra.utils.KillerForTests;
1:e31e216: 
1:e31e216: public class CommitLogReaderTest extends CQLTester
1:e31e216: {
1:e31e216:     @BeforeClass
1:e31e216:     public static void beforeClass()
1:e31e216:     {
1:e31e216:         DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1:e31e216:         JVMStabilityInspector.replaceKiller(new KillerForTests(false));
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Before
1:e31e216:     public void before() throws IOException
1:e31e216:     {
1:e31e216:         CommitLog.instance.resetUnsafe(true);
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Test
1:e31e216:     public void testReadAll() throws Throwable
1:e31e216:     {
1:e31e216:         int samples = 1000;
1:e31e216:         populateData(samples);
1:e31e216:         ArrayList<File> toCheck = getCommitLogs();
1:e31e216: 
1:e31e216:         CommitLogReader reader = new CommitLogReader();
1:e31e216: 
1:e31e216:         TestCLRHandler testHandler = new TestCLRHandler(currentTableMetadata());
1:e31e216:         for (File f : toCheck)
1:e31e216:             reader.readCommitLogSegment(testHandler, f, CommitLogReader.ALL_MUTATIONS, false);
1:e31e216: 
1:e31e216:         Assert.assertEquals("Expected 1000 seen mutations, got: " + testHandler.seenMutationCount(),
1:e31e216:                             1000, testHandler.seenMutationCount());
1:e31e216: 
1:e31e216:         confirmReadOrder(testHandler, 0);
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Test
1:e31e216:     public void testReadCount() throws Throwable
1:e31e216:     {
1:e31e216:         int samples = 50;
1:e31e216:         int readCount = 10;
1:e31e216:         populateData(samples);
1:e31e216:         ArrayList<File> toCheck = getCommitLogs();
1:e31e216: 
1:e31e216:         CommitLogReader reader = new CommitLogReader();
1:e31e216:         TestCLRHandler testHandler = new TestCLRHandler();
1:e31e216: 
1:e31e216:         for (File f : toCheck)
1:e31e216:             reader.readCommitLogSegment(testHandler, f, readCount - testHandler.seenMutationCount(), false);
1:e31e216: 
1:e31e216:         Assert.assertEquals("Expected " + readCount + " seen mutations, got: " + testHandler.seenMutations.size(),
1:e31e216:                             readCount, testHandler.seenMutationCount());
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Test
1:e31e216:     public void testReadFromMidpoint() throws Throwable
1:e31e216:     {
1:e31e216:         int samples = 1000;
1:e31e216:         int readCount = 500;
1:e31e216:         CommitLogPosition midpoint = populateData(samples);
1:e31e216:         ArrayList<File> toCheck = getCommitLogs();
1:e31e216: 
1:e31e216:         CommitLogReader reader = new CommitLogReader();
1:e31e216:         TestCLRHandler testHandler = new TestCLRHandler();
1:e31e216: 
1:e31e216:         // Will skip on incorrect segments due to id mismatch on midpoint
1:e31e216:         for (File f : toCheck)
1:e31e216:             reader.readCommitLogSegment(testHandler, f, midpoint, readCount, false);
1:e31e216: 
1:e31e216:         // Confirm correct count on replay
1:e31e216:         Assert.assertEquals("Expected " + readCount + " seen mutations, got: " + testHandler.seenMutations.size(),
1:e31e216:                             readCount, testHandler.seenMutationCount());
1:e31e216: 
1:e31e216:         confirmReadOrder(testHandler, samples / 2);
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Test
1:e31e216:     public void testReadFromMidpointTooMany() throws Throwable
1:e31e216:     {
1:e31e216:         int samples = 1000;
1:e31e216:         int readCount = 5000;
1:e31e216:         CommitLogPosition midpoint = populateData(samples);
1:e31e216:         ArrayList<File> toCheck = getCommitLogs();
1:e31e216: 
1:e31e216:         CommitLogReader reader = new CommitLogReader();
1:e31e216:         TestCLRHandler testHandler = new TestCLRHandler(currentTableMetadata());
1:e31e216: 
1:e31e216:         // Reading from mid to overflow by 4.5k
1:e31e216:         // Will skip on incorrect segments due to id mismatch on midpoint
1:e31e216:         for (File f : toCheck)
1:e31e216:             reader.readCommitLogSegment(testHandler, f, midpoint, readCount, false);
1:e31e216: 
1:e31e216:         Assert.assertEquals("Expected " + samples / 2 + " seen mutations, got: " + testHandler.seenMutations.size(),
1:e31e216:                             samples / 2, testHandler.seenMutationCount());
1:e31e216: 
1:e31e216:         confirmReadOrder(testHandler, samples / 2);
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Test
1:e31e216:     public void testReadCountFromMidpoint() throws Throwable
1:e31e216:     {
1:e31e216:         int samples = 1000;
1:e31e216:         int readCount = 10;
1:e31e216:         CommitLogPosition midpoint = populateData(samples);
1:e31e216:         ArrayList<File> toCheck = getCommitLogs();
1:e31e216: 
1:e31e216:         CommitLogReader reader = new CommitLogReader();
1:e31e216:         TestCLRHandler testHandler = new TestCLRHandler();
1:e31e216: 
1:e31e216:         for (File f: toCheck)
1:e31e216:             reader.readCommitLogSegment(testHandler, f, midpoint, readCount, false);
1:e31e216: 
1:e31e216:         // Confirm correct count on replay
1:e31e216:         Assert.assertEquals("Expected " + readCount + " seen mutations, got: " + testHandler.seenMutations.size(),
1:e31e216:             readCount, testHandler.seenMutationCount());
1:e31e216: 
1:e31e216:         confirmReadOrder(testHandler, samples / 2);
1:e31e216:     }
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * Since we have both cfm and non mixed into the CL, we ignore updates that aren't for the cfm the test handler
1:e31e216:      * is configured to check.
1:e31e216:      * @param handler
1:e31e216:      * @param offset integer offset of count we expect to see in record
1:e31e216:      */
1:e31e216:     private void confirmReadOrder(TestCLRHandler handler, int offset)
1:e31e216:     {
1:e31e216:         ColumnDefinition cd = currentTableMetadata().getColumnDefinition(new ColumnIdentifier("data", false));
1:e31e216:         int i = 0;
1:e31e216:         int j = 0;
1:e31e216:         while (i + j < handler.seenMutationCount())
1:e31e216:         {
1:e31e216:             PartitionUpdate pu = handler.seenMutations.get(i + j).get(currentTableMetadata());
1:e31e216:             if (pu == null)
1:e31e216:             {
1:e31e216:                 j++;
1:e31e216:                 continue;
1:e31e216:             }
1:e31e216: 
1:e31e216:             for (Row r : pu)
1:e31e216:             {
1:e31e216:                 String expected = Integer.toString(i + offset);
1:e31e216:                 String seen = new String(r.getCell(cd).value().array());
1:e31e216:                 if (!expected.equals(seen))
1:e31e216:                     Assert.fail("Mismatch at index: " + i + ". Offset: " + offset + " Expected: " + expected + " Seen: " + seen);
1:e31e216:             }
1:e31e216:             i++;
1:e31e216:         }
1:e31e216:     }
1:e31e216: 
1:e31e216:     static ArrayList<File> getCommitLogs()
1:e31e216:     {
1:e31e216:         File dir = new File(DatabaseDescriptor.getCommitLogLocation());
1:e31e216:         File[] files = dir.listFiles();
1:e31e216:         ArrayList<File> results = new ArrayList<>();
1:e31e216:         for (File f : files)
1:e31e216:         {
1:e31e216:             if (f.isDirectory())
1:e31e216:                 continue;
1:e31e216:             results.add(f);
1:e31e216:         }
1:e31e216:         Assert.assertTrue("Didn't find any commit log files.", 0 != results.size());
1:e31e216:         return results;
1:e31e216:     }
1:e31e216: 
1:e31e216:     static class TestCLRHandler implements CommitLogReadHandler
1:e31e216:     {
1:e31e216:         public List<Mutation> seenMutations = new ArrayList<Mutation>();
1:e31e216:         public boolean sawStopOnErrorCheck = false;
1:e31e216: 
1:e31e216:         private final CFMetaData cfm;
1:e31e216: 
1:e31e216:         // Accept all
1:e31e216:         public TestCLRHandler()
1:e31e216:         {
1:e31e216:             this.cfm = null;
1:e31e216:         }
1:e31e216: 
1:e31e216:         public TestCLRHandler(CFMetaData cfm)
1:e31e216:         {
1:e31e216:             this.cfm = cfm;
1:e31e216:         }
1:e31e216: 
1:e31e216:         public boolean shouldSkipSegmentOnError(CommitLogReadException exception) throws IOException
1:e31e216:         {
1:e31e216:             sawStopOnErrorCheck = true;
1:e31e216:             return false;
1:e31e216:         }
1:e31e216: 
1:e31e216:         public void handleUnrecoverableError(CommitLogReadException exception) throws IOException
1:e31e216:         {
1:e31e216:             sawStopOnErrorCheck = true;
1:e31e216:         }
1:e31e216: 
1:e31e216:         public void handleMutation(Mutation m, int size, int entryLocation, CommitLogDescriptor desc)
1:e31e216:         {
1:e31e216:             if ((cfm == null) || (cfm != null && m.get(cfm) != null)) {
1:e31e216:                 seenMutations.add(m);
1:e31e216:             }
1:e31e216:         }
1:e31e216: 
1:e31e216:         public int seenMutationCount() { return seenMutations.size(); }
1:e31e216:     }
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * Returns offset of active written data at halfway point of data
1:e31e216:      */
1:e31e216:     CommitLogPosition populateData(int entryCount) throws Throwable
1:e31e216:     {
1:e31e216:         Assert.assertEquals("entryCount must be an even number.", 0, entryCount % 2);
1:e31e216: 
1:e31e216:         createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
1:e31e216:         int midpoint = entryCount / 2;
1:e31e216: 
1:e31e216:         for (int i = 0; i < midpoint; i++) {
1:e31e216:             execute("INSERT INTO %s (idx, data) VALUES (?, ?)", i, Integer.toString(i));
1:e31e216:         }
1:e31e216: 
1:e31e216:         CommitLogPosition result = CommitLog.instance.getCurrentPosition();
1:e31e216: 
1:e31e216:         for (int i = midpoint; i < entryCount; i++)
1:e31e216:             execute("INSERT INTO %s (idx, data) VALUES (?, ?)", i, Integer.toString(i));
1:e31e216: 
1:e31e216:         Keyspace.open(keyspace()).getColumnFamilyStore(currentTable()).forceBlockingFlush();
1:e31e216:         return result;
1:e31e216:     }
1:e31e216: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: import org.apache.cassandra.utils.KillerForTests;
1: 
1: public class CommitLogReaderTest extends CQLTester
1: {
1:     @BeforeClass
1:     public static void beforeClass()
1:     {
1:         DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.ignore);
1:         JVMStabilityInspector.replaceKiller(new KillerForTests(false));
1:     }
1: 
1:     @Before
1:     public void before() throws IOException
1:     {
1:         CommitLog.instance.resetUnsafe(true);
1:     }
1: 
1:     @Test
1:     public void testReadAll() throws Throwable
1:     {
1:         int samples = 1000;
1:         populateData(samples);
1:         ArrayList<File> toCheck = getCommitLogs();
1: 
1:         CommitLogReader reader = new CommitLogReader();
1: 
1:         TestCLRHandler testHandler = new TestCLRHandler(currentTableMetadata());
1:         for (File f : toCheck)
1:             reader.readCommitLogSegment(testHandler, f, CommitLogReader.ALL_MUTATIONS, false);
1: 
1:         Assert.assertEquals("Expected 1000 seen mutations, got: " + testHandler.seenMutationCount(),
1:                             1000, testHandler.seenMutationCount());
1: 
1:         confirmReadOrder(testHandler, 0);
1:     }
1: 
1:     @Test
1:     public void testReadCount() throws Throwable
1:     {
1:         int samples = 50;
1:         int readCount = 10;
1:         populateData(samples);
1:         ArrayList<File> toCheck = getCommitLogs();
1: 
1:         CommitLogReader reader = new CommitLogReader();
1:         TestCLRHandler testHandler = new TestCLRHandler();
1: 
1:         for (File f : toCheck)
1:             reader.readCommitLogSegment(testHandler, f, readCount - testHandler.seenMutationCount(), false);
1: 
1:         Assert.assertEquals("Expected " + readCount + " seen mutations, got: " + testHandler.seenMutations.size(),
1:                             readCount, testHandler.seenMutationCount());
1:     }
1: 
1:     @Test
1:     public void testReadFromMidpoint() throws Throwable
1:     {
1:         int samples = 1000;
1:         int readCount = 500;
1:         CommitLogPosition midpoint = populateData(samples);
1:         ArrayList<File> toCheck = getCommitLogs();
1: 
1:         CommitLogReader reader = new CommitLogReader();
1:         TestCLRHandler testHandler = new TestCLRHandler();
1: 
1:         // Will skip on incorrect segments due to id mismatch on midpoint
1:         for (File f : toCheck)
1:             reader.readCommitLogSegment(testHandler, f, midpoint, readCount, false);
1: 
1:         // Confirm correct count on replay
1:         Assert.assertEquals("Expected " + readCount + " seen mutations, got: " + testHandler.seenMutations.size(),
1:                             readCount, testHandler.seenMutationCount());
1: 
1:         confirmReadOrder(testHandler, samples / 2);
1:     }
1: 
1:     @Test
1:     public void testReadFromMidpointTooMany() throws Throwable
1:     {
1:         int samples = 1000;
1:         int readCount = 5000;
1:         CommitLogPosition midpoint = populateData(samples);
1:         ArrayList<File> toCheck = getCommitLogs();
1: 
1:         CommitLogReader reader = new CommitLogReader();
1:         TestCLRHandler testHandler = new TestCLRHandler(currentTableMetadata());
1: 
1:         // Reading from mid to overflow by 4.5k
1:         // Will skip on incorrect segments due to id mismatch on midpoint
1:         for (File f : toCheck)
1:             reader.readCommitLogSegment(testHandler, f, midpoint, readCount, false);
1: 
1:         Assert.assertEquals("Expected " + samples / 2 + " seen mutations, got: " + testHandler.seenMutations.size(),
1:                             samples / 2, testHandler.seenMutationCount());
1: 
1:         confirmReadOrder(testHandler, samples / 2);
1:     }
1: 
1:     @Test
1:     public void testReadCountFromMidpoint() throws Throwable
1:     {
1:         int samples = 1000;
1:         int readCount = 10;
1:         CommitLogPosition midpoint = populateData(samples);
1:         ArrayList<File> toCheck = getCommitLogs();
1: 
1:         CommitLogReader reader = new CommitLogReader();
1:         TestCLRHandler testHandler = new TestCLRHandler();
1: 
1:         for (File f: toCheck)
1:             reader.readCommitLogSegment(testHandler, f, midpoint, readCount, false);
1: 
1:         // Confirm correct count on replay
1:         Assert.assertEquals("Expected " + readCount + " seen mutations, got: " + testHandler.seenMutations.size(),
1:             readCount, testHandler.seenMutationCount());
1: 
1:         confirmReadOrder(testHandler, samples / 2);
1:     }
1: 
1:     /**
1:      * Since we have both cfm and non mixed into the CL, we ignore updates that aren't for the cfm the test handler
1:      * is configured to check.
1:      * @param handler
1:      * @param offset integer offset of count we expect to see in record
1:      */
1:     private void confirmReadOrder(TestCLRHandler handler, int offset)
1:     {
1:         ColumnDefinition cd = currentTableMetadata().getColumnDefinition(new ColumnIdentifier("data", false));
1:         int i = 0;
1:         int j = 0;
1:         while (i + j < handler.seenMutationCount())
1:         {
1:             PartitionUpdate pu = handler.seenMutations.get(i + j).get(currentTableMetadata());
1:             if (pu == null)
1:             {
1:                 j++;
1:                 continue;
1:             }
1: 
1:             for (Row r : pu)
1:             {
1:                 String expected = Integer.toString(i + offset);
1:                 String seen = new String(r.getCell(cd).value().array());
1:                 if (!expected.equals(seen))
1:                     Assert.fail("Mismatch at index: " + i + ". Offset: " + offset + " Expected: " + expected + " Seen: " + seen);
1:             }
1:             i++;
1:         }
1:     }
1: 
1:     static ArrayList<File> getCommitLogs()
1:     {
1:         File dir = new File(DatabaseDescriptor.getCommitLogLocation());
1:         File[] files = dir.listFiles();
1:         ArrayList<File> results = new ArrayList<>();
1:         for (File f : files)
1:         {
1:             if (f.isDirectory())
1:                 continue;
1:             results.add(f);
1:         }
1:         Assert.assertTrue("Didn't find any commit log files.", 0 != results.size());
1:         return results;
1:     }
1: 
1:     static class TestCLRHandler implements CommitLogReadHandler
1:     {
1:         public List<Mutation> seenMutations = new ArrayList<Mutation>();
1:         public boolean sawStopOnErrorCheck = false;
1: 
1:         private final CFMetaData cfm;
1: 
1:         // Accept all
1:         public TestCLRHandler()
1:         {
1:             this.cfm = null;
1:         }
1: 
1:         public TestCLRHandler(CFMetaData cfm)
1:         {
1:             this.cfm = cfm;
1:         }
1: 
1:         public boolean shouldSkipSegmentOnError(CommitLogReadException exception) throws IOException
1:         {
1:             sawStopOnErrorCheck = true;
1:             return false;
1:         }
1: 
1:         public void handleUnrecoverableError(CommitLogReadException exception) throws IOException
1:         {
1:             sawStopOnErrorCheck = true;
1:         }
1: 
1:         public void handleMutation(Mutation m, int size, int entryLocation, CommitLogDescriptor desc)
1:         {
1:             if ((cfm == null) || (cfm != null && m.get(cfm) != null)) {
1:                 seenMutations.add(m);
1:             }
1:         }
1: 
1:         public int seenMutationCount() { return seenMutations.size(); }
1:     }
1: 
1:     /**
1:      * Returns offset of active written data at halfway point of data
1:      */
1:     CommitLogPosition populateData(int entryCount) throws Throwable
1:     {
1:         Assert.assertEquals("entryCount must be an even number.", 0, entryCount % 2);
1: 
1:         createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
1:         int midpoint = entryCount / 2;
1: 
1:         for (int i = 0; i < midpoint; i++) {
1:             execute("INSERT INTO %s (idx, data) VALUES (?, ?)", i, Integer.toString(i));
1:         }
1: 
1:         CommitLogPosition result = CommitLog.instance.getCurrentPosition();
1: 
1:         for (int i = midpoint; i < entryCount; i++)
1:             execute("INSERT INTO %s (idx, data) VALUES (?, ?)", i, Integer.toString(i));
1: 
1:         Keyspace.open(keyspace()).getColumnFamilyStore(currentTable()).forceBlockingFlush();
1:         return result;
1:     }
1: }
============================================================================