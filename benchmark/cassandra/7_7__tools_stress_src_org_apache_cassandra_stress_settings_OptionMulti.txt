1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:3c95d47:  *
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:3c95d47:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c95d47:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:3c95d47:  *
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:6c579a0: import java.util.*;
1:2e1e98a: import java.util.regex.Matcher;
1:2e1e98a: import java.util.regex.Pattern;
1:2e1e98a: 
1:2e1e98a: /**
1:2e1e98a:  * For specifying multiple grouped sub-options in the form: group(arg1=,arg2,arg3) etc.
1:2e1e98a:  */
1:2e1e98a: abstract class OptionMulti extends Option
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     private static final Pattern ARGS = Pattern.compile("([^,]+)", Pattern.CASE_INSENSITIVE);
1:2e1e98a: 
1:2e1e98a:     private final class Delegate extends GroupedOptions
1:2e1e98a:     {
1:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:8e360f8:             if (collectAsMap == null)
1:8e360f8:                 return OptionMulti.this.options();
1:8e360f8: 
1:8e360f8:             List<Option> options = new ArrayList<>(OptionMulti.this.options());
1:8e360f8:             options.add(collectAsMap);
1:8e360f8:             return options;
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     protected abstract List<? extends Option> options();
1:2e1e98a: 
1:8e360f8:     public Map<String, String> extraOptions()
1:3e2c610:     {
1:8e360f8:         return collectAsMap == null ? new HashMap<String, String>() : collectAsMap.options;
1:8e360f8:     }
1:8e360f8: 
1:2e1e98a:     private final String name;
1:2e1e98a:     private final Pattern pattern;
1:2e1e98a:     private final String description;
1:2e1e98a:     private final Delegate delegate = new Delegate();
1:8e360f8:     private final CollectAsMap collectAsMap;
1:8e360f8: 
1:8e360f8:     public OptionMulti(String name, String description, boolean collectExtraOptionsInMap)
1:8e360f8:     {
1:2e1e98a:         this.name = name;
1:2e1e98a:         pattern = Pattern.compile(name + "\\((.*)\\)", Pattern.CASE_INSENSITIVE);
1:2e1e98a:         this.description = description;
1:8e360f8:         this.collectAsMap = collectExtraOptionsInMap ? new CollectAsMap() : null;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public boolean accept(String param)
1:2e1e98a:     {
1:2e1e98a:         Matcher m = pattern.matcher(param);
1:2e1e98a:         if (!m.matches())
1:2e1e98a:             return false;
1:2e1e98a:         m = ARGS.matcher(m.group(1));
1:2e1e98a:         int last = -1;
1:2e1e98a:         while (m.find())
1:2e1e98a:         {
1:2e1e98a:             if (m.start() != last + 1)
1:2e1e98a:                 throw new IllegalArgumentException("Invalid " + name + " specification: " + param);
1:2e1e98a:             last = m.end();
1:2e1e98a:             if (!delegate.accept(m.group()))
1:8e360f8:             {
1:8e360f8: 
1:2e1e98a:                 throw new IllegalArgumentException("Invalid " + name + " specification: " + m.group());
1:8e360f8:             }
1:2e1e98a:         }
1:2e1e98a:         return true;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public String toString()
1:2e1e98a:     {
1:2e1e98a:         StringBuilder sb = new StringBuilder();
1:2e1e98a:         sb.append(name);
1:2e1e98a:         sb.append("(");
1:3e2c610:         for (Option option : delegate.options())
1:2e1e98a:         {
1:2e1e98a:             sb.append(option);
1:2e1e98a:             sb.append(",");
1:2e1e98a:         }
1:2e1e98a:         sb.append(")");
1:2e1e98a:         return sb.toString();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public String shortDisplay()
1:2e1e98a:     {
1:3e2c610:         return (happy() ? "[" : "") + name + "(?)" + (happy() ? "]" : "");
1:2e1e98a:     }
1:938faa2:     public String getOptionAsString()
1:938faa2:     {
1:938faa2:         StringBuilder sb = new StringBuilder();
1:3c95d47:         sb.append(name).append(": ");
1:938faa2:         sb.append(delegate.getOptionAsString());
1:938faa2:         sb.append(";");
1:938faa2:         if (collectAsMap != null)
1:938faa2:         {
1:938faa2:             sb.append("[");
1:938faa2:             sb.append(collectAsMap.getOptionAsString());
1:938faa2:             sb.append("];");
1:938faa2:         }
1:938faa2:         return sb.toString();
1:938faa2:     }
1:938faa2: 
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public String longDisplay()
1:2e1e98a:     {
1:2e1e98a:         StringBuilder sb = new StringBuilder();
1:2e1e98a:         sb.append(name);
1:2e1e98a:         sb.append("(");
1:3e2c610:         for (Option opt : delegate.options())
1:2e1e98a:         {
1:2e1e98a:             sb.append(opt.shortDisplay());
1:2e1e98a:         }
1:2e1e98a:         sb.append("): ");
1:2e1e98a:         sb.append(description);
1:2e1e98a:         return sb.toString();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public List<String> multiLineDisplay()
1:2e1e98a:     {
1:2e1e98a:         final List<String> r = new ArrayList<>();
2:2e1e98a:         for (Option option : options())
1:2e1e98a:             r.add(option.longDisplay());
1:2e1e98a:         return r;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     boolean happy()
1:2e1e98a:     {
1:2e1e98a:         return delegate.happy();
1:2e1e98a:     }
1:2e1e98a: 
1:8e360f8:     private static final class CollectAsMap extends Option
1:8e360f8:     {
1:8e360f8: 
1:8e360f8:         static final String description = "Extra options";
1:8e360f8:         Map<String, String> options = new LinkedHashMap<>();
1:8e360f8: 
1:8e360f8:         boolean accept(String param)
1:8e360f8:         {
1:8e360f8:             String[] args = param.split("=");
1:8e360f8:             if (args.length == 2 && args[1].length() > 0 && args[0].length() > 0)
1:8e360f8:             {
1:7536429:                 if (options.put(args[0], args[1]) != null)
1:7536429:                     throw new IllegalArgumentException(args[0] + " set twice");
1:8e360f8:                 return true;
1:8e360f8:             }
1:8e360f8:             return false;
1:8e360f8:         }
1:8e360f8: 
1:8e360f8:         boolean happy()
1:8e360f8:         {
1:8e360f8:             return true;
1:8e360f8:         }
1:8e360f8: 
1:8e360f8:         String shortDisplay()
1:8e360f8:         {
1:8e360f8:             return "[<option 1..N>=?]";
1:938faa2:         }
1:8e360f8: 
1:938faa2:         public String getOptionAsString()
1:938faa2:         {
1:938faa2:             StringBuilder sb = new StringBuilder();
1:938faa2:             for (Map.Entry<String, String> entry : options.entrySet())
1:938faa2:             {
1:3c95d47:                 sb.append(entry.getKey()).append("=").append(entry.getValue()).append(",");
1:938faa2:             }
1:938faa2:             return sb.toString();
1:8e360f8:         }
1:938faa2: 
1:938faa2: 
1:8e360f8:         String longDisplay()
1:8e360f8:         {
1:8e360f8:             return GroupedOptions.formatLong(shortDisplay(), description);
1:8e360f8:         }
1:8e360f8: 
1:8e360f8:         List<String> multiLineDisplay()
1:8e360f8:         {
1:8e360f8:             return Collections.emptyList();
1:3e2c610:         }
1:3e2c610: 
1:3e2c610:         boolean setByUser()
1:3e2c610:         {
1:3e2c610:             return !options.isEmpty();
1:3e2c610:         }
1:6bbfb55: 
1:6bbfb55:         boolean present()
1:6bbfb55:         {
1:6bbfb55:             return !options.isEmpty();
1:6bbfb55:         }
1:3e2c610:     }
1:3e2c610: 
1:3e2c610:     List<Option> optionsSetByUser()
1:6bbfb55:     {
1:3e2c610:         List<Option> r = new ArrayList<>();
1:6bbfb55:         for (Option option : delegate.options())
1:3e2c610:             if (option.setByUser())
1:3e2c610:                 r.add(option);
1:3e2c610:         return r;
1:3e2c610:     }
1:3e2c610: 
1:3e2c610:     List<Option> defaultOptions()
1:3e2c610:     {
1:3e2c610:         List<Option> r = new ArrayList<>();
1:3e2c610:         for (Option option : delegate.options())
1:6bbfb55:             if (!option.setByUser() && option.present())
1:3e2c610:                 r.add(option);
1:3e2c610:         return r;
1:3e2c610:     }
1:3e2c610: 
1:3e2c610:     boolean setByUser()
1:3e2c610:     {
1:3e2c610:         for (Option option : delegate.options())
1:3e2c610:             if (option.setByUser())
1:3e2c610:                 return true;
1:3e2c610:         return false;
1:8e360f8:     }
1:8e360f8: 
1:6bbfb55:     boolean present()
1:2e1e98a:     {
1:3e2c610:         for (Option option : delegate.options())
1:6bbfb55:             if (option.present())
1:6bbfb55:                 return true;
1:6bbfb55:         return false;
1:6bbfb55:     }
1:6bbfb55: 
1:2e1e98a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:3c95d47
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         sb.append(name).append(": ");
/////////////////////////////////////////////////////////////////////////
1:                 sb.append(entry.getKey()).append("=").append(entry.getValue()).append(",");
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
1:     public String getOptionAsString()
1:     {
1:         StringBuilder sb = new StringBuilder();
0:         sb.append(name + ": ");
1:         sb.append(delegate.getOptionAsString());
1:         sb.append(";");
1:         if (collectAsMap != null)
1:         {
1:             sb.append("[");
1:             sb.append(collectAsMap.getOptionAsString());
1:             sb.append("];");
1:         }
1:         return sb.toString();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         public String getOptionAsString()
1:         {
1:             StringBuilder sb = new StringBuilder();
1:             for (Map.Entry<String, String> entry : options.entrySet())
1:             {
0:                 sb.append(entry.getKey() + "=" + entry.getValue() + ",");
1:             }
1:             return sb.toString();
1:         }
1: 
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean present()
1:         {
1:             return !options.isEmpty();
1:         }
/////////////////////////////////////////////////////////////////////////
1:             if (!option.setByUser() && option.present())
/////////////////////////////////////////////////////////////////////////
1:     boolean present()
1:     {
1:         for (Option option : delegate.options())
1:             if (option.present())
1:                 return true;
1:         return false;
1:     }
1: 
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
commit:7536429
/////////////////////////////////////////////////////////////////////////
1:                 if (options.put(args[0], args[1]) != null)
1:                     throw new IllegalArgumentException(args[0] + " set twice");
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
1:         for (Option option : delegate.options())
/////////////////////////////////////////////////////////////////////////
1:         return (happy() ? "[" : "") + name + "(?)" + (happy() ? "]" : "");
/////////////////////////////////////////////////////////////////////////
1:         for (Option opt : delegate.options())
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean setByUser()
1:         {
1:             return !options.isEmpty();
1:         }
1:     }
1: 
1:     List<Option> optionsSetByUser()
1:     {
1:         List<Option> r = new ArrayList<>();
1:         for (Option option : delegate.options())
1:             if (option.setByUser())
1:                 r.add(option);
1:         return r;
1:     }
1: 
1:     List<Option> defaultOptions()
1:     {
1:         List<Option> r = new ArrayList<>();
1:         for (Option option : delegate.options())
0:             if (!option.setByUser() && option.happy())
1:                 r.add(option);
1:         return r;
1:     }
1: 
1:     boolean setByUser()
1:     {
1:         for (Option option : delegate.options())
1:             if (option.setByUser())
1:                 return true;
1:         return false;
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8e360f8
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.LinkedHashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:             if (collectAsMap == null)
1:                 return OptionMulti.this.options();
1: 
1:             List<Option> options = new ArrayList<>(OptionMulti.this.options());
1:             options.add(collectAsMap);
1:             return options;
1:     public Map<String, String> extraOptions()
1:     {
1:         return collectAsMap == null ? new HashMap<String, String>() : collectAsMap.options;
1:     }
1: 
1:     private final CollectAsMap collectAsMap;
1: 
1:     public OptionMulti(String name, String description, boolean collectExtraOptionsInMap)
1:         this.collectAsMap = collectExtraOptionsInMap ? new CollectAsMap() : null;
/////////////////////////////////////////////////////////////////////////
1:             {
1: 
1:             }
/////////////////////////////////////////////////////////////////////////
1:     private static final class CollectAsMap extends Option
1:     {
1: 
1:         static final String description = "Extra options";
1:         Map<String, String> options = new LinkedHashMap<>();
1: 
1:         boolean accept(String param)
1:         {
1:             String[] args = param.split("=");
1:             if (args.length == 2 && args[1].length() > 0 && args[0].length() > 0)
1:             {
0:                 options.put(args[0], args[1]);
1:                 return true;
1:             }
1:             return false;
1:         }
1: 
1:         boolean happy()
1:         {
1:             return true;
1:         }
1: 
1:         String shortDisplay()
1:         {
1:             return "[<option 1..N>=?]";
1:         }
1: 
1:         String longDisplay()
1:         {
1:             return GroupedOptions.formatLong(shortDisplay(), description);
1:         }
1: 
1:         List<String> multiLineDisplay()
1:         {
1:             return Collections.emptyList();
1:         }
0:     };
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: /**
1:  * For specifying multiple grouped sub-options in the form: group(arg1=,arg2,arg3) etc.
1:  */
1: abstract class OptionMulti extends Option
1: {
1: 
1:     private static final Pattern ARGS = Pattern.compile("([^,]+)", Pattern.CASE_INSENSITIVE);
1: 
1:     private final class Delegate extends GroupedOptions
1:     {
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return OptionMulti.this.options();
1:         }
1:     }
1: 
1:     protected abstract List<? extends Option> options();
1: 
1:     private final String name;
1:     private final Pattern pattern;
1:     private final String description;
1:     private final Delegate delegate = new Delegate();
0:     public OptionMulti(String name, String description)
1:     {
1:         this.name = name;
1:         pattern = Pattern.compile(name + "\\((.*)\\)", Pattern.CASE_INSENSITIVE);
1:         this.description = description;
1:     }
1: 
1:     @Override
1:     public boolean accept(String param)
1:     {
1:         Matcher m = pattern.matcher(param);
1:         if (!m.matches())
1:             return false;
1:         m = ARGS.matcher(m.group(1));
1:         int last = -1;
1:         while (m.find())
1:         {
1:             if (m.start() != last + 1)
1:                 throw new IllegalArgumentException("Invalid " + name + " specification: " + param);
1:             last = m.end();
1:             if (!delegate.accept(m.group()))
1:                 throw new IllegalArgumentException("Invalid " + name + " specification: " + m.group());
1:         }
1:         return true;
1:     }
1: 
1:     public String toString()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(name);
1:         sb.append("(");
1:         for (Option option : options())
1:         {
1:             sb.append(option);
1:             sb.append(",");
1:         }
1:         sb.append(")");
1:         return sb.toString();
1:     }
1: 
1:     @Override
1:     public String shortDisplay()
1:     {
0:         return name + "(?)";
1:     }
1: 
1:     @Override
1:     public String longDisplay()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(name);
1:         sb.append("(");
0:         for (Option opt : options())
1:         {
1:             sb.append(opt.shortDisplay());
1:         }
1:         sb.append("): ");
1:         sb.append(description);
1:         return sb.toString();
1:     }
1: 
1:     @Override
1:     public List<String> multiLineDisplay()
1:     {
1:         final List<String> r = new ArrayList<>();
1:         for (Option option : options())
1:             r.add(option.longDisplay());
1:         return r;
1:     }
1: 
1:     @Override
1:     boolean happy()
1:     {
1:         return delegate.happy();
1:     }
1: 
1: }
============================================================================