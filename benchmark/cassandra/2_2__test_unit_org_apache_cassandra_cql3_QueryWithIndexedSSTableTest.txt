1:8bc567b: /*
1:8bc567b:  * Licensed to the Apache Software Foundation (ASF) under one
1:8bc567b:  * or more contributor license agreements.  See the NOTICE file
1:8bc567b:  * distributed with this work for additional information
1:8bc567b:  * regarding copyright ownership.  The ASF licenses this file
1:8bc567b:  * to you under the Apache License, Version 2.0 (the
1:8bc567b:  * "License"); you may not use this file except in compliance
1:8bc567b:  * with the License.  You may obtain a copy of the License at
1:8bc567b:  *
1:8bc567b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8bc567b:  *
1:8bc567b:  * Unless required by applicable law or agreed to in writing, software
1:8bc567b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8bc567b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8bc567b:  * See the License for the specific language governing permissions and
1:8bc567b:  * limitations under the License.
1:8bc567b:  */
1:8bc567b: package org.apache.cassandra.cql3;
1:8bc567b: 
1:8bc567b: import java.util.Random;
1:8bc567b: 
1:8bc567b: import org.junit.Test;
1:8bc567b: 
1:8bc567b: import org.apache.cassandra.Util;
1:8bc567b: import org.apache.cassandra.db.DecoratedKey;
1:8bc567b: import org.apache.cassandra.db.RowIndexEntry;
1:8bc567b: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:8bc567b: import org.apache.cassandra.utils.ByteBufferUtil;
1:8bc567b: 
1:8bc567b: public class QueryWithIndexedSSTableTest extends CQLTester
1:8bc567b: {
1:8bc567b:     @Test
1:8bc567b:     public void queryIndexedSSTableTest() throws Throwable
1:8bc567b:     {
1:8bc567b:         // That test reproduces the bug from CASSANDRA-10903 and the fact we have a static column is
1:8bc567b:         // relevant to that reproduction in particular as it forces a slightly different code path that
1:8bc567b:         // if there wasn't a static.
1:8bc567b: 
1:8bc567b:         int ROWS = 1000;
1:8bc567b:         int VALUE_LENGTH = 100;
1:8bc567b: 
1:8bc567b:         createTable("CREATE TABLE %s (k int, t int, s text static, v text, PRIMARY KEY (k, t))");
1:8bc567b: 
1:8bc567b:         // We create a partition that is big enough that the underlying sstable will be indexed
1:8bc567b:         // For that, we use a large-ish number of row, and a value that isn't too small.
1:fe37e06:         String text = TombstonesWithIndexedSSTableTest.makeRandomString(VALUE_LENGTH);
1:8bc567b:         for (int i = 0; i < ROWS; i++)
1:8bc567b:             execute("INSERT INTO %s(k, t, v) VALUES (?, ?, ?)", 0, i, text + i);
1:8bc567b: 
1:8bc567b:         flush();
1:8bc567b:         compact();
1:8bc567b: 
1:8bc567b:         // Sanity check that we're testing what we want to test, that is that we're reading from an indexed
1:8bc567b:         // sstable. Note that we'll almost surely have a single indexed sstable in practice, but it's theorically
1:8bc567b:         // possible for a compact strategy to yield more than that and as long as one is indexed we're pretty
1:8bc567b:         // much testing what we want. If this check ever fails on some specific setting, we'll have to either
1:8bc567b:         // tweak ROWS and VALUE_LENGTH, or skip the test on those settings.
1:8bc567b:         DecoratedKey dk = Util.dk(ByteBufferUtil.bytes(0));
1:8bc567b:         boolean hasIndexed = false;
1:8bc567b:         for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())
1:8bc567b:         {
1:8bc567b:             RowIndexEntry indexEntry = sstable.getPosition(dk, SSTableReader.Operator.EQ);
1:8bc567b:             hasIndexed |= indexEntry != null && indexEntry.isIndexed();
1:8bc567b:         }
1:8bc567b:         assert hasIndexed;
1:8bc567b: 
1:8bc567b:         assertRowCount(execute("SELECT s FROM %s WHERE k = ?", 0), ROWS);
1:8bc567b:         assertRowCount(execute("SELECT s FROM %s WHERE k = ? ORDER BY t DESC", 0), ROWS);
1:8bc567b: 
1:8bc567b:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ?", 0), 1);
1:8bc567b:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ? ORDER BY t DESC", 0), 1);
1:8bc567b:     }
1:8bc567b: 
1:8bc567b:     // Creates a random string 
1:fe37e06:     public static String makeRandomSt(int length)
1:8bc567b:     {
1:8bc567b:         Random random = new Random();
1:8bc567b:         char[] chars = new char[26];
1:8bc567b:         int i = 0;
1:8bc567b:         for (char c = 'a'; c <= 'z'; c++)
1:8bc567b:             chars[i++] = c;
1:8bc567b:         return new String(chars);
1:8bc567b:     }
1:8bc567b: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:fe37e06
/////////////////////////////////////////////////////////////////////////
1:         String text = TombstonesWithIndexedSSTableTest.makeRandomString(VALUE_LENGTH);
/////////////////////////////////////////////////////////////////////////
1:     public static String makeRandomSt(int length)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:8bc567b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Random;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.RowIndexEntry;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class QueryWithIndexedSSTableTest extends CQLTester
1: {
1:     @Test
1:     public void queryIndexedSSTableTest() throws Throwable
1:     {
1:         // That test reproduces the bug from CASSANDRA-10903 and the fact we have a static column is
1:         // relevant to that reproduction in particular as it forces a slightly different code path that
1:         // if there wasn't a static.
1: 
1:         int ROWS = 1000;
1:         int VALUE_LENGTH = 100;
1: 
1:         createTable("CREATE TABLE %s (k int, t int, s text static, v text, PRIMARY KEY (k, t))");
1: 
1:         // We create a partition that is big enough that the underlying sstable will be indexed
1:         // For that, we use a large-ish number of row, and a value that isn't too small.
0:         String text = makeRandomTest(VALUE_LENGTH);
1:         for (int i = 0; i < ROWS; i++)
1:             execute("INSERT INTO %s(k, t, v) VALUES (?, ?, ?)", 0, i, text + i);
1: 
1:         flush();
1:         compact();
1: 
1:         // Sanity check that we're testing what we want to test, that is that we're reading from an indexed
1:         // sstable. Note that we'll almost surely have a single indexed sstable in practice, but it's theorically
1:         // possible for a compact strategy to yield more than that and as long as one is indexed we're pretty
1:         // much testing what we want. If this check ever fails on some specific setting, we'll have to either
1:         // tweak ROWS and VALUE_LENGTH, or skip the test on those settings.
1:         DecoratedKey dk = Util.dk(ByteBufferUtil.bytes(0));
1:         boolean hasIndexed = false;
1:         for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())
1:         {
1:             RowIndexEntry indexEntry = sstable.getPosition(dk, SSTableReader.Operator.EQ);
1:             hasIndexed |= indexEntry != null && indexEntry.isIndexed();
1:         }
1:         assert hasIndexed;
1: 
1:         assertRowCount(execute("SELECT s FROM %s WHERE k = ?", 0), ROWS);
1:         assertRowCount(execute("SELECT s FROM %s WHERE k = ? ORDER BY t DESC", 0), ROWS);
1: 
1:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ?", 0), 1);
1:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ? ORDER BY t DESC", 0), 1);
1:     }
1: 
1:     // Creates a random string 
0:     public static String makeRandomTest(int length)
1:     {
1:         Random random = new Random();
1:         char[] chars = new char[26];
1:         int i = 0;
1:         for (char c = 'a'; c <= 'z'; c++)
1:             chars[i++] = c;
1:         return new String(chars);
1:     }
1: }
============================================================================