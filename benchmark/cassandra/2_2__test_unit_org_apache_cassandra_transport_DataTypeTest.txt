1:4a5c282: /*
1:4a5c282:  * Licensed to the Apache Software Foundation (ASF) under one
1:4a5c282:  * or more contributor license agreements.  See the NOTICE file
1:4a5c282:  * distributed with this work for additional information
1:4a5c282:  * regarding copyright ownership.  The ASF licenses this file
1:4a5c282:  * to you under the Apache License, Version 2.0 (the
1:4a5c282:  * "License"); you may not use this file except in compliance
1:4a5c282:  * with the License.  You may obtain a copy of the License at
1:4a5c282:  *
1:4a5c282:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4a5c282:  *
1:4a5c282:  * Unless required by applicable law or agreed to in writing, software
1:4a5c282:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4a5c282:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4a5c282:  * See the License for the specific language governing permissions and
1:4a5c282:  * limitations under the License.
1:4a5c282:  */
1:4a5c282: 
1:4a5c282: package org.apache.cassandra.transport;
1:4a5c282: 
1:4a5c282: import java.util.ArrayList;
1:4a5c282: import java.util.Collections;
1:4a5c282: import java.util.List;
1:4a5c282: import java.util.Map;
1:4a5c282: 
1:4a5c282: import org.junit.Test;
1:4a5c282: 
1:4a5c282: import io.netty.buffer.ByteBuf;
1:4a5c282: import org.apache.cassandra.db.TypeSizes;
1:4a5c282: import org.apache.cassandra.db.marshal.AbstractType;
1:4a5c282: import org.apache.cassandra.db.marshal.AsciiType;
1:4a5c282: import org.apache.cassandra.db.marshal.LongType;
1:4a5c282: 
1:4a5c282: import static org.junit.Assert.assertEquals;
1:4a5c282: 
1:4a5c282: public class DataTypeTest
1:4a5c282: {
1:4a5c282:     @Test
1:4a5c282:     public void TestSimpleDataTypeSerialization()
1:4a5c282:     {
1:4a5c282:         for (DataType type : DataType.values())
1:4a5c282:         {
1:4a5c282:             if (isComplexType(type))
1:4a5c282:                 continue;
1:4a5c282: 
1:4a5c282:             Map<DataType, Object> options = Collections.singletonMap(type, (Object)type.toString());
1:e0adc16:             for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:4a5c282:                 testEncodeDecode(type, options, version);
1:4a5c282:         }
1:4a5c282:     }
1:4a5c282: 
1:4a5c282:     @Test
1:4a5c282:     public void TestListDataTypeSerialization()
1:4a5c282:     {
1:4a5c282:         DataType type = DataType.LIST;
1:4a5c282:         Map<DataType, Object> options =  Collections.singletonMap(type, (Object)LongType.instance);
1:e0adc16:         for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:4a5c282:             testEncodeDecode(type, options, version);
1:4a5c282:     }
1:4a5c282: 
1:4a5c282:     @Test
1:4a5c282:     public void TestMapDataTypeSerialization()
1:4a5c282:     {
1:4a5c282:         DataType type = DataType.MAP;
1:4a5c282:         List<AbstractType> value = new ArrayList<>();
1:4a5c282:         value.add(LongType.instance);
1:4a5c282:         value.add(AsciiType.instance);
1:4a5c282:         Map<DataType, Object> options = Collections.singletonMap(type, (Object)value);
1:e0adc16:         for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:4a5c282:             testEncodeDecode(type, options, version);
1:4a5c282:     }
1:4a5c282: 
1:e0adc16:     private void testEncodeDecode(DataType type, Map<DataType, Object> options, ProtocolVersion version)
1:4a5c282:     {
1:4a5c282:         ByteBuf dest = type.codec.encode(options, version);
1:4a5c282:         Map<DataType, Object> results = type.codec.decode(dest, version);
1:4a5c282: 
1:4a5c282:         for (DataType key : results.keySet())
1:4a5c282:         {
1:4a5c282:             int ssize = type.serializedValueSize(results.get(key), version);
1:e0adc16:             int esize = version.isSmallerThan(type.getProtocolVersion()) ? 2 + TypeSizes.encodedUTF8Length(results.get(key).toString()) : 0;
1:4a5c282:             switch (type)
1:4a5c282:             {
1:4a5c282:                 case LIST:
1:4a5c282:                 case SET:
1:4a5c282:                     esize += 2;
1:4a5c282:                     break;
1:4a5c282:                 case MAP:
1:4a5c282:                     esize += 4;
1:4a5c282:                     break;
1:4a5c282:                 case CUSTOM:
1:4a5c282:                     esize = 8;
1:4a5c282:                     break;
1:4a5c282:             }
1:4a5c282:             assertEquals(esize, ssize);
1:4a5c282: 
1:e0adc16:             DataType expected = version.isSmallerThan(type.getProtocolVersion())
1:4a5c282:                 ? DataType.CUSTOM
1:4a5c282:                 : type;
1:4a5c282:             assertEquals(expected, key);
1:4a5c282:         }
1:4a5c282:     }
1:4a5c282: 
1:4a5c282:     private boolean isComplexType(DataType type)
1:4a5c282:     {
1:e0adc16:         return type.getId(ProtocolVersion.CURRENT) >= 32;
1:4a5c282:     }
1:4a5c282: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:             for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
/////////////////////////////////////////////////////////////////////////
1:         for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
/////////////////////////////////////////////////////////////////////////
1:         for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:     private void testEncodeDecode(DataType type, Map<DataType, Object> options, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:             int esize = version.isSmallerThan(type.getProtocolVersion()) ? 2 + TypeSizes.encodedUTF8Length(results.get(key).toString()) : 0;
/////////////////////////////////////////////////////////////////////////
1:             DataType expected = version.isSmallerThan(type.getProtocolVersion())
/////////////////////////////////////////////////////////////////////////
1:         return type.getId(ProtocolVersion.CURRENT) >= 32;
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:4a5c282
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.transport;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.junit.Test;
1: 
1: import io.netty.buffer.ByteBuf;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.LongType;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class DataTypeTest
1: {
1:     @Test
1:     public void TestSimpleDataTypeSerialization()
1:     {
1:         for (DataType type : DataType.values())
1:         {
1:             if (isComplexType(type))
1:                 continue;
1: 
1:             Map<DataType, Object> options = Collections.singletonMap(type, (Object)type.toString());
0:             for (int version = 1; version < 5; version++)
1:                 testEncodeDecode(type, options, version);
1:         }
1:     }
1: 
1:     @Test
1:     public void TestListDataTypeSerialization()
1:     {
1:         DataType type = DataType.LIST;
1:         Map<DataType, Object> options =  Collections.singletonMap(type, (Object)LongType.instance);
0:         for (int version = 1; version < 5; version++)
1:             testEncodeDecode(type, options, version);
1:     }
1: 
1:     @Test
1:     public void TestMapDataTypeSerialization()
1:     {
1:         DataType type = DataType.MAP;
1:         List<AbstractType> value = new ArrayList<>();
1:         value.add(LongType.instance);
1:         value.add(AsciiType.instance);
1:         Map<DataType, Object> options = Collections.singletonMap(type, (Object)value);
0:         for (int version = 1; version < 5; version++)
1:             testEncodeDecode(type, options, version);
1:     }
1: 
0:     private void testEncodeDecode(DataType type, Map<DataType, Object> options, int version)
1:     {
1:         ByteBuf dest = type.codec.encode(options, version);
1:         Map<DataType, Object> results = type.codec.decode(dest, version);
1: 
1:         for (DataType key : results.keySet())
1:         {
1:             int ssize = type.serializedValueSize(results.get(key), version);
0:             int esize = version < type.getProtocolVersion() ? 2 + TypeSizes.encodedUTF8Length(results.get(key).toString()) : 0;
1:             switch (type)
1:             {
1:                 case LIST:
1:                 case SET:
1:                     esize += 2;
1:                     break;
1:                 case MAP:
1:                     esize += 4;
1:                     break;
1:                 case CUSTOM:
1:                     esize = 8;
1:                     break;
1:             }
1:             assertEquals(esize, ssize);
1: 
0:             DataType expected = version < type.getProtocolVersion()
1:                 ? DataType.CUSTOM
1:                 : type;
1:             assertEquals(expected, key);
1:         }
1:     }
1: 
1:     private boolean isComplexType(DataType type)
1:     {
0:         return type.getId(Server.CURRENT_VERSION) >= 32;
1:     }
1: }
============================================================================