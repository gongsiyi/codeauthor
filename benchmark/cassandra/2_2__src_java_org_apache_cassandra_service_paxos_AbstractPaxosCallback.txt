1:8b0e186: package org.apache.cassandra.service.paxos;
1:60bf7a5: /*
1:60bf7a5:  * 
1:60bf7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf7a5:  * or more contributor license agreements.  See the NOTICE file
1:60bf7a5:  * distributed with this work for additional information
1:60bf7a5:  * regarding copyright ownership.  The ASF licenses this file
1:60bf7a5:  * to you under the Apache License, Version 2.0 (the
1:60bf7a5:  * "License"); you may not use this file except in compliance
1:60bf7a5:  * with the License.  You may obtain a copy of the License at
1:60bf7a5:  * 
1:60bf7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:60bf7a5:  * 
1:60bf7a5:  * Unless required by applicable law or agreed to in writing,
1:60bf7a5:  * software distributed under the License is distributed on an
1:60bf7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60bf7a5:  * KIND, either express or implied.  See the License for the
1:60bf7a5:  * specific language governing permissions and limitations
1:60bf7a5:  * under the License.
1:60bf7a5:  * 
1:60bf7a5:  */
1:60bf7a5: 
1:8b0e186: 
1:8b0e186: import java.util.concurrent.CountDownLatch;
1:8b0e186: import java.util.concurrent.TimeUnit;
1:8b0e186: 
1:8b0e186: import org.apache.cassandra.config.DatabaseDescriptor;
1:8b0e186: import org.apache.cassandra.db.ConsistencyLevel;
1:8b0e186: import org.apache.cassandra.db.WriteType;
1:8b0e186: import org.apache.cassandra.exceptions.WriteTimeoutException;
1:8b0e186: import org.apache.cassandra.net.IAsyncCallback;
1:8b0e186: 
1:8b0e186: public abstract class AbstractPaxosCallback<T> implements IAsyncCallback<T>
1:8b0e186: {
1:8b0e186:     protected final CountDownLatch latch;
1:8b0e186:     protected final int targets;
1:f5e1cbc:     private final ConsistencyLevel consistency;
1:aa83c94:     private final long queryStartNanoTime;
1:8b0e186: 
1:aa83c94:     public AbstractPaxosCallback(int targets, ConsistencyLevel consistency, long queryStartNanoTime)
1:8b0e186:     {
1:8b0e186:         this.targets = targets;
1:f5e1cbc:         this.consistency = consistency;
1:8b0e186:         latch = new CountDownLatch(targets);
1:aa83c94:         this.queryStartNanoTime = queryStartNanoTime;
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public boolean isLatencyForSnitch()
1:8b0e186:     {
1:8b0e186:         return false;
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public int getResponseCount()
1:8b0e186:     {
1:8b0e186:         return (int) (targets - latch.getCount());
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public void await() throws WriteTimeoutException
1:8b0e186:     {
1:8b0e186:         try
1:8b0e186:         {
1:aa83c94:             long timeout = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getWriteRpcTimeout()) - (System.nanoTime() - queryStartNanoTime);
1:aa83c94:             if (!latch.await(timeout, TimeUnit.NANOSECONDS))
1:f5e1cbc:                 throw new WriteTimeoutException(WriteType.CAS, consistency, getResponseCount(), targets);
1:8b0e186:         }
1:8b0e186:         catch (InterruptedException ex)
1:8b0e186:         {
1:8b0e186:             throw new AssertionError("This latch shouldn't have been interrupted.");
1:8b0e186:         }
1:8b0e186:     }
1:8b0e186: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     private final long queryStartNanoTime;
1:     public AbstractPaxosCallback(int targets, ConsistencyLevel consistency, long queryStartNanoTime)
1:         this.queryStartNanoTime = queryStartNanoTime;
/////////////////////////////////////////////////////////////////////////
1:             long timeout = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getWriteRpcTimeout()) - (System.nanoTime() - queryStartNanoTime);
1:             if (!latch.await(timeout, TimeUnit.NANOSECONDS))
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f5e1cbc
/////////////////////////////////////////////////////////////////////////
1:     private final ConsistencyLevel consistency;
0:     public AbstractPaxosCallback(int targets, ConsistencyLevel consistency)
1:         this.consistency = consistency;
/////////////////////////////////////////////////////////////////////////
1:                 throw new WriteTimeoutException(WriteType.CAS, consistency, getResponseCount(), targets);
commit:60bf7a5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:8b0e186
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.service.paxos;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.db.ConsistencyLevel;
1: import org.apache.cassandra.db.WriteType;
1: import org.apache.cassandra.exceptions.WriteTimeoutException;
1: import org.apache.cassandra.net.IAsyncCallback;
1: 
1: public abstract class AbstractPaxosCallback<T> implements IAsyncCallback<T>
1: {
1:     protected final CountDownLatch latch;
1:     protected final int targets;
1: 
0:     public AbstractPaxosCallback(int targets)
1:     {
1:         this.targets = targets;
1:         latch = new CountDownLatch(targets);
1:     }
1: 
1:     public boolean isLatencyForSnitch()
1:     {
1:         return false;
1:     }
1: 
1:     public int getResponseCount()
1:     {
1:         return (int) (targets - latch.getCount());
1:     }
1: 
1:     public void await() throws WriteTimeoutException
1:     {
1:         try
1:         {
0:             if (!latch.await(DatabaseDescriptor.getWriteRpcTimeout(), TimeUnit.MILLISECONDS))
0:                 throw new WriteTimeoutException(WriteType.CAS, ConsistencyLevel.SERIAL, getResponseCount(), targets);
1:         }
1:         catch (InterruptedException ex)
1:         {
1:             throw new AssertionError("This latch shouldn't have been interrupted.");
1:         }
1:     }
1: }
============================================================================