1:3a2faf9: /*
1:3a2faf9:  * Licensed to the Apache Software Foundation (ASF) under one
1:3a2faf9:  * or more contributor license agreements.  See the NOTICE file
1:3a2faf9:  * distributed with this work for additional information
1:3a2faf9:  * regarding copyright ownership.  The ASF licenses this file
1:3a2faf9:  * to you under the Apache License, Version 2.0 (the
1:3a2faf9:  * "License"); you may not use this file except in compliance
1:3a2faf9:  * with the License.  You may obtain a copy of the License at
1:3a2faf9:  *
1:3a2faf9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3a2faf9:  *
1:3a2faf9:  * Unless required by applicable law or agreed to in writing, software
1:3a2faf9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a2faf9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a2faf9:  * See the License for the specific language governing permissions and
1:3a2faf9:  * limitations under the License.
1:3a2faf9:  */
1:3a2faf9: package org.apache.cassandra.exceptions;
1:3a2faf9: 
1:3a2faf9: import java.util.HashMap;
1:3a2faf9: import java.util.Map;
1:3a2faf9: 
1:3a2faf9: import org.apache.cassandra.transport.ProtocolException;
1:3a2faf9: 
1:3a2faf9: /**
1:3a2faf9:  * Exceptions code, as defined by the binary protocol.
1:3a2faf9:  */
1:3a2faf9: public enum ExceptionCode
1:3a2faf9: {
1:3a2faf9:     SERVER_ERROR    (0x0000),
1:3a2faf9:     PROTOCOL_ERROR  (0x000A),
1:3a2faf9: 
1:bddfa9e:     BAD_CREDENTIALS (0x0100),
1:bddfa9e: 
1:3a2faf9:     // 1xx: problem during request execution
1:3a2faf9:     UNAVAILABLE     (0x1000),
1:3a2faf9:     OVERLOADED      (0x1001),
1:3a2faf9:     IS_BOOTSTRAPPING(0x1002),
1:3a2faf9:     TRUNCATE_ERROR  (0x1003),
1:3a2faf9:     WRITE_TIMEOUT   (0x1100),
1:3a2faf9:     READ_TIMEOUT    (0x1200),
1:c6525da:     READ_FAILURE    (0x1300),
1:e3c0186:     FUNCTION_FAILURE(0x1400),
1:c059a56:     WRITE_FAILURE   (0x1500),
1:3a2faf9: 
1:3a2faf9:     // 2xx: problem validating the request
1:3a2faf9:     SYNTAX_ERROR    (0x2000),
1:3a2faf9:     UNAUTHORIZED    (0x2100),
1:3a2faf9:     INVALID         (0x2200),
1:3a2faf9:     CONFIG_ERROR    (0x2300),
1:ccca5f1:     ALREADY_EXISTS  (0x2400),
1:ccca5f1:     UNPREPARED      (0x2500);
1:3a2faf9: 
1:3a2faf9:     public final int value;
1:e3c0186:     private static final Map<Integer, ExceptionCode> valueToCode = new HashMap<>(ExceptionCode.values().length);
1:3a2faf9:     static
1:3a2faf9:     {
1:3a2faf9:         for (ExceptionCode code : ExceptionCode.values())
1:3a2faf9:             valueToCode.put(code.value, code);
1:3a2faf9:     }
1:3a2faf9: 
1:3a2faf9:     private ExceptionCode(int value)
1:3a2faf9:     {
1:3a2faf9:         this.value = value;
1:3a2faf9:     }
1:3a2faf9: 
1:3a2faf9:     public static ExceptionCode fromValue(int value)
1:3a2faf9:     {
1:3a2faf9:         ExceptionCode code = valueToCode.get(value);
1:3a2faf9:         if (code == null)
1:3a2faf9:             throw new ProtocolException(String.format("Unknown error code %d", value));
1:3a2faf9:         return code;
1:3a2faf9:     }
1:3a2faf9: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c059a56
/////////////////////////////////////////////////////////////////////////
1:     WRITE_FAILURE   (0x1500),
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e3c0186
/////////////////////////////////////////////////////////////////////////
1:     FUNCTION_FAILURE(0x1400),
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<Integer, ExceptionCode> valueToCode = new HashMap<>(ExceptionCode.values().length);
author:Christian Spriegel
-------------------------------------------------------------------------------
commit:c6525da
/////////////////////////////////////////////////////////////////////////
1:     READ_FAILURE    (0x1300),
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1:     BAD_CREDENTIALS (0x0100),
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:ccca5f1
/////////////////////////////////////////////////////////////////////////
1:     ALREADY_EXISTS  (0x2400),
1:     UNPREPARED      (0x2500);
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.exceptions;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.transport.ProtocolException;
1: 
1: /**
1:  * Exceptions code, as defined by the binary protocol.
1:  */
1: public enum ExceptionCode
1: {
1:     SERVER_ERROR    (0x0000),
1:     PROTOCOL_ERROR  (0x000A),
1: 
1:     // 1xx: problem during request execution
1:     UNAVAILABLE     (0x1000),
1:     OVERLOADED      (0x1001),
1:     IS_BOOTSTRAPPING(0x1002),
1:     TRUNCATE_ERROR  (0x1003),
1:     WRITE_TIMEOUT   (0x1100),
1:     READ_TIMEOUT    (0x1200),
1: 
1:     // 2xx: problem validating the request
1:     SYNTAX_ERROR    (0x2000),
1:     UNAUTHORIZED    (0x2100),
1:     INVALID         (0x2200),
1:     CONFIG_ERROR    (0x2300),
0:     ALREADY_EXISTS  (0x2400);
1: 
1:     public final int value;
0:     private static final Map<Integer, ExceptionCode> valueToCode = new HashMap<Integer, ExceptionCode>(ExceptionCode.values().length);
1:     static
1:     {
1:         for (ExceptionCode code : ExceptionCode.values())
1:             valueToCode.put(code.value, code);
1:     }
1: 
1:     private ExceptionCode(int value)
1:     {
1:         this.value = value;
1:     }
1: 
1:     public static ExceptionCode fromValue(int value)
1:     {
1:         ExceptionCode code = valueToCode.get(value);
1:         if (code == null)
1:             throw new ProtocolException(String.format("Unknown error code %d", value));
1:         return code;
1:     }
1: }
============================================================================