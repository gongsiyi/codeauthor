1:8284964: /*
1:8284964:  * Licensed to the Apache Software Foundation (ASF) under one
1:8284964:  * or more contributor license agreements.  See the NOTICE file
1:8284964:  * distributed with this work for additional information
1:8284964:  * regarding copyright ownership.  The ASF licenses this file
1:8284964:  * to you under the Apache License, Version 2.0 (the
1:8284964:  * "License"); you may not use this file except in compliance
1:8284964:  * with the License.  You may obtain a copy of the License at
1:8284964:  *
1:8284964:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8284964:  *
1:8284964:  * Unless required by applicable law or agreed to in writing, software
1:8284964:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8284964:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8284964:  * See the License for the specific language governing permissions and
1:8284964:  * limitations under the License.
1:8284964:  */
1:8284964: package org.apache.cassandra.utils;
3:8284964: 
1:8284964: import java.util.concurrent.TimeUnit;
1:8284964: 
1:557bbbc: import org.apache.cassandra.concurrent.ScheduledExecutors;
1:8284964: import org.apache.cassandra.config.Config;
1:8284964: 
1:8284964: /*
1:8284964:  * Convert from nanotime to non-monotonic current time millis. Beware of weaker ordering guarantees.
1:8284964:  */
1:8284964: public class NanoTimeToCurrentTimeMillis
7:8284964: {
1:8284964:     /*
1:8284964:      * How often to pull a new timestamp from the system.
1:8284964:      */
1:8284964:     private static final String TIMESTAMP_UPDATE_INTERVAL_PROPERTY = Config.PROPERTY_PREFIX + "NANOTIMETOMILLIS_TIMESTAMP_UPDATE_INTERVAL";
1:8284964:     private static final long TIMESTAMP_UPDATE_INTERVAL = Long.getLong(TIMESTAMP_UPDATE_INTERVAL_PROPERTY, 10000);
1:8284964: 
1:8284964:     private static volatile long TIMESTAMP_BASE[] = new long[] { System.currentTimeMillis(), System.nanoTime() };
1:8284964: 
1:8284964:     /*
1:8284964:      * System.currentTimeMillis() is 25 nanoseconds. This is 2 nanoseconds (maybe) according to JMH.
1:8284964:      * Faster than calling both currentTimeMillis() and nanoTime().
1:8284964:      *
1:8284964:      * There is also the issue of how scalable nanoTime() and currentTimeMillis() are which is a moving target.
1:8284964:      *
1:8284964:      * These timestamps don't order with System.currentTimeMillis() because currentTimeMillis() can tick over
1:06a053d:      * before this one does. I have seen it behind by as much as 2ms on Linux and 25ms on Windows.
1:8284964:      */
1:557bbbc:     public static long convert(long nanoTime)
1:8284964:     {
1:8284964:         final long timestampBase[] = TIMESTAMP_BASE;
1:8284964:         return timestampBase[0] + TimeUnit.NANOSECONDS.toMillis(nanoTime - timestampBase[1]);
6:8284964:     }
1:8284964: 
1:557bbbc:     public static void updateNow()
1:557bbbc:     {
1:557bbbc:         ScheduledExecutors.scheduledFastTasks.submit(NanoTimeToCurrentTimeMillis::updateTimestampBase);
1:557bbbc:     }
1:557bbbc: 
1:8284964:     static
1:8284964:     {
1:557bbbc:         ScheduledExecutors.scheduledFastTasks.scheduleWithFixedDelay(NanoTimeToCurrentTimeMillis::updateTimestampBase,
1:557bbbc:                                                                      TIMESTAMP_UPDATE_INTERVAL,
1:557bbbc:                                                                      TIMESTAMP_UPDATE_INTERVAL,
1:557bbbc:                                                                      TimeUnit.MILLISECONDS);
1:557bbbc:     }
1:8284964: 
1:557bbbc:     private static void updateTimestampBase()
1:557bbbc:     {
1:557bbbc:         TIMESTAMP_BASE = new long[] {
1:557bbbc:                                     Math.max(TIMESTAMP_BASE[0], System.currentTimeMillis()),
1:557bbbc:                                     Math.max(TIMESTAMP_BASE[1], System.nanoTime()) };
1:8284964:     }
1:8284964: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.concurrent.ScheduledExecutors;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static long convert(long nanoTime)
1:     public static void updateNow()
1:     {
1:         ScheduledExecutors.scheduledFastTasks.submit(NanoTimeToCurrentTimeMillis::updateTimestampBase);
1:     }
1: 
1:         ScheduledExecutors.scheduledFastTasks.scheduleWithFixedDelay(NanoTimeToCurrentTimeMillis::updateTimestampBase,
1:                                                                      TIMESTAMP_UPDATE_INTERVAL,
1:                                                                      TIMESTAMP_UPDATE_INTERVAL,
1:                                                                      TimeUnit.MILLISECONDS);
1:     }
1:     private static void updateTimestampBase()
1:     {
1:         TIMESTAMP_BASE = new long[] {
1:                                     Math.max(TIMESTAMP_BASE[0], System.currentTimeMillis()),
1:                                     Math.max(TIMESTAMP_BASE[1], System.nanoTime()) };
author:Paulo Motta
-------------------------------------------------------------------------------
commit:06a053d
/////////////////////////////////////////////////////////////////////////
1:      * before this one does. I have seen it behind by as much as 2ms on Linux and 25ms on Windows.
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:8284964
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.cassandra.config.Config;
1: 
0: import com.google.common.annotations.VisibleForTesting;
1: 
1: /*
1:  * Convert from nanotime to non-monotonic current time millis. Beware of weaker ordering guarantees.
1:  */
1: public class NanoTimeToCurrentTimeMillis
1: {
1:     /*
1:      * How often to pull a new timestamp from the system.
1:      */
1:     private static final String TIMESTAMP_UPDATE_INTERVAL_PROPERTY = Config.PROPERTY_PREFIX + "NANOTIMETOMILLIS_TIMESTAMP_UPDATE_INTERVAL";
1:     private static final long TIMESTAMP_UPDATE_INTERVAL = Long.getLong(TIMESTAMP_UPDATE_INTERVAL_PROPERTY, 10000);
1: 
1:     private static volatile long TIMESTAMP_BASE[] = new long[] { System.currentTimeMillis(), System.nanoTime() };
1: 
0:     @VisibleForTesting
0:     public static final Object TIMESTAMP_UPDATE = new Object();
1: 
1:     /*
1:      * System.currentTimeMillis() is 25 nanoseconds. This is 2 nanoseconds (maybe) according to JMH.
1:      * Faster than calling both currentTimeMillis() and nanoTime().
1:      *
1:      * There is also the issue of how scalable nanoTime() and currentTimeMillis() are which is a moving target.
1:      *
1:      * These timestamps don't order with System.currentTimeMillis() because currentTimeMillis() can tick over
0:      * before this one does. I have seen it behind by as much as 2 milliseconds.
1:      */
0:     public static final long convert(long nanoTime)
1:     {
1:         final long timestampBase[] = TIMESTAMP_BASE;
1:         return timestampBase[0] + TimeUnit.NANOSECONDS.toMillis(nanoTime - timestampBase[1]);
1:     }
1: 
1:     static
1:     {
0:         //Pick up updates from NTP periodically
0:         Thread t = new Thread("NanoTimeToCurrentTimeMillis updater")
1:         {
0:             @Override
0:             public void run()
1:             {
0:                 while (true)
1:                 {
0:                     try
1:                     {
0:                         synchronized (TIMESTAMP_UPDATE)
1:                         {
0:                             TIMESTAMP_UPDATE.wait(TIMESTAMP_UPDATE_INTERVAL);
1:                         }
1:                     }
0:                     catch (InterruptedException e)
1:                     {
0:                         return;
1:                     }
1: 
0:                     TIMESTAMP_BASE = new long[] {
0:                             Math.max(TIMESTAMP_BASE[0], System.currentTimeMillis()),
0:                             Math.max(TIMESTAMP_BASE[1], System.nanoTime()) };
1:                 }
1:             }
0:         };
0:         t.setDaemon(true);
0:         t.start();
1:     }
1: }
============================================================================