1:6e5e284: /*
1:6e5e284:  * Licensed to the Apache Software Foundation (ASF) under one
1:6e5e284:  * or more contributor license agreements.  See the NOTICE file
1:6e5e284:  * distributed with this work for additional information
1:6e5e284:  * regarding copyright ownership.  The ASF licenses this file
1:6e5e284:  * to you under the Apache License, Version 2.0 (the
1:6e5e284:  * "License"); you may not use this file except in compliance
1:6e5e284:  * with the License.  You may obtain a copy of the License at
1:1a904da:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:1a904da:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:6e5e284:  */
1:34e241a: package org.apache.cassandra.locator;
1:6e5e284: 
1:0eea213: import java.net.InetAddress;
1:0f2caaa: 
1:cb1ef76: /**
1:9c0f845:  * An endpoint snitch tells Cassandra information about network topology that it can use to route
1:cb1ef76:  * requests more efficiently.
1:cb1ef76:  */
1:916c810: public abstract class AbstractNetworkTopologySnitch extends AbstractEndpointSnitch
6:0eea213: {
1:cb1ef76:     /**
1:0f2caaa:      * Return the rack for which an endpoint resides in
1:0f2caaa:      * @param endpoint a specified endpoint
1:0f2caaa:      * @return string of rack
1:cb1ef76:      */
1:5a45534:     abstract public String getRack(InetAddress endpoint);
5:0eea213: 
1:9c0f845:     /**
1:0f2caaa:      * Return the data center for which an endpoint resides in
1:0f2caaa:      * @param endpoint a specified endpoint
1:0f2caaa:      * @return string of data center
1:9c0f845:      */
1:5a45534:     abstract public String getDatacenter(InetAddress endpoint);
1:0eea213: 
1:67c5720:     public int compareEndpoints(InetAddress address, InetAddress a1, InetAddress a2)
1:0eea213:     {
1:5a45534:         if (address.equals(a1) && !address.equals(a2))
2:5a45534:             return -1;
1:5a45534:         if (address.equals(a2) && !address.equals(a1))
2:5a45534:             return 1;
1:0f2caaa: 
1:5a45534:         String addressDatacenter = getDatacenter(address);
1:5a45534:         String a1Datacenter = getDatacenter(a1);
1:5a45534:         String a2Datacenter = getDatacenter(a2);
1:5a45534:         if (addressDatacenter.equals(a1Datacenter) && !addressDatacenter.equals(a2Datacenter))
1:5a45534:             return -1;
1:5a45534:         if (addressDatacenter.equals(a2Datacenter) && !addressDatacenter.equals(a1Datacenter))
1:5a45534:             return 1;
1:0f2caaa: 
1:d4ca524:         String addressRack = getRack(address);
1:d4ca524:         String a1Rack = getRack(a1);
1:d4ca524:         String a2Rack = getRack(a2);
1:d4ca524:         if (addressRack.equals(a1Rack) && !addressRack.equals(a2Rack))
1:d4ca524:             return -1;
1:d4ca524:         if (addressRack.equals(a2Rack) && !addressRack.equals(a1Rack))
1:d4ca524:             return 1;
1:5a45534:         return 0;
1:7aac793:     }
6:0eea213: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a89c8b4
commit:45c8f53
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d4ca524
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         String addressRack = getRack(address);
1:         String a1Rack = getRack(a1);
1:         String a2Rack = getRack(a2);
1:         if (addressRack.equals(a1Rack) && !addressRack.equals(a2Rack))
1:             return -1;
1:         if (addressRack.equals(a2Rack) && !addressRack.equals(a1Rack))
1:             return 1;
commit:5001907
/////////////////////////////////////////////////////////////////////////
commit:7aac793
/////////////////////////////////////////////////////////////////////////
0:     public void sortByProximity(final InetAddress address, List<InetAddress> addresses)
1:             }
commit:916c810
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractNetworkTopologySnitch extends AbstractEndpointSnitch
commit:34e241a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.locator;
/////////////////////////////////////////////////////////////////////////
0: public abstract class AbstractRackAwareSnitch extends AbstractEndpointSnitch
commit:5a45534
/////////////////////////////////////////////////////////////////////////
1:     abstract public String getRack(InetAddress endpoint);
/////////////////////////////////////////////////////////////////////////
1:     abstract public String getDatacenter(InetAddress endpoint);
/////////////////////////////////////////////////////////////////////////
1:                 if (address.equals(a1) && !address.equals(a2))
1:                     return -1;
1:                 if (address.equals(a2) && !address.equals(a1))
1:                     return 1;
0:                 String addressRack = getRack(address);
0:                 String a1Rack = getRack(a1);
0:                 String a2Rack = getRack(a2);
0:                 if (addressRack.equals(a1Rack) && !addressRack.equals(a2Rack))
1:                     return -1;
0:                 if (addressRack.equals(a2Rack) && !addressRack.equals(a1Rack))
1:                     return 1;
1:                 String addressDatacenter = getDatacenter(address);
1:                 String a1Datacenter = getDatacenter(a1);
1:                 String a2Datacenter = getDatacenter(a2);
1:                 if (addressDatacenter.equals(a1Datacenter) && !addressDatacenter.equals(a2Datacenter))
1:                     return -1;
1:                 if (addressDatacenter.equals(a2Datacenter) && !addressDatacenter.equals(a1Datacenter))
1:                     return 1;
1:                 return 0;
commit:cb1ef76
/////////////////////////////////////////////////////////////////////////
1:  * requests more efficiently.
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Sorts the <tt>Collection</tt> of node addresses by proximity to the given address
0:      * @param address the address to sort by proximity to
0:      * @param addresses the nodes to sort
0:      * @return a new sorted <tt>List</tt>
1:      */
0:     public List<InetAddress> getSortedListByProximity(final InetAddress address, Collection<InetAddress> addresses)
0:         List<InetAddress> preferred = new ArrayList<InetAddress>(addresses);
1:     /**
0:      * Sorts the <tt>List</tt> of node addresses by proximity to the given address
0:      * @param address the address to sort the proximity by
0:      * @param addresses the nodes to sort
0:      * @return the sorted <tt>List</tt>
1:      */
commit:0f2caaa
/////////////////////////////////////////////////////////////////////////
1:      * Return the rack for which an endpoint resides in
1:      * @param endpoint a specified endpoint
1:      * @return string of rack
0:     abstract public String getRack(InetAddress endpoint) throws UnknownHostException;
1:      * Return the data center for which an endpoint resides in
1:      * @param endpoint a specified endpoint
1:      * @return string of data center
0:     abstract public String getDatacenter(InetAddress endpoint) throws UnknownHostException;
/////////////////////////////////////////////////////////////////////////
1: 
0:                     String addressRack = getRack(address);
0:                     String a1Rack = getRack(a1);
0:                     String a2Rack = getRack(a2);
0:                     if (addressRack.equals(a1Rack) && !addressRack.equals(a2Rack))
0:                     if (addressRack.equals(a2Rack) && !addressRack.equals(a1Rack))
1: 
0:                     String addressDatacenter = getDatacenter(address);
0:                     String a1Datacenter = getDatacenter(a1);
0:                     String a2Datacenter = getDatacenter(a2);
0:                     if (addressDatacenter.equals(a1Datacenter) && !addressDatacenter.equals(a2Datacenter))
0:                     if (addressDatacenter.equals(a2Datacenter) && !addressDatacenter.equals(a1Datacenter))
1: 
commit:1a904da
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0: public abstract class AbstractRackAwareSnitch implements IEndpointSnitch
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
0: public abstract class AbstractEndpointSnitch implements IEndpointSnitch
commit:9c0f845
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * An endpoint snitch tells Cassandra information about network topology that it can use to route
0:  * requests more efficiently (with "sortByProximity").  Of the abstract methods, isOnSameRack
0:  * and isInSameDataCenter are always required; getLocation is only used by DatacenterShardStrategy.
1:  */
0:      * Determines if 2 nodes are in the same rack in the data center.
/////////////////////////////////////////////////////////////////////////
0:      * Determines if 2 nodes are in the same data center.
/////////////////////////////////////////////////////////////////////////
0:      * Determines the name of the datacenter this endpoint lives in.
0:      * @param endpoint
0:      * @return the name of the datacenter the endpoint lives in
commit:6e5e284
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:0eea213
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.locator;
1: 
1: import java.net.InetAddress;
0: import java.net.UnknownHostException;
0: import java.util.*;
1: 
0: public abstract class AbstractEndpointSnitch implements IEndPointSnitch
1: {
0:     /**
0:      * Helps determine if 2 nodes are in the same rack in the data center.
0:      * @param host a specified endpoint
0:      * @param host2 another specified endpoint
0:      * @return true if on the same rack false otherwise
0:      * @throws UnknownHostException
0:      */
0:     abstract public boolean isOnSameRack(InetAddress host, InetAddress host2) throws UnknownHostException;
1: 
0:     /**
0:      * Helps determine if 2 nodes are in the same data center.
0:      * @param host a specified endpoint
0:      * @param host2 another specified endpoint
0:      * @return true if in the same data center false otherwise
0:      * @throws UnknownHostException
0:      */
0:     abstract public boolean isInSameDataCenter(InetAddress host, InetAddress host2) throws UnknownHostException;
1: 
0:     /**
0:      * Given endpoints this method will help us know the datacenter name where the node is located at.
0:      */
0:     abstract public String getLocation(InetAddress endpoint) throws UnknownHostException;
1: 
0:     public List<InetAddress> getSortedListByProximity(final InetAddress address, Collection<InetAddress> unsortedAddress)
1:     {
0:         List<InetAddress> preferred = new ArrayList<InetAddress>(unsortedAddress);
0:         sortByProximity(address, preferred);
0:         return preferred;
1:     }
1: 
0:     public List<InetAddress> sortByProximity(final InetAddress address, List<InetAddress> addresses)
1:     {
0:         Collections.sort(addresses, new Comparator<InetAddress>()
1:         {
0:             public int compare(InetAddress a1, InetAddress a2)
1:             {
0:                 try
1:                 {
0:                     if (address.equals(a1) && !address.equals(a2))
0:                         return -1;
0:                     if (address.equals(a2) && !address.equals(a1))
0:                         return 1;
0:                     if (isOnSameRack(address, a1) && !isOnSameRack(address, a2))
0:                         return -1;
0:                     if (isOnSameRack(address, a2) && !isOnSameRack(address, a1))
0:                         return 1;
0:                     if (isInSameDataCenter(address, a1) && !isInSameDataCenter(address, a2))
0:                         return -1;
0:                     if (isInSameDataCenter(address, a2) && !isInSameDataCenter(address, a1))
0:                         return 1;
0:                     return 0;
1:                 }
0:                 catch (UnknownHostException e)
1:                 {
0:                     throw new RuntimeException(e);
1:                 }
1:             }
0:         });
0:         return addresses;
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:31f4e62
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:67c5720
/////////////////////////////////////////////////////////////////////////
0:                    return compareEndpoints(address, a1, a2);
0:             };
0: 
1:     public int compareEndpoints(InetAddress address, InetAddress a1, InetAddress a2)
0:     {
0:         if (address.equals(a1) && !address.equals(a2))
0:             return -1;
0:         if (address.equals(a2) && !address.equals(a1))
0:             return 1;
0: 
0:         String addressRack = getRack(address);
0:         String a1Rack = getRack(a1);
0:         String a2Rack = getRack(a2);
0:         if (addressRack.equals(a1Rack) && !addressRack.equals(a2Rack))
0:             return -1;
0:         if (addressRack.equals(a2Rack) && !addressRack.equals(a1Rack))
0:             return 1;
0: 
0:         String addressDatacenter = getDatacenter(address);
0:         String a1Datacenter = getDatacenter(a1);
0:         String a2Datacenter = getDatacenter(a2);
0:         if (addressDatacenter.equals(a1Datacenter) && !addressDatacenter.equals(a2Datacenter))
0:             return -1;
0:         if (addressDatacenter.equals(a2Datacenter) && !addressDatacenter.equals(a1Datacenter))
0:             return 1;
0: 
0:         return 0;
0:     }
============================================================================