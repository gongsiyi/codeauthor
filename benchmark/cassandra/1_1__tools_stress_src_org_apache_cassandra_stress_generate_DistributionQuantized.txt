1:0580fb2: package org.apache.cassandra.stress.generate;
1:0580fb2: /*
1:0580fb2:  * 
1:0580fb2:  * Licensed to the Apache Software Foundation (ASF) under one
1:0580fb2:  * or more contributor license agreements.  See the NOTICE file
1:0580fb2:  * distributed with this work for additional information
1:0580fb2:  * regarding copyright ownership.  The ASF licenses this file
1:0580fb2:  * to you under the Apache License, Version 2.0 (the
1:0580fb2:  * "License"); you may not use this file except in compliance
1:0580fb2:  * with the License.  You may obtain a copy of the License at
1:0580fb2:  * 
1:0580fb2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0580fb2:  * 
1:0580fb2:  * Unless required by applicable law or agreed to in writing,
1:0580fb2:  * software distributed under the License is distributed on an
1:0580fb2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0580fb2:  * KIND, either express or implied.  See the License for the
1:0580fb2:  * specific language governing permissions and limitations
1:0580fb2:  * under the License.
1:0580fb2:  * 
1:0580fb2:  */
1:0580fb2: 
1:0580fb2: 
1:0580fb2: import java.util.Arrays;
1:0580fb2: import java.util.Random;
1:0580fb2: 
1:0580fb2: import org.apache.cassandra.stress.Stress;
1:0580fb2: 
1:0580fb2: public class DistributionQuantized extends Distribution
1:0580fb2: {
1:0580fb2: 
1:0580fb2:     final Distribution delegate;
1:0580fb2:     final long[] bounds;
1:0580fb2:     final Random random = new Random();
1:0580fb2: 
1:0580fb2:     public DistributionQuantized(Distribution delegate, int quantas)
1:0580fb2:     {
1:0580fb2:         this.delegate = delegate;
1:0580fb2:         this.bounds = new long[quantas + 1];
1:0580fb2:         bounds[0] = delegate.minValue();
1:0580fb2:         bounds[quantas] = delegate.maxValue() + 1;
1:0580fb2:         for (int i = 1 ; i < quantas ; i++)
1:0580fb2:             bounds[i] = delegate.inverseCumProb(i / (double) quantas);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     @Override
1:0580fb2:     public long next()
1:0580fb2:     {
1:0580fb2:         int quanta = quanta(delegate.next());
1:0580fb2:         return bounds[quanta] + (long) (random.nextDouble() * ((bounds[quanta + 1] - bounds[quanta])));
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public double nextDouble()
1:0580fb2:     {
1:0580fb2:         throw new UnsupportedOperationException();
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     @Override
1:0580fb2:     public long inverseCumProb(double cumProb)
1:0580fb2:     {
1:0580fb2:         long val = delegate.inverseCumProb(cumProb);
1:0580fb2:         int quanta = quanta(val);
1:0580fb2:         if (quanta < 0)
1:0580fb2:             return bounds[0];
1:0580fb2:         if (quanta >= bounds.length - 1)
1:0580fb2:             return bounds[bounds.length - 1] - 1;
1:0580fb2:         cumProb -= (quanta / ((double) bounds.length - 1));
1:0580fb2:         cumProb *= (double) bounds.length - 1;
1:0580fb2:         return bounds[quanta] + (long) (cumProb * (bounds[quanta + 1] - bounds[quanta]));
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     int quanta(long val)
1:0580fb2:     {
1:0580fb2:         int i = Arrays.binarySearch(bounds, val);
1:0580fb2:         if (i < 0)
1:0580fb2:             return -2 -i;
1:0580fb2:         return i - 1;
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public void setSeed(long seed)
1:0580fb2:     {
1:0580fb2:         delegate.setSeed(seed);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static void main(String[] args) throws Exception
1:0580fb2:     {
1:0580fb2:         Stress.main(new String[] { "print", "dist=qextreme(1..1M,2,2)"});
1:0580fb2:     }
1:0580fb2: 
1:0580fb2: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.generate;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: import org.apache.cassandra.stress.Stress;
1: 
1: public class DistributionQuantized extends Distribution
1: {
1: 
1:     final Distribution delegate;
1:     final long[] bounds;
1:     final Random random = new Random();
1: 
1:     public DistributionQuantized(Distribution delegate, int quantas)
1:     {
1:         this.delegate = delegate;
1:         this.bounds = new long[quantas + 1];
1:         bounds[0] = delegate.minValue();
1:         bounds[quantas] = delegate.maxValue() + 1;
1:         for (int i = 1 ; i < quantas ; i++)
1:             bounds[i] = delegate.inverseCumProb(i / (double) quantas);
1:     }
1: 
1:     @Override
1:     public long next()
1:     {
1:         int quanta = quanta(delegate.next());
1:         return bounds[quanta] + (long) (random.nextDouble() * ((bounds[quanta + 1] - bounds[quanta])));
1:     }
1: 
1:     public double nextDouble()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     @Override
1:     public long inverseCumProb(double cumProb)
1:     {
1:         long val = delegate.inverseCumProb(cumProb);
1:         int quanta = quanta(val);
1:         if (quanta < 0)
1:             return bounds[0];
1:         if (quanta >= bounds.length - 1)
1:             return bounds[bounds.length - 1] - 1;
1:         cumProb -= (quanta / ((double) bounds.length - 1));
1:         cumProb *= (double) bounds.length - 1;
1:         return bounds[quanta] + (long) (cumProb * (bounds[quanta + 1] - bounds[quanta]));
1:     }
1: 
1:     int quanta(long val)
1:     {
1:         int i = Arrays.binarySearch(bounds, val);
1:         if (i < 0)
1:             return -2 -i;
1:         return i - 1;
1:     }
1: 
1:     public void setSeed(long seed)
1:     {
1:         delegate.setSeed(seed);
1:     }
1: 
1:     public static void main(String[] args) throws Exception
1:     {
1:         Stress.main(new String[] { "print", "dist=qextreme(1..1M,2,2)"});
1:     }
1: 
1: }
============================================================================