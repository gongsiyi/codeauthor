1:8704006: /*
1:8704006: * Licensed to the Apache Software Foundation (ASF) under one
1:8704006: * or more contributor license agreements.  See the NOTICE file
1:8704006: * distributed with this work for additional information
1:8704006: * regarding copyright ownership.  The ASF licenses this file
1:8704006: * to you under the Apache License, Version 2.0 (the
1:8704006: * "License"); you may not use this file except in compliance
1:8704006: * with the License.  You may obtain a copy of the License at
1:8704006: *
1:8704006: *    http://www.apache.org/licenses/LICENSE-2.0
1:8704006: *
1:8704006: * Unless required by applicable law or agreed to in writing,
1:8704006: * software distributed under the License is distributed on an
1:8704006: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8704006: * KIND, either express or implied.  See the License for the
1:8704006: * specific language governing permissions and limitations
1:8704006: * under the License.
1:8704006: */
1:8704006: package org.apache.cassandra.utils.concurrent;
1:8704006: 
1:9797511: import org.junit.BeforeClass;
1:8704006: import org.junit.Ignore;
1:8704006: import org.junit.Test;
1:8704006: 
1:8704006: import junit.framework.Assert;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:8704006: 
1:8704006: @Ignore
1:8704006: public abstract class AbstractTransactionalTest
1:8704006: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:8704006: 
1:8704006:     protected abstract TestableTransaction newTest() throws Exception;
1:8704006: 
1:8704006:     @Test
1:8704006:     public void testNoPrepare() throws Exception
1:8704006:     {
1:8704006:         TestableTransaction txn;
1:8704006: 
1:8704006:         txn = newTest();
1:8704006:         txn.assertInProgress();
1:8704006:         txn.testing.close();
1:8704006:         txn.assertAborted();
1:8704006: 
1:8704006:         txn = newTest();
1:8704006:         txn.assertInProgress();
1:8704006:         Assert.assertNull(txn.testing.abort(null));
1:8704006:         txn.assertAborted();
1:8704006:     }
1:8704006: 
1:8704006:     @Test
1:8704006:     public void testPrepare() throws Exception
1:8704006:     {
1:8704006:         TestableTransaction txn;
1:8704006:         txn = newTest();
1:8704006:         txn.assertInProgress();
1:8704006:         txn.testing.prepareToCommit();
1:8704006:         txn.assertPrepared();
1:8704006:         txn.testing.close();
1:8704006:         txn.assertAborted();
1:8704006: 
1:8704006:         txn = newTest();
1:8704006:         txn.assertInProgress();
1:8704006:         txn.testing.prepareToCommit();
1:8704006:         txn.assertPrepared();
1:8704006:         Assert.assertNull(txn.testing.abort(null));
1:8704006:         txn.assertAborted();
1:8704006:     }
1:8704006: 
1:8704006:     @Test
1:8704006:     public void testCommit() throws Exception
1:8704006:     {
1:8704006:         TestableTransaction txn = newTest();
1:8704006:         txn.assertInProgress();
1:8704006:         txn.testing.prepareToCommit();
1:8704006:         txn.assertPrepared();
1:8704006:         Assert.assertNull(txn.testing.commit(null));
1:8704006:         txn.assertCommitted();
1:8704006:         txn.testing.close();
1:8704006:         txn.assertCommitted();
1:8704006:         Throwable t = txn.testing.abort(null);
1:8704006:         Assert.assertTrue(t instanceof IllegalStateException);
1:8704006:         txn.assertCommitted();
1:8704006:     }
1:8704006: 
1:8704006:     @Test
1:8704006:     public void testThrowableReturn() throws Exception
1:8704006:     {
1:8704006:         TestableTransaction txn;
1:8704006:         txn = newTest();
1:8704006:         Throwable t = new RuntimeException();
1:8704006:         txn.testing.prepareToCommit();
1:b09e60f: 
1:b09e60f:         if (txn.commitCanThrow())
1:b09e60f:         {
1:b09e60f:             try
1:b09e60f:             {
1:b09e60f:                 txn.testing.commit(t);
1:b09e60f:             }
1:b09e60f:             catch (Throwable tt)
1:b09e60f:             {
1:b09e60f:                 Assert.assertEquals(t, tt);
1:b09e60f:             }
1:b09e60f: 
1:b09e60f:             Assert.assertEquals(t, txn.testing.abort(t));
1:b09e60f:             Assert.assertEquals(0, t.getSuppressed().length);
1:b09e60f:         }
1:b09e60f:         else
1:b09e60f:         {
1:b09e60f:             Assert.assertEquals(t, txn.testing.commit(t));
1:b09e60f:             Assert.assertEquals(t, txn.testing.abort(t));
1:b09e60f:             Assert.assertTrue(t.getSuppressed()[0] instanceof IllegalStateException);
1:b09e60f:         }
1:b09e60f: 
1:b09e60f: 
1:8704006:     }
1:8704006: 
1:8704006:     @Test
1:8704006:     public void testBadCommit() throws Exception
1:8704006:     {
1:8704006:         TestableTransaction txn;
1:8704006:         txn = newTest();
1:8704006:         try
1:8704006:         {
1:8704006:             txn.testing.commit(null);
1:8704006:             Assert.assertTrue(false);
1:8704006:         }
1:8704006:         catch (IllegalStateException t)
1:8704006:         {
1:8704006:         }
1:8704006:         txn.assertInProgress();
1:8704006:         Assert.assertNull(txn.testing.abort(null));
1:8704006:         txn.assertAborted();
1:8704006:         try
1:8704006:         {
1:8704006:             txn.testing.commit(null);
1:8704006:             Assert.assertTrue(false);
1:8704006:         }
1:8704006:         catch (IllegalStateException t)
1:8704006:         {
1:8704006:         }
1:8704006:         txn.assertAborted();
1:8704006:     }
1:8704006: 
1:8704006: 
1:8704006:     public static abstract class TestableTransaction
1:8704006:     {
1:8704006:         final Transactional testing;
1:8704006:         public TestableTransaction(Transactional transactional)
1:8704006:         {
1:8704006:             this.testing = transactional;
1:8704006:         }
1:8704006: 
1:8704006:         protected abstract void assertInProgress() throws Exception;
1:8704006:         protected abstract void assertPrepared() throws Exception;
1:8704006:         protected abstract void assertAborted() throws Exception;
1:8704006:         protected abstract void assertCommitted() throws Exception;
1:b09e60f: 
1:b09e60f:         protected boolean commitCanThrow()
1:b09e60f:         {
1:b09e60f:             return false;
1:b09e60f:         }
1:8704006:     }
1:8704006: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (txn.commitCanThrow())
1:         {
1:             try
1:             {
1:                 txn.testing.commit(t);
1:             }
1:             catch (Throwable tt)
1:             {
1:                 Assert.assertEquals(t, tt);
1:             }
1: 
1:             Assert.assertEquals(t, txn.testing.abort(t));
1:             Assert.assertEquals(0, t.getSuppressed().length);
1:         }
1:         else
1:         {
1:             Assert.assertEquals(t, txn.testing.commit(t));
1:             Assert.assertEquals(t, txn.testing.abort(t));
1:             Assert.assertTrue(t.getSuppressed()[0] instanceof IllegalStateException);
1:         }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         protected boolean commitCanThrow()
1:         {
1:             return false;
1:         }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8704006
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: 
1: @Ignore
1: public abstract class AbstractTransactionalTest
1: {
1: 
1:     protected abstract TestableTransaction newTest() throws Exception;
1: 
1:     @Test
1:     public void testNoPrepare() throws Exception
1:     {
1:         TestableTransaction txn;
1: 
1:         txn = newTest();
1:         txn.assertInProgress();
1:         txn.testing.close();
1:         txn.assertAborted();
1: 
1:         txn = newTest();
1:         txn.assertInProgress();
1:         Assert.assertNull(txn.testing.abort(null));
1:         txn.assertAborted();
1:     }
1: 
1:     @Test
1:     public void testPrepare() throws Exception
1:     {
1:         TestableTransaction txn;
1:         txn = newTest();
1:         txn.assertInProgress();
1:         txn.testing.prepareToCommit();
1:         txn.assertPrepared();
1:         txn.testing.close();
1:         txn.assertAborted();
1: 
1:         txn = newTest();
1:         txn.assertInProgress();
1:         txn.testing.prepareToCommit();
1:         txn.assertPrepared();
1:         Assert.assertNull(txn.testing.abort(null));
1:         txn.assertAborted();
1:     }
1: 
1:     @Test
1:     public void testCommit() throws Exception
1:     {
1:         TestableTransaction txn = newTest();
1:         txn.assertInProgress();
1:         txn.testing.prepareToCommit();
1:         txn.assertPrepared();
1:         Assert.assertNull(txn.testing.commit(null));
1:         txn.assertCommitted();
1:         txn.testing.close();
1:         txn.assertCommitted();
1:         Throwable t = txn.testing.abort(null);
1:         Assert.assertTrue(t instanceof IllegalStateException);
1:         txn.assertCommitted();
1:     }
1: 
1:     @Test
1:     public void testThrowableReturn() throws Exception
1:     {
1:         TestableTransaction txn;
1:         txn = newTest();
1:         Throwable t = new RuntimeException();
1:         txn.testing.prepareToCommit();
0:         Assert.assertEquals(t, txn.testing.commit(t));
0:         Assert.assertEquals(t, txn.testing.abort(t));
0:         Assert.assertTrue(t.getSuppressed()[0] instanceof IllegalStateException);
1:     }
1: 
1:     @Test
1:     public void testBadCommit() throws Exception
1:     {
1:         TestableTransaction txn;
1:         txn = newTest();
1:         try
1:         {
1:             txn.testing.commit(null);
1:             Assert.assertTrue(false);
1:         }
1:         catch (IllegalStateException t)
1:         {
1:         }
1:         txn.assertInProgress();
1:         Assert.assertNull(txn.testing.abort(null));
1:         txn.assertAborted();
1:         try
1:         {
1:             txn.testing.commit(null);
1:             Assert.assertTrue(false);
1:         }
1:         catch (IllegalStateException t)
1:         {
1:         }
1:         txn.assertAborted();
1:     }
1: 
1: 
1:     public static abstract class TestableTransaction
1:     {
1:         final Transactional testing;
1:         public TestableTransaction(Transactional transactional)
1:         {
1:             this.testing = transactional;
1:         }
1: 
1:         protected abstract void assertInProgress() throws Exception;
1:         protected abstract void assertPrepared() throws Exception;
1:         protected abstract void assertAborted() throws Exception;
1:         protected abstract void assertCommitted() throws Exception;
1:     }
1: }
============================================================================