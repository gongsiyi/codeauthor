1:a950b92: /*
1:a950b92:  * Licensed to the Apache Software Foundation (ASF) under one
1:a950b92:  * or more contributor license agreements.  See the NOTICE file
1:a950b92:  * distributed with this work for additional information
1:a950b92:  * regarding copyright ownership.  The ASF licenses this file
1:a950b92:  * to you under the Apache License, Version 2.0 (the
1:a950b92:  * "License"); you may not use this file except in compliance
1:a950b92:  * with the License.  You may obtain a copy of the License at
1:a950b92:  *
1:a950b92:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a950b92:  *
1:a950b92:  * Unless required by applicable law or agreed to in writing, software
1:a950b92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a950b92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a950b92:  * See the License for the specific language governing permissions and
1:a950b92:  * limitations under the License.
1:a950b92:  */
1:0626be8: package org.apache.cassandra.index.internal.composites;
4:a950b92: 
1:a950b92: import java.nio.ByteBuffer;
1:a950b92: 
1:a950b92: import org.apache.cassandra.db.*;
1:0626be8: import org.apache.cassandra.db.rows.Cell;
1:0626be8: import org.apache.cassandra.db.rows.CellPath;
1:0626be8: import org.apache.cassandra.db.rows.Row;
1:0626be8: import org.apache.cassandra.index.internal.CassandraIndex;
1:0626be8: import org.apache.cassandra.index.internal.IndexEntry;
1:0626be8: import org.apache.cassandra.schema.IndexMetadata;
1:a950b92: 
1:a950b92: /**
1:a950b92:  * Index on a REGULAR column definition on a composite type.
1:a950b92:  *
1:a950b92:  * A cell indexed by this index will have the general form:
1:a950b92:  *   ck_0 ... ck_n c_name : v
1:a950b92:  * where ck_i are the cluster keys, c_name the last component of the cell
1:a950b92:  * composite name (or second to last if collections are in use, but this
1:a950b92:  * has no impact) and v the cell value.
1:a950b92:  *
1:a950b92:  * Such a cell is indexed if c_name == columnDef.name, and it will generate
1:a950b92:  * (makeIndexColumnName()) an index entry whose:
1:a950b92:  *   - row key will be the value v (getIndexedValue()).
1:a950b92:  *   - cell name will
1:a950b92:  *       rk ck_0 ... ck_n
1:a950b92:  *     where rk is the row key of the initial cell. I.e. the index entry store
1:a950b92:  *     all the information require to locate back the indexed cell.
1:a950b92:  */
1:0626be8: public class RegularColumnIndex extends CassandraIndex
3:a950b92: {
1:0626be8:     public RegularColumnIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:0626be8:     {
1:0626be8:         super(baseCfs, indexDef);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:0626be8:                                       Clustering clustering,
1:0626be8:                                       CellPath path,
1:0626be8:                                       ByteBuffer cellValue)
1:a950b92:     {
1:a991b64:         return cellValue;
3:a950b92:     }
1:a950b92: 
1:0626be8:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:0626be8:                                                ClusteringPrefix prefix,
1:0626be8:                                                CellPath path)
1:a950b92:     {
1:a991b64:         CBuilder builder = CBuilder.create(getIndexComparator());
1:0626be8:         builder.add(partitionKey);
1:a991b64:         for (int i = 0; i < prefix.size(); i++)
1:a991b64:             builder.add(prefix.get(i));
1:0626be8: 
1:9e74891:         // Note: if indexing a static column, prefix will be Clustering.STATIC_CLUSTERING
1:9e74891:         // so the Clustering obtained from builder::build will contain a value for only
1:9e74891:         // the partition key. At query time though, this is all that's needed as the entire
1:9e74891:         // base table partition should be returned for any mathching index entry.
1:a991b64:         return builder;
1:a950b92:     }
1:a950b92: 
1:0626be8:     public IndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1:a950b92:     {
1:a991b64:         Clustering clustering = indexEntry.clustering();
1:9e74891: 
1:9e74891:         Clustering indexedEntryClustering = null;
1:9e74891:         if (getIndexedColumn().isStatic())
1:9e74891:             indexedEntryClustering = Clustering.STATIC_CLUSTERING;
1:9e74891:         else
1:9e74891:         {
1:9e74891:             ClusteringComparator baseComparator = baseCfs.getComparator();
1:9e74891:             CBuilder builder = CBuilder.create(baseComparator);
1:9e74891:             for (int i = 0; i < baseComparator.size(); i++)
1:9e74891:                 builder.add(clustering.get(i + 1));
1:9e74891:             indexedEntryClustering = builder.build();
1:9e74891:         }
1:0626be8: 
1:0626be8:         return new IndexEntry(indexedValue,
1:0626be8:                                 clustering,
1:0626be8:                                 indexEntry.primaryKeyLivenessInfo().timestamp(),
1:0626be8:                                 clustering.get(0),
1:9e74891:                                 indexedEntryClustering);
1:a950b92:     }
1:a950b92: 
1:a991b64:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:a950b92:     {
1:0626be8:         Cell cell = data.getCell(indexedColumn);
1:a991b64:         return cell == null
1:a991b64:             || !cell.isLive(nowInSec)
1:0626be8:             || indexedColumn.type.compare(indexValue, cell.value()) != 0;
1:a950b92:     }
1:a950b92: }
============================================================================
author:Taiyuan Zhang
-------------------------------------------------------------------------------
commit:9e74891
/////////////////////////////////////////////////////////////////////////
1:         // Note: if indexing a static column, prefix will be Clustering.STATIC_CLUSTERING
1:         // so the Clustering obtained from builder::build will contain a value for only
1:         // the partition key. At query time though, this is all that's needed as the entire
1:         // base table partition should be returned for any mathching index entry.
1: 
1:         Clustering indexedEntryClustering = null;
1:         if (getIndexedColumn().isStatic())
1:             indexedEntryClustering = Clustering.STATIC_CLUSTERING;
1:         else
1:         {
1:             ClusteringComparator baseComparator = baseCfs.getComparator();
1:             CBuilder builder = CBuilder.create(baseComparator);
1:             for (int i = 0; i < baseComparator.size(); i++)
1:                 builder.add(clustering.get(i + 1));
1:             indexedEntryClustering = builder.build();
1:         }
1:                                 indexedEntryClustering);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.index.internal.composites;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.CellPath;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.index.internal.CassandraIndex;
1: import org.apache.cassandra.index.internal.IndexEntry;
1: import org.apache.cassandra.schema.IndexMetadata;
/////////////////////////////////////////////////////////////////////////
1: public class RegularColumnIndex extends CassandraIndex
1:     public RegularColumnIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:     {
1:         super(baseCfs, indexDef);
1:     }
1: 
1:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:                                       Clustering clustering,
1:                                       CellPath path,
1:                                       ByteBuffer cellValue)
1:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:                                                ClusteringPrefix prefix,
1:                                                CellPath path)
1:         builder.add(partitionKey);
1: 
1:     public IndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1: 
1:         return new IndexEntry(indexedValue,
1:                                 clustering,
1:                                 indexEntry.primaryKeyLivenessInfo().timestamp(),
1:                                 clustering.get(0),
0:                                 builder.build());
1:         Cell cell = data.getCell(indexedColumn);
1:             || indexedColumn.type.compare(indexValue, cell.value()) != 0;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.rows.*;
/////////////////////////////////////////////////////////////////////////
0:     protected ByteBuffer getIndexedValue(ByteBuffer rowKey, Clustering clustering, ByteBuffer cellValue, CellPath path)
1:         return cellValue;
0:     protected CBuilder buildIndexClusteringPrefix(ByteBuffer rowKey, ClusteringPrefix prefix, CellPath path)
1:         CBuilder builder = CBuilder.create(getIndexComparator());
1:         for (int i = 0; i < prefix.size(); i++)
1:             builder.add(prefix.get(i));
1:         return builder;
0:     public IndexedEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1:         Clustering clustering = indexEntry.clustering();
0:         ClusteringComparator baseComparator = baseCfs.getComparator();
0:         CBuilder builder = CBuilder.create(baseComparator);
0:         for (int i = 0; i < baseComparator.size(); i++)
0:             builder.add(clustering.get(i + 1));
0:         return new IndexedEntry(indexedValue, clustering, indexEntry.primaryKeyLivenessInfo().timestamp(), clustering.get(0), builder.build());
1:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
0:         Cell cell = data.getCell(columnDef);
1:         return cell == null
1:             || !cell.isLive(nowInSec)
0:             || columnDef.type.compare(indexValue, cell.value()) != 0;
commit:63b1ef4
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0:     protected ByteBuffer getIndexedValue(ByteBuffer rowKey, Cell cell)
0:         return cell.value();
/////////////////////////////////////////////////////////////////////////
0:     public IndexedEntry decodeEntry(DecoratedKey indexedValue, Cell indexEntry)
/////////////////////////////////////////////////////////////////////////
0:         Cell liveCell = data.getColumn(name);
0:         if (liveCell == null || liveCell.isMarkedForDelete(now))
0:         ByteBuffer liveValue = liveCell.value();
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.composites.*;
/////////////////////////////////////////////////////////////////////////
0:     public static CellNameType buildIndexComparator(CFMetaData baseMetadata, ColumnDefinition columnDef)
0:             types.add(baseMetadata.comparator.subtype(i));
0:         return new CompoundDenseCellNameType(types);
/////////////////////////////////////////////////////////////////////////
0:     protected Composite makeIndexColumnPrefix(ByteBuffer rowKey, Composite cellName)
0:         CBuilder builder = getIndexComparator().prefixBuilder();
0:         for (int i = 0; i < Math.min(columnDef.position(), cellName.size()); i++)
0:             builder.add(cellName.get(i));
0:         return builder.build();
0:         CBuilder builder = baseCfs.getComparator().builder();
0:             builder.add(indexEntry.name().get(i + 1));
0:         return new IndexedEntry(indexedValue, indexEntry.name(), indexEntry.timestamp(), indexEntry.name().get(0), builder.build());
0:     public boolean indexes(CellName name)
0:         return name.size() > columnDef.position()
0:             && comp.compare(name.get(columnDef.position()), columnDef.name.bytes) == 0;
0:         CellName name = data.getComparator().create(entry.indexedEntryPrefix, columnDef.name);
0:         Column liveColumn = data.getColumn(name);
commit:5f5905d
/////////////////////////////////////////////////////////////////////////
0:         int prefixSize = columnDef.position();
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < Math.min(columnDef.position(), components.length); i++)
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < columnDef.position(); i++)
/////////////////////////////////////////////////////////////////////////
0:         return components.length > columnDef.position()
0:             && comp.compare(components[columnDef.position()], columnDef.name.bytes) == 0;
/////////////////////////////////////////////////////////////////////////
0:         return columnDef.type.compare(entry.indexValue.key, liveValue) != 0;
commit:a950b92
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.db.index.composites;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.cql3.ColumnNameBuilder;
1: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.index.SecondaryIndex;
0: import org.apache.cassandra.db.index.SecondaryIndexSearcher;
0: import org.apache.cassandra.db.marshal.*;
1: 
1: /**
1:  * Index on a REGULAR column definition on a composite type.
1:  *
1:  * A cell indexed by this index will have the general form:
1:  *   ck_0 ... ck_n c_name : v
1:  * where ck_i are the cluster keys, c_name the last component of the cell
1:  * composite name (or second to last if collections are in use, but this
1:  * has no impact) and v the cell value.
1:  *
1:  * Such a cell is indexed if c_name == columnDef.name, and it will generate
1:  * (makeIndexColumnName()) an index entry whose:
1:  *   - row key will be the value v (getIndexedValue()).
1:  *   - cell name will
1:  *       rk ck_0 ... ck_n
1:  *     where rk is the row key of the initial cell. I.e. the index entry store
1:  *     all the information require to locate back the indexed cell.
1:  */
0: public class CompositesIndexOnRegular extends CompositesIndex
1: {
0:     public static CompositeType buildIndexComparator(CFMetaData baseMetadata, ColumnDefinition columnDef)
1:     {
0:         int prefixSize = columnDef.componentIndex;
0:         List<AbstractType<?>> types = new ArrayList<AbstractType<?>>(prefixSize + 1);
0:         types.add(SecondaryIndex.keyComparator);
0:         for (int i = 0; i < prefixSize; i++)
0:             types.add(((CompositeType)baseMetadata.comparator).types.get(i));
0:         return CompositeType.getInstance(types);
1:     }
1: 
0:     protected ByteBuffer getIndexedValue(ByteBuffer rowKey, Column column)
1:     {
0:         return column.value();
1:     }
1: 
0:     protected ColumnNameBuilder makeIndexColumnNameBuilder(ByteBuffer rowKey, ByteBuffer columnName)
1:     {
0:         CompositeType baseComparator = (CompositeType)baseCfs.getComparator();
0:         ByteBuffer[] components = baseComparator.split(columnName);
0:         CompositeType.Builder builder = getIndexComparator().builder();
0:         builder.add(rowKey);
0:         for (int i = 0; i < Math.min(columnDef.componentIndex, components.length); i++)
0:             builder.add(components[i]);
0:         return builder;
1:     }
1: 
0:     public IndexedEntry decodeEntry(DecoratedKey indexedValue, Column indexEntry)
1:     {
0:         ByteBuffer[] components = getIndexComparator().split(indexEntry.name());
0:         CompositeType.Builder builder = getBaseComparator().builder();
0:         for (int i = 0; i < columnDef.componentIndex; i++)
0:             builder.add(components[i + 1]);
0:         return new IndexedEntry(indexedValue, indexEntry.name(), indexEntry.timestamp(), components[0], builder);
1:     }
1: 
0:     @Override
0:     public boolean indexes(ByteBuffer name)
1:     {
0:         ByteBuffer[] components = getBaseComparator().split(name);
0:         AbstractType<?> comp = baseCfs.metadata.getColumnDefinitionComparator(columnDef);
0:         return components.length > columnDef.componentIndex
0:             && comp.compare(components[columnDef.componentIndex], columnDef.name) == 0;
1:     }
1: 
0:     public boolean isStale(IndexedEntry entry, ColumnFamily data)
1:     {
0:         ByteBuffer bb = entry.indexedEntryNameBuilder.copy().add(columnDef.name).build();
0:         Column liveColumn = data.getColumn(bb);
0:         if (liveColumn == null || liveColumn.isMarkedForDelete())
0:             return true;
1: 
0:         ByteBuffer liveValue = liveColumn.value();
0:         return columnDef.getValidator().compare(entry.indexValue.key, liveValue) != 0;
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:4485e6d
/////////////////////////////////////////////////////////////////////////
0:         Cell cell = data.getColumn(name);
0:         return cell == null || !cell.isLive(now) || columnDef.type.compare(entry.indexValue.getKey(), cell.value()) != 0;
commit:1f7628c
/////////////////////////////////////////////////////////////////////////
0:     public boolean isStale(IndexedEntry entry, ColumnFamily data, long now)
0:         if (liveColumn == null || liveColumn.isMarkedForDelete(now))
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:         return columnDef.type.compare(entry.indexValue.getKey(), liveValue) != 0;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:bc6b5f4
============================================================================