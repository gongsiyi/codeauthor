1:6165840: /*
1:6165840:  * Licensed to the Apache Software Foundation (ASF) under one
1:6165840:  * or more contributor license agreements.  See the NOTICE file
1:6165840:  * distributed with this work for additional information
1:6165840:  * regarding copyright ownership.  The ASF licenses this file
1:6165840:  * to you under the Apache License, Version 2.0 (the
1:6165840:  * "License"); you may not use this file except in compliance
1:6165840:  * with the License.  You may obtain a copy of the License at
1:6165840:  *
1:6165840:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6165840:  *
1:6165840:  * Unless required by applicable law or agreed to in writing,
1:6165840:  * software distributed under the License is distributed on an
1:6165840:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6165840:  * KIND, either express or implied.  See the License for the
1:6165840:  * specific language governing permissions and limitations
1:6165840:  * under the License.
1:6165840:  */
1:5b7dd5e: package org.apache.cassandra.metrics;
1:5b7dd5e: 
1:5b7dd5e: import java.util.concurrent.Callable;
1:5b7dd5e: 
1:8896a70: import com.codahale.metrics.Gauge;
1:f00e7a7: import com.codahale.metrics.Meter;
1:8896a70: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:5b7dd5e: 
1:5b7dd5e: public class ClientMetrics
4:5b7dd5e: {
1:5b7dd5e:     private static final MetricNameFactory factory = new DefaultNameFactory("Client");
1:5b7dd5e:     
1:5b7dd5e:     public static final ClientMetrics instance = new ClientMetrics();
1:5b7dd5e:     
1:5b7dd5e:     private ClientMetrics()
1:5b7dd5e:     {
3:5b7dd5e:     }
1:5b7dd5e: 
1:5b7dd5e:     public void addCounter(String name, final Callable<Integer> provider)
1:5b7dd5e:     {
1:f00e7a7:         Metrics.register(factory.createMetricName(name), (Gauge<Integer>) () -> {
1:f00e7a7:             try
1:5b7dd5e:             {
1:f00e7a7:                 return provider.call();
1:f00e7a7:             } catch (Exception e)
1:f00e7a7:             {
1:f00e7a7:                 throw new RuntimeException(e);
1:5b7dd5e:             }
1:5b7dd5e:         });
1:5b7dd5e:     }
1:f00e7a7: 
1:f00e7a7:     public Meter addMeter(String name)
1:f00e7a7:     {
1:f00e7a7:         return Metrics.meter(factory.createMetricName(name));
1:f00e7a7:     }
1:5b7dd5e: }
============================================================================
author:Soumava Ghosh
-------------------------------------------------------------------------------
commit:f00e7a7
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Meter;
/////////////////////////////////////////////////////////////////////////
1:         Metrics.register(factory.createMetricName(name), (Gauge<Integer>) () -> {
1:             try
1:                 return provider.call();
1:             } catch (Exception e)
1:             {
1:                 throw new RuntimeException(e);
1: 
1:     public Meter addMeter(String name)
1:     {
1:         return Metrics.meter(factory.createMetricName(name));
1:     }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Gauge;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
0:         Metrics.register(factory.createMetricName(name), new Gauge<Integer>()
0:             public Integer getValue()
0:                 } catch (Exception e)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:6165840
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:5b7dd5e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.metrics;
1: 
1: import java.util.concurrent.Callable;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Gauge;
1: 
1: public class ClientMetrics
1: {
1:     private static final MetricNameFactory factory = new DefaultNameFactory("Client");
1:     
1:     public static final ClientMetrics instance = new ClientMetrics();
1:     
1:     private ClientMetrics()
1:     {
1:     }
1: 
1:     public void addCounter(String name, final Callable<Integer> provider)
1:     {
0:         Metrics.newGauge(factory.createMetricName(name), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
0:                 try
1:                 {
0:                     return provider.call();
1:                 }
0:                 catch (Exception e)
1:                 {
0:                     throw new RuntimeException(e);
1:                 }
1:             }
1:         });
1:     }
1: }
============================================================================