1:65a7088: /*
1:65a7088:  * Licensed to the Apache Software Foundation (ASF) under one
1:65a7088:  * or more contributor license agreements.  See the NOTICE file
1:65a7088:  * distributed with this work for additional information
1:65a7088:  * regarding copyright ownership.  The ASF licenses this file
1:65a7088:  * to you under the Apache License, Version 2.0 (the
1:65a7088:  * "License"); you may not use this file except in compliance
1:65a7088:  * with the License.  You may obtain a copy of the License at
1:65a7088:  *
1:65a7088:  *     http://www.apache.org/licenses/LICENSE-2.0
1:65a7088:  *
1:65a7088:  * Unless required by applicable law or agreed to in writing, software
1:65a7088:  * distributed under the License is distributed on an "AS IS" BASIS,
1:65a7088:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:65a7088:  * See the License for the specific language governing permissions and
1:65a7088:  * limitations under the License.
1:65a7088:  */
1:65a7088: package org.apache.cassandra.cql3.restrictions;
1:cb5897f: 
1:89464ea: import java.util.List;
1:cb5897f: 
1:0626be8: import org.apache.cassandra.config.ColumnDefinition;
1:65a7088: import org.apache.cassandra.cql3.Operator;
1:65a7088: import org.apache.cassandra.cql3.Term;
1:cb5897f: import org.apache.cassandra.cql3.functions.Function;
1:65a7088: import org.apache.cassandra.cql3.statements.Bound;
1:0626be8: import org.apache.cassandra.index.Index;
2:65a7088: 
1:65a7088: final class TermSlice
1:65a7088: {
1:65a7088:     /**
1:65a7088:      * The slice boundaries.
1:65a7088:      */
1:65a7088:     private final Term[] bounds;
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Specifies if a slice boundary is inclusive or not.
1:65a7088:      */
1:65a7088:     private final boolean[] boundInclusive;
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Creates a new <code>TermSlice</code> with the specified boundaries.
1:65a7088:      *
1:65a7088:      * @param start the lower boundary
1:65a7088:      * @param includeStart <code>true</code> if the lower boundary is inclusive
1:65a7088:      * @param end the upper boundary
1:65a7088:      * @param includeEnd <code>true</code> if the upper boundary is inclusive
1:65a7088:      */
1:65a7088:     private TermSlice(Term start, boolean includeStart, Term end, boolean includeEnd)
1:65a7088:     {
1:65a7088:         bounds = new Term[]{start, end};
1:65a7088:         boundInclusive = new boolean[]{includeStart, includeEnd};
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Creates a new <code>TermSlice</code> with the specified boundary.
1:65a7088:      *
1:65a7088:      * @param bound the boundary type
1:65a7088:      * @param include <code>true</code> if the boundary is inclusive
1:65a7088:      * @param term the value
1:65a7088:      * @return a new <code>TermSlice</code> instance
1:65a7088:      */
1:65a7088:     public static TermSlice newInstance(Bound bound, boolean include, Term term)
1:65a7088:     {
1:68d2526:         return  bound.isStart() ? new TermSlice(term, include, null, false)
1:65a7088:                                 : new TermSlice(null, false, term, include);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Returns the boundary value.
1:65a7088:      *
1:65a7088:      * @param bound the boundary type
1:65a7088:      * @return the boundary value
1:65a7088:      */
1:65a7088:     public Term bound(Bound bound)
1:65a7088:     {
1:65a7088:         return bounds[bound.idx];
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks if this slice has a boundary for the specified type.
1:65a7088:      *
1:65a7088:      * @param b the boundary type
1:65a7088:      * @return <code>true</code> if this slice has a boundary for the specified type, <code>false</code> otherwise.
1:65a7088:      */
1:65a7088:     public boolean hasBound(Bound b)
1:65a7088:     {
1:65a7088:         return bounds[b.idx] != null;
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Checks if this slice boundary is inclusive for the specified type.
1:65a7088:      *
1:65a7088:      * @param b the boundary type
1:65a7088:      * @return <code>true</code> if this slice boundary is inclusive for the specified type,
1:65a7088:      * <code>false</code> otherwise.
1:65a7088:      */
1:65a7088:     public boolean isInclusive(Bound b)
1:65a7088:     {
1:65a7088:         return bounds[b.idx] == null || boundInclusive[b.idx];
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Merges this slice with the specified one.
1:65a7088:      *
1:65a7088:      * @param otherSlice the slice to merge to
1:65a7088:      * @return the new slice resulting from the merge
1:65a7088:      */
1:65a7088:     public TermSlice merge(TermSlice otherSlice)
1:65a7088:     {
1:65a7088:         if (hasBound(Bound.START))
1:65a7088:         {
1:65a7088:             assert !otherSlice.hasBound(Bound.START);
1:65a7088: 
1:68d2526:             return new TermSlice(bound(Bound.START),
1:65a7088:                                   isInclusive(Bound.START),
1:65a7088:                                   otherSlice.bound(Bound.END),
1:65a7088:                                   otherSlice.isInclusive(Bound.END));
1:65a7088:         }
1:65a7088:         assert !otherSlice.hasBound(Bound.END);
1:65a7088: 
1:68d2526:         return new TermSlice(otherSlice.bound(Bound.START),
1:65a7088:                               otherSlice.isInclusive(Bound.START),
1:65a7088:                               bound(Bound.END),
1:65a7088:                               isInclusive(Bound.END));
1:65a7088:     }
1:65a7088: 
1:65a7088:     @Override
1:65a7088:     public String toString()
1:65a7088:     {
1:65a7088:         return String.format("(%s %s, %s %s)", boundInclusive[0] ? ">=" : ">",
1:65a7088:                              bounds[0],
1:65a7088:                              boundInclusive[1] ? "<=" : "<",
1:65a7088:                              bounds[1]);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Returns the index operator corresponding to the specified boundary.
1:65a7088:      *
1:65a7088:      * @param b the boundary type
1:65a7088:      * @return the index operator corresponding to the specified boundary
1:65a7088:      */
1:65a7088:     public Operator getIndexOperator(Bound b)
1:65a7088:     {
1:65a7088:         if (b.isStart())
1:65a7088:             return boundInclusive[b.idx] ? Operator.GTE : Operator.GT;
1:65a7088: 
1:65a7088:         return boundInclusive[b.idx] ? Operator.LTE : Operator.LT;
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Check if this <code>TermSlice</code> is supported by the specified index.
1:65a7088:      *
1:0626be8:      * @param index the secondary index
1:65a7088:      * @return <code>true</code> this type of <code>TermSlice</code> is supported by the specified index,
1:65a7088:      * <code>false</code> otherwise.
1:65a7088:      */
1:0626be8:     public boolean isSupportedBy(ColumnDefinition column, Index index)
1:65a7088:     {
1:65a7088:         boolean supported = false;
1:65a7088: 
1:65a7088:         if (hasBound(Bound.START))
1:0626be8:             supported |= isInclusive(Bound.START) ? index.supportsExpression(column, Operator.GTE)
1:0626be8:                     : index.supportsExpression(column, Operator.GT);
1:65a7088:         if (hasBound(Bound.END))
1:0626be8:             supported |= isInclusive(Bound.END) ? index.supportsExpression(column, Operator.LTE)
1:0626be8:                     : index.supportsExpression(column, Operator.LT);
1:65a7088: 
1:65a7088:         return supported;
1:cb5897f:     }
1:cb5897f: 
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:cb5897f:     {
1:89464ea:         if (hasBound(Bound.START))
1:89464ea:             bound(Bound.START).addFunctionsTo(functions);
1:89464ea: 
1:89464ea:         if (hasBound(Bound.END))
1:89464ea:             bound(Bound.END).addFunctionsTo(functions);
1:65a7088:     }
1:65a7088: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:         return  bound.isStart() ? new TermSlice(term, include, null, false)
/////////////////////////////////////////////////////////////////////////
1:             return new TermSlice(bound(Bound.START),
1:         return new TermSlice(otherSlice.bound(Bound.START),
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:89464ea
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions)
1:         if (hasBound(Bound.START))
1:             bound(Bound.START).addFunctionsTo(functions);
1: 
1:         if (hasBound(Bound.END))
1:             bound(Bound.END).addFunctionsTo(functions);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.index.Index;
/////////////////////////////////////////////////////////////////////////
1:      * @param index the secondary index
1:     public boolean isSupportedBy(ColumnDefinition column, Index index)
1:             supported |= isInclusive(Bound.START) ? index.supportsExpression(column, Operator.GTE)
1:                     : index.supportsExpression(column, Operator.GT);
1:             supported |= isInclusive(Bound.END) ? index.supportsExpression(column, Operator.LTE)
1:                     : index.supportsExpression(column, Operator.LT);
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
1: 
0: import com.google.common.collect.Iterables;
1: 
1: import org.apache.cassandra.cql3.functions.Function;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Iterable<Function> getFunctions()
1:     {
0:         if (hasBound(Bound.START) && hasBound(Bound.END))
0:             return Iterables.concat(bound(Bound.START).getFunctions(), bound(Bound.END).getFunctions());
0:         else if (hasBound(Bound.START))
0:             return bound(Bound.START).getFunctions();
0:         else if (hasBound(Bound.END))
0:             return bound(Bound.END).getFunctions();
0:         else
0:             return Collections.emptySet();
1:     }
author:blerer
-------------------------------------------------------------------------------
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.restrictions;
1: 
1: import org.apache.cassandra.cql3.Operator;
1: import org.apache.cassandra.cql3.Term;
1: import org.apache.cassandra.cql3.statements.Bound;
0: import org.apache.cassandra.db.index.SecondaryIndex;
1: 
1: final class TermSlice
1: {
1:     /**
1:      * The slice boundaries.
1:      */
1:     private final Term[] bounds;
1: 
1:     /**
1:      * Specifies if a slice boundary is inclusive or not.
1:      */
1:     private final boolean[] boundInclusive;
1: 
1:     /**
1:      * Creates a new <code>TermSlice</code> with the specified boundaries.
1:      *
1:      * @param start the lower boundary
1:      * @param includeStart <code>true</code> if the lower boundary is inclusive
1:      * @param end the upper boundary
1:      * @param includeEnd <code>true</code> if the upper boundary is inclusive
1:      */
1:     private TermSlice(Term start, boolean includeStart, Term end, boolean includeEnd)
1:     {
1:         bounds = new Term[]{start, end};
1:         boundInclusive = new boolean[]{includeStart, includeEnd};
1:     }
1: 
1:     /**
1:      * Creates a new <code>TermSlice</code> with the specified boundary.
1:      *
1:      * @param bound the boundary type
1:      * @param include <code>true</code> if the boundary is inclusive
1:      * @param term the value
1:      * @return a new <code>TermSlice</code> instance
1:      */
1:     public static TermSlice newInstance(Bound bound, boolean include, Term term)
1:     {
0:         return  bound.isStart() ? new TermSlice(term, include, null, false) 
1:                                 : new TermSlice(null, false, term, include);
1:     }
1: 
1:     /**
1:      * Returns the boundary value.
1:      *
1:      * @param bound the boundary type
1:      * @return the boundary value
1:      */
1:     public Term bound(Bound bound)
1:     {
1:         return bounds[bound.idx];
1:     }
1: 
1:     /**
1:      * Checks if this slice has a boundary for the specified type.
1:      *
1:      * @param b the boundary type
1:      * @return <code>true</code> if this slice has a boundary for the specified type, <code>false</code> otherwise.
1:      */
1:     public boolean hasBound(Bound b)
1:     {
1:         return bounds[b.idx] != null;
1:     }
1: 
1:     /**
1:      * Checks if this slice boundary is inclusive for the specified type.
1:      *
1:      * @param b the boundary type
1:      * @return <code>true</code> if this slice boundary is inclusive for the specified type,
1:      * <code>false</code> otherwise.
1:      */
1:     public boolean isInclusive(Bound b)
1:     {
1:         return bounds[b.idx] == null || boundInclusive[b.idx];
1:     }
1: 
1:     /**
1:      * Merges this slice with the specified one.
1:      *
1:      * @param otherSlice the slice to merge to
1:      * @return the new slice resulting from the merge
1:      */
1:     public TermSlice merge(TermSlice otherSlice)
1:     {
1:         if (hasBound(Bound.START))
1:         {
1:             assert !otherSlice.hasBound(Bound.START);
1: 
0:             return new TermSlice(bound(Bound.START), 
1:                                   isInclusive(Bound.START),
1:                                   otherSlice.bound(Bound.END),
1:                                   otherSlice.isInclusive(Bound.END));
1:         }
1:         assert !otherSlice.hasBound(Bound.END);
1: 
0:         return new TermSlice(otherSlice.bound(Bound.START), 
1:                               otherSlice.isInclusive(Bound.START),
1:                               bound(Bound.END),
1:                               isInclusive(Bound.END));
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("(%s %s, %s %s)", boundInclusive[0] ? ">=" : ">",
1:                              bounds[0],
1:                              boundInclusive[1] ? "<=" : "<",
1:                              bounds[1]);
1:     }
1: 
1:     /**
1:      * Returns the index operator corresponding to the specified boundary.
1:      *
1:      * @param b the boundary type
1:      * @return the index operator corresponding to the specified boundary
1:      */
1:     public Operator getIndexOperator(Bound b)
1:     {
1:         if (b.isStart())
1:             return boundInclusive[b.idx] ? Operator.GTE : Operator.GT;
1: 
1:         return boundInclusive[b.idx] ? Operator.LTE : Operator.LT;
1:     }
1: 
1:     /**
1:      * Check if this <code>TermSlice</code> is supported by the specified index.
1:      *
0:      * @param index the Secondary index
1:      * @return <code>true</code> this type of <code>TermSlice</code> is supported by the specified index,
1:      * <code>false</code> otherwise.
1:      */
0:     public boolean isSupportedBy(SecondaryIndex index)
1:     {
1:         boolean supported = false;
1: 
1:         if (hasBound(Bound.START))
0:             supported |= isInclusive(Bound.START) ? index.supportsOperator(Operator.GTE)
0:                     : index.supportsOperator(Operator.GT);
1:         if (hasBound(Bound.END))
0:             supported |= isInclusive(Bound.END) ? index.supportsOperator(Operator.LTE)
0:                     : index.supportsOperator(Operator.LT);
1: 
1:         return supported;
1:     }
1: }
============================================================================