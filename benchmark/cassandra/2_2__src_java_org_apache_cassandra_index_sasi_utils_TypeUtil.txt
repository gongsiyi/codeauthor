1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.*;
1:72790dc: import org.apache.cassandra.serializers.MarshalException;
1:72790dc: 
1:72790dc: public class TypeUtil
1:72790dc: {
1:72790dc:     public static boolean isValid(ByteBuffer term, AbstractType<?> validator)
1:72790dc:     {
1:72790dc:         try
1:72790dc:         {
1:72790dc:             validator.validate(term);
1:72790dc:             return true;
1:72790dc:         }
1:72790dc:         catch (MarshalException e)
1:72790dc:         {
1:72790dc:             return false;
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static ByteBuffer tryUpcast(ByteBuffer term, AbstractType<?> validator)
1:72790dc:     {
1:72790dc:         if (term.remaining() == 0)
1:72790dc:             return null;
1:72790dc: 
1:72790dc:         try
1:72790dc:         {
1:72790dc:             if (validator instanceof Int32Type && term.remaining() == 2)
1:72790dc:             {
1:72790dc:                 return Int32Type.instance.decompose((int) term.getShort(term.position()));
1:72790dc:             }
1:72790dc:             else if (validator instanceof LongType)
1:72790dc:             {
1:72790dc:                 long upcastToken;
1:72790dc: 
1:72790dc:                 switch (term.remaining())
1:72790dc:                 {
1:72790dc:                     case 2:
1:72790dc:                         upcastToken = (long) term.getShort(term.position());
1:72790dc:                         break;
1:72790dc: 
1:72790dc:                     case 4:
1:72790dc:                         upcastToken = (long) Int32Type.instance.compose(term);
1:72790dc:                         break;
1:72790dc: 
1:72790dc:                     default:
1:f6ca482:                         upcastToken = Long.parseLong(UTF8Type.instance.getString(term));
1:72790dc:                 }
1:72790dc: 
1:72790dc:                 return LongType.instance.decompose(upcastToken);
1:72790dc:             }
1:72790dc:             else if (validator instanceof DoubleType && term.remaining() == 4)
1:72790dc:             {
1:72790dc:                 return DoubleType.instance.decompose((double) FloatType.instance.compose(term));
1:72790dc:             }
1:72790dc: 
1:72790dc:             // maybe it was a string after all
1:72790dc:             return validator.fromString(UTF8Type.instance.getString(term));
1:72790dc:         }
1:72790dc:         catch (Exception e)
1:72790dc:         {
1:72790dc:             return null;
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f6ca482
/////////////////////////////////////////////////////////////////////////
1:                         upcastToken = Long.parseLong(UTF8Type.instance.getString(term));
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.serializers.MarshalException;
1: 
1: public class TypeUtil
1: {
1:     public static boolean isValid(ByteBuffer term, AbstractType<?> validator)
1:     {
1:         try
1:         {
1:             validator.validate(term);
1:             return true;
1:         }
1:         catch (MarshalException e)
1:         {
1:             return false;
1:         }
1:     }
1: 
1:     public static ByteBuffer tryUpcast(ByteBuffer term, AbstractType<?> validator)
1:     {
1:         if (term.remaining() == 0)
1:             return null;
1: 
1:         try
1:         {
1:             if (validator instanceof Int32Type && term.remaining() == 2)
1:             {
1:                 return Int32Type.instance.decompose((int) term.getShort(term.position()));
1:             }
1:             else if (validator instanceof LongType)
1:             {
1:                 long upcastToken;
1: 
1:                 switch (term.remaining())
1:                 {
1:                     case 2:
1:                         upcastToken = (long) term.getShort(term.position());
1:                         break;
1: 
1:                     case 4:
1:                         upcastToken = (long) Int32Type.instance.compose(term);
1:                         break;
1: 
1:                     default:
0:                         upcastToken = Long.valueOf(UTF8Type.instance.getString(term));
1:                 }
1: 
1:                 return LongType.instance.decompose(upcastToken);
1:             }
1:             else if (validator instanceof DoubleType && term.remaining() == 4)
1:             {
1:                 return DoubleType.instance.decompose((double) FloatType.instance.compose(term));
1:             }
1: 
1:             // maybe it was a string after all
1:             return validator.fromString(UTF8Type.instance.getString(term));
1:         }
1:         catch (Exception e)
1:         {
1:             return null;
1:         }
1:     }
1: }
============================================================================