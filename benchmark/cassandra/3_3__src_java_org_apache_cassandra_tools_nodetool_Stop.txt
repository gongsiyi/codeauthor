1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import io.airlift.command.Arguments;
1:c5a8190: import io.airlift.command.Command;
1:e194fe9: import io.airlift.command.Option;
1:c5a8190: 
1:c5a8190: import org.apache.cassandra.db.compaction.OperationType;
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:c5a8190: 
1:c5a8190: @Command(name = "stop", description = "Stop compaction")
1:c5a8190: public class Stop extends NodeToolCmd
1:c5a8190: {
1:e194fe9:     @Arguments(title = "compaction_type",
1:e194fe9:               usage = "<compaction type>",
1:e194fe9:               description = "Supported types are COMPACTION, VALIDATION, CLEANUP, SCRUB, VERIFY, INDEX_BUILD",
1:e194fe9:               required = false)
1:c5a8190:     private OperationType compactionType = OperationType.UNKNOWN;
1:c5a8190: 
1:e194fe9:     @Option(title = "compactionId",
1:e194fe9:            name = {"-id", "--compaction-id"},
1:5726625:            description = "Use -id to stop a compaction by the specified id. Ids can be found in the transaction log files whose name starts with compaction_, located in the table transactions folder.",
1:e194fe9:            required = false)
1:e194fe9:     private String compactionId = "";
1:e194fe9: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:e194fe9:         if (!compactionId.isEmpty())
1:e194fe9:             probe.stopById(compactionId);
1:e194fe9:         else
1:e194fe9:             probe.stop(compactionType.name());
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:5726625
/////////////////////////////////////////////////////////////////////////
1:            description = "Use -id to stop a compaction by the specified id. Ids can be found in the transaction log files whose name starts with compaction_, located in the table transactions folder.",
author:Lyuben Todorov
-------------------------------------------------------------------------------
commit:e194fe9
/////////////////////////////////////////////////////////////////////////
1: import io.airlift.command.Option;
/////////////////////////////////////////////////////////////////////////
1:     @Arguments(title = "compaction_type",
1:               usage = "<compaction type>",
1:               description = "Supported types are COMPACTION, VALIDATION, CLEANUP, SCRUB, VERIFY, INDEX_BUILD",
1:               required = false)
1:     @Option(title = "compactionId",
1:            name = {"-id", "--compaction-id"},
0:            description = "Use -id to stop a compaction by the specified id. Ids can be found in the system.compactions_in_progress table.",
1:            required = false)
1:     private String compactionId = "";
1: 
1:         if (!compactionId.isEmpty())
1:             probe.stopById(compactionId);
1:         else
1:             probe.stop(compactionType.name());
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: 
1: import org.apache.cassandra.db.compaction.OperationType;
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "stop", description = "Stop compaction")
1: public class Stop extends NodeToolCmd
1: {
0:     @Arguments(title = "compaction_type", usage = "<compaction type>", description = "Supported types are COMPACTION, VALIDATION, CLEANUP, SCRUB, VERIFY, INDEX_BUILD", required = true)
1:     private OperationType compactionType = OperationType.UNKNOWN;
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
0:         probe.stop(compactionType.name());
1:     }
1: }
============================================================================