1:597a1d5: package org.apache.cassandra.stress;
1:597a1d5: 
1:597a1d5: import java.util.concurrent.atomic.AtomicLong;
1:597a1d5: 
1:f27ab29: public interface WorkManager
1:597a1d5: {
1:597a1d5:     // -1 indicates consumer should terminate
1:597a1d5:     int takePermits(int count);
1:597a1d5: 
1:597a1d5:     // signal all consumers to terminate
1:597a1d5:     void stop();
1:597a1d5: 
1:597a1d5:     static final class FixedWorkManager implements WorkManager
1:597a1d5:     {
1:597a1d5: 
1:597a1d5:         final AtomicLong permits;
1:597a1d5: 
1:597a1d5:         public FixedWorkManager(long permits)
1:597a1d5:         {
1:597a1d5:             this.permits = new AtomicLong(permits);
1:597a1d5:         }
1:597a1d5: 
1:597a1d5:         @Override
1:597a1d5:         public int takePermits(int count)
1:597a1d5:         {
1:597a1d5:             while (true)
1:597a1d5:             {
1:597a1d5:                 long cur = permits.get();
1:597a1d5:                 if (cur == 0)
1:597a1d5:                     return -1;
1:597a1d5:                 count = (int) Math.min(count, cur);
1:597a1d5:                 long next = cur - count;
1:597a1d5:                 if (permits.compareAndSet(cur, next))
1:597a1d5:                     return count;
1:597a1d5:             }
1:597a1d5:         }
1:597a1d5: 
1:597a1d5:         @Override
1:597a1d5:         public void stop()
1:597a1d5:         {
1:597a1d5:             permits.getAndSet(0);
1:597a1d5:         }
1:597a1d5:     }
1:597a1d5: 
1:597a1d5:     static final class ContinuousWorkManager implements WorkManager
1:597a1d5:     {
1:597a1d5: 
1:597a1d5:         volatile boolean stop = false;
1:597a1d5: 
1:597a1d5:         @Override
1:597a1d5:         public int takePermits(int count)
1:597a1d5:         {
1:597a1d5:             if (stop)
1:597a1d5:                 return -1;
1:597a1d5:             return count;
1:597a1d5:         }
1:597a1d5: 
1:597a1d5:         @Override
1:597a1d5:         public void stop()
1:597a1d5:         {
1:597a1d5:             stop = true;
1:597a1d5:         }
1:597a1d5: 
1:597a1d5:     }
1:597a1d5: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: public interface WorkManager
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: public interface WorkManager
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:597a1d5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress;
1: 
1: import java.util.concurrent.atomic.AtomicLong;
1: 
0: interface WorkManager
1: {
1:     // -1 indicates consumer should terminate
1:     int takePermits(int count);
1: 
1:     // signal all consumers to terminate
1:     void stop();
1: 
1:     static final class FixedWorkManager implements WorkManager
1:     {
1: 
1:         final AtomicLong permits;
1: 
1:         public FixedWorkManager(long permits)
1:         {
1:             this.permits = new AtomicLong(permits);
1:         }
1: 
1:         @Override
1:         public int takePermits(int count)
1:         {
1:             while (true)
1:             {
1:                 long cur = permits.get();
1:                 if (cur == 0)
1:                     return -1;
1:                 count = (int) Math.min(count, cur);
1:                 long next = cur - count;
1:                 if (permits.compareAndSet(cur, next))
1:                     return count;
1:             }
1:         }
1: 
1:         @Override
1:         public void stop()
1:         {
1:             permits.getAndSet(0);
1:         }
1:     }
1: 
1:     static final class ContinuousWorkManager implements WorkManager
1:     {
1: 
1:         volatile boolean stop = false;
1: 
1:         @Override
1:         public int takePermits(int count)
1:         {
1:             if (stop)
1:                 return -1;
1:             return count;
1:         }
1: 
1:         @Override
1:         public void stop()
1:         {
1:             stop = true;
1:         }
1: 
1:     }
1: }
============================================================================