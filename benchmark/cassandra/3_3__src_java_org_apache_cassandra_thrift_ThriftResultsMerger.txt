1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.thrift;
6:a991b64: 
1:a991b64: import java.util.Collections;
1:a991b64: import java.util.Iterator;
1:a991b64: import java.util.NoSuchElementException;
1:a991b64: 
1:6094974: import org.apache.cassandra.db.transform.Transformation;
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:a991b64: import com.google.common.collect.Iterators;
1:a991b64: import com.google.common.collect.PeekingIterator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.marshal.AbstractType;
1:a991b64: import org.apache.cassandra.db.marshal.MapType;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Given an iterator on a partition of a compact table, this return an iterator that merges the
1:a991b64:  * static row columns with the other results.
1:a991b64:  *
1:a991b64:  * Compact tables stores thrift column_metadata as static columns (see CompactTables for
1:a991b64:  * details). When reading for thrift however, we want to merge those static values with other
1:a991b64:  * results because:
1:a991b64:  *   1) on thrift, all "columns" are sorted together, whether or not they are declared
1:a991b64:  *      column_metadata.
1:a991b64:  *   2) it's possible that a table add a value for a "dynamic" column, and later that column
1:a991b64:  *      is statically defined. Merging "static" and "dynamic" columns make sure we don't miss
1:a991b64:  *      a value prior to the column declaration.
1:a991b64:  *
1:a991b64:  * For example, if a thrift table declare 2 columns "c1" and "c5" and the results from a query
1:a991b64:  * is:
1:a991b64:  *    Partition: static: { c1: 3, c5: 4 }
1:a991b64:  *                 "a" : { value : 2 }
1:a991b64:  *                 "c3": { value : 8 }
1:a991b64:  *                 "c7": { value : 1 }
1:a991b64:  * then this class transform it into:
1:a991b64:  *    Partition:   "a" : { value : 2 }
1:a991b64:  *                 "c1": { value : 3 }
1:a991b64:  *                 "c3": { value : 8 }
1:a991b64:  *                 "c5": { value : 4 }
1:a991b64:  *                 "c7": { value : 1 }
1:a991b64:  */
1:6094974: public class ThriftResultsMerger extends Transformation<UnfilteredRowIterator>
8:a991b64: {
1:a991b64:     private final int nowInSec;
1:a991b64: 
1:6094974:     private ThriftResultsMerger(int nowInSec)
1:a991b64:     {
1:a991b64:         this.nowInSec = nowInSec;
8:a991b64:     }
1:a991b64: 
1:a991b64:     public static UnfilteredPartitionIterator maybeWrap(UnfilteredPartitionIterator iterator, CFMetaData metadata, int nowInSec)
1:a991b64:     {
1:a991b64:         if (!metadata.isStaticCompactTable() && !metadata.isSuper())
1:a991b64:             return iterator;
1:a991b64: 
1:6094974:         return Transformation.apply(iterator, new ThriftResultsMerger(nowInSec));
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static UnfilteredRowIterator maybeWrap(UnfilteredRowIterator iterator, int nowInSec)
1:a991b64:     {
1:a991b64:         if (!iterator.metadata().isStaticCompactTable() && !iterator.metadata().isSuper())
1:a991b64:             return iterator;
1:a991b64: 
1:a991b64:         return iterator.metadata().isSuper()
1:6094974:              ? Transformation.apply(iterator, new SuperColumnsPartitionMerger(iterator, nowInSec))
1:a991b64:              : new PartitionMerger(iterator, nowInSec);
1:a991b64:     }
1:a991b64: 
1:6094974:     @Override
1:6094974:     public UnfilteredRowIterator applyToPartition(UnfilteredRowIterator iter)
1:a991b64:     {
1:a991b64:         return iter.metadata().isSuper()
1:6094974:              ? Transformation.apply(iter, new SuperColumnsPartitionMerger(iter, nowInSec))
1:a991b64:              : new PartitionMerger(iter, nowInSec);
1:a991b64:     }
1:a991b64: 
1:a991b64:     private static class PartitionMerger extends WrappingUnfilteredRowIterator
1:a991b64:     {
1:a991b64:         private final int nowInSec;
1:a991b64: 
1:a991b64:         // We initialize lazily to avoid having this iterator fetch the wrapped iterator before it's actually asked for it.
1:a991b64:         private boolean isInit;
1:a991b64: 
1:2457599:         private Iterator<Cell> staticCells;
1:a991b64: 
1:2457599:         private final Row.Builder builder;
1:2457599:         private Row nextToMerge;
1:a991b64:         private Unfiltered nextFromWrapped;
1:a991b64: 
1:a991b64:         private PartitionMerger(UnfilteredRowIterator results, int nowInSec)
1:a991b64:         {
2:a991b64:             super(results);
1:a991b64:             assert results.metadata().isStaticCompactTable();
1:a991b64:             this.nowInSec = nowInSec;
1:aa57626:             this.builder = BTreeRow.sortedBuilder();
1:a991b64:         }
1:a991b64: 
1:a991b64:         private void init()
1:a991b64:         {
1:a991b64:             assert !isInit;
1:2457599:             Row staticRow = super.staticRow();
1:aa57626:             assert !staticRow.hasComplex();
1:a991b64: 
1:2457599:             staticCells = staticRow.cells().iterator();
1:a991b64:             updateNextToMerge();
1:a991b64:             isInit = true;
1:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
1:a991b64:         public Row staticRow()
1:a991b64:         {
1:a991b64:             return Rows.EMPTY_STATIC_ROW;
1:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
1:a991b64:         public boolean hasNext()
1:a991b64:         {
1:a991b64:             if (!isInit)
1:a991b64:                 init();
1:a991b64: 
1:a991b64:             return nextFromWrapped != null || nextToMerge != null || super.hasNext();
1:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
2:a991b64:         public Unfiltered next()
1:a991b64:         {
1:a991b64:             if (!isInit)
1:a991b64:                 init();
1:a991b64: 
1:a991b64:             if (nextFromWrapped == null && super.hasNext())
1:a991b64:                 nextFromWrapped = super.next();
1:a991b64: 
1:a991b64:             if (nextFromWrapped == null)
1:a991b64:             {
1:a991b64:                 if (nextToMerge == null)
1:a991b64:                     throw new NoSuchElementException();
1:a991b64: 
1:a991b64:                 return consumeNextToMerge();
1:a991b64:             }
1:a991b64: 
1:a991b64:             if (nextToMerge == null)
1:a991b64:                 return consumeNextWrapped();
1:a991b64: 
1:a991b64:             int cmp = metadata().comparator.compare(nextToMerge, nextFromWrapped);
1:a991b64:             if (cmp < 0)
1:a991b64:                 return consumeNextToMerge();
1:a991b64:             if (cmp > 0)
1:a991b64:                 return consumeNextWrapped();
1:a991b64: 
1:2457599:             // Same row, so merge them
1:a991b64:             assert nextFromWrapped instanceof Row;
1:2457599:             return Rows.merge((Row)consumeNextWrapped(), consumeNextToMerge(), nowInSec);
1:a991b64:         }
1:a991b64: 
1:a991b64:         private Unfiltered consumeNextWrapped()
1:a991b64:         {
1:a991b64:             Unfiltered toReturn = nextFromWrapped;
1:a991b64:             nextFromWrapped = null;
1:a991b64:             return toReturn;
1:a991b64:         }
1:a991b64: 
1:a991b64:         private Row consumeNextToMerge()
1:a991b64:         {
1:a991b64:             Row toReturn = nextToMerge;
1:a991b64:             updateNextToMerge();
1:a991b64:             return toReturn;
1:a991b64:         }
1:a991b64: 
1:a991b64:         private void updateNextToMerge()
1:a991b64:         {
1:2457599:             if (!staticCells.hasNext())
1:a991b64:             {
1:2457599:                 // Nothing more to merge.
1:2457599:                 nextToMerge = null;
1:2457599:                 return;
1:a991b64:             }
1:2457599: 
1:2457599:             Cell cell = staticCells.next();
1:2457599: 
1:2457599:             // Given a static cell, the equivalent row uses the column name as clustering and the value as unique cell value.
1:2f41243:             builder.newRow(Clustering.make(cell.column().name.bytes));
1:2457599:             builder.addCell(new BufferCell(metadata().compactValueColumn(), cell.timestamp(), cell.ttl(), cell.localDeletionTime(), cell.value(), cell.path()));
1:2457599:             nextToMerge = builder.build();
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:6094974:     private static class SuperColumnsPartitionMerger extends Transformation
1:a991b64:     {
1:a991b64:         private final int nowInSec;
1:2457599:         private final Row.Builder builder;
1:a991b64:         private final ColumnDefinition superColumnMapColumn;
1:a991b64:         private final AbstractType<?> columnComparator;
1:a991b64: 
1:6094974:         private SuperColumnsPartitionMerger(UnfilteredRowIterator applyTo, int nowInSec)
1:a991b64:         {
1:6094974:             assert applyTo.metadata().isSuper();
1:a991b64:             this.nowInSec = nowInSec;
1:a991b64: 
1:6094974:             this.superColumnMapColumn = applyTo.metadata().compactValueColumn();
1:a991b64:             assert superColumnMapColumn != null && superColumnMapColumn.type instanceof MapType;
1:a991b64: 
1:aa57626:             this.builder = BTreeRow.sortedBuilder();
1:a991b64:             this.columnComparator = ((MapType)superColumnMapColumn.type).nameComparator();
1:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
1:6094974:         public Row applyToRow(Row row)
1:a991b64:         {
1:2457599:             PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row));
1:a991b64:             if (!staticCells.hasNext())
2:a991b64:                 return row;
1:2457599: 
1:2457599:             builder.newRow(row.clustering());
1:2457599: 
1:2457599:             ComplexColumnData complexData = row.getComplexColumnData(superColumnMapColumn);
1:21191e6:             
1:21191e6:             PeekingIterator<Cell> dynamicCells;
1:21191e6:             if (complexData == null)
1:21191e6:             {
1:21191e6:                 dynamicCells = Iterators.peekingIterator(Collections.<Cell>emptyIterator());
1:21191e6:             }
1:21191e6:             else
1:21191e6:             {
1:21191e6:                 dynamicCells = Iterators.peekingIterator(complexData.iterator());
1:21191e6:                 builder.addComplexDeletion(superColumnMapColumn, complexData.complexDeletion());
1:21191e6:             }
1:a991b64: 
1:a991b64:             while (staticCells.hasNext() && dynamicCells.hasNext())
1:a991b64:             {
1:a991b64:                 Cell staticCell = staticCells.peek();
1:a991b64:                 Cell dynamicCell = dynamicCells.peek();
1:a991b64:                 int cmp = columnComparator.compare(staticCell.column().name.bytes, dynamicCell.path().get(0));
1:a991b64:                 if (cmp < 0)
1:2457599:                     builder.addCell(makeDynamicCell(staticCells.next()));
1:a991b64:                 else if (cmp > 0)
1:2457599:                     builder.addCell(dynamicCells.next());
1:a991b64:                 else
1:2457599:                     builder.addCell(Cells.reconcile(makeDynamicCell(staticCells.next()), dynamicCells.next(), nowInSec));
1:a991b64:             }
1:a991b64: 
1:a991b64:             while (staticCells.hasNext())
1:2457599:                 builder.addCell(makeDynamicCell(staticCells.next()));
1:a991b64:             while (dynamicCells.hasNext())
1:2457599:                 builder.addCell(dynamicCells.next());
1:a991b64: 
1:2457599:             return builder.build();
1:a991b64:         }
1:a991b64: 
1:2457599:         private Cell makeDynamicCell(Cell staticCell)
1:a991b64:         {
1:2457599:             return new BufferCell(superColumnMapColumn, staticCell.timestamp(), staticCell.ttl(), staticCell.localDeletionTime(), staticCell.value(), CellPath.create(staticCell.column().name.bytes));
1:2457599:         }
1:2457599: 
1:2457599:         private Iterator<Cell> simpleCellsIterator(Row row)
1:2457599:         {
1:2457599:             final Iterator<Cell> cells = row.cells().iterator();
1:a991b64:             return new AbstractIterator<Cell>()
1:a991b64:             {
1:a991b64:                 protected Cell computeNext()
1:a991b64:                 {
1:2457599:                     if (cells.hasNext())
1:a991b64:                     {
1:2457599:                         Cell cell = cells.next();
1:2457599:                         if (cell.column().isSimple())
1:a991b64:                             return cell;
1:a991b64:                     }
1:a991b64:                     return endOfData();
1:a991b64:                 }
1:a991b64:             };
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
1:a991b64: 
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1:             builder.newRow(Clustering.make(cell.column().name.bytes));
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.transform.Transformation;
/////////////////////////////////////////////////////////////////////////
1: public class ThriftResultsMerger extends Transformation<UnfilteredRowIterator>
1:     private ThriftResultsMerger(int nowInSec)
/////////////////////////////////////////////////////////////////////////
1:         return Transformation.apply(iterator, new ThriftResultsMerger(nowInSec));
/////////////////////////////////////////////////////////////////////////
1:              ? Transformation.apply(iterator, new SuperColumnsPartitionMerger(iterator, nowInSec))
1:     @Override
1:     public UnfilteredRowIterator applyToPartition(UnfilteredRowIterator iter)
1:              ? Transformation.apply(iter, new SuperColumnsPartitionMerger(iter, nowInSec))
/////////////////////////////////////////////////////////////////////////
1:     private static class SuperColumnsPartitionMerger extends Transformation
1:         private SuperColumnsPartitionMerger(UnfilteredRowIterator applyTo, int nowInSec)
1:             assert applyTo.metadata().isSuper();
1:             this.superColumnMapColumn = applyTo.metadata().compactValueColumn();
/////////////////////////////////////////////////////////////////////////
1:         public Row applyToRow(Row row)
commit:aa57626
/////////////////////////////////////////////////////////////////////////
1:             this.builder = BTreeRow.sortedBuilder();
1:             assert !staticRow.hasComplex();
/////////////////////////////////////////////////////////////////////////
1:             this.builder = BTreeRow.sortedBuilder();
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
0:             this.builder = BTreeRow.sortedBuilder(results.columns().regulars);
/////////////////////////////////////////////////////////////////////////
0:             this.builder = BTreeRow.sortedBuilder(Columns.of(superColumnMapColumn));
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
0:             this.builder = BTreeBackedRow.sortedBuilder(results.columns().regulars);
/////////////////////////////////////////////////////////////////////////
0:             this.builder = BTreeBackedRow.sortedBuilder(Columns.of(superColumnMapColumn));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:21191e6
/////////////////////////////////////////////////////////////////////////
1:             
1:             PeekingIterator<Cell> dynamicCells;
1:             if (complexData == null)
1:             {
1:                 dynamicCells = Iterators.peekingIterator(Collections.<Cell>emptyIterator());
1:             }
1:             else
1:             {
1:                 dynamicCells = Iterators.peekingIterator(complexData.iterator());
1:                 builder.addComplexDeletion(superColumnMapColumn, complexData.complexDeletion());
1:             }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1:         private Iterator<Cell> staticCells;
1:         private final Row.Builder builder;
1:         private Row nextToMerge;
/////////////////////////////////////////////////////////////////////////
0:             this.builder = ArrayBackedRow.sortedBuilder(results.columns().regulars);
1:             Row staticRow = super.staticRow();
1:             staticCells = staticRow.cells().iterator();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             // Same row, so merge them
1:             return Rows.merge((Row)consumeNextWrapped(), consumeNextToMerge(), nowInSec);
/////////////////////////////////////////////////////////////////////////
1:             if (!staticCells.hasNext())
1:                 // Nothing more to merge.
1:                 nextToMerge = null;
1:                 return;
1: 
1:             Cell cell = staticCells.next();
1: 
1:             // Given a static cell, the equivalent row uses the column name as clustering and the value as unique cell value.
0:             builder.newRow(new Clustering(cell.column().name.bytes));
1:             builder.addCell(new BufferCell(metadata().compactValueColumn(), cell.timestamp(), cell.ttl(), cell.localDeletionTime(), cell.value(), cell.path()));
1:             nextToMerge = builder.build();
0:     private static class SuperColumnsPartitionMerger extends AlteringUnfilteredRowIterator
1:         private final Row.Builder builder;
/////////////////////////////////////////////////////////////////////////
0:             this.builder = ArrayBackedRow.sortedBuilder(Columns.of(superColumnMapColumn));
0:         protected Row computeNext(Row row)
1:             PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row));
1:             builder.newRow(row.clustering());
1: 
1:             ComplexColumnData complexData = row.getComplexColumnData(superColumnMapColumn);
0:             PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator());
1: 
0:             builder.addComplexDeletion(superColumnMapColumn, complexData.complexDeletion());
/////////////////////////////////////////////////////////////////////////
1:                     builder.addCell(makeDynamicCell(staticCells.next()));
1:                     builder.addCell(dynamicCells.next());
1:                     builder.addCell(Cells.reconcile(makeDynamicCell(staticCells.next()), dynamicCells.next(), nowInSec));
1:                 builder.addCell(makeDynamicCell(staticCells.next()));
1:                 builder.addCell(dynamicCells.next());
1:             return builder.build();
1:         private Cell makeDynamicCell(Cell staticCell)
1:             return new BufferCell(superColumnMapColumn, staticCell.timestamp(), staticCell.ttl(), staticCell.localDeletionTime(), staticCell.value(), CellPath.create(staticCell.column().name.bytes));
1:         }
1: 
1:         private Iterator<Cell> simpleCellsIterator(Row row)
1:         {
1:             final Iterator<Cell> cells = row.cells().iterator();
1:                     if (cells.hasNext())
1:                         Cell cell = cells.next();
1:                         if (cell.column().isSimple())
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.thrift;
1: 
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.NoSuchElementException;
1: 
0: import com.google.common.collect.AbstractIterator;
1: import com.google.common.collect.Iterators;
1: import com.google.common.collect.PeekingIterator;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.MapType;
1: import org.apache.cassandra.db.partitions.*;
1: 
1: /**
1:  * Given an iterator on a partition of a compact table, this return an iterator that merges the
1:  * static row columns with the other results.
1:  *
1:  * Compact tables stores thrift column_metadata as static columns (see CompactTables for
1:  * details). When reading for thrift however, we want to merge those static values with other
1:  * results because:
1:  *   1) on thrift, all "columns" are sorted together, whether or not they are declared
1:  *      column_metadata.
1:  *   2) it's possible that a table add a value for a "dynamic" column, and later that column
1:  *      is statically defined. Merging "static" and "dynamic" columns make sure we don't miss
1:  *      a value prior to the column declaration.
1:  *
1:  * For example, if a thrift table declare 2 columns "c1" and "c5" and the results from a query
1:  * is:
1:  *    Partition: static: { c1: 3, c5: 4 }
1:  *                 "a" : { value : 2 }
1:  *                 "c3": { value : 8 }
1:  *                 "c7": { value : 1 }
1:  * then this class transform it into:
1:  *    Partition:   "a" : { value : 2 }
1:  *                 "c1": { value : 3 }
1:  *                 "c3": { value : 8 }
1:  *                 "c5": { value : 4 }
1:  *                 "c7": { value : 1 }
1:  */
0: public class ThriftResultsMerger extends WrappingUnfilteredPartitionIterator
1: {
1:     private final int nowInSec;
1: 
0:     private ThriftResultsMerger(UnfilteredPartitionIterator wrapped, int nowInSec)
1:     {
0:         super(wrapped);
1:         this.nowInSec = nowInSec;
1:     }
1: 
1:     public static UnfilteredPartitionIterator maybeWrap(UnfilteredPartitionIterator iterator, CFMetaData metadata, int nowInSec)
1:     {
1:         if (!metadata.isStaticCompactTable() && !metadata.isSuper())
1:             return iterator;
1: 
0:         return new ThriftResultsMerger(iterator, nowInSec);
1:     }
1: 
1:     public static UnfilteredRowIterator maybeWrap(UnfilteredRowIterator iterator, int nowInSec)
1:     {
1:         if (!iterator.metadata().isStaticCompactTable() && !iterator.metadata().isSuper())
1:             return iterator;
1: 
1:         return iterator.metadata().isSuper()
0:              ? new SuperColumnsPartitionMerger(iterator, nowInSec)
1:              : new PartitionMerger(iterator, nowInSec);
1:     }
1: 
0:     protected UnfilteredRowIterator computeNext(UnfilteredRowIterator iter)
1:     {
1:         return iter.metadata().isSuper()
0:              ? new SuperColumnsPartitionMerger(iter, nowInSec)
1:              : new PartitionMerger(iter, nowInSec);
1:     }
1: 
1:     private static class PartitionMerger extends WrappingUnfilteredRowIterator
1:     {
1:         private final int nowInSec;
1: 
1:         // We initialize lazily to avoid having this iterator fetch the wrapped iterator before it's actually asked for it.
1:         private boolean isInit;
1: 
0:         private Row staticRow;
0:         private int i; // the index of the next column of static row to return
1: 
0:         private ReusableRow nextToMerge;
1:         private Unfiltered nextFromWrapped;
1: 
1:         private PartitionMerger(UnfilteredRowIterator results, int nowInSec)
1:         {
1:             super(results);
1:             assert results.metadata().isStaticCompactTable();
1:             this.nowInSec = nowInSec;
1:         }
1: 
1:         private void init()
1:         {
1:             assert !isInit;
0:             this.staticRow = super.staticRow();
0:             assert staticRow.columns().complexColumnCount() == 0;
1: 
0:             this.nextToMerge = createReusableRow();
1:             updateNextToMerge();
1:             isInit = true;
1:         }
1: 
1:         @Override
1:         public Row staticRow()
1:         {
1:             return Rows.EMPTY_STATIC_ROW;
1:         }
1: 
0:         private ReusableRow createReusableRow()
1:         {
0:             return new ReusableRow(metadata().clusteringColumns().size(), metadata().partitionColumns().regulars, true, metadata().isCounter());
1:         }
1: 
1:         @Override
1:         public boolean hasNext()
1:         {
1:             if (!isInit)
1:                 init();
1: 
1:             return nextFromWrapped != null || nextToMerge != null || super.hasNext();
1:         }
1: 
1:         @Override
1:         public Unfiltered next()
1:         {
1:             if (!isInit)
1:                 init();
1: 
1:             if (nextFromWrapped == null && super.hasNext())
1:                 nextFromWrapped = super.next();
1: 
1:             if (nextFromWrapped == null)
1:             {
1:                 if (nextToMerge == null)
1:                     throw new NoSuchElementException();
1: 
1:                 return consumeNextToMerge();
1:             }
1: 
1:             if (nextToMerge == null)
1:                 return consumeNextWrapped();
1: 
1:             int cmp = metadata().comparator.compare(nextToMerge, nextFromWrapped);
1:             if (cmp < 0)
1:                 return consumeNextToMerge();
1:             if (cmp > 0)
1:                 return consumeNextWrapped();
1: 
0:             // Same row, but we know the row has only a single column so just pick the more recent
1:             assert nextFromWrapped instanceof Row;
0:             ReusableRow row = createReusableRow();
0:             Rows.merge((Row)consumeNextWrapped(), consumeNextToMerge(), columns().regulars, row.writer(), nowInSec);
1:             return row;
1:         }
1: 
1:         private Unfiltered consumeNextWrapped()
1:         {
1:             Unfiltered toReturn = nextFromWrapped;
1:             nextFromWrapped = null;
1:             return toReturn;
1:         }
1: 
1:         private Row consumeNextToMerge()
1:         {
1:             Row toReturn = nextToMerge;
1:             updateNextToMerge();
1:             return toReturn;
1:         }
1: 
1:         private void updateNextToMerge()
1:         {
0:             while (i < staticRow.columns().simpleColumnCount())
1:             {
0:                 Cell cell = staticRow.getCell(staticRow.columns().getSimple(i++));
0:                 if (cell != null)
1:                 {
0:                     // Given a static cell, the equivalent row uses the column name as clustering and the
0:                     // value as unique cell value.
0:                     Row.Writer writer = nextToMerge.writer();
0:                     writer.writeClusteringValue(cell.column().name.bytes);
0:                     writer.writeCell(metadata().compactValueColumn(), cell.isCounterCell(), cell.value(), cell.livenessInfo(), cell.path());
0:                     writer.endOfRow();
0:                     return;
1:                 }
1:             }
0:             // Nothing more to merge.
0:             nextToMerge = null;
1:         }
1:     }
1: 
0:     private static class SuperColumnsPartitionMerger extends WrappingUnfilteredRowIterator
1:     {
1:         private final int nowInSec;
0:         private final ReusableRow reusableRow;
1:         private final ColumnDefinition superColumnMapColumn;
1:         private final AbstractType<?> columnComparator;
1: 
0:         private SuperColumnsPartitionMerger(UnfilteredRowIterator results, int nowInSec)
1:         {
1:             super(results);
0:             assert results.metadata().isSuper();
1:             this.nowInSec = nowInSec;
1: 
0:             this.superColumnMapColumn = results.metadata().compactValueColumn();
1:             assert superColumnMapColumn != null && superColumnMapColumn.type instanceof MapType;
1: 
0:             this.reusableRow = new ReusableRow(results.metadata().clusteringColumns().size(),
0:                                                Columns.of(superColumnMapColumn),
0:                                                true,
0:                                                results.metadata().isCounter());
1:             this.columnComparator = ((MapType)superColumnMapColumn.type).nameComparator();
1:         }
1: 
1:         @Override
1:         public Unfiltered next()
1:         {
0:             Unfiltered next = super.next();
0:             if (next.kind() != Unfiltered.Kind.ROW)
0:                 return next;
1: 
0:             Row row = (Row)next;
0:             Row.Writer writer = reusableRow.writer();
0:             row.clustering().writeTo(writer);
1: 
0:             PeekingIterator<Cell> staticCells = Iterators.peekingIterator(makeStaticCellIterator(row));
1:             if (!staticCells.hasNext())
1:                 return row;
1: 
0:             Iterator<Cell> cells = row.getCells(superColumnMapColumn);
0:             PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(cells.hasNext() ? cells : Collections.<Cell>emptyIterator());
1: 
1:             while (staticCells.hasNext() && dynamicCells.hasNext())
1:             {
1:                 Cell staticCell = staticCells.peek();
1:                 Cell dynamicCell = dynamicCells.peek();
1:                 int cmp = columnComparator.compare(staticCell.column().name.bytes, dynamicCell.path().get(0));
1:                 if (cmp < 0)
1:                 {
0:                     staticCell = staticCells.next();
0:                     writer.writeCell(superColumnMapColumn, staticCell.isCounterCell(), staticCell.value(), staticCell.livenessInfo(), CellPath.create(staticCell.column().name.bytes));
1:                 }
1:                 else if (cmp > 0)
1:                 {
0:                     dynamicCells.next().writeTo(writer);
1:                 }
1:                 else
1:                 {
0:                     staticCell = staticCells.next();
0:                     Cell toMerge = Cells.create(superColumnMapColumn,
0:                                                  staticCell.isCounterCell(),
0:                                                  staticCell.value(),
0:                                                  staticCell.livenessInfo(),
0:                                                  CellPath.create(staticCell.column().name.bytes));
0:                     Cells.reconcile(toMerge, dynamicCells.next(), nowInSec).writeTo(writer);
1:                 }
1:             }
1: 
1:             while (staticCells.hasNext())
1:             {
0:                 Cell staticCell = staticCells.next();
0:                 writer.writeCell(superColumnMapColumn, staticCell.isCounterCell(), staticCell.value(), staticCell.livenessInfo(), CellPath.create(staticCell.column().name.bytes));
1:             }
1:             while (dynamicCells.hasNext())
1:             {
0:                 dynamicCells.next().writeTo(writer);
1:             }
1: 
0:             writer.endOfRow();
0:             return reusableRow;
1:         }
1: 
0:         private static Iterator<Cell> makeStaticCellIterator(final Row row)
1:         {
1:             return new AbstractIterator<Cell>()
1:             {
0:                 private int i;
1: 
1:                 protected Cell computeNext()
1:                 {
0:                     while (i < row.columns().simpleColumnCount())
1:                     {
0:                         Cell cell = row.getCell(row.columns().getSimple(i++));
0:                         if (cell != null)
1:                             return cell;
1:                     }
1:                     return endOfData();
1:                 }
1:             };
1:         }
1:     }
1: }
1: 
============================================================================