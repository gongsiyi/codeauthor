1:f35a6b5: /*
1:f35a6b5:  * Licensed to the Apache Software Foundation (ASF) under one
1:f35a6b5:  * or more contributor license agreements.  See the NOTICE file
1:f35a6b5:  * distributed with this work for additional information
1:f35a6b5:  * regarding copyright ownership.  The ASF licenses this file
1:f35a6b5:  * to you under the Apache License, Version 2.0 (the
1:f35a6b5:  * "License"); you may not use this file except in compliance
1:f35a6b5:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:f35a6b5:  */
1:fc8b76f: package org.apache.cassandra.serializers;
1:e9c6742: 
1:f35a6b5: import java.nio.ByteBuffer;
1:f35a6b5: import java.nio.charset.CharacterCodingException;
1:978d7bb: import java.nio.charset.Charset;
1:e9c6742: 
1:c6ed2e0: import org.apache.commons.lang3.StringUtils;
1:c6ed2e0: 
1:c6ed2e0: import org.apache.cassandra.utils.ByteBufferUtil;
1:c6ed2e0: 
1:fc8b76f: public abstract class AbstractTextSerializer implements TypeSerializer<String>
1:b226cf9: {
1:fc8b76f:     private final Charset charset;
1:fc8b76f: 
1:fc8b76f:     protected AbstractTextSerializer(Charset charset)
1:fc8b76f:     {
1:fc8b76f:         this.charset = charset;
1:fc8b76f:     }
1:e94032a: 
1:daff1fc:     public String deserialize(ByteBuffer bytes)
1:e94032a:     {
1:f35a6b5:         try
1:e94032a:         {
1:fc8b76f:             return ByteBufferUtil.string(bytes, charset);
1:e94032a:         }
1:f35a6b5:         catch (CharacterCodingException e)
1:e94032a:         {
1:fc8b76f:             throw new MarshalException("Invalid " + charset + " bytes " + ByteBufferUtil.bytesToHex(bytes));
1:e9c6742:         }
1:b226cf9:     }
2:07cdfd0: 
1:daff1fc:     public ByteBuffer serialize(String value)
1:daff1fc:     {
1:daff1fc:         return ByteBufferUtil.bytes(value, charset);
1:daff1fc:     }
1:daff1fc: 
1:e9c6742:     public String toString(String value)
1:e9c6742:     {
1:e9c6742:         return value;
1:e9c6742:     }
1:e9c6742: 
1:f35a6b5:     public Class<String> getType()
1:e9c6742:     {
1:f35a6b5:         return String.class;
1:e94032a:     }
1:e94032a: 
1:e94032a:     /**
1:e94032a:      * Generates CQL literal for TEXT/VARCHAR/ASCII types.
1:e94032a:      * Caveat: it does only generate literals with single quotes and not pg-style literals.
1:e94032a:      */
1:e94032a:     @Override
1:c6ed2e0:     public String toCQLLiteral(ByteBuffer buffer)
1:e94032a:     {
1:c6ed2e0:         return buffer == null
1:c6ed2e0:              ? "null"
1:c6ed2e0:              : '\'' + StringUtils.replace(deserialize(buffer), "'", "''") + '\'';
1:e94032a:     }
1:e94032a: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:c6ed2e0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String toCQLLiteral(ByteBuffer buffer)
1:         return buffer == null
1:              ? "null"
1:              : '\'' + StringUtils.replace(deserialize(buffer), "'", "''") + '\'';
commit:e94032a
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Generates CQL literal for TEXT/VARCHAR/ASCII types.
1:      * Caveat: it does only generate literals with single quotes and not pg-style literals.
1:      */
1:     @Override
0:     public void toCQLLiteral(ByteBuffer buffer, StringBuilder target)
1:     {
0:         if (buffer == null)
1:         {
0:             target.append("null");
1:         }
0:         else
1:         {
0:             String s = deserialize(buffer);
1: 
0:             target.append('\'');
0:             for (int i=0; i<s.length(); i++)
1:             {
0:                 char c = s.charAt(i);
0:                 if (c == '\'')
0:                     target.append("''");
0:                 else
0:                     target.append(c);
1:             }
0:             target.append('\'');
1:         }
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     public String deserialize(ByteBuffer bytes)
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer serialize(String value)
1:     {
1:         return ByteBufferUtil.bytes(value, charset);
1:     }
1: 
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractTextSerializer implements TypeSerializer<String>
1:     private final Charset charset;
1:     protected AbstractTextSerializer(Charset charset)
1:     {
1:         this.charset = charset;
1:     }
1: 
0:         return ByteBufferUtil.bytes(value, charset);
1:             return ByteBufferUtil.string(bytes, charset);
1:             throw new MarshalException("Invalid " + charset + " bytes " + ByteBufferUtil.bytesToHex(bytes));
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: 
0: package org.apache.cassandra.type;
1: 
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: public class AsciiSerializer extends AbstractSerializer<String>
0:     public static final AsciiSerializer instance = new AsciiSerializer();
0:     @Override
0:     public String serialize(ByteBuffer bytes)
0:         return getString(bytes);
0:     @Override
0:     public ByteBuffer deserialize(String value)
0:         return ByteBufferUtil.bytes(value, US_ASCII);
0:     @Override
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:         // 0-127
0:         for (int i = bytes.position(); i < bytes.limit(); i++)
1:         {
0:             byte b = bytes.get(i);
0:             if (b < 0 || b > 127)
0:                 throw new MarshalException("Invalid byte for ascii: " + Byte.toString(b));
1:         }
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:     public String toString(String value)
1:     {
1:         return value;
1:     }
1: 
0:     @Override
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.cql.jdbc;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:978d7bb
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.Charset;
0:     private static final Charset US_ASCII = Charset.forName("US-ASCII");
/////////////////////////////////////////////////////////////////////////
0:             return ByteBufferUtil.string(bytes, US_ASCII);
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.bytes(value, US_ASCII);
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:     
0:     public ByteBuffer decompose(String value)
1:     {
0:         return ByteBufferUtil.bytes(value, Charsets.US_ASCII);
1:     }
commit:f35a6b5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql.term;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
0: 
1: import java.nio.ByteBuffer;
1: import java.nio.charset.CharacterCodingException;
0: import java.sql.Types;
0: 
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: 
0: import com.google.common.base.Charsets;
0: 
0: public class AsciiTerm extends AbstractTerm<String>
0: {
0:     public static final AsciiTerm instance = new AsciiTerm();
0:     
0:     AsciiTerm() {}
0:     
0:     public boolean isCaseSensitive()
0:     {
0:         return true;
0:     }
0: 
0:     public int getScale(String obj)
0:     {
0:         return -1;
0:     }
0: 
0:     public int getPrecision(String obj)
0:     {
0:         return -1;
0:     }
0: 
0:     public boolean isCurrency()
0:     {
0:         return false;
0:     }
0: 
0:     public boolean isSigned()
0:     {
0:         return false;
0:     }
0: 
0:     public String toString(String obj)
0:     {
0:         return obj;
0:     }
0: 
0:     public boolean needsQuotes()
0:     {
0:         return true;
0:     }
0: 
0:     public String getString(ByteBuffer bytes)
0:     {
1:         try
0:         {
0:             return ByteBufferUtil.string(bytes, Charsets.US_ASCII);
0:         }
1:         catch (CharacterCodingException e)
0:         {
0:             throw new MarshalException("Invalid ascii bytes " + ByteBufferUtil.bytesToHex(bytes));
0:         }
0:     }
0: 
1:     public Class<String> getType()
0:     {
1:         return String.class;
0:     }
0: 
0:     public int getJdbcType()
0:     {
0:         return Types.VARCHAR;
0:     }
0: 
0:     public String compose(ByteBuffer bytes)
0:     {
0:         return getString(bytes);
0:     }
0: 
0: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9404c65
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: 
0: public class JdbcAscii extends AbstractJdbcType<String>
0:     public static final JdbcAscii instance = new JdbcAscii();
0:     JdbcAscii() {}
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql.jdbc;
/////////////////////////////////////////////////////////////////////////
0: public class AsciiTerm extends AbstractJdbcType<String>
============================================================================