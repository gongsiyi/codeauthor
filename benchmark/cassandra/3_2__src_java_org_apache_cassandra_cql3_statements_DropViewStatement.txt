1:a3a8dbc: /*
1:a3a8dbc:  * Licensed to the Apache Software Foundation (ASF) under one
1:a3a8dbc:  * or more contributor license agreements.  See the NOTICE file
1:a3a8dbc:  * distributed with this work for additional information
1:a3a8dbc:  * regarding copyright ownership.  The ASF licenses this file
1:a3a8dbc:  * to you under the Apache License, Version 2.0 (the
1:a3a8dbc:  * "License"); you may not use this file except in compliance
1:a3a8dbc:  * with the License.  You may obtain a copy of the License at
1:a3a8dbc:  *
1:a3a8dbc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a3a8dbc:  *
1:a3a8dbc:  * Unless required by applicable law or agreed to in writing, software
1:a3a8dbc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a3a8dbc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3a8dbc:  * See the License for the specific language governing permissions and
1:a3a8dbc:  * limitations under the License.
1:a3a8dbc:  */
2:a3a8dbc: 
1:a3a8dbc: package org.apache.cassandra.cql3.statements;
1:a3a8dbc: 
1:a3a8dbc: import org.apache.cassandra.auth.Permission;
1:a3a8dbc: import org.apache.cassandra.config.CFMetaData;
1:a3a8dbc: import org.apache.cassandra.cql3.CFName;
1:a3a8dbc: import org.apache.cassandra.db.view.View;
1:a3a8dbc: import org.apache.cassandra.exceptions.ConfigurationException;
1:a3a8dbc: import org.apache.cassandra.exceptions.InvalidRequestException;
1:a3a8dbc: import org.apache.cassandra.exceptions.UnauthorizedException;
1:a3a8dbc: import org.apache.cassandra.service.ClientState;
1:a3a8dbc: import org.apache.cassandra.service.MigrationManager;
1:a3a8dbc: import org.apache.cassandra.transport.Event;
1:a3a8dbc: 
1:a3a8dbc: public class DropViewStatement extends SchemaAlteringStatement
2:a3a8dbc: {
1:a3a8dbc:     public final boolean ifExists;
1:a3a8dbc: 
1:a3a8dbc:     public DropViewStatement(CFName cf, boolean ifExists)
1:a3a8dbc:     {
1:a3a8dbc:         super(cf);
1:a3a8dbc:         this.ifExists = ifExists;
2:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:a3a8dbc:     {
1:a3a8dbc:         CFMetaData baseTable = View.findBaseTable(keyspace(), columnFamily());
1:a3a8dbc:         if (baseTable != null)
1:a3a8dbc:             state.hasColumnFamilyAccess(keyspace(), baseTable.cfName, Permission.ALTER);
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public void validate(ClientState state)
1:a3a8dbc:     {
1:a3a8dbc:         // validated in findIndexedCf()
1:a3a8dbc:     }
1:a3a8dbc: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
1:a3a8dbc:     {
1:a3a8dbc:         try
1:a3a8dbc:         {
1:a3a8dbc: //            ViewDefinition view = Schema.instance.getViewDefinition(keyspace(), columnFamily());
1:a3a8dbc: //            if (view == null)
1:a3a8dbc: //            {
1:a3a8dbc: //                if (Schema.instance.getCFMetaData(keyspace(), columnFamily()) != null)
1:a3a8dbc: //                    throw new ConfigurationException(String.format("Cannot drop table '%s' in keyspace '%s'.", columnFamily(), keyspace()));
1:a3a8dbc: //
1:a3a8dbc: //                throw new ConfigurationException(String.format("Cannot drop non existing materialized view '%s' in keyspace '%s'.", columnFamily(), keyspace()));
1:a3a8dbc: //            }
1:a3a8dbc: //
1:a3a8dbc: //            CFMetaData baseCfm = Schema.instance.getCFMetaData(view.baseTableId);
1:a3a8dbc: //            if (baseCfm == null)
1:a3a8dbc: //            {
1:a3a8dbc: //                if (ifExists)
1:a3a8dbc: //                    throw new ConfigurationException(String.format("Cannot drop materialized view '%s' in keyspace '%s' without base CF.", columnFamily(), keyspace()));
1:a3a8dbc: //                else
1:a3a8dbc: //                    throw new InvalidRequestException(String.format("View '%s' could not be found in any of the tables of keyspace '%s'", cfName, keyspace()));
1:a3a8dbc: //            }
1:a3a8dbc: 
1:a3a8dbc:             MigrationManager.announceViewDrop(keyspace(), columnFamily(), isLocalOnly);
1:2cbd776:             return new Event.SchemaChange(Event.SchemaChange.Change.DROPPED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
1:a3a8dbc:         }
1:a3a8dbc:         catch (ConfigurationException e)
1:a3a8dbc:         {
1:a3a8dbc:             if (ifExists)
1:2cbd776:                 return null;
1:a3a8dbc:             throw e;
1:a3a8dbc:         }
1:a3a8dbc:     }
1:a3a8dbc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
/////////////////////////////////////////////////////////////////////////
1:             return new Event.SchemaChange(Event.SchemaChange.Change.DROPPED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
1:                 return null;
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.statements;
1: 
1: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.config.ViewDefinition;
1: import org.apache.cassandra.cql3.CFName;
1: import org.apache.cassandra.db.view.View;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.MigrationManager;
1: import org.apache.cassandra.transport.Event;
1: 
1: public class DropViewStatement extends SchemaAlteringStatement
1: {
1:     public final boolean ifExists;
1: 
1:     public DropViewStatement(CFName cf, boolean ifExists)
1:     {
1:         super(cf);
1:         this.ifExists = ifExists;
1:     }
1: 
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:     {
1:         CFMetaData baseTable = View.findBaseTable(keyspace(), columnFamily());
1:         if (baseTable != null)
1:             state.hasColumnFamilyAccess(keyspace(), baseTable.cfName, Permission.ALTER);
1:     }
1: 
1:     public void validate(ClientState state)
1:     {
1:         // validated in findIndexedCf()
1:     }
1: 
0:     public Event.SchemaChange changeEvent()
1:     {
0:         return new Event.SchemaChange(Event.SchemaChange.Change.DROPPED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
1:     }
1: 
0:     public boolean announceMigration(boolean isLocalOnly) throws InvalidRequestException, ConfigurationException
1:     {
1:         try
1:         {
1: //            ViewDefinition view = Schema.instance.getViewDefinition(keyspace(), columnFamily());
1: //            if (view == null)
1: //            {
1: //                if (Schema.instance.getCFMetaData(keyspace(), columnFamily()) != null)
1: //                    throw new ConfigurationException(String.format("Cannot drop table '%s' in keyspace '%s'.", columnFamily(), keyspace()));
1: //
1: //                throw new ConfigurationException(String.format("Cannot drop non existing materialized view '%s' in keyspace '%s'.", columnFamily(), keyspace()));
1: //            }
1: //
1: //            CFMetaData baseCfm = Schema.instance.getCFMetaData(view.baseTableId);
1: //            if (baseCfm == null)
1: //            {
1: //                if (ifExists)
1: //                    throw new ConfigurationException(String.format("Cannot drop materialized view '%s' in keyspace '%s' without base CF.", columnFamily(), keyspace()));
1: //                else
1: //                    throw new InvalidRequestException(String.format("View '%s' could not be found in any of the tables of keyspace '%s'", cfName, keyspace()));
1: //            }
1: 
1:             MigrationManager.announceViewDrop(keyspace(), columnFamily(), isLocalOnly);
0:             return true;
1:         }
1:         catch (ConfigurationException e)
1:         {
1:             if (ifExists)
0:                 return false;
1:             throw e;
1:         }
1:     }
1: }
============================================================================