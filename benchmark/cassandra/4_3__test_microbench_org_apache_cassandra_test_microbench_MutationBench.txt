1:dc9ed46: /*
1:dc9ed46:  * Licensed to the Apache Software Foundation (ASF) under one
1:dc9ed46:  * or more contributor license agreements.  See the NOTICE file
1:dc9ed46:  * distributed with this work for additional information
1:dc9ed46:  * regarding copyright ownership.  The ASF licenses this file
1:dc9ed46:  * to you under the Apache License, Version 2.0 (the
1:dc9ed46:  * "License"); you may not use this file except in compliance
1:dc9ed46:  * with the License.  You may obtain a copy of the License at
1:dc9ed46:  *
1:dc9ed46:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dc9ed46:  *
1:dc9ed46:  * Unless required by applicable law or agreed to in writing, software
1:dc9ed46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc9ed46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc9ed46:  * See the License for the specific language governing permissions and
1:dc9ed46:  * limitations under the License.
1:dc9ed46:  */
1:dc9ed46: 
1:dc9ed46: package org.apache.cassandra.test.microbench;
1:dc9ed46: 
1:dc9ed46: 
1:dc9ed46: import java.io.IOException;
1:dc9ed46: import java.nio.ByteBuffer;
1:dc9ed46: import java.util.Collection;
1:dc9ed46: import java.util.concurrent.*;
1:dc9ed46: 
1:dc9ed46: import org.apache.cassandra.UpdateBuilder;
1:dc9ed46: import org.apache.cassandra.config.CFMetaData;
1:dc9ed46: import org.apache.cassandra.config.Config;
1:dc9ed46: import org.apache.cassandra.config.DatabaseDescriptor;
1:dc9ed46: import org.apache.cassandra.config.Schema;
1:dc9ed46: import org.apache.cassandra.db.Mutation;
1:dc9ed46: import org.apache.cassandra.dht.Murmur3Partitioner;
1:dc9ed46: import org.apache.cassandra.io.util.DataInputBuffer;
1:dc9ed46: import org.apache.cassandra.io.util.DataOutputBuffer;
1:dc9ed46: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1:dc9ed46: import org.apache.cassandra.net.MessageIn;
1:dc9ed46: import org.apache.cassandra.net.MessageOut;
1:dc9ed46: import org.apache.cassandra.net.MessagingService;
1:dc9ed46: import org.apache.cassandra.schema.KeyspaceMetadata;
1:dc9ed46: import org.apache.cassandra.schema.KeyspaceParams;
1:dc9ed46: import org.openjdk.jmh.annotations.*;
1:dc9ed46: import org.openjdk.jmh.profile.StackProfiler;
1:dc9ed46: import org.openjdk.jmh.results.Result;
1:dc9ed46: import org.openjdk.jmh.results.RunResult;
1:dc9ed46: import org.openjdk.jmh.runner.Runner;
1:dc9ed46: import org.openjdk.jmh.runner.options.Options;
1:dc9ed46: import org.openjdk.jmh.runner.options.OptionsBuilder;
1:dc9ed46: 
1:dc9ed46: @BenchmarkMode(Mode.Throughput)
1:dc9ed46: @OutputTimeUnit(TimeUnit.MILLISECONDS)
1:dc9ed46: @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)
1:dc9ed46: @Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)
1:dc9ed46: @Fork(value = 1
1:dc9ed46:        , jvmArgsAppend = {"-Djmh.executor=CUSTOM", "-Djmh.executor.class=org.apache.cassandra.test.microbench.FastThreadExecutor"
1:dc9ed46:        //,"-XX:+UnlockCommercialFeatures", "-XX:+FlightRecorder","-XX:+UnlockDiagnosticVMOptions", "-XX:+DebugNonSafepoints",
1:dc9ed46:        // "-XX:StartFlightRecording=duration=60s,filename=./profiling-data.jfr,name=profile,settings=profile",
1:dc9ed46:        // "-XX:FlightRecorderOptions=settings=/home/jake/workspace/cassandra/profiling-advanced.jfc,samplethreads=true"
1:dc9ed46:      }
1:dc9ed46: )
1:dc9ed46: @Threads(1)
1:dc9ed46: @State(Scope.Benchmark)
1:dc9ed46: public class MutationBench
1:dc9ed46: {
1:dc9ed46:     static
1:dc9ed46:     {
1:29239c7:         DatabaseDescriptor.clientInitialization(false);
1:cf5cd15:         // Partitioner is not set in client mode.
1:cf5cd15:         if (DatabaseDescriptor.getPartitioner() == null)
1:cf5cd15:             DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     static String keyspace = "keyspace1";
1:dc9ed46: 
1:dc9ed46:     private Mutation mutation;
1:dc9ed46:     private MessageOut<Mutation> messageOut;
1:dc9ed46: 
1:dc9ed46:     private ByteBuffer buffer;
1:dc9ed46:     private DataOutputBuffer outputBuffer;
1:dc9ed46:     private DataInputBuffer inputBuffer;
1:dc9ed46: 
1:dc9ed46: 
1:dc9ed46:     @State(Scope.Thread)
1:dc9ed46:     public static class ThreadState
1:dc9ed46:     {
1:dc9ed46:         MessageIn<Mutation> in;
1:dc9ed46:         int counter = 0;
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     @Setup
1:dc9ed46:     public void setup() throws IOException
1:dc9ed46:     {
1:dc9ed46:         Schema.instance.load(KeyspaceMetadata.create(keyspace, KeyspaceParams.simple(1)));
1:dc9ed46:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(keyspace);
1:dc9ed46:         CFMetaData metadata = CFMetaData.compile("CREATE TABLE userpics " +
1:dc9ed46:                                                    "( userid bigint," +
1:dc9ed46:                                                    "picid bigint," +
1:dc9ed46:                                                    "commentid bigint, " +
1:dc9ed46:                                                    "PRIMARY KEY(userid, picid))", keyspace);
1:dc9ed46: 
1:dc9ed46:         Schema.instance.load(metadata);
1:dc9ed46:         Schema.instance.setKeyspaceMetadata(ksm.withSwapped(ksm.tables.with(metadata)));
1:dc9ed46: 
1:dc9ed46: 
1:dc9ed46:         mutation = (Mutation)UpdateBuilder.create(metadata, 1L).newRow(1L).add("commentid", 32L).makeMutation();
1:dc9ed46:         messageOut = mutation.createMessage();
1:dc9ed46:         buffer = ByteBuffer.allocate(messageOut.serializedSize(MessagingService.current_version));
1:dc9ed46:         outputBuffer = new DataOutputBufferFixed(buffer);
1:dc9ed46:         inputBuffer = new DataInputBuffer(buffer, false);
1:dc9ed46: 
1:dc9ed46:         messageOut.serialize(outputBuffer, MessagingService.current_version);
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     @Benchmark
1:dc9ed46:     public void serialize(ThreadState state) throws IOException
1:dc9ed46:     {
1:dc9ed46:         buffer.rewind();
1:dc9ed46:         messageOut.serialize(outputBuffer, MessagingService.current_version);
1:dc9ed46:         state.counter++;
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     @Benchmark
1:dc9ed46:     public void deserialize(ThreadState state) throws IOException
1:dc9ed46:     {
1:dc9ed46:         buffer.rewind();
1:dc9ed46:         state.in = MessageIn.read(inputBuffer, MessagingService.current_version, 0);
1:dc9ed46:         state.counter++;
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     public static void main(String... args) throws Exception {
1:dc9ed46:         Options opts = new OptionsBuilder()
1:dc9ed46:                        .include(".*"+MutationBench.class.getSimpleName()+".*")
1:dc9ed46:                        .jvmArgs("-server")
1:dc9ed46:                        .forks(1)
1:dc9ed46:                        .mode(Mode.Throughput)
1:dc9ed46:                        .addProfiler(StackProfiler.class)
1:dc9ed46:                        .build();
1:dc9ed46: 
1:dc9ed46:         Collection<RunResult> records = new Runner(opts).run();
1:dc9ed46:         for ( RunResult result : records) {
1:dc9ed46:             Result r = result.getPrimaryResult();
1:dc9ed46:             System.out.println("API replied benchmark score: "
1:dc9ed46:                                + r.getScore() + " "
1:dc9ed46:                                + r.getScoreUnit() + " over "
1:dc9ed46:                                + r.getStatistics().getN() + " iterations");
1:dc9ed46:         }
1:dc9ed46:     }
1:dc9ed46: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:cf5cd15
/////////////////////////////////////////////////////////////////////////
1:         // Partitioner is not set in client mode.
1:         if (DatabaseDescriptor.getPartitioner() == null)
1:             DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);
author:Jeremiah D Jordan
-------------------------------------------------------------------------------
commit:8206839
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:29239c7
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.clientInitialization(false);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.test.microbench;
1: 
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Collection;
1: import java.util.concurrent.*;
1: 
1: import org.apache.cassandra.UpdateBuilder;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.dht.Murmur3Partitioner;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1: import org.apache.cassandra.net.MessageIn;
1: import org.apache.cassandra.net.MessageOut;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.schema.KeyspaceMetadata;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.openjdk.jmh.annotations.*;
1: import org.openjdk.jmh.profile.StackProfiler;
1: import org.openjdk.jmh.results.Result;
1: import org.openjdk.jmh.results.RunResult;
1: import org.openjdk.jmh.runner.Runner;
1: import org.openjdk.jmh.runner.options.Options;
1: import org.openjdk.jmh.runner.options.OptionsBuilder;
1: 
1: @BenchmarkMode(Mode.Throughput)
1: @OutputTimeUnit(TimeUnit.MILLISECONDS)
1: @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)
1: @Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)
1: @Fork(value = 1
1:        , jvmArgsAppend = {"-Djmh.executor=CUSTOM", "-Djmh.executor.class=org.apache.cassandra.test.microbench.FastThreadExecutor"
1:        //,"-XX:+UnlockCommercialFeatures", "-XX:+FlightRecorder","-XX:+UnlockDiagnosticVMOptions", "-XX:+DebugNonSafepoints",
1:        // "-XX:StartFlightRecording=duration=60s,filename=./profiling-data.jfr,name=profile,settings=profile",
1:        // "-XX:FlightRecorderOptions=settings=/home/jake/workspace/cassandra/profiling-advanced.jfc,samplethreads=true"
1:      }
1: )
1: @Threads(1)
1: @State(Scope.Benchmark)
1: public class MutationBench
1: {
1:     static
1:     {
0:         Config.setClientMode(true);
0:         // Partitioner is not set in client mode.
0:         if (DatabaseDescriptor.getPartitioner() == null)
0:             DatabaseDescriptor.setPartitionerUnsafe(Murmur3Partitioner.instance);
1:     }
1: 
1:     static String keyspace = "keyspace1";
1: 
1:     private Mutation mutation;
1:     private MessageOut<Mutation> messageOut;
1: 
1:     private ByteBuffer buffer;
1:     private DataOutputBuffer outputBuffer;
1:     private DataInputBuffer inputBuffer;
1: 
1: 
1:     @State(Scope.Thread)
1:     public static class ThreadState
1:     {
1:         MessageIn<Mutation> in;
1:         int counter = 0;
1:     }
1: 
1:     @Setup
1:     public void setup() throws IOException
1:     {
1:         Schema.instance.load(KeyspaceMetadata.create(keyspace, KeyspaceParams.simple(1)));
1:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(keyspace);
1:         CFMetaData metadata = CFMetaData.compile("CREATE TABLE userpics " +
1:                                                    "( userid bigint," +
1:                                                    "picid bigint," +
1:                                                    "commentid bigint, " +
1:                                                    "PRIMARY KEY(userid, picid))", keyspace);
1: 
1:         Schema.instance.load(metadata);
1:         Schema.instance.setKeyspaceMetadata(ksm.withSwapped(ksm.tables.with(metadata)));
1: 
1: 
1:         mutation = (Mutation)UpdateBuilder.create(metadata, 1L).newRow(1L).add("commentid", 32L).makeMutation();
1:         messageOut = mutation.createMessage();
1:         buffer = ByteBuffer.allocate(messageOut.serializedSize(MessagingService.current_version));
1:         outputBuffer = new DataOutputBufferFixed(buffer);
1:         inputBuffer = new DataInputBuffer(buffer, false);
1: 
1:         messageOut.serialize(outputBuffer, MessagingService.current_version);
1:     }
1: 
1:     @Benchmark
1:     public void serialize(ThreadState state) throws IOException
1:     {
1:         buffer.rewind();
1:         messageOut.serialize(outputBuffer, MessagingService.current_version);
1:         state.counter++;
1:     }
1: 
1:     @Benchmark
1:     public void deserialize(ThreadState state) throws IOException
1:     {
1:         buffer.rewind();
1:         state.in = MessageIn.read(inputBuffer, MessagingService.current_version, 0);
1:         state.counter++;
1:     }
1: 
1:     public static void main(String... args) throws Exception {
1:         Options opts = new OptionsBuilder()
1:                        .include(".*"+MutationBench.class.getSimpleName()+".*")
1:                        .jvmArgs("-server")
1:                        .forks(1)
1:                        .mode(Mode.Throughput)
1:                        .addProfiler(StackProfiler.class)
1:                        .build();
1: 
1:         Collection<RunResult> records = new Runner(opts).run();
1:         for ( RunResult result : records) {
1:             Result r = result.getPrimaryResult();
1:             System.out.println("API replied benchmark score: "
1:                                + r.getScore() + " "
1:                                + r.getScoreUnit() + " over "
1:                                + r.getStatistics().getN() + " iterations");
1:         }
1:     }
1: }
============================================================================