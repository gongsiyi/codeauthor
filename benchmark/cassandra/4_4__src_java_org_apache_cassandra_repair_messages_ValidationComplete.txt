1:eb4fa4a: /*
1:eb4fa4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:eb4fa4a:  * or more contributor license agreements.  See the NOTICE file
1:eb4fa4a:  * distributed with this work for additional information
1:eb4fa4a:  * regarding copyright ownership.  The ASF licenses this file
1:eb4fa4a:  * to you under the Apache License, Version 2.0 (the
1:eb4fa4a:  * "License"); you may not use this file except in compliance
1:eb4fa4a:  * with the License.  You may obtain a copy of the License at
1:eb4fa4a:  *
1:eb4fa4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb4fa4a:  *
1:eb4fa4a:  * Unless required by applicable law or agreed to in writing, software
1:eb4fa4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb4fa4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb4fa4a:  * See the License for the specific language governing permissions and
1:eb4fa4a:  * limitations under the License.
1:eb4fa4a:  */
1:eb4fa4a: package org.apache.cassandra.repair.messages;
1:eb4fa4a: 
1:eb4fa4a: import java.io.IOException;
1:eb4fa4a: 
1:eb4fa4a: import org.apache.cassandra.db.TypeSizes;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:eb4fa4a: import org.apache.cassandra.repair.RepairJobDesc;
1:0dd50a6: import org.apache.cassandra.utils.MerkleTrees;
1:eb4fa4a: 
1:eb4fa4a: /**
1:eb4fa4a:  * ValidationComplete message is sent when validation compaction completed successfully.
1:eb4fa4a:  *
1:eb4fa4a:  * @since 2.0
1:eb4fa4a:  */
1:eb4fa4a: public class ValidationComplete extends RepairMessage
2:eb4fa4a: {
1:eb4fa4a:     public static MessageSerializer serializer = new ValidationCompleteSerializer();
1:eb4fa4a: 
1:eb4fa4a:     /** Merkle hash tree response. Null if validation failed. */
1:0dd50a6:     public final MerkleTrees trees;
1:eb4fa4a: 
1:eb4fa4a:     public ValidationComplete(RepairJobDesc desc)
1:eb4fa4a:     {
1:eb4fa4a:         super(Type.VALIDATION_COMPLETE, desc);
1:0dd50a6:         trees = null;
2:eb4fa4a:     }
1:eb4fa4a: 
1:0dd50a6:     public ValidationComplete(RepairJobDesc desc, MerkleTrees trees)
1:eb4fa4a:     {
1:eb4fa4a:         super(Type.VALIDATION_COMPLETE, desc);
1:0dd50a6:         assert trees != null;
1:0dd50a6:         this.trees = trees;
1:0dd50a6:     }
1:0dd50a6: 
1:0dd50a6:     public boolean success()
1:0dd50a6:     {
1:0dd50a6:         return trees != null;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     private static class ValidationCompleteSerializer implements MessageSerializer<ValidationComplete>
1:eb4fa4a:     {
1:75508ec:         public void serialize(ValidationComplete message, DataOutputPlus out, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             RepairJobDesc.serializer.serialize(message.desc, out, version);
1:0dd50a6:             out.writeBoolean(message.success());
1:0dd50a6:             if (message.trees != null)
1:0dd50a6:                 MerkleTrees.serializer.serialize(message.trees, out, version);
1:eb4fa4a:         }
1:eb4fa4a: 
1:03f72ac:         public ValidationComplete deserialize(DataInputPlus in, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             RepairJobDesc desc = RepairJobDesc.serializer.deserialize(in, version);
1:0dd50a6:             boolean success = in.readBoolean();
1:0dd50a6: 
1:0dd50a6:             if (success)
1:eb4fa4a:             {
1:0dd50a6:                 MerkleTrees trees = MerkleTrees.serializer.deserialize(in, version);
1:0dd50a6:                 return new ValidationComplete(desc, trees);
1:eb4fa4a:             }
1:0dd50a6: 
1:0dd50a6:             return new ValidationComplete(desc);
1:eb4fa4a:         }
1:eb4fa4a: 
1:eb4fa4a:         public long serializedSize(ValidationComplete message, int version)
1:eb4fa4a:         {
1:eb4fa4a:             long size = RepairJobDesc.serializer.serializedSize(message.desc, version);
1:0dd50a6:             size += TypeSizes.sizeof(message.success());
1:0dd50a6:             if (message.trees != null)
1:0dd50a6:                 size += MerkleTrees.serializer.serializedSize(message.trees, version);
1:eb4fa4a:             return size;
1:eb4fa4a:         }
1:eb4fa4a:     }
1:eb4fa4a: }
============================================================================
author:Marcus Olsson
-------------------------------------------------------------------------------
commit:0dd50a6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.MerkleTrees;
/////////////////////////////////////////////////////////////////////////
1:     public final MerkleTrees trees;
1:         trees = null;
1:     public ValidationComplete(RepairJobDesc desc, MerkleTrees trees)
1:         assert trees != null;
1:         this.trees = trees;
1:     }
1: 
1:     public boolean success()
1:     {
1:         return trees != null;
/////////////////////////////////////////////////////////////////////////
1:             out.writeBoolean(message.success());
1:             if (message.trees != null)
1:                 MerkleTrees.serializer.serialize(message.trees, out, version);
1:             boolean success = in.readBoolean();
1: 
1:             if (success)
1:                 MerkleTrees trees = MerkleTrees.serializer.deserialize(in, version);
1:                 return new ValidationComplete(desc, trees);
1: 
1:             return new ValidationComplete(desc);
1:             size += TypeSizes.sizeof(message.success());
1:             if (message.trees != null)
1:                 size += MerkleTrees.serializer.serializedSize(message.trees, version);
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public ValidationComplete deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0:             size += TypeSizes.sizeof(message.success);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(ValidationComplete message, DataOutputPlus out, int version) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb4fa4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair.messages;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.repair.RepairJobDesc;
0: import org.apache.cassandra.utils.MerkleTree;
1: 
1: /**
1:  * ValidationComplete message is sent when validation compaction completed successfully.
1:  *
1:  * @since 2.0
1:  */
1: public class ValidationComplete extends RepairMessage
1: {
1:     public static MessageSerializer serializer = new ValidationCompleteSerializer();
1: 
0:     /** true if validation success, false otherwise */
0:     public final boolean success;
1:     /** Merkle hash tree response. Null if validation failed. */
0:     public final MerkleTree tree;
1: 
1:     public ValidationComplete(RepairJobDesc desc)
1:     {
1:         super(Type.VALIDATION_COMPLETE, desc);
0:         this.success = false;
0:         this.tree = null;
1:     }
1: 
0:     public ValidationComplete(RepairJobDesc desc, MerkleTree tree)
1:     {
1:         super(Type.VALIDATION_COMPLETE, desc);
0:         assert tree != null;
0:         this.success = true;
0:         this.tree = tree;
1:     }
1: 
1:     private static class ValidationCompleteSerializer implements MessageSerializer<ValidationComplete>
1:     {
0:         public void serialize(ValidationComplete message, DataOutput out, int version) throws IOException
1:         {
1:             RepairJobDesc.serializer.serialize(message.desc, out, version);
0:             out.writeBoolean(message.success);
0:             if (message.success)
0:                 MerkleTree.serializer.serialize(message.tree, out, version);
1:         }
1: 
0:         public ValidationComplete deserialize(DataInput in, int version) throws IOException
1:         {
1:             RepairJobDesc desc = RepairJobDesc.serializer.deserialize(in, version);
0:             if (in.readBoolean())
1:             {
0:                 MerkleTree tree = MerkleTree.serializer.deserialize(in, version);
0:                 return new ValidationComplete(desc, tree);
1:             }
0:             else
1:             {
0:                 return new ValidationComplete(desc);
1:             }
1:         }
1: 
1:         public long serializedSize(ValidationComplete message, int version)
1:         {
1:             long size = RepairJobDesc.serializer.serializedSize(message.desc, version);
0:             size += TypeSizes.NATIVE.sizeof(message.success);
0:             if (message.success)
0:                 size += MerkleTree.serializer.serializedSize(message.tree, version);
1:             return size;
1:         }
1:     }
1: }
============================================================================