1:765ab3f: /*
1:765ab3f:  * Licensed to the Apache Software Foundation (ASF) under one
1:765ab3f:  * or more contributor license agreements.  See the NOTICE file
1:765ab3f:  * distributed with this work for additional information
1:765ab3f:  * regarding copyright ownership.  The ASF licenses this file
1:765ab3f:  * to you under the Apache License, Version 2.0 (the
1:765ab3f:  * "License"); you may not use this file except in compliance
1:765ab3f:  * with the License.  You may obtain a copy of the License at
1:765ab3f:  *
1:765ab3f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:765ab3f:  *
1:765ab3f:  * Unless required by applicable law or agreed to in writing, software
1:765ab3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:765ab3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:765ab3f:  * See the License for the specific language governing permissions and
1:765ab3f:  * limitations under the License.
1:765ab3f:  */
1:765ab3f: package org.apache.cassandra.config;
1:765ab3f: 
1:765ab3f: import com.google.common.annotations.VisibleForTesting;
1:765ab3f: import com.google.common.base.Objects;
1:765ab3f: 
1:765ab3f: public class TransparentDataEncryptionOptions
1:765ab3f: {
1:765ab3f:     public boolean enabled = false;
1:765ab3f:     public int chunk_length_kb = 64;
1:765ab3f:     public String cipher = "AES/CBC/PKCS5Padding";
1:765ab3f:     public String key_alias;
1:765ab3f:     public int iv_length = 16;
1:765ab3f: 
1:765ab3f:     public ParameterizedClass key_provider;
1:765ab3f: 
1:765ab3f:     public TransparentDataEncryptionOptions()
1:765ab3f:     {   }
1:765ab3f: 
1:765ab3f:     public TransparentDataEncryptionOptions(boolean enabled)
1:765ab3f:     {
1:765ab3f:         this.enabled = enabled;
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public TransparentDataEncryptionOptions(String cipher, String keyAlias, ParameterizedClass keyProvider)
1:765ab3f:     {
1:765ab3f:         this(true, cipher, keyAlias, keyProvider);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public TransparentDataEncryptionOptions(boolean enabled, String cipher, String keyAlias, ParameterizedClass keyProvider)
1:765ab3f:     {
1:765ab3f:         this.enabled = enabled;
1:765ab3f:         this.cipher = cipher;
1:765ab3f:         key_alias = keyAlias;
1:765ab3f:         key_provider = keyProvider;
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public String get(String key)
1:765ab3f:     {
1:765ab3f:         return key_provider.parameters.get(key);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     @VisibleForTesting
1:765ab3f:     public void remove(String key)
1:765ab3f:     {
1:765ab3f:         key_provider.parameters.remove(key);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public boolean equals(Object o)
1:765ab3f:     {
1:765ab3f:         return o instanceof TransparentDataEncryptionOptions && equals((TransparentDataEncryptionOptions) o);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public boolean equals(TransparentDataEncryptionOptions other)
1:765ab3f:     {
1:765ab3f:         // not sure if this is a great equals() impl....
1:765ab3f:         return Objects.equal(cipher, other.cipher) &&
1:765ab3f:                Objects.equal(key_alias, other.key_alias);
1:765ab3f:     }
1:765ab3f: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ef59624
/////////////////////////////////////////////////////////////////////////
author:Jason Brown
-------------------------------------------------------------------------------
commit:765ab3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.config;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.base.Objects;
1: 
1: public class TransparentDataEncryptionOptions
1: {
1:     public boolean enabled = false;
1:     public int chunk_length_kb = 64;
1:     public String cipher = "AES/CBC/PKCS5Padding";
1:     public String key_alias;
1:     public int iv_length = 16;
1: 
1:     public ParameterizedClass key_provider;
1: 
1:     public TransparentDataEncryptionOptions()
1:     {   }
1: 
1:     public TransparentDataEncryptionOptions(boolean enabled)
1:     {
1:         this.enabled = enabled;
1:     }
1: 
1:     public TransparentDataEncryptionOptions(String cipher, String keyAlias, ParameterizedClass keyProvider)
1:     {
1:         this(true, cipher, keyAlias, keyProvider);
1:     }
1: 
1:     public TransparentDataEncryptionOptions(boolean enabled, String cipher, String keyAlias, ParameterizedClass keyProvider)
1:     {
1:         this.enabled = enabled;
1:         this.cipher = cipher;
1:         key_alias = keyAlias;
1:         key_provider = keyProvider;
1:     }
1: 
1:     public String get(String key)
1:     {
1:         return key_provider.parameters.get(key);
1:     }
1: 
1:     @VisibleForTesting
1:     public void remove(String key)
1:     {
1:         key_provider.parameters.remove(key);
1:     }
1: 
1:     public boolean equals(Object o)
1:     {
1:         return o instanceof TransparentDataEncryptionOptions && equals((TransparentDataEncryptionOptions) o);
1:     }
1: 
1:     public boolean equals(TransparentDataEncryptionOptions other)
1:     {
1:         // not sure if this is a great equals() impl....
1:         return Objects.equal(cipher, other.cipher) &&
1:                Objects.equal(key_alias, other.key_alias);
1:     }
1: }
commit:72f5fbd
/////////////////////////////////////////////////////////////////////////
commit:37160e1
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.config;
0: 
0: import com.google.common.annotations.VisibleForTesting;
0: import com.google.common.base.Objects;
0: 
0: public class TransparentDataEncryptionOptions
0: {
0:     public boolean enabled = false;
0:     public int chunk_length_kb = 64;
0:     public String cipher = "AES/CBC/PKCS5Padding";
0:     public String key_alias;
0:     public int iv_length = 16;
0: 
0:     public ParameterizedClass key_provider;
0: 
0:     public TransparentDataEncryptionOptions()
0:     {   }
0: 
0:     public TransparentDataEncryptionOptions(boolean enabled)
0:     {
0:         this.enabled = enabled;
0:     }
0: 
0:     public TransparentDataEncryptionOptions(String cipher, String keyAlias, ParameterizedClass keyProvider)
0:     {
0:         this(true, cipher, keyAlias, keyProvider);
0:     }
0: 
0:     public TransparentDataEncryptionOptions(boolean enabled, String cipher, String keyAlias, ParameterizedClass keyProvider)
0:     {
0:         this.enabled = enabled;
0:         this.cipher = cipher;
0:         key_alias = keyAlias;
0:         key_provider = keyProvider;
0:     }
0: 
0:     public String get(String key)
0:     {
0:         return key_provider.parameters.get(key);
0:     }
0: 
0:     @VisibleForTesting
0:     public void remove(String key)
0:     {
0:         key_provider.parameters.remove(key);
0:     }
0: 
0:     public boolean equals(Object o)
0:     {
0:         return o instanceof TransparentDataEncryptionOptions && equals((TransparentDataEncryptionOptions) o);
0:     }
0: 
0:     public boolean equals(TransparentDataEncryptionOptions other)
0:     {
0:         // not sure if this is a great equals() impl....
0:         return Objects.equal(cipher, other.cipher) &&
0:                Objects.equal(key_alias, other.key_alias);
0:     }
0: }
============================================================================