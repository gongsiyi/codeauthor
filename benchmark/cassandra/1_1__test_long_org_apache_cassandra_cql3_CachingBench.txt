1:30bb255: /*
1:30bb255:  * Licensed to the Apache Software Foundation (ASF) under one
1:30bb255:  * or more contributor license agreements.  See the NOTICE file
1:30bb255:  * distributed with this work for additional information
1:30bb255:  * regarding copyright ownership.  The ASF licenses this file
1:30bb255:  * to you under the Apache License, Version 2.0 (the
1:30bb255:  * "License"); you may not use this file except in compliance
1:30bb255:  * with the License.  You may obtain a copy of the License at
1:30bb255:  *
1:30bb255:  *     http://www.apache.org/licenses/LICENSE-2.0
1:30bb255:  *
1:30bb255:  * Unless required by applicable law or agreed to in writing, software
1:30bb255:  * distributed under the License is distributed on an "AS IS" BASIS,
1:30bb255:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:30bb255:  * See the License for the specific language governing permissions and
1:30bb255:  * limitations under the License.
1:30bb255:  */
1:30bb255: 
1:30bb255: package org.apache.cassandra.cql3;
1:30bb255: 
1:30bb255: import java.util.ArrayList;
1:30bb255: import java.util.Arrays;
1:30bb255: import java.util.List;
1:30bb255: import java.util.Random;
1:30bb255: import java.util.concurrent.ExecutorService;
1:30bb255: import java.util.concurrent.Executors;
1:30bb255: import java.util.concurrent.Future;
1:30bb255: import java.util.concurrent.atomic.AtomicLong;
1:30bb255: import java.util.function.Predicate;
1:30bb255: 
1:30bb255: import com.google.common.collect.Iterables;
1:30bb255: import org.junit.Before;
1:30bb255: import org.junit.BeforeClass;
1:30bb255: import org.junit.Test;
1:30bb255: 
1:30bb255: import junit.framework.Assert;
1:30bb255: import org.apache.cassandra.config.Config.CommitLogSync;
1:30bb255: import org.apache.cassandra.config.Config.DiskAccessMode;
1:30bb255: import org.apache.cassandra.cache.ChunkCache;
1:30bb255: import org.apache.cassandra.config.DatabaseDescriptor;
1:30bb255: import org.apache.cassandra.db.ColumnFamilyStore;
1:30bb255: import org.apache.cassandra.db.compaction.CompactionManager;
1:30bb255: import org.apache.cassandra.db.rows.Row;
1:30bb255: import org.apache.cassandra.db.rows.Unfiltered;
1:30bb255: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:30bb255: import org.apache.cassandra.io.sstable.ISSTableScanner;
1:30bb255: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:30bb255: import org.apache.cassandra.io.util.FileUtils;
1:30bb255: import org.apache.cassandra.utils.FBUtilities;
1:30bb255: 
1:30bb255: public class CachingBench extends CQLTester
1:30bb255: {
1:30bb255:     private static final String STRATEGY = "LeveledCompactionStrategy";
1:30bb255: 
1:30bb255:     private static final int DEL_SECTIONS = 1000;
1:30bb255:     private static final int FLUSH_FREQ = 10000;
1:30bb255:     private static final int SCAN_FREQUENCY_INV = 12000;
1:30bb255:     static final int COUNT = 29000;
1:30bb255:     static final int ITERS = 9;
1:30bb255: 
1:30bb255:     static final int KEY_RANGE = 30;
1:30bb255:     static final int CLUSTERING_RANGE = 210000;
1:30bb255: 
1:30bb255:     static final int EXTRA_SIZE = 1025;
1:30bb255:     static final boolean CONCURRENT_COMPACTIONS = true;
1:30bb255: 
1:30bb255:     // The name of this method is important!
1:30bb255:     // CommitLog settings must be applied before CQLTester sets up; by using the same name as its @BeforeClass method we
1:30bb255:     // are effectively overriding it.
1:30bb255:     @BeforeClass
1:30bb255:     public static void setUpClass()
1:30bb255:     {
1:30bb255:         DatabaseDescriptor.setCommitLogSync(CommitLogSync.periodic);
1:30bb255:         DatabaseDescriptor.setCommitLogSyncPeriod(100);
1:30bb255:         CQLTester.setUpClass();
1:30bb255:     }
1:30bb255:     
1:30bb255:     String hashQuery;
1:30bb255: 
1:30bb255:     @Before
1:30bb255:     public void before() throws Throwable
1:30bb255:     {
1:30bb255:         createTable("CREATE TABLE %s(" +
1:30bb255:                     "  key int," +
1:30bb255:                     "  column int," +
1:30bb255:                     "  data int," +
1:30bb255:                     "  extra text," +
1:30bb255:                     "  PRIMARY KEY(key, column)" +
1:30bb255:                     ")"
1:30bb255:                    );
1:30bb255: 
1:30bb255:         String hashIFunc = parseFunctionName(createFunction(KEYSPACE, "int, int",
1:30bb255:                 " CREATE FUNCTION %s (state int, val int)" +
1:30bb255:                 " CALLED ON NULL INPUT" +
1:30bb255:                 " RETURNS int" +
1:30bb255:                 " LANGUAGE java" +
1:30bb255:                 " AS 'return val != null ? state * 17 + val : state;'")).name;
1:30bb255:         String hashTFunc = parseFunctionName(createFunction(KEYSPACE, "int, text",
1:30bb255:                 " CREATE FUNCTION %s (state int, val text)" +
1:30bb255:                 " CALLED ON NULL INPUT" +
1:30bb255:                 " RETURNS int" +
1:30bb255:                 " LANGUAGE java" +
1:30bb255:                 " AS 'return val != null ? state * 17 + val.hashCode() : state;'")).name;
1:30bb255: 
1:30bb255:         String hashInt = createAggregate(KEYSPACE, "int",
1:30bb255:                 " CREATE AGGREGATE %s (int)" +
1:30bb255:                 " SFUNC " + hashIFunc +
1:30bb255:                 " STYPE int" +
1:30bb255:                 " INITCOND 1");
1:30bb255:         String hashText = createAggregate(KEYSPACE, "text",
1:30bb255:                 " CREATE AGGREGATE %s (text)" +
1:30bb255:                 " SFUNC " + hashTFunc +
1:30bb255:                 " STYPE int" +
1:30bb255:                 " INITCOND 1");
1:30bb255: 
1:30bb255:         hashQuery = String.format("SELECT count(column), %s(key), %s(column), %s(data), %s(extra), avg(key), avg(column), avg(data) FROM %%s",
1:30bb255:                                   hashInt, hashInt, hashInt, hashText);
1:30bb255:     }
1:30bb255:     AtomicLong id = new AtomicLong();
1:30bb255:     long compactionTimeNanos = 0;
1:30bb255: 
1:30bb255:     void pushData(Random rand, int count) throws Throwable
1:30bb255:     {
1:30bb255:         for (int i = 0; i < count; ++i)
1:30bb255:         {
1:30bb255:             long ii = id.incrementAndGet();
1:30bb255:             if (ii % 1000 == 0)
1:30bb255:                 System.out.print('.');
1:30bb255:             int key = rand.nextInt(KEY_RANGE);
1:30bb255:             int column = rand.nextInt(CLUSTERING_RANGE);
1:30bb255:             execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", key, column, (int) ii, genExtra(rand));
1:30bb255:             maybeCompact(ii);
1:30bb255:         }
1:30bb255:     }
1:30bb255: 
1:30bb255:     private String genExtra(Random rand)
1:30bb255:     {
1:30bb255:         StringBuilder builder = new StringBuilder(EXTRA_SIZE);
1:30bb255:         for (int i = 0; i < EXTRA_SIZE; ++i)
1:30bb255:             builder.append((char) ('a' + rand.nextInt('z' - 'a' + 1)));
1:30bb255:         return builder.toString();
1:30bb255:     }
1:30bb255: 
1:30bb255:     void readAndDelete(Random rand, int count) throws Throwable
1:30bb255:     {
1:30bb255:         for (int i = 0; i < count; ++i)
1:30bb255:         {
1:30bb255:             int key;
1:30bb255:             UntypedResultSet res;
1:30bb255:             long ii = id.incrementAndGet();
1:30bb255:             if (ii % 1000 == 0)
1:30bb255:                 System.out.print('-');
1:30bb255:             if (rand.nextInt(SCAN_FREQUENCY_INV) != 1)
1:30bb255:             {
1:30bb255:                 do
1:30bb255:                 {
1:30bb255:                     key = rand.nextInt(KEY_RANGE);
1:30bb255:                     long cid = rand.nextInt(DEL_SECTIONS);
1:30bb255:                     int cstart = (int) (cid * CLUSTERING_RANGE / DEL_SECTIONS);
1:30bb255:                     int cend = (int) ((cid + 1) * CLUSTERING_RANGE / DEL_SECTIONS);
1:30bb255:                     res = execute("SELECT column FROM %s WHERE key = ? AND column >= ? AND column < ? LIMIT 1", key, cstart, cend);
1:30bb255:                 } while (res.size() == 0);
1:30bb255:                 UntypedResultSet.Row r = Iterables.get(res, rand.nextInt(res.size()));
1:30bb255:                 int clustering = r.getInt("column");
1:30bb255:                 execute("DELETE FROM %s WHERE key = ? AND column = ?", key, clustering);
1:30bb255:             }
1:30bb255:             else
1:30bb255:             {
1:30bb255:                 execute(hashQuery);
1:30bb255:             }
1:30bb255:             maybeCompact(ii);
1:30bb255:         }
1:30bb255:     }
1:30bb255: 
1:30bb255:     private void maybeCompact(long ii)
1:30bb255:     {
1:30bb255:         if (ii % FLUSH_FREQ == 0)
1:30bb255:         {
1:30bb255:             System.out.print("F");
1:30bb255:             flush();
1:30bb255:             if (ii % (FLUSH_FREQ * 10) == 0)
1:30bb255:             {
1:30bb255:                 System.out.println("C");
1:30bb255:                 long startTime = System.nanoTime();
1:30bb255:                 getCurrentColumnFamilyStore().enableAutoCompaction(!CONCURRENT_COMPACTIONS);
1:30bb255:                 long endTime = System.nanoTime();
1:30bb255:                 compactionTimeNanos += endTime - startTime;
1:30bb255:                 getCurrentColumnFamilyStore().disableAutoCompaction();
1:30bb255:             }
1:30bb255:         }
1:30bb255:     }
1:30bb255: 
1:30bb255:     public void testSetup(String compactionClass, String compressorClass, DiskAccessMode mode, boolean cacheEnabled) throws Throwable
1:30bb255:     {
1:30bb255:         id.set(0);
1:30bb255:         compactionTimeNanos = 0;
1:30bb255:         ChunkCache.instance.enable(cacheEnabled);
1:30bb255:         DatabaseDescriptor.setDiskAccessMode(mode);
1:30bb255:         alterTable("ALTER TABLE %s WITH compaction = { 'class' :  '" + compactionClass + "'  };");
1:30bb255:         alterTable("ALTER TABLE %s WITH compression = { 'sstable_compression' : '" + compressorClass + "'  };");
1:30bb255:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:30bb255:         cfs.disableAutoCompaction();
1:30bb255: 
1:30bb255:         long onStartTime = System.currentTimeMillis();
1:30bb255:         ExecutorService es = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
1:30bb255:         List<Future<?>> tasks = new ArrayList<>();
1:30bb255:         for (int ti = 0; ti < 1; ++ti)
1:30bb255:         {
1:30bb255:             Random rand = new Random(ti);
1:30bb255:             tasks.add(es.submit(() -> 
1:30bb255:             {
1:30bb255:                 for (int i = 0; i < ITERS; ++i)
1:30bb255:                     try
1:30bb255:                     {
1:30bb255:                         pushData(rand, COUNT);
1:30bb255:                         readAndDelete(rand, COUNT / 3);
1:30bb255:                     }
1:30bb255:                     catch (Throwable e)
1:30bb255:                     {
1:30bb255:                         throw new AssertionError(e);
1:30bb255:                     }
1:30bb255:             }));
1:30bb255:         }
1:30bb255:         for (Future<?> task : tasks)
1:30bb255:             task.get();
1:30bb255: 
1:30bb255:         flush();
1:30bb255:         long onEndTime = System.currentTimeMillis();
1:30bb255:         int startRowCount = countRows(cfs);
1:30bb255:         int startTombCount = countTombstoneMarkers(cfs);
1:30bb255:         int startRowDeletions = countRowDeletions(cfs);
1:30bb255:         int startTableCount = cfs.getLiveSSTables().size();
1:30bb255:         long startSize = SSTableReader.getTotalBytes(cfs.getLiveSSTables());
1:30bb255:         System.out.println("\nCompession: " + cfs.getCompressionParameters().toString());
1:30bb255:         System.out.println("Reader " + cfs.getLiveSSTables().iterator().next().getFileDataInput(0).toString());
1:30bb255:         if (cacheEnabled)
1:30bb255:             System.out.format("Cache size %s requests %,d hit ratio %f\n",
1:30bb255:                 FileUtils.stringifyFileSize(ChunkCache.instance.metrics.size.getValue()),
1:30bb255:                 ChunkCache.instance.metrics.requests.getCount(),
1:30bb255:                 ChunkCache.instance.metrics.hitRate.getValue());
1:30bb255:         else
1:30bb255:         {
1:30bb255:             Assert.assertTrue("Chunk cache had requests: " + ChunkCache.instance.metrics.requests.getCount(), ChunkCache.instance.metrics.requests.getCount() < COUNT);
1:30bb255:             System.out.println("Cache disabled");
1:30bb255:         }
1:30bb255:         System.out.println(String.format("Operations completed in %.3fs", (onEndTime - onStartTime) * 1e-3));
1:30bb255:         if (!CONCURRENT_COMPACTIONS)
1:30bb255:             System.out.println(String.format(", out of which %.3f for non-concurrent compaction", compactionTimeNanos * 1e-9));
1:30bb255:         else
1:30bb255:             System.out.println();
1:30bb255: 
1:30bb255:         String hashesBefore = getHashes();
1:30bb255:         long startTime = System.currentTimeMillis();
1:30bb255:         CompactionManager.instance.performMaximal(cfs, true);
1:30bb255:         long endTime = System.currentTimeMillis();
1:30bb255: 
1:30bb255:         int endRowCount = countRows(cfs);
1:30bb255:         int endTombCount = countTombstoneMarkers(cfs);
1:30bb255:         int endRowDeletions = countRowDeletions(cfs);
1:30bb255:         int endTableCount = cfs.getLiveSSTables().size();
1:30bb255:         long endSize = SSTableReader.getTotalBytes(cfs.getLiveSSTables());
1:30bb255: 
1:30bb255:         System.out.println(String.format("Major compaction completed in %.3fs",
1:30bb255:                 (endTime - startTime) * 1e-3));
1:30bb255:         System.out.println(String.format("At start: %,12d tables %12s %,12d rows %,12d deleted rows %,12d tombstone markers",
1:30bb255:                 startTableCount, FileUtils.stringifyFileSize(startSize), startRowCount, startRowDeletions, startTombCount));
1:30bb255:         System.out.println(String.format("At end:   %,12d tables %12s %,12d rows %,12d deleted rows %,12d tombstone markers",
1:30bb255:                 endTableCount, FileUtils.stringifyFileSize(endSize), endRowCount, endRowDeletions, endTombCount));
1:30bb255:         String hashesAfter = getHashes();
1:30bb255: 
1:30bb255:         Assert.assertEquals(hashesBefore, hashesAfter);
1:30bb255:     }
1:30bb255: 
1:30bb255:     private String getHashes() throws Throwable
1:30bb255:     {
1:30bb255:         long startTime = System.currentTimeMillis();
1:30bb255:         String hashes = Arrays.toString(getRows(execute(hashQuery))[0]);
1:30bb255:         long endTime = System.currentTimeMillis();
1:30bb255:         System.out.println(String.format("Hashes: %s, retrieved in %.3fs", hashes, (endTime - startTime) * 1e-3));
1:30bb255:         return hashes;
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testWarmup() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.mmap, false);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testLZ4CachedMmap() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.mmap, true);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testLZ4CachedStandard() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.standard, true);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testLZ4UncachedMmap() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.mmap, false);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testLZ4UncachedStandard() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.standard, false);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testCachedStandard() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "", DiskAccessMode.standard, true);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testUncachedStandard() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "", DiskAccessMode.standard, false);
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Test
1:30bb255:     public void testMmapped() throws Throwable
1:30bb255:     {
1:30bb255:         testSetup(STRATEGY, "", DiskAccessMode.mmap, false /* doesn't matter */);
1:30bb255:     }
1:30bb255: 
1:30bb255:     int countTombstoneMarkers(ColumnFamilyStore cfs)
1:30bb255:     {
1:30bb255:         return count(cfs, x -> x.isRangeTombstoneMarker());
1:30bb255:     }
1:30bb255: 
1:30bb255:     int countRowDeletions(ColumnFamilyStore cfs)
1:30bb255:     {
1:30bb255:         return count(cfs, x -> x.isRow() && !((Row) x).deletion().isLive());
1:30bb255:     }
1:30bb255: 
1:30bb255:     int countRows(ColumnFamilyStore cfs)
1:30bb255:     {
1:30bb255:         int nowInSec = FBUtilities.nowInSeconds();
1:30bb255:         return count(cfs, x -> x.isRow() && ((Row) x).hasLiveData(nowInSec));
1:30bb255:     }
1:30bb255: 
1:30bb255:     private int count(ColumnFamilyStore cfs, Predicate<Unfiltered> predicate)
1:30bb255:     {
1:30bb255:         int count = 0;
1:30bb255:         for (SSTableReader reader : cfs.getLiveSSTables())
1:30bb255:             count += count(reader, predicate);
1:30bb255:         return count;
1:30bb255:     }
1:30bb255: 
1:30bb255:     int count(SSTableReader reader, Predicate<Unfiltered> predicate)
1:30bb255:     {
1:30bb255:         int instances = 0;
1:30bb255:         try (ISSTableScanner partitions = reader.getScanner())
1:30bb255:         {
1:30bb255:             while (partitions.hasNext())
1:30bb255:             {
1:30bb255:                 try (UnfilteredRowIterator iter = partitions.next())
1:30bb255:                 {
1:30bb255:                     while (iter.hasNext())
1:30bb255:                     {
1:30bb255:                         Unfiltered atom = iter.next();
1:30bb255:                         if (predicate.test(atom))
1:30bb255:                             ++instances;
1:30bb255:                     }
1:30bb255:                 }
1:30bb255:             }
1:30bb255:         }
1:30bb255:         return instances;
1:30bb255:     }
1:30bb255: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Random;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.atomic.AtomicLong;
1: import java.util.function.Predicate;
1: 
1: import com.google.common.collect.Iterables;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.config.Config.CommitLogSync;
1: import org.apache.cassandra.config.Config.DiskAccessMode;
1: import org.apache.cassandra.cache.ChunkCache;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.compaction.CompactionManager;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.db.rows.Unfiltered;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1: import org.apache.cassandra.io.sstable.ISSTableScanner;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class CachingBench extends CQLTester
1: {
1:     private static final String STRATEGY = "LeveledCompactionStrategy";
1: 
1:     private static final int DEL_SECTIONS = 1000;
1:     private static final int FLUSH_FREQ = 10000;
1:     private static final int SCAN_FREQUENCY_INV = 12000;
1:     static final int COUNT = 29000;
1:     static final int ITERS = 9;
1: 
1:     static final int KEY_RANGE = 30;
1:     static final int CLUSTERING_RANGE = 210000;
1: 
1:     static final int EXTRA_SIZE = 1025;
1:     static final boolean CONCURRENT_COMPACTIONS = true;
1: 
1:     // The name of this method is important!
1:     // CommitLog settings must be applied before CQLTester sets up; by using the same name as its @BeforeClass method we
1:     // are effectively overriding it.
1:     @BeforeClass
1:     public static void setUpClass()
1:     {
1:         DatabaseDescriptor.setCommitLogSync(CommitLogSync.periodic);
1:         DatabaseDescriptor.setCommitLogSyncPeriod(100);
1:         CQLTester.setUpClass();
1:     }
1:     
1:     String hashQuery;
1: 
1:     @Before
1:     public void before() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(" +
1:                     "  key int," +
1:                     "  column int," +
1:                     "  data int," +
1:                     "  extra text," +
1:                     "  PRIMARY KEY(key, column)" +
1:                     ")"
1:                    );
1: 
1:         String hashIFunc = parseFunctionName(createFunction(KEYSPACE, "int, int",
1:                 " CREATE FUNCTION %s (state int, val int)" +
1:                 " CALLED ON NULL INPUT" +
1:                 " RETURNS int" +
1:                 " LANGUAGE java" +
1:                 " AS 'return val != null ? state * 17 + val : state;'")).name;
1:         String hashTFunc = parseFunctionName(createFunction(KEYSPACE, "int, text",
1:                 " CREATE FUNCTION %s (state int, val text)" +
1:                 " CALLED ON NULL INPUT" +
1:                 " RETURNS int" +
1:                 " LANGUAGE java" +
1:                 " AS 'return val != null ? state * 17 + val.hashCode() : state;'")).name;
1: 
1:         String hashInt = createAggregate(KEYSPACE, "int",
1:                 " CREATE AGGREGATE %s (int)" +
1:                 " SFUNC " + hashIFunc +
1:                 " STYPE int" +
1:                 " INITCOND 1");
1:         String hashText = createAggregate(KEYSPACE, "text",
1:                 " CREATE AGGREGATE %s (text)" +
1:                 " SFUNC " + hashTFunc +
1:                 " STYPE int" +
1:                 " INITCOND 1");
1: 
1:         hashQuery = String.format("SELECT count(column), %s(key), %s(column), %s(data), %s(extra), avg(key), avg(column), avg(data) FROM %%s",
1:                                   hashInt, hashInt, hashInt, hashText);
1:     }
1:     AtomicLong id = new AtomicLong();
1:     long compactionTimeNanos = 0;
1: 
1:     void pushData(Random rand, int count) throws Throwable
1:     {
1:         for (int i = 0; i < count; ++i)
1:         {
1:             long ii = id.incrementAndGet();
1:             if (ii % 1000 == 0)
1:                 System.out.print('.');
1:             int key = rand.nextInt(KEY_RANGE);
1:             int column = rand.nextInt(CLUSTERING_RANGE);
1:             execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)", key, column, (int) ii, genExtra(rand));
1:             maybeCompact(ii);
1:         }
1:     }
1: 
1:     private String genExtra(Random rand)
1:     {
1:         StringBuilder builder = new StringBuilder(EXTRA_SIZE);
1:         for (int i = 0; i < EXTRA_SIZE; ++i)
1:             builder.append((char) ('a' + rand.nextInt('z' - 'a' + 1)));
1:         return builder.toString();
1:     }
1: 
1:     void readAndDelete(Random rand, int count) throws Throwable
1:     {
1:         for (int i = 0; i < count; ++i)
1:         {
1:             int key;
1:             UntypedResultSet res;
1:             long ii = id.incrementAndGet();
1:             if (ii % 1000 == 0)
1:                 System.out.print('-');
1:             if (rand.nextInt(SCAN_FREQUENCY_INV) != 1)
1:             {
1:                 do
1:                 {
1:                     key = rand.nextInt(KEY_RANGE);
1:                     long cid = rand.nextInt(DEL_SECTIONS);
1:                     int cstart = (int) (cid * CLUSTERING_RANGE / DEL_SECTIONS);
1:                     int cend = (int) ((cid + 1) * CLUSTERING_RANGE / DEL_SECTIONS);
1:                     res = execute("SELECT column FROM %s WHERE key = ? AND column >= ? AND column < ? LIMIT 1", key, cstart, cend);
1:                 } while (res.size() == 0);
1:                 UntypedResultSet.Row r = Iterables.get(res, rand.nextInt(res.size()));
1:                 int clustering = r.getInt("column");
1:                 execute("DELETE FROM %s WHERE key = ? AND column = ?", key, clustering);
1:             }
1:             else
1:             {
1:                 execute(hashQuery);
1:             }
1:             maybeCompact(ii);
1:         }
1:     }
1: 
1:     private void maybeCompact(long ii)
1:     {
1:         if (ii % FLUSH_FREQ == 0)
1:         {
1:             System.out.print("F");
1:             flush();
1:             if (ii % (FLUSH_FREQ * 10) == 0)
1:             {
1:                 System.out.println("C");
1:                 long startTime = System.nanoTime();
1:                 getCurrentColumnFamilyStore().enableAutoCompaction(!CONCURRENT_COMPACTIONS);
1:                 long endTime = System.nanoTime();
1:                 compactionTimeNanos += endTime - startTime;
1:                 getCurrentColumnFamilyStore().disableAutoCompaction();
1:             }
1:         }
1:     }
1: 
1:     public void testSetup(String compactionClass, String compressorClass, DiskAccessMode mode, boolean cacheEnabled) throws Throwable
1:     {
1:         id.set(0);
1:         compactionTimeNanos = 0;
1:         ChunkCache.instance.enable(cacheEnabled);
1:         DatabaseDescriptor.setDiskAccessMode(mode);
1:         alterTable("ALTER TABLE %s WITH compaction = { 'class' :  '" + compactionClass + "'  };");
1:         alterTable("ALTER TABLE %s WITH compression = { 'sstable_compression' : '" + compressorClass + "'  };");
1:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:         cfs.disableAutoCompaction();
1: 
1:         long onStartTime = System.currentTimeMillis();
1:         ExecutorService es = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
1:         List<Future<?>> tasks = new ArrayList<>();
1:         for (int ti = 0; ti < 1; ++ti)
1:         {
1:             Random rand = new Random(ti);
1:             tasks.add(es.submit(() -> 
1:             {
1:                 for (int i = 0; i < ITERS; ++i)
1:                     try
1:                     {
1:                         pushData(rand, COUNT);
1:                         readAndDelete(rand, COUNT / 3);
1:                     }
1:                     catch (Throwable e)
1:                     {
1:                         throw new AssertionError(e);
1:                     }
1:             }));
1:         }
1:         for (Future<?> task : tasks)
1:             task.get();
1: 
1:         flush();
1:         long onEndTime = System.currentTimeMillis();
1:         int startRowCount = countRows(cfs);
1:         int startTombCount = countTombstoneMarkers(cfs);
1:         int startRowDeletions = countRowDeletions(cfs);
1:         int startTableCount = cfs.getLiveSSTables().size();
1:         long startSize = SSTableReader.getTotalBytes(cfs.getLiveSSTables());
1:         System.out.println("\nCompession: " + cfs.getCompressionParameters().toString());
1:         System.out.println("Reader " + cfs.getLiveSSTables().iterator().next().getFileDataInput(0).toString());
1:         if (cacheEnabled)
1:             System.out.format("Cache size %s requests %,d hit ratio %f\n",
1:                 FileUtils.stringifyFileSize(ChunkCache.instance.metrics.size.getValue()),
1:                 ChunkCache.instance.metrics.requests.getCount(),
1:                 ChunkCache.instance.metrics.hitRate.getValue());
1:         else
1:         {
1:             Assert.assertTrue("Chunk cache had requests: " + ChunkCache.instance.metrics.requests.getCount(), ChunkCache.instance.metrics.requests.getCount() < COUNT);
1:             System.out.println("Cache disabled");
1:         }
1:         System.out.println(String.format("Operations completed in %.3fs", (onEndTime - onStartTime) * 1e-3));
1:         if (!CONCURRENT_COMPACTIONS)
1:             System.out.println(String.format(", out of which %.3f for non-concurrent compaction", compactionTimeNanos * 1e-9));
1:         else
1:             System.out.println();
1: 
1:         String hashesBefore = getHashes();
1:         long startTime = System.currentTimeMillis();
1:         CompactionManager.instance.performMaximal(cfs, true);
1:         long endTime = System.currentTimeMillis();
1: 
1:         int endRowCount = countRows(cfs);
1:         int endTombCount = countTombstoneMarkers(cfs);
1:         int endRowDeletions = countRowDeletions(cfs);
1:         int endTableCount = cfs.getLiveSSTables().size();
1:         long endSize = SSTableReader.getTotalBytes(cfs.getLiveSSTables());
1: 
1:         System.out.println(String.format("Major compaction completed in %.3fs",
1:                 (endTime - startTime) * 1e-3));
1:         System.out.println(String.format("At start: %,12d tables %12s %,12d rows %,12d deleted rows %,12d tombstone markers",
1:                 startTableCount, FileUtils.stringifyFileSize(startSize), startRowCount, startRowDeletions, startTombCount));
1:         System.out.println(String.format("At end:   %,12d tables %12s %,12d rows %,12d deleted rows %,12d tombstone markers",
1:                 endTableCount, FileUtils.stringifyFileSize(endSize), endRowCount, endRowDeletions, endTombCount));
1:         String hashesAfter = getHashes();
1: 
1:         Assert.assertEquals(hashesBefore, hashesAfter);
1:     }
1: 
1:     private String getHashes() throws Throwable
1:     {
1:         long startTime = System.currentTimeMillis();
1:         String hashes = Arrays.toString(getRows(execute(hashQuery))[0]);
1:         long endTime = System.currentTimeMillis();
1:         System.out.println(String.format("Hashes: %s, retrieved in %.3fs", hashes, (endTime - startTime) * 1e-3));
1:         return hashes;
1:     }
1: 
1:     @Test
1:     public void testWarmup() throws Throwable
1:     {
1:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.mmap, false);
1:     }
1: 
1:     @Test
1:     public void testLZ4CachedMmap() throws Throwable
1:     {
1:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.mmap, true);
1:     }
1: 
1:     @Test
1:     public void testLZ4CachedStandard() throws Throwable
1:     {
1:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.standard, true);
1:     }
1: 
1:     @Test
1:     public void testLZ4UncachedMmap() throws Throwable
1:     {
1:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.mmap, false);
1:     }
1: 
1:     @Test
1:     public void testLZ4UncachedStandard() throws Throwable
1:     {
1:         testSetup(STRATEGY, "LZ4Compressor", DiskAccessMode.standard, false);
1:     }
1: 
1:     @Test
1:     public void testCachedStandard() throws Throwable
1:     {
1:         testSetup(STRATEGY, "", DiskAccessMode.standard, true);
1:     }
1: 
1:     @Test
1:     public void testUncachedStandard() throws Throwable
1:     {
1:         testSetup(STRATEGY, "", DiskAccessMode.standard, false);
1:     }
1: 
1:     @Test
1:     public void testMmapped() throws Throwable
1:     {
1:         testSetup(STRATEGY, "", DiskAccessMode.mmap, false /* doesn't matter */);
1:     }
1: 
1:     int countTombstoneMarkers(ColumnFamilyStore cfs)
1:     {
1:         return count(cfs, x -> x.isRangeTombstoneMarker());
1:     }
1: 
1:     int countRowDeletions(ColumnFamilyStore cfs)
1:     {
1:         return count(cfs, x -> x.isRow() && !((Row) x).deletion().isLive());
1:     }
1: 
1:     int countRows(ColumnFamilyStore cfs)
1:     {
1:         int nowInSec = FBUtilities.nowInSeconds();
1:         return count(cfs, x -> x.isRow() && ((Row) x).hasLiveData(nowInSec));
1:     }
1: 
1:     private int count(ColumnFamilyStore cfs, Predicate<Unfiltered> predicate)
1:     {
1:         int count = 0;
1:         for (SSTableReader reader : cfs.getLiveSSTables())
1:             count += count(reader, predicate);
1:         return count;
1:     }
1: 
1:     int count(SSTableReader reader, Predicate<Unfiltered> predicate)
1:     {
1:         int instances = 0;
1:         try (ISSTableScanner partitions = reader.getScanner())
1:         {
1:             while (partitions.hasNext())
1:             {
1:                 try (UnfilteredRowIterator iter = partitions.next())
1:                 {
1:                     while (iter.hasNext())
1:                     {
1:                         Unfiltered atom = iter.next();
1:                         if (predicate.test(atom))
1:                             ++instances;
1:                     }
1:                 }
1:             }
1:         }
1:         return instances;
1:     }
1: }
============================================================================