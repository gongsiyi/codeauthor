1:3bdcaa3: /*
1:3bdcaa3:  * Licensed to the Apache Software Foundation (ASF) under one
1:3bdcaa3:  * or more contributor license agreements.  See the NOTICE file
1:3bdcaa3:  * distributed with this work for additional information
1:3bdcaa3:  * regarding copyright ownership.  The ASF licenses this file
1:3bdcaa3:  * to you under the Apache License, Version 2.0 (the
1:3bdcaa3:  * "License"); you may not use this file except in compliance
1:3bdcaa3:  * with the License.  You may obtain a copy of the License at
1:3bdcaa3:  *
1:3bdcaa3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3bdcaa3:  *
1:3bdcaa3:  * Unless required by applicable law or agreed to in writing, software
1:3bdcaa3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bdcaa3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bdcaa3:  * See the License for the specific language governing permissions and
1:3bdcaa3:  * limitations under the License.
1:3bdcaa3:  */
2:3bdcaa3: 
1:3bdcaa3: package org.apache.cassandra.metrics;
1:3bdcaa3: 
1:3bdcaa3: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:3bdcaa3: 
1:62ffa35: import com.codahale.metrics.Counter;
1:62ffa35: import com.codahale.metrics.Timer;
1:62ffa35: import com.codahale.metrics.Gauge;
1:62ffa35: 
1:a3a8dbc: public class ViewWriteMetrics extends ClientRequestMetrics
1:3bdcaa3: {
1:3bdcaa3:     public final Counter viewReplicasAttempted;
1:3bdcaa3:     public final Counter viewReplicasSuccess;
1:62ffa35:     // time between when mutation is applied to local memtable to when CL.ONE is achieved on MV
1:62ffa35:     public final Timer viewWriteLatency;
1:3bdcaa3: 
1:68d2526:     public ViewWriteMetrics(String scope)
1:68d2526:     {
1:3bdcaa3:         super(scope);
1:3bdcaa3:         viewReplicasAttempted = Metrics.counter(factory.createMetricName("ViewReplicasAttempted"));
1:3bdcaa3:         viewReplicasSuccess = Metrics.counter(factory.createMetricName("ViewReplicasSuccess"));
1:62ffa35:         viewWriteLatency = Metrics.timer(factory.createMetricName("ViewWriteLatency"));
1:62ffa35:         Metrics.register(factory.createMetricName("ViewPendingMutations"), new Gauge<Long>()
1:62ffa35:                 {
1:62ffa35:                     public Long getValue()
1:62ffa35:                     {
1:62ffa35:                         return viewReplicasAttempted.getCount() - viewReplicasSuccess.getCount();
1:62ffa35:                     }
1:62ffa35:                 });
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     public void release()
1:3bdcaa3:     {
1:3bdcaa3:         super.release();
1:3bdcaa3:         Metrics.remove(factory.createMetricName("ViewReplicasAttempted"));
1:3bdcaa3:         Metrics.remove(factory.createMetricName("ViewReplicasSuccess"));
1:62ffa35:         Metrics.remove(factory.createMetricName("ViewWriteLatency"));
1:62ffa35:         Metrics.remove(factory.createMetricName("ViewPendingMutations"));
1:3bdcaa3:     }
1:3bdcaa3: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public ViewWriteMetrics(String scope)
1:     {
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:62ffa35
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Counter;
1: import com.codahale.metrics.Timer;
1: import com.codahale.metrics.Gauge;
1: 
1:     // time between when mutation is applied to local memtable to when CL.ONE is achieved on MV
1:     public final Timer viewWriteLatency;
1:         viewWriteLatency = Metrics.timer(factory.createMetricName("ViewWriteLatency"));
1:         Metrics.register(factory.createMetricName("ViewPendingMutations"), new Gauge<Long>()
1:                 {
1:                     public Long getValue()
1:                     {
1:                         return viewReplicasAttempted.getCount() - viewReplicasSuccess.getCount();
1:                     }
1:                 });
/////////////////////////////////////////////////////////////////////////
1:         Metrics.remove(factory.createMetricName("ViewWriteLatency"));
1:         Metrics.remove(factory.createMetricName("ViewPendingMutations"));
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: public class ViewWriteMetrics extends ClientRequestMetrics
0:     public ViewWriteMetrics(String scope) {
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.metrics;
1: 
0: import com.codahale.metrics.Counter;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
0: public class MVWriteMetrics extends ClientRequestMetrics
1: {
1:     public final Counter viewReplicasAttempted;
1:     public final Counter viewReplicasSuccess;
1: 
0:     public MVWriteMetrics(String scope) {
1:         super(scope);
1:         viewReplicasAttempted = Metrics.counter(factory.createMetricName("ViewReplicasAttempted"));
1:         viewReplicasSuccess = Metrics.counter(factory.createMetricName("ViewReplicasSuccess"));
1:     }
1: 
1:     public void release()
1:     {
1:         super.release();
1:         Metrics.remove(factory.createMetricName("ViewReplicasAttempted"));
1:         Metrics.remove(factory.createMetricName("ViewReplicasSuccess"));
1:     }
1: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3c43775
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.metrics;
0: 
0: import com.codahale.metrics.Counter;
0: 
0: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
0: 
0: public class MVWriteMetrics extends ClientRequestMetrics
0: {
0:     public final Counter viewReplicasAttempted;
0:     public final Counter viewReplicasSuccess;
0: 
0:     public MVWriteMetrics(String scope) {
0:         super(scope);
0:         viewReplicasAttempted = Metrics.counter(factory.createMetricName("ViewReplicasAttempted"));
0:         viewReplicasSuccess = Metrics.counter(factory.createMetricName("ViewReplicasSuccess"));
0:     }
0: 
0:     public void release()
0:     {
0:         super.release();
0:         Metrics.remove(factory.createMetricName("ViewReplicasAttempted"));
0:         Metrics.remove(factory.createMetricName("ViewReplicasSuccess"));
0:     }
0: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
============================================================================