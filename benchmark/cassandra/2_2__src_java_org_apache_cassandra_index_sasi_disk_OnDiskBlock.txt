1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.disk;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.Term;
1:72790dc: import org.apache.cassandra.index.sasi.utils.MappedBuffer;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public abstract class OnDiskBlock<T extends Term>
1:72790dc: {
1:72790dc:     public enum BlockType
1:72790dc:     {
1:72790dc:         POINTER, DATA
1:72790dc:     }
1:72790dc: 
1:72790dc:     // this contains offsets of the terms and term data
1:72790dc:     protected final MappedBuffer blockIndex;
1:72790dc:     protected final int blockIndexSize;
1:72790dc: 
1:72790dc:     protected final boolean hasCombinedIndex;
1:72790dc:     protected final TokenTree combinedIndex;
1:72790dc: 
1:72790dc:     public OnDiskBlock(Descriptor descriptor, MappedBuffer block, BlockType blockType)
1:72790dc:     {
1:72790dc:         blockIndex = block;
1:72790dc: 
1:72790dc:         if (blockType == BlockType.POINTER)
1:72790dc:         {
1:72790dc:             hasCombinedIndex = false;
1:72790dc:             combinedIndex = null;
1:72790dc:             blockIndexSize = block.getInt() << 1; // num terms * sizeof(short)
1:72790dc:             return;
1:72790dc:         }
1:72790dc: 
1:72790dc:         long blockOffset = block.position();
1:72790dc:         int combinedIndexOffset = block.getInt(blockOffset + OnDiskIndexBuilder.BLOCK_SIZE);
1:72790dc: 
1:72790dc:         hasCombinedIndex = (combinedIndexOffset >= 0);
1:72790dc:         long blockIndexOffset = blockOffset + OnDiskIndexBuilder.BLOCK_SIZE + 4 + combinedIndexOffset;
1:72790dc: 
1:72790dc:         combinedIndex = hasCombinedIndex ? new TokenTree(descriptor, blockIndex.duplicate().position(blockIndexOffset)) : null;
1:72790dc:         blockIndexSize = block.getInt() * 2;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public SearchResult<T> search(AbstractType<?> comparator, ByteBuffer query)
1:72790dc:     {
1:72790dc:         int cmp = -1, start = 0, end = termCount() - 1, middle = 0;
1:72790dc: 
1:72790dc:         T element = null;
1:72790dc:         while (start <= end)
1:72790dc:         {
1:72790dc:             middle = start + ((end - start) >> 1);
1:72790dc:             element = getTerm(middle);
1:72790dc: 
1:72790dc:             cmp = element.compareTo(comparator, query);
1:72790dc:             if (cmp == 0)
1:72790dc:                 return new SearchResult<>(element, cmp, middle);
1:72790dc:             else if (cmp < 0)
1:72790dc:                 start = middle + 1;
1:72790dc:             else
1:72790dc:                 end = middle - 1;
1:72790dc:         }
1:72790dc: 
1:72790dc:         return new SearchResult<>(element, cmp, middle);
1:72790dc:     }
1:72790dc: 
1:733d1ee:     @SuppressWarnings("resource")
1:72790dc:     protected T getTerm(int index)
1:72790dc:     {
1:72790dc:         MappedBuffer dup = blockIndex.duplicate();
1:72790dc:         long startsAt = getTermPosition(index);
1:72790dc:         if (termCount() - 1 == index) // last element
1:72790dc:             dup.position(startsAt);
1:72790dc:         else
1:72790dc:             dup.position(startsAt).limit(getTermPosition(index + 1));
1:72790dc: 
1:72790dc:         return cast(dup);
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected long getTermPosition(int idx)
1:72790dc:     {
1:72790dc:         return getTermPosition(blockIndex, idx, blockIndexSize);
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected int termCount()
1:72790dc:     {
1:72790dc:         return blockIndexSize >> 1;
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected abstract T cast(MappedBuffer data);
1:72790dc: 
1:72790dc:     static long getTermPosition(MappedBuffer data, int idx, int indexSize)
1:72790dc:     {
1:72790dc:         idx <<= 1;
1:72790dc:         assert idx < indexSize;
1:72790dc:         return data.position() + indexSize + data.getShort(data.position() + idx);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public TokenTree getBlockIndex()
1:72790dc:     {
1:72790dc:         return combinedIndex;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int minOffset(OnDiskIndex.IteratorOrder order)
1:72790dc:     {
1:72790dc:         return order == OnDiskIndex.IteratorOrder.DESC ? 0 : termCount() - 1;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int maxOffset(OnDiskIndex.IteratorOrder order)
1:72790dc:     {
1:72790dc:         return minOffset(order) == 0 ? termCount() - 1 : 0;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static class SearchResult<T>
1:72790dc:     {
1:72790dc:         public final T result;
1:72790dc:         public final int index, cmp;
1:72790dc: 
1:72790dc:         public SearchResult(T result, int cmp, int index)
1:72790dc:         {
1:72790dc:             this.result = result;
1:72790dc:             this.index = index;
1:72790dc:             this.cmp = cmp;
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:733d1ee
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.disk;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.index.sasi.Term;
1: import org.apache.cassandra.index.sasi.utils.MappedBuffer;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: public abstract class OnDiskBlock<T extends Term>
1: {
1:     public enum BlockType
1:     {
1:         POINTER, DATA
1:     }
1: 
1:     // this contains offsets of the terms and term data
1:     protected final MappedBuffer blockIndex;
1:     protected final int blockIndexSize;
1: 
1:     protected final boolean hasCombinedIndex;
1:     protected final TokenTree combinedIndex;
1: 
1:     public OnDiskBlock(Descriptor descriptor, MappedBuffer block, BlockType blockType)
1:     {
1:         blockIndex = block;
1: 
1:         if (blockType == BlockType.POINTER)
1:         {
1:             hasCombinedIndex = false;
1:             combinedIndex = null;
1:             blockIndexSize = block.getInt() << 1; // num terms * sizeof(short)
1:             return;
1:         }
1: 
1:         long blockOffset = block.position();
1:         int combinedIndexOffset = block.getInt(blockOffset + OnDiskIndexBuilder.BLOCK_SIZE);
1: 
1:         hasCombinedIndex = (combinedIndexOffset >= 0);
1:         long blockIndexOffset = blockOffset + OnDiskIndexBuilder.BLOCK_SIZE + 4 + combinedIndexOffset;
1: 
1:         combinedIndex = hasCombinedIndex ? new TokenTree(descriptor, blockIndex.duplicate().position(blockIndexOffset)) : null;
1:         blockIndexSize = block.getInt() * 2;
1:     }
1: 
1:     public SearchResult<T> search(AbstractType<?> comparator, ByteBuffer query)
1:     {
1:         int cmp = -1, start = 0, end = termCount() - 1, middle = 0;
1: 
1:         T element = null;
1:         while (start <= end)
1:         {
1:             middle = start + ((end - start) >> 1);
1:             element = getTerm(middle);
1: 
1:             cmp = element.compareTo(comparator, query);
1:             if (cmp == 0)
1:                 return new SearchResult<>(element, cmp, middle);
1:             else if (cmp < 0)
1:                 start = middle + 1;
1:             else
1:                 end = middle - 1;
1:         }
1: 
1:         return new SearchResult<>(element, cmp, middle);
1:     }
1: 
1:     protected T getTerm(int index)
1:     {
1:         MappedBuffer dup = blockIndex.duplicate();
1:         long startsAt = getTermPosition(index);
1:         if (termCount() - 1 == index) // last element
1:             dup.position(startsAt);
1:         else
1:             dup.position(startsAt).limit(getTermPosition(index + 1));
1: 
1:         return cast(dup);
1:     }
1: 
1:     protected long getTermPosition(int idx)
1:     {
1:         return getTermPosition(blockIndex, idx, blockIndexSize);
1:     }
1: 
1:     protected int termCount()
1:     {
1:         return blockIndexSize >> 1;
1:     }
1: 
1:     protected abstract T cast(MappedBuffer data);
1: 
1:     static long getTermPosition(MappedBuffer data, int idx, int indexSize)
1:     {
1:         idx <<= 1;
1:         assert idx < indexSize;
1:         return data.position() + indexSize + data.getShort(data.position() + idx);
1:     }
1: 
1:     public TokenTree getBlockIndex()
1:     {
1:         return combinedIndex;
1:     }
1: 
1:     public int minOffset(OnDiskIndex.IteratorOrder order)
1:     {
1:         return order == OnDiskIndex.IteratorOrder.DESC ? 0 : termCount() - 1;
1:     }
1: 
1:     public int maxOffset(OnDiskIndex.IteratorOrder order)
1:     {
1:         return minOffset(order) == 0 ? termCount() - 1 : 0;
1:     }
1: 
1:     public static class SearchResult<T>
1:     {
1:         public final T result;
1:         public final int index, cmp;
1: 
1:         public SearchResult(T result, int cmp, int index)
1:         {
1:             this.result = result;
1:             this.index = index;
1:             this.cmp = cmp;
1:         }
1:     }
1: }
============================================================================