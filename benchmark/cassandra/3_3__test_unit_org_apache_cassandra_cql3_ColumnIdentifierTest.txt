1:8c8103c: /*
1:8c8103c: * Licensed to the Apache Software Foundation (ASF) under one
1:8c8103c: * or more contributor license agreements.  See the NOTICE file
1:8c8103c: * distributed with this work for additional information
1:8c8103c: * regarding copyright ownership.  The ASF licenses this file
1:8c8103c: * to you under the Apache License, Version 2.0 (the
1:8c8103c: * "License"); you may not use this file except in compliance
1:8c8103c: * with the License.  You may obtain a copy of the License at
1:8c8103c: *
1:8c8103c: *    http://www.apache.org/licenses/LICENSE-2.0
1:8c8103c: *
1:8c8103c: * Unless required by applicable law or agreed to in writing,
1:8c8103c: * software distributed under the License is distributed on an
1:8c8103c: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8c8103c: * KIND, either express or implied.  See the License for the
1:8c8103c: * specific language governing permissions and limitations
1:8c8103c: * under the License.
1:8c8103c: */
1:8c8103c: package org.apache.cassandra.cql3;
1:8c8103c: 
1:8c8103c: import java.nio.ByteBuffer;
1:8c8103c: import java.util.concurrent.ThreadLocalRandom;
1:8c8103c: 
1:8c8103c: import org.junit.Test;
1:8c8103c: 
1:8c8103c: import junit.framework.Assert;
1:4bc3aa9: import org.apache.cassandra.db.marshal.AbstractType;
1:8c8103c: import org.apache.cassandra.db.marshal.BytesType;
1:4bc3aa9: import org.apache.cassandra.db.marshal.UTF8Type;
1:8c8103c: import org.apache.cassandra.utils.ByteBufferUtil;
1:01d26dd: import static org.junit.Assert.assertEquals;
1:8c8103c: 
1:8c8103c: public class ColumnIdentifierTest
1:8c8103c: {
1:8c8103c: 
1:01d26dd:     @Test
1:8c8103c:     public void testComparisonMethod()
1:8c8103c:     {
1:8c8103c:         ThreadLocalRandom random = ThreadLocalRandom.current();
1:8c8103c:         byte[] commonBytes = new byte[10];
1:8c8103c:         byte[] aBytes = new byte[16];
1:8c8103c:         byte[] bBytes = new byte[16];
1:8c8103c:         for (int i = 0 ; i < 100000 ; i++)
1:8c8103c:         {
1:8c8103c:             int commonLength = random.nextInt(0, 10);
1:8c8103c:             random.nextBytes(commonBytes);
1:8c8103c:             random.nextBytes(aBytes);
1:8c8103c:             random.nextBytes(bBytes);
1:8c8103c:             System.arraycopy(commonBytes, 0, aBytes, 0, commonLength);
1:8c8103c:             System.arraycopy(commonBytes, 0, bBytes, 0, commonLength);
1:8c8103c:             int aLength = random.nextInt(commonLength, 16);
1:8c8103c:             int bLength = random.nextInt(commonLength, 16);
1:8c8103c:             ColumnIdentifier a = new ColumnIdentifier(ByteBuffer.wrap(aBytes, 0, aLength), BytesType.instance);
1:8c8103c:             ColumnIdentifier b = new ColumnIdentifier(ByteBuffer.wrap(bBytes, 0, bLength), BytesType.instance);
1:8c8103c:             Assert.assertEquals("" + i, compareResult(a.compareTo(b)), compareResult(ByteBufferUtil.compareUnsigned(a.bytes, b.bytes)));
1:8c8103c:         }
1:8c8103c:     }
1:8c8103c: 
1:8c8103c:     private static int compareResult(int v)
1:8c8103c:     {
1:8c8103c:         return v < 0 ? -1 : v > 0 ? 1 : 0;
1:8c8103c:     }
1:01d26dd:     
1:4bc3aa9:     @Test
1:01d26dd:     public void testMaybeQuote()
1:01d26dd:     {
1:01d26dd:         String unquotable = "a";
1:01d26dd:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:01d26dd:         unquotable = "z4";
1:01d26dd:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:01d26dd:         unquotable = "m_4_";
1:01d26dd:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:01d26dd:         unquotable = "f__";
1:01d26dd:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:01d26dd:         
1:01d26dd:         assertEquals("\"A\"", ColumnIdentifier.maybeQuote("A"));
1:01d26dd:         assertEquals("\"4b\"", ColumnIdentifier.maybeQuote("4b"));
1:01d26dd:         assertEquals("\"\"\"\"", ColumnIdentifier.maybeQuote("\""));
1:01d26dd:         assertEquals("\"\"\"a\"\"b\"\"\"", ColumnIdentifier.maybeQuote("\"a\"b\""));
1:01d26dd:     }
1:8c8103c: 
1:8c8103c:     @Test
1:4bc3aa9:     public void testInternedCache()
1:4bc3aa9:     {
1:4bc3aa9:         AbstractType<?> utf8Type = UTF8Type.instance;
1:4bc3aa9:         AbstractType<?> bytesType = BytesType.instance;
1:4bc3aa9: 
1:4bc3aa9:         byte[] bytes = new byte [] { 0x63, (byte) 0x32 };
1:4bc3aa9:         String text = "c2"; // the UTF-8 encoding of this string is the same as bytes, 0x630x32
1:4bc3aa9: 
1:4bc3aa9:         ColumnIdentifier c1 = ColumnIdentifier.getInterned(ByteBuffer.wrap(bytes), bytesType);
1:4bc3aa9:         ColumnIdentifier c2 = ColumnIdentifier.getInterned(utf8Type, utf8Type.fromString(text), text);
1:4bc3aa9:         ColumnIdentifier c3 = ColumnIdentifier.getInterned(text, true);
1:4bc3aa9: 
1:4bc3aa9:         Assert.assertTrue(c1.isInterned());
1:4bc3aa9:         Assert.assertTrue(c2.isInterned());
1:4bc3aa9:         Assert.assertTrue(c3.isInterned());
1:4bc3aa9: 
1:4bc3aa9:         Assert.assertEquals("6332", c1.toString());
1:4bc3aa9:         Assert.assertEquals(text, c2.toString());
1:4bc3aa9:         Assert.assertEquals(text, c3.toString());
1:4bc3aa9:     }
1:4bc3aa9: 
1:8c8103c: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:1050544
commit:4bc3aa9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testInternedCache()
1:     {
1:         AbstractType<?> utf8Type = UTF8Type.instance;
1:         AbstractType<?> bytesType = BytesType.instance;
1: 
1:         byte[] bytes = new byte [] { 0x63, (byte) 0x32 };
1:         String text = "c2"; // the UTF-8 encoding of this string is the same as bytes, 0x630x32
1: 
1:         ColumnIdentifier c1 = ColumnIdentifier.getInterned(ByteBuffer.wrap(bytes), bytesType);
1:         ColumnIdentifier c2 = ColumnIdentifier.getInterned(utf8Type, utf8Type.fromString(text), text);
1:         ColumnIdentifier c3 = ColumnIdentifier.getInterned(text, true);
1: 
1:         Assert.assertTrue(c1.isInterned());
1:         Assert.assertTrue(c2.isInterned());
1:         Assert.assertTrue(c3.isInterned());
1: 
1:         Assert.assertEquals("6332", c1.toString());
1:         Assert.assertEquals(text, c2.toString());
1:         Assert.assertEquals(text, c3.toString());
1:     }
1: 
author:Alexander Shopov
-------------------------------------------------------------------------------
commit:01d26dd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testMaybeQuote()
1:     {
1:         String unquotable = "a";
1:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:         unquotable = "z4";
1:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:         unquotable = "m_4_";
1:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:         unquotable = "f__";
1:         assertEquals(unquotable, ColumnIdentifier.maybeQuote(unquotable));
1:         
1:         assertEquals("\"A\"", ColumnIdentifier.maybeQuote("A"));
1:         assertEquals("\"4b\"", ColumnIdentifier.maybeQuote("4b"));
1:         assertEquals("\"\"\"\"", ColumnIdentifier.maybeQuote("\""));
1:         assertEquals("\"\"\"a\"\"b\"\"\"", ColumnIdentifier.maybeQuote("\"a\"b\""));
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8c8103c
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.cql3;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class ColumnIdentifierTest
1: {
1: 
1:     @Test
1:     public void testComparisonMethod()
1:     {
1:         ThreadLocalRandom random = ThreadLocalRandom.current();
1:         byte[] commonBytes = new byte[10];
1:         byte[] aBytes = new byte[16];
1:         byte[] bBytes = new byte[16];
1:         for (int i = 0 ; i < 100000 ; i++)
1:         {
1:             int commonLength = random.nextInt(0, 10);
1:             random.nextBytes(commonBytes);
1:             random.nextBytes(aBytes);
1:             random.nextBytes(bBytes);
1:             System.arraycopy(commonBytes, 0, aBytes, 0, commonLength);
1:             System.arraycopy(commonBytes, 0, bBytes, 0, commonLength);
1:             int aLength = random.nextInt(commonLength, 16);
1:             int bLength = random.nextInt(commonLength, 16);
1:             ColumnIdentifier a = new ColumnIdentifier(ByteBuffer.wrap(aBytes, 0, aLength), BytesType.instance);
1:             ColumnIdentifier b = new ColumnIdentifier(ByteBuffer.wrap(bBytes, 0, bLength), BytesType.instance);
1:             Assert.assertEquals("" + i, compareResult(a.compareTo(b)), compareResult(ByteBufferUtil.compareUnsigned(a.bytes, b.bytes)));
1:         }
1:     }
1: 
1:     private static int compareResult(int v)
1:     {
1:         return v < 0 ? -1 : v > 0 ? 1 : 0;
1:     }
1: 
1: }
============================================================================