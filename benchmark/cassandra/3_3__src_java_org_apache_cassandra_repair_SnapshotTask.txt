1:6a34b56: /*
1:6a34b56:  * Licensed to the Apache Software Foundation (ASF) under one
1:6a34b56:  * or more contributor license agreements.  See the NOTICE file
1:6a34b56:  * distributed with this work for additional information
1:6a34b56:  * regarding copyright ownership.  The ASF licenses this file
1:6a34b56:  * to you under the Apache License, Version 2.0 (the
1:6a34b56:  * "License"); you may not use this file except in compliance
1:6a34b56:  * with the License.  You may obtain a copy of the License at
1:6a34b56:  *
1:6a34b56:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6a34b56:  *
1:6a34b56:  * Unless required by applicable law or agreed to in writing, software
1:6a34b56:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6a34b56:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6a34b56:  * See the License for the specific language governing permissions and
1:6a34b56:  * limitations under the License.
1:6a34b56:  */
1:6a34b56: package org.apache.cassandra.repair;
1:6a34b56: 
1:6a34b56: import java.net.InetAddress;
1:6a34b56: import java.util.concurrent.RunnableFuture;
1:9b6f55b: import java.util.concurrent.TimeUnit;
1:6a34b56: 
1:6a34b56: import com.google.common.util.concurrent.AbstractFuture;
1:6a34b56: 
1:39df31a: import org.apache.cassandra.exceptions.RequestFailureReason;
1:8a5b90e: import org.apache.cassandra.net.IAsyncCallbackWithFailure;
1:6a34b56: import org.apache.cassandra.net.MessageIn;
1:6a34b56: import org.apache.cassandra.net.MessagingService;
1:de8a479: import org.apache.cassandra.repair.messages.SnapshotMessage;
1:6a34b56: 
1:6a34b56: /**
1:6a34b56:  * SnapshotTask is a task that sends snapshot request.
1:6a34b56:  */
1:6a34b56: public class SnapshotTask extends AbstractFuture<InetAddress> implements RunnableFuture<InetAddress>
1:6a34b56: {
1:6a34b56:     private final RepairJobDesc desc;
1:6a34b56:     private final InetAddress endpoint;
1:6a34b56: 
1:6a34b56:     public SnapshotTask(RepairJobDesc desc, InetAddress endpoint)
1:6a34b56:     {
1:6a34b56:         this.desc = desc;
1:6a34b56:         this.endpoint = endpoint;
1:6a34b56:     }
1:6a34b56: 
1:6a34b56:     public void run()
1:6a34b56:     {
1:9b6f55b:         MessagingService.instance().sendRR(new SnapshotMessage(desc).createMessage(),
1:6a34b56:                 endpoint,
1:9b6f55b:                 new SnapshotCallback(this), TimeUnit.HOURS.toMillis(1), true);
1:6a34b56:     }
1:6a34b56: 
1:6a34b56:     /**
1:6a34b56:      * Callback for snapshot request. Run on INTERNAL_RESPONSE stage.
1:6a34b56:      */
1:8a5b90e:     static class SnapshotCallback implements IAsyncCallbackWithFailure
1:6a34b56:     {
1:6a34b56:         final SnapshotTask task;
1:6a34b56: 
1:6a34b56:         SnapshotCallback(SnapshotTask task)
1:6a34b56:         {
1:6a34b56:             this.task = task;
1:6a34b56:         }
1:6a34b56: 
1:6a34b56:         /**
1:6a34b56:          * When we received response from the node,
1:6a34b56:          *
1:6a34b56:          * @param msg response received.
1:6a34b56:          */
1:6a34b56:         public void response(MessageIn msg)
1:6a34b56:         {
1:6a34b56:             task.set(task.endpoint);
1:6a34b56:         }
1:6a34b56: 
1:6a34b56:         public boolean isLatencyForSnitch() { return false; }
1:8a5b90e: 
1:39df31a:         public void onFailure(InetAddress from, RequestFailureReason failureReason)
1:8a5b90e:         {
1:810c2d5:             //listener.failedSnapshot();
1:8a5b90e:             task.setException(new RuntimeException("Could not create snapshot at " + from));
1:6a34b56:         }
1:6a34b56:     }
1:8a5b90e: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:39df31a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.RequestFailureReason;
/////////////////////////////////////////////////////////////////////////
1:         public void onFailure(InetAddress from, RequestFailureReason failureReason)
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:d305ce4
commit:810c2d5
/////////////////////////////////////////////////////////////////////////
1:             //listener.failedSnapshot();
commit:de8a479
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.repair.messages.SnapshotMessage;
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().sendRRWithFailure(new SnapshotMessage(desc).createMessage(),
commit:6a34b56
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
1: import java.net.InetAddress;
0: import java.util.List;
1: import java.util.concurrent.RunnableFuture;
1: 
1: import com.google.common.util.concurrent.AbstractFuture;
1: 
0: import org.apache.cassandra.db.SnapshotCommand;
0: import org.apache.cassandra.net.IAsyncCallback;
1: import org.apache.cassandra.net.MessageIn;
1: import org.apache.cassandra.net.MessagingService;
1: 
1: /**
1:  * SnapshotTask is a task that sends snapshot request.
1:  */
1: public class SnapshotTask extends AbstractFuture<InetAddress> implements RunnableFuture<InetAddress>
1: {
1:     private final RepairJobDesc desc;
1:     private final InetAddress endpoint;
1: 
1:     public SnapshotTask(RepairJobDesc desc, InetAddress endpoint)
1:     {
1:         this.desc = desc;
1:         this.endpoint = endpoint;
1:     }
1: 
1:     public void run()
1:     {
0:         MessagingService.instance().sendRR(new SnapshotCommand(desc.keyspace,
0:                                                                desc.columnFamily,
0:                                                                desc.sessionId.toString(),
0:                                                                false).createMessage(),
1:                                            endpoint,
0:                                            new SnapshotCallback(this));
1:     }
1: 
1:     /**
1:      * Callback for snapshot request. Run on INTERNAL_RESPONSE stage.
1:      */
0:     static class SnapshotCallback implements IAsyncCallback
1:     {
1:         final SnapshotTask task;
1: 
1:         SnapshotCallback(SnapshotTask task)
1:         {
1:             this.task = task;
1:         }
1: 
1:         /**
1:          * When we received response from the node,
1:          *
1:          * @param msg response received.
1:          */
1:         public void response(MessageIn msg)
1:         {
1:             task.set(task.endpoint);
1:         }
1: 
1:         public boolean isLatencyForSnitch() { return false; }
1:     }
1: }
author:sankalp kohli
-------------------------------------------------------------------------------
commit:9b6f55b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().sendRR(new SnapshotMessage(desc).createMessage(),
1:                 new SnapshotCallback(this), TimeUnit.HOURS.toMillis(1), true);
commit:8a5b90e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.IAsyncCallbackWithFailure;
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().sendRRWithFailure(new SnapshotCommand(desc.keyspace,
0:                 desc.columnFamily,
0:                 desc.sessionId.toString(),
0:                 false).createMessage(),
0:                 endpoint,
0:                 new SnapshotCallback(this));
1:     static class SnapshotCallback implements IAsyncCallbackWithFailure
/////////////////////////////////////////////////////////////////////////
1: 
0:         public void onFailure(InetAddress from)
1:         {
1:             task.setException(new RuntimeException("Could not create snapshot at " + from));
1:         }
============================================================================