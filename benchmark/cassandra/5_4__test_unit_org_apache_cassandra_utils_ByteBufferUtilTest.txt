1:06fb858: /**
1:06fb858:  * Licensed to the Apache Software Foundation (ASF) under one
1:06fb858:  * or more contributor license agreements.  See the NOTICE file
1:06fb858:  * distributed with this work for additional information
1:06fb858:  * regarding copyright ownership.  The ASF licenses this file
1:06fb858:  * to you under the Apache License, Version 2.0 (the
1:06fb858:  * "License"); you may not use this file except in compliance
1:06fb858:  * with the License.  You may obtain a copy of the License at
1:06fb858:  *
1:06fb858:  *     http://www.apache.org/licenses/LICENSE-2.0
1:06fb858:  *
1:06fb858:  * Unless required by applicable law or agreed to in writing, software
1:06fb858:  * distributed under the License is distributed on an "AS IS" BASIS,
1:06fb858:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:06fb858:  * See the License for the specific language governing permissions and
1:06fb858:  * limitations under the License.
1:06fb858:  */
2:06fb858: 
1:06fb858: package org.apache.cassandra.utils;
1:06fb858: 
1:06fb858: import java.io.ByteArrayInputStream;
1:a991b64: import java.io.DataInputStream;
1:a991b64: import java.io.IOException;
1:06fb858: import java.nio.ByteBuffer;
1:06fb858: import java.nio.charset.CharacterCodingException;
1:06fb858: import java.util.Arrays;
1:3928665: import java.util.concurrent.ThreadLocalRandom;
1:06fb858: 
1:3928665: import org.junit.Assert;
1:06fb858: import org.junit.Test;
1:06fb858: 
1:75508ec: import org.apache.cassandra.io.util.DataOutputBuffer;
1:75508ec: 
1:a991b64: import static org.junit.Assert.assertArrayEquals;
1:a991b64: import static org.junit.Assert.assertEquals;
1:a991b64: 
1:06fb858: public class ByteBufferUtilTest
1:06fb858: {
1:06fb858:     private static final String s = "cassandra";
1:06fb858: 
1:06fb858:     private ByteBuffer fromStringWithPosition(String s, int pos, boolean direct)
1:06fb858:     {
1:06fb858:         int l = s.length();
1:06fb858:         ByteBuffer bb;
1:06fb858:         if (direct)
1:06fb858:         {
1:06fb858:             bb = ByteBuffer.allocateDirect(l + pos);
1:06fb858:         }
1:06fb858:         else
1:06fb858:         {
1:06fb858:             ByteBuffer tmp = ByteBuffer.allocate(l + pos + 3);
1:06fb858:             tmp.position(3);
1:06fb858:             bb = tmp.slice(); // make bb have a non null arrayOffset
1:06fb858:         }
1:06fb858:         bb.position(pos);
1:06fb858:         bb.mark();
1:06fb858:         bb.put(s.getBytes());
1:06fb858:         bb.reset();
1:06fb858:         assert bb.position() == pos;
1:06fb858:         return bb;
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testString() throws Exception
1:06fb858:     {
1:06fb858:         assert s.equals(ByteBufferUtil.string(ByteBufferUtil.bytes(s)));
1:06fb858: 
1:06fb858:         int pos = 10;
1:06fb858:         ByteBuffer bb = fromStringWithPosition(s, 10, false);
1:06fb858:         assert s.equals(ByteBufferUtil.string(bb, 10, s.length()));
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, true);
1:06fb858:         assert s.equals(ByteBufferUtil.string(bb, 10, s.length()));
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testGetArray()
1:06fb858:     {
1:06fb858:         byte[] t = s.getBytes();
1:06fb858: 
1:06fb858:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:06fb858:         assertArrayEquals(t, ByteBufferUtil.getArray(bb));
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, false);
1:06fb858:         assertArrayEquals(t, ByteBufferUtil.getArray(bb));
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, true);
1:06fb858:         assertArrayEquals(t, ByteBufferUtil.getArray(bb));
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testLastIndexOf()
1:06fb858:     {
1:06fb858:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:06fb858:         checkLastIndexOf(bb);
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, false);
1:06fb858:         checkLastIndexOf(bb);
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, true);
1:06fb858:         checkLastIndexOf(bb);
1:06fb858:     }
1:06fb858: 
1:06fb858:     private void checkLastIndexOf(ByteBuffer bb)
1:06fb858:     {
1:a991b64:         assert bb.position() + 8 == ByteBufferUtil.lastIndexOf(bb, (byte) 'a', bb.position() + 8);
1:a991b64:         assert bb.position() + 4 == ByteBufferUtil.lastIndexOf(bb, (byte) 'a', bb.position() + 7);
1:a991b64:         assert bb.position() + 3 == ByteBufferUtil.lastIndexOf(bb, (byte) 's', bb.position() + 8);
1:a991b64:         assert -1 == ByteBufferUtil.lastIndexOf(bb, (byte) 'o', bb.position() + 8);
1:a991b64:         assert -1 == ByteBufferUtil.lastIndexOf(bb, (byte) 'd', bb.position() + 5);
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testClone()
1:06fb858:     {
1:06fb858:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:06fb858:         ByteBuffer clone1 = ByteBufferUtil.clone(bb);
1:06fb858:         assert bb != clone1;
1:06fb858:         assert bb.equals(clone1);
1:06fb858:         assert bb.array() != clone1.array();
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, false);
1:06fb858:         ByteBuffer clone2 = ByteBufferUtil.clone(bb);
1:06fb858:         assert bb != clone2;
1:06fb858:         assert bb.equals(clone2);
1:06fb858:         assert clone1.equals(clone2);
1:06fb858:         assert bb.array() != clone2.array();
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, true);
1:06fb858:         ByteBuffer clone3 = ByteBufferUtil.clone(bb);
1:06fb858:         assert bb != clone3;
1:06fb858:         assert bb.equals(clone3);
1:06fb858:         assert clone1.equals(clone3);
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testArrayCopy()
1:06fb858:     {
1:06fb858:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:06fb858:         checkArrayCopy(bb);
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, false);
1:06fb858:         checkArrayCopy(bb);
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, true);
1:06fb858:         checkArrayCopy(bb);
1:06fb858:     }
1:06fb858: 
1:06fb858:     private void checkArrayCopy(ByteBuffer bb)
1:06fb858:     {
1:06fb858: 
1:06fb858:         byte[] bytes = new byte[s.length()];
1:06fb858:         ByteBufferUtil.arrayCopy(bb, bb.position(), bytes, 0, s.length());
1:06fb858:         assertArrayEquals(s.getBytes(), bytes);
1:06fb858: 
1:06fb858:         bytes = new byte[5];
1:06fb858:         ByteBufferUtil.arrayCopy(bb, bb.position() + 3, bytes, 1, 4);
1:06fb858:         assertArrayEquals(Arrays.copyOfRange(s.getBytes(), 3, 7), Arrays.copyOfRange(bytes, 1, 5));
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testReadWrite() throws IOException
1:06fb858:     {
1:06fb858:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:06fb858:         checkReadWrite(bb);
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, false);
1:06fb858:         checkReadWrite(bb);
1:06fb858: 
1:06fb858:         bb = fromStringWithPosition(s, 10, true);
1:06fb858:         checkReadWrite(bb);
1:06fb858:     }
1:06fb858: 
1:06fb858:     private void checkReadWrite(ByteBuffer bb) throws IOException
1:06fb858:     {
1:75508ec:         DataOutputBuffer out = new DataOutputBuffer();
1:06fb858:         ByteBufferUtil.writeWithLength(bb, out);
1:06fb858:         ByteBufferUtil.writeWithShortLength(bb, out);
1:06fb858: 
1:75508ec:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(out.toByteArray()));
1:06fb858:         assert bb.equals(ByteBufferUtil.readWithLength(in));
1:06fb858:         assert bb.equals(ByteBufferUtil.readWithShortLength(in));
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testInputStream() throws IOException
1:06fb858:     {
1:06fb858:         ByteBuffer bb = ByteBuffer.allocate(13);
1:06fb858:         bb.putInt(255);
1:06fb858:         bb.put((byte) -3);
1:06fb858:         bb.putLong(42L);
1:06fb858:         bb.clear();
1:06fb858: 
1:06fb858:         DataInputStream in = new DataInputStream(ByteBufferUtil.inputStream(bb));
1:06fb858:         assert in.readInt() == 255;
1:06fb858:         assert in.readByte() == (byte)-3;
1:06fb858:         assert in.readLong() == 42L;
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testIntBytesConversions()
1:06fb858:     {
1:06fb858:         // positive, negative, 1 and 2 byte cases, including a few edges that would foul things up unless you're careful
1:06fb858:         // about masking away sign extension.
1:06fb858:         int[] ints = new int[]
1:06fb858:         {
1:06fb858:             -20, -127, -128, 0, 1, 127, 128, 65534, 65535, -65534, -65535
1:06fb858:         };
1:06fb858: 
1:06fb858:         for (int i : ints) {
1:06fb858:             ByteBuffer ba = ByteBufferUtil.bytes(i);
1:06fb858:             int actual = ByteBufferUtil.toInt(ba);
1:06fb858:             assertEquals(i, actual);
1:06fb858:         }
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test(expected=CharacterCodingException.class)
1:06fb858:     public void testDecode() throws IOException
1:06fb858:     {
1:06fb858:         ByteBuffer bytes = ByteBuffer.wrap(new byte[]{(byte)0xff, (byte)0xfe});
1:b62b0ae:         ByteBufferUtil.string(bytes);
1:06fb858:     }
1:06fb858: 
1:06fb858:     @Test
1:06fb858:     public void testHexBytesConversion()
1:06fb858:     {
1:06fb858:         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++)
1:06fb858:         {
1:06fb858:             ByteBuffer bb = ByteBuffer.allocate(1);
1:bf436b0:             bb.put((byte) i);
1:06fb858:             bb.clear();
1:06fb858:             String s = ByteBufferUtil.bytesToHex(bb);
1:06fb858:             ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s);
1:bf436b0:             assertEquals(bb, bb2);
1:06fb858:         }
1:bf436b0:         // check that non-zero buffer positions work,
1:bf436b0:         // i.e. that conversion accounts for the buffer offset and limit correctly
1:bf436b0:         ByteBuffer bb = ByteBuffer.allocate(4);
1:bf436b0:         for (int i = 0; i < 4; i++)
1:bf436b0:         {
1:bf436b0:             bb.put((byte) i);
1:bf436b0:         }
1:bf436b0:         // use a chunk out of the middle of the buffer
1:bf436b0:         bb.position(1);
1:bf436b0:         bb.limit(3);
1:bf436b0:         assertEquals(2, bb.remaining());
1:bf436b0:         String s = ByteBufferUtil.bytesToHex(bb);
1:bf436b0:         ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s);
1:bf436b0:         assertEquals(bb, bb2);
1:bf436b0:         assertEquals("0102", s);
1:06fb858:     }
1:3928665: 
1:3928665:     @Test
1:3928665:     public void testStartsAndEndsWith()
1:3928665:     {
1:3928665:         byte[] bytes = new byte[512];
1:3928665:         ThreadLocalRandom random = ThreadLocalRandom.current();
1:3928665: 
1:3928665:         random.nextBytes(bytes);
1:3928665: 
1:3928665:         ByteBuffer a = ByteBuffer.wrap(bytes);
1:3928665:         ByteBuffer b = a.duplicate();
1:3928665: 
1:3928665:         // let's take random slices of a and match
1:3928665:         for (int i = 0; i < 512; i++)
1:3928665:         {
1:3928665:             // prefix from the original offset
1:3928665:             b.position(0).limit(a.remaining() - random.nextInt(0, a.remaining() - 1));
1:3928665:             Assert.assertTrue(ByteBufferUtil.startsWith(a, b));
1:3928665:             Assert.assertTrue(ByteBufferUtil.startsWith(a, b.slice()));
1:3928665: 
1:3928665:             // prefix from random position inside of array
1:3928665:             int pos = random.nextInt(1, a.remaining() - 5);
1:3928665:             a.position(pos);
1:3928665:             b.limit(bytes.length - 1).position(pos);
1:3928665: 
1:3928665:             Assert.assertTrue(ByteBufferUtil.startsWith(a, b));
1:3928665: 
1:3928665:             a.position(0);
1:3928665: 
1:3928665:             // endsWith at random position
1:3928665:             b.limit(a.remaining()).position(random.nextInt(0, a.remaining() - 1));
1:3928665:             Assert.assertTrue(ByteBufferUtil.endsWith(a, b));
1:3928665:             Assert.assertTrue(ByteBufferUtil.endsWith(a, b.slice()));
1:3928665: 
1:3928665:         }
1:3928665: 
1:3928665:         a.limit(bytes.length - 1).position(0);
1:3928665:         b.limit(bytes.length - 1).position(1);
1:3928665: 
1:3928665:         Assert.assertFalse(ByteBufferUtil.startsWith(a, b));
1:3928665:         Assert.assertFalse(ByteBufferUtil.startsWith(a, b.slice()));
1:3928665: 
1:3928665:         Assert.assertTrue(ByteBufferUtil.endsWith(a, b));
1:3928665:         Assert.assertTrue(ByteBufferUtil.endsWith(a, b.slice()));
1:3928665: 
1:3928665: 
1:3928665:         a.position(5);
1:3928665: 
1:3928665:         Assert.assertFalse(ByteBufferUtil.startsWith(a, b));
1:3928665:         Assert.assertFalse(ByteBufferUtil.endsWith(a, b));
1:3928665:     }
1:06fb858: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3928665
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadLocalRandom;
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testStartsAndEndsWith()
1:     {
1:         byte[] bytes = new byte[512];
1:         ThreadLocalRandom random = ThreadLocalRandom.current();
1: 
1:         random.nextBytes(bytes);
1: 
1:         ByteBuffer a = ByteBuffer.wrap(bytes);
1:         ByteBuffer b = a.duplicate();
1: 
1:         // let's take random slices of a and match
1:         for (int i = 0; i < 512; i++)
1:         {
1:             // prefix from the original offset
1:             b.position(0).limit(a.remaining() - random.nextInt(0, a.remaining() - 1));
1:             Assert.assertTrue(ByteBufferUtil.startsWith(a, b));
1:             Assert.assertTrue(ByteBufferUtil.startsWith(a, b.slice()));
1: 
1:             // prefix from random position inside of array
1:             int pos = random.nextInt(1, a.remaining() - 5);
1:             a.position(pos);
1:             b.limit(bytes.length - 1).position(pos);
1: 
1:             Assert.assertTrue(ByteBufferUtil.startsWith(a, b));
1: 
1:             a.position(0);
1: 
1:             // endsWith at random position
1:             b.limit(a.remaining()).position(random.nextInt(0, a.remaining() - 1));
1:             Assert.assertTrue(ByteBufferUtil.endsWith(a, b));
1:             Assert.assertTrue(ByteBufferUtil.endsWith(a, b.slice()));
1: 
1:         }
1: 
1:         a.limit(bytes.length - 1).position(0);
1:         b.limit(bytes.length - 1).position(1);
1: 
1:         Assert.assertFalse(ByteBufferUtil.startsWith(a, b));
1:         Assert.assertFalse(ByteBufferUtil.startsWith(a, b.slice()));
1: 
1:         Assert.assertTrue(ByteBufferUtil.endsWith(a, b));
1:         Assert.assertTrue(ByteBufferUtil.endsWith(a, b.slice()));
1: 
1: 
1:         a.position(5);
1: 
1:         Assert.assertFalse(ByteBufferUtil.startsWith(a, b));
1:         Assert.assertFalse(ByteBufferUtil.endsWith(a, b));
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInputStream;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:         assert bb.position() + 8 == ByteBufferUtil.lastIndexOf(bb, (byte) 'a', bb.position() + 8);
1:         assert bb.position() + 4 == ByteBufferUtil.lastIndexOf(bb, (byte) 'a', bb.position() + 7);
1:         assert bb.position() + 3 == ByteBufferUtil.lastIndexOf(bb, (byte) 's', bb.position() + 8);
1:         assert -1 == ByteBufferUtil.lastIndexOf(bb, (byte) 'o', bb.position() + 8);
1:         assert -1 == ByteBufferUtil.lastIndexOf(bb, (byte) 'd', bb.position() + 5);
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:bf436b0
/////////////////////////////////////////////////////////////////////////
1:             bb.put((byte) i);
1:             assertEquals(bb, bb2);
1:         // check that non-zero buffer positions work,
1:         // i.e. that conversion accounts for the buffer offset and limit correctly
1:         ByteBuffer bb = ByteBuffer.allocate(4);
1:         for (int i = 0; i < 4; i++)
1:         {
1:             bb.put((byte) i);
1:         }
1:         // use a chunk out of the middle of the buffer
1:         bb.position(1);
1:         bb.limit(3);
1:         assertEquals(2, bb.remaining());
1:         String s = ByteBufferUtil.bytesToHex(bb);
1:         ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s);
1:         assertEquals(bb, bb2);
1:         assertEquals("0102", s);
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
1:         ByteBufferUtil.string(bytes);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBuffer;
0: import org.apache.cassandra.io.util.FastByteArrayOutputStream;
1: 
/////////////////////////////////////////////////////////////////////////
1:         DataOutputBuffer out = new DataOutputBuffer();
1:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(out.toByteArray()));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:06fb858
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.utils;
1: 
0: import static org.junit.Assert.assertArrayEquals;
0: import static org.junit.Assert.assertEquals;
1: 
0: import java.io.IOException;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.charset.CharacterCodingException;
1: import java.util.Arrays;
1: 
0: import com.google.common.base.Charsets;
1: import org.junit.Test;
1: 
1: public class ByteBufferUtilTest
1: {
1:     private static final String s = "cassandra";
1: 
1:     private ByteBuffer fromStringWithPosition(String s, int pos, boolean direct)
1:     {
1:         int l = s.length();
1:         ByteBuffer bb;
1:         if (direct)
1:         {
1:             bb = ByteBuffer.allocateDirect(l + pos);
1:         }
1:         else
1:         {
1:             ByteBuffer tmp = ByteBuffer.allocate(l + pos + 3);
1:             tmp.position(3);
1:             bb = tmp.slice(); // make bb have a non null arrayOffset
1:         }
1:         bb.position(pos);
1:         bb.mark();
1:         bb.put(s.getBytes());
1:         bb.reset();
1:         assert bb.position() == pos;
1:         return bb;
1:     }
1: 
1:     @Test
1:     public void testString() throws Exception
1:     {
1:         assert s.equals(ByteBufferUtil.string(ByteBufferUtil.bytes(s)));
1: 
1:         int pos = 10;
1:         ByteBuffer bb = fromStringWithPosition(s, 10, false);
1:         assert s.equals(ByteBufferUtil.string(bb, 10, s.length()));
1: 
1:         bb = fromStringWithPosition(s, 10, true);
1:         assert s.equals(ByteBufferUtil.string(bb, 10, s.length()));
1:     }
1: 
1:     @Test
1:     public void testGetArray()
1:     {
1:         byte[] t = s.getBytes();
1: 
1:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:         assertArrayEquals(t, ByteBufferUtil.getArray(bb));
1: 
1:         bb = fromStringWithPosition(s, 10, false);
1:         assertArrayEquals(t, ByteBufferUtil.getArray(bb));
1: 
1:         bb = fromStringWithPosition(s, 10, true);
1:         assertArrayEquals(t, ByteBufferUtil.getArray(bb));
1:     }
1: 
1:     @Test
1:     public void testLastIndexOf()
1:     {
1:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:         checkLastIndexOf(bb);
1: 
1:         bb = fromStringWithPosition(s, 10, false);
1:         checkLastIndexOf(bb);
1: 
1:         bb = fromStringWithPosition(s, 10, true);
1:         checkLastIndexOf(bb);
1:     }
1: 
1:     private void checkLastIndexOf(ByteBuffer bb)
1:     {
0:         assert bb.position() + 8 == ByteBufferUtil.lastIndexOf(bb, (byte)'a', bb.position() + 8);
0:         assert bb.position() + 4 == ByteBufferUtil.lastIndexOf(bb, (byte)'a', bb.position() + 7);
0:         assert bb.position() + 3 == ByteBufferUtil.lastIndexOf(bb, (byte)'s', bb.position() + 8);
0:         assert -1 == ByteBufferUtil.lastIndexOf(bb, (byte)'o', bb.position() + 8);
0:         assert -1 == ByteBufferUtil.lastIndexOf(bb, (byte)'d', bb.position() + 5);
1:     }
1: 
1:     @Test
1:     public void testClone()
1:     {
1:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:         ByteBuffer clone1 = ByteBufferUtil.clone(bb);
1:         assert bb != clone1;
1:         assert bb.equals(clone1);
1:         assert bb.array() != clone1.array();
1: 
1:         bb = fromStringWithPosition(s, 10, false);
1:         ByteBuffer clone2 = ByteBufferUtil.clone(bb);
1:         assert bb != clone2;
1:         assert bb.equals(clone2);
1:         assert clone1.equals(clone2);
1:         assert bb.array() != clone2.array();
1: 
1:         bb = fromStringWithPosition(s, 10, true);
1:         ByteBuffer clone3 = ByteBufferUtil.clone(bb);
1:         assert bb != clone3;
1:         assert bb.equals(clone3);
1:         assert clone1.equals(clone3);
1:     }
1: 
1:     @Test
1:     public void testArrayCopy()
1:     {
1:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:         checkArrayCopy(bb);
1: 
1:         bb = fromStringWithPosition(s, 10, false);
1:         checkArrayCopy(bb);
1: 
1:         bb = fromStringWithPosition(s, 10, true);
1:         checkArrayCopy(bb);
1:     }
1: 
1:     private void checkArrayCopy(ByteBuffer bb)
1:     {
1: 
1:         byte[] bytes = new byte[s.length()];
1:         ByteBufferUtil.arrayCopy(bb, bb.position(), bytes, 0, s.length());
1:         assertArrayEquals(s.getBytes(), bytes);
1: 
1:         bytes = new byte[5];
1:         ByteBufferUtil.arrayCopy(bb, bb.position() + 3, bytes, 1, 4);
1:         assertArrayEquals(Arrays.copyOfRange(s.getBytes(), 3, 7), Arrays.copyOfRange(bytes, 1, 5));
1:     }
1: 
1:     @Test
1:     public void testReadWrite() throws IOException
1:     {
1:         ByteBuffer bb = ByteBufferUtil.bytes(s);
1:         checkReadWrite(bb);
1: 
1:         bb = fromStringWithPosition(s, 10, false);
1:         checkReadWrite(bb);
1: 
1:         bb = fromStringWithPosition(s, 10, true);
1:         checkReadWrite(bb);
1:     }
1: 
1:     private void checkReadWrite(ByteBuffer bb) throws IOException
1:     {
0:         ByteArrayOutputStream bos = new ByteArrayOutputStream();
0:         DataOutputStream out = new DataOutputStream(bos);
1:         ByteBufferUtil.writeWithLength(bb, out);
1:         ByteBufferUtil.writeWithShortLength(bb, out);
1: 
0:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(bos.toByteArray()));
1:         assert bb.equals(ByteBufferUtil.readWithLength(in));
1:         assert bb.equals(ByteBufferUtil.readWithShortLength(in));
1:     }
1: 
1:     @Test
1:     public void testInputStream() throws IOException
1:     {
1:         ByteBuffer bb = ByteBuffer.allocate(13);
1:         bb.putInt(255);
1:         bb.put((byte) -3);
1:         bb.putLong(42L);
1:         bb.clear();
1: 
1:         DataInputStream in = new DataInputStream(ByteBufferUtil.inputStream(bb));
1:         assert in.readInt() == 255;
1:         assert in.readByte() == (byte)-3;
1:         assert in.readLong() == 42L;
1:     }
1: 
1:     @Test
1:     public void testIntBytesConversions()
1:     {
1:         // positive, negative, 1 and 2 byte cases, including a few edges that would foul things up unless you're careful
1:         // about masking away sign extension.
1:         int[] ints = new int[]
1:         {
1:             -20, -127, -128, 0, 1, 127, 128, 65534, 65535, -65534, -65535
1:         };
1: 
1:         for (int i : ints) {
1:             ByteBuffer ba = ByteBufferUtil.bytes(i);
1:             int actual = ByteBufferUtil.toInt(ba);
1:             assertEquals(i, actual);
1:         }
1:     }
1: 
1:     @Test(expected=CharacterCodingException.class)
1:     public void testDecode() throws IOException
1:     {
1:         ByteBuffer bytes = ByteBuffer.wrap(new byte[]{(byte)0xff, (byte)0xfe});
0:         ByteBufferUtil.string(bytes, Charsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testHexBytesConversion()
1:     {
1:         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++)
1:         {
1:             ByteBuffer bb = ByteBuffer.allocate(1);
0:             bb.put((byte)i);
1:             bb.clear();
1:             String s = ByteBufferUtil.bytesToHex(bb);
1:             ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s);
0:             assert bb.equals(bb2);
1:         }
1:     }
1: }
============================================================================