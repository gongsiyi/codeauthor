1:88edbed: /*
1:8358669:  * Licensed to the Apache Software Foundation (ASF) under one
1:8358669:  * or more contributor license agreements.  See the NOTICE file
1:8358669:  * distributed with this work for additional information
1:8358669:  * regarding copyright ownership.  The ASF licenses this file
1:8358669:  * to you under the Apache License, Version 2.0 (the
1:8358669:  * "License"); you may not use this file except in compliance
1:8358669:  * with the License.  You may obtain a copy of the License at
1:8358669:  *
1:8358669:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8358669:  *
1:8358669:  * Unless required by applicable law or agreed to in writing,
1:8358669:  * software distributed under the License is distributed on an
1:8358669:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8358669:  * KIND, either express or implied.  See the License for the
1:8358669:  * specific language governing permissions and limitations
1:8358669:  * under the License.
1:8358669:  */
1:5964cd4: package org.apache.cassandra.db;
1:3852009: 
1:8358669: import java.io.IOException;
1:8358669: import java.nio.ByteBuffer;
12:5964cd4: 
1:438acfc: import org.apache.cassandra.SchemaLoader;
1:434564d: import org.apache.cassandra.Util;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.rows.Row;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:a991b64: import org.apache.cassandra.db.marshal.AsciiType;
1:d2a3827: import org.apache.cassandra.exceptions.ConfigurationException;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:c48abe4: import org.apache.cassandra.utils.ByteBufferUtil;
1:c48abe4: 
1:a991b64: import static org.junit.Assert.assertEquals;
1:d2a3827: import org.junit.BeforeClass;
1:8358669: import org.junit.Test;
1:72e6eea: 
1:d2a3827: public class NameSortTest
6:5964cd4: {
1:d2a3827:     private static final String KEYSPACE1 = "NameSortTest";
1:d2a3827:     private static final String CF = "Standard1";
1:d2a3827: 
1:d2a3827:     @BeforeClass
1:d2a3827:     public static void defineSchema() throws ConfigurationException
1:d2a3827:     {
1:d2a3827:         SchemaLoader.prepareServer();
1:d2a3827:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:a991b64:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF, 1000, AsciiType.instance));
1:d2a3827:     }
1:d2a3827: 
1:5964cd4:     @Test
1:83a43f1:     public void testNameSort1() throws IOException
1:5964cd4:     {
1:5964cd4:         // single key
1:5964cd4:         testNameSort(1);
6:5964cd4:     }
1:5964cd4: 
1:5964cd4:     @Test
1:83a43f1:     public void testNameSort10() throws IOException
1:5964cd4:     {
1:5964cd4:         // multiple keys, flushing concurrently w/ inserts
1:5964cd4:         testNameSort(10);
1:5964cd4:     }
1:5964cd4: 
1:5964cd4:     @Test
1:83a43f1:     public void testNameSort100() throws IOException
1:5964cd4:     {
1:5964cd4:         // enough keys to force compaction concurrently w/ inserts
1:5964cd4:         testNameSort(100);
1:5964cd4:     }
1:5964cd4: 
1:83a43f1:     private void testNameSort(int N) throws IOException
1:5964cd4:     {
1:d2a3827:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:a991b64:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);
1:a991b64:         for (int i = 0; i < N; i++)
1:5964cd4:         {
1:b62b0ae:             ByteBuffer key = ByteBufferUtil.bytes(Integer.toString(i));
1:a991b64:             RowUpdateBuilder rub = new RowUpdateBuilder(cfs.metadata, 0, key);
1:a991b64:             rub.clustering("cc");
1:a991b64:             for (int j = 0; j < 8; j++)
1:a991b64:                 rub.add("val" + j, j % 2 == 0 ? "a" : "b");
1:a991b64:             rub.build().applyUnsafe();
1:5964cd4:         }
1:a991b64:         validateNameSort(cfs);
1:0e96e58:         keyspace.getColumnFamilyStore("Standard1").forceBlockingFlush();
1:a991b64:         validateNameSort(cfs);
1:5964cd4:     }
1:5964cd4: 
1:a991b64:     private void validateNameSort(ColumnFamilyStore cfs) throws IOException
1:5964cd4:     {
1:a991b64:         for (FilteredPartition partition : Util.getAll(Util.cmd(cfs).build()))
1:5964cd4:         {
1:a991b64:             for (Row r : partition)
1:5964cd4:             {
1:a991b64:                 for (ColumnDefinition cd : r.columns())
1:a991b64:                 {
1:a991b64:                     if (r.getCell(cd) == null)
1:a991b64:                         continue;
1:a991b64:                     int cellVal = Integer.valueOf(cd.name.toString().substring(cd.name.toString().length() - 1));
1:a991b64:                     String expected = cellVal % 2 == 0 ? "a" : "b";
1:a991b64:                     assertEquals(expected, ByteBufferUtil.string(r.getCell(cd).value()));
1:a991b64:                 }
1:5964cd4:             }
1:5964cd4:         }
1:5964cd4:     }
1:5964cd4: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm;
0:                 rm = new Mutation("Keyspace1", key);
/////////////////////////////////////////////////////////////////////////
0:                 rm = new Mutation("Keyspace1", key);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0:         Keyspace keyspace = Keyspace.open("Keyspace1");
/////////////////////////////////////////////////////////////////////////
0:         validateNameSort(keyspace, N);
1:         keyspace.getColumnFamilyStore("Standard1").forceBlockingFlush();
0:         keyspace.getColumnFamilyStore("Super1").forceBlockingFlush();
0:         validateNameSort(keyspace, N);
0:     private void validateNameSort(Keyspace keyspace, int N) throws IOException
0:             cf = Util.getColumnFamily(keyspace, key, "Standard1");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.rows.Row;
0: import org.apache.cassandra.db.rows.RowIterator;
1: import org.apache.cassandra.db.partitions.*;
1: import org.apache.cassandra.db.marshal.AsciiType;
0: import org.apache.cassandra.db.partitions.PartitionIterator;
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF, 1000, AsciiType.instance));
/////////////////////////////////////////////////////////////////////////
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);
1:         for (int i = 0; i < N; i++)
1:             RowUpdateBuilder rub = new RowUpdateBuilder(cfs.metadata, 0, key);
1:             rub.clustering("cc");
1:             for (int j = 0; j < 8; j++)
1:                 rub.add("val" + j, j % 2 == 0 ? "a" : "b");
1:             rub.build().applyUnsafe();
1:         validateNameSort(cfs);
1:         validateNameSort(cfs);
1:     private void validateNameSort(ColumnFamilyStore cfs) throws IOException
1:         for (FilteredPartition partition : Util.getAll(Util.cmd(cfs).build()))
1:             for (Row r : partition)
1:                 for (ColumnDefinition cd : r.columns())
1:                 {
1:                     if (r.getCell(cd) == null)
1:                         continue;
1:                     int cellVal = Integer.valueOf(cd.name.toString().substring(cd.name.toString().length() - 1));
1:                     String expected = cellVal % 2 == 0 ? "a" : "b";
1:                     assertEquals(expected, ByteBufferUtil.string(r.getCell(cd).value()));
1:                 }
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0:                 rm.add("Standard1", Util.cellname("Cell-" + j), bytes, j);
/////////////////////////////////////////////////////////////////////////
0:             Collection<Cell> cells = cf.getSortedColumns();
0:             for (Cell cell : cells)
0:                 String name = ByteBufferUtil.string(cell.name().toByteBuffer());
0:                 assertEquals(new String(bytes), ByteBufferUtil.string(cell.value()));
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:                 rm.add("Standard1", Util.cellname("Column-" + j), bytes, j);
/////////////////////////////////////////////////////////////////////////
0:                 String name = ByteBufferUtil.string(column.name().toByteBuffer());
commit:3a005df
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 rm.add("Standard1", ByteBufferUtil.bytes(("Column-" + j)), bytes, j);
/////////////////////////////////////////////////////////////////////////
0:             Collection<Column> columns = cf.getSortedColumns();
0:             for (Column column : columns)
commit:438acfc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.SchemaLoader;
0: public class NameSortTest extends SchemaLoader
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer key = ByteBufferUtil.bytes(Integer.toString(i));
0:                 ByteBuffer bytes = j % 2 == 0 ? ByteBufferUtil.bytes("a") : ByteBufferUtil.bytes("b");
0:                 rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes(("Column-" + j))), bytes, j);
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.db.marshal.LongType;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: import org.junit.BeforeClass;
1: public class NameSortTest
1:     private static final String KEYSPACE1 = "NameSortTest";
1:     private static final String CF = "Standard1";
0:     private static final String CFSUPER = "Super1";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF),
0:                                     SchemaLoader.superCFMD(KEYSPACE1, CFSUPER, LongType.instance));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
/////////////////////////////////////////////////////////////////////////
0:                 rm = new Mutation(KEYSPACE1, key);
/////////////////////////////////////////////////////////////////////////
0:                 rm = new Mutation(KEYSPACE1, key);
0:                     addMutation(rm, CFSUPER, "SuperColumn-" + j, k, value, k);
/////////////////////////////////////////////////////////////////////////
0:         keyspace.getColumnFamilyStore(CFSUPER).forceBlockingFlush();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:     public void testNameSort1() throws IOException
1:     public void testNameSort10() throws IOException
1:     public void testNameSort100() throws IOException
1:     private void testNameSort(int N) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d36ec10
/////////////////////////////////////////////////////////////////////////
0:                     long k = subColumn.name().getLong(subColumn.name().position());
commit:c48abe4
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.cassandra.Util.column;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.commitlog.CommitLog;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
/////////////////////////////////////////////////////////////////////////
0:                 rm.applyUnsafe();
/////////////////////////////////////////////////////////////////////////
0:                 rm.applyUnsafe();
/////////////////////////////////////////////////////////////////////////
0:                 String name = ByteBufferUtil.string(column.name());
0:                 int j = Integer.valueOf(name.substring(name.length() - 1));
0:                 assertEquals(new String(bytes), ByteBufferUtil.string(column.value()));
/////////////////////////////////////////////////////////////////////////
0:                 int j = Integer.valueOf(ByteBufferUtil.string(superColumn.name()).split("-")[1]);
0:                     assertEquals(new String(bytes), ByteBufferUtil.string(subColumn.value()));
commit:8358669
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: import static junit.framework.Assert.assertEquals;
0: import static org.apache.cassandra.Util.addMutation;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
0: import java.util.Collection;
0: import java.util.concurrent.ExecutionException;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 int j = Integer.valueOf(new String(column.name().array(),column.name().position(),column.name().remaining()).split("-")[1]);
0:                 assertEquals(new String(bytes), new String(column.value().array(), column.value().position(), column
0:                         .value().remaining()));
/////////////////////////////////////////////////////////////////////////
0:                 int j = Integer.valueOf(new String(superColumn.name().array(),superColumn.name().position(),superColumn.name().remaining()).split("-")[1]);
0:                     long k = subColumn.name().getLong(subColumn.name().position() + subColumn.name().arrayOffset());
0:                     assertEquals(new String(bytes), new String(subColumn.value().array(), subColumn.value().position(),
0:                             subColumn.value().remaining()));
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer key = ByteBuffer.wrap(Integer.toString(i).getBytes());
0:                 ByteBuffer bytes = ByteBuffer.wrap(j % 2 == 0 ? "a".getBytes() : "b".getBytes());
0:                 rm.add(new QueryPath("Standard1", null, ByteBuffer.wrap(("Column-" + j).getBytes())), bytes, j);
/////////////////////////////////////////////////////////////////////////
0:                 int j = Integer.valueOf(new String(column.name().array()).split("-")[1]);
0:                 assert Arrays.equals(bytes, column.value().array());
/////////////////////////////////////////////////////////////////////////
0:                 int j = Integer.valueOf(new String(superColumn.name().array()).split("-")[1]);
0:                     long k = subColumn.name().getLong(subColumn.name().position()+subColumn.name().arrayOffset());                   
0:                     assert Arrays.equals(bytes, subColumn.value().array());
commit:9d32382
/////////////////////////////////////////////////////////////////////////
0:                 rm.add(new QueryPath("Standard1", null, ("Column-" + j).getBytes()), bytes, j);
/////////////////////////////////////////////////////////////////////////
0:                     addMutation(rm, "Super1", "SuperColumn-" + j, k, value, k);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0:                 rm.add(new QueryPath("Standard1", null, ("Column-" + j).getBytes()), bytes, new TimestampClock(j));
/////////////////////////////////////////////////////////////////////////
0:                     addMutation(rm, "Super1", "SuperColumn-" + j, k, value, new TimestampClock(k));
commit:3852009
/////////////////////////////////////////////////////////////////////////
1: 
commit:572b5f8
/////////////////////////////////////////////////////////////////////////
0:         Table table = Table.open("Keyspace1");
/////////////////////////////////////////////////////////////////////////
0:                 rm = new RowMutation("Keyspace1", key);
/////////////////////////////////////////////////////////////////////////
0:                 rm = new RowMutation("Keyspace1", key);
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
0: import static org.apache.cassandra.Util.addMutation;
0: import org.apache.cassandra.db.filter.IdentityQueryFilter;
0: import static junit.framework.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
0:                 rm.add(new QueryPath("Standard1", null, ("Column-" + j).getBytes()), bytes, j);
0:                 rm = new RowMutation("Table1", key);
0:                     String value = (j + k) % 2 == 0 ? "a" : "b";
0:                     addMutation(rm, "Super1", "SuperColumn-" + j, k, value, k);
0:                 rm.apply();
/////////////////////////////////////////////////////////////////////////
0:             Collection<IColumn> columns = cf.getSortedColumns();
0:                 int j = Integer.valueOf(new String(column.name()).split("-")[1]);
0:             Collection<IColumn> superColumns = cf.getSortedColumns();
0:             assert superColumns.size() == 8 : cf;
0:                 int j = Integer.valueOf(new String(superColumn.name()).split("-")[1]);
0:                     long k = ByteBuffer.wrap(subColumn.name()).getLong();
commit:f2da00f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.filter.QueryPath;
/////////////////////////////////////////////////////////////////////////
0:                 rm.add(new QueryPath("Standard1", null, "Column-" + j), bytes, j);
/////////////////////////////////////////////////////////////////////////
0:                     rm.add(new QueryPath("Super1", "SuperColumn-" + j, "Column-" + k), bytes, k);
commit:72e6eea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.CleanupHelper;
1: 
0: public class NameSortTest extends CleanupHelper
/////////////////////////////////////////////////////////////////////////
0:                 byte[] bytes = j % 2 == 0 ? "a".getBytes() : "b".getBytes();
/////////////////////////////////////////////////////////////////////////
0:                     byte[] bytes = (j + k) % 2 == 0 ? "a".getBytes() : "b".getBytes();
/////////////////////////////////////////////////////////////////////////
0:                 byte[] bytes = j % 2 == 0 ? "a".getBytes() : "b".getBytes();
/////////////////////////////////////////////////////////////////////////
0:                     byte[] bytes = (j + k) % 2 == 0 ? "a".getBytes() : "b".getBytes();
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
commit:5886b7c
/////////////////////////////////////////////////////////////////////////
0:             assert cf != null : "key " + key + " is missing!";
commit:5964cd4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db;
1: 
0: import java.io.IOException;
0: import java.util.concurrent.ExecutionException;
0: import java.util.SortedSet;
0: import java.util.Iterator;
0: import java.util.Collection;
0: import java.util.Arrays;
1: 
0: import org.apache.commons.lang.ArrayUtils;
0: import org.junit.Test;
1: 
0: public class NameSortTest extends ColumnFamilyStoreTest
1: {
1:     @Test
0:     public void testNameSort1() throws IOException, ExecutionException, InterruptedException
1:     {
1:         // single key
1:         testNameSort(1);
1:     }
1: 
1:     @Test
0:     public void testNameSort10() throws IOException, ExecutionException, InterruptedException
1:     {
1:         // multiple keys, flushing concurrently w/ inserts
1:         testNameSort(10);
1:     }
1: 
1:     @Test
0:     public void testNameSort100() throws IOException, ExecutionException, InterruptedException
1:     {
1:         // enough keys to force compaction concurrently w/ inserts
1:         testNameSort(100);
1:     }
1: 
1: 
0:     private void testNameSort(int N) throws IOException, ExecutionException, InterruptedException
1:     {
0:         Table table = Table.open("Table1");
1: 
0:         for (int i = 0; i < N; ++i)
1:         {
0:             String key = Integer.toString(i);
0:             RowMutation rm;
1: 
0:             // standard
0:             for (int j = 0; j < 8; ++j)
1:             {
0:                 byte[] bytes = j % 2 == 0 ? bytes1 : bytes2;
0:                 rm = new RowMutation("Table1", key);
0:                 rm.add("Standard1:" + "Column-" + j, bytes, j);
0:                 rm.apply();
1:             }
1: 
0:             // super
0:             for (int j = 0; j < 8; ++j)
1:             {
0:                 for (int k = 0; k < 4; ++k)
1:                 {
0:                     byte[] bytes = (j + k) % 2 == 0 ? bytes1 : bytes2;
0:                     rm = new RowMutation("Table1", key);
0:                     rm.add("Super1:" + "SuperColumn-" + j + ":Column-" + k, bytes, k);
0:                     rm.apply();
1:                 }
1:             }
1:         }
1: 
0:         validateNameSort(table, N);
1: 
0:         table.getColumnFamilyStore("Standard1").forceBlockingFlush();
0:         table.getColumnFamilyStore("Super1").forceBlockingFlush();
0:         validateNameSort(table, N);
1:     }
1: 
0:     private void validateNameSort(Table table, int N) throws IOException
1:     {
0:         for (int i = 0; i < N; ++i)
1:         {
0:             String key = Integer.toString(i);
0:             ColumnFamily cf;
1: 
0:             cf = table.get(key, "Standard1");
0:             Collection<IColumn> columns = cf.getAllColumns();
0:             for (IColumn column : columns)
1:             {
0:                 int j = Integer.valueOf(column.name().split("-")[1]);
0:                 byte[] bytes = j % 2 == 0 ? bytes1 : bytes2;
0:                 assert Arrays.equals(bytes, column.value());
1:             }
1: 
0:             cf = table.get(key, "Super1");
0:             assert cf != null;
0:             Collection<IColumn> superColumns = cf.getAllColumns();
0:             assert superColumns.size() == 8;
0:             for (IColumn superColumn : superColumns)
1:             {
0:                 int j = Integer.valueOf(superColumn.name().split("-")[1]);
0:                 Collection<IColumn> subColumns = superColumn.getSubColumns();
0:                 assert subColumns.size() == 4;
0:                 for (IColumn subColumn : subColumns)
1:                 {
0:                     int k = Integer.valueOf(subColumn.name().split("-")[1]);
0:                     byte[] bytes = (j + k) % 2 == 0 ? bytes1 : bytes2;
0:                     assert Arrays.equals(bytes, subColumn.value());
1:                 }
1:             }
1:         }
1:     }
1: 
1: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:434564d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.Util;
0: 
/////////////////////////////////////////////////////////////////////////
0:             byte[] key = Integer.toString(i).getBytes();
/////////////////////////////////////////////////////////////////////////
0:             DecoratedKey key = Util.dk(Integer.toString(i));
commit:b3e1e7a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.Util;
/////////////////////////////////////////////////////////////////////////
0:             cf = Util.getColumnFamily(table, key, "Standard1");
/////////////////////////////////////////////////////////////////////////
0:             cf = Util.getColumnFamily(table, key, "Super1");
============================================================================