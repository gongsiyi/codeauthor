1:405524e: package org.apache.cassandra.db.marshal;
1:405524e: /*
1:07cdfd0:  *
1:405524e:  * Licensed to the Apache Software Foundation (ASF) under one
1:405524e:  * or more contributor license agreements.  See the NOTICE file
1:405524e:  * distributed with this work for additional information
1:405524e:  * regarding copyright ownership.  The ASF licenses this file
1:405524e:  * to you under the Apache License, Version 2.0 (the
1:405524e:  * "License"); you may not use this file except in compliance
1:405524e:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:405524e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:405524e:  * Unless required by applicable law or agreed to in writing,
1:405524e:  * software distributed under the License is distributed on an
1:405524e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:405524e:  * KIND, either express or implied.  See the License for the
1:405524e:  * specific language governing permissions and limitations
1:405524e:  * under the License.
1:07cdfd0:  *
1:405524e:  */
3:477deb3: 
1:35a945e: 
1:405524e: import java.nio.ByteBuffer;
1:477deb3: import java.util.Arrays;
1:477deb3: import java.util.Random;
1:405524e: import java.util.UUID;
1:cdb07b1: 
1:e7a385a: import org.apache.cassandra.utils.ByteBufferUtil;
1:43d330d: 
1:405524e: import org.junit.Test;
1:e7a385a: 
1:405524e: public class TypeCompareTest
2:477deb3: {
3:405524e:     @Test
1:405524e:     public void testAscii()
1:477deb3:     {
1:405524e:         AsciiType comparator = new AsciiType();
1:43d330d:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
1:43d330d:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.EMPTY_BYTE_BUFFER) > 0;
1:43d330d:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER) == 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("a")) > 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("a"), ByteBufferUtil.bytes("z")) < 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.bytes("asdf")) == 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("asdz"), ByteBufferUtil.bytes("asdf")) > 0;
2:477deb3:     }
1:2fd3268: 
1:35a945e:     @Test
1:405524e:     public void testBytes()
1:35a945e:     {
1:405524e:         BytesType comparator = new BytesType();
1:43d330d:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
1:43d330d:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.EMPTY_BYTE_BUFFER) > 0;
1:43d330d:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER) == 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("a")) > 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("a"), ByteBufferUtil.bytes("z")) < 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.bytes("asdf")) == 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("asdz"), ByteBufferUtil.bytes("asdf")) > 0;
1:35a945e:     }
1:35a945e: 
1:477deb3:     @Test
1:cdb07b1:     public void testUTF8()
1:58df830:     {
1:405524e:         UTF8Type comparator = new UTF8Type();
1:43d330d:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
1:43d330d:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.EMPTY_BYTE_BUFFER) > 0;
1:43d330d:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER) == 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("a")) > 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("z")) == 0;
1:8358669:         assert comparator.compare(ByteBufferUtil.bytes("a"), ByteBufferUtil.bytes("z")) < 0;
1:35a945e:     }
1:35a945e: 
1:405524e:     @Test
1:477deb3:     public void testLong()
1:58df830:     {
1:35a945e:         Random rng = new Random();
1:58df830:         ByteBuffer[] data = new ByteBuffer[1000];
1:35a945e:         for (int i = 0; i < data.length; i++)
1:35a945e:         {
1:e7a385a:             data[i] = ByteBuffer.allocate(8);
1:35a945e:             rng.nextBytes(data[i].array());
1:35a945e:         }
1:35a945e: 
1:477deb3:         Arrays.sort(data, LongType.instance);
1:35a945e: 
1:35a945e:         for (int i = 1; i < data.length; i++)
1:35a945e:         {
1:07cdfd0: 
1:d36ec10:             long l0 = data[i - 1].getLong(data[i - 1].position());
1:d36ec10:             long l1 = data[i].getLong(data[i].position());
1:477deb3:             assert l0 <= l1;
1:35a945e:         }
1:35a945e:     }
1:07cdfd0: 
1:35a945e:     @Test
1:58df830:     public void testInt()
1:35a945e:     {
1:35a945e:         Random rng = new Random();
1:35a945e:         ByteBuffer[] data = new ByteBuffer[1000];
1:35a945e:         for (int i = 0; i < data.length; i++)
1:35a945e:         {
1:58df830:             data[i] = ByteBuffer.allocate(4);
1:35a945e:             rng.nextBytes(data[i].array());
1:35a945e:         }
1:2fd3268: 
1:58df830:         Arrays.sort(data, Int32Type.instance);
1:35a945e: 
1:35a945e:         for (int i = 1; i < data.length; i++)
1:35a945e:         {
1:58df830: 
1:58df830:             int l0 = data[i - 1].getInt(data[i - 1].position());
1:58df830:             int l1 = data[i].getInt(data[i].position());
1:58df830:             assert l0 <= l1;
1:58df830:         }
1:58df830:     }
1:58df830: 
1:58df830:     @Test
1:405524e:     public void testTimeUUID()
1:58df830:     {
1:405524e:         // two different UUIDs w/ the same timestamp
1:405524e:         UUID uuid1 = UUID.fromString("1077e700-c7f2-11de-86d5-f5bcc793a028");
1:405524e:         byte[] bytes1 = new byte[16];
1:405524e:         ByteBuffer bb1 = ByteBuffer.wrap(bytes1);
1:405524e:         bb1.putLong(uuid1.getMostSignificantBits());  bb1.putLong(uuid1.getLeastSignificantBits());
1:58df830: 
1:405524e:         UUID uuid2 = UUID.fromString("1077e700-c7f2-11de-982e-6fad363d5f29");
1:405524e:         byte[] bytes2 = new byte[16];
1:405524e:         ByteBuffer bb2 = ByteBuffer.wrap(bytes2);
1:405524e:         bb2.putLong(uuid2.getMostSignificantBits());  bb2.putLong(uuid2.getLeastSignificantBits());
1:58df830: 
1:e7a385a:         assert new TimeUUIDType().compare(ByteBuffer.wrap(bytes1), ByteBuffer.wrap(bytes2)) != 0;
1:58df830:     }
1:477deb3: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:35a945e
/////////////////////////////////////////////////////////////////////////
0:     public void testByte()
1:     {
1:         Random rng = new Random();
0:         ByteBuffer[] data = new ByteBuffer[Byte.MAX_VALUE];
1:         for (int i = 0; i < data.length; i++)
1:         {
0:             data[i] = ByteBuffer.allocate(1);
1:             rng.nextBytes(data[i].array());
1:         }
1: 
0:         Arrays.sort(data, ByteType.instance);
1: 
1:         for (int i = 1; i < data.length; i++)
1:         {
0:             byte b0 = data[i - 1].get(data[i - 1].position());
0:             byte b1 = data[i].get(data[i].position());
0:             assert b0 <= b1;
1:         }
1:     }
1: 
1:     @Test
0:     public void testShort()
1:     {
1:         Random rng = new Random();
1:         ByteBuffer[] data = new ByteBuffer[1000];
1:         for (int i = 0; i < data.length; i++)
1:         {
0:             data[i] = ByteBuffer.allocate(2);
1:             rng.nextBytes(data[i].array());
1:         }
1: 
0:         Arrays.sort(data, ShortType.instance);
1: 
1:         for (int i = 1; i < data.length; i++)
1:         {
0:             short s0 = data[i - 1].getShort(data[i - 1].position());
0:             short s1 = data[i].getShort(data[i].position());
0:             assert s0 <= s1;
1:         }
1:     }
1: 
1:     @Test
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:58df830
/////////////////////////////////////////////////////////////////////////
1:     public void testInt()
1:     {
0:         Random rng = new Random();
1:         ByteBuffer[] data = new ByteBuffer[1000];
0:         for (int i = 0; i < data.length; i++)
1:         {
1:             data[i] = ByteBuffer.allocate(4);
0:             rng.nextBytes(data[i].array());
1:         }
1: 
1:         Arrays.sort(data, Int32Type.instance);
1: 
0:         for (int i = 1; i < data.length; i++)
1:         {
1:         	
1:             int l0 = data[i - 1].getInt(data[i - 1].position());
1:             int l1 = data[i].getInt(data[i].position());
1:             assert l0 <= l1;
1:         }
1:     }
1: 
1:     @Test
commit:43d330d
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.EMPTY_BYTE_BUFFER) > 0;
1:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER) == 0;
/////////////////////////////////////////////////////////////////////////
1:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.EMPTY_BYTE_BUFFER) > 0;
1:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER) == 0;
/////////////////////////////////////////////////////////////////////////
1:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.EMPTY_BYTE_BUFFER) > 0;
1:         assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER) == 0;
commit:d36ec10
/////////////////////////////////////////////////////////////////////////
1:             long l0 = data[i - 1].getLong(data[i - 1].position());
1:             long l1 = data[i].getLong(data[i].position());
commit:8358669
/////////////////////////////////////////////////////////////////////////
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
0:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), FBUtilities.EMPTY_BYTE_BUFFER) > 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("a")) > 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("a"), ByteBufferUtil.bytes("z")) < 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.bytes("asdf")) == 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("asdz"), ByteBufferUtil.bytes("asdf")) > 0;
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
0:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), FBUtilities.EMPTY_BYTE_BUFFER) > 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("a")) > 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("a"), ByteBufferUtil.bytes("z")) < 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), ByteBufferUtil.bytes("asdf")) == 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("asdz"), ByteBufferUtil.bytes("asdf")) > 0;
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes("asdf")) < 0;
0:         assert comparator.compare(ByteBufferUtil.bytes("asdf"), FBUtilities.EMPTY_BYTE_BUFFER) > 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("a")) > 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("z"), ByteBufferUtil.bytes("z")) == 0;
1:         assert comparator.compare(ByteBufferUtil.bytes("a"), ByteBufferUtil.bytes("z")) < 0;
commit:cdb07b1
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testUTF8()
0:         assert comparator.compare(ByteBuffer.wrap("z".getBytes(Charsets.UTF_8)), ByteBuffer.wrap("a".getBytes(Charsets.UTF_8))) > 0;
0:         assert comparator.compare(ByteBuffer.wrap("z".getBytes(Charsets.UTF_8)), ByteBuffer.wrap("z".getBytes(Charsets.UTF_8))) == 0;
0:         assert comparator.compare(ByteBuffer.wrap("a".getBytes(Charsets.UTF_8)), ByteBuffer.wrap("z".getBytes(Charsets.UTF_8))) < 0;
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, ByteBuffer.wrap("asdf".getBytes())) < 0;
0:         assert comparator.compare(ByteBuffer.wrap("asdf".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER) > 0;
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, FBUtilities.EMPTY_BYTE_BUFFER) == 0;
0:         assert comparator.compare(ByteBuffer.wrap("z".getBytes()), ByteBuffer.wrap("a".getBytes())) > 0;
0:         assert comparator.compare(ByteBuffer.wrap("a".getBytes()), ByteBuffer.wrap("z".getBytes())) < 0;
0:         assert comparator.compare(ByteBuffer.wrap("asdf".getBytes()), ByteBuffer.wrap("asdf".getBytes())) == 0;
0:         assert comparator.compare(ByteBuffer.wrap("asdz".getBytes()), ByteBuffer.wrap("asdf".getBytes())) > 0;
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, ByteBuffer.wrap("asdf".getBytes())) < 0;
0:         assert comparator.compare(ByteBuffer.wrap("asdf".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER) > 0;
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, FBUtilities.EMPTY_BYTE_BUFFER) == 0;
0:         assert comparator.compare(ByteBuffer.wrap("z".getBytes()), ByteBuffer.wrap("a".getBytes())) > 0;
0:         assert comparator.compare(ByteBuffer.wrap("a".getBytes()), ByteBuffer.wrap("z".getBytes())) < 0;
0:         assert comparator.compare(ByteBuffer.wrap("asdf".getBytes()), ByteBuffer.wrap("asdf".getBytes())) == 0;
0:         assert comparator.compare(ByteBuffer.wrap("asdz".getBytes()), ByteBuffer.wrap("asdf".getBytes())) > 0;
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, ByteBuffer.wrap("asdf".getBytes())) < 0;
0:         assert comparator.compare(ByteBuffer.wrap("asdf".getBytes()), FBUtilities.EMPTY_BYTE_BUFFER) > 0;
0:         assert comparator.compare(FBUtilities.EMPTY_BYTE_BUFFER, FBUtilities.EMPTY_BYTE_BUFFER) == 0;
0:         assert comparator.compare(ByteBuffer.wrap("z".getBytes("UTF-8")), ByteBuffer.wrap("a".getBytes("UTF-8"))) > 0;
0:         assert comparator.compare(ByteBuffer.wrap("z".getBytes("UTF-8")), ByteBuffer.wrap("z".getBytes("UTF-8"))) == 0;
0:         assert comparator.compare(ByteBuffer.wrap("a".getBytes("UTF-8")), ByteBuffer.wrap("z".getBytes("UTF-8"))) < 0;
0:         ByteBuffer[] data = new ByteBuffer[1000];
1:             data[i] = ByteBuffer.allocate(8);
0:             rng.nextBytes(data[i].array());
1:         	
0:             long l0 = data[i - 1].getLong(data[i - 1].position()+data[i - 1].arrayOffset());
0:             long l1 = data[i].getLong(data[i].position()+data[i].arrayOffset());
/////////////////////////////////////////////////////////////////////////
1:         assert new TimeUUIDType().compare(ByteBuffer.wrap(bytes1), ByteBuffer.wrap(bytes2)) != 0;
commit:477deb3
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1:     public void testLong()
1:     {
0:         Random rng = new Random();
0:         byte[][] data = new byte[1000][];
0:         for (int i = 0; i < data.length; i++)
1:         {
0:             data[i] = new byte[8];
0:             rng.nextBytes(data[i]);
1:         }
1: 
1:         Arrays.sort(data, LongType.instance);
1: 
0:         for (int i = 1; i < data.length; i++)
1:         {
0:             long l0 = ByteBuffer.wrap(data[i - 1]).getLong();
0:             long l1 = ByteBuffer.wrap(data[i]).getLong();
1:             assert l0 <= l1;
1:         }
1:     }
1: 
1:     @Test
commit:405524e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.marshal;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
0: 
0: 
0: import java.io.UnsupportedEncodingException;
1: import java.nio.ByteBuffer;
1: import java.util.UUID;
0: 
0: import org.apache.commons.lang.ArrayUtils;
1: import org.junit.Test;
0: 
1: public class TypeCompareTest
0: {
1:     @Test
1:     public void testAscii()
0:     {
1:         AsciiType comparator = new AsciiType();
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, "asdf".getBytes()) < 0;
0:         assert comparator.compare("asdf".getBytes(), ArrayUtils.EMPTY_BYTE_ARRAY) > 0;
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY) == 0;
0:         assert comparator.compare("z".getBytes(), "a".getBytes()) > 0;
0:         assert comparator.compare("a".getBytes(), "z".getBytes()) < 0;
0:         assert comparator.compare("asdf".getBytes(), "asdf".getBytes()) == 0;
0:         assert comparator.compare("asdz".getBytes(), "asdf".getBytes()) > 0;
0:     }
0: 
1:     @Test
1:     public void testBytes()
0:     {
1:         BytesType comparator = new BytesType();
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, "asdf".getBytes()) < 0;
0:         assert comparator.compare("asdf".getBytes(), ArrayUtils.EMPTY_BYTE_ARRAY) > 0;
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY) == 0;
0:         assert comparator.compare("z".getBytes(), "a".getBytes()) > 0;
0:         assert comparator.compare("a".getBytes(), "z".getBytes()) < 0;
0:         assert comparator.compare("asdf".getBytes(), "asdf".getBytes()) == 0;
0:         assert comparator.compare("asdz".getBytes(), "asdf".getBytes()) > 0;
0:     }
0: 
1:     @Test
0:     public void testUTF8() throws UnsupportedEncodingException
0:     {
1:         UTF8Type comparator = new UTF8Type();
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, "asdf".getBytes()) < 0;
0:         assert comparator.compare("asdf".getBytes(), ArrayUtils.EMPTY_BYTE_ARRAY) > 0;
0:         assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY) == 0;
0:         assert comparator.compare("z".getBytes("UTF-8"), "a".getBytes("UTF-8")) > 0;
0:         assert comparator.compare("z".getBytes("UTF-8"), "z".getBytes("UTF-8")) == 0;
0:         assert comparator.compare("a".getBytes("UTF-8"), "z".getBytes("UTF-8")) < 0;
0:     }
0: 
1:     @Test
1:     public void testTimeUUID()
0:     {
1:         // two different UUIDs w/ the same timestamp
1:         UUID uuid1 = UUID.fromString("1077e700-c7f2-11de-86d5-f5bcc793a028");
1:         byte[] bytes1 = new byte[16];
1:         ByteBuffer bb1 = ByteBuffer.wrap(bytes1);
1:         bb1.putLong(uuid1.getMostSignificantBits());  bb1.putLong(uuid1.getLeastSignificantBits());
0: 
1:         UUID uuid2 = UUID.fromString("1077e700-c7f2-11de-982e-6fad363d5f29");
1:         byte[] bytes2 = new byte[16];
1:         ByteBuffer bb2 = ByteBuffer.wrap(bytes2);
1:         bb2.putLong(uuid2.getMostSignificantBits());  bb2.putLong(uuid2.getLeastSignificantBits());
0: 
0:         assert new TimeUUIDType().compare(bytes1, bytes2) != 0;
0:     }
0: }
============================================================================