1:615bf37: /*
1:615bf37:  *
1:615bf37:  * Licensed to the Apache Software Foundation (ASF) under one
1:615bf37:  * or more contributor license agreements.  See the NOTICE file
1:615bf37:  * distributed with this work for additional information
1:615bf37:  * regarding copyright ownership.  The ASF licenses this file
1:615bf37:  * to you under the Apache License, Version 2.0 (the
1:615bf37:  * "License"); you may not use this file except in compliance
1:615bf37:  * with the License.  You may obtain a copy of the License at
1:615bf37:  *
1:615bf37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:615bf37:  *
1:615bf37:  * Unless required by applicable law or agreed to in writing,
1:615bf37:  * software distributed under the License is distributed on an
1:615bf37:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:615bf37:  * KIND, either express or implied.  See the License for the
1:615bf37:  * specific language governing permissions and limitations
1:615bf37:  * under the License.
1:615bf37:  *
1:615bf37:  */
1:01115f7: package org.apache.cassandra.cql3.validation.operations;
1:01115f7: 
1:01115f7: import java.util.Arrays;
1:01115f7: 
1:01115f7: import org.junit.BeforeClass;
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import static junit.framework.Assert.assertNull;
1:01115f7: import static org.junit.Assert.assertEquals;
1:3f49c32: 
1:01115f7: import org.apache.cassandra.config.DatabaseDescriptor;
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:3f49c32: import org.apache.cassandra.cql3.UntypedResultSet;
1:3f49c32: import org.apache.cassandra.cql3.restrictions.StatementRestrictions;
1:01115f7: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1:01115f7: 
1:01115f7: /**
1:01115f7:  * SELECT statement tests that require a ByteOrderedPartitioner
1:01115f7:  */
1:01115f7: public class SelectOrderedPartitionerTest extends CQLTester
1:01115f7: {
1:01115f7:     @BeforeClass
1:01115f7:     public static void setUp()
1:01115f7:     {
1:0a08525:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
1:01115f7:     }
1:3f49c32: 
1:01115f7:     @Test
1:b98a406:     public void testTokenAndIndex() throws Throwable
1:b98a406:     {
1:b98a406:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:b98a406:         createIndex("CREATE INDEX ON %s(c)");
1:b98a406: 
1:b98a406:         for (int i = 0; i < 10; i++)
1:b98a406:         {
1:b98a406:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i, i, i);
1:b98a406:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i + 10, i + 10, i + 10);
1:b98a406:         }
1:b98a406: 
1:b98a406:         beforeAndAfterFlush(() -> {
1:b98a406:             assertRows(execute("SELECT * FROM %s WHERE token(a) > token(8) AND a = 9 AND c = 9 ALLOW FILTERING"),
1:b98a406:                        row(9, 9, 9, 9));
1:b98a406: 
1:b98a406:             assertRows(execute("SELECT * FROM %s WHERE token(a) > token(8) AND a > 8 AND c = 9 ALLOW FILTERING"),
1:b98a406:                        row(9, 9, 9, 9));
1:b98a406:         });
1:b98a406:     }
1:b98a406: 
1:b98a406: 
1:b98a406:     @Test
1:b98a406:     public void testFilteringOnAllPartitionKeysWithTokenRestriction() throws Throwable
1:b98a406:     {
1:b98a406:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:b98a406: 
1:b98a406:         for (int i = 0; i < 10; i++)
1:b98a406:         {
1:b98a406:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i, i, i);
1:b98a406:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i + 10, i + 10, i + 10);
1:b98a406:         }
1:b98a406: 
1:b98a406:         assertEmpty(execute("SELECT * FROM %s WHERE token(a, b) > token(10, 10)"));
1:b98a406:         assertEmpty(execute("SELECT * FROM %s WHERE token(a, b) > token(10, 10) AND a < 8 AND b < 8 ALLOW FILTERING"));
1:b98a406:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(5, 5) AND a < 8 AND b < 8 ALLOW FILTERING"),
1:b98a406:                    row(6, 6, 6, 6),
1:b98a406:                    row(7, 7, 7, 7));
1:b98a406:     }
1:b98a406: 
1:b98a406:     @Test
1:3f49c32:     public void testFilteringOnPartitionKeyWithToken() throws Throwable
1:3f49c32:     {
1:3f49c32:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:b98a406:         createIndex("CREATE INDEX ON %s(d)");
1:3f49c32: 
1:3f49c32:         for (int i = 0; i < 10; i++)
1:3f49c32:         {
1:3f49c32:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i, i, i);
1:3f49c32:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i + 10, i + 10, i + 10);
1:3f49c32:         }
1:01115f7: 
1:3f49c32:         beforeAndAfterFlush(() -> {
1:3f49c32:             assertRowsIgnoringOrder(execute("SELECT * FROM %s WHERE token(a, b) > token(5, 10) AND b < 8 ALLOW FILTERING"),
1:3f49c32:                                     row(6, 6, 6, 6),
1:3f49c32:                                     row(7, 7, 7, 7));
1:3f49c32: 
1:3f49c32:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a = 9 ALLOW FILTERING"),
1:3f49c32:                        row(9, 9, 9, 9),
1:3f49c32:                        row(9, 19, 19, 19));
1:3f49c32: 
1:b98a406:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a = 9 AND d = 9 ALLOW FILTERING"),
1:b98a406:                        row(9, 9, 9, 9));
1:b98a406: 
1:b98a406:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a > 8 AND b > 8 AND d = 9 ALLOW FILTERING"),
1:b98a406:                        row(9, 9, 9, 9));
1:b98a406: 
1:b98a406:             assertRows(execute("SELECT * FROM %s WHERE a = 9 AND b = 9  AND token(a, b) > token(8, 10) AND d = 9 ALLOW FILTERING"),
1:b98a406:                        row(9, 9, 9, 9));
1:b98a406: 
1:3f49c32:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a = 9 AND c = 19 ALLOW FILTERING"),
1:3f49c32:                        row(9, 19, 19, 19));
1:3f49c32: 
1:3f49c32:             assertEmpty(execute("SELECT * FROM %s WHERE token(a, b) = token(8, 8) AND b = 9 ALLOW FILTERING"));
1:3f49c32:         });
1:3f49c32:     }
1:3f49c32: 
1:3f49c32:     @Test
1:01115f7:     public void testTokenFunctionWithSingleColumnPartitionKey() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE IF NOT EXISTS %s (a int PRIMARY KEY, b text)");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (0, 'a')");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?)", 0), row(0, "a"));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?) and token(a) < token(?)", 0, 1), row(0, "a"));
1:01115f7:         assertInvalid("SELECT * FROM %s WHERE token(a) > token(?)", "a");
1:01115f7:         assertInvalidMessage("The token() function must contains only partition key components",
1:01115f7:                              "SELECT * FROM %s WHERE token(a, b) >= token(?, ?)", "b", 0);
1:01115f7:         assertInvalidMessage("More than one restriction was found for the start bound on a",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) >= token(?) and token(a) >= token(?)", 0, 1);
1:01115f7:         assertInvalidMessage("Columns \"a\" cannot be restricted by both an equality and an inequality relation",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) >= token(?) and token(a) = token(?)", 0, 1);
1:01115f7:         assertInvalidSyntax("SELECT * FROM %s WHERE token(a) = token(?) and token(a) IN (token(?))", 0, 1);
1:01115f7: 
1:01115f7:         assertInvalidMessage("More than one restriction was found for the start bound on a",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) > token(?) AND token(a) > token(?)", 1, 2);
1:01115f7:         assertInvalidMessage("More than one restriction was found for the end bound on a",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) <= token(?) AND token(a) < token(?)", 1, 2);
1:01115f7:         assertInvalidMessage("Columns \"a\" cannot be restricted by both an equality and an inequality relation",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) > token(?) AND token(a) = token(?)", 1, 2);
1:01115f7:         assertInvalidMessage("a cannot be restricted by more than one relation if it includes an Equal",
1:01115f7:                              "SELECT * FROM %s WHERE  token(a) = token(?) AND token(a) > token(?)", 1, 2);
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b text, PRIMARY KEY (a, b))");
1:01115f7:         assertInvalidMessage("The token() function must contains only partition key components",
1:01115f7:                              "SELECT * FROM %s WHERE token(a, b) > token(0, 'c')");
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testTokenFunctionWithMultiColumnPartitionKey() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b text, PRIMARY KEY ((a, b)))");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (0, 'a')");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (0, 'b')");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (0, 'c')");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?)", 0, "a"),
1:01115f7:                    row(0, "b"),
1:01115f7:                    row(0, "c"));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?) and token(a, b) < token(?, ?)",
1:01115f7:                            0, "a",
1:01115f7:                            0, "d"),
1:01115f7:                    row(0, "b"),
1:01115f7:                    row(0, "c"));
1:01115f7:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) > token(?) and token(b) > token(?)", 0, "a");
1:01115f7:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) > token(?, ?) and token(a) < token(?, ?) and token(b) > token(?, ?) ",
1:01115f7:                              0, "a", 0, "d", 0, "a");
1:01115f7:         assertInvalidMessage("The token function arguments must be in the partition key order: a, b",
1:01115f7:                              "SELECT * FROM %s WHERE token(b, a) > token(0, 'c')");
1:01115f7:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:01115f7:                              "SELECT * FROM %s WHERE token(a, b) > token(?, ?) and token(b) < token(?, ?)", 0, "a", 0, "a");
1:01115f7:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:01115f7:                              "SELECT * FROM %s WHERE token(a) > token(?, ?) and token(b) > token(?, ?)", 0, "a", 0, "a");
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testSingleColumnPartitionKeyWithTokenNonTokenRestrictionsMix() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (a int primary key, b int)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (0, 0);");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (1, 1);");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (2, 2);");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (3, 3);");
1:01115f7:         execute("INSERT INTO %s (a, b) VALUES (4, 4);");
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?);", 1, 3),
1:01115f7:                    row(1, 1),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a)> token(?) and token(a) <= token(?);", 1, 3),
1:01115f7:                    row(2, 2),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a)= token(2);"),
1:01115f7:                    row(2, 2));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a IN (?, ?);",
1:01115f7:                            1, 3, 1, 3),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) < token(?) AND token(a) >= token(?) AND a IN (?, ?);",
1:01115f7:                            1, 3, 1, 3),
1:01115f7:                    row(3, 3));
1:3f49c32:         assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,
1:01115f7:                              "SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a > ?;", 1, 3, 1);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a IN ?;",
1:01115f7:                            1, 3, Arrays.asList(1, 3)),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a = ?;", 1, 3),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND token(a) > token(?);", 3, 1),
1:01115f7:                    row(3, 3));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a = ?;", 3, 1));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE a = ? AND token(a) > token(?);", 1, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a IN (?, ?);", 2, 1, 3),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) < token(?) AND a IN (?, ?) ;", 2, 5, 1, 3),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?) AND token(a) > token(?) AND token(a) < token(?);", 1, 3, 2, 5),
1:01115f7:                    row(3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a IN (?, ?) AND token(a) < token(?);", 2, 1, 3, 5),
1:01115f7:                    row(3, 3));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE a IN (?, ?) AND token(a) > token(?);", 1, 3, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) <= token(?) AND a = ?;", 2, 2),
1:01115f7:                    row(2, 2));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) <= token(?) AND a = ?;", 2, 3));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) = token(?) AND a = ?;", 2, 3));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?) AND token(a) <= token(?) AND a = ?;", 2, 2, 2),
1:01115f7:                    row(2, 2));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) >= token(?) AND token(a) < token(?) AND a = ?;", 2, 2, 2));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a = ?;", 2, 2, 2));
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) < token(?) AND a = ?;", 2, 2, 2));
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testMultiColumnPartitionKeyWithTokenNonTokenRestrictionsMix() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (a int, b int, c int, primary key((a, b)))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (0, 0, 0);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (0, 1, 1);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (0, 2, 2);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (1, 0, 3);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 4);");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?);", 0, 0),
1:01115f7:                    row(0, 1, 1),
1:01115f7:                    row(0, 2, 2),
1:01115f7:                    row(1, 0, 3),
1:01115f7:                    row(1, 1, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?) AND a = ? AND b IN (?, ?);",
1:01115f7:                            0, 0, 1, 0, 1),
1:01115f7:                    row(1, 0, 3),
1:01115f7:                    row(1, 1, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND token(a, b) > token(?, ?) AND b IN (?, ?);",
1:01115f7:                            1, 0, 0, 0, 1),
1:01115f7:                    row(1, 0, 3),
1:01115f7:                    row(1, 1, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) > token(?, ?) AND a = ?;",
1:01115f7:                            0, 1, 0, 0, 1),
1:01115f7:                    row(1, 0, 3),
1:01115f7:                    row(1, 1, 4));
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) > token(?, ?) AND token(a, b) < token(?, ?) AND a = ?;",
1:01115f7:                             0, 1, 0, 0, 0, 0, 1));
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) > token(?, ?) AND token(a, b) <= token(?, ?) AND a = ?;",
1:01115f7:                             0, 1, 0, 0, 0, 0, 1));
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) >= token(?, ?) AND token(a, b) < token(?, ?) AND a = ?;",
1:01115f7:                             0, 1, 0, 0, 0, 0, 1));
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) = token(?, ?) AND a = ?;",
1:01115f7:                             0, 1, 0, 0, 1));
1:01115f7: 
1:3f49c32:         assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,
1:01115f7:                              "SELECT * FROM %s WHERE token(a, b) > token(?, ?) AND a = ?;", 0, 0, 1);
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testMultiColumnPartitionKeyWithIndexAndTokenNonTokenRestrictionsMix() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (a int, b int, c int, primary key((a, b)))");
1:01115f7:         createIndex("CREATE INDEX ON %s(b)");
1:01115f7:         createIndex("CREATE INDEX ON %s(c)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (0, 0, 0);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (0, 1, 1);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (0, 2, 2);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (1, 0, 3);");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 4);");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE b = ?;", 1),
1:01115f7:                    row(0, 1, 1),
1:01115f7:                    row(1, 1, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?) AND b = ?;", 0, 0, 1),
1:01115f7:                    row(0, 1, 1),
1:01115f7:                    row(1, 1, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE b = ? AND token(a, b) > token(?, ?);", 1, 0, 0),
1:01115f7:                    row(0, 1, 1),
1:01115f7:                    row(1, 1, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE b = ? AND token(a, b) > token(?, ?) and c = ? ALLOW FILTERING;", 1, 0, 0, 4),
1:01115f7:                    row(1, 1, 4));
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testTokenFunctionWithCompoundPartitionAndClusteringCols() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c, d))");
1:01115f7:         // just test that the queries don't error
1:01115f7:         execute("SELECT * FROM %s WHERE token(a, b) > token(0, 0) AND c > 10 ALLOW FILTERING;");
1:01115f7:         execute("SELECT * FROM %s WHERE c > 10 AND token(a, b) > token(0, 0) ALLOW FILTERING;");
1:01115f7:         execute("SELECT * FROM %s WHERE token(a, b) > token(0, 0) AND (c, d) > (0, 0) ALLOW FILTERING;");
1:01115f7:         execute("SELECT * FROM %s WHERE (c, d) > (0, 0) AND token(a, b) > token(0, 0) ALLOW FILTERING;");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test undefined columns
1:01115f7:      * migrated from cql_tests.py:TestCQL.undefined_column_handling_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testUndefinedColumns() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int, v2 int,)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, v1, v2) VALUES (0, 0, 0)");
1:01115f7:         execute("INSERT INTO %s (k, v1) VALUES (1, 1)");
1:01115f7:         execute("INSERT INTO %s (k, v1, v2) VALUES (2, 2, 2)");
1:01115f7: 
1:01115f7:         Object[][] rows = getRows(execute("SELECT v2 FROM %s"));
1:01115f7:         assertEquals(0, rows[0][0]);
1:01115f7:         assertEquals(null, rows[1][0]);
1:01115f7:         assertEquals(2, rows[2][0]);
1:01115f7: 
1:01115f7:         rows = getRows(execute("SELECT v2 FROM %s WHERE k = 1"));
1:01115f7:         assertEquals(1, rows.length);
1:01115f7:         assertNull(rows[0][0]);
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Check table with only a PK (#4361),
1:01115f7:      * migrated from cql_tests.py:TestCQL.only_pk_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testPrimaryKeyOnly() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, c int, PRIMARY KEY (k, c))");
1:01115f7: 
1:01115f7:         for (int k = 0; k < 2; k++)
1:01115f7:             for (int c = 0; c < 2; c++)
1:01115f7:                 execute("INSERT INTO %s (k, c) VALUES (?, ?)", k, c);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(0, 0),
1:01115f7:                    row(0, 1),
1:01115f7:                    row(1, 0),
1:01115f7:                    row(1, 1));
1:01115f7: 
1:01115f7:         // Check for dense tables too
1:01115f7:         createTable(" CREATE TABLE %s (k int, c int, PRIMARY KEY (k, c)) WITH COMPACT STORAGE");
1:01115f7: 
1:01115f7:         for (int k = 0; k < 2; k++)
1:01115f7:             for (int c = 0; c < 2; c++)
1:01115f7:                 execute("INSERT INTO %s (k, c) VALUES (?, ?)", k, c);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(0, 0),
1:01115f7:                    row(0, 1),
1:01115f7:                    row(1, 0),
1:01115f7:                    row(1, 1));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.composite_index_with_pk_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testCompositeIndexWithPK() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (blog_id int, time1 int, time2 int, author text, content text, PRIMARY KEY (blog_id, time1, time2))");
1:01115f7: 
1:01115f7:         createIndex("CREATE INDEX ON %s(author)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 1, 0, 0, "foo", "bar1");
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 1, 0, 1, "foo", "bar2");
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 2, 1, 0, "foo", "baz");
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 3, 0, 1, "gux", "qux");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT blog_id, content FROM %s WHERE author='foo'"),
1:01115f7:                    row(1, "bar1"),
1:01115f7:                    row(1, "bar2"),
1:01115f7:                    row(2, "baz"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 > 0 AND author='foo' ALLOW FILTERING"),
1:01115f7:                    row(2, "baz"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND author='foo' ALLOW FILTERING"),
1:01115f7:                    row(2, "baz"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND time2 = 0 AND author='foo' ALLOW FILTERING"),
1:01115f7:                    row(2, "baz"));
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT content FROM %s WHERE time1 = 1 AND time2 = 1 AND author='foo' ALLOW FILTERING"));
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT content FROM %s WHERE time1 = 1 AND time2 > 0 AND author='foo' ALLOW FILTERING"));
1:01115f7: 
1:01115f7:         assertInvalid("SELECT content FROM %s WHERE time2 >= 0 AND author='foo'");
1:01115f7: 
1:01115f7:         assertInvalid("SELECT blog_id, content FROM %s WHERE time1 > 0 AND author='foo'");
1:01115f7:         assertInvalid("SELECT blog_id, content FROM %s WHERE time1 = 1 AND author='foo'");
1:01115f7:         assertInvalid("SELECT blog_id, content FROM %s WHERE time1 = 1 AND time2 = 0 AND author='foo'");
1:01115f7:         assertInvalid("SELECT content FROM %s WHERE time1 = 1 AND time2 = 1 AND author='foo'");
1:01115f7:         assertInvalid("SELECT content FROM %s WHERE time1 = 1 AND time2 > 0 AND author='foo'");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for LIMIT bugs from 4579,
1:01115f7:      * migrated from cql_tests.py:TestCQL.limit_bugs_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testLimitBug() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, PRIMARY KEY (a, b))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 1, 1, 1);");
1:01115f7:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 2, 2, 2, 2);");
1:01115f7:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (3, 3, 3, 3, 3);");
1:01115f7:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (4, 4, 4, 4, 4);");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(1, 1, 1, 1, 1),
1:01115f7:                    row(2, 2, 2, 2, 2),
1:01115f7:                    row(3, 3, 3, 3, 3),
1:01115f7:                    row(4, 4, 4, 4, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s LIMIT 1"),
1:01115f7:                    row(1, 1, 1, 1, 1));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:01115f7:                    row(1, 1, 1, 1, 1),
1:01115f7:                    row(2, 2, 2, 2, 2));
1:01115f7: 
1:01115f7:         createTable("CREATE TABLE %s (a int primary key, b int, c int,)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 1)");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (2, 2, 2)");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (3, 3, 3)");
1:01115f7:         execute("INSERT INTO %s (a, b, c) VALUES (4, 4, 4)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(1, 1, 1),
1:01115f7:                    row(2, 2, 2),
1:01115f7:                    row(3, 3, 3),
1:01115f7:                    row(4, 4, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s LIMIT 1"),
1:01115f7:                    row(1, 1, 1));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:01115f7:                    row(1, 1, 1),
1:01115f7:                    row(2, 2, 2));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s LIMIT 3"),
1:01115f7:                    row(1, 1, 1),
1:01115f7:                    row(2, 2, 2),
1:01115f7:                    row(3, 3, 3));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s LIMIT 4"),
1:01115f7:                    row(1, 1, 1),
1:01115f7:                    row(2, 2, 2),
1:01115f7:                    row(3, 3, 3),
1:01115f7:                    row(4, 4, 4));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s LIMIT 5"),
1:01115f7:                    row(1, 1, 1),
1:01115f7:                    row(2, 2, 2),
1:01115f7:                    row(3, 3, 3),
1:01115f7:                    row(4, 4, 4));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for #4612 bug and more generally order by when multiple C* rows are queried
1:01115f7:      * migrated from cql_tests.py:TestCQL.order_by_multikey_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testOrderByMultikey() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (my_id varchar, col1 int, col2 int, value varchar, PRIMARY KEY (my_id, col1, col2))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key1', 1, 1, 'a');");
1:01115f7:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key2', 3, 3, 'a');");
1:01115f7:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key3', 2, 2, 'b');");
1:01115f7:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key4', 2, 1, 'b');");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT col1 FROM %s WHERE my_id in('key1', 'key2', 'key3') ORDER BY col1"),
1:01115f7:                    row(1), row(2), row(3));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT col1, value, my_id, col2 FROM %s WHERE my_id in('key3', 'key4') ORDER BY col1, col2"),
1:01115f7:                    row(2, "b", "key4", 1), row(2, "b", "key3", 2));
1:01115f7: 
1:01115f7:         assertInvalid("SELECT col1 FROM %s ORDER BY col1");
1:01115f7:         assertInvalid("SELECT col1 FROM %s WHERE my_id > 'key1' ORDER BY col1");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.composite_index_collections_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testIndexOnCompositeWithCollections() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (blog_id int, time1 int, time2 int, author text, content set<text>, PRIMARY KEY (blog_id, time1, time2))");
1:01115f7: 
1:01115f7:         createIndex("CREATE INDEX ON %s (author)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'bar1', 'bar2' })", 1, 0, 0, "foo");
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'bar2', 'bar3' })", 1, 0, 1, "foo");
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'baz' })", 2, 1, 0, "foo");
1:01115f7:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'qux' })", 3, 0, 1, "gux");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT blog_id, content FROM %s WHERE author='foo'"),
1:01115f7:                    row(1, set("bar1", "bar2")),
1:01115f7:                    row(1, set("bar2", "bar3")),
1:01115f7:                    row(2, set("baz")));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.truncate_clean_cache_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testTruncateWithCaching() throws Throwable
1:01115f7:     {
1:b31845c:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int, v2 int) WITH CACHING = { 'keys': 'ALL', 'rows_per_partition': 'ALL' };");
1:01115f7: 
1:01115f7:         for (int i = 0; i < 3; i++)
1:01115f7:             execute("INSERT INTO %s (k, v1, v2) VALUES (?, ?, ?)", i, i, i * 2);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT v1, v2 FROM %s WHERE k IN (0, 1, 2)"),
1:01115f7:                    row(0, 0),
1:01115f7:                    row(1, 2),
1:01115f7:                    row(2, 4));
1:01115f7: 
1:01115f7:         execute("TRUNCATE %s");
1:01115f7: 
1:01115f7:         assertEmpty(execute("SELECT v1, v2 FROM %s WHERE k IN (0, 1, 2)"));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.range_key_ordered_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testRangeKey() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k) VALUES (-1)");
1:01115f7:         execute("INSERT INTO %s (k) VALUES ( 0)");
1:01115f7:         execute("INSERT INTO %s (k) VALUES ( 1)");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(0),
1:01115f7:                    row(1),
1:01115f7:                    row(-1));
1:01115f7: 
1:01115f7:         assertInvalid("SELECT * FROM %s WHERE k >= -1 AND k < 1");
1:01115f7:     }
1:62fc314: 
1:62fc314:     @Test
1:62fc314:     public void testTokenFunctionWithInvalidColumnNames() throws Throwable
1:62fc314:     {
1:62fc314:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1:4ed0060:         assertInvalidMessage("Undefined column name e", "SELECT * FROM %s WHERE token(a, e) = token(0, 0)");
1:4ed0060:         assertInvalidMessage("Undefined column name e", "SELECT * FROM %s WHERE token(a, e) > token(0, 1)");
1:4ed0060:         assertInvalidMessage("Undefined column name e", "SELECT b AS e FROM %s WHERE token(a, e) = token(0, 0)");
1:4ed0060:         assertInvalidMessage("Undefined column name e", "SELECT b AS e FROM %s WHERE token(a, e) > token(0, 1)");
1:62fc314:     }
1:01115f7: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:b98a406
/////////////////////////////////////////////////////////////////////////
1:     public void testTokenAndIndex() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
1:         createIndex("CREATE INDEX ON %s(c)");
1: 
1:         for (int i = 0; i < 10; i++)
1:         {
1:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i, i, i);
1:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i + 10, i + 10, i + 10);
1:         }
1: 
1:         beforeAndAfterFlush(() -> {
1:             assertRows(execute("SELECT * FROM %s WHERE token(a) > token(8) AND a = 9 AND c = 9 ALLOW FILTERING"),
1:                        row(9, 9, 9, 9));
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE token(a) > token(8) AND a > 8 AND c = 9 ALLOW FILTERING"),
1:                        row(9, 9, 9, 9));
1:         });
1:     }
1: 
1: 
1:     @Test
1:     public void testFilteringOnAllPartitionKeysWithTokenRestriction() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1: 
1:         for (int i = 0; i < 10; i++)
1:         {
1:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i, i, i);
1:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i + 10, i + 10, i + 10);
1:         }
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a, b) > token(10, 10)"));
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a, b) > token(10, 10) AND a < 8 AND b < 8 ALLOW FILTERING"));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(5, 5) AND a < 8 AND b < 8 ALLOW FILTERING"),
1:                    row(6, 6, 6, 6),
1:                    row(7, 7, 7, 7));
1:     }
1: 
1:     @Test
1:         createIndex("CREATE INDEX ON %s(d)");
/////////////////////////////////////////////////////////////////////////
1:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a = 9 AND d = 9 ALLOW FILTERING"),
1:                        row(9, 9, 9, 9));
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a > 8 AND b > 8 AND d = 9 ALLOW FILTERING"),
1:                        row(9, 9, 9, 9));
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a = 9 AND b = 9  AND token(a, b) > token(8, 10) AND d = 9 ALLOW FILTERING"),
1:                        row(9, 9, 9, 9));
1: 
author:ZhaoYang
-------------------------------------------------------------------------------
commit:3f49c32
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.cassandra.cql3.UntypedResultSet;
1: import org.apache.cassandra.cql3.restrictions.StatementRestrictions;
/////////////////////////////////////////////////////////////////////////
1:     public void testFilteringOnPartitionKeyWithToken() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
1: 
1:         for (int i = 0; i < 10; i++)
1:         {
1:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i, i, i);
1:             execute("INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)", i, i + 10, i + 10, i + 10);
1:         }
1: 
1:         beforeAndAfterFlush(() -> {
1:             assertRowsIgnoringOrder(execute("SELECT * FROM %s WHERE token(a, b) > token(5, 10) AND b < 8 ALLOW FILTERING"),
1:                                     row(6, 6, 6, 6),
1:                                     row(7, 7, 7, 7));
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a = 9 ALLOW FILTERING"),
1:                        row(9, 9, 9, 9),
1:                        row(9, 19, 19, 19));
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(8, 10) AND a = 9 AND c = 19 ALLOW FILTERING"),
1:                        row(9, 19, 19, 19));
1: 
1:             assertEmpty(execute("SELECT * FROM %s WHERE token(a, b) = token(8, 8) AND b = 9 ALLOW FILTERING"));
1:         });
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:693e52d
commit:05bacc7
commit:dbefa85
commit:615bf37
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidMessage("Undefined column name e", "SELECT * FROM %s WHERE token(a, e) = token(0, 0)");
1:         assertInvalidMessage("Undefined column name e", "SELECT * FROM %s WHERE token(a, e) > token(0, 1)");
1:         assertInvalidMessage("Undefined column name e", "SELECT b AS e FROM %s WHERE token(a, e) = token(0, 0)");
1:         assertInvalidMessage("Undefined column name e", "SELECT b AS e FROM %s WHERE token(a, e) > token(0, 1)");
author:blerer
-------------------------------------------------------------------------------
commit:be2c26f
commit:62fc314
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testTokenFunctionWithInvalidColumnNames() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c))");
0:         assertInvalidMessage("Undefined name e in where clause ('token(a, e) = token(0, 0)')", "SELECT * FROM %s WHERE token(a, e) = token(0, 0)");
0:         assertInvalidMessage("Undefined name e in where clause ('token(a, e) > token(0, 1)')", "SELECT * FROM %s WHERE token(a, e) > token(0, 1)");
0:         assertInvalidMessage("Aliases aren't allowed in the where clause ('token(a, e) = token(0, 0)')", "SELECT b AS e FROM %s WHERE token(a, e) = token(0, 0)");
0:         assertInvalidMessage("Aliases aren't allowed in the where clause ('token(a, e) > token(0, 1)')", "SELECT b AS e FROM %s WHERE token(a, e) > token(0, 1)");
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int, v2 int) WITH CACHING = { 'keys': 'ALL', 'rows_per_partition': 'ALL' };");
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setPartitioner(ByteOrderedPartitioner.instance);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.validation.operations;
1: 
1: import java.util.Arrays;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static junit.framework.Assert.assertNull;
1: import static org.junit.Assert.assertEquals;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1: 
1: /**
1:  * SELECT statement tests that require a ByteOrderedPartitioner
1:  */
1: public class SelectOrderedPartitionerTest extends CQLTester
1: {
1:     @BeforeClass
1:     public static void setUp()
1:     {
0:         DatabaseDescriptor.setPartitioner(ByteOrderedPartitioner.instance);
1:     }
1: 
1:     @Test
1:     public void testTokenFunctionWithSingleColumnPartitionKey() throws Throwable
1:     {
1:         createTable("CREATE TABLE IF NOT EXISTS %s (a int PRIMARY KEY, b text)");
1:         execute("INSERT INTO %s (a, b) VALUES (0, 'a')");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?)", 0), row(0, "a"));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?) and token(a) < token(?)", 0, 1), row(0, "a"));
1:         assertInvalid("SELECT * FROM %s WHERE token(a) > token(?)", "a");
1:         assertInvalidMessage("The token() function must contains only partition key components",
1:                              "SELECT * FROM %s WHERE token(a, b) >= token(?, ?)", "b", 0);
1:         assertInvalidMessage("More than one restriction was found for the start bound on a",
1:                              "SELECT * FROM %s WHERE token(a) >= token(?) and token(a) >= token(?)", 0, 1);
1:         assertInvalidMessage("Columns \"a\" cannot be restricted by both an equality and an inequality relation",
1:                              "SELECT * FROM %s WHERE token(a) >= token(?) and token(a) = token(?)", 0, 1);
1:         assertInvalidSyntax("SELECT * FROM %s WHERE token(a) = token(?) and token(a) IN (token(?))", 0, 1);
1: 
1:         assertInvalidMessage("More than one restriction was found for the start bound on a",
1:                              "SELECT * FROM %s WHERE token(a) > token(?) AND token(a) > token(?)", 1, 2);
1:         assertInvalidMessage("More than one restriction was found for the end bound on a",
1:                              "SELECT * FROM %s WHERE token(a) <= token(?) AND token(a) < token(?)", 1, 2);
1:         assertInvalidMessage("Columns \"a\" cannot be restricted by both an equality and an inequality relation",
1:                              "SELECT * FROM %s WHERE token(a) > token(?) AND token(a) = token(?)", 1, 2);
1:         assertInvalidMessage("a cannot be restricted by more than one relation if it includes an Equal",
1:                              "SELECT * FROM %s WHERE  token(a) = token(?) AND token(a) > token(?)", 1, 2);
1:     }
1: 
1:     @Test
1:     public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments() throws Throwable
1:     {
1:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b text, PRIMARY KEY (a, b))");
1:         assertInvalidMessage("The token() function must contains only partition key components",
1:                              "SELECT * FROM %s WHERE token(a, b) > token(0, 'c')");
1:     }
1: 
1:     @Test
1:     public void testTokenFunctionWithMultiColumnPartitionKey() throws Throwable
1:     {
1:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b text, PRIMARY KEY ((a, b)))");
1:         execute("INSERT INTO %s (a, b) VALUES (0, 'a')");
1:         execute("INSERT INTO %s (a, b) VALUES (0, 'b')");
1:         execute("INSERT INTO %s (a, b) VALUES (0, 'c')");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?)", 0, "a"),
1:                    row(0, "b"),
1:                    row(0, "c"));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?) and token(a, b) < token(?, ?)",
1:                            0, "a",
1:                            0, "d"),
1:                    row(0, "b"),
1:                    row(0, "c"));
1:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:                              "SELECT * FROM %s WHERE token(a) > token(?) and token(b) > token(?)", 0, "a");
1:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:                              "SELECT * FROM %s WHERE token(a) > token(?, ?) and token(a) < token(?, ?) and token(b) > token(?, ?) ",
1:                              0, "a", 0, "d", 0, "a");
1:         assertInvalidMessage("The token function arguments must be in the partition key order: a, b",
1:                              "SELECT * FROM %s WHERE token(b, a) > token(0, 'c')");
1:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:                              "SELECT * FROM %s WHERE token(a, b) > token(?, ?) and token(b) < token(?, ?)", 0, "a", 0, "a");
1:         assertInvalidMessage("The token() function must be applied to all partition key components or none of them",
1:                              "SELECT * FROM %s WHERE token(a) > token(?, ?) and token(b) > token(?, ?)", 0, "a", 0, "a");
1:     }
1: 
1:     @Test
1:     public void testSingleColumnPartitionKeyWithTokenNonTokenRestrictionsMix() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int primary key, b int)");
1: 
1:         execute("INSERT INTO %s (a, b) VALUES (0, 0);");
1:         execute("INSERT INTO %s (a, b) VALUES (1, 1);");
1:         execute("INSERT INTO %s (a, b) VALUES (2, 2);");
1:         execute("INSERT INTO %s (a, b) VALUES (3, 3);");
1:         execute("INSERT INTO %s (a, b) VALUES (4, 4);");
1:         assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?);", 1, 3),
1:                    row(1, 1),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a)> token(?) and token(a) <= token(?);", 1, 3),
1:                    row(2, 2),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a)= token(2);"),
1:                    row(2, 2));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a IN (?, ?);",
1:                            1, 3, 1, 3),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) < token(?) AND token(a) >= token(?) AND a IN (?, ?);",
1:                            1, 3, 1, 3),
1:                    row(3, 3));
0:         assertInvalidMessage("Only EQ and IN relation are supported on the partition key (unless you use the token() function)",
1:                              "SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a > ?;", 1, 3, 1);
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a IN ?;",
1:                            1, 3, Arrays.asList(1, 3)),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a = ?;", 1, 3),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND token(a) > token(?);", 3, 1),
1:                    row(3, 3));
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a = ?;", 3, 1));
1:         assertEmpty(execute("SELECT * FROM %s WHERE a = ? AND token(a) > token(?);", 1, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a IN (?, ?);", 2, 1, 3),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) < token(?) AND a IN (?, ?) ;", 2, 5, 1, 3),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?) AND token(a) > token(?) AND token(a) < token(?);", 1, 3, 2, 5),
1:                    row(3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a IN (?, ?) AND token(a) < token(?);", 2, 1, 3, 5),
1:                    row(3, 3));
1:         assertEmpty(execute("SELECT * FROM %s WHERE a IN (?, ?) AND token(a) > token(?);", 1, 3, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) <= token(?) AND a = ?;", 2, 2),
1:                    row(2, 2));
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) <= token(?) AND a = ?;", 2, 3));
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) = token(?) AND a = ?;", 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?) AND token(a) <= token(?) AND a = ?;", 2, 2, 2),
1:                    row(2, 2));
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) >= token(?) AND token(a) < token(?) AND a = ?;", 2, 2, 2));
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a = ?;", 2, 2, 2));
1:         assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) < token(?) AND a = ?;", 2, 2, 2));
1:     }
1: 
1:     @Test
1:     public void testMultiColumnPartitionKeyWithTokenNonTokenRestrictionsMix() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, primary key((a, b)))");
1: 
1:         execute("INSERT INTO %s (a, b, c) VALUES (0, 0, 0);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (0, 1, 1);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (0, 2, 2);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (1, 0, 3);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 4);");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?);", 0, 0),
1:                    row(0, 1, 1),
1:                    row(0, 2, 2),
1:                    row(1, 0, 3),
1:                    row(1, 1, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?) AND a = ? AND b IN (?, ?);",
1:                            0, 0, 1, 0, 1),
1:                    row(1, 0, 3),
1:                    row(1, 1, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND token(a, b) > token(?, ?) AND b IN (?, ?);",
1:                            1, 0, 0, 0, 1),
1:                    row(1, 0, 3),
1:                    row(1, 1, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) > token(?, ?) AND a = ?;",
1:                            0, 1, 0, 0, 1),
1:                    row(1, 0, 3),
1:                    row(1, 1, 4));
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) > token(?, ?) AND token(a, b) < token(?, ?) AND a = ?;",
1:                             0, 1, 0, 0, 0, 0, 1));
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) > token(?, ?) AND token(a, b) <= token(?, ?) AND a = ?;",
1:                             0, 1, 0, 0, 0, 0, 1));
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) >= token(?, ?) AND token(a, b) < token(?, ?) AND a = ?;",
1:                             0, 1, 0, 0, 0, 0, 1));
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE b IN (?, ?) AND token(a, b) = token(?, ?) AND a = ?;",
1:                             0, 1, 0, 0, 1));
1: 
0:         assertInvalidMessage("Partition key parts: b must be restricted as other parts are",
1:                              "SELECT * FROM %s WHERE token(a, b) > token(?, ?) AND a = ?;", 0, 0, 1);
1:     }
1: 
1:     @Test
1:     public void testMultiColumnPartitionKeyWithIndexAndTokenNonTokenRestrictionsMix() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, primary key((a, b)))");
1:         createIndex("CREATE INDEX ON %s(b)");
1:         createIndex("CREATE INDEX ON %s(c)");
1: 
1:         execute("INSERT INTO %s (a, b, c) VALUES (0, 0, 0);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (0, 1, 1);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (0, 2, 2);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (1, 0, 3);");
1:         execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 4);");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE b = ?;", 1),
1:                    row(0, 1, 1),
1:                    row(1, 1, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?) AND b = ?;", 0, 0, 1),
1:                    row(0, 1, 1),
1:                    row(1, 1, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE b = ? AND token(a, b) > token(?, ?);", 1, 0, 0),
1:                    row(0, 1, 1),
1:                    row(1, 1, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE b = ? AND token(a, b) > token(?, ?) and c = ? ALLOW FILTERING;", 1, 0, 0, 4),
1:                    row(1, 1, 4));
1:     }
1: 
1:     @Test
1:     public void testTokenFunctionWithCompoundPartitionAndClusteringCols() throws Throwable
1:     {
1:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c, d))");
1:         // just test that the queries don't error
1:         execute("SELECT * FROM %s WHERE token(a, b) > token(0, 0) AND c > 10 ALLOW FILTERING;");
1:         execute("SELECT * FROM %s WHERE c > 10 AND token(a, b) > token(0, 0) ALLOW FILTERING;");
1:         execute("SELECT * FROM %s WHERE token(a, b) > token(0, 0) AND (c, d) > (0, 0) ALLOW FILTERING;");
1:         execute("SELECT * FROM %s WHERE (c, d) > (0, 0) AND token(a, b) > token(0, 0) ALLOW FILTERING;");
1:     }
1: 
1:     /**
1:      * Test undefined columns
1:      * migrated from cql_tests.py:TestCQL.undefined_column_handling_test()
1:      */
1:     @Test
1:     public void testUndefinedColumns() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int, v2 int,)");
1: 
1:         execute("INSERT INTO %s (k, v1, v2) VALUES (0, 0, 0)");
1:         execute("INSERT INTO %s (k, v1) VALUES (1, 1)");
1:         execute("INSERT INTO %s (k, v1, v2) VALUES (2, 2, 2)");
1: 
1:         Object[][] rows = getRows(execute("SELECT v2 FROM %s"));
1:         assertEquals(0, rows[0][0]);
1:         assertEquals(null, rows[1][0]);
1:         assertEquals(2, rows[2][0]);
1: 
1:         rows = getRows(execute("SELECT v2 FROM %s WHERE k = 1"));
1:         assertEquals(1, rows.length);
1:         assertNull(rows[0][0]);
1:     }
1: 
1:     /**
1:      * Check table with only a PK (#4361),
1:      * migrated from cql_tests.py:TestCQL.only_pk_test()
1:      */
1:     @Test
1:     public void testPrimaryKeyOnly() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, c int, PRIMARY KEY (k, c))");
1: 
1:         for (int k = 0; k < 2; k++)
1:             for (int c = 0; c < 2; c++)
1:                 execute("INSERT INTO %s (k, c) VALUES (?, ?)", k, c);
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, 0),
1:                    row(0, 1),
1:                    row(1, 0),
1:                    row(1, 1));
1: 
1:         // Check for dense tables too
1:         createTable(" CREATE TABLE %s (k int, c int, PRIMARY KEY (k, c)) WITH COMPACT STORAGE");
1: 
1:         for (int k = 0; k < 2; k++)
1:             for (int c = 0; c < 2; c++)
1:                 execute("INSERT INTO %s (k, c) VALUES (?, ?)", k, c);
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, 0),
1:                    row(0, 1),
1:                    row(1, 0),
1:                    row(1, 1));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.composite_index_with_pk_test()
1:      */
1:     @Test
1:     public void testCompositeIndexWithPK() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (blog_id int, time1 int, time2 int, author text, content text, PRIMARY KEY (blog_id, time1, time2))");
1: 
1:         createIndex("CREATE INDEX ON %s(author)");
1: 
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 1, 0, 0, "foo", "bar1");
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 1, 0, 1, "foo", "bar2");
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 2, 1, 0, "foo", "baz");
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 3, 0, 1, "gux", "qux");
1: 
1:         assertRows(execute("SELECT blog_id, content FROM %s WHERE author='foo'"),
1:                    row(1, "bar1"),
1:                    row(1, "bar2"),
1:                    row(2, "baz"));
1: 
1:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 > 0 AND author='foo' ALLOW FILTERING"),
1:                    row(2, "baz"));
1: 
1:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND author='foo' ALLOW FILTERING"),
1:                    row(2, "baz"));
1: 
1:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND time2 = 0 AND author='foo' ALLOW FILTERING"),
1:                    row(2, "baz"));
1: 
1:         assertEmpty(execute("SELECT content FROM %s WHERE time1 = 1 AND time2 = 1 AND author='foo' ALLOW FILTERING"));
1: 
1:         assertEmpty(execute("SELECT content FROM %s WHERE time1 = 1 AND time2 > 0 AND author='foo' ALLOW FILTERING"));
1: 
1:         assertInvalid("SELECT content FROM %s WHERE time2 >= 0 AND author='foo'");
1: 
1:         assertInvalid("SELECT blog_id, content FROM %s WHERE time1 > 0 AND author='foo'");
1:         assertInvalid("SELECT blog_id, content FROM %s WHERE time1 = 1 AND author='foo'");
1:         assertInvalid("SELECT blog_id, content FROM %s WHERE time1 = 1 AND time2 = 0 AND author='foo'");
1:         assertInvalid("SELECT content FROM %s WHERE time1 = 1 AND time2 = 1 AND author='foo'");
1:         assertInvalid("SELECT content FROM %s WHERE time1 = 1 AND time2 > 0 AND author='foo'");
1:     }
1: 
1:     /**
1:      * Test for LIMIT bugs from 4579,
1:      * migrated from cql_tests.py:TestCQL.limit_bugs_test()
1:      */
1:     @Test
1:     public void testLimitBug() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, PRIMARY KEY (a, b))");
1: 
1:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 1, 1, 1);");
1:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 2, 2, 2, 2);");
1:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (3, 3, 3, 3, 3);");
1:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (4, 4, 4, 4, 4);");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(1, 1, 1, 1, 1),
1:                    row(2, 2, 2, 2, 2),
1:                    row(3, 3, 3, 3, 3),
1:                    row(4, 4, 4, 4, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 1"),
1:                    row(1, 1, 1, 1, 1));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:                    row(1, 1, 1, 1, 1),
1:                    row(2, 2, 2, 2, 2));
1: 
1:         createTable("CREATE TABLE %s (a int primary key, b int, c int,)");
1: 
1:         execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 1)");
1:         execute("INSERT INTO %s (a, b, c) VALUES (2, 2, 2)");
1:         execute("INSERT INTO %s (a, b, c) VALUES (3, 3, 3)");
1:         execute("INSERT INTO %s (a, b, c) VALUES (4, 4, 4)");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(1, 1, 1),
1:                    row(2, 2, 2),
1:                    row(3, 3, 3),
1:                    row(4, 4, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 1"),
1:                    row(1, 1, 1));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:                    row(1, 1, 1),
1:                    row(2, 2, 2));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 3"),
1:                    row(1, 1, 1),
1:                    row(2, 2, 2),
1:                    row(3, 3, 3));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 4"),
1:                    row(1, 1, 1),
1:                    row(2, 2, 2),
1:                    row(3, 3, 3),
1:                    row(4, 4, 4));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 5"),
1:                    row(1, 1, 1),
1:                    row(2, 2, 2),
1:                    row(3, 3, 3),
1:                    row(4, 4, 4));
1:     }
1: 
1:     /**
1:      * Test for #4612 bug and more generally order by when multiple C* rows are queried
1:      * migrated from cql_tests.py:TestCQL.order_by_multikey_test()
1:      */
1:     @Test
1:     public void testOrderByMultikey() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (my_id varchar, col1 int, col2 int, value varchar, PRIMARY KEY (my_id, col1, col2))");
1: 
1:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key1', 1, 1, 'a');");
1:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key2', 3, 3, 'a');");
1:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key3', 2, 2, 'b');");
1:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key4', 2, 1, 'b');");
1: 
1:         assertRows(execute("SELECT col1 FROM %s WHERE my_id in('key1', 'key2', 'key3') ORDER BY col1"),
1:                    row(1), row(2), row(3));
1: 
1:         assertRows(execute("SELECT col1, value, my_id, col2 FROM %s WHERE my_id in('key3', 'key4') ORDER BY col1, col2"),
1:                    row(2, "b", "key4", 1), row(2, "b", "key3", 2));
1: 
1:         assertInvalid("SELECT col1 FROM %s ORDER BY col1");
1:         assertInvalid("SELECT col1 FROM %s WHERE my_id > 'key1' ORDER BY col1");
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.composite_index_collections_test()
1:      */
1:     @Test
1:     public void testIndexOnCompositeWithCollections() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (blog_id int, time1 int, time2 int, author text, content set<text>, PRIMARY KEY (blog_id, time1, time2))");
1: 
1:         createIndex("CREATE INDEX ON %s (author)");
1: 
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'bar1', 'bar2' })", 1, 0, 0, "foo");
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'bar2', 'bar3' })", 1, 0, 1, "foo");
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'baz' })", 2, 1, 0, "foo");
1:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'qux' })", 3, 0, 1, "gux");
1: 
1:         assertRows(execute("SELECT blog_id, content FROM %s WHERE author='foo'"),
1:                    row(1, set("bar1", "bar2")),
1:                    row(1, set("bar2", "bar3")),
1:                    row(2, set("baz")));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.truncate_clean_cache_test()
1:      */
1:     @Test
1:     public void testTruncateWithCaching() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int, v2 int,) WITH CACHING = ALL;");
1: 
1:         for (int i = 0; i < 3; i++)
1:             execute("INSERT INTO %s (k, v1, v2) VALUES (?, ?, ?)", i, i, i * 2);
1: 
1:         assertRows(execute("SELECT v1, v2 FROM %s WHERE k IN (0, 1, 2)"),
1:                    row(0, 0),
1:                    row(1, 2),
1:                    row(2, 4));
1: 
1:         execute("TRUNCATE %s");
1: 
1:         assertEmpty(execute("SELECT v1, v2 FROM %s WHERE k IN (0, 1, 2)"));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.range_key_ordered_test()
1:      */
1:     @Test
1:     public void testRangeKey() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY)");
1: 
1:         execute("INSERT INTO %s (k) VALUES (-1)");
1:         execute("INSERT INTO %s (k) VALUES ( 0)");
1:         execute("INSERT INTO %s (k) VALUES ( 1)");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0),
1:                    row(1),
1:                    row(-1));
1: 
1:         assertInvalid("SELECT * FROM %s WHERE k >= -1 AND k < 1");
1:     }
1: }
commit:f797bfa
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql3.validation.operations;
0: 
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: 
0: import static junit.framework.Assert.assertNull;
0: import static org.junit.Assert.assertEquals;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.cql3.CQLTester;
0: import org.apache.cassandra.dht.ByteOrderedPartitioner;
0: 
0: /**
0:  * SELECT statement tests that require a ByteOrderedPartitioner
0:  */
0: public class SelectOrderedPartitionerTest extends CQLTester
0: {
0:     @BeforeClass
0:     public static void setUp()
0:     {
0:         DatabaseDescriptor.setPartitioner(new ByteOrderedPartitioner());
0:     }
0: 
0:     @Test
0:     public void testTokenFunctionWithSingleColumnPartitionKey() throws Throwable
0:     {
0:         createTable("CREATE TABLE IF NOT EXISTS %s (a int PRIMARY KEY, b text)");
0:         execute("INSERT INTO %s (a, b) VALUES (0, 'a')");
0: 
0:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?)", 0), row(0, "a"));
0:         assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?) and token(a) < token(?)", 0, 1), row(0, "a"));
0:         assertInvalid("SELECT * FROM %s WHERE token(a) > token(?)", "a");
0:         assertInvalid("SELECT * FROM %s WHERE token(a, b) >= token(?, ?)", "b", 0);
0:         assertInvalid("SELECT * FROM %s WHERE token(a) >= token(?) and token(a) >= token(?)", 0, 1);
0:         assertInvalid("SELECT * FROM %s WHERE token(a) >= token(?) and token(a) = token(?)", 0, 1);
0:         assertInvalidSyntax("SELECT * FROM %s WHERE token(a) = token(?) and token(a) IN (token(?))", 0, 1);
0:     }
0: 
0:     @Test
0:     public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments() throws Throwable
0:     {
0:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b text, PRIMARY KEY (a, b))");
0:         assertInvalid("SELECT * FROM %s WHERE token(a, b) > token(0, 'c')");
0:     }
0: 
0:     @Test
0:     public void testTokenFunctionWithMultiColumnPartitionKey() throws Throwable
0:     {
0:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b text, PRIMARY KEY ((a, b)))");
0:         execute("INSERT INTO %s (a, b) VALUES (0, 'a')");
0:         execute("INSERT INTO %s (a, b) VALUES (0, 'b')");
0:         execute("INSERT INTO %s (a, b) VALUES (0, 'c')");
0: 
0:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?)", 0, "a"),
0:                    row(0, "b"),
0:                    row(0, "c"));
0:         assertRows(execute("SELECT * FROM %s WHERE token(a, b) > token(?, ?) and token(a, b) < token(?, ?)",
0:                            0, "a",
0:                            0, "d"),
0:                    row(0, "b"),
0:                    row(0, "c"));
0:         assertInvalid("SELECT * FROM %s WHERE token(a) > token(?) and token(b) > token(?)", 0, "a");
0:         assertInvalid("SELECT * FROM %s WHERE token(a) > token(?, ?) and token(a) < token(?, ?) and token(b) > token(?, ?) ", 0, "a", 0, "d", 0, "a");
0:         assertInvalid("SELECT * FROM %s WHERE token(b, a) > token(0, 'c')");
0:     }
0: 
0:     @Test
0:     public void testTokenFunctionWithCompoundPartitionAndClusteringCols() throws Throwable
0:     {
0:         createTable("CREATE TABLE IF NOT EXISTS %s (a int, b int, c int, d int, PRIMARY KEY ((a, b), c, d))");
0:         // just test that the queries don't error
0:         execute("SELECT * FROM %s WHERE token(a, b) > token(0, 0) AND c > 10 ALLOW FILTERING;");
0:         execute("SELECT * FROM %s WHERE c > 10 AND token(a, b) > token(0, 0) ALLOW FILTERING;");
0:         execute("SELECT * FROM %s WHERE token(a, b) > token(0, 0) AND (c, d) > (0, 0) ALLOW FILTERING;");
0:         execute("SELECT * FROM %s WHERE (c, d) > (0, 0) AND token(a, b) > token(0, 0) ALLOW FILTERING;");
0:     }
0: 
0:     /**
0:      * Test undefined columns
0:      * migrated from cql_tests.py:TestCQL.undefined_column_handling_test()
0:      */
0:     @Test
0:     public void testUndefinedColumns() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int, v2 int,)");
0: 
0:         execute("INSERT INTO %s (k, v1, v2) VALUES (0, 0, 0)");
0:         execute("INSERT INTO %s (k, v1) VALUES (1, 1)");
0:         execute("INSERT INTO %s (k, v1, v2) VALUES (2, 2, 2)");
0: 
0:         Object[][] rows = getRows(execute("SELECT v2 FROM %s"));
0:         assertEquals(0, rows[0][0]);
0:         assertEquals(null, rows[1][0]);
0:         assertEquals(2, rows[2][0]);
0: 
0:         rows = getRows(execute("SELECT v2 FROM %s WHERE k = 1"));
0:         assertEquals(1, rows.length);
0:         assertNull(rows[0][0]);
0:     }
0: 
0:     /**
0:      * Check table with only a PK (#4361),
0:      * migrated from cql_tests.py:TestCQL.only_pk_test()
0:      */
0:     @Test
0:     public void testPrimaryKeyOnly() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int, c int, PRIMARY KEY (k, c))");
0: 
0:         for (int k = 0; k < 2; k++)
0:             for (int c = 0; c < 2; c++)
0:                 execute("INSERT INTO %s (k, c) VALUES (?, ?)", k, c);
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:                    row(0, 0),
0:                    row(0, 1),
0:                    row(1, 0),
0:                    row(1, 1));
0: 
0:         // Check for dense tables too
0:         createTable(" CREATE TABLE %s (k int, c int, PRIMARY KEY (k, c)) WITH COMPACT STORAGE");
0: 
0:         for (int k = 0; k < 2; k++)
0:             for (int c = 0; c < 2; c++)
0:                 execute("INSERT INTO %s (k, c) VALUES (?, ?)", k, c);
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:                    row(0, 0),
0:                    row(0, 1),
0:                    row(1, 0),
0:                    row(1, 1));
0:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.composite_index_with_pk_test()
0:      */
0:     @Test
0:     public void testCompositeIndexWithPK() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (blog_id int, time1 int, time2 int, author text, content text, PRIMARY KEY (blog_id, time1, time2))");
0: 
0:         createIndex("CREATE INDEX ON %s(author)");
0: 
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 1, 0, 0, "foo", "bar1");
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 1, 0, 1, "foo", "bar2");
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 2, 1, 0, "foo", "baz");
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)", 3, 0, 1, "gux", "qux");
0: 
0:         assertRows(execute("SELECT blog_id, content FROM %s WHERE author='foo'"),
0:                    row(1, "bar1"),
0:                    row(1, "bar2"),
0:                    row(2, "baz"));
0: 
0:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 > 0 AND author='foo' ALLOW FILTERING"),
0:                    row(2, "baz"));
0: 
0:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND author='foo' ALLOW FILTERING"),
0:                    row(2, "baz"));
0: 
0:         assertRows(execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND time2 = 0 AND author='foo' ALLOW FILTERING"),
0:                    row(2, "baz"));
0: 
0:         assertEmpty(execute("SELECT content FROM %s WHERE time1 = 1 AND time2 = 1 AND author='foo' ALLOW FILTERING"));
0: 
0:         assertEmpty(execute("SELECT content FROM %s WHERE time1 = 1 AND time2 > 0 AND author='foo' ALLOW FILTERING"));
0: 
0:         assertInvalid("SELECT content FROM %s WHERE time2 >= 0 AND author='foo'");
0: 
0:         execute("SELECT blog_id, content FROM %s WHERE time1 > 0 AND author='foo'");
0:         execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND author='foo'");
0:         execute("SELECT blog_id, content FROM %s WHERE time1 = 1 AND time2 = 0 AND author='foo'");
0:         execute("SELECT content FROM %s WHERE time1 = 1 AND time2 = 1 AND author='foo'");
0:         execute("SELECT content FROM %s WHERE time1 = 1 AND time2 > 0 AND author='foo'");
0:     }
0: 
0:     /**
0:      * Test for LIMIT bugs from 4579,
0:      * migrated from cql_tests.py:TestCQL.limit_bugs_test()
0:      */
0:     @Test
0:     public void testLimitBug() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, PRIMARY KEY (a, b))");
0: 
0:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 1, 1, 1);");
0:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 2, 2, 2, 2);");
0:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (3, 3, 3, 3, 3);");
0:         execute("INSERT INTO %s (a, b, c, d, e) VALUES (4, 4, 4, 4, 4);");
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:                    row(1, 1, 1, 1, 1),
0:                    row(2, 2, 2, 2, 2),
0:                    row(3, 3, 3, 3, 3),
0:                    row(4, 4, 4, 4, 4));
0: 
0:         assertRows(execute("SELECT * FROM %s LIMIT 1"),
0:                    row(1, 1, 1, 1, 1));
0: 
0:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
0:                    row(1, 1, 1, 1, 1),
0:                    row(2, 2, 2, 2, 2));
0: 
0:         createTable("CREATE TABLE %s (a int primary key, b int, c int,)");
0: 
0:         execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 1)");
0:         execute("INSERT INTO %s (a, b, c) VALUES (2, 2, 2)");
0:         execute("INSERT INTO %s (a, b, c) VALUES (3, 3, 3)");
0:         execute("INSERT INTO %s (a, b, c) VALUES (4, 4, 4)");
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:                    row(1, 1, 1),
0:                    row(2, 2, 2),
0:                    row(3, 3, 3),
0:                    row(4, 4, 4));
0: 
0:         assertRows(execute("SELECT * FROM %s LIMIT 1"),
0:                    row(1, 1, 1));
0: 
0:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
0:                    row(1, 1, 1),
0:                    row(2, 2, 2));
0: 
0:         assertRows(execute("SELECT * FROM %s LIMIT 3"),
0:                    row(1, 1, 1),
0:                    row(2, 2, 2),
0:                    row(3, 3, 3));
0: 
0:         assertRows(execute("SELECT * FROM %s LIMIT 4"),
0:                    row(1, 1, 1),
0:                    row(2, 2, 2),
0:                    row(3, 3, 3),
0:                    row(4, 4, 4));
0: 
0:         assertRows(execute("SELECT * FROM %s LIMIT 5"),
0:                    row(1, 1, 1),
0:                    row(2, 2, 2),
0:                    row(3, 3, 3),
0:                    row(4, 4, 4));
0:     }
0: 
0:     /**
0:      * Test for #4612 bug and more generally order by when multiple C* rows are queried
0:      * migrated from cql_tests.py:TestCQL.order_by_multikey_test()
0:      */
0:     @Test
0:     public void testOrderByMultikey() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (my_id varchar, col1 int, col2 int, value varchar, PRIMARY KEY (my_id, col1, col2))");
0: 
0:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key1', 1, 1, 'a');");
0:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key2', 3, 3, 'a');");
0:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key3', 2, 2, 'b');");
0:         execute("INSERT INTO %s (my_id, col1, col2, value) VALUES ( 'key4', 2, 1, 'b');");
0: 
0:         assertRows(execute("SELECT col1 FROM %s WHERE my_id in('key1', 'key2', 'key3') ORDER BY col1"),
0:                    row(1), row(2), row(3));
0: 
0:         assertRows(execute("SELECT col1, value, my_id, col2 FROM %s WHERE my_id in('key3', 'key4') ORDER BY col1, col2"),
0:                    row(2, "b", "key4", 1), row(2, "b", "key3", 2));
0: 
0:         assertInvalid("SELECT col1 FROM %s ORDER BY col1");
0:         assertInvalid("SELECT col1 FROM %s WHERE my_id > 'key1' ORDER BY col1");
0:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.composite_index_collections_test()
0:      */
0:     @Test
0:     public void testIndexOnCompositeWithCollections() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (blog_id int, time1 int, time2 int, author text, content set<text>, PRIMARY KEY (blog_id, time1, time2))");
0: 
0:         createIndex("CREATE INDEX ON %s (author)");
0: 
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'bar1', 'bar2' })", 1, 0, 0, "foo");
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'bar2', 'bar3' })", 1, 0, 1, "foo");
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'baz' })", 2, 1, 0, "foo");
0:         execute("INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, { 'qux' })", 3, 0, 1, "gux");
0: 
0:         assertRows(execute("SELECT blog_id, content FROM %s WHERE author='foo'"),
0:                    row(1, set("bar1", "bar2")),
0:                    row(1, set("bar2", "bar3")),
0:                    row(2, set("baz")));
0:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.truncate_clean_cache_test()
0:      */
0:     @Test
0:     public void testTruncateWithCaching() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int, v2 int,) WITH CACHING = ALL;");
0: 
0:         for (int i = 0; i < 3; i++)
0:             execute("INSERT INTO %s (k, v1, v2) VALUES (?, ?, ?)", i, i, i * 2);
0: 
0:         assertRows(execute("SELECT v1, v2 FROM %s WHERE k IN (0, 1, 2)"),
0:                    row(0, 0),
0:                    row(1, 2),
0:                    row(2, 4));
0: 
0:         execute("TRUNCATE %s");
0: 
0:         assertEmpty(execute("SELECT v1, v2 FROM %s WHERE k IN (0, 1, 2)"));
0:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.range_key_ordered_test()
0:      */
0:     @Test
0:     public void testRangeKey() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY)");
0: 
0:         execute("INSERT INTO %s (k) VALUES (-1)");
0:         execute("INSERT INTO %s (k) VALUES ( 0)");
0:         execute("INSERT INTO %s (k) VALUES ( 1)");
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:                    row(0),
0:                    row(1),
0:                    row(-1));
0: 
0:         assertInvalid("SELECT * FROM %s WHERE k >= -1 AND k < 1");
0:     }
0: }
============================================================================