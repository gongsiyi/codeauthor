1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
15:c5a8190: 
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: 
1:bf51f24: /**
1:bf51f24:  * @deprecated use TableHistograms
1:bf51f24:  */
1:bf51f24: @Command(name = "cfhistograms", hidden = true, description = "Print statistic histograms for a given column family")
1:bf51f24: @Deprecated
1:bf51f24: public class CfHistograms extends TableHistograms
10:c5a8190: {
10:c5a8190: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:bf51f24
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * @deprecated use TableHistograms
1:  */
1: @Command(name = "cfhistograms", hidden = true, description = "Print statistic histograms for a given column family")
1: @Deprecated
1: public class CfHistograms extends TableHistograms
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
0: import static com.google.common.base.Preconditions.checkArgument;
0: import static java.lang.String.format;
0: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: 
0: import org.apache.cassandra.metrics.CassandraMetricsRegistry;
0: import org.apache.cassandra.tools.NodeProbe;
0: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
0: import org.apache.cassandra.utils.EstimatedHistogram;
0: import org.apache.commons.lang3.ArrayUtils;
1: 
0: @Command(name = "cfhistograms", description = "Print statistic histograms for a given column family")
0: public class CfHistograms extends NodeToolCmd
1: {
0:     @Arguments(usage = "<keyspace> <table>", description = "The keyspace and table name")
0:     private List<String> args = new ArrayList<>();
1: 
0:     @Override
0:     public void execute(NodeProbe probe)
1:     {
0:         checkArgument(args.size() == 2, "cfhistograms requires ks and cf args");
1: 
0:         String keyspace = args.get(0);
0:         String cfname = args.get(1);
1: 
0:         // calculate percentile of row size and column count
0:         long[] estimatedRowSize = (long[]) probe.getColumnFamilyMetric(keyspace, cfname, "EstimatedRowSizeHistogram");
0:         long[] estimatedColumnCount = (long[]) probe.getColumnFamilyMetric(keyspace, cfname, "EstimatedColumnCountHistogram");
1: 
0:         // build arrays to store percentile values
0:         double[] estimatedRowSizePercentiles = new double[7];
0:         double[] estimatedColumnCountPercentiles = new double[7];
0:         double[] offsetPercentiles = new double[]{0.5, 0.75, 0.95, 0.98, 0.99};
1: 
0:         if (ArrayUtils.isEmpty(estimatedRowSize) || ArrayUtils.isEmpty(estimatedColumnCount))
1:         {
0:             System.err.println("No SSTables exists, unable to calculate 'Partition Size' and 'Cell Count' percentiles");
1: 
0:             for (int i = 0; i < 7; i++)
1:             {
0:                 estimatedRowSizePercentiles[i] = Double.NaN;
0:                 estimatedColumnCountPercentiles[i] = Double.NaN;
1:             }
1:         }
0:         else
1:         {
0:             long[] rowSizeBucketOffsets = new EstimatedHistogram(estimatedRowSize.length).getBucketOffsets();
0:             long[] columnCountBucketOffsets = new EstimatedHistogram(estimatedColumnCount.length).getBucketOffsets();
0:             EstimatedHistogram rowSizeHist = new EstimatedHistogram(rowSizeBucketOffsets, estimatedRowSize);
0:             EstimatedHistogram columnCountHist = new EstimatedHistogram(columnCountBucketOffsets, estimatedColumnCount);
1: 
0:             if (rowSizeHist.isOverflowed())
1:             {
0:                 System.err.println(String.format("Row sizes are larger than %s, unable to calculate percentiles", rowSizeBucketOffsets[rowSizeBucketOffsets.length - 1]));
0:                 for (int i = 0; i < offsetPercentiles.length; i++)
0:                         estimatedRowSizePercentiles[i] = Double.NaN;
1:             }
0:             else
1:             {
0:                 for (int i = 0; i < offsetPercentiles.length; i++)
0:                     estimatedRowSizePercentiles[i] = rowSizeHist.percentile(offsetPercentiles[i]);
1:             }
1: 
0:             if (columnCountHist.isOverflowed())
1:             {
0:                 System.err.println(String.format("Column counts are larger than %s, unable to calculate percentiles", columnCountBucketOffsets[columnCountBucketOffsets.length - 1]));
0:                 for (int i = 0; i < estimatedColumnCountPercentiles.length; i++)
0:                     estimatedColumnCountPercentiles[i] = Double.NaN;
1:             }
0:             else
1:             {
0:                 for (int i = 0; i < offsetPercentiles.length; i++)
0:                     estimatedColumnCountPercentiles[i] = columnCountHist.percentile(offsetPercentiles[i]);
1:             }
1: 
0:             // min value
0:             estimatedRowSizePercentiles[5] = rowSizeHist.min();
0:             estimatedColumnCountPercentiles[5] = columnCountHist.min();
0:             // max value
0:             estimatedRowSizePercentiles[6] = rowSizeHist.max();
0:             estimatedColumnCountPercentiles[6] = columnCountHist.max();
1:         }
1: 
0:         String[] percentiles = new String[]{"50%", "75%", "95%", "98%", "99%", "Min", "Max"};
0:         double[] readLatency = probe.metricPercentilesAsArray((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspace, cfname, "ReadLatency"));
0:         double[] writeLatency = probe.metricPercentilesAsArray((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspace, cfname, "WriteLatency"));
0:         double[] sstablesPerRead = probe.metricPercentilesAsArray((CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspace, cfname, "SSTablesPerReadHistogram"));
1: 
0:         System.out.println(format("%s/%s histograms", keyspace, cfname));
0:         System.out.println(format("%-10s%10s%18s%18s%18s%18s",
0:                 "Percentile", "SSTables", "Write Latency", "Read Latency", "Partition Size", "Cell Count"));
0:         System.out.println(format("%-10s%10s%18s%18s%18s%18s",
0:                 "", "", "(micros)", "(micros)", "(bytes)", ""));
1: 
0:         for (int i = 0; i < percentiles.length; i++)
1:         {
0:             System.out.println(format("%-10s%10.2f%18.2f%18.2f%18.0f%18.0f",
0:                     percentiles[i],
0:                     sstablesPerRead[i],
0:                     writeLatency[i],
0:                     readLatency[i],
0:                     estimatedRowSizePercentiles[i],
0:                     estimatedColumnCountPercentiles[i]));
1:         }
0:         System.out.println();
1:     }
1: }
============================================================================