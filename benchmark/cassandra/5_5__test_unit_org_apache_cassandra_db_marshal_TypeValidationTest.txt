1:414d2e4: package org.apache.cassandra.db.marshal;
1:2fd3268: 
1:414d2e4: import org.apache.cassandra.Util;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:65105b9: import org.apache.cassandra.utils.UUIDGen;
1:414d2e4: import org.junit.Test;
1:2fd3268: 
1:414d2e4: import java.io.UnsupportedEncodingException;
1:414d2e4: import java.nio.ByteBuffer;
1:414d2e4: import java.nio.CharBuffer;
1:65105b9: import java.util.UUID;
1:2fd3268: 
1:414d2e4: /**
1:414d2e4:  * Licensed to the Apache Software Foundation (ASF) under one
1:414d2e4:  * or more contributor license agreements.  See the NOTICE file
1:414d2e4:  * distributed with this work for additional information
1:414d2e4:  * regarding copyright ownership.  The ASF licenses this file
1:414d2e4:  * to you under the Apache License, Version 2.0 (the
1:414d2e4:  * "License"); you may not use this file except in compliance
1:414d2e4:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:414d2e4:  * http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:414d2e4:  * Unless required by applicable law or agreed to in writing, software
1:414d2e4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:414d2e4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:414d2e4:  * See the License for the specific language governing permissions and
1:414d2e4:  * limitations under the License.
1:414d2e4:  */
1:2fd3268: 
1:2fd3268: 
1:414d2e4: public class TypeValidationTest
5:414d2e4: {
1:35a945e:     @Test(expected = MarshalException.class)
1:414d2e4:     public void testInvalidAscii()
1:414d2e4:     {
1:414d2e4:         AsciiType.instance.validate(ByteBuffer.wrap(new byte[]{ (byte)0x80 }));
5:414d2e4:     }
1:07cdfd0: 
1:35a945e:     @Test(expected = MarshalException.class)
1:414d2e4:     public void testInvalidTimeUUID()
1:35a945e:     {
1:65105b9:         UUID uuid = UUID.randomUUID();
1:65105b9:         TimeUUIDType.instance.validate(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
1:35a945e:     }
1:07cdfd0: 
1:07cdfd0:     @Test
1:414d2e4:     public void testValidTimeUUID()
1:35a945e:     {
1:65105b9:         TimeUUIDType.instance.validate(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()));
1:35a945e:     }
1:07cdfd0: 
1:2fd3268:     @Test
1:414d2e4:     public void testLong()
1:35a945e:     {
1:58df830:         LongType.instance.validate(Util.getBytes(5L));
1:414d2e4:         LongType.instance.validate(Util.getBytes(5555555555555555555L));
1:35a945e:     }
1:07cdfd0: 
1:35a945e:     @Test
1:58df830:     public void testInt()
1:35a945e:     {
1:58df830:         Int32Type.instance.validate(Util.getBytes(5));
1:58df830:         Int32Type.instance.validate(Util.getBytes(2057022603));
1:35a945e:     }
1:07cdfd0: 
1:35a945e:     @Test
1:414d2e4:     public void testValidUtf8() throws UnsupportedEncodingException
1:58df830:     {
1:414d2e4:         assert Character.MAX_CODE_POINT == 0x0010ffff;
1:414d2e4:         CharBuffer cb = CharBuffer.allocate(2837314);
1:414d2e4:         // let's test all of the unicode space.
1:414d2e4:         for (int i = 0; i < Character.MAX_CODE_POINT; i++)
1:414d2e4:         {
1:414d2e4:             // skip U+D800..U+DFFF. those CPs are invalid in utf8. java tolerates them, but doesn't convert them to
1:414d2e4:             // valid byte sequences (gives us '?' instead), so there is no point testing them.
1:414d2e4:             if (i >= 55296 && i <= 57343)
1:414d2e4:                 continue;
1:414d2e4:             char[] ch = Character.toChars(i);
1:414d2e4:             for (char c : ch)
1:414d2e4:                 cb.append(c);
1:58df830:         }
1:414d2e4:         String s = new String(cb.array());
1:414d2e4:         byte[] arr = s.getBytes("UTF8");
1:414d2e4:         ByteBuffer buf = ByteBuffer.wrap(arr);
1:414d2e4:         UTF8Type.instance.validate(buf);
1:07cdfd0: 
1:414d2e4:         // some you might not expect.
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {}));
1:414d2e4:         // valid Utf8, unspecified in modified utf8.
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {0}));
1:07cdfd0: 
1:414d2e4:         // modified utf8 null.
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {99, (byte)0xc0, (byte)0x80, 112}));
1:07cdfd0: 
1:414d2e4:         // edges, for my sanity.
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xc2, (byte)0x81}));
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xe0, (byte)0xa0, (byte)0x81}));
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xf0, (byte)0x90, (byte)0x81, (byte)0x81}));
1:414d2e4:     }
1:07cdfd0: 
1:414d2e4:     // now test for bogies.
1:07cdfd0: 
3:414d2e4:     @Test(expected = MarshalException.class)
1:414d2e4:     public void testFloatingc0()
1:414d2e4:     {
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {99, (byte)0xc0, 112}));
1:414d2e4:     }
1:07cdfd0: 
1:414d2e4:     @Test(expected = MarshalException.class)
1:414d2e4:     public void testInvalid2nd()
1:414d2e4:     {
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xc2, (byte)0xff}));
1:414d2e4:     }
1:07cdfd0: 
1:414d2e4:     @Test(expected = MarshalException.class)
1:414d2e4:     public void testInvalid3rd()
1:414d2e4:     {
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xe0, (byte)0xa0, (byte)0xff}));
1:414d2e4:     }
1:07cdfd0: 
1:414d2e4:     @Test(expected = MarshalException.class)
1:414d2e4:     public void testInvalid4th()
1:414d2e4:     {
1:414d2e4:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xf0, (byte)0x90, (byte)0x81, (byte)0xff}));
1:414d2e4:     }
1:07cdfd0: 
1:414d2e4:     // todo: for completeness, should test invalid two byte pairs.
1:414d2e4: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.MarshalException;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.MarshalException;
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     @Test
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     @Test
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:35a945e
/////////////////////////////////////////////////////////////////////////
0:     public void testValidShort()
1:     {
0:         ShortType.instance.validate(Util.getBytes((short) 5));
0:         ShortType.instance.validate(Util.getBytes(Short.MAX_VALUE));
1:     }
0: 
1:     @Test(expected = MarshalException.class)
0:     public void testInvalidShort()
1:     {
0:         ShortType.instance.validate(Util.getBytes(2057022603));
1:     }
0: 
1:     @Test
0:     public void testValidByte()
1:     {
0:         ByteType.instance.validate(Util.getBytes((byte) 5));
0:         ByteType.instance.validate(Util.getBytes(Byte.MAX_VALUE));
1:     }
0: 
1:     @Test(expected = MarshalException.class)
0:     public void testInvalidByte()
1:     {
0:         ByteType.instance.validate(Util.getBytes(2057022603));
1:     }
0: 
1:     @Test
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:58df830
/////////////////////////////////////////////////////////////////////////
1:         LongType.instance.validate(Util.getBytes(5L));
1:     public void testInt()
1:     {
1:         Int32Type.instance.validate(Util.getBytes(5));
1:         Int32Type.instance.validate(Util.getBytes(2057022603));
1:     }
0:     
0:     @Test
author:Eric Evans
-------------------------------------------------------------------------------
commit:65105b9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.UUIDGen;
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid = UUID.randomUUID();
1:         TimeUUIDType.instance.validate(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
1:         TimeUUIDType.instance.validate(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()));
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:414d2e4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.marshal;
0: 
0: import com.google.common.base.Charsets;
1: import org.apache.cassandra.Util;
1: import org.junit.Test;
0: import org.safehaus.uuid.UUIDGenerator;
0: 
1: import java.io.UnsupportedEncodingException;
1: import java.nio.ByteBuffer;
1: import java.nio.CharBuffer;
0: import java.util.Random;
0: 
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
0: 
1: public class TypeValidationTest
1: {
1:     @Test(expected = MarshalException.class)
1:     public void testInvalidAscii()
1:     {
1:         AsciiType.instance.validate(ByteBuffer.wrap(new byte[]{ (byte)0x80 }));
1:     }
0:     
1:     @Test(expected = MarshalException.class)
1:     public void testInvalidTimeUUID()
1:     {
0:         org.safehaus.uuid.UUID uuid = UUIDGenerator.getInstance().generateRandomBasedUUID();
0:         TimeUUIDType.instance.validate(ByteBuffer.wrap(uuid.toByteArray()));
1:     }
0:     
0:     @Test 
1:     public void testValidTimeUUID()
1:     {
0:         org.safehaus.uuid.UUID uuid = UUIDGenerator.getInstance().generateTimeBasedUUID();
0:         TimeUUIDType.instance.validate(ByteBuffer.wrap(uuid.toByteArray()));
1:     }
0:     
0:     @Test
1:     public void testLong()
1:     {
0:         LongType.instance.validate(Util.getBytes(5));
1:         LongType.instance.validate(Util.getBytes(5555555555555555555L));
1:     }
0:     
0:     @Test
1:     public void testValidUtf8() throws UnsupportedEncodingException
1:     {
1:         assert Character.MAX_CODE_POINT == 0x0010ffff;
1:         CharBuffer cb = CharBuffer.allocate(2837314);
1:         // let's test all of the unicode space.
1:         for (int i = 0; i < Character.MAX_CODE_POINT; i++)
1:         {
1:             // skip U+D800..U+DFFF. those CPs are invalid in utf8. java tolerates them, but doesn't convert them to
1:             // valid byte sequences (gives us '?' instead), so there is no point testing them.
1:             if (i >= 55296 && i <= 57343)
1:                 continue;
1:             char[] ch = Character.toChars(i);
1:             for (char c : ch)
1:                 cb.append(c);
1:         }
1:         String s = new String(cb.array());
1:         byte[] arr = s.getBytes("UTF8");
1:         ByteBuffer buf = ByteBuffer.wrap(arr);
1:         UTF8Type.instance.validate(buf);
0:         
1:         // some you might not expect.
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {}));
1:         // valid Utf8, unspecified in modified utf8.
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {0}));
0:         
1:         // modified utf8 null.
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {99, (byte)0xc0, (byte)0x80, 112}));
0:         
1:         // edges, for my sanity.
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xc2, (byte)0x81}));
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xe0, (byte)0xa0, (byte)0x81}));
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xf0, (byte)0x90, (byte)0x81, (byte)0x81}));
1:     }
0:     
1:     // now test for bogies.
0:     
1:     @Test(expected = MarshalException.class)
1:     public void testFloatingc0()
1:     {
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {99, (byte)0xc0, 112}));
1:     }
0:     
1:     @Test(expected = MarshalException.class)
1:     public void testInvalid2nd()
1:     {
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xc2, (byte)0xff}));
1:     }
0:     
1:     @Test(expected = MarshalException.class)
1:     public void testInvalid3rd()
1:     {
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xe0, (byte)0xa0, (byte)0xff}));
1:     }
0:     
1:     @Test(expected = MarshalException.class)
1:     public void testInvalid4th()
1:     {
1:         UTF8Type.instance.validate(ByteBuffer.wrap(new byte[] {(byte)0xf0, (byte)0x90, (byte)0x81, (byte)0xff}));
1:     }
0:     
1:     // todo: for completeness, should test invalid two byte pairs.
1: }
============================================================================