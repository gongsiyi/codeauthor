1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
1:01115f7:  */
1:01115f7: package org.apache.cassandra.cql3.validation.entities;
1:01115f7: 
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: 
1:01115f7: public class TupleTypeTest extends CQLTester
1:01115f7: {
1:01115f7:     @Test
1:01115f7:     public void testTuplePutAndGet() throws Throwable
1:01115f7:     {
1:01115f7:         String[] valueTypes = {"frozen<tuple<int, text, double>>", "tuple<int, text, double>"};
1:01115f7:         for (String valueType : valueTypes)
1:01115f7:         {
1:01115f7:             createTable("CREATE TABLE %s (k int PRIMARY KEY, t " + valueType + ")");
1:01115f7: 
1:01115f7:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, "foo", 3.4));
1:01115f7:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 1, tuple(8, "bar", 0.2));
1:01115f7:             assertAllRows(row(1, tuple(8, "bar", 0.2)),
1:01115f7:                           row(0, tuple(3, "foo", 3.4))
1:01115f7:             );
1:01115f7: 
1:01115f7:             // nulls
1:01115f7:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 2, tuple(5, null, 3.4));
1:01115f7:             assertRows(execute("SELECT * FROM %s WHERE k=?", 2),
1:01115f7:                        row(2, tuple(5, null, 3.4))
1:01115f7:             );
1:01115f7: 
1:01115f7:             // incomplete tuple
1:01115f7:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 3, tuple(5, "bar"));
1:01115f7:             assertRows(execute("SELECT * FROM %s WHERE k=?", 3),
1:01115f7:                        row(3, tuple(5, "bar"))
1:01115f7:             );
1:01115f7:         }
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testNestedTuple() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<int, tuple<text, double>>>)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, tuple("foo", 3.4)));
1:01115f7:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 1, tuple(8, tuple("bar", 0.2)));
1:01115f7:         assertAllRows(
1:01115f7:             row(1, tuple(8, tuple("bar", 0.2))),
1:01115f7:             row(0, tuple(3, tuple("foo", 3.4)))
1:01115f7:         );
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testTupleInPartitionKey() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (t frozen<tuple<int, text>> PRIMARY KEY)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (t) VALUES (?)", tuple(3, "foo"));
1:01115f7:         assertAllRows(row(tuple(3, "foo")));
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testTupleInClusteringKey() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, t frozen<tuple<int, text>>, PRIMARY KEY (k, t))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(5, "bar"));
1:01115f7:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, "foo"));
1:01115f7:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(6, "bar"));
1:01115f7:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(5, "foo"));
1:01115f7: 
1:01115f7:         assertAllRows(
1:01115f7:             row(0, tuple(3, "foo")),
1:01115f7:             row(0, tuple(5, "bar")),
1:01115f7:             row(0, tuple(5, "foo")),
1:01115f7:             row(0, tuple(6, "bar"))
1:01115f7:         );
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:c233270:     public void testTupleFromString() throws Throwable
1:c233270:     {
1:c233270:         createTable("CREATE TABLE %s (k int, c int, t frozen<tuple<int, text>>, PRIMARY KEY (k, c))");
1:c233270: 
1:c233270:         execute("INSERT INTO %s (k, c, t) VALUES (0, 0, '0:0')");
1:c233270:         execute("INSERT INTO %s (k, c, t) VALUES (0, 1, '0:1')");
1:c233270:         execute("INSERT INTO %s (k, c, t) VALUES (0, 2, '1')");
1:c233270:         execute("INSERT INTO %s (k, c, t) VALUES (0, 3, '1:1\\:1')");
1:c233270:         execute("INSERT INTO %s (k, c, t) VALUES (0, 4, '@:1')");
1:c233270: 
1:c233270:         assertAllRows(
1:c233270:             row(0, 0, tuple(0, "0")),
1:c233270:             row(0, 1, tuple(0, "1")),
1:c233270:             row(0, 2, tuple(1)),
1:c233270:             row(0, 3, tuple(1, "1:1")),
1:c233270:             row(0, 4, tuple(null, "1"))
1:c233270:         );
1:c233270: 
1:340df43:         assertInvalidMessage("Invalid tuple literal: too many elements. Type frozen<tuple<int, text>> expects 2 but got 3",
1:c233270:                              "INSERT INTO %s(k, t) VALUES (1,'1:2:3')");
1:c233270:     }
1:c233270: 
1:c233270:     @Test
1:01115f7:     public void testInvalidQueries() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<int, text, double>>)");
1:01115f7: 
1:01115f7:         assertInvalidSyntax("INSERT INTO %s (k, t) VALUES (0, ())");
1:c233270: 
1:340df43:         assertInvalidMessage("Invalid tuple literal for t: too many elements. Type frozen<tuple<int, text, double>> expects 3 but got 4",
1:c233270:                              "INSERT INTO %s (k, t) VALUES (0, (2, 'foo', 3.1, 'bar'))");
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testTupleWithUnsetValues() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t tuple<int, text, double>)");
1:01115f7:         // invalid positional field substitution
1:01115f7:         assertInvalidMessage("Invalid unset value for tuple field number 1",
1:01115f7:                              "INSERT INTO %s (k, t) VALUES(0, (3, ?, 2.1))", unset());
1:01115f7: 
1:01115f7:         createIndex("CREATE INDEX tuple_index ON %s (t)");
1:01115f7:         // select using unset
1:01115f7:         assertInvalidMessage("Invalid unset value for tuple field number 0", "SELECT * FROM %s WHERE k = ? and t = (?,?,?)", unset(), unset(), unset(), unset());
1:01115f7:     }
1:01115f7: 	
1:01115f7:     /**
1:01115f7:      * Test the syntax introduced by #4851,
1:01115f7:      * migrated from cql_tests.py:TestCQL.tuple_notation_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testTupleNotation() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, v1 int, v2 int, v3 int, PRIMARY KEY (k, v1, v2, v3))");
1:01115f7:         for (int i = 0; i < 2; i++)
1:01115f7:             for (int j = 0; j < 2; j++)
1:01115f7:                 for (int k = 0; k < 2; k++)
1:01115f7:                     execute("INSERT INTO %s (k, v1, v2, v3) VALUES (0, ?, ?, ?)", i, j, k);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0"),
1:01115f7:                    row(0, 0, 0),
1:01115f7:                    row(0, 0, 1),
1:01115f7:                    row(0, 1, 0),
1:01115f7:                    row(0, 1, 1),
1:01115f7:                    row(1, 0, 0),
1:01115f7:                    row(1, 0, 1),
1:01115f7:                    row(1, 1, 0),
1:01115f7:                    row(1, 1, 1));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2, v3) >= (1, 0, 1)"),
1:01115f7:                    row(1, 0, 1),
1:01115f7:                    row(1, 1, 0),
1:01115f7:                    row(1, 1, 1));
1:01115f7:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2) >= (1, 1)"),
1:01115f7:                    row(1, 1, 0),
1:01115f7:                    row(1, 1, 1));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2) > (0, 1) AND (v1, v2, v3) <= (1, 1, 0)"),
1:01115f7:                    row(1, 0, 0),
1:01115f7:                    row(1, 0, 1),
1:01115f7:                    row(1, 1, 0));
1:01115f7: 
1:01115f7:         assertInvalid("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v3) > (1, 0)");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for CASSANDRA-8062,
1:01115f7:      * migrated from cql_tests.py:TestCQL.test_v2_protocol_IN_with_tuples()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testSelectInStatementWithTuples() throws Throwable
1:01115f7:     {   // TODO - the dtest was using v2 protocol
1:01115f7:         createTable("CREATE TABLE %s (k int, c1 int, c2 text, PRIMARY KEY (k, c1, c2))");
1:01115f7:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'a')");
1:01115f7:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'b')");
1:01115f7:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'c')");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND (c1, c2) IN ((0, 'b'), (0, 'c'))"),
1:01115f7:                    row(0, 0, "b"),
1:01115f7:                    row(0, 0, "c"));
1:01115f7:     }
1:6dc595d: 
1:6dc595d:     @Test
1:6dc595d:     public void testInvalidInputForTuple() throws Throwable
1:6dc595d:     {
1:6dc595d:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, t tuple<text, text>)");
1:6dc595d:         assertInvalidMessage("Not enough bytes to read 0th component",
1:6dc595d:                              "INSERT INTO %s (pk, t) VALUES (?, ?)", 1, "test");
1:6dc595d:         assertInvalidMessage("Not enough bytes to read 0th component",
1:6dc595d:                              "INSERT INTO %s (pk, t) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:6dc595d:     }
1:01115f7: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:b7fc5dc
commit:6dc595d
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testInvalidInputForTuple() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, t tuple<text, text>)");
1:         assertInvalidMessage("Not enough bytes to read 0th component",
1:                              "INSERT INTO %s (pk, t) VALUES (?, ?)", 1, "test");
1:         assertInvalidMessage("Not enough bytes to read 0th component",
1:                              "INSERT INTO %s (pk, t) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:340df43
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidMessage("Invalid tuple literal: too many elements. Type frozen<tuple<int, text>> expects 2 but got 3",
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidMessage("Invalid tuple literal for t: too many elements. Type frozen<tuple<int, text, double>> expects 3 but got 4",
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:afc5093
author:blerer
-------------------------------------------------------------------------------
commit:c233270
/////////////////////////////////////////////////////////////////////////
1:     public void testTupleFromString() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, c int, t frozen<tuple<int, text>>, PRIMARY KEY (k, c))");
1: 
1:         execute("INSERT INTO %s (k, c, t) VALUES (0, 0, '0:0')");
1:         execute("INSERT INTO %s (k, c, t) VALUES (0, 1, '0:1')");
1:         execute("INSERT INTO %s (k, c, t) VALUES (0, 2, '1')");
1:         execute("INSERT INTO %s (k, c, t) VALUES (0, 3, '1:1\\:1')");
1:         execute("INSERT INTO %s (k, c, t) VALUES (0, 4, '@:1')");
1: 
1:         assertAllRows(
1:             row(0, 0, tuple(0, "0")),
1:             row(0, 1, tuple(0, "1")),
1:             row(0, 2, tuple(1)),
1:             row(0, 3, tuple(1, "1:1")),
1:             row(0, 4, tuple(null, "1"))
1:         );
1: 
0:         assertInvalidMessage("Invalid tuple literal: too many elements. Type tuple<int, text> expects 2 but got 3",
1:                              "INSERT INTO %s(k, t) VALUES (1,'1:2:3')");
1:     }
1: 
1:     @Test
1: 
0:         assertInvalidMessage("Invalid tuple literal for t: too many elements. Type tuple<int, text, double> expects 3 but got 4",
1:                              "INSERT INTO %s (k, t) VALUES (0, (2, 'foo', 3.1, 'bar'))");
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.validation.entities;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: 
1: public class TupleTypeTest extends CQLTester
1: {
1:     @Test
1:     public void testTuplePutAndGet() throws Throwable
1:     {
1:         String[] valueTypes = {"frozen<tuple<int, text, double>>", "tuple<int, text, double>"};
1:         for (String valueType : valueTypes)
1:         {
1:             createTable("CREATE TABLE %s (k int PRIMARY KEY, t " + valueType + ")");
1: 
1:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, "foo", 3.4));
1:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 1, tuple(8, "bar", 0.2));
1:             assertAllRows(row(1, tuple(8, "bar", 0.2)),
1:                           row(0, tuple(3, "foo", 3.4))
1:             );
1: 
1:             // nulls
1:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 2, tuple(5, null, 3.4));
1:             assertRows(execute("SELECT * FROM %s WHERE k=?", 2),
1:                        row(2, tuple(5, null, 3.4))
1:             );
1: 
1:             // incomplete tuple
1:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 3, tuple(5, "bar"));
1:             assertRows(execute("SELECT * FROM %s WHERE k=?", 3),
1:                        row(3, tuple(5, "bar"))
1:             );
1:         }
1:     }
1: 
1:     @Test
1:     public void testNestedTuple() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<int, tuple<text, double>>>)");
1: 
1:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, tuple("foo", 3.4)));
1:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 1, tuple(8, tuple("bar", 0.2)));
1:         assertAllRows(
1:             row(1, tuple(8, tuple("bar", 0.2))),
1:             row(0, tuple(3, tuple("foo", 3.4)))
1:         );
1:     }
1: 
1:     @Test
1:     public void testTupleInPartitionKey() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (t frozen<tuple<int, text>> PRIMARY KEY)");
1: 
1:         execute("INSERT INTO %s (t) VALUES (?)", tuple(3, "foo"));
1:         assertAllRows(row(tuple(3, "foo")));
1:     }
1: 
1:     @Test
1:     public void testTupleInClusteringKey() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, t frozen<tuple<int, text>>, PRIMARY KEY (k, t))");
1: 
1:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(5, "bar"));
1:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, "foo"));
1:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(6, "bar"));
1:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(5, "foo"));
1: 
1:         assertAllRows(
1:             row(0, tuple(3, "foo")),
1:             row(0, tuple(5, "bar")),
1:             row(0, tuple(5, "foo")),
1:             row(0, tuple(6, "bar"))
1:         );
1:     }
1: 
1:     @Test
1:     public void testInvalidQueries() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<int, text, double>>)");
1: 
1:         assertInvalidSyntax("INSERT INTO %s (k, t) VALUES (0, ())");
0:         assertInvalid("INSERT INTO %s (k, t) VALUES (0, (2, 'foo', 3.1, 'bar'))");
1:     }
1: 
1:     @Test
1:     public void testTupleWithUnsetValues() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t tuple<int, text, double>)");
1:         // invalid positional field substitution
1:         assertInvalidMessage("Invalid unset value for tuple field number 1",
1:                              "INSERT INTO %s (k, t) VALUES(0, (3, ?, 2.1))", unset());
1: 
1:         createIndex("CREATE INDEX tuple_index ON %s (t)");
1:         // select using unset
1:         assertInvalidMessage("Invalid unset value for tuple field number 0", "SELECT * FROM %s WHERE k = ? and t = (?,?,?)", unset(), unset(), unset(), unset());
1:     }
1: 	
1:     /**
1:      * Test the syntax introduced by #4851,
1:      * migrated from cql_tests.py:TestCQL.tuple_notation_test()
1:      */
1:     @Test
1:     public void testTupleNotation() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, v1 int, v2 int, v3 int, PRIMARY KEY (k, v1, v2, v3))");
1:         for (int i = 0; i < 2; i++)
1:             for (int j = 0; j < 2; j++)
1:                 for (int k = 0; k < 2; k++)
1:                     execute("INSERT INTO %s (k, v1, v2, v3) VALUES (0, ?, ?, ?)", i, j, k);
1: 
1:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0"),
1:                    row(0, 0, 0),
1:                    row(0, 0, 1),
1:                    row(0, 1, 0),
1:                    row(0, 1, 1),
1:                    row(1, 0, 0),
1:                    row(1, 0, 1),
1:                    row(1, 1, 0),
1:                    row(1, 1, 1));
1: 
1:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2, v3) >= (1, 0, 1)"),
1:                    row(1, 0, 1),
1:                    row(1, 1, 0),
1:                    row(1, 1, 1));
1:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2) >= (1, 1)"),
1:                    row(1, 1, 0),
1:                    row(1, 1, 1));
1: 
1:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2) > (0, 1) AND (v1, v2, v3) <= (1, 1, 0)"),
1:                    row(1, 0, 0),
1:                    row(1, 0, 1),
1:                    row(1, 1, 0));
1: 
1:         assertInvalid("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v3) > (1, 0)");
1:     }
1: 
1:     /**
1:      * Test for CASSANDRA-8062,
1:      * migrated from cql_tests.py:TestCQL.test_v2_protocol_IN_with_tuples()
1:      */
1:     @Test
1:     public void testSelectInStatementWithTuples() throws Throwable
1:     {   // TODO - the dtest was using v2 protocol
1:         createTable("CREATE TABLE %s (k int, c1 int, c2 text, PRIMARY KEY (k, c1, c2))");
1:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'a')");
1:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'b')");
1:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'c')");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND (c1, c2) IN ((0, 'b'), (0, 'c'))"),
1:                    row(0, 0, "b"),
1:                    row(0, 0, "c"));
1:     }
1: }
commit:f797bfa
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.cql3.validation.entities;
0: 
0: import org.junit.Test;
0: 
0: import org.apache.cassandra.cql3.CQLTester;
0: 
0: public class TupleTypeTest extends CQLTester
0: {
0:     @Test
0:     public void testTuplePutAndGet() throws Throwable
0:     {
0:         String[] valueTypes = {"frozen<tuple<int, text, double>>", "tuple<int, text, double>"};
0:         for (String valueType : valueTypes)
0:         {
0:             createTable("CREATE TABLE %s (k int PRIMARY KEY, t " + valueType + ")");
0: 
0:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, "foo", 3.4));
0:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 1, tuple(8, "bar", 0.2));
0:             assertAllRows(row(1, tuple(8, "bar", 0.2)),
0:                           row(0, tuple(3, "foo", 3.4))
0:             );
0: 
0:             // nulls
0:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 2, tuple(5, null, 3.4));
0:             assertRows(execute("SELECT * FROM %s WHERE k=?", 2),
0:                        row(2, tuple(5, null, 3.4))
0:             );
0: 
0:             // incomplete tuple
0:             execute("INSERT INTO %s (k, t) VALUES (?, ?)", 3, tuple(5, "bar"));
0:             assertRows(execute("SELECT * FROM %s WHERE k=?", 3),
0:                        row(3, tuple(5, "bar"))
0:             );
0:         }
0:     }
0: 
0:     @Test
0:     public void testNestedTuple() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<int, tuple<text, double>>>)");
0: 
0:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, tuple("foo", 3.4)));
0:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 1, tuple(8, tuple("bar", 0.2)));
0:         assertAllRows(
0:             row(1, tuple(8, tuple("bar", 0.2))),
0:             row(0, tuple(3, tuple("foo", 3.4)))
0:         );
0:     }
0: 
0:     @Test
0:     public void testTupleInPartitionKey() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (t frozen<tuple<int, text>> PRIMARY KEY)");
0: 
0:         execute("INSERT INTO %s (t) VALUES (?)", tuple(3, "foo"));
0:         assertAllRows(row(tuple(3, "foo")));
0:     }
0: 
0:     @Test
0:     public void testTupleInClusteringKey() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int, t frozen<tuple<int, text>>, PRIMARY KEY (k, t))");
0: 
0:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(5, "bar"));
0:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(3, "foo"));
0:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(6, "bar"));
0:         execute("INSERT INTO %s (k, t) VALUES (?, ?)", 0, tuple(5, "foo"));
0: 
0:         assertAllRows(
0:             row(0, tuple(3, "foo")),
0:             row(0, tuple(5, "bar")),
0:             row(0, tuple(5, "foo")),
0:             row(0, tuple(6, "bar"))
0:         );
0:     }
0: 
0:     @Test
0:     public void testInvalidQueries() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, t frozen<tuple<int, text, double>>)");
0: 
0:         assertInvalidSyntax("INSERT INTO %s (k, t) VALUES (0, ())");
0:         assertInvalid("INSERT INTO %s (k, t) VALUES (0, (2, 'foo', 3.1, 'bar'))");
0:     }
0: 
0:     /**
0:      * Test the syntax introduced by #4851,
0:      * migrated from cql_tests.py:TestCQL.tuple_notation_test()
0:      */
0:     @Test
0:     public void testTupleNotation() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int, v1 int, v2 int, v3 int, PRIMARY KEY (k, v1, v2, v3))");
0:         for (int i = 0; i < 2; i++)
0:             for (int j = 0; j < 2; j++)
0:                 for (int k = 0; k < 2; k++)
0:                     execute("INSERT INTO %s (k, v1, v2, v3) VALUES (0, ?, ?, ?)", i, j, k);
0: 
0:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0"),
0:                    row(0, 0, 0),
0:                    row(0, 0, 1),
0:                    row(0, 1, 0),
0:                    row(0, 1, 1),
0:                    row(1, 0, 0),
0:                    row(1, 0, 1),
0:                    row(1, 1, 0),
0:                    row(1, 1, 1));
0: 
0:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2, v3) >= (1, 0, 1)"),
0:                    row(1, 0, 1),
0:                    row(1, 1, 0),
0:                    row(1, 1, 1));
0:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2) >= (1, 1)"),
0:                    row(1, 1, 0),
0:                    row(1, 1, 1));
0: 
0:         assertRows(execute("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v2) > (0, 1) AND (v1, v2, v3) <= (1, 1, 0)"),
0:                    row(1, 0, 0),
0:                    row(1, 0, 1),
0:                    row(1, 1, 0));
0: 
0:         assertInvalid("SELECT v1, v2, v3 FROM %s WHERE k = 0 AND (v1, v3) > (1, 0)");
0:     }
0: 
0:     /**
0:      * Test for CASSANDRA-8062,
0:      * migrated from cql_tests.py:TestCQL.test_v2_protocol_IN_with_tuples()
0:      */
0:     @Test
0:     public void testSelectInStatementWithTuples() throws Throwable
0:     {   // TODO - the dtest was using v2 protocol
0:         createTable("CREATE TABLE %s (k int, c1 int, c2 text, PRIMARY KEY (k, c1, c2))");
0:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'a')");
0:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'b')");
0:         execute("INSERT INTO %s (k, c1, c2) VALUES (0, 0, 'c')");
0: 
0:         assertRows(execute("SELECT * FROM %s WHERE k=0 AND (c1, c2) IN ((0, 'b'), (0, 'c'))"),
0:                    row(0, 0, "b"),
0:                    row(0, 0, "c"));
0:     }
0: }
============================================================================