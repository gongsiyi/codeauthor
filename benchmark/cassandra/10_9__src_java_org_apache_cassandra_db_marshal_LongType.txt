1:1aeca2b: /*
1:1aeca2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:1aeca2b:  * or more contributor license agreements.  See the NOTICE file
1:1aeca2b:  * distributed with this work for additional information
1:1aeca2b:  * regarding copyright ownership.  The ASF licenses this file
1:1aeca2b:  * to you under the Apache License, Version 2.0 (the
1:1aeca2b:  * "License"); you may not use this file except in compliance
1:1aeca2b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1aeca2b:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
5:835669a: 
1:986cee6: import java.nio.ByteBuffer;
1:835669a: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:a67f779: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.LongSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:e7a385a: import org.apache.cassandra.utils.ByteBufferUtil;
1:835669a: 
1:05d8ffd: public class LongType extends AbstractType<Long>
4:835669a: {
1:242b717:     public static final LongType instance = new LongType();
1:e9c6742: 
1:07594ee:     LongType() {super(ComparisonType.CUSTOM);} // singleton
1:a67f779: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:4df4f79:     {
1:4df4f79:         return true;
1:4df4f79:     }
1:a67f779: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:a67f779:     {
1:9ec7b80:         return compareLongs(o1, o2);
1:9ec7b80:     }
1:9ec7b80: 
1:9ec7b80:     public static int compareLongs(ByteBuffer o1, ByteBuffer o2)
1:9ec7b80:     {
1:acf1b18:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:acf1b18:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
1:a67f779: 
1:edf16c9:         int diff = o1.get(o1.position()) - o2.get(o2.position());
1:477deb3:         if (diff != 0)
1:477deb3:             return diff;
1:07cdfd0: 
1:187761a:         return ByteBufferUtil.compareUnsigned(o1, o2);
1:a67f779:     }
1:07cdfd0: 
1:4417e22:     public ByteBuffer fromString(String source) throws MarshalException
1:835669a:     {
1:99661fb:         // Return an empty ByteBuffer for an empty string.
1:99661fb:         if (source.isEmpty())
1:456c989:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:2fd3268: 
1:ad38251:         long longType;
1:2fd3268: 
1:2395fb3:         try
1:835669a:         {
1:fa74f2f:             longType = Long.parseLong(source);
4:835669a:         }
1:ad38251:         catch (Exception e)
1:835669a:         {
1:c7b02d1:             throw new MarshalException(String.format("Unable to make long from '%s'", source), e);
1:835669a:         }
1:4df4f79: 
1:2d95cb4:         return decompose(longType);
1:835669a:     }
1:99661fb: 
1:e9c6742:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             if (parsed instanceof String)
1:c7b02d1:                 return new Constants.Value(fromString((String) parsed));
1:c7b02d1: 
1:c7b02d1:             Number parsedNumber = (Number) parsed;
1:c7b02d1:             if (!(parsedNumber instanceof Integer || parsedNumber instanceof Long))
1:c7b02d1:                 throw new MarshalException(String.format("Expected a bigint value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1: 
1:c7b02d1:             return new Constants.Value(getSerializer().serialize(parsedNumber.longValue()));
1:c7b02d1:         }
1:c7b02d1:         catch (ClassCastException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected a bigint value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return getSerializer().deserialize(buffer).toString();
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:9da742d:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:9da742d:     {
1:9da742d:         return this == otherType || otherType == DateType.instance || otherType == TimestampType.instance;
1:9da742d:     }
1:9da742d: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.BIGINT;
1:a67f779:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<Long> getSerializer()
1:e9c6742:     {
1:e9c6742:         return LongSerializer.instance;
1:e9c6742:     }
1:acf1b18: 
1:a991b64:     @Override
1:a991b64:     protected int valueLengthIfFixed()
1:a991b64:     {
1:a991b64:         return 8;
1:a991b64:     }
1:835669a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     LongType() {super(ComparisonType.CUSTOM);} // singleton
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected int valueLengthIfFixed()
1:     {
1:         return 8;
1:     }
commit:edf16c9
/////////////////////////////////////////////////////////////////////////
1:         int diff = o1.get(o1.position()) - o2.get(o2.position());
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.LongSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<Long> getSerializer()
commit:9ec7b80
/////////////////////////////////////////////////////////////////////////
1:         return compareLongs(o1, o2);
1:     }
1: 
1:     public static int compareLongs(ByteBuffer o1, ByteBuffer o2)
1:     {
/////////////////////////////////////////////////////////////////////////
0:         int diff = o1.get(o1.position() + o1.arrayOffset()) - o2.get(o2.position() + o2.arrayOffset());
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.LongSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         return LongSerializer.instance.serialize(bytes);
0:         return LongSerializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         return LongSerializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     @Override
0:     public AbstractSerializer<Long> asComposer()
1:     {
1:         return LongSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.Term;
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.INTEGER);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.BIGINT;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return true;
1:     }
1: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
0: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:             throw new MarshalException(String.format("Unable to make long from '%s'", source), e);
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             if (parsed instanceof String)
1:                 return new Constants.Value(fromString((String) parsed));
1: 
1:             Number parsedNumber = (Number) parsed;
1:             if (!(parsedNumber instanceof Integer || parsedNumber instanceof Long))
1:                 throw new MarshalException(String.format("Expected a bigint value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1: 
1:             return new Constants.Value(getSerializer().serialize(parsedNumber.longValue()));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Expected a bigint value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return getSerializer().deserialize(buffer).toString();
1:     }
1: 
1:     @Override
commit:9dcdb8b
commit:9da742d
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:     {
1:         return this == otherType || otherType == DateType.instance || otherType == TimestampType.instance;
1:     }
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
1:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
/////////////////////////////////////////////////////////////////////////
1: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:         return JdbcLong.instance.compose(bytes);
0:         return JdbcLong.instance.decompose(value);
commit:2395fb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.term.LongTerm;
/////////////////////////////////////////////////////////////////////////
0:         return LongTerm.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
1:         try
0:             return LongTerm.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.term.MarshalException e)
0:             throw new MarshalException(e.getMessage());
0:         return LongTerm.instance.toString(l);
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
commit:99661fb
/////////////////////////////////////////////////////////////////////////
1:         // Return an empty ByteBuffer for an empty string.
1:         if (source.isEmpty())
0:             return ByteBuffer.allocate(0);
1:         
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9404c65
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.JdbcLong;
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.toLong(bytes);
/////////////////////////////////////////////////////////////////////////
0:             return JdbcLong.instance.getString(bytes);
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.LongTerm;
/////////////////////////////////////////////////////////////////////////
0:         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:835669a
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isSigned()
1:     {
0:         return true;
1:     }
1: 
0:     public boolean isCaseSensitive()
1:     {
0:         return false;
1:     }
1: 
0:     public boolean isCurrency()
1:     {
0:         return false;
1:     }
1: 
0:     public int getPrecision(Long obj)
1:     {
0:         return obj.toString().length();
1:     }
1: 
0:     public int getScale(Long obj)
1:     {
0:         return 0;
1:     }
1: 
0:     public int getJdbcType()
1:     {
0:         return Types.INTEGER;
1:     }
1: 
0:     public boolean needsQuotes()
1:     {
0:         return false;
1:     }
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer decompose(Long value)
0:     {
0:         return ByteBufferUtil.bytes(value);
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:         return decompose(longType);
commit:456c989
/////////////////////////////////////////////////////////////////////////
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
0: 
commit:154eec9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.bytes(longType);
commit:d36ec10
/////////////////////////////////////////////////////////////////////////
0:         return String.valueOf(bytes.getLong(bytes.position()));
commit:fa74f2f
/////////////////////////////////////////////////////////////////////////
1:             longType = Long.parseLong(source);
commit:ad38251
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public ByteBuffer fromString(String source)
0:     {
1:         long longType;
0: 
0:         try
0:         {
0:             longType = Long.valueOf(source);
0:         }
1:         catch (Exception e)
0:         {
0:             throw new RuntimeException("'" + source + "' could not be translated into a LongType.");
0:         }
0: 
0:         return FBUtilities.toByteBuffer(longType);
0:     }
commit:187761a
/////////////////////////////////////////////////////////////////////////
1:         return ByteBufferUtil.compareUnsigned(o1, o2);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
0:         if (o1.remaining() == 0)
0:             return o2.remaining() == 0 ? 0 : -1;
0:         if (o2.remaining() == 0)
0:         int diff = o1.array()[o1.position()+o1.arrayOffset()] - o2.array()[o2.position()+o2.arrayOffset()];
0:         
0:        
0:         return ByteBufferUtil.compare(o1, o2);
0:     public String getString(ByteBuffer bytes)
0:         if (bytes.remaining() == 0)
0:         if (bytes.remaining() != 8)
0:             throw new MarshalException("A long is exactly 8 bytes: "+bytes.remaining());
0:         
0:         
0:         return String.valueOf(bytes.getLong(bytes.position()+bytes.arrayOffset()));
commit:477deb3
/////////////////////////////////////////////////////////////////////////
0: 
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         int diff = o1[0] - o2[0];
1:         if (diff != 0)
1:             return diff;
0:         return FBUtilities.compareByteArrays(o1, o2);
commit:242b717
/////////////////////////////////////////////////////////////////////////
1:     public static final LongType instance = new LongType();
0: 
0:     LongType() {} // singleton
0: 
commit:568933f
/////////////////////////////////////////////////////////////////////////
0:         long L1 = ByteBuffer.wrap(o1).getLong();
0:         long L2 = ByteBuffer.wrap(o2).getLong();
commit:bb464c1
/////////////////////////////////////////////////////////////////////////
0:         if (bytes.length == 0)
0:         {
0:             return "";
0:         }
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:88b0ee7
/////////////////////////////////////////////////////////////////////////
0:         return Long.valueOf(L1).compareTo(Long.valueOf(L2));
commit:7bd9590
/////////////////////////////////////////////////////////////////////////
0:         if (bytes.length != 8)
0:         {
0:             throw new MarshalException("A long is exactly 8 bytes");
0:         }
commit:e3aef8e
/////////////////////////////////////////////////////////////////////////
0:             return 1;
commit:e425474
/////////////////////////////////////////////////////////////////////////
0:         // TODO rm hack to support the "i'm going to pretend [] is an index entry if I didn't actually index anything" hack
0:         if (o1.length == 0)
0:         {
0:             return o2.length == 0 ? 0 : -1;
0:         }
0:         if (o2.length == 0)
0:         {
0:             return -1;
0:         }
0: 
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
0: 
1: import java.nio.ByteBuffer;
0: import java.nio.ByteOrder;
0: 
0: public class LongType extends AbstractType
0: {
0:     public int compare(byte[] o1, byte[] o2)
0:     {
0:         long L1 = ByteBuffer.wrap(o1).order(ByteOrder.LITTLE_ENDIAN).getLong();
0:         long L2 = ByteBuffer.wrap(o2).order(ByteOrder.LITTLE_ENDIAN).getLong();
0:         return new Long(L1).compareTo(L2);
0:     }
0: 
0:     public String getString(byte[] bytes)
0:     {
0:         return String.valueOf(ByteBuffer.wrap(bytes).getLong());
0:     }
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
0:     public String toString(Long l)
0:     {
0:         return l.toString();
0:     }
0: 
commit:d4c800b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Class<Long> getType()
0:     {
0:         return Long.class;
0:     }
commit:4417e22
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer fromString(String source) throws MarshalException
/////////////////////////////////////////////////////////////////////////
0:             throw new MarshalException(String.format("unable to make long from '%s'", source), e);
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
1: public class LongType extends AbstractType<Long>
0:     public Long compose(ByteBuffer bytes)
0:     {
0:         return ByteBufferUtil.toLong(bytes);
0:     }
0: 
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         if (bytes.remaining() != 8 && bytes.remaining() != 0)
0:             throw new MarshalException(String.format("Expected 8 or 0 byte long (%d)", bytes.remaining()));
0:     }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
0:         int diff = o1.get(o1.position()) - o2.get(o2.position());
============================================================================