1:2e3727e: /*
1:2e3727e:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e3727e:  * or more contributor license agreements.  See the NOTICE file
1:2e3727e:  * distributed with this work for additional information
1:2e3727e:  * regarding copyright ownership.  The ASF licenses this file
1:2e3727e:  * to you under the Apache License, Version 2.0 (the
1:2e3727e:  * "License"); you may not use this file except in compliance
1:2e3727e:  * with the License.  You may obtain a copy of the License at
1:2e3727e:  *
1:2e3727e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e3727e:  *
1:2e3727e:  * Unless required by applicable law or agreed to in writing, software
1:2e3727e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e3727e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e3727e:  * See the License for the specific language governing permissions and
1:2e3727e:  * limitations under the License.
1:2e3727e:  */
1:2e3727e: package org.apache.cassandra.cql3;
2:2e3727e: 
1:2e3727e: import java.util.ArrayList;
1:2e3727e: import java.util.Collection;
1:2e3727e: import java.util.Collections;
1:2e3727e: import java.util.List;
1:2e3727e: import java.util.stream.Collectors;
1:2e3727e: import java.util.stream.Stream;
1:2e3727e: 
1:2e3727e: import org.apache.cassandra.config.ColumnDefinition;
1:2e3727e: import org.apache.cassandra.cql3.functions.Function;
1:2e3727e: import org.apache.cassandra.cql3.statements.CQL3CasRequest;
1:2e3727e: import org.apache.cassandra.db.Clustering;
1:2e3727e: 
1:2e3727e: /**
1:2e3727e:  * A set of <code>ColumnCondition</code>s.
1:2e3727e:  *
1:2e3727e:  */
1:2e3727e: public final class ColumnConditions extends AbstractConditions
1:2e3727e: {
1:2e3727e:     /**
1:2e3727e:      * The conditions on regular columns.
1:2e3727e:      */
1:2e3727e:     private final List<ColumnCondition> columnConditions;
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * The conditions on static columns
1:2e3727e:      */
1:2e3727e:     private final List<ColumnCondition> staticConditions;
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Creates a new <code>ColumnConditions</code> instance for the specified builder.
1:2e3727e:      */
1:2e3727e:     private ColumnConditions(Builder builder)
1:2e3727e:     {
1:2e3727e:         this.columnConditions = builder.columnConditions;
1:2e3727e:         this.staticConditions = builder.staticConditions;
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     @Override
1:2e3727e:     public boolean appliesToStaticColumns()
1:2e3727e:     {
1:2e3727e:         return !staticConditions.isEmpty();
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     @Override
1:2e3727e:     public boolean appliesToRegularColumns()
1:2e3727e:     {
1:2e3727e:         return !columnConditions.isEmpty();
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     @Override
1:2e3727e:     public Collection<ColumnDefinition> getColumns()
1:2e3727e:     {
2:2e3727e:         return Stream.concat(columnConditions.stream(), staticConditions.stream())
1:2e3727e:                      .map(e -> e.column)
2:2e3727e:                      .collect(Collectors.toList());
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     @Override
1:2e3727e:     public boolean isEmpty()
1:2e3727e:     {
1:2e3727e:         return columnConditions.isEmpty() && staticConditions.isEmpty();
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Adds the conditions to the specified CAS request.
1:2e3727e:      *
1:2e3727e:      * @param request the request
1:2e3727e:      * @param clustering the clustering prefix
1:2e3727e:      * @param options the query options
1:2e3727e:      */
1:2e3727e:     public void addConditionsTo(CQL3CasRequest request,
1:2e3727e:                                 Clustering clustering,
1:2e3727e:                                 QueryOptions options)
1:2e3727e:     {
1:2e3727e:         if (!columnConditions.isEmpty())
1:2e3727e:             request.addConditions(clustering, columnConditions, options);
1:2e3727e:         if (!staticConditions.isEmpty())
1:2e3727e:             request.addConditions(Clustering.STATIC_CLUSTERING, staticConditions, options);
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     @Override
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:2e3727e:     {
1:89464ea:         columnConditions.forEach(p -> p.addFunctionsTo(functions));
1:89464ea:         staticConditions.forEach(p -> p.addFunctionsTo(functions));
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Creates a new <code>Builder</code> for <code>ColumnConditions</code>.
1:2e3727e:      * @return a new <code>Builder</code> for <code>ColumnConditions</code>
1:2e3727e:      */
1:2e3727e:     public static Builder newBuilder()
1:2e3727e:     {
1:2e3727e:         return new Builder();
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * A <code>Builder</code> for <code>ColumnConditions</code>.
1:2e3727e:      *
1:2e3727e:      */
1:2e3727e:     public static final class Builder
1:2e3727e:     {
1:2e3727e:         /**
1:2e3727e:          * The conditions on regular columns.
1:2e3727e:          */
1:2e3727e:         private List<ColumnCondition> columnConditions = Collections.emptyList();
1:2e3727e: 
1:2e3727e:         /**
1:2e3727e:          * The conditions on static columns
1:2e3727e:          */
1:2e3727e:         private List<ColumnCondition> staticConditions = Collections.emptyList();
1:2e3727e: 
1:2e3727e:         /**
1:2e3727e:          * Adds the specified <code>ColumnCondition</code> to this set of conditions.
1:2e3727e:          * @param condition the condition to add
1:2e3727e:          */
1:2e3727e:         public Builder add(ColumnCondition condition)
1:2e3727e:         {
1:2e3727e:             List<ColumnCondition> conds = null;
1:2e3727e:             if (condition.column.isStatic())
1:2e3727e:             {
1:2e3727e:                 if (staticConditions.isEmpty())
1:2e3727e:                     staticConditions = new ArrayList<>();
1:2e3727e:                 conds = staticConditions;
1:2e3727e:             }
1:2e3727e:             else
1:2e3727e:             {
1:2e3727e:                 if (columnConditions.isEmpty())
1:2e3727e:                     columnConditions = new ArrayList<>();
1:2e3727e:                 conds = columnConditions;
1:2e3727e:             }
1:2e3727e:             conds.add(condition);
1:2e3727e:             return this;
1:2e3727e:         }
1:2e3727e: 
1:2e3727e:         public ColumnConditions build()
1:2e3727e:         {
1:2e3727e:             return new ColumnConditions(this);
1:2e3727e:         }
1:2e3727e: 
1:2e3727e:         private Builder()
1:2e3727e:         {
1:2e3727e:         }
1:2e3727e:     }
1:2e3727e: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:89464ea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions)
1:         columnConditions.forEach(p -> p.addFunctionsTo(functions));
1:         staticConditions.forEach(p -> p.addFunctionsTo(functions));
author:blerer
-------------------------------------------------------------------------------
commit:2e3727e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.stream.Collectors;
1: import java.util.stream.Stream;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.cql3.functions.Function;
1: import org.apache.cassandra.cql3.statements.CQL3CasRequest;
1: import org.apache.cassandra.db.Clustering;
1: 
0: import static java.util.stream.StreamSupport.stream;
1: 
1: /**
1:  * A set of <code>ColumnCondition</code>s.
1:  *
1:  */
1: public final class ColumnConditions extends AbstractConditions
1: {
1:     /**
1:      * The conditions on regular columns.
1:      */
1:     private final List<ColumnCondition> columnConditions;
1: 
1:     /**
1:      * The conditions on static columns
1:      */
1:     private final List<ColumnCondition> staticConditions;
1: 
1:     /**
1:      * Creates a new <code>ColumnConditions</code> instance for the specified builder.
1:      */
1:     private ColumnConditions(Builder builder)
1:     {
1:         this.columnConditions = builder.columnConditions;
1:         this.staticConditions = builder.staticConditions;
1:     }
1: 
1:     @Override
1:     public boolean appliesToStaticColumns()
1:     {
1:         return !staticConditions.isEmpty();
1:     }
1: 
1:     @Override
1:     public boolean appliesToRegularColumns()
1:     {
1:         return !columnConditions.isEmpty();
1:     }
1: 
1:     @Override
1:     public Collection<ColumnDefinition> getColumns()
1:     {
1:         return Stream.concat(columnConditions.stream(), staticConditions.stream())
1:                      .map(e -> e.column)
1:                      .collect(Collectors.toList());
1:     }
1: 
1:     @Override
1:     public boolean isEmpty()
1:     {
1:         return columnConditions.isEmpty() && staticConditions.isEmpty();
1:     }
1: 
1:     /**
1:      * Adds the conditions to the specified CAS request.
1:      *
1:      * @param request the request
1:      * @param clustering the clustering prefix
1:      * @param options the query options
1:      */
1:     public void addConditionsTo(CQL3CasRequest request,
1:                                 Clustering clustering,
1:                                 QueryOptions options)
1:     {
1:         if (!columnConditions.isEmpty())
1:             request.addConditions(clustering, columnConditions, options);
1:         if (!staticConditions.isEmpty())
1:             request.addConditions(Clustering.STATIC_CLUSTERING, staticConditions, options);
1:     }
1: 
1:     @Override
0:     public Iterable<Function> getFunctions()
1:     {
1:         return Stream.concat(columnConditions.stream(), staticConditions.stream())
0:                      .flatMap(e -> stream(e.getFunctions().spliterator(), false))
1:                      .collect(Collectors.toList());
1:     }
1: 
1:     /**
1:      * Creates a new <code>Builder</code> for <code>ColumnConditions</code>.
1:      * @return a new <code>Builder</code> for <code>ColumnConditions</code>
1:      */
1:     public static Builder newBuilder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     /**
1:      * A <code>Builder</code> for <code>ColumnConditions</code>.
1:      *
1:      */
1:     public static final class Builder
1:     {
1:         /**
1:          * The conditions on regular columns.
1:          */
1:         private List<ColumnCondition> columnConditions = Collections.emptyList();
1: 
1:         /**
1:          * The conditions on static columns
1:          */
1:         private List<ColumnCondition> staticConditions = Collections.emptyList();
1: 
1:         /**
1:          * Adds the specified <code>ColumnCondition</code> to this set of conditions.
1:          * @param condition the condition to add
1:          */
1:         public Builder add(ColumnCondition condition)
1:         {
1:             List<ColumnCondition> conds = null;
1:             if (condition.column.isStatic())
1:             {
1:                 if (staticConditions.isEmpty())
1:                     staticConditions = new ArrayList<>();
1:                 conds = staticConditions;
1:             }
1:             else
1:             {
1:                 if (columnConditions.isEmpty())
1:                     columnConditions = new ArrayList<>();
1:                 conds = columnConditions;
1:             }
1:             conds.add(condition);
1:             return this;
1:         }
1: 
1:         public ColumnConditions build()
1:         {
1:             return new ColumnConditions(this);
1:         }
1: 
1:         private Builder()
1:         {
1:         }
1:     }
1: }
============================================================================