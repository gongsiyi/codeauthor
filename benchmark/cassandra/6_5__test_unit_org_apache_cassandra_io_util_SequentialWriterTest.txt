1:8704006: /*
1:8704006: * Licensed to the Apache Software Foundation (ASF) under one
1:8704006: * or more contributor license agreements.  See the NOTICE file
1:8704006: * distributed with this work for additional information
1:8704006: * regarding copyright ownership.  The ASF licenses this file
1:8704006: * to you under the Apache License, Version 2.0 (the
1:8704006: * "License"); you may not use this file except in compliance
1:8704006: * with the License.  You may obtain a copy of the License at
1:8704006: *
1:8704006: *    http://www.apache.org/licenses/LICENSE-2.0
1:8704006: *
1:8704006: * Unless required by applicable law or agreed to in writing,
1:8704006: * software distributed under the License is distributed on an
1:8704006: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8704006: * KIND, either express or implied.  See the License for the
1:8704006: * specific language governing permissions and limitations
1:8704006: * under the License.
1:8704006: */
1:8704006: package org.apache.cassandra.io.util;
1:8704006: 
1:a3fc425: import java.io.DataOutputStream;
1:8704006: import java.io.File;
1:8704006: import java.io.IOException;
1:8704006: import java.util.ArrayList;
1:8704006: import java.util.Arrays;
1:8704006: import java.util.List;
1:8704006: import java.util.concurrent.ThreadLocalRandom;
1:8704006: 
1:a3fc425: import com.google.common.io.Files;
1:8704006: import org.junit.After;
1:9797511: import org.junit.BeforeClass;
1:a3fc425: import org.junit.Test;
1:8704006: 
1:8704006: import junit.framework.Assert;
1:3adfd15: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:3adfd15: import org.apache.cassandra.io.compress.BufferType;
1:8704006: import org.apache.cassandra.utils.concurrent.AbstractTransactionalTest;
1:8704006: 
1:8704006: import static org.apache.commons.io.FileUtils.*;
1:fb22109: import static org.junit.Assert.assertEquals;
1:8704006: 
1:8704006: public class SequentialWriterTest extends AbstractTransactionalTest
1:8704006: {
1:8704006: 
1:8704006:     private final List<TestableSW> writers = new ArrayList<>();
1:8704006: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:8704006:     @After
1:8704006:     public void cleanup()
1:8704006:     {
1:8704006:         for (TestableSW sw : writers)
1:8704006:             sw.file.delete();
1:8704006:         writers.clear();
1:8704006:     }
1:8704006: 
1:8704006:     protected TestableTransaction newTest() throws IOException
1:8704006:     {
1:8704006:         TestableSW sw = new TestableSW();
1:8704006:         writers.add(sw);
1:8704006:         return sw;
1:8704006:     }
1:8704006: 
1:8704006:     protected static class TestableSW extends TestableTransaction
1:8704006:     {
1:8704006:         protected static final int BUFFER_SIZE = 8 << 10;
1:8704006:         protected final File file;
1:8704006:         protected final SequentialWriter writer;
1:8704006:         protected final byte[] fullContents, partialContents;
1:8704006: 
1:8704006:         protected TestableSW() throws IOException
1:8704006:         {
1:8704006:             this(tempFile("sequentialwriter"));
1:8704006:         }
1:8704006: 
1:8704006:         protected TestableSW(File file) throws IOException
1:8704006:         {
1:fb22109:             this(file, new SequentialWriter(file, SequentialWriterOption.newBuilder()
1:fb22109:                                                                         .bufferSize(8 << 10)
1:fb22109:                                                                         .bufferType(BufferType.OFF_HEAP)
1:fb22109:                                                                         .build()));
1:8704006:         }
1:8704006: 
1:8704006:         protected TestableSW(File file, SequentialWriter sw) throws IOException
1:8704006:         {
1:8704006:             super(sw);
1:8704006:             this.file = file;
1:8704006:             this.writer = sw;
1:8704006:             fullContents = new byte[BUFFER_SIZE + BUFFER_SIZE / 2];
1:8704006:             ThreadLocalRandom.current().nextBytes(fullContents);
1:8704006:             partialContents = Arrays.copyOf(fullContents, BUFFER_SIZE);
1:8704006:             sw.write(fullContents);
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertInProgress() throws Exception
1:8704006:         {
1:8704006:             Assert.assertTrue(file.exists());
1:8704006:             byte[] bytes = readFileToByteArray(file);
1:8704006:             Assert.assertTrue(Arrays.equals(partialContents, bytes));
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertPrepared() throws Exception
1:8704006:         {
1:8704006:             Assert.assertTrue(file.exists());
1:8704006:             byte[] bytes = readFileToByteArray(file);
1:8704006:             Assert.assertTrue(Arrays.equals(fullContents, bytes));
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertAborted() throws Exception
1:8704006:         {
1:8704006:             Assert.assertFalse(writer.isOpen());
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertCommitted() throws Exception
1:8704006:         {
1:8704006:             assertPrepared();
1:8704006:             Assert.assertFalse(writer.isOpen());
1:8704006:         }
1:8704006: 
1:8704006:         protected static File tempFile(String prefix)
1:8704006:         {
1:8704006:             File file = FileUtils.createTempFile(prefix, "test");
1:8704006:             file.delete();
1:8704006:             return file;
1:8704006:         }
1:8704006:     }
1:8704006: 
1:fb22109:     @Test
1:fb22109:     public void resetAndTruncateTest()
1:fb22109:     {
1:fb22109:         File tempFile = new File(Files.createTempDir(), "reset.txt");
1:fb22109:         final int bufferSize = 48;
1:fb22109:         final int writeSize = 64;
1:fb22109:         byte[] toWrite = new byte[writeSize];
1:fb22109:         SequentialWriterOption option = SequentialWriterOption.newBuilder().bufferSize(bufferSize).build();
1:fb22109:         try (SequentialWriter writer = new SequentialWriter(tempFile, option))
1:fb22109:         {
1:fb22109:             // write bytes greather than buffer
1:fb22109:             writer.write(toWrite);
1:fb22109:             assertEquals(bufferSize, writer.getLastFlushOffset());
1:fb22109:             assertEquals(writeSize, writer.position());
1:fb22109:             // mark thi position
1:fb22109:             DataPosition pos = writer.mark();
1:fb22109:             // write another
1:fb22109:             writer.write(toWrite);
1:fb22109:             // another buffer should be flushed
1:fb22109:             assertEquals(bufferSize * 2, writer.getLastFlushOffset());
1:fb22109:             assertEquals(writeSize * 2, writer.position());
1:fb22109:             // reset writer
1:fb22109:             writer.resetAndTruncate(pos);
1:fb22109:             // current position and flushed size should be changed
1:fb22109:             assertEquals(writeSize, writer.position());
1:fb22109:             assertEquals(writeSize, writer.getLastFlushOffset());
1:fb22109:             // write another byte less than buffer
1:fb22109:             writer.write(new byte[]{0});
1:fb22109:             assertEquals(writeSize + 1, writer.position());
1:fb22109:             // flush off set should not be increase
1:fb22109:             assertEquals(writeSize, writer.getLastFlushOffset());
1:fb22109:             writer.finish();
1:fb22109:         }
1:fb22109:         catch (IOException e)
1:fb22109:         {
1:fb22109:             Assert.fail();
1:fb22109:         }
1:fb22109:         // final file size check
1:fb22109:         assertEquals(writeSize + 1, tempFile.length());
1:fb22109:     }
1:fb22109: 
1:a3fc425:     /**
1:a3fc425:      * Tests that the output stream exposed by SequentialWriter behaves as expected
1:a3fc425:      */
1:a3fc425:     @Test
1:a3fc425:     public void outputStream()
1:a3fc425:     {
1:a3fc425:         File tempFile = new File(Files.createTempDir(), "test.txt");
1:a3fc425:         Assert.assertFalse("temp file shouldn't exist yet", tempFile.exists());
1:a3fc425: 
1:fb22109:         SequentialWriterOption option = SequentialWriterOption.newBuilder().finishOnClose(true).build();
1:fb22109:         try (DataOutputStream os = new DataOutputStream(new SequentialWriter(tempFile, option)))
1:a3fc425:         {
1:a3fc425:             os.writeUTF("123");
1:a3fc425:         }
1:a3fc425:         catch (IOException e)
1:a3fc425:         {
1:a3fc425:             Assert.fail();
1:a3fc425:         }
1:a3fc425: 
1:a3fc425:         Assert.assertTrue("temp file should exist", tempFile.exists());
1:a3fc425:     }
1:a3fc425: 
1:8704006: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:fb22109
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:             this(file, new SequentialWriter(file, SequentialWriterOption.newBuilder()
1:                                                                         .bufferSize(8 << 10)
1:                                                                         .bufferType(BufferType.OFF_HEAP)
1:                                                                         .build()));
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void resetAndTruncateTest()
1:     {
1:         File tempFile = new File(Files.createTempDir(), "reset.txt");
1:         final int bufferSize = 48;
1:         final int writeSize = 64;
1:         byte[] toWrite = new byte[writeSize];
1:         SequentialWriterOption option = SequentialWriterOption.newBuilder().bufferSize(bufferSize).build();
1:         try (SequentialWriter writer = new SequentialWriter(tempFile, option))
1:         {
1:             // write bytes greather than buffer
1:             writer.write(toWrite);
1:             assertEquals(bufferSize, writer.getLastFlushOffset());
1:             assertEquals(writeSize, writer.position());
1:             // mark thi position
1:             DataPosition pos = writer.mark();
1:             // write another
1:             writer.write(toWrite);
1:             // another buffer should be flushed
1:             assertEquals(bufferSize * 2, writer.getLastFlushOffset());
1:             assertEquals(writeSize * 2, writer.position());
1:             // reset writer
1:             writer.resetAndTruncate(pos);
1:             // current position and flushed size should be changed
1:             assertEquals(writeSize, writer.position());
1:             assertEquals(writeSize, writer.getLastFlushOffset());
1:             // write another byte less than buffer
1:             writer.write(new byte[]{0});
1:             assertEquals(writeSize + 1, writer.position());
1:             // flush off set should not be increase
1:             assertEquals(writeSize, writer.getLastFlushOffset());
1:             writer.finish();
1:         }
1:         catch (IOException e)
1:         {
1:             Assert.fail();
1:         }
1:         // final file size check
1:         assertEquals(writeSize + 1, tempFile.length());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         SequentialWriterOption option = SequentialWriterOption.newBuilder().finishOnClose(true).build();
1:         try (DataOutputStream os = new DataOutputStream(new SequentialWriter(tempFile, option)))
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c163d0b
/////////////////////////////////////////////////////////////////////////
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:a3fc425
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataOutputStream;
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Files;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tests that the output stream exposed by SequentialWriter behaves as expected
1:      */
1:     @Test
1:     public void outputStream()
1:     {
1:         File tempFile = new File(Files.createTempDir(), "test.txt");
1:         Assert.assertFalse("temp file shouldn't exist yet", tempFile.exists());
1: 
0:         try (DataOutputStream os = new DataOutputStream(SequentialWriter.open(tempFile).finishOnClose()))
1:         {
1:             os.writeUTF("123");
1:         }
1:         catch (IOException e)
1:         {
1:             Assert.fail();
1:         }
1: 
1:         Assert.assertTrue("temp file should exist", tempFile.exists());
1:     }
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.cassandra.io.compress.BufferType;
/////////////////////////////////////////////////////////////////////////
0:             this(file, new SequentialWriter(file, 8 << 10, BufferType.OFF_HEAP));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8704006
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.After;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.utils.concurrent.AbstractTransactionalTest;
1: 
1: import static org.apache.commons.io.FileUtils.*;
1: 
1: public class SequentialWriterTest extends AbstractTransactionalTest
1: {
1: 
1:     private final List<TestableSW> writers = new ArrayList<>();
1: 
1:     @After
1:     public void cleanup()
1:     {
1:         for (TestableSW sw : writers)
1:             sw.file.delete();
1:         writers.clear();
1:     }
1: 
1:     protected TestableTransaction newTest() throws IOException
1:     {
1:         TestableSW sw = new TestableSW();
1:         writers.add(sw);
1:         return sw;
1:     }
1: 
1:     protected static class TestableSW extends TestableTransaction
1:     {
1:         protected static final int BUFFER_SIZE = 8 << 10;
1:         protected final File file;
1:         protected final SequentialWriter writer;
1:         protected final byte[] fullContents, partialContents;
1: 
1:         protected TestableSW() throws IOException
1:         {
1:             this(tempFile("sequentialwriter"));
1:         }
1: 
1:         protected TestableSW(File file) throws IOException
1:         {
0:             this(file, new SequentialWriter(file, 8 << 10, true));
1:         }
1: 
1:         protected TestableSW(File file, SequentialWriter sw) throws IOException
1:         {
1:             super(sw);
1:             this.file = file;
1:             this.writer = sw;
1:             fullContents = new byte[BUFFER_SIZE + BUFFER_SIZE / 2];
1:             ThreadLocalRandom.current().nextBytes(fullContents);
1:             partialContents = Arrays.copyOf(fullContents, BUFFER_SIZE);
1:             sw.write(fullContents);
1:         }
1: 
1:         protected void assertInProgress() throws Exception
1:         {
1:             Assert.assertTrue(file.exists());
1:             byte[] bytes = readFileToByteArray(file);
1:             Assert.assertTrue(Arrays.equals(partialContents, bytes));
1:         }
1: 
1:         protected void assertPrepared() throws Exception
1:         {
1:             Assert.assertTrue(file.exists());
1:             byte[] bytes = readFileToByteArray(file);
1:             Assert.assertTrue(Arrays.equals(fullContents, bytes));
1:         }
1: 
1:         protected void assertAborted() throws Exception
1:         {
1:             Assert.assertFalse(writer.isOpen());
0:             Assert.assertFalse(file.exists());
1:         }
1: 
1:         protected void assertCommitted() throws Exception
1:         {
1:             assertPrepared();
1:             Assert.assertFalse(writer.isOpen());
1:         }
1: 
1:         protected static File tempFile(String prefix)
1:         {
1:             File file = FileUtils.createTempFile(prefix, "test");
1:             file.delete();
1:             return file;
1:         }
1:     }
1: 
1: }
============================================================================