1:07cf56f: /*
1:b95a49c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b95a49c:  * or more contributor license agreements.  See the NOTICE file
1:b95a49c:  * distributed with this work for additional information
1:b95a49c:  * regarding copyright ownership.  The ASF licenses this file
1:b95a49c:  * to you under the Apache License, Version 2.0 (the
1:b95a49c:  * "License"); you may not use this file except in compliance
1:b95a49c:  * with the License.  You may obtain a copy of the License at
2:b95a49c:  *
1:b95a49c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b95a49c:  *
1:b95a49c:  * Unless required by applicable law or agreed to in writing, software
1:b95a49c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b95a49c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b95a49c:  * See the License for the specific language governing permissions and
1:b95a49c:  * limitations under the License.
1:b95a49c:  */
1:4b54b8a: package org.apache.cassandra.utils.memory;
1:4b54b8a: 
1:b95a49c: import java.nio.ByteBuffer;
1:4b54b8a: 
1:2457599: import org.apache.cassandra.db.Clustering;
1:e51f83b: import org.apache.cassandra.db.rows.BTreeRow;
1:2457599: import org.apache.cassandra.db.rows.Cell;
1:2457599: import org.apache.cassandra.db.rows.Row;
1:1a3b5db: import org.apache.cassandra.utils.ByteBufferUtil;
1:1a3b5db: 
1:4b54b8a: public abstract class AbstractAllocator
2:4b54b8a: {
2:b95a49c:     /**
1:b95a49c:      * Allocate a slice of the given length.
1:b95a49c:      */
1:b95a49c:     public ByteBuffer clone(ByteBuffer buffer)
1:4b54b8a:     {
1:b95a49c:         assert buffer != null;
1:4b54b8a:         if (buffer.remaining() == 0)
1:4b54b8a:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:b95a49c:         ByteBuffer cloned = allocate(buffer.remaining());
1:4b54b8a: 
1:b95a49c:         cloned.mark();
1:b95a49c:         cloned.put(buffer.duplicate());
1:b95a49c:         cloned.reset();
1:b95a49c:         return cloned;
1:2fd3268:     }
1:4b54b8a: 
1:b95a49c:     public abstract ByteBuffer allocate(int size);
1:2457599: 
1:aa57626:     public Row.Builder cloningBTreeRowBuilder()
1:2457599:     {
1:aa57626:         return new CloningBTreeRowBuilder(this);
1:2457599:     }
1:2457599: 
1:e51f83b:     private static class CloningBTreeRowBuilder extends BTreeRow.Builder
1:2457599:     {
1:2457599:         private final AbstractAllocator allocator;
1:2457599: 
1:aa57626:         private CloningBTreeRowBuilder(AbstractAllocator allocator)
1:2457599:         {
1:aa57626:             super(true);
1:2457599:             this.allocator = allocator;
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public void newRow(Clustering clustering)
1:2457599:         {
1:2457599:             super.newRow(clustering.copy(allocator));
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public void addCell(Cell cell)
1:2457599:         {
1:2457599:             super.addCell(cell.copy(allocator));
1:2457599:         }
1:2457599:     }
1:07cdfd0: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
commit:aa57626
/////////////////////////////////////////////////////////////////////////
1:     public Row.Builder cloningBTreeRowBuilder()
1:         return new CloningBTreeRowBuilder(this);
1:         private CloningBTreeRowBuilder(AbstractAllocator allocator)
1:             super(true);
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.BTreeRow;
/////////////////////////////////////////////////////////////////////////
0:     public Row.Builder cloningBTreeRowBuilder(Columns columns)
0:         return new CloningBTreeRowBuilder(columns, this);
1:     private static class CloningBTreeRowBuilder extends BTreeRow.Builder
0:         private CloningBTreeRowBuilder(Columns columns, AbstractAllocator allocator)
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.rows.BTreeBackedRow;
/////////////////////////////////////////////////////////////////////////
0:     private static class CloningArrayBackedRowBuilder extends BTreeBackedRow.Builder
0:             super(columns, true);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Clustering;
0: import org.apache.cassandra.db.Columns;
0: import org.apache.cassandra.db.rows.ArrayBackedRow;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.Row;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Row.Builder cloningArrayBackedRowBuilder(Columns columns)
1:     {
0:         return new CloningArrayBackedRowBuilder(columns, this);
1:     }
1: 
0:     private static class CloningArrayBackedRowBuilder extends ArrayBackedRow.SortedBuilder
1:     {
1:         private final AbstractAllocator allocator;
1: 
0:         private CloningArrayBackedRowBuilder(Columns columns, AbstractAllocator allocator)
1:         {
0:             super(columns);
1:             this.allocator = allocator;
1:         }
1: 
1:         @Override
1:         public void newRow(Clustering clustering)
1:         {
1:             super.newRow(clustering.copy(allocator));
1:         }
1: 
1:         @Override
1:         public void addCell(Cell cell)
1:         {
1:             super.addCell(cell.copy(allocator));
1:         }
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: }
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: }
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:1a3b5db
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.memory;
1: 
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: public abstract class AbstractAllocator
/////////////////////////////////////////////////////////////////////////
1:         if (buffer.remaining() == 0)
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
/////////////////////////////////////////////////////////////////////////
0:     //
0:     // only really applicable to Pooled subclasses, but we provide default implementations here
0:     //
1: 
0:     public long owns()
1:     {
0:         return 0;
0:     }
1: 
0:     public float ownershipRatio()
1:     {
0:         return 0;
0:     }
1: 
0:     public long reclaiming()
1:     {
0:         return 0;
0:     }
commit:16f19a7
/////////////////////////////////////////////////////////////////////////
commit:4b805ad
/////////////////////////////////////////////////////////////////////////
0: 
0:     public abstract long getMinimumSize();
0: 
0:     public abstract long getMaximumSize();
commit:b95a49c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Copyright 2011 The Apache Software Foundation
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.utils;
0: 
1: import java.nio.ByteBuffer;
0: 
0: public abstract class Allocator
0: {
1:     /**
1:      * Allocate a slice of the given length.
1:      */
1:     public ByteBuffer clone(ByteBuffer buffer)
0:     {
1:         assert buffer != null;
1:         ByteBuffer cloned = allocate(buffer.remaining());
0: 
1:         cloned.mark();
1:         cloned.put(buffer.duplicate());
1:         cloned.reset();
1:         return cloned;
0:     }
0: 
1:     public abstract ByteBuffer allocate(int size);
0: } 
============================================================================