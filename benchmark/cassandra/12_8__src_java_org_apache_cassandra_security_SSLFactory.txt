1:b1c2ce2: /*
1:b1c2ce2:  * Licensed to the Apache Software Foundation (ASF) under one
1:b1c2ce2:  * or more contributor license agreements.  See the NOTICE file
1:b1c2ce2:  * distributed with this work for additional information
1:b1c2ce2:  * regarding copyright ownership.  The ASF licenses this file
1:b1c2ce2:  * to you under the Apache License, Version 2.0 (the
1:b1c2ce2:  * "License"); you may not use this file except in compliance
1:b1c2ce2:  * with the License.  You may obtain a copy of the License at
3:b1c2ce2:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b1c2ce2:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:b1c2ce2:  */
1:07cf56f: package org.apache.cassandra.security;
1:07cf56f: 
7:b1c2ce2: 
1:b1c2ce2: import java.io.FileInputStream;
1:b1c2ce2: import java.io.IOException;
1:b1c2ce2: import java.net.InetAddress;
1:b1c2ce2: import java.net.InetSocketAddress;
1:b1c2ce2: import java.security.KeyStore;
1:11351e3: import java.security.cert.X509Certificate;
1:a24bd6c: import java.util.Arrays;
1:11351e3: import java.util.Date;
1:11351e3: import java.util.Enumeration;
1:a24bd6c: import java.util.List;
1:b1c2ce2: 
1:b1c2ce2: import javax.net.ssl.KeyManagerFactory;
1:b1c2ce2: import javax.net.ssl.SSLContext;
1:c9c9c42: import javax.net.ssl.SSLParameters;
1:b1c2ce2: import javax.net.ssl.SSLServerSocket;
1:b1c2ce2: import javax.net.ssl.SSLSocket;
1:119c726: import javax.net.ssl.TrustManager;
1:b1c2ce2: import javax.net.ssl.TrustManagerFactory;
1:b1c2ce2: 
1:b1c2ce2: import org.apache.cassandra.config.EncryptionOptions;
1:c41c0fe: import org.apache.cassandra.io.util.FileUtils;
1:3d5a595: import org.slf4j.Logger;
1:3d5a595: import org.slf4j.LoggerFactory;
1:3d5a595: 
1:a24bd6c: import com.google.common.base.Predicates;
1:a24bd6c: import com.google.common.collect.ImmutableSet;
1:a24bd6c: import com.google.common.collect.Iterables;
1:3d5a595: import com.google.common.collect.Sets;
1:b1c2ce2: 
1:b1c2ce2: /**
1:b1c2ce2:  * A Factory for providing and setting up Client and Server SSL wrapped
1:b1c2ce2:  * Socket and ServerSocket
1:b1c2ce2:  */
1:b1c2ce2: public final class SSLFactory
1:b1c2ce2: {
1:910b663:     private static final Logger logger = LoggerFactory.getLogger(SSLFactory.class);
1:11351e3:     private static boolean checkedExpiry = false;
1:11351e3: 
1:b1c2ce2:     public static SSLServerSocket getServerSocket(EncryptionOptions options, InetAddress address, int port) throws IOException
1:b1c2ce2:     {
1:119c726:         SSLContext ctx = createSSLContext(options, true);
1:b1c2ce2:         SSLServerSocket serverSocket = (SSLServerSocket)ctx.getServerSocketFactory().createServerSocket();
1:86a73d4:         try
1:86a73d4:         {
1:86a73d4:             serverSocket.setReuseAddress(true);
1:c9c9c42:             prepareSocket(serverSocket, options);
1:86a73d4:             serverSocket.bind(new InetSocketAddress(address, port), 500);
1:86a73d4:             return serverSocket;
1:86a73d4:         }
1:86a73d4:         catch (IllegalArgumentException | SecurityException | IOException e)
1:86a73d4:         {
1:86a73d4:             serverSocket.close();
1:86a73d4:             throw e;
1:b1c2ce2:         }
1:b1c2ce2:     }
1:c9c9c42: 
1:b1c2ce2:     /** Create a socket and connect */
1:b1c2ce2:     public static SSLSocket getSocket(EncryptionOptions options, InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException
1:86a73d4:     {
1:119c726:         SSLContext ctx = createSSLContext(options, true);
1:b1c2ce2:         SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket(address, port, localAddress, localPort);
1:86a73d4:         try
1:86a73d4:         {
1:c9c9c42:             prepareSocket(socket, options);
1:86a73d4:             return socket;
1:86a73d4:         }
1:86a73d4:         catch (IllegalArgumentException e)
1:86a73d4:         {
1:86a73d4:             socket.close();
1:86a73d4:             throw e;
1:c41c0fe:         }
1:b1c2ce2:     }
1:2fd3268: 
1:cba4087:     /** Create a socket and connect, using any local address */
1:cba4087:     public static SSLSocket getSocket(EncryptionOptions options, InetAddress address, int port) throws IOException
1:cba4087:     {
1:119c726:         SSLContext ctx = createSSLContext(options, true);
1:cba4087:         SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket(address, port);
1:86a73d4:         try
1:86a73d4:         {
1:c9c9c42:             prepareSocket(socket, options);
1:86a73d4:             return socket;
1:86a73d4:         }
1:86a73d4:         catch (IllegalArgumentException e)
1:86a73d4:         {
1:86a73d4:             socket.close();
1:86a73d4:             throw e;
1:cba4087:         }
1:b1c2ce2:     }
1:cba4087: 
1:b1c2ce2:     /** Just create a socket */
1:b1c2ce2:     public static SSLSocket getSocket(EncryptionOptions options) throws IOException
1:c41c0fe:     {
1:119c726:         SSLContext ctx = createSSLContext(options, true);
1:b1c2ce2:         SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket();
1:86a73d4:         try
1:86a73d4:         {
1:c9c9c42:             prepareSocket(socket, options);
1:86a73d4:             return socket;
1:86a73d4:         }
1:86a73d4:         catch (IllegalArgumentException e)
1:b1c2ce2:         {
1:86a73d4:             socket.close();
1:86a73d4:             throw e;
1:c9c9c42:         }
1:b1c2ce2:     }
1:3d5a595: 
1:c9c9c42:     /** Sets relevant socket options specified in encryption settings */
1:c9c9c42:     private static void prepareSocket(SSLServerSocket serverSocket, EncryptionOptions options)
1:c9c9c42:     {
1:86a73d4:         String[] suites = filterCipherSuites(serverSocket.getSupportedCipherSuites(), options.cipher_suites);
1:c9c9c42:         if(options.require_endpoint_verification)
1:c9c9c42:         {
1:c9c9c42:             SSLParameters sslParameters = serverSocket.getSSLParameters();
1:c9c9c42:             sslParameters.setEndpointIdentificationAlgorithm("HTTPS");
1:c9c9c42:             serverSocket.setSSLParameters(sslParameters);
1:c9c9c42:         }
1:86a73d4:         serverSocket.setEnabledCipherSuites(suites);
1:86a73d4:         serverSocket.setNeedClientAuth(options.require_client_auth);
1:86a73d4:     }
1:c9c9c42: 
1:c9c9c42:     /** Sets relevant socket options specified in encryption settings */
1:c9c9c42:     private static void prepareSocket(SSLSocket socket, EncryptionOptions options)
1:c9c9c42:     {
1:86a73d4:         String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
1:c9c9c42:         if(options.require_endpoint_verification)
1:c9c9c42:         {
1:c9c9c42:             SSLParameters sslParameters = socket.getSSLParameters();
1:c9c9c42:             sslParameters.setEndpointIdentificationAlgorithm("HTTPS");
1:c9c9c42:             socket.setSSLParameters(sslParameters);
1:86a73d4:         }
1:86a73d4:         socket.setEnabledCipherSuites(suites);
1:86a73d4:     }
1:c9c9c42: 
1:7aafe05:     @SuppressWarnings("resource")
1:119c726:     public static SSLContext createSSLContext(EncryptionOptions options, boolean buildTruststore) throws IOException
1:b1c2ce2:     {
1:119c726:         FileInputStream tsf = null;
1:119c726:         FileInputStream ksf = null;
1:b1c2ce2:         SSLContext ctx;
1:c41c0fe:         try
1:c41c0fe:         {
1:3d5a595:             ctx = SSLContext.getInstance(options.protocol);
1:119c726:             TrustManager[] trustManagers = null;
1:b1c2ce2: 
1:119c726:             if(buildTruststore)
1:119c726:             {
1:119c726:                 tsf = new FileInputStream(options.truststore);
1:119c726:                 TrustManagerFactory tmf = TrustManagerFactory.getInstance(options.algorithm);
1:119c726:                 KeyStore ts = KeyStore.getInstance(options.store_type);
1:119c726:                 ts.load(tsf, options.truststore_password.toCharArray());
1:119c726:                 tmf.init(ts);
1:119c726:                 trustManagers = tmf.getTrustManagers();
1:86a73d4:             }
1:b1c2ce2: 
1:119c726:             ksf = new FileInputStream(options.keystore);
1:119c726:             KeyManagerFactory kmf = KeyManagerFactory.getInstance(options.algorithm);
1:3d5a595:             KeyStore ks = KeyStore.getInstance(options.store_type);
1:c41c0fe:             ks.load(ksf, options.keystore_password.toCharArray());
1:11351e3:             if (!checkedExpiry)
1:11351e3:             {
1:11351e3:                 for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); )
1:11351e3:                 {
1:11351e3:                     String alias = aliases.nextElement();
1:11351e3:                     if (ks.getCertificate(alias).getType().equals("X.509"))
1:11351e3:                     {
1:11351e3:                         Date expires = ((X509Certificate) ks.getCertificate(alias)).getNotAfter();
1:11351e3:                         if (expires.before(new Date()))
1:11351e3:                             logger.warn("Certificate for {} expired on {}", alias, expires);
1:c9c9c42:                     }
1:c9c9c42:                 }
1:11351e3:                 checkedExpiry = true;
1:11351e3:             }
1:b1c2ce2:             kmf.init(ks, options.keystore_password.toCharArray());
1:b1c2ce2: 
1:119c726:             ctx.init(kmf.getKeyManagers(), trustManagers, null);
1:b1c2ce2: 
1:11351e3:         }
1:c41c0fe:         catch (Exception e)
1:c41c0fe:         {
1:b1c2ce2:             throw new IOException("Error creating the initializing the SSL Context", e);
1:11351e3:         }
1:c41c0fe:         finally
1:c41c0fe:         {
1:c41c0fe:             FileUtils.closeQuietly(tsf);
1:c41c0fe:             FileUtils.closeQuietly(ksf);
1:119c726:         }
1:b1c2ce2:         return ctx;
1:3d5a595:     }
1:07cdfd0: 
1:a24bd6c:     public static String[] filterCipherSuites(String[] supported, String[] desired)
1:3d5a595:     {
1:a24bd6c:         if (Arrays.equals(supported, desired))
1:a24bd6c:             return desired;
1:a24bd6c:         List<String> ldesired = Arrays.asList(desired);
1:a24bd6c:         ImmutableSet<String> ssupported = ImmutableSet.copyOf(supported);
1:a24bd6c:         String[] ret = Iterables.toArray(Iterables.filter(ldesired, Predicates.in(ssupported)), String.class);
1:a24bd6c:         if (desired.length > ret.length && logger.isWarnEnabled())
1:a24bd6c:         {
1:a24bd6c:             Iterable<String> missing = Iterables.filter(ldesired, Predicates.not(Predicates.in(Sets.newHashSet(ret))));
1:a24bd6c:             logger.warn("Filtering out {} as it isn't supported by the socket", Iterables.toString(missing));
1:a24bd6c:         }
1:a24bd6c:         return ret;
1:c41c0fe:     }
1:b1c2ce2: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:23bfcab
author:Arunkumar M
-------------------------------------------------------------------------------
commit:86a73d4
/////////////////////////////////////////////////////////////////////////
0:         SSLServerSocket serverSocket = (SSLServerSocket) ctx.getServerSocketFactory().createServerSocket();
1:         try
1:         {
1:             serverSocket.setReuseAddress(true);
1:             String[] suites = filterCipherSuites(serverSocket.getSupportedCipherSuites(), options.cipher_suites);
1:             serverSocket.setEnabledCipherSuites(suites);
1:             serverSocket.setNeedClientAuth(options.require_client_auth);
0:             serverSocket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
1:             serverSocket.bind(new InetSocketAddress(address, port), 500);
1:             return serverSocket;
1:         }
1:         catch (IllegalArgumentException | SecurityException | IOException e)
1:         {
1:             serverSocket.close();
1:             throw e;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
1:             String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
1:             socket.setEnabledCipherSuites(suites);
0:             socket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
1:             return socket;
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             socket.close();
1:             throw e;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
0:             String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:             socket.setEnabledCipherSuites(suites);
0:             socket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
1:             return socket;
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             socket.close();
1:             throw e;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
0:             String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:             socket.setEnabledCipherSuites(suites);
0:             socket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
1:             return socket;
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             socket.close();
1:             throw e;
1:         }
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:c9c9c42
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLParameters;
/////////////////////////////////////////////////////////////////////////
1:         prepareSocket(serverSocket, options);
1: 
/////////////////////////////////////////////////////////////////////////
1:         prepareSocket(socket, options);
/////////////////////////////////////////////////////////////////////////
1:         prepareSocket(socket, options);
/////////////////////////////////////////////////////////////////////////
1:         prepareSocket(socket, options);
1:     /** Sets relevant socket options specified in encryption settings */
1:     private static void prepareSocket(SSLServerSocket serverSocket, EncryptionOptions options)
1:     {
0:         String[] suites = filterCipherSuites(serverSocket.getSupportedCipherSuites(), options.cipher_suites);
1:         if(options.require_endpoint_verification)
1:         {
1:             SSLParameters sslParameters = serverSocket.getSSLParameters();
1:             sslParameters.setEndpointIdentificationAlgorithm("HTTPS");
1:             serverSocket.setSSLParameters(sslParameters);
1:         }
0:         serverSocket.setEnabledCipherSuites(suites);
0:         serverSocket.setNeedClientAuth(options.require_client_auth);
1:     }
1: 
1:     /** Sets relevant socket options specified in encryption settings */
1:     private static void prepareSocket(SSLSocket socket, EncryptionOptions options)
1:     {
0:         String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
1:         if(options.require_endpoint_verification)
1:         {
1:             SSLParameters sslParameters = socket.getSSLParameters();
1:             sslParameters.setEndpointIdentificationAlgorithm("HTTPS");
1:             socket.setSSLParameters(sslParameters);
1:         }
0:         socket.setEnabledCipherSuites(suites);
1:     }
1: 
commit:e4a0a4b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a24bd6c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Predicates;
1: import com.google.common.collect.ImmutableSet;
1: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
0:         String[] suites = filterCipherSuites(serverSocket.getSupportedCipherSuites(), options.cipher_suites);
0:         serverSocket.setEnabledCipherSuites(suites);
/////////////////////////////////////////////////////////////////////////
0:         String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:         socket.setEnabledCipherSuites(suites);
/////////////////////////////////////////////////////////////////////////
0:         String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:         socket.setEnabledCipherSuites(suites);
/////////////////////////////////////////////////////////////////////////
0:         String[] suites = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:         socket.setEnabledCipherSuites(suites);
/////////////////////////////////////////////////////////////////////////
1:     public static String[] filterCipherSuites(String[] supported, String[] desired)
1:         if (Arrays.equals(supported, desired))
1:             return desired;
1:         List<String> ldesired = Arrays.asList(desired);
1:         ImmutableSet<String> ssupported = ImmutableSet.copyOf(supported);
1:         String[] ret = Iterables.toArray(Iterables.filter(ldesired, Predicates.in(ssupported)), String.class);
1:         if (desired.length > ret.length && logger.isWarnEnabled())
1:         {
1:             Iterable<String> missing = Iterables.filter(ldesired, Predicates.not(Predicates.in(Sets.newHashSet(ret))));
1:             logger.warn("Filtering out {} as it isn't supported by the socket", Iterables.toString(missing));
1:         }
1:         return ret;
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Jason Brown
-------------------------------------------------------------------------------
commit:37d33b2
/////////////////////////////////////////////////////////////////////////
0:     public static final String[] ACCEPTED_PROTOCOLS = new String[] {"SSLv2Hello", "TLSv1", "TLSv1.1", "TLSv1.2"};
/////////////////////////////////////////////////////////////////////////
0:         serverSocket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
/////////////////////////////////////////////////////////////////////////
0:         socket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
/////////////////////////////////////////////////////////////////////////
0:         socket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
/////////////////////////////////////////////////////////////////////////
0:         socket.setEnabledProtocols(ACCEPTED_PROTOCOLS);
commit:b93f48a
/////////////////////////////////////////////////////////////////////////
0:         serverSocket.setEnabledProtocols(new String[] {"SSLv2Hello", "TLSv1", "TLSv1.1", "TLSv1.2"});
/////////////////////////////////////////////////////////////////////////
0:         socket.setEnabledProtocols(new String[] {"SSLv2Hello", "TLSv1", "TLSv1.1", "TLSv1.2"});
/////////////////////////////////////////////////////////////////////////
0:         socket.setEnabledProtocols(new String[] {"SSLv2Hello", "TLSv1", "TLSv1.1", "TLSv1.2"});
/////////////////////////////////////////////////////////////////////////
0:         socket.setEnabledProtocols(new String[] {"SSLv2Hello", "TLSv1", "TLSv1.1", "TLSv1.2"});
author:Brandon Williams
-------------------------------------------------------------------------------
commit:11351e3
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
1: import java.util.Date;
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1:     private static boolean checkedExpiry = false;
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (!checkedExpiry)
1:             {
1:                 for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); )
1:                 {
1:                     String alias = aliases.nextElement();
1:                     if (ks.getCertificate(alias).getType().equals("X.509"))
1:                     {
1:                         Date expires = ((X509Certificate) ks.getCertificate(alias)).getNotAfter();
1:                         if (expires.before(new Date()))
1:                             logger.warn("Certificate for {} expired on {}", alias, expires);
1:                     }
1:                 }
1:                 checkedExpiry = true;
1:             }
commit:4b3a17c
/////////////////////////////////////////////////////////////////////////
0:         serverSocket.bind(new InetSocketAddress(address, port), 500);
commit:cba4087
/////////////////////////////////////////////////////////////////////////
1:     /** Create a socket and connect, using any local address */
1:     public static SSLSocket getSocket(EncryptionOptions options, InetAddress address, int port) throws IOException
1:     {
0:         SSLContext ctx = createSSLContext(options);
1:         SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket(address, port);
0:         String[] suits = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:         socket.setEnabledCipherSuites(suits);
0:         return socket;
1:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang3.StringUtils;
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:4460e28
/////////////////////////////////////////////////////////////////////////
0:         serverSocket.setNeedClientAuth(options.require_client_auth);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:119c726
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.TrustManager;
/////////////////////////////////////////////////////////////////////////
1:         SSLContext ctx = createSSLContext(options, true);
/////////////////////////////////////////////////////////////////////////
1:         SSLContext ctx = createSSLContext(options, true);
/////////////////////////////////////////////////////////////////////////
1:         SSLContext ctx = createSSLContext(options, true);
/////////////////////////////////////////////////////////////////////////
1:         SSLContext ctx = createSSLContext(options, true);
1:     public static SSLContext createSSLContext(EncryptionOptions options, boolean buildTruststore) throws IOException
1:         FileInputStream tsf = null;
1:         FileInputStream ksf = null;
1:             TrustManager[] trustManagers = null;
1:             if(buildTruststore)
1:             {
1:                 tsf = new FileInputStream(options.truststore);
1:                 TrustManagerFactory tmf = TrustManagerFactory.getInstance(options.algorithm);
1:                 KeyStore ts = KeyStore.getInstance(options.store_type);
1:                 ts.load(tsf, options.truststore_password.toCharArray());
1:                 tmf.init(ts);
1:                 trustManagers = tmf.getTrustManagers();
1:             }
1:             ksf = new FileInputStream(options.keystore);
1:             KeyManagerFactory kmf = KeyManagerFactory.getInstance(options.algorithm);
1:             ctx.init(kmf.getKeyManagers(), trustManagers, null);
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.security;
1: 
commit:910b663
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(SSLFactory.class);
/////////////////////////////////////////////////////////////////////////
0:         Set<String> toReturn = Sets.intersection(Sets.newHashSet(supported), des);
0:         if (des.size() > toReturn.size())
0:             logger.warn("Filtering out {} as it isnt supported by the socket", StringUtils.join(Sets.difference(des, toReturn), ","));
0:         return toReturn.toArray(new String[toReturn.size()]);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3d5a595
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.StringUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger logger_ = LoggerFactory.getLogger(SSLFactory.class);
0:         String[] suits = filterCipherSuites(serverSocket.getSupportedCipherSuites(), options.cipher_suites);
0:         serverSocket.setEnabledCipherSuites(suits);
/////////////////////////////////////////////////////////////////////////
0:         String[] suits = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:         socket.setEnabledCipherSuites(suits);
/////////////////////////////////////////////////////////////////////////
0:         String[] suits = filterCipherSuites(socket.getSupportedCipherSuites(), options.cipher_suites);
0:         socket.setEnabledCipherSuites(suits);
/////////////////////////////////////////////////////////////////////////
1:             ctx = SSLContext.getInstance(options.protocol);
0:             tmf = TrustManagerFactory.getInstance(options.algorithm);
0:             KeyStore ts = KeyStore.getInstance(options.store_type);
0:             kmf = KeyManagerFactory.getInstance(options.algorithm);
1:             KeyStore ks = KeyStore.getInstance(options.store_type);
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static String[] filterCipherSuites(String[] supported, String[] desired)
1:     {
0:         Set<String> des = Sets.newHashSet(desired);
0:         Set<String> return_ = Sets.intersection(Sets.newHashSet(supported), des);
0:         if (des.size() > return_.size())
0:             logger_.warn("Filtering out {} as it isnt supported by the socket", StringUtils.join(Sets.difference(des, return_), ","));
0:         return return_.toArray(new String[return_.size()]);
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:c41c0fe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.FileUtils;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static SSLContext createSSLContext(EncryptionOptions options) throws IOException
1:     {
0:         FileInputStream tsf = new FileInputStream(options.truststore);
0:         FileInputStream ksf = new FileInputStream(options.keystore);
1:         try
1:         {
0:             TrustManagerFactory tmf;
0:             KeyManagerFactory kmf;
0:             ts.load(tsf, options.truststore_password.toCharArray());
1:             ks.load(ksf, options.keystore_password.toCharArray());
1:         }
1:         catch (Exception e)
1:         {
1:         finally
1:         {
1:             FileUtils.closeQuietly(tsf);
1:             FileUtils.closeQuietly(ksf);
1:         }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:b1c2ce2
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.security;
1: 
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  *
1:  */
1: 
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.InetSocketAddress;
0: import java.net.SocketAddress;
1: import java.security.KeyStore;
1: 
1: import javax.net.ssl.KeyManagerFactory;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLServerSocket;
1: import javax.net.ssl.SSLSocket;
1: import javax.net.ssl.TrustManagerFactory;
1: 
1: import org.apache.cassandra.config.EncryptionOptions;
1: 
1: /**
1:  * A Factory for providing and setting up Client and Server SSL wrapped
1:  * Socket and ServerSocket
1:  */
1: public final class SSLFactory
1: {
0:     private static final String PROTOCOL = "TLS";
0:     private static final String ALGORITHM = "SunX509";
0:     private static final String STORE_TYPE = "JKS";
1: 
1: 
1:     public static SSLServerSocket getServerSocket(EncryptionOptions options, InetAddress address, int port) throws IOException
1:     {
0:         SSLContext ctx = createSSLContext(options);
1:         SSLServerSocket serverSocket = (SSLServerSocket)ctx.getServerSocketFactory().createServerSocket();
0:         serverSocket.setReuseAddress(true);
0:         serverSocket.setEnabledCipherSuites(options.cipherSuites);
0:         serverSocket.bind(new InetSocketAddress(address, port), 100);
0:         return serverSocket;
1:     }
1: 
1:     /** Create a socket and connect */
1:     public static SSLSocket getSocket(EncryptionOptions options, InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException
1:     {
0:         SSLContext ctx = createSSLContext(options);
1:         SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket(address, port, localAddress, localPort);
0:         socket.setEnabledCipherSuites(options.cipherSuites);
0:         return socket;
1:     }
1: 
1:     /** Just create a socket */
1:     public static SSLSocket getSocket(EncryptionOptions options) throws IOException
1:     {
0:         SSLContext ctx = createSSLContext(options);
1:         SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket();
0:         socket.setEnabledCipherSuites(options.cipherSuites);
0:         return socket;
1:     }
1: 
0:     private static SSLContext createSSLContext(EncryptionOptions options) throws IOException {
1:         SSLContext ctx;
0:         try {
0:             ctx = SSLContext.getInstance(PROTOCOL);
0:             TrustManagerFactory tmf = null;
0:             KeyManagerFactory kmf = null;
1: 
0:             tmf = TrustManagerFactory.getInstance(ALGORITHM);
0:             KeyStore ts = KeyStore.getInstance(STORE_TYPE);
0:             ts.load(new FileInputStream(options.truststore), options.truststore_password.toCharArray());
0:             tmf.init(ts);
1: 
0:             kmf = KeyManagerFactory.getInstance(ALGORITHM);
0:             KeyStore ks = KeyStore.getInstance(STORE_TYPE);
0:             ks.load(new FileInputStream(options.keystore), options.keystore_password.toCharArray());
1:             kmf.init(ks, options.keystore_password.toCharArray());
1: 
0:             ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
1: 
0:         } catch (Exception e) {
1:             throw new IOException("Error creating the initializing the SSL Context", e);
1:         }
1:         return ctx;
1:     }
1: }
============================================================================