1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer;
1:72790dc: 
1:72790dc: import java.util.Map;
1:72790dc: 
1:72790dc: public class NonTokenizingOptions
1:72790dc: {
1:72790dc:     public static final String NORMALIZE_LOWERCASE = "normalize_lowercase";
1:72790dc:     public static final String NORMALIZE_UPPERCASE = "normalize_uppercase";
1:72790dc:     public static final String CASE_SENSITIVE = "case_sensitive";
1:72790dc: 
1:72790dc:     private boolean caseSensitive;
1:72790dc:     private boolean upperCaseOutput;
1:72790dc:     private boolean lowerCaseOutput;
1:72790dc: 
1:72790dc:     public boolean isCaseSensitive()
1:72790dc:     {
1:72790dc:         return caseSensitive;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setCaseSensitive(boolean caseSensitive)
1:72790dc:     {
1:72790dc:         this.caseSensitive = caseSensitive;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean shouldUpperCaseOutput()
1:72790dc:     {
1:72790dc:         return upperCaseOutput;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setUpperCaseOutput(boolean upperCaseOutput)
1:72790dc:     {
1:72790dc:         this.upperCaseOutput = upperCaseOutput;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean shouldLowerCaseOutput()
1:72790dc:     {
1:72790dc:         return lowerCaseOutput;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setLowerCaseOutput(boolean lowerCaseOutput)
1:72790dc:     {
1:72790dc:         this.lowerCaseOutput = lowerCaseOutput;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static class OptionsBuilder
1:72790dc:     {
1:72790dc:         private boolean caseSensitive = true;
1:72790dc:         private boolean upperCaseOutput = false;
1:72790dc:         private boolean lowerCaseOutput = false;
1:72790dc: 
1:72790dc:         public OptionsBuilder()
1:72790dc:         {
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder caseSensitive(boolean caseSensitive)
1:72790dc:         {
1:72790dc:             this.caseSensitive = caseSensitive;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder upperCaseOutput(boolean upperCaseOutput)
1:72790dc:         {
1:72790dc:             this.upperCaseOutput = upperCaseOutput;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder lowerCaseOutput(boolean lowerCaseOutput)
1:72790dc:         {
1:72790dc:             this.lowerCaseOutput = lowerCaseOutput;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public NonTokenizingOptions build()
1:72790dc:         {
1:72790dc:             if (lowerCaseOutput && upperCaseOutput)
1:72790dc:                 throw new IllegalArgumentException("Options to normalize terms cannot be " +
1:72790dc:                         "both uppercase and lowercase at the same time");
1:72790dc: 
1:72790dc:             NonTokenizingOptions options = new NonTokenizingOptions();
1:72790dc:             options.setCaseSensitive(caseSensitive);
1:72790dc:             options.setUpperCaseOutput(upperCaseOutput);
1:72790dc:             options.setLowerCaseOutput(lowerCaseOutput);
1:72790dc:             return options;
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static NonTokenizingOptions buildFromMap(Map<String, String> optionsMap)
1:72790dc:     {
1:72790dc:         OptionsBuilder optionsBuilder = new OptionsBuilder();
1:72790dc: 
1:72790dc:         if (optionsMap.containsKey(CASE_SENSITIVE) && (optionsMap.containsKey(NORMALIZE_LOWERCASE)
1:72790dc:                 || optionsMap.containsKey(NORMALIZE_UPPERCASE)))
1:72790dc:             throw new IllegalArgumentException("case_sensitive option cannot be specified together " +
1:72790dc:                     "with either normalize_lowercase or normalize_uppercase");
1:72790dc: 
1:72790dc:         for (Map.Entry<String, String> entry : optionsMap.entrySet())
1:72790dc:         {
1:72790dc:             switch (entry.getKey())
1:72790dc:             {
1:72790dc:                 case NORMALIZE_LOWERCASE:
1:72790dc:                 {
1:72790dc:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.lowerCaseOutput(bool);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:                 case NORMALIZE_UPPERCASE:
1:72790dc:                 {
1:72790dc:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.upperCaseOutput(bool);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:                 case CASE_SENSITIVE:
1:72790dc:                 {
1:72790dc:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.caseSensitive(bool);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:             }
1:72790dc:         }
1:72790dc:         return optionsBuilder.build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static NonTokenizingOptions getDefaultOptions()
1:72790dc:     {
1:72790dc:         return new OptionsBuilder()
1:72790dc:                 .caseSensitive(true).lowerCaseOutput(false)
1:72790dc:                 .upperCaseOutput(false)
1:72790dc:                 .build();
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer;
1: 
1: import java.util.Map;
1: 
1: public class NonTokenizingOptions
1: {
1:     public static final String NORMALIZE_LOWERCASE = "normalize_lowercase";
1:     public static final String NORMALIZE_UPPERCASE = "normalize_uppercase";
1:     public static final String CASE_SENSITIVE = "case_sensitive";
1: 
1:     private boolean caseSensitive;
1:     private boolean upperCaseOutput;
1:     private boolean lowerCaseOutput;
1: 
1:     public boolean isCaseSensitive()
1:     {
1:         return caseSensitive;
1:     }
1: 
1:     public void setCaseSensitive(boolean caseSensitive)
1:     {
1:         this.caseSensitive = caseSensitive;
1:     }
1: 
1:     public boolean shouldUpperCaseOutput()
1:     {
1:         return upperCaseOutput;
1:     }
1: 
1:     public void setUpperCaseOutput(boolean upperCaseOutput)
1:     {
1:         this.upperCaseOutput = upperCaseOutput;
1:     }
1: 
1:     public boolean shouldLowerCaseOutput()
1:     {
1:         return lowerCaseOutput;
1:     }
1: 
1:     public void setLowerCaseOutput(boolean lowerCaseOutput)
1:     {
1:         this.lowerCaseOutput = lowerCaseOutput;
1:     }
1: 
1:     public static class OptionsBuilder
1:     {
1:         private boolean caseSensitive = true;
1:         private boolean upperCaseOutput = false;
1:         private boolean lowerCaseOutput = false;
1: 
1:         public OptionsBuilder()
1:         {
1:         }
1: 
1:         public OptionsBuilder caseSensitive(boolean caseSensitive)
1:         {
1:             this.caseSensitive = caseSensitive;
1:             return this;
1:         }
1: 
1:         public OptionsBuilder upperCaseOutput(boolean upperCaseOutput)
1:         {
1:             this.upperCaseOutput = upperCaseOutput;
1:             return this;
1:         }
1: 
1:         public OptionsBuilder lowerCaseOutput(boolean lowerCaseOutput)
1:         {
1:             this.lowerCaseOutput = lowerCaseOutput;
1:             return this;
1:         }
1: 
1:         public NonTokenizingOptions build()
1:         {
1:             if (lowerCaseOutput && upperCaseOutput)
1:                 throw new IllegalArgumentException("Options to normalize terms cannot be " +
1:                         "both uppercase and lowercase at the same time");
1: 
1:             NonTokenizingOptions options = new NonTokenizingOptions();
1:             options.setCaseSensitive(caseSensitive);
1:             options.setUpperCaseOutput(upperCaseOutput);
1:             options.setLowerCaseOutput(lowerCaseOutput);
1:             return options;
1:         }
1:     }
1: 
1:     public static NonTokenizingOptions buildFromMap(Map<String, String> optionsMap)
1:     {
1:         OptionsBuilder optionsBuilder = new OptionsBuilder();
1: 
1:         if (optionsMap.containsKey(CASE_SENSITIVE) && (optionsMap.containsKey(NORMALIZE_LOWERCASE)
1:                 || optionsMap.containsKey(NORMALIZE_UPPERCASE)))
1:             throw new IllegalArgumentException("case_sensitive option cannot be specified together " +
1:                     "with either normalize_lowercase or normalize_uppercase");
1: 
1:         for (Map.Entry<String, String> entry : optionsMap.entrySet())
1:         {
1:             switch (entry.getKey())
1:             {
1:                 case NORMALIZE_LOWERCASE:
1:                 {
1:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:                     optionsBuilder = optionsBuilder.lowerCaseOutput(bool);
1:                     break;
1:                 }
1:                 case NORMALIZE_UPPERCASE:
1:                 {
1:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:                     optionsBuilder = optionsBuilder.upperCaseOutput(bool);
1:                     break;
1:                 }
1:                 case CASE_SENSITIVE:
1:                 {
1:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:                     optionsBuilder = optionsBuilder.caseSensitive(bool);
1:                     break;
1:                 }
1:             }
1:         }
1:         return optionsBuilder.build();
1:     }
1: 
1:     public static NonTokenizingOptions getDefaultOptions()
1:     {
1:         return new OptionsBuilder()
1:                 .caseSensitive(true).lowerCaseOutput(false)
1:                 .upperCaseOutput(false)
1:                 .build();
1:     }
1: }
============================================================================