1:69cedbf: /*
1:69cedbf:  * Licensed to the Apache Software Foundation (ASF) under one
1:69cedbf:  * or more contributor license agreements.  See the NOTICE file
1:69cedbf:  * distributed with this work for additional information
1:69cedbf:  * regarding copyright ownership.  The ASF licenses this file
1:69cedbf:  * to you under the Apache License, Version 2.0 (the
1:69cedbf:  * "License"); you may not use this file except in compliance
1:69cedbf:  * with the License.  You may obtain a copy of the License at
1:69cedbf:  *
1:69cedbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69cedbf:  *
1:69cedbf:  * Unless required by applicable law or agreed to in writing, software
1:69cedbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:69cedbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69cedbf:  * See the License for the specific language governing permissions and
1:69cedbf:  * limitations under the License.
1:69cedbf:  */
1:69cedbf: package org.apache.cassandra.metrics;
1:69cedbf: 
1:69cedbf: import java.net.InetAddress;
1:69cedbf: import java.util.concurrent.ConcurrentMap;
1:8896a70: 
1:69cedbf: 
1:8896a70: import com.codahale.metrics.Counter;
1:69cedbf: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1:69cedbf: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:69cedbf: /**
1:69cedbf:  * Metrics for streaming.
1:69cedbf:  */
1:69cedbf: public class StreamingMetrics
1:69cedbf: {
1:69cedbf:     public static final String TYPE_NAME = "Streaming";
1:69cedbf: 
1:69cedbf:     private static final ConcurrentMap<InetAddress, StreamingMetrics> instances = new NonBlockingHashMap<InetAddress, StreamingMetrics>();
1:69cedbf: 
1:8896a70:     public static final Counter activeStreamsOutbound = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, "ActiveOutboundStreams", null));
1:8896a70:     public static final Counter totalIncomingBytes = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalIncomingBytes", null));
1:8896a70:     public static final Counter totalOutgoingBytes = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalOutgoingBytes", null));
1:69cedbf:     public final Counter incomingBytes;
1:69cedbf:     public final Counter outgoingBytes;
1:69cedbf: 
1:69cedbf:     public static StreamingMetrics get(InetAddress ip)
1:69cedbf:     {
1:69cedbf:        StreamingMetrics metrics = instances.get(ip);
1:69cedbf:        if (metrics == null)
1:69cedbf:        {
1:69cedbf:            metrics = new StreamingMetrics(ip);
1:69cedbf:            instances.put(ip, metrics);
1:69cedbf:        }
1:69cedbf:        return metrics;
1:69cedbf:     }
1:69cedbf: 
1:69cedbf:     public StreamingMetrics(final InetAddress peer)
1:69cedbf:     {
1:495ae9c:         MetricNameFactory factory = new DefaultNameFactory("Streaming", peer.getHostAddress().replace(':', '.'));
1:8896a70:         incomingBytes = Metrics.counter(factory.createMetricName("IncomingBytes"));
1:8896a70:         outgoingBytes= Metrics.counter(factory.createMetricName("OutgoingBytes"));
1:69cedbf:     }
1:69cedbf: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:c15ac66
author:Erik Forsberg
-------------------------------------------------------------------------------
commit:495ae9c
/////////////////////////////////////////////////////////////////////////
1:         MetricNameFactory factory = new DefaultNameFactory("Streaming", peer.getHostAddress().replace(':', '.'));
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: 
1: import com.codahale.metrics.Counter;
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static final Counter activeStreamsOutbound = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, "ActiveOutboundStreams", null));
1:     public static final Counter totalIncomingBytes = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalIncomingBytes", null));
1:     public static final Counter totalOutgoingBytes = Metrics.counter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalOutgoingBytes", null));
/////////////////////////////////////////////////////////////////////////
1:         incomingBytes = Metrics.counter(factory.createMetricName("IncomingBytes"));
1:         outgoingBytes= Metrics.counter(factory.createMetricName("OutgoingBytes"));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public static final Counter activeStreamsOutbound = Metrics.newCounter(DefaultNameFactory.createMetricName(TYPE_NAME, "ActiveOutboundStreams", null));
0:     public static final Counter totalIncomingBytes = Metrics.newCounter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalIncomingBytes", null));
0:     public static final Counter totalOutgoingBytes = Metrics.newCounter(DefaultNameFactory.createMetricName(TYPE_NAME, "TotalOutgoingBytes", null));
/////////////////////////////////////////////////////////////////////////
0:         MetricNameFactory factory = new DefaultNameFactory("Streaming", peer.getHostAddress().replaceAll(":", "."));
0:         incomingBytes = Metrics.newCounter(factory.createMetricName("IncomingBytes"));
0:         outgoingBytes= Metrics.newCounter(factory.createMetricName("OutgoingBytes"));
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import java.net.InetAddress;
1: import java.util.concurrent.ConcurrentMap;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Counter;
0: import com.yammer.metrics.core.MetricName;
1: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1: 
1: /**
1:  * Metrics for streaming.
1:  */
1: public class StreamingMetrics
1: {
0:     public static final String GROUP_NAME = "org.apache.cassandra.metrics";
1:     public static final String TYPE_NAME = "Streaming";
1: 
1:     private static final ConcurrentMap<InetAddress, StreamingMetrics> instances = new NonBlockingHashMap<InetAddress, StreamingMetrics>();
1: 
0:     public static final Counter activeStreamsOutbound = Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "ActiveOutboundStreams"));
0:     public static final Counter totalIncomingBytes = Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "TotalIncomingBytes"));
0:     public static final Counter totalOutgoingBytes = Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "TotalOutgoingBytes"));
1:     public final Counter incomingBytes;
1:     public final Counter outgoingBytes;
1: 
1:     public static StreamingMetrics get(InetAddress ip)
1:     {
1:        StreamingMetrics metrics = instances.get(ip);
1:        if (metrics == null)
1:        {
1:            metrics = new StreamingMetrics(ip);
1:            instances.put(ip, metrics);
1:        }
1:        return metrics;
1:     }
1: 
1:     public StreamingMetrics(final InetAddress peer)
1:     {
0:         incomingBytes = Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "IncomingBytes", peer.getHostAddress()));
0:         outgoingBytes= Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "OutgoingBytes", peer.getHostAddress()));
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6caddcd
/////////////////////////////////////////////////////////////////////////
0:         incomingBytes = Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "IncomingBytes", peer.getHostAddress().replaceAll(":", ".")));
0:         outgoingBytes= Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "OutgoingBytes", peer.getHostAddress().replaceAll(":", ".")));
============================================================================