1:c20566f: /*
1:c20566f:  * Licensed to the Apache Software Foundation (ASF) under one
1:c20566f:  * or more contributor license agreements.  See the NOTICE file
1:c20566f:  * distributed with this work for additional information
1:c20566f:  * regarding copyright ownership.  The ASF licenses this file
1:c20566f:  * to you under the Apache License, Version 2.0 (the
1:c20566f:  * "License"); you may not use this file except in compliance
1:c20566f:  * with the License.  You may obtain a copy of the License at
1:c20566f:  *
1:c20566f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c20566f:  *
1:c20566f:  * Unless required by applicable law or agreed to in writing, software
1:c20566f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c20566f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c20566f:  * See the License for the specific language governing permissions and
1:c20566f:  * limitations under the License.
1:c20566f:  */
8:c20566f: 
1:c20566f: package org.apache.cassandra.hints;
1:c20566f: 
1:c20566f: import java.io.IOException;
1:c20566f: import java.nio.ByteBuffer;
1:c20566f: 
1:90033b9: import com.google.common.annotations.VisibleForTesting;
1:90033b9: 
1:cee22ad: import org.apache.cassandra.hints.ChecksummedDataInput.Position;
1:c20566f: import org.apache.cassandra.io.FSReadError;
1:c20566f: import org.apache.cassandra.io.compress.ICompressor;
1:c20566f: import org.apache.cassandra.io.util.ChannelProxy;
1:c20566f: import org.apache.cassandra.utils.memory.BufferPool;
1:c20566f: 
1:c20566f: public final class CompressedChecksummedDataInput extends ChecksummedDataInput
8:c20566f: {
1:c20566f:     private final ICompressor compressor;
1:cee22ad:     private volatile long filePosition = 0;     // Current position in file, advanced when reading chunk.
1:cee22ad:     private volatile long sourcePosition = 0;   // Current position in file to report, advanced after consuming chunk.
1:c20566f:     private volatile ByteBuffer compressedBuffer = null;
1:c20566f:     private final ByteBuffer metadataBuffer = ByteBuffer.allocate(CompressedHintsWriter.METADATA_SIZE);
1:c20566f: 
1:30bb255:     public CompressedChecksummedDataInput(ChannelProxy channel, ICompressor compressor, long filePosition)
1:c20566f:     {
1:30bb255:         super(channel, compressor.preferredBufferType());
1:30bb255:         this.compressor = compressor;
1:cee22ad:         this.sourcePosition = this.filePosition = filePosition;
8:c20566f:     }
1:c20566f: 
1:c20566f:     /**
1:c20566f:      * Since an entire block of compressed data is read off of disk, not just a hint at a time,
1:c20566f:      * we don't report EOF until the decompressed data has also been read completely
1:c20566f:      */
1:c20566f:     public boolean isEOF()
1:c20566f:     {
1:c20566f:         return filePosition == channel.size() && buffer.remaining() == 0;
1:c20566f:     }
1:c20566f: 
1:30bb255:     public long getSourcePosition()
1:30bb255:     {
1:cee22ad:         return sourcePosition;
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     static class Position extends ChecksummedDataInput.Position
1:cee22ad:     {
1:cee22ad:         final long bufferStart;
1:cee22ad:         final int bufferPosition;
1:cee22ad: 
1:cee22ad:         public Position(long sourcePosition, long bufferStart, int bufferPosition)
1:cee22ad:         {
1:cee22ad:             super(sourcePosition);
1:cee22ad:             this.bufferStart = bufferStart;
1:cee22ad:             this.bufferPosition = bufferPosition;
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         @Override
1:cee22ad:         public long subtract(InputPosition o)
1:cee22ad:         {
1:cee22ad:             Position other = (Position) o;
1:cee22ad:             return bufferStart - other.bufferStart + bufferPosition - other.bufferPosition;
1:cee22ad:         }
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     public InputPosition getSeekPosition()
1:cee22ad:     {
1:cee22ad:         return new Position(sourcePosition, bufferOffset, buffer.position());
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     public void seek(InputPosition p)
1:cee22ad:     {
1:cee22ad:         Position pos = (Position) p;
1:cee22ad:         bufferOffset = pos.bufferStart;
1:cee22ad:         filePosition = pos.sourcePosition;
1:cee22ad:         buffer.position(0).limit(0);
1:cee22ad:         resetCrc();
1:cee22ad:         reBuffer();
1:cee22ad:         buffer.position(pos.bufferPosition);
1:cee22ad:         assert sourcePosition == pos.sourcePosition;
1:cee22ad:         assert bufferOffset == pos.bufferStart;
1:cee22ad:         assert buffer.position() == pos.bufferPosition;
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     protected void readBuffer()
1:c20566f:     {
1:cee22ad:         sourcePosition = filePosition;
1:cee22ad:         if (isEOF())
1:cee22ad:             return;
1:cee22ad: 
1:c20566f:         metadataBuffer.clear();
1:c20566f:         channel.read(metadataBuffer, filePosition);
1:c20566f:         filePosition += CompressedHintsWriter.METADATA_SIZE;
1:c20566f:         metadataBuffer.rewind();
1:c20566f: 
1:c20566f:         int uncompressedSize = metadataBuffer.getInt();
1:c20566f:         int compressedSize = metadataBuffer.getInt();
1:c20566f: 
1:c20566f:         if (compressedBuffer == null || compressedSize > compressedBuffer.capacity())
1:c20566f:         {
1:c20566f:             int bufferSize = compressedSize + (compressedSize / 20);  // allocate +5% to cover variability in compressed size
2:c20566f:             if (compressedBuffer != null)
1:c20566f:             {
2:c20566f:                 BufferPool.put(compressedBuffer);
1:c20566f:             }
1:30bb255:             compressedBuffer = BufferPool.get(bufferSize, compressor.preferredBufferType());
1:c20566f:         }
1:c20566f: 
1:c20566f:         compressedBuffer.clear();
1:c20566f:         compressedBuffer.limit(compressedSize);
1:c20566f:         channel.read(compressedBuffer, filePosition);
1:c20566f:         compressedBuffer.rewind();
1:c20566f:         filePosition += compressedSize;
1:c20566f: 
1:c20566f:         if (buffer.capacity() < uncompressedSize)
1:c20566f:         {
1:c20566f:             int bufferSize = uncompressedSize + (uncompressedSize / 20);
1:c20566f:             BufferPool.put(buffer);
1:30bb255:             buffer = BufferPool.get(bufferSize, compressor.preferredBufferType());
1:c20566f:         }
1:c20566f: 
1:c20566f:         buffer.clear();
1:c20566f:         buffer.limit(uncompressedSize);
1:c20566f:         try
1:c20566f:         {
1:c20566f:             compressor.uncompress(compressedBuffer, buffer);
1:c20566f:             buffer.flip();
1:c20566f:         }
1:c20566f:         catch (IOException e)
1:c20566f:         {
1:c20566f:             throw new FSReadError(e, getPath());
1:c20566f:         }
1:c20566f:     }
1:c20566f: 
1:30bb255:     @Override
1:30bb255:     public void close()
1:c20566f:     {
1:30bb255:         BufferPool.put(compressedBuffer);
1:30bb255:         super.close();
1:c20566f:     }
1:c20566f: 
1:6a4d106:     @SuppressWarnings("resource") // Closing the ChecksummedDataInput will close the underlying channel.
1:90033b9:     public static ChecksummedDataInput upgradeInput(ChecksummedDataInput input, ICompressor compressor)
1:c20566f:     {
1:c20566f:         long position = input.getPosition();
1:c20566f:         input.close();
1:90033b9: 
1:30bb255:         return new CompressedChecksummedDataInput(new ChannelProxy(input.getPath()), compressor, position);
1:c20566f:     }
1:c20566f: 
1:90033b9:     @VisibleForTesting
1:90033b9:     ICompressor getCompressor()
1:90033b9:     {
1:90033b9:         return compressor;
1:90033b9:     }
1:c20566f: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:cee22ad
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.hints.ChecksummedDataInput.Position;
/////////////////////////////////////////////////////////////////////////
1:     private volatile long filePosition = 0;     // Current position in file, advanced when reading chunk.
1:     private volatile long sourcePosition = 0;   // Current position in file to report, advanced after consuming chunk.
/////////////////////////////////////////////////////////////////////////
1:         this.sourcePosition = this.filePosition = filePosition;
/////////////////////////////////////////////////////////////////////////
1:         return sourcePosition;
1:     }
1: 
1:     static class Position extends ChecksummedDataInput.Position
1:     {
1:         final long bufferStart;
1:         final int bufferPosition;
1: 
1:         public Position(long sourcePosition, long bufferStart, int bufferPosition)
1:         {
1:             super(sourcePosition);
1:             this.bufferStart = bufferStart;
1:             this.bufferPosition = bufferPosition;
1:         }
1: 
1:         @Override
1:         public long subtract(InputPosition o)
1:         {
1:             Position other = (Position) o;
1:             return bufferStart - other.bufferStart + bufferPosition - other.bufferPosition;
1:         }
1:     }
1: 
1:     public InputPosition getSeekPosition()
1:     {
1:         return new Position(sourcePosition, bufferOffset, buffer.position());
1:     }
1: 
1:     public void seek(InputPosition p)
1:     {
1:         Position pos = (Position) p;
1:         bufferOffset = pos.bufferStart;
1:         filePosition = pos.sourcePosition;
1:         buffer.position(0).limit(0);
1:         resetCrc();
1:         reBuffer();
1:         buffer.position(pos.bufferPosition);
1:         assert sourcePosition == pos.sourcePosition;
1:         assert bufferOffset == pos.bufferStart;
1:         assert buffer.position() == pos.bufferPosition;
1:         sourcePosition = filePosition;
1:         if (isEOF())
1:             return;
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1:     public CompressedChecksummedDataInput(ChannelProxy channel, ICompressor compressor, long filePosition)
1:         super(channel, compressor.preferredBufferType());
1:         this.compressor = compressor;
0:         this.filePosition = filePosition;
/////////////////////////////////////////////////////////////////////////
1:     public long getSourcePosition()
1:     {
0:         return filePosition;
1:     }
1: 
1:     @Override
1:     protected void readBuffer()
/////////////////////////////////////////////////////////////////////////
1:             compressedBuffer = BufferPool.get(bufferSize, compressor.preferredBufferType());
/////////////////////////////////////////////////////////////////////////
1:             buffer = BufferPool.get(bufferSize, compressor.preferredBufferType());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void close()
1:         BufferPool.put(compressedBuffer);
1:         super.close();
/////////////////////////////////////////////////////////////////////////
1:         return new CompressedChecksummedDataInput(new ChannelProxy(input.getPath()), compressor, position);
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:6a4d106
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource") // Closing the ChecksummedDataInput will close the underlying channel.
commit:ac7e279
/////////////////////////////////////////////////////////////////////////
0:     // Closing the CompressedChecksummedDataInput will close the underlying channel.
0:     @SuppressWarnings("resource")
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public CompressedChecksummedDataInput(CompressedChecksummedDataInputBuilder builder)
/////////////////////////////////////////////////////////////////////////
1:     public static ChecksummedDataInput upgradeInput(ChecksummedDataInput input, ICompressor compressor)
0:         CompressedChecksummedDataInputBuilder builder = new CompressedChecksummedDataInputBuilder(new ChannelProxy(input.getPath()));
1: 
1:     @VisibleForTesting
1:     ICompressor getCompressor()
1:     {
1:         return compressor;
1:     }
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.io.util.ChannelProxy;
1: import org.apache.cassandra.utils.memory.BufferPool;
1: 
1: public final class CompressedChecksummedDataInput extends ChecksummedDataInput
1: {
1:     private final ICompressor compressor;
0:     private volatile long filePosition = 0;
1:     private volatile ByteBuffer compressedBuffer = null;
1:     private final ByteBuffer metadataBuffer = ByteBuffer.allocate(CompressedHintsWriter.METADATA_SIZE);
1: 
0:     public CompressedChecksummedDataInput(Builder builder)
1:     {
0:         super(builder);
0:         assert regions == null;  //mmapped regions are not supported
1: 
0:         compressor = builder.compressor;
0:         filePosition = builder.position;
1:     }
1: 
1:     /**
1:      * Since an entire block of compressed data is read off of disk, not just a hint at a time,
1:      * we don't report EOF until the decompressed data has also been read completely
1:      */
1:     public boolean isEOF()
1:     {
1:         return filePosition == channel.size() && buffer.remaining() == 0;
1:     }
1: 
0:     protected void reBufferStandard()
1:     {
1:         metadataBuffer.clear();
1:         channel.read(metadataBuffer, filePosition);
1:         filePosition += CompressedHintsWriter.METADATA_SIZE;
1:         metadataBuffer.rewind();
1: 
1:         int uncompressedSize = metadataBuffer.getInt();
1:         int compressedSize = metadataBuffer.getInt();
1: 
1:         if (compressedBuffer == null || compressedSize > compressedBuffer.capacity())
1:         {
1:             int bufferSize = compressedSize + (compressedSize / 20);  // allocate +5% to cover variability in compressed size
1:             if (compressedBuffer != null)
1:             {
1:                 BufferPool.put(compressedBuffer);
1:             }
0:             compressedBuffer = allocateBuffer(bufferSize, compressor.preferredBufferType());
1:         }
1: 
1:         compressedBuffer.clear();
1:         compressedBuffer.limit(compressedSize);
1:         channel.read(compressedBuffer, filePosition);
1:         compressedBuffer.rewind();
1:         filePosition += compressedSize;
1: 
0:         bufferOffset += buffer.position();
1:         if (buffer.capacity() < uncompressedSize)
1:         {
1:             int bufferSize = uncompressedSize + (uncompressedSize / 20);
1:             BufferPool.put(buffer);
0:             buffer = allocateBuffer(bufferSize, compressor.preferredBufferType());
1:         }
1: 
1:         buffer.clear();
1:         buffer.limit(uncompressedSize);
1:         try
1:         {
1:             compressor.uncompress(compressedBuffer, buffer);
1:             buffer.flip();
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, getPath());
1:         }
1:     }
1: 
0:     protected void releaseBuffer()
1:     {
0:         super.releaseBuffer();
1:         if (compressedBuffer != null)
1:         {
1:             BufferPool.put(compressedBuffer);
0:             compressedBuffer = null;
1:         }
1:     }
1: 
0:     protected void reBufferMmap()
1:     {
0:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public static final class Builder extends ChecksummedDataInput.Builder
1:     {
0:         private long position;
0:         private ICompressor compressor;
1: 
0:         public Builder(ChannelProxy channel)
1:         {
0:             super(channel);
0:             bufferType = null;
1:         }
1: 
0:         public CompressedChecksummedDataInput build()
1:         {
0:             assert position >= 0;
0:             assert compressor != null;
0:             return new CompressedChecksummedDataInput(this);
1:         }
1: 
0:         public Builder withCompressor(ICompressor compressor)
1:         {
0:             this.compressor = compressor;
0:             bufferType = compressor.preferredBufferType();
0:             return this;
1:         }
1: 
0:         public Builder withPosition(long position)
1:         {
0:             this.position = position;
0:             return this;
1:         }
1:     }
1: 
0:     public static final CompressedChecksummedDataInput upgradeInput(ChecksummedDataInput input, ICompressor compressor)
1:     {
1:         long position = input.getPosition();
1:         input.close();
1: 
0:         Builder builder = new Builder(new ChannelProxy(input.getPath()));
0:         builder.withPosition(position);
0:         builder.withCompressor(compressor);
0:         return builder.build();
1:     }
1: }
============================================================================