1:455dcc5: /*
1:455dcc5:  * Licensed to the Apache Software Foundation (ASF) under one
1:455dcc5:  * or more contributor license agreements.  See the NOTICE file
1:455dcc5:  * distributed with this work for additional information
1:455dcc5:  * regarding copyright ownership.  The ASF licenses this file
1:455dcc5:  * to you under the Apache License, Version 2.0 (the
1:455dcc5:  * "License"); you may not use this file except in compliance
1:455dcc5:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:455dcc5:  */
1:07cf56f: package org.apache.cassandra.thrift;
1:455dcc5: 
1:bc54786: import java.net.InetSocketAddress;
1:bc54786: import java.net.Socket;
1:bc54786: import java.net.SocketException;
4:bc54786: 
1:bc54786: import org.apache.thrift.transport.TNonblockingServerSocket;
1:bc54786: import org.apache.thrift.transport.TNonblockingSocket;
1:bc54786: import org.apache.thrift.transport.TTransportException;
1:bc54786: import org.slf4j.Logger;
1:bc54786: import org.slf4j.LoggerFactory;
1:bc54786: 
1:bc54786: public class TCustomNonblockingServerSocket extends TNonblockingServerSocket
1:bc54786: {
1:bc54786:     private static final Logger logger = LoggerFactory.getLogger(TCustomNonblockingServerSocket.class);
1:bc54786:     private final boolean keepAlive;
1:bc54786:     private final Integer sendBufferSize;
1:bc54786:     private final Integer recvBufferSize;
1:bc54786: 
1:bc54786:     public TCustomNonblockingServerSocket(InetSocketAddress bindAddr, boolean keepAlive, Integer sendBufferSize, Integer recvBufferSize) throws TTransportException
1:bc54786:     {
1:bc54786:         super(bindAddr);
1:bc54786:         this.keepAlive = keepAlive;
1:bc54786:         this.sendBufferSize = sendBufferSize;
1:bc54786:         this.recvBufferSize = recvBufferSize;
2:bc54786:     }
1:2fd3268: 
1:bc54786:     @Override
1:7aafe05:     @SuppressWarnings("resource")
1:bc54786:     protected TNonblockingSocket acceptImpl() throws TTransportException
1:bc54786:     {
1:bc54786:         TNonblockingSocket tsocket = super.acceptImpl();
1:bc54786:         if (tsocket == null || tsocket.getSocketChannel() == null)
1:bc54786:             return tsocket;
1:bc54786:         Socket socket = tsocket.getSocketChannel().socket();
1:bc54786:         try
1:bc54786:         {
1:bc54786:             socket.setKeepAlive(this.keepAlive);
1:e8438b8:         }
1:e8438b8:         catch (SocketException se)
1:bc54786:         {
1:bc54786:             logger.warn("Failed to set keep-alive on Thrift socket.", se);
1:455dcc5:         }
1:07cdfd0: 
1:bc54786:         if (this.sendBufferSize != null)
1:bc54786:         {
1:bc54786:             try
1:bc54786:             {
1:bc54786:                 socket.setSendBufferSize(this.sendBufferSize.intValue());
1:bc54786:             }
1:bc54786:             catch (SocketException se)
1:bc54786:             {
1:bc54786:                 logger.warn("Failed to set send buffer size on Thrift socket.", se);
1:bc54786:             }
1:bc54786:         }
1:bc54786: 
1:bc54786:         if (this.recvBufferSize != null)
1:bc54786:         {
1:bc54786:             try
1:bc54786:             {
1:bc54786:                 socket.setReceiveBufferSize(this.recvBufferSize.intValue());
1:bc54786:             }
1:bc54786:             catch (SocketException se)
1:bc54786:             {
1:bc54786:                 logger.warn("Failed to set receive buffer size on Thrift socket.", se);
1:bc54786:             }
1:bc54786:         }
1:bc54786:         return tsocket;
1:bc54786:     }
1:bc54786: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Jason Brown
-------------------------------------------------------------------------------
commit:cc9ac82
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.thrift;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e8438b8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.ThriftSessionManager;
/////////////////////////////////////////////////////////////////////////
0:         // Any existing connection we had from this remote socket must be done now, so reset it
0:         ThriftSessionManager.instance.connectionComplete(socket.getRemoteSocketAddress());
1:         }
1:         catch (SocketException se)
commit:455dcc5
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:bc54786
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.thrift;
1: 
1: import java.net.InetSocketAddress;
1: import java.net.Socket;
1: import java.net.SocketException;
1: 
0: import org.apache.cassandra.service.SocketSessionManagementService;
1: import org.apache.thrift.transport.TNonblockingServerSocket;
1: import org.apache.thrift.transport.TNonblockingSocket;
1: import org.apache.thrift.transport.TTransportException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class TCustomNonblockingServerSocket extends TNonblockingServerSocket
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(TCustomNonblockingServerSocket.class);
1:     private final boolean keepAlive;
1:     private final Integer sendBufferSize;
1:     private final Integer recvBufferSize;
1: 
1:     public TCustomNonblockingServerSocket(InetSocketAddress bindAddr, boolean keepAlive, Integer sendBufferSize, Integer recvBufferSize) throws TTransportException
1:     {
1:         super(bindAddr);
1:         this.keepAlive = keepAlive;
1:         this.sendBufferSize = sendBufferSize;
1:         this.recvBufferSize = recvBufferSize;
1:     }
1: 
1:     @Override
1:     protected TNonblockingSocket acceptImpl() throws TTransportException
1:     {
1:         TNonblockingSocket tsocket = super.acceptImpl();
1:         if (tsocket == null || tsocket.getSocketChannel() == null)
1:             return tsocket;
1:         Socket socket = tsocket.getSocketChannel().socket();
0:         // clean up the old information.
0:         SocketSessionManagementService.instance.remove(socket.getRemoteSocketAddress());
1:         try
1:         {
1:             socket.setKeepAlive(this.keepAlive);
0:         } catch (SocketException se)
1:         {
1:             logger.warn("Failed to set keep-alive on Thrift socket.", se);
1:         }
1:         
1:         if (this.sendBufferSize != null)
1:         {
1:             try
1:             {
1:                 socket.setSendBufferSize(this.sendBufferSize.intValue());
1:             }
1:             catch (SocketException se)
1:             {
1:                 logger.warn("Failed to set send buffer size on Thrift socket.", se);
1:             }
1:         }
1: 
1:         if (this.recvBufferSize != null)
1:         {
1:             try
1:             {
1:                 socket.setReceiveBufferSize(this.recvBufferSize.intValue());
1:             }
1:             catch (SocketException se)
1:             {
1:                 logger.warn("Failed to set receive buffer size on Thrift socket.", se);
1:             }
1:         }
1:         return tsocket;
1:     }
1: }
============================================================================