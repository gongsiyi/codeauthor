1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:021ab75:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:021ab75:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
1:f8fa6d2:  */
1:066ef58: package org.apache.cassandra.dht;
1:c8b1ab4: 
1:e7a385a: import java.nio.ByteBuffer;
1:2564647: import java.util.List;
1:2564647: import java.util.Map;
1:e2c6341: import java.util.Optional;
1:47d3b7e: import java.util.Random;
1:67ae1ee: 
1:c8b1ab4: import org.apache.cassandra.db.DecoratedKey;
1:a67f779: import org.apache.cassandra.db.marshal.AbstractType;
1:c8b1ab4: 
1:066ef58: public interface IPartitioner
1:066ef58: {
1:67ae1ee:     /**
1:c8b1ab4:      * Transform key to object representation of the on-disk format.
1:4b54b8a:      *
1:c8b1ab4:      * @param key the raw, client-facing key
1:c8b1ab4:      * @return decorated version of key
1:4b54b8a:      */
1:7e4ef1c:     public DecoratedKey decorateKey(ByteBuffer key);
1:4b54b8a: 
1:4b54b8a:     /**
1:021ab75:      * Calculate a Token representing the approximate "middle" of the given
1:021ab75:      * range.
1:b6b1053:      *
1:021ab75:      * @return The approximate midpoint between left and right.
1:67ae1ee:      */
1:e7a385a:     public Token midpoint(Token left, Token right);
1:67ae1ee: 
1:c8b1ab4:     /**
1:e2a0d75:      * Calculate a Token which take approximate 0 <= ratioToLeft <= 1 ownership of the given range.
1:e2a0d75:      */
1:e2a0d75:     public Token split(Token left, Token right, double ratioToLeft);
1:e2a0d75: 
1:e2a0d75:     /**
1:bc12d73:      * @return A Token smaller than all others in the range that is being partitioned.
1:bc12d73:      * Not legal to assign to a node or key.  (But legal to use in range scans.)
1:c8b1ab4:      */
1:ad84e4d:     public Token getMinimumToken();
1:c8b1ab4: 
1:c8b1ab4:     /**
1:e2c6341:      * The biggest token for this partitioner, unlike getMinimumToken, this token is actually used and users wanting to
1:e2c6341:      * include all tokens need to do getMaximumToken().maxKeyBound()
1:e2c6341:      *
1:e2c6341:      * Not implemented for the ordered partitioners
1:e2c6341:      */
1:e2c6341:     default Token getMaximumToken()
1:e2c6341:     {
1:e2c6341:         throw new UnsupportedOperationException("If you are using a splitting partitioner, getMaximumToken has to be implemented");
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     /**
1:e959b2c:      * @return a Token that can be used to route a given key
1:f3cdaa9:      * (This is NOT a method to create a Token from its string representation;
1:f3cdaa9:      * for that, use TokenFactory.fromString.)
1:c8b1ab4:      */
1:ad84e4d:     public Token getToken(ByteBuffer key);
1:021ab75: 
1:021ab75:     /**
1:e946c63:      * @return a randomly generated token
1:021ab75:      */
1:ad84e4d:     public Token getRandomToken();
1:f8fa6d2: 
1:47d3b7e:     /**
1:47d3b7e:      * @param random instance of Random to use when generating the token
1:47d3b7e:      *
1:47d3b7e:      * @return a randomly generated token
1:47d3b7e:      */
1:47d3b7e:     public Token getRandomToken(Random random);
1:47d3b7e: 
1:066ef58:     public Token.TokenFactory getTokenFactory();
1:f8fa6d2: 
1:f8fa6d2:     /**
1:f8fa6d2:      * @return True if the implementing class preserves key order in the Tokens
1:f8fa6d2:      * it generates.
1:f8fa6d2:      */
1:f8fa6d2:     public boolean preservesOrder();
8:066ef58: 
1:f8fa6d2:     /**
1:2564647:      * Calculate the deltas between tokens in the ring in order to compare
1:2564647:      *  relative sizes.
1:c8b1ab4:      *
1:2564647:      * @param sortedTokens a sorted List of Tokens
1:2564647:      * @return the mapping from 'token' to 'percentage of the ring owned by that token'.
1:e959b2c:      */
1:2564647:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens);
1:066ef58: 
1:a67f779:     public AbstractType<?> getTokenValidator();
1:0a08525: 
1:0a08525:     /**
1:0a08525:      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
1:0a08525:      * Used by secondary indices.
1:0a08525:      */
1:0a08525:     public AbstractType<?> partitionOrdering();
1:e2c6341: 
1:e2c6341:     default Optional<Splitter> splitter()
1:e2c6341:     {
1:e2c6341:         return Optional.empty();
1:e2c6341:     }
1:066ef58: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1:      * Calculate a Token which take approximate 0 <= ratioToLeft <= 1 ownership of the given range.
1:      */
1:     public Token split(Token left, Token right, double ratioToLeft);
1: 
1:     /**
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param random instance of Random to use when generating the token
1:      *
1:      * @return a randomly generated token
1:      */
1:     public Token getRandomToken(Random random);
1: 
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
1: import java.util.Optional;
/////////////////////////////////////////////////////////////////////////
1:      * The biggest token for this partitioner, unlike getMinimumToken, this token is actually used and users wanting to
1:      * include all tokens need to do getMaximumToken().maxKeyBound()
1:      *
1:      * Not implemented for the ordered partitioners
1:      */
1:     default Token getMaximumToken()
1:     {
1:         throw new UnsupportedOperationException("If you are using a splitting partitioner, getMaximumToken has to be implemented");
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
1:     default Optional<Splitter> splitter()
1:     {
1:         return Optional.empty();
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
1:      * Used by secondary indices.
1:      */
1:     public AbstractType<?> partitionOrdering();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1:      *
0:      * @param token
0:      * @return the on-heap memory used by the provided token
1:      */
0:     public long getHeapSizeOf(T token);
1: 
1:     /**
commit:bc12d73
/////////////////////////////////////////////////////////////////////////
1:      * @return A Token smaller than all others in the range that is being partitioned.
1:      * Not legal to assign to a node or key.  (But legal to use in range scans.)
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
commit:5613f8f
commit:7e4ef1c
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey convertFromDiskFormat(ByteBuffer key);
/////////////////////////////////////////////////////////////////////////
1:     public DecoratedKey decorateKey(ByteBuffer key);
commit:5001907
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated Used by SSTables before version 'e'.
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey<T> convertFromDiskFormat(ByteBuffer key);
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey<T> decorateKey(ByteBuffer key);
/////////////////////////////////////////////////////////////////////////
1:     public Token midpoint(Token left, Token right);
/////////////////////////////////////////////////////////////////////////
0:     public T getToken(ByteBuffer key);
commit:b6b1053
/////////////////////////////////////////////////////////////////////////
0:      * @Deprecated: Used by SSTables before version 'e'.
1:      *
/////////////////////////////////////////////////////////////////////////
commit:40df0ce
/////////////////////////////////////////////////////////////////////////
commit:b4cae03
/////////////////////////////////////////////////////////////////////////
commit:4a6b002
/////////////////////////////////////////////////////////////////////////
commit:f3cdaa9
/////////////////////////////////////////////////////////////////////////
1:      * (This is NOT a method to create a Token from its string representation;
1:      * for that, use TokenFactory.fromString.)
commit:e946c63
/////////////////////////////////////////////////////////////////////////
1:      * @return a randomly generated token
0:     public T getRandomToken();
commit:67ae1ee
/////////////////////////////////////////////////////////////////////////
1:     
0:      * Convert the on disk representation to a DecoratedKey object
0:      * @param key On disk representation 
0:      * @return DecoratedKey object
0:     public DecoratedKey<T> convertFromDiskFormat(String key);
1:     
1:     /**
0:      * Convert the DecoratedKey to the on disk format used for
0:      * this partitioner.
0:      * @param key The DecoratedKey in question
0:      * @return
1:      */
0:     public String convertToDiskFormat(DecoratedKey<T> key);    
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey<T> decorateKey(String key);
0:     public Comparator<DecoratedKey<T>> getDecoratedKeyComparator();
commit:c8b1ab4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.DecoratedKey;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Transform key to object representation of the on-disk format.
1:      *
1:      * @param key the raw, client-facing key
1:      * @return decorated version of key
1:      */
0:     public DecoratedKey<T> decorateKeyObj(String key);
1:     
1:     /**
0:      * @return a comparator for decorated key objects, not strings
1:      */
0:     public Comparator<DecoratedKey<T>> getDecoratedKeyObjComparator();
commit:021ab75
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Calculate a Token representing the approximate "middle" of the given
1:      * range.
1: 	 *
0: 	 * The Tokens must have been generated by previous calls to midpoint,
0: 	 * or be equal to this.getMinimumToken(). The range may not wrap unless it
0: 	 * involves this.getMinimumToken().
1:      *
1:      * @return The approximate midpoint between left and right.
1:      */
0:     public T midpoint(T left, T right);
1: 
commit:f8fa6d2
/////////////////////////////////////////////////////////////////////////
0: public interface IPartitioner<T extends Token>
0:      * Transform key to on-disk format s.t. keys are stored in node comparison order.
0:      * This lets bootstrap rip out parts of the sstable sequentially instead of doing random seeks.
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * @return The minimum possible Token in the range that is being partitioned.
1: 	 */
0: 	public T getMinimumToken();
1: 
0:     public T getToken(String key);
0:     public T getDefaultToken();
1:     
1:     /**
1:      * @return True if the implementing class preserves key order in the Tokens
1:      * it generates.
1:      */
1:     public boolean preservesOrder();
commit:e959b2c
/////////////////////////////////////////////////////////////////////////
1:      * @return a Token that can be used to route a given key
0:     public Token getToken(String key);
0:     /**
0:      * @return the default Token to represent this node if none was saved.
0:      * Uses the one given in the InitialToken configuration directive,
0:      * or picks one automatically if that was not given.
1:      */
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
1: package org.apache.cassandra.dht;
1: 
0: import java.util.Comparator;
1: 
1: public interface IPartitioner
1: {
0:     /**
0:      * transform key to on-disk format s.t. keys are stored in node comparison order.
0:      * this lets bootstrap rip out parts of the sstable sequentially instead of doing random seeks.
0:      *
0:      * @param key the raw, client-facing key
0:      * @return decorated on-disk version of key
0:      */
0:     public String decorateKey(String key);
1: 
0:     public String undecorateKey(String decoratedKey);
1: 
0:     public Comparator<String> getDecoratedKeyComparator();
1: 
0:     public Comparator<String> getReverseDecoratedKeyComparator();
1: 
0:     /**
0:      * @return the token to use for this node if none was saved
0:      */
0:     public Token getInitialToken(String key);
1: 
0:     public Token getDefaultToken();
1: 
1:     public Token.TokenFactory getTokenFactory();
1: }
commit:71739ef
commit:bfb2e95
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @return the token to use for this node if none was saved
0:      */
0:     public Token getInitialToken(String key);
commit:907d92e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Token getTokenForKey(String key);
0: 
0:     public Token getDefaultToken();
0: 
0:     public Token.TokenFactory getTokenFactory();
commit:91afe8b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.dht;
commit:40fa7d4
/////////////////////////////////////////////////////////////////////////
0: import java.util.Comparator;
0: import java.util.Iterator;
0: 
0:     /**
0:      * transform key to on-disk format s.t. keys are stored in node comparison order.
0:      * this lets bootstrap rip out parts of the sstable sequentially instead of doing random seeks.
0:      *
0:      * @param key the raw, client-facing key
0:      * @return decorated on-disk version of key
0:      */
0:     public String decorateKey(String key);
0: 
0:     public String undecorateKey(String decoratedKey);
0: 
0:     public Comparator<String> getDecoratedKeyComparator();
0: 
0:     public Comparator<String> getReverseDecoratedKeyComparator();
commit:dd61d51
/////////////////////////////////////////////////////////////////////////
0:     public Comparator<String> getDecoratedKeyComparator();
0: 
commit:20e081f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.dht;
0: 
0: import java.util.Comparator;
0: 
0: public interface IPartitioner
0: {
0:     /** transform key to on-disk format s.t. keys are stored in node comparison order.
0:      *  this lets bootstrap rip out parts of the sstable sequentially instead of doing random seeks. */
0:     public String decorateKey(String key);
0: 
0:     public String undecorateKey(String decoratedKey);
0: 
0:     public Comparator<String> getReverseDecoratedKeyComparator();
0: 
0:     public Token getTokenForKey(String key);
0: 
0:     public Token getDefaultToken();
0: 
0:     public Token.TokenFactory getTokenFactory();
0: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * Abstract type that orders the same way as DecoratedKeys provided by this partitioner.
0:      * Used by secondary indices.
0:      */
0:     public AbstractType<?> partitionOrdering();
commit:07893d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
0: public interface IPartitioner
/////////////////////////////////////////////////////////////////////////
1:     public Token getMinimumToken();
1:     public Token getToken(ByteBuffer key);
0:     public long getHeapSizeOf(Token token);
1:     public Token getRandomToken();
/////////////////////////////////////////////////////////////////////////
0:     public <R extends RingPosition<R>> R minValue(Class<R> klass);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a67f779
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.AbstractType;
/////////////////////////////////////////////////////////////////////////
1:     public AbstractType<?> getTokenValidator();
0: 
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:      * @param key On disk representation
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:      * @param key On disk representation
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:686139a
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @return The minimum possible Token in the range that is being partitioned.
0:      */
0:     public T getMinimumToken();
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public <T extends RingPosition> T minValue(Class<T> klass);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7588f74
/////////////////////////////////////////////////////////////////////////
0:     public <R extends RingPosition> R minValue(Class<R> klass);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:2564647
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * Calculate the deltas between tokens in the ring in order to compare
1:      *  relative sizes.
0:      *
1:      * @param sortedTokens a sorted List of Tokens
1:      * @return the mapping from 'token' to 'percentage of the ring owned by that token'.
0:      */
1:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:a07e71c
/////////////////////////////////////////////////////////////////////////
commit:434564d
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey<T> decorateKey(byte[] key);
/////////////////////////////////////////////////////////////////////////
0:     public T getToken(byte[] key);
commit:f3bb9ac
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey<T> convertFromDiskFormat(byte[] key);
/////////////////////////////////////////////////////////////////////////
0:     public byte[] convertToDiskFormat(DecoratedKey<T> key);    
/////////////////////////////////////////////////////////////////////////
0:     @Deprecated
/////////////////////////////////////////////////////////////////////////
0:     @Deprecated
author:Avinash Lakshman
-------------------------------------------------------------------------------
commit:2b27a9f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.service;
0: 
0: import java.math.BigInteger;
0: 
0: public interface IPartitioner
0: {
0:     public BigInteger hash(String key);
0: }
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.service;
0: 
0: import java.math.BigInteger;
0: 
0: public interface IPartitioner
0: {
0:     public BigInteger hash(String key);
0: }
============================================================================