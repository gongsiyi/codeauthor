1:b867050: /*
1:b867050: * Licensed to the Apache Software Foundation (ASF) under one
1:b867050: * or more contributor license agreements.  See the NOTICE file
1:b867050: * distributed with this work for additional information
1:b867050: * regarding copyright ownership.  The ASF licenses this file
1:b867050: * to you under the Apache License, Version 2.0 (the
1:b867050: * "License"); you may not use this file except in compliance
1:b867050: * with the License.  You may obtain a copy of the License at
1:b867050: *
1:b867050: *    http://www.apache.org/licenses/LICENSE-2.0
1:b867050: *
1:b867050: * Unless required by applicable law or agreed to in writing,
1:b867050: * software distributed under the License is distributed on an
1:b867050: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b867050: * KIND, either express or implied.  See the License for the
1:b867050: * specific language governing permissions and limitations
1:b867050: * under the License.
1:b867050: */
1:b867050: package org.apache.cassandra.utils.concurrent;
1:b867050: 
1:b867050: import java.util.Iterator;
1:b867050: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1:b867050: 
1:b867050: /**
1:b867050:  * A simple append-only collection supporting an unbounded number of concurrent readers/writers,
1:b867050:  * but a bounded number of items.
1:b867050:  *
1:b867050:  * @param <E>
1:b867050:  */
1:b867050: public class Accumulator<E> implements Iterable<E>
1:b867050: {
1:b867050:     private volatile int nextIndex;
1:b867050:     private volatile int presentCount;
1:b867050:     private final Object[] values;
1:b867050:     private static final AtomicIntegerFieldUpdater<Accumulator> nextIndexUpdater = AtomicIntegerFieldUpdater.newUpdater(Accumulator.class, "nextIndex");
1:b867050:     private static final AtomicIntegerFieldUpdater<Accumulator> presentCountUpdater = AtomicIntegerFieldUpdater.newUpdater(Accumulator.class, "presentCount");
1:b867050: 
1:b867050:     public Accumulator(int size)
1:b867050:     {
1:b867050:         values = new Object[size];
1:b867050:     }
1:b867050: 
1:b867050:     /**
1:b867050:      * Adds an item to the collection.
1:b867050:      *
1:b867050:      * Note it is not guaranteed to be visible on exiting the method, if another add was happening concurrently;
1:b867050:      * it will be visible once all concurrent adds (which are non-blocking) complete, but it is not guaranteed
1:b867050:      * that any size change occurs during the execution of any specific call.
1:b867050:      *
1:b867050:      * @param item add to collection
1:b867050:      */
1:b867050:     public void add(E item)
1:b867050:     {
1:b867050:         int insertPos;
1:b867050:         while (true)
1:b867050:         {
1:b867050:             insertPos = nextIndex;
1:b867050:             if (insertPos >= values.length)
1:b867050:                 throw new IllegalStateException();
1:b867050:             if (nextIndexUpdater.compareAndSet(this, insertPos, insertPos + 1))
1:b867050:                 break;
1:b867050:         }
1:b867050:         values[insertPos] = item;
1:b867050:         // we then try to increase presentCount for each consecutive value that is visible after the current size;
1:b867050:         // this should hopefully extend past us, but if it doesn't this behaviour means the lagging write will fix up
1:b867050:         // our state for us.
1:b867050:         //
1:b867050:         // we piggyback off presentCountUpdater to get volatile write semantics for our update to values
1:b867050:         boolean volatileWrite = false;
1:b867050:         while (true)
1:b867050:         {
1:b867050:             int cur = presentCount;
1:b867050:             if (cur != insertPos && (cur == values.length || values[cur] == null))
1:b867050:             {
1:b867050:                 // ensure our item has been made visible before aborting
1:b867050:                 if (!volatileWrite && cur < insertPos && !presentCountUpdater.compareAndSet(this, cur, cur))
1:b867050:                 {
1:b867050:                     // if we fail to CAS it means an older write has completed, and may have not fixed us up
1:b867050:                     // due to our write not being visible
1:b867050:                     volatileWrite = true;
1:b867050:                     continue;
1:b867050:                 }
1:b867050:                 return;
1:b867050:             }
1:b867050:             presentCountUpdater.compareAndSet(this, cur, cur + 1);
1:b867050:             volatileWrite = true;
1:b867050:         }
1:b867050:     }
1:b867050: 
1:b867050:     public boolean isEmpty()
1:b867050:     {
1:178d7b6:         return presentCount == 0;
1:b867050:     }
1:b867050: 
1:b867050:     /**
1:b867050:      * @return the size of guaranteed-to-be-visible portion of the list
1:b867050:      */
1:b867050:     public int size()
1:b867050:     {
1:b867050:         return presentCount;
1:b867050:     }
1:b867050: 
1:a991b64:     public int capacity()
1:a991b64:     {
1:a991b64:         return values.length;
1:a991b64:     }
1:a991b64: 
1:b867050:     public Iterator<E> iterator()
1:b867050:     {
1:b867050:         return new Iterator<E>()
1:b867050:         {
1:b867050:             int p = 0;
1:b867050: 
1:b867050:             public boolean hasNext()
1:b867050:             {
1:b867050:                 return p < presentCount;
1:b867050:             }
1:b867050: 
1:b867050:             public E next()
1:b867050:             {
1:b867050:                 return (E) values[p++];
1:b867050:             }
1:b867050: 
1:b867050:             public void remove()
1:b867050:             {
1:b867050:                 throw new UnsupportedOperationException();
1:b867050:             }
1:b867050:         };
1:b867050:     }
1:b867050: 
1:b867050:     public E get(int i)
1:b867050:     {
1:b867050:         // we read presentCount to guarantee a volatile read of values
1:b867050:         if (i >= presentCount)
1:b867050:             throw new IndexOutOfBoundsException();
1:b867050:         return (E) values[i];
1:b867050:     }
1:b867050: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     public int capacity()
1:     {
1:         return values.length;
1:     }
1: 
commit:178d7b6
/////////////////////////////////////////////////////////////////////////
1:         return presentCount == 0;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:b867050
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import java.util.Iterator;
1: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1: 
1: /**
1:  * A simple append-only collection supporting an unbounded number of concurrent readers/writers,
1:  * but a bounded number of items.
1:  *
1:  * @param <E>
1:  */
1: public class Accumulator<E> implements Iterable<E>
1: {
1:     private volatile int nextIndex;
1:     private volatile int presentCount;
1:     private final Object[] values;
1:     private static final AtomicIntegerFieldUpdater<Accumulator> nextIndexUpdater = AtomicIntegerFieldUpdater.newUpdater(Accumulator.class, "nextIndex");
1:     private static final AtomicIntegerFieldUpdater<Accumulator> presentCountUpdater = AtomicIntegerFieldUpdater.newUpdater(Accumulator.class, "presentCount");
1: 
1:     public Accumulator(int size)
1:     {
1:         values = new Object[size];
1:     }
1: 
1:     /**
1:      * Adds an item to the collection.
1:      *
1:      * Note it is not guaranteed to be visible on exiting the method, if another add was happening concurrently;
1:      * it will be visible once all concurrent adds (which are non-blocking) complete, but it is not guaranteed
1:      * that any size change occurs during the execution of any specific call.
1:      *
1:      * @param item add to collection
1:      */
1:     public void add(E item)
1:     {
1:         int insertPos;
1:         while (true)
1:         {
1:             insertPos = nextIndex;
1:             if (insertPos >= values.length)
1:                 throw new IllegalStateException();
1:             if (nextIndexUpdater.compareAndSet(this, insertPos, insertPos + 1))
1:                 break;
1:         }
1:         values[insertPos] = item;
1:         // we then try to increase presentCount for each consecutive value that is visible after the current size;
1:         // this should hopefully extend past us, but if it doesn't this behaviour means the lagging write will fix up
1:         // our state for us.
1:         //
1:         // we piggyback off presentCountUpdater to get volatile write semantics for our update to values
1:         boolean volatileWrite = false;
1:         while (true)
1:         {
1:             int cur = presentCount;
1:             if (cur != insertPos && (cur == values.length || values[cur] == null))
1:             {
1:                 // ensure our item has been made visible before aborting
1:                 if (!volatileWrite && cur < insertPos && !presentCountUpdater.compareAndSet(this, cur, cur))
1:                 {
1:                     // if we fail to CAS it means an older write has completed, and may have not fixed us up
1:                     // due to our write not being visible
1:                     volatileWrite = true;
1:                     continue;
1:                 }
1:                 return;
1:             }
1:             presentCountUpdater.compareAndSet(this, cur, cur + 1);
1:             volatileWrite = true;
1:         }
1:     }
1: 
1:     public boolean isEmpty()
1:     {
0:         return presentCount != 0;
1:     }
1: 
1:     /**
1:      * @return the size of guaranteed-to-be-visible portion of the list
1:      */
1:     public int size()
1:     {
1:         return presentCount;
1:     }
1: 
1:     public Iterator<E> iterator()
1:     {
1:         return new Iterator<E>()
1:         {
1:             int p = 0;
1: 
1:             public boolean hasNext()
1:             {
1:                 return p < presentCount;
1:             }
1: 
1:             public E next()
1:             {
1:                 return (E) values[p++];
1:             }
1: 
1:             public void remove()
1:             {
1:                 throw new UnsupportedOperationException();
1:             }
1:         };
1:     }
1: 
1:     public E get(int i)
1:     {
1:         // we read presentCount to guarantee a volatile read of values
1:         if (i >= presentCount)
1:             throw new IndexOutOfBoundsException();
1:         return (E) values[i];
1:     }
1: }
============================================================================