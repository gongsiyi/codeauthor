1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.sa;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.Collections;
1:72790dc: import java.util.Comparator;
1:72790dc: import java.util.Iterator;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1:72790dc: import org.apache.cassandra.index.sasi.disk.TokenTreeBuilder;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.utils.Pair;
1:72790dc: 
1:72790dc: public class IntegralSA extends SA<ByteBuffer>
1:72790dc: {
1:72790dc:     public IntegralSA(AbstractType<?> comparator, OnDiskIndexBuilder.Mode mode)
1:72790dc:     {
1:72790dc:         super(comparator, mode);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Term<ByteBuffer> getTerm(ByteBuffer termValue, TokenTreeBuilder tokens)
1:72790dc:     {
1:72790dc:         return new ByteTerm(charCount, termValue, tokens);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public TermIterator finish()
1:72790dc:     {
1:72790dc:         return new IntegralSuffixIterator();
1:72790dc:     }
1:72790dc: 
1:72790dc: 
1:72790dc:     private class IntegralSuffixIterator extends TermIterator
1:72790dc:     {
1:72790dc:         private final Iterator<Term<ByteBuffer>> termIterator;
1:72790dc: 
1:72790dc:         public IntegralSuffixIterator()
1:72790dc:         {
1:72790dc:             Collections.sort(terms, new Comparator<Term<?>>()
1:72790dc:             {
1:72790dc:                 public int compare(Term<?> a, Term<?> b)
1:72790dc:                 {
1:72790dc:                     return a.compareTo(comparator, b);
1:72790dc:                 }
1:72790dc:             });
1:72790dc: 
1:72790dc:             termIterator = terms.iterator();
1:72790dc:         }
1:72790dc: 
1:72790dc:         public ByteBuffer minTerm()
1:72790dc:         {
1:72790dc:             return terms.get(0).getTerm();
1:72790dc:         }
1:72790dc: 
1:72790dc:         public ByteBuffer maxTerm()
1:72790dc:         {
1:72790dc:             return terms.get(terms.size() - 1).getTerm();
1:72790dc:         }
1:72790dc: 
1:2ca2fff:         protected Pair<IndexedTerm, TokenTreeBuilder> computeNext()
1:72790dc:         {
1:72790dc:             if (!termIterator.hasNext())
1:72790dc:                 return endOfData();
1:72790dc: 
1:72790dc:             Term<ByteBuffer> term = termIterator.next();
1:2ca2fff:             return Pair.create(new IndexedTerm(term.getTerm(), false), term.getTokens().finish());
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Jordan West
-------------------------------------------------------------------------------
commit:2ca2fff
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.index.Index;
/////////////////////////////////////////////////////////////////////////
1:         protected Pair<IndexedTerm, TokenTreeBuilder> computeNext()
1:             return Pair.create(new IndexedTerm(term.getTerm(), false), term.getTokens().finish());
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.sa;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.Iterator;
1: 
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1: import org.apache.cassandra.index.sasi.disk.TokenTreeBuilder;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.utils.Pair;
1: 
1: public class IntegralSA extends SA<ByteBuffer>
1: {
1:     public IntegralSA(AbstractType<?> comparator, OnDiskIndexBuilder.Mode mode)
1:     {
1:         super(comparator, mode);
1:     }
1: 
1:     public Term<ByteBuffer> getTerm(ByteBuffer termValue, TokenTreeBuilder tokens)
1:     {
1:         return new ByteTerm(charCount, termValue, tokens);
1:     }
1: 
1:     public TermIterator finish()
1:     {
1:         return new IntegralSuffixIterator();
1:     }
1: 
1: 
1:     private class IntegralSuffixIterator extends TermIterator
1:     {
1:         private final Iterator<Term<ByteBuffer>> termIterator;
1: 
1:         public IntegralSuffixIterator()
1:         {
1:             Collections.sort(terms, new Comparator<Term<?>>()
1:             {
1:                 public int compare(Term<?> a, Term<?> b)
1:                 {
1:                     return a.compareTo(comparator, b);
1:                 }
1:             });
1: 
1:             termIterator = terms.iterator();
1:         }
1: 
1:         public ByteBuffer minTerm()
1:         {
1:             return terms.get(0).getTerm();
1:         }
1: 
1:         public ByteBuffer maxTerm()
1:         {
1:             return terms.get(terms.size() - 1).getTerm();
1:         }
1: 
0:         protected Pair<ByteBuffer, TokenTreeBuilder> computeNext()
1:         {
1:             if (!termIterator.hasNext())
1:                 return endOfData();
1: 
1:             Term<ByteBuffer> term = termIterator.next();
0:             return Pair.create(term.getTerm(), term.getTokens().finish());
1:         }
1:     }
1: }
============================================================================