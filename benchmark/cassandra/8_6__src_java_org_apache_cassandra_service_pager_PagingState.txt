1:b068a9c: /*
1:b068a9c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b068a9c:  * or more contributor license agreements.  See the NOTICE file
1:b068a9c:  * distributed with this work for additional information
1:b068a9c:  * regarding copyright ownership.  The ASF licenses this file
1:b068a9c:  * to you under the Apache License, Version 2.0 (the
1:b068a9c:  * "License"); you may not use this file except in compliance
1:b068a9c:  * with the License.  You may obtain a copy of the License at
1:b068a9c:  *
1:b068a9c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b068a9c:  *
1:b068a9c:  * Unless required by applicable law or agreed to in writing, software
1:b068a9c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b068a9c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b068a9c:  * See the License for the specific language governing permissions and
1:b068a9c:  * limitations under the License.
1:b068a9c:  */
1:b068a9c: package org.apache.cassandra.service.pager;
2:b068a9c: 
1:b068a9c: import java.io.IOException;
1:b068a9c: import java.nio.ByteBuffer;
1:b99c863: import java.util.*;
1:b068a9c: 
1:b99c863: import org.apache.cassandra.config.CFMetaData;
1:b99c863: import org.apache.cassandra.db.Clustering;
1:b99c863: import org.apache.cassandra.db.LegacyLayout;
1:b99c863: import org.apache.cassandra.db.TypeSizes;
1:b99c863: import org.apache.cassandra.db.marshal.AbstractType;
1:b99c863: import org.apache.cassandra.db.marshal.BytesType;
1:b99c863: import org.apache.cassandra.db.rows.Cell;
1:b99c863: import org.apache.cassandra.db.rows.Row;
1:b99c863: import org.apache.cassandra.io.util.DataInputBuffer;
1:75508ec: import org.apache.cassandra.io.util.DataOutputBuffer;
1:c2ecfe7: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1:b99c863: import org.apache.cassandra.net.MessagingService;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:b068a9c: import org.apache.cassandra.transport.ProtocolException;
1:b068a9c: import org.apache.cassandra.utils.ByteBufferUtil;
1:b068a9c: 
1:b068a9c: public class PagingState
2:b068a9c: {
1:b99c863:     public final ByteBuffer partitionKey;  // Can be null for single partition queries.
1:b99c863:     public final RowMark rowMark;          // Can be null if not needed.
1:b068a9c:     public final int remaining;
1:a991b64:     public final int remainingInPartition;
1:b068a9c: 
1:b99c863:     public PagingState(ByteBuffer partitionKey, RowMark rowMark, int remaining, int remainingInPartition)
1:b068a9c:     {
1:b99c863:         this.partitionKey = partitionKey;
1:b99c863:         this.rowMark = rowMark;
1:b068a9c:         this.remaining = remaining;
1:a991b64:         this.remainingInPartition = remainingInPartition;
2:b068a9c:     }
1:35801be: 
1:e0adc16:     public static PagingState deserialize(ByteBuffer bytes, ProtocolVersion protocolVersion)
1:028f539:     {
1:b068a9c:         if (bytes == null)
1:b068a9c:             return null;
1:028f539: 
1:e777301:         try (DataInputBuffer in = new DataInputBuffer(bytes, true))
1:b068a9c:         {
1:b99c863:             ByteBuffer pk;
1:b99c863:             RowMark mark;
1:b99c863:             int remaining, remainingInPartition;
1:e0adc16:             if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
1:b99c863:             {
1:b99c863:                 pk = ByteBufferUtil.readWithShortLength(in);
1:b99c863:                 mark = new RowMark(ByteBufferUtil.readWithShortLength(in), protocolVersion);
1:b99c863:                 remaining = in.readInt();
1:b99c863:                 // Note that while 'in.available()' is theoretically an estimate of how many bytes are available
1:b99c863:                 // without blocking, we know that since we're reading a ByteBuffer it will be exactly how many
1:b99c863:                 // bytes remain to be read. And the reason we want to condition this is for backward compatility
1:b99c863:                 // as we used to not set this.
1:b99c863:                 remainingInPartition = in.available() > 0 ? in.readInt() : Integer.MAX_VALUE;
1:b99c863:             }
1:b99c863:             else
1:b99c863:             {
1:b99c863:                 pk = ByteBufferUtil.readWithVIntLength(in);
1:b99c863:                 mark = new RowMark(ByteBufferUtil.readWithVIntLength(in), protocolVersion);
1:b99c863:                 remaining = (int)in.readUnsignedVInt();
1:b99c863:                 remainingInPartition = (int)in.readUnsignedVInt();
1:b99c863:             }
1:b99c863:             return new PagingState(pk.hasRemaining() ? pk : null,
1:b99c863:                                    mark.mark.hasRemaining() ? mark : null,
1:b99c863:                                    remaining,
1:b99c863:                                    remainingInPartition);
1:b068a9c:         }
1:b068a9c:         catch (IOException e)
1:b068a9c:         {
1:b068a9c:             throw new ProtocolException("Invalid value for the paging state");
1:b068a9c:         }
1:b068a9c:     }
1:b068a9c: 
1:e0adc16:     public ByteBuffer serialize(ProtocolVersion protocolVersion)
1:b068a9c:     {
1:b99c863:         assert rowMark == null || protocolVersion == rowMark.protocolVersion;
1:b99c863:         try (DataOutputBuffer out = new DataOutputBufferFixed(serializedSize(protocolVersion)))
1:b068a9c:         {
1:b99c863:             ByteBuffer pk = partitionKey == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : partitionKey;
1:b99c863:             ByteBuffer mark = rowMark == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : rowMark.mark;
1:e0adc16:             if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
1:b99c863:             {
1:b99c863:                 ByteBufferUtil.writeWithShortLength(pk, out);
1:b99c863:                 ByteBufferUtil.writeWithShortLength(mark, out);
1:b99c863:                 out.writeInt(remaining);
1:b99c863:                 out.writeInt(remainingInPartition);
1:b99c863:             }
1:b99c863:             else
1:b99c863:             {
1:b99c863:                 ByteBufferUtil.writeWithVIntLength(pk, out);
1:b99c863:                 ByteBufferUtil.writeWithVIntLength(mark, out);
1:b99c863:                 out.writeUnsignedVInt(remaining);
1:b99c863:                 out.writeUnsignedVInt(remainingInPartition);
1:b99c863:             }
1:16499ca:             return out.buffer();
1:b068a9c:         }
1:b068a9c:         catch (IOException e)
1:b99c863:         {
1:b068a9c:             throw new RuntimeException(e);
1:b068a9c:         }
1:b068a9c:     }
1:b068a9c: 
1:e0adc16:     public int serializedSize(ProtocolVersion protocolVersion)
1:b068a9c:     {
1:b99c863:         assert rowMark == null || protocolVersion == rowMark.protocolVersion;
1:b99c863:         ByteBuffer pk = partitionKey == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : partitionKey;
1:b99c863:         ByteBuffer mark = rowMark == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : rowMark.mark;
1:e0adc16:         if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
1:b068a9c:         {
1:b99c863:             return ByteBufferUtil.serializedSizeWithShortLength(pk)
1:b99c863:                  + ByteBufferUtil.serializedSizeWithShortLength(mark)
1:b99c863:                  + 8; // remaining & remainingInPartition
1:b99c863:         }
1:b99c863:         else
1:b99c863:         {
1:b99c863:             return ByteBufferUtil.serializedSizeWithVIntLength(pk)
1:b99c863:                  + ByteBufferUtil.serializedSizeWithVIntLength(mark)
1:b99c863:                  + TypeSizes.sizeofUnsignedVInt(remaining)
1:b99c863:                  + TypeSizes.sizeofUnsignedVInt(remainingInPartition);
1:b99c863:         }
1:b99c863:     }
1:b99c863: 
1:b99c863:     @Override
1:b99c863:     public final int hashCode()
1:b99c863:     {
1:b99c863:         return Objects.hash(partitionKey, rowMark, remaining, remainingInPartition);
1:b99c863:     }
1:b99c863: 
1:b99c863:     @Override
1:b99c863:     public final boolean equals(Object o)
1:b99c863:     {
1:b99c863:         if(!(o instanceof PagingState))
1:b99c863:             return false;
1:b99c863:         PagingState that = (PagingState)o;
1:b99c863:         return Objects.equals(this.partitionKey, that.partitionKey)
1:b99c863:             && Objects.equals(this.rowMark, that.rowMark)
1:b99c863:             && this.remaining == that.remaining
1:b99c863:             && this.remainingInPartition == that.remainingInPartition;
1:028f539:     }
1:b068a9c: 
1:35801be:     @Override
1:35801be:     public String toString()
1:35801be:     {
1:a991b64:         return String.format("PagingState(key=%s, cellname=%s, remaining=%d, remainingInPartition=%d",
1:60b23b1:                              partitionKey != null ? ByteBufferUtil.bytesToHex(partitionKey) : null,
1:b99c863:                              rowMark,
1:a991b64:                              remaining,
1:a991b64:                              remainingInPartition);
1:b99c863:     }
1:b99c863: 
1:b99c863:     /**
1:b99c863:      * Marks the last row returned by paging, the one from which paging should continue.
1:b99c863:      * This class essentially holds a row clustering, but due to backward compatibility reasons,
1:b99c863:      * we need to actually store  the cell name for the last cell of the row we're marking when
1:b99c863:      * the protocol v3 is in use, and this class abstract that complication.
1:b99c863:      *
1:b99c863:      * See CASSANDRA-10254 for more details.
1:b99c863:      */
1:b99c863:     public static class RowMark
1:b99c863:     {
1:b99c863:         // This can be null for convenience if no row is marked.
1:b99c863:         private final ByteBuffer mark;
1:e0adc16:         private final ProtocolVersion protocolVersion;
1:b99c863: 
1:e0adc16:         private RowMark(ByteBuffer mark, ProtocolVersion protocolVersion)
1:b99c863:         {
1:b99c863:             this.mark = mark;
1:b99c863:             this.protocolVersion = protocolVersion;
1:b99c863:         }
1:b99c863: 
1:b99c863:         private static List<AbstractType<?>> makeClusteringTypes(CFMetaData metadata)
1:b99c863:         {
1:b99c863:             // This is the types that will be used when serializing the clustering in the paging state. We can't really use the actual clustering
1:b99c863:             // types however because we can't guarantee that there won't be a schema change between when we send the paging state and get it back,
1:b99c863:             // and said schema change could theoretically change one of the clustering types from a fixed width type to a non-fixed one
1:b99c863:             // (say timestamp -> blob). So we simply use a list of BytesTypes (for both reading and writting), which may be slightly inefficient
1:b99c863:             // for fixed-width types, but avoid any risk during schema changes.
1:b99c863:             int size = metadata.clusteringColumns().size();
1:b99c863:             List<AbstractType<?>> l = new ArrayList<>(size);
1:b99c863:             for (int i = 0; i < size; i++)
1:b99c863:                 l.add(BytesType.instance);
1:b99c863:             return l;
1:b99c863:         }
1:b99c863: 
1:e0adc16:         public static RowMark create(CFMetaData metadata, Row row, ProtocolVersion protocolVersion)
1:b99c863:         {
1:b99c863:             ByteBuffer mark;
1:e0adc16:             if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
1:b99c863:             {
1:b99c863:                 // We need to be backward compatible with 2.1/2.2 nodes paging states. Which means we have to send
1:b99c863:                 // the full cellname of the "last" cell in the row we get (since that's how 2.1/2.2 nodes will start after
1:b99c863:                 // that last row if they get that paging state).
1:b99c863:                 Iterator<Cell> cells = row.cellsInLegacyOrder(metadata, true).iterator();
1:b99c863:                 if (!cells.hasNext())
1:b99c863:                 {
1:5847222:                     // If the last returned row has no cell, this means in 2.1/2.2 terms that we stopped on the row
1:5847222:                     // marker. Note that this shouldn't happen if the table is COMPACT.
1:5847222:                     assert !metadata.isCompactTable();
1:5847222:                     mark = LegacyLayout.encodeCellName(metadata, row.clustering(), ByteBufferUtil.EMPTY_BYTE_BUFFER, null);
1:b99c863:                 }
1:b99c863:                 else
1:b99c863:                 {
1:b99c863:                     Cell cell = cells.next();
1:b99c863:                     mark = LegacyLayout.encodeCellName(metadata, row.clustering(), cell.column().name.bytes, cell.column().isComplex() ? cell.path().get(0) : null);
1:b99c863:                 }
1:b99c863:             }
1:b99c863:             else
1:b99c863:             {
1:b99c863:                 // We froze the serialization version to 3.0 as we need to make this this doesn't change (that is, it has to be
1:b99c863:                 // fix for a given version of the protocol).
1:b99c863:                 mark = Clustering.serializer.serialize(row.clustering(), MessagingService.VERSION_30, makeClusteringTypes(metadata));
1:b99c863:             }
1:b99c863:             return new RowMark(mark, protocolVersion);
1:b99c863:         }
1:b99c863: 
1:b99c863:         public Clustering clustering(CFMetaData metadata)
1:b99c863:         {
1:b99c863:             if (mark == null)
1:b99c863:                 return null;
1:b99c863: 
1:e0adc16:             return protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3)
1:b99c863:                  ? LegacyLayout.decodeClustering(metadata, mark)
1:b99c863:                  : Clustering.serializer.deserialize(mark, MessagingService.VERSION_30, makeClusteringTypes(metadata));
1:b99c863:         }
1:b99c863: 
1:b99c863:         @Override
1:b99c863:         public final int hashCode()
1:b99c863:         {
1:b99c863:             return Objects.hash(mark, protocolVersion);
1:b99c863:         }
1:b99c863: 
1:b99c863:         @Override
1:b99c863:         public final boolean equals(Object o)
1:b99c863:         {
1:b99c863:             if(!(o instanceof RowMark))
1:b99c863:                 return false;
1:b99c863:             RowMark that = (RowMark)o;
1:b99c863:             return Objects.equals(this.mark, that.mark) && this.protocolVersion == that.protocolVersion;
1:b99c863:         }
1:b99c863: 
1:b99c863:         @Override
1:b99c863:         public String toString()
1:b99c863:         {
1:5847222:             return mark == null ? "null" : ByteBufferUtil.bytesToHex(mark);
1:b99c863:         }
1:35801be:     }
1:b068a9c: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public static PagingState deserialize(ByteBuffer bytes, ProtocolVersion protocolVersion)
/////////////////////////////////////////////////////////////////////////
1:             if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer serialize(ProtocolVersion protocolVersion)
1:             if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
/////////////////////////////////////////////////////////////////////////
1:     public int serializedSize(ProtocolVersion protocolVersion)
1:         if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
/////////////////////////////////////////////////////////////////////////
1:         private final ProtocolVersion protocolVersion;
1:         private RowMark(ByteBuffer mark, ProtocolVersion protocolVersion)
/////////////////////////////////////////////////////////////////////////
1:         public static RowMark create(CFMetaData metadata, Row row, ProtocolVersion protocolVersion)
1:             if (protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3))
/////////////////////////////////////////////////////////////////////////
1:             return protocolVersion.isSmallerOrEqualTo(ProtocolVersion.V3)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5847222
/////////////////////////////////////////////////////////////////////////
1:                     // If the last returned row has no cell, this means in 2.1/2.2 terms that we stopped on the row
1:                     // marker. Note that this shouldn't happen if the table is COMPACT.
1:                     assert !metadata.isCompactTable();
1:                     mark = LegacyLayout.encodeCellName(metadata, row.clustering(), ByteBufferUtil.EMPTY_BYTE_BUFFER, null);
/////////////////////////////////////////////////////////////////////////
1:             return mark == null ? "null" : ByteBufferUtil.bytesToHex(mark);
commit:b99c863
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.Clustering;
1: import org.apache.cassandra.db.LegacyLayout;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.transport.Server;
1:     public final ByteBuffer partitionKey;  // Can be null for single partition queries.
1:     public final RowMark rowMark;          // Can be null if not needed.
1:     public PagingState(ByteBuffer partitionKey, RowMark rowMark, int remaining, int remainingInPartition)
1:         this.partitionKey = partitionKey;
1:         this.rowMark = rowMark;
0:     public static PagingState deserialize(ByteBuffer bytes, int protocolVersion)
0:             DataInputBuffer in = new DataInputBuffer(bytes, true);
1:             ByteBuffer pk;
1:             RowMark mark;
1:             int remaining, remainingInPartition;
0:             if (protocolVersion <= Server.VERSION_3)
1:             {
1:                 pk = ByteBufferUtil.readWithShortLength(in);
1:                 mark = new RowMark(ByteBufferUtil.readWithShortLength(in), protocolVersion);
1:                 remaining = in.readInt();
1:                 // Note that while 'in.available()' is theoretically an estimate of how many bytes are available
1:                 // without blocking, we know that since we're reading a ByteBuffer it will be exactly how many
1:                 // bytes remain to be read. And the reason we want to condition this is for backward compatility
1:                 // as we used to not set this.
1:                 remainingInPartition = in.available() > 0 ? in.readInt() : Integer.MAX_VALUE;
1:             }
1:             else
1:             {
1:                 pk = ByteBufferUtil.readWithVIntLength(in);
1:                 mark = new RowMark(ByteBufferUtil.readWithVIntLength(in), protocolVersion);
1:                 remaining = (int)in.readUnsignedVInt();
1:                 remainingInPartition = (int)in.readUnsignedVInt();
1:             }
1:             return new PagingState(pk.hasRemaining() ? pk : null,
1:                                    mark.mark.hasRemaining() ? mark : null,
1:                                    remaining,
1:                                    remainingInPartition);
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer serialize(int protocolVersion)
1:         assert rowMark == null || protocolVersion == rowMark.protocolVersion;
1:         try (DataOutputBuffer out = new DataOutputBufferFixed(serializedSize(protocolVersion)))
1:             ByteBuffer pk = partitionKey == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : partitionKey;
1:             ByteBuffer mark = rowMark == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : rowMark.mark;
0:             if (protocolVersion <= Server.VERSION_3)
1:             {
1:                 ByteBufferUtil.writeWithShortLength(pk, out);
1:                 ByteBufferUtil.writeWithShortLength(mark, out);
1:                 out.writeInt(remaining);
1:                 out.writeInt(remainingInPartition);
1:             }
1:             else
1:             {
1:                 ByteBufferUtil.writeWithVIntLength(pk, out);
1:                 ByteBufferUtil.writeWithVIntLength(mark, out);
1:                 out.writeUnsignedVInt(remaining);
1:                 out.writeUnsignedVInt(remainingInPartition);
1:             }
/////////////////////////////////////////////////////////////////////////
0:     public int serializedSize(int protocolVersion)
1:         assert rowMark == null || protocolVersion == rowMark.protocolVersion;
1:         ByteBuffer pk = partitionKey == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : partitionKey;
1:         ByteBuffer mark = rowMark == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : rowMark.mark;
0:         if (protocolVersion <= Server.VERSION_3)
1:         {
1:             return ByteBufferUtil.serializedSizeWithShortLength(pk)
1:                  + ByteBufferUtil.serializedSizeWithShortLength(mark)
1:                  + 8; // remaining & remainingInPartition
1:         }
1:         else
1:         {
1:             return ByteBufferUtil.serializedSizeWithVIntLength(pk)
1:                  + ByteBufferUtil.serializedSizeWithVIntLength(mark)
1:                  + TypeSizes.sizeofUnsignedVInt(remaining)
1:                  + TypeSizes.sizeofUnsignedVInt(remainingInPartition);
1:         }
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
1:         return Objects.hash(partitionKey, rowMark, remaining, remainingInPartition);
1:     }
1: 
1:     @Override
1:     public final boolean equals(Object o)
1:     {
1:         if(!(o instanceof PagingState))
1:             return false;
1:         PagingState that = (PagingState)o;
1:         return Objects.equals(this.partitionKey, that.partitionKey)
1:             && Objects.equals(this.rowMark, that.rowMark)
1:             && this.remaining == that.remaining
1:             && this.remainingInPartition == that.remainingInPartition;
/////////////////////////////////////////////////////////////////////////
1:                              rowMark,
1: 
1:     /**
1:      * Marks the last row returned by paging, the one from which paging should continue.
1:      * This class essentially holds a row clustering, but due to backward compatibility reasons,
1:      * we need to actually store  the cell name for the last cell of the row we're marking when
1:      * the protocol v3 is in use, and this class abstract that complication.
1:      *
1:      * See CASSANDRA-10254 for more details.
1:      */
1:     public static class RowMark
1:     {
1:         // This can be null for convenience if no row is marked.
1:         private final ByteBuffer mark;
0:         private final int protocolVersion;
1: 
0:         private RowMark(ByteBuffer mark, int protocolVersion)
1:         {
1:             this.mark = mark;
1:             this.protocolVersion = protocolVersion;
1:         }
1: 
1:         private static List<AbstractType<?>> makeClusteringTypes(CFMetaData metadata)
1:         {
1:             // This is the types that will be used when serializing the clustering in the paging state. We can't really use the actual clustering
1:             // types however because we can't guarantee that there won't be a schema change between when we send the paging state and get it back,
1:             // and said schema change could theoretically change one of the clustering types from a fixed width type to a non-fixed one
1:             // (say timestamp -> blob). So we simply use a list of BytesTypes (for both reading and writting), which may be slightly inefficient
1:             // for fixed-width types, but avoid any risk during schema changes.
1:             int size = metadata.clusteringColumns().size();
1:             List<AbstractType<?>> l = new ArrayList<>(size);
1:             for (int i = 0; i < size; i++)
1:                 l.add(BytesType.instance);
1:             return l;
1:         }
1: 
0:         public static RowMark create(CFMetaData metadata, Row row, int protocolVersion)
1:         {
1:             ByteBuffer mark;
0:             if (protocolVersion <= Server.VERSION_3)
1:             {
1:                 // We need to be backward compatible with 2.1/2.2 nodes paging states. Which means we have to send
1:                 // the full cellname of the "last" cell in the row we get (since that's how 2.1/2.2 nodes will start after
1:                 // that last row if they get that paging state).
1:                 Iterator<Cell> cells = row.cellsInLegacyOrder(metadata, true).iterator();
1:                 if (!cells.hasNext())
1:                 {
0:                     mark = LegacyLayout.encodeClustering(metadata, row.clustering());
1:                 }
1:                 else
1:                 {
1:                     Cell cell = cells.next();
1:                     mark = LegacyLayout.encodeCellName(metadata, row.clustering(), cell.column().name.bytes, cell.column().isComplex() ? cell.path().get(0) : null);
1:                 }
1:             }
1:             else
1:             {
1:                 // We froze the serialization version to 3.0 as we need to make this this doesn't change (that is, it has to be
1:                 // fix for a given version of the protocol).
1:                 mark = Clustering.serializer.serialize(row.clustering(), MessagingService.VERSION_30, makeClusteringTypes(metadata));
1:             }
1:             return new RowMark(mark, protocolVersion);
1:         }
1: 
1:         public Clustering clustering(CFMetaData metadata)
1:         {
1:             if (mark == null)
1:                 return null;
1: 
0:             return protocolVersion <= Server.VERSION_3
1:                  ? LegacyLayout.decodeClustering(metadata, mark)
1:                  : Clustering.serializer.deserialize(mark, MessagingService.VERSION_30, makeClusteringTypes(metadata));
1:         }
1: 
1:         @Override
1:         public final int hashCode()
1:         {
1:             return Objects.hash(mark, protocolVersion);
1:         }
1: 
1:         @Override
1:         public final boolean equals(Object o)
1:         {
1:             if(!(o instanceof RowMark))
1:                 return false;
1:             RowMark that = (RowMark)o;
1:             return Objects.equals(this.mark, that.mark) && this.protocolVersion == that.protocolVersion;
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
0:             return ByteBufferUtil.bytesToHex(mark);
1:         }
1:     }
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     public final int remainingInPartition;
0:     public PagingState(ByteBuffer partitionKey, ByteBuffer cellName, int remaining, int remainingInPartition)
1:         this.remainingInPartition = remainingInPartition;
/////////////////////////////////////////////////////////////////////////
0:             // Note that while 'in.available()' is theoretically an estimate of how many bytes are available
0:             // without blocking, we know that since we're reading a ByteBuffer it will be exactly how many
0:             // bytes remain to be read. And the reason we want to condition this is for backward compatility
0:             // as we used to not set this.
0:             int remainingInPartition = in.available() > 0 ? in.readInt() : Integer.MAX_VALUE;
0:             return new PagingState(pk, cn, remaining, remainingInPartition);
/////////////////////////////////////////////////////////////////////////
0:             out.writeInt(remainingInPartition);
/////////////////////////////////////////////////////////////////////////
0:              + 8; // remaining & remainingInPartition
1:         return String.format("PagingState(key=%s, cellname=%s, remaining=%d, remainingInPartition=%d",
0:                              ByteBufferUtil.bytesToHex(partitionKey),
0:                              ByteBufferUtil.bytesToHex(cellName),
1:                              remaining,
1:                              remainingInPartition);
commit:35801be
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return String.format("PagingState(key=%s, cellname=%s, remaining=%d", ByteBufferUtil.bytesToHex(partitionKey), ByteBufferUtil.bytesToHex(cellName), remaining);
1:     }
commit:028f539
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
0:     public String toString()
1:     {
0:         return String.format("PagingState(key=%s, cellname=%s, remaining=%d", ByteBufferUtil.bytesToHex(partitionKey), ByteBufferUtil.bytesToHex(cellName), remaining);
1:     }
commit:57769f6
/////////////////////////////////////////////////////////////////////////
0:             result.flip();
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service.pager;
1: 
0: import java.io.DataInput;
0: import java.io.DataInputStream;
0: import java.io.DataOutput;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.io.util.ByteBufferOutputStream;
1: import org.apache.cassandra.transport.ProtocolException;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class PagingState
1: {
0:     public final ByteBuffer partitionKey;
0:     public final ByteBuffer cellName;
1:     public final int remaining;
1: 
0:     public PagingState(ByteBuffer partitionKey, ByteBuffer cellName, int remaining)
1:     {
0:         this.partitionKey = partitionKey == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : partitionKey;
0:         this.cellName = cellName == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : cellName;
1:         this.remaining = remaining;
1:     }
1: 
0:     public static PagingState deserialize(ByteBuffer bytes)
1:     {
1:         if (bytes == null)
1:             return null;
1: 
0:         try
1:         {
0:             DataInputStream in = new DataInputStream(ByteBufferUtil.inputStream(bytes));
0:             ByteBuffer pk = ByteBufferUtil.readWithShortLength(in);
0:             ByteBuffer cn = ByteBufferUtil.readWithShortLength(in);
0:             int remaining = in.readInt();
0:             return new PagingState(pk, cn, remaining);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new ProtocolException("Invalid value for the paging state");
1:         }
1:     }
1: 
0:     public ByteBuffer serialize()
1:     {
0:         try
1:         {
0:             ByteBuffer result = ByteBuffer.allocate(serializedSize());
0:             DataOutput out = new DataOutputStream(new ByteBufferOutputStream(result));
0:             ByteBufferUtil.writeWithShortLength(partitionKey, out);
0:             ByteBufferUtil.writeWithShortLength(cellName, out);
0:             out.writeInt(remaining);
0:             return result;
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
0:     private int serializedSize()
1:     {
0:         return 2 + partitionKey.remaining()
0:              + 2 + cellName.remaining()
0:              + 4;
1:     }
1: }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:60b23b1
/////////////////////////////////////////////////////////////////////////
1:                              partitionKey != null ? ByteBufferUtil.bytesToHex(partitionKey) : null,
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e777301
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         try (DataInputBuffer in = new DataInputBuffer(bytes, true))
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
0:         try (DataOutputBuffer out = new DataOutputBufferFixed(serializedSize()))
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c2ecfe7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBufferFixed;
/////////////////////////////////////////////////////////////////////////
0:             DataOutputBuffer out = new DataOutputBufferFixed(serializedSize());
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1:             return out.buffer();
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBuffer;
/////////////////////////////////////////////////////////////////////////
0:             DataOutputBuffer out = new DataOutputBuffer(serializedSize());
0:             return out.asByteBuffer();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
============================================================================