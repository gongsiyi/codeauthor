1:b6661ac: /*
1:b6661ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:b6661ac:  * or more contributor license agreements.  See the NOTICE file
1:b6661ac:  * distributed with this work for additional information
1:b6661ac:  * regarding copyright ownership.  The ASF licenses this file
1:b6661ac:  * to you under the Apache License, Version 2.0 (the
1:b6661ac:  * "License"); you may not use this file except in compliance
1:b6661ac:  * with the License.  You may obtain a copy of the License at
1:b6661ac:  *
1:b6661ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b6661ac:  *
1:b6661ac:  * Unless required by applicable law or agreed to in writing, software
1:b6661ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b6661ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6661ac:  * See the License for the specific language governing permissions and
1:b6661ac:  * limitations under the License.
1:b6661ac:  */
1:b6661ac: 
1:b6661ac: package org.apache.cassandra.tools.nodetool.formatter;
1:b6661ac: 
1:b6661ac: import java.io.ByteArrayOutputStream;
1:b6661ac: import java.io.PrintStream;
1:b6661ac: 
1:b6661ac: import org.junit.Test;
1:b6661ac: 
1:b6661ac: import static org.junit.Assert.assertEquals;
1:b6661ac: 
1:b6661ac: public class TableBuilderTest
1:b6661ac: {
1:b6661ac:     @Test
1:b6661ac:     public void testEmptyRow()
1:b6661ac:     {
1:b6661ac:         TableBuilder table = new TableBuilder();
1:b6661ac: 
1:b6661ac:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:b6661ac:         try (PrintStream out = new PrintStream(baos))
1:b6661ac:         {
1:b6661ac:             table.printTo(out);
1:b6661ac:         }
1:b6661ac:         assertEquals("", baos.toString());
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     @Test
1:b6661ac:     public void testOneRow()
1:b6661ac:     {
1:b6661ac:         TableBuilder table = new TableBuilder();
1:b6661ac: 
1:b6661ac:         table.add("a", "bb", "ccc");
1:b6661ac:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:b6661ac:         try (PrintStream out = new PrintStream(baos))
1:b6661ac:         {
1:b6661ac:             table.printTo(out);
1:b6661ac:         }
1:b6661ac:         assertEquals(String.format("a bb ccc%n"), baos.toString());
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     @Test
1:b6661ac:     public void testRows()
1:b6661ac:     {
1:b6661ac:         TableBuilder table = new TableBuilder();
1:b6661ac:         table.add("a", "bb", "ccc");
1:b6661ac:         table.add("aaa", "bb", "c");
1:b6661ac:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:b6661ac:         try (PrintStream out = new PrintStream(baos))
1:b6661ac:         {
1:b6661ac:             table.printTo(out);
1:b6661ac:         }
1:b6661ac:         assertEquals(String.format("a   bb ccc%naaa bb c  %n"), baos.toString());
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     @Test
1:b6661ac:     public void testNullColumn()
1:b6661ac:     {
1:b6661ac:         TableBuilder table = new TableBuilder();
1:b6661ac:         table.add("a", "b", "c");
1:b6661ac:         table.add("a", null, "c");
1:b6661ac:         table.add("a", null, null);
1:b6661ac:         table.add(null, "b", "c");
1:b6661ac:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:b6661ac:         try (PrintStream out = new PrintStream(baos))
1:b6661ac:         {
1:b6661ac:             table.printTo(out);
1:b6661ac:         }
1:b6661ac:         assertEquals(String.format("a b c%na   c%na    %n  b c%n"), baos.toString());
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     @Test
1:b6661ac:     public void testRowsOfDifferentSize()
1:b6661ac:     {
1:b6661ac:         TableBuilder table = new TableBuilder();
1:b6661ac:         table.add("a", "b", "c");
1:b6661ac:         table.add("a", "b", "c", "d", "e");
1:b6661ac:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:b6661ac:         try (PrintStream out = new PrintStream(baos))
1:b6661ac:         {
1:b6661ac:             table.printTo(out);
1:b6661ac:         }
1:b6661ac:         assertEquals(baos.toString(), String.format("a b c    %na b c d e%n"), baos.toString());
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     @Test
1:b6661ac:     public void testDelimiter()
1:b6661ac:     {
1:b6661ac:         TableBuilder table = new TableBuilder('\t');
1:b6661ac: 
1:b6661ac:         table.add("a", "bb", "ccc");
1:b6661ac:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:b6661ac:         try (PrintStream out = new PrintStream(baos))
1:b6661ac:         {
1:b6661ac:             table.printTo(out);
1:b6661ac:         }
1:b6661ac:         assertEquals(String.format("a\tbb\tccc%n"), baos.toString());
1:b6661ac:     }
1:b6661ac: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b6661ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.formatter;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.PrintStream;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class TableBuilderTest
1: {
1:     @Test
1:     public void testEmptyRow()
1:     {
1:         TableBuilder table = new TableBuilder();
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try (PrintStream out = new PrintStream(baos))
1:         {
1:             table.printTo(out);
1:         }
1:         assertEquals("", baos.toString());
1:     }
1: 
1:     @Test
1:     public void testOneRow()
1:     {
1:         TableBuilder table = new TableBuilder();
1: 
1:         table.add("a", "bb", "ccc");
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try (PrintStream out = new PrintStream(baos))
1:         {
1:             table.printTo(out);
1:         }
1:         assertEquals(String.format("a bb ccc%n"), baos.toString());
1:     }
1: 
1:     @Test
1:     public void testRows()
1:     {
1:         TableBuilder table = new TableBuilder();
1:         table.add("a", "bb", "ccc");
1:         table.add("aaa", "bb", "c");
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try (PrintStream out = new PrintStream(baos))
1:         {
1:             table.printTo(out);
1:         }
1:         assertEquals(String.format("a   bb ccc%naaa bb c  %n"), baos.toString());
1:     }
1: 
1:     @Test
1:     public void testNullColumn()
1:     {
1:         TableBuilder table = new TableBuilder();
1:         table.add("a", "b", "c");
1:         table.add("a", null, "c");
1:         table.add("a", null, null);
1:         table.add(null, "b", "c");
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try (PrintStream out = new PrintStream(baos))
1:         {
1:             table.printTo(out);
1:         }
1:         assertEquals(String.format("a b c%na   c%na    %n  b c%n"), baos.toString());
1:     }
1: 
1:     @Test
1:     public void testRowsOfDifferentSize()
1:     {
1:         TableBuilder table = new TableBuilder();
1:         table.add("a", "b", "c");
1:         table.add("a", "b", "c", "d", "e");
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try (PrintStream out = new PrintStream(baos))
1:         {
1:             table.printTo(out);
1:         }
1:         assertEquals(baos.toString(), String.format("a b c    %na b c d e%n"), baos.toString());
1:     }
1: 
1:     @Test
1:     public void testDelimiter()
1:     {
1:         TableBuilder table = new TableBuilder('\t');
1: 
1:         table.add("a", "bb", "ccc");
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try (PrintStream out = new PrintStream(baos))
1:         {
1:             table.printTo(out);
1:         }
1:         assertEquals(String.format("a\tbb\tccc%n"), baos.toString());
1:     }
1: }
============================================================================