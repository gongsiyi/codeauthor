1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:a5d095e: import static org.apache.commons.lang3.StringUtils.EMPTY;
1:a5d095e: 
1:c5a8190: import io.airlift.command.Arguments;
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: import io.airlift.command.Option;
1:c5a8190: 
1:c5a8190: import java.util.ArrayList;
1:c5a8190: import java.util.List;
1:c5a8190: 
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:c5a8190: 
1:836a30b: @Command(name = "compact", description = "Force a (major) compaction on one or more tables or user-defined compaction on given SSTables")
1:c5a8190: public class Compact extends NodeToolCmd
1:c5a8190: {
1:836a30b:     @Arguments(usage = "[<keyspace> <tables>...] or <SSTable file>...", description = "The keyspace followed by one or many tables or list of SSTable data files when using --user-defined")
1:c5a8190:     private List<String> args = new ArrayList<>();
1:c5a8190: 
1:c5a8190:     @Option(title = "split_output", name = {"-s", "--split-output"}, description = "Use -s to not create a single big file")
1:c5a8190:     private boolean splitOutput = false;
1:c5a8190: 
1:836a30b:     @Option(title = "user-defined", name = {"--user-defined"}, description = "Use --user-defined to submit listed files for user-defined compaction")
1:836a30b:     private boolean userDefined = false;
1:836a30b: 
1:a5d095e:     @Option(title = "start_token", name = {"-st", "--start-token"}, description = "Use -st to specify a token at which the compaction range starts")
1:a5d095e:     private String startToken = EMPTY;
1:a5d095e: 
1:a5d095e:     @Option(title = "end_token", name = {"-et", "--end-token"}, description = "Use -et to specify a token at which compaction range ends")
1:a5d095e:     private String endToken = EMPTY;
1:a5d095e: 
1:a5d095e: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:836a30b:     {
1:a5d095e:         final boolean tokenProvided = !(startToken.isEmpty() && endToken.isEmpty());
1:a5d095e:         if (splitOutput && (userDefined || tokenProvided))
1:c5a8190:         {
1:a5d095e:             throw new RuntimeException("Invalid option combination: Can not use split-output here");
1:836a30b:         }
1:a5d095e:         if (userDefined && tokenProvided)
1:a5d095e:         {
1:a5d095e:             throw new RuntimeException("Invalid option combination: Can not provide tokens when using user-defined");
1:a5d095e:         }
1:a5d095e: 
1:a5d095e:         if (userDefined)
1:836a30b:         {
1:836a30b:             try
1:836a30b:             {
1:836a30b:                 String userDefinedFiles = String.join(",", args);
1:836a30b:                 probe.forceUserDefinedCompaction(userDefinedFiles);
1:836a30b:             } catch (Exception e) {
1:836a30b:                 throw new RuntimeException("Error occurred during user defined compaction", e);
1:836a30b:             }
1:836a30b:             return;
1:836a30b:         }
1:836a30b: 
1:c5a8190:         List<String> keyspaces = parseOptionalKeyspace(args, probe);
1:0bd5170:         String[] tableNames = parseOptionalTables(args);
1:c5a8190: 
1:c5a8190:         for (String keyspace : keyspaces)
1:c5a8190:         {
1:c5a8190:             try
1:c5a8190:             {
1:a5d095e:                 if (tokenProvided)
1:a5d095e:                 {
1:a5d095e:                     probe.forceKeyspaceCompactionForTokenRange(keyspace, startToken, endToken, tableNames);
1:a5d095e:                 }
1:a5d095e:                 else
1:a5d095e:                 {
1:a5d095e:                     probe.forceKeyspaceCompaction(splitOutput, keyspace, tableNames);
1:a5d095e:                 }
1:c5a8190:             } catch (Exception e)
1:c5a8190:             {
1:c5a8190:                 throw new RuntimeException("Error occurred during compaction", e);
1:c5a8190:             }
1:c5a8190:         }
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Vishy Kasar
-------------------------------------------------------------------------------
commit:a5d095e
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.commons.lang3.StringUtils.EMPTY;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Option(title = "start_token", name = {"-st", "--start-token"}, description = "Use -st to specify a token at which the compaction range starts")
1:     private String startToken = EMPTY;
1: 
1:     @Option(title = "end_token", name = {"-et", "--end-token"}, description = "Use -et to specify a token at which compaction range ends")
1:     private String endToken = EMPTY;
1: 
1: 
1:         final boolean tokenProvided = !(startToken.isEmpty() && endToken.isEmpty());
1:         if (splitOutput && (userDefined || tokenProvided))
1:             throw new RuntimeException("Invalid option combination: Can not use split-output here");
1:         if (userDefined && tokenProvided)
1:         {
1:             throw new RuntimeException("Invalid option combination: Can not provide tokens when using user-defined");
1:         }
1: 
1:         if (userDefined)
/////////////////////////////////////////////////////////////////////////
1:                 if (tokenProvided)
1:                 {
1:                     probe.forceKeyspaceCompactionForTokenRange(keyspace, startToken, endToken, tableNames);
1:                 }
1:                 else
1:                 {
1:                     probe.forceKeyspaceCompaction(splitOutput, keyspace, tableNames);
1:                 }
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:836a30b
/////////////////////////////////////////////////////////////////////////
1: @Command(name = "compact", description = "Force a (major) compaction on one or more tables or user-defined compaction on given SSTables")
1:     @Arguments(usage = "[<keyspace> <tables>...] or <SSTable file>...", description = "The keyspace followed by one or many tables or list of SSTable data files when using --user-defined")
1:     @Option(title = "user-defined", name = {"--user-defined"}, description = "Use --user-defined to submit listed files for user-defined compaction")
1:     private boolean userDefined = false;
1: 
0:         if (splitOutput && userDefined)
1:         {
0:             throw new RuntimeException("Invalid option combination: User defined compaction can not be split");
1:         }
0:         else if (userDefined)
1:         {
1:             try
1:             {
1:                 String userDefinedFiles = String.join(",", args);
1:                 probe.forceUserDefinedCompaction(userDefinedFiles);
1:             } catch (Exception e) {
1:                 throw new RuntimeException("Error occurred during user defined compaction", e);
1:             }
1:             return;
1:         }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:0bd5170
/////////////////////////////////////////////////////////////////////////
1:         String[] tableNames = parseOptionalTables(args);
0:                 probe.forceKeyspaceCompaction(splitOutput, keyspace, tableNames);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: import io.airlift.command.Option;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
0: @Command(name = "compact", description = "Force a (major) compaction on one or more tables")
1: public class Compact extends NodeToolCmd
1: {
0:     @Arguments(usage = "[<keyspace> <tables>...]", description = "The keyspace followed by one or many tables")
1:     private List<String> args = new ArrayList<>();
1: 
1:     @Option(title = "split_output", name = {"-s", "--split-output"}, description = "Use -s to not create a single big file")
1:     private boolean splitOutput = false;
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         List<String> keyspaces = parseOptionalKeyspace(args, probe);
0:         String[] cfnames = parseOptionalColumnFamilies(args);
1: 
1:         for (String keyspace : keyspaces)
1:         {
1:             try
1:             {
0:                 probe.forceKeyspaceCompaction(splitOutput, keyspace, cfnames);
1:             } catch (Exception e)
1:             {
1:                 throw new RuntimeException("Error occurred during compaction", e);
1:             }
1:         }
1:     }
1: }
============================================================================