1:25411bf: /*
1:25411bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:25411bf:  * or more contributor license agreements.  See the NOTICE file
1:25411bf:  * distributed with this work for additional information
1:25411bf:  * regarding copyright ownership.  The ASF licenses this file
1:25411bf:  * to you under the Apache License, Version 2.0 (the
1:25411bf:  * "License"); you may not use this file except in compliance
1:25411bf:  * with the License.  You may obtain a copy of the License at
2:25411bf:  *
1:25411bf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:25411bf:  *
1:25411bf:  * Unless required by applicable law or agreed to in writing, software
1:25411bf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25411bf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25411bf:  * See the License for the specific language governing permissions and
1:25411bf:  * limitations under the License.
2:25411bf:  */
1:25411bf: package org.apache.cassandra.cql3.statements;
12:25411bf: 
1:25411bf: import java.util.ArrayList;
1:816c905: import java.util.HashSet;
1:25411bf: import java.util.List;
1:94be12c: 
1:cb5897f: import org.apache.cassandra.auth.*;
1:cb5897f: import org.apache.cassandra.config.DatabaseDescriptor;
1:b4d7f3b: import org.apache.cassandra.config.Schema;
1:25411bf: import org.apache.cassandra.cql3.CQL3Type;
1:25411bf: import org.apache.cassandra.cql3.ColumnIdentifier;
1:44fa12e: import org.apache.cassandra.cql3.functions.*;
1:44fa12e: import org.apache.cassandra.db.marshal.AbstractType;
1:cb5897f: import org.apache.cassandra.exceptions.*;
1:3566843: import org.apache.cassandra.schema.Functions;
1:25411bf: import org.apache.cassandra.service.ClientState;
1:25411bf: import org.apache.cassandra.service.MigrationManager;
1:25411bf: import org.apache.cassandra.service.QueryState;
1:b4d7f3b: import org.apache.cassandra.thrift.ThriftValidation;
1:25411bf: import org.apache.cassandra.transport.Event;
1:25411bf: 
2:25411bf: /**
1:6eea3ea:  * A {@code CREATE FUNCTION} statement parsed from a CQL query.
1:25411bf:  */
1:25411bf: public final class CreateFunctionStatement extends SchemaAlteringStatement
1:b4d7f3b: {
1:44fa12e:     private final boolean orReplace;
1:44fa12e:     private final boolean ifNotExists;
1:b4d7f3b:     private FunctionName functionName;
1:44fa12e:     private final String language;
1:44fa12e:     private final String body;
1:25411bf: 
1:44fa12e:     private final List<ColumnIdentifier> argNames;
1:44fa12e:     private final List<CQL3Type.Raw> argRawTypes;
1:44fa12e:     private final CQL3Type.Raw rawReturnType;
1:1937bed:     private final boolean calledOnNullInput;
1:dcc3bb0: 
1:cb5897f:     private List<AbstractType<?>> argTypes;
1:cb5897f:     private AbstractType<?> returnType;
1:25411bf: 
1:44fa12e:     public CreateFunctionStatement(FunctionName functionName,
1:44fa12e:                                    String language,
1:44fa12e:                                    String body,
1:44fa12e:                                    List<ColumnIdentifier> argNames,
1:44fa12e:                                    List<CQL3Type.Raw> argRawTypes,
1:44fa12e:                                    CQL3Type.Raw rawReturnType,
1:1937bed:                                    boolean calledOnNullInput,
1:44fa12e:                                    boolean orReplace,
1:44fa12e:                                    boolean ifNotExists)
8:25411bf:     {
1:25411bf:         this.functionName = functionName;
1:25411bf:         this.language = language;
1:25411bf:         this.body = body;
1:44fa12e:         this.argNames = argNames;
1:44fa12e:         this.argRawTypes = argRawTypes;
1:44fa12e:         this.rawReturnType = rawReturnType;
1:1937bed:         this.calledOnNullInput = calledOnNullInput;
1:25411bf:         this.orReplace = orReplace;
1:25411bf:         this.ifNotExists = ifNotExists;
8:25411bf:     }
1:794d68b: 
1:cb5897f:     public Prepared prepare() throws InvalidRequestException
1:794d68b:     {
1:816c905:         if (new HashSet<>(argNames).size() != argNames.size())
1:816c905:             throw new InvalidRequestException(String.format("duplicate argument names for given function %s with argument names %s",
1:816c905:                                                             functionName, argNames));
1:816c905: 
1:cb5897f:         argTypes = new ArrayList<>(argRawTypes.size());
1:44fa12e:         for (CQL3Type.Raw rawType : argRawTypes)
1:1de8e39:             argTypes.add(prepareType("arguments", rawType));
1:44fa12e: 
1:1de8e39:         returnType = prepareType("return type", rawReturnType);
1:cb5897f:         return super.prepare();
1:794d68b:     }
1:44fa12e: 
1:b4d7f3b:     public void prepareKeyspace(ClientState state) throws InvalidRequestException
1:44fa12e:     {
1:e2f35c7:         if (!functionName.hasKeyspace() && state.getRawKeyspace() != null)
1:e2f35c7:             functionName = new FunctionName(state.getRawKeyspace(), functionName.name);
1:794d68b: 
1:b4d7f3b:         if (!functionName.hasKeyspace())
1:e2f35c7:             throw new InvalidRequestException("Functions must be fully qualified with a keyspace name if a keyspace is not set for the session");
1:b4d7f3b: 
1:b4d7f3b:         ThriftValidation.validateKeyspaceNotSystem(functionName.keyspace);
1:b4d7f3b:     }
1:b4d7f3b: 
1:cb5897f:     protected void grantPermissionsToCreator(QueryState state)
1:25411bf:     {
1:25411bf:         try
1:25411bf:         {
1:cb5897f:             IResource resource = FunctionResource.function(functionName.keyspace, functionName.name, argTypes);
1:cb5897f:             DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:cb5897f:                                                      resource.applicablePermissions(),
1:cb5897f:                                                      resource,
1:cb5897f:                                                      RoleResource.role(state.getClientState().getUser().getName()));
1:25411bf:         }
1:cb5897f:         catch (RequestExecutionException e)
1:25411bf:         {
1:25411bf:             throw new RuntimeException(e);
1:25411bf:         }
1:25411bf:     }
1:b4d7f3b: 
1:b4d7f3b:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:25411bf:     {
1:3566843:         if (Schema.instance.findFunction(functionName, argTypes).isPresent() && orReplace)
1:cb5897f:             state.ensureHasPermission(Permission.ALTER, FunctionResource.function(functionName.keyspace,
1:cb5897f:                                                                                   functionName.name,
1:cb5897f:                                                                                   argTypes));
1:cb5897f:         else
1:cb5897f:             state.ensureHasPermission(Permission.CREATE, FunctionResource.keyspace(functionName.keyspace));
1:25411bf:     }
1:25411bf: 
1:44fa12e:     public void validate(ClientState state) throws InvalidRequestException
1:25411bf:     {
1:e37d577:         UDFunction.assertUdfsEnabled(language);
1:6c0a462: 
1:44fa12e:         if (ifNotExists && orReplace)
1:44fa12e:             throw new InvalidRequestException("Cannot use both 'OR REPLACE' and 'IF NOT EXISTS' directives");
1:b4d7f3b: 
1:b4d7f3b:         if (Schema.instance.getKSMetaData(functionName.keyspace) == null)
1:b4d7f3b:             throw new InvalidRequestException(String.format("Cannot add function '%s' to non existing keyspace '%s'.", functionName.name, functionName.keyspace));
1:25411bf:     }
1:25411bf: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
1:25411bf:     {
1:3566843:         Function old = Schema.instance.findFunction(functionName, argTypes).orElse(null);
1:2cbd776:         boolean replaced = old != null;
1:2cbd776:         if (replaced)
1:25411bf:         {
1:44fa12e:             if (ifNotExists)
1:2cbd776:                 return null;
1:44fa12e:             if (!orReplace)
1:44fa12e:                 throw new InvalidRequestException(String.format("Function %s already exists", old));
1:e2f35c7:             if (!(old instanceof ScalarFunction))
1:e2f35c7:                 throw new InvalidRequestException(String.format("Function %s can only replace a function", old));
1:1937bed:             if (calledOnNullInput != ((ScalarFunction) old).isCalledOnNullInput())
1:1937bed:                 throw new InvalidRequestException(String.format("Function %s can only be replaced with %s", old,
1:1937bed:                                                                 calledOnNullInput ? "CALLED ON NULL INPUT" : "RETURNS NULL ON NULL INPUT"));
1:44fa12e: 
1:3566843:             if (!Functions.typesMatch(old.returnType(), returnType))
1:44fa12e:                 throw new InvalidRequestException(String.format("Cannot replace function %s, the new return type %s is not compatible with the return type %s of existing function",
1:44fa12e:                                                                 functionName, returnType.asCQL3Type(), old.returnType().asCQL3Type()));
1:44fa12e:         }
1:44fa12e: 
1:2cbd776:         UDFunction udFunction = UDFunction.create(functionName, argNames, argTypes, returnType, calledOnNullInput, language, body);
1:dcc3bb0: 
1:dcc3bb0:         MigrationManager.announceNewFunction(udFunction, isLocalOnly);
1:dcc3bb0: 
1:2cbd776:         return new Event.SchemaChange(replaced ? Event.SchemaChange.Change.UPDATED : Event.SchemaChange.Change.CREATED,
1:2cbd776:                                       Event.SchemaChange.Target.FUNCTION,
1:2cbd776:                                       udFunction.name().keyspace, udFunction.name().name, AbstractType.asCQLTypeStringList(udFunction.argTypes()));
1:25411bf:     }
1:25411bf: 
1:1de8e39:     private AbstractType<?> prepareType(String typeName, CQL3Type.Raw rawType)
1:25411bf:     {
1:1de8e39:         if (rawType.isFrozen())
1:1de8e39:             throw new InvalidRequestException(String.format("The function %s should not be frozen; remove the frozen<> modifier", typeName));
1:25411bf: 
1:1de8e39:         // UDT are not supported non frozen but we do not allow the frozen keyword for argument. So for the moment we
1:1de8e39:         // freeze them here
1:1de8e39:         if (!rawType.canBeNonFrozen())
1:1de8e39:             rawType.freeze();
1:25411bf: 
1:1de8e39:         AbstractType<?> type = rawType.prepare(functionName.keyspace).getType();
1:25411bf:         return type;
1:25411bf:     }
1:25411bf: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
1:         boolean replaced = old != null;
1:         if (replaced)
1:                 return null;
/////////////////////////////////////////////////////////////////////////
1:         UDFunction udFunction = UDFunction.create(functionName, argNames, argTypes, returnType, calledOnNullInput, language, body);
1:         return new Event.SchemaChange(replaced ? Event.SchemaChange.Change.UPDATED : Event.SchemaChange.Change.CREATED,
1:                                       Event.SchemaChange.Target.FUNCTION,
1:                                       udFunction.name().keyspace, udFunction.name().name, AbstractType.asCQLTypeStringList(udFunction.argTypes()));
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.functions.*;
1: import org.apache.cassandra.db.marshal.AbstractType;
1:     private final boolean orReplace;
1:     private final boolean ifNotExists;
0:     private final FunctionName functionName;
1:     private final String language;
1:     private final String body;
0:     private final boolean deterministic;
1:     private final List<ColumnIdentifier> argNames;
1:     private final List<CQL3Type.Raw> argRawTypes;
1:     private final CQL3Type.Raw rawReturnType;
1:     public CreateFunctionStatement(FunctionName functionName,
1:                                    String language,
1:                                    String body,
0:                                    boolean deterministic,
1:                                    List<ColumnIdentifier> argNames,
1:                                    List<CQL3Type.Raw> argRawTypes,
1:                                    CQL3Type.Raw rawReturnType,
1:                                    boolean orReplace,
1:                                    boolean ifNotExists)
1:         this.argNames = argNames;
1:         this.argRawTypes = argRawTypes;
1:         this.rawReturnType = rawReturnType;
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state) throws InvalidRequestException
1:         if (ifNotExists && orReplace)
1:             throw new InvalidRequestException("Cannot use both 'OR REPLACE' and 'IF NOT EXISTS' directives");
/////////////////////////////////////////////////////////////////////////
0:         List<AbstractType<?>> argTypes = new ArrayList<>(argRawTypes.size());
1:         for (CQL3Type.Raw rawType : argRawTypes)
0:             // We have no proper keyspace to give, which means that this will break (NPE currently)
0:             // for UDT: #7791 is open to fix this
0:             argTypes.add(rawType.prepare(null).getType());
1: 
0:         AbstractType<?> returnType = rawReturnType.prepare(null).getType();
1: 
0:         Function old = Functions.find(functionName, argTypes);
0:         if (old != null)
1:         {
1:             if (ifNotExists)
0:                 return false;
1:             if (!orReplace)
1:                 throw new InvalidRequestException(String.format("Function %s already exists", old));
1: 
0:             // Means we're replacing the function. We still need to validate that 1) it's not a native function and 2) that the return type
0:             // matches (or that could break existing code badly)
0:             if (old.isNative())
0:                 throw new InvalidRequestException(String.format("Cannot replace native function %s", old));
0:             if (!old.returnType().isValueCompatibleWith(returnType))
1:                 throw new InvalidRequestException(String.format("Cannot replace function %s, the new return type %s is not compatible with the return type %s of existing function",
1:                                                                 functionName, returnType.asCQL3Type(), old.returnType().asCQL3Type()));
1:         }
1: 
0:         MigrationManager.announceNewFunction(UDFunction.create(functionName, argNames, argTypes, returnType, language, body, deterministic), isLocalOnly);
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e37d577
/////////////////////////////////////////////////////////////////////////
1:         UDFunction.assertUdfsEnabled(language);
commit:94be12c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         // add function to registry to prevent duplicate compilation on coordinator during migration
0:         Functions.addOrReplaceFunction(udFunction);
1: 
commit:6eea3ea
/////////////////////////////////////////////////////////////////////////
1:  * A {@code CREATE FUNCTION} statement parsed from a CQL query.
/////////////////////////////////////////////////////////////////////////
0:             argTypes.add(rawType.prepare(functionName.keyspace).getType());
0:         returnType = rawReturnType.prepare(functionName.keyspace).getType();
/////////////////////////////////////////////////////////////////////////
commit:6c0a462
/////////////////////////////////////////////////////////////////////////
0:         if (!DatabaseDescriptor.enableUserDefinedFunctions())
0:             throw new InvalidRequestException("User-defined-functions are disabled in cassandra.yaml - set enable_user_defined_functions=true to enable if you are aware of the security risks");
1: 
commit:1937bed
/////////////////////////////////////////////////////////////////////////
1:     private final boolean calledOnNullInput;
/////////////////////////////////////////////////////////////////////////
1:                                    boolean calledOnNullInput,
/////////////////////////////////////////////////////////////////////////
1:         this.calledOnNullInput = calledOnNullInput;
/////////////////////////////////////////////////////////////////////////
1:             if (calledOnNullInput != ((ScalarFunction) old).isCalledOnNullInput())
1:                 throw new InvalidRequestException(String.format("Function %s can only be replaced with %s", old,
1:                                                                 calledOnNullInput ? "CALLED ON NULL INPUT" : "RETURNS NULL ON NULL INPUT"));
0:         this.udFunction = UDFunction.create(functionName, argNames, argTypes, returnType, calledOnNullInput, language, body);
commit:dcc3bb0
/////////////////////////////////////////////////////////////////////////
0:     private UDFunction udFunction;
0:     private boolean replaced;
1: 
/////////////////////////////////////////////////////////////////////////
0:         return new Event.SchemaChange(replaced ? Event.SchemaChange.Change.UPDATED : Event.SchemaChange.Change.CREATED,
0:                                       Event.SchemaChange.Target.FUNCTION,
0:                                       udFunction.name().keyspace, udFunction.name().name, AbstractType.asCQLTypeStringList(udFunction.argTypes()));
/////////////////////////////////////////////////////////////////////////
0:         this.udFunction = UDFunction.create(functionName, argNames, argTypes, returnType, language, body, deterministic);
0:         this.replaced = old != null;
1: 
1:         MigrationManager.announceNewFunction(udFunction, isLocalOnly);
1: 
commit:e2f35c7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!functionName.hasKeyspace() && state.getRawKeyspace() != null)
1:             functionName = new FunctionName(state.getRawKeyspace(), functionName.name);
1:             throw new InvalidRequestException("Functions must be fully qualified with a keyspace name if a keyspace is not set for the session");
/////////////////////////////////////////////////////////////////////////
1:             if (!(old instanceof ScalarFunction))
1:                 throw new InvalidRequestException(String.format("Function %s can only replace a function", old));
commit:794d68b
/////////////////////////////////////////////////////////////////////////
0:     private String currentKeyspace;
/////////////////////////////////////////////////////////////////////////
0:         currentKeyspace = state.getRawKeyspace();
1: 
0:         if (!functionName.hasKeyspace() && currentKeyspace != null)
0:             functionName = new FunctionName(currentKeyspace, functionName.name);
/////////////////////////////////////////////////////////////////////////
0:             argTypes.add(rawType.prepare(typeKeyspace(rawType)).getType());
0:         AbstractType<?> returnType = rawReturnType.prepare(typeKeyspace(rawReturnType)).getType();
/////////////////////////////////////////////////////////////////////////
0:             if (!Functions.typeEquals(old.returnType(), returnType))
/////////////////////////////////////////////////////////////////////////
1: 
0:     private String typeKeyspace(CQL3Type.Raw rawType)
1:     {
0:         String ks = rawType.keyspace();
0:         if (ks != null)
0:             return ks;
0:         return functionName.keyspace;
1:     }
commit:b4d7f3b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.Schema;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.thrift.ThriftValidation;
/////////////////////////////////////////////////////////////////////////
1:     private FunctionName functionName;
/////////////////////////////////////////////////////////////////////////
1:     public void prepareKeyspace(ClientState state) throws InvalidRequestException
1:     {
0:         if (!functionName.hasKeyspace() && state.getRawKeyspace() != null)
0:             functionName = new FunctionName(state.getKeyspace(), functionName.name);
1: 
1:         if (!functionName.hasKeyspace())
0:             throw new InvalidRequestException("You need to be logged in a keyspace or use a fully qualified function name");
1: 
1:         ThriftValidation.validateKeyspaceNotSystem(functionName.keyspace);
1:     }
1: 
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
0:         state.hasKeyspaceAccess(functionName.keyspace, Permission.CREATE);
1: 
1:         if (Schema.instance.getKSMetaData(functionName.keyspace) == null)
1:             throw new InvalidRequestException(String.format("Cannot add function '%s' to non existing keyspace '%s'.", functionName.name, functionName.keyspace));
/////////////////////////////////////////////////////////////////////////
0:             argTypes.add(rawType.prepare(functionName.keyspace).getType());
/////////////////////////////////////////////////////////////////////////
commit:816c905
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1:         if (new HashSet<>(argNames).size() != argNames.size())
1:             throw new InvalidRequestException(String.format("duplicate argument names for given function %s with argument names %s",
1:                                                             functionName, argNames));
1: 
commit:25411bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.config.UFMetaData;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.ColumnIdentifier;
0: import org.apache.cassandra.cql3.QueryOptions;
0: import org.apache.cassandra.cql3.functions.Functions;
0: import org.apache.cassandra.cql3.udf.UDFRegistry;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.RequestValidationException;
0: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.MigrationManager;
1: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.transport.Event;
0: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: /**
0:  * A <code>CREATE FUNCTION</code> statement parsed from a CQL query.
1:  */
1: public final class CreateFunctionStatement extends SchemaAlteringStatement
1: {
0:     final boolean orReplace;
0:     final boolean ifNotExists;
0:     final String namespace;
0:     final String functionName;
0:     final String qualifiedName;
0:     final String language;
0:     final String body;
0:     final boolean deterministic;
0:     final CQL3Type.Raw returnType;
0:     final List<Argument> arguments;
1: 
0:     private UFMetaData ufMeta;
1: 
0:     public CreateFunctionStatement(String namespace, String functionName, String language, String body, boolean deterministic,
0:                                    CQL3Type.Raw returnType, List<Argument> arguments, boolean orReplace, boolean ifNotExists)
1:     {
0:         super();
0:         this.namespace = namespace != null ? namespace : "";
1:         this.functionName = functionName;
0:         this.qualifiedName = UFMetaData.qualifiedName(namespace, functionName);
1:         this.language = language;
1:         this.body = body;
0:         this.deterministic = deterministic;
0:         this.returnType = returnType;
0:         this.arguments = arguments;
0:         assert functionName != null : "null function name";
0:         assert language != null : "null function language";
0:         assert body != null : "null function body";
0:         assert returnType != null : "null function returnType";
0:         assert arguments != null : "null function arguments";
1:         this.orReplace = orReplace;
1:         this.ifNotExists = ifNotExists;
1:     }
1: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException
1:     {
0:         // TODO CASSANDRA-7557 (function DDL permission)
1: 
0:         state.hasAllKeyspacesAccess(Permission.CREATE);
1:     }
1: 
1:     /**
0:      * The <code>CqlParser</code> only goes as far as extracting the keyword arguments
0:      * from these statements, so this method is responsible for processing and
0:      * validating.
1:      *
0:      * @throws org.apache.cassandra.exceptions.InvalidRequestException if arguments are missing or unacceptable
1:      */
0:     public void validate(ClientState state) throws RequestValidationException
1:     {
0:         if (!namespace.isEmpty() && !namespace.matches("\\w+"))
0:             throw new InvalidRequestException(String.format("\"%s\" is not a valid function name", qualifiedName));
0:         if (!functionName.matches("\\w+"))
0:             throw new InvalidRequestException(String.format("\"%s\" is not a valid function name", qualifiedName));
0:         if (namespace.length() > Schema.NAME_LENGTH)
0:             throw new InvalidRequestException(String.format("UDF namespace names shouldn't be more than %s characters long (got \"%s\")", Schema.NAME_LENGTH, qualifiedName));
0:         if (functionName.length() > Schema.NAME_LENGTH)
0:             throw new InvalidRequestException(String.format("UDF function names shouldn't be more than %s characters long (got \"%s\")", Schema.NAME_LENGTH, qualifiedName));
1:     }
1: 
0:     public Event.SchemaChange changeEvent()
1:     {
0:         return null;
1:     }
1: 
0:     public ResultMessage executeInternal(QueryState state, QueryOptions options)
1:     {
1:         try
1:         {
0:             doExecute();
0:             return super.executeInternal(state, options);
1:         }
0:         catch (RequestValidationException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
0:     public ResultMessage execute(QueryState state, QueryOptions options) throws RequestValidationException
1:     {
0:         doExecute();
0:         return super.execute(state, options);
1:     }
1: 
0:     private void doExecute() throws RequestValidationException
1:     {
0:         boolean exists = UDFRegistry.hasFunction(qualifiedName);
0:         if (exists && ifNotExists)
0:             throw new InvalidRequestException(String.format("Function '%s' already exists.", qualifiedName));
0:         if (exists && !orReplace)
0:             throw new InvalidRequestException(String.format("Function '%s' already exists.", qualifiedName));
1: 
0:         if (namespace.isEmpty() && Functions.contains(functionName))
0:             throw new InvalidRequestException(String.format("Function name '%s' is reserved by CQL.", qualifiedName));
1: 
0:         List<Argument> args = arguments;
0:         List<String> argumentNames = new ArrayList<>(args.size());
0:         List<String> argumentTypes = new ArrayList<>(args.size());
0:         for (Argument arg : args)
1:         {
0:             argumentNames.add(arg.getName().toString());
0:             argumentTypes.add(arg.getType().toString());
1:         }
0:         this.ufMeta = new UFMetaData(namespace, functionName, deterministic, argumentNames, argumentTypes,
0:                                      returnType.toString(), language, body);
1: 
0:         UDFRegistry.tryCreateFunction(ufMeta);
1:     }
1: 
0:     public void announceMigration(boolean isLocalOnly) throws RequestValidationException
1:     {
0:         MigrationManager.announceNewFunction(ufMeta, isLocalOnly);
1:     }
1: 
0:     public static final class Argument
1:     {
0:         final ColumnIdentifier name;
0:         final CQL3Type.Raw type;
1: 
0:         public Argument(ColumnIdentifier name, CQL3Type.Raw type)
1:         {
0:             this.name = name;
0:             this.type = type;
1:         }
1: 
0:         public ColumnIdentifier getName()
1:         {
0:             return name;
1:         }
1: 
0:         public CQL3Type.Raw getType()
1:         {
1:             return type;
1:         }
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3566843
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.Functions;
/////////////////////////////////////////////////////////////////////////
1:         if (Schema.instance.findFunction(functionName, argTypes).isPresent() && orReplace)
/////////////////////////////////////////////////////////////////////////
1:         Function old = Schema.instance.findFunction(functionName, argTypes).orElse(null);
/////////////////////////////////////////////////////////////////////////
1:             if (!Functions.typesMatch(old.returnType(), returnType))
/////////////////////////////////////////////////////////////////////////
author:blerer
-------------------------------------------------------------------------------
commit:1de8e39
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.Operation.RawUpdate;
/////////////////////////////////////////////////////////////////////////
1:             argTypes.add(prepareType("arguments", rawType));
1:         returnType = prepareType("return type", rawReturnType);
/////////////////////////////////////////////////////////////////////////
0: 
1:     private AbstractType<?> prepareType(String typeName, CQL3Type.Raw rawType)
0:     {
1:         if (rawType.isFrozen())
1:             throw new InvalidRequestException(String.format("The function %s should not be frozen; remove the frozen<> modifier", typeName));
0: 
1:         // UDT are not supported non frozen but we do not allow the frozen keyword for argument. So for the moment we
1:         // freeze them here
1:         if (!rawType.canBeNonFrozen())
1:             rawType.freeze();
0: 
1:         AbstractType<?> type = rawType.prepare(functionName.keyspace).getType();
0:         return type;
0:     }
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:b2abcb7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         this.udFunction = UDFunction.create(functionName, argNames, argTypes, returnType, language, body);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.exceptions.*;
0: import org.apache.cassandra.service.QueryState;
/////////////////////////////////////////////////////////////////////////
1:     private List<AbstractType<?>> argTypes;
1:     private AbstractType<?> returnType;
/////////////////////////////////////////////////////////////////////////
1:     public Prepared prepare() throws InvalidRequestException
0:     {
0:         if (new HashSet<>(argNames).size() != argNames.size())
0:             throw new InvalidRequestException(String.format("duplicate argument names for given function %s with argument names %s",
0:                                                             functionName, argNames));
0: 
1:         argTypes = new ArrayList<>(argRawTypes.size());
0:         for (CQL3Type.Raw rawType : argRawTypes)
0:             argTypes.add(rawType.prepare(typeKeyspace(rawType)).getType());
0: 
0:         returnType = rawReturnType.prepare(typeKeyspace(rawReturnType)).getType();
1:         return super.prepare();
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     protected void grantPermissionsToCreator(QueryState state)
0:     {
0:         try
0:         {
1:             IResource resource = FunctionResource.function(functionName.keyspace, functionName.name, argTypes);
1:             DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:                                                      resource.applicablePermissions(),
1:                                                      resource,
1:                                                      RoleResource.role(state.getClientState().getUser().getName()));
0:         }
1:         catch (RequestExecutionException e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:     }
0: 
0:         if (Functions.find(functionName, argTypes) != null && orReplace)
1:             state.ensureHasPermission(Permission.ALTER, FunctionResource.function(functionName.keyspace,
1:                                                                                   functionName.name,
1:                                                                                   argTypes));
1:         else
1:             state.ensureHasPermission(Permission.CREATE, FunctionResource.keyspace(functionName.keyspace));
/////////////////////////////////////////////////////////////////////////
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:e60d9f4
============================================================================