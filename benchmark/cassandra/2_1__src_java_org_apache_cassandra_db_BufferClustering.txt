1:2f41243: /*
1:2f41243:  * Licensed to the Apache Software Foundation (ASF) under one
1:2f41243:  * or more contributor license agreements.  See the NOTICE file
1:2f41243:  * distributed with this work for additional information
1:2f41243:  * regarding copyright ownership.  The ASF licenses this file
1:2f41243:  * to you under the Apache License, Version 2.0 (the
1:2f41243:  * "License"); you may not use this file except in compliance
1:2f41243:  * with the License.  You may obtain a copy of the License at
1:2f41243:  *
1:2f41243:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2f41243:  *
1:2f41243:  * Unless required by applicable law or agreed to in writing, software
1:2f41243:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f41243:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f41243:  * See the License for the specific language governing permissions and
1:2f41243:  * limitations under the License.
1:2f41243:  */
1:2f41243: package org.apache.cassandra.db;
2:2f41243: 
1:2f41243: import java.nio.ByteBuffer;
1:2f41243: 
1:2f41243: /**
1:2f41243:  * The clustering column values for a row.
1:2f41243:  * <p>
1:2f41243:  * A {@code Clustering} is a {@code ClusteringPrefix} that must always be "complete", i.e. have
1:2f41243:  * as many values as there is clustering columns in the table it is part of. It is the clustering
1:2f41243:  * prefix used by rows.
1:2f41243:  * <p>
1:2f41243:  * Note however that while it's size must be equal to the table clustering size, a clustering can have
1:2f41243:  * {@code null} values, and this mostly for thrift backward compatibility (in practice, if a value is null,
1:2f41243:  * all of the following ones will be too because that's what thrift allows, but it's never assumed by the
1:2f41243:  * code so we could start generally allowing nulls for clustering columns if we wanted to).
1:2f41243:  */
1:2f41243: public class BufferClustering extends AbstractBufferClusteringPrefix implements Clustering
1:2f41243: {
1:2f41243:     BufferClustering(ByteBuffer... values)
1:2f41243:     {
1:2f41243:         super(Kind.CLUSTERING, values);
1:2f41243:     }
1:2f41243: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.utils.memory.AbstractAllocator;
1: 
1: /**
1:  * The clustering column values for a row.
1:  * <p>
1:  * A {@code Clustering} is a {@code ClusteringPrefix} that must always be "complete", i.e. have
1:  * as many values as there is clustering columns in the table it is part of. It is the clustering
1:  * prefix used by rows.
1:  * <p>
1:  * Note however that while it's size must be equal to the table clustering size, a clustering can have
1:  * {@code null} values, and this mostly for thrift backward compatibility (in practice, if a value is null,
1:  * all of the following ones will be too because that's what thrift allows, but it's never assumed by the
1:  * code so we could start generally allowing nulls for clustering columns if we wanted to).
1:  */
1: public class BufferClustering extends AbstractBufferClusteringPrefix implements Clustering
1: {
1:     BufferClustering(ByteBuffer... values)
1:     {
1:         super(Kind.CLUSTERING, values);
1:     }
1: }
============================================================================