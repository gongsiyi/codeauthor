1:0160ad5: /*
1:0160ad5:  * Licensed to the Apache Software Foundation (ASF) under one
1:0160ad5:  * or more contributor license agreements.  See the NOTICE file
1:0160ad5:  * distributed with this work for additional information
1:0160ad5:  * regarding copyright ownership.  The ASF licenses this file
1:0160ad5:  * to you under the Apache License, Version 2.0 (the
1:0160ad5:  * "License"); you may not use this file except in compliance
1:0160ad5:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:0160ad5:  */
1:07cf56f: package org.apache.cassandra.auth;
1:bddfa9e: 
1:8a8427d: import java.net.InetAddress;
1:bddfa9e: import java.util.Collections;
1:f8f6fb2: import java.util.Map;
1:bddfa9e: import java.util.Set;
1:bddfa9e: 
1:bddfa9e: import org.apache.cassandra.exceptions.AuthenticationException;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:bddfa9e: 
1:2f0e62c: public class AllowAllAuthenticator implements IAuthenticator
3:bddfa9e: {
1:879b694:     private static final SaslNegotiator AUTHENTICATOR_INSTANCE = new Negotiator();
1:879b694: 
1:bddfa9e:     public boolean requireAuthentication()
1:bddfa9e:     {
1:bddfa9e:         return false;
3:bddfa9e:     }
1:bddfa9e: 
1:bddfa9e:     public Set<IResource> protectedResources()
1:bddfa9e:     {
3:bddfa9e:         return Collections.emptySet();
1:bddfa9e:     }
1:bddfa9e: 
1:4d4ef96:     public void validateConfiguration() throws ConfigurationException
1:bddfa9e:     {
1:bddfa9e:     }
1:bddfa9e: 
1:bddfa9e:     public void setup()
1:879b694:     {
1:bddfa9e:     }
1:879b694: 
1:8a8427d:     public SaslNegotiator newSaslNegotiator(InetAddress clientAddress)
1:bddfa9e:     {
1:879b694:         return AUTHENTICATOR_INSTANCE;
1:879b694:     }
1:879b694: 
1:879b694:     public AuthenticatedUser legacyAuthenticate(Map<String, String> credentialsData)
1:879b694:     {
1:879b694:         return AuthenticatedUser.ANONYMOUS_USER;
1:879b694:     }
1:879b694: 
1:879b694:     private static class Negotiator implements SaslNegotiator
1:879b694:     {
1:879b694: 
1:879b694:         public byte[] evaluateResponse(byte[] clientResponse) throws AuthenticationException
1:879b694:         {
1:879b694:             return null;
1:879b694:         }
1:879b694: 
1:879b694:         public boolean isComplete()
1:879b694:         {
1:879b694:             return true;
1:879b694:         }
1:879b694: 
1:879b694:         public AuthenticatedUser getAuthenticatedUser() throws AuthenticationException
1:879b694:         {
1:879b694:             return AuthenticatedUser.ANONYMOUS_USER;
1:879b694:         }
1:879b694:     }
1:bddfa9e: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:8a8427d
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
1:     public SaslNegotiator newSaslNegotiator(InetAddress clientAddress)
commit:879b694
/////////////////////////////////////////////////////////////////////////
1:     private static final SaslNegotiator AUTHENTICATOR_INSTANCE = new Negotiator();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public SaslNegotiator newSaslNegotiator()
1:     {
1:         return AUTHENTICATOR_INSTANCE;
1:     }
1: 
1:     public AuthenticatedUser legacyAuthenticate(Map<String, String> credentialsData)
1:     {
1:         return AuthenticatedUser.ANONYMOUS_USER;
1:     }
1: 
1:     private static class Negotiator implements SaslNegotiator
1:     {
1: 
1:         public byte[] evaluateResponse(byte[] clientResponse) throws AuthenticationException
1:         {
1:             return null;
1:         }
1: 
1:         public boolean isComplete()
1:         {
1:             return true;
1:         }
1: 
1:         public AuthenticatedUser getAuthenticatedUser() throws AuthenticationException
1:         {
1:             return AuthenticatedUser.ANONYMOUS_USER;
1:         }
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Set;
1: import org.apache.cassandra.exceptions.AuthenticationException;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
1:     public boolean requireAuthentication()
1:         return false;
0:     public Set<Option> supportedOptions()
1:         return Collections.emptySet();
1:     }
0:     public Set<Option> alterableOptions()
1:     {
1:         return Collections.emptySet();
1:     }
1: 
0:     public AuthenticatedUser authenticate(Map<String, String> credentials) throws AuthenticationException
1:     {
0:         return AuthenticatedUser.ANONYMOUS_USER;
1:     }
1: 
0:     public void create(String username, Map<Option, Object> options) throws InvalidRequestException
1:     {
0:         throw new InvalidRequestException("CREATE USER operation is not supported by AllowAllAuthenticator");
1:     }
1: 
0:     public void alter(String username, Map<Option, Object> options) throws InvalidRequestException
1:     {
0:         throw new InvalidRequestException("ALTER USER operation is not supported by AllowAllAuthenticator");
1:     }
1: 
0:     public void drop(String username) throws InvalidRequestException
1:     {
0:         throw new InvalidRequestException("DROP USER operation is not supported by AllowAllAuthenticator");
1:     }
1: 
1:     public Set<IResource> protectedResources()
1:     {
1:         return Collections.emptySet();
1:     }
1: 
1:     public void setup()
1:     {
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
0:     private final static AuthenticatedUser DEFAULT_USER = new AuthenticatedUser("nobody");
0:         return DEFAULT_USER;
0: 
0:         CharSequence username = credentials.get(IAuthenticator.USERNAME_KEY);
0:         if (username == null)
0:             return DEFAULT_USER;
0:         return new AuthenticatedUser((String)username);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.auth;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:5e75a7f
/////////////////////////////////////////////////////////////////////////
commit:0160ad5
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:94c45e7
/////////////////////////////////////////////////////////////////////////
0:     public AuthenticatedUser authenticate(Map<? extends CharSequence,? extends CharSequence> credentials) throws AuthenticationException
commit:f8f6fb2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
0:     private final static AuthenticatedUser USER = new AuthenticatedUser("allow_all");
0: 
0:     public AuthenticatedUser defaultUser()
0:         return USER;
0:     }
0: 
0:     @Override
0:     public AuthenticatedUser authenticate(Map<String,String> credentials) throws AuthenticationException
0:     {
0:         return USER;
0:     @Override    
0:     {
0:         // pass
commit:9f65dd4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
0:     
0:    @Override    
0:     public void validateConfiguration() throws ConfigurationException {
0:         // do nothing, no configuration to validate
0:     }
commit:059b006
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AccessLevel;
/////////////////////////////////////////////////////////////////////////
0:     public AccessLevel login(String keyspace, AuthenticationRequest authRequest) throws AuthenticationException, AuthorizationException
0:         return AccessLevel.FULL;
commit:542bd79
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AuthenticationException;
0: import org.apache.cassandra.thrift.AuthenticationRequest;
0: import org.apache.cassandra.thrift.AuthorizationException;
commit:2f0e62c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.auth;
0: 
0: import org.apache.cassandra.service.AuthenticationException;
0: import org.apache.cassandra.service.AuthenticationRequest;
0: import org.apache.cassandra.service.AuthorizationException;
0: 
1: public class AllowAllAuthenticator implements IAuthenticator
0: {
0:     @Override
0:     public void login(String keyspace, AuthenticationRequest authRequest) throws AuthenticationException, AuthorizationException
0:     {
0:         // do nothing, allow anything
0:     }
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:de5715e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AccessLevel;
0: import org.apache.cassandra.thrift.AuthenticationRequest;
0:     public AccessLevel login(String keyspace, AuthenticationRequest authRequest) throws AuthenticationException, AuthorizationException
0:         // do nothing, allow anything
0:         return AccessLevel.FULL;
0:    @Override    
0:    {
commit:3f9f507
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0:     private final static AuthenticatedUser USER = new AuthenticatedUser("allow_all", true);
0: 
0:     public AuthenticatedUser defaultUser()
0:         return USER;
0:     }
0: 
0:     @Override
0:     public AuthenticatedUser login(Map<String,String> credentials) throws AuthenticationException, AuthorizationException
0:     {
0:         return USER;
0:     @Override    
0:     {
commit:4d4ef96
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:     public void validateConfiguration() throws ConfigurationException
0:    {
============================================================================