1:31e669a: /*
1:31e669a:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e669a:  * or more contributor license agreements.  See the NOTICE file
1:31e669a:  * distributed with this work for additional information
1:31e669a:  * regarding copyright ownership.  The ASF licenses this file
1:31e669a:  * to you under the Apache License, Version 2.0 (the
1:31e669a:  * "License"); you may not use this file except in compliance
1:31e669a:  * with the License.  You may obtain a copy of the License at
1:31e669a:  *
1:31e669a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:31e669a:  *
1:31e669a:  * Unless required by applicable law or agreed to in writing, software
1:31e669a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e669a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e669a:  * See the License for the specific language governing permissions and
1:31e669a:  * limitations under the License.
1:31e669a:  */
1:31e669a: package org.apache.cassandra.cql3.functions;
4:31e669a: 
1:31e669a: import java.nio.ByteBuffer;
1:31e669a: import java.util.List;
1:31e669a: 
1:31e669a: import org.apache.cassandra.config.CFMetaData;
1:5f5905d: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.CBuilder;
1:31e669a: import org.apache.cassandra.db.marshal.AbstractType;
1:31e669a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:31e669a: 
1:0cad81a: public class TokenFct extends NativeScalarFunction
3:31e669a: {
1:5f5905d:     private final CFMetaData cfm;
1:a22ce89: 
1:31e669a:     public TokenFct(CFMetaData cfm)
1:31e669a:     {
1:0a08525:         super("token", cfm.partitioner.getTokenValidator(), getKeyTypes(cfm));
1:5f5905d:         this.cfm = cfm;
2:31e669a:     }
1:31e669a: 
1:31e669a:     private static AbstractType[] getKeyTypes(CFMetaData cfm)
1:31e669a:     {
1:5f5905d:         AbstractType[] types = new AbstractType[cfm.partitionKeyColumns().size()];
1:31e669a:         int i = 0;
1:5f5905d:         for (ColumnDefinition def : cfm.partitionKeyColumns())
1:5f5905d:             types[i++] = def.type;
1:31e669a:         return types;
1:31e669a:     }
1:31e669a: 
1:e0adc16:     public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
1:31e669a:     {
1:a991b64:         CBuilder builder = CBuilder.create(cfm.getKeyValidatorAsClusteringComparator());
1:8bedb57:         for (int i = 0; i < parameters.size(); i++)
1:8bedb57:         {
1:8bedb57:             ByteBuffer bb = parameters.get(i);
1:8bedb57:             if (bb == null)
1:8bedb57:                 return null;
1:31e669a:             builder.add(bb);
1:8bedb57:         }
1:0a08525:         return cfm.partitioner.getTokenFactory().toByteArray(cfm.partitioner.getToken(CFMetaData.serializePartitionKey(builder.build())));
1:31e669a:     }
1:31e669a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:         super("token", cfm.partitioner.getTokenValidator(), getKeyTypes(cfm));
/////////////////////////////////////////////////////////////////////////
1:         return cfm.partitioner.getTokenFactory().toByteArray(cfm.partitioner.getToken(CFMetaData.serializePartitionKey(builder.build())));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.statements.SelectStatement;
0: import org.apache.cassandra.dht.IPartitioner;
0: import org.apache.cassandra.service.StorageService;
0:     // The actual token function depends on the partitioner used
0:     private static final IPartitioner partitioner = StorageService.getPartitioner();
1: 
0:         super("token", partitioner.getTokenValidator(), getKeyTypes(cfm));
/////////////////////////////////////////////////////////////////////////
0:         return partitioner.getTokenFactory().toByteArray(partitioner.getToken(CFMetaData.serializePartitionKey(builder.build())));
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         super("token", cfm.partitioner.getTokenValidator(), getKeyTypes(cfm));
/////////////////////////////////////////////////////////////////////////
0:         return cfm.partitioner.getTokenFactory().toByteArray(cfm.partitioner.getToken(CFMetaData.serializePartitionKey(builder.build())));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.statements.SelectStatement;
1: import org.apache.cassandra.db.CBuilder;
/////////////////////////////////////////////////////////////////////////
1:         CBuilder builder = CBuilder.create(cfm.getKeyValidatorAsClusteringComparator());
/////////////////////////////////////////////////////////////////////////
0:         return partitioner.getTokenFactory().toByteArray(partitioner.getToken(CFMetaData.serializePartitionKey(builder.build())));
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
0: public class TokenFct extends NativeFunction
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.composites.CBuilder;
/////////////////////////////////////////////////////////////////////////
0:         CBuilder builder = cfm.getKeyValidatorAsCType().builder();
/////////////////////////////////////////////////////////////////////////
0:         return partitioner.getTokenFactory().toByteArray(partitioner.getToken(builder.build().toByteBuffer()));
commit:5f5905d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.ColumnDefinition;
/////////////////////////////////////////////////////////////////////////
1:     private final CFMetaData cfm;
1:         this.cfm = cfm;
1:         AbstractType[] types = new AbstractType[cfm.partitionKeyColumns().size()];
1:         for (ColumnDefinition def : cfm.partitionKeyColumns())
1:             types[i++] = def.type;
0:         ColumnNameBuilder builder = cfm.getKeyNameBuilder();
commit:2c84b14
commit:8bedb57
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < parameters.size(); i++)
1:         {
1:             ByteBuffer bb = parameters.get(i);
1:             if (bb == null)
1:                 return null;
1:         }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.cql3.CFDefinition;
0: import org.apache.cassandra.cql3.ColumnNameBuilder;
0: import org.apache.cassandra.cql3.ColumnSpecification;
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.service.StorageService;
1: 
0: public class TokenFct extends AbstractFunction
1: {
0:     // The actual token function depends on the partitioner used
0:     private static final IPartitioner partitioner = StorageService.instance.getPartitioner();
1: 
0:     public static final Function.Factory factory = new Function.Factory()
1:     {
0:         public Function create(String ksName, String cfName)
1:         {
0:             return new TokenFct(Schema.instance.getCFMetaData(ksName, cfName));
1:         }
0:     };
1: 
0:     private final CFDefinition cfDef;
1: 
1:     public TokenFct(CFMetaData cfm)
1:     {
0:         super("token", partitioner.getTokenValidator(), getKeyTypes(cfm));
0:         this.cfDef = cfm.getCfDef();
1:     }
1: 
1:     private static AbstractType[] getKeyTypes(CFMetaData cfm)
1:     {
0:         AbstractType[] types = new AbstractType[cfm.getCfDef().keys.size()];
1:         int i = 0;
0:         for (CFDefinition.Name name : cfm.getCfDef().keys.values())
0:             types[i++] = name.type;
1:         return types;
1:     }
1: 
0:     public ByteBuffer execute(List<ByteBuffer> parameters) throws InvalidRequestException
1:     {
0:         ColumnNameBuilder builder = cfDef.getKeyNameBuilder();
0:         for (ByteBuffer bb : parameters)
1:             builder.add(bb);
0:         return partitioner.getTokenFactory().toByteArray(partitioner.getToken(builder.build()));
1:     }
1: }
author:Robert Stupp
-------------------------------------------------------------------------------
commit:794d68b
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:0cad81a
/////////////////////////////////////////////////////////////////////////
1: public class TokenFct extends NativeScalarFunction
author:Dave Brosius
-------------------------------------------------------------------------------
commit:2b53cf7
/////////////////////////////////////////////////////////////////////////
0:     private static final IPartitioner partitioner = StorageService.getPartitioner();
commit:56f35db
/////////////////////////////////////////////////////////////////////////
============================================================================