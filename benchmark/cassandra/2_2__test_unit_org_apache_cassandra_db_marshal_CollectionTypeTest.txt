1:f4b9f16: /**
1:f4b9f16:  * Licensed to the Apache Software Foundation (ASF) under one
1:f4b9f16:  * or more contributor license agreements.  See the NOTICE file
1:f4b9f16:  * distributed with this work for additional information
1:f4b9f16:  * regarding copyright ownership.  The ASF licenses this file
1:f4b9f16:  * to you under the Apache License, Version 2.0 (the
1:f4b9f16:  * "License"); you may not use this file except in compliance
1:f4b9f16:  * with the License.  You may obtain a copy of the License at
1:f4b9f16:  *
1:f4b9f16:  * http://www.apache.org/licenses/LICENSE-2.0
1:f4b9f16:  *
1:f4b9f16:  * Unless required by applicable law or agreed to in writing, software
1:f4b9f16:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f4b9f16:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f4b9f16:  * See the License for the specific language governing permissions and
1:f4b9f16:  * limitations under the License.
1:f4b9f16:  */
1:f4b9f16: package org.apache.cassandra.db.marshal;
1:f4b9f16: 
1:f4b9f16: import java.nio.ByteBuffer;
1:590b3b2: import java.util.*;
1:f4b9f16: 
1:f4b9f16: import com.google.common.collect.ImmutableList;
1:f4b9f16: import com.google.common.collect.ImmutableMap;
1:f4b9f16: import com.google.common.collect.ImmutableSet;
1:f4b9f16: 
1:f4b9f16: import org.junit.Test;
1:f4b9f16: import static org.junit.Assert.assertEquals;
1:590b3b2: import static org.junit.Assert.fail;
1:f4b9f16: 
1:f4b9f16: import org.apache.cassandra.utils.ByteBufferUtil;
1:590b3b2: import org.apache.cassandra.serializers.*;
1:f4b9f16: 
1:f4b9f16: public class CollectionTypeTest
1:f4b9f16: {
1:f4b9f16:     @Test
1:f4b9f16:     public void testListComparison()
1:f4b9f16:     {
1:ee55f36:         ListType<String> lt = ListType.getInstance(UTF8Type.instance, true);
1:f4b9f16: 
1:f4b9f16:         ByteBuffer[] lists = new ByteBuffer[] {
1:f4b9f16:             ByteBufferUtil.EMPTY_BYTE_BUFFER,
1:f4b9f16:             lt.decompose(ImmutableList.<String>of()),
1:f4b9f16:             lt.decompose(ImmutableList.of("aa")),
1:f4b9f16:             lt.decompose(ImmutableList.of("bb")),
1:f4b9f16:             lt.decompose(ImmutableList.of("bb", "cc")),
1:f4b9f16:             lt.decompose(ImmutableList.of("bb", "dd"))
1:f4b9f16:         };
1:f4b9f16: 
1:f4b9f16:         for (int i = 0; i < lists.length; i++)
1:f4b9f16:             assertEquals(lt.compare(lists[i], lists[i]), 0);
1:f4b9f16: 
1:f4b9f16:         for (int i = 0; i < lists.length-1; i++)
1:f4b9f16:         {
1:f4b9f16:             for (int j = i+1; j < lists.length; j++)
1:f4b9f16:             {
1:3b299c4:                 assertEquals(String.format("compare(lists[%d], lists[%d])", i, j), -1, lt.compare(lists[i], lists[j]));
1:3b299c4:                 assertEquals(String.format("compare(lists[%d], lists[%d])", j, i),  1, lt.compare(lists[j], lists[i]));
1:f4b9f16:             }
1:f4b9f16:         }
1:f4b9f16:     }
1:590b3b2: 
1:590b3b2:     @Test
1:f4b9f16:     public void testSetComparison()
1:f4b9f16:     {
1:ee55f36:         SetType<String> st = SetType.getInstance(UTF8Type.instance, true);
1:f4b9f16: 
1:f4b9f16:         ByteBuffer[] sets = new ByteBuffer[] {
1:f4b9f16:             ByteBufferUtil.EMPTY_BYTE_BUFFER,
1:f4b9f16:             st.decompose(ImmutableSet.<String>of()),
1:f4b9f16:             st.decompose(ImmutableSet.of("aa")),
1:f4b9f16:             st.decompose(ImmutableSet.of("bb")),
1:f4b9f16:             st.decompose(ImmutableSet.of("bb", "cc")),
1:f4b9f16:             st.decompose(ImmutableSet.of("bb", "dd"))
1:f4b9f16:         };
1:f4b9f16: 
1:f4b9f16:         for (int i = 0; i < sets.length; i++)
1:f4b9f16:             assertEquals(st.compare(sets[i], sets[i]), 0);
1:f4b9f16: 
1:f4b9f16:         for (int i = 0; i < sets.length-1; i++)
1:f4b9f16:         {
1:f4b9f16:             for (int j = i+1; j < sets.length; j++)
1:f4b9f16:             {
1:3b299c4:                 assertEquals(String.format("compare(sets[%d], sets[%d])", i, j), -1, st.compare(sets[i], sets[j]));
1:3b299c4:                 assertEquals(String.format("compare(sets[%d], sets[%d])", j, i),  1, st.compare(sets[j], sets[i]));
1:f4b9f16:             }
1:f4b9f16:         }
1:f4b9f16:     }
1:f4b9f16: 
1:f4b9f16:     @Test
1:f4b9f16:     public void testMapComparison()
1:f4b9f16:     {
1:ee55f36:         MapType<String, String> mt = MapType.getInstance(UTF8Type.instance, UTF8Type.instance, true);
1:f4b9f16: 
1:f4b9f16:         ByteBuffer[] maps = new ByteBuffer[] {
1:f4b9f16:             ByteBufferUtil.EMPTY_BYTE_BUFFER,
1:f4b9f16:             mt.decompose(ImmutableMap.<String, String>of()),
1:f4b9f16:             mt.decompose(ImmutableMap.of("aa", "val1")),
1:f4b9f16:             mt.decompose(ImmutableMap.of("aa", "val2")),
1:f4b9f16:             mt.decompose(ImmutableMap.of("bb", "val1")),
1:f4b9f16:             mt.decompose(ImmutableMap.of("bb", "val1", "cc", "val3")),
1:f4b9f16:             mt.decompose(ImmutableMap.of("bb", "val1", "dd", "val3")),
1:f4b9f16:             mt.decompose(ImmutableMap.of("bb", "val1", "dd", "val4"))
1:f4b9f16:         };
1:f4b9f16: 
1:f4b9f16:         for (int i = 0; i < maps.length; i++)
1:f4b9f16:             assertEquals(mt.compare(maps[i], maps[i]), 0);
1:f4b9f16: 
1:f4b9f16:         for (int i = 0; i < maps.length-1; i++)
1:f4b9f16:         {
1:f4b9f16:             for (int j = i+1; j < maps.length; j++)
1:f4b9f16:             {
1:3b299c4:                 assertEquals(String.format("compare(maps[%d], maps[%d])", i, j), mt.compare(maps[i], maps[j]), -1);
1:3b299c4:                 assertEquals(String.format("compare(maps[%d], maps[%d])", j, i), mt.compare(maps[j], maps[i]), 1);
1:f4b9f16:             }
1:f4b9f16:         }
1:f4b9f16:     }
1:f4b9f16: 
1:f4b9f16:     @Test
1:590b3b2:     public void listSerDerTest()
1:590b3b2:     {
1:ee55f36:         ListSerializer<String> sls = ListType.getInstance(UTF8Type.instance, true).getSerializer();
1:ee55f36:         ListSerializer<Integer> ils = ListType.getInstance(Int32Type.instance, true).getSerializer();
1:590b3b2: 
1:590b3b2:         List<String> sl = Arrays.asList("Foo", "Bar");
1:590b3b2:         List<Integer> il = Arrays.asList(3, 1, 5);
1:590b3b2: 
1:590b3b2:         ByteBuffer sb = sls.serialize(sl);
1:590b3b2:         ByteBuffer ib = ils.serialize(il);
1:590b3b2: 
1:590b3b2:         assertEquals(sls.deserialize(sb), sl);
1:590b3b2:         assertEquals(ils.deserialize(ib), il);
1:590b3b2: 
1:590b3b2:         sls.validate(sb);
1:590b3b2:         ils.validate(ib);
1:590b3b2: 
1:590b3b2:         // string list with integer list type
1:590b3b2:         assertInvalid(ils, sb);
1:590b3b2:         // non list value
1:590b3b2:         assertInvalid(sls, UTF8Type.instance.getSerializer().serialize("foo"));
1:590b3b2:     }
1:590b3b2: 
1:590b3b2:     @Test
1:590b3b2:     public void setSerDerTest()
1:590b3b2:     {
1:ee55f36:         SetSerializer<String> sss = SetType.getInstance(UTF8Type.instance, true).getSerializer();
1:ee55f36:         SetSerializer<Integer> iss = SetType.getInstance(Int32Type.instance, true).getSerializer();
1:590b3b2: 
1:590b3b2:         Set<String> ss = new HashSet(){{ add("Foo"); add("Bar"); }};
1:590b3b2:         Set<Integer> is = new HashSet(){{ add(3); add(1); add(5); }};
1:590b3b2: 
1:590b3b2:         ByteBuffer sb = sss.serialize(ss);
1:590b3b2:         ByteBuffer ib = iss.serialize(is);
1:590b3b2: 
1:590b3b2:         assertEquals(sss.deserialize(sb), ss);
1:590b3b2:         assertEquals(iss.deserialize(ib), is);
1:590b3b2: 
1:590b3b2:         sss.validate(sb);
1:590b3b2:         iss.validate(ib);
1:590b3b2: 
1:590b3b2:         // string set with integer set type
1:590b3b2:         assertInvalid(iss, sb);
1:590b3b2:         // non set value
1:590b3b2:         assertInvalid(sss, UTF8Type.instance.getSerializer().serialize("foo"));
1:590b3b2:     }
1:590b3b2: 
1:590b3b2:     @Test
1:590b3b2:     public void setMapDerTest()
1:590b3b2:     {
1:ee55f36:         MapSerializer<String, String> sms = MapType.getInstance(UTF8Type.instance, UTF8Type.instance, true).getSerializer();
1:ee55f36:         MapSerializer<Integer, Integer> ims = MapType.getInstance(Int32Type.instance, Int32Type.instance, true).getSerializer();
1:590b3b2: 
1:590b3b2:         Map<String, String> sm = new HashMap(){{ put("Foo", "xxx"); put("Bar", "yyy"); }};
1:590b3b2:         Map<Integer, Integer> im = new HashMap(){{ put(3, 0); put(1, 8); put(5, 2); }};
1:590b3b2: 
1:590b3b2:         ByteBuffer sb = sms.serialize(sm);
1:590b3b2:         ByteBuffer ib = ims.serialize(im);
1:590b3b2: 
1:590b3b2:         assertEquals(sms.deserialize(sb), sm);
1:590b3b2:         assertEquals(ims.deserialize(ib), im);
1:590b3b2: 
1:590b3b2:         sms.validate(sb);
1:590b3b2:         ims.validate(ib);
1:590b3b2: 
1:590b3b2:         // string map with integer map type
1:590b3b2:         assertInvalid(ims, sb);
1:590b3b2:         // non map value
1:590b3b2:         assertInvalid(sms, UTF8Type.instance.getSerializer().serialize("foo"));
1:590b3b2: 
1:ee55f36:         MapSerializer<Integer, String> sims = MapType.getInstance(Int32Type.instance, UTF8Type.instance, true).getSerializer();
1:ee55f36:         MapSerializer<String, Integer> isms = MapType.getInstance(UTF8Type.instance, Int32Type.instance, true).getSerializer();
1:590b3b2: 
1:590b3b2:         // only key are invalid
1:590b3b2:         assertInvalid(isms, sb);
1:590b3b2:         // only values are invalid
1:590b3b2:         assertInvalid(sims, sb);
1:590b3b2:     }
1:590b3b2: 
1:590b3b2:     private void assertInvalid(TypeSerializer<?> type, ByteBuffer value)
1:590b3b2:     {
1:590b3b2:         try {
1:590b3b2:             type.validate(value);
1:590b3b2:             fail("Value " + ByteBufferUtil.bytesToHex(value) + " shouldn't be valid for type " + type);
1:590b3b2:         } catch (MarshalException e) {
1:590b3b2:             // ok, that's what we want
1:590b3b2:         }
1:590b3b2:     }
1:f4b9f16: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1:         ListType<String> lt = ListType.getInstance(UTF8Type.instance, true);
/////////////////////////////////////////////////////////////////////////
1:         SetType<String> st = SetType.getInstance(UTF8Type.instance, true);
/////////////////////////////////////////////////////////////////////////
1:         MapType<String, String> mt = MapType.getInstance(UTF8Type.instance, UTF8Type.instance, true);
/////////////////////////////////////////////////////////////////////////
1:         ListSerializer<String> sls = ListType.getInstance(UTF8Type.instance, true).getSerializer();
1:         ListSerializer<Integer> ils = ListType.getInstance(Int32Type.instance, true).getSerializer();
/////////////////////////////////////////////////////////////////////////
1:         SetSerializer<String> sss = SetType.getInstance(UTF8Type.instance, true).getSerializer();
1:         SetSerializer<Integer> iss = SetType.getInstance(Int32Type.instance, true).getSerializer();
/////////////////////////////////////////////////////////////////////////
1:         MapSerializer<String, String> sms = MapType.getInstance(UTF8Type.instance, UTF8Type.instance, true).getSerializer();
1:         MapSerializer<Integer, Integer> ims = MapType.getInstance(Int32Type.instance, Int32Type.instance, true).getSerializer();
/////////////////////////////////////////////////////////////////////////
1:         MapSerializer<Integer, String> sims = MapType.getInstance(Int32Type.instance, UTF8Type.instance, true).getSerializer();
1:         MapSerializer<String, Integer> isms = MapType.getInstance(UTF8Type.instance, Int32Type.instance, true).getSerializer();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:590b3b2
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: import org.apache.cassandra.serializers.*;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void listSerDerTest()
1:     {
0:         ListSerializer<String> sls = ListType.getInstance(UTF8Type.instance).getSerializer();
0:         ListSerializer<Integer> ils = ListType.getInstance(Int32Type.instance).getSerializer();
1: 
1:         List<String> sl = Arrays.asList("Foo", "Bar");
1:         List<Integer> il = Arrays.asList(3, 1, 5);
1: 
1:         ByteBuffer sb = sls.serialize(sl);
1:         ByteBuffer ib = ils.serialize(il);
1: 
1:         assertEquals(sls.deserialize(sb), sl);
1:         assertEquals(ils.deserialize(ib), il);
1: 
1:         sls.validate(sb);
1:         ils.validate(ib);
1: 
1:         // string list with integer list type
1:         assertInvalid(ils, sb);
1:         // non list value
1:         assertInvalid(sls, UTF8Type.instance.getSerializer().serialize("foo"));
1:     }
1: 
1:     @Test
1:     public void setSerDerTest()
1:     {
0:         SetSerializer<String> sss = SetType.getInstance(UTF8Type.instance).getSerializer();
0:         SetSerializer<Integer> iss = SetType.getInstance(Int32Type.instance).getSerializer();
1: 
1:         Set<String> ss = new HashSet(){{ add("Foo"); add("Bar"); }};
1:         Set<Integer> is = new HashSet(){{ add(3); add(1); add(5); }};
1: 
1:         ByteBuffer sb = sss.serialize(ss);
1:         ByteBuffer ib = iss.serialize(is);
1: 
1:         assertEquals(sss.deserialize(sb), ss);
1:         assertEquals(iss.deserialize(ib), is);
1: 
1:         sss.validate(sb);
1:         iss.validate(ib);
1: 
1:         // string set with integer set type
1:         assertInvalid(iss, sb);
1:         // non set value
1:         assertInvalid(sss, UTF8Type.instance.getSerializer().serialize("foo"));
1:     }
1: 
1:     @Test
1:     public void setMapDerTest()
1:     {
0:         MapSerializer<String, String> sms = MapType.getInstance(UTF8Type.instance, UTF8Type.instance).getSerializer();
0:         MapSerializer<Integer, Integer> ims = MapType.getInstance(Int32Type.instance, Int32Type.instance).getSerializer();
1: 
1:         Map<String, String> sm = new HashMap(){{ put("Foo", "xxx"); put("Bar", "yyy"); }};
1:         Map<Integer, Integer> im = new HashMap(){{ put(3, 0); put(1, 8); put(5, 2); }};
1: 
1:         ByteBuffer sb = sms.serialize(sm);
1:         ByteBuffer ib = ims.serialize(im);
1: 
1:         assertEquals(sms.deserialize(sb), sm);
1:         assertEquals(ims.deserialize(ib), im);
1: 
1:         sms.validate(sb);
1:         ims.validate(ib);
1: 
1:         // string map with integer map type
1:         assertInvalid(ims, sb);
1:         // non map value
1:         assertInvalid(sms, UTF8Type.instance.getSerializer().serialize("foo"));
1: 
0:         MapSerializer<Integer, String> sims = MapType.getInstance(Int32Type.instance, UTF8Type.instance).getSerializer();
0:         MapSerializer<String, Integer> isms = MapType.getInstance(UTF8Type.instance, Int32Type.instance).getSerializer();
1: 
1:         // only key are invalid
1:         assertInvalid(isms, sb);
1:         // only values are invalid
1:         assertInvalid(sims, sb);
1:     }
1: 
1:     private void assertInvalid(TypeSerializer<?> type, ByteBuffer value)
1:     {
1:         try {
1:             type.validate(value);
1:             fail("Value " + ByteBufferUtil.bytesToHex(value) + " shouldn't be valid for type " + type);
1:         } catch (MarshalException e) {
1:             // ok, that's what we want
1:         }
1:     }
commit:3b299c4
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals(String.format("compare(lists[%d], lists[%d])", i, j), -1, lt.compare(lists[i], lists[j]));
1:                 assertEquals(String.format("compare(lists[%d], lists[%d])", j, i),  1, lt.compare(lists[j], lists[i]));
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals(String.format("compare(sets[%d], sets[%d])", i, j), -1, st.compare(sets[i], sets[j]));
1:                 assertEquals(String.format("compare(sets[%d], sets[%d])", j, i),  1, st.compare(sets[j], sets[i]));
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals(String.format("compare(maps[%d], maps[%d])", i, j), mt.compare(maps[i], maps[j]), -1);
1:                 assertEquals(String.format("compare(maps[%d], maps[%d])", j, i), mt.compare(maps[j], maps[i]), 1);
commit:48c9db6
/////////////////////////////////////////////////////////////////////////
commit:f4b9f16
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.*;
1: 
1: import com.google.common.collect.ImmutableList;
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.collect.ImmutableSet;
1: 
1: import org.junit.Test;
1: import static org.junit.Assert.assertEquals;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class CollectionTypeTest
1: {
1:     @Test
1:     public void testListComparison()
1:     {
0:         ListType<String> lt = ListType.getInstance(UTF8Type.instance);
1: 
1:         ByteBuffer[] lists = new ByteBuffer[] {
1:             ByteBufferUtil.EMPTY_BYTE_BUFFER,
1:             lt.decompose(ImmutableList.<String>of()),
1:             lt.decompose(ImmutableList.of("aa")),
1:             lt.decompose(ImmutableList.of("bb")),
1:             lt.decompose(ImmutableList.of("bb", "cc")),
1:             lt.decompose(ImmutableList.of("bb", "dd"))
1:         };
1: 
1:         for (int i = 0; i < lists.length; i++)
1:             assertEquals(lt.compare(lists[i], lists[i]), 0);
1: 
1:         for (int i = 0; i < lists.length-1; i++)
1:         {
1:             for (int j = i+1; j < lists.length; j++)
1:             {
0:                 assertEquals(lt.compare(lists[i], lists[j]), -1);
0:                 assertEquals(lt.compare(lists[j], lists[i]), 1);
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testSetComparison()
1:     {
0:         SetType<String> st = SetType.getInstance(UTF8Type.instance);
1: 
1:         ByteBuffer[] sets = new ByteBuffer[] {
1:             ByteBufferUtil.EMPTY_BYTE_BUFFER,
1:             st.decompose(ImmutableSet.<String>of()),
1:             st.decompose(ImmutableSet.of("aa")),
1:             st.decompose(ImmutableSet.of("bb")),
1:             st.decompose(ImmutableSet.of("bb", "cc")),
1:             st.decompose(ImmutableSet.of("bb", "dd"))
1:         };
1: 
1:         for (int i = 0; i < sets.length; i++)
1:             assertEquals(st.compare(sets[i], sets[i]), 0);
1: 
1:         for (int i = 0; i < sets.length-1; i++)
1:         {
1:             for (int j = i+1; j < sets.length; j++)
1:             {
0:                 assertEquals(st.compare(sets[i], sets[j]), -1);
0:                 assertEquals(st.compare(sets[j], sets[i]), 1);
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testMapComparison()
1:     {
0:         MapType<String, String> mt = MapType.getInstance(UTF8Type.instance, UTF8Type.instance);
1: 
1:         ByteBuffer[] maps = new ByteBuffer[] {
1:             ByteBufferUtil.EMPTY_BYTE_BUFFER,
1:             mt.decompose(ImmutableMap.<String, String>of()),
1:             mt.decompose(ImmutableMap.of("aa", "val1")),
1:             mt.decompose(ImmutableMap.of("aa", "val2")),
1:             mt.decompose(ImmutableMap.of("bb", "val1")),
1:             mt.decompose(ImmutableMap.of("bb", "val1", "cc", "val3")),
1:             mt.decompose(ImmutableMap.of("bb", "val1", "dd", "val3")),
1:             mt.decompose(ImmutableMap.of("bb", "val1", "dd", "val4"))
1:         };
1: 
1:         for (int i = 0; i < maps.length; i++)
1:             assertEquals(mt.compare(maps[i], maps[i]), 0);
1: 
1:         for (int i = 0; i < maps.length-1; i++)
1:         {
1:             for (int j = i+1; j < maps.length; j++)
1:             {
0:                 assertEquals(mt.compare(maps[i], maps[j]), -1);
0:                 assertEquals(mt.compare(maps[j], maps[i]), 1);
1:             }
1:         }
1:     }
1: }
============================================================================