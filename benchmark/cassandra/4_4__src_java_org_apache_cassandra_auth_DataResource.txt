1:5a3eb1a: /*
1:5a3eb1a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a3eb1a:  * or more contributor license agreements.  See the NOTICE file
1:5a3eb1a:  * distributed with this work for additional information
1:5a3eb1a:  * regarding copyright ownership.  The ASF licenses this file
1:5a3eb1a:  * to you under the Apache License, Version 2.0 (the
1:5a3eb1a:  * "License"); you may not use this file except in compliance
1:5a3eb1a:  * with the License.  You may obtain a copy of the License at
1:5a3eb1a:  *
1:5a3eb1a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a3eb1a:  *
1:5a3eb1a:  * Unless required by applicable law or agreed to in writing, software
1:5a3eb1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a3eb1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a3eb1a:  * See the License for the specific language governing permissions and
1:5a3eb1a:  * limitations under the License.
1:5a3eb1a:  */
1:5a3eb1a: package org.apache.cassandra.auth;
2:5a3eb1a: 
1:217721a: import java.util.Set;
1:217721a: 
1:5a3eb1a: import com.google.common.base.Objects;
1:217721a: import com.google.common.collect.Sets;
1:bffd9ea: import org.apache.commons.lang3.StringUtils;
1:5a3eb1a: 
1:5a3eb1a: import org.apache.cassandra.config.Schema;
1:5a3eb1a: 
1:5a3eb1a: /**
1:5a3eb1a:  * The primary type of resource in Cassandra.
1:5a3eb1a:  *
1:879b694:  * Used to represent a table or a keyspace or the root level "data" resource.
1:5a3eb1a:  * "data"                                 - the root level data resource.
1:5a3eb1a:  * "data/keyspace_name"                   - keyspace-level data resource.
1:879b694:  * "data/keyspace_name/table_name"        - table-level data resource.
1:5a3eb1a:  */
1:5a3eb1a: public class DataResource implements IResource
3:5a3eb1a: {
1:5a3eb1a:     enum Level
1:5a3eb1a:     {
1:879b694:         ROOT, KEYSPACE, TABLE
3:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     // permissions which may be granted on tables
1:217721a:     private static final Set<Permission> TABLE_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:217721a:                                                                                          Permission.DROP,
1:217721a:                                                                                          Permission.SELECT,
1:217721a:                                                                                          Permission.MODIFY,
1:217721a:                                                                                          Permission.AUTHORIZE);
1:217721a:     // permissions which may be granted on one or all keyspaces
1:217721a:     private static final Set<Permission> KEYSPACE_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.CREATE,
1:217721a:                                                                                             Permission.ALTER,
1:217721a:                                                                                             Permission.DROP,
1:217721a:                                                                                             Permission.SELECT,
1:217721a:                                                                                             Permission.MODIFY,
1:217721a:                                                                                             Permission.AUTHORIZE);
1:5a3eb1a:     private static final String ROOT_NAME = "data";
1:2d991a7:     private static final DataResource ROOT_RESOURCE = new DataResource(Level.ROOT, null, null);
1:5a3eb1a: 
1:5a3eb1a:     private final Level level;
1:5a3eb1a:     private final String keyspace;
1:879b694:     private final String table;
1:5a3eb1a: 
1:2d991a7:     // memoized hashcode since DataRessource is immutable and used in hashmaps often
1:2d991a7:     private final transient int hash;
1:5a3eb1a: 
1:2d991a7:     private DataResource(Level level, String keyspace, String table)
1:5a3eb1a:     {
1:2d991a7:         this.level = level;
2:5a3eb1a:         this.keyspace = keyspace;
1:879b694:         this.table = table;
1:2d991a7: 
1:2d991a7:         this.hash = Objects.hashCode(level, keyspace, table);
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * @return the root-level resource.
1:5a3eb1a:      */
1:5a3eb1a:     public static DataResource root()
1:5a3eb1a:     {
1:5a3eb1a:         return ROOT_RESOURCE;
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Creates a DataResource representing a keyspace.
1:5a3eb1a:      *
1:5a3eb1a:      * @param keyspace Name of the keyspace.
1:5a3eb1a:      * @return DataResource instance representing the keyspace.
1:5a3eb1a:      */
1:5a3eb1a:     public static DataResource keyspace(String keyspace)
1:5a3eb1a:     {
1:2d991a7:         return new DataResource(Level.KEYSPACE, keyspace, null);
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:879b694:      * Creates a DataResource instance representing a table.
1:5a3eb1a:      *
1:5a3eb1a:      * @param keyspace Name of the keyspace.
1:879b694:      * @param table Name of the table.
1:5a3eb1a:      * @return DataResource instance representing the column family.
1:5a3eb1a:      */
1:879b694:     public static DataResource table(String keyspace, String table)
1:5a3eb1a:     {
1:2d991a7:         return new DataResource(Level.TABLE, keyspace, table);
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Parses a data resource name into a DataResource instance.
1:5a3eb1a:      *
1:5a3eb1a:      * @param name Name of the data resource.
1:5a3eb1a:      * @return DataResource instance matching the name.
1:5a3eb1a:      */
1:5a3eb1a:     public static DataResource fromName(String name)
1:5a3eb1a:     {
1:5a3eb1a:         String[] parts = StringUtils.split(name, '/');
1:5a3eb1a: 
1:5a3eb1a:         if (!parts[0].equals(ROOT_NAME) || parts.length > 3)
1:5a3eb1a:             throw new IllegalArgumentException(String.format("%s is not a valid data resource name", name));
1:5a3eb1a: 
1:5a3eb1a:         if (parts.length == 1)
1:5a3eb1a:             return root();
1:5a3eb1a: 
1:5a3eb1a:         if (parts.length == 2)
1:5a3eb1a:             return keyspace(parts[1]);
1:5a3eb1a: 
1:879b694:         return table(parts[1], parts[2]);
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * @return Printable name of the resource.
1:5a3eb1a:      */
1:5a3eb1a:     public String getName()
1:5a3eb1a:     {
1:5a3eb1a:         switch (level)
1:5a3eb1a:         {
1:5a3eb1a:             case ROOT:
1:5a3eb1a:                 return ROOT_NAME;
1:5a3eb1a:             case KEYSPACE:
1:5a3eb1a:                 return String.format("%s/%s", ROOT_NAME, keyspace);
1:879b694:             case TABLE:
1:879b694:                 return String.format("%s/%s/%s", ROOT_NAME, keyspace, table);
1:5a3eb1a:         }
1:5a3eb1a:         throw new AssertionError();
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
1:5a3eb1a:      */
1:5a3eb1a:     public IResource getParent()
1:5a3eb1a:     {
1:5a3eb1a:         switch (level)
1:5a3eb1a:         {
1:5a3eb1a:             case KEYSPACE:
1:5a3eb1a:                 return root();
1:879b694:             case TABLE:
1:5a3eb1a:                 return keyspace(keyspace);
1:5a3eb1a:         }
1:5a3eb1a:         throw new IllegalStateException("Root-level resource can't have a parent");
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     public boolean isRootLevel()
1:5a3eb1a:     {
1:2c3f9ba:         return level == Level.ROOT;
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     public boolean isKeyspaceLevel()
1:5a3eb1a:     {
1:2c3f9ba:         return level == Level.KEYSPACE;
1:5a3eb1a:     }
1:5a3eb1a: 
1:879b694:     public boolean isTableLevel()
1:5a3eb1a:     {
1:879b694:         return level == Level.TABLE;
1:5a3eb1a:     }
1:5a3eb1a:     /**
1:5a3eb1a:      * @return keyspace of the resource. Throws IllegalStateException if it's the root-level resource.
1:5a3eb1a:      */
1:5a3eb1a:     public String getKeyspace()
1:5a3eb1a:     {
1:5a3eb1a:         if (isRootLevel())
1:5a3eb1a:             throw new IllegalStateException("ROOT data resource has no keyspace");
1:5a3eb1a:         return keyspace;
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:879b694:      * @return column family of the resource. Throws IllegalStateException if it's not a table-level resource.
1:5a3eb1a:      */
1:879b694:     public String getTable()
1:5a3eb1a:     {
1:879b694:         if (!isTableLevel())
1:93c99a6:             throw new IllegalStateException(String.format("%s data resource has no table", level));
1:879b694:         return table;
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * @return Whether or not the resource has a parent in the hierarchy.
1:5a3eb1a:      */
1:5a3eb1a:     public boolean hasParent()
1:5a3eb1a:     {
1:2c3f9ba:         return level != Level.ROOT;
1:5a3eb1a:     }
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * @return Whether or not the resource exists in Cassandra.
1:5a3eb1a:      */
1:5a3eb1a:     public boolean exists()
1:5a3eb1a:     {
1:5a3eb1a:         switch (level)
1:5a3eb1a:         {
1:5a3eb1a:             case ROOT:
1:5a3eb1a:                 return true;
1:5a3eb1a:             case KEYSPACE:
1:0e96e58:                 return Schema.instance.getKeyspaces().contains(keyspace);
1:879b694:             case TABLE:
1:879b694:                 return Schema.instance.getCFMetaData(keyspace, table) != null;
1:5a3eb1a:         }
1:5a3eb1a:         throw new AssertionError();
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     public Set<Permission> applicablePermissions()
1:217721a:     {
1:217721a:         switch (level)
1:217721a:         {
1:217721a:             case ROOT:
1:217721a:             case KEYSPACE:
1:217721a:                 return KEYSPACE_LEVEL_PERMISSIONS;
1:217721a:             case TABLE:
1:217721a:                 return TABLE_LEVEL_PERMISSIONS;
1:217721a:         }
1:217721a:         throw new AssertionError();
1:217721a:     }
1:217721a: 
1:2c3f9ba:     @Override
1:5a3eb1a:     public String toString()
1:5a3eb1a:     {
1:5a3eb1a:         switch (level)
1:5a3eb1a:         {
1:5a3eb1a:             case ROOT:
1:5a3eb1a:                 return "<all keyspaces>";
1:5a3eb1a:             case KEYSPACE:
1:5a3eb1a:                 return String.format("<keyspace %s>", keyspace);
1:879b694:             case TABLE:
1:879b694:                 return String.format("<table %s.%s>", keyspace, table);
1:5a3eb1a:         }
1:5a3eb1a:         throw new AssertionError();
1:5a3eb1a:     }
1:5a3eb1a: 
1:2c3f9ba:     @Override
1:5a3eb1a:     public boolean equals(Object o)
1:5a3eb1a:     {
1:5a3eb1a:         if (this == o)
1:5a3eb1a:             return true;
1:5a3eb1a: 
1:5a3eb1a:         if (!(o instanceof DataResource))
1:5a3eb1a:             return false;
1:5a3eb1a: 
1:5a3eb1a:         DataResource ds = (DataResource) o;
1:5a3eb1a: 
1:b248b1a:         return Objects.equal(level, ds.level)
1:b248b1a:             && Objects.equal(keyspace, ds.keyspace)
1:879b694:             && Objects.equal(table, ds.table);
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     @Override
1:5a3eb1a:     public int hashCode()
1:5a3eb1a:     {
1:2d991a7:         return hash;
1:5a3eb1a:     }
1:5a3eb1a: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2d991a7
/////////////////////////////////////////////////////////////////////////
1:     private static final DataResource ROOT_RESOURCE = new DataResource(Level.ROOT, null, null);
1:     // memoized hashcode since DataRessource is immutable and used in hashmaps often
1:     private final transient int hash;
1:     private DataResource(Level level, String keyspace, String table)
1:         this.level = level;
1: 
1:         this.hash = Objects.hashCode(level, keyspace, table);
/////////////////////////////////////////////////////////////////////////
1:         return new DataResource(Level.KEYSPACE, keyspace, null);
/////////////////////////////////////////////////////////////////////////
1:         return new DataResource(Level.TABLE, keyspace, table);
/////////////////////////////////////////////////////////////////////////
1:         return hash;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:e502fe5
/////////////////////////////////////////////////////////////////////////
commit:2c3f9ba
/////////////////////////////////////////////////////////////////////////
1:         return level == Level.ROOT;
1:         return level == Level.KEYSPACE;
0:         return level == Level.COLUMN_FAMILY;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         return level != Level.ROOT;
1:     @Override
commit:93c99a6
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalStateException(String.format("%s data resource has no table", level));
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1:     // permissions which may be granted on tables
1:     private static final Set<Permission> TABLE_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.ALTER,
1:                                                                                          Permission.DROP,
1:                                                                                          Permission.SELECT,
1:                                                                                          Permission.MODIFY,
1:                                                                                          Permission.AUTHORIZE);
1:     // permissions which may be granted on one or all keyspaces
1:     private static final Set<Permission> KEYSPACE_LEVEL_PERMISSIONS = Sets.immutableEnumSet(Permission.CREATE,
1:                                                                                             Permission.ALTER,
1:                                                                                             Permission.DROP,
1:                                                                                             Permission.SELECT,
1:                                                                                             Permission.MODIFY,
1:                                                                                             Permission.AUTHORIZE);
/////////////////////////////////////////////////////////////////////////
1:      @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Set<Permission> applicablePermissions()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:             case KEYSPACE:
1:                 return KEYSPACE_LEVEL_PERMISSIONS;
1:             case TABLE:
1:                 return TABLE_LEVEL_PERMISSIONS;
1:         }
1:         throw new AssertionError();
1:     }
1: 
commit:879b694
/////////////////////////////////////////////////////////////////////////
1:  * Used to represent a table or a keyspace or the root level "data" resource.
1:  * "data/keyspace_name/table_name"        - table-level data resource.
1:         ROOT, KEYSPACE, TABLE
/////////////////////////////////////////////////////////////////////////
1:     private final String table;
0:         table = null;
0:         table = null;
0:     private DataResource(String keyspace, String table)
0:         level = Level.TABLE;
1:         this.table = table;
/////////////////////////////////////////////////////////////////////////
1:      * Creates a DataResource instance representing a table.
1:      * @param table Name of the table.
1:     public static DataResource table(String keyspace, String table)
0:         return new DataResource(keyspace, table);
/////////////////////////////////////////////////////////////////////////
1:         return table(parts[1], parts[2]);
/////////////////////////////////////////////////////////////////////////
1:             case TABLE:
1:                 return String.format("%s/%s/%s", ROOT_NAME, keyspace, table);
/////////////////////////////////////////////////////////////////////////
1:             case TABLE:
/////////////////////////////////////////////////////////////////////////
1:     public boolean isTableLevel()
1:         return level == Level.TABLE;
/////////////////////////////////////////////////////////////////////////
1:      * @return column family of the resource. Throws IllegalStateException if it's not a table-level resource.
1:     public String getTable()
1:         if (!isTableLevel())
1:         return table;
/////////////////////////////////////////////////////////////////////////
1:             case TABLE:
1:                 return Schema.instance.getCFMetaData(keyspace, table) != null;
/////////////////////////////////////////////////////////////////////////
1:             case TABLE:
1:                 return String.format("<table %s.%s>", keyspace, table);
/////////////////////////////////////////////////////////////////////////
1:             && Objects.equal(table, ds.table);
0:         return Objects.hashCode(level, keyspace, table);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b248b1a
/////////////////////////////////////////////////////////////////////////
1:         return Objects.equal(level, ds.level)
1:             && Objects.equal(keyspace, ds.keyspace)
0:             && Objects.equal(columnFamily, ds.columnFamily);
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1:                 return Schema.instance.getKeyspaces().contains(keyspace);
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import com.google.common.base.Objects;
0: import org.apache.commons.lang.StringUtils;
1: 
1: import org.apache.cassandra.config.Schema;
1: 
1: /**
1:  * The primary type of resource in Cassandra.
1:  *
0:  * Used to represent a column family or a keyspace or the root level "data" resource.
1:  * "data"                                 - the root level data resource.
1:  * "data/keyspace_name"                   - keyspace-level data resource.
0:  * "data/keyspace_name/column_family_name" - cf-level data resource.
1:  */
1: public class DataResource implements IResource
1: {
1:     enum Level
1:     {
0:         ROOT, KEYSPACE, COLUMN_FAMILY
1:     }
1: 
1:     private static final String ROOT_NAME = "data";
0:     private static final DataResource ROOT_RESOURCE = new DataResource();
1: 
1:     private final Level level;
1:     private final String keyspace;
0:     private final String columnFamily;
1: 
0:     private DataResource()
1:     {
0:         level = Level.ROOT;
0:         keyspace = null;
0:         columnFamily = null;
1:     }
1: 
0:     private DataResource(String keyspace)
1:     {
0:         level = Level.KEYSPACE;
1:         this.keyspace = keyspace;
0:         columnFamily = null;
1:     }
1: 
0:     private DataResource(String keyspace, String columnFamily)
1:     {
0:         level = Level.COLUMN_FAMILY;
1:         this.keyspace = keyspace;
0:         this.columnFamily = columnFamily;
1:     }
1: 
1:     /**
1:      * @return the root-level resource.
1:      */
1:     public static DataResource root()
1:     {
1:         return ROOT_RESOURCE;
1:     }
1: 
1:     /**
1:      * Creates a DataResource representing a keyspace.
1:      *
1:      * @param keyspace Name of the keyspace.
1:      * @return DataResource instance representing the keyspace.
1:      */
1:     public static DataResource keyspace(String keyspace)
1:     {
0:         return new DataResource(keyspace);
1:     }
1: 
1:     /**
0:      * Creates a DataResource instance representing a column family.
1:      *
1:      * @param keyspace Name of the keyspace.
0:      * @param columnFamily Name of the column family.
1:      * @return DataResource instance representing the column family.
1:      */
0:     public static DataResource columnFamily(String keyspace, String columnFamily)
1:     {
0:         return new DataResource(keyspace, columnFamily);
1:     }
1: 
1:     /**
1:      * Parses a data resource name into a DataResource instance.
1:      *
1:      * @param name Name of the data resource.
1:      * @return DataResource instance matching the name.
1:      */
1:     public static DataResource fromName(String name)
1:     {
1:         String[] parts = StringUtils.split(name, '/');
1: 
1:         if (!parts[0].equals(ROOT_NAME) || parts.length > 3)
1:             throw new IllegalArgumentException(String.format("%s is not a valid data resource name", name));
1: 
1:         if (parts.length == 1)
1:             return root();
1: 
1:         if (parts.length == 2)
1:             return keyspace(parts[1]);
1: 
0:         return columnFamily(parts[1], parts[2]);
1:     }
1: 
1:     /**
1:      * @return Printable name of the resource.
1:      */
1:     public String getName()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:                 return ROOT_NAME;
1:             case KEYSPACE:
1:                 return String.format("%s/%s", ROOT_NAME, keyspace);
0:             case COLUMN_FAMILY:
0:                 return String.format("%s/%s/%s", ROOT_NAME, keyspace, columnFamily);
1:         }
1:         throw new AssertionError();
1:     }
1: 
1:     /**
1:      * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
1:      */
1:     public IResource getParent()
1:     {
1:         switch (level)
1:         {
1:             case KEYSPACE:
1:                 return root();
0:             case COLUMN_FAMILY:
1:                 return keyspace(keyspace);
1:         }
1:         throw new IllegalStateException("Root-level resource can't have a parent");
1:     }
1: 
1:     public boolean isRootLevel()
1:     {
0:         return level.equals(Level.ROOT);
1:     }
1: 
1:     public boolean isKeyspaceLevel()
1:     {
0:         return level.equals(Level.KEYSPACE);
1:     }
1: 
0:     public boolean isColumnFamilyLevel()
1:     {
0:         return level.equals(Level.COLUMN_FAMILY);
1:     }
1:     /**
1:      * @return keyspace of the resource. Throws IllegalStateException if it's the root-level resource.
1:      */
1:     public String getKeyspace()
1:     {
1:         if (isRootLevel())
1:             throw new IllegalStateException("ROOT data resource has no keyspace");
1:         return keyspace;
1:     }
1: 
1:     /**
0:      * @return column family of the resource. Throws IllegalStateException if it's not a cf-level resource.
1:      */
0:     public String getColumnFamily()
1:     {
0:         if (!isColumnFamilyLevel())
0:             throw new IllegalStateException(String.format("%s data resource has no column family", level));
0:         return columnFamily;
1:     }
1: 
1:     /**
1:      * @return Whether or not the resource has a parent in the hierarchy.
1:      */
1:     public boolean hasParent()
1:     {
0:         return !level.equals(Level.ROOT);
1:     }
1: 
1:     /**
1:      * @return Whether or not the resource exists in Cassandra.
1:      */
1:     public boolean exists()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:                 return true;
1:             case KEYSPACE:
0:                 return Schema.instance.getTables().contains(keyspace);
0:             case COLUMN_FAMILY:
0:                 return Schema.instance.getCFMetaData(keyspace, columnFamily) != null;
1:         }
1:         throw new AssertionError();
1:     }
1: 
0:     @Override
1:     public String toString()
1:     {
1:         switch (level)
1:         {
1:             case ROOT:
1:                 return "<all keyspaces>";
1:             case KEYSPACE:
1:                 return String.format("<keyspace %s>", keyspace);
0:             case COLUMN_FAMILY:
0:                 return String.format("<table %s.%s>", keyspace, columnFamily);
1:         }
1:         throw new AssertionError();
1:     }
1: 
0:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof DataResource))
1:             return false;
1: 
1:         DataResource ds = (DataResource) o;
1: 
0:         return Objects.equal(this.level, ds.level)
0:             && Objects.equal(this.keyspace, ds.keyspace)
0:             && Objects.equal(this.columnFamily, ds.columnFamily);
1:     }
1: 
0:     @Override
1:     public int hashCode()
1:     {
0:         return Objects.hashCode(level, keyspace, columnFamily);
1:     }
1: }
============================================================================