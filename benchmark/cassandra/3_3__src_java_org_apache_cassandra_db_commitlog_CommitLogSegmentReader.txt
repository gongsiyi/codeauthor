1:7374e9b: /*
1:7374e9b:  * Licensed to the Apache Software Foundation (ASF) under one
1:7374e9b:  * or more contributor license agreements.  See the NOTICE file
1:7374e9b:  * distributed with this work for additional information
1:7374e9b:  * regarding copyright ownership.  The ASF licenses this file
1:7374e9b:  * to you under the Apache License, Version 2.0 (the
1:7374e9b:  * "License"); you may not use this file except in compliance
1:7374e9b:  * with the License.  You may obtain a copy of the License at
1:7374e9b:  *
1:7374e9b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7374e9b:  *
1:7374e9b:  * Unless required by applicable law or agreed to in writing, software
1:7374e9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7374e9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7374e9b:  * See the License for the specific language governing permissions and
1:7374e9b:  * limitations under the License.
1:7374e9b:  */
1:7374e9b: package org.apache.cassandra.db.commitlog;
2:7374e9b: 
1:7374e9b: import java.io.IOException;
1:7374e9b: import java.nio.ByteBuffer;
1:7374e9b: import java.util.Iterator;
1:7374e9b: import java.util.zip.CRC32;
1:7374e9b: import javax.crypto.Cipher;
1:7374e9b: 
1:7374e9b: import com.google.common.annotations.VisibleForTesting;
1:7374e9b: import com.google.common.collect.AbstractIterator;
1:7374e9b: 
1:7374e9b: import org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.ChunkProvider;
1:e31e216: import org.apache.cassandra.db.commitlog.CommitLogReadHandler.*;
1:7374e9b: import org.apache.cassandra.io.FSReadError;
1:7374e9b: import org.apache.cassandra.io.compress.ICompressor;
1:7374e9b: import org.apache.cassandra.io.util.FileDataInput;
1:7374e9b: import org.apache.cassandra.io.util.FileSegmentInputStream;
1:7374e9b: import org.apache.cassandra.io.util.RandomAccessReader;
1:7374e9b: import org.apache.cassandra.schema.CompressionParams;
1:7374e9b: import org.apache.cassandra.security.EncryptionUtils;
1:7374e9b: import org.apache.cassandra.security.EncryptionContext;
1:7374e9b: import org.apache.cassandra.utils.ByteBufferUtil;
1:7374e9b: 
1:7374e9b: import static org.apache.cassandra.db.commitlog.CommitLogSegment.SYNC_MARKER_SIZE;
1:7374e9b: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1:7374e9b: 
1:7374e9b: /**
1:7374e9b:  * Read each sync section of a commit log, iteratively.
1:7374e9b:  */
1:e31e216: public class CommitLogSegmentReader implements Iterable<CommitLogSegmentReader.SyncSegment>
1:7374e9b: {
1:e31e216:     private final CommitLogReadHandler handler;
1:7374e9b:     private final CommitLogDescriptor descriptor;
1:7374e9b:     private final RandomAccessReader reader;
1:7374e9b:     private final Segmenter segmenter;
1:7374e9b:     private final boolean tolerateTruncation;
1:7374e9b: 
1:7374e9b:     /**
1:7374e9b:      * ending position of the current sync section.
1:7374e9b:      */
1:7374e9b:     protected int end;
1:7374e9b: 
1:e31e216:     protected CommitLogSegmentReader(CommitLogReadHandler handler,
1:e31e216:                                      CommitLogDescriptor descriptor,
1:e31e216:                                      RandomAccessReader reader,
1:e31e216:                                      boolean tolerateTruncation)
1:7374e9b:     {
1:e31e216:         this.handler = handler;
1:7374e9b:         this.descriptor = descriptor;
1:7374e9b:         this.reader = reader;
1:7374e9b:         this.tolerateTruncation = tolerateTruncation;
1:7374e9b: 
1:7374e9b:         end = (int) reader.getFilePointer();
1:7374e9b:         if (descriptor.getEncryptionContext().isEnabled())
1:e31e216:             segmenter = new EncryptedSegmenter(descriptor, reader);
1:7374e9b:         else if (descriptor.compression != null)
1:7374e9b:             segmenter = new CompressedSegmenter(descriptor, reader);
1:7374e9b:         else
1:7374e9b:             segmenter = new NoOpSegmenter(reader);
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     public Iterator<SyncSegment> iterator()
1:7374e9b:     {
1:7374e9b:         return new SegmentIterator();
1:7374e9b:     }
1:7374e9b: 
1:e31e216:     protected class SegmentIterator extends AbstractIterator<CommitLogSegmentReader.SyncSegment>
1:7374e9b:     {
1:7374e9b:         protected SyncSegment computeNext()
1:7374e9b:         {
1:7374e9b:             while (true)
1:7374e9b:             {
1:7374e9b:                 try
1:7374e9b:                 {
1:7374e9b:                     final int currentStart = end;
1:7374e9b:                     end = readSyncMarker(descriptor, currentStart, reader);
1:7374e9b:                     if (end == -1)
1:7374e9b:                     {
1:7374e9b:                         return endOfData();
1:7374e9b:                     }
1:7374e9b:                     if (end > reader.length())
1:7374e9b:                     {
1:7374e9b:                         // the CRC was good (meaning it was good when it was written and still looks legit), but the file is truncated now.
1:7374e9b:                         // try to grab and use as much of the file as possible, which might be nothing if the end of the file truly is corrupt
1:7374e9b:                         end = (int) reader.length();
1:7374e9b:                     }
1:7374e9b:                     return segmenter.nextSegment(currentStart + SYNC_MARKER_SIZE, end);
1:7374e9b:                 }
1:e31e216:                 catch(CommitLogSegmentReader.SegmentReadException e)
1:7374e9b:                 {
1:7374e9b:                     try
1:7374e9b:                     {
1:e31e216:                         handler.handleUnrecoverableError(new CommitLogReadException(
1:e31e216:                                                     e.getMessage(),
1:e31e216:                                                     CommitLogReadErrorReason.UNRECOVERABLE_DESCRIPTOR_ERROR,
1:e31e216:                                                     !e.invalidCrc && tolerateTruncation));
1:7374e9b:                     }
1:7374e9b:                     catch (IOException ioe)
1:7374e9b:                     {
1:7374e9b:                         throw new RuntimeException(ioe);
1:7374e9b:                     }
1:7374e9b:                 }
1:7374e9b:                 catch (IOException e)
1:7374e9b:                 {
1:7374e9b:                     try
1:7374e9b:                     {
1:7374e9b:                         boolean tolerateErrorsInSection = tolerateTruncation & segmenter.tolerateSegmentErrors(end, reader.length());
1:7374e9b:                         // if no exception is thrown, the while loop will continue
1:e31e216:                         handler.handleUnrecoverableError(new CommitLogReadException(
1:e31e216:                                                     e.getMessage(),
1:e31e216:                                                     CommitLogReadErrorReason.UNRECOVERABLE_DESCRIPTOR_ERROR,
1:e31e216:                                                     tolerateErrorsInSection));
1:7374e9b:                     }
1:7374e9b:                     catch (IOException ioe)
1:7374e9b:                     {
1:7374e9b:                         throw new RuntimeException(ioe);
1:7374e9b:                     }
1:7374e9b:                 }
1:7374e9b:             }
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     private int readSyncMarker(CommitLogDescriptor descriptor, int offset, RandomAccessReader reader) throws IOException
1:7374e9b:     {
1:7374e9b:         if (offset > reader.length() - SYNC_MARKER_SIZE)
1:7374e9b:         {
1:7374e9b:             // There was no room in the segment to write a final header. No data could be present here.
1:7374e9b:             return -1;
1:7374e9b:         }
1:7374e9b:         reader.seek(offset);
1:7374e9b:         CRC32 crc = new CRC32();
1:7374e9b:         updateChecksumInt(crc, (int) (descriptor.id & 0xFFFFFFFFL));
1:7374e9b:         updateChecksumInt(crc, (int) (descriptor.id >>> 32));
1:7374e9b:         updateChecksumInt(crc, (int) reader.getPosition());
1:7374e9b:         final int end = reader.readInt();
1:7374e9b:         long filecrc = reader.readInt() & 0xffffffffL;
1:7374e9b:         if (crc.getValue() != filecrc)
1:7374e9b:         {
1:7374e9b:             if (end != 0 || filecrc != 0)
1:7374e9b:             {
1:7374e9b:                 String msg = String.format("Encountered bad header at position %d of commit log %s, with invalid CRC. " +
1:7374e9b:                              "The end of segment marker should be zero.", offset, reader.getPath());
1:7374e9b:                 throw new SegmentReadException(msg, true);
1:7374e9b:             }
1:7374e9b:             return -1;
1:7374e9b:         }
1:7374e9b:         else if (end < offset || end > reader.length())
1:7374e9b:         {
1:7374e9b:             String msg = String.format("Encountered bad header at position %d of commit log %s, with bad position but valid CRC", offset, reader.getPath());
1:7374e9b:             throw new SegmentReadException(msg, false);
1:7374e9b:         }
1:7374e9b:         return end;
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     public static class SegmentReadException extends IOException
1:7374e9b:     {
1:7374e9b:         public final boolean invalidCrc;
1:7374e9b: 
1:7374e9b:         public SegmentReadException(String msg, boolean invalidCrc)
1:7374e9b:         {
1:7374e9b:             super(msg);
1:7374e9b:             this.invalidCrc = invalidCrc;
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     public static class SyncSegment
1:7374e9b:     {
1:7374e9b:         /** the 'buffer' to replay commit log data from */
1:7374e9b:         public final FileDataInput input;
1:7374e9b: 
1:7374e9b:         /** offset in file where this section begins. */
1:7374e9b:         public final int fileStartPosition;
1:7374e9b: 
1:7374e9b:         /** offset in file where this section ends. */
1:7374e9b:         public final int fileEndPosition;
1:7374e9b: 
1:7374e9b:         /** the logical ending position of the buffer */
1:7374e9b:         public final int endPosition;
1:7374e9b: 
1:7374e9b:         public final boolean toleratesErrorsInSection;
1:7374e9b: 
1:7374e9b:         public SyncSegment(FileDataInput input, int fileStartPosition, int fileEndPosition, int endPosition, boolean toleratesErrorsInSection)
1:7374e9b:         {
1:7374e9b:             this.input = input;
1:7374e9b:             this.fileStartPosition = fileStartPosition;
1:7374e9b:             this.fileEndPosition = fileEndPosition;
1:7374e9b:             this.endPosition = endPosition;
1:7374e9b:             this.toleratesErrorsInSection = toleratesErrorsInSection;
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     /**
1:7374e9b:      * Derives the next section of the commit log to be replayed. Section boundaries are derived from the commit log sync markers.
1:7374e9b:      */
1:7374e9b:     interface Segmenter
1:7374e9b:     {
1:7374e9b:         /**
1:7374e9b:          * Get the next section of the commit log to replay.
1:7374e9b:          *
1:7374e9b:          * @param startPosition the position in the file to begin reading at
1:7374e9b:          * @param nextSectionStartPosition the file position of the beginning of the next section
1:7374e9b:          * @return the buffer and it's logical end position
1:7374e9b:          * @throws IOException
1:7374e9b:          */
1:7374e9b:         SyncSegment nextSegment(int startPosition, int nextSectionStartPosition) throws IOException;
1:7374e9b: 
1:7374e9b:         /**
1:7374e9b:          * Determine if we tolerate errors in the current segment.
1:7374e9b:          */
1:7374e9b:         default boolean tolerateSegmentErrors(int segmentEndPosition, long fileLength)
1:7374e9b:         {
1:7374e9b:             return segmentEndPosition >= fileLength || segmentEndPosition < 0;
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     static class NoOpSegmenter implements Segmenter
1:7374e9b:     {
1:7374e9b:         private final RandomAccessReader reader;
1:7374e9b: 
1:7374e9b:         public NoOpSegmenter(RandomAccessReader reader)
1:7374e9b:         {
1:7374e9b:             this.reader = reader;
1:7374e9b:         }
1:7374e9b: 
1:7374e9b:         public SyncSegment nextSegment(int startPosition, int nextSectionStartPosition)
1:7374e9b:         {
1:7374e9b:             reader.seek(startPosition);
1:7374e9b:             return new SyncSegment(reader, startPosition, nextSectionStartPosition, nextSectionStartPosition, true);
1:7374e9b:         }
1:7374e9b: 
1:7374e9b:         public boolean tolerateSegmentErrors(int end, long length)
1:7374e9b:         {
1:7374e9b:             return true;
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     static class CompressedSegmenter implements Segmenter
1:7374e9b:     {
1:7374e9b:         private final ICompressor compressor;
1:7374e9b:         private final RandomAccessReader reader;
1:7374e9b:         private byte[] compressedBuffer;
1:7374e9b:         private byte[] uncompressedBuffer;
1:7374e9b:         private long nextLogicalStart;
1:7374e9b: 
1:7374e9b:         public CompressedSegmenter(CommitLogDescriptor desc, RandomAccessReader reader)
1:7374e9b:         {
1:7374e9b:             this(CompressionParams.createCompressor(desc.compression), reader);
1:7374e9b:         }
1:7374e9b: 
1:7374e9b:         public CompressedSegmenter(ICompressor compressor, RandomAccessReader reader)
1:7374e9b:         {
1:7374e9b:             this.compressor = compressor;
1:7374e9b:             this.reader = reader;
1:7374e9b:             compressedBuffer = new byte[0];
1:7374e9b:             uncompressedBuffer = new byte[0];
1:7374e9b:             nextLogicalStart = reader.getFilePointer();
1:7374e9b:         }
1:7374e9b: 
1:05660a5:         @SuppressWarnings("resource")
1:7374e9b:         public SyncSegment nextSegment(final int startPosition, final int nextSectionStartPosition) throws IOException
1:7374e9b:         {
1:7374e9b:             reader.seek(startPosition);
1:7374e9b:             int uncompressedLength = reader.readInt();
1:7374e9b: 
1:7374e9b:             int compressedLength = nextSectionStartPosition - (int)reader.getPosition();
1:7374e9b:             if (compressedLength > compressedBuffer.length)
1:7374e9b:                 compressedBuffer = new byte[(int) (1.2 * compressedLength)];
1:7374e9b:             reader.readFully(compressedBuffer, 0, compressedLength);
1:7374e9b: 
1:7374e9b:             if (uncompressedLength > uncompressedBuffer.length)
1:7374e9b:                uncompressedBuffer = new byte[(int) (1.2 * uncompressedLength)];
1:7374e9b:             int count = compressor.uncompress(compressedBuffer, 0, compressedLength, uncompressedBuffer, 0);
1:7374e9b:             nextLogicalStart += SYNC_MARKER_SIZE;
1:7374e9b:             FileDataInput input = new FileSegmentInputStream(ByteBuffer.wrap(uncompressedBuffer, 0, count), reader.getPath(), nextLogicalStart);
1:7374e9b:             nextLogicalStart += uncompressedLength;
1:7374e9b:             return new SyncSegment(input, startPosition, nextSectionStartPosition, (int)nextLogicalStart, tolerateSegmentErrors(nextSectionStartPosition, reader.length()));
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     static class EncryptedSegmenter implements Segmenter
1:7374e9b:     {
1:7374e9b:         private final RandomAccessReader reader;
1:7374e9b:         private final ICompressor compressor;
1:7374e9b:         private final Cipher cipher;
1:7374e9b: 
1:7374e9b:         /**
1:7374e9b:          * the result of the decryption is written into this buffer.
1:7374e9b:          */
1:7374e9b:         private ByteBuffer decryptedBuffer;
1:7374e9b: 
1:7374e9b:         /**
1:7374e9b:          * the result of the decryption is written into this buffer.
1:7374e9b:          */
1:7374e9b:         private ByteBuffer uncompressedBuffer;
1:7374e9b: 
1:7374e9b:         private final ChunkProvider chunkProvider;
1:7374e9b: 
1:7374e9b:         private long currentSegmentEndPosition;
1:7374e9b:         private long nextLogicalStart;
1:7374e9b: 
1:e31e216:         public EncryptedSegmenter(CommitLogDescriptor descriptor, RandomAccessReader reader)
1:7374e9b:         {
1:7374e9b:             this(reader, descriptor.getEncryptionContext());
1:7374e9b:         }
1:7374e9b: 
1:7374e9b:         @VisibleForTesting
1:7374e9b:         EncryptedSegmenter(final RandomAccessReader reader, EncryptionContext encryptionContext)
1:7374e9b:         {
1:7374e9b:             this.reader = reader;
1:7374e9b:             decryptedBuffer = ByteBuffer.allocate(0);
1:7374e9b:             compressor = encryptionContext.getCompressor();
1:7374e9b:             nextLogicalStart = reader.getFilePointer();
1:7374e9b: 
1:7374e9b:             try
1:7374e9b:             {
1:7374e9b:                 cipher = encryptionContext.getDecryptor();
1:7374e9b:             }
1:7374e9b:             catch (IOException ioe)
1:7374e9b:             {
1:7374e9b:                 throw new FSReadError(ioe, reader.getPath());
1:7374e9b:             }
1:7374e9b: 
1:7374e9b:             chunkProvider = () -> {
1:7374e9b:                 if (reader.getFilePointer() >= currentSegmentEndPosition)
1:7374e9b:                     return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:7374e9b:                 try
1:7374e9b:                 {
1:7374e9b:                     decryptedBuffer = EncryptionUtils.decrypt(reader, decryptedBuffer, true, cipher);
1:7374e9b:                     uncompressedBuffer = EncryptionUtils.uncompress(decryptedBuffer, uncompressedBuffer, true, compressor);
1:7374e9b:                     return uncompressedBuffer;
1:7374e9b:                 }
1:7374e9b:                 catch (IOException e)
1:7374e9b:                 {
1:7374e9b:                     throw new FSReadError(e, reader.getPath());
1:7374e9b:                 }
1:7374e9b:             };
1:7374e9b:         }
1:7374e9b: 
1:05660a5:         @SuppressWarnings("resource")
1:7374e9b:         public SyncSegment nextSegment(int startPosition, int nextSectionStartPosition) throws IOException
1:7374e9b:         {
1:7374e9b:             int totalPlainTextLength = reader.readInt();
1:7374e9b:             currentSegmentEndPosition = nextSectionStartPosition - 1;
1:7374e9b: 
1:7374e9b:             nextLogicalStart += SYNC_MARKER_SIZE;
1:7374e9b:             FileDataInput input = new EncryptedFileSegmentInputStream(reader.getPath(), nextLogicalStart, 0, totalPlainTextLength, chunkProvider);
1:7374e9b:             nextLogicalStart += totalPlainTextLength;
1:7374e9b:             return new SyncSegment(input, startPosition, nextSectionStartPosition, (int)nextLogicalStart, tolerateSegmentErrors(nextSectionStartPosition, reader.length()));
1:7374e9b:         }
1:7374e9b:     }
1:7374e9b: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:05660a5
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource")
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.commitlog.CommitLogReadHandler.*;
/////////////////////////////////////////////////////////////////////////
1: public class CommitLogSegmentReader implements Iterable<CommitLogSegmentReader.SyncSegment>
1:     private final CommitLogReadHandler handler;
/////////////////////////////////////////////////////////////////////////
1:     protected CommitLogSegmentReader(CommitLogReadHandler handler,
1:                                      CommitLogDescriptor descriptor,
1:                                      RandomAccessReader reader,
1:                                      boolean tolerateTruncation)
1:         this.handler = handler;
1:             segmenter = new EncryptedSegmenter(descriptor, reader);
/////////////////////////////////////////////////////////////////////////
1:     protected class SegmentIterator extends AbstractIterator<CommitLogSegmentReader.SyncSegment>
/////////////////////////////////////////////////////////////////////////
1:                 catch(CommitLogSegmentReader.SegmentReadException e)
1:                         handler.handleUnrecoverableError(new CommitLogReadException(
1:                                                     e.getMessage(),
1:                                                     CommitLogReadErrorReason.UNRECOVERABLE_DESCRIPTOR_ERROR,
1:                                                     !e.invalidCrc && tolerateTruncation));
/////////////////////////////////////////////////////////////////////////
1:                         handler.handleUnrecoverableError(new CommitLogReadException(
1:                                                     e.getMessage(),
1:                                                     CommitLogReadErrorReason.UNRECOVERABLE_DESCRIPTOR_ERROR,
1:                                                     tolerateErrorsInSection));
/////////////////////////////////////////////////////////////////////////
1:         public EncryptedSegmenter(CommitLogDescriptor descriptor, RandomAccessReader reader)
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Iterator;
1: import java.util.zip.CRC32;
1: import javax.crypto.Cipher;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.collect.AbstractIterator;
1: 
1: import org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream.ChunkProvider;
1: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.io.util.FileDataInput;
1: import org.apache.cassandra.io.util.FileSegmentInputStream;
1: import org.apache.cassandra.io.util.RandomAccessReader;
1: import org.apache.cassandra.schema.CompressionParams;
1: import org.apache.cassandra.security.EncryptionUtils;
1: import org.apache.cassandra.security.EncryptionContext;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import static org.apache.cassandra.db.commitlog.CommitLogSegment.SYNC_MARKER_SIZE;
1: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1: 
1: /**
1:  * Read each sync section of a commit log, iteratively.
1:  */
0: public class SegmentReader implements Iterable<SegmentReader.SyncSegment>
1: {
1:     private final CommitLogDescriptor descriptor;
1:     private final RandomAccessReader reader;
1:     private final Segmenter segmenter;
1:     private final boolean tolerateTruncation;
1: 
1:     /**
1:      * ending position of the current sync section.
1:      */
1:     protected int end;
1: 
0:     protected SegmentReader(CommitLogDescriptor descriptor, RandomAccessReader reader, boolean tolerateTruncation)
1:     {
1:         this.descriptor = descriptor;
1:         this.reader = reader;
1:         this.tolerateTruncation = tolerateTruncation;
1: 
1:         end = (int) reader.getFilePointer();
1:         if (descriptor.getEncryptionContext().isEnabled())
0:             segmenter = new EncryptedSegmenter(reader, descriptor);
1:         else if (descriptor.compression != null)
1:             segmenter = new CompressedSegmenter(descriptor, reader);
1:         else
1:             segmenter = new NoOpSegmenter(reader);
1:     }
1: 
1:     public Iterator<SyncSegment> iterator()
1:     {
1:         return new SegmentIterator();
1:     }
1: 
0:     protected class SegmentIterator extends AbstractIterator<SegmentReader.SyncSegment>
1:     {
1:         protected SyncSegment computeNext()
1:         {
1:             while (true)
1:             {
1:                 try
1:                 {
1:                     final int currentStart = end;
1:                     end = readSyncMarker(descriptor, currentStart, reader);
1:                     if (end == -1)
1:                     {
1:                         return endOfData();
1:                     }
1:                     if (end > reader.length())
1:                     {
1:                         // the CRC was good (meaning it was good when it was written and still looks legit), but the file is truncated now.
1:                         // try to grab and use as much of the file as possible, which might be nothing if the end of the file truly is corrupt
1:                         end = (int) reader.length();
1:                     }
1: 
1:                     return segmenter.nextSegment(currentStart + SYNC_MARKER_SIZE, end);
1:                 }
0:                 catch(SegmentReader.SegmentReadException e)
1:                 {
1:                     try
1:                     {
0:                         CommitLogReplayer.handleReplayError(!e.invalidCrc && tolerateTruncation, e.getMessage());
1:                     }
1:                     catch (IOException ioe)
1:                     {
1:                         throw new RuntimeException(ioe);
1:                     }
1:                 }
1:                 catch (IOException e)
1:                 {
1:                     try
1:                     {
1:                         boolean tolerateErrorsInSection = tolerateTruncation & segmenter.tolerateSegmentErrors(end, reader.length());
1:                         // if no exception is thrown, the while loop will continue
0:                         CommitLogReplayer.handleReplayError(tolerateErrorsInSection, e.getMessage());
1:                     }
1:                     catch (IOException ioe)
1:                     {
1:                         throw new RuntimeException(ioe);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private int readSyncMarker(CommitLogDescriptor descriptor, int offset, RandomAccessReader reader) throws IOException
1:     {
1:         if (offset > reader.length() - SYNC_MARKER_SIZE)
1:         {
1:             // There was no room in the segment to write a final header. No data could be present here.
1:             return -1;
1:         }
1:         reader.seek(offset);
1:         CRC32 crc = new CRC32();
1:         updateChecksumInt(crc, (int) (descriptor.id & 0xFFFFFFFFL));
1:         updateChecksumInt(crc, (int) (descriptor.id >>> 32));
1:         updateChecksumInt(crc, (int) reader.getPosition());
1:         final int end = reader.readInt();
1:         long filecrc = reader.readInt() & 0xffffffffL;
1:         if (crc.getValue() != filecrc)
1:         {
1:             if (end != 0 || filecrc != 0)
1:             {
1:                 String msg = String.format("Encountered bad header at position %d of commit log %s, with invalid CRC. " +
1:                              "The end of segment marker should be zero.", offset, reader.getPath());
1:                 throw new SegmentReadException(msg, true);
1:             }
1:             return -1;
1:         }
1:         else if (end < offset || end > reader.length())
1:         {
1:             String msg = String.format("Encountered bad header at position %d of commit log %s, with bad position but valid CRC", offset, reader.getPath());
1:             throw new SegmentReadException(msg, false);
1:         }
1:         return end;
1:     }
1: 
1:     public static class SegmentReadException extends IOException
1:     {
1:         public final boolean invalidCrc;
1: 
1:         public SegmentReadException(String msg, boolean invalidCrc)
1:         {
1:             super(msg);
1:             this.invalidCrc = invalidCrc;
1:         }
1:     }
1: 
1:     public static class SyncSegment
1:     {
1:         /** the 'buffer' to replay commit log data from */
1:         public final FileDataInput input;
1: 
1:         /** offset in file where this section begins. */
1:         public final int fileStartPosition;
1: 
1:         /** offset in file where this section ends. */
1:         public final int fileEndPosition;
1: 
1:         /** the logical ending position of the buffer */
1:         public final int endPosition;
1: 
1:         public final boolean toleratesErrorsInSection;
1: 
1:         public SyncSegment(FileDataInput input, int fileStartPosition, int fileEndPosition, int endPosition, boolean toleratesErrorsInSection)
1:         {
1:             this.input = input;
1:             this.fileStartPosition = fileStartPosition;
1:             this.fileEndPosition = fileEndPosition;
1:             this.endPosition = endPosition;
1:             this.toleratesErrorsInSection = toleratesErrorsInSection;
1:         }
1:     }
1: 
1:     /**
1:      * Derives the next section of the commit log to be replayed. Section boundaries are derived from the commit log sync markers.
1:      */
1:     interface Segmenter
1:     {
1:         /**
1:          * Get the next section of the commit log to replay.
1:          *
1:          * @param startPosition the position in the file to begin reading at
1:          * @param nextSectionStartPosition the file position of the beginning of the next section
1:          * @return the buffer and it's logical end position
1:          * @throws IOException
1:          */
1:         SyncSegment nextSegment(int startPosition, int nextSectionStartPosition) throws IOException;
1: 
1:         /**
1:          * Determine if we tolerate errors in the current segment.
1:          */
1:         default boolean tolerateSegmentErrors(int segmentEndPosition, long fileLength)
1:         {
1:             return segmentEndPosition >= fileLength || segmentEndPosition < 0;
1:         }
1:     }
1: 
1:     static class NoOpSegmenter implements Segmenter
1:     {
1:         private final RandomAccessReader reader;
1: 
1:         public NoOpSegmenter(RandomAccessReader reader)
1:         {
1:             this.reader = reader;
1:         }
1: 
1:         public SyncSegment nextSegment(int startPosition, int nextSectionStartPosition)
1:         {
1:             reader.seek(startPosition);
1:             return new SyncSegment(reader, startPosition, nextSectionStartPosition, nextSectionStartPosition, true);
1:         }
1: 
1:         public boolean tolerateSegmentErrors(int end, long length)
1:         {
1:             return true;
1:         }
1:     }
1: 
1:     static class CompressedSegmenter implements Segmenter
1:     {
1:         private final ICompressor compressor;
1:         private final RandomAccessReader reader;
1:         private byte[] compressedBuffer;
1:         private byte[] uncompressedBuffer;
1:         private long nextLogicalStart;
1: 
1:         public CompressedSegmenter(CommitLogDescriptor desc, RandomAccessReader reader)
1:         {
1:             this(CompressionParams.createCompressor(desc.compression), reader);
1:         }
1: 
1:         public CompressedSegmenter(ICompressor compressor, RandomAccessReader reader)
1:         {
1:             this.compressor = compressor;
1:             this.reader = reader;
1:             compressedBuffer = new byte[0];
1:             uncompressedBuffer = new byte[0];
1:             nextLogicalStart = reader.getFilePointer();
1:         }
1: 
1:         public SyncSegment nextSegment(final int startPosition, final int nextSectionStartPosition) throws IOException
1:         {
1:             reader.seek(startPosition);
1:             int uncompressedLength = reader.readInt();
1: 
1:             int compressedLength = nextSectionStartPosition - (int)reader.getPosition();
1:             if (compressedLength > compressedBuffer.length)
1:                 compressedBuffer = new byte[(int) (1.2 * compressedLength)];
1:             reader.readFully(compressedBuffer, 0, compressedLength);
1: 
1:             if (uncompressedLength > uncompressedBuffer.length)
1:                uncompressedBuffer = new byte[(int) (1.2 * uncompressedLength)];
1:             int count = compressor.uncompress(compressedBuffer, 0, compressedLength, uncompressedBuffer, 0);
1:             nextLogicalStart += SYNC_MARKER_SIZE;
1:             FileDataInput input = new FileSegmentInputStream(ByteBuffer.wrap(uncompressedBuffer, 0, count), reader.getPath(), nextLogicalStart);
1:             nextLogicalStart += uncompressedLength;
1:             return new SyncSegment(input, startPosition, nextSectionStartPosition, (int)nextLogicalStart, tolerateSegmentErrors(nextSectionStartPosition, reader.length()));
1:         }
1:     }
1: 
1:     static class EncryptedSegmenter implements Segmenter
1:     {
1:         private final RandomAccessReader reader;
1:         private final ICompressor compressor;
1:         private final Cipher cipher;
1: 
1:         /**
1:          * the result of the decryption is written into this buffer.
1:          */
1:         private ByteBuffer decryptedBuffer;
1: 
1:         /**
1:          * the result of the decryption is written into this buffer.
1:          */
1:         private ByteBuffer uncompressedBuffer;
1: 
1:         private final ChunkProvider chunkProvider;
1: 
1:         private long currentSegmentEndPosition;
1:         private long nextLogicalStart;
1: 
0:         public EncryptedSegmenter(RandomAccessReader reader, CommitLogDescriptor descriptor)
1:         {
1:             this(reader, descriptor.getEncryptionContext());
1:         }
1: 
1:         @VisibleForTesting
1:         EncryptedSegmenter(final RandomAccessReader reader, EncryptionContext encryptionContext)
1:         {
1:             this.reader = reader;
1:             decryptedBuffer = ByteBuffer.allocate(0);
1:             compressor = encryptionContext.getCompressor();
1:             nextLogicalStart = reader.getFilePointer();
1: 
1:             try
1:             {
1:                 cipher = encryptionContext.getDecryptor();
1:             }
1:             catch (IOException ioe)
1:             {
1:                 throw new FSReadError(ioe, reader.getPath());
1:             }
1: 
1:             chunkProvider = () -> {
1:                 if (reader.getFilePointer() >= currentSegmentEndPosition)
1:                     return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:                 try
1:                 {
1:                     decryptedBuffer = EncryptionUtils.decrypt(reader, decryptedBuffer, true, cipher);
1:                     uncompressedBuffer = EncryptionUtils.uncompress(decryptedBuffer, uncompressedBuffer, true, compressor);
1:                     return uncompressedBuffer;
1:                 }
1:                 catch (IOException e)
1:                 {
1:                     throw new FSReadError(e, reader.getPath());
1:                 }
1:             };
1:         }
1: 
1:         public SyncSegment nextSegment(int startPosition, int nextSectionStartPosition) throws IOException
1:         {
1:             int totalPlainTextLength = reader.readInt();
1:             currentSegmentEndPosition = nextSectionStartPosition - 1;
1: 
1:             nextLogicalStart += SYNC_MARKER_SIZE;
1:             FileDataInput input = new EncryptedFileSegmentInputStream(reader.getPath(), nextLogicalStart, 0, totalPlainTextLength, chunkProvider);
1:             nextLogicalStart += totalPlainTextLength;
1:             return new SyncSegment(input, startPosition, nextSectionStartPosition, (int)nextLogicalStart, tolerateSegmentErrors(nextSectionStartPosition, reader.length()));
1:         }
1:     }
1: }
============================================================================