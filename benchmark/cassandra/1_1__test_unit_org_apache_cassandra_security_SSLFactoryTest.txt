1:a24bd6c: /*
1:a24bd6c: * Licensed to the Apache Software Foundation (ASF) under one
1:a24bd6c: * or more contributor license agreements.  See the NOTICE file
1:a24bd6c: * distributed with this work for additional information
1:a24bd6c: * regarding copyright ownership.  The ASF licenses this file
1:a24bd6c: * to you under the Apache License, Version 2.0 (the
1:a24bd6c: * "License"); you may not use this file except in compliance
1:a24bd6c: * with the License.  You may obtain a copy of the License at
1:a24bd6c: *
1:a24bd6c: *    http://www.apache.org/licenses/LICENSE-2.0
1:a24bd6c: *
1:a24bd6c: * Unless required by applicable law or agreed to in writing,
1:a24bd6c: * software distributed under the License is distributed on an
1:a24bd6c: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a24bd6c: * KIND, either express or implied.  See the License for the
1:a24bd6c: * specific language governing permissions and limitations
1:a24bd6c: * under the License.
1:a24bd6c: */
1:a24bd6c: package org.apache.cassandra.security;
1:a24bd6c: 
1:a24bd6c: import static org.junit.Assert.assertArrayEquals;
1:a24bd6c: 
1:a24bd6c: import java.io.IOException;
1:a24bd6c: import java.net.InetAddress;
1:a24bd6c: 
1:a24bd6c: import javax.net.ssl.SSLServerSocket;
1:a24bd6c: 
1:a24bd6c: import com.google.common.base.Predicates;
1:a24bd6c: import com.google.common.collect.Iterables;
1:a24bd6c: import com.google.common.collect.Lists;
1:a24bd6c: 
1:a24bd6c: import org.apache.cassandra.config.EncryptionOptions;
1:a24bd6c: import org.apache.cassandra.config.EncryptionOptions.ServerEncryptionOptions;
1:a24bd6c: import org.junit.Test;
1:a24bd6c: 
1:a24bd6c: public class SSLFactoryTest
1:a24bd6c: {
1:a24bd6c: 
1:a24bd6c:     @Test
1:a24bd6c:     public void testFilterCipherSuites()
1:a24bd6c:     {
1:a24bd6c:         String[] supported = new String[] {"x", "b", "c", "f"};
1:a24bd6c:         String[] desired = new String[] { "k", "a", "b", "c" };
1:a24bd6c:         assertArrayEquals(new String[] { "b", "c" }, SSLFactory.filterCipherSuites(supported, desired));
1:a24bd6c: 
1:a24bd6c:         desired = new String[] { "c", "b", "x" };
1:a24bd6c:         assertArrayEquals(desired, SSLFactory.filterCipherSuites(supported, desired));
1:a24bd6c:     }
1:a24bd6c: 
1:a24bd6c:     @Test
1:a24bd6c:     public void testServerSocketCiphers() throws IOException
1:a24bd6c:     {
1:a24bd6c:         ServerEncryptionOptions options = new EncryptionOptions.ServerEncryptionOptions();
1:a24bd6c:         options.keystore = "test/conf/keystore.jks";
1:a24bd6c:         options.keystore_password = "cassandra";
1:a24bd6c:         options.truststore = options.keystore;
1:a24bd6c:         options.truststore_password = options.keystore_password;
1:a24bd6c:         options.cipher_suites = new String[] {
1:a24bd6c:             "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA",
1:a24bd6c:             "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
1:a24bd6c:             "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
1:a24bd6c:         };
1:a24bd6c: 
1:a24bd6c:         // enabled ciphers must be a subset of configured ciphers with identical order
1:a24bd6c:         try (SSLServerSocket socket = SSLFactory.getServerSocket(options, InetAddress.getLocalHost(), 55123))
1:a24bd6c:         {
1:a24bd6c:             String[] enabled = socket.getEnabledCipherSuites();
1:a24bd6c:             String[] wanted = Iterables.toArray(Iterables.filter(Lists.newArrayList(options.cipher_suites),
1:a24bd6c:                                                                  Predicates.in(Lists.newArrayList(enabled))),
1:a24bd6c:                                                 String.class);
1:a24bd6c:             assertArrayEquals(wanted, enabled);
1:a24bd6c:         }
1:a24bd6c:     }
1:a24bd6c: 
1:a24bd6c: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:a24bd6c
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.security;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: 
1: import javax.net.ssl.SSLServerSocket;
1: 
1: import com.google.common.base.Predicates;
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
1: 
1: import org.apache.cassandra.config.EncryptionOptions;
1: import org.apache.cassandra.config.EncryptionOptions.ServerEncryptionOptions;
1: import org.junit.Test;
1: 
1: public class SSLFactoryTest
1: {
1: 
1:     @Test
1:     public void testFilterCipherSuites()
1:     {
1:         String[] supported = new String[] {"x", "b", "c", "f"};
1:         String[] desired = new String[] { "k", "a", "b", "c" };
1:         assertArrayEquals(new String[] { "b", "c" }, SSLFactory.filterCipherSuites(supported, desired));
1: 
1:         desired = new String[] { "c", "b", "x" };
1:         assertArrayEquals(desired, SSLFactory.filterCipherSuites(supported, desired));
1:     }
1: 
1:     @Test
1:     public void testServerSocketCiphers() throws IOException
1:     {
1:         ServerEncryptionOptions options = new EncryptionOptions.ServerEncryptionOptions();
1:         options.keystore = "test/conf/keystore.jks";
1:         options.keystore_password = "cassandra";
1:         options.truststore = options.keystore;
1:         options.truststore_password = options.keystore_password;
1:         options.cipher_suites = new String[] {
1:             "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA",
1:             "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
1:             "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
1:         };
1: 
1:         // enabled ciphers must be a subset of configured ciphers with identical order
1:         try (SSLServerSocket socket = SSLFactory.getServerSocket(options, InetAddress.getLocalHost(), 55123))
1:         {
1:             String[] enabled = socket.getEnabledCipherSuites();
1:             String[] wanted = Iterables.toArray(Iterables.filter(Lists.newArrayList(options.cipher_suites),
1:                                                                  Predicates.in(Lists.newArrayList(enabled))),
1:                                                 String.class);
1:             assertArrayEquals(wanted, enabled);
1:         }
1:     }
1: 
1: }
============================================================================