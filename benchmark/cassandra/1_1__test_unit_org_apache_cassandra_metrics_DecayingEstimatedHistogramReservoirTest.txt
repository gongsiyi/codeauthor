1:2e90259: /*
1:2e90259:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e90259:  * or more contributor license agreements.  See the NOTICE file
1:2e90259:  * distributed with this work for additional information
1:2e90259:  * regarding copyright ownership.  The ASF licenses this file
1:2e90259:  * to you under the Apache License, Version 2.0 (the
1:2e90259:  * "License"); you may not use this file except in compliance
1:2e90259:  * with the License.  You may obtain a copy of the License at
1:2e90259:  *
1:2e90259:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e90259:  *
1:2e90259:  * Unless required by applicable law or agreed to in writing, software
1:2e90259:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e90259:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e90259:  * See the License for the specific language governing permissions and
1:2e90259:  * limitations under the License.
1:2e90259:  */
1:2e90259: 
1:2e90259: package org.apache.cassandra.metrics;
1:2e90259: 
1:2e90259: import org.junit.Test;
1:2e90259: 
1:2e90259: import com.codahale.metrics.Clock;
1:2e90259: import com.codahale.metrics.Snapshot;
1:2e90259: 
1:2e90259: import static org.junit.Assert.assertEquals;
1:2e90259: import static org.junit.Assert.assertFalse;
1:2e90259: import static org.junit.Assert.assertTrue;
1:2e90259: 
1:2e90259: 
1:2e90259: public class DecayingEstimatedHistogramReservoirTest
1:2e90259: {
1:2e90259:     private static final double DOUBLE_ASSERT_DELTA = 0;
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testSimple()
1:2e90259:     {
1:2e90259:         {
1:2e90259:             // 0 and 1 map to the same, first bucket
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir();
1:2e90259:             histogram.update(0);
1:2e90259:             assertEquals(1, histogram.getSnapshot().getValues()[0]);
1:2e90259:             histogram.update(1);
1:2e90259:             assertEquals(2, histogram.getSnapshot().getValues()[0]);
1:2e90259:         }
1:2e90259:         {
1:2e90259:             // 0 and 1 map to different buckets
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(true, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT);
1:2e90259:             histogram.update(0);
1:2e90259:             assertEquals(1, histogram.getSnapshot().getValues()[0]);
1:2e90259:             histogram.update(1);
1:2e90259:             Snapshot snapshot = histogram.getSnapshot();
1:2e90259:             assertEquals(1, snapshot.getValues()[0]);
1:2e90259:             assertEquals(1, snapshot.getValues()[1]);
1:2e90259:         }
1:2e90259:     }
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testOverflow()
1:2e90259:     {
1:2e90259:         DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, 1);
1:2e90259:         histogram.update(100);
1:2e90259:         assert histogram.isOverflowed();
1:2e90259:         assertEquals(Long.MAX_VALUE, histogram.getSnapshot().getMax());
1:2e90259:     }
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testMinMax()
1:2e90259:     {
1:2e90259:         DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir();
1:2e90259:         histogram.update(16);
1:2e90259:         Snapshot snapshot = histogram.getSnapshot();
1:2e90259:         assertEquals(15, snapshot.getMin());
1:2e90259:         assertEquals(17, snapshot.getMax());
1:2e90259:     }
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testMean()
1:2e90259:     {
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259:             for (int i = 0; i < 40; i++)
1:2e90259:                 histogram.update(0);
1:2e90259:             for (int i = 0; i < 20; i++)
1:2e90259:                 histogram.update(1);
1:2e90259:             for (int i = 0; i < 10; i++)
1:2e90259:                 histogram.update(2);
1:2e90259:             assertEquals(1.14D, histogram.getSnapshot().getMean(), 0.1D);
1:2e90259:         }
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(true, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259:             for (int i = 0; i < 40; i++)
1:2e90259:                 histogram.update(0);
1:2e90259:             for (int i = 0; i < 20; i++)
1:2e90259:                 histogram.update(1);
1:2e90259:             for (int i = 0; i < 10; i++)
1:2e90259:                 histogram.update(2);
1:2e90259:             assertEquals(0.57D, histogram.getSnapshot().getMean(), 0.1D);
1:2e90259:         }
1:2e90259:     }
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testStdDev()
1:2e90259:     {
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259:             for (int i = 0; i < 20; i++)
1:2e90259:                 histogram.update(10);
1:2e90259:             for (int i = 0; i < 40; i++)
1:2e90259:                 histogram.update(20);
1:2e90259:             for (int i = 0; i < 20; i++)
1:2e90259:                 histogram.update(30);
1:2e90259: 
1:2e90259:             Snapshot snapshot = histogram.getSnapshot();
1:2e90259:             assertEquals(20.0D, snapshot.getMean(), 2.0D);
1:2e90259:             assertEquals(7.07D, snapshot.getStdDev(), 2.0D);
1:2e90259:         }
1:2e90259:     }
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testFindingCorrectBuckets()
1:2e90259:     {
1:2e90259:         TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:         DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, 90, clock);
1:2e90259:         histogram.update(23282687);
1:2e90259:         assertFalse(histogram.isOverflowed());
1:2e90259:         assertEquals(1, histogram.getSnapshot().getValues()[89]);
1:2e90259: 
1:2e90259:         histogram.update(9);
1:2e90259:         assertEquals(1, histogram.getSnapshot().getValues()[8]);
1:2e90259: 
1:2e90259:         histogram.update(21);
1:2e90259:         histogram.update(22);
1:2e90259:         Snapshot snapshot = histogram.getSnapshot();
1:2e90259:         assertEquals(2, snapshot.getValues()[13]);
1:2e90259:         assertEquals(6277304.5D, snapshot.getMean(), DOUBLE_ASSERT_DELTA);
1:2e90259:     }
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testPercentile()
1:2e90259:     {
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259:             // percentile of empty histogram is 0
1:2e90259:             assertEquals(0D, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:2e90259: 
1:2e90259:             histogram.update(1);
1:2e90259:             // percentile of a histogram with one element should be that element
1:2e90259:             assertEquals(1D, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:2e90259: 
1:2e90259:             histogram.update(10);
1:2e90259:             assertEquals(10D, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:2e90259:         }
1:2e90259: 
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259: 
1:2e90259:             histogram.update(1);
1:2e90259:             histogram.update(2);
1:2e90259:             histogram.update(3);
1:2e90259:             histogram.update(4);
1:2e90259:             histogram.update(5);
1:2e90259: 
1:2e90259:             Snapshot snapshot = histogram.getSnapshot();
1:2e90259:             assertEquals(0, snapshot.getValue(0.00), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(3, snapshot.getValue(0.50), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(3, snapshot.getValue(0.60), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(5, snapshot.getValue(1.00), DOUBLE_ASSERT_DELTA);
1:2e90259:         }
1:2e90259: 
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259: 
1:2e90259:             for (int i = 11; i <= 20; i++)
1:2e90259:                 histogram.update(i);
1:2e90259: 
1:2e90259:             // Right now the histogram looks like:
1:2e90259:             //    10   12   14   17   20
1:2e90259:             //     0    2    2    3    3
1:2e90259:             // %:  0   20   40   70  100
1:2e90259:             Snapshot snapshot = histogram.getSnapshot();
1:2e90259:             assertEquals(12, snapshot.getValue(0.01), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(14, snapshot.getValue(0.30), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(17, snapshot.getValue(0.50), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(17, snapshot.getValue(0.60), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(20, snapshot.getValue(0.80), DOUBLE_ASSERT_DELTA);
1:2e90259:         }
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(true, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259:             histogram.update(0);
1:2e90259:             histogram.update(0);
1:2e90259:             histogram.update(1);
1:2e90259: 
1:2e90259:             Snapshot snapshot = histogram.getSnapshot();
1:2e90259:             assertEquals(0, snapshot.getValue(0.5), DOUBLE_ASSERT_DELTA);
1:2e90259:             assertEquals(1, snapshot.getValue(0.99), DOUBLE_ASSERT_DELTA);
1:2e90259:         }
1:2e90259:     }
1:2e90259: 
1:2e90259: 
1:2e90259:     @Test
1:2e90259:     public void testDecayingPercentile()
1:2e90259:     {
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259:             // percentile of empty histogram is 0
1:2e90259:             assertEquals(0, histogram.getSnapshot().getValue(1.0), DOUBLE_ASSERT_DELTA);
1:2e90259: 
1:2e90259:             for (int v = 1; v <= 100; v++)
1:2e90259:             {
1:2e90259:                 for (int i = 0; i < 10_000; i++)
1:2e90259:                 {
1:2e90259:                     histogram.update(v);
1:2e90259:                 }
1:2e90259:             }
1:2e90259: 
1:2e90259:             Snapshot snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(05, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(20, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(40, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(99, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(05, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(20, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(40, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(99, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:             for (int v = 1; v <= 50; v++)
1:2e90259:             {
1:2e90259:                 for (int i = 0; i < 10_000; i++)
1:2e90259:                 {
1:2e90259:                     histogram.update(v);
1:2e90259:                 }
1:2e90259:             }
1:2e90259: 
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(14, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(27, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(98, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(14, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(27, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(98, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:             for (int v = 1; v <= 50; v++)
1:2e90259:             {
1:2e90259:                 for (int i = 0; i < 10_000; i++)
1:2e90259:                 {
1:2e90259:                     histogram.update(v);
1:2e90259:                 }
1:2e90259:             }
1:2e90259: 
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(03, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(23, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(96, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(03, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(23, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(96, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:             for (int v = 11; v <= 20; v++)
1:2e90259:             {
1:2e90259:                 for (int i = 0; i < 5_000; i++)
1:2e90259:                 {
1:2e90259:                     histogram.update(v);
1:2e90259:                 }
1:2e90259:             }
1:2e90259: 
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(20, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(95, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:2e90259:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:2e90259:             assertEstimatedQuantile(20, snapshot.getValue(0.40));
1:2e90259:             assertEstimatedQuantile(95, snapshot.getValue(0.99));
1:2e90259: 
1:2e90259:         }
1:2e90259: 
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259:             // percentile of empty histogram is 0
1:2e90259:             assertEquals(0, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:2e90259: 
1:2e90259:             for (int m = 0; m < 40; m++)
1:2e90259:             {
1:2e90259:                 for (int i = 0; i < 1_000_000; i++)
1:2e90259:                 {
1:2e90259:                     histogram.update(2);
1:2e90259:                 }
1:2e90259:                 // percentile of a histogram with one element should be that element
1:2e90259:                 clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:2e90259:                 assertEquals(2, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:2e90259:             }
1:2e90259: 
1:2e90259:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S * 100);
1:2e90259:             assertEquals(0, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:2e90259:         }
1:2e90259: 
1:2e90259:         {
1:2e90259:             TestClock clock = new TestClock();
1:2e90259: 
1:2e90259:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:2e90259: 
1:2e90259:             histogram.update(20);
1:2e90259:             histogram.update(21);
1:2e90259:             histogram.update(22);
1:2e90259:             Snapshot snapshot = histogram.getSnapshot();
1:2e90259:             assertEquals(1, snapshot.getValues()[12]);
1:2e90259:             assertEquals(2, snapshot.getValues()[13]);
1:2e90259: 
1:2e90259:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:2e90259: 
1:2e90259:             histogram.update(20);
1:2e90259:             histogram.update(21);
1:2e90259:             histogram.update(22);
1:2e90259:             snapshot = histogram.getSnapshot();
1:2e90259:             assertEquals(2, snapshot.getValues()[12]);
1:2e90259:             assertEquals(4, snapshot.getValues()[13]);
1:2e90259:         }
1:2e90259:     }
1:2e90259: 
1:2e90259:     private void assertEstimatedQuantile(long expectedValue, double actualValue)
1:2e90259:     {
1:2e90259:         assertTrue("Expected at least [" + expectedValue + "] but actual is [" + actualValue + "]", actualValue >= expectedValue);
1:2e90259:         assertTrue("Expected less than [" + Math.round(expectedValue * 1.2) + "] but actual is [" + actualValue + "]", actualValue < Math.round(expectedValue * 1.2));
1:2e90259:     }
1:2e90259: 
1:2e90259:     public class TestClock extends Clock {
1:2e90259:         private long tick = 0;
1:2e90259: 
1:2e90259:         public void addSeconds(long seconds)
1:2e90259:         {
1:2e90259:             tick += seconds * 1_000_000_000L;
1:2e90259:         }
1:2e90259: 
1:2e90259:         public long getTick()
1:2e90259:         {
1:2e90259:             return tick;
1:2e90259:         }
1:2e90259: 
1:2e90259:         public long getTime()
1:2e90259:         {
1:2e90259:             return tick / 1_000_000L;
1:2e90259:         };
1:2e90259:     }
1:2e90259: }
============================================================================
author:Per Otterstrom
-------------------------------------------------------------------------------
commit:2e90259
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.metrics;
1: 
1: import org.junit.Test;
1: 
1: import com.codahale.metrics.Clock;
1: import com.codahale.metrics.Snapshot;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: public class DecayingEstimatedHistogramReservoirTest
1: {
1:     private static final double DOUBLE_ASSERT_DELTA = 0;
1: 
1:     @Test
1:     public void testSimple()
1:     {
1:         {
1:             // 0 and 1 map to the same, first bucket
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir();
1:             histogram.update(0);
1:             assertEquals(1, histogram.getSnapshot().getValues()[0]);
1:             histogram.update(1);
1:             assertEquals(2, histogram.getSnapshot().getValues()[0]);
1:         }
1:         {
1:             // 0 and 1 map to different buckets
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(true, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT);
1:             histogram.update(0);
1:             assertEquals(1, histogram.getSnapshot().getValues()[0]);
1:             histogram.update(1);
1:             Snapshot snapshot = histogram.getSnapshot();
1:             assertEquals(1, snapshot.getValues()[0]);
1:             assertEquals(1, snapshot.getValues()[1]);
1:         }
1:     }
1: 
1:     @Test
1:     public void testOverflow()
1:     {
1:         DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, 1);
1:         histogram.update(100);
1:         assert histogram.isOverflowed();
1:         assertEquals(Long.MAX_VALUE, histogram.getSnapshot().getMax());
1:     }
1: 
1:     @Test
1:     public void testMinMax()
1:     {
1:         DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir();
1:         histogram.update(16);
1:         Snapshot snapshot = histogram.getSnapshot();
1:         assertEquals(15, snapshot.getMin());
1:         assertEquals(17, snapshot.getMax());
1:     }
1: 
1:     @Test
1:     public void testMean()
1:     {
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:             for (int i = 0; i < 40; i++)
1:                 histogram.update(0);
1:             for (int i = 0; i < 20; i++)
1:                 histogram.update(1);
1:             for (int i = 0; i < 10; i++)
1:                 histogram.update(2);
1:             assertEquals(1.14D, histogram.getSnapshot().getMean(), 0.1D);
1:         }
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(true, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:             for (int i = 0; i < 40; i++)
1:                 histogram.update(0);
1:             for (int i = 0; i < 20; i++)
1:                 histogram.update(1);
1:             for (int i = 0; i < 10; i++)
1:                 histogram.update(2);
1:             assertEquals(0.57D, histogram.getSnapshot().getMean(), 0.1D);
1:         }
1:     }
1: 
1:     @Test
1:     public void testStdDev()
1:     {
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:             for (int i = 0; i < 20; i++)
1:                 histogram.update(10);
1:             for (int i = 0; i < 40; i++)
1:                 histogram.update(20);
1:             for (int i = 0; i < 20; i++)
1:                 histogram.update(30);
1: 
1:             Snapshot snapshot = histogram.getSnapshot();
1:             assertEquals(20.0D, snapshot.getMean(), 2.0D);
1:             assertEquals(7.07D, snapshot.getStdDev(), 2.0D);
1:         }
1:     }
1: 
1:     @Test
1:     public void testFindingCorrectBuckets()
1:     {
1:         TestClock clock = new TestClock();
1: 
1:         DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, 90, clock);
1:         histogram.update(23282687);
1:         assertFalse(histogram.isOverflowed());
1:         assertEquals(1, histogram.getSnapshot().getValues()[89]);
1: 
1:         histogram.update(9);
1:         assertEquals(1, histogram.getSnapshot().getValues()[8]);
1: 
1:         histogram.update(21);
1:         histogram.update(22);
1:         Snapshot snapshot = histogram.getSnapshot();
1:         assertEquals(2, snapshot.getValues()[13]);
1:         assertEquals(6277304.5D, snapshot.getMean(), DOUBLE_ASSERT_DELTA);
1:     }
1: 
1:     @Test
1:     public void testPercentile()
1:     {
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:             // percentile of empty histogram is 0
1:             assertEquals(0D, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1: 
1:             histogram.update(1);
1:             // percentile of a histogram with one element should be that element
1:             assertEquals(1D, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1: 
1:             histogram.update(10);
1:             assertEquals(10D, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:         }
1: 
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1: 
1:             histogram.update(1);
1:             histogram.update(2);
1:             histogram.update(3);
1:             histogram.update(4);
1:             histogram.update(5);
1: 
1:             Snapshot snapshot = histogram.getSnapshot();
1:             assertEquals(0, snapshot.getValue(0.00), DOUBLE_ASSERT_DELTA);
1:             assertEquals(3, snapshot.getValue(0.50), DOUBLE_ASSERT_DELTA);
1:             assertEquals(3, snapshot.getValue(0.60), DOUBLE_ASSERT_DELTA);
1:             assertEquals(5, snapshot.getValue(1.00), DOUBLE_ASSERT_DELTA);
1:         }
1: 
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1: 
1:             for (int i = 11; i <= 20; i++)
1:                 histogram.update(i);
1: 
1:             // Right now the histogram looks like:
1:             //    10   12   14   17   20
1:             //     0    2    2    3    3
1:             // %:  0   20   40   70  100
1:             Snapshot snapshot = histogram.getSnapshot();
1:             assertEquals(12, snapshot.getValue(0.01), DOUBLE_ASSERT_DELTA);
1:             assertEquals(14, snapshot.getValue(0.30), DOUBLE_ASSERT_DELTA);
1:             assertEquals(17, snapshot.getValue(0.50), DOUBLE_ASSERT_DELTA);
1:             assertEquals(17, snapshot.getValue(0.60), DOUBLE_ASSERT_DELTA);
1:             assertEquals(20, snapshot.getValue(0.80), DOUBLE_ASSERT_DELTA);
1:         }
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(true, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:             histogram.update(0);
1:             histogram.update(0);
1:             histogram.update(1);
1: 
1:             Snapshot snapshot = histogram.getSnapshot();
1:             assertEquals(0, snapshot.getValue(0.5), DOUBLE_ASSERT_DELTA);
1:             assertEquals(1, snapshot.getValue(0.99), DOUBLE_ASSERT_DELTA);
1:         }
1:     }
1: 
1: 
1:     @Test
1:     public void testDecayingPercentile()
1:     {
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:             // percentile of empty histogram is 0
1:             assertEquals(0, histogram.getSnapshot().getValue(1.0), DOUBLE_ASSERT_DELTA);
1: 
1:             for (int v = 1; v <= 100; v++)
1:             {
1:                 for (int i = 0; i < 10_000; i++)
1:                 {
1:                     histogram.update(v);
1:                 }
1:             }
1: 
1:             Snapshot snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(05, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(20, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(40, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(99, snapshot.getValue(0.99));
1: 
1:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:             snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(05, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(20, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(40, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(99, snapshot.getValue(0.99));
1: 
1:             for (int v = 1; v <= 50; v++)
1:             {
1:                 for (int i = 0; i < 10_000; i++)
1:                 {
1:                     histogram.update(v);
1:                 }
1:             }
1: 
1:             snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(14, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(27, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(98, snapshot.getValue(0.99));
1: 
1:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:             snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(14, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(27, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(98, snapshot.getValue(0.99));
1: 
1:             for (int v = 1; v <= 50; v++)
1:             {
1:                 for (int i = 0; i < 10_000; i++)
1:                 {
1:                     histogram.update(v);
1:                 }
1:             }
1: 
1:             snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(03, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(23, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(96, snapshot.getValue(0.99));
1: 
1:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:             snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(03, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(23, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(96, snapshot.getValue(0.99));
1: 
1:             for (int v = 11; v <= 20; v++)
1:             {
1:                 for (int i = 0; i < 5_000; i++)
1:                 {
1:                     histogram.update(v);
1:                 }
1:             }
1: 
1:             snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(20, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(95, snapshot.getValue(0.99));
1: 
1:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:             snapshot = histogram.getSnapshot();
1:             assertEstimatedQuantile(04, snapshot.getValue(0.05));
1:             assertEstimatedQuantile(12, snapshot.getValue(0.20));
1:             assertEstimatedQuantile(20, snapshot.getValue(0.40));
1:             assertEstimatedQuantile(95, snapshot.getValue(0.99));
1: 
1:         }
1: 
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1:             // percentile of empty histogram is 0
1:             assertEquals(0, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1: 
1:             for (int m = 0; m < 40; m++)
1:             {
1:                 for (int i = 0; i < 1_000_000; i++)
1:                 {
1:                     histogram.update(2);
1:                 }
1:                 // percentile of a histogram with one element should be that element
1:                 clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1:                 assertEquals(2, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:             }
1: 
1:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S * 100);
1:             assertEquals(0, histogram.getSnapshot().getValue(0.99), DOUBLE_ASSERT_DELTA);
1:         }
1: 
1:         {
1:             TestClock clock = new TestClock();
1: 
1:             DecayingEstimatedHistogramReservoir histogram = new DecayingEstimatedHistogramReservoir(DecayingEstimatedHistogramReservoir.DEFAULT_ZERO_CONSIDERATION, DecayingEstimatedHistogramReservoir.DEFAULT_BUCKET_COUNT, clock);
1: 
1:             histogram.update(20);
1:             histogram.update(21);
1:             histogram.update(22);
1:             Snapshot snapshot = histogram.getSnapshot();
1:             assertEquals(1, snapshot.getValues()[12]);
1:             assertEquals(2, snapshot.getValues()[13]);
1: 
1:             clock.addSeconds(DecayingEstimatedHistogramReservoir.HALF_TIME_IN_S);
1: 
1:             histogram.update(20);
1:             histogram.update(21);
1:             histogram.update(22);
1:             snapshot = histogram.getSnapshot();
1:             assertEquals(2, snapshot.getValues()[12]);
1:             assertEquals(4, snapshot.getValues()[13]);
1:         }
1:     }
1: 
1:     private void assertEstimatedQuantile(long expectedValue, double actualValue)
1:     {
1:         assertTrue("Expected at least [" + expectedValue + "] but actual is [" + actualValue + "]", actualValue >= expectedValue);
1:         assertTrue("Expected less than [" + Math.round(expectedValue * 1.2) + "] but actual is [" + actualValue + "]", actualValue < Math.round(expectedValue * 1.2));
1:     }
1: 
1:     public class TestClock extends Clock {
1:         private long tick = 0;
1: 
1:         public void addSeconds(long seconds)
1:         {
1:             tick += seconds * 1_000_000_000L;
1:         }
1: 
1:         public long getTick()
1:         {
1:             return tick;
1:         }
1: 
1:         public long getTime()
1:         {
1:             return tick / 1_000_000L;
1:         };
1:     }
1: }
============================================================================