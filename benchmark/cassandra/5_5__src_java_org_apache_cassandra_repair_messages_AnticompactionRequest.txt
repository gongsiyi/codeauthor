1:b75ed1c: /*
1:b75ed1c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b75ed1c:  * or more contributor license agreements.  See the NOTICE file
1:b75ed1c:  * distributed with this work for additional information
1:b75ed1c:  * regarding copyright ownership.  The ASF licenses this file
1:b75ed1c:  * to you under the Apache License, Version 2.0 (the
1:b75ed1c:  * "License"); you may not use this file except in compliance
1:b75ed1c:  * with the License.  You may obtain a copy of the License at
1:b75ed1c:  *
1:b75ed1c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b75ed1c:  *
1:b75ed1c:  * Unless required by applicable law or agreed to in writing, software
1:b75ed1c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b75ed1c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b75ed1c:  * See the License for the specific language governing permissions and
1:b75ed1c:  * limitations under the License.
1:b75ed1c:  */
1:b75ed1c: package org.apache.cassandra.repair.messages;
1:b75ed1c: 
1:b75ed1c: import java.io.IOException;
1:b2808b1: import java.util.ArrayList;
1:b2808b1: import java.util.Collection;
1:b2808b1: import java.util.List;
1:b75ed1c: import java.util.UUID;
1:b75ed1c: 
1:b2808b1: import org.apache.cassandra.dht.Range;
1:b2808b1: import org.apache.cassandra.dht.Token;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:806facc: import org.apache.cassandra.net.MessagingService;
1:b75ed1c: import org.apache.cassandra.utils.UUIDSerializer;
1:b75ed1c: 
1:b75ed1c: public class AnticompactionRequest extends RepairMessage
1:b75ed1c: {
1:b75ed1c:     public static MessageSerializer serializer = new AnticompactionRequestSerializer();
1:b75ed1c:     public final UUID parentRepairSession;
1:b2808b1:     /**
1:b2808b1:      * Successfully repaired ranges. Does not contain null.
1:b2808b1:      */
1:b2808b1:     public final Collection<Range<Token>> successfulRanges;
1:b75ed1c: 
1:b2808b1:     public AnticompactionRequest(UUID parentRepairSession, Collection<Range<Token>> ranges)
1:b75ed1c:     {
1:b75ed1c:         super(Type.ANTICOMPACTION_REQUEST, null);
1:b75ed1c:         this.parentRepairSession = parentRepairSession;
1:b2808b1:         this.successfulRanges = ranges;
2:b75ed1c:     }
1:e60a06c: 
1:b75ed1c:     public static class AnticompactionRequestSerializer implements MessageSerializer<AnticompactionRequest>
1:b75ed1c:     {
1:75508ec:         public void serialize(AnticompactionRequest message, DataOutputPlus out, int version) throws IOException
1:b75ed1c:         {
1:b75ed1c:             UUIDSerializer.serializer.serialize(message.parentRepairSession, out, version);
1:b2808b1:             out.writeInt(message.successfulRanges.size());
1:806facc:             for (Range<Token> r : message.successfulRanges)
1:806facc:             {
1:806facc:                 MessagingService.validatePartitioner(r);
1:69542a9:                 Range.tokenSerializer.serialize(r, out, version);
1:806facc:             }
1:b75ed1c:         }
1:b75ed1c: 
1:03f72ac:         public AnticompactionRequest deserialize(DataInputPlus in, int version) throws IOException
1:b75ed1c:         {
1:b75ed1c:             UUID parentRepairSession = UUIDSerializer.serializer.deserialize(in, version);
1:b2808b1:             int rangeCount = in.readInt();
1:b2808b1:             List<Range<Token>> ranges = new ArrayList<>(rangeCount);
1:b2808b1:             for (int i = 0; i < rangeCount; i++)
1:69542a9:                 ranges.add((Range<Token>) Range.tokenSerializer.deserialize(in, MessagingService.globalPartitioner(), version));
1:b2808b1:             return new AnticompactionRequest(parentRepairSession, ranges);
1:b75ed1c:         }
1:b75ed1c: 
1:b75ed1c:         public long serializedSize(AnticompactionRequest message, int version)
1:b75ed1c:         {
1:b2808b1:             long size = UUIDSerializer.serializer.serializedSize(message.parentRepairSession, version);
1:806facc:             for (Range<Token> r : message.successfulRanges)
1:69542a9:                 size += Range.tokenSerializer.serializedSize(r, version);
1:b2808b1:             return size;
1:b75ed1c:         }
1:b75ed1c:     }
1:b75ed1c: 
1:e60a06c:     @Override
1:e60a06c:     public String toString()
1:e60a06c:     {
1:e60a06c:         return "AnticompactionRequest{" +
1:e60a06c:                 "parentRepairSession=" + parentRepairSession +
1:e60a06c:                 "} " + super.toString();
1:69542a9:     }
1:e60a06c: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public AnticompactionRequest deserialize(DataInputPlus in, int version) throws IOException
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69542a9
/////////////////////////////////////////////////////////////////////////
1:                 Range.tokenSerializer.serialize(r, out, version);
/////////////////////////////////////////////////////////////////////////
1:                 ranges.add((Range<Token>) Range.tokenSerializer.deserialize(in, MessagingService.globalPartitioner(), version));
/////////////////////////////////////////////////////////////////////////
1:                 size += Range.tokenSerializer.serializedSize(r, version);
/////////////////////////////////////////////////////////////////////////
1: }
commit:806facc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:             for (Range<Token> r : message.successfulRanges)
1:             {
1:                 MessagingService.validatePartitioner(r);
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 ranges.add((Range<Token>) Range.serializer.deserialize(in, MessagingService.globalPartitioner(), version).toTokenBounds());
1:             for (Range<Token> r : message.successfulRanges)
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b2808b1
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Successfully repaired ranges. Does not contain null.
1:      */
1:     public final Collection<Range<Token>> successfulRanges;
1:     public AnticompactionRequest(UUID parentRepairSession, Collection<Range<Token>> ranges)
1:         this.successfulRanges = ranges;
/////////////////////////////////////////////////////////////////////////
1:             out.writeInt(message.successfulRanges.size());
0:             for (Range r : message.successfulRanges)
0:                 Range.serializer.serialize(r, out, version);
1:             int rangeCount = in.readInt();
1:             List<Range<Token>> ranges = new ArrayList<>(rangeCount);
1:             for (int i = 0; i < rangeCount; i++)
0:                 ranges.add((Range<Token>) Range.serializer.deserialize(in, version).toTokenBounds());
1:             return new AnticompactionRequest(parentRepairSession, ranges);
1:             long size = UUIDSerializer.serializer.serializedSize(message.parentRepairSession, version);
0:             for (Range r : message.successfulRanges)
0:                 size += Range.serializer.serializedSize(r, version);
1:             return size;
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e60a06c
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "AnticompactionRequest{" +
1:                 "parentRepairSession=" + parentRepairSession +
1:                 "} " + super.toString();
1:     }
commit:b75ed1c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair.messages;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.List;
1: import java.util.UUID;
1: 
0: import org.apache.cassandra.db.TypeSizes;
0: import org.apache.cassandra.dht.AbstractBounds;
0: import org.apache.cassandra.dht.Range;
0: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.repair.RepairJobDesc;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: public class AnticompactionRequest extends RepairMessage
1: {
1:     public static MessageSerializer serializer = new AnticompactionRequestSerializer();
1:     public final UUID parentRepairSession;
1: 
0:     public AnticompactionRequest(UUID parentRepairSession)
1:     {
1:         super(Type.ANTICOMPACTION_REQUEST, null);
1:         this.parentRepairSession = parentRepairSession;
1:     }
1: 
1:     public static class AnticompactionRequestSerializer implements MessageSerializer<AnticompactionRequest>
1:     {
0:         public void serialize(AnticompactionRequest message, DataOutput out, int version) throws IOException
1:         {
1:             UUIDSerializer.serializer.serialize(message.parentRepairSession, out, version);
1:         }
1: 
0:         public AnticompactionRequest deserialize(DataInput in, int version) throws IOException
1:         {
1:             UUID parentRepairSession = UUIDSerializer.serializer.deserialize(in, version);
0:             return new AnticompactionRequest(parentRepairSession);
1:         }
1: 
1:         public long serializedSize(AnticompactionRequest message, int version)
1:         {
0:             return UUIDSerializer.serializer.serializedSize(message.parentRepairSession, version);
1:         }
1:     }
1: }
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(AnticompactionRequest message, DataOutputPlus out, int version) throws IOException
============================================================================