1:b2dcd3e: /*
1:b2dcd3e:  * Licensed to the Apache Software Foundation (ASF) under one
1:b2dcd3e:  * or more contributor license agreements.  See the NOTICE file
1:b2dcd3e:  * distributed with this work for additional information
1:b2dcd3e:  * regarding copyright ownership.  The ASF licenses this file
1:b2dcd3e:  * to you under the Apache License, Version 2.0 (the
1:b2dcd3e:  * "License"); you may not use this file except in compliance
1:b2dcd3e:  * with the License.  You may obtain a copy of the License at
1:b2dcd3e:  *
1:b2dcd3e:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b2dcd3e:  *
1:b2dcd3e:  * Unless required by applicable law or agreed to in writing,
1:b2dcd3e:  * software distributed under the License is distributed on an
1:b2dcd3e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b2dcd3e:  * KIND, either express or implied.  See the License for the
1:b2dcd3e:  * specific language governing permissions and limitations
1:b2dcd3e:  * under the License.
1:b2dcd3e:  */
1:b2dcd3e: package org.apache.cassandra.db.marshal;
4:2fd3268: 
1:b2dcd3e: import static org.junit.Assert.*;
1:2fd3268: 
1:b2dcd3e: import java.math.BigDecimal;
1:b2dcd3e: import java.nio.ByteBuffer;
1:b2dcd3e: import java.util.Arrays;
1:2fd3268: 
1:b2dcd3e: import org.apache.cassandra.db.marshal.DecimalType;
1:b2dcd3e: import org.apache.cassandra.utils.ByteBufferUtil;
1:b2dcd3e: import org.junit.Test;
1:2fd3268: 
1:b2dcd3e: public class DecimalTypeTest
1:b2dcd3e: {
1:b2dcd3e:     private static final String LOW = "12.34";
1:b2dcd3e:     private static final String HIGH = "34.5678";
1:2fd3268: 
1:b2dcd3e:     private static BigDecimal zero = new BigDecimal("0.0");
1:b2dcd3e:     private static BigDecimal minus = new BigDecimal("-1.000001");
1:b2dcd3e:     private static BigDecimal low = new BigDecimal(LOW);
1:b2dcd3e:     private static BigDecimal high = new BigDecimal(HIGH);
1:07cdfd0: 
1:b2dcd3e:     @Test
1:b2dcd3e:     public void test1Decompose_compose()
1:b2dcd3e:     {
1:b2dcd3e:         ByteBuffer bb = DecimalType.instance.decompose(low);
1:07cdfd0: 
1:b2dcd3e:         String string = DecimalType.instance.compose(bb).toPlainString();
1:07cdfd0: 
1:b2dcd3e:         // check that the decomposed buffer when re-composed is equal to the initial string.
1:b2dcd3e:         assertEquals(LOW, string);
1:07cdfd0: 
1:b2dcd3e:         // check that a null argument yields an empty byte buffer
1:b2dcd3e:         bb = DecimalType.instance.decompose(null);
1:b2dcd3e:         assertEquals(bb, ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:b2dcd3e:     }
1:07cdfd0: 
1:b2dcd3e:     @Test
1:b2dcd3e:     public void test2Compare()
1:b2dcd3e:     {
1:b2dcd3e:         ByteBuffer lowBB = DecimalType.instance.decompose(low);
1:b2dcd3e:         ByteBuffer low2BB = DecimalType.instance.decompose(low);
1:07cdfd0:         ByteBuffer highBB = DecimalType.instance.decompose(high);
1:b2dcd3e:         assertEquals(-1, DecimalType.instance.compare(lowBB, highBB));
1:07cdfd0: 
1:b2dcd3e:         lowBB = DecimalType.instance.decompose(low);
1:b2dcd3e:         highBB = DecimalType.instance.decompose(high);
1:b2dcd3e:         assertEquals(1, DecimalType.instance.compare(highBB, lowBB));
1:07cdfd0: 
1:b2dcd3e:         lowBB = DecimalType.instance.decompose(low);
1:b2dcd3e:         assertEquals(0, DecimalType.instance.compare(low2BB, lowBB));
1:07cdfd0: 
1:b2dcd3e:         lowBB = DecimalType.instance.decompose(low);
1:b2dcd3e:         assertEquals(-1, DecimalType.instance.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, lowBB));
1:07cdfd0: 
1:b2dcd3e:         lowBB = DecimalType.instance.decompose(low);
1:b2dcd3e:         assertEquals(1, DecimalType.instance.compare(lowBB,ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:07cdfd0: 
1:b2dcd3e:         assertEquals(0, DecimalType.instance.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:b2dcd3e:     }
1:2fd3268: 
1:b2dcd3e:     @Test
1:b2dcd3e:     public void test3Sort()
1:b2dcd3e:     {
1:b2dcd3e:         ByteBuffer zeroBB = DecimalType.instance.decompose(zero);
1:b2dcd3e:         ByteBuffer minusBB = DecimalType.instance.decompose(minus);
1:b2dcd3e:         ByteBuffer lowBB = DecimalType.instance.decompose(low);
1:07cdfd0:         ByteBuffer highBB = DecimalType.instance.decompose(high);
1:2fd3268: 
1:b2dcd3e:         ByteBuffer[] array = {highBB,minusBB,lowBB,lowBB,zeroBB,minusBB};
1:07cdfd0: 
1:b2dcd3e:         // Sort the array of ByteBuffer using a DecimalType comparator
1:b2dcd3e:         Arrays.sort(array, DecimalType.instance);
1:07cdfd0: 
1:b2dcd3e:         // Check that the array is in order
1:b2dcd3e:         for (int i = 1; i < array.length; i++)
1:b2dcd3e:         {
1:b2dcd3e:             BigDecimal i0 = DecimalType.instance.compose(array[i - 1]);
1:b2dcd3e:             BigDecimal i1 = DecimalType.instance.compose(array[i]);
1:b2dcd3e:             assertTrue("#" + i, i0.compareTo(i1) <= 0);
1:b2dcd3e:         }
1:b2dcd3e:     }
1:b2dcd3e: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1:         ByteBuffer highBB = DecimalType.instance.decompose(high);
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer highBB = DecimalType.instance.decompose(high);
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
0:         ByteBuffer highBB = DecimalType.instance.decompose(high);
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer highBB = DecimalType.instance.decompose(high);
0: 
0: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b2dcd3e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
0: 
1: import static org.junit.Assert.*;
0: 
1: import java.math.BigDecimal;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
0: 
1: import org.apache.cassandra.db.marshal.DecimalType;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.junit.Test;
0: 
1: public class DecimalTypeTest
1: {
1:     private static final String LOW = "12.34";
1:     private static final String HIGH = "34.5678";
0: 
1:     private static BigDecimal zero = new BigDecimal("0.0");
1:     private static BigDecimal minus = new BigDecimal("-1.000001");
1:     private static BigDecimal low = new BigDecimal(LOW);
1:     private static BigDecimal high = new BigDecimal(HIGH);
0:     
1:     @Test
1:     public void test1Decompose_compose()
1:     {
1:         ByteBuffer bb = DecimalType.instance.decompose(low);
0:                 
1:         String string = DecimalType.instance.compose(bb).toPlainString();
0:         
1:         // check that the decomposed buffer when re-composed is equal to the initial string.
1:         assertEquals(LOW, string);
0:         
1:         // check that a null argument yields an empty byte buffer
1:         bb = DecimalType.instance.decompose(null);
1:         assertEquals(bb, ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:     }
0:     
1:     @Test
1:     public void test2Compare()
1:     {
1:         ByteBuffer lowBB = DecimalType.instance.decompose(low);
1:         ByteBuffer low2BB = DecimalType.instance.decompose(low);
0:         ByteBuffer highBB = DecimalType.instance.decompose(high);        
1:         assertEquals(-1, DecimalType.instance.compare(lowBB, highBB));
0:         
1:         lowBB = DecimalType.instance.decompose(low);
1:         highBB = DecimalType.instance.decompose(high);
1:         assertEquals(1, DecimalType.instance.compare(highBB, lowBB));
0:         
1:         lowBB = DecimalType.instance.decompose(low);
1:         assertEquals(0, DecimalType.instance.compare(low2BB, lowBB));
0:         
1:         lowBB = DecimalType.instance.decompose(low);
1:         assertEquals(-1, DecimalType.instance.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, lowBB));
0:         
1:         lowBB = DecimalType.instance.decompose(low);
1:         assertEquals(1, DecimalType.instance.compare(lowBB,ByteBufferUtil.EMPTY_BYTE_BUFFER));
0:         
1:         assertEquals(0, DecimalType.instance.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:     }
0: 
1:     @Test
1:     public void test3Sort()
1:     {
1:         ByteBuffer zeroBB = DecimalType.instance.decompose(zero);
1:         ByteBuffer minusBB = DecimalType.instance.decompose(minus);
1:         ByteBuffer lowBB = DecimalType.instance.decompose(low);
0:         ByteBuffer highBB = DecimalType.instance.decompose(high);        
0: 
1:         ByteBuffer[] array = {highBB,minusBB,lowBB,lowBB,zeroBB,minusBB};
0:                 
1:         // Sort the array of ByteBuffer using a DecimalType comparator
1:         Arrays.sort(array, DecimalType.instance);
0:         
1:         // Check that the array is in order
1:         for (int i = 1; i < array.length; i++)
1:         {
1:             BigDecimal i0 = DecimalType.instance.compose(array[i - 1]);
1:             BigDecimal i1 = DecimalType.instance.compose(array[i]);
1:             assertTrue("#" + i, i0.compareTo(i1) <= 0);
1:         }
1:     }
1: }
============================================================================