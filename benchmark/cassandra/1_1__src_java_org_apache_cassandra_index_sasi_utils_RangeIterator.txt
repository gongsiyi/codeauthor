1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.io.Closeable;
1:72790dc: import java.util.Comparator;
1:72790dc: import java.util.List;
1:72790dc: import java.util.PriorityQueue;
1:72790dc: 
1:72790dc: import com.google.common.annotations.VisibleForTesting;
1:72790dc: 
1:72790dc: public abstract class RangeIterator<K extends Comparable<K>, T extends CombinedValue<K>> extends AbstractIterator<T> implements Closeable
1:72790dc: {
1:72790dc:     private final K min, max;
1:72790dc:     private final long count;
1:72790dc:     private K current;
1:72790dc: 
1:72790dc:     protected RangeIterator(Builder.Statistics<K, T> statistics)
1:72790dc:     {
1:72790dc:         this(statistics.min, statistics.max, statistics.tokenCount);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public RangeIterator(RangeIterator<K, T> range)
1:72790dc:     {
1:72790dc:         this(range == null ? null : range.min, range == null ? null : range.max, range == null ? -1 : range.count);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public RangeIterator(K min, K max, long count)
1:72790dc:     {
1:72790dc:         this.min = min;
1:72790dc:         this.current = min;
1:72790dc:         this.max = max;
1:72790dc:         this.count = count;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public final K getMinimum()
1:72790dc:     {
1:72790dc:         return min;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public final K getCurrent()
1:72790dc:     {
1:72790dc:         return current;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public final K getMaximum()
1:72790dc:     {
1:72790dc:         return max;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public final long getCount()
1:72790dc:     {
1:72790dc:         return count;
1:72790dc:     }
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * When called, this iterators current position should
1:72790dc:      * be skipped forwards until finding either:
1:72790dc:      *   1) an element equal to or bigger than next
1:72790dc:      *   2) the end of the iterator
1:72790dc:      *
1:72790dc:      * @param nextToken value to skip the iterator forward until matching
1:72790dc:      *
1:72790dc:      * @return The next current token after the skip was performed
1:72790dc:      */
1:72790dc:     public final T skipTo(K nextToken)
1:72790dc:     {
1:72790dc:         if (min == null || max == null)
1:72790dc:             return endOfData();
1:72790dc: 
1:72790dc:         if (current.compareTo(nextToken) >= 0)
1:72790dc:             return next == null ? recomputeNext() : next;
1:72790dc: 
1:72790dc:         if (max.compareTo(nextToken) < 0)
1:72790dc:             return endOfData();
1:72790dc: 
1:72790dc:         performSkipTo(nextToken);
1:72790dc:         return recomputeNext();
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected abstract void performSkipTo(K nextToken);
1:72790dc: 
1:72790dc:     protected T recomputeNext()
1:72790dc:     {
1:72790dc:         return tryToComputeNext() ? peek() : endOfData();
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected boolean tryToComputeNext()
1:72790dc:     {
1:72790dc:         boolean hasNext = super.tryToComputeNext();
1:72790dc:         current = hasNext ? next.get() : getMaximum();
1:72790dc:         return hasNext;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static abstract class Builder<K extends Comparable<K>, D extends CombinedValue<K>>
1:72790dc:     {
1:72790dc:         public enum IteratorType
1:72790dc:         {
1:72790dc:             UNION, INTERSECTION
1:72790dc:         }
1:72790dc: 
1:72790dc:         @VisibleForTesting
1:72790dc:         protected final Statistics<K, D> statistics;
1:72790dc: 
1:72790dc:         @VisibleForTesting
1:72790dc:         protected final PriorityQueue<RangeIterator<K, D>> ranges;
1:72790dc: 
1:72790dc:         public Builder(IteratorType type)
1:72790dc:         {
1:72790dc:             statistics = new Statistics<>(type);
1:72790dc:             ranges = new PriorityQueue<>(16, (Comparator<RangeIterator<K, D>>) (a, b) -> a.getCurrent().compareTo(b.getCurrent()));
1:72790dc:         }
1:72790dc: 
1:72790dc:         public K getMinimum()
1:72790dc:         {
1:72790dc:             return statistics.min;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public K getMaximum()
1:72790dc:         {
1:72790dc:             return statistics.max;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public long getTokenCount()
1:72790dc:         {
1:72790dc:             return statistics.tokenCount;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public int rangeCount()
1:72790dc:         {
1:72790dc:             return ranges.size();
1:72790dc:         }
1:72790dc: 
1:72790dc:         public Builder<K, D> add(RangeIterator<K, D> range)
1:72790dc:         {
1:72790dc:             if (range == null || range.getMinimum() == null || range.getMaximum() == null)
1:72790dc:                 return this;
1:72790dc: 
1:72790dc:             ranges.add(range);
1:72790dc:             statistics.update(range);
1:72790dc: 
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public Builder<K, D> add(List<RangeIterator<K, D>> ranges)
1:72790dc:         {
1:72790dc:             if (ranges == null || ranges.isEmpty())
1:72790dc:                 return this;
1:72790dc: 
1:72790dc:             ranges.forEach(this::add);
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public final RangeIterator<K, D> build()
1:72790dc:         {
1:72790dc:             switch (rangeCount())
1:72790dc:             {
1:72790dc:                 case 0:
1:72790dc:                     return null;
1:72790dc: 
1:72790dc:                 case 1:
1:72790dc:                     return ranges.poll();
1:72790dc: 
1:72790dc:                 default:
1:72790dc:                     return buildIterator();
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         protected abstract RangeIterator<K, D> buildIterator();
1:72790dc: 
1:72790dc:         public static class Statistics<K extends Comparable<K>, D extends CombinedValue<K>>
1:72790dc:         {
1:72790dc:             protected final IteratorType iteratorType;
1:72790dc: 
1:72790dc:             protected K min, max;
1:72790dc:             protected long tokenCount;
1:72790dc: 
1:72790dc:             // iterator with the least number of items
1:72790dc:             protected RangeIterator<K, D> minRange;
1:72790dc:             // iterator with the most number of items
1:72790dc:             protected RangeIterator<K, D> maxRange;
1:72790dc: 
1:72790dc:             // tracks if all of the added ranges overlap, which is useful in case of intersection,
1:72790dc:             // as it gives direct answer as to such iterator is going to produce any results.
1:72790dc:             protected boolean isOverlapping = true;
1:72790dc: 
1:72790dc:             public Statistics(IteratorType iteratorType)
1:72790dc:             {
1:72790dc:                 this.iteratorType = iteratorType;
1:72790dc:             }
1:72790dc: 
1:72790dc:             /**
1:72790dc:              * Update statistics information with the given range.
1:72790dc:              *
1:72790dc:              * Updates min/max of the combined range, token count and
1:72790dc:              * tracks range with the least/most number of tokens.
1:72790dc:              *
1:72790dc:              * @param range The range to update statistics with.
1:72790dc:              */
1:72790dc:             public void update(RangeIterator<K, D> range)
1:72790dc:             {
1:72790dc:                 switch (iteratorType)
1:72790dc:                 {
1:72790dc:                     case UNION:
1:72790dc:                         min = min == null || min.compareTo(range.getMinimum()) > 0 ? range.getMinimum() : min;
1:72790dc:                         max = max == null || max.compareTo(range.getMaximum()) < 0 ? range.getMaximum() : max;
1:72790dc:                         break;
1:72790dc: 
1:72790dc:                     case INTERSECTION:
1:72790dc:                         // minimum of the intersection is the biggest minimum of individual iterators
1:72790dc:                         min = min == null || min.compareTo(range.getMinimum()) < 0 ? range.getMinimum() : min;
1:72790dc:                         // maximum of the intersection is the smallest maximum of individual iterators
1:72790dc:                         max = max == null || max.compareTo(range.getMaximum()) > 0 ? range.getMaximum() : max;
1:72790dc:                         break;
1:72790dc: 
1:72790dc:                     default:
1:72790dc:                         throw new IllegalStateException("Unknown iterator type: " + iteratorType);
1:72790dc:                 }
1:72790dc: 
1:72790dc:                 // check if new range is disjoint with already added ranges, which means that this intersection
1:72790dc:                 // is not going to produce any results, so we can cleanup range storage and never added anything to it.
1:72790dc:                 isOverlapping &= isOverlapping(min, max, range);
1:72790dc: 
1:72790dc:                 minRange = minRange == null ? range : min(minRange, range);
1:72790dc:                 maxRange = maxRange == null ? range : max(maxRange, range);
1:72790dc: 
1:72790dc:                 tokenCount += range.getCount();
1:72790dc: 
1:72790dc:             }
1:72790dc: 
1:72790dc:             private RangeIterator<K, D> min(RangeIterator<K, D> a, RangeIterator<K, D> b)
1:72790dc:             {
1:72790dc:                 return a.getCount() > b.getCount() ? b : a;
1:72790dc:             }
1:72790dc: 
1:72790dc:             private RangeIterator<K, D> max(RangeIterator<K, D> a, RangeIterator<K, D> b)
1:72790dc:             {
1:72790dc:                 return a.getCount() > b.getCount() ? a : b;
1:72790dc:             }
1:72790dc: 
1:72790dc:             public boolean isDisjoint()
1:72790dc:             {
1:72790dc:                 return !isOverlapping;
1:72790dc:             }
1:72790dc: 
1:72790dc:             public double sizeRatio()
1:72790dc:             {
1:72790dc:                 return minRange.getCount() * 1d / maxRange.getCount();
1:72790dc:             }
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @VisibleForTesting
1:72790dc:     protected static <K extends Comparable<K>, D extends CombinedValue<K>> boolean isOverlapping(RangeIterator<K, D> a, RangeIterator<K, D> b)
1:72790dc:     {
1:72790dc:         return isOverlapping(a.getCurrent(), a.getMaximum(), b);
1:72790dc:     }
1:72790dc: 
1:72790dc:     @VisibleForTesting
1:72790dc:     protected static <K extends Comparable<K>, D extends CombinedValue<K>> boolean isOverlapping(K min, K max, RangeIterator<K, D> b)
1:72790dc:     {
1:72790dc:         return min.compareTo(b.getMaximum()) <= 0 && b.getCurrent().compareTo(max) <= 0;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.io.Closeable;
1: import java.util.Comparator;
1: import java.util.List;
1: import java.util.PriorityQueue;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: public abstract class RangeIterator<K extends Comparable<K>, T extends CombinedValue<K>> extends AbstractIterator<T> implements Closeable
1: {
1:     private final K min, max;
1:     private final long count;
1:     private K current;
1: 
1:     protected RangeIterator(Builder.Statistics<K, T> statistics)
1:     {
1:         this(statistics.min, statistics.max, statistics.tokenCount);
1:     }
1: 
1:     public RangeIterator(RangeIterator<K, T> range)
1:     {
1:         this(range == null ? null : range.min, range == null ? null : range.max, range == null ? -1 : range.count);
1:     }
1: 
1:     public RangeIterator(K min, K max, long count)
1:     {
1:         this.min = min;
1:         this.current = min;
1:         this.max = max;
1:         this.count = count;
1:     }
1: 
1:     public final K getMinimum()
1:     {
1:         return min;
1:     }
1: 
1:     public final K getCurrent()
1:     {
1:         return current;
1:     }
1: 
1:     public final K getMaximum()
1:     {
1:         return max;
1:     }
1: 
1:     public final long getCount()
1:     {
1:         return count;
1:     }
1: 
1:     /**
1:      * When called, this iterators current position should
1:      * be skipped forwards until finding either:
1:      *   1) an element equal to or bigger than next
1:      *   2) the end of the iterator
1:      *
1:      * @param nextToken value to skip the iterator forward until matching
1:      *
1:      * @return The next current token after the skip was performed
1:      */
1:     public final T skipTo(K nextToken)
1:     {
1:         if (min == null || max == null)
1:             return endOfData();
1: 
1:         if (current.compareTo(nextToken) >= 0)
1:             return next == null ? recomputeNext() : next;
1: 
1:         if (max.compareTo(nextToken) < 0)
1:             return endOfData();
1: 
1:         performSkipTo(nextToken);
1:         return recomputeNext();
1:     }
1: 
1:     protected abstract void performSkipTo(K nextToken);
1: 
1:     protected T recomputeNext()
1:     {
1:         return tryToComputeNext() ? peek() : endOfData();
1:     }
1: 
1:     protected boolean tryToComputeNext()
1:     {
1:         boolean hasNext = super.tryToComputeNext();
1:         current = hasNext ? next.get() : getMaximum();
1:         return hasNext;
1:     }
1: 
1:     public static abstract class Builder<K extends Comparable<K>, D extends CombinedValue<K>>
1:     {
1:         public enum IteratorType
1:         {
1:             UNION, INTERSECTION
1:         }
1: 
1:         @VisibleForTesting
1:         protected final Statistics<K, D> statistics;
1: 
1:         @VisibleForTesting
1:         protected final PriorityQueue<RangeIterator<K, D>> ranges;
1: 
1:         public Builder(IteratorType type)
1:         {
1:             statistics = new Statistics<>(type);
1:             ranges = new PriorityQueue<>(16, (Comparator<RangeIterator<K, D>>) (a, b) -> a.getCurrent().compareTo(b.getCurrent()));
1:         }
1: 
1:         public K getMinimum()
1:         {
1:             return statistics.min;
1:         }
1: 
1:         public K getMaximum()
1:         {
1:             return statistics.max;
1:         }
1: 
1:         public long getTokenCount()
1:         {
1:             return statistics.tokenCount;
1:         }
1: 
1:         public int rangeCount()
1:         {
1:             return ranges.size();
1:         }
1: 
1:         public Builder<K, D> add(RangeIterator<K, D> range)
1:         {
1:             if (range == null || range.getMinimum() == null || range.getMaximum() == null)
1:                 return this;
1: 
1:             ranges.add(range);
1:             statistics.update(range);
1: 
1:             return this;
1:         }
1: 
1:         public Builder<K, D> add(List<RangeIterator<K, D>> ranges)
1:         {
1:             if (ranges == null || ranges.isEmpty())
1:                 return this;
1: 
1:             ranges.forEach(this::add);
1:             return this;
1:         }
1: 
1:         public final RangeIterator<K, D> build()
1:         {
1:             switch (rangeCount())
1:             {
1:                 case 0:
1:                     return null;
1: 
1:                 case 1:
1:                     return ranges.poll();
1: 
1:                 default:
1:                     return buildIterator();
1:             }
1:         }
1: 
1:         protected abstract RangeIterator<K, D> buildIterator();
1: 
1:         public static class Statistics<K extends Comparable<K>, D extends CombinedValue<K>>
1:         {
1:             protected final IteratorType iteratorType;
1: 
1:             protected K min, max;
1:             protected long tokenCount;
1: 
1:             // iterator with the least number of items
1:             protected RangeIterator<K, D> minRange;
1:             // iterator with the most number of items
1:             protected RangeIterator<K, D> maxRange;
1: 
1:             // tracks if all of the added ranges overlap, which is useful in case of intersection,
1:             // as it gives direct answer as to such iterator is going to produce any results.
1:             protected boolean isOverlapping = true;
1: 
1:             public Statistics(IteratorType iteratorType)
1:             {
1:                 this.iteratorType = iteratorType;
1:             }
1: 
1:             /**
1:              * Update statistics information with the given range.
1:              *
1:              * Updates min/max of the combined range, token count and
1:              * tracks range with the least/most number of tokens.
1:              *
1:              * @param range The range to update statistics with.
1:              */
1:             public void update(RangeIterator<K, D> range)
1:             {
1:                 switch (iteratorType)
1:                 {
1:                     case UNION:
1:                         min = min == null || min.compareTo(range.getMinimum()) > 0 ? range.getMinimum() : min;
1:                         max = max == null || max.compareTo(range.getMaximum()) < 0 ? range.getMaximum() : max;
1:                         break;
1: 
1:                     case INTERSECTION:
1:                         // minimum of the intersection is the biggest minimum of individual iterators
1:                         min = min == null || min.compareTo(range.getMinimum()) < 0 ? range.getMinimum() : min;
1:                         // maximum of the intersection is the smallest maximum of individual iterators
1:                         max = max == null || max.compareTo(range.getMaximum()) > 0 ? range.getMaximum() : max;
1:                         break;
1: 
1:                     default:
1:                         throw new IllegalStateException("Unknown iterator type: " + iteratorType);
1:                 }
1: 
1:                 // check if new range is disjoint with already added ranges, which means that this intersection
1:                 // is not going to produce any results, so we can cleanup range storage and never added anything to it.
1:                 isOverlapping &= isOverlapping(min, max, range);
1: 
1:                 minRange = minRange == null ? range : min(minRange, range);
1:                 maxRange = maxRange == null ? range : max(maxRange, range);
1: 
1:                 tokenCount += range.getCount();
1: 
1:             }
1: 
1:             private RangeIterator<K, D> min(RangeIterator<K, D> a, RangeIterator<K, D> b)
1:             {
1:                 return a.getCount() > b.getCount() ? b : a;
1:             }
1: 
1:             private RangeIterator<K, D> max(RangeIterator<K, D> a, RangeIterator<K, D> b)
1:             {
1:                 return a.getCount() > b.getCount() ? a : b;
1:             }
1: 
1:             public boolean isDisjoint()
1:             {
1:                 return !isOverlapping;
1:             }
1: 
1:             public double sizeRatio()
1:             {
1:                 return minRange.getCount() * 1d / maxRange.getCount();
1:             }
1:         }
1:     }
1: 
1:     @VisibleForTesting
1:     protected static <K extends Comparable<K>, D extends CombinedValue<K>> boolean isOverlapping(RangeIterator<K, D> a, RangeIterator<K, D> b)
1:     {
1:         return isOverlapping(a.getCurrent(), a.getMaximum(), b);
1:     }
1: 
1:     @VisibleForTesting
1:     protected static <K extends Comparable<K>, D extends CombinedValue<K>> boolean isOverlapping(K min, K max, RangeIterator<K, D> b)
1:     {
1:         return min.compareTo(b.getMaximum()) <= 0 && b.getCurrent().compareTo(max) <= 0;
1:     }
1: }
============================================================================