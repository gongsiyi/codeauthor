1:107545b: /**
1:107545b:  * Licensed to the Apache Software Foundation (ASF) under one
1:107545b:  * or more contributor license agreements.  See the NOTICE file
1:107545b:  * distributed with this work for additional information
1:107545b:  * regarding copyright ownership.  The ASF licenses this file
1:107545b:  * to you under the Apache License, Version 2.0 (the
1:107545b:  * "License"); you may not use this file except in compliance
1:107545b:  * with the License.  You may obtain a copy of the License at
1:107545b:  *
1:107545b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:107545b:  *
1:107545b:  * Unless required by applicable law or agreed to in writing,
1:107545b:  * software distributed under the License is distributed on an
1:107545b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:107545b:  * KIND, either express or implied.  See the License for the
1:107545b:  * specific language governing permissions and limitations
1:107545b:  * under the License.
1:107545b:  *
1:107545b:  */
1:107545b: package org.apache.cassandra.db.marshal;
1:107545b: 
1:107545b: import java.nio.ByteBuffer;
1:107545b: 
1:107545b: import org.junit.Test;
1:107545b: import org.apache.cassandra.serializers.SimpleDateSerializer;
1:107545b: 
1:107545b: public class SimpleDateTypeTest
1:107545b: {
1:107545b:     @Test public void TestComparison()
1:107545b:     {
1:107545b:         ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05");
1:107545b:         ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4));
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) == 0 : "Failed == comparison";
1:107545b:             String.format("Failed == comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("1970-01-05");
1:107545b:         d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10));
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:             String.format("Failed comparison of %s and %s, expected <",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("1970-01-05"); // 4
1:107545b:         d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10));
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) > 0 :
1:107545b:             String.format("Failed comparison of %s and %s, expected > 0",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("1");
1:107545b:         d2 = SimpleDateType.instance.fromString("1000");
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:                 String.format("Failed < comparison with string inputs %s and %s",
1:107545b:                         SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                         SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         Integer intLimit = Integer.MAX_VALUE;
1:107545b:         d1 = SimpleDateType.instance.fromString("0");
1:107545b:         d2 = SimpleDateType.instance.fromString(intLimit.toString());
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:                 String.format("Failed < comparison with string inputs at integer bounds %s and %s",
1:107545b:                         SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                         SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         Long overLimit = (long)(Integer.MAX_VALUE);
1:107545b:         d1 = SimpleDateType.instance.fromString("0");
1:107545b:         d2 = SimpleDateType.instance.fromString(overLimit.toString());
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:                 String.format("Failed < comparison with string inputs at integer bounds %s and %s",
1:107545b:                         SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                         SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         Long i1 = 0L;
1:107545b:         Long i2 = (long)Math.pow(2,32) - 1;
1:107545b:         d1 = SimpleDateType.instance.fromString(i1.toString());
1:107545b:         d2 = SimpleDateType.instance.fromString(i2.toString());
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:             String.format("Failed limits comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("256");
1:107545b:         d2 = SimpleDateType.instance.fromString("512");
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:             String.format("Failed comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0));
1:107545b:         d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE));
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:             String.format("Failed neg/pos comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("-10000-10-10");
1:107545b:         d2 = SimpleDateType.instance.fromString("10000-10-10");
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:             String.format("Failed neg/pos string comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("1969-12-31");
1:107545b:         d2 = SimpleDateType.instance.fromString("1970-1-1");
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:             String.format("Failed pre/post epoch comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("1970-1-1");
1:107545b:         d2 = SimpleDateType.instance.fromString("1970-1-1");
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) == 0 :
1:107545b:             String.format("Failed == date from string comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         d1 = SimpleDateType.instance.fromString("1970-1-1");
1:107545b:         d2 = SimpleDateType.instance.fromString("1970-1-2");
1:107545b:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:             String.format("Failed post epoch string comparison with %s and %s",
1:107545b:                 SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                 SimpleDateSerializer.instance.deserialize(d2));
1:107545b: 
1:107545b:         for (int i = 0; i < 32; ++i)
1:107545b:         {
1:107545b:             int offset = (int)Math.pow(2,i);
1:107545b:             d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset));
1:107545b:             d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset));
1:107545b:             assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:107545b:                 String.format("Failed < comparison of %s and %s",
1:107545b:                     SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                     SimpleDateSerializer.instance.deserialize(d2));
1:107545b:         }
1:107545b: 
1:107545b:         for (int i = 0; i < 32; ++i)
1:107545b:         {
1:107545b:             int offset = (int)Math.pow(2,i);
1:107545b:             d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset));
1:107545b:             d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset));
1:107545b:             assert SimpleDateType.instance.compare(d1, d2) > 0 :
1:107545b:                 String.format("Failed > comparison of %s and %s",
1:107545b:                     SimpleDateSerializer.instance.deserialize(d1),
1:107545b:                     SimpleDateSerializer.instance.deserialize(d2));
1:107545b:         }
1:107545b:     }
1:107545b: 
1:107545b:     private Integer makeUnsigned(int input)
1:107545b:     {
1:107545b:         return input - Integer.MIN_VALUE;
1:107545b:     }
1:107545b: }
============================================================================
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.junit.Test;
1: import org.apache.cassandra.serializers.SimpleDateSerializer;
1: 
1: public class SimpleDateTypeTest
1: {
1:     @Test public void TestComparison()
1:     {
1:         ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05");
1:         ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4));
1:         assert SimpleDateType.instance.compare(d1, d2) == 0 : "Failed == comparison";
1:             String.format("Failed == comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("1970-01-05");
1:         d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10));
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:             String.format("Failed comparison of %s and %s, expected <",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("1970-01-05"); // 4
1:         d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10));
1:         assert SimpleDateType.instance.compare(d1, d2) > 0 :
1:             String.format("Failed comparison of %s and %s, expected > 0",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("1");
1:         d2 = SimpleDateType.instance.fromString("1000");
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:                 String.format("Failed < comparison with string inputs %s and %s",
1:                         SimpleDateSerializer.instance.deserialize(d1),
1:                         SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         Integer intLimit = Integer.MAX_VALUE;
1:         d1 = SimpleDateType.instance.fromString("0");
1:         d2 = SimpleDateType.instance.fromString(intLimit.toString());
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:                 String.format("Failed < comparison with string inputs at integer bounds %s and %s",
1:                         SimpleDateSerializer.instance.deserialize(d1),
1:                         SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         Long overLimit = (long)(Integer.MAX_VALUE);
1:         d1 = SimpleDateType.instance.fromString("0");
1:         d2 = SimpleDateType.instance.fromString(overLimit.toString());
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:                 String.format("Failed < comparison with string inputs at integer bounds %s and %s",
1:                         SimpleDateSerializer.instance.deserialize(d1),
1:                         SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         Long i1 = 0L;
1:         Long i2 = (long)Math.pow(2,32) - 1;
1:         d1 = SimpleDateType.instance.fromString(i1.toString());
1:         d2 = SimpleDateType.instance.fromString(i2.toString());
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:             String.format("Failed limits comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("256");
1:         d2 = SimpleDateType.instance.fromString("512");
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:             String.format("Failed comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0));
1:         d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE));
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:             String.format("Failed neg/pos comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("-10000-10-10");
1:         d2 = SimpleDateType.instance.fromString("10000-10-10");
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:             String.format("Failed neg/pos string comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("1969-12-31");
1:         d2 = SimpleDateType.instance.fromString("1970-1-1");
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:             String.format("Failed pre/post epoch comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("1970-1-1");
1:         d2 = SimpleDateType.instance.fromString("1970-1-1");
1:         assert SimpleDateType.instance.compare(d1, d2) == 0 :
1:             String.format("Failed == date from string comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         d1 = SimpleDateType.instance.fromString("1970-1-1");
1:         d2 = SimpleDateType.instance.fromString("1970-1-2");
1:         assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:             String.format("Failed post epoch string comparison with %s and %s",
1:                 SimpleDateSerializer.instance.deserialize(d1),
1:                 SimpleDateSerializer.instance.deserialize(d2));
1: 
1:         for (int i = 0; i < 32; ++i)
1:         {
1:             int offset = (int)Math.pow(2,i);
1:             d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset));
1:             d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset));
1:             assert SimpleDateType.instance.compare(d1, d2) < 0 :
1:                 String.format("Failed < comparison of %s and %s",
1:                     SimpleDateSerializer.instance.deserialize(d1),
1:                     SimpleDateSerializer.instance.deserialize(d2));
1:         }
1: 
1:         for (int i = 0; i < 32; ++i)
1:         {
1:             int offset = (int)Math.pow(2,i);
1:             d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset));
1:             d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset));
1:             assert SimpleDateType.instance.compare(d1, d2) > 0 :
1:                 String.format("Failed > comparison of %s and %s",
1:                     SimpleDateSerializer.instance.deserialize(d1),
1:                     SimpleDateSerializer.instance.deserialize(d2));
1:         }
1:     }
1: 
1:     private Integer makeUnsigned(int input)
1:     {
1:         return input - Integer.MIN_VALUE;
1:     }
1: }
============================================================================