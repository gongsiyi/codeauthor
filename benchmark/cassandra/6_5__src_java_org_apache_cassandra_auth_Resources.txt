1:d4f24ac: /*
1:d4f24ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:d4f24ac:  * or more contributor license agreements.  See the NOTICE file
1:d4f24ac:  * distributed with this work for additional information
1:d4f24ac:  * regarding copyright ownership.  The ASF licenses this file
1:d4f24ac:  * to you under the Apache License, Version 2.0 (the
1:d4f24ac:  * "License"); you may not use this file except in compliance
1:d4f24ac:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
2:d4f24ac:  */
1:d4f24ac: package org.apache.cassandra.auth;
2:d4f24ac: 
1:5a3eb1a: import java.util.ArrayList;
1:d4f24ac: import java.util.List;
1:d4f24ac: 
1:56492f5: import org.apache.cassandra.utils.Hex;
1:d4f24ac: 
1:d4f24ac: public final class Resources
1:d4f24ac: {
1:5a3eb1a:     /**
1:5a3eb1a:      * Construct a chain of resource parents starting with the resource and ending with the root.
1:5a3eb1a:      *
1:5a3eb1a:      * @param resource The staring point.
1:5a3eb1a:      * @return list of resource in the chain form start to the root.
1:5a3eb1a:      */
1:5a3eb1a:     public static List<? extends IResource> chain(IResource resource)
1:5a3eb1a:     {
1:5a3eb1a:         List<IResource> chain = new ArrayList<IResource>();
1:5a3eb1a:         while (true)
1:5a3eb1a:         {
1:5a3eb1a:            chain.add(resource);
1:5a3eb1a:            if (!resource.hasParent())
1:5a3eb1a:                break;
1:5a3eb1a:            resource = resource.getParent();
1:5a3eb1a:         }
1:5a3eb1a:         return chain;
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     /**
1:217721a:      * Creates an IResource instance from its external name.
1:217721a:      * Resource implementation class is inferred by matching against the known IResource
1:217721a:      * impls' root level resources.
1:217721a:      * @param name
1:217721a:      * @return an IResource instance created from the name
1:217721a:      */
1:217721a:     public static IResource fromName(String name)
1:217721a:     {
1:217721a:         if (name.startsWith(RoleResource.root().getName()))
1:217721a:             return RoleResource.fromName(name);
1:217721a:         else if (name.startsWith(DataResource.root().getName()))
1:217721a:             return DataResource.fromName(name);
1:cb5897f:         else if (name.startsWith(FunctionResource.root().getName()))
1:cb5897f:             return FunctionResource.fromName(name);
1:7b0c716:         else if (name.startsWith(JMXResource.root().getName()))
1:7b0c716:             return JMXResource.fromName(name);
1:217721a:         else
1:217721a:             throw new IllegalArgumentException(String.format("Name %s is not valid for any resource type", name));
1:217721a:     }
1:217721a: 
1:5a3eb1a:     @Deprecated
1:d4f24ac:     public final static String ROOT = "cassandra";
1:5a3eb1a:     @Deprecated
1:d4f24ac:     public final static String KEYSPACES = "keyspaces";
1:d4f24ac: 
1:5a3eb1a:     @Deprecated
1:d4f24ac:     public static String toString(List<Object> resource)
1:d4f24ac:     {
1:d4f24ac:         StringBuilder buff = new StringBuilder();
1:d4f24ac:         for (Object component : resource)
1:d4f24ac:         {
1:d4f24ac:             buff.append("/");
1:d4f24ac:             if (component instanceof byte[])
1:56492f5:                 buff.append(Hex.bytesToHex((byte[])component));
1:d4f24ac:             else
1:182051c:                 buff.append(component);
1:d4f24ac:         }
1:d4f24ac:         return buff.toString();
1:d4f24ac:     }
1:d4f24ac: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1:         else if (name.startsWith(JMXResource.root().getName()))
1:             return JMXResource.fromName(name);
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1:         else if (name.startsWith(FunctionResource.root().getName()))
1:             return FunctionResource.fromName(name);
commit:217721a
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Creates an IResource instance from its external name.
1:      * Resource implementation class is inferred by matching against the known IResource
1:      * impls' root level resources.
1:      * @param name
1:      * @return an IResource instance created from the name
1:      */
1:     public static IResource fromName(String name)
1:     {
1:         if (name.startsWith(RoleResource.root().getName()))
1:             return RoleResource.fromName(name);
1:         else if (name.startsWith(DataResource.root().getName()))
1:             return DataResource.fromName(name);
1:         else
1:             throw new IllegalArgumentException(String.format("Name %s is not valid for any resource type", name));
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:182051c
/////////////////////////////////////////////////////////////////////////
1:                 buff.append(component);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1:     /**
1:      * Construct a chain of resource parents starting with the resource and ending with the root.
1:      *
1:      * @param resource The staring point.
1:      * @return list of resource in the chain form start to the root.
1:      */
1:     public static List<? extends IResource> chain(IResource resource)
1:     {
1:         List<IResource> chain = new ArrayList<IResource>();
1:         while (true)
1:         {
1:            chain.add(resource);
1:            if (!resource.hasParent())
1:                break;
1:            resource = resource.getParent();
1:         }
1:         return chain;
1:     }
1: 
1:     @Deprecated
1:     @Deprecated
1:     @Deprecated
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Eric Evans
-------------------------------------------------------------------------------
commit:56492f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Hex;
/////////////////////////////////////////////////////////////////////////
1:                 buff.append(Hex.bytesToHex((byte[])component));
commit:d4f24ac
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
1: package org.apache.cassandra.auth;
1: 
1: import java.util.List;
1: 
0: import org.apache.cassandra.utils.FBUtilities;
1: 
0: /**
0:  * Constants related to Cassandra's resource hierarchy.
0:  *
0:  * A resource in Cassandra is a List containing both Strings and byte[]s.
1:  */
1: public final class Resources
1: {
1:     public final static String ROOT = "cassandra";
1:     public final static String KEYSPACES = "keyspaces";
1: 
1:     public static String toString(List<Object> resource)
1:     {
1:         StringBuilder buff = new StringBuilder();
1:         for (Object component : resource)
1:         {
1:             buff.append("/");
1:             if (component instanceof byte[])
0:                 buff.append(FBUtilities.bytesToHex((byte[])component));
1:             else
0:                 buff.append(component.toString());
1:         }
1:         return buff.toString();
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
commit:187761a
/////////////////////////////////////////////////////////////////////////
0:                 buff.append(FBUtilities.bytesToHex((byte[])component));
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:                 buff.append(FBUtilities.bytesToHex(ByteBuffer.wrap((byte[])component)));
============================================================================