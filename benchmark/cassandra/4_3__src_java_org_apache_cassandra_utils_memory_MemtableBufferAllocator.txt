1:8541cca: /*
1:8541cca:  * Licensed to the Apache Software Foundation (ASF) under one
1:8541cca:  * or more contributor license agreements.  See the NOTICE file
1:8541cca:  * distributed with this work for additional information
1:8541cca:  * regarding copyright ownership.  The ASF licenses this file
1:8541cca:  * to you under the Apache License, Version 2.0 (the
1:8541cca:  * "License"); you may not use this file except in compliance
1:8541cca:  * with the License.  You may obtain a copy of the License at
1:8541cca:  *
1:8541cca:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8541cca:  *
1:8541cca:  * Unless required by applicable law or agreed to in writing, software
1:8541cca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8541cca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8541cca:  * See the License for the specific language governing permissions and
1:8541cca:  * limitations under the License.
1:8541cca:  */
1:8541cca: package org.apache.cassandra.utils.memory;
5:a991b64: 
1:8541cca: import java.nio.ByteBuffer;
1:a991b64: 
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:8541cca: import org.apache.cassandra.utils.concurrent.OpOrder;
1:a991b64: 
1:8541cca: public abstract class MemtableBufferAllocator extends MemtableAllocator
4:a991b64: {
1:8541cca:     protected MemtableBufferAllocator(SubAllocator onHeap, SubAllocator offHeap)
1:a991b64:     {
1:8541cca:         super(onHeap, offHeap);
4:a991b64:     }
1:a991b64: 
1:aa57626:     public Row.Builder rowBuilder(OpOrder.Group writeOp)
1:a991b64:     {
1:aa57626:         return allocator(writeOp).cloningBTreeRowBuilder();
1:a991b64:     }
1:a991b64: 
1:8541cca:     public DecoratedKey clone(DecoratedKey key, OpOrder.Group writeOp)
1:a991b64:     {
1:8541cca:         return new BufferDecoratedKey(key.getToken(), allocator(writeOp).clone(key.getKey()));
1:a991b64:     }
1:a991b64: 
1:8541cca:     public abstract ByteBuffer allocate(int size, OpOrder.Group opGroup);
1:a991b64: 
1:8541cca:     protected AbstractAllocator allocator(OpOrder.Group writeOp)
1:a991b64:     {
1:8541cca:         return new ContextAllocator(writeOp, this);
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aa57626
/////////////////////////////////////////////////////////////////////////
1:     public Row.Builder rowBuilder(OpOrder.Group writeOp)
1:         return allocator(writeOp).cloningBTreeRowBuilder();
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return allocator(writeOp).cloningBTreeRowBuilder(columns);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
0:     public Row.Builder rowBuilder(CFMetaData metadata, OpOrder.Group writeOp, boolean isStatic)
0:         Columns columns = isStatic ? metadata.partitionColumns().statics : metadata.partitionColumns().regulars;
0:         return allocator(writeOp).cloningArrayBackedRowBuilder(columns);
/////////////////////////////////////////////////////////////////////////
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
/////////////////////////////////////////////////////////////////////////
0:     public MemtableRowData.ReusableRow newReusableRow()
0:         return MemtableRowData.BufferRowData.createReusableRow();
0:     public RowAllocator newRowAllocator(CFMetaData cfm, OpOrder.Group writeOp)
0:         return new RowBufferAllocator(allocator(writeOp), cfm.isCounter());
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static class RowBufferAllocator extends RowDataBlock.Writer implements RowAllocator
1:     {
0:         private final AbstractAllocator allocator;
0:         private final boolean isCounter;
1: 
0:         private MemtableRowData.BufferClustering clustering;
0:         private int clusteringIdx;
0:         private LivenessInfo info;
0:         private DeletionTime deletion;
0:         private RowDataBlock data;
1: 
0:         private RowBufferAllocator(AbstractAllocator allocator, boolean isCounter)
1:         {
0:             super(true);
0:             this.allocator = allocator;
0:             this.isCounter = isCounter;
1:         }
1: 
0:         public void allocateNewRow(int clusteringSize, Columns columns, boolean isStatic)
1:         {
0:             data = new RowDataBlock(columns, 1, false, isCounter);
0:             clustering = isStatic ? null : new MemtableRowData.BufferClustering(clusteringSize);
0:             clusteringIdx = 0;
0:             updateWriter(data);
1:         }
1: 
0:         public MemtableRowData allocatedRowData()
1:         {
0:             MemtableRowData row = new MemtableRowData.BufferRowData(clustering == null ? Clustering.STATIC_CLUSTERING : clustering,
0:                                                                     info,
0:                                                                     deletion,
0:                                                                     data);
1: 
0:             clustering = null;
0:             info = LivenessInfo.NONE;
0:             deletion = DeletionTime.LIVE;
0:             data = null;
1: 
0:             return row;
1:         }
1: 
0:         public void writeClusteringValue(ByteBuffer value)
1:         {
0:             clustering.setClusteringValue(clusteringIdx++, value == null ? null : allocator.clone(value));
1:         }
1: 
0:         public void writePartitionKeyLivenessInfo(LivenessInfo info)
1:         {
0:             this.info = info;
1:         }
1: 
0:         public void writeRowDeletion(DeletionTime deletion)
1:         {
0:             this.deletion = deletion;
1:         }
1: 
0:         @Override
0:         public void writeCell(ColumnDefinition column, boolean isCounter, ByteBuffer value, LivenessInfo info, CellPath path)
1:         {
0:             ByteBuffer v = allocator.clone(value);
0:             if (column.isComplex())
0:                 complexWriter.addCell(column, v, info, MemtableRowData.BufferCellPath.clone(path, allocator));
0:             else
0:                 simpleWriter.addCell(column, v, info);
1:         }
1:     }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils.memory;
0: 
1: import java.nio.ByteBuffer;
0: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.BufferDecoratedKey;
0: import org.apache.cassandra.db.Cell;
0: import org.apache.cassandra.db.CounterCell;
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.DeletedCell;
0: import org.apache.cassandra.db.ExpiringCell;
1: import org.apache.cassandra.utils.concurrent.OpOrder;
0: 
1: public abstract class MemtableBufferAllocator extends MemtableAllocator
0: {
0: 
1:     protected MemtableBufferAllocator(SubAllocator onHeap, SubAllocator offHeap)
0:     {
1:         super(onHeap, offHeap);
0:     }
0: 
0:     public Cell clone(Cell cell, CFMetaData cfm, OpOrder.Group writeOp)
0:     {
0:         return cell.localCopy(cfm, allocator(writeOp));
0:     }
0: 
0:     public CounterCell clone(CounterCell cell, CFMetaData cfm, OpOrder.Group writeOp)
0:     {
0:         return cell.localCopy(cfm, allocator(writeOp));
0:     }
0: 
0:     public DeletedCell clone(DeletedCell cell, CFMetaData cfm, OpOrder.Group writeOp)
0:     {
0:         return cell.localCopy(cfm, allocator(writeOp));
0:     }
0: 
0:     public ExpiringCell clone(ExpiringCell cell, CFMetaData cfm, OpOrder.Group writeOp)
0:     {
0:         return cell.localCopy(cfm, allocator(writeOp));
0:     }
0: 
1:     public DecoratedKey clone(DecoratedKey key, OpOrder.Group writeOp)
0:     {
1:         return new BufferDecoratedKey(key.getToken(), allocator(writeOp).clone(key.getKey()));
0:     }
0: 
1:     public abstract ByteBuffer allocate(int size, OpOrder.Group opGroup);
0: 
1:     protected AbstractAllocator allocator(OpOrder.Group writeOp)
0:     {
1:         return new ContextAllocator(writeOp, this);
0:     }
0: }
============================================================================