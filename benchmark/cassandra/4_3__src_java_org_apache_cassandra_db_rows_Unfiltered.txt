1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
1:a991b64: 
1:a991b64: import java.security.MessageDigest;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.Clusterable;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Unfiltered is the common class for the main constituent of an unfiltered partition.
1:a991b64:  * <p>
1:a991b64:  * In practice, an Unfiltered is either a row or a range tombstone marker. Unfiltereds
1:a991b64:  * are uniquely identified by their clustering information and can be sorted according
1:a991b64:  * to those.
1:a991b64:  */
1:a991b64: public interface Unfiltered extends Clusterable
1:a991b64: {
1:a991b64:     public enum Kind { ROW, RANGE_TOMBSTONE_MARKER };
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The kind of the atom: either row or range tombstone marker.
1:a991b64:      */
1:a991b64:     public Kind kind();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Digest the atom using the provided {@code MessageDigest}.
1:a991b64:      *
1:a991b64:      * @param digest the {@code MessageDigest} to use.
1:a991b64:      */
1:a991b64:     public void digest(MessageDigest digest);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Validate the data of this atom.
1:a991b64:      *
1:a991b64:      * @param metadata the metadata for the table this atom is part of.
1:6536c05:      * @throws org.apache.cassandra.serializers.MarshalException if some of the data in this atom is
1:a991b64:      * invalid (some value is invalid for its column type, or some field
1:a991b64:      * is nonsensical).
1:a991b64:      */
1:a991b64:     public void validateData(CFMetaData metadata);
1:a991b64: 
1:a991b64:     public String toString(CFMetaData metadata);
1:a991b64:     public String toString(CFMetaData metadata, boolean fullDetails);
1:71b1c4a:     public String toString(CFMetaData metadata, boolean includeClusterKeys, boolean fullDetails);
1:2457599: 
1:2457599:     default boolean isRow()
1:2457599:     {
1:2457599:         return kind() == Kind.ROW;
1:2457599:     }
1:2457599: 
1:2457599:     default boolean isRangeTombstoneMarker()
1:2457599:     {
1:2457599:         return kind() == Kind.RANGE_TOMBSTONE_MARKER;
1:2457599:     }
1:a991b64: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:c94a9f2
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:71b1c4a
/////////////////////////////////////////////////////////////////////////
1:     public String toString(CFMetaData metadata, boolean includeClusterKeys, boolean fullDetails);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6536c05
/////////////////////////////////////////////////////////////////////////
1:      * @throws org.apache.cassandra.serializers.MarshalException if some of the data in this atom is
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: 
1:     default boolean isRow()
1:     {
1:         return kind() == Kind.ROW;
1:     }
1: 
1:     default boolean isRangeTombstoneMarker()
1:     {
1:         return kind() == Kind.RANGE_TOMBSTONE_MARKER;
1:     }
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.security.MessageDigest;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.Clusterable;
1: 
1: /**
1:  * Unfiltered is the common class for the main constituent of an unfiltered partition.
1:  * <p>
1:  * In practice, an Unfiltered is either a row or a range tombstone marker. Unfiltereds
1:  * are uniquely identified by their clustering information and can be sorted according
1:  * to those.
1:  */
1: public interface Unfiltered extends Clusterable
1: {
1:     public enum Kind { ROW, RANGE_TOMBSTONE_MARKER };
1: 
1:     /**
1:      * The kind of the atom: either row or range tombstone marker.
1:      */
1:     public Kind kind();
1: 
1:     /**
1:      * Digest the atom using the provided {@code MessageDigest}.
1:      *
1:      * @param digest the {@code MessageDigest} to use.
1:      */
1:     public void digest(MessageDigest digest);
1: 
1:     /**
1:      * Validate the data of this atom.
1:      *
1:      * @param metadata the metadata for the table this atom is part of.
0:      * @throws MarshalException if some of the data in this atom is
1:      * invalid (some value is invalid for its column type, or some field
1:      * is nonsensical).
1:      */
1:     public void validateData(CFMetaData metadata);
1: 
1:     public String toString(CFMetaData metadata);
1:     public String toString(CFMetaData metadata, boolean fullDetails);
1: }
============================================================================