1:389bac7: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:389bac7: package org.apache.cassandra.locator;
3:389bac7: 
1:389bac7: import java.net.InetAddress;
1:257cdaa: import java.net.UnknownHostException;
1:389bac7: import java.util.ArrayList;
1:257cdaa: import java.util.Map;
1:257cdaa: 
1:a991b64: import com.google.common.collect.Iterators;
1:257cdaa: import com.google.common.collect.Multimap;
1:389bac7: 
1:389bac7: import org.junit.BeforeClass;
1:389bac7: import org.junit.Test;
1:4cd67af: import org.junit.runner.RunWith;
1:257cdaa: 
1:257cdaa: import static junit.framework.Assert.assertNotNull;
1:a991b64: import static org.junit.Assert.assertEquals;
1:bf8c1ce: 
1:a991b64: import static org.apache.cassandra.Util.token;
1:257cdaa: import static org.junit.Assert.assertFalse;
1:257cdaa: import static org.junit.Assert.assertTrue;
1:389bac7: 
1:4cd67af: import org.apache.cassandra.OrderedJUnit4ClassRunner;
1:257cdaa: import org.apache.cassandra.config.DatabaseDescriptor;
1:389bac7: import org.apache.cassandra.dht.Token;
1:389bac7: import org.apache.cassandra.service.StorageService;
1:a991b64: 
1:389bac7: 
1:4cd67af: @RunWith(OrderedJUnit4ClassRunner.class)
1:389bac7: public class TokenMetadataTest
1:389bac7: {
1:389bac7:     public final static String ONE = "1";
1:389bac7:     public final static String SIX = "6";
1:389bac7: 
1:0a5a766:     static TokenMetadata tmd;
1:389bac7: 
1:389bac7:     @BeforeClass
1:389bac7:     public static void beforeClass() throws Throwable
1:389bac7:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:0a5a766:         tmd = StorageService.instance.getTokenMetadata();
1:389bac7:         tmd.updateNormalToken(token(ONE), InetAddress.getByName("127.0.0.1"));
1:389bac7:         tmd.updateNormalToken(token(SIX), InetAddress.getByName("127.0.0.6"));
1:389bac7:     }
1:402e1ed: 
1:257cdaa:     private static void testRingIterator(ArrayList<Token> ring, String start, boolean includeMin, String... expected)
1:389bac7:     {
1:257cdaa:         ArrayList<Token> actual = new ArrayList<>();
1:0a5a766:         Iterators.addAll(actual, TokenMetadata.ringIterator(ring, token(start), includeMin));
1:389bac7:         assertEquals(actual.toString(), expected.length, actual.size());
1:389bac7:         for (int i = 0; i < expected.length; i++)
1:389bac7:             assertEquals("Mismatch at index " + i + ": " + actual, token(expected[i]), actual.get(i));
1:389bac7:     }
1:389bac7: 
1:402e1ed:     @Test
1:389bac7:     public void testRingIterator()
1:389bac7:     {
1:0a5a766:         ArrayList<Token> ring = tmd.sortedTokens();
1:0a5a766:         testRingIterator(ring, "2", false, "6", "1");
1:0a5a766:         testRingIterator(ring, "7", false, "1", "6");
1:0a5a766:         testRingIterator(ring, "0", false, "1", "6");
1:0a5a766:         testRingIterator(ring, "", false, "1", "6");
1:389bac7:     }
1:389bac7: 
1:389bac7:     @Test
1:389bac7:     public void testRingIteratorIncludeMin()
1:389bac7:     {
1:0a5a766:         ArrayList<Token> ring = tmd.sortedTokens();
1:0a5a766:         testRingIterator(ring, "2", true, "6", "", "1");
1:0a5a766:         testRingIterator(ring, "7", true, "", "1", "6");
1:0a5a766:         testRingIterator(ring, "0", true, "1", "6", "");
1:0a5a766:         testRingIterator(ring, "", true, "1", "6", "");
1:389bac7:     }
1:389bac7: 
1:389bac7:     @Test
1:402e1ed:     public void testRingIteratorEmptyRing()
1:402e1ed:     {
1:0a5a766:         testRingIterator(new ArrayList<Token>(), "2", false);
1:257cdaa:     }
1:257cdaa: 
1:257cdaa:     @Test
1:257cdaa:     public void testTopologyUpdate_RackConsolidation() throws UnknownHostException
1:257cdaa:     {
1:257cdaa:         final InetAddress first = InetAddress.getByName("127.0.0.1");
1:257cdaa:         final InetAddress second = InetAddress.getByName("127.0.0.6");
1:257cdaa:         final String DATA_CENTER = "datacenter1";
1:257cdaa:         final String RACK1 = "rack1";
1:257cdaa:         final String RACK2 = "rack2";
1:257cdaa: 
1:257cdaa:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:257cdaa:         {
1:257cdaa:             @Override
1:257cdaa:             public String getRack(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return endpoint.equals(first) ? RACK1 : RACK2;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public String getDatacenter(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return DATA_CENTER;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:257cdaa:             {
1:257cdaa:                 return 0;
1:257cdaa:             }
1:257cdaa:         });
1:257cdaa: 
1:257cdaa:         tmd.updateNormalToken(token(ONE), first);
1:257cdaa:         tmd.updateNormalToken(token(SIX), second);
1:257cdaa: 
1:257cdaa:         TokenMetadata tokenMetadata = tmd.cloneOnlyTokenMap();
1:257cdaa:         assertNotNull(tokenMetadata);
1:257cdaa: 
1:257cdaa:         TokenMetadata.Topology topology = tokenMetadata.getTopology();
1:257cdaa:         assertNotNull(topology);
1:257cdaa: 
1:257cdaa:         Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints();
1:257cdaa:         assertNotNull(allEndpoints);
1:257cdaa:         assertTrue(allEndpoints.size() == 2);
1:257cdaa:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1:257cdaa: 
1:257cdaa:         Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks();
1:257cdaa:         assertNotNull(racks);
1:257cdaa:         assertTrue(racks.size() == 1);
1:257cdaa:         assertTrue(racks.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK2));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK2).contains(second));
1:257cdaa: 
1:257cdaa:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:257cdaa:         {
1:257cdaa:             @Override
1:257cdaa:             public String getRack(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return RACK1;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public String getDatacenter(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return DATA_CENTER;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:257cdaa:             {
1:257cdaa:                 return 0;
1:257cdaa:             }
1:257cdaa:         });
1:257cdaa: 
1:257cdaa:         tokenMetadata.updateTopology(first);
1:257cdaa:         tokenMetadata.updateTopology(second);
1:257cdaa: 
1:257cdaa:         allEndpoints = topology.getDatacenterEndpoints();
1:257cdaa:         assertNotNull(allEndpoints);
1:257cdaa:         assertTrue(allEndpoints.size() == 2);
1:257cdaa:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1:257cdaa: 
1:257cdaa:         racks = topology.getDatacenterRacks();
1:257cdaa:         assertNotNull(racks);
1:257cdaa:         assertTrue(racks.size() == 1);
1:257cdaa:         assertTrue(racks.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:257cdaa:         assertFalse(racks.get(DATA_CENTER).containsKey(RACK2));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(second));
1:257cdaa:     }
1:257cdaa: 
1:257cdaa:     @Test
1:257cdaa:     public void testTopologyUpdate_RackExpansion() throws UnknownHostException
1:257cdaa:     {
1:257cdaa:         final InetAddress first = InetAddress.getByName("127.0.0.1");
1:257cdaa:         final InetAddress second = InetAddress.getByName("127.0.0.6");
1:257cdaa:         final String DATA_CENTER = "datacenter1";
1:257cdaa:         final String RACK1 = "rack1";
1:257cdaa:         final String RACK2 = "rack2";
1:257cdaa: 
1:257cdaa:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:257cdaa:         {
1:257cdaa:             @Override
1:257cdaa:             public String getRack(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return RACK1;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public String getDatacenter(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return DATA_CENTER;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:257cdaa:             {
1:257cdaa:                 return 0;
1:257cdaa:             }
1:257cdaa:         });
1:257cdaa: 
1:257cdaa:         tmd.updateNormalToken(token(ONE), first);
1:257cdaa:         tmd.updateNormalToken(token(SIX), second);
1:257cdaa: 
1:257cdaa:         TokenMetadata tokenMetadata = tmd.cloneOnlyTokenMap();
1:257cdaa:         assertNotNull(tokenMetadata);
1:257cdaa: 
1:257cdaa:         TokenMetadata.Topology topology = tokenMetadata.getTopology();
1:257cdaa:         assertNotNull(topology);
1:257cdaa: 
1:257cdaa:         Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints();
1:257cdaa:         assertNotNull(allEndpoints);
1:257cdaa:         assertTrue(allEndpoints.size() == 2);
1:257cdaa:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1:257cdaa: 
1:257cdaa:         Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks();
1:257cdaa:         assertNotNull(racks);
1:257cdaa:         assertTrue(racks.size() == 1);
1:257cdaa:         assertTrue(racks.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:257cdaa:         assertFalse(racks.get(DATA_CENTER).containsKey(RACK2));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(second));
1:257cdaa: 
1:257cdaa:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:257cdaa:         {
1:257cdaa:             @Override
1:257cdaa:             public String getRack(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return endpoint.equals(first) ? RACK1 : RACK2;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public String getDatacenter(InetAddress endpoint)
1:257cdaa:             {
1:257cdaa:                 return DATA_CENTER;
1:257cdaa:             }
1:257cdaa: 
1:257cdaa:             @Override
1:257cdaa:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:257cdaa:             {
1:257cdaa:                 return 0;
1:402e1ed:             }
1:257cdaa:         });
1:257cdaa: 
1:257cdaa:         tokenMetadata.updateTopology();
1:257cdaa: 
1:257cdaa:         allEndpoints = topology.getDatacenterEndpoints();
1:257cdaa:         assertNotNull(allEndpoints);
1:257cdaa:         assertTrue(allEndpoints.size() == 2);
1:257cdaa:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:257cdaa:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1:257cdaa: 
1:257cdaa:         racks = topology.getDatacenterRacks();
1:257cdaa:         assertNotNull(racks);
1:257cdaa:         assertTrue(racks.size() == 1);
1:257cdaa:         assertTrue(racks.containsKey(DATA_CENTER));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK2));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:257cdaa:         assertTrue(racks.get(DATA_CENTER).get(RACK2).contains(second));
1:257cdaa:     }
1:389bac7: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:8134f09
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:257cdaa
/////////////////////////////////////////////////////////////////////////
1: import java.net.UnknownHostException;
1: import java.util.Map;
1: 
1: import com.google.common.collect.Multimap;
1: 
1: import static junit.framework.Assert.assertNotNull;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     private static void testRingIterator(ArrayList<Token> ring, String start, boolean includeMin, String... expected)
1:         ArrayList<Token> actual = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testTopologyUpdate_RackConsolidation() throws UnknownHostException
1:     {
1:         final InetAddress first = InetAddress.getByName("127.0.0.1");
1:         final InetAddress second = InetAddress.getByName("127.0.0.6");
1:         final String DATA_CENTER = "datacenter1";
1:         final String RACK1 = "rack1";
1:         final String RACK2 = "rack2";
1: 
1:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:         {
1:             @Override
1:             public String getRack(InetAddress endpoint)
1:             {
1:                 return endpoint.equals(first) ? RACK1 : RACK2;
1:             }
1: 
1:             @Override
1:             public String getDatacenter(InetAddress endpoint)
1:             {
1:                 return DATA_CENTER;
1:             }
1: 
1:             @Override
1:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:             {
1:                 return 0;
1:             }
1:         });
1: 
1:         tmd.updateNormalToken(token(ONE), first);
1:         tmd.updateNormalToken(token(SIX), second);
1: 
1:         TokenMetadata tokenMetadata = tmd.cloneOnlyTokenMap();
1:         assertNotNull(tokenMetadata);
1: 
1:         TokenMetadata.Topology topology = tokenMetadata.getTopology();
1:         assertNotNull(topology);
1: 
1:         Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints();
1:         assertNotNull(allEndpoints);
1:         assertTrue(allEndpoints.size() == 2);
1:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1: 
1:         Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks();
1:         assertNotNull(racks);
1:         assertTrue(racks.size() == 1);
1:         assertTrue(racks.containsKey(DATA_CENTER));
1:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK2));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK2).contains(second));
1: 
1:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:         {
1:             @Override
1:             public String getRack(InetAddress endpoint)
1:             {
1:                 return RACK1;
1:             }
1: 
1:             @Override
1:             public String getDatacenter(InetAddress endpoint)
1:             {
1:                 return DATA_CENTER;
1:             }
1: 
1:             @Override
1:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:             {
1:                 return 0;
1:             }
1:         });
1: 
1:         tokenMetadata.updateTopology(first);
1:         tokenMetadata.updateTopology(second);
1: 
1:         allEndpoints = topology.getDatacenterEndpoints();
1:         assertNotNull(allEndpoints);
1:         assertTrue(allEndpoints.size() == 2);
1:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1: 
1:         racks = topology.getDatacenterRacks();
1:         assertNotNull(racks);
1:         assertTrue(racks.size() == 1);
1:         assertTrue(racks.containsKey(DATA_CENTER));
1:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:         assertFalse(racks.get(DATA_CENTER).containsKey(RACK2));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(second));
1:     }
1: 
1:     @Test
1:     public void testTopologyUpdate_RackExpansion() throws UnknownHostException
1:     {
1:         final InetAddress first = InetAddress.getByName("127.0.0.1");
1:         final InetAddress second = InetAddress.getByName("127.0.0.6");
1:         final String DATA_CENTER = "datacenter1";
1:         final String RACK1 = "rack1";
1:         final String RACK2 = "rack2";
1: 
1:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:         {
1:             @Override
1:             public String getRack(InetAddress endpoint)
1:             {
1:                 return RACK1;
1:             }
1: 
1:             @Override
1:             public String getDatacenter(InetAddress endpoint)
1:             {
1:                 return DATA_CENTER;
1:             }
1: 
1:             @Override
1:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:             {
1:                 return 0;
1:             }
1:         });
1: 
1:         tmd.updateNormalToken(token(ONE), first);
1:         tmd.updateNormalToken(token(SIX), second);
1: 
1:         TokenMetadata tokenMetadata = tmd.cloneOnlyTokenMap();
1:         assertNotNull(tokenMetadata);
1: 
1:         TokenMetadata.Topology topology = tokenMetadata.getTopology();
1:         assertNotNull(topology);
1: 
1:         Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints();
1:         assertNotNull(allEndpoints);
1:         assertTrue(allEndpoints.size() == 2);
1:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1: 
1:         Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks();
1:         assertNotNull(racks);
1:         assertTrue(racks.size() == 1);
1:         assertTrue(racks.containsKey(DATA_CENTER));
1:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:         assertFalse(racks.get(DATA_CENTER).containsKey(RACK2));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(second));
1: 
1:         DatabaseDescriptor.setEndpointSnitch(new AbstractEndpointSnitch()
1:         {
1:             @Override
1:             public String getRack(InetAddress endpoint)
1:             {
1:                 return endpoint.equals(first) ? RACK1 : RACK2;
1:             }
1: 
1:             @Override
1:             public String getDatacenter(InetAddress endpoint)
1:             {
1:                 return DATA_CENTER;
1:             }
1: 
1:             @Override
1:             public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:             {
1:                 return 0;
1:             }
1:         });
1: 
1:         tokenMetadata.updateTopology();
1: 
1:         allEndpoints = topology.getDatacenterEndpoints();
1:         assertNotNull(allEndpoints);
1:         assertTrue(allEndpoints.size() == 2);
1:         assertTrue(allEndpoints.containsKey(DATA_CENTER));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(first));
1:         assertTrue(allEndpoints.get(DATA_CENTER).contains(second));
1: 
1:         racks = topology.getDatacenterRacks();
1:         assertNotNull(racks);
1:         assertTrue(racks.size() == 1);
1:         assertTrue(racks.containsKey(DATA_CENTER));
1:         assertTrue(racks.get(DATA_CENTER).size() == 2);
1:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK1));
1:         assertTrue(racks.get(DATA_CENTER).containsKey(RACK2));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK1).contains(first));
1:         assertTrue(racks.get(DATA_CENTER).get(RACK2).contains(second));
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import com.google.common.collect.Iterators;
1: import static org.apache.cassandra.Util.token;
1: import static org.junit.Assert.assertEquals;
1: 
commit:6b1fb2c
commit:0a5a766
/////////////////////////////////////////////////////////////////////////
1:     static TokenMetadata tmd;
1:         tmd = StorageService.instance.getTokenMetadata();
0:     private void testRingIterator(ArrayList<Token> ring, String start, boolean includeMin, String... expected)
1:         Iterators.addAll(actual, TokenMetadata.ringIterator(ring, token(start), includeMin));
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<Token> ring = tmd.sortedTokens();
1:         testRingIterator(ring, "2", false, "6", "1");
1:         testRingIterator(ring, "7", false, "1", "6");
1:         testRingIterator(ring, "0", false, "1", "6");
1:         testRingIterator(ring, "", false, "1", "6");
1:         ArrayList<Token> ring = tmd.sortedTokens();
1:         testRingIterator(ring, "2", true, "6", "", "1");
1:         testRingIterator(ring, "7", true, "", "1", "6");
1:         testRingIterator(ring, "0", true, "1", "6", "");
1:         testRingIterator(ring, "", true, "1", "6", "");
1:         testRingIterator(new ArrayList<Token>(), "2", false);
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:4cd67af
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.apache.cassandra.OrderedJUnit4ClassRunner;
1: @RunWith(OrderedJUnit4ClassRunner.class)
commit:bf8c1ce
/////////////////////////////////////////////////////////////////////////
0: import org.junit.runner.RunWith;
1: 
0: import org.apache.cassandra.OrderedJUnit4ClassRunner;
0: @RunWith(OrderedJUnit4ClassRunner.class)
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:402e1ed
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testRingIteratorEmptyRing()
1:     {
0:         RING.clear();
0:         testRingIterator("2", false);
1:     }
commit:389bac7
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
1: package org.apache.cassandra.locator;
1: 
1: import java.net.InetAddress;
1: import java.util.ArrayList;
0: import java.util.List;
1: 
0: import com.google.common.collect.Iterators;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
0: import static org.junit.Assert.assertEquals;
1: 
0: import org.apache.cassandra.CleanupHelper;
0: import static org.apache.cassandra.Util.token;
1: 
1: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.locator.TokenMetadata;
1: import org.apache.cassandra.service.StorageService;
1: 
1: public class TokenMetadataTest
1: {
1:     public final static String ONE = "1";
1:     public final static String SIX = "6";
1: 
0:     public static ArrayList<Token> RING;
1: 
1:     @BeforeClass
1:     public static void beforeClass() throws Throwable
1:     {
0:         TokenMetadata tmd = StorageService.instance.getTokenMetadata();
1:         tmd.updateNormalToken(token(ONE), InetAddress.getByName("127.0.0.1"));
1:         tmd.updateNormalToken(token(SIX), InetAddress.getByName("127.0.0.6"));
0:         RING = tmd.sortedTokens();
1:     }
1: 
0:     private void testRingIterator(String start, boolean includeMin, String... expected)
1:     {
0:         ArrayList<Token> actual = new ArrayList<Token>();
0:         Iterators.addAll(actual, TokenMetadata.ringIterator(RING, token(start), includeMin));
1:         assertEquals(actual.toString(), expected.length, actual.size());
1:         for (int i = 0; i < expected.length; i++)
1:             assertEquals("Mismatch at index " + i + ": " + actual, token(expected[i]), actual.get(i));
1:     }
1: 
1:     @Test
1:     public void testRingIterator()
1:     {
0:         testRingIterator("2", false, "6", "1");
0:         testRingIterator("7", false, "1", "6");
0:         testRingIterator("0", false, "1", "6");
0:         testRingIterator("", false, "1", "6");
1:     }
1: 
1:     @Test
1:     public void testRingIteratorIncludeMin()
1:     {
0:         testRingIterator("2", true, "6", "", "1");
0:         testRingIterator("7", true, "", "1", "6");
0:         testRingIterator("0", true, "1", "6", "");
0:         testRingIterator("", true, "1", "6", "");
1:     }
1: }
============================================================================