1:8ebd590: /*
1:8ebd590:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ebd590:  * or more contributor license agreements.  See the NOTICE file
1:8ebd590:  * distributed with this work for additional information
1:8ebd590:  * regarding copyright ownership.  The ASF licenses this file
1:8ebd590:  * to you under the Apache License, Version 2.0 (the
1:8ebd590:  * "License"); you may not use this file except in compliance
1:8ebd590:  * with the License.  You may obtain a copy of the License at
1:8ebd590:  *
1:8ebd590:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8ebd590:  *
1:8ebd590:  * Unless required by applicable law or agreed to in writing, software
1:8ebd590:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8ebd590:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8ebd590:  * See the License for the specific language governing permissions and
1:8ebd590:  * limitations under the License.
1:8ebd590:  */
1:8ebd590: 
1:8ebd590: package org.apache.cassandra.db.commitlog;
1:8ebd590: 
1:8ebd590: import org.junit.Assume;
1:8ebd590: import org.junit.BeforeClass;
1:8ebd590: import org.junit.Test;
1:8ebd590: import static org.junit.Assert.*;
1:8ebd590: 
1:8ebd590: import org.apache.cassandra.SchemaLoader;
1:8ebd590: import org.apache.cassandra.Util;
1:8ebd590: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:8ebd590: import org.apache.cassandra.db.ColumnFamilyStore;
1:8ebd590: import org.apache.cassandra.db.DecoratedKey;
1:8ebd590: import org.apache.cassandra.db.Keyspace;
1:8ebd590: import org.apache.cassandra.db.RowUpdateBuilder;
1:8ebd590: import org.apache.cassandra.db.WindowsFailedSnapshotTracker;
1:8ebd590: import org.apache.cassandra.io.sstable.SnapshotDeletingTask;
1:8ebd590: import org.apache.cassandra.schema.KeyspaceParams;
1:8ebd590: import org.apache.cassandra.service.GCInspector;
1:8ebd590: import org.apache.cassandra.utils.ByteBufferUtil;
1:8ebd590: import org.apache.cassandra.utils.FBUtilities;
1:8ebd590: 
1:8ebd590: public class SnapshotDeletingTest
1:8ebd590: {
1:8ebd590:     private static final String KEYSPACE1 = "Keyspace1";
1:8ebd590:     private static final String CF_STANDARD1 = "CF_STANDARD1";
1:8ebd590: 
1:8ebd590:     @BeforeClass
1:8ebd590:     public static void defineSchema() throws Exception
1:8ebd590:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:8ebd590:         GCInspector.register();
1:8ebd590:         // Needed to init the output file where we print failed snapshots. This is called on node startup.
1:8ebd590:         WindowsFailedSnapshotTracker.deleteOldSnapshots();
1:8ebd590:         SchemaLoader.prepareServer();
1:8ebd590:         SchemaLoader.createKeyspace(KEYSPACE1,
1:8ebd590:                                     KeyspaceParams.simple(1),
1:8ebd590:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:8ebd590:     }
1:8ebd590: 
1:8ebd590:     @Test
1:8ebd590:     public void testCompactionHook() throws Exception
1:8ebd590:     {
1:54836ec:         Assume.assumeTrue(FBUtilities.isWindows);
1:8ebd590: 
1:8ebd590:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:8ebd590:         ColumnFamilyStore store = keyspace.getColumnFamilyStore(CF_STANDARD1);
1:8ebd590:         store.clearUnsafe();
1:8ebd590: 
1:8ebd590:         populate(10000);
1:8ebd590:         store.snapshot("snapshot1");
1:8ebd590: 
1:8ebd590:         // Confirm snapshot deletion fails. Sleep for a bit just to make sure the SnapshotDeletingTask has
1:8ebd590:         // time to run and fail.
1:8ebd590:         Thread.sleep(500);
1:8ebd590:         store.clearSnapshot("snapshot1");
1:8ebd590:         assertEquals(1, SnapshotDeletingTask.pendingDeletionCount());
1:8ebd590: 
1:8ebd590:         // Compact the cf and confirm that the executor's after hook calls rescheduleDeletion
1:8ebd590:         populate(20000);
1:8ebd590:         store.forceBlockingFlush();
1:8ebd590:         store.forceMajorCompaction();
1:8ebd590: 
1:8ebd590:         long start = System.currentTimeMillis();
1:8ebd590:         while (System.currentTimeMillis() - start < 1000 && SnapshotDeletingTask.pendingDeletionCount() > 0)
1:8ebd590:         {
1:8ebd590:             Thread.yield();
1:8ebd590:         }
1:8ebd590: 
1:8ebd590:         assertEquals(0, SnapshotDeletingTask.pendingDeletionCount());
1:8ebd590:     }
1:8ebd590: 
1:8ebd590:     private void populate(int rowCount) {
1:8ebd590:         long timestamp = System.currentTimeMillis();
1:8ebd590:         CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1).metadata;
1:8ebd590:         for (int i = 0; i <= rowCount; i++)
1:8ebd590:         {
1:8ebd590:             DecoratedKey key = Util.dk(Integer.toString(i));
1:8ebd590:             for (int j = 0; j < 10; j++)
1:8ebd590:             {
1:8ebd590:                 new RowUpdateBuilder(cfm, timestamp, 0, key.getKey())
1:8ebd590:                     .clustering(Integer.toString(j))
1:8ebd590:                     .add("val", ByteBufferUtil.EMPTY_BYTE_BUFFER)
1:8ebd590:                     .build()
1:8ebd590:                     .applyUnsafe();
1:8ebd590:             }
1:8ebd590:         }
1:8ebd590:     }
1:8ebd590: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
commit:54836ec
/////////////////////////////////////////////////////////////////////////
1:         Assume.assumeTrue(FBUtilities.isWindows);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:8ebd590
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.commitlog;
1: 
1: import org.junit.Assume;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import static org.junit.Assert.*;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.db.WindowsFailedSnapshotTracker;
0: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.io.sstable.SnapshotDeletingTask;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.service.GCInspector;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class SnapshotDeletingTest
1: {
1:     private static final String KEYSPACE1 = "Keyspace1";
1:     private static final String CF_STANDARD1 = "CF_STANDARD1";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws Exception
1:     {
1:         GCInspector.register();
1:         // Needed to init the output file where we print failed snapshots. This is called on node startup.
1:         WindowsFailedSnapshotTracker.deleteOldSnapshots();
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
1:                                     KeyspaceParams.simple(1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:     }
1: 
1:     @Test
1:     public void testCompactionHook() throws Exception
1:     {
0:         Assume.assumeTrue(FBUtilities.isWindows());
1: 
1:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:         ColumnFamilyStore store = keyspace.getColumnFamilyStore(CF_STANDARD1);
1:         store.clearUnsafe();
1: 
1:         populate(10000);
1:         store.snapshot("snapshot1");
1: 
1:         // Confirm snapshot deletion fails. Sleep for a bit just to make sure the SnapshotDeletingTask has
1:         // time to run and fail.
1:         Thread.sleep(500);
1:         store.clearSnapshot("snapshot1");
1:         assertEquals(1, SnapshotDeletingTask.pendingDeletionCount());
1: 
1:         // Compact the cf and confirm that the executor's after hook calls rescheduleDeletion
1:         populate(20000);
1:         store.forceBlockingFlush();
1:         store.forceMajorCompaction();
1: 
1:         long start = System.currentTimeMillis();
1:         while (System.currentTimeMillis() - start < 1000 && SnapshotDeletingTask.pendingDeletionCount() > 0)
1:         {
1:             Thread.yield();
1:         }
1: 
1:         assertEquals(0, SnapshotDeletingTask.pendingDeletionCount());
1:     }
1: 
1:     private void populate(int rowCount) {
1:         long timestamp = System.currentTimeMillis();
1:         CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1).metadata;
1:         for (int i = 0; i <= rowCount; i++)
1:         {
1:             DecoratedKey key = Util.dk(Integer.toString(i));
1:             for (int j = 0; j < 10; j++)
1:             {
1:                 new RowUpdateBuilder(cfm, timestamp, 0, key.getKey())
1:                     .clustering(Integer.toString(j))
1:                     .add("val", ByteBufferUtil.EMPTY_BYTE_BUFFER)
1:                     .build()
1:                     .applyUnsafe();
1:             }
1:         }
1:     }
1: }
============================================================================