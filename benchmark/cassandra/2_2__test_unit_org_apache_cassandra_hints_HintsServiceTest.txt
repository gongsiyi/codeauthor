1:cee22ad: /*
1:cee22ad:  * Licensed to the Apache Software Foundation (ASF) under one
1:cee22ad:  * or more contributor license agreements.  See the NOTICE file
1:cee22ad:  * distributed with this work for additional information
1:cee22ad:  * regarding copyright ownership.  The ASF licenses this file
1:cee22ad:  * to you under the Apache License, Version 2.0 (the
1:cee22ad:  * "License"); you may not use this file except in compliance
1:cee22ad:  * with the License.  You may obtain a copy of the License at
1:cee22ad:  *
1:cee22ad:  *     http://www.apache.org/licenses/LICENSE-2.0
1:cee22ad:  *
1:cee22ad:  * Unless required by applicable law or agreed to in writing, software
1:cee22ad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cee22ad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cee22ad:  * See the License for the specific language governing permissions and
1:cee22ad:  * limitations under the License.
1:cee22ad:  */
1:cee22ad: package org.apache.cassandra.hints;
1:cee22ad: 
1:cee22ad: import java.net.InetAddress;
1:cee22ad: import java.util.Collections;
1:cee22ad: import java.util.UUID;
1:cee22ad: import java.util.concurrent.ExecutionException;
1:cee22ad: import java.util.concurrent.TimeUnit;
1:cee22ad: import java.util.concurrent.TimeoutException;
1:cee22ad: import javax.annotation.Nullable;
1:cee22ad: 
1:cee22ad: import com.google.common.util.concurrent.Futures;
1:cee22ad: import com.google.common.util.concurrent.ListenableFuture;
1:cee22ad: import org.junit.After;
1:cee22ad: import org.junit.Before;
1:cee22ad: import org.junit.BeforeClass;
1:cee22ad: import org.junit.Test;
1:cee22ad: 
1:cee22ad: import com.datastax.driver.core.utils.MoreFutures;
1:cee22ad: import org.apache.cassandra.SchemaLoader;
1:cee22ad: import org.apache.cassandra.config.CFMetaData;
1:cee22ad: import org.apache.cassandra.config.Schema;
1:cee22ad: import org.apache.cassandra.db.DecoratedKey;
1:cee22ad: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:cee22ad: import org.apache.cassandra.gms.IFailureDetectionEventListener;
1:cee22ad: import org.apache.cassandra.gms.IFailureDetector;
1:cee22ad: import org.apache.cassandra.metrics.StorageMetrics;
1:cee22ad: import org.apache.cassandra.net.MessageIn;
1:cee22ad: import org.apache.cassandra.net.MessagingService;
1:cee22ad: import org.apache.cassandra.net.MockMessagingService;
1:cee22ad: import org.apache.cassandra.net.MockMessagingSpy;
1:cee22ad: import org.apache.cassandra.schema.KeyspaceParams;
1:cee22ad: import org.apache.cassandra.service.StorageService;
1:cee22ad: import org.apache.cassandra.utils.FBUtilities;
1:cee22ad: 
1:cee22ad: import static org.apache.cassandra.Util.dk;
1:cee22ad: import static org.apache.cassandra.net.MockMessagingService.verb;
1:cee22ad: import static org.junit.Assert.assertEquals;
1:cee22ad: import static org.junit.Assert.assertTrue;
1:cee22ad: 
1:cee22ad: public class HintsServiceTest
1:cee22ad: {
1:cee22ad:     private static final String KEYSPACE = "hints_service_test";
1:cee22ad:     private static final String TABLE = "table";
1:cee22ad: 
1:cee22ad:     private final MockFailureDetector failureDetector = new MockFailureDetector();
1:cee22ad: 
1:cee22ad:     @BeforeClass
1:cee22ad:     public static void defineSchema()
1:cee22ad:     {
1:cee22ad:         SchemaLoader.prepareServer();
1:cee22ad:         StorageService.instance.initServer();
1:cee22ad:         SchemaLoader.createKeyspace(KEYSPACE,
1:cee22ad:                 KeyspaceParams.simple(1),
1:cee22ad:                 SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     @After
1:cee22ad:     public void cleanup()
1:cee22ad:     {
1:cee22ad:         MockMessagingService.cleanup();
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     @Before
1:cee22ad:     public void reinstanciateService() throws ExecutionException, InterruptedException
1:cee22ad:     {
1:cee22ad:         MessagingService.instance().clearMessageSinks();
1:cee22ad: 
1:cee22ad:         if (!HintsService.instance.isShutDown())
1:cee22ad:         {
1:cee22ad:             HintsService.instance.shutdownBlocking();
1:cee22ad:             HintsService.instance.deleteAllHints();
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         failureDetector.isAlive = true;
1:cee22ad:         HintsService.instance = new HintsService(failureDetector);
1:cee22ad:         HintsService.instance.startDispatch();
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     @Test
1:cee22ad:     public void testDispatchHints() throws InterruptedException, ExecutionException
1:cee22ad:     {
1:cee22ad:         long cnt = StorageMetrics.totalHints.getCount();
1:cee22ad: 
1:cee22ad:         // create spy for hint messages
1:cee22ad:         MockMessagingSpy spy = sendHintsAndResponses(100, -1);
1:cee22ad: 
1:cee22ad:         // metrics should have been updated with number of create hints
1:cee22ad:         assertEquals(cnt + 100, StorageMetrics.totalHints.getCount());
1:cee22ad: 
1:cee22ad:         // wait until hints have been send
1:cee22ad:         spy.interceptMessageOut(100).get();
1:cee22ad:         spy.interceptNoMsg(500, TimeUnit.MILLISECONDS).get();
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     @Test
1:cee22ad:     public void testPauseAndResume() throws InterruptedException, ExecutionException
1:cee22ad:     {
1:cee22ad:         HintsService.instance.pauseDispatch();
1:cee22ad: 
1:cee22ad:         // create spy for hint messages
1:cee22ad:         MockMessagingSpy spy = sendHintsAndResponses(100, -1);
1:cee22ad: 
1:cee22ad:         // we should not send any hints while paused
1:cee22ad:         ListenableFuture<Boolean> noMessagesWhilePaused = spy.interceptNoMsg(15, TimeUnit.SECONDS);
1:cee22ad:         Futures.addCallback(noMessagesWhilePaused, new MoreFutures.SuccessCallback<Boolean>()
1:cee22ad:         {
1:cee22ad:             public void onSuccess(@Nullable Boolean aBoolean)
1:cee22ad:             {
1:cee22ad:                 HintsService.instance.resumeDispatch();
1:cee22ad:             }
1:cee22ad:         });
1:cee22ad: 
1:cee22ad:         Futures.allAsList(
1:cee22ad:                 noMessagesWhilePaused,
1:cee22ad:                 spy.interceptMessageOut(100),
1:cee22ad:                 spy.interceptNoMsg(200, TimeUnit.MILLISECONDS)
1:cee22ad:         ).get();
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     @Test
1:cee22ad:     public void testPageRetry() throws InterruptedException, ExecutionException, TimeoutException
1:cee22ad:     {
1:cee22ad:         // create spy for hint messages, but only create responses for 5 hints
1:cee22ad:         MockMessagingSpy spy = sendHintsAndResponses(20, 5);
1:cee22ad: 
1:cee22ad:         Futures.allAsList(
1:cee22ad:                 // the dispatcher will always send all hints within the current page
1:cee22ad:                 // and only wait for the acks before going to the next page
1:cee22ad:                 spy.interceptMessageOut(20),
1:cee22ad:                 spy.interceptNoMsg(200, TimeUnit.MILLISECONDS),
1:cee22ad: 
1:cee22ad:                 // next tick will trigger a retry of the same page as we only replied with 5/20 acks
1:cee22ad:                 spy.interceptMessageOut(20)
1:cee22ad:         ).get();
1:cee22ad: 
1:cee22ad:         // marking the destination node as dead should stop sending hints
1:cee22ad:         failureDetector.isAlive = false;
1:cee22ad:         spy.interceptNoMsg(20, TimeUnit.SECONDS).get();
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     @Test
1:cee22ad:     public void testPageSeek() throws InterruptedException, ExecutionException
1:cee22ad:     {
1:cee22ad:         // create spy for hint messages, stop replying after 12k (should be on 3rd page)
1:cee22ad:         MockMessagingSpy spy = sendHintsAndResponses(20000, 12000);
1:cee22ad: 
1:cee22ad:         // At this point the dispatcher will constantly retry the page we stopped acking,
1:cee22ad:         // thus we receive the same hints from the page multiple times and in total more than
1:cee22ad:         // all written hints. Lets just consume them for a while and then pause the dispatcher.
1:cee22ad:         spy.interceptMessageOut(22000).get();
1:cee22ad:         HintsService.instance.pauseDispatch();
1:cee22ad:         Thread.sleep(1000);
1:cee22ad: 
1:cee22ad:         // verify that we have a dispatch offset set for the page we're currently stuck at
1:cee22ad:         HintsStore store = HintsService.instance.getCatalog().get(StorageService.instance.getLocalHostUUID());
1:cee22ad:         HintsDescriptor descriptor = store.poll();
1:cee22ad:         store.offerFirst(descriptor); // add again for cleanup during re-instanciation
1:cee22ad:         InputPosition dispatchOffset = store.getDispatchOffset(descriptor);
1:cee22ad:         assertTrue(dispatchOffset != null);
1:cee22ad:         assertTrue(((ChecksummedDataInput.Position) dispatchOffset).sourcePosition > 0);
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     private MockMessagingSpy sendHintsAndResponses(int noOfHints, int noOfResponses)
1:cee22ad:     {
1:cee22ad:         // create spy for hint messages, but only create responses for noOfResponses hints
1:cee22ad:         MessageIn<HintResponse> messageIn = MessageIn.create(FBUtilities.getBroadcastAddress(),
1:cee22ad:                 HintResponse.instance,
1:cee22ad:                 Collections.emptyMap(),
1:cee22ad:                 MessagingService.Verb.REQUEST_RESPONSE,
1:9d9a1a1:                 MessagingService.current_version);
1:cee22ad: 
1:cee22ad:         MockMessagingSpy spy;
1:cee22ad:         if (noOfResponses != -1)
1:cee22ad:         {
1:cee22ad:             spy = MockMessagingService.when(verb(MessagingService.Verb.HINT)).respondN(messageIn, noOfResponses);
1:cee22ad:         }
1:cee22ad:         else
1:cee22ad:         {
1:cee22ad:             spy = MockMessagingService.when(verb(MessagingService.Verb.HINT)).respond(messageIn);
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         // create and write noOfHints using service
1:cee22ad:         UUID hostId = StorageService.instance.getLocalHostUUID();
1:cee22ad:         for (int i = 0; i < noOfHints; i++)
1:cee22ad:         {
1:cee22ad:             long now = System.currentTimeMillis();
1:cee22ad:             DecoratedKey dkey = dk(String.valueOf(i));
1:cee22ad:             CFMetaData cfMetaData = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:cee22ad:             PartitionUpdate.SimpleBuilder builder = PartitionUpdate.simpleBuilder(cfMetaData, dkey).timestamp(now);
1:cee22ad:             builder.row("column0").add("val", "value0");
1:cee22ad:             Hint hint = Hint.create(builder.buildAsMutation(), now);
1:cee22ad:             HintsService.instance.write(hostId, hint);
1:cee22ad:         }
1:cee22ad:         return spy;
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     private static class MockFailureDetector implements IFailureDetector
1:cee22ad:     {
1:cee22ad:         private boolean isAlive = true;
1:cee22ad: 
1:cee22ad:         public boolean isAlive(InetAddress ep)
1:cee22ad:         {
1:cee22ad:             return isAlive;
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         public void interpret(InetAddress ep)
1:cee22ad:         {
1:cee22ad:             throw new UnsupportedOperationException();
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         public void report(InetAddress ep)
1:cee22ad:         {
1:cee22ad:             throw new UnsupportedOperationException();
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         public void registerFailureDetectionEventListener(IFailureDetectionEventListener listener)
1:cee22ad:         {
1:cee22ad:             throw new UnsupportedOperationException();
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         public void unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener)
1:cee22ad:         {
1:cee22ad:             throw new UnsupportedOperationException();
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         public void remove(InetAddress ep)
1:cee22ad:         {
1:cee22ad:             throw new UnsupportedOperationException();
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         public void forceConviction(InetAddress ep)
1:cee22ad:         {
1:cee22ad:             throw new UnsupportedOperationException();
1:cee22ad:         }
1:cee22ad:     }
1:cee22ad: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9d9a1a1
/////////////////////////////////////////////////////////////////////////
1:                 MessagingService.current_version);
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:cee22ad
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.net.InetAddress;
1: import java.util.Collections;
1: import java.util.UUID;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import javax.annotation.Nullable;
1: 
1: import com.google.common.util.concurrent.Futures;
1: import com.google.common.util.concurrent.ListenableFuture;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import com.datastax.driver.core.utils.MoreFutures;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.gms.IFailureDetectionEventListener;
1: import org.apache.cassandra.gms.IFailureDetector;
1: import org.apache.cassandra.metrics.StorageMetrics;
1: import org.apache.cassandra.net.MessageIn;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.net.MockMessagingService;
1: import org.apache.cassandra.net.MockMessagingSpy;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static org.apache.cassandra.Util.dk;
1: import static org.apache.cassandra.net.MockMessagingService.verb;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class HintsServiceTest
1: {
1:     private static final String KEYSPACE = "hints_service_test";
1:     private static final String TABLE = "table";
1: 
1:     private final MockFailureDetector failureDetector = new MockFailureDetector();
1: 
1:     @BeforeClass
1:     public static void defineSchema()
1:     {
1:         SchemaLoader.prepareServer();
1:         StorageService.instance.initServer();
1:         SchemaLoader.createKeyspace(KEYSPACE,
1:                 KeyspaceParams.simple(1),
1:                 SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:     }
1: 
1:     @After
1:     public void cleanup()
1:     {
1:         MockMessagingService.cleanup();
1:     }
1: 
1:     @Before
1:     public void reinstanciateService() throws ExecutionException, InterruptedException
1:     {
1:         MessagingService.instance().clearMessageSinks();
1: 
1:         if (!HintsService.instance.isShutDown())
1:         {
1:             HintsService.instance.shutdownBlocking();
1:             HintsService.instance.deleteAllHints();
1:         }
1: 
1:         failureDetector.isAlive = true;
1:         HintsService.instance = new HintsService(failureDetector);
1:         HintsService.instance.startDispatch();
1:     }
1: 
1:     @Test
1:     public void testDispatchHints() throws InterruptedException, ExecutionException
1:     {
1:         long cnt = StorageMetrics.totalHints.getCount();
1: 
1:         // create spy for hint messages
1:         MockMessagingSpy spy = sendHintsAndResponses(100, -1);
1: 
1:         // metrics should have been updated with number of create hints
1:         assertEquals(cnt + 100, StorageMetrics.totalHints.getCount());
1: 
1:         // wait until hints have been send
1:         spy.interceptMessageOut(100).get();
1:         spy.interceptNoMsg(500, TimeUnit.MILLISECONDS).get();
1:     }
1: 
1:     @Test
1:     public void testPauseAndResume() throws InterruptedException, ExecutionException
1:     {
1:         HintsService.instance.pauseDispatch();
1: 
1:         // create spy for hint messages
1:         MockMessagingSpy spy = sendHintsAndResponses(100, -1);
1: 
1:         // we should not send any hints while paused
1:         ListenableFuture<Boolean> noMessagesWhilePaused = spy.interceptNoMsg(15, TimeUnit.SECONDS);
1:         Futures.addCallback(noMessagesWhilePaused, new MoreFutures.SuccessCallback<Boolean>()
1:         {
1:             public void onSuccess(@Nullable Boolean aBoolean)
1:             {
1:                 HintsService.instance.resumeDispatch();
1:             }
1:         });
1: 
1:         Futures.allAsList(
1:                 noMessagesWhilePaused,
1:                 spy.interceptMessageOut(100),
1:                 spy.interceptNoMsg(200, TimeUnit.MILLISECONDS)
1:         ).get();
1:     }
1: 
1:     @Test
1:     public void testPageRetry() throws InterruptedException, ExecutionException, TimeoutException
1:     {
1:         // create spy for hint messages, but only create responses for 5 hints
1:         MockMessagingSpy spy = sendHintsAndResponses(20, 5);
1: 
1:         Futures.allAsList(
1:                 // the dispatcher will always send all hints within the current page
1:                 // and only wait for the acks before going to the next page
1:                 spy.interceptMessageOut(20),
1:                 spy.interceptNoMsg(200, TimeUnit.MILLISECONDS),
1: 
1:                 // next tick will trigger a retry of the same page as we only replied with 5/20 acks
1:                 spy.interceptMessageOut(20)
1:         ).get();
1: 
1:         // marking the destination node as dead should stop sending hints
1:         failureDetector.isAlive = false;
1:         spy.interceptNoMsg(20, TimeUnit.SECONDS).get();
1:     }
1: 
1:     @Test
1:     public void testPageSeek() throws InterruptedException, ExecutionException
1:     {
1:         // create spy for hint messages, stop replying after 12k (should be on 3rd page)
1:         MockMessagingSpy spy = sendHintsAndResponses(20000, 12000);
1: 
1:         // At this point the dispatcher will constantly retry the page we stopped acking,
1:         // thus we receive the same hints from the page multiple times and in total more than
1:         // all written hints. Lets just consume them for a while and then pause the dispatcher.
1:         spy.interceptMessageOut(22000).get();
1:         HintsService.instance.pauseDispatch();
1:         Thread.sleep(1000);
1: 
1:         // verify that we have a dispatch offset set for the page we're currently stuck at
1:         HintsStore store = HintsService.instance.getCatalog().get(StorageService.instance.getLocalHostUUID());
1:         HintsDescriptor descriptor = store.poll();
1:         store.offerFirst(descriptor); // add again for cleanup during re-instanciation
1:         InputPosition dispatchOffset = store.getDispatchOffset(descriptor);
1:         assertTrue(dispatchOffset != null);
1:         assertTrue(((ChecksummedDataInput.Position) dispatchOffset).sourcePosition > 0);
1:     }
1: 
1:     private MockMessagingSpy sendHintsAndResponses(int noOfHints, int noOfResponses)
1:     {
1:         // create spy for hint messages, but only create responses for noOfResponses hints
1:         MessageIn<HintResponse> messageIn = MessageIn.create(FBUtilities.getBroadcastAddress(),
1:                 HintResponse.instance,
1:                 Collections.emptyMap(),
1:                 MessagingService.Verb.REQUEST_RESPONSE,
0:                 MessagingService.current_version,
0:                 MessageIn.createTimestamp());
1: 
1:         MockMessagingSpy spy;
1:         if (noOfResponses != -1)
1:         {
1:             spy = MockMessagingService.when(verb(MessagingService.Verb.HINT)).respondN(messageIn, noOfResponses);
1:         }
1:         else
1:         {
1:             spy = MockMessagingService.when(verb(MessagingService.Verb.HINT)).respond(messageIn);
1:         }
1: 
1:         // create and write noOfHints using service
1:         UUID hostId = StorageService.instance.getLocalHostUUID();
1:         for (int i = 0; i < noOfHints; i++)
1:         {
1:             long now = System.currentTimeMillis();
1:             DecoratedKey dkey = dk(String.valueOf(i));
1:             CFMetaData cfMetaData = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:             PartitionUpdate.SimpleBuilder builder = PartitionUpdate.simpleBuilder(cfMetaData, dkey).timestamp(now);
1:             builder.row("column0").add("val", "value0");
1:             Hint hint = Hint.create(builder.buildAsMutation(), now);
1:             HintsService.instance.write(hostId, hint);
1:         }
1:         return spy;
1:     }
1: 
1:     private static class MockFailureDetector implements IFailureDetector
1:     {
1:         private boolean isAlive = true;
1: 
1:         public boolean isAlive(InetAddress ep)
1:         {
1:             return isAlive;
1:         }
1: 
1:         public void interpret(InetAddress ep)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public void report(InetAddress ep)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public void registerFailureDetectionEventListener(IFailureDetectionEventListener listener)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public void unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public void remove(InetAddress ep)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public void forceConviction(InetAddress ep)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: }
============================================================================