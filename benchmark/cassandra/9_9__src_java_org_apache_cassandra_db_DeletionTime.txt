1:4d34917: /*
1:4d34917:  * Licensed to the Apache Software Foundation (ASF) under one
1:4d34917:  * or more contributor license agreements.  See the NOTICE file
1:4d34917:  * distributed with this work for additional information
1:4d34917:  * regarding copyright ownership.  The ASF licenses this file
1:4d34917:  * to you under the Apache License, Version 2.0 (the
1:4d34917:  * "License"); you may not use this file except in compliance
1:4d34917:  * with the License.  You may obtain a copy of the License at
1:4d34917:  *
1:4d34917:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4d34917:  *
1:4d34917:  * Unless required by applicable law or agreed to in writing, software
1:4d34917:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4d34917:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4d34917:  * See the License for the specific language governing permissions and
1:4d34917:  * limitations under the License.
1:4d34917:  */
1:4d34917: package org.apache.cassandra.db;
2:4d34917: 
1:4d34917: import java.io.IOException;
1:a991b64: import java.security.MessageDigest;
1:4d34917: 
1:4d34917: import com.google.common.base.Objects;
1:4d34917: 
1:4b54b8a: import org.apache.cassandra.cache.IMeasurableMemory;
1:2457599: import org.apache.cassandra.db.rows.Cell;
1:4d34917: import org.apache.cassandra.io.ISerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:da93a1c: import org.apache.cassandra.utils.ObjectSizes;
1:4d34917: 
2:3edb62b: /**
1:a991b64:  * Information on deletion of a storage engine object.
2:3edb62b:  */
1:2457599: public class DeletionTime implements Comparable<DeletionTime>, IMeasurableMemory
3:4d34917: {
1:2457599:     private static final long EMPTY_SIZE = ObjectSizes.measure(new DeletionTime(0, 0));
1:4d34917: 
1:3edb62b:     /**
1:3edb62b:      * A special DeletionTime that signifies that there is no top-level (row) tombstone.
1:3edb62b:      */
1:2457599:     public static final DeletionTime LIVE = new DeletionTime(Long.MIN_VALUE, Integer.MAX_VALUE);
1:a991b64: 
1:a991b64:     public static final Serializer serializer = new Serializer();
1:4d34917: 
1:2457599:     private final long markedForDeleteAt;
1:2457599:     private final int localDeletionTime;
1:2457599: 
1:2457599:     public DeletionTime(long markedForDeleteAt, int localDeletionTime)
1:2457599:     {
1:2457599:         this.markedForDeleteAt = markedForDeleteAt;
1:2457599:         this.localDeletionTime = localDeletionTime;
1:2457599:     }
1:2457599: 
1:7110d98:     /**
1:3edb62b:      * A timestamp (typically in microseconds since the unix epoch, although this is not enforced) after which
1:3edb62b:      * data should be considered deleted. If set to Long.MIN_VALUE, this implies that the data has not been marked
1:3edb62b:      * for deletion at all.
1:6858dd3:      */
1:2457599:     public long markedForDeleteAt()
1:2457599:     {
1:2457599:         return markedForDeleteAt;
1:2457599:     }
1:362cc05: 
1:6858dd3:     /**
1:3edb62b:      * The local server timestamp, in seconds since the unix epoch, at which this tombstone was created. This is
1:3edb62b:      * only used for purposes of purging the tombstone after gc_grace_seconds have elapsed.
1:3edb62b:      */
1:2457599:     public int localDeletionTime()
1:2457599:     {
1:2457599:         return localDeletionTime;
1:2457599:     }
1:4d34917: 
1:3edb62b:     /**
1:7110d98:      * Returns whether this DeletionTime is live, that is deletes no columns.
1:7110d98:      */
1:7110d98:     public boolean isLive()
1:362cc05:     {
1:a991b64:         return markedForDeleteAt() == Long.MIN_VALUE && localDeletionTime() == Integer.MAX_VALUE;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void digest(MessageDigest digest)
1:a991b64:     {
1:782a1c3:         // localDeletionTime is basically a metadata of the deletion time that tells us when it's ok to purge it.
1:782a1c3:         // It's thus intrinsically a local information and shouldn't be part of the digest (which exists for
1:782a1c3:         // cross-nodes comparisons).
1:a991b64:         FBUtilities.updateWithLong(digest, markedForDeleteAt());
1:362cc05:     }
1:4d34917: 
1:4d34917:     @Override
1:4d34917:     public boolean equals(Object o)
1:4d34917:     {
1:4d34917:         if(!(o instanceof DeletionTime))
1:4d34917:             return false;
1:4d34917:         DeletionTime that = (DeletionTime)o;
1:a991b64:         return markedForDeleteAt() == that.markedForDeleteAt() && localDeletionTime() == that.localDeletionTime();
3:4d34917:     }
1:4d34917: 
1:4d34917:     @Override
1:4d34917:     public final int hashCode()
1:4d34917:     {
1:a991b64:         return Objects.hashCode(markedForDeleteAt(), localDeletionTime());
1:4d34917:     }
1:4d34917: 
1:4d34917:     @Override
1:4d34917:     public String toString()
1:4d34917:     {
1:a991b64:         return String.format("deletedAt=%d, localDeletion=%d", markedForDeleteAt(), localDeletionTime());
1:4d34917:     }
1:4d34917: 
1:4d34917:     public int compareTo(DeletionTime dt)
1:4d34917:     {
1:a991b64:         if (markedForDeleteAt() < dt.markedForDeleteAt())
2:4d34917:             return -1;
1:a991b64:         else if (markedForDeleteAt() > dt.markedForDeleteAt())
1:b8a8004:             return 1;
1:a991b64:         else if (localDeletionTime() < dt.localDeletionTime())
1:4d34917:             return -1;
1:a991b64:         else if (localDeletionTime() > dt.localDeletionTime())
1:4d34917:             return 1;
2:4d34917:         else
1:4d34917:             return 0;
1:a991b64:     }
1:a991b64: 
1:b0dbea3:     public boolean supersedes(DeletionTime dt)
1:a991b64:     {
1:a991b64:         return markedForDeleteAt() > dt.markedForDeleteAt() || (markedForDeleteAt() == dt.markedForDeleteAt() && localDeletionTime() > dt.localDeletionTime());
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean deletes(LivenessInfo info)
1:a991b64:     {
1:a991b64:         return deletes(info.timestamp());
1:a991b64:     }
1:a991b64: 
1:2457599:     public boolean deletes(Cell cell)
1:2457599:     {
1:2457599:         return deletes(cell.timestamp());
1:2457599:     }
1:2457599: 
1:a991b64:     public boolean deletes(long timestamp)
1:a991b64:     {
1:a991b64:         return timestamp <= markedForDeleteAt();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public int dataSize()
1:a991b64:     {
1:a991b64:         return 12;
1:b0dbea3:     }
1:b0dbea3: 
1:4b54b8a:     public long unsharedHeapSize()
1:b0dbea3:     {
1:4b54b8a:         return EMPTY_SIZE;
1:4d34917:     }
1:4d34917: 
1:362cc05:     public static class Serializer implements ISerializer<DeletionTime>
1:4d34917:     {
1:75508ec:         public void serialize(DeletionTime delTime, DataOutputPlus out) throws IOException
1:4d34917:         {
1:a991b64:             out.writeInt(delTime.localDeletionTime());
1:a991b64:             out.writeLong(delTime.markedForDeleteAt());
1:4d34917:         }
1:4d34917: 
1:03f72ac:         public DeletionTime deserialize(DataInputPlus in) throws IOException
1:4d34917:         {
1:4d34917:             int ldt = in.readInt();
1:4d34917:             long mfda = in.readLong();
1:655ae7a:             return mfda == Long.MIN_VALUE && ldt == Integer.MAX_VALUE
1:655ae7a:                  ? LIVE
1:2457599:                  : new DeletionTime(mfda, ldt);
1:4d34917:         }
1:4d34917: 
1:2457599:         public void skip(DataInputPlus in) throws IOException
1:4d34917:         {
1:ff27eb3:             in.skipBytesFully(4 + 8);
1:4d34917:         }
1:4d34917: 
1:03f72ac:         public long serializedSize(DeletionTime delTime)
1:4d34917:         {
1:03f72ac:             return TypeSizes.sizeof(delTime.localDeletionTime())
1:03f72ac:                  + TypeSizes.sizeof(delTime.markedForDeleteAt());
1:4d34917:         }
1:4d34917:     }
1:4d34917: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e8091d5
commit:b8a8004
/////////////////////////////////////////////////////////////////////////
1:             return 1;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ff27eb3
/////////////////////////////////////////////////////////////////////////
1:             in.skipBytesFully(4 + 8);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:782a1c3
/////////////////////////////////////////////////////////////////////////
1:         // localDeletionTime is basically a metadata of the deletion time that tells us when it's ok to purge it.
1:         // It's thus intrinsically a local information and shouldn't be part of the digest (which exists for
1:         // cross-nodes comparisons).
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.Cell;
/////////////////////////////////////////////////////////////////////////
1: public class DeletionTime implements Comparable<DeletionTime>, IMeasurableMemory
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new DeletionTime(0, 0));
1:     public static final DeletionTime LIVE = new DeletionTime(Long.MIN_VALUE, Integer.MAX_VALUE);
1:     private final long markedForDeleteAt;
1:     private final int localDeletionTime;
1: 
1:     public DeletionTime(long markedForDeleteAt, int localDeletionTime)
1:     {
1:         this.markedForDeleteAt = markedForDeleteAt;
1:         this.localDeletionTime = localDeletionTime;
1:     }
1: 
1:     public long markedForDeleteAt()
1:     {
1:         return markedForDeleteAt;
1:     }
1:     public int localDeletionTime()
1:     {
1:         return localDeletionTime;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public boolean deletes(Cell cell)
1:     {
1:         return deletes(cell.timestamp());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                  : new DeletionTime(mfda, ldt);
1:         public void skip(DataInputPlus in) throws IOException
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.security.MessageDigest;
1: import org.apache.cassandra.utils.FBUtilities;
1:  * Information on deletion of a storage engine object.
0: public abstract class DeletionTime implements Comparable<DeletionTime>, IMeasurableMemory, Aliasable<DeletionTime>
0:     private static final long EMPTY_SIZE = ObjectSizes.measure(new SimpleDeletionTime(0, 0));
0:     public static final DeletionTime LIVE = new SimpleDeletionTime(Long.MIN_VALUE, Integer.MAX_VALUE);
1: 
1:     public static final Serializer serializer = new Serializer();
0:     public abstract long markedForDeleteAt();
0:     public abstract int localDeletionTime();
1:         return markedForDeleteAt() == Long.MIN_VALUE && localDeletionTime() == Integer.MAX_VALUE;
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         FBUtilities.updateWithLong(digest, markedForDeleteAt());
0:         FBUtilities.updateWithInt(digest, localDeletionTime());
/////////////////////////////////////////////////////////////////////////
1:         return markedForDeleteAt() == that.markedForDeleteAt() && localDeletionTime() == that.localDeletionTime();
1:         return Objects.hashCode(markedForDeleteAt(), localDeletionTime());
1:         return String.format("deletedAt=%d, localDeletion=%d", markedForDeleteAt(), localDeletionTime());
1:         if (markedForDeleteAt() < dt.markedForDeleteAt())
1:         else if (markedForDeleteAt() > dt.markedForDeleteAt())
1:         else if (localDeletionTime() < dt.localDeletionTime())
1:         else if (localDeletionTime() > dt.localDeletionTime())
1:         return markedForDeleteAt() > dt.markedForDeleteAt() || (markedForDeleteAt() == dt.markedForDeleteAt() && localDeletionTime() > dt.localDeletionTime());
1:     }
1: 
0:     public boolean isPurgeable(long maxPurgeableTimestamp, int gcBefore)
1:     {
0:         return markedForDeleteAt() < maxPurgeableTimestamp && localDeletionTime() < gcBefore;
1:     }
1: 
1:     public boolean deletes(LivenessInfo info)
1:     {
1:         return deletes(info.timestamp());
1:     }
1: 
1:     public boolean deletes(long timestamp)
1:     {
1:         return timestamp <= markedForDeleteAt();
1:     }
1: 
1:     public int dataSize()
1:     {
1:         return 12;
/////////////////////////////////////////////////////////////////////////
1:             out.writeInt(delTime.localDeletionTime());
1:             out.writeLong(delTime.markedForDeleteAt());
/////////////////////////////////////////////////////////////////////////
0:                  : new SimpleDeletionTime(mfda, ldt);
/////////////////////////////////////////////////////////////////////////
0:             return typeSizes.sizeof(delTime.localDeletionTime())
0:                  + typeSizes.sizeof(delTime.markedForDeleteAt());
commit:655f056
commit:b0dbea3
/////////////////////////////////////////////////////////////////////////
1:     public boolean supersedes(DeletionTime dt)
1:     {
0:         return this.markedForDeleteAt > dt.markedForDeleteAt;
1:     }
1: 
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FileUtils;
/////////////////////////////////////////////////////////////////////////
0:     public static final Serializer serializer = new Serializer();
/////////////////////////////////////////////////////////////////////////
1:     public static class Serializer implements ISerializer<DeletionTime>
/////////////////////////////////////////////////////////////////////////
0:         public void skip(DataInput in) throws IOException
1:         {
0:             FileUtils.skipBytesFully(in, 4 + 8);
1:         }
1: 
commit:6cc5094
commit:d38446a
/////////////////////////////////////////////////////////////////////////
0:         return column.mostRecentLiveChangeAt() <= markedForDeleteAt;
commit:3a005df
/////////////////////////////////////////////////////////////////////////
0:     public boolean isDeleted(Column column)
commit:4d34917
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.io.ISerializer;
1: 
0: public class DeletionTime implements Comparable<DeletionTime>
1: {
0:     public static final DeletionTime LIVE = new DeletionTime(Long.MIN_VALUE, Integer.MAX_VALUE);
1: 
0:     public final long markedForDeleteAt;
0:     public final int localDeletionTime;
1: 
0:     public static final ISerializer<DeletionTime> serializer = new Serializer();
1: 
0:     DeletionTime(long markedForDeleteAt, int localDeletionTime)
1:     {
0:         this.markedForDeleteAt = markedForDeleteAt;
0:         this.localDeletionTime = localDeletionTime;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if(!(o instanceof DeletionTime))
1:             return false;
1:         DeletionTime that = (DeletionTime)o;
0:         return markedForDeleteAt == that.markedForDeleteAt && localDeletionTime == that.localDeletionTime;
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
0:         return Objects.hashCode(markedForDeleteAt, localDeletionTime);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return String.format("deletedAt=%d, localDeletion=%d", markedForDeleteAt, localDeletionTime);
1:     }
1: 
1:     public int compareTo(DeletionTime dt)
1:     {
0:         if (markedForDeleteAt < dt.markedForDeleteAt)
1:             return -1;
0:         else if (markedForDeleteAt > dt.markedForDeleteAt)
1:             return 1;
0:         else if (localDeletionTime < dt.localDeletionTime)
1:             return -1;
0:         else if (localDeletionTime > dt.localDeletionTime)
1:             return -1;
1:         else
1:             return 0;
1:     }
1: 
0:     public boolean isGcAble(int gcBefore)
1:     {
0:         return localDeletionTime < gcBefore;
1:     }
1: 
0:     public boolean isDeleted(IColumn column)
1:     {
0:         return column.isMarkedForDelete() && column.getMarkedForDeleteAt() <= markedForDeleteAt;
1:     }
1: 
0:     private static class Serializer implements ISerializer<DeletionTime>
1:     {
0:         public void serialize(DeletionTime delTime, DataOutput out) throws IOException
1:         {
0:             out.writeInt(delTime.localDeletionTime);
0:             out.writeLong(delTime.markedForDeleteAt);
1:         }
1: 
0:         public DeletionTime deserialize(DataInput in) throws IOException
1:         {
1:             int ldt = in.readInt();
1:             long mfda = in.readLong();
0:             if (mfda == Long.MIN_VALUE && ldt == Integer.MAX_VALUE)
0:                 return LIVE;
1:             else
0:                 return new DeletionTime(mfda, ldt);
1:         }
1: 
0:         public long serializedSize(DeletionTime delTime, TypeSizes typeSizes)
1:         {
0:             return typeSizes.sizeof(delTime.localDeletionTime)
0:                  + typeSizes.sizeof(delTime.markedForDeleteAt);
1:         }
1:     }
1: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public DeletionTime deserialize(DataInputPlus in) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(DeletionTime delTime)
1:             return TypeSizes.sizeof(delTime.localDeletionTime())
1:                  + TypeSizes.sizeof(delTime.markedForDeleteAt());
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:7110d98
/////////////////////////////////////////////////////////////////////////
0: import org.codehaus.jackson.annotate.JsonIgnore;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns whether this DeletionTime is live, that is deletes no columns.
1:      */
0:     @JsonIgnore
1:     public boolean isLive()
0:     {
0:         return markedForDeleteAt == Long.MIN_VALUE && localDeletionTime == Integer.MAX_VALUE;
0:     }
0: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:6858dd3
/////////////////////////////////////////////////////////////////////////
0: import org.codehaus.jackson.annotate.JsonIgnore;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Returns whether this DeletionTime is live, that is deletes no columns.
1:      */
0:     @JsonIgnore
0:     public boolean isLive()
0:     {
0:         return markedForDeleteAt == Long.MIN_VALUE && localDeletionTime == Integer.MAX_VALUE;
0:     }
0: 
commit:8a2a0c3
/////////////////////////////////////////////////////////////////////////
0:         return atom.timestamp() <= markedForDeleteAt;
commit:1f7628c
/////////////////////////////////////////////////////////////////////////
0:     public boolean isDeleted(Column column, long now)
0:         return column.isMarkedForDelete(now) && column.getMarkedForDeleteAt() <= markedForDeleteAt;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4305bd4
commit:655ae7a
/////////////////////////////////////////////////////////////////////////
1:             return mfda == Long.MIN_VALUE && ldt == Integer.MAX_VALUE
1:                  ? LIVE
0:                  : new DeletionTime(mfda, ldt);
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cache.IMeasurableMemory;
/////////////////////////////////////////////////////////////////////////
0: public class DeletionTime implements Comparable<DeletionTime>, IMeasurableMemory
0:     private static final long EMPTY_SIZE = ObjectSizes.measure(new DeletionTime(0, 0));
0: 
/////////////////////////////////////////////////////////////////////////
1:     public long unsharedHeapSize()
1:         return EMPTY_SIZE;
commit:d53c838
commit:3edb62b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * A top-level (row) tombstone.
1:  */
1:     /**
1:      * A special DeletionTime that signifies that there is no top-level (row) tombstone.
1:      */
1:     /**
1:      * A timestamp (typically in microseconds since the unix epoch, although this is not enforced) after which
1:      * data should be considered deleted. If set to Long.MIN_VALUE, this implies that the data has not been marked
1:      * for deletion at all.
1:      */
0: 
1:     /**
1:      * The local server timestamp, in seconds since the unix epoch, at which this tombstone was created. This is
1:      * only used for purposes of purging the tombstone after gc_grace_seconds have elapsed.
1:      */
commit:58bcdd4
/////////////////////////////////////////////////////////////////////////
0:     public boolean isDeleted(OnDiskAtom atom)
0:         return atom.maxTimestamp() <= markedForDeleteAt;
commit:c48acd9
commit:573ddbf
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.annotations.VisibleForTesting;
/////////////////////////////////////////////////////////////////////////
0:     @VisibleForTesting
0:     public DeletionTime(long markedForDeleteAt, int localDeletionTime)
commit:7746225
/////////////////////////////////////////////////////////////////////////
0:     DeletionTime(long markedForDeleteAt, int localDeletionTime)
commit:317ab72
/////////////////////////////////////////////////////////////////////////
0:     public DeletionTime(long markedForDeleteAt, int localDeletionTime)
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(DeletionTime delTime, DataOutputPlus out) throws IOException
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:7a6fbc1
commit:da93a1c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ObjectSizes;
/////////////////////////////////////////////////////////////////////////
0:     public long memorySize()
0:     {
0:         long fields = TypeSizes.NATIVE.sizeof(markedForDeleteAt) + TypeSizes.NATIVE.sizeof(localDeletionTime);
0:         return ObjectSizes.getFieldSize(fields);
0:     }
0: 
============================================================================