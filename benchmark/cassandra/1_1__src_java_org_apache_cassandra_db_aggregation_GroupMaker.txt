1:4205011: /*
1:4205011:  * Licensed to the Apache Software Foundation (ASF) under one
1:4205011:  * or more contributor license agreements.  See the NOTICE file
1:4205011:  * distributed with this work for additional information
1:4205011:  * regarding copyright ownership.  The ASF licenses this file
1:4205011:  * to you under the Apache License, Version 2.0 (the
1:4205011:  * "License"); you may not use this file except in compliance
1:4205011:  * with the License.  You may obtain a copy of the License at
1:4205011:  *
1:4205011:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4205011:  *
1:4205011:  * Unless required by applicable law or agreed to in writing, software
1:4205011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4205011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4205011:  * See the License for the specific language governing permissions and
1:4205011:  * limitations under the License.
1:4205011:  */
1:4205011: package org.apache.cassandra.db.aggregation;
1:4205011: 
1:4205011: import java.nio.ByteBuffer;
1:4205011: import java.util.Arrays;
1:4205011: 
1:4205011: import org.apache.cassandra.db.Clustering;
1:4205011: import org.apache.cassandra.db.ClusteringComparator;
1:4205011: import org.apache.cassandra.db.DecoratedKey;
1:4205011: import org.apache.cassandra.utils.ByteBufferUtil;
1:4205011: 
1:4205011: /**
1:4205011:  * A <code>GroupMaker</code> can be used to determine if some sorted rows belongs to the same group or not.
1:4205011:  */
1:4205011: public abstract class GroupMaker
1:4205011: {
1:4205011:     /**
1:4205011:      * <code>GroupMaker</code> that groups all the rows together.
1:4205011:      */
1:4205011:     public static final GroupMaker GROUP_EVERYTHING = new GroupMaker()
1:4205011:     {
1:4205011:         public boolean isNewGroup(DecoratedKey partitionKey, Clustering clustering)
1:4205011:         {
1:4205011:             return false;
1:4205011:         }
1:4205011: 
1:4205011:         public boolean returnAtLeastOneRow()
1:4205011:         {
1:4205011:             return true;
1:4205011:         }
1:4205011:     };
1:4205011: 
1:4205011:     public static GroupMaker newInstance(ClusteringComparator comparator, int clusteringPrefixSize, GroupingState state)
1:4205011:     {
1:4205011:         return new PkPrefixGroupMaker(comparator, clusteringPrefixSize, state);
1:4205011:     }
1:4205011: 
1:4205011:     public static GroupMaker newInstance(ClusteringComparator comparator, int clusteringPrefixSize)
1:4205011:     {
1:4205011:         return new PkPrefixGroupMaker(comparator, clusteringPrefixSize);
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Checks if a given row belongs to the same group that the previous row or not.
1:4205011:      *
1:4205011:      * @param partitionKey the partition key.
1:4205011:      * @param clustering the row clustering key
1:4205011:      * @return <code>true</code> if the row belongs to the same group that the previous one, <code>false</code>
1:4205011:      * otherwise.
1:4205011:      */
1:4205011:     public abstract boolean isNewGroup(DecoratedKey partitionKey, Clustering clustering);
1:4205011: 
1:4205011:     /**
1:4205011:      * Specify if at least one row must be returned. If the selection is performing some aggregations on all the rows,
1:4205011:      * one row should be returned even if no records were processed.
1:4205011:      *
1:4205011:      * @return <code>true</code> if at least one row must be returned, <code>false</code> otherwise.
1:4205011:      */
1:4205011:     public boolean returnAtLeastOneRow()
1:4205011:     {
1:4205011:         return false;
1:4205011:     }
1:4205011: 
1:4205011:     private static final class PkPrefixGroupMaker extends GroupMaker
1:4205011:     {
1:4205011:         /**
1:4205011:          * The size of the clustering prefix used to make the groups
1:4205011:          */
1:4205011:         private final int clusteringPrefixSize;
1:4205011: 
1:4205011:         /**
1:4205011:          * The comparator used to compare the clustering prefixes.
1:4205011:          */
1:4205011:         private final ClusteringComparator comparator;
1:4205011: 
1:4205011:         /**
1:4205011:          * The last partition key seen
1:4205011:          */
1:4205011:         private ByteBuffer lastPartitionKey;
1:4205011: 
1:4205011:         /**
1:4205011:          * The last clustering seen
1:4205011:          */
1:4205011:         private Clustering lastClustering;
1:4205011: 
1:4205011:         public PkPrefixGroupMaker(ClusteringComparator comparator, int clusteringPrefixSize, GroupingState state)
1:4205011:         {
1:4205011:             this(comparator, clusteringPrefixSize);
1:4205011:             this.lastPartitionKey = state.partitionKey();
1:4205011:             this.lastClustering = state.clustering;
1:4205011:         }
1:4205011: 
1:4205011:         public PkPrefixGroupMaker(ClusteringComparator comparator, int clusteringPrefixSize)
1:4205011:         {
1:4205011:             this.comparator = comparator;
1:4205011:             this.clusteringPrefixSize = clusteringPrefixSize;
1:4205011:         }
1:4205011: 
1:4205011:         @Override
1:4205011:         public boolean isNewGroup(DecoratedKey partitionKey, Clustering clustering)
1:4205011:         {
1:4205011:             boolean isNew = false;
1:4205011: 
1:4205011:             // We are entering a new group if:
1:4205011:             // - the partition key is a new one
1:4205011:             // - the last clustering was not null and does not have the same prefix as the new clustering one
1:4205011:             if (!partitionKey.getKey().equals(lastPartitionKey))
1:4205011:             {
1:4205011:                 lastPartitionKey = partitionKey.getKey();
1:4205011:                 isNew = true;
1:4205011:                 if (Clustering.STATIC_CLUSTERING == clustering)
1:4205011:                 {
1:4205011:                     lastClustering = null;
1:4205011:                     return true;
1:4205011:                 }
1:4205011:             }
1:4205011:             else if (lastClustering != null && comparator.compare(lastClustering, clustering, clusteringPrefixSize) != 0)
1:4205011:             {
1:4205011:                 isNew = true;
1:4205011:             }
1:4205011: 
1:4205011:             lastClustering = clustering;
1:4205011:             return isNew;
1:4205011:         }
1:4205011:     }
1:4205011: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.aggregation;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: 
1: import org.apache.cassandra.db.Clustering;
1: import org.apache.cassandra.db.ClusteringComparator;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * A <code>GroupMaker</code> can be used to determine if some sorted rows belongs to the same group or not.
1:  */
1: public abstract class GroupMaker
1: {
1:     /**
1:      * <code>GroupMaker</code> that groups all the rows together.
1:      */
1:     public static final GroupMaker GROUP_EVERYTHING = new GroupMaker()
1:     {
1:         public boolean isNewGroup(DecoratedKey partitionKey, Clustering clustering)
1:         {
1:             return false;
1:         }
1: 
1:         public boolean returnAtLeastOneRow()
1:         {
1:             return true;
1:         }
1:     };
1: 
1:     public static GroupMaker newInstance(ClusteringComparator comparator, int clusteringPrefixSize, GroupingState state)
1:     {
1:         return new PkPrefixGroupMaker(comparator, clusteringPrefixSize, state);
1:     }
1: 
1:     public static GroupMaker newInstance(ClusteringComparator comparator, int clusteringPrefixSize)
1:     {
1:         return new PkPrefixGroupMaker(comparator, clusteringPrefixSize);
1:     }
1: 
1:     /**
1:      * Checks if a given row belongs to the same group that the previous row or not.
1:      *
1:      * @param partitionKey the partition key.
1:      * @param clustering the row clustering key
1:      * @return <code>true</code> if the row belongs to the same group that the previous one, <code>false</code>
1:      * otherwise.
1:      */
1:     public abstract boolean isNewGroup(DecoratedKey partitionKey, Clustering clustering);
1: 
1:     /**
1:      * Specify if at least one row must be returned. If the selection is performing some aggregations on all the rows,
1:      * one row should be returned even if no records were processed.
1:      *
1:      * @return <code>true</code> if at least one row must be returned, <code>false</code> otherwise.
1:      */
1:     public boolean returnAtLeastOneRow()
1:     {
1:         return false;
1:     }
1: 
1:     private static final class PkPrefixGroupMaker extends GroupMaker
1:     {
1:         /**
1:          * The size of the clustering prefix used to make the groups
1:          */
1:         private final int clusteringPrefixSize;
1: 
1:         /**
1:          * The comparator used to compare the clustering prefixes.
1:          */
1:         private final ClusteringComparator comparator;
1: 
1:         /**
1:          * The last partition key seen
1:          */
1:         private ByteBuffer lastPartitionKey;
1: 
1:         /**
1:          * The last clustering seen
1:          */
1:         private Clustering lastClustering;
1: 
1:         public PkPrefixGroupMaker(ClusteringComparator comparator, int clusteringPrefixSize, GroupingState state)
1:         {
1:             this(comparator, clusteringPrefixSize);
1:             this.lastPartitionKey = state.partitionKey();
1:             this.lastClustering = state.clustering;
1:         }
1: 
1:         public PkPrefixGroupMaker(ClusteringComparator comparator, int clusteringPrefixSize)
1:         {
1:             this.comparator = comparator;
1:             this.clusteringPrefixSize = clusteringPrefixSize;
1:         }
1: 
1:         @Override
1:         public boolean isNewGroup(DecoratedKey partitionKey, Clustering clustering)
1:         {
1:             boolean isNew = false;
1: 
1:             // We are entering a new group if:
1:             // - the partition key is a new one
1:             // - the last clustering was not null and does not have the same prefix as the new clustering one
1:             if (!partitionKey.getKey().equals(lastPartitionKey))
1:             {
1:                 lastPartitionKey = partitionKey.getKey();
1:                 isNew = true;
1:                 if (Clustering.STATIC_CLUSTERING == clustering)
1:                 {
1:                     lastClustering = null;
1:                     return true;
1:                 }
1:             }
1:             else if (lastClustering != null && comparator.compare(lastClustering, clustering, clusteringPrefixSize) != 0)
1:             {
1:                 isNew = true;
1:             }
1: 
1:             lastClustering = clustering;
1:             return isNew;
1:         }
1:     }
1: }
============================================================================