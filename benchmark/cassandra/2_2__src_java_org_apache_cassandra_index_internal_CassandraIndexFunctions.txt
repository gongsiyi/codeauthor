1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: 
1:0626be8: package org.apache.cassandra.index.internal;
1:0626be8: 
1:0626be8: import java.util.List;
1:0626be8: 
1:0626be8: import org.apache.cassandra.config.CFMetaData;
1:0626be8: import org.apache.cassandra.config.ColumnDefinition;
1:0626be8: import org.apache.cassandra.db.ColumnFamilyStore;
1:0626be8: import org.apache.cassandra.db.marshal.AbstractType;
1:0626be8: import org.apache.cassandra.db.marshal.CollectionType;
1:0626be8: import org.apache.cassandra.db.marshal.CompositeType;
1:0626be8: import org.apache.cassandra.index.internal.composites.*;
1:0626be8: import org.apache.cassandra.index.internal.keys.KeysIndex;
1:0626be8: import org.apache.cassandra.schema.IndexMetadata;
1:0626be8: 
1:0626be8: public interface CassandraIndexFunctions
1:0626be8: {
1:0626be8:     /**
1:0626be8:      *
1:0626be8:      * @param baseCfs
1:0626be8:      * @param indexMetadata
1:0626be8:      * @return
1:0626be8:      */
1:0626be8:     public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata);
1:0626be8: 
1:0626be8:     /**
1:0626be8:      * Returns the type of the the values in the index. For most columns this is simply its type, but for collections
1:0626be8:      * it depends on whether the index is on the collection name/value element or on a frozen collection
1:0626be8:      * @param indexedColumn
1:0626be8:      * @return
1:0626be8:      */
1:0626be8:     default AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:0626be8:     {
1:0626be8:         return indexedColumn.type;
1:0626be8:     }
1:0626be8: 
1:0626be8:     /**
1:0626be8:      * Add the clustering columns for a specific type of index table to the a CFMetaData.Builder (which is being
1:0626be8:      * used to construct the index table's CFMetadata. In the default implementation, the clustering columns of the
1:6b7db8a:      * index table hold the partition key and clustering columns of the base table. This is overridden in several cases:
1:0626be8:      * * When the indexed value is itself a clustering column, in which case, we only need store the base table's
1:0626be8:      *   *other* clustering values in the index - the indexed value being the index table's partition key
1:0626be8:      * * When the indexed value is a collection value, in which case we also need to capture the cell path from the base
1:0626be8:      *   table
1:0626be8:      * * In a KEYS index (for thrift/compact storage/static column indexes), where only the base partition key is
1:0626be8:      *   held in the index table.
1:0626be8:      *
1:0626be8:      * Called from indexCfsMetadata
1:0626be8:      * @param builder
1:0626be8:      * @param baseMetadata
1:0626be8:      * @param cfDef
1:0626be8:      * @return
1:0626be8:      */
1:0626be8:     default CFMetaData.Builder addIndexClusteringColumns(CFMetaData.Builder builder,
1:0626be8:                                                          CFMetaData baseMetadata,
1:0626be8:                                                          ColumnDefinition cfDef)
1:0626be8:     {
1:0626be8:         for (ColumnDefinition def : baseMetadata.clusteringColumns())
1:0626be8:             builder.addClusteringColumn(def.name, def.type);
1:0626be8:         return builder;
1:0626be8:     }
1:0626be8: 
1:0626be8:     /*
1:0626be8:      * implementations providing specializations for the built in index types
1:0626be8:      */
1:0626be8: 
1:0626be8:     static final CassandraIndexFunctions KEYS_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:0626be8:     {
1:0626be8:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:0626be8:         {
1:0626be8:             return new KeysIndex(baseCfs, indexMetadata);
1:0626be8:         }
1:0626be8:     };
1:0626be8: 
1:0626be8:     static final CassandraIndexFunctions REGULAR_COLUMN_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:0626be8:     {
1:0626be8:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:0626be8:         {
1:0626be8:             return new RegularColumnIndex(baseCfs, indexMetadata);
1:0626be8:         }
1:0626be8:     };
1:0626be8: 
1:0626be8:     static final CassandraIndexFunctions CLUSTERING_COLUMN_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:0626be8:     {
1:0626be8:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:0626be8:         {
1:0626be8:             return new ClusteringColumnIndex(baseCfs, indexMetadata);
1:0626be8:         }
1:0626be8: 
1:0626be8:         public CFMetaData.Builder addIndexClusteringColumns(CFMetaData.Builder builder,
1:0626be8:                                                             CFMetaData baseMetadata,
1:0626be8:                                                             ColumnDefinition columnDef)
1:0626be8:         {
1:0626be8:             List<ColumnDefinition> cks = baseMetadata.clusteringColumns();
1:0626be8:             for (int i = 0; i < columnDef.position(); i++)
1:0626be8:             {
1:0626be8:                 ColumnDefinition def = cks.get(i);
1:0626be8:                 builder.addClusteringColumn(def.name, def.type);
1:0626be8:             }
1:0626be8:             for (int i = columnDef.position() + 1; i < cks.size(); i++)
1:0626be8:             {
1:0626be8:                 ColumnDefinition def = cks.get(i);
1:0626be8:                 builder.addClusteringColumn(def.name, def.type);
1:0626be8:             }
1:0626be8:             return builder;
1:0626be8:         }
1:0626be8:     };
1:0626be8: 
1:0626be8:     static final CassandraIndexFunctions PARTITION_KEY_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:0626be8:     {
1:0626be8:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:0626be8:         {
1:0626be8:             return new PartitionKeyIndex(baseCfs, indexMetadata);
1:0626be8:         }
1:0626be8:     };
1:0626be8: 
1:0626be8:     static final CassandraIndexFunctions COLLECTION_KEY_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:0626be8:     {
1:0626be8:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:0626be8:         {
1:0626be8:             return new CollectionKeyIndex(baseCfs, indexMetadata);
1:0626be8:         }
1:0626be8: 
1:0626be8:         public AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:0626be8:         {
1:0626be8:             return ((CollectionType) indexedColumn.type).nameComparator();
1:0626be8:         }
1:0626be8:     };
1:0626be8: 
1:0626be8:     static final CassandraIndexFunctions COLLECTION_VALUE_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:0626be8:     {
1:0626be8: 
1:0626be8:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:0626be8:         {
1:0626be8:             return new CollectionValueIndex(baseCfs, indexMetadata);
1:0626be8:         }
1:0626be8: 
1:0626be8:         public AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:0626be8:         {
1:0626be8:             return ((CollectionType)indexedColumn.type).valueComparator();
1:0626be8:         }
1:0626be8: 
1:0626be8:         public CFMetaData.Builder addIndexClusteringColumns(CFMetaData.Builder builder,
1:0626be8:                                                             CFMetaData baseMetadata,
1:0626be8:                                                             ColumnDefinition columnDef)
1:0626be8:         {
1:0626be8:             for (ColumnDefinition def : baseMetadata.clusteringColumns())
1:0626be8:                 builder.addClusteringColumn(def.name, def.type);
1:0626be8: 
1:0626be8:             // collection key
1:0626be8:             builder.addClusteringColumn("cell_path", ((CollectionType)columnDef.type).nameComparator());
1:0626be8:             return builder;
1:0626be8:         }
1:0626be8:     };
1:0626be8: 
1:0626be8:     static final CassandraIndexFunctions COLLECTION_ENTRY_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:0626be8:     {
1:0626be8:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:0626be8:         {
1:0626be8:             return new CollectionEntryIndex(baseCfs, indexMetadata);
1:0626be8:         }
1:0626be8: 
1:0626be8:         public AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:0626be8:         {
1:0626be8:             CollectionType colType = (CollectionType)indexedColumn.type;
1:0626be8:             return CompositeType.getInstance(colType.nameComparator(), colType.valueComparator());
1:0626be8:         }
1:0626be8:     };
1:0626be8: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:      * index table hold the partition key and clustering columns of the base table. This is overridden in several cases:
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.internal;
1: 
1: import java.util.List;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.CollectionType;
1: import org.apache.cassandra.db.marshal.CompositeType;
1: import org.apache.cassandra.index.internal.composites.*;
1: import org.apache.cassandra.index.internal.keys.KeysIndex;
1: import org.apache.cassandra.schema.IndexMetadata;
1: 
1: public interface CassandraIndexFunctions
1: {
1:     /**
1:      *
1:      * @param baseCfs
1:      * @param indexMetadata
1:      * @return
1:      */
1:     public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata);
1: 
1:     /**
1:      * Returns the type of the the values in the index. For most columns this is simply its type, but for collections
1:      * it depends on whether the index is on the collection name/value element or on a frozen collection
1:      * @param indexedColumn
1:      * @return
1:      */
1:     default AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:     {
1:         return indexedColumn.type;
1:     }
1: 
1:     /**
1:      * Add the clustering columns for a specific type of index table to the a CFMetaData.Builder (which is being
1:      * used to construct the index table's CFMetadata. In the default implementation, the clustering columns of the
0:      * index table hold the partition key & clustering columns of the base table. This is overridden in several cases:
1:      * * When the indexed value is itself a clustering column, in which case, we only need store the base table's
1:      *   *other* clustering values in the index - the indexed value being the index table's partition key
1:      * * When the indexed value is a collection value, in which case we also need to capture the cell path from the base
1:      *   table
1:      * * In a KEYS index (for thrift/compact storage/static column indexes), where only the base partition key is
1:      *   held in the index table.
1:      *
1:      * Called from indexCfsMetadata
1:      * @param builder
1:      * @param baseMetadata
1:      * @param cfDef
1:      * @return
1:      */
1:     default CFMetaData.Builder addIndexClusteringColumns(CFMetaData.Builder builder,
1:                                                          CFMetaData baseMetadata,
1:                                                          ColumnDefinition cfDef)
1:     {
1:         for (ColumnDefinition def : baseMetadata.clusteringColumns())
1:             builder.addClusteringColumn(def.name, def.type);
1:         return builder;
1:     }
1: 
1:     /*
1:      * implementations providing specializations for the built in index types
1:      */
1: 
1:     static final CassandraIndexFunctions KEYS_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:     {
1:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:         {
1:             return new KeysIndex(baseCfs, indexMetadata);
1:         }
1:     };
1: 
1:     static final CassandraIndexFunctions REGULAR_COLUMN_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:     {
1:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:         {
1:             return new RegularColumnIndex(baseCfs, indexMetadata);
1:         }
1:     };
1: 
1:     static final CassandraIndexFunctions CLUSTERING_COLUMN_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:     {
1:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:         {
1:             return new ClusteringColumnIndex(baseCfs, indexMetadata);
1:         }
1: 
1:         public CFMetaData.Builder addIndexClusteringColumns(CFMetaData.Builder builder,
1:                                                             CFMetaData baseMetadata,
1:                                                             ColumnDefinition columnDef)
1:         {
1:             List<ColumnDefinition> cks = baseMetadata.clusteringColumns();
1:             for (int i = 0; i < columnDef.position(); i++)
1:             {
1:                 ColumnDefinition def = cks.get(i);
1:                 builder.addClusteringColumn(def.name, def.type);
1:             }
1:             for (int i = columnDef.position() + 1; i < cks.size(); i++)
1:             {
1:                 ColumnDefinition def = cks.get(i);
1:                 builder.addClusteringColumn(def.name, def.type);
1:             }
1:             return builder;
1:         }
1:     };
1: 
1:     static final CassandraIndexFunctions PARTITION_KEY_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:     {
1:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:         {
1:             return new PartitionKeyIndex(baseCfs, indexMetadata);
1:         }
1:     };
1: 
1:     static final CassandraIndexFunctions COLLECTION_KEY_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:     {
1:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:         {
1:             return new CollectionKeyIndex(baseCfs, indexMetadata);
1:         }
1: 
1:         public AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:         {
1:             return ((CollectionType) indexedColumn.type).nameComparator();
1:         }
1:     };
1: 
1:     static final CassandraIndexFunctions COLLECTION_VALUE_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:     {
1: 
1:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:         {
1:             return new CollectionValueIndex(baseCfs, indexMetadata);
1:         }
1: 
1:         public AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:         {
1:             return ((CollectionType)indexedColumn.type).valueComparator();
1:         }
1: 
1:         public CFMetaData.Builder addIndexClusteringColumns(CFMetaData.Builder builder,
1:                                                             CFMetaData baseMetadata,
1:                                                             ColumnDefinition columnDef)
1:         {
1:             for (ColumnDefinition def : baseMetadata.clusteringColumns())
1:                 builder.addClusteringColumn(def.name, def.type);
1: 
1:             // collection key
1:             builder.addClusteringColumn("cell_path", ((CollectionType)columnDef.type).nameComparator());
1:             return builder;
1:         }
1:     };
1: 
1:     static final CassandraIndexFunctions COLLECTION_ENTRY_INDEX_FUNCTIONS = new CassandraIndexFunctions()
1:     {
1:         public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs, IndexMetadata indexMetadata)
1:         {
1:             return new CollectionEntryIndex(baseCfs, indexMetadata);
1:         }
1: 
1:         public AbstractType<?> getIndexedValueType(ColumnDefinition indexedColumn)
1:         {
1:             CollectionType colType = (CollectionType)indexedColumn.type;
1:             return CompositeType.getInstance(colType.nameComparator(), colType.valueComparator());
1:         }
1:     };
1: }
============================================================================