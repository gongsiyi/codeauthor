1:a7895cf: /*
1:a7895cf:  * Licensed to the Apache Software Foundation (ASF) under one
1:a7895cf:  * or more contributor license agreements.  See the NOTICE file
1:a7895cf:  * distributed with this work for additional information
1:a7895cf:  * regarding copyright ownership.  The ASF licenses this file
1:a7895cf:  * to you under the Apache License, Version 2.0 (the
1:a7895cf:  * "License"); you may not use this file except in compliance
1:a7895cf:  * with the License.  You may obtain a copy of the License at
1:a7895cf:  *
1:a7895cf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a7895cf:  *
1:a7895cf:  * Unless required by applicable law or agreed to in writing, software
1:a7895cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a7895cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a7895cf:  * See the License for the specific language governing permissions and
1:a7895cf:  * limitations under the License.
1:a7895cf:  */
1:a7895cf: package org.apache.cassandra.service;
1:a7895cf: 
1:a7895cf: import java.util.Arrays;
1:a7895cf: import java.util.function.Consumer;
1:a7895cf: import java.util.function.Supplier;
1:a7895cf: import java.util.stream.Collectors;
1:a7895cf: import java.util.stream.IntStream;
1:a7895cf: 
1:a7895cf: import com.google.common.collect.Sets;
1:a7895cf: import org.junit.After;
1:9797511: import org.junit.BeforeClass;
1:a7895cf: import org.junit.Test;
1:a7895cf: 
1:a7895cf: import org.apache.cassandra.config.DatabaseDescriptor;
1:a7895cf: import org.apache.cassandra.transport.Server;
1:a7895cf: import org.apache.cassandra.utils.Pair;
1:a7895cf: 
1:a7895cf: import static org.junit.Assert.assertEquals;
1:a7895cf: import static org.junit.Assert.assertFalse;
1:a7895cf: import static org.junit.Assert.assertTrue;
1:a7895cf: 
1:a7895cf: public class NativeTransportServiceTest
1:a7895cf: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:a7895cf: 
1:a7895cf:     @After
1:a7895cf:     public void resetConfig()
1:a7895cf:     {
1:a7895cf:         DatabaseDescriptor.getClientEncryptionOptions().enabled = false;
1:a7895cf:         DatabaseDescriptor.setNativeTransportPortSSL(null);
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testServiceCanBeStopped()
1:a7895cf:     {
1:a7895cf:         withService((NativeTransportService service) -> {
1:a7895cf:             service.stop();
1:a7895cf:             assertFalse(service.isRunning());
1:a7895cf:         });
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testIgnoresStartOnAlreadyStarted()
1:a7895cf:     {
1:a7895cf:         withService((NativeTransportService service) -> {
1:a7895cf:             service.start();
1:a7895cf:             service.start();
1:a7895cf:             service.start();
1:a7895cf:         });
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testIgnoresStoppedOnAlreadyStopped()
1:a7895cf:     {
1:a7895cf:         withService((NativeTransportService service) -> {
1:a7895cf:             service.stop();
1:a7895cf:             service.stop();
1:a7895cf:             service.stop();
1:a7895cf:         });
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testDestroy()
1:a7895cf:     {
1:a7895cf:         withService((NativeTransportService service) -> {
1:a7895cf:             Supplier<Boolean> allTerminated = () ->
1:a7895cf:                                               service.getWorkerGroup().isShutdown() && service.getWorkerGroup().isTerminated() &&
1:a7895cf:                                               service.getEventExecutor().isShutdown() && service.getEventExecutor().isTerminated();
1:a7895cf:             assertFalse(allTerminated.get());
1:a7895cf:             service.destroy();
1:a7895cf:             assertTrue(allTerminated.get());
1:a7895cf:         });
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testConcurrentStarts()
1:a7895cf:     {
1:a7895cf:         withService(NativeTransportService::start, false, 20);
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testConcurrentStops()
1:a7895cf:     {
1:a7895cf:         withService(NativeTransportService::stop, true, 20);
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testConcurrentDestroys()
1:a7895cf:     {
1:a7895cf:         withService(NativeTransportService::destroy, true, 20);
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testPlainDefaultPort()
1:a7895cf:     {
1:a7895cf:         // default plain settings: client encryption disabled and default native transport port 
1:a7895cf:         withService((NativeTransportService service) ->
1:a7895cf:                     {
1:a7895cf:                         assertEquals(1, service.getServers().size());
1:a7895cf:                         Server server = service.getServers().iterator().next();
1:a7895cf:                         assertFalse(server.useSSL);
1:a7895cf:                         assertEquals(server.socket.getPort(), DatabaseDescriptor.getNativeTransportPort());
1:a7895cf:                     });
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testSSLOnly()
1:a7895cf:     {
1:a7895cf:         // default ssl settings: client encryption enabled and default native transport port used for ssl only
1:a7895cf:         DatabaseDescriptor.getClientEncryptionOptions().enabled = true;
1:535c3ac:         DatabaseDescriptor.getClientEncryptionOptions().optional = false;
1:535c3ac: 
1:535c3ac:         withService((NativeTransportService service) ->
1:535c3ac:                     {
1:535c3ac:                         service.initialize();
1:535c3ac:                         assertEquals(1, service.getServers().size());
1:535c3ac:                         Server server = service.getServers().iterator().next();
1:535c3ac:                         assertTrue(server.useSSL);
1:535c3ac:                         assertEquals(server.socket.getPort(), DatabaseDescriptor.getNativeTransportPort());
1:535c3ac:                     }, false, 1);
1:535c3ac:     }
1:535c3ac: 
1:535c3ac:     @Test
1:535c3ac:     public void testSSLOptional()
1:535c3ac:     {
1:535c3ac:         // default ssl settings: client encryption enabled and default native transport port used for optional ssl
1:535c3ac:         DatabaseDescriptor.getClientEncryptionOptions().enabled = true;
1:535c3ac:         DatabaseDescriptor.getClientEncryptionOptions().optional = true;
1:a7895cf: 
1:a7895cf:         withService((NativeTransportService service) ->
1:a7895cf:                     {
1:a7895cf:                         service.initialize();
1:a7895cf:                         assertEquals(1, service.getServers().size());
1:a7895cf:                         Server server = service.getServers().iterator().next();
1:a7895cf:                         assertTrue(server.useSSL);
1:a7895cf:                         assertEquals(server.socket.getPort(), DatabaseDescriptor.getNativeTransportPort());
1:a7895cf:                     }, false, 1);
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     @Test
1:a7895cf:     public void testSSLWithNonSSL()
1:a7895cf:     {
1:a7895cf:         // ssl+non-ssl settings: client encryption enabled and additional ssl port specified
1:a7895cf:         DatabaseDescriptor.getClientEncryptionOptions().enabled = true;
1:a7895cf:         DatabaseDescriptor.setNativeTransportPortSSL(8432);
1:a7895cf: 
1:a7895cf:         withService((NativeTransportService service) ->
1:a7895cf:                     {
1:a7895cf:                         service.initialize();
1:a7895cf:                         assertEquals(2, service.getServers().size());
1:a7895cf:                         assertEquals(
1:a7895cf:                                     Sets.newHashSet(Arrays.asList(
1:a7895cf:                                                                  Pair.create(true, DatabaseDescriptor.getNativeTransportPortSSL()),
1:a7895cf:                                                                  Pair.create(false, DatabaseDescriptor.getNativeTransportPort())
1:a7895cf:                                                     )
1:a7895cf:                                     ),
1:a7895cf:                                     service.getServers().stream().map((Server s) ->
1:a7895cf:                                                                       Pair.create(s.useSSL, s.socket.getPort())).collect(Collectors.toSet())
1:a7895cf:                         );
1:a7895cf:                     }, false, 1);
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     private static void withService(Consumer<NativeTransportService> f)
1:a7895cf:     {
1:a7895cf:         withService(f, true, 1);
1:a7895cf:     }
1:a7895cf: 
1:a7895cf:     private static void withService(Consumer<NativeTransportService> f, boolean start, int concurrently)
1:a7895cf:     {
1:a7895cf:         NativeTransportService service = new NativeTransportService();
1:a7895cf:         assertFalse(service.isRunning());
1:a7895cf:         if (start)
1:a7895cf:         {
1:a7895cf:             service.start();
1:a7895cf:             assertTrue(service.isRunning());
1:a7895cf:         }
1:a7895cf:         try
1:a7895cf:         {
1:a7895cf:             if (concurrently == 1)
1:a7895cf:             {
1:a7895cf:                 f.accept(service);
1:a7895cf:             }
1:a7895cf:             else
1:a7895cf:             {
1:a7895cf:                 IntStream.range(0, concurrently).parallel().map((int i) -> {
1:a7895cf:                     f.accept(service);
1:a7895cf:                     return 1;
1:a7895cf:                 }).sum();
1:a7895cf:             }
1:a7895cf:         }
1:a7895cf:         finally
1:a7895cf:         {
1:a7895cf:             service.stop();
1:a7895cf:         }
1:a7895cf:     }
1:a7895cf: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
author:Norman Maurer
-------------------------------------------------------------------------------
commit:535c3ac
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.getClientEncryptionOptions().optional = false;
1: 
1:         withService((NativeTransportService service) ->
1:                     {
1:                         service.initialize();
1:                         assertEquals(1, service.getServers().size());
1:                         Server server = service.getServers().iterator().next();
1:                         assertTrue(server.useSSL);
1:                         assertEquals(server.socket.getPort(), DatabaseDescriptor.getNativeTransportPort());
1:                     }, false, 1);
1:     }
1: 
1:     @Test
1:     public void testSSLOptional()
1:     {
1:         // default ssl settings: client encryption enabled and default native transport port used for optional ssl
1:         DatabaseDescriptor.getClientEncryptionOptions().enabled = true;
1:         DatabaseDescriptor.getClientEncryptionOptions().optional = true;
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:a7895cf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service;
1: 
1: import java.util.Arrays;
1: import java.util.function.Consumer;
1: import java.util.function.Supplier;
1: import java.util.stream.Collectors;
1: import java.util.stream.IntStream;
1: 
1: import com.google.common.collect.Sets;
1: import org.junit.After;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.transport.Server;
1: import org.apache.cassandra.utils.Pair;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class NativeTransportServiceTest
1: {
1: 
1:     @After
1:     public void resetConfig()
1:     {
1:         DatabaseDescriptor.getClientEncryptionOptions().enabled = false;
1:         DatabaseDescriptor.setNativeTransportPortSSL(null);
1:     }
1: 
1:     @Test
1:     public void testServiceCanBeStopped()
1:     {
1:         withService((NativeTransportService service) -> {
1:             service.stop();
1:             assertFalse(service.isRunning());
1:         });
1:     }
1: 
1:     @Test
1:     public void testIgnoresStartOnAlreadyStarted()
1:     {
1:         withService((NativeTransportService service) -> {
1:             service.start();
1:             service.start();
1:             service.start();
1:         });
1:     }
1: 
1:     @Test
1:     public void testIgnoresStoppedOnAlreadyStopped()
1:     {
1:         withService((NativeTransportService service) -> {
1:             service.stop();
1:             service.stop();
1:             service.stop();
1:         });
1:     }
1: 
1:     @Test
1:     public void testDestroy()
1:     {
1:         withService((NativeTransportService service) -> {
1:             Supplier<Boolean> allTerminated = () ->
1:                                               service.getWorkerGroup().isShutdown() && service.getWorkerGroup().isTerminated() &&
1:                                               service.getEventExecutor().isShutdown() && service.getEventExecutor().isTerminated();
1:             assertFalse(allTerminated.get());
1:             service.destroy();
1:             assertTrue(allTerminated.get());
1:         });
1:     }
1: 
1:     @Test
1:     public void testConcurrentStarts()
1:     {
1:         withService(NativeTransportService::start, false, 20);
1:     }
1: 
1:     @Test
1:     public void testConcurrentStops()
1:     {
1:         withService(NativeTransportService::stop, true, 20);
1:     }
1: 
1:     @Test
1:     public void testConcurrentDestroys()
1:     {
1:         withService(NativeTransportService::destroy, true, 20);
1:     }
1: 
1:     @Test
1:     public void testPlainDefaultPort()
1:     {
1:         // default plain settings: client encryption disabled and default native transport port 
1:         withService((NativeTransportService service) ->
1:                     {
1:                         assertEquals(1, service.getServers().size());
1:                         Server server = service.getServers().iterator().next();
1:                         assertFalse(server.useSSL);
1:                         assertEquals(server.socket.getPort(), DatabaseDescriptor.getNativeTransportPort());
1:                     });
1:     }
1: 
1:     @Test
1:     public void testSSLOnly()
1:     {
1:         // default ssl settings: client encryption enabled and default native transport port used for ssl only
1:         DatabaseDescriptor.getClientEncryptionOptions().enabled = true;
1: 
1:         withService((NativeTransportService service) ->
1:                     {
1:                         service.initialize();
1:                         assertEquals(1, service.getServers().size());
1:                         Server server = service.getServers().iterator().next();
1:                         assertTrue(server.useSSL);
1:                         assertEquals(server.socket.getPort(), DatabaseDescriptor.getNativeTransportPort());
1:                     }, false, 1);
1:     }
1: 
1:     @Test
1:     public void testSSLWithNonSSL()
1:     {
1:         // ssl+non-ssl settings: client encryption enabled and additional ssl port specified
1:         DatabaseDescriptor.getClientEncryptionOptions().enabled = true;
1:         DatabaseDescriptor.setNativeTransportPortSSL(8432);
1: 
1:         withService((NativeTransportService service) ->
1:                     {
1:                         service.initialize();
1:                         assertEquals(2, service.getServers().size());
1:                         assertEquals(
1:                                     Sets.newHashSet(Arrays.asList(
1:                                                                  Pair.create(true, DatabaseDescriptor.getNativeTransportPortSSL()),
1:                                                                  Pair.create(false, DatabaseDescriptor.getNativeTransportPort())
1:                                                     )
1:                                     ),
1:                                     service.getServers().stream().map((Server s) ->
1:                                                                       Pair.create(s.useSSL, s.socket.getPort())).collect(Collectors.toSet())
1:                         );
1:                     }, false, 1);
1:     }
1: 
1:     private static void withService(Consumer<NativeTransportService> f)
1:     {
1:         withService(f, true, 1);
1:     }
1: 
1:     private static void withService(Consumer<NativeTransportService> f, boolean start, int concurrently)
1:     {
1:         NativeTransportService service = new NativeTransportService();
1:         assertFalse(service.isRunning());
1:         if (start)
1:         {
1:             service.start();
1:             assertTrue(service.isRunning());
1:         }
1:         try
1:         {
1:             if (concurrently == 1)
1:             {
1:                 f.accept(service);
1:             }
1:             else
1:             {
1:                 IntStream.range(0, concurrently).parallel().map((int i) -> {
1:                     f.accept(service);
1:                     return 1;
1:                 }).sum();
1:             }
1:         }
1:         finally
1:         {
1:             service.stop();
1:         }
1:     }
1: }
============================================================================