1:0580fb2: package org.apache.cassandra.stress.settings;
1:0580fb2: /*
1:0580fb2:  * 
1:0580fb2:  * Licensed to the Apache Software Foundation (ASF) under one
1:0580fb2:  * or more contributor license agreements.  See the NOTICE file
1:0580fb2:  * distributed with this work for additional information
1:0580fb2:  * regarding copyright ownership.  The ASF licenses this file
1:0580fb2:  * to you under the Apache License, Version 2.0 (the
1:0580fb2:  * "License"); you may not use this file except in compliance
1:0580fb2:  * with the License.  You may obtain a copy of the License at
1:0580fb2:  * 
1:0580fb2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0580fb2:  * 
1:0580fb2:  * Unless required by applicable law or agreed to in writing,
1:0580fb2:  * software distributed under the License is distributed on an
1:0580fb2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0580fb2:  * KIND, either express or implied.  See the License for the
1:0580fb2:  * specific language governing permissions and limitations
1:0580fb2:  * under the License.
1:0580fb2:  * 
1:0580fb2:  */
1:0580fb2: 
1:0580fb2: 
1:0580fb2: import java.io.Serializable;
1:0580fb2: import java.util.Arrays;
1:0580fb2: import java.util.List;
1:0580fb2: import java.util.Map;
1:938faa2: 
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:0580fb2: 
1:0580fb2: public class SettingsErrors implements Serializable
1:0580fb2: {
1:0580fb2: 
1:0580fb2:     public final boolean ignore;
1:0580fb2:     public final int tries;
1:0580fb2: 
1:0580fb2:     public SettingsErrors(Options options)
1:0580fb2:     {
1:0580fb2:         ignore = options.ignore.setByUser();
1:0580fb2:         this.tries = Math.max(1, Integer.parseInt(options.retries.value()) + 1);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // Option Declarations
1:0580fb2: 
1:0580fb2:     public static final class Options extends GroupedOptions
1:0580fb2:     {
1:0580fb2:         final OptionSimple retries = new OptionSimple("retries=", "[0-9]+", "9", "Number of tries to perform for each operation before failing", false);
1:0580fb2:         final OptionSimple ignore = new OptionSimple("ignore", "", null, "Do not fail on errors", false);
1:0580fb2: 
1:0580fb2:         @Override
1:0580fb2:         public List<? extends Option> options()
1:0580fb2:         {
1:0580fb2:             return Arrays.asList(retries, ignore);
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // CLI Utility Methods
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.printf("  Ignore: %b%n", ignore);
1:938faa2:         out.printf("  Tries: %d%n", tries);
1:938faa2:     }
1:938faa2: 
1:0580fb2: 
1:0580fb2:     public static SettingsErrors get(Map<String, String[]> clArgs)
1:0580fb2:     {
1:0580fb2:         String[] params = clArgs.remove("-errors");
1:0580fb2:         if (params == null)
1:0580fb2:             return new SettingsErrors(new Options());
1:0580fb2: 
1:0580fb2:         GroupedOptions options = GroupedOptions.select(params, new Options());
1:0580fb2:         if (options == null)
1:0580fb2:         {
1:0580fb2:             printHelp();
1:0580fb2:             System.out.println("Invalid -errors options provided, see output for valid options");
1:0580fb2:             System.exit(1);
1:0580fb2:         }
1:0580fb2:         return new SettingsErrors((Options) options);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static void printHelp()
1:0580fb2:     {
1:0580fb2:         GroupedOptions.printOptions(System.out, "-errors", new Options());
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static Runnable helpPrinter()
1:0580fb2:     {
1:0580fb2:         return new Runnable()
1:0580fb2:         {
1:0580fb2:             @Override
1:0580fb2:             public void run()
1:0580fb2:             {
1:0580fb2:                 printHelp();
1:0580fb2:             }
1:0580fb2:         };
1:0580fb2:     }
1:0580fb2: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.printf("  Ignore: %b%n", ignore);
1:         out.printf("  Tries: %d%n", tries);
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.PrintStream;
1: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
1: public class SettingsErrors implements Serializable
1: {
1: 
1:     public final boolean ignore;
1:     public final int tries;
1: 
1:     public SettingsErrors(Options options)
1:     {
1:         ignore = options.ignore.setByUser();
1:         this.tries = Math.max(1, Integer.parseInt(options.retries.value()) + 1);
1:     }
1: 
1:     // Option Declarations
1: 
1:     public static final class Options extends GroupedOptions
1:     {
1:         final OptionSimple retries = new OptionSimple("retries=", "[0-9]+", "9", "Number of tries to perform for each operation before failing", false);
1:         final OptionSimple ignore = new OptionSimple("ignore", "", null, "Do not fail on errors", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
1:             return Arrays.asList(retries, ignore);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     public static SettingsErrors get(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-errors");
1:         if (params == null)
1:             return new SettingsErrors(new Options());
1: 
1:         GroupedOptions options = GroupedOptions.select(params, new Options());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -errors options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsErrors((Options) options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-errors", new Options());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
============================================================================