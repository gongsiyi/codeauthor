1:07cf56f: /*
1:714eab0:  * Licensed to the Apache Software Foundation (ASF) under one
1:714eab0:  * or more contributor license agreements.  See the NOTICE file
1:714eab0:  * distributed with this work for additional information
1:714eab0:  * regarding copyright ownership.  The ASF licenses this file
1:714eab0:  * to you under the Apache License, Version 2.0 (the
1:714eab0:  * "License"); you may not use this file except in compliance
1:714eab0:  * with the License.  You may obtain a copy of the License at
1:714eab0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:714eab0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:714eab0:  */
1:078c56c: package org.apache.cassandra.db.marshal;
1:714eab0: 
1:e7a385a: import java.nio.ByteBuffer;
1:6aa7d6c: import java.util.Iterator;
1:ef25537: 
1:6aa7d6c: import org.apache.cassandra.config.DatabaseDescriptor;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:a991b64: import org.apache.cassandra.db.PartitionPosition;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:078c56c: import org.apache.cassandra.dht.IPartitioner;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:6350c16: import org.apache.cassandra.utils.ByteBufferUtil;
1:6aa7d6c: import org.apache.cassandra.utils.FBUtilities;
1:e7a385a: 
1:078c56c: /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
1:078c56c:  * Not intended for user-defined CFs, and will in fact error out if used with such. */
1:69f77cb: public class PartitionerDefinedOrder extends AbstractType<ByteBuffer>
4:078c56c: {
1:ad84e4d:     private final IPartitioner partitioner;
1:835669a: 
1:69f77cb:     public PartitionerDefinedOrder(IPartitioner partitioner)
1:835669a:     {
1:07594ee:         super(ComparisonType.CUSTOM);
1:078c56c:         this.partitioner = partitioner;
1:a22ce89:     }
1:a22ce89: 
1:6aa7d6c:     public static AbstractType<?> getInstance(TypeParser parser)
1:6aa7d6c:     {
1:6aa7d6c:         IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
1:6aa7d6c:         Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator();
1:6aa7d6c:         if (argIterator.hasNext())
1:6aa7d6c:         {
1:6aa7d6c:             partitioner = FBUtilities.newPartitioner(argIterator.next());
1:6aa7d6c:             assert !argIterator.hasNext();
1:6aa7d6c:         }
1:6aa7d6c:         return partitioner.partitionOrdering();
1:6aa7d6c:     }
1:6aa7d6c: 
1:daff1fc:     @Override
1:05d8ffd:     public ByteBuffer compose(ByteBuffer bytes)
1:a22ce89:     {
1:05d8ffd:         throw new UnsupportedOperationException("You can't do this with a local partitioner.");
1:835669a:     }
1:6aa7d6c: 
1:6aa7d6c:     @Override
1:2d95cb4:     public ByteBuffer decompose(ByteBuffer bytes)
1:835669a:     {
1:2d95cb4:         throw new UnsupportedOperationException("You can't do this with a local partitioner.");
1:835669a:     }
1:835669a: 
1:e7a385a:     public String getString(ByteBuffer bytes)
1:835669a:     {
1:6350c16:         return ByteBufferUtil.bytesToHex(bytes);
1:2d95cb4:     }
1:835669a: 
1:ad38251:     public ByteBuffer fromString(String source)
1:835669a:     {
1:bffd9ea:         throw new UnsupportedOperationException();
1:835669a:     }
1:835669a: 
1:daff1fc:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed)
1:835669a:     {
6:835669a:         throw new UnsupportedOperationException();
1:835669a:     }
1:835669a: 
1:daff1fc:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:835669a:     {
1:835669a:         throw new UnsupportedOperationException();
1:835669a:     }
1:835669a: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:835669a:     {
1:a991b64:         // o1 and o2 can be empty so we need to use PartitionPosition, not DecoratedKey
1:a991b64:         return PartitionPosition.ForKey.get(o1, partitioner).compareTo(PartitionPosition.ForKey.get(o2, partitioner));
1:835669a:     }
1:835669a: 
1:c7b02d1:     @Override
1:a4ebfe3:     public void validate(ByteBuffer bytes) throws MarshalException
1:2d95cb4:     {
1:a4ebfe3:         throw new IllegalStateException("You shouldn't be validating this.");
1:835669a:     }
1:2d95cb4: 
1:fc8b76f:     public TypeSerializer<ByteBuffer> getSerializer()
1:ad38251:     {
1:e9c6742:         throw new UnsupportedOperationException("You can't do this with a local partitioner.");
1:ad38251:     }
1:ad38251: 
1:c7b02d1:     @Override
1:6aa7d6c:     public String toString()
1:6aa7d6c:     {
1:6aa7d6c:         return String.format("%s(%s)", getClass().getName(), partitioner.getClass().getName());
1:6aa7d6c:     }
4:078c56c: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM);
/////////////////////////////////////////////////////////////////////////
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:6aa7d6c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:     public static AbstractType<?> getInstance(TypeParser parser)
1:     {
1:         IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
1:         Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator();
1:         if (argIterator.hasNext())
1:         {
1:             partitioner = FBUtilities.newPartitioner(argIterator.next());
1:             assert !argIterator.hasNext();
1:         }
1:         return partitioner.partitionOrdering();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("%s(%s)", getClass().getName(), partitioner.getClass().getName());
1:     }
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
1: public class PartitionerDefinedOrder extends AbstractType<ByteBuffer>
1:     public PartitionerDefinedOrder(IPartitioner partitioner)
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
0: public class LocalByPartionerType extends AbstractType<ByteBuffer>
1:     private final IPartitioner partitioner;
0:     public LocalByPartionerType(IPartitioner partitioner)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
0: public class PartitionerDefinedOrder extends AbstractType<ByteBuffer>
0:     public PartitionerDefinedOrder(IPartitioner partitioner)
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         throw new UnsupportedOperationException();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.StorageService;
0: public class LocalByPartionerType extends AbstractType<ByteBuffer>
0:     public LocalByPartionerType(IPartitioner partitioner)
0:     public static LocalByPartionerType getInstance(TypeParser parser)
1:     {
0:         return new LocalByPartionerType(StorageService.getPartitioner());
1:     }
1: 
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:835669a
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isSigned()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public boolean isCaseSensitive()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public boolean isCurrency()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public int getPrecision(ByteBuffer obj)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public int getScale(ByteBuffer obj)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public int getJdbcType()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public boolean needsQuotes()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer decompose(ByteBuffer bytes)
1:     {
1:         throw new UnsupportedOperationException("You can't do this with a local partitioner.");
1:     }
1: 
commit:6350c16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:         return ByteBufferUtil.bytesToHex(bytes);
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.NotImplementedException;
1: 
commit:ad38251
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.NotImplementedException;
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer fromString(String source)
1:     {
0:         throw new NotImplementedException();
1:     }
1: 
commit:8fde113
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         return FBUtilities.bytesToHex(bytes);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getString(ByteBuffer bytes)
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
commit:714eab0
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
commit:078c56c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.marshal;
0: 
1: import org.apache.cassandra.dht.IPartitioner;
0: import org.apache.cassandra.dht.Token;
0: 
1: /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
1:  * Not intended for user-defined CFs, and will in fact error out if used with such. */
0: public class LocalByPartionerType<T extends Token> extends AbstractType
1: {
0:     private final IPartitioner<T> partitioner;
0: 
0:     public LocalByPartionerType(IPartitioner<T> partitioner)
1:     {
1:         this.partitioner = partitioner;
1:     }
0: 
0:     public String getString(byte[] bytes)
1:     {
0:         return null;
1:     }
0: 
0:     public int compare(byte[] o1, byte[] o2)
1:     {
0:         return partitioner.decorateKey(o1).compareTo(partitioner.decorateKey(o2));
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.PartitionPosition;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:     public static LocalByPartionerType getInstance(TypeParser parser)
0:     {
0:         return new LocalByPartionerType(StorageService.getPartitioner());
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:         // o1 and o2 can be empty so we need to use PartitionPosition, not DecoratedKey
1:         return PartitionPosition.ForKey.get(o1, partitioner).compareTo(PartitionPosition.ForKey.get(o2, partitioner));
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<ByteBuffer> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public AbstractSerializer<ByteBuffer> asComposer()
0:     {
1:         throw new UnsupportedOperationException("You can't do this with a local partitioner.");
0:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.RowPosition;
/////////////////////////////////////////////////////////////////////////
0:         // o1 and o2 can be empty so we need to use RowPosition, not DecoratedKey
0:         return RowPosition.forKey(o1, partitioner).compareTo(RowPosition.forKey(o2, partitioner));
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Term fromJSONObject(Object parsed)
0:     {
0:         throw new UnsupportedOperationException();
0:     }
0: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
0:     {
0:         throw new UnsupportedOperationException();
0:     }
0: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:         return RowPosition.ForKey.get(o1, partitioner).compareTo(RowPosition.ForKey.get(o2, partitioner));
author:Eric Evans
-------------------------------------------------------------------------------
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
0:     public String toString(ByteBuffer bb)
0:     {
0:         return getString(bb);
0:     }
0: 
commit:d4c800b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Class<ByteBuffer> getType()
0:     {
0:         return ByteBuffer.class;
0:     }
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
0: public class LocalByPartionerType<T extends Token> extends AbstractType<ByteBuffer>
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer compose(ByteBuffer bytes)
0:     {
1:         throw new UnsupportedOperationException("You can't do this with a local partitioner.");
0:     }
0: 
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
1:         throw new IllegalStateException("You shouldn't be validating this.");
0:     }
============================================================================