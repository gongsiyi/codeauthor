1:ee401cf: /*
1:ee401cf:  * Licensed to the Apache Software Foundation (ASF) under one
1:ee401cf:  * or more contributor license agreements.  See the NOTICE file
1:ee401cf:  * distributed with this work for additional information
1:ee401cf:  * regarding copyright ownership.  The ASF licenses this file
1:ee401cf:  * to you under the Apache License, Version 2.0 (the
1:ee401cf:  * "License"); you may not use this file except in compliance
1:ee401cf:  * with the License.  You may obtain a copy of the License at
1:ee401cf:  *
1:ee401cf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ee401cf:  *
1:ee401cf:  * Unless required by applicable law or agreed to in writing, software
1:ee401cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee401cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee401cf:  * See the License for the specific language governing permissions and
1:ee401cf:  * limitations under the License.
1:ee401cf:  */
1:ee401cf: package org.apache.cassandra.cql3;
4:ee401cf: 
1:ee401cf: import com.datastax.driver.core.BatchStatement;
1:ee401cf: import com.datastax.driver.core.Cluster;
1:ee401cf: import com.datastax.driver.core.PreparedStatement;
1:ee401cf: import com.datastax.driver.core.Session;
1:ee401cf: import com.datastax.driver.core.exceptions.InvalidQueryException;
1:ee401cf: import org.apache.cassandra.config.DatabaseDescriptor;
1:ee401cf: import org.apache.cassandra.exceptions.ConfigurationException;
1:ee401cf: import org.apache.cassandra.service.EmbeddedCassandraService;
1:ee401cf: import org.junit.BeforeClass;
1:ee401cf: import org.junit.Test;
1:ee401cf: 
1:ee401cf: import java.io.IOException;
1:ee401cf: 
1:ee401cf: public class BatchTests
1:ee401cf: {
1:ee401cf:     private static EmbeddedCassandraService cassandra;
1:ee401cf: 
1:ee401cf:     private static Cluster cluster;
1:ee401cf:     private static Session session;
1:ee401cf: 
1:ee401cf:     private static PreparedStatement counter;
1:ee401cf:     private static PreparedStatement noncounter;
1:ee401cf: 
1:ee401cf:     @BeforeClass()
1:ee401cf:     public static void setup() throws ConfigurationException, IOException
1:ee401cf:     {
1:ee401cf:         cassandra = new EmbeddedCassandraService();
1:ee401cf:         cassandra.start();
1:ee401cf: 
1:ee401cf:         cluster = Cluster.builder().addContactPoint("127.0.0.1").withPort(DatabaseDescriptor.getNativeTransportPort()).build();
1:ee401cf:         session = cluster.connect();
1:ee401cf: 
1:ee401cf:         session.execute("drop keyspace if exists junit;");
1:ee401cf:         session.execute("create keyspace junit WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };");
1:ee401cf:         session.execute("CREATE TABLE junit.noncounter (\n" +
1:ee401cf:                 "  id int PRIMARY KEY,\n" +
1:ee401cf:                 "  val text\n" +
1:ee401cf:                 ");");
1:ee401cf:         session.execute("CREATE TABLE junit.counter (\n" +
1:ee401cf:                 "  id int PRIMARY KEY,\n" +
1:ee401cf:                 "  val counter,\n" +
1:ee401cf:                 ");");
1:ee401cf: 
1:ee401cf: 
1:ee401cf:         noncounter = session.prepare("insert into junit.noncounter(id, val)values(?,?)");
1:ee401cf:         counter = session.prepare("update junit.counter set val = val + ? where id = ?");
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test(expected = InvalidQueryException.class)
1:ee401cf:     public void testMixedInCounterBatch()
1:ee401cf:     {
1:ee401cf:        sendBatch(BatchStatement.Type.COUNTER, true, true);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test(expected = InvalidQueryException.class)
1:ee401cf:     public void testMixedInLoggedBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.LOGGED, true, true);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test(expected = InvalidQueryException.class)
1:ee401cf:     public void testMixedInUnLoggedBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.UNLOGGED, true, true);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test(expected = InvalidQueryException.class)
1:ee401cf:     public void testNonCounterInCounterBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.COUNTER, false, true);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test
1:ee401cf:     public void testNonCounterInLoggedBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.LOGGED, false, true);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test
1:ee401cf:     public void testNonCounterInUnLoggedBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.UNLOGGED, false, true);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test
1:ee401cf:     public void testCounterInCounterBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.COUNTER, true, false);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf:     @Test
1:ee401cf:     public void testCounterInUnLoggedBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.UNLOGGED, true, false);
1:ee401cf:     }
1:ee401cf: 
1:796db6e:     @Test
1:796db6e:     public void testEmptyBatch()
1:796db6e:     {
1:796db6e:         session.execute("BEGIN BATCH APPLY BATCH");
1:796db6e:         session.execute("BEGIN UNLOGGED BATCH APPLY BATCH");
1:796db6e:     }
1:ee401cf: 
1:ee401cf:     @Test(expected = InvalidQueryException.class)
1:ee401cf:     public void testCounterInLoggedBatch()
1:ee401cf:     {
1:ee401cf:         sendBatch(BatchStatement.Type.LOGGED, true, false);
1:ee401cf:     }
1:ee401cf: 
1:ada8d8b:     @Test(expected = InvalidQueryException.class)
1:ada8d8b:     public void testOversizedBatch()
1:ada8d8b:     {
1:ada8d8b:         int SIZE_FOR_FAILURE = 2500;
1:ada8d8b:         BatchStatement b = new BatchStatement(BatchStatement.Type.UNLOGGED);
1:ada8d8b:         for (int i = 0; i < SIZE_FOR_FAILURE; i++)
1:ada8d8b:         {
1:ada8d8b:             b.add(noncounter.bind(i, "foobar"));
1:ada8d8b:         }
1:ada8d8b:         session.execute(b);
1:ada8d8b:     }
1:ada8d8b: 
1:ee401cf:     public void sendBatch(BatchStatement.Type type, boolean addCounter, boolean addNonCounter)
1:ee401cf:     {
1:ee401cf: 
1:ee401cf:         assert addCounter || addNonCounter;
1:ee401cf:         BatchStatement b = new BatchStatement(type);
1:ee401cf: 
1:ee401cf:         for (int i = 0; i < 10; i++)
1:ee401cf:         {
1:ee401cf:             if (addNonCounter)
1:ee401cf:                 b.add(noncounter.bind(i, "foo"));
1:ee401cf: 
1:ee401cf:             if (addCounter)
1:ee401cf:                 b.add(counter.bind((long)i, i));
1:ee401cf:         }
1:ee401cf: 
1:ee401cf:         session.execute(b);
1:ee401cf:     }
1:ee401cf: 
1:ee401cf: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:796db6e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testEmptyBatch()
1:     {
1:         session.execute("BEGIN BATCH APPLY BATCH");
1:         session.execute("BEGIN UNLOGGED BATCH APPLY BATCH");
1:     }
/////////////////////////////////////////////////////////////////////////
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ada8d8b
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = InvalidQueryException.class)
1:     public void testOversizedBatch()
1:     {
1:         int SIZE_FOR_FAILURE = 2500;
1:         BatchStatement b = new BatchStatement(BatchStatement.Type.UNLOGGED);
1:         for (int i = 0; i < SIZE_FOR_FAILURE; i++)
1:         {
1:             b.add(noncounter.bind(i, "foobar"));
1:         }
1:         session.execute(b);
1:     }
1: 
author:Jake Luciani
-------------------------------------------------------------------------------
commit:ee401cf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import com.datastax.driver.core.BatchStatement;
1: import com.datastax.driver.core.Cluster;
1: import com.datastax.driver.core.PreparedStatement;
1: import com.datastax.driver.core.Session;
1: import com.datastax.driver.core.exceptions.InvalidQueryException;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.service.EmbeddedCassandraService;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import java.io.IOException;
0: import java.util.concurrent.TimeUnit;
1: 
1: public class BatchTests
1: {
1:     private static EmbeddedCassandraService cassandra;
1: 
1:     private static Cluster cluster;
1:     private static Session session;
1: 
1: 
1:     private static PreparedStatement counter;
1:     private static PreparedStatement noncounter;
1: 
1:     @BeforeClass()
1:     public static void setup() throws ConfigurationException, IOException
1:     {
1:         cassandra = new EmbeddedCassandraService();
1:         cassandra.start();
1: 
1:         cluster = Cluster.builder().addContactPoint("127.0.0.1").withPort(DatabaseDescriptor.getNativeTransportPort()).build();
1:         session = cluster.connect();
1: 
1:         session.execute("drop keyspace if exists junit;");
1:         session.execute("create keyspace junit WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };");
1:         session.execute("CREATE TABLE junit.noncounter (\n" +
1:                 "  id int PRIMARY KEY,\n" +
1:                 "  val text\n" +
1:                 ");");
1:         session.execute("CREATE TABLE junit.counter (\n" +
1:                 "  id int PRIMARY KEY,\n" +
1:                 "  val counter,\n" +
1:                 ");");
1: 
1: 
1:         noncounter = session.prepare("insert into junit.noncounter(id, val)values(?,?)");
1:         counter = session.prepare("update junit.counter set val = val + ? where id = ?");
1:     }
1: 
1:     @Test(expected = InvalidQueryException.class)
1:     public void testMixedInCounterBatch()
1:     {
1:        sendBatch(BatchStatement.Type.COUNTER, true, true);
1:     }
1: 
1:     @Test(expected = InvalidQueryException.class)
1:     public void testMixedInLoggedBatch()
1:     {
1:         sendBatch(BatchStatement.Type.LOGGED, true, true);
1:     }
1: 
1:     @Test(expected = InvalidQueryException.class)
1:     public void testMixedInUnLoggedBatch()
1:     {
1:         sendBatch(BatchStatement.Type.UNLOGGED, true, true);
1:     }
1: 
1:     @Test(expected = InvalidQueryException.class)
1:     public void testNonCounterInCounterBatch()
1:     {
1:         sendBatch(BatchStatement.Type.COUNTER, false, true);
1:     }
1: 
1:     @Test
1:     public void testNonCounterInLoggedBatch()
1:     {
1:         sendBatch(BatchStatement.Type.LOGGED, false, true);
1:     }
1: 
1:     @Test
1:     public void testNonCounterInUnLoggedBatch()
1:     {
1:         sendBatch(BatchStatement.Type.UNLOGGED, false, true);
1:     }
1: 
1:     @Test
1:     public void testCounterInCounterBatch()
1:     {
1:         sendBatch(BatchStatement.Type.COUNTER, true, false);
1:     }
1: 
1:     @Test
1:     public void testCounterInUnLoggedBatch()
1:     {
1:         sendBatch(BatchStatement.Type.UNLOGGED, true, false);
1:     }
1: 
1: 
1:     @Test(expected = InvalidQueryException.class)
1:     public void testCounterInLoggedBatch()
1:     {
1:         sendBatch(BatchStatement.Type.LOGGED, true, false);
1:     }
1: 
1: 
1: 
1:     public void sendBatch(BatchStatement.Type type, boolean addCounter, boolean addNonCounter)
1:     {
1: 
1:         assert addCounter || addNonCounter;
1:         BatchStatement b = new BatchStatement(type);
1: 
1:         for (int i = 0; i < 10; i++)
1:         {
1:             if (addNonCounter)
1:                 b.add(noncounter.bind(i, "foo"));
1: 
1:             if (addCounter)
1:                 b.add(counter.bind((long)i, i));
1:         }
1: 
1:         session.execute(b);
1:     }
1: 
1: }
============================================================================