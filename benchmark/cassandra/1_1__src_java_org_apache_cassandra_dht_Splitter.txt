1:e2c6341: /*
1:e2c6341:  * Licensed to the Apache Software Foundation (ASF) under one
1:e2c6341:  * or more contributor license agreements.  See the NOTICE file
1:e2c6341:  * distributed with this work for additional information
1:e2c6341:  * regarding copyright ownership.  The ASF licenses this file
1:e2c6341:  * to you under the Apache License, Version 2.0 (the
1:e2c6341:  * "License"); you may not use this file except in compliance
1:e2c6341:  * with the License.  You may obtain a copy of the License at
1:e2c6341:  *
1:e2c6341:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e2c6341:  *
1:e2c6341:  * Unless required by applicable law or agreed to in writing, software
1:e2c6341:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2c6341:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2c6341:  * See the License for the specific language governing permissions and
1:e2c6341:  * limitations under the License.
1:e2c6341:  */
1:e2c6341: 
1:e2c6341: package org.apache.cassandra.dht;
1:e2c6341: 
1:e2c6341: import java.math.BigInteger;
1:e2c6341: import java.util.ArrayList;
1:e2c6341: import java.util.Collections;
1:e2c6341: import java.util.List;
1:e2c6341: 
1:e2c6341: /**
1:e2c6341:  * Partition splitter.
1:e2c6341:  */
1:e2c6341: public abstract class Splitter
1:e2c6341: {
1:e2c6341:     private final IPartitioner partitioner;
1:e2c6341: 
1:e2c6341:     protected Splitter(IPartitioner partitioner)
1:e2c6341:     {
1:e2c6341:         this.partitioner = partitioner;
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     protected abstract Token tokenForValue(BigInteger value);
1:e2c6341: 
1:e2c6341:     protected abstract BigInteger valueForToken(Token token);
1:e2c6341: 
1:e2c6341:     public List<Token> splitOwnedRanges(int parts, List<Range<Token>> localRanges, boolean dontSplitRanges)
1:e2c6341:     {
1:e2c6341:         if (localRanges.isEmpty() || parts == 1)
1:e2c6341:             return Collections.singletonList(partitioner.getMaximumToken());
1:e2c6341: 
1:e2c6341:         BigInteger totalTokens = BigInteger.ZERO;
1:e2c6341:         for (Range<Token> r : localRanges)
1:e2c6341:         {
1:e2c6341:             BigInteger right = valueForToken(token(r.right));
1:e2c6341:             totalTokens = totalTokens.add(right.subtract(valueForToken(r.left)));
1:e2c6341:         }
1:e2c6341:         BigInteger perPart = totalTokens.divide(BigInteger.valueOf(parts));
1:8bc8fa3:         // the range owned is so tiny we can't split it:
1:8bc8fa3:         if (perPart.equals(BigInteger.ZERO))
1:8bc8fa3:             return Collections.singletonList(partitioner.getMaximumToken());
1:e2c6341: 
1:e2c6341:         if (dontSplitRanges)
1:e2c6341:             return splitOwnedRangesNoPartialRanges(localRanges, perPart, parts);
1:e2c6341: 
1:e2c6341:         List<Token> boundaries = new ArrayList<>();
1:e2c6341:         BigInteger sum = BigInteger.ZERO;
1:e2c6341:         for (Range<Token> r : localRanges)
1:e2c6341:         {
1:e2c6341:             Token right = token(r.right);
1:e2c6341:             BigInteger currentRangeWidth = valueForToken(right).subtract(valueForToken(r.left)).abs();
1:e2c6341:             BigInteger left = valueForToken(r.left);
1:e2c6341:             while (sum.add(currentRangeWidth).compareTo(perPart) >= 0)
1:e2c6341:             {
1:e2c6341:                 BigInteger withinRangeBoundary = perPart.subtract(sum);
1:e2c6341:                 left = left.add(withinRangeBoundary);
1:e2c6341:                 boundaries.add(tokenForValue(left));
1:e2c6341:                 currentRangeWidth = currentRangeWidth.subtract(withinRangeBoundary);
1:e2c6341:                 sum = BigInteger.ZERO;
1:e2c6341:             }
1:e2c6341:             sum = sum.add(currentRangeWidth);
1:e2c6341:         }
1:e2c6341:         boundaries.set(boundaries.size() - 1, partitioner.getMaximumToken());
1:e2c6341: 
1:e2c6341:         assert boundaries.size() == parts : boundaries.size() +"!="+parts+" "+boundaries+":"+localRanges;
1:e2c6341:         return boundaries;
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     private List<Token> splitOwnedRangesNoPartialRanges(List<Range<Token>> localRanges, BigInteger perPart, int parts)
1:e2c6341:     {
1:e2c6341:         List<Token> boundaries = new ArrayList<>(parts);
1:e2c6341:         BigInteger sum = BigInteger.ZERO;
1:e2c6341:         int i = 0;
1:e2c6341:         while (boundaries.size() < parts - 1)
1:e2c6341:         {
1:e2c6341:             Range<Token> r = localRanges.get(i);
1:e2c6341:             Range<Token> nextRange = localRanges.get(i + 1);
1:e2c6341:             Token right = token(r.right);
1:e2c6341:             Token nextRight = token(nextRange.right);
1:e2c6341: 
1:e2c6341:             BigInteger currentRangeWidth = valueForToken(right).subtract(valueForToken(r.left));
1:e2c6341:             BigInteger nextRangeWidth = valueForToken(nextRight).subtract(valueForToken(nextRange.left));
1:e2c6341:             sum = sum.add(currentRangeWidth);
1:e2c6341:             // does this or next range take us beyond the per part limit?
1:e2c6341:             if (sum.compareTo(perPart) > 0 || sum.add(nextRangeWidth).compareTo(perPart) > 0)
1:e2c6341:             {
1:e2c6341:                 // Either this or the next range will take us beyond the perPart limit. Will stopping now or
1:e2c6341:                 // adding the next range create the smallest difference to perPart?
1:e2c6341:                 BigInteger diffCurrent = sum.subtract(perPart).abs();
1:e2c6341:                 BigInteger diffNext = sum.add(nextRangeWidth).subtract(perPart).abs();
1:e2c6341:                 if (diffNext.compareTo(diffCurrent) >= 0)
1:e2c6341:                 {
1:e2c6341:                     sum = BigInteger.ZERO;
1:e2c6341:                     boundaries.add(right);
1:e2c6341:                 }
1:e2c6341:             }
1:e2c6341:             i++;
1:e2c6341:         }
1:e2c6341:         boundaries.add(partitioner.getMaximumToken());
1:e2c6341:         return boundaries;
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     /**
1:e2c6341:      * We avoid calculating for wrap around ranges, instead we use the actual max token, and then, when translating
1:e2c6341:      * to PartitionPositions, we include tokens from .minKeyBound to .maxKeyBound to make sure we include all tokens.
1:e2c6341:      */
1:e2c6341:     private Token token(Token t)
1:e2c6341:     {
1:e2c6341:         return t.equals(partitioner.getMinimumToken()) ? partitioner.getMaximumToken() : t;
1:e2c6341:     }
1:e2c6341: 
1:e2c6341: }
============================================================================
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:8bc8fa3
/////////////////////////////////////////////////////////////////////////
1:         // the range owned is so tiny we can't split it:
1:         if (perPart.equals(BigInteger.ZERO))
1:             return Collections.singletonList(partitioner.getMaximumToken());
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.dht;
1: 
1: import java.math.BigInteger;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: /**
1:  * Partition splitter.
1:  */
1: public abstract class Splitter
1: {
1:     private final IPartitioner partitioner;
1: 
1:     protected Splitter(IPartitioner partitioner)
1:     {
1:         this.partitioner = partitioner;
1:     }
1: 
1:     protected abstract Token tokenForValue(BigInteger value);
1: 
1:     protected abstract BigInteger valueForToken(Token token);
1: 
1:     public List<Token> splitOwnedRanges(int parts, List<Range<Token>> localRanges, boolean dontSplitRanges)
1:     {
1:         if (localRanges.isEmpty() || parts == 1)
1:             return Collections.singletonList(partitioner.getMaximumToken());
1: 
1:         BigInteger totalTokens = BigInteger.ZERO;
1:         for (Range<Token> r : localRanges)
1:         {
1:             BigInteger right = valueForToken(token(r.right));
1:             totalTokens = totalTokens.add(right.subtract(valueForToken(r.left)));
1:         }
1:         BigInteger perPart = totalTokens.divide(BigInteger.valueOf(parts));
1: 
1:         if (dontSplitRanges)
1:             return splitOwnedRangesNoPartialRanges(localRanges, perPart, parts);
1: 
1:         List<Token> boundaries = new ArrayList<>();
1:         BigInteger sum = BigInteger.ZERO;
1:         for (Range<Token> r : localRanges)
1:         {
1:             Token right = token(r.right);
1:             BigInteger currentRangeWidth = valueForToken(right).subtract(valueForToken(r.left)).abs();
1:             BigInteger left = valueForToken(r.left);
1:             while (sum.add(currentRangeWidth).compareTo(perPart) >= 0)
1:             {
1:                 BigInteger withinRangeBoundary = perPart.subtract(sum);
1:                 left = left.add(withinRangeBoundary);
1:                 boundaries.add(tokenForValue(left));
1:                 currentRangeWidth = currentRangeWidth.subtract(withinRangeBoundary);
1:                 sum = BigInteger.ZERO;
1:             }
1:             sum = sum.add(currentRangeWidth);
1:         }
1:         boundaries.set(boundaries.size() - 1, partitioner.getMaximumToken());
1: 
1:         assert boundaries.size() == parts : boundaries.size() +"!="+parts+" "+boundaries+":"+localRanges;
1:         return boundaries;
1:     }
1: 
1:     private List<Token> splitOwnedRangesNoPartialRanges(List<Range<Token>> localRanges, BigInteger perPart, int parts)
1:     {
1:         List<Token> boundaries = new ArrayList<>(parts);
1:         BigInteger sum = BigInteger.ZERO;
1:         int i = 0;
1:         while (boundaries.size() < parts - 1)
1:         {
1:             Range<Token> r = localRanges.get(i);
1:             Range<Token> nextRange = localRanges.get(i + 1);
1:             Token right = token(r.right);
1:             Token nextRight = token(nextRange.right);
1: 
1:             BigInteger currentRangeWidth = valueForToken(right).subtract(valueForToken(r.left));
1:             BigInteger nextRangeWidth = valueForToken(nextRight).subtract(valueForToken(nextRange.left));
1:             sum = sum.add(currentRangeWidth);
1:             // does this or next range take us beyond the per part limit?
1:             if (sum.compareTo(perPart) > 0 || sum.add(nextRangeWidth).compareTo(perPart) > 0)
1:             {
1:                 // Either this or the next range will take us beyond the perPart limit. Will stopping now or
1:                 // adding the next range create the smallest difference to perPart?
1:                 BigInteger diffCurrent = sum.subtract(perPart).abs();
1:                 BigInteger diffNext = sum.add(nextRangeWidth).subtract(perPart).abs();
1:                 if (diffNext.compareTo(diffCurrent) >= 0)
1:                 {
1:                     sum = BigInteger.ZERO;
1:                     boundaries.add(right);
1:                 }
1:             }
1:             i++;
1:         }
1:         boundaries.add(partitioner.getMaximumToken());
1:         return boundaries;
1:     }
1: 
1:     /**
1:      * We avoid calculating for wrap around ranges, instead we use the actual max token, and then, when translating
1:      * to PartitionPositions, we include tokens from .minKeyBound to .maxKeyBound to make sure we include all tokens.
1:      */
1:     private Token token(Token t)
1:     {
1:         return t.equals(partitioner.getMinimumToken()) ? partitioner.getMaximumToken() : t;
1:     }
1: 
1: }
============================================================================