1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
5:2e1e98a: 
1:2e1e98a: import java.util.Arrays;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Map;
1:8e360f8: 
1:8e360f8: import com.google.common.base.Function;
1:2e1e98a: 
1:2e1e98a: import org.apache.cassandra.locator.AbstractReplicationStrategy;
1:2e1e98a: 
1:2e1e98a: /**
1:2e1e98a:  * For specifying replication options
1:2e1e98a:  */
1:8e360f8: class OptionReplication extends OptionMulti
10:2e1e98a: {
1:2e1e98a: 
1:8e360f8:     private final OptionSimple strategy = new OptionSimple("strategy=", new StrategyAdapter(), "org.apache.cassandra.locator.SimpleStrategy", "The replication strategy to use", false);
1:8e360f8:     private final OptionSimple factor = new OptionSimple("factor=", "[0-9]+", "1", "The number of replicas", false);
1:2e1e98a: 
1:8e360f8:     public OptionReplication()
1:8e360f8:     {
1:8e360f8:         super("replication", "Define the replication strategy and any parameters", true);
1:8e360f8:     }
1:2e1e98a: 
1:2e1e98a:     public String getStrategy()
1:2e1e98a:     {
1:8e360f8:         return strategy.value();
8:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public Map<String, String> getOptions()
1:2e1e98a:     {
1:8e360f8:         Map<String, String> options = extraOptions();
1:109313c:         if (!options.containsKey("replication_factor") && (strategy.value().equals("org.apache.cassandra.locator.SimpleStrategy") || factor.setByUser()))
1:109313c:             options.put("replication_factor", factor.value());
1:2e1e98a:         return options;
1:2e1e98a:     }
1:2e1e98a: 
1:8e360f8:     protected List<? extends Option> options()
1:2e1e98a:     {
1:8e360f8:         return Arrays.asList(strategy, factor);
1:2e1e98a:     }
1:2e1e98a: 
5:2e1e98a:     @Override
1:2e1e98a:     public boolean happy()
1:2e1e98a:     {
2:2e1e98a:         return true;
1:2e1e98a:     }
1:2e1e98a: 
1:8e360f8:     private static final class StrategyAdapter implements Function<String, String>
1:2e1e98a:     {
1:8e360f8:         public String apply(String name)
1:8e360f8:         {
1:8e360f8:             String strategy = null;
1:8e360f8:             for (String fullname : new String[] { name, "org.apache.cassandra.locator." + name })
1:8e360f8:             {
1:8e360f8:                 try
1:8e360f8:                 {
1:8e360f8:                     Class<?> clazz = Class.forName(fullname);
1:8e360f8:                     if (!AbstractReplicationStrategy.class.isAssignableFrom(clazz))
1:3e2c610:                         throw new IllegalArgumentException(clazz + " is not a replication strategy");
1:8e360f8:                     strategy = fullname;
1:8e360f8:                     break;
1:f47863e:                 } catch (Exception ignore)
1:8e360f8:                 {
1:f47863e:                     // will throw below if strategy is still null
1:8e360f8:                 }
1:8e360f8:             }
1:8e360f8:             if (strategy == null)
1:8e360f8:                 throw new IllegalArgumentException("Invalid replication strategy: " + name);
1:8e360f8:             return strategy;
1:8e360f8:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8215744
commit:109313c
/////////////////////////////////////////////////////////////////////////
1:         if (!options.containsKey("replication_factor") && (strategy.value().equals("org.apache.cassandra.locator.SimpleStrategy") || factor.setByUser()))
1:             options.put("replication_factor", factor.value());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f47863e
/////////////////////////////////////////////////////////////////////////
1:                 } catch (Exception ignore)
1:                     // will throw below if strategy is still null
commit:8e360f8
/////////////////////////////////////////////////////////////////////////
1: 
1: import com.google.common.base.Function;
1: class OptionReplication extends OptionMulti
1:     private final OptionSimple strategy = new OptionSimple("strategy=", new StrategyAdapter(), "org.apache.cassandra.locator.SimpleStrategy", "The replication strategy to use", false);
1:     private final OptionSimple factor = new OptionSimple("factor=", "[0-9]+", "1", "The number of replicas", false);
1:     public OptionReplication()
1:     {
1:         super("replication", "Define the replication strategy and any parameters", true);
1:     }
1:         return strategy.value();
1:         Map<String, String> options = extraOptions();
0:         options.put("replication_factor", factor.value());
1:     protected List<? extends Option> options()
1:         return Arrays.asList(strategy, factor);
/////////////////////////////////////////////////////////////////////////
1:     private static final class StrategyAdapter implements Function<String, String>
1:         public String apply(String name)
1:         {
1:             String strategy = null;
1:             for (String fullname : new String[] { name, "org.apache.cassandra.locator." + name })
1:             {
1:                 try
1:                 {
1:                     Class<?> clazz = Class.forName(fullname);
1:                     if (!AbstractReplicationStrategy.class.isAssignableFrom(clazz))
0:                         throw new RuntimeException();
1:                     strategy = fullname;
1:                     break;
0:                 } catch (Exception _)
1:                 {
1:                 }
1:             }
1:             if (strategy == null)
1:                 throw new IllegalArgumentException("Invalid replication strategy: " + name);
1:             return strategy;
1:         }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
1:                         throw new IllegalArgumentException(clazz + " is not a replication strategy");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.util.Arrays;
0: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.apache.cassandra.locator.AbstractReplicationStrategy;
1: 
1: /**
1:  * For specifying replication options
1:  */
0: class OptionReplication extends Option
1: {
1: 
0:     private static final Pattern FULL = Pattern.compile("replication\\((.*)\\)", Pattern.CASE_INSENSITIVE);
0:     private static final Pattern OPTION = Pattern.compile("([^,=]+)=([^,]+)", Pattern.CASE_INSENSITIVE);
1: 
0:     private String strategy = "org.apache.cassandra.locator.SimpleStrategy";
0:     private Map<String, String> options = new HashMap<>();
1: 
1:     public String getStrategy()
1:     {
0:         return strategy;
1:     }
1: 
1:     public Map<String, String> getOptions()
1:     {
0:         if (!options.containsKey("replication_factor") && strategy.endsWith("SimpleStrategy"))
0:             options.put("replication_factor", "1");
1:         return options;
1:     }
1: 
1: 
1:     @Override
0:     public boolean accept(String param)
1:     {
0:         Matcher m = FULL.matcher(param);
0:         if (!m.matches())
0:             return false;
0:         String args = m.group(1);
0:         m = OPTION.matcher(args);
0:         int last = -1;
0:         while (m.find())
1:         {
0:             if (m.start() != last + 1)
0:                 throw new IllegalArgumentException("Invalid replication specification: " + param);
0:             last = m.end();
0:             String key = m.group(1).toLowerCase();
0:             sw: switch(key)
1:             {
0:                 case "factor":
0:                     try
1:                     {
0:                         Integer.parseInt(m.group(2));
0:                     } catch (NumberFormatException e)
1:                     {
0:                         throw new IllegalArgumentException("Invalid replication factor: " + param);
1:                     }
0:                     options.put("replication_factor", m.group(2));
0:                     break;
0:                 case "strategy":
0:                     for (String name : new String[] { m.group(2), "org.apache.cassandra.locator." + m.group(2) })
1:                     {
0:                         try
1:                         {
0:                             Class<?> clazz = Class.forName(name);
0:                             if (!AbstractReplicationStrategy.class.isAssignableFrom(clazz))
0:                                 throw new RuntimeException();
0:                             strategy = name;
0:                             break sw;
0:                         } catch (Exception _)
1:                         {
1:                         }
1:                     }
0:                     throw new IllegalArgumentException("Invalid replication strategy: " + param);
0:                 default:
1: 
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     @Override
1:     public boolean happy()
1:     {
1:         return true;
1:     }
1: 
1:     @Override
0:     public String shortDisplay()
1:     {
0:         return "replication(?)";
1:     }
1: 
1:     @Override
0:     public String longDisplay()
1:     {
0:         return "replication(factor=?,strategy=?,<option1>=?,...)";
1:     }
1: 
1:     @Override
0:     public List<String> multiLineDisplay()
1:     {
0:         return Arrays.asList(
0:                 GroupedOptions.formatMultiLine("factor=?","The replication factor to use (default 1)"),
0:                 GroupedOptions.formatMultiLine("strategy=?","The replication strategy to use (default SimpleStrategy)"),
0:                 GroupedOptions.formatMultiLine("option=?","Arbitrary replication strategy options")
0:         );
1:     }
1: 
1: }
============================================================================