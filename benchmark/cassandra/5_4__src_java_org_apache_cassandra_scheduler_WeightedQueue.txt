1:602523f: /*
1:602523f:  * Licensed to the Apache Software Foundation (ASF) under one
1:602523f:  * or more contributor license agreements.  See the NOTICE file
1:602523f:  * distributed with this work for additional information
1:602523f:  * regarding copyright ownership.  The ASF licenses this file
1:602523f:  * to you under the Apache License, Version 2.0 (the
1:602523f:  * "License"); you may not use this file except in compliance
1:602523f:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:602523f:  */
1:07cf56f: package org.apache.cassandra.scheduler;
1:07cf56f: 
1:602523f: import java.util.concurrent.SynchronousQueue;
1:7c08ecd: import java.util.concurrent.TimeoutException;
1:7c08ecd: import java.util.concurrent.TimeUnit;
10:602523f: 
1:69cedbf: import org.apache.cassandra.metrics.LatencyMetrics;
1:602523f: 
1:8896a70: class WeightedQueue
9:602523f: {
1:69cedbf:     private final LatencyMetrics metric;
1:602523f: 
1:602523f:     public final String key;
1:602523f:     public final int weight;
1:602523f:     private final SynchronousQueue<Entry> queue;
1:602523f:     public WeightedQueue(String key, int weight)
1:602523f:     {
1:602523f:         this.key = key;
1:602523f:         this.weight = weight;
1:602523f:         this.queue = new SynchronousQueue<Entry>(true);
1:eb390d0:         this.metric =  new LatencyMetrics("scheduler", "WeightedQueue", key);
9:602523f:     }
1:602523f: 
1:7c08ecd:     public void put(Thread t, long timeoutMS) throws InterruptedException, TimeoutException
1:602523f:     {
1:52841cb:         if (!queue.offer(new WeightedQueue.Entry(t), timeoutMS, TimeUnit.MILLISECONDS))
1:52841cb:             throw new TimeoutException("Failed to acquire request scheduler slot for '" + key + "'");
1:602523f:     }
1:602523f: 
1:602523f:     public Thread poll()
1:602523f:     {
1:602523f:         Entry e = queue.poll();
1:602523f:         if (e == null)
1:602523f:             return null;
1:69cedbf:         metric.addNano(System.nanoTime() - e.creationTime);
1:602523f:         return e.thread;
1:602523f:     }
1:602523f: 
1:602523f:     @Override
1:602523f:     public String toString()
1:602523f:     {
1:602523f:         return "RoundRobinScheduler.WeightedQueue(key=" + key + " weight=" + weight + ")";
1:602523f:     }
1:602523f: 
1:602523f:     private final static class Entry
1:602523f:     {
1:602523f:         public final long creationTime = System.nanoTime();
1:602523f:         public final Thread thread;
1:602523f:         public Entry(Thread thread)
1:602523f:         {
1:602523f:             this.thread = thread;
1:602523f:         }
1:602523f:     }
1:602523f: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: class WeightedQueue
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
1:         this.metric =  new LatencyMetrics("scheduler", "WeightedQueue", key);
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.metrics.LatencyMetrics;
1:     private final LatencyMetrics metric;
/////////////////////////////////////////////////////////////////////////
0:         this.metric =  new LatencyMetrics("org.apache.cassandra.metrics", "scheduler", "WeightedQueue", key);
/////////////////////////////////////////////////////////////////////////
1:         metric.addNano(System.nanoTime() - e.creationTime);
/////////////////////////////////////////////////////////////////////////
0:         return metric.latency.count();
0:         return metric.totalLatency.count();
0:         return metric.getRecentLatency();
0:         return metric.totalLatencyHistogram.getBuckets(false);
0:         return metric.recentLatencyHistogram.getBuckets(true);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.scheduler;
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:52841cb
/////////////////////////////////////////////////////////////////////////
1:         if (!queue.offer(new WeightedQueue.Entry(t), timeoutMS, TimeUnit.MILLISECONDS))
1:             throw new TimeoutException("Failed to acquire request scheduler slot for '" + key + "'");
commit:7c08ecd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeoutException;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     public void put(Thread t, long timeoutMS) throws InterruptedException, TimeoutException
0:         queue.offer(new WeightedQueue.Entry(t), timeoutMS, TimeUnit.MILLISECONDS);
commit:602523f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.scheduler;
1: 
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
1: import java.util.concurrent.SynchronousQueue;
0: import java.lang.management.ManagementFactory;
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
1: 
0: import org.apache.cassandra.utils.LatencyTracker;
1: 
0: class WeightedQueue implements WeightedQueueMBean
1: {
0:     private final LatencyTracker stats = new LatencyTracker();
1: 
1:     public final String key;
1:     public final int weight;
1:     private final SynchronousQueue<Entry> queue;
1:     public WeightedQueue(String key, int weight)
1:     {
1:         this.key = key;
1:         this.weight = weight;
1:         this.queue = new SynchronousQueue<Entry>(true);
1:     }
1: 
0:     public void register()
1:     {
0:         // expose monitoring data
0:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
0:         try
1:         {
0:             mbs.registerMBean(this, new ObjectName("org.apache.cassandra.scheduler:type=WeightedQueue,queue=" + key));
1:         }
0:         catch (Exception e)
1:         {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: 
0:     public void put(Thread t) throws InterruptedException
1:     {
0:         queue.put(new WeightedQueue.Entry(t));
1:     }
1: 
1:     public Thread poll()
1:     {
1:         Entry e = queue.poll();
1:         if (e == null)
1:             return null;
0:         stats.addNano(System.nanoTime() - e.creationTime);
1:         return e.thread;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "RoundRobinScheduler.WeightedQueue(key=" + key + " weight=" + weight + ")";
1:     }
1: 
1:     private final static class Entry
1:     {
1:         public final long creationTime = System.nanoTime();
1:         public final Thread thread;
1:         public Entry(Thread thread)
1:         {
1:             this.thread = thread;
1:         }
1:     }
1: 
0:     /** MBean related methods */
1: 
0:     public long getOperations()
1:     {
0:         return stats.getOpCount();
1:     }
1: 
0:     public long getTotalLatencyMicros()
1:     {
0:         return stats.getTotalLatencyMicros();
1:     }
1: 
0:     public double getRecentLatencyMicros()
1:     {
0:         return stats.getRecentLatencyMicros();
1:     }
1: 
0:     public long[] getTotalLatencyHistogramMicros()
1:     {
0:         return stats.getTotalLatencyHistogramMicros();
1:     }
1: 
0:     public long[] getRecentLatencyHistogramMicros()
1:     {
0:         return stats.getRecentLatencyHistogramMicros();
1:     }
1: }
============================================================================