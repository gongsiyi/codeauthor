1:3566843: /*
1:3566843:  * Licensed to the Apache Software Foundation (ASF) under one
1:3566843:  * or more contributor license agreements.  See the NOTICE file
1:3566843:  * distributed with this work for additional information
1:3566843:  * regarding copyright ownership.  The ASF licenses this file
1:3566843:  * to you under the Apache License, Version 2.0 (the
1:3566843:  * "License"); you may not use this file except in compliance
1:3566843:  * with the License.  You may obtain a copy of the License at
1:3566843:  *
1:3566843:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3566843:  *
1:3566843:  * Unless required by applicable law or agreed to in writing, software
1:3566843:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3566843:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3566843:  * See the License for the specific language governing permissions and
1:3566843:  * limitations under the License.
1:3566843:  */
1:3566843: package org.apache.cassandra.cql3.functions;
1:3566843: 
1:3566843: import java.util.ArrayList;
1:3566843: import java.util.Collection;
1:3566843: import java.util.List;
1:3566843: 
1:3566843: import org.apache.cassandra.config.Schema;
1:3566843: import org.apache.cassandra.cql3.*;
1:3566843: import org.apache.cassandra.db.marshal.AbstractType;
1:3566843: import org.apache.cassandra.exceptions.InvalidRequestException;
1:3566843: 
1:3566843: import static java.util.stream.Collectors.joining;
1:3566843: 
1:3566843: public final class FunctionResolver
1:3566843: {
1:3566843:     private FunctionResolver()
1:3566843:     {
1:3566843:     }
1:3566843: 
1:3566843:     // We special case the token function because that's the only function whose argument types actually
1:3566843:     // depend on the table on which the function is called. Because it's the sole exception, it's easier
1:3566843:     // to handle it as a special case.
1:3566843:     private static final FunctionName TOKEN_FUNCTION_NAME = FunctionName.nativeFunction("token");
1:3566843: 
1:3566843:     public static ColumnSpecification makeArgSpec(String receiverKs, String receiverCf, Function fun, int i)
1:3566843:     {
1:3566843:         return new ColumnSpecification(receiverKs,
1:3566843:                                        receiverCf,
1:3566843:                                        new ColumnIdentifier("arg" + i + '(' + fun.name().toString().toLowerCase() + ')', true),
1:3566843:                                        fun.argTypes().get(i));
1:3566843:     }
1:3566843: 
1:3566843:     /**
1:3566843:      * @param keyspace the current keyspace
1:3566843:      * @param name the name of the function
1:3566843:      * @param providedArgs the arguments provided for the function call
1:3566843:      * @param receiverKs the receiver's keyspace
1:3566843:      * @param receiverCf the receiver's table
1:3566843:      * @param receiverType if the receiver type is known (during inserts, for example), this should be the type of
1:3566843:      *                     the receiver
1:3566843:      * @throws InvalidRequestException
1:3566843:      */
1:3566843:     public static Function get(String keyspace,
1:3566843:                                FunctionName name,
1:3566843:                                List<? extends AssignmentTestable> providedArgs,
1:3566843:                                String receiverKs,
1:3566843:                                String receiverCf,
1:3566843:                                AbstractType<?> receiverType)
1:3566843:     throws InvalidRequestException
1:3566843:     {
1:3566843:         if (name.equalsNativeFunction(TOKEN_FUNCTION_NAME))
1:3566843:             return new TokenFct(Schema.instance.getCFMetaData(receiverKs, receiverCf));
1:3566843: 
1:3566843:         // The toJson() function can accept any type of argument, so instances of it are not pre-declared.  Instead,
1:3566843:         // we create new instances as needed while handling selectors (which is the only place that toJson() is supported,
1:3566843:         // due to needing to know the argument types in advance).
1:3566843:         if (name.equalsNativeFunction(ToJsonFct.NAME))
1:3566843:             throw new InvalidRequestException("toJson() may only be used within the selection clause of SELECT statements");
1:3566843: 
1:3566843:         // Similarly, we can only use fromJson when we know the receiver type (such as inserts)
1:3566843:         if (name.equalsNativeFunction(FromJsonFct.NAME))
1:3566843:         {
1:3566843:             if (receiverType == null)
1:3566843:                 throw new InvalidRequestException("fromJson() cannot be used in the selection clause of a SELECT statement");
1:3566843:             return FromJsonFct.getInstance(receiverType);
1:3566843:         }
1:3566843: 
1:3566843:         Collection<Function> candidates;
1:3566843:         if (!name.hasKeyspace())
1:3566843:         {
1:3566843:             // function name not fully qualified
1:3566843:             candidates = new ArrayList<>();
1:3566843:             // add 'SYSTEM' (native) candidates
1:3566843:             candidates.addAll(Schema.instance.getFunctions(name.asNativeFunction()));
1:3566843:             // add 'current keyspace' candidates
1:3566843:             candidates.addAll(Schema.instance.getFunctions(new FunctionName(keyspace, name.name)));
1:3566843:         }
1:3566843:         else
1:3566843:         {
1:3566843:             // function name is fully qualified (keyspace + name)
1:3566843:             candidates = Schema.instance.getFunctions(name);
1:3566843:         }
1:3566843: 
1:3566843:         if (candidates.isEmpty())
1:3566843:             return null;
1:3566843: 
1:3566843:         // Fast path if there is only one choice
1:3566843:         if (candidates.size() == 1)
1:3566843:         {
1:3566843:             Function fun = candidates.iterator().next();
1:3566843:             validateTypes(keyspace, fun, providedArgs, receiverKs, receiverCf);
1:3566843:             return fun;
1:3566843:         }
1:3566843: 
1:3566843:         List<Function> compatibles = null;
1:3566843:         for (Function toTest : candidates)
1:3566843:         {
1:3566843:             AssignmentTestable.TestResult r = matchAguments(keyspace, toTest, providedArgs, receiverKs, receiverCf);
1:3566843:             switch (r)
1:3566843:             {
1:3566843:                 case EXACT_MATCH:
1:3566843:                     // We always favor exact matches
1:3566843:                     return toTest;
1:3566843:                 case WEAKLY_ASSIGNABLE:
1:269c5d4:                     if (compatibles == null)
1:3566843:                         compatibles = new ArrayList<>();
1:3566843:                     compatibles.add(toTest);
1:3566843:                     break;
1:3566843:             }
1:3566843:         }
1:3566843: 
1:3566843:         if (compatibles == null)
1:269c5d4:         {
1:3566843:             throw new InvalidRequestException(String.format("Invalid call to function %s, none of its type signatures match (known type signatures: %s)",
1:3566843:                                                             name, format(candidates)));
1:269c5d4:         }
1:3566843: 
1:3566843:         if (compatibles.size() > 1)
1:3566843:             throw new InvalidRequestException(String.format("Ambiguous call to function %s (can be matched by following signatures: %s): use type casts to disambiguate",
1:3566843:                         name, format(compatibles)));
1:3566843: 
1:3566843:         return compatibles.get(0);
1:3566843:     }
1:3566843: 
1:3566843:     // This method and matchArguments are somewhat duplicate, but this method allows us to provide more precise errors in the common
1:3566843:     // case where there is no override for a given function. This is thus probably worth the minor code duplication.
1:3566843:     private static void validateTypes(String keyspace,
1:3566843:                                       Function fun,
1:3566843:                                       List<? extends AssignmentTestable> providedArgs,
1:3566843:                                       String receiverKs,
1:3566843:                                       String receiverCf)
1:3566843:     throws InvalidRequestException
1:3566843:     {
1:3566843:         if (providedArgs.size() != fun.argTypes().size())
1:3566843:             throw new InvalidRequestException(String.format("Invalid number of arguments in call to function %s: %d required but %d provided", fun.name(), fun.argTypes().size(), providedArgs.size()));
1:3566843: 
1:3566843:         for (int i = 0; i < providedArgs.size(); i++)
1:3566843:         {
1:3566843:             AssignmentTestable provided = providedArgs.get(i);
1:3566843: 
1:3566843:             // If the concrete argument is a bind variables, it can have any type.
1:3566843:             // We'll validate the actually provided value at execution time.
1:3566843:             if (provided == null)
1:3566843:                 continue;
1:3566843: 
1:3566843:             ColumnSpecification expected = makeArgSpec(receiverKs, receiverCf, fun, i);
1:3566843:             if (!provided.testAssignment(keyspace, expected).isAssignable())
1:3566843:                 throw new InvalidRequestException(String.format("Type error: %s cannot be passed as argument %d of function %s of type %s", provided, i, fun.name(), expected.type.asCQL3Type()));
1:3566843:         }
1:3566843:     }
1:3566843: 
1:3566843:     private static AssignmentTestable.TestResult matchAguments(String keyspace,
1:3566843:                                                                Function fun,
1:3566843:                                                                List<? extends AssignmentTestable> providedArgs,
1:3566843:                                                                String receiverKs,
1:3566843:                                                                String receiverCf)
1:3566843:     {
1:3566843:         if (providedArgs.size() != fun.argTypes().size())
1:3566843:             return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:3566843: 
1:3566843:         // It's an exact match if all are exact match, but is not assignable as soon as any is non assignable.
1:3566843:         AssignmentTestable.TestResult res = AssignmentTestable.TestResult.EXACT_MATCH;
1:3566843:         for (int i = 0; i < providedArgs.size(); i++)
1:3566843:         {
1:3566843:             AssignmentTestable provided = providedArgs.get(i);
1:3566843:             if (provided == null)
1:3566843:             {
1:3566843:                 res = AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:3566843:                 continue;
1:3566843:             }
1:3566843: 
1:3566843:             ColumnSpecification expected = makeArgSpec(receiverKs, receiverCf, fun, i);
1:3566843:             AssignmentTestable.TestResult argRes = provided.testAssignment(keyspace, expected);
1:3566843:             if (argRes == AssignmentTestable.TestResult.NOT_ASSIGNABLE)
1:3566843:                 return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:3566843:             if (argRes == AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE)
1:3566843:                 res = AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:3566843:         }
1:3566843:         return res;
1:3566843:     }
1:3566843: 
1:3566843:     private static String format(Collection<Function> funs)
1:3566843:     {
1:3566843:         return funs.stream().map(Function::toString).collect(joining(", "));
1:3566843:     }
1:3566843: }
============================================================================
author:blerer
-------------------------------------------------------------------------------
commit:269c5d4
/////////////////////////////////////////////////////////////////////////
1:         if (compatibles == null)
1:         {
1:         }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3566843
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: import static java.util.stream.Collectors.joining;
1: 
1: public final class FunctionResolver
1: {
1:     private FunctionResolver()
1:     {
1:     }
1: 
1:     // We special case the token function because that's the only function whose argument types actually
1:     // depend on the table on which the function is called. Because it's the sole exception, it's easier
1:     // to handle it as a special case.
1:     private static final FunctionName TOKEN_FUNCTION_NAME = FunctionName.nativeFunction("token");
1: 
1:     public static ColumnSpecification makeArgSpec(String receiverKs, String receiverCf, Function fun, int i)
1:     {
1:         return new ColumnSpecification(receiverKs,
1:                                        receiverCf,
1:                                        new ColumnIdentifier("arg" + i + '(' + fun.name().toString().toLowerCase() + ')', true),
1:                                        fun.argTypes().get(i));
1:     }
1: 
1:     /**
1:      * @param keyspace the current keyspace
1:      * @param name the name of the function
1:      * @param providedArgs the arguments provided for the function call
1:      * @param receiverKs the receiver's keyspace
1:      * @param receiverCf the receiver's table
1:      * @param receiverType if the receiver type is known (during inserts, for example), this should be the type of
1:      *                     the receiver
1:      * @throws InvalidRequestException
1:      */
1:     public static Function get(String keyspace,
1:                                FunctionName name,
1:                                List<? extends AssignmentTestable> providedArgs,
1:                                String receiverKs,
1:                                String receiverCf,
1:                                AbstractType<?> receiverType)
1:     throws InvalidRequestException
1:     {
1:         if (name.equalsNativeFunction(TOKEN_FUNCTION_NAME))
1:             return new TokenFct(Schema.instance.getCFMetaData(receiverKs, receiverCf));
1: 
1:         // The toJson() function can accept any type of argument, so instances of it are not pre-declared.  Instead,
1:         // we create new instances as needed while handling selectors (which is the only place that toJson() is supported,
1:         // due to needing to know the argument types in advance).
1:         if (name.equalsNativeFunction(ToJsonFct.NAME))
1:             throw new InvalidRequestException("toJson() may only be used within the selection clause of SELECT statements");
1: 
1:         // Similarly, we can only use fromJson when we know the receiver type (such as inserts)
1:         if (name.equalsNativeFunction(FromJsonFct.NAME))
1:         {
1:             if (receiverType == null)
1:                 throw new InvalidRequestException("fromJson() cannot be used in the selection clause of a SELECT statement");
1:             return FromJsonFct.getInstance(receiverType);
1:         }
1: 
1:         Collection<Function> candidates;
1:         if (!name.hasKeyspace())
1:         {
1:             // function name not fully qualified
1:             candidates = new ArrayList<>();
1:             // add 'SYSTEM' (native) candidates
1:             candidates.addAll(Schema.instance.getFunctions(name.asNativeFunction()));
1:             // add 'current keyspace' candidates
1:             candidates.addAll(Schema.instance.getFunctions(new FunctionName(keyspace, name.name)));
1:         }
1:         else
1:         {
1:             // function name is fully qualified (keyspace + name)
1:             candidates = Schema.instance.getFunctions(name);
1:         }
1: 
1:         if (candidates.isEmpty())
1:             return null;
1: 
1:         // Fast path if there is only one choice
1:         if (candidates.size() == 1)
1:         {
1:             Function fun = candidates.iterator().next();
1:             validateTypes(keyspace, fun, providedArgs, receiverKs, receiverCf);
1:             return fun;
1:         }
1: 
1:         List<Function> compatibles = null;
1:         for (Function toTest : candidates)
1:         {
1:             AssignmentTestable.TestResult r = matchAguments(keyspace, toTest, providedArgs, receiverKs, receiverCf);
1:             switch (r)
1:             {
1:                 case EXACT_MATCH:
1:                     // We always favor exact matches
1:                     return toTest;
1:                 case WEAKLY_ASSIGNABLE:
1:                     if (compatibles == null)
1:                         compatibles = new ArrayList<>();
1:                     compatibles.add(toTest);
1:                     break;
1:             }
1:         }
1: 
0:         if (compatibles == null || compatibles.isEmpty())
1:             throw new InvalidRequestException(String.format("Invalid call to function %s, none of its type signatures match (known type signatures: %s)",
1:                                                             name, format(candidates)));
1: 
1:         if (compatibles.size() > 1)
1:             throw new InvalidRequestException(String.format("Ambiguous call to function %s (can be matched by following signatures: %s): use type casts to disambiguate",
1:                         name, format(compatibles)));
1: 
1:         return compatibles.get(0);
1:     }
1: 
1:     // This method and matchArguments are somewhat duplicate, but this method allows us to provide more precise errors in the common
1:     // case where there is no override for a given function. This is thus probably worth the minor code duplication.
1:     private static void validateTypes(String keyspace,
1:                                       Function fun,
1:                                       List<? extends AssignmentTestable> providedArgs,
1:                                       String receiverKs,
1:                                       String receiverCf)
1:     throws InvalidRequestException
1:     {
1:         if (providedArgs.size() != fun.argTypes().size())
1:             throw new InvalidRequestException(String.format("Invalid number of arguments in call to function %s: %d required but %d provided", fun.name(), fun.argTypes().size(), providedArgs.size()));
1: 
1:         for (int i = 0; i < providedArgs.size(); i++)
1:         {
1:             AssignmentTestable provided = providedArgs.get(i);
1: 
1:             // If the concrete argument is a bind variables, it can have any type.
1:             // We'll validate the actually provided value at execution time.
1:             if (provided == null)
1:                 continue;
1: 
1:             ColumnSpecification expected = makeArgSpec(receiverKs, receiverCf, fun, i);
1:             if (!provided.testAssignment(keyspace, expected).isAssignable())
1:                 throw new InvalidRequestException(String.format("Type error: %s cannot be passed as argument %d of function %s of type %s", provided, i, fun.name(), expected.type.asCQL3Type()));
1:         }
1:     }
1: 
1:     private static AssignmentTestable.TestResult matchAguments(String keyspace,
1:                                                                Function fun,
1:                                                                List<? extends AssignmentTestable> providedArgs,
1:                                                                String receiverKs,
1:                                                                String receiverCf)
1:     {
1:         if (providedArgs.size() != fun.argTypes().size())
1:             return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1: 
1:         // It's an exact match if all are exact match, but is not assignable as soon as any is non assignable.
1:         AssignmentTestable.TestResult res = AssignmentTestable.TestResult.EXACT_MATCH;
1:         for (int i = 0; i < providedArgs.size(); i++)
1:         {
1:             AssignmentTestable provided = providedArgs.get(i);
1:             if (provided == null)
1:             {
1:                 res = AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:                 continue;
1:             }
1: 
1:             ColumnSpecification expected = makeArgSpec(receiverKs, receiverCf, fun, i);
1:             AssignmentTestable.TestResult argRes = provided.testAssignment(keyspace, expected);
1:             if (argRes == AssignmentTestable.TestResult.NOT_ASSIGNABLE)
1:                 return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:             if (argRes == AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE)
1:                 res = AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:         }
1:         return res;
1:     }
1: 
1:     private static String format(Collection<Function> funs)
1:     {
1:         return funs.stream().map(Function::toString).collect(joining(", "));
1:     }
1: }
============================================================================