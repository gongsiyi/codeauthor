1:2457599: /*
1:2457599:  * Licensed to the Apache Software Foundation (ASF) under one
1:2457599:  * or more contributor license agreements.  See the NOTICE file
1:2457599:  * distributed with this work for additional information
1:2457599:  * regarding copyright ownership.  The ASF licenses this file
1:2457599:  * to you under the Apache License, Version 2.0 (the
1:2457599:  * "License"); you may not use this file except in compliance
1:2457599:  * with the License.  You may obtain a copy of the License at
1:2457599:  *
1:2457599:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2457599:  *
1:2457599:  * Unless required by applicable law or agreed to in writing, software
1:2457599:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2457599:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2457599:  * See the License for the specific language governing permissions and
1:2457599:  * limitations under the License.
1:2457599:  */
1:2457599: package org.apache.cassandra.db.rows;
1:2457599: 
1:2457599: import org.apache.cassandra.config.ColumnDefinition;
1:2457599: import org.apache.cassandra.db.*;
1:2457599: 
1:2457599: /**
1:2457599:  * Interface that allows to act on the result of merging multiple rows.
1:2457599:  *
1:fe7eee0:  * More precisely, given N rows and the result of merging them, one can call {@link Rows#diff(RowDiffListener, Row, Row...)}
1:2457599:  * with a {@code RowDiffListener} and that listener will be informed for each input row of the diff between
1:2457599:  * that input and merge row.
1:2457599:  */
1:2457599: public interface RowDiffListener
1:2457599: {
1:2457599:     /**
1:2457599:      * Called for the row primary key liveness info of input {@code i}.
1:2457599:      *
1:2457599:      * @param i the input row from which {@code original} is from.
1:2457599:      * @param clustering the clustering for the row that is merged.
1:2457599:      * @param merged the primary key liveness info of the merged row. Will be {@code null} if input {@code i} had
1:2457599:      * a {@code LivenessInfo}, but the merged result don't (i.e. the original info has been shadowed/deleted).
1:2457599:      * @param original the primary key liveness info of input {@code i}. May be {@code null} if input {@code i}
1:2457599:      * has not primary key liveness info (i.e. it has {@code LivenessInfo.NONE}) but the merged result has.
1:2457599:      */
1:2457599:     public void onPrimaryKeyLivenessInfo(int i, Clustering clustering, LivenessInfo merged, LivenessInfo original);
1:2457599: 
1:2457599:     /**
1:2457599:      * Called for the row deletion of input {@code i}.
1:2457599:      *
1:2457599:      * @param i the input row from which {@code original} is from.
1:2457599:      * @param clustering the clustering for the row that is merged.
1:2457599:      * @param merged the deletion of the merged row. Will be {@code null} if input {@code i} had deletion
1:2457599:      * but the merged result doesn't (i.e. the deletion has been shadowed).
1:2457599:      * @param original the deletion of input {@code i}. May be {@code null} if input {@code i} had no deletion but the merged row has.
1:2457599:      */
1:665f747:     public void onDeletion(int i, Clustering clustering, Row.Deletion merged, Row.Deletion original);
1:2457599: 
1:2457599:     /**
1:2457599:      * Called for every (non-live) complex deletion of any complex column present in either the merged row of input {@code i}.
1:2457599:      *
1:2457599:      * @param i the input row from which {@code original} is from.
1:2457599:      * @param clustering the clustering for the row that is merged.
1:2457599:      * @param column the column for which this is a complex deletion of.
1:2457599:      * @param merged the complex deletion of the merged row. Will be {@code null} if input {@code i} had a complex deletion
1:2457599:      * for {@code column} but the merged result doesn't (i.e. the deletion has been shadowed).
1:2457599:      * @param original the complex deletion of input {@code i} for column {@code column}. May be {@code null} if input {@code i}
1:2457599:      * had no complex deletion but the merged row has.
1:2457599:      */
1:2457599:     public void onComplexDeletion(int i, Clustering clustering, ColumnDefinition column, DeletionTime merged, DeletionTime original);
1:2457599: 
1:2457599:     /**
1:2457599:      * Called for any cell that is either in the merged row or in input {@code i}.
1:2457599:      *
1:2457599:      * @param i the input row from which {@code original} is from.
1:2457599:      * @param clustering the clustering for the row that is merged.
1:2457599:      * @param merged the cell of the merged row. Will be {@code null} if input {@code i} had a cell but that cell is no present
1:86ba227:      * in the merged result (it has been deleted/shadowed).
1:2457599:      * @param original the cell of input {@code i}. May be {@code null} if input {@code i} had cell corresponding to {@code merged}.
1:2457599:      */
1:2457599:     public void onCell(int i, Clustering clustering, Cell merged, Cell original);
1:2457599: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a87fd71
commit:86ba227
/////////////////////////////////////////////////////////////////////////
1:      * in the merged result (it has been deleted/shadowed).
commit:665f747
/////////////////////////////////////////////////////////////////////////
1:     public void onDeletion(int i, Clustering clustering, Row.Deletion merged, Row.Deletion original);
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * Interface that allows to act on the result of merging multiple rows.
1:  *
0:  * More precisely, given N rows and the result of merging them, one can call {@link Rows#diff()}
1:  * with a {@code RowDiffListener} and that listener will be informed for each input row of the diff between
1:  * that input and merge row.
1:  */
1: public interface RowDiffListener
1: {
1:     /**
1:      * Called for the row primary key liveness info of input {@code i}.
1:      *
1:      * @param i the input row from which {@code original} is from.
1:      * @param clustering the clustering for the row that is merged.
1:      * @param merged the primary key liveness info of the merged row. Will be {@code null} if input {@code i} had
1:      * a {@code LivenessInfo}, but the merged result don't (i.e. the original info has been shadowed/deleted).
1:      * @param original the primary key liveness info of input {@code i}. May be {@code null} if input {@code i}
1:      * has not primary key liveness info (i.e. it has {@code LivenessInfo.NONE}) but the merged result has.
1:      */
1:     public void onPrimaryKeyLivenessInfo(int i, Clustering clustering, LivenessInfo merged, LivenessInfo original);
1: 
1:     /**
1:      * Called for the row deletion of input {@code i}.
1:      *
1:      * @param i the input row from which {@code original} is from.
1:      * @param clustering the clustering for the row that is merged.
1:      * @param merged the deletion of the merged row. Will be {@code null} if input {@code i} had deletion
1:      * but the merged result doesn't (i.e. the deletion has been shadowed).
1:      * @param original the deletion of input {@code i}. May be {@code null} if input {@code i} had no deletion but the merged row has.
1:      */
0:     public void onDeletion(int i, Clustering clustering, DeletionTime merged, DeletionTime original);
1: 
1:     /**
1:      * Called for every (non-live) complex deletion of any complex column present in either the merged row of input {@code i}.
1:      *
1:      * @param i the input row from which {@code original} is from.
1:      * @param clustering the clustering for the row that is merged.
1:      * @param column the column for which this is a complex deletion of.
1:      * @param merged the complex deletion of the merged row. Will be {@code null} if input {@code i} had a complex deletion
1:      * for {@code column} but the merged result doesn't (i.e. the deletion has been shadowed).
1:      * @param original the complex deletion of input {@code i} for column {@code column}. May be {@code null} if input {@code i}
1:      * had no complex deletion but the merged row has.
1:      */
1:     public void onComplexDeletion(int i, Clustering clustering, ColumnDefinition column, DeletionTime merged, DeletionTime original);
1: 
1:     /**
1:      * Called for any cell that is either in the merged row or in input {@code i}.
1:      *
1:      * @param i the input row from which {@code original} is from.
1:      * @param clustering the clustering for the row that is merged.
1:      * @param merged the cell of the merged row. Will be {@code null} if input {@code i} had a cell but that cell is no present
0:      * in the mergd result (it has been deleted/shadowed).
1:      * @param original the cell of input {@code i}. May be {@code null} if input {@code i} had cell corresponding to {@code merged}.
1:      */
1:     public void onCell(int i, Clustering clustering, Cell merged, Cell original);
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:fe7eee0
/////////////////////////////////////////////////////////////////////////
1:  * More precisely, given N rows and the result of merging them, one can call {@link Rows#diff(RowDiffListener, Row, Row...)}
============================================================================