1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.filter;
6:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.marshal.ReversedType;
1:2457599: import org.apache.cassandra.io.util.DataInputPlus;
1:a991b64: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: 
1:a991b64: public abstract class AbstractClusteringIndexFilter implements ClusteringIndexFilter
4:a991b64: {
1:a991b64:     static final Serializer serializer = new FilterSerializer();
1:a991b64: 
1:a991b64:     protected final boolean reversed;
1:a991b64: 
1:a991b64:     protected AbstractClusteringIndexFilter(boolean reversed)
1:a991b64:     {
1:a991b64:         this.reversed = reversed;
4:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isReversed()
1:a991b64:     {
1:a991b64:         return reversed;
1:a991b64:     }
1:a991b64: 
1:a991b64:     protected abstract void serializeInternal(DataOutputPlus out, int version) throws IOException;
1:03f72ac:     protected abstract long serializedSizeInternal(int version);
1:a991b64: 
1:a991b64:     protected void appendOrderByToCQLString(CFMetaData metadata, StringBuilder sb)
1:a991b64:     {
1:a991b64:         if (reversed)
1:a991b64:         {
1:a991b64:             sb.append(" ORDER BY (");
1:a991b64:             int i = 0;
1:a991b64:             for (ColumnDefinition column : metadata.clusteringColumns())
1:a991b64:                 sb.append(i++ == 0 ? "" : ", ").append(column.name).append(column.type instanceof ReversedType ? " ASC" : " DESC");
1:2457599:             sb.append(')');
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     private static class FilterSerializer implements Serializer
1:a991b64:     {
1:a991b64:         public void serialize(ClusteringIndexFilter pfilter, DataOutputPlus out, int version) throws IOException
1:a991b64:         {
1:a991b64:             AbstractClusteringIndexFilter filter = (AbstractClusteringIndexFilter)pfilter;
1:a991b64: 
1:a991b64:             out.writeByte(filter.kind().ordinal());
1:a991b64:             out.writeBoolean(filter.isReversed());
1:a991b64: 
1:a991b64:             filter.serializeInternal(out, version);
1:a991b64:         }
1:a991b64: 
1:2457599:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata) throws IOException
1:a991b64:         {
1:a991b64:             Kind kind = Kind.values()[in.readUnsignedByte()];
1:a991b64:             boolean reversed = in.readBoolean();
1:a991b64: 
1:a991b64:             return kind.deserializer.deserialize(in, version, metadata, reversed);
1:a991b64:         }
1:a991b64: 
1:a991b64:         public long serializedSize(ClusteringIndexFilter pfilter, int version)
1:a991b64:         {
1:a991b64:             AbstractClusteringIndexFilter filter = (AbstractClusteringIndexFilter)pfilter;
1:a991b64: 
1:a991b64:             return 1
1:03f72ac:                  + TypeSizes.sizeof(filter.isReversed())
1:03f72ac:                  + filter.serializedSizeInternal(version);
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:8c64cef
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:             sb.append(')');
/////////////////////////////////////////////////////////////////////////
1:         public ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata) throws IOException
/////////////////////////////////////////////////////////////////////////
0:         public abstract ClusteringIndexFilter deserialize(DataInputPlus in, int version, CFMetaData metadata, boolean reversed) throws IOException;
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.filter;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.ReversedType;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: public abstract class AbstractClusteringIndexFilter implements ClusteringIndexFilter
1: {
0:     protected enum Kind
1:     {
0:         SLICE (ClusteringIndexSliceFilter.deserializer),
0:         NAMES (ClusteringIndexNamesFilter.deserializer);
1: 
0:         private final InternalDeserializer deserializer;
1: 
0:         private Kind(InternalDeserializer deserializer)
1:         {
0:             this.deserializer = deserializer;
1:         }
1:     }
1: 
1:     static final Serializer serializer = new FilterSerializer();
1: 
0:     abstract Kind kind();
1: 
1:     protected final boolean reversed;
1: 
1:     protected AbstractClusteringIndexFilter(boolean reversed)
1:     {
1:         this.reversed = reversed;
1:     }
1: 
1:     public boolean isReversed()
1:     {
1:         return reversed;
1:     }
1: 
1:     protected abstract void serializeInternal(DataOutputPlus out, int version) throws IOException;
0:     protected abstract long serializedSizeInternal(int version, TypeSizes sizes);
1: 
1:     protected void appendOrderByToCQLString(CFMetaData metadata, StringBuilder sb)
1:     {
1:         if (reversed)
1:         {
1:             sb.append(" ORDER BY (");
1:             int i = 0;
1:             for (ColumnDefinition column : metadata.clusteringColumns())
1:                 sb.append(i++ == 0 ? "" : ", ").append(column.name).append(column.type instanceof ReversedType ? " ASC" : " DESC");
0:             sb.append(")");
1:         }
1:     }
1: 
1:     private static class FilterSerializer implements Serializer
1:     {
1:         public void serialize(ClusteringIndexFilter pfilter, DataOutputPlus out, int version) throws IOException
1:         {
1:             AbstractClusteringIndexFilter filter = (AbstractClusteringIndexFilter)pfilter;
1: 
1:             out.writeByte(filter.kind().ordinal());
1:             out.writeBoolean(filter.isReversed());
1: 
1:             filter.serializeInternal(out, version);
1:         }
1: 
0:         public ClusteringIndexFilter deserialize(DataInput in, int version, CFMetaData metadata) throws IOException
1:         {
1:             Kind kind = Kind.values()[in.readUnsignedByte()];
1:             boolean reversed = in.readBoolean();
1: 
1:             return kind.deserializer.deserialize(in, version, metadata, reversed);
1:         }
1: 
1:         public long serializedSize(ClusteringIndexFilter pfilter, int version)
1:         {
1:             AbstractClusteringIndexFilter filter = (AbstractClusteringIndexFilter)pfilter;
1: 
0:             TypeSizes sizes = TypeSizes.NATIVE;
1:             return 1
0:                  + sizes.sizeof(filter.isReversed())
0:                  + filter.serializedSizeInternal(version, sizes);
1:         }
1:     }
1: 
0:     protected static abstract class InternalDeserializer
1:     {
0:         public abstract ClusteringIndexFilter deserialize(DataInput in, int version, CFMetaData metadata, boolean reversed) throws IOException;
1:     }
1: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:     protected abstract long serializedSizeInternal(int version);
/////////////////////////////////////////////////////////////////////////
1:                  + TypeSizes.sizeof(filter.isReversed())
1:                  + filter.serializedSizeInternal(version);
============================================================================