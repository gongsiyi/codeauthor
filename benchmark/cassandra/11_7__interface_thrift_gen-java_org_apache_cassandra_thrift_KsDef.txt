1:930721d: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
5:201b759:  *
1:201b759:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:930721d:  */
1:201b759: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
56:201b759: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:b153d45: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:201b759: import java.util.List;
1:201b759: import java.util.ArrayList;
1:201b759: import java.util.Map;
1:201b759: import java.util.HashMap;
1:201b759: import java.util.EnumMap;
1:201b759: import java.util.Set;
1:201b759: import java.util.HashSet;
1:201b759: import java.util.EnumSet;
1:201b759: import java.util.Collections;
1:201b759: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:201b759: import java.util.Arrays;
1:201b759: import org.slf4j.Logger;
1:201b759: import org.slf4j.LoggerFactory;
1:201b759: 
1:bffd9ea: public class KsDef implements org.apache.thrift.TBase<KsDef, KsDef._Fields>, java.io.Serializable, Cloneable, Comparable<KsDef> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KsDef");
1:201b759: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField STRATEGY_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy_class", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField STRATEGY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy_options", org.apache.thrift.protocol.TType.MAP, (short)3);
1:1adcd1c:   private static final org.apache.thrift.protocol.TField REPLICATION_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_factor", org.apache.thrift.protocol.TType.I32, (short)4);
1:1adcd1c:   private static final org.apache.thrift.protocol.TField CF_DEFS_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_defs", org.apache.thrift.protocol.TType.LIST, (short)5);
1:ea6ec42:   private static final org.apache.thrift.protocol.TField DURABLE_WRITES_FIELD_DESC = new org.apache.thrift.protocol.TField("durable_writes", org.apache.thrift.protocol.TType.BOOL, (short)6);
1:201b759: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new KsDefStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new KsDefTupleSchemeFactory());
1:b153d45:   }
1:b153d45: 
1:7c8c570:   public String name; // required
1:7c8c570:   public String strategy_class; // required
1:b153d45:   public Map<String,String> strategy_options; // optional
1:1adcd1c:   /**
1:6a5c9ed:    * @deprecated ignored
1:1adcd1c:    */
1:b153d45:   public int replication_factor; // optional
1:7c8c570:   public List<CfDef> cf_defs; // required
1:b153d45:   public boolean durable_writes; // optional
1:930721d: 
1:201b759:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:201b759:     NAME((short)1, "name"),
1:201b759:     STRATEGY_CLASS((short)2, "strategy_class"),
1:f351617:     STRATEGY_OPTIONS((short)3, "strategy_options"),
1:1adcd1c:     /**
1:6a5c9ed:      * @deprecated ignored
1:1adcd1c:      */
1:1adcd1c:     REPLICATION_FACTOR((short)4, "replication_factor"),
1:ea6ec42:     CF_DEFS((short)5, "cf_defs"),
1:ea6ec42:     DURABLE_WRITES((short)6, "durable_writes");
1:c8afd76: 
1:201b759:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:c213967: 
2:201b759:     static {
1:201b759:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:201b759:         byName.put(field.getFieldName(), field);
1:930721d:       }
1:c8afd76:     }
1:c213967: 
1:1adcd1c:     /**
1:201b759:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:1adcd1c:      */
1:201b759:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // NAME
1:d849c69:           return NAME;
1:d849c69:         case 2: // STRATEGY_CLASS
1:d849c69:           return STRATEGY_CLASS;
1:f351617:         case 3: // STRATEGY_OPTIONS
1:f351617:           return STRATEGY_OPTIONS;
1:1adcd1c:         case 4: // REPLICATION_FACTOR
1:1adcd1c:           return REPLICATION_FACTOR;
1:1adcd1c:         case 5: // CF_DEFS
1:d849c69:           return CF_DEFS;
1:ea6ec42:         case 6: // DURABLE_WRITES
1:ea6ec42:           return DURABLE_WRITES;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:c8afd76:     }
1:c213967: 
1:930721d:     /**
1:201b759:      * Find the _Fields constant that matches fieldId, throwing an exception
1:201b759:      * if it is not found.
1:930721d:      */
1:201b759:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:201b759:       _Fields fields = findByThriftId(fieldId);
1:201b759:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:201b759:       return fields;
1:c8afd76:     }
1:c213967: 
1:930721d:     /**
1:201b759:      * Find the _Fields constant that matches name, or null if its not found.
1:930721d:      */
1:201b759:     public static _Fields findByName(String name) {
1:201b759:       return byName.get(name);
1:c8afd76:     }
1:c213967: 
1:201b759:     private final short _thriftId;
1:201b759:     private final String _fieldName;
1:c213967: 
1:201b759:     _Fields(short thriftId, String fieldName) {
1:201b759:       _thriftId = thriftId;
1:201b759:       _fieldName = fieldName;
1:c213967:     }
1:c213967: 
1:201b759:     public short getThriftFieldId() {
1:201b759:       return _thriftId;
1:c213967:     }
1:c213967: 
1:201b759:     public String getFieldName() {
1:201b759:       return _fieldName;
1:c213967:     }
1:c213967:   }
1:c213967: 
1:201b759:   // isset id assignments
1:1adcd1c:   private static final int __REPLICATION_FACTOR_ISSET_ID = 0;
1:930721d:   private static final int __DURABLE_WRITES_ISSET_ID = 1;
1:b153d45:   private byte __isset_bitfield = 0;
1:b153d45:   private _Fields optionals[] = {_Fields.STRATEGY_OPTIONS,_Fields.REPLICATION_FACTOR,_Fields.DURABLE_WRITES};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:d849c69:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:4ec9511:     tmpMap.put(_Fields.STRATEGY_CLASS, new org.apache.thrift.meta_data.FieldMetaData("strategy_class", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:4ec9511:     tmpMap.put(_Fields.STRATEGY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("strategy_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:4ec9511:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
1:4ec9511:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:1adcd1c:     tmpMap.put(_Fields.REPLICATION_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("replication_factor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:1adcd1c:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:4ec9511:     tmpMap.put(_Fields.CF_DEFS, new org.apache.thrift.meta_data.FieldMetaData("cf_defs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:4ec9511:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CfDef.class))));
1:ea6ec42:     tmpMap.put(_Fields.DURABLE_WRITES, new org.apache.thrift.meta_data.FieldMetaData("durable_writes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:ea6ec42:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KsDef.class, metaDataMap);
1:c213967:   }
1:c213967: 
1:201b759:   public KsDef() {
1:ea6ec42:     this.durable_writes = true;
1:ea6ec42: 
1:c213967:   }
1:201b759: 
1:201b759:   public KsDef(
1:201b759:     String name,
1:201b759:     String strategy_class,
1:201b759:     List<CfDef> cf_defs)
4:c213967:   {
1:201b759:     this();
1:201b759:     this.name = name;
1:201b759:     this.strategy_class = strategy_class;
1:201b759:     this.cf_defs = cf_defs;
1:c213967:   }
1:201b759: 
1:930721d:   /**
1:201b759:    * Performs a deep copy on <i>other</i>.
1:930721d:    */
1:201b759:   public KsDef(KsDef other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:201b759:     if (other.isSetName()) {
1:201b759:       this.name = other.name;
1:c213967:     }
1:201b759:     if (other.isSetStrategy_class()) {
1:201b759:       this.strategy_class = other.strategy_class;
1:c213967:     }
1:f351617:     if (other.isSetStrategy_options()) {
1:bffd9ea:       Map<String,String> __this__strategy_options = new HashMap<String,String>(other.strategy_options);
1:f351617:       this.strategy_options = __this__strategy_options;
1:c213967:     }
1:1adcd1c:     this.replication_factor = other.replication_factor;
1:201b759:     if (other.isSetCf_defs()) {
1:bffd9ea:       List<CfDef> __this__cf_defs = new ArrayList<CfDef>(other.cf_defs.size());
1:201b759:       for (CfDef other_element : other.cf_defs) {
1:201b759:         __this__cf_defs.add(new CfDef(other_element));
1:c213967:       }
1:201b759:       this.cf_defs = __this__cf_defs;
1:c213967:     }
1:ea6ec42:     this.durable_writes = other.durable_writes;
1:c213967:   }
1:c213967: 
1:201b759:   public KsDef deepCopy() {
2:201b759:     return new KsDef(this);
1:c213967:   }
1:201b759: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.name = null;
1:e7a385a:     this.strategy_class = null;
1:e7a385a:     this.strategy_options = null;
1:1adcd1c:     setReplication_factorIsSet(false);
1:1adcd1c:     this.replication_factor = 0;
1:e7a385a:     this.cf_defs = null;
1:ea6ec42:     this.durable_writes = true;
1:ea6ec42: 
1:c213967:   }
1:201b759: 
1:201b759:   public String getName() {
1:201b759:     return this.name;
1:c213967:   }
1:201b759: 
1:201b759:   public KsDef setName(String name) {
1:201b759:     this.name = name;
1:930721d:     return this;
1:930721d:   }
1:930721d: 
1:201b759:   public void unsetName() {
1:201b759:     this.name = null;
1:c213967:   }
1:c213967: 
1:4ec9511:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
1:201b759:   public boolean isSetName() {
1:201b759:     return this.name != null;
1:c213967:   }
1:c213967: 
1:201b759:   public void setNameIsSet(boolean value) {
1:c213967:     if (!value) {
1:201b759:       this.name = null;
1:c213967:     }
1:c213967:   }
1:c213967: 
1:201b759:   public String getStrategy_class() {
1:201b759:     return this.strategy_class;
1:c213967:   }
1:c213967: 
1:201b759:   public KsDef setStrategy_class(String strategy_class) {
1:201b759:     this.strategy_class = strategy_class;
1:c213967:     return this;
1:c213967:   }
1:c213967: 
1:201b759:   public void unsetStrategy_class() {
1:201b759:     this.strategy_class = null;
1:c213967:   }
1:c213967: 
1:4ec9511:   /** Returns true if field strategy_class is set (has been assigned a value) and false otherwise */
1:201b759:   public boolean isSetStrategy_class() {
1:201b759:     return this.strategy_class != null;
1:c213967:   }
1:c213967: 
1:201b759:   public void setStrategy_classIsSet(boolean value) {
1:c213967:     if (!value) {
1:201b759:       this.strategy_class = null;
1:c213967:     }
1:c213967:   }
1:c213967: 
1:f351617:   public int getStrategy_optionsSize() {
1:f351617:     return (this.strategy_options == null) ? 0 : this.strategy_options.size();
1:c213967:   }
1:c213967: 
1:f351617:   public void putToStrategy_options(String key, String val) {
1:f351617:     if (this.strategy_options == null) {
1:f351617:       this.strategy_options = new HashMap<String,String>();
1:c213967:     }
1:f351617:     this.strategy_options.put(key, val);
1:c213967:   }
1:c213967: 
1:f351617:   public Map<String,String> getStrategy_options() {
1:f351617:     return this.strategy_options;
1:c213967:   }
1:c213967: 
1:f351617:   public KsDef setStrategy_options(Map<String,String> strategy_options) {
1:f351617:     this.strategy_options = strategy_options;
1:c213967:     return this;
103:201b759:   }
1:201b759: 
1:f351617:   public void unsetStrategy_options() {
1:f351617:     this.strategy_options = null;
1:201b759:   }
1:201b759: 
1:4ec9511:   /** Returns true if field strategy_options is set (has been assigned a value) and false otherwise */
1:f351617:   public boolean isSetStrategy_options() {
1:f351617:     return this.strategy_options != null;
1:201b759:   }
1:201b759: 
1:f351617:   public void setStrategy_optionsIsSet(boolean value) {
3:201b759:     if (!value) {
1:f351617:       this.strategy_options = null;
1:201b759:     }
1:201b759:   }
1:201b759: 
5:201b759:   /**
1:6a5c9ed:    * @deprecated ignored
6:201b759:    */
1:1adcd1c:   public int getReplication_factor() {
1:1adcd1c:     return this.replication_factor;
1:1adcd1c:   }
1:1adcd1c: 
1:1adcd1c:   /**
1:6a5c9ed:    * @deprecated ignored
1:1adcd1c:    */
1:1adcd1c:   public KsDef setReplication_factor(int replication_factor) {
1:1adcd1c:     this.replication_factor = replication_factor;
1:1adcd1c:     setReplication_factorIsSet(true);
1:1adcd1c:     return this;
1:1adcd1c:   }
1:1adcd1c: 
1:1adcd1c:   public void unsetReplication_factor() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATION_FACTOR_ISSET_ID);
1:1adcd1c:   }
1:1adcd1c: 
1:1adcd1c:   /** Returns true if field replication_factor is set (has been assigned a value) and false otherwise */
1:1adcd1c:   public boolean isSetReplication_factor() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __REPLICATION_FACTOR_ISSET_ID);
1:1adcd1c:   }
1:1adcd1c: 
1:1adcd1c:   public void setReplication_factorIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATION_FACTOR_ISSET_ID, value);
1:1adcd1c:   }
1:1adcd1c: 
1:201b759:   public int getCf_defsSize() {
1:201b759:     return (this.cf_defs == null) ? 0 : this.cf_defs.size();
1:930721d:   }
1:930721d: 
1:201b759:   public java.util.Iterator<CfDef> getCf_defsIterator() {
1:201b759:     return (this.cf_defs == null) ? null : this.cf_defs.iterator();
1:930721d:   }
1:930721d: 
1:201b759:   public void addToCf_defs(CfDef elem) {
1:201b759:     if (this.cf_defs == null) {
1:201b759:       this.cf_defs = new ArrayList<CfDef>();
1:930721d:     }
1:201b759:     this.cf_defs.add(elem);
1:201b759:   }
1:930721d: 
1:201b759:   public List<CfDef> getCf_defs() {
1:201b759:     return this.cf_defs;
1:201b759:   }
1:201b759: 
1:201b759:   public KsDef setCf_defs(List<CfDef> cf_defs) {
1:201b759:     this.cf_defs = cf_defs;
5:201b759:     return this;
1:201b759:   }
1:201b759: 
1:201b759:   public void unsetCf_defs() {
1:201b759:     this.cf_defs = null;
1:201b759:   }
1:201b759: 
1:4ec9511:   /** Returns true if field cf_defs is set (has been assigned a value) and false otherwise */
1:201b759:   public boolean isSetCf_defs() {
1:201b759:     return this.cf_defs != null;
1:201b759:   }
1:201b759: 
1:201b759:   public void setCf_defsIsSet(boolean value) {
1:201b759:     if (!value) {
1:201b759:       this.cf_defs = null;
1:201b759:     }
1:201b759:   }
1:201b759: 
1:ea6ec42:   public boolean isDurable_writes() {
1:ea6ec42:     return this.durable_writes;
1:ea6ec42:   }
1:ea6ec42: 
1:ea6ec42:   public KsDef setDurable_writes(boolean durable_writes) {
1:ea6ec42:     this.durable_writes = durable_writes;
1:ea6ec42:     setDurable_writesIsSet(true);
1:ea6ec42:     return this;
1:ea6ec42:   }
1:ea6ec42: 
1:ea6ec42:   public void unsetDurable_writes() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURABLE_WRITES_ISSET_ID);
1:ea6ec42:   }
1:ea6ec42: 
1:ea6ec42:   /** Returns true if field durable_writes is set (has been assigned a value) and false otherwise */
1:ea6ec42:   public boolean isSetDurable_writes() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __DURABLE_WRITES_ISSET_ID);
1:ea6ec42:   }
1:ea6ec42: 
1:ea6ec42:   public void setDurable_writesIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURABLE_WRITES_ISSET_ID, value);
1:ea6ec42:   }
1:ea6ec42: 
1:201b759:   public void setFieldValue(_Fields field, Object value) {
1:201b759:     switch (field) {
1:201b759:     case NAME:
5:201b759:       if (value == null) {
1:201b759:         unsetName();
1:c213967:       } else {
1:201b759:         setName((String)value);
1:c213967:       }
1:ea6ec42:       break;
1:c213967: 
1:201b759:     case STRATEGY_CLASS:
1:930721d:       if (value == null) {
1:201b759:         unsetStrategy_class();
1:1adcd1c:       } else {
1:201b759:         setStrategy_class((String)value);
1:1adcd1c:       }
1:1adcd1c:       break;
1:c213967: 
1:f351617:     case STRATEGY_OPTIONS:
1:c213967:       if (value == null) {
1:f351617:         unsetStrategy_options();
1:930721d:       } else {
1:f351617:         setStrategy_options((Map<String,String>)value);
1:930721d:       }
1:930721d:       break;
1:201b759: 
1:1adcd1c:     case REPLICATION_FACTOR:
1:1adcd1c:       if (value == null) {
1:1adcd1c:         unsetReplication_factor();
1:1adcd1c:       } else {
1:1adcd1c:         setReplication_factor((Integer)value);
1:1adcd1c:       }
1:1adcd1c:       break;
1:1adcd1c: 
1:201b759:     case CF_DEFS:
1:c213967:       if (value == null) {
1:201b759:         unsetCf_defs();
1:930721d:       } else {
1:201b759:         setCf_defs((List<CfDef>)value);
1:930721d:       }
1:930721d:       break;
1:930721d: 
1:ea6ec42:     case DURABLE_WRITES:
1:ea6ec42:       if (value == null) {
1:ea6ec42:         unsetDurable_writes();
1:ea6ec42:       } else {
1:ea6ec42:         setDurable_writes((Boolean)value);
1:ea6ec42:       }
1:ea6ec42:       break;
1:ea6ec42: 
1:ea6ec42:     }
1:c213967:   }
1:201b759: 
1:201b759:   public Object getFieldValue(_Fields field) {
1:201b759:     switch (field) {
1:201b759:     case NAME:
1:201b759:       return getName();
1:201b759: 
1:201b759:     case STRATEGY_CLASS:
1:201b759:       return getStrategy_class();
1:201b759: 
1:f351617:     case STRATEGY_OPTIONS:
1:f351617:       return getStrategy_options();
1:1adcd1c: 
1:1adcd1c:     case REPLICATION_FACTOR:
1:930721d:       return Integer.valueOf(getReplication_factor());
1:930721d: 
1:201b759:     case CF_DEFS:
1:201b759:       return getCf_defs();
1:ea6ec42: 
1:ea6ec42:     case DURABLE_WRITES:
1:7c8c570:       return Boolean.valueOf(isDurable_writes());
1:c213967: 
1:c213967:     }
1:201b759:     throw new IllegalStateException();
1:c213967:   }
1:c213967: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:201b759:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:201b759:     switch (field) {
1:201b759:     case NAME:
1:201b759:       return isSetName();
1:201b759:     case STRATEGY_CLASS:
1:201b759:       return isSetStrategy_class();
1:f351617:     case STRATEGY_OPTIONS:
1:f351617:       return isSetStrategy_options();
1:1adcd1c:     case REPLICATION_FACTOR:
1:1adcd1c:       return isSetReplication_factor();
1:201b759:     case CF_DEFS:
1:201b759:       return isSetCf_defs();
1:ea6ec42:     case DURABLE_WRITES:
1:ea6ec42:       return isSetDurable_writes();
1:c213967:     }
1:201b759:     throw new IllegalStateException();
1:c213967:   }
1:201b759: 
1:201b759:   @Override
1:201b759:   public boolean equals(Object that) {
1:201b759:     if (that == null)
9:201b759:       return false;
1:201b759:     if (that instanceof KsDef)
1:201b759:       return this.equals((KsDef)that);
1:930721d:     return false;
1:c213967:   }
1:c213967: 
1:201b759:   public boolean equals(KsDef that) {
1:201b759:     if (that == null)
1:c213967:       return false;
1:c213967: 
1:201b759:     boolean this_present_name = true && this.isSetName();
1:201b759:     boolean that_present_name = true && that.isSetName();
1:201b759:     if (this_present_name || that_present_name) {
1:201b759:       if (!(this_present_name && that_present_name))
1:c213967:         return false;
1:201b759:       if (!this.name.equals(that.name))
1:c213967:         return false;
1:c213967:     }
1:201b759: 
1:201b759:     boolean this_present_strategy_class = true && this.isSetStrategy_class();
1:201b759:     boolean that_present_strategy_class = true && that.isSetStrategy_class();
1:201b759:     if (this_present_strategy_class || that_present_strategy_class) {
1:201b759:       if (!(this_present_strategy_class && that_present_strategy_class))
1:c213967:         return false;
1:201b759:       if (!this.strategy_class.equals(that.strategy_class))
1:201b759:         return false;
1:c213967:     }
1:201b759: 
1:f351617:     boolean this_present_strategy_options = true && this.isSetStrategy_options();
1:f351617:     boolean that_present_strategy_options = true && that.isSetStrategy_options();
1:f351617:     if (this_present_strategy_options || that_present_strategy_options) {
1:f351617:       if (!(this_present_strategy_options && that_present_strategy_options))
1:201b759:         return false;
1:f351617:       if (!this.strategy_options.equals(that.strategy_options))
1:201b759:         return false;
1:c213967:     }
1:201b759: 
1:1adcd1c:     boolean this_present_replication_factor = true && this.isSetReplication_factor();
1:1adcd1c:     boolean that_present_replication_factor = true && that.isSetReplication_factor();
1:1adcd1c:     if (this_present_replication_factor || that_present_replication_factor) {
1:1adcd1c:       if (!(this_present_replication_factor && that_present_replication_factor))
1:1adcd1c:         return false;
1:1adcd1c:       if (this.replication_factor != that.replication_factor)
1:1adcd1c:         return false;
1:1adcd1c:     }
1:1adcd1c: 
1:201b759:     boolean this_present_cf_defs = true && this.isSetCf_defs();
1:201b759:     boolean that_present_cf_defs = true && that.isSetCf_defs();
1:201b759:     if (this_present_cf_defs || that_present_cf_defs) {
1:201b759:       if (!(this_present_cf_defs && that_present_cf_defs))
1:930721d:         return false;
1:201b759:       if (!this.cf_defs.equals(that.cf_defs))
1:201b759:         return false;
1:930721d:     }
1:930721d: 
1:ea6ec42:     boolean this_present_durable_writes = true && this.isSetDurable_writes();
1:ea6ec42:     boolean that_present_durable_writes = true && that.isSetDurable_writes();
1:ea6ec42:     if (this_present_durable_writes || that_present_durable_writes) {
1:ea6ec42:       if (!(this_present_durable_writes && that_present_durable_writes))
1:ea6ec42:         return false;
1:ea6ec42:       if (this.durable_writes != that.durable_writes)
1:ea6ec42:         return false;
1:ea6ec42:     }
1:ea6ec42: 
1:201b759:     return true;
1:201b759:   }
1:201b759: 
1:201b759:   @Override
1:201b759:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_name = true && (isSetName());
1:d966ed0:     builder.append(present_name);
1:d966ed0:     if (present_name)
1:d966ed0:       builder.append(name);
1:d966ed0: 
1:d966ed0:     boolean present_strategy_class = true && (isSetStrategy_class());
1:d966ed0:     builder.append(present_strategy_class);
1:d966ed0:     if (present_strategy_class)
1:d966ed0:       builder.append(strategy_class);
1:d966ed0: 
1:d966ed0:     boolean present_strategy_options = true && (isSetStrategy_options());
1:d966ed0:     builder.append(present_strategy_options);
1:d966ed0:     if (present_strategy_options)
1:d966ed0:       builder.append(strategy_options);
1:d966ed0: 
1:1adcd1c:     boolean present_replication_factor = true && (isSetReplication_factor());
1:1adcd1c:     builder.append(present_replication_factor);
1:1adcd1c:     if (present_replication_factor)
1:1adcd1c:       builder.append(replication_factor);
1:1adcd1c: 
1:d966ed0:     boolean present_cf_defs = true && (isSetCf_defs());
1:d966ed0:     builder.append(present_cf_defs);
1:d966ed0:     if (present_cf_defs)
1:d966ed0:       builder.append(cf_defs);
1:d966ed0: 
1:ea6ec42:     boolean present_durable_writes = true && (isSetDurable_writes());
1:ea6ec42:     builder.append(present_durable_writes);
1:ea6ec42:     if (present_durable_writes)
1:ea6ec42:       builder.append(durable_writes);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:201b759:   }
1:930721d: 
1:bffd9ea:   @Override
1:201b759:   public int compareTo(KsDef other) {
1:201b759:     if (!getClass().equals(other.getClass())) {
1:201b759:       return getClass().getName().compareTo(other.getClass().getName());
1:201b759:     }
1:ea6ec42: 
1:201b759:     int lastComparison = 0;
1:201b759: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
9:201b759:     if (lastComparison != 0) {
9:201b759:       return lastComparison;
1:1adcd1c:     }
1:e7a385a:     if (isSetName()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:1adcd1c:       if (lastComparison != 0) {
1:1adcd1c:         return lastComparison;
1:930721d:       }
1:ea6ec42:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetStrategy_class()).compareTo(other.isSetStrategy_class());
1:930721d:     if (lastComparison != 0) {
1:930721d:       return lastComparison;
1:c213967:     }
1:e7a385a:     if (isSetStrategy_class()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_class, other.strategy_class);
1:ea6ec42:       if (lastComparison != 0) {
1:ea6ec42:         return lastComparison;
1:c213967:       }
1:c213967:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetStrategy_options()).compareTo(other.isSetStrategy_options());
1:c213967:     if (lastComparison != 0) {
1:c213967:       return lastComparison;
1:c213967:     }
1:e7a385a:     if (isSetStrategy_options()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_options, other.strategy_options);
1:c213967:       if (lastComparison != 0) {
1:c213967:         return lastComparison;
1:c213967:       }
1:c213967:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetReplication_factor()).compareTo(other.isSetReplication_factor());
1:c213967:     if (lastComparison != 0) {
1:c213967:       return lastComparison;
1:201b759:     }
1:1adcd1c:     if (isSetReplication_factor()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_factor, other.replication_factor);
1:1adcd1c:       if (lastComparison != 0) {
1:1adcd1c:         return lastComparison;
1:1adcd1c:       }
1:1adcd1c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCf_defs()).compareTo(other.isSetCf_defs());
1:930721d:     if (lastComparison != 0) {
1:930721d:       return lastComparison;
1:930721d:     }
1:e7a385a:     if (isSetCf_defs()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_defs, other.cf_defs);
1:c213967:       if (lastComparison != 0) {
1:c213967:         return lastComparison;
1:930721d:       }
1:930721d:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetDurable_writes()).compareTo(other.isSetDurable_writes());
1:201b759:     if (lastComparison != 0) {
1:201b759:       return lastComparison;
1:201b759:     }
1:ea6ec42:     if (isSetDurable_writes()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durable_writes, other.durable_writes);
1:ea6ec42:       if (lastComparison != 0) {
1:ea6ec42:         return lastComparison;
1:ea6ec42:       }
1:ea6ec42:     }
2:201b759:     return 0;
1:ea6ec42:   }
1:201b759: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:201b759:   }
1:201b759: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:201b759:   }
1:201b759: 
1:201b759:   @Override
1:201b759:   public String toString() {
1:201b759:     StringBuilder sb = new StringBuilder("KsDef(");
1:201b759:     boolean first = true;
1:201b759: 
1:201b759:     sb.append("name:");
1:201b759:     if (this.name == null) {
3:201b759:       sb.append("null");
1:ea6ec42:     } else {
1:201b759:       sb.append(this.name);
1:c213967:     }
5:201b759:     first = false;
1:1adcd1c:     if (!first) sb.append(", ");
1:201b759:     sb.append("strategy_class:");
1:201b759:     if (this.strategy_class == null) {
1:c213967:       sb.append("null");
1:c213967:     } else {
1:201b759:       sb.append(this.strategy_class);
1:930721d:     }
1:930721d:     first = false;
1:f351617:     if (isSetStrategy_options()) {
1:930721d:       if (!first) sb.append(", ");
1:f351617:       sb.append("strategy_options:");
1:f351617:       if (this.strategy_options == null) {
1:c213967:         sb.append("null");
1:c213967:       } else {
1:f351617:         sb.append(this.strategy_options);
1:c213967:       }
1:c213967:       first = false;
1:c213967:     }
1:1adcd1c:     if (isSetReplication_factor()) {
1:c213967:       if (!first) sb.append(", ");
1:1adcd1c:       sb.append("replication_factor:");
1:1adcd1c:       sb.append(this.replication_factor);
1:1adcd1c:       first = false;
1:1adcd1c:     }
1:c213967:     if (!first) sb.append(", ");
1:201b759:     sb.append("cf_defs:");
1:201b759:     if (this.cf_defs == null) {
1:201b759:       sb.append("null");
1:c213967:     } else {
1:201b759:       sb.append(this.cf_defs);
1:c213967:     }
1:c213967:     first = false;
1:ea6ec42:     if (isSetDurable_writes()) {
1:ea6ec42:       if (!first) sb.append(", ");
1:ea6ec42:       sb.append("durable_writes:");
1:ea6ec42:       sb.append(this.durable_writes);
1:ea6ec42:       first = false;
1:ea6ec42:     }
1:201b759:     sb.append(")");
1:201b759:     return sb.toString();
1:201b759:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:201b759:     // check for required fields
1:201b759:     if (name == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:4ec9511:     }
1:201b759:     if (strategy_class == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'strategy_class' was not present! Struct: " + toString());
1:4ec9511:     }
1:201b759:     if (cf_defs == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'cf_defs' was not present! Struct: " + toString());
1:4ec9511:     }
1:b153d45:     // check for sub-struct validity
1:4ec9511:   }
1:4ec9511: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class KsDefStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public KsDefStandardScheme getScheme() {
1:b153d45:       return new KsDefStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class KsDefStandardScheme extends StandardScheme<KsDef> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, KsDef struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:b153d45:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b153d45:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:b153d45:           case 1: // NAME
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.name = iprot.readString();
1:b153d45:               struct.setNameIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 2: // STRATEGY_CLASS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.strategy_class = iprot.readString();
1:b153d45:               struct.setStrategy_classIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 3: // STRATEGY_OPTIONS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:b153d45:               {
1:a965977:                 org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin();
1:a965977:                 struct.strategy_options = new HashMap<String,String>(2*_map146.size);
1:a965977:                 for (int _i147 = 0; _i147 < _map146.size; ++_i147)
1:b153d45:                 {
1:bffd9ea:                   String _key148;
1:bffd9ea:                   String _val149;
1:a965977:                   _key148 = iprot.readString();
1:a965977:                   _val149 = iprot.readString();
1:a965977:                   struct.strategy_options.put(_key148, _val149);
1:b153d45:                 }
1:b153d45:                 iprot.readMapEnd();
1:b153d45:               }
1:b153d45:               struct.setStrategy_optionsIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:1adcd1c:           case 4: // REPLICATION_FACTOR
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.replication_factor = iprot.readI32();
1:b153d45:               struct.setReplication_factorIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:1adcd1c:           case 5: // CF_DEFS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:b153d45:               {
1:a965977:                 org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
1:a965977:                 struct.cf_defs = new ArrayList<CfDef>(_list150.size);
1:a965977:                 for (int _i151 = 0; _i151 < _list150.size; ++_i151)
1:b153d45:                 {
1:bffd9ea:                   CfDef _elem152;
1:a965977:                   _elem152 = new CfDef();
1:a965977:                   _elem152.read(iprot);
1:a965977:                   struct.cf_defs.add(_elem152);
1:b153d45:                 }
1:b153d45:                 iprot.readListEnd();
1:b153d45:               }
1:b153d45:               struct.setCf_defsIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 6: // DURABLE_WRITES
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:b153d45:               struct.durable_writes = iprot.readBool();
1:b153d45:               struct.setDurable_writesIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:b153d45:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:b153d45:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, KsDef struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:b153d45:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.name != null) {
1:b153d45:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.name);
2:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.strategy_class != null) {
1:b153d45:         oprot.writeFieldBegin(STRATEGY_CLASS_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.strategy_class);
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.strategy_options != null) {
1:b153d45:         if (struct.isSetStrategy_options()) {
1:b153d45:           oprot.writeFieldBegin(STRATEGY_OPTIONS_FIELD_DESC);
1:b153d45:           {
1:b153d45:             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.strategy_options.size()));
1:a965977:             for (Map.Entry<String, String> _iter153 : struct.strategy_options.entrySet())
1:b153d45:             {
1:a965977:               oprot.writeString(_iter153.getKey());
1:a965977:               oprot.writeString(_iter153.getValue());
1:b153d45:             }
1:b153d45:             oprot.writeMapEnd();
1:b153d45:           }
1:b153d45:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.isSetReplication_factor()) {
1:1adcd1c:         oprot.writeFieldBegin(REPLICATION_FACTOR_FIELD_DESC);
1:b153d45:         oprot.writeI32(struct.replication_factor);
1:1adcd1c:         oprot.writeFieldEnd();
1:1adcd1c:       }
1:b153d45:       if (struct.cf_defs != null) {
1:b153d45:         oprot.writeFieldBegin(CF_DEFS_FIELD_DESC);
1:b153d45:         {
1:b153d45:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cf_defs.size()));
1:a965977:           for (CfDef _iter154 : struct.cf_defs)
1:b153d45:           {
1:a965977:             _iter154.write(oprot);
1:b153d45:           }
1:b153d45:           oprot.writeListEnd();
1:b153d45:         }
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.isSetDurable_writes()) {
1:b153d45:         oprot.writeFieldBegin(DURABLE_WRITES_FIELD_DESC);
1:b153d45:         oprot.writeBool(struct.durable_writes);
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:b153d45:     }
1:b153d45: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class KsDefTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public KsDefTupleScheme getScheme() {
1:b153d45:       return new KsDefTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class KsDefTupleScheme extends TupleScheme<KsDef> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, KsDef struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeString(struct.name);
1:b153d45:       oprot.writeString(struct.strategy_class);
1:b153d45:       {
1:b153d45:         oprot.writeI32(struct.cf_defs.size());
1:a965977:         for (CfDef _iter155 : struct.cf_defs)
1:b153d45:         {
1:a965977:           _iter155.write(oprot);
1:b153d45:         }
1:b153d45:       }
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetStrategy_options()) {
1:b153d45:         optionals.set(0);
1:b153d45:       }
1:b153d45:       if (struct.isSetReplication_factor()) {
1:b153d45:         optionals.set(1);
1:b153d45:       }
1:b153d45:       if (struct.isSetDurable_writes()) {
1:b153d45:         optionals.set(2);
1:b153d45:       }
1:b153d45:       oprot.writeBitSet(optionals, 3);
1:b153d45:       if (struct.isSetStrategy_options()) {
1:b153d45:         {
1:b153d45:           oprot.writeI32(struct.strategy_options.size());
1:a965977:           for (Map.Entry<String, String> _iter156 : struct.strategy_options.entrySet())
1:b153d45:           {
1:a965977:             oprot.writeString(_iter156.getKey());
1:a965977:             oprot.writeString(_iter156.getValue());
1:b153d45:           }
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.isSetReplication_factor()) {
1:b153d45:         oprot.writeI32(struct.replication_factor);
1:b153d45:       }
1:b153d45:       if (struct.isSetDurable_writes()) {
1:b153d45:         oprot.writeBool(struct.durable_writes);
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, KsDef struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.name = iprot.readString();
1:b153d45:       struct.setNameIsSet(true);
1:b153d45:       struct.strategy_class = iprot.readString();
1:b153d45:       struct.setStrategy_classIsSet(true);
1:b153d45:       {
1:a965977:         org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:a965977:         struct.cf_defs = new ArrayList<CfDef>(_list157.size);
1:a965977:         for (int _i158 = 0; _i158 < _list157.size; ++_i158)
1:b153d45:         {
1:bffd9ea:           CfDef _elem159;
1:a965977:           _elem159 = new CfDef();
1:a965977:           _elem159.read(iprot);
1:a965977:           struct.cf_defs.add(_elem159);
1:b153d45:         }
1:b153d45:       }
1:b153d45:       struct.setCf_defsIsSet(true);
1:b153d45:       BitSet incoming = iprot.readBitSet(3);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         {
1:a965977:           org.apache.thrift.protocol.TMap _map160 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:a965977:           struct.strategy_options = new HashMap<String,String>(2*_map160.size);
1:a965977:           for (int _i161 = 0; _i161 < _map160.size; ++_i161)
1:b153d45:           {
1:bffd9ea:             String _key162;
1:bffd9ea:             String _val163;
1:a965977:             _key162 = iprot.readString();
1:a965977:             _val163 = iprot.readString();
1:a965977:             struct.strategy_options.put(_key162, _val163);
1:b153d45:           }
1:b153d45:         }
1:b153d45:         struct.setStrategy_optionsIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.replication_factor = iprot.readI32();
1:b153d45:         struct.setReplication_factorIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         struct.durable_writes = iprot.readBool();
1:b153d45:         struct.setDurable_writesIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:c8afd76: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class KsDef implements org.apache.thrift.TBase<KsDef, KsDef._Fields>, java.io.Serializable, Cloneable, Comparable<KsDef> {
/////////////////////////////////////////////////////////////////////////
1:       Map<String,String> __this__strategy_options = new HashMap<String,String>(other.strategy_options);
1:       List<CfDef> __this__cf_defs = new ArrayList<CfDef>(other.cf_defs.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:     lastComparison = Boolean.valueOf(isSetStrategy_class()).compareTo(other.isSetStrategy_class());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_class, other.strategy_class);
1:     lastComparison = Boolean.valueOf(isSetStrategy_options()).compareTo(other.isSetStrategy_options());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_options, other.strategy_options);
1:     lastComparison = Boolean.valueOf(isSetReplication_factor()).compareTo(other.isSetReplication_factor());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_factor, other.replication_factor);
1:     lastComparison = Boolean.valueOf(isSetCf_defs()).compareTo(other.isSetCf_defs());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_defs, other.cf_defs);
1:     lastComparison = Boolean.valueOf(isSetDurable_writes()).compareTo(other.isSetDurable_writes());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durable_writes, other.durable_writes);
/////////////////////////////////////////////////////////////////////////
1:                   String _key148;
1:                   String _val149;
/////////////////////////////////////////////////////////////////////////
1:                   CfDef _elem152;
/////////////////////////////////////////////////////////////////////////
1:           CfDef _elem159;
/////////////////////////////////////////////////////////////////////////
1:             String _key162;
1:             String _val163;
commit:a965977
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin();
1:                 struct.strategy_options = new HashMap<String,String>(2*_map146.size);
1:                 for (int _i147 = 0; _i147 < _map146.size; ++_i147)
0:                   String _key148; // optional
0:                   String _val149; // required
1:                   _key148 = iprot.readString();
1:                   _val149 = iprot.readString();
1:                   struct.strategy_options.put(_key148, _val149);
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
1:                 struct.cf_defs = new ArrayList<CfDef>(_list150.size);
1:                 for (int _i151 = 0; _i151 < _list150.size; ++_i151)
0:                   CfDef _elem152; // required
1:                   _elem152 = new CfDef();
1:                   _elem152.read(iprot);
1:                   struct.cf_defs.add(_elem152);
/////////////////////////////////////////////////////////////////////////
1:             for (Map.Entry<String, String> _iter153 : struct.strategy_options.entrySet())
1:               oprot.writeString(_iter153.getKey());
1:               oprot.writeString(_iter153.getValue());
/////////////////////////////////////////////////////////////////////////
1:           for (CfDef _iter154 : struct.cf_defs)
1:             _iter154.write(oprot);
/////////////////////////////////////////////////////////////////////////
1:         for (CfDef _iter155 : struct.cf_defs)
1:           _iter155.write(oprot);
/////////////////////////////////////////////////////////////////////////
1:           for (Map.Entry<String, String> _iter156 : struct.strategy_options.entrySet())
1:             oprot.writeString(_iter156.getKey());
1:             oprot.writeString(_iter156.getValue());
/////////////////////////////////////////////////////////////////////////
1:         org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:         struct.cf_defs = new ArrayList<CfDef>(_list157.size);
1:         for (int _i158 = 0; _i158 < _list157.size; ++_i158)
0:           CfDef _elem159; // required
1:           _elem159 = new CfDef();
1:           _elem159.read(iprot);
1:           struct.cf_defs.add(_elem159);
1:           org.apache.thrift.protocol.TMap _map160 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:           struct.strategy_options = new HashMap<String,String>(2*_map160.size);
1:           for (int _i161 = 0; _i161 < _map160.size; ++_i161)
0:             String _key162; // optional
0:             String _val163; // required
1:             _key162 = iprot.readString();
1:             _val163 = iprot.readString();
1:             struct.strategy_options.put(_key162, _val163);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
0:                   String _key148; // required
/////////////////////////////////////////////////////////////////////////
0:             String _key162; // required
commit:bfe1e1c
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map148 = iprot.readMapBegin();
0:                 struct.strategy_options = new HashMap<String,String>(2*_map148.size);
0:                 for (int _i149 = 0; _i149 < _map148.size; ++_i149)
0:                   String _key150; // required
0:                   String _val151; // required
0:                   _key150 = iprot.readString();
0:                   _val151 = iprot.readString();
0:                   struct.strategy_options.put(_key150, _val151);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
0:                 struct.cf_defs = new ArrayList<CfDef>(_list152.size);
0:                 for (int _i153 = 0; _i153 < _list152.size; ++_i153)
0:                   CfDef _elem154; // required
0:                   _elem154 = new CfDef();
0:                   _elem154.read(iprot);
0:                   struct.cf_defs.add(_elem154);
/////////////////////////////////////////////////////////////////////////
0:             for (Map.Entry<String, String> _iter155 : struct.strategy_options.entrySet())
0:               oprot.writeString(_iter155.getKey());
0:               oprot.writeString(_iter155.getValue());
/////////////////////////////////////////////////////////////////////////
0:           for (CfDef _iter156 : struct.cf_defs)
0:             _iter156.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter157 : struct.cf_defs)
0:           _iter157.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter158 : struct.strategy_options.entrySet())
0:             oprot.writeString(_iter158.getKey());
0:             oprot.writeString(_iter158.getValue());
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.cf_defs = new ArrayList<CfDef>(_list159.size);
0:         for (int _i160 = 0; _i160 < _list159.size; ++_i160)
0:           CfDef _elem161; // required
0:           _elem161 = new CfDef();
0:           _elem161.read(iprot);
0:           struct.cf_defs.add(_elem161);
0:           org.apache.thrift.protocol.TMap _map162 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.strategy_options = new HashMap<String,String>(2*_map162.size);
0:           for (int _i163 = 0; _i163 < _map162.size; ++_i163)
0:             String _key164; // required
0:             String _val165; // required
0:             _key164 = iprot.readString();
0:             _val165 = iprot.readString();
0:             struct.strategy_options.put(_key164, _val165);
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   CfDef _elem146; // required
/////////////////////////////////////////////////////////////////////////
0:           CfDef _elem153; // required
commit:1ea2a60
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map60.size);
0:               for (int _i61 = 0; _i61 < _map60.size; ++_i61)
0:                 String _key62; // required
0:                 String _val63; // required
0:                 _key62 = iprot.readString();
0:                 _val63 = iprot.readString();
0:                 this.strategy_options.put(_key62, _val63);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list64.size);
0:               for (int _i65 = 0; _i65 < _list64.size; ++_i65)
0:                 CfDef _elem66; // required
0:                 _elem66 = new CfDef();
0:                 _elem66.read(iprot);
0:                 this.cf_defs.add(_elem66);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter67 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter67.getKey());
0:             oprot.writeString(_iter67.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter68 : this.cf_defs)
0:           _iter68.write(oprot);
commit:087d24a
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map64.size);
0:               for (int _i65 = 0; _i65 < _map64.size; ++_i65)
0:                 String _key66; // required
0:                 String _val67; // required
0:                 _key66 = iprot.readString();
0:                 _val67 = iprot.readString();
0:                 this.strategy_options.put(_key66, _val67);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list68.size);
0:               for (int _i69 = 0; _i69 < _list68.size; ++_i69)
0:                 CfDef _elem70; // required
0:                 _elem70 = new CfDef();
0:                 _elem70.read(iprot);
0:                 this.cf_defs.add(_elem70);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter71 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter71.getKey());
0:             oprot.writeString(_iter71.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter72 : this.cf_defs)
0:           _iter72.write(oprot);
commit:3297a96
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map60.size);
0:               for (int _i61 = 0; _i61 < _map60.size; ++_i61)
0:                 String _key62;
0:                 String _val63;
0:                 _key62 = iprot.readString();
0:                 _val63 = iprot.readString();
0:                 this.strategy_options.put(_key62, _val63);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list64.size);
0:               for (int _i65 = 0; _i65 < _list64.size; ++_i65)
0:                 CfDef _elem66;
0:                 _elem66 = new CfDef();
0:                 _elem66.read(iprot);
0:                 this.cf_defs.add(_elem66);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter67 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter67.getKey());
0:             oprot.writeString(_iter67.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter68 : this.cf_defs)
0:           _iter68.write(oprot);
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8bf6e15
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map140 = iprot.readMapBegin();
0:                 struct.strategy_options = new HashMap<String,String>(2*_map140.size);
0:                 for (int _i141 = 0; _i141 < _map140.size; ++_i141)
0:                   String _key142; // required
0:                   String _val143; // required
0:                   _key142 = iprot.readString();
0:                   _val143 = iprot.readString();
0:                   struct.strategy_options.put(_key142, _val143);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
0:                 struct.cf_defs = new ArrayList<CfDef>(_list144.size);
0:                 for (int _i145 = 0; _i145 < _list144.size; ++_i145)
0:                   CfDef _elem146; // optional
0:                   _elem146 = new CfDef();
0:                   _elem146.read(iprot);
0:                   struct.cf_defs.add(_elem146);
/////////////////////////////////////////////////////////////////////////
0:             for (Map.Entry<String, String> _iter147 : struct.strategy_options.entrySet())
0:               oprot.writeString(_iter147.getKey());
0:               oprot.writeString(_iter147.getValue());
/////////////////////////////////////////////////////////////////////////
0:           for (CfDef _iter148 : struct.cf_defs)
0:             _iter148.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter149 : struct.cf_defs)
0:           _iter149.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter150 : struct.strategy_options.entrySet())
0:             oprot.writeString(_iter150.getKey());
0:             oprot.writeString(_iter150.getValue());
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.cf_defs = new ArrayList<CfDef>(_list151.size);
0:         for (int _i152 = 0; _i152 < _list151.size; ++_i152)
0:           CfDef _elem153; // optional
0:           _elem153 = new CfDef();
0:           _elem153.read(iprot);
0:           struct.cf_defs.add(_elem153);
0:           org.apache.thrift.protocol.TMap _map154 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.strategy_options = new HashMap<String,String>(2*_map154.size);
0:           for (int _i155 = 0; _i155 < _map154.size; ++_i155)
0:             String _key156; // required
0:             String _val157; // required
0:             _key156 = iprot.readString();
0:             _val157 = iprot.readString();
0:             struct.strategy_options.put(_key156, _val157);
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TMap _map128 = iprot.readMapBegin();
0:                 struct.strategy_options = new HashMap<String,String>(2*_map128.size);
0:                 for (int _i129 = 0; _i129 < _map128.size; ++_i129)
0:                   String _key130; // required
0:                   String _val131; // required
0:                   _key130 = iprot.readString();
0:                   _val131 = iprot.readString();
0:                   struct.strategy_options.put(_key130, _val131);
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
0:                 struct.cf_defs = new ArrayList<CfDef>(_list132.size);
0:                 for (int _i133 = 0; _i133 < _list132.size; ++_i133)
0:                   CfDef _elem134; // optional
0:                   _elem134 = new CfDef();
0:                   _elem134.read(iprot);
0:                   struct.cf_defs.add(_elem134);
/////////////////////////////////////////////////////////////////////////
0:             for (Map.Entry<String, String> _iter135 : struct.strategy_options.entrySet())
0:               oprot.writeString(_iter135.getKey());
0:               oprot.writeString(_iter135.getValue());
/////////////////////////////////////////////////////////////////////////
0:           for (CfDef _iter136 : struct.cf_defs)
0:             _iter136.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter137 : struct.cf_defs)
0:           _iter137.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter138 : struct.strategy_options.entrySet())
0:             oprot.writeString(_iter138.getKey());
0:             oprot.writeString(_iter138.getValue());
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.cf_defs = new ArrayList<CfDef>(_list139.size);
0:         for (int _i140 = 0; _i140 < _list139.size; ++_i140)
0:           CfDef _elem141; // optional
0:           _elem141 = new CfDef();
0:           _elem141.read(iprot);
0:           struct.cf_defs.add(_elem141);
0:           org.apache.thrift.protocol.TMap _map142 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.strategy_options = new HashMap<String,String>(2*_map142.size);
0:           for (int _i143 = 0; _i143 < _map142.size; ++_i143)
0:             String _key144; // required
0:             String _val145; // required
0:             _key144 = iprot.readString();
0:             _val145 = iprot.readString();
0:             struct.strategy_options.put(_key144, _val145);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:6a5c9ed
/////////////////////////////////////////////////////////////////////////
1:    * @deprecated ignored
/////////////////////////////////////////////////////////////////////////
1:      * @deprecated ignored
/////////////////////////////////////////////////////////////////////////
1:    * @deprecated ignored
1:    * @deprecated ignored
commit:f0ec9e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private static final int __DURABLE_WRITES_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b8434fc
commit:b391600
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map52.size);
0:               for (int _i53 = 0; _i53 < _map52.size; ++_i53)
0:                 String _key54;
0:                 String _val55;
0:                 _key54 = iprot.readString();
0:                 _val55 = iprot.readString();
0:                 this.strategy_options.put(_key54, _val55);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list56.size);
0:               for (int _i57 = 0; _i57 < _list56.size; ++_i57)
0:                 CfDef _elem58;
0:                 _elem58 = new CfDef();
0:                 _elem58.read(iprot);
0:                 this.cf_defs.add(_elem58);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter59 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter59.getKey());
0:             oprot.writeString(_iter59.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter60 : this.cf_defs)
0:           _iter60.write(oprot);
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:129d80a
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map38.size);
0:               for (int _i39 = 0; _i39 < _map38.size; ++_i39)
0:                 String _key40;
0:                 String _val41;
0:                 _key40 = iprot.readString();
0:                 _val41 = iprot.readString();
0:                 this.strategy_options.put(_key40, _val41);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list42.size);
0:               for (int _i43 = 0; _i43 < _list42.size; ++_i43)
0:                 CfDef _elem44;
0:                 _elem44 = new CfDef();
0:                 _elem44.read(iprot);
0:                 this.cf_defs.add(_elem44);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter45 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter45.getKey());
0:             oprot.writeString(_iter45.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter46 : this.cf_defs)
0:           _iter46.write(oprot);
commit:4f9b160
commit:1adcd1c
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField REPLICATION_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_factor", org.apache.thrift.protocol.TType.I32, (short)4);
1:   private static final org.apache.thrift.protocol.TField CF_DEFS_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_defs", org.apache.thrift.protocol.TType.LIST, (short)5);
1:   /**
0:    * @deprecated
1:    */
0:   public int replication_factor;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @deprecated
1:      */
1:     REPLICATION_FACTOR((short)4, "replication_factor"),
0:     CF_DEFS((short)5, "cf_defs");
/////////////////////////////////////////////////////////////////////////
1:         case 4: // REPLICATION_FACTOR
1:           return REPLICATION_FACTOR;
1:         case 5: // CF_DEFS
/////////////////////////////////////////////////////////////////////////
1:   private static final int __REPLICATION_FACTOR_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.REPLICATION_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("replication_factor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
/////////////////////////////////////////////////////////////////////////
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
/////////////////////////////////////////////////////////////////////////
1:     this.replication_factor = other.replication_factor;
/////////////////////////////////////////////////////////////////////////
1:     setReplication_factorIsSet(false);
1:     this.replication_factor = 0;
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * @deprecated
1:    */
1:   public int getReplication_factor() {
1:     return this.replication_factor;
1:   }
1: 
1:   /**
0:    * @deprecated
1:    */
1:   public KsDef setReplication_factor(int replication_factor) {
1:     this.replication_factor = replication_factor;
1:     setReplication_factorIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetReplication_factor() {
0:     __isset_bit_vector.clear(__REPLICATION_FACTOR_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field replication_factor is set (has been assigned a value) and false otherwise */
1:   public boolean isSetReplication_factor() {
0:     return __isset_bit_vector.get(__REPLICATION_FACTOR_ISSET_ID);
1:   }
1: 
1:   public void setReplication_factorIsSet(boolean value) {
0:     __isset_bit_vector.set(__REPLICATION_FACTOR_ISSET_ID, value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case REPLICATION_FACTOR:
1:       if (value == null) {
1:         unsetReplication_factor();
1:       } else {
1:         setReplication_factor((Integer)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case REPLICATION_FACTOR:
0:       return new Integer(getReplication_factor());
1: 
/////////////////////////////////////////////////////////////////////////
1:     case REPLICATION_FACTOR:
1:       return isSetReplication_factor();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_replication_factor = true && this.isSetReplication_factor();
1:     boolean that_present_replication_factor = true && that.isSetReplication_factor();
1:     if (this_present_replication_factor || that_present_replication_factor) {
1:       if (!(this_present_replication_factor && that_present_replication_factor))
1:         return false;
1:       if (this.replication_factor != that.replication_factor)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_replication_factor = true && (isSetReplication_factor());
1:     builder.append(present_replication_factor);
1:     if (present_replication_factor)
1:       builder.append(replication_factor);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetReplication_factor()).compareTo(typedOther.isSetReplication_factor());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetReplication_factor()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_factor, typedOther.replication_factor);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 4: // REPLICATION_FACTOR
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             this.replication_factor = iprot.readI32();
0:             setReplication_factorIsSet(true);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 5: // CF_DEFS
/////////////////////////////////////////////////////////////////////////
1:     if (isSetReplication_factor()) {
1:       oprot.writeFieldBegin(REPLICATION_FACTOR_FIELD_DESC);
0:       oprot.writeI32(this.replication_factor);
1:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetReplication_factor()) {
1:       if (!first) sb.append(", ");
1:       sb.append("replication_factor:");
1:       sb.append(this.replication_factor);
1:       first = false;
1:     }
/////////////////////////////////////////////////////////////////////////
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
commit:8c7bc2f
/////////////////////////////////////////////////////////////////////////
0:   private static final org.apache.thrift.protocol.TField CF_DEFS_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_defs", org.apache.thrift.protocol.TType.LIST, (short)4);
/////////////////////////////////////////////////////////////////////////
0:     CF_DEFS((short)4, "cf_defs");
/////////////////////////////////////////////////////////////////////////
0:         case 4: // CF_DEFS
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         case 4: // CF_DEFS
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.name = null;
1:     this.strategy_class = null;
1:     this.strategy_options = null;
0:     setReplication_factorIsSet(false);
0:     this.replication_factor = 0;
1:     this.cf_defs = null;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (isSetName()) {
0:       lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetStrategy_class()) {
0:       lastComparison = TBaseHelper.compareTo(this.strategy_class, typedOther.strategy_class);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetStrategy_options()) {
0:       lastComparison = TBaseHelper.compareTo(this.strategy_options, typedOther.strategy_options);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetReplication_factor()) {
0:       lastComparison = TBaseHelper.compareTo(this.replication_factor, typedOther.replication_factor);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetCf_defs()) {
0:       lastComparison = TBaseHelper.compareTo(this.cf_defs, typedOther.cf_defs);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_name = true && (isSetName());
1:     builder.append(present_name);
1:     if (present_name)
1:       builder.append(name);
1: 
1:     boolean present_strategy_class = true && (isSetStrategy_class());
1:     builder.append(present_strategy_class);
1:     if (present_strategy_class)
1:       builder.append(strategy_class);
1: 
1:     boolean present_strategy_options = true && (isSetStrategy_options());
1:     builder.append(present_strategy_options);
1:     if (present_strategy_options)
1:       builder.append(strategy_options);
1: 
0:     boolean present_replication_factor = true;
0:     builder.append(present_replication_factor);
0:     if (present_replication_factor)
0:       builder.append(replication_factor);
1: 
1:     boolean present_cf_defs = true && (isSetCf_defs());
1:     builder.append(present_cf_defs);
1:     if (present_cf_defs)
1:       builder.append(cf_defs);
1: 
1:     return builder.toHashCode();
commit:49f34a2
/////////////////////////////////////////////////////////////////////////
0:               TMap _map29 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map29.size);
0:               for (int _i30 = 0; _i30 < _map29.size; ++_i30)
0:                 String _key31;
0:                 String _val32;
0:                 _key31 = iprot.readString();
0:                 _val32 = iprot.readString();
0:                 this.strategy_options.put(_key31, _val32);
/////////////////////////////////////////////////////////////////////////
0:               TList _list33 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list33.size);
0:               for (int _i34 = 0; _i34 < _list33.size; ++_i34)
0:                 CfDef _elem35;
0:                 _elem35 = new CfDef();
0:                 _elem35.read(iprot);
0:                 this.cf_defs.add(_elem35);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter36 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter36.getKey());
0:             oprot.writeString(_iter36.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter37 : this.cf_defs)
0:           _iter37.write(oprot);
commit:4fb3d18
/////////////////////////////////////////////////////////////////////////
0:               TList _list33 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list33.size);
0:               for (int _i34 = 0; _i34 < _list33.size; ++_i34)
0:                 CfDef _elem35;
0:                 _elem35 = new CfDef();
0:                 _elem35.read(iprot);
0:                 this.cf_defs.add(_elem35);
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter36 : this.cf_defs)
0:           _iter36.write(oprot);
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class KsDef implements TBase<KsDef, KsDef._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // NAME
1:           return NAME;
1:         case 2: // STRATEGY_CLASS
1:           return STRATEGY_CLASS;
0:         case 3: // REPLICATION_FACTOR
0:           return REPLICATION_FACTOR;
0:         case 5: // CF_DEFS
1:           return CF_DEFS;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.STRATEGY_CLASS, new FieldMetaData("strategy_class", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.REPLICATION_FACTOR, new FieldMetaData("replication_factor", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.CF_DEFS, new FieldMetaData("cf_defs", TFieldRequirementType.REQUIRED, 
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetStrategy_class()) {      lastComparison = TBaseHelper.compareTo(this.strategy_class, typedOther.strategy_class);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetReplication_factor()) {      lastComparison = TBaseHelper.compareTo(this.replication_factor, typedOther.replication_factor);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetCf_defs()) {      lastComparison = TBaseHelper.compareTo(this.cf_defs, typedOther.cf_defs);
commit:078c56c
/////////////////////////////////////////////////////////////////////////
0:               TList _list37 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list37.size);
0:               for (int _i38 = 0; _i38 < _list37.size; ++_i38)
0:                 CfDef _elem39;
0:                 _elem39 = new CfDef();
0:                 _elem39.read(iprot);
0:                 this.cf_defs.add(_elem39);
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter40 : this.cf_defs)
0:           _iter40.write(oprot);
commit:9249a6c
/////////////////////////////////////////////////////////////////////////
0:               TList _list29 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list29.size);
0:               for (int _i30 = 0; _i30 < _list29.size; ++_i30)
0:                 CfDef _elem31;
0:                 _elem31 = new CfDef();
0:                 _elem31.read(iprot);
0:                 this.cf_defs.add(_elem31);
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter32 : this.cf_defs)
0:           _iter32.write(oprot);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:0346193
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
commit:effb653
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map52.size);
0:               for (int _i53 = 0; _i53 < _map52.size; ++_i53)
0:                 String _key54;
0:                 String _val55;
0:                 _key54 = iprot.readString();
0:                 _val55 = iprot.readString();
0:                 this.strategy_options.put(_key54, _val55);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list56.size);
0:               for (int _i57 = 0; _i57 < _list56.size; ++_i57)
0:                 CfDef _elem58;
0:                 _elem58 = new CfDef();
0:                 _elem58.read(iprot);
0:                 this.cf_defs.add(_elem58);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter59 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter59.getKey());
0:             oprot.writeString(_iter59.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter60 : this.cf_defs)
0:           _iter60.write(oprot);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new KsDefStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new KsDefTupleSchemeFactory());
1:   }
1: 
1:   public Map<String,String> strategy_options; // optional
1:   public int replication_factor; // optional
1:   public boolean durable_writes; // optional
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.STRATEGY_OPTIONS,_Fields.REPLICATION_FACTOR,_Fields.DURABLE_WRITES};
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATION_FACTOR_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __REPLICATION_FACTOR_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATION_FACTOR_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURABLE_WRITES_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __DURABLE_WRITES_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURABLE_WRITES_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class KsDefStandardSchemeFactory implements SchemeFactory {
1:     public KsDefStandardScheme getScheme() {
1:       return new KsDefStandardScheme();
1:     }
1:   }
1: 
1:   private static class KsDefStandardScheme extends StandardScheme<KsDef> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, KsDef struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.name = iprot.readString();
1:               struct.setNameIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // STRATEGY_CLASS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.strategy_class = iprot.readString();
1:               struct.setStrategy_classIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 3: // STRATEGY_OPTIONS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:               {
0:                 org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
0:                 struct.strategy_options = new HashMap<String,String>(2*_map120.size);
0:                 for (int _i121 = 0; _i121 < _map120.size; ++_i121)
1:                 {
0:                   String _key122; // required
0:                   String _val123; // required
0:                   _key122 = iprot.readString();
0:                   _val123 = iprot.readString();
0:                   struct.strategy_options.put(_key122, _val123);
1:                 }
1:                 iprot.readMapEnd();
1:               }
1:               struct.setStrategy_optionsIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 4: // REPLICATION_FACTOR
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.replication_factor = iprot.readI32();
1:               struct.setReplication_factorIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 5: // CF_DEFS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
0:                 org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
0:                 struct.cf_defs = new ArrayList<CfDef>(_list124.size);
0:                 for (int _i125 = 0; _i125 < _list124.size; ++_i125)
1:                 {
0:                   CfDef _elem126; // required
0:                   _elem126 = new CfDef();
0:                   _elem126.read(iprot);
0:                   struct.cf_defs.add(_elem126);
1:                 }
1:                 iprot.readListEnd();
1:               }
1:               struct.setCf_defsIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 6: // DURABLE_WRITES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:               struct.durable_writes = iprot.readBool();
1:               struct.setDurable_writesIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, KsDef struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.name != null) {
1:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:         oprot.writeString(struct.name);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.strategy_class != null) {
1:         oprot.writeFieldBegin(STRATEGY_CLASS_FIELD_DESC);
1:         oprot.writeString(struct.strategy_class);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.strategy_options != null) {
1:         if (struct.isSetStrategy_options()) {
1:           oprot.writeFieldBegin(STRATEGY_OPTIONS_FIELD_DESC);
1:           {
1:             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.strategy_options.size()));
0:             for (Map.Entry<String, String> _iter127 : struct.strategy_options.entrySet())
1:             {
0:               oprot.writeString(_iter127.getKey());
0:               oprot.writeString(_iter127.getValue());
1:             }
1:             oprot.writeMapEnd();
1:           }
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.isSetReplication_factor()) {
0:         oprot.writeFieldBegin(REPLICATION_FACTOR_FIELD_DESC);
1:         oprot.writeI32(struct.replication_factor);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.cf_defs != null) {
1:         oprot.writeFieldBegin(CF_DEFS_FIELD_DESC);
1:         {
1:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cf_defs.size()));
0:           for (CfDef _iter128 : struct.cf_defs)
1:           {
0:             _iter128.write(oprot);
1:           }
1:           oprot.writeListEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.isSetDurable_writes()) {
1:         oprot.writeFieldBegin(DURABLE_WRITES_FIELD_DESC);
1:         oprot.writeBool(struct.durable_writes);
1:         oprot.writeFieldEnd();
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class KsDefTupleSchemeFactory implements SchemeFactory {
1:     public KsDefTupleScheme getScheme() {
1:       return new KsDefTupleScheme();
1:     }
1:   }
1: 
1:   private static class KsDefTupleScheme extends TupleScheme<KsDef> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, KsDef struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeString(struct.name);
1:       oprot.writeString(struct.strategy_class);
1:       {
1:         oprot.writeI32(struct.cf_defs.size());
0:         for (CfDef _iter129 : struct.cf_defs)
1:         {
0:           _iter129.write(oprot);
1:         }
1:       }
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetStrategy_options()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetReplication_factor()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetDurable_writes()) {
1:         optionals.set(2);
1:       }
1:       oprot.writeBitSet(optionals, 3);
1:       if (struct.isSetStrategy_options()) {
1:         {
1:           oprot.writeI32(struct.strategy_options.size());
0:           for (Map.Entry<String, String> _iter130 : struct.strategy_options.entrySet())
1:           {
0:             oprot.writeString(_iter130.getKey());
0:             oprot.writeString(_iter130.getValue());
1:           }
1:         }
1:       }
1:       if (struct.isSetReplication_factor()) {
1:         oprot.writeI32(struct.replication_factor);
1:       }
1:       if (struct.isSetDurable_writes()) {
1:         oprot.writeBool(struct.durable_writes);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, KsDef struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.name = iprot.readString();
1:       struct.setNameIsSet(true);
1:       struct.strategy_class = iprot.readString();
1:       struct.setStrategy_classIsSet(true);
1:       {
0:         org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.cf_defs = new ArrayList<CfDef>(_list131.size);
0:         for (int _i132 = 0; _i132 < _list131.size; ++_i132)
1:         {
0:           CfDef _elem133; // required
0:           _elem133 = new CfDef();
0:           _elem133.read(iprot);
0:           struct.cf_defs.add(_elem133);
1:         }
1:       }
1:       struct.setCf_defsIsSet(true);
1:       BitSet incoming = iprot.readBitSet(3);
1:       if (incoming.get(0)) {
1:         {
0:           org.apache.thrift.protocol.TMap _map134 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.strategy_options = new HashMap<String,String>(2*_map134.size);
0:           for (int _i135 = 0; _i135 < _map134.size; ++_i135)
1:           {
0:             String _key136; // required
0:             String _val137; // required
0:             _key136 = iprot.readString();
0:             _val137 = iprot.readString();
0:             struct.strategy_options.put(_key136, _val137);
1:           }
1:         }
1:         struct.setStrategy_optionsIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.replication_factor = iprot.readI32();
1:         struct.setReplication_factorIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         struct.durable_writes = iprot.readBool();
1:         struct.setDurable_writesIsSet(true);
1:       }
1:     }
1:   }
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:930721d
/////////////////////////////////////////////////////////////////////////
0:   private static final org.apache.thrift.protocol.TField REPLICATION_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_factor", org.apache.thrift.protocol.TType.I32, (short)4);
1:   /**
0:    * @deprecated, ignored
1:    */
0:   public int replication_factor; // required
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @deprecated, ignored
1:      */
0:     REPLICATION_FACTOR((short)4, "replication_factor"),
/////////////////////////////////////////////////////////////////////////
0:         case 4: // REPLICATION_FACTOR
0:           return REPLICATION_FACTOR;
/////////////////////////////////////////////////////////////////////////
0:   private static final int __REPLICATION_FACTOR_ISSET_ID = 0;
1:   private static final int __DURABLE_WRITES_ISSET_ID = 1;
0:   private BitSet __isset_bit_vector = new BitSet(2);
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.REPLICATION_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("replication_factor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
/////////////////////////////////////////////////////////////////////////
0:     this.replication_factor = other.replication_factor;
/////////////////////////////////////////////////////////////////////////
0:     setReplication_factorIsSet(false);
0:     this.replication_factor = 0;
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * @deprecated, ignored
1:    */
0:   public int getReplication_factor() {
0:     return this.replication_factor;
1:   }
1: 
1:   /**
0:    * @deprecated, ignored
1:    */
0:   public KsDef setReplication_factor(int replication_factor) {
0:     this.replication_factor = replication_factor;
0:     setReplication_factorIsSet(true);
1:     return this;
1:   }
1: 
0:   public void unsetReplication_factor() {
0:     __isset_bit_vector.clear(__REPLICATION_FACTOR_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field replication_factor is set (has been assigned a value) and false otherwise */
0:   public boolean isSetReplication_factor() {
0:     return __isset_bit_vector.get(__REPLICATION_FACTOR_ISSET_ID);
1:   }
1: 
0:   public void setReplication_factorIsSet(boolean value) {
0:     __isset_bit_vector.set(__REPLICATION_FACTOR_ISSET_ID, value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     case REPLICATION_FACTOR:
1:       if (value == null) {
0:         unsetReplication_factor();
1:       } else {
0:         setReplication_factor((Integer)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
0:     case REPLICATION_FACTOR:
1:       return Integer.valueOf(getReplication_factor());
1: 
/////////////////////////////////////////////////////////////////////////
0:     case REPLICATION_FACTOR:
0:       return isSetReplication_factor();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_replication_factor = true && this.isSetReplication_factor();
0:     boolean that_present_replication_factor = true && that.isSetReplication_factor();
0:     if (this_present_replication_factor || that_present_replication_factor) {
0:       if (!(this_present_replication_factor && that_present_replication_factor))
1:         return false;
0:       if (this.replication_factor != that.replication_factor)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     boolean present_replication_factor = true && (isSetReplication_factor());
0:     builder.append(present_replication_factor);
0:     if (present_replication_factor)
0:       builder.append(replication_factor);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetReplication_factor()).compareTo(typedOther.isSetReplication_factor());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetReplication_factor()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_factor, typedOther.replication_factor);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:         case 4: // REPLICATION_FACTOR
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             this.replication_factor = iprot.readI32();
0:             setReplication_factorIsSet(true);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (isSetReplication_factor()) {
0:       oprot.writeFieldBegin(REPLICATION_FACTOR_FIELD_DESC);
0:       oprot.writeI32(this.replication_factor);
0:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetReplication_factor()) {
1:       if (!first) sb.append(", ");
0:       sb.append("replication_factor:");
0:       sb.append(this.replication_factor);
1:       first = false;
1:     }
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map48.size);
0:               for (int _i49 = 0; _i49 < _map48.size; ++_i49)
0:                 String _key50;
0:                 String _val51;
0:                 _key50 = iprot.readString();
0:                 _val51 = iprot.readString();
0:                 this.strategy_options.put(_key50, _val51);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list52.size);
0:               for (int _i53 = 0; _i53 < _list52.size; ++_i53)
0:                 CfDef _elem54;
0:                 _elem54 = new CfDef();
0:                 _elem54.read(iprot);
0:                 this.cf_defs.add(_elem54);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter55 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter55.getKey());
0:             oprot.writeString(_iter55.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter56 : this.cf_defs)
0:           _iter56.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public String name; // required
1:   public String strategy_class; // required
0:   public Map<String,String> strategy_options; // required
0:   public int replication_factor; // required
1:   public List<CfDef> cf_defs; // required
0:   public boolean durable_writes; // required
/////////////////////////////////////////////////////////////////////////
0:       return Integer.valueOf(getReplication_factor());
1:       return Boolean.valueOf(isDurable_writes());
/////////////////////////////////////////////////////////////////////////
0:                 String _key62; // required
0:                 String _val63; // required
/////////////////////////////////////////////////////////////////////////
0:                 CfDef _elem66; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map43 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map43.size);
0:               for (int _i44 = 0; _i44 < _map43.size; ++_i44)
0:                 String _key45;
0:                 String _val46;
0:                 _key45 = iprot.readString();
0:                 _val46 = iprot.readString();
0:                 this.strategy_options.put(_key45, _val46);
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list47.size);
0:               for (int _i48 = 0; _i48 < _list47.size; ++_i48)
0:                 CfDef _elem49;
0:                 _elem49 = new CfDef();
0:                 _elem49.read(iprot);
0:                 this.cf_defs.add(_elem49);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter50 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter50.getKey());
0:             oprot.writeString(_iter50.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter51 : this.cf_defs)
0:           _iter51.write(oprot);
/////////////////////////////////////////////////////////////////////////
commit:ea6ec42
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField DURABLE_WRITES_FIELD_DESC = new org.apache.thrift.protocol.TField("durable_writes", org.apache.thrift.protocol.TType.BOOL, (short)6);
/////////////////////////////////////////////////////////////////////////
0:   public boolean durable_writes;
/////////////////////////////////////////////////////////////////////////
1:     CF_DEFS((short)5, "cf_defs"),
1:     DURABLE_WRITES((short)6, "durable_writes");
/////////////////////////////////////////////////////////////////////////
1:         case 6: // DURABLE_WRITES
1:           return DURABLE_WRITES;
/////////////////////////////////////////////////////////////////////////
0:   private static final int __DURABLE_WRITES_ISSET_ID = 1;
0:   private BitSet __isset_bit_vector = new BitSet(2);
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.DURABLE_WRITES, new org.apache.thrift.meta_data.FieldMetaData("durable_writes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:     this.durable_writes = true;
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.durable_writes = other.durable_writes;
/////////////////////////////////////////////////////////////////////////
1:     this.durable_writes = true;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public boolean isDurable_writes() {
1:     return this.durable_writes;
1:   }
1: 
1:   public KsDef setDurable_writes(boolean durable_writes) {
1:     this.durable_writes = durable_writes;
1:     setDurable_writesIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetDurable_writes() {
0:     __isset_bit_vector.clear(__DURABLE_WRITES_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field durable_writes is set (has been assigned a value) and false otherwise */
1:   public boolean isSetDurable_writes() {
0:     return __isset_bit_vector.get(__DURABLE_WRITES_ISSET_ID);
1:   }
1: 
1:   public void setDurable_writesIsSet(boolean value) {
0:     __isset_bit_vector.set(__DURABLE_WRITES_ISSET_ID, value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case DURABLE_WRITES:
1:       if (value == null) {
1:         unsetDurable_writes();
1:       } else {
1:         setDurable_writes((Boolean)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case DURABLE_WRITES:
0:       return new Boolean(isDurable_writes());
1: 
/////////////////////////////////////////////////////////////////////////
1:     case DURABLE_WRITES:
1:       return isSetDurable_writes();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_durable_writes = true && this.isSetDurable_writes();
1:     boolean that_present_durable_writes = true && that.isSetDurable_writes();
1:     if (this_present_durable_writes || that_present_durable_writes) {
1:       if (!(this_present_durable_writes && that_present_durable_writes))
1:         return false;
1:       if (this.durable_writes != that.durable_writes)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_durable_writes = true && (isSetDurable_writes());
1:     builder.append(present_durable_writes);
1:     if (present_durable_writes)
1:       builder.append(durable_writes);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetDurable_writes()).compareTo(typedOther.isSetDurable_writes());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetDurable_writes()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durable_writes, typedOther.durable_writes);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:         case 6: // DURABLE_WRITES
0:           if (field.type == org.apache.thrift.protocol.TType.BOOL) {
0:             this.durable_writes = iprot.readBool();
0:             setDurable_writesIsSet(true);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
1:     if (isSetDurable_writes()) {
0:       oprot.writeFieldBegin(DURABLE_WRITES_FIELD_DESC);
0:       oprot.writeBool(this.durable_writes);
0:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetDurable_writes()) {
1:       if (!first) sb.append(", ");
1:       sb.append("durable_writes:");
1:       sb.append(this.durable_writes);
1:       first = false;
1:     }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class KsDef implements org.apache.thrift.TBase<KsDef, KsDef._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KsDef");
1:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField STRATEGY_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy_class", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField STRATEGY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy_options", org.apache.thrift.protocol.TType.MAP, (short)3);
0:   private static final org.apache.thrift.protocol.TField REPLICATION_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_factor", org.apache.thrift.protocol.TType.I32, (short)4);
0:   private static final org.apache.thrift.protocol.TField CF_DEFS_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_defs", org.apache.thrift.protocol.TType.LIST, (short)5);
/////////////////////////////////////////////////////////////////////////
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.STRATEGY_CLASS, new org.apache.thrift.meta_data.FieldMetaData("strategy_class", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.STRATEGY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("strategy_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
0:     tmpMap.put(_Fields.REPLICATION_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("replication_factor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     tmpMap.put(_Fields.CF_DEFS, new org.apache.thrift.meta_data.FieldMetaData("cf_defs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CfDef.class))));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KsDef.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field strategy_class is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field strategy_options is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field replication_factor is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field cf_defs is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_class, typedOther.strategy_class);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_options, typedOther.strategy_options);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_factor, typedOther.replication_factor);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_defs, typedOther.cf_defs);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.MAP) {
0:               org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
0:               org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'replication_factor' was not found in serialized data! Struct: " + toString());
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
0:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.strategy_options.size()));
/////////////////////////////////////////////////////////////////////////
0:         oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cf_defs.size()));
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'strategy_class' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'cf_defs' was not present! Struct: " + toString());
1:     }
1:   }
1: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
commit:de5715e
/////////////////////////////////////////////////////////////////////////
0:     CF_DEFS((short)5, "cf_defs");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter36 : this.cf_defs)
0:           _iter36.write(oprot);
/////////////////////////////////////////////////////////////////////////
commit:c213967
/////////////////////////////////////////////////////////////////////////
0:   private static final TField USERS_ACCESS_FIELD_DESC = new TField("users_access", TType.MAP, (short)6);
0:   private static final TField GROUPS_ACCESS_FIELD_DESC = new TField("groups_access", TType.MAP, (short)7);
0:   public Map<String,AccessLevel> users_access;
0:   public Map<String,AccessLevel> groups_access;
0:     CF_DEFS((short)5, "cf_defs"),
0:     USERS_ACCESS((short)6, "users_access"),
0:     GROUPS_ACCESS((short)7, "groups_access");
/////////////////////////////////////////////////////////////////////////
0:         case 6: // USERS_ACCESS
0:           return USERS_ACCESS;
0:         case 7: // GROUPS_ACCESS
0:           return GROUPS_ACCESS;
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.USERS_ACCESS, new FieldMetaData("users_access", TFieldRequirementType.OPTIONAL, 
0:         new MapMetaData(TType.MAP, 
0:             new FieldValueMetaData(TType.STRING), 
0:             new EnumMetaData(TType.ENUM, AccessLevel.class))));
0:     tmpMap.put(_Fields.GROUPS_ACCESS, new FieldMetaData("groups_access", TFieldRequirementType.OPTIONAL, 
0:         new MapMetaData(TType.MAP, 
0:             new FieldValueMetaData(TType.STRING), 
0:             new EnumMetaData(TType.ENUM, AccessLevel.class))));
/////////////////////////////////////////////////////////////////////////
0:     if (other.isSetUsers_access()) {
0:       Map<String,AccessLevel> __this__users_access = new HashMap<String,AccessLevel>();
0:       for (Map.Entry<String, AccessLevel> other_element : other.users_access.entrySet()) {
1: 
0:         String other_element_key = other_element.getKey();
0:         AccessLevel other_element_value = other_element.getValue();
1: 
0:         String __this__users_access_copy_key = other_element_key;
1: 
0:         AccessLevel __this__users_access_copy_value = other_element_value;
1: 
0:         __this__users_access.put(__this__users_access_copy_key, __this__users_access_copy_value);
1:       }
0:       this.users_access = __this__users_access;
1:     }
0:     if (other.isSetGroups_access()) {
0:       Map<String,AccessLevel> __this__groups_access = new HashMap<String,AccessLevel>();
0:       for (Map.Entry<String, AccessLevel> other_element : other.groups_access.entrySet()) {
1: 
0:         String other_element_key = other_element.getKey();
0:         AccessLevel other_element_value = other_element.getValue();
1: 
0:         String __this__groups_access_copy_key = other_element_key;
1: 
0:         AccessLevel __this__groups_access_copy_value = other_element_value;
1: 
0:         __this__groups_access.put(__this__groups_access_copy_key, __this__groups_access_copy_value);
1:       }
0:       this.groups_access = __this__groups_access;
1:     }
/////////////////////////////////////////////////////////////////////////
0:   public int getUsers_accessSize() {
0:     return (this.users_access == null) ? 0 : this.users_access.size();
1:   }
1: 
0:   public void putToUsers_access(String key, AccessLevel val) {
0:     if (this.users_access == null) {
0:       this.users_access = new HashMap<String,AccessLevel>();
1:     }
0:     this.users_access.put(key, val);
1:   }
1: 
0:   public Map<String,AccessLevel> getUsers_access() {
0:     return this.users_access;
1:   }
1: 
0:   public KsDef setUsers_access(Map<String,AccessLevel> users_access) {
0:     this.users_access = users_access;
1:     return this;
1:   }
1: 
0:   public void unsetUsers_access() {
0:     this.users_access = null;
1:   }
1: 
0:   /** Returns true if field users_access is set (has been asigned a value) and false otherwise */
0:   public boolean isSetUsers_access() {
0:     return this.users_access != null;
1:   }
1: 
0:   public void setUsers_accessIsSet(boolean value) {
1:     if (!value) {
0:       this.users_access = null;
1:     }
1:   }
1: 
0:   public int getGroups_accessSize() {
0:     return (this.groups_access == null) ? 0 : this.groups_access.size();
1:   }
1: 
0:   public void putToGroups_access(String key, AccessLevel val) {
0:     if (this.groups_access == null) {
0:       this.groups_access = new HashMap<String,AccessLevel>();
1:     }
0:     this.groups_access.put(key, val);
1:   }
1: 
0:   public Map<String,AccessLevel> getGroups_access() {
0:     return this.groups_access;
1:   }
1: 
0:   public KsDef setGroups_access(Map<String,AccessLevel> groups_access) {
0:     this.groups_access = groups_access;
1:     return this;
1:   }
1: 
0:   public void unsetGroups_access() {
0:     this.groups_access = null;
1:   }
1: 
0:   /** Returns true if field groups_access is set (has been asigned a value) and false otherwise */
0:   public boolean isSetGroups_access() {
0:     return this.groups_access != null;
1:   }
1: 
0:   public void setGroups_accessIsSet(boolean value) {
1:     if (!value) {
0:       this.groups_access = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     case USERS_ACCESS:
1:       if (value == null) {
0:         unsetUsers_access();
1:       } else {
0:         setUsers_access((Map<String,AccessLevel>)value);
1:       }
0:       break;
1: 
0:     case GROUPS_ACCESS:
1:       if (value == null) {
0:         unsetGroups_access();
1:       } else {
0:         setGroups_access((Map<String,AccessLevel>)value);
1:       }
0:       break;
1: 
/////////////////////////////////////////////////////////////////////////
0:     case USERS_ACCESS:
0:       return getUsers_access();
1: 
0:     case GROUPS_ACCESS:
0:       return getGroups_access();
1: 
/////////////////////////////////////////////////////////////////////////
0:     case USERS_ACCESS:
0:       return isSetUsers_access();
0:     case GROUPS_ACCESS:
0:       return isSetGroups_access();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_users_access = true && this.isSetUsers_access();
0:     boolean that_present_users_access = true && that.isSetUsers_access();
0:     if (this_present_users_access || that_present_users_access) {
0:       if (!(this_present_users_access && that_present_users_access))
1:         return false;
0:       if (!this.users_access.equals(that.users_access))
1:         return false;
1:     }
1: 
0:     boolean this_present_groups_access = true && this.isSetGroups_access();
0:     boolean that_present_groups_access = true && that.isSetGroups_access();
0:     if (this_present_groups_access || that_present_groups_access) {
0:       if (!(this_present_groups_access && that_present_groups_access))
1:         return false;
0:       if (!this.groups_access.equals(that.groups_access))
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetUsers_access()).compareTo(typedOther.isSetUsers_access());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetUsers_access()) {      lastComparison = TBaseHelper.compareTo(this.users_access, typedOther.users_access);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetGroups_access()).compareTo(typedOther.isSetGroups_access());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetGroups_access()) {      lastComparison = TBaseHelper.compareTo(this.groups_access, typedOther.groups_access);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:         case 6: // USERS_ACCESS
0:           if (field.type == TType.MAP) {
1:             {
0:               TMap _map36 = iprot.readMapBegin();
0:               this.users_access = new HashMap<String,AccessLevel>(2*_map36.size);
0:               for (int _i37 = 0; _i37 < _map36.size; ++_i37)
1:               {
0:                 String _key38;
0:                 AccessLevel _val39;
0:                 _key38 = iprot.readString();
0:                 _val39 = AccessLevel.findByValue(iprot.readI32());
0:                 this.users_access.put(_key38, _val39);
1:               }
0:               iprot.readMapEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         case 7: // GROUPS_ACCESS
0:           if (field.type == TType.MAP) {
1:             {
0:               TMap _map40 = iprot.readMapBegin();
0:               this.groups_access = new HashMap<String,AccessLevel>(2*_map40.size);
0:               for (int _i41 = 0; _i41 < _map40.size; ++_i41)
1:               {
0:                 String _key42;
0:                 AccessLevel _val43;
0:                 _key42 = iprot.readString();
0:                 _val43 = AccessLevel.findByValue(iprot.readI32());
0:                 this.groups_access.put(_key42, _val43);
1:               }
0:               iprot.readMapEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter44 : this.cf_defs)
0:           _iter44.write(oprot);
0:     if (this.users_access != null) {
0:       if (isSetUsers_access()) {
0:         oprot.writeFieldBegin(USERS_ACCESS_FIELD_DESC);
0:         {
0:           oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.users_access.size()));
0:           for (Map.Entry<String, AccessLevel> _iter45 : this.users_access.entrySet())
0:           {
0:             oprot.writeString(_iter45.getKey());
0:             oprot.writeI32(_iter45.getValue().getValue());
1:           }
0:           oprot.writeMapEnd();
1:         }
0:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.groups_access != null) {
0:       if (isSetGroups_access()) {
0:         oprot.writeFieldBegin(GROUPS_ACCESS_FIELD_DESC);
0:         {
0:           oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.groups_access.size()));
0:           for (Map.Entry<String, AccessLevel> _iter46 : this.groups_access.entrySet())
0:           {
0:             oprot.writeString(_iter46.getKey());
0:             oprot.writeI32(_iter46.getValue().getValue());
1:           }
0:           oprot.writeMapEnd();
1:         }
0:         oprot.writeFieldEnd();
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetUsers_access()) {
1:       if (!first) sb.append(", ");
0:       sb.append("users_access:");
0:       if (this.users_access == null) {
1:         sb.append("null");
0:       } else {
0:         sb.append(this.users_access);
1:       }
1:       first = false;
1:     }
0:     if (isSetGroups_access()) {
1:       if (!first) sb.append(", ");
0:       sb.append("groups_access:");
0:       if (this.groups_access == null) {
1:         sb.append("null");
0:       } else {
0:         sb.append(this.groups_access);
1:       }
1:       first = false;
1:     }
commit:201b759
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class KsDef implements TBase<KsDef._Fields>, java.io.Serializable, Cloneable, Comparable<KsDef> {
0:   private static final TStruct STRUCT_DESC = new TStruct("KsDef");
1: 
0:   private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
0:   private static final TField STRATEGY_CLASS_FIELD_DESC = new TField("strategy_class", TType.STRING, (short)2);
0:   private static final TField REPLICATION_FACTOR_FIELD_DESC = new TField("replication_factor", TType.I32, (short)3);
0:   private static final TField SNITCH_CLASS_FIELD_DESC = new TField("snitch_class", TType.STRING, (short)4);
0:   private static final TField CF_DEFS_FIELD_DESC = new TField("cf_defs", TType.LIST, (short)5);
1: 
0:   public String name;
0:   public String strategy_class;
0:   public int replication_factor;
0:   public String snitch_class;
0:   public List<CfDef> cf_defs;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     NAME((short)1, "name"),
1:     STRATEGY_CLASS((short)2, "strategy_class"),
0:     REPLICATION_FACTOR((short)3, "replication_factor"),
0:     SNITCH_CLASS((short)4, "snitch_class"),
0:     CF_DEFS((short)5, "cf_defs");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
0:   private static final int __REPLICATION_FACTOR_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.STRATEGY_CLASS, new FieldMetaData("strategy_class", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.REPLICATION_FACTOR, new FieldMetaData("replication_factor", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I32)));
0:     put(_Fields.SNITCH_CLASS, new FieldMetaData("snitch_class", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.CF_DEFS, new FieldMetaData("cf_defs", TFieldRequirementType.REQUIRED, 
0:         new ListMetaData(TType.LIST, 
0:             new StructMetaData(TType.STRUCT, CfDef.class))));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(KsDef.class, metaDataMap);
1:   }
1: 
1:   public KsDef() {
1:   }
1: 
1:   public KsDef(
1:     String name,
1:     String strategy_class,
0:     int replication_factor,
0:     String snitch_class,
1:     List<CfDef> cf_defs)
0:   {
1:     this();
1:     this.name = name;
1:     this.strategy_class = strategy_class;
0:     this.replication_factor = replication_factor;
0:     setReplication_factorIsSet(true);
0:     this.snitch_class = snitch_class;
1:     this.cf_defs = cf_defs;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public KsDef(KsDef other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetName()) {
1:       this.name = other.name;
1:     }
1:     if (other.isSetStrategy_class()) {
1:       this.strategy_class = other.strategy_class;
1:     }
0:     this.replication_factor = other.replication_factor;
0:     if (other.isSetSnitch_class()) {
0:       this.snitch_class = other.snitch_class;
1:     }
1:     if (other.isSetCf_defs()) {
0:       List<CfDef> __this__cf_defs = new ArrayList<CfDef>();
1:       for (CfDef other_element : other.cf_defs) {
1:         __this__cf_defs.add(new CfDef(other_element));
1:       }
1:       this.cf_defs = __this__cf_defs;
1:     }
1:   }
1: 
1:   public KsDef deepCopy() {
1:     return new KsDef(this);
1:   }
1: 
0:   @Deprecated
0:   public KsDef clone() {
1:     return new KsDef(this);
1:   }
1: 
1:   public String getName() {
1:     return this.name;
1:   }
1: 
1:   public KsDef setName(String name) {
1:     this.name = name;
1:     return this;
1:   }
1: 
1:   public void unsetName() {
1:     this.name = null;
1:   }
1: 
0:   /** Returns true if field name is set (has been asigned a value) and false otherwise */
1:   public boolean isSetName() {
1:     return this.name != null;
1:   }
1: 
1:   public void setNameIsSet(boolean value) {
1:     if (!value) {
1:       this.name = null;
1:     }
1:   }
1: 
1:   public String getStrategy_class() {
1:     return this.strategy_class;
1:   }
1: 
1:   public KsDef setStrategy_class(String strategy_class) {
1:     this.strategy_class = strategy_class;
1:     return this;
1:   }
1: 
1:   public void unsetStrategy_class() {
1:     this.strategy_class = null;
1:   }
1: 
0:   /** Returns true if field strategy_class is set (has been asigned a value) and false otherwise */
1:   public boolean isSetStrategy_class() {
1:     return this.strategy_class != null;
1:   }
1: 
1:   public void setStrategy_classIsSet(boolean value) {
1:     if (!value) {
1:       this.strategy_class = null;
1:     }
1:   }
1: 
0:   public int getReplication_factor() {
0:     return this.replication_factor;
1:   }
1: 
0:   public KsDef setReplication_factor(int replication_factor) {
0:     this.replication_factor = replication_factor;
0:     setReplication_factorIsSet(true);
1:     return this;
1:   }
1: 
0:   public void unsetReplication_factor() {
0:     __isset_bit_vector.clear(__REPLICATION_FACTOR_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field replication_factor is set (has been asigned a value) and false otherwise */
0:   public boolean isSetReplication_factor() {
0:     return __isset_bit_vector.get(__REPLICATION_FACTOR_ISSET_ID);
1:   }
1: 
0:   public void setReplication_factorIsSet(boolean value) {
0:     __isset_bit_vector.set(__REPLICATION_FACTOR_ISSET_ID, value);
1:   }
1: 
0:   public String getSnitch_class() {
0:     return this.snitch_class;
1:   }
1: 
0:   public KsDef setSnitch_class(String snitch_class) {
0:     this.snitch_class = snitch_class;
1:     return this;
1:   }
1: 
0:   public void unsetSnitch_class() {
0:     this.snitch_class = null;
1:   }
1: 
0:   /** Returns true if field snitch_class is set (has been asigned a value) and false otherwise */
0:   public boolean isSetSnitch_class() {
0:     return this.snitch_class != null;
1:   }
1: 
0:   public void setSnitch_classIsSet(boolean value) {
1:     if (!value) {
0:       this.snitch_class = null;
1:     }
1:   }
1: 
1:   public int getCf_defsSize() {
1:     return (this.cf_defs == null) ? 0 : this.cf_defs.size();
1:   }
1: 
1:   public java.util.Iterator<CfDef> getCf_defsIterator() {
1:     return (this.cf_defs == null) ? null : this.cf_defs.iterator();
1:   }
1: 
1:   public void addToCf_defs(CfDef elem) {
1:     if (this.cf_defs == null) {
1:       this.cf_defs = new ArrayList<CfDef>();
1:     }
1:     this.cf_defs.add(elem);
1:   }
1: 
1:   public List<CfDef> getCf_defs() {
1:     return this.cf_defs;
1:   }
1: 
1:   public KsDef setCf_defs(List<CfDef> cf_defs) {
1:     this.cf_defs = cf_defs;
1:     return this;
1:   }
1: 
1:   public void unsetCf_defs() {
1:     this.cf_defs = null;
1:   }
1: 
0:   /** Returns true if field cf_defs is set (has been asigned a value) and false otherwise */
1:   public boolean isSetCf_defs() {
1:     return this.cf_defs != null;
1:   }
1: 
1:   public void setCf_defsIsSet(boolean value) {
1:     if (!value) {
1:       this.cf_defs = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case NAME:
1:       if (value == null) {
1:         unsetName();
0:       } else {
1:         setName((String)value);
1:       }
0:       break;
1: 
1:     case STRATEGY_CLASS:
1:       if (value == null) {
1:         unsetStrategy_class();
0:       } else {
1:         setStrategy_class((String)value);
1:       }
0:       break;
1: 
0:     case REPLICATION_FACTOR:
1:       if (value == null) {
0:         unsetReplication_factor();
0:       } else {
0:         setReplication_factor((Integer)value);
1:       }
0:       break;
1: 
0:     case SNITCH_CLASS:
1:       if (value == null) {
0:         unsetSnitch_class();
0:       } else {
0:         setSnitch_class((String)value);
1:       }
0:       break;
1: 
1:     case CF_DEFS:
1:       if (value == null) {
1:         unsetCf_defs();
0:       } else {
1:         setCf_defs((List<CfDef>)value);
1:       }
0:       break;
1: 
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case NAME:
1:       return getName();
1: 
1:     case STRATEGY_CLASS:
1:       return getStrategy_class();
1: 
0:     case REPLICATION_FACTOR:
0:       return new Integer(getReplication_factor());
1: 
0:     case SNITCH_CLASS:
0:       return getSnitch_class();
1: 
1:     case CF_DEFS:
1:       return getCf_defs();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     case NAME:
1:       return isSetName();
1:     case STRATEGY_CLASS:
1:       return isSetStrategy_class();
0:     case REPLICATION_FACTOR:
0:       return isSetReplication_factor();
0:     case SNITCH_CLASS:
0:       return isSetSnitch_class();
1:     case CF_DEFS:
1:       return isSetCf_defs();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof KsDef)
1:       return this.equals((KsDef)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(KsDef that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_name = true && this.isSetName();
1:     boolean that_present_name = true && that.isSetName();
1:     if (this_present_name || that_present_name) {
1:       if (!(this_present_name && that_present_name))
1:         return false;
1:       if (!this.name.equals(that.name))
1:         return false;
1:     }
1: 
1:     boolean this_present_strategy_class = true && this.isSetStrategy_class();
1:     boolean that_present_strategy_class = true && that.isSetStrategy_class();
1:     if (this_present_strategy_class || that_present_strategy_class) {
1:       if (!(this_present_strategy_class && that_present_strategy_class))
1:         return false;
1:       if (!this.strategy_class.equals(that.strategy_class))
1:         return false;
1:     }
1: 
0:     boolean this_present_replication_factor = true;
0:     boolean that_present_replication_factor = true;
0:     if (this_present_replication_factor || that_present_replication_factor) {
0:       if (!(this_present_replication_factor && that_present_replication_factor))
1:         return false;
0:       if (this.replication_factor != that.replication_factor)
1:         return false;
1:     }
1: 
0:     boolean this_present_snitch_class = true && this.isSetSnitch_class();
0:     boolean that_present_snitch_class = true && that.isSetSnitch_class();
0:     if (this_present_snitch_class || that_present_snitch_class) {
0:       if (!(this_present_snitch_class && that_present_snitch_class))
1:         return false;
0:       if (!this.snitch_class.equals(that.snitch_class))
1:         return false;
1:     }
1: 
1:     boolean this_present_cf_defs = true && this.isSetCf_defs();
1:     boolean that_present_cf_defs = true && that.isSetCf_defs();
1:     if (this_present_cf_defs || that_present_cf_defs) {
1:       if (!(this_present_cf_defs && that_present_cf_defs))
1:         return false;
1:       if (!this.cf_defs.equals(that.cf_defs))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(KsDef other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     KsDef typedOther = (KsDef)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(name, typedOther.name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetStrategy_class()).compareTo(typedOther.isSetStrategy_class());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetStrategy_class()) {      lastComparison = TBaseHelper.compareTo(strategy_class, typedOther.strategy_class);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetReplication_factor()).compareTo(typedOther.isSetReplication_factor());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetReplication_factor()) {      lastComparison = TBaseHelper.compareTo(replication_factor, typedOther.replication_factor);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetSnitch_class()).compareTo(typedOther.isSetSnitch_class());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetSnitch_class()) {      lastComparison = TBaseHelper.compareTo(snitch_class, typedOther.snitch_class);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCf_defs()).compareTo(typedOther.isSetCf_defs());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetCf_defs()) {      lastComparison = TBaseHelper.compareTo(cf_defs, typedOther.cf_defs);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
0:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
0:         break;
1:       }
0:       switch (field.id) {
0:         case 1: // NAME
0:           if (field.type == TType.STRING) {
0:             this.name = iprot.readString();
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         case 2: // STRATEGY_CLASS
0:           if (field.type == TType.STRING) {
0:             this.strategy_class = iprot.readString();
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         case 3: // REPLICATION_FACTOR
0:           if (field.type == TType.I32) {
0:             this.replication_factor = iprot.readI32();
0:             setReplication_factorIsSet(true);
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         case 4: // SNITCH_CLASS
0:           if (field.type == TType.STRING) {
0:             this.snitch_class = iprot.readString();
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         case 5: // CF_DEFS
0:           if (field.type == TType.LIST) {
0:             {
0:               TList _list25 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list25.size);
0:               for (int _i26 = 0; _i26 < _list25.size; ++_i26)
0:               {
0:                 CfDef _elem27;
0:                 _elem27 = new CfDef();
0:                 _elem27.read(iprot);
0:                 this.cf_defs.add(_elem27);
1:               }
0:               iprot.readListEnd();
1:             }
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
0:       iprot.readFieldEnd();
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetReplication_factor()) {
0:       throw new TProtocolException("Required field 'replication_factor' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.name != null) {
0:       oprot.writeFieldBegin(NAME_FIELD_DESC);
0:       oprot.writeString(this.name);
0:       oprot.writeFieldEnd();
1:     }
0:     if (this.strategy_class != null) {
0:       oprot.writeFieldBegin(STRATEGY_CLASS_FIELD_DESC);
0:       oprot.writeString(this.strategy_class);
0:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldBegin(REPLICATION_FACTOR_FIELD_DESC);
0:     oprot.writeI32(this.replication_factor);
0:     oprot.writeFieldEnd();
0:     if (this.snitch_class != null) {
0:       oprot.writeFieldBegin(SNITCH_CLASS_FIELD_DESC);
0:       oprot.writeString(this.snitch_class);
0:       oprot.writeFieldEnd();
1:     }
0:     if (this.cf_defs != null) {
0:       oprot.writeFieldBegin(CF_DEFS_FIELD_DESC);
0:       {
0:         oprot.writeListBegin(new TList(TType.STRUCT, this.cf_defs.size()));
0:         for (CfDef _iter28 : this.cf_defs)
0:         {
0:           _iter28.write(oprot);
1:         }
0:         oprot.writeListEnd();
1:       }
0:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("KsDef(");
1:     boolean first = true;
1: 
1:     sb.append("name:");
1:     if (this.name == null) {
1:       sb.append("null");
0:     } else {
1:       sb.append(this.name);
1:     }
1:     first = false;
0:     if (!first) sb.append(", ");
1:     sb.append("strategy_class:");
1:     if (this.strategy_class == null) {
1:       sb.append("null");
0:     } else {
1:       sb.append(this.strategy_class);
1:     }
1:     first = false;
0:     if (!first) sb.append(", ");
0:     sb.append("replication_factor:");
0:     sb.append(this.replication_factor);
1:     first = false;
0:     if (!first) sb.append(", ");
0:     sb.append("snitch_class:");
0:     if (this.snitch_class == null) {
1:       sb.append("null");
0:     } else {
0:       sb.append(this.snitch_class);
1:     }
1:     first = false;
0:     if (!first) sb.append(", ");
1:     sb.append("cf_defs:");
1:     if (this.cf_defs == null) {
1:       sb.append("null");
0:     } else {
1:       sb.append(this.cf_defs);
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (name == null) {
0:       throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
1:     if (strategy_class == null) {
0:       throw new TProtocolException("Required field 'strategy_class' was not present! Struct: " + toString());
1:     }
0:     // alas, we cannot check 'replication_factor' because it's a primitive and you chose the non-beans generator.
0:     if (snitch_class == null) {
0:       throw new TProtocolException("Required field 'snitch_class' was not present! Struct: " + toString());
1:     }
1:     if (cf_defs == null) {
0:       throw new TProtocolException("Required field 'cf_defs' was not present! Struct: " + toString());
1:     }
1:   }
1: 
1: }
1: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
0:               TMap _map33 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map33.size);
0:               for (int _i34 = 0; _i34 < _map33.size; ++_i34)
0:                 String _key35;
0:                 String _val36;
0:                 _key35 = iprot.readString();
0:                 _val36 = iprot.readString();
0:                 this.strategy_options.put(_key35, _val36);
/////////////////////////////////////////////////////////////////////////
0:               TList _list37 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list37.size);
0:               for (int _i38 = 0; _i38 < _list37.size; ++_i38)
0:                 CfDef _elem39;
0:                 _elem39 = new CfDef();
0:                 _elem39.read(iprot);
0:                 this.cf_defs.add(_elem39);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter40 : this.strategy_options.entrySet())
0:             oprot.writeString(_iter40.getKey());
0:             oprot.writeString(_iter40.getValue());
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter41 : this.cf_defs)
0:           _iter41.write(oprot);
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:f351617
/////////////////////////////////////////////////////////////////////////
0:   private static final TField STRATEGY_OPTIONS_FIELD_DESC = new TField("strategy_options", TType.MAP, (short)3);
0:   private static final TField REPLICATION_FACTOR_FIELD_DESC = new TField("replication_factor", TType.I32, (short)4);
0:   public Map<String,String> strategy_options;
/////////////////////////////////////////////////////////////////////////
1:     STRATEGY_OPTIONS((short)3, "strategy_options"),
0:     REPLICATION_FACTOR((short)4, "replication_factor"),
/////////////////////////////////////////////////////////////////////////
1:         case 3: // STRATEGY_OPTIONS
1:           return STRATEGY_OPTIONS;
0:         case 4: // REPLICATION_FACTOR
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.STRATEGY_OPTIONS, new FieldMetaData("strategy_options", TFieldRequirementType.OPTIONAL, 
0:         new MapMetaData(TType.MAP, 
0:             new FieldValueMetaData(TType.STRING), 
0:             new FieldValueMetaData(TType.STRING))));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetStrategy_options()) {
0:       Map<String,String> __this__strategy_options = new HashMap<String,String>();
0:       for (Map.Entry<String, String> other_element : other.strategy_options.entrySet()) {
0: 
0:         String other_element_key = other_element.getKey();
0:         String other_element_value = other_element.getValue();
0: 
0:         String __this__strategy_options_copy_key = other_element_key;
0: 
0:         String __this__strategy_options_copy_value = other_element_value;
0: 
0:         __this__strategy_options.put(__this__strategy_options_copy_key, __this__strategy_options_copy_value);
0:       }
1:       this.strategy_options = __this__strategy_options;
0:     }
/////////////////////////////////////////////////////////////////////////
1:   public int getStrategy_optionsSize() {
1:     return (this.strategy_options == null) ? 0 : this.strategy_options.size();
0:   }
0: 
1:   public void putToStrategy_options(String key, String val) {
1:     if (this.strategy_options == null) {
1:       this.strategy_options = new HashMap<String,String>();
0:     }
1:     this.strategy_options.put(key, val);
0:   }
0: 
1:   public Map<String,String> getStrategy_options() {
1:     return this.strategy_options;
0:   }
0: 
1:   public KsDef setStrategy_options(Map<String,String> strategy_options) {
1:     this.strategy_options = strategy_options;
0:     return this;
0:   }
0: 
1:   public void unsetStrategy_options() {
1:     this.strategy_options = null;
0:   }
0: 
0:   /** Returns true if field strategy_options is set (has been asigned a value) and false otherwise */
1:   public boolean isSetStrategy_options() {
1:     return this.strategy_options != null;
0:   }
0: 
1:   public void setStrategy_optionsIsSet(boolean value) {
0:     if (!value) {
1:       this.strategy_options = null;
0:     }
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:     case STRATEGY_OPTIONS:
0:       if (value == null) {
1:         unsetStrategy_options();
0:       } else {
1:         setStrategy_options((Map<String,String>)value);
0:       }
0:       break;
0: 
/////////////////////////////////////////////////////////////////////////
1:     case STRATEGY_OPTIONS:
1:       return getStrategy_options();
0: 
/////////////////////////////////////////////////////////////////////////
1:     case STRATEGY_OPTIONS:
1:       return isSetStrategy_options();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_strategy_options = true && this.isSetStrategy_options();
1:     boolean that_present_strategy_options = true && that.isSetStrategy_options();
1:     if (this_present_strategy_options || that_present_strategy_options) {
1:       if (!(this_present_strategy_options && that_present_strategy_options))
0:         return false;
1:       if (!this.strategy_options.equals(that.strategy_options))
0:         return false;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetStrategy_options()).compareTo(typedOther.isSetStrategy_options());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetStrategy_options()) {      lastComparison = TBaseHelper.compareTo(this.strategy_options, typedOther.strategy_options);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
/////////////////////////////////////////////////////////////////////////
0:         case 3: // STRATEGY_OPTIONS
0:           if (field.type == TType.MAP) {
0:             {
0:               TMap _map33 = iprot.readMapBegin();
0:               this.strategy_options = new HashMap<String,String>(2*_map33.size);
0:               for (int _i34 = 0; _i34 < _map33.size; ++_i34)
0:               {
0:                 String _key35;
0:                 String _val36;
0:                 _key35 = iprot.readString();
0:                 _val36 = iprot.readString();
0:                 this.strategy_options.put(_key35, _val36);
0:               }
0:               iprot.readMapEnd();
0:             }
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
0:         case 4: // REPLICATION_FACTOR
/////////////////////////////////////////////////////////////////////////
0:               TList _list37 = iprot.readListBegin();
0:               this.cf_defs = new ArrayList<CfDef>(_list37.size);
0:               for (int _i38 = 0; _i38 < _list37.size; ++_i38)
0:                 CfDef _elem39;
0:                 _elem39 = new CfDef();
0:                 _elem39.read(iprot);
0:                 this.cf_defs.add(_elem39);
/////////////////////////////////////////////////////////////////////////
0:     if (this.strategy_options != null) {
1:       if (isSetStrategy_options()) {
0:         oprot.writeFieldBegin(STRATEGY_OPTIONS_FIELD_DESC);
0:         {
0:           oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.strategy_options.size()));
0:           for (Map.Entry<String, String> _iter40 : this.strategy_options.entrySet())
0:           {
0:             oprot.writeString(_iter40.getKey());
0:             oprot.writeString(_iter40.getValue());
0:           }
0:           oprot.writeMapEnd();
0:         }
0:         oprot.writeFieldEnd();
0:       }
0:     }
/////////////////////////////////////////////////////////////////////////
0:         for (CfDef _iter41 : this.cf_defs)
0:           _iter41.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetStrategy_options()) {
0:       if (!first) sb.append(", ");
1:       sb.append("strategy_options:");
1:       if (this.strategy_options == null) {
0:         sb.append("null");
0:       } else {
1:         sb.append(this.strategy_options);
0:       }
0:       first = false;
0:     }
commit:fe34d59
/////////////////////////////////////////////////////////////////////////
0: 
0: 
============================================================================