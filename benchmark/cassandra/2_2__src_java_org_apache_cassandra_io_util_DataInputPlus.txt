1:03f72ac: /*
1:03f72ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:03f72ac:  * or more contributor license agreements.  See the NOTICE file
1:03f72ac:  * distributed with this work for additional information
1:03f72ac:  * regarding copyright ownership.  The ASF licenses this file
1:03f72ac:  * to you under the Apache License, Version 2.0 (the
1:03f72ac:  * "License"); you may not use this file except in compliance
1:03f72ac:  * with the License.  You may obtain a copy of the License at
1:03f72ac:  *
1:03f72ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:03f72ac:  *
1:03f72ac:  * Unless required by applicable law or agreed to in writing, software
1:03f72ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:03f72ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:03f72ac:  * See the License for the specific language governing permissions and
1:03f72ac:  * limitations under the License.
1:03f72ac:  */
1:03f72ac: package org.apache.cassandra.io.util;
20:03f72ac: 
1:ff27eb3: import java.io.*;
1:03f72ac: 
1:03f72ac: import org.apache.cassandra.utils.vint.VIntCoding;
1:03f72ac: 
1:03f72ac: /**
1:03f72ac:  * Extension to DataInput that provides support for reading varints
1:03f72ac:  */
1:03f72ac: public interface DataInputPlus extends DataInput
20:03f72ac: {
1:03f72ac:     default long readVInt() throws IOException
1:03f72ac:     {
1:03f72ac:         return VIntCoding.readVInt(this);
20:03f72ac:     }
1:03f72ac: 
1:03f72ac:     /**
1:03f72ac:      * Think hard before opting for an unsigned encoding. Is this going to bite someone because some day
1:03f72ac:      * they might need to pass in a sentinel value using negative numbers? Is the risk worth it
1:03f72ac:      * to save a few bytes?
1:03f72ac:      *
1:03f72ac:      * Signed, not a fan of unsigned values in protocols and formats
1:03f72ac:      */
1:03f72ac:     default long readUnsignedVInt() throws IOException
1:03f72ac:     {
1:03f72ac:         return VIntCoding.readUnsignedVInt(this);
1:03f72ac:     }
1:03f72ac: 
1:03f72ac:     /**
1:ff27eb3:      * Always skips the requested number of bytes, unless EOF is reached
1:ff27eb3:      *
1:ff27eb3:      * @param n number of bytes to skip
1:ff27eb3:      * @return number of bytes skipped
1:ff27eb3:      */
1:ff27eb3:     public int skipBytes(int n) throws IOException;
1:ff27eb3: 
1:ff27eb3:     public default void skipBytesFully(int n) throws IOException
1:ff27eb3:     {
1:ff27eb3:         int skipped = skipBytes(n);
1:ff27eb3:         if (skipped != n)
1:ff27eb3:             throw new EOFException("EOF after " + skipped + " bytes out of " + n);
1:ff27eb3:     }
1:ff27eb3: 
1:ff27eb3:     /**
1:03f72ac:      * Wrapper around an InputStream that provides no buffering but can decode varints
1:03f72ac:      */
1:03f72ac:     public class DataInputStreamPlus extends DataInputStream implements DataInputPlus
1:03f72ac:     {
1:03f72ac:         public DataInputStreamPlus(InputStream is)
1:03f72ac:         {
1:03f72ac:             super(is);
1:03f72ac:         }
1:03f72ac:     }
1:03f72ac: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ff27eb3
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * Always skips the requested number of bytes, unless EOF is reached
1:      *
1:      * @param n number of bytes to skip
1:      * @return number of bytes skipped
1:      */
1:     public int skipBytes(int n) throws IOException;
1: 
1:     public default void skipBytesFully(int n) throws IOException
1:     {
1:         int skipped = skipBytes(n);
1:         if (skipped != n)
1:             throw new EOFException("EOF after " + skipped + " bytes out of " + n);
1:     }
1: 
1:     /**
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:177e0dc
/////////////////////////////////////////////////////////////////////////
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
0: import java.io.DataInput;
0: import java.io.DataInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
1: 
1: import org.apache.cassandra.utils.vint.VIntCoding;
1: 
1: /**
1:  * Extension to DataInput that provides support for reading varints
1:  */
1: public interface DataInputPlus extends DataInput
1: {
1: 
1:     default long readVInt() throws IOException
1:     {
1:         return VIntCoding.readVInt(this);
1:     }
1: 
1:     /**
1:      * Think hard before opting for an unsigned encoding. Is this going to bite someone because some day
1:      * they might need to pass in a sentinel value using negative numbers? Is the risk worth it
1:      * to save a few bytes?
1:      *
1:      * Signed, not a fan of unsigned values in protocols and formats
1:      */
1:     default long readUnsignedVInt() throws IOException
1:     {
1:         return VIntCoding.readUnsignedVInt(this);
1:     }
1: 
0:     public static class ForwardingDataInput implements DataInput
1:     {
0:         protected final DataInput in;
1: 
0:         public ForwardingDataInput(DataInput in)
1:         {
0:             this.in = in;
1:         }
1: 
0:         @Override
0:         public void readFully(byte[] b) throws IOException
1:         {
0:             in.readFully(b);
1:         }
1: 
0:         @Override
0:         public void readFully(byte[] b, int off, int len) throws IOException
1:         {
0:             in.readFully(b, off, len);
1:         }
1: 
0:         @Override
0:         public int skipBytes(int n) throws IOException
1:         {
0:             return in.skipBytes(n);
1:         }
1: 
0:         @Override
0:         public boolean readBoolean() throws IOException
1:         {
0:             return in.readBoolean();
1:         }
1: 
0:         @Override
0:         public byte readByte() throws IOException
1:         {
0:             return in.readByte();
1:         }
1: 
0:         @Override
0:         public int readUnsignedByte() throws IOException
1:         {
0:             return in.readUnsignedByte();
1:         }
1: 
0:         @Override
0:         public short readShort() throws IOException
1:         {
0:             return in.readShort();
1:         }
1: 
0:         @Override
0:         public int readUnsignedShort() throws IOException
1:         {
0:             return in.readUnsignedShort();
1:         }
1: 
0:         @Override
0:         public char readChar() throws IOException
1:         {
0:             return in.readChar();
1:         }
1: 
0:         @Override
0:         public int readInt() throws IOException
1:         {
0:             return in.readInt();
1:         }
1: 
0:         @Override
0:         public long readLong() throws IOException
1:         {
0:             return in.readLong();
1:         }
1: 
0:         @Override
0:         public float readFloat() throws IOException
1:         {
0:             return in.readFloat();
1:         }
1: 
0:         @Override
0:         public double readDouble() throws IOException
1:         {
0:             return in.readDouble();
1:         }
1: 
0:         @Override
0:         public String readLine() throws IOException
1:         {
0:             return in.readLine();
1:         }
1: 
0:         @Override
0:         public String readUTF() throws IOException
1:         {
0:             return in.readUTF();
1:         }
1:     }
1: 
0:     public static class DataInputPlusAdapter extends ForwardingDataInput implements DataInputPlus
1:     {
0:         public DataInputPlusAdapter(DataInput in)
1:         {
0:             super(in);
1:         }
1:     }
1: 
1:     /**
1:      * Wrapper around an InputStream that provides no buffering but can decode varints
1:      */
1:     public class DataInputStreamPlus extends DataInputStream implements DataInputPlus
1:     {
1:         public DataInputStreamPlus(InputStream is)
1:         {
1:             super(is);
1:         }
1:     }
1: }
============================================================================