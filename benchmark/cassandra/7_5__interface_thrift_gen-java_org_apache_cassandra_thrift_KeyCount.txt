1:078c56c: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:078c56c:  *
1:078c56c:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:078c56c:  */
1:078c56c: package org.apache.cassandra.thrift;
1:078c56c: /*
1:078c56c:  * 
1:078c56c:  * Licensed to the Apache Software Foundation (ASF) under one
1:078c56c:  * or more contributor license agreements.  See the NOTICE file
1:078c56c:  * distributed with this work for additional information
1:078c56c:  * regarding copyright ownership.  The ASF licenses this file
1:078c56c:  * to you under the Apache License, Version 2.0 (the
1:078c56c:  * "License"); you may not use this file except in compliance
1:078c56c:  * with the License.  You may obtain a copy of the License at
1:078c56c:  * 
1:078c56c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:078c56c:  * 
1:078c56c:  * Unless required by applicable law or agreed to in writing,
1:078c56c:  * software distributed under the License is distributed on an
1:078c56c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:078c56c:  * KIND, either express or implied.  See the License for the
1:078c56c:  * specific language governing permissions and limitations
1:078c56c:  * under the License.
1:078c56c:  * 
1:078c56c:  */
1:078c56c: 
1:078c56c: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:078c56c: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:078c56c: import java.util.List;
1:078c56c: import java.util.ArrayList;
1:078c56c: import java.util.Map;
1:078c56c: import java.util.HashMap;
1:078c56c: import java.util.EnumMap;
1:078c56c: import java.util.Set;
1:078c56c: import java.util.HashSet;
1:078c56c: import java.util.EnumSet;
1:078c56c: import java.util.Collections;
1:078c56c: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:078c56c: import java.util.Arrays;
1:078c56c: import org.slf4j.Logger;
1:078c56c: import org.slf4j.LoggerFactory;
1:078c56c: 
1:bffd9ea: public class KeyCount implements org.apache.thrift.TBase<KeyCount, KeyCount._Fields>, java.io.Serializable, Cloneable, Comparable<KeyCount> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyCount");
1:078c56c: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
1:078c56c: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new KeyCountStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new KeyCountTupleSchemeFactory());
1:078c56c:   }
1:078c56c: 
1:7c8c570:   public ByteBuffer key; // required
1:7c8c570:   public int count; // required
1:078c56c: 
1:078c56c:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:078c56c:     KEY((short)1, "key"),
1:078c56c:     COUNT((short)2, "count");
1:078c56c: 
1:078c56c:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:078c56c: 
1:078c56c:     static {
1:078c56c:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:078c56c:         byName.put(field.getFieldName(), field);
1:078c56c:       }
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // KEY
1:d849c69:           return KEY;
1:d849c69:         case 2: // COUNT
1:d849c69:           return COUNT;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches fieldId, throwing an exception
1:078c56c:      * if it is not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:078c56c:       _Fields fields = findByThriftId(fieldId);
1:078c56c:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:078c56c:       return fields;
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches name, or null if its not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByName(String name) {
1:078c56c:       return byName.get(name);
1:078c56c:     }
1:078c56c: 
1:078c56c:     private final short _thriftId;
1:078c56c:     private final String _fieldName;
1:078c56c: 
1:078c56c:     _Fields(short thriftId, String fieldName) {
1:078c56c:       _thriftId = thriftId;
1:078c56c:       _fieldName = fieldName;
1:078c56c:     }
1:078c56c: 
1:078c56c:     public short getThriftFieldId() {
1:078c56c:       return _thriftId;
1:078c56c:     }
1:078c56c: 
1:078c56c:     public String getFieldName() {
1:078c56c:       return _fieldName;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   // isset id assignments
1:078c56c:   private static final int __COUNT_ISSET_ID = 0;
1:b153d45:   private byte __isset_bitfield = 0;
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:078c56c:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyCount.class, metaDataMap);
1:078c56c:   }
1:078c56c: 
1:078c56c:   public KeyCount() {
1:078c56c:   }
1:078c56c: 
1:078c56c:   public KeyCount(
1:e7a385a:     ByteBuffer key,
1:078c56c:     int count)
1:078c56c:   {
1:078c56c:     this();
1:078c56c:     this.key = key;
1:078c56c:     this.count = count;
2:078c56c:     setCountIsSet(true);
1:078c56c:   }
1:078c56c: 
1:078c56c:   /**
1:078c56c:    * Performs a deep copy on <i>other</i>.
1:078c56c:    */
1:078c56c:   public KeyCount(KeyCount other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:078c56c:     if (other.isSetKey()) {
1:4ec9511:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
1:e7a385a: ;
1:078c56c:     }
1:078c56c:     this.count = other.count;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public KeyCount deepCopy() {
2:078c56c:     return new KeyCount(this);
1:078c56c:   }
1:078c56c: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.key = null;
1:e7a385a:     setCountIsSet(false);
1:e7a385a:     this.count = 0;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public byte[] getKey() {
1:4ec9511:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:4ec9511:     return key == null ? null : key.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForKey() {
1:e7a385a:     return key;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public KeyCount setKey(byte[] key) {
1:4ec9511:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public KeyCount setKey(ByteBuffer key) {
1:078c56c:     this.key = key;
1:078c56c:     return this;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void unsetKey() {
1:078c56c:     this.key = null;
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSetKey() {
1:078c56c:     return this.key != null;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setKeyIsSet(boolean value) {
1:078c56c:     if (!value) {
1:078c56c:       this.key = null;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public int getCount() {
1:078c56c:     return this.count;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public KeyCount setCount(int count) {
1:078c56c:     this.count = count;
1:078c56c:     setCountIsSet(true);
1:078c56c:     return this;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void unsetCount() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSetCount() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setCountIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setFieldValue(_Fields field, Object value) {
1:078c56c:     switch (field) {
1:078c56c:     case KEY:
1:078c56c:       if (value == null) {
1:078c56c:         unsetKey();
1:078c56c:       } else {
1:e7a385a:         setKey((ByteBuffer)value);
1:078c56c:       }
1:078c56c:       break;
1:078c56c: 
1:078c56c:     case COUNT:
1:078c56c:       if (value == null) {
1:078c56c:         unsetCount();
1:078c56c:       } else {
1:078c56c:         setCount((Integer)value);
1:078c56c:       }
1:078c56c:       break;
1:078c56c: 
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public Object getFieldValue(_Fields field) {
1:078c56c:     switch (field) {
1:078c56c:     case KEY:
1:078c56c:       return getKey();
1:078c56c: 
1:078c56c:     case COUNT:
1:7c8c570:       return Integer.valueOf(getCount());
1:078c56c: 
1:078c56c:     }
1:078c56c:     throw new IllegalStateException();
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:078c56c:     switch (field) {
1:078c56c:     case KEY:
1:078c56c:       return isSetKey();
1:078c56c:     case COUNT:
1:078c56c:       return isSetCount();
1:078c56c:     }
1:078c56c:     throw new IllegalStateException();
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public boolean equals(Object that) {
1:078c56c:     if (that == null)
1:078c56c:       return false;
1:078c56c:     if (that instanceof KeyCount)
1:078c56c:       return this.equals((KeyCount)that);
1:078c56c:     return false;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public boolean equals(KeyCount that) {
1:078c56c:     if (that == null)
1:078c56c:       return false;
1:078c56c: 
1:078c56c:     boolean this_present_key = true && this.isSetKey();
1:078c56c:     boolean that_present_key = true && that.isSetKey();
1:078c56c:     if (this_present_key || that_present_key) {
1:078c56c:       if (!(this_present_key && that_present_key))
1:078c56c:         return false;
1:e7a385a:       if (!this.key.equals(that.key))
1:078c56c:         return false;
1:078c56c:     }
1:078c56c: 
1:078c56c:     boolean this_present_count = true;
1:078c56c:     boolean that_present_count = true;
1:078c56c:     if (this_present_count || that_present_count) {
1:078c56c:       if (!(this_present_count && that_present_count))
1:078c56c:         return false;
1:078c56c:       if (this.count != that.count)
1:078c56c:         return false;
1:078c56c:     }
1:078c56c: 
1:078c56c:     return true;
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_key = true && (isSetKey());
1:d966ed0:     builder.append(present_key);
1:d966ed0:     if (present_key)
1:d966ed0:       builder.append(key);
1:d966ed0: 
1:d966ed0:     boolean present_count = true;
1:d966ed0:     builder.append(present_count);
1:d966ed0:     if (present_count)
1:d966ed0:       builder.append(count);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:078c56c:   }
1:078c56c: 
1:bffd9ea:   @Override
1:078c56c:   public int compareTo(KeyCount other) {
1:078c56c:     if (!getClass().equals(other.getClass())) {
1:078c56c:       return getClass().getName().compareTo(other.getClass().getName());
1:078c56c:     }
1:078c56c: 
1:078c56c:     int lastComparison = 0;
1:078c56c: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
1:078c56c:     if (lastComparison != 0) {
1:078c56c:       return lastComparison;
1:078c56c:     }
1:e7a385a:     if (isSetKey()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:078c56c:       if (lastComparison != 0) {
1:078c56c:         return lastComparison;
1:078c56c:       }
1:078c56c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:078c56c:     if (lastComparison != 0) {
1:078c56c:       return lastComparison;
1:078c56c:     }
1:e7a385a:     if (isSetCount()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:078c56c:       if (lastComparison != 0) {
1:078c56c:         return lastComparison;
1:078c56c:       }
1:078c56c:     }
2:078c56c:     return 0;
1:078c56c:   }
1:078c56c: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:078c56c:   }
1:078c56c: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public String toString() {
1:078c56c:     StringBuilder sb = new StringBuilder("KeyCount(");
1:078c56c:     boolean first = true;
1:078c56c: 
1:078c56c:     sb.append("key:");
1:078c56c:     if (this.key == null) {
1:078c56c:       sb.append("null");
1:078c56c:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.key, sb);
1:078c56c:     }
1:078c56c:     first = false;
1:078c56c:     if (!first) sb.append(", ");
1:078c56c:     sb.append("count:");
1:078c56c:     sb.append(this.count);
1:078c56c:     first = false;
1:078c56c:     sb.append(")");
1:078c56c:     return sb.toString();
1:078c56c:   }
1:078c56c: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:078c56c:     // check for required fields
1:078c56c:     if (key == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:078c56c:     }
1:078c56c:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:b153d45:     // check for sub-struct validity
1:078c56c:   }
1:078c56c: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class KeyCountStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public KeyCountStandardScheme getScheme() {
1:b153d45:       return new KeyCountStandardScheme();
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class KeyCountStandardScheme extends StandardScheme<KeyCount> {
1:078c56c: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, KeyCount struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:078c56c:       iprot.readStructBegin();
1:078c56c:       while (true)
1:078c56c:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:078c56c:           break;
1:078c56c:         }
1:b153d45:         switch (schemeField.id) {
1:078c56c:           case 1: // KEY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.key = iprot.readBinary();
1:b153d45:               struct.setKeyIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:078c56c:             }
1:078c56c:             break;
1:078c56c:           case 2: // COUNT
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.count = iprot.readI32();
1:b153d45:               struct.setCountIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:078c56c:             break;
1:078c56c:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
12:b153d45:         }
1:078c56c:         iprot.readFieldEnd();
1:b153d45:       }
1:078c56c:       iprot.readStructEnd();
1:078c56c: 
1:078c56c:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       if (!struct.isSetCount()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:b153d45:       }
1:b153d45:       struct.validate();
1:b153d45:     }
1:078c56c: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, KeyCount struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:078c56c:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.key != null) {
1:078c56c:         oprot.writeFieldBegin(KEY_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.key);
1:078c56c:         oprot.writeFieldEnd();
1:078c56c:       }
1:078c56c:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:b153d45:       oprot.writeI32(struct.count);
1:078c56c:       oprot.writeFieldEnd();
1:078c56c:       oprot.writeFieldStop();
1:078c56c:       oprot.writeStructEnd();
1:078c56c:     }
1:078c56c: 
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class KeyCountTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public KeyCountTupleScheme getScheme() {
1:b153d45:       return new KeyCountTupleScheme();
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class KeyCountTupleScheme extends TupleScheme<KeyCount> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, KeyCount struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.key);
1:b153d45:       oprot.writeI32(struct.count);
1:078c56c:     }
9:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, KeyCount struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.key = iprot.readBinary();
1:b153d45:       struct.setKeyIsSet(true);
1:b153d45:       struct.count = iprot.readI32();
1:b153d45:       struct.setCountIsSet(true);
1:078c56c:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class KeyCount implements org.apache.thrift.TBase<KeyCount, KeyCount._Fields>, java.io.Serializable, Cloneable, Comparable<KeyCount> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer key;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer key,
/////////////////////////////////////////////////////////////////////////
0:       this.key = TBaseHelper.copyBinary(other.key);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.key = null;
1:     setCountIsSet(false);
1:     this.count = 0;
0:     setKey(TBaseHelper.rightSize(key));
0:     return key.array();
1:   }
1: 
0:   public ByteBuffer BufferForKey() {
1:     return key;
0:     setKey(ByteBuffer.wrap(key));
1:     return this;
1:   }
1: 
1:   public KeyCount setKey(ByteBuffer key) {
/////////////////////////////////////////////////////////////////////////
1:         setKey((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.key.equals(that.key))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetKey()) {
0:       lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetCount()) {
0:       lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.key, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_key = true && (isSetKey());
1:     builder.append(present_key);
1:     if (present_key)
1:       builder.append(key);
1: 
1:     boolean present_count = true;
1:     builder.append(present_count);
1:     if (present_count)
1:       builder.append(count);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class KeyCount implements TBase<KeyCount, KeyCount._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // KEY
1:           return KEY;
1:         case 2: // COUNT
1:           return COUNT;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I32)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetKey()) {      lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
commit:078c56c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class KeyCount implements TBase<KeyCount._Fields>, java.io.Serializable, Cloneable, Comparable<KeyCount> {
0:   private static final TStruct STRUCT_DESC = new TStruct("KeyCount");
1: 
0:   private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
0:   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)2);
1: 
0:   public byte[] key;
0:   public int count;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     KEY((short)1, "key"),
1:     COUNT((short)2, "count");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __COUNT_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I32)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(KeyCount.class, metaDataMap);
1:   }
1: 
1:   public KeyCount() {
1:   }
1: 
1:   public KeyCount(
0:     byte[] key,
1:     int count)
1:   {
1:     this();
1:     this.key = key;
1:     this.count = count;
1:     setCountIsSet(true);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public KeyCount(KeyCount other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetKey()) {
0:       this.key = new byte[other.key.length];
0:       System.arraycopy(other.key, 0, key, 0, other.key.length);
1:     }
1:     this.count = other.count;
1:   }
1: 
1:   public KeyCount deepCopy() {
1:     return new KeyCount(this);
1:   }
1: 
0:   @Deprecated
0:   public KeyCount clone() {
1:     return new KeyCount(this);
1:   }
1: 
1:   public byte[] getKey() {
0:     return this.key;
1:   }
1: 
1:   public KeyCount setKey(byte[] key) {
1:     this.key = key;
1:     return this;
1:   }
1: 
1:   public void unsetKey() {
1:     this.key = null;
1:   }
1: 
0:   /** Returns true if field key is set (has been asigned a value) and false otherwise */
1:   public boolean isSetKey() {
1:     return this.key != null;
1:   }
1: 
1:   public void setKeyIsSet(boolean value) {
1:     if (!value) {
1:       this.key = null;
1:     }
1:   }
1: 
1:   public int getCount() {
1:     return this.count;
1:   }
1: 
1:   public KeyCount setCount(int count) {
1:     this.count = count;
1:     setCountIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetCount() {
0:     __isset_bit_vector.clear(__COUNT_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field count is set (has been asigned a value) and false otherwise */
1:   public boolean isSetCount() {
0:     return __isset_bit_vector.get(__COUNT_ISSET_ID);
1:   }
1: 
1:   public void setCountIsSet(boolean value) {
0:     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case KEY:
1:       if (value == null) {
1:         unsetKey();
1:       } else {
0:         setKey((byte[])value);
1:       }
1:       break;
1: 
1:     case COUNT:
1:       if (value == null) {
1:         unsetCount();
1:       } else {
1:         setCount((Integer)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case KEY:
1:       return getKey();
1: 
1:     case COUNT:
0:       return new Integer(getCount());
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     case KEY:
1:       return isSetKey();
1:     case COUNT:
1:       return isSetCount();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof KeyCount)
1:       return this.equals((KeyCount)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(KeyCount that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_key = true && this.isSetKey();
1:     boolean that_present_key = true && that.isSetKey();
1:     if (this_present_key || that_present_key) {
1:       if (!(this_present_key && that_present_key))
1:         return false;
0:       if (!java.util.Arrays.equals(this.key, that.key))
1:         return false;
1:     }
1: 
1:     boolean this_present_count = true;
1:     boolean that_present_count = true;
1:     if (this_present_count || that_present_count) {
1:       if (!(this_present_count && that_present_count))
1:         return false;
1:       if (this.count != that.count)
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(KeyCount other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     KeyCount typedOther = (KeyCount)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetKey()) {      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(count, typedOther.count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // KEY
0:           if (field.type == TType.STRING) {
0:             this.key = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // COUNT
0:           if (field.type == TType.I32) {
0:             this.count = iprot.readI32();
1:             setCountIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
1:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetCount()) {
0:       throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.key != null) {
1:       oprot.writeFieldBegin(KEY_FIELD_DESC);
0:       oprot.writeBinary(this.key);
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldBegin(COUNT_FIELD_DESC);
0:     oprot.writeI32(this.count);
1:     oprot.writeFieldEnd();
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("KeyCount(");
1:     boolean first = true;
1: 
1:     sb.append("key:");
1:     if (this.key == null) {
1:       sb.append("null");
1:     } else {
0:         int __key_size = Math.min(this.key.length, 128);
0:         for (int i = 0; i < __key_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
1:         }
0:         if (this.key.length > 128) sb.append(" ...");
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("count:");
1:     sb.append(this.count);
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (key == null) {
0:       throw new TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:     }
1:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new KeyCountStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new KeyCountTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class KeyCountStandardSchemeFactory implements SchemeFactory {
1:     public KeyCountStandardScheme getScheme() {
1:       return new KeyCountStandardScheme();
1:     }
1:   }
1: 
1:   private static class KeyCountStandardScheme extends StandardScheme<KeyCount> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, KeyCount struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // KEY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.key = iprot.readBinary();
1:               struct.setKeyIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // COUNT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.count = iprot.readI32();
1:               struct.setCountIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetCount()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:       }
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, KeyCount struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.key != null) {
0:         oprot.writeFieldBegin(KEY_FIELD_DESC);
1:         oprot.writeBinary(struct.key);
0:         oprot.writeFieldEnd();
1:       }
0:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:       oprot.writeI32(struct.count);
0:       oprot.writeFieldEnd();
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class KeyCountTupleSchemeFactory implements SchemeFactory {
1:     public KeyCountTupleScheme getScheme() {
1:       return new KeyCountTupleScheme();
1:     }
1:   }
1: 
1:   private static class KeyCountTupleScheme extends TupleScheme<KeyCount> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, KeyCount struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.key);
1:       oprot.writeI32(struct.count);
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, KeyCount struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.key = iprot.readBinary();
1:       struct.setKeyIsSet(true);
1:       struct.count = iprot.readI32();
1:       struct.setCountIsSet(true);
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer key; // required
1:   public int count; // required
/////////////////////////////////////////////////////////////////////////
1:       return Integer.valueOf(getCount());
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class KeyCount implements org.apache.thrift.TBase<KeyCount, KeyCount._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyCount");
1:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyCount.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
/////////////////////////////////////////////////////////////////////////
1:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:     return key == null ? null : key.array();
1:   public ByteBuffer bufferForKey() {
1:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.key, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
============================================================================