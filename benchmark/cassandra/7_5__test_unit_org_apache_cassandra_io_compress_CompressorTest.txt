1:895ec3e: /*
1:895ec3e:  * Licensed to the Apache Software Foundation (ASF) under one
1:895ec3e:  * or more contributor license agreements.  See the NOTICE file
1:895ec3e:  * distributed with this work for additional information
1:895ec3e:  * regarding copyright ownership.  The ASF licenses this file
1:895ec3e:  * to you under the Apache License, Version 2.0 (the
1:895ec3e:  * "License"); you may not use this file except in compliance
1:895ec3e:  * with the License.  You may obtain a copy of the License at
1:895ec3e:  *
1:895ec3e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:895ec3e:  *
1:895ec3e:  * Unless required by applicable law or agreed to in writing, software
1:895ec3e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:895ec3e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:895ec3e:  * See the License for the specific language governing permissions and
1:895ec3e:  * limitations under the License.
1:895ec3e:  */
1:895ec3e: package org.apache.cassandra.io.compress;
8:895ec3e: 
1:895ec3e: import java.io.*;
1:895ec3e: import java.nio.ByteBuffer;
1:895ec3e: import java.nio.MappedByteBuffer;
1:bc7941c: import java.nio.channels.FileChannel;
1:3adfd15: import java.nio.file.StandardOpenOption;
1:895ec3e: import java.util.Arrays;
1:895ec3e: import java.util.Collections;
1:895ec3e: import java.util.Random;
1:895ec3e: 
1:3adfd15: import com.google.common.io.Files;
1:bc7941c: import static org.junit.Assert.*;
1:895ec3e: import org.junit.Assert;
1:895ec3e: import org.junit.Test;
1:bc7941c: 
1:3adfd15: import org.apache.cassandra.io.util.RandomAccessReader;
1:bc7941c: import org.apache.cassandra.utils.ByteBufferUtil;
1:895ec3e: 
1:895ec3e: public class CompressorTest
2:895ec3e: {
1:895ec3e:     ICompressor compressor;
1:895ec3e: 
1:895ec3e:     ICompressor[] compressors = new ICompressor[] {
1:895ec3e:             LZ4Compressor.create(Collections.<String, String>emptyMap()),
1:895ec3e:             DeflateCompressor.create(Collections.<String, String>emptyMap()),
1:895ec3e:             SnappyCompressor.create(Collections.<String, String>emptyMap())
1:895ec3e:     };
1:895ec3e: 
1:895ec3e:     @Test
1:895ec3e:     public void testAllCompressors() throws IOException
1:895ec3e:     {
1:895ec3e:         for (ICompressor compressor : compressors)
1:895ec3e:         {
1:895ec3e:             this.compressor = compressor;
1:895ec3e: 
1:895ec3e:             testEmptyArray();
1:895ec3e:             testLongArray();
1:895ec3e:             testShortArray();
1:895ec3e:             testMappedFile();
2:895ec3e:         }
1:895ec3e:     }
1:bc7941c: 
1:bc7941c:     public void testArrayUncompress(byte[] data, int off, int len) throws IOException
1:895ec3e:     {
1:3adfd15:         final int inOffset = 2;
1:3adfd15:         ByteBuffer src = makeBB(len + inOffset);
1:3adfd15:         src.position(inOffset);
1:bc7941c:         src.put(data, off, len);
1:3adfd15:         src.flip().position(inOffset);
1:bc7941c: 
1:895ec3e:         final int outOffset = 3;
1:3adfd15:         final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len));
1:3adfd15:         fillBBWithRandom(compressed);
1:3adfd15:         compressed.position(outOffset);
1:bc7941c: 
1:3adfd15:         compressor.compress(src, compressed);
1:3adfd15:         compressed.flip().position(outOffset);
1:bc7941c: 
1:bc7941c:         final int restoreOffset = 5;
1:bc7941c:         final byte[] restored = new byte[restoreOffset + len];
1:895ec3e:         new Random().nextBytes(restored);
1:bc7941c: 
1:bc7941c:         // need byte[] representation which direct buffers don't have
1:3adfd15:         byte[] compressedBytes = new byte[compressed.capacity()];
1:8d5b7b6:         ByteBufferUtil.arrayCopy(compressed, outOffset, compressedBytes, outOffset, compressed.limit() - outOffset);
1:bc7941c: 
1:3adfd15:         final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset);
1:bc7941c: 
1:895ec3e:         assertEquals(decompressedLength, len);
1:895ec3e:         assertArrayEquals(Arrays.copyOfRange(data, off, off + len),
1:a991b64:                           Arrays.copyOfRange(restored, restoreOffset, restoreOffset + decompressedLength));
1:895ec3e:     }
1:bc7941c: 
1:bc7941c:     public void testArrayUncompress(byte[] data) throws IOException
1:895ec3e:     {
1:bc7941c:         testArrayUncompress(data, 0, data.length);
1:895ec3e:     }
1:895ec3e: 
1:895ec3e:     public void testEmptyArray() throws IOException
1:895ec3e:     {
1:bc7941c:         testArrayUncompress(new byte[0]);
1:895ec3e:     }
1:895ec3e: 
1:895ec3e:     public void testShortArray() throws UnsupportedEncodingException, IOException
1:895ec3e:     {
1:bc7941c:         testArrayUncompress("Cassandra".getBytes("UTF-8"), 1, 7);
1:895ec3e:     }
1:895ec3e: 
1:895ec3e:     public void testLongArray() throws UnsupportedEncodingException, IOException
1:895ec3e:     {
1:895ec3e:         byte[] data = new byte[1 << 20];
1:bc7941c:         testArrayUncompress(data, 13, 1 << 19);
1:895ec3e:         new Random(0).nextBytes(data);
1:bc7941c:         testArrayUncompress(data, 13, 1 << 19);
1:895ec3e:     }
1:895ec3e: 
1:895ec3e:     public void testMappedFile() throws IOException
1:895ec3e:     {
1:895ec3e:         byte[] data = new byte[1 << 20];
1:895ec3e:         new Random().nextBytes(data);
1:bc7941c:         ByteBuffer src = makeBB(data.length);
1:bc7941c:         src.put(data);
1:bc7941c:         src.flip();
1:895ec3e: 
1:bc7941c:         // create a temp file
1:895ec3e:         File temp = File.createTempFile("tempfile", ".tmp");
1:895ec3e:         temp.deleteOnExit();
1:895ec3e: 
1:bc7941c:         // Prepend some random bytes to the output and compress
1:895ec3e:         final int outOffset = 3;
1:bc7941c:         byte[] garbage = new byte[outOffset + compressor.initialCompressedBufferLength(data.length)];
1:bc7941c:         new Random().nextBytes(garbage);
1:3adfd15:         ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length));
1:3adfd15:         dest.put(garbage);
1:3adfd15:         dest.clear();
1:3adfd15:         dest.position(outOffset);
1:bc7941c: 
1:3adfd15:         compressor.compress(src, dest);
1:3adfd15:         int compressedLength = dest.position() - outOffset;
1:bc7941c: 
1:3adfd15:         FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);
1:3adfd15:         dest.clear();
1:3adfd15:         channel.write(dest);
1:895ec3e: 
1:895ec3e:         MappedByteBuffer mappedData = Files.map(temp);
1:bc7941c:         ByteBuffer result = makeBB(data.length + 100);
1:3adfd15:         mappedData.position(outOffset).limit(outOffset + compressedLength);
1:895ec3e: 
1:3adfd15:         compressor.uncompress(mappedData, result);
1:3adfd15:         channel.close();
1:3adfd15:         result.flip();
1:895ec3e: 
1:3adfd15:         Assert.assertEquals(data.length, result.limit());
1:3adfd15:         for (int i = 0; i < result.limit(); i++)
1:bc7941c:         {
1:895ec3e:             Assert.assertEquals("Decompression mismatch at byte "+i, data[i], result.get());
1:bc7941c:         }
1:895ec3e:     }
1:895ec3e: 
1:bc7941c:     @Test
1:bc7941c:     public void testLZ4ByteBuffers() throws IOException
1:bc7941c:     {
1:bc7941c:         compressor = LZ4Compressor.create(Collections.<String, String>emptyMap());
1:bc7941c:         testByteBuffers();
1:bc7941c:     }
1:bc7941c: 
1:bc7941c:     @Test
1:bc7941c:     public void testDeflateByteBuffers() throws IOException
1:bc7941c:     {
1:bc7941c:         compressor = DeflateCompressor.create(Collections.<String, String>emptyMap());
1:bc7941c:         testByteBuffers();
1:bc7941c:     }
1:bc7941c: 
1:bc7941c:     @Test
1:bc7941c:     public void testSnappyByteBuffers() throws IOException
1:bc7941c:     {
1:bc7941c:         compressor = SnappyCompressor.create(Collections.<String, String>emptyMap());
1:bc7941c:         testByteBuffers();
1:bc7941c:     }
1:bc7941c: 
1:bc7941c:     private void testByteBuffers() throws IOException
1:bc7941c:     {
1:3adfd15:         assert compressor.supports(BufferType.OFF_HEAP);
1:3adfd15:         assert compressor.supports(compressor.preferredBufferType());
1:bc7941c: 
1:3adfd15:         for (BufferType in: BufferType.values())
1:3adfd15:             if (compressor.supports(in))
1:3adfd15:                 for (BufferType comp: BufferType.values())
1:3adfd15:                     if (compressor.supports(comp))
1:3adfd15:                         for (BufferType out: BufferType.values())
1:3adfd15:                             if (compressor.supports(out))
1:3adfd15:                                 testByteBuffers(in, comp, out);
1:3adfd15:     }
1:bc7941c: 
1:3adfd15:     private void testByteBuffers(BufferType typeIn, BufferType typeComp, BufferType typeOut) throws IOException
1:3adfd15:     {
1:3adfd15:         try
1:3adfd15:         {
1:3adfd15:             int n = RandomAccessReader.DEFAULT_BUFFER_SIZE;
1:3adfd15:             byte[] srcData = new byte[n];
1:3adfd15:             new Random().nextBytes(srcData);
1:bc7941c: 
1:3adfd15:             final int inOffset = 2;
1:3adfd15:             ByteBuffer src = typeIn.allocate(inOffset + n + inOffset);
1:3adfd15:             src.position(inOffset);
1:3adfd15:             src.put(srcData, 0, n);
1:3adfd15:             src.flip().position(inOffset);
1:bc7941c: 
1:3adfd15:             int outOffset = 5;
1:3adfd15:             ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset);
1:3adfd15:             byte[] garbage = new byte[compressed.capacity()];
1:3adfd15:             new Random().nextBytes(garbage);
1:3adfd15:             compressed.put(garbage);
1:3adfd15:             compressed.position(outOffset).limit(compressed.capacity() - outOffset);
1:bc7941c: 
1:3adfd15:             compressor.compress(src, compressed);
1:3adfd15:             assertEquals(inOffset + n, src.position());
1:3adfd15:             assertEquals(inOffset + n, src.limit());
1:3adfd15:             assertEquals(compressed.capacity() - outOffset, compressed.limit());
1:3adfd15:             compressed.flip().position(outOffset);
1:3adfd15:             int len = compressed.remaining();
1:3adfd15: 
1:3adfd15:             ByteBuffer result = typeOut.allocate(inOffset + n + inOffset);
1:3adfd15:             result.position(inOffset).limit(result.capacity() - inOffset);
1:3adfd15:             compressor.uncompress(compressed, result);
1:3adfd15:             assertEquals(outOffset + len, compressed.position());
1:3adfd15:             assertEquals(outOffset + len, compressed.limit());
1:3adfd15:             assertEquals(result.capacity() - inOffset, result.limit());
1:3adfd15: 
1:3adfd15:             int decompressed = result.position() - inOffset;
1:3adfd15:             assert decompressed == n : "Failed uncompressed size";
1:3adfd15:             for (int i = 0; i < n; ++i)
1:3adfd15:                 assert srcData[i] == result.get(inOffset + i) : "Failed comparison on index: " + i;
1:3adfd15:         }
1:3adfd15:         catch (Throwable e)
1:3adfd15:         {
1:3adfd15:             throw new AssertionError("Failed testing compressor " + compressor.getClass().getSimpleName() + " with buffer types in:" + typeIn + " compressed:" + typeComp + " out:" + typeOut, e);
1:3adfd15:         }
1:bc7941c:     }
1:bc7941c: 
1:bc7941c:     private ByteBuffer makeBB(int size)
1:bc7941c:     {
1:3adfd15:         return compressor.preferredBufferType().allocate(size);
1:bc7941c:     }
1:bc7941c: 
1:bc7941c:     private void fillBBWithRandom(ByteBuffer dest)
1:bc7941c:     {
1:bc7941c:         byte[] random = new byte[dest.capacity()];
1:bc7941c:         new Random().nextBytes(random);
1:bc7941c:         dest.clear();
1:bc7941c:         dest.put(random);
1:bc7941c:     }
1:bc7941c: 
1:895ec3e: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d354ddc
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:                           Arrays.copyOfRange(restored, restoreOffset, restoreOffset + decompressedLength));
author:Rei Odaira
-------------------------------------------------------------------------------
commit:8d5b7b6
/////////////////////////////////////////////////////////////////////////
1:         ByteBufferUtil.arrayCopy(compressed, outOffset, compressedBytes, outOffset, compressed.limit() - outOffset);
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.memory.BufferPool;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
1: import java.nio.file.StandardOpenOption;
1: import com.google.common.io.Files;
1: import org.apache.cassandra.io.util.RandomAccessReader;
/////////////////////////////////////////////////////////////////////////
1:         final int inOffset = 2;
1:         ByteBuffer src = makeBB(len + inOffset);
1:         src.position(inOffset);
1:         src.flip().position(inOffset);
1:         final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len));
1:         fillBBWithRandom(compressed);
1:         compressed.position(outOffset);
1:         compressor.compress(src, compressed);
1:         compressed.flip().position(outOffset);
1:         byte[] compressedBytes = new byte[compressed.capacity()];
0:         ByteBufferUtil.arrayCopy(compressed, outOffset, compressedBytes, outOffset, compressed.capacity() - outOffset);
1:         final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset);
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length));
1:         dest.put(garbage);
1:         dest.clear();
1:         dest.position(outOffset);
1:         compressor.compress(src, dest);
1:         int compressedLength = dest.position() - outOffset;
1:         FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);
1:         dest.clear();
1:         channel.write(dest);
1:         mappedData.position(outOffset).limit(outOffset + compressedLength);
1:         compressor.uncompress(mappedData, result);
1:         channel.close();
1:         result.flip();
1:         Assert.assertEquals(data.length, result.limit());
1:         for (int i = 0; i < result.limit(); i++)
/////////////////////////////////////////////////////////////////////////
1:         assert compressor.supports(BufferType.OFF_HEAP);
1:         assert compressor.supports(compressor.preferredBufferType());
1:         for (BufferType in: BufferType.values())
1:             if (compressor.supports(in))
1:                 for (BufferType comp: BufferType.values())
1:                     if (compressor.supports(comp))
1:                         for (BufferType out: BufferType.values())
1:                             if (compressor.supports(out))
1:                                 testByteBuffers(in, comp, out);
1:     }
1:     private void testByteBuffers(BufferType typeIn, BufferType typeComp, BufferType typeOut) throws IOException
1:     {
1:         try
1:         {
1:             int n = RandomAccessReader.DEFAULT_BUFFER_SIZE;
1:             byte[] srcData = new byte[n];
1:             new Random().nextBytes(srcData);
1:             final int inOffset = 2;
1:             ByteBuffer src = typeIn.allocate(inOffset + n + inOffset);
1:             src.position(inOffset);
1:             src.put(srcData, 0, n);
1:             src.flip().position(inOffset);
1:             int outOffset = 5;
1:             ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset);
1:             byte[] garbage = new byte[compressed.capacity()];
1:             new Random().nextBytes(garbage);
1:             compressed.put(garbage);
1:             compressed.position(outOffset).limit(compressed.capacity() - outOffset);
1:             compressor.compress(src, compressed);
1:             assertEquals(inOffset + n, src.position());
1:             assertEquals(inOffset + n, src.limit());
1:             assertEquals(compressed.capacity() - outOffset, compressed.limit());
1:             compressed.flip().position(outOffset);
1:             int len = compressed.remaining();
1: 
1:             ByteBuffer result = typeOut.allocate(inOffset + n + inOffset);
1:             result.position(inOffset).limit(result.capacity() - inOffset);
1:             compressor.uncompress(compressed, result);
1:             assertEquals(outOffset + len, compressed.position());
1:             assertEquals(outOffset + len, compressed.limit());
1:             assertEquals(result.capacity() - inOffset, result.limit());
1: 
1:             int decompressed = result.position() - inOffset;
1:             assert decompressed == n : "Failed uncompressed size";
1:             for (int i = 0; i < n; ++i)
1:                 assert srcData[i] == result.get(inOffset + i) : "Failed comparison on index: " + i;
1:         }
1:         catch (Throwable e)
1:         {
1:             throw new AssertionError("Failed testing compressor " + compressor.getClass().getSimpleName() + " with buffer types in:" + typeIn + " compressed:" + typeComp + " out:" + typeOut, e);
1:         }
1:         return compressor.preferredBufferType().allocate(size);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bc7941c
/////////////////////////////////////////////////////////////////////////
1: import java.nio.channels.FileChannel;
1: import static org.junit.Assert.*;
0: import org.apache.cassandra.io.util.RandomAccessReader;
0: import com.google.common.io.Files;
1: 
0: import org.apache.cassandra.io.compress.ICompressor.WrappedByteBuffer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testArrayUncompress(byte[] data, int off, int len) throws IOException
0:         ByteBuffer src = makeBB(len);
1:         src.put(data, off, len);
0:         src.rewind();
1: 
0:         final WrappedByteBuffer compressed = makeWrappedBB(outOffset + compressor.initialCompressedBufferLength(len));
0:         fillBBWithRandom(compressed.buffer);
0:         compressed.buffer.clear();
0:         compressed.buffer.position(outOffset);
1: 
0:         final int compressedLength = compressor.compress(src, compressed);
1: 
1:         final int restoreOffset = 5;
1:         final byte[] restored = new byte[restoreOffset + len];
1: 
1:         // need byte[] representation which direct buffers don't have
0:         byte[] compressedBytes = new byte[compressed.buffer.capacity()];
0:         ByteBufferUtil.arrayCopy(compressed.buffer, outOffset, compressedBytes, 0, compressed.buffer.capacity() - outOffset);
1: 
0:         final int decompressedLength = compressor.uncompress(compressedBytes, 0, compressedLength, restored, restoreOffset);
1: 
0:                 Arrays.copyOfRange(restored, restoreOffset, restoreOffset + decompressedLength));
1:     public void testArrayUncompress(byte[] data) throws IOException
1:         testArrayUncompress(data, 0, data.length);
1:         testArrayUncompress(new byte[0]);
1:         testArrayUncompress("Cassandra".getBytes("UTF-8"), 1, 7);
1:         testArrayUncompress(data, 13, 1 << 19);
1:         testArrayUncompress(data, 13, 1 << 19);
1:         ByteBuffer src = makeBB(data.length);
1:         src.put(data);
1:         src.flip();
1:         // create a temp file
1:         // Prepend some random bytes to the output and compress
1:         byte[] garbage = new byte[outOffset + compressor.initialCompressedBufferLength(data.length)];
1:         new Random().nextBytes(garbage);
0:         WrappedByteBuffer dest = makeWrappedBB(outOffset + compressor.initialCompressedBufferLength(data.length));
0:         dest.buffer.put(garbage);
0:         dest.buffer.clear();
0:         dest.buffer.position(outOffset);
1: 
0:         final int compressedLength = compressor.compress(src, dest);
1: 
0:         FileChannel channel = new FileOutputStream(temp, false).getChannel();
0:         dest.buffer.clear();
0:         channel.write(dest.buffer);
0:         mappedData.limit(compressedLength + outOffset);
1:         ByteBuffer result = makeBB(data.length + 100);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testLZ4ByteBuffers() throws IOException
1:     {
1:         compressor = LZ4Compressor.create(Collections.<String, String>emptyMap());
1:         testByteBuffers();
1:     }
1: 
1:     @Test
1:     public void testDeflateByteBuffers() throws IOException
1:     {
1:         compressor = DeflateCompressor.create(Collections.<String, String>emptyMap());
1:         testByteBuffers();
1:     }
1: 
1:     @Test
1:     public void testSnappyByteBuffers() throws IOException
1:     {
1:         compressor = SnappyCompressor.create(Collections.<String, String>emptyMap());
1:         testByteBuffers();
1:     }
1: 
1:     private void testByteBuffers() throws IOException
1:     {
0:         int n = RandomAccessReader.DEFAULT_BUFFER_SIZE;
0:         byte[] srcData = new byte[n];
0:         new Random().nextBytes(srcData);
1: 
0:         ByteBuffer src = makeBB(n);
0:         src.put(srcData, 0, n);
0:         src.flip();
1: 
0:         int outOffset = 5;
0:         ICompressor.WrappedByteBuffer compressed = makeWrappedBB(outOffset + compressor.initialCompressedBufferLength(srcData.length));
0:         byte[] garbage = new byte[compressed.buffer.capacity()];
0:         new Random().nextBytes(garbage);
0:         compressed.buffer.put(garbage);
0:         compressed.buffer.clear();
0:         compressed.buffer.position(outOffset);
1: 
0:         compressor.compress(src, compressed);
0:         compressed.buffer.flip();
0:         compressed.buffer.position(outOffset);
1: 
0:         ByteBuffer result = makeBB(outOffset + n);
0:         int decompressed = compressor.uncompress(compressed.buffer, result);
1: 
0:         assert decompressed == n;
0:         for (int i = 0; i < n; ++i)
0:             assert srcData[i] == result.get(i) : "Failed comparison on index: " + i + " with compressor: " + compressor.getClass().toString();
1:     }
1: 
1:     private ByteBuffer makeBB(int size)
1:     {
0:         return compressor.useDirectOutputByteBuffers()
0:                 ? ByteBuffer.allocateDirect(size)
0:                 : ByteBuffer.allocate(size);
1:     }
1: 
0:     private WrappedByteBuffer makeWrappedBB(int size)
1:     {
0:         return compressor.useDirectOutputByteBuffers()
0:                 ? new WrappedByteBuffer(ByteBuffer.allocateDirect(size))
0:                 : new WrappedByteBuffer(ByteBuffer.allocate(size));
1:     }
1: 
1:     private void fillBBWithRandom(ByteBuffer dest)
1:     {
0:         ByteBuffer dupe = dest.duplicate();
1:         byte[] random = new byte[dest.capacity()];
1:         new Random().nextBytes(random);
1:         dest.clear();
1:         dest.put(random);
1:     }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:895ec3e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.compress;
1: 
1: import java.io.*;
1: import java.nio.ByteBuffer;
1: import java.nio.MappedByteBuffer;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.Random;
1: 
0: import com.google.common.io.Files;
0: import org.apache.cassandra.io.compress.ICompressor.WrappedArray;
1: 
1: import org.junit.Assert;
0: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class CompressorTest
1: {
1:     ICompressor compressor;
1: 
1:     ICompressor[] compressors = new ICompressor[] {
1:             LZ4Compressor.create(Collections.<String, String>emptyMap()),
1:             DeflateCompressor.create(Collections.<String, String>emptyMap()),
1:             SnappyCompressor.create(Collections.<String, String>emptyMap())
1:     };
1: 
1: 
1:     @Test
1:     public void testAllCompressors() throws IOException
1:     {
1:         for (ICompressor compressor : compressors)
1:         {
1:             this.compressor = compressor;
1: 
1:             testEmptyArray();
1:             testLongArray();
1:             testShortArray();
1:             testMappedFile();
1:         }
1:     }
1: 
1: 
0:     public void test(byte[] data, int off, int len) throws IOException
1:     {
1:         final int outOffset = 3;
0:         final WrappedArray out = new WrappedArray(new byte[outOffset + compressor.initialCompressedBufferLength(len)]);
0:         new Random().nextBytes(out.buffer);
0:         final int compressedLength = compressor.compress(data, off, len, out, outOffset);
0:         final int restoredOffset = 5;
0:         final byte[] restored = new byte[restoredOffset + len];
1:         new Random().nextBytes(restored);
0:         final int decompressedLength = compressor.uncompress(out.buffer, outOffset, compressedLength, restored, restoredOffset);
1:         assertEquals(decompressedLength, len);
1:         assertArrayEquals(Arrays.copyOfRange(data, off, off + len),
0:                           Arrays.copyOfRange(restored, restoredOffset, restoredOffset + decompressedLength));
1:     }
1: 
0:     public void test(byte[] data) throws IOException
1:     {
0:         test(data, 0, data.length);
1:     }
1: 
1:     public void testEmptyArray() throws IOException
1:     {
0:         test(new byte[0]);
1:     }
1: 
1:     public void testShortArray() throws UnsupportedEncodingException, IOException
1:     {
0:         test("Cassandra".getBytes("UTF-8"), 1, 7);
1:     }
1: 
1:     public void testLongArray() throws UnsupportedEncodingException, IOException
1:     {
1:         byte[] data = new byte[1 << 20];
0:         test(data, 13, 1 << 19);
1:         new Random(0).nextBytes(data);
0:         test(data, 13, 1 << 19);
1:     }
1: 
1:     public void testMappedFile() throws IOException
1:     {
1:         byte[] data = new byte[1 << 20];
1:         new Random().nextBytes(data);
1: 
0:         //create a temp file
1:         File temp = File.createTempFile("tempfile", ".tmp");
1:         temp.deleteOnExit();
1: 
0:         //Prepend some random bytes to the output and compress
1:         final int outOffset = 3;
0:         final WrappedArray out = new WrappedArray(new byte[outOffset + compressor.initialCompressedBufferLength(data.length)]);
0:         new Random().nextBytes(out.buffer);
0:         final int compressedLength = compressor.compress(data, 0, data.length, out, outOffset);
0:         Files.write(out.buffer, temp);
1: 
1:         MappedByteBuffer mappedData = Files.map(temp);
0:         mappedData.position(outOffset);
0:         mappedData.limit(compressedLength+outOffset);
1: 
1: 
0:         ByteBuffer result = compressor.useDirectOutputByteBuffers()
0:                 ? ByteBuffer.allocateDirect(data.length + 100)
0:                 : ByteBuffer.allocate(data.length + 100);
1: 
0:         int length = compressor.uncompress(mappedData, result);
1: 
0:         Assert.assertEquals(data.length, length);
0:         for (int i = 0; i < length; i++)
1:         {
1:             Assert.assertEquals("Decompression mismatch at byte "+i, data[i], result.get());
1:         }
1:     }
1: }
============================================================================