1:ad89d44: /*
1:ad89d44:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad89d44:  * or more contributor license agreements.  See the NOTICE file
1:ad89d44:  * distributed with this work for additional information
1:ad89d44:  * regarding copyright ownership.  The ASF licenses this file
1:ad89d44:  * to you under the Apache License, Version 2.0 (the
1:ad89d44:  * "License"); you may not use this file except in compliance
1:ad89d44:  * with the License.  You may obtain a copy of the License at
1:ad89d44:  *
1:ad89d44:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ad89d44:  *
1:ad89d44:  * Unless required by applicable law or agreed to in writing, software
1:ad89d44:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad89d44:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad89d44:  * See the License for the specific language governing permissions and
1:ad89d44:  * limitations under the License.
1:ad89d44:  */
1:ad89d44: package org.apache.cassandra.metrics;
1:ad89d44: 
1:8896a70: import com.codahale.metrics.Counter;
1:8896a70: import com.codahale.metrics.Gauge;
1:8896a70: import com.codahale.metrics.RatioGauge;
1:ad89d44: import org.apache.cassandra.cql3.QueryProcessor;
1:8896a70: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:ad89d44: 
1:ad89d44: public class CQLMetrics
1:ad89d44: {
1:ad89d44:     private static final MetricNameFactory factory = new DefaultNameFactory("CQL");
1:5ba1f80: 
1:ad89d44:     public final Counter regularStatementsExecuted;
1:ad89d44:     public final Counter preparedStatementsExecuted;
1:5ba1f80:     public final Counter preparedStatementsEvicted;
1:ad89d44: 
1:ad89d44:     public final Gauge<Integer> preparedStatementsCount;
1:ad89d44:     public final Gauge<Double> preparedStatementsRatio;
1:ad89d44: 
1:ad89d44:     public CQLMetrics()
1:ad89d44:     {
1:8896a70:         regularStatementsExecuted = Metrics.counter(factory.createMetricName("RegularStatementsExecuted"));
1:8896a70:         preparedStatementsExecuted = Metrics.counter(factory.createMetricName("PreparedStatementsExecuted"));
1:8896a70:         preparedStatementsEvicted = Metrics.counter(factory.createMetricName("PreparedStatementsEvicted"));
1:ad89d44: 
1:8896a70:         preparedStatementsCount = Metrics.register(factory.createMetricName("PreparedStatementsCount"), new Gauge<Integer>()
1:ad89d44:         {
1:8896a70:             public Integer getValue()
1:ad89d44:             {
1:ad89d44:                 return QueryProcessor.preparedStatementsCount();
1:ad89d44:             }
1:ad89d44:         });
1:8896a70:         preparedStatementsRatio = Metrics.register(factory.createMetricName("PreparedStatementsRatio"), new RatioGauge()
1:ad89d44:         {
1:8896a70:             public Ratio getRatio()
1:8896a70:             {
1:8896a70:                 return Ratio.of(getNumerator(), getDenominator());
1:8896a70:             }
1:8896a70: 
1:ad89d44:             public double getNumerator()
1:ad89d44:             {
1:8896a70:                 return preparedStatementsExecuted.getCount();
1:ad89d44:             }
1:ad89d44: 
1:ad89d44:             public double getDenominator()
1:ad89d44:             {
1:8896a70:                 return regularStatementsExecuted.getCount() + preparedStatementsExecuted.getCount();
1:ad89d44:             }
1:ad89d44:         });
1:ad89d44:     }
1:ad89d44: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Counter;
1: import com.codahale.metrics.Gauge;
1: import com.codahale.metrics.RatioGauge;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
/////////////////////////////////////////////////////////////////////////
1:         regularStatementsExecuted = Metrics.counter(factory.createMetricName("RegularStatementsExecuted"));
1:         preparedStatementsExecuted = Metrics.counter(factory.createMetricName("PreparedStatementsExecuted"));
1:         preparedStatementsEvicted = Metrics.counter(factory.createMetricName("PreparedStatementsEvicted"));
1:         preparedStatementsCount = Metrics.register(factory.createMetricName("PreparedStatementsCount"), new Gauge<Integer>()
1:             public Integer getValue()
1:         preparedStatementsRatio = Metrics.register(factory.createMetricName("PreparedStatementsRatio"), new RatioGauge()
1:             public Ratio getRatio()
1:             {
1:                 return Ratio.of(getNumerator(), getDenominator());
1:             }
1: 
1:                 return preparedStatementsExecuted.getCount();
1:                 return regularStatementsExecuted.getCount() + preparedStatementsExecuted.getCount();
author:Nate McCall
-------------------------------------------------------------------------------
commit:5ba1f80
/////////////////////////////////////////////////////////////////////////
1:     public final Counter preparedStatementsEvicted;
/////////////////////////////////////////////////////////////////////////
0:         preparedStatementsEvicted = Metrics.newCounter(factory.createMetricName("PreparedStatementsEvicted"));
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:ad89d44
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import org.apache.cassandra.cql3.QueryProcessor;
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Counter;
0: import com.yammer.metrics.core.Gauge;
0: import com.yammer.metrics.util.RatioGauge;
1: 
1: public class CQLMetrics
1: {
1:     private static final MetricNameFactory factory = new DefaultNameFactory("CQL");
1: 
1:     public final Counter regularStatementsExecuted;
1:     public final Counter preparedStatementsExecuted;
1: 
1:     public final Gauge<Integer> preparedStatementsCount;
1:     public final Gauge<Double> preparedStatementsRatio;
1: 
1:     public CQLMetrics()
1:     {
0:         regularStatementsExecuted = Metrics.newCounter(factory.createMetricName("RegularStatementsExecuted"));
0:         preparedStatementsExecuted = Metrics.newCounter(factory.createMetricName("PreparedStatementsExecuted"));
0:         preparedStatementsCount = Metrics.newGauge(factory.createMetricName("PreparedStatementsCount"), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
1:                 return QueryProcessor.preparedStatementsCount();
1:             }
1:         });
0:         preparedStatementsRatio = Metrics.newGauge(factory.createMetricName("PreparedStatementsRatio"), new RatioGauge()
1:         {
1:             public double getNumerator()
1:             {
0:                 return preparedStatementsExecuted.count();
1:             }
1: 
1:             public double getDenominator()
1:             {
0:                 return regularStatementsExecuted.count() + preparedStatementsExecuted.count();
1:             }
1:         });
1:     }
1: }
============================================================================