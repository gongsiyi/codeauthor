1:879b694: /*
1:879b694:  * Licensed to the Apache Software Foundation (ASF) under one
1:879b694:  * or more contributor license agreements.  See the NOTICE file
1:879b694:  * distributed with this work for additional information
1:879b694:  * regarding copyright ownership.  The ASF licenses this file
1:879b694:  * to you under the Apache License, Version 2.0 (the
1:879b694:  * "License"); you may not use this file except in compliance
1:879b694:  * with the License.  You may obtain a copy of the License at
1:879b694:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:879b694:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:879b694:  */
1:879b694: package org.apache.cassandra.auth;
1:879b694: 
1:cb5897f: import java.util.List;
1:cb5897f: 
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:cb5897f: import org.apache.cassandra.db.marshal.AbstractType;
1:879b694: import org.apache.cassandra.service.MigrationListener;
1:879b694: 
1:879b694: /**
1:879b694:  * MigrationListener implementation that cleans up permissions on dropped resources.
1:879b694:  */
1:879b694: public class AuthMigrationListener extends MigrationListener
1:879b694: {
1:879b694:     public void onDropKeyspace(String ksName)
1:879b694:     {
1:217721a:         DatabaseDescriptor.getAuthorizer().revokeAllOn(DataResource.keyspace(ksName));
1:cb5897f:         DatabaseDescriptor.getAuthorizer().revokeAllOn(FunctionResource.keyspace(ksName));
1:879b694:     }
1:879b694: 
1:879b694:     public void onDropColumnFamily(String ksName, String cfName)
1:879b694:     {
1:217721a:         DatabaseDescriptor.getAuthorizer().revokeAllOn(DataResource.table(ksName, cfName));
1:879b694:     }
1:cb5897f: 
1:cb5897f:     public void onDropFunction(String ksName, String functionName, List<AbstractType<?>> argTypes)
1:cb5897f:     {
1:cb5897f:         DatabaseDescriptor.getAuthorizer()
1:cb5897f:                           .revokeAllOn(FunctionResource.function(ksName, functionName, argTypes));
1:cb5897f:     }
1:4eed687: 
1:4eed687:     public void onDropAggregate(String ksName, String aggregateName, List<AbstractType<?>> argTypes)
1:4eed687:     {
1:4eed687:         DatabaseDescriptor.getAuthorizer()
1:4eed687:                           .revokeAllOn(FunctionResource.function(ksName, aggregateName, argTypes));
1:4eed687:     }
1:879b694: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:4eed687
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void onDropAggregate(String ksName, String aggregateName, List<AbstractType<?>> argTypes)
1:     {
1:         DatabaseDescriptor.getAuthorizer()
1:                           .revokeAllOn(FunctionResource.function(ksName, aggregateName, argTypes));
1:     }
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.getAuthorizer().revokeAllOn(FunctionResource.keyspace(ksName));
1: 
1:     public void onDropFunction(String ksName, String functionName, List<AbstractType<?>> argTypes)
1:     {
1:         DatabaseDescriptor.getAuthorizer()
1:                           .revokeAllOn(FunctionResource.function(ksName, functionName, argTypes));
1:     }
commit:217721a
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.getAuthorizer().revokeAllOn(DataResource.keyspace(ksName));
1:         DatabaseDescriptor.getAuthorizer().revokeAllOn(DataResource.table(ksName, cfName));
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.service.MigrationListener;
1: 
1: /**
1:  * MigrationListener implementation that cleans up permissions on dropped resources.
1:  */
1: public class AuthMigrationListener extends MigrationListener
1: {
1:     public void onDropKeyspace(String ksName)
1:     {
0:         DatabaseDescriptor.getAuthorizer().revokeAll(DataResource.keyspace(ksName));
1:     }
1: 
1:     public void onDropColumnFamily(String ksName, String cfName)
1:     {
0:         DatabaseDescriptor.getAuthorizer().revokeAll(DataResource.table(ksName, cfName));
1:     }
1: }
============================================================================