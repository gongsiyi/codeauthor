1:0368e97: /*
1:0368e97:  * Licensed to the Apache Software Foundation (ASF) under one
1:0368e97:  * or more contributor license agreements.  See the NOTICE file
1:0368e97:  * distributed with this work for additional information
1:0368e97:  * regarding copyright ownership.  The ASF licenses this file
1:0368e97:  * to you under the Apache License, Version 2.0 (the
1:0368e97:  * "License"); you may not use this file except in compliance
1:0368e97:  * with the License.  You may obtain a copy of the License at
1:0368e97:  *
1:0368e97:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0368e97:  *
1:0368e97:  * Unless required by applicable law or agreed to in writing, software
1:0368e97:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0368e97:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0368e97:  * See the License for the specific language governing permissions and
1:0368e97:  * limitations under the License.
1:0368e97:  */
1:0368e97: package org.apache.cassandra.io.sstable.format;
4:0368e97: 
1:0368e97: import com.google.common.base.CharMatcher;
1:0368e97: import org.apache.cassandra.config.CFMetaData;
1:0368e97: import org.apache.cassandra.db.RowIndexEntry;
1:a991b64: import org.apache.cassandra.db.SerializationHeader;
1:0368e97: import org.apache.cassandra.io.sstable.format.big.BigFormat;
1:0368e97: 
1:0368e97: /**
1:0368e97:  * Provides the accessors to data on disk.
1:0368e97:  */
1:0368e97: public interface SSTableFormat
1:0368e97: {
1:7dccb31:     static boolean enableSSTableDevelopmentTestMode = Boolean.getBoolean("cassandra.test.sstableformatdevelopment");
1:0368e97: 
1:0368e97: 
1:0368e97:     Version getLatestVersion();
1:0368e97:     Version getVersion(String version);
1:0368e97: 
1:0368e97:     SSTableWriter.Factory getWriterFactory();
1:0368e97:     SSTableReader.Factory getReaderFactory();
1:0368e97: 
1:a991b64:     RowIndexEntry.IndexSerializer<?> getIndexSerializer(CFMetaData cfm, Version version, SerializationHeader header);
1:0368e97: 
1:0368e97:     public static enum Type
1:0368e97:     {
1:0368e97:         //Used internally to refer to files with no
1:0368e97:         //format flag in the filename
1:0368e97:         LEGACY("big", BigFormat.instance),
1:0368e97: 
1:0368e97:         //The original sstable format
1:0368e97:         BIG("big", BigFormat.instance);
1:0368e97: 
1:0368e97:         public final SSTableFormat info;
1:0368e97:         public final String name;
1:a991b64: 
1:9797511:         public static Type current()
1:9797511:         {
1:9797511:             return BIG;
1:9797511:         }
1:9797511: 
1:0368e97:         private Type(String name, SSTableFormat info)
1:0368e97:         {
1:0368e97:             //Since format comes right after generation
1:0368e97:             //we disallow formats with numeric names
1:0368e97:             assert !CharMatcher.DIGIT.matchesAllOf(name);
1:0368e97: 
1:0368e97:             this.name = name;
1:0368e97:             this.info = info;
1:0368e97:         }
1:0368e97: 
1:0368e97:         public static Type validate(String name)
1:0368e97:         {
1:0368e97:             for (Type valid : Type.values())
1:0368e97:             {
1:0368e97:                 //This is used internally for old sstables
1:0368e97:                 if (valid == LEGACY)
1:0368e97:                     continue;
1:0368e97: 
1:0368e97:                 if (valid.name.equalsIgnoreCase(name))
1:0368e97:                     return valid;
1:0368e97:             }
1:0368e97: 
1:0368e97:             throw new IllegalArgumentException("No Type constant " + name);
1:0368e97:         }
1:0368e97:     }
1:0368e97: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:         public static Type current()
1:         {
1:             return BIG;
1:         }
1: 
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7dccb31
/////////////////////////////////////////////////////////////////////////
1:     static boolean enableSSTableDevelopmentTestMode = Boolean.getBoolean("cassandra.test.sstableformatdevelopment");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.LegacyLayout;
1: import org.apache.cassandra.db.SerializationHeader;
/////////////////////////////////////////////////////////////////////////
1:     RowIndexEntry.IndexSerializer<?> getIndexSerializer(CFMetaData cfm, Version version, SerializationHeader header);
/////////////////////////////////////////////////////////////////////////
1: 
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable.format;
1: 
1: import com.google.common.base.CharMatcher;
0: import com.google.common.collect.ImmutableList;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.ColumnSerializer;
0: import org.apache.cassandra.db.OnDiskAtom;
1: import org.apache.cassandra.db.RowIndexEntry;
0: import org.apache.cassandra.db.columniterator.OnDiskAtomIterator;
0: import org.apache.cassandra.db.compaction.AbstractCompactedRow;
0: import org.apache.cassandra.db.compaction.CompactionController;
1: import org.apache.cassandra.io.sstable.format.big.BigFormat;
0: import org.apache.cassandra.io.util.FileDataInput;
1: 
0: import java.util.Iterator;
1: 
1: /**
1:  * Provides the accessors to data on disk.
1:  */
1: public interface SSTableFormat
1: {
0:     static boolean enableSSTableDevelopmentTestMode = Boolean.valueOf(System.getProperty("cassandra.test.sstableformatdevelopment","false"));
1: 
1: 
1:     Version getLatestVersion();
1:     Version getVersion(String version);
1: 
1:     SSTableWriter.Factory getWriterFactory();
1:     SSTableReader.Factory getReaderFactory();
1: 
0:     Iterator<OnDiskAtom> getOnDiskIterator(FileDataInput in, ColumnSerializer.Flag flag, int expireBefore, CFMetaData cfm, Version version);
1: 
0:     AbstractCompactedRow getCompactedRowWriter(CompactionController controller, ImmutableList<OnDiskAtomIterator> onDiskAtomIterators);
1: 
0:     RowIndexEntry.IndexSerializer<?> getIndexSerializer(CFMetaData cfm);
1: 
1:     public static enum Type
1:     {
1:         //Used internally to refer to files with no
1:         //format flag in the filename
1:         LEGACY("big", BigFormat.instance),
1: 
1:         //The original sstable format
1:         BIG("big", BigFormat.instance);
1: 
1:         public final SSTableFormat info;
1:         public final String name;
1:         private Type(String name, SSTableFormat info)
1:         {
1:             //Since format comes right after generation
1:             //we disallow formats with numeric names
1:             assert !CharMatcher.DIGIT.matchesAllOf(name);
1: 
1:             this.name = name;
1:             this.info = info;
1:         }
1: 
1:         public static Type validate(String name)
1:         {
1:             for (Type valid : Type.values())
1:             {
1:                 //This is used internally for old sstables
1:                 if (valid == LEGACY)
1:                     continue;
1: 
1:                 if (valid.name.equalsIgnoreCase(name))
1:                     return valid;
1:             }
1: 
1:             throw new IllegalArgumentException("No Type constant " + name);
1:         }
1:     }
1: }
============================================================================