1:879b694: /*
1:879b694:  * Licensed to the Apache Software Foundation (ASF) under one
1:879b694:  * or more contributor license agreements.  See the NOTICE file
1:879b694:  * distributed with this work for additional information
1:879b694:  * regarding copyright ownership.  The ASF licenses this file
1:879b694:  * to you under the Apache License, Version 2.0 (the
1:879b694:  * "License"); you may not use this file except in compliance
1:879b694:  * with the License.  You may obtain a copy of the License at
1:879b694:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:879b694:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:879b694:  */
1:879b694: package org.apache.cassandra.auth;
1:879b694: 
1:879b694: import java.util.Map;
1:879b694: import java.util.Set;
1:879b694: 
1:879b694: import org.apache.cassandra.exceptions.ConfigurationException;
1:879b694: import org.apache.cassandra.exceptions.RequestExecutionException;
1:879b694: import org.apache.cassandra.exceptions.RequestValidationException;
1:879b694: 
1:879b694: /**
1:879b694:  * Responsible for managing roles (which also includes what
1:879b694:  * used to be known as users), including creation, deletion,
1:246f07b:  * alteration and the granting and revoking of roles to other
1:879b694:  * roles.
1:879b694:  */
1:879b694: public interface IRoleManager
1:879b694: {
1:879b694: 
1:879b694:     /**
1:879b694:      * Supported options for CREATE ROLE/ALTER ROLE (and
1:879b694:      * CREATE USER/ALTER USER, which are aliases provided
1:879b694:      * for backwards compatibility).
1:879b694:      */
1:879b694:     public enum Option
1:879b694:     {
1:879b694:         SUPERUSER, PASSWORD, LOGIN, OPTIONS
1:879b694:     }
1:879b694: 
1:879b694:     /**
1:879b694:      * Set of options supported by CREATE ROLE and ALTER ROLE queries.
1:879b694:      * Should never return null - always return an empty set instead.
1:879b694:      */
1:879b694:     Set<Option> supportedOptions();
1:879b694: 
1:879b694:     /**
1:879b694:      * Subset of supportedOptions that users are allowed to alter when performing ALTER ROLE [themselves].
1:879b694:      * Should never return null - always return an empty set instead.
1:879b694:      */
1:879b694:     Set<Option> alterableOptions();
1:879b694: 
1:879b694:     /**
1:879b694:      * Called during execution of a CREATE ROLE statement.
1:879b694:      * options are guaranteed to be a subset of supportedOptions().
1:879b694:      *
1:879b694:      * @param performer User issuing the create role statement.
1:217721a:      * @param role Rolei being created
1:879b694:      * @param options Options the role will be created with
1:879b694:      * @throws RequestValidationException
1:879b694:      * @throws RequestExecutionException
1:879b694:      */
1:2f3fd41:     void createRole(AuthenticatedUser performer, RoleResource role, RoleOptions options)
1:879b694:     throws RequestValidationException, RequestExecutionException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Called during execution of DROP ROLE statement, as well we removing any main record of the role from the system
1:879b694:      * this implies that we want to revoke this role from all other roles that it has been granted to.
1:879b694:      *
1:879b694:      * @param performer User issuing the drop role statement.
1:217721a:      * @param role Role to be dropped.
1:879b694:      * @throws RequestValidationException
1:879b694:      * @throws RequestExecutionException
1:879b694:      */
1:217721a:     void dropRole(AuthenticatedUser performer, RoleResource role) throws RequestValidationException, RequestExecutionException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Called during execution of ALTER ROLE statement.
1:879b694:      * options are always guaranteed to be a subset of supportedOptions(). Furthermore, if the actor performing the query
1:879b694:      * is not a superuser and is altering themself, then options are guaranteed to be a subset of alterableOptions().
1:879b694:      * Keep the body of the method blank if your implementation doesn't support modification of any options.
1:879b694:      *
1:879b694:      * @param performer User issuing the alter role statement.
1:217721a:      * @param role Role that will be altered.
1:879b694:      * @param options Options to alter.
1:879b694:      * @throws RequestValidationException
1:879b694:      * @throws RequestExecutionException
1:879b694:      */
1:2f3fd41:     void alterRole(AuthenticatedUser performer, RoleResource role, RoleOptions options)
1:879b694:     throws RequestValidationException, RequestExecutionException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Called during execution of GRANT ROLE query.
1:879b694:      * Grant an role to another existing role. A grantee that has a role granted to it will inherit any
1:879b694:      * permissions of the granted role.
1:879b694:      *
1:879b694:      * @param performer User issuing the grant statement.
1:217721a:      * @param role Role to be granted to the grantee.
1:217721a:      * @param grantee Role acting as the grantee.
1:879b694:      * @throws RequestValidationException
1:879b694:      * @throws RequestExecutionException
1:879b694:      */
1:217721a:     void grantRole(AuthenticatedUser performer, RoleResource role, RoleResource grantee)
1:879b694:     throws RequestValidationException, RequestExecutionException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Called during the execution of a REVOKE ROLE query.
1:879b694:      * Revoke an granted role from an existing role. The revokee will lose any permissions inherited from the role being
1:879b694:      * revoked.
1:879b694:      *
1:879b694:      * @param performer User issuing the revoke statement.
1:217721a:      * @param role Role to be revoked.
1:217721a:      * @param revokee Role from which the granted role is to be revoked.
1:879b694:      * @throws RequestValidationException
1:879b694:      * @throws RequestExecutionException
1:879b694:      */
1:217721a:     void revokeRole(AuthenticatedUser performer, RoleResource role, RoleResource revokee)
1:879b694:     throws RequestValidationException, RequestExecutionException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Called during execution of a LIST ROLES query.
1:879b694:      * Returns a set of roles that have been granted to the grantee using GRANT ROLE.
1:879b694:      *
1:217721a:      * @param grantee Role whose granted roles will be listed.
1:879b694:      * @param includeInherited if True will list inherited roles as well as those directly granted to the grantee.
1:879b694:      * @return A list containing the granted roles for the user.
1:879b694:      * @throws RequestValidationException
1:879b694:      * @throws RequestExecutionException
1:879b694:      */
1:217721a:     Set<RoleResource> getRoles(RoleResource grantee, boolean includeInherited) throws RequestValidationException, RequestExecutionException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Called during the execution of an unqualified LIST ROLES query.
1:879b694:      * Returns the total set of distinct roles in the system.
1:879b694:      *
1:879b694:      * @return the set of all roles in the system.
1:879b694:      * @throws RequestValidationException
1:879b694:      * @throws RequestExecutionException
1:879b694:      */
1:217721a:     Set<RoleResource> getAllRoles() throws RequestValidationException, RequestExecutionException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Return true if there exists a Role with the given name that also has
1:879b694:      * superuser status. Superuser status may be inherited from another
1:879b694:      * granted role, so this method should return true if either the named
1:879b694:      * Role, or any other Role it is transitively granted has superuser
1:879b694:      * status.
1:879b694:      *
1:217721a:      * @param role Role whose superuser status to verify
1:879b694:      * @return true if the role exists and has superuser status, either
1:879b694:      * directly or transitively, otherwise false.
1:879b694:      */
1:217721a:     boolean isSuper(RoleResource role);
1:879b694: 
1:879b694:     /**
1:879b694:      * Return true if there exists a Role with the given name which has login
1:879b694:      * privileges. Such privileges is not inherited from other granted Roles
1:879b694:      * and so must be directly granted to the named Role with the LOGIN option
1:879b694:      * of CREATE ROLE or ALTER ROLE
1:879b694:      *
1:217721a:      * @param role Role whose login privileges to verify
1:879b694:      * @return true if the role exists and is permitted to login, otherwise false
1:879b694:      */
1:217721a:     boolean canLogin(RoleResource role);
1:879b694: 
1:879b694:     /**
1:a1b574e:      * Where an implementation supports OPTIONS in CREATE and ALTER operations
1:6b7db8a:      * this method should return the {@code Map<String, String>} representing the custom
1:a1b574e:      * options associated with the role, as supplied to CREATE or ALTER.
1:a1b574e:      * It should never return null; if the implementation does not support
1:a1b574e:      * OPTIONS or if none were supplied then it should return an empty map.
1:a1b574e:      * @param role Role whose custom options are required
1:a1b574e:      * @return Key/Value pairs representing the custom options for the Role
1:a1b574e:      */
1:a1b574e:     Map<String, String> getCustomOptions(RoleResource role);
1:a1b574e: 
1:a1b574e:     /**
1:879b694:      * Return true is a Role with the given name exists in the system.
1:879b694:      *
1:217721a:      * @param role Role whose existence to verify
1:879b694:      * @return true if the name identifies an extant Role in the system,
1:879b694:      * otherwise false
1:879b694:      */
1:217721a:     boolean isExistingRole(RoleResource role);
1:879b694: 
1:879b694:     /**
1:879b694:      * Set of resources that should be made inaccessible to users and only accessible internally.
1:879b694:      *
1:879b694:      * @return Keyspaces and column families that will be unmodifiable by users; other resources.
1:879b694:      */
1:879b694:     Set<? extends IResource> protectedResources();
1:879b694: 
1:879b694:     /**
1:879b694:      * Hook to perform validation of an implementation's configuration (if supported).
1:879b694:      *
1:879b694:      * @throws ConfigurationException
1:879b694:      */
1:879b694:     void validateConfiguration() throws ConfigurationException;
1:879b694: 
1:879b694:     /**
1:879b694:      * Hook to perform implementation specific initialization, called once upon system startup.
1:879b694:      *
1:879b694:      * For example, use this method to create any required keyspaces/column families.
1:879b694:      */
1:879b694:     void setup();
1:879b694: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:      * this method should return the {@code Map<String, String>} representing the custom
commit:246f07b
/////////////////////////////////////////////////////////////////////////
1:  * alteration and the granting and revoking of roles to other
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2f3fd41
/////////////////////////////////////////////////////////////////////////
1:     void createRole(AuthenticatedUser performer, RoleResource role, RoleOptions options)
/////////////////////////////////////////////////////////////////////////
1:     void alterRole(AuthenticatedUser performer, RoleResource role, RoleOptions options)
commit:a1b574e
/////////////////////////////////////////////////////////////////////////
1:      * Where an implementation supports OPTIONS in CREATE and ALTER operations
0:      * this method should return the Map<String, String> representing the custom
1:      * options associated with the role, as supplied to CREATE or ALTER.
1:      * It should never return null; if the implementation does not support
1:      * OPTIONS or if none were supplied then it should return an empty map.
1:      * @param role Role whose custom options are required
1:      * @return Key/Value pairs representing the custom options for the Role
1:      */
1:     Map<String, String> getCustomOptions(RoleResource role);
1: 
1:     /**
commit:217721a
/////////////////////////////////////////////////////////////////////////
1:      * @param role Rolei being created
0:     void createRole(AuthenticatedUser performer, RoleResource role, Map<Option, Object> options)
/////////////////////////////////////////////////////////////////////////
1:      * @param role Role to be dropped.
1:     void dropRole(AuthenticatedUser performer, RoleResource role) throws RequestValidationException, RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
1:      * @param role Role that will be altered.
0:     void alterRole(AuthenticatedUser performer, RoleResource role, Map<Option, Object> options)
/////////////////////////////////////////////////////////////////////////
1:      * @param role Role to be granted to the grantee.
1:      * @param grantee Role acting as the grantee.
1:     void grantRole(AuthenticatedUser performer, RoleResource role, RoleResource grantee)
/////////////////////////////////////////////////////////////////////////
1:      * @param role Role to be revoked.
1:      * @param revokee Role from which the granted role is to be revoked.
1:     void revokeRole(AuthenticatedUser performer, RoleResource role, RoleResource revokee)
1:      * @param grantee Role whose granted roles will be listed.
1:     Set<RoleResource> getRoles(RoleResource grantee, boolean includeInherited) throws RequestValidationException, RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
1:     Set<RoleResource> getAllRoles() throws RequestValidationException, RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
1:      * @param role Role whose superuser status to verify
1:     boolean isSuper(RoleResource role);
/////////////////////////////////////////////////////////////////////////
1:      * @param role Role whose login privileges to verify
1:     boolean canLogin(RoleResource role);
1:      * @param role Role whose existence to verify
1:     boolean isExistingRole(RoleResource role);
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: 
1: /**
1:  * Responsible for managing roles (which also includes what
1:  * used to be known as users), including creation, deletion,
0:  * alteration and the granting & revoking of roles to other
1:  * roles.
1:  */
1: public interface IRoleManager
1: {
1: 
1:     /**
1:      * Supported options for CREATE ROLE/ALTER ROLE (and
1:      * CREATE USER/ALTER USER, which are aliases provided
1:      * for backwards compatibility).
1:      */
1:     public enum Option
1:     {
1:         SUPERUSER, PASSWORD, LOGIN, OPTIONS
1:     }
1: 
1:     /**
1:      * Set of options supported by CREATE ROLE and ALTER ROLE queries.
1:      * Should never return null - always return an empty set instead.
1:      */
1:     Set<Option> supportedOptions();
1: 
1:     /**
1:      * Subset of supportedOptions that users are allowed to alter when performing ALTER ROLE [themselves].
1:      * Should never return null - always return an empty set instead.
1:      */
1:     Set<Option> alterableOptions();
1: 
1:     /**
1:      * Called during execution of a CREATE ROLE statement.
1:      * options are guaranteed to be a subset of supportedOptions().
1:      *
1:      * @param performer User issuing the create role statement.
0:      * @param role Name of the role being created
1:      * @param options Options the role will be created with
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:      */
0:     void createRole(AuthenticatedUser performer, String role, Map<Option, Object> options)
1:     throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Called during execution of DROP ROLE statement, as well we removing any main record of the role from the system
1:      * this implies that we want to revoke this role from all other roles that it has been granted to.
1:      *
1:      * @param performer User issuing the drop role statement.
0:      * @param role The name of the role to be dropped.
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:      */
0:     void dropRole(AuthenticatedUser performer, String role) throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Called during execution of ALTER ROLE statement.
1:      * options are always guaranteed to be a subset of supportedOptions(). Furthermore, if the actor performing the query
1:      * is not a superuser and is altering themself, then options are guaranteed to be a subset of alterableOptions().
1:      * Keep the body of the method blank if your implementation doesn't support modification of any options.
1:      *
1:      * @param performer User issuing the alter role statement.
0:      * @param role Name of the role that will be altered.
1:      * @param options Options to alter.
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:      */
0:     void alterRole(AuthenticatedUser performer, String role, Map<Option, Object> options)
1:     throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Called during execution of GRANT ROLE query.
1:      * Grant an role to another existing role. A grantee that has a role granted to it will inherit any
1:      * permissions of the granted role.
1:      *
1:      * @param performer User issuing the grant statement.
0:      * @param role The name of the role to be granted to the grantee.
0:      * @param grantee The name of the role acting as the grantee.
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:      */
0:     void grantRole(AuthenticatedUser performer, String role, String grantee)
1:     throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Called during the execution of a REVOKE ROLE query.
1:      * Revoke an granted role from an existing role. The revokee will lose any permissions inherited from the role being
1:      * revoked.
1:      *
1:      * @param performer User issuing the revoke statement.
0:      * @param role The name of the role to be revoked.
0:      * @param revokee The name of the role from which the granted role is to be revoked.
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:      */
0:     void revokeRole(AuthenticatedUser performer, String role, String revokee)
1:     throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Called during execution of a LIST ROLES query.
1:      * Returns a set of roles that have been granted to the grantee using GRANT ROLE.
1:      *
0:      * @param grantee Name of the role whose granted roles will be listed.
1:      * @param includeInherited if True will list inherited roles as well as those directly granted to the grantee.
1:      * @return A list containing the granted roles for the user.
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:      */
0:     Set<String> getRoles(String grantee, boolean includeInherited) throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Called during the execution of an unqualified LIST ROLES query.
1:      * Returns the total set of distinct roles in the system.
1:      *
1:      * @return the set of all roles in the system.
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:      */
0:     Set<String> getAllRoles() throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Return true if there exists a Role with the given name that also has
1:      * superuser status. Superuser status may be inherited from another
1:      * granted role, so this method should return true if either the named
1:      * Role, or any other Role it is transitively granted has superuser
1:      * status.
1:      *
0:      * @param role name of the role
1:      * @return true if the role exists and has superuser status, either
1:      * directly or transitively, otherwise false.
1:      */
0:     boolean isSuper(String role);
1: 
1:     /**
1:      * Return true if there exists a Role with the given name which has login
1:      * privileges. Such privileges is not inherited from other granted Roles
1:      * and so must be directly granted to the named Role with the LOGIN option
1:      * of CREATE ROLE or ALTER ROLE
1:      *
0:      * @param role name of the Role
1:      * @return true if the role exists and is permitted to login, otherwise false
1:      */
0:     boolean canLogin(String role);
1: 
1:     /**
1:      * Return true is a Role with the given name exists in the system.
1:      *
0:      * @param role name of the Role.
1:      * @return true if the name identifies an extant Role in the system,
1:      * otherwise false
1:      */
0:     boolean isExistingRole(String role);
1: 
1:     /**
1:      * Set of resources that should be made inaccessible to users and only accessible internally.
1:      *
1:      * @return Keyspaces and column families that will be unmodifiable by users; other resources.
1:      */
1:     Set<? extends IResource> protectedResources();
1: 
1:     /**
1:      * Hook to perform validation of an implementation's configuration (if supported).
1:      *
1:      * @throws ConfigurationException
1:      */
1:     void validateConfiguration() throws ConfigurationException;
1: 
1:     /**
1:      * Hook to perform implementation specific initialization, called once upon system startup.
1:      *
1:      * For example, use this method to create any required keyspaces/column families.
1:      */
1:     void setup();
1: }
============================================================================