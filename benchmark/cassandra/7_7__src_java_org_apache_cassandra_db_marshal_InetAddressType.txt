1:8ea2d2a: /*
1:8ea2d2a:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ea2d2a:  * or more contributor license agreements.  See the NOTICE file
1:8ea2d2a:  * distributed with this work for additional information
1:8ea2d2a:  * regarding copyright ownership.  The ASF licenses this file
1:8ea2d2a:  * to you under the Apache License, Version 2.0 (the
1:8ea2d2a:  * "License"); you may not use this file except in compliance
1:8ea2d2a:  * with the License.  You may obtain a copy of the License at
1:8ea2d2a:  *
1:8ea2d2a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8ea2d2a:  *
1:8ea2d2a:  * Unless required by applicable law or agreed to in writing, software
1:8ea2d2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8ea2d2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8ea2d2a:  * See the License for the specific language governing permissions and
1:8ea2d2a:  * limitations under the License.
1:8ea2d2a:  */
1:8ea2d2a: package org.apache.cassandra.db.marshal;
9:8ea2d2a: 
1:8ea2d2a: import java.net.InetAddress;
1:8ea2d2a: import java.nio.ByteBuffer;
1:8ea2d2a: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.InetAddressSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:8ea2d2a: import org.apache.cassandra.utils.ByteBufferUtil;
1:8ea2d2a: 
1:8ea2d2a: public class InetAddressType extends AbstractType<InetAddress>
10:8ea2d2a: {
1:8ea2d2a:     public static final InetAddressType instance = new InetAddressType();
1:acf1b18: 
1:07594ee:     InetAddressType() {super(ComparisonType.BYTE_ORDER);} // singleton
1:a67f779: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:4df4f79:     {
1:4df4f79:         return true;
1:4df4f79:     }
1:4df4f79: 
1:8ea2d2a:     public ByteBuffer fromString(String source) throws MarshalException
1:acf1b18:     {
1:8ea2d2a:         // Return an empty ByteBuffer for an empty string.
1:8ea2d2a:         if (source.isEmpty())
1:8ea2d2a:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:a67f779: 
1:8ea2d2a:         InetAddress address;
1:a67f779: 
2:8ea2d2a:         try
1:a67f779:         {
1:8ea2d2a:             address = InetAddress.getByName(source);
1:a67f779:         }
1:8ea2d2a:         catch (Exception e)
1:8ea2d2a:         {
1:c7b02d1:             throw new MarshalException(String.format("Unable to make inet address from '%s'", source), e);
10:8ea2d2a:         }
1:8ea2d2a: 
1:8ea2d2a:         return decompose(address);
1:8ea2d2a:     }
1:8ea2d2a: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             return new Constants.Value(InetAddressType.instance.fromString((String) parsed));
1:c7b02d1:         }
1:c7b02d1:         catch (ClassCastException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected a string representation of an inet value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return '"' + getSerializer().deserialize(buffer).getHostAddress() + '"';
1:c7b02d1:     }
1:c7b02d1: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.INET;
1:e9c6742:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<InetAddress> getSerializer()
1:e9c6742:     {
1:e9c6742:         return InetAddressSerializer.instance;
1:acf1b18:     }
1:a67f779: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     InetAddressType() {super(ComparisonType.BYTE_ORDER);} // singleton
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return true;
1:     }
1: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:             throw new MarshalException(String.format("Unable to make inet address from '%s'", source), e);
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             return new Constants.Value(InetAddressType.instance.fromString((String) parsed));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Expected a string representation of an inet value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return '"' + getSerializer().deserialize(buffer).getHostAddress() + '"';
1:     }
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isByteOrderComparable()
1:     {
0:         return true;
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.InetAddressSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<InetAddress> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.InetAddressSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         return InetAddressSerializer.instance.serialize(bytes);
0:         return InetAddressSerializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         return InetAddressSerializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         InetAddressSerializer.instance.validate(bytes);
1: 
0:     @Override
0:     public AbstractSerializer<InetAddress> asComposer()
1:     {
1:         return InetAddressSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.cql3.Term;
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.STRING);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.INET;
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8ea2d2a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.net.InetAddress;
0: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.cql.jdbc.JdbcInetAddress;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class InetAddressType extends AbstractType<InetAddress>
1: {
1:     public static final InetAddressType instance = new InetAddressType();
1: 
0:     InetAddressType() {} // singleton
1: 
0:     public InetAddress compose(ByteBuffer bytes)
1:     {
0:         return JdbcInetAddress.instance.compose(bytes);
1:     }
1: 
0:     public ByteBuffer decompose(InetAddress value)
1:     {
0:         return JdbcInetAddress.instance.decompose(value);
1:     }
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
0:         return ByteBufferUtil.compareUnsigned(o1, o2);
1:     }
1: 
0:     public String getString(ByteBuffer bytes)
1:     {
0:         return JdbcInetAddress.instance.getString(bytes);
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         // Return an empty ByteBuffer for an empty string.
1:         if (source.isEmpty())
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
1:         InetAddress address;
1: 
1:         try
1:         {
1:             address = InetAddress.getByName(source);
1:         }
1:         catch (Exception e)
1:         {
0:             throw new MarshalException(String.format("unable to make inetaddress from '%s'", source), e);
1:         }
1: 
1:         return decompose(address);
1:     }
1: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         try
1:         {
0:             InetAddress.getByAddress(ByteBufferUtil.getArray(bytes));
1:         }
0:         catch (UnknownHostException e)
1:         {
0:             throw new MarshalException(String.format("Expected 4 or 16 byte inetaddress; got %s", ByteBufferUtil.bytesToHex(bytes)));
1:         }
1:     }
1: }
============================================================================