1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.File;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.nio.file.Files;
1:96d41f0: import java.util.*;
1:96d41f0: import java.util.concurrent.ConcurrentHashMap;
1:96d41f0: import java.util.stream.Stream;
1:96d41f0: 
1:c20566f: import com.google.common.collect.ImmutableMap;
1:c20566f: 
1:96d41f0: import org.apache.cassandra.io.FSReadError;
1:96d41f0: import org.apache.cassandra.utils.CLibrary;
1:96d41f0: import org.apache.cassandra.utils.SyncUtil;
1:96d41f0: 
1:96d41f0: import static java.util.stream.Collectors.groupingBy;
1:96d41f0: 
1:96d41f0: /**
1:96d41f0:  * A simple catalog for easy host id -> {@link HintsStore} lookup and manipulation.
1:96d41f0:  */
1:96d41f0: final class HintsCatalog
1:96d41f0: {
1:96d41f0:     private final File hintsDirectory;
1:96d41f0:     private final Map<UUID, HintsStore> stores;
1:c20566f:     private final ImmutableMap<String, Object> writerParams;
1:96d41f0: 
1:c20566f:     private HintsCatalog(File hintsDirectory, ImmutableMap<String, Object> writerParams, Map<UUID, List<HintsDescriptor>> descriptors)
1:96d41f0:     {
1:96d41f0:         this.hintsDirectory = hintsDirectory;
1:c20566f:         this.writerParams = writerParams;
1:96d41f0:         this.stores = new ConcurrentHashMap<>();
1:96d41f0: 
1:96d41f0:         for (Map.Entry<UUID, List<HintsDescriptor>> entry : descriptors.entrySet())
1:c20566f:             stores.put(entry.getKey(), HintsStore.create(entry.getKey(), hintsDirectory, writerParams, entry.getValue()));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     /**
1:96d41f0:      * Loads hints stores from a given directory.
1:96d41f0:      */
1:c20566f:     static HintsCatalog load(File hintsDirectory, ImmutableMap<String, Object> writerParams)
1:96d41f0:     {
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             Map<UUID, List<HintsDescriptor>> stores =
1:96d41f0:                 Files.list(hintsDirectory.toPath())
1:96d41f0:                      .filter(HintsDescriptor::isHintFileName)
1:96d41f0:                      .map(HintsDescriptor::readFromFile)
1:96d41f0:                      .collect(groupingBy(h -> h.hostId));
1:c20566f:             return new HintsCatalog(hintsDirectory, writerParams, stores);
1:96d41f0:         }
1:96d41f0:         catch (IOException e)
1:96d41f0:         {
1:96d41f0:             throw new FSReadError(e, hintsDirectory);
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     Stream<HintsStore> stores()
1:96d41f0:     {
1:96d41f0:         return stores.values().stream();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     void maybeLoadStores(Iterable<UUID> hostIds)
1:96d41f0:     {
1:96d41f0:         for (UUID hostId : hostIds)
1:96d41f0:             get(hostId);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     HintsStore get(UUID hostId)
1:96d41f0:     {
1:96d41f0:         // we intentionally don't just return stores.computeIfAbsent() because it's expensive compared to simple get(),
1:96d41f0:         // and in this case would also allocate for the capturing lambda; the method is on a really hot path
1:96d41f0:         HintsStore store = stores.get(hostId);
1:96d41f0:         return store == null
1:c20566f:              ? stores.computeIfAbsent(hostId, (id) -> HintsStore.create(id, hintsDirectory, writerParams, Collections.emptyList()))
1:96d41f0:              : store;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     /**
1:96d41f0:      * Delete all hints for all host ids.
1:96d41f0:      *
1:96d41f0:      * Will not delete the files that are currently being dispatched, or written to.
1:96d41f0:      */
1:96d41f0:     void deleteAllHints()
1:96d41f0:     {
1:96d41f0:         stores.keySet().forEach(this::deleteAllHints);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     /**
1:96d41f0:      * Delete all hints for the specified host id.
1:96d41f0:      *
1:96d41f0:      * Will not delete the files that are currently being dispatched, or written to.
1:96d41f0:      */
1:96d41f0:     void deleteAllHints(UUID hostId)
1:96d41f0:     {
1:96d41f0:         HintsStore store = stores.get(hostId);
1:96d41f0:         if (store != null)
1:96d41f0:             store.deleteAllHints();
1:96d41f0:     }
1:96d41f0: 
1:959b96e:     /**
1:959b96e:      * @return true if at least one of the stores has a file pending dispatch
1:959b96e:      */
1:959b96e:     boolean hasFiles()
1:959b96e:     {
1:959b96e:         return stores().anyMatch(HintsStore::hasFiles);
1:959b96e:     }
1:959b96e: 
1:96d41f0:     void exciseStore(UUID hostId)
1:96d41f0:     {
1:96d41f0:         deleteAllHints(hostId);
1:96d41f0:         stores.remove(hostId);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     void fsyncDirectory()
1:96d41f0:     {
1:96d41f0:         int fd = CLibrary.tryOpenDirectory(hintsDirectory.getAbsolutePath());
1:96d41f0:         if (fd != -1)
1:96d41f0:         {
1:96d41f0:             SyncUtil.trySync(fd);
1:96d41f0:             CLibrary.tryCloseFD(fd);
1:96d41f0:         }
1:96d41f0:     }
1:c20566f: 
1:c20566f:     ImmutableMap<String, Object> getWriterParams()
1:c20566f:     {
1:c20566f:         return writerParams;
1:c20566f:     }
1:96d41f0: }
============================================================================
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.ImmutableMap;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final ImmutableMap<String, Object> writerParams;
1:     private HintsCatalog(File hintsDirectory, ImmutableMap<String, Object> writerParams, Map<UUID, List<HintsDescriptor>> descriptors)
1:         this.writerParams = writerParams;
1:             stores.put(entry.getKey(), HintsStore.create(entry.getKey(), hintsDirectory, writerParams, entry.getValue()));
1:     static HintsCatalog load(File hintsDirectory, ImmutableMap<String, Object> writerParams)
/////////////////////////////////////////////////////////////////////////
1:             return new HintsCatalog(hintsDirectory, writerParams, stores);
/////////////////////////////////////////////////////////////////////////
1:              ? stores.computeIfAbsent(hostId, (id) -> HintsStore.create(id, hintsDirectory, writerParams, Collections.emptyList()))
/////////////////////////////////////////////////////////////////////////
1: 
1:     ImmutableMap<String, Object> getWriterParams()
1:     {
1:         return writerParams;
1:     }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:959b96e
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if at least one of the stores has a file pending dispatch
1:      */
1:     boolean hasFiles()
1:     {
1:         return stores().anyMatch(HintsStore::hasFiles);
1:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.file.Files;
1: import java.util.*;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.stream.Stream;
1: 
1: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.utils.CLibrary;
1: import org.apache.cassandra.utils.SyncUtil;
1: 
1: import static java.util.stream.Collectors.groupingBy;
1: 
1: /**
1:  * A simple catalog for easy host id -> {@link HintsStore} lookup and manipulation.
1:  */
1: final class HintsCatalog
1: {
1:     private final File hintsDirectory;
1:     private final Map<UUID, HintsStore> stores;
1: 
0:     private HintsCatalog(File hintsDirectory, Map<UUID, List<HintsDescriptor>> descriptors)
1:     {
1:         this.hintsDirectory = hintsDirectory;
1:         this.stores = new ConcurrentHashMap<>();
1: 
1:         for (Map.Entry<UUID, List<HintsDescriptor>> entry : descriptors.entrySet())
0:             stores.put(entry.getKey(), HintsStore.create(entry.getKey(), hintsDirectory, entry.getValue()));
1:     }
1: 
1:     /**
1:      * Loads hints stores from a given directory.
1:      */
0:     static HintsCatalog load(File hintsDirectory)
1:     {
1:         try
1:         {
1:             Map<UUID, List<HintsDescriptor>> stores =
1:                 Files.list(hintsDirectory.toPath())
1:                      .filter(HintsDescriptor::isHintFileName)
1:                      .map(HintsDescriptor::readFromFile)
1:                      .collect(groupingBy(h -> h.hostId));
0:             return new HintsCatalog(hintsDirectory, stores);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, hintsDirectory);
1:         }
1:     }
1: 
1:     Stream<HintsStore> stores()
1:     {
1:         return stores.values().stream();
1:     }
1: 
1:     void maybeLoadStores(Iterable<UUID> hostIds)
1:     {
1:         for (UUID hostId : hostIds)
1:             get(hostId);
1:     }
1: 
1:     HintsStore get(UUID hostId)
1:     {
1:         // we intentionally don't just return stores.computeIfAbsent() because it's expensive compared to simple get(),
1:         // and in this case would also allocate for the capturing lambda; the method is on a really hot path
1:         HintsStore store = stores.get(hostId);
1:         return store == null
0:              ? stores.computeIfAbsent(hostId, (id) -> HintsStore.create(id, hintsDirectory, Collections.emptyList()))
1:              : store;
1:     }
1: 
1:     /**
1:      * Delete all hints for all host ids.
1:      *
1:      * Will not delete the files that are currently being dispatched, or written to.
1:      */
1:     void deleteAllHints()
1:     {
1:         stores.keySet().forEach(this::deleteAllHints);
1:     }
1: 
1:     /**
1:      * Delete all hints for the specified host id.
1:      *
1:      * Will not delete the files that are currently being dispatched, or written to.
1:      */
1:     void deleteAllHints(UUID hostId)
1:     {
1:         HintsStore store = stores.get(hostId);
1:         if (store != null)
1:             store.deleteAllHints();
1:     }
1: 
1:     void exciseStore(UUID hostId)
1:     {
1:         deleteAllHints(hostId);
1:         stores.remove(hostId);
1:     }
1: 
1:     void fsyncDirectory()
1:     {
1:         int fd = CLibrary.tryOpenDirectory(hintsDirectory.getAbsolutePath());
1:         if (fd != -1)
1:         {
1:             SyncUtil.trySync(fd);
1:             CLibrary.tryCloseFD(fd);
1:         }
1:     }
1: }
============================================================================