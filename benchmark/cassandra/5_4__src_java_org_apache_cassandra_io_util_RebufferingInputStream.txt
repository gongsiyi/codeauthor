1:ce63ccc: /*
1:ce63ccc:  * Licensed to the Apache Software Foundation (ASF) under one
1:ce63ccc:  * or more contributor license agreements.  See the NOTICE file
1:ce63ccc:  * distributed with this work for additional information
1:ce63ccc:  * regarding copyright ownership.  The ASF licenses this file
1:ce63ccc:  * to you under the Apache License, Version 2.0 (the
1:ce63ccc:  * "License"); you may not use this file except in compliance
1:ce63ccc:  * with the License.  You may obtain a copy of the License at
1:ce63ccc:  *
1:ce63ccc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ce63ccc:  *
1:ce63ccc:  * Unless required by applicable law or agreed to in writing, software
1:ce63ccc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce63ccc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce63ccc:  * See the License for the specific language governing permissions and
1:ce63ccc:  * limitations under the License.
1:ce63ccc:  */
1:ce63ccc: package org.apache.cassandra.io.util;
6:ce63ccc: 
1:ce63ccc: import java.io.Closeable;
1:ce63ccc: import java.io.DataInputStream;
1:ce63ccc: import java.io.EOFException;
1:ce63ccc: import java.io.IOException;
1:ce63ccc: import java.io.InputStream;
1:ce63ccc: import java.nio.ByteBuffer;
1:ce63ccc: import java.nio.ByteOrder;
1:ce63ccc: 
1:ce63ccc: import net.nicoulaj.compilecommand.annotations.DontInline;
1:ce63ccc: import org.apache.cassandra.utils.FastByteOperations;
1:ce63ccc: import org.apache.cassandra.utils.vint.VIntCoding;
1:ce63ccc: 
1:ce63ccc: import com.google.common.base.Preconditions;
1:ce63ccc: 
1:ce63ccc: /**
1:ce63ccc:  * Rough equivalent of BufferedInputStream and DataInputStream wrapping a ByteBuffer that can be refilled
1:ce63ccc:  * via rebuffer. Implementations provide this buffer from various channels (socket, file, memory, etc).
1:ce63ccc:  *
1:ce63ccc:  * RebufferingInputStream is not thread safe.
1:ce63ccc:  */
1:ce63ccc: public abstract class RebufferingInputStream extends InputStream implements DataInputPlus, Closeable
3:ce63ccc: {
1:ce63ccc:     protected ByteBuffer buffer;
1:ce63ccc: 
1:ce63ccc:     protected RebufferingInputStream(ByteBuffer buffer)
1:ce63ccc:     {
1:ce63ccc:         Preconditions.checkArgument(buffer == null || buffer.order() == ByteOrder.BIG_ENDIAN, "Buffer must have BIG ENDIAN byte ordering");
1:ce63ccc:         this.buffer = buffer;
3:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     /**
1:ce63ccc:      * Implementations must implement this method to refill the buffer.
1:ce63ccc:      * They can expect the buffer to be empty when this method is invoked.
1:ce63ccc:      * @throws IOException
1:ce63ccc:      */
1:ce63ccc:     protected abstract void reBuffer() throws IOException;
1:ce63ccc: 
3:ce63ccc:     @Override
1:ce63ccc:     public void readFully(byte[] b) throws IOException
1:ce63ccc:     {
1:ce63ccc:         readFully(b, 0, b.length);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public void readFully(byte[] b, int off, int len) throws IOException
1:ce63ccc:     {
1:ce63ccc:         int read = read(b, off, len);
1:ce63ccc:         if (read < len)
1:85cc390:             throw new EOFException("EOF after " + read + " bytes out of " + len);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:68d2526:     public int read(byte[] b, int off, int len) throws IOException
1:68d2526:     {
1:ce63ccc:         // avoid int overflow
1:ce63ccc:         if (off < 0 || off > b.length || len < 0 || len > b.length - off)
1:ce63ccc:             throw new IndexOutOfBoundsException();
1:ce63ccc: 
1:ce63ccc:         if (len == 0)
1:ce63ccc:             return 0;
1:ce63ccc: 
1:ce63ccc:         int copied = 0;
1:ce63ccc:         while (copied < len)
1:ce63ccc:         {
1:ce63ccc:             int position = buffer.position();
1:ce63ccc:             int remaining = buffer.limit() - position;
1:ce63ccc:             if (remaining == 0)
1:ce63ccc:             {
1:ce63ccc:                 reBuffer();
1:ce63ccc:                 position = buffer.position();
1:ce63ccc:                 remaining = buffer.limit() - position;
1:ce63ccc:                 if (remaining == 0)
1:ce63ccc:                     return copied == 0 ? -1 : copied;
1:ce63ccc:             }
1:ce63ccc:             int toCopy = Math.min(len - copied, remaining);
1:ce63ccc:             FastByteOperations.copy(buffer, position, b, off + copied, toCopy);
1:ce63ccc:             buffer.position(position + toCopy);
1:ce63ccc:             copied += toCopy;
1:ce63ccc:         }
1:ce63ccc: 
1:ce63ccc:         return copied;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @DontInline
1:ce63ccc:     protected long readPrimitiveSlowly(int bytes) throws IOException
1:ce63ccc:     {
1:ce63ccc:         long result = 0;
1:ce63ccc:         for (int i = 0; i < bytes; i++)
1:ce63ccc:             result = (result << 8) | (readByte() & 0xFFL);
1:ce63ccc:         return result;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public int skipBytes(int n) throws IOException
1:ce63ccc:     {
1:ff27eb3:         if (n < 0)
1:ff27eb3:             return 0;
1:ff27eb3:         int requested = n;
1:ff27eb3:         int position = buffer.position(), limit = buffer.limit(), remaining;
1:ff27eb3:         while ((remaining = limit - position) < n)
1:ce63ccc:         {
1:ff27eb3:             n -= remaining;
1:ff27eb3:             buffer.position(limit);
1:ff27eb3:             reBuffer();
1:ff27eb3:             position = buffer.position();
1:ff27eb3:             limit = buffer.limit();
1:ff27eb3:             if (position == limit)
1:ff27eb3:                 return requested - n;
1:ce63ccc:         }
1:ff27eb3:         buffer.position(position + n);
1:ff27eb3:         return requested;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public boolean readBoolean() throws IOException
1:ce63ccc:     {
1:ce63ccc:         return readByte() != 0;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public byte readByte() throws IOException
1:ce63ccc:     {
1:ce63ccc:         if (!buffer.hasRemaining())
1:ce63ccc:         {
1:ce63ccc:             reBuffer();
1:ce63ccc:             if (!buffer.hasRemaining())
2:ce63ccc:                 throw new EOFException();
1:ce63ccc:         }
1:ce63ccc: 
1:ce63ccc:         return buffer.get();
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public int readUnsignedByte() throws IOException
1:ce63ccc:     {
1:ce63ccc:         return readByte() & 0xff;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public short readShort() throws IOException
1:ce63ccc:     {
1:ce63ccc:         if (buffer.remaining() >= 2)
1:ce63ccc:             return buffer.getShort();
1:ce63ccc:         else
1:ce63ccc:             return (short) readPrimitiveSlowly(2);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public int readUnsignedShort() throws IOException
1:ce63ccc:     {
1:ce63ccc:         return readShort() & 0xFFFF;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public char readChar() throws IOException
1:ce63ccc:     {
1:ce63ccc:         if (buffer.remaining() >= 2)
1:ce63ccc:             return buffer.getChar();
1:ce63ccc:         else
1:ce63ccc:             return (char) readPrimitiveSlowly(2);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public int readInt() throws IOException
1:ce63ccc:     {
1:ce63ccc:         if (buffer.remaining() >= 4)
1:ce63ccc:             return buffer.getInt();
1:ce63ccc:         else
1:ce63ccc:             return (int) readPrimitiveSlowly(4);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public long readLong() throws IOException
1:ce63ccc:     {
1:ce63ccc:         if (buffer.remaining() >= 8)
1:ce63ccc:             return buffer.getLong();
1:ce63ccc:         else
1:ce63ccc:             return readPrimitiveSlowly(8);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public long readVInt() throws IOException
1:ce63ccc:     {
1:ce63ccc:         return VIntCoding.decodeZigZag64(readUnsignedVInt());
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public long readUnsignedVInt() throws IOException
1:ce63ccc:     {
1:ce63ccc:         //If 9 bytes aren't available use the slow path in VIntCoding
1:ce63ccc:         if (buffer.remaining() < 9)
1:ce63ccc:             return VIntCoding.readUnsignedVInt(this);
1:ce63ccc: 
1:ce63ccc:         byte firstByte = buffer.get();
1:ce63ccc: 
1:ce63ccc:         //Bail out early if this is one byte, necessary or it fails later
1:ce63ccc:         if (firstByte >= 0)
1:ce63ccc:             return firstByte;
1:ce63ccc: 
1:ce63ccc:         int extraBytes = VIntCoding.numberOfExtraBytesToRead(firstByte);
1:ce63ccc: 
1:ce63ccc:         int position = buffer.position();
1:ce63ccc:         int extraBits = extraBytes * 8;
1:ce63ccc: 
1:ce63ccc:         long retval = buffer.getLong(position);
1:ce63ccc:         if (buffer.order() == ByteOrder.LITTLE_ENDIAN)
1:ce63ccc:             retval = Long.reverseBytes(retval);
1:ce63ccc:         buffer.position(position + extraBytes);
1:ce63ccc: 
1:ce63ccc:         // truncate the bytes we read in excess of those we needed
1:ce63ccc:         retval >>>= 64 - extraBits;
1:ce63ccc:         // remove the non-value bits from the first byte
1:ce63ccc:         firstByte &= VIntCoding.firstByteValueMask(extraBytes);
1:ce63ccc:         // shift the first byte up to its correct position
1:ce63ccc:         retval |= (long) firstByte << extraBits;
1:ce63ccc:         return retval;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public float readFloat() throws IOException
1:ce63ccc:     {
1:ce63ccc:         if (buffer.remaining() >= 4)
1:ce63ccc:             return buffer.getFloat();
1:ce63ccc:         else
1:ce63ccc:             return Float.intBitsToFloat((int)readPrimitiveSlowly(4));
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public double readDouble() throws IOException
1:ce63ccc:     {
1:ce63ccc:         if (buffer.remaining() >= 8)
1:ce63ccc:             return buffer.getDouble();
1:ce63ccc:         else
1:ce63ccc:             return Double.longBitsToDouble(readPrimitiveSlowly(8));
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public String readLine() throws IOException
1:ce63ccc:     {
1:ce63ccc:         throw new UnsupportedOperationException();
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public String readUTF() throws IOException
1:ce63ccc:     {
1:ce63ccc:         return DataInputStream.readUTF(this);
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public int read() throws IOException
1:ce63ccc:     {
1:ce63ccc:         try
1:ce63ccc:         {
1:ce63ccc:             return readUnsignedByte();
1:ce63ccc:         }
1:ce63ccc:         catch (EOFException ex)
1:ce63ccc:         {
1:ce63ccc:             return -1;
1:ce63ccc:         }
1:ce63ccc:     }
1:ce63ccc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public int read(byte[] b, int off, int len) throws IOException
1:     {
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:68d20ed
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.Closeable;
1: import java.io.DataInputStream;
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.ByteOrder;
1: 
1: import net.nicoulaj.compilecommand.annotations.DontInline;
0: import net.nicoulaj.compilecommand.annotations.Print;
1: import org.apache.cassandra.utils.FastByteOperations;
1: import org.apache.cassandra.utils.vint.VIntCoding;
1: 
1: import com.google.common.base.Preconditions;
1: 
1: /**
1:  * Rough equivalent of BufferedInputStream and DataInputStream wrapping a ByteBuffer that can be refilled
1:  * via rebuffer. Implementations provide this buffer from various channels (socket, file, memory, etc).
1:  *
1:  * RebufferingInputStream is not thread safe.
1:  */
1: public abstract class RebufferingInputStream extends InputStream implements DataInputPlus, Closeable
1: {
1:     protected ByteBuffer buffer;
1: 
1:     protected RebufferingInputStream(ByteBuffer buffer)
1:     {
1:         Preconditions.checkArgument(buffer == null || buffer.order() == ByteOrder.BIG_ENDIAN, "Buffer must have BIG ENDIAN byte ordering");
1:         this.buffer = buffer;
1:     }
1: 
1:     /**
1:      * Implementations must implement this method to refill the buffer.
1:      * They can expect the buffer to be empty when this method is invoked.
1:      * @throws IOException
1:      */
1:     protected abstract void reBuffer() throws IOException;
1: 
1:     @Override
1:     public void readFully(byte[] b) throws IOException
1:     {
1:         readFully(b, 0, b.length);
1:     }
1: 
1:     @Override
1:     public void readFully(byte[] b, int off, int len) throws IOException
1:     {
1:         int read = read(b, off, len);
1:         if (read < len)
1:             throw new EOFException();
1:     }
1: 
0:     @Print
1:     @Override
0:     public int read(byte[] b, int off, int len) throws IOException {
1: 
1:         // avoid int overflow
1:         if (off < 0 || off > b.length || len < 0 || len > b.length - off)
1:             throw new IndexOutOfBoundsException();
1: 
1:         if (len == 0)
1:             return 0;
1: 
1:         int copied = 0;
1:         while (copied < len)
1:         {
1:             int position = buffer.position();
1:             int remaining = buffer.limit() - position;
1:             if (remaining == 0)
1:             {
1:                 reBuffer();
1:                 position = buffer.position();
1:                 remaining = buffer.limit() - position;
1:                 if (remaining == 0)
1:                     return copied == 0 ? -1 : copied;
1:             }
1:             int toCopy = Math.min(len - copied, remaining);
1:             FastByteOperations.copy(buffer, position, b, off + copied, toCopy);
1:             buffer.position(position + toCopy);
1:             copied += toCopy;
1:         }
1: 
1:         return copied;
1:     }
1: 
1:     @DontInline
1:     protected long readPrimitiveSlowly(int bytes) throws IOException
1:     {
1:         long result = 0;
1:         for (int i = 0; i < bytes; i++)
1:             result = (result << 8) | (readByte() & 0xFFL);
1:         return result;
1:     }
1: 
1:     @Override
1:     public int skipBytes(int n) throws IOException
1:     {
0:         int skipped = 0;
1: 
0:         while (skipped < n)
1:         {
0:             int skippedThisTime = (int)skip(n - skipped);
0:             if (skippedThisTime <= 0) break;
0:             skipped += skippedThisTime;
1:         }
1: 
0:         return skipped;
1:     }
1: 
1:     @Override
1:     public boolean readBoolean() throws IOException
1:     {
1:         return readByte() != 0;
1:     }
1: 
1:     @Override
1:     public byte readByte() throws IOException
1:     {
1:         if (!buffer.hasRemaining())
1:         {
1:             reBuffer();
1:             if (!buffer.hasRemaining())
1:                 throw new EOFException();
1:         }
1: 
1:         return buffer.get();
1:     }
1: 
1:     @Override
1:     public int readUnsignedByte() throws IOException
1:     {
1:         return readByte() & 0xff;
1:     }
1: 
1:     @Override
1:     public short readShort() throws IOException
1:     {
1:         if (buffer.remaining() >= 2)
1:             return buffer.getShort();
1:         else
1:             return (short) readPrimitiveSlowly(2);
1:     }
1: 
1:     @Override
1:     public int readUnsignedShort() throws IOException
1:     {
1:         return readShort() & 0xFFFF;
1:     }
1: 
1:     @Override
1:     public char readChar() throws IOException
1:     {
1:         if (buffer.remaining() >= 2)
1:             return buffer.getChar();
1:         else
1:             return (char) readPrimitiveSlowly(2);
1:     }
1: 
1:     @Override
1:     public int readInt() throws IOException
1:     {
1:         if (buffer.remaining() >= 4)
1:             return buffer.getInt();
1:         else
1:             return (int) readPrimitiveSlowly(4);
1:     }
1: 
1:     @Override
1:     public long readLong() throws IOException
1:     {
1:         if (buffer.remaining() >= 8)
1:             return buffer.getLong();
1:         else
1:             return readPrimitiveSlowly(8);
1:     }
1: 
1:     public long readVInt() throws IOException
1:     {
1:         return VIntCoding.decodeZigZag64(readUnsignedVInt());
1:     }
1: 
1:     public long readUnsignedVInt() throws IOException
1:     {
1:         //If 9 bytes aren't available use the slow path in VIntCoding
1:         if (buffer.remaining() < 9)
1:             return VIntCoding.readUnsignedVInt(this);
1: 
1:         byte firstByte = buffer.get();
1: 
1:         //Bail out early if this is one byte, necessary or it fails later
1:         if (firstByte >= 0)
1:             return firstByte;
1: 
1:         int extraBytes = VIntCoding.numberOfExtraBytesToRead(firstByte);
1: 
1:         int position = buffer.position();
1:         int extraBits = extraBytes * 8;
1: 
1:         long retval = buffer.getLong(position);
1:         if (buffer.order() == ByteOrder.LITTLE_ENDIAN)
1:             retval = Long.reverseBytes(retval);
1:         buffer.position(position + extraBytes);
1: 
1:         // truncate the bytes we read in excess of those we needed
1:         retval >>>= 64 - extraBits;
1:         // remove the non-value bits from the first byte
1:         firstByte &= VIntCoding.firstByteValueMask(extraBytes);
1:         // shift the first byte up to its correct position
1:         retval |= (long) firstByte << extraBits;
1:         return retval;
1:     }
1: 
1:     @Override
1:     public float readFloat() throws IOException
1:     {
1:         if (buffer.remaining() >= 4)
1:             return buffer.getFloat();
1:         else
1:             return Float.intBitsToFloat((int)readPrimitiveSlowly(4));
1:     }
1: 
1:     @Override
1:     public double readDouble() throws IOException
1:     {
1:         if (buffer.remaining() >= 8)
1:             return buffer.getDouble();
1:         else
1:             return Double.longBitsToDouble(readPrimitiveSlowly(8));
1:     }
1: 
1:     @Override
1:     public String readLine() throws IOException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     @Override
1:     public String readUTF() throws IOException
1:     {
1:         return DataInputStream.readUTF(this);
1:     }
1: 
1:     @Override
1:     public int read() throws IOException
1:     {
1:         try
1:         {
1:             return readUnsignedByte();
1:         }
1:         catch (EOFException ex)
1:         {
1:             return -1;
1:         }
1:     }
1: 
1:     @Override
0:     public void reset() throws IOException
1:     {
0:         throw new IOException("mark/reset not supported");
1:     }
1: 
1:     @Override
0:     public boolean markSupported()
1:     {
0:         return false;
1:     }
1: }
author:Alex Petrov
-------------------------------------------------------------------------------
commit:85cc390
/////////////////////////////////////////////////////////////////////////
1:             throw new EOFException("EOF after " + read + " bytes out of " + len);
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ff27eb3
/////////////////////////////////////////////////////////////////////////
1:         if (n < 0)
1:             return 0;
1:         int requested = n;
1:         int position = buffer.position(), limit = buffer.limit(), remaining;
1:         while ((remaining = limit - position) < n)
1:             n -= remaining;
1:             buffer.position(limit);
1:             reBuffer();
1:             position = buffer.position();
1:             limit = buffer.limit();
1:             if (position == limit)
1:                 return requested - n;
1:         buffer.position(position + n);
1:         return requested;
commit:cc559af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================