1:91bdf7f: /*
1:91bdf7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:91bdf7f:  * or more contributor license agreements.  See the NOTICE file
1:91bdf7f:  * distributed with this work for additional information
1:91bdf7f:  * regarding copyright ownership.  The ASF licenses this file
1:91bdf7f:  * to you under the Apache License, Version 2.0 (the
1:91bdf7f:  * "License"); you may not use this file except in compliance
1:91bdf7f:  * with the License.  You may obtain a copy of the License at
1:91bdf7f:  *
1:91bdf7f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:91bdf7f:  *
1:91bdf7f:  * Unless required by applicable law or agreed to in writing, software
1:91bdf7f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91bdf7f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91bdf7f:  * See the License for the specific language governing permissions and
1:91bdf7f:  * limitations under the License.
1:91bdf7f:  */
1:91bdf7f: package org.apache.cassandra.db.marshal;
1:91bdf7f: 
1:91bdf7f: import java.nio.ByteBuffer;
1:91bdf7f: import java.util.HashMap;
1:91bdf7f: import java.util.Map;
1:91bdf7f: 
1:91bdf7f: import com.google.common.collect.ImmutableMap;
1:91bdf7f: 
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:3a2faf9: import org.apache.cassandra.exceptions.SyntaxException;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.BytesSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:91bdf7f: import org.apache.cassandra.utils.ByteBufferUtil;
1:91bdf7f: 
1:a991b64: /*
1:a991b64:  * This class is deprecated and only kept for backward compatibility.
1:a991b64:  */
1:91bdf7f: public class ColumnToCollectionType extends AbstractType<ByteBuffer>
1:91bdf7f: {
1:91bdf7f:     // interning instances
1:ee55f36:     private static final Map<Map<ByteBuffer, CollectionType>, ColumnToCollectionType> instances = new HashMap<>();
1:91bdf7f: 
1:91bdf7f:     public final Map<ByteBuffer, CollectionType> defined;
1:91bdf7f: 
1:3a2faf9:     public static ColumnToCollectionType getInstance(TypeParser parser) throws SyntaxException, ConfigurationException
1:91bdf7f:     {
1:91bdf7f:         return getInstance(parser.getCollectionsParameters());
1:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     public static synchronized ColumnToCollectionType getInstance(Map<ByteBuffer, CollectionType> defined)
1:91bdf7f:     {
1:91bdf7f:         assert defined != null;
1:91bdf7f: 
1:91bdf7f:         ColumnToCollectionType t = instances.get(defined);
1:91bdf7f:         if (t == null)
1:91bdf7f:         {
1:91bdf7f:             t = new ColumnToCollectionType(defined);
1:91bdf7f:             instances.put(defined, t);
1:91bdf7f:         }
1:91bdf7f:         return t;
1:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     private ColumnToCollectionType(Map<ByteBuffer, CollectionType> defined)
1:91bdf7f:     {
1:07594ee:         super(ComparisonType.CUSTOM);
1:91bdf7f:         this.defined = ImmutableMap.copyOf(defined);
1:91bdf7f:     }
1:91bdf7f: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:91bdf7f:     {
1:91bdf7f:         throw new UnsupportedOperationException("ColumnToCollectionType should only be used in composite types, never alone");
1:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     public int compareCollectionMembers(ByteBuffer o1, ByteBuffer o2, ByteBuffer collectionName)
1:e9c6742:     {
1:91bdf7f:         CollectionType t = defined.get(collectionName);
1:91bdf7f:         if (t == null)
1:91bdf7f:             throw new RuntimeException(ByteBufferUtil.bytesToHex(collectionName) + " is not defined as a collection");
1:91bdf7f: 
1:91bdf7f:         return t.nameComparator().compare(o1, o2);
1:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     public String getString(ByteBuffer bytes)
1:91bdf7f:     {
1:91bdf7f:         return BytesType.instance.getString(bytes);
1:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     public ByteBuffer fromString(String source)
1:91bdf7f:     {
1:91bdf7f:         try
1:91bdf7f:         {
1:91bdf7f:             return ByteBufferUtil.hexToBytes(source);
1:91bdf7f:         }
1:91bdf7f:         catch (NumberFormatException e)
1:91bdf7f:         {
1:91bdf7f:             throw new MarshalException(String.format("cannot parse '%s' as hex bytes", source), e);
1:91bdf7f:         }
1:91bdf7f:     }
1:91bdf7f: 
1:daff1fc:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:91bdf7f:     {
1:c7b02d1:         throw new UnsupportedOperationException();
1:91bdf7f:     }
1:91bdf7f: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:91bdf7f:     {
1:c7b02d1:         throw new UnsupportedOperationException();
1:91bdf7f:     }
1:91bdf7f: 
1:c7b02d1:     @Override
1:91bdf7f:     public void validate(ByteBuffer bytes)
1:91bdf7f:     {
1:91bdf7f:         throw new UnsupportedOperationException("ColumnToCollectionType should only be used in composite types, never alone");
1:91bdf7f:     }
1:91bdf7f: 
1:fc8b76f:     public TypeSerializer<ByteBuffer> getSerializer()
1:91bdf7f:     {
1:e9c6742:         return BytesSerializer.instance;
1:e9c6742:     }
1:e9c6742: 
1:91bdf7f:     public void validateCollectionMember(ByteBuffer bytes, ByteBuffer collectionName) throws MarshalException
1:91bdf7f:     {
1:91bdf7f:         CollectionType t = defined.get(collectionName);
1:91bdf7f:         if (t == null)
1:91bdf7f:             throw new MarshalException(ByteBufferUtil.bytesToHex(collectionName) + " is not defined as a collection");
1:91bdf7f: 
1:91bdf7f:         t.nameComparator().validate(bytes);
1:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     @Override
1:91bdf7f:     public boolean isCompatibleWith(AbstractType<?> previous)
1:91bdf7f:     {
1:91bdf7f:         if (!(previous instanceof ColumnToCollectionType))
1:91bdf7f:             return false;
1:91bdf7f: 
1:91bdf7f:         ColumnToCollectionType prev = (ColumnToCollectionType)previous;
1:91bdf7f:         // We are compatible if we have all the definitions previous have (but we can have more).
1:91bdf7f:         for (Map.Entry<ByteBuffer, CollectionType> entry : prev.defined.entrySet())
1:91bdf7f:         {
1:e30f111:             CollectionType newType = defined.get(entry.getKey());
1:e30f111:             if (newType == null || !newType.isCompatibleWith(entry.getValue()))
1:91bdf7f:                 return false;
1:91bdf7f:         }
1:91bdf7f:         return true;
1:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     @Override
1:91bdf7f:     public String toString()
1:91bdf7f:     {
1:91bdf7f:         return getClass().getName() + TypeParser.stringifyCollectionsParameters(defined);
1:91bdf7f:     }
1:91bdf7f: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM);
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * This class is deprecated and only kept for backward compatibility.
1:  */
commit:e30f111
/////////////////////////////////////////////////////////////////////////
1:             CollectionType newType = defined.get(entry.getKey());
1:             if (newType == null || !newType.isCompatibleWith(entry.getValue()))
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.BytesSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<ByteBuffer> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.BytesSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:     public AbstractSerializer<ByteBuffer> asComposer()
1:     {
1:         return BytesSerializer.instance;
1:     }
1: 
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.SyntaxException;
/////////////////////////////////////////////////////////////////////////
1:     public static ColumnToCollectionType getInstance(TypeParser parser) throws SyntaxException, ConfigurationException
commit:91bdf7f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import com.google.common.collect.ImmutableMap;
1: 
0: import org.apache.cassandra.config.ConfigurationException;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class ColumnToCollectionType extends AbstractType<ByteBuffer>
1: {
1:     // interning instances
0:     private static final Map<Map<ByteBuffer, CollectionType>, ColumnToCollectionType> instances = new HashMap<Map<ByteBuffer, CollectionType>, ColumnToCollectionType>();
1: 
1:     public final Map<ByteBuffer, CollectionType> defined;
1: 
0:     public static ColumnToCollectionType getInstance(TypeParser parser) throws ConfigurationException
1:     {
1:         return getInstance(parser.getCollectionsParameters());
1:     }
1: 
1:     public static synchronized ColumnToCollectionType getInstance(Map<ByteBuffer, CollectionType> defined)
1:     {
1:         assert defined != null;
1: 
1:         ColumnToCollectionType t = instances.get(defined);
1:         if (t == null)
1:         {
1:             t = new ColumnToCollectionType(defined);
1:             instances.put(defined, t);
1:         }
1:         return t;
1:     }
1: 
1:     private ColumnToCollectionType(Map<ByteBuffer, CollectionType> defined)
1:     {
1:         this.defined = ImmutableMap.copyOf(defined);
1:     }
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         throw new UnsupportedOperationException("ColumnToCollectionType should only be used in composite types, never alone");
1:     }
1: 
1:     public int compareCollectionMembers(ByteBuffer o1, ByteBuffer o2, ByteBuffer collectionName)
1:     {
1:         CollectionType t = defined.get(collectionName);
1:         if (t == null)
1:             throw new RuntimeException(ByteBufferUtil.bytesToHex(collectionName) + " is not defined as a collection");
1: 
1:         return t.nameComparator().compare(o1, o2);
1:     }
1: 
0:     public ByteBuffer compose(ByteBuffer bytes)
1:     {
0:         return BytesType.instance.compose(bytes);
1:     }
1: 
0:     public ByteBuffer decompose(ByteBuffer value)
1:     {
0:         return BytesType.instance.decompose(value);
1:     }
1: 
1:     public String getString(ByteBuffer bytes)
1:     {
1:         return BytesType.instance.getString(bytes);
1:     }
1: 
1:     public ByteBuffer fromString(String source)
1:     {
1:         try
1:         {
1:             return ByteBufferUtil.hexToBytes(source);
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new MarshalException(String.format("cannot parse '%s' as hex bytes", source), e);
1:         }
1:     }
1: 
1:     public void validate(ByteBuffer bytes)
1:     {
1:         throw new UnsupportedOperationException("ColumnToCollectionType should only be used in composite types, never alone");
1:     }
1: 
1:     public void validateCollectionMember(ByteBuffer bytes, ByteBuffer collectionName) throws MarshalException
1:     {
1:         CollectionType t = defined.get(collectionName);
1:         if (t == null)
1:             throw new MarshalException(ByteBufferUtil.bytesToHex(collectionName) + " is not defined as a collection");
1: 
1:         t.nameComparator().validate(bytes);
1:     }
1: 
1:     @Override
1:     public boolean isCompatibleWith(AbstractType<?> previous)
1:     {
1:         if (!(previous instanceof ColumnToCollectionType))
1:             return false;
1: 
1:         ColumnToCollectionType prev = (ColumnToCollectionType)previous;
1:         // We are compatible if we have all the definitions previous have (but we can have more).
1:         for (Map.Entry<ByteBuffer, CollectionType> entry : prev.defined.entrySet())
1:         {
0:             if (!entry.getValue().isCompatibleWith(defined.get(entry.getKey())))
1:                 return false;
1:         }
1:         return true;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return getClass().getName() + TypeParser.stringifyCollectionsParameters(defined);
1:     }
1: }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     public Term fromJSONObject(Object parsed) throws MarshalException
0:     {
1:         throw new UnsupportedOperationException();
0:     }
0: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
0:     {
1:         throw new UnsupportedOperationException();
0:     }
0: 
1:     @Override
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<Map<ByteBuffer, CollectionType>, ColumnToCollectionType> instances = new HashMap<>();
============================================================================