1:4ed0060: /*
1:4ed0060:  * Licensed to the Apache Software Foundation (ASF) under one
1:4ed0060:  * or more contributor license agreements.  See the NOTICE file
1:4ed0060:  * distributed with this work for additional information
1:4ed0060:  * regarding copyright ownership.  The ASF licenses this file
1:4ed0060:  * to you under the Apache License, Version 2.0 (the
1:4ed0060:  * "License"); you may not use this file except in compliance
1:4ed0060:  * with the License.  You may obtain a copy of the License at
1:4ed0060:  *
1:4ed0060:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4ed0060:  *
1:4ed0060:  * Unless required by applicable law or agreed to in writing, software
1:4ed0060:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4ed0060:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4ed0060:  * See the License for the specific language governing permissions and
1:4ed0060:  * limitations under the License.
1:4ed0060:  */
1:4ed0060: package org.apache.cassandra.cql3.selection;
1:4ed0060: 
1:4ed0060: import java.nio.ByteBuffer;
1:4ed0060: 
1:4ed0060: import org.apache.cassandra.config.ColumnDefinition;
1:4ed0060: import org.apache.cassandra.cql3.ColumnSpecification;
1:4ed0060: import org.apache.cassandra.cql3.QueryOptions;
1:4ed0060: import org.apache.cassandra.cql3.Term;
1:4ed0060: import org.apache.cassandra.db.marshal.AbstractType;
1:4ed0060: import org.apache.cassandra.exceptions.InvalidRequestException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:4ed0060: 
1:4ed0060: /**
1:4ed0060:  * Selector representing a simple term (literals or bound variables).
1:4ed0060:  * <p>
1:4ed0060:  * Note that we know the term does not include function calls for instance (this is actually enforced by the parser), those
1:4ed0060:  * being dealt with by their own Selector.
1:4ed0060:  */
1:4ed0060: public class TermSelector extends Selector
1:4ed0060: {
1:4ed0060:     private final ByteBuffer value;
1:4ed0060:     private final AbstractType<?> type;
1:4ed0060: 
1:4ed0060:     public static Factory newFactory(final String name, final Term term, final AbstractType<?> type)
1:4ed0060:     {
1:4ed0060:         return new Factory()
1:4ed0060:         {
1:4ed0060:             protected String getColumnName()
1:4ed0060:             {
1:4ed0060:                 return name;
1:4ed0060:             }
1:4ed0060: 
1:4ed0060:             protected AbstractType<?> getReturnType()
1:4ed0060:             {
1:4ed0060:                 return type;
1:4ed0060:             }
1:4ed0060: 
1:4ed0060:             protected void addColumnMapping(SelectionColumnMapping mapping, ColumnSpecification resultColumn)
1:4ed0060:             {
1:4ed0060:                mapping.addMapping(resultColumn, (ColumnDefinition)null);
1:4ed0060:             }
1:4ed0060: 
1:4ed0060:             public Selector newInstance(QueryOptions options)
1:4ed0060:             {
1:4ed0060:                 return new TermSelector(term.bindAndGet(options), type);
1:4ed0060:             }
1:4ed0060:         };
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     private TermSelector(ByteBuffer value, AbstractType<?> type)
1:4ed0060:     {
1:4ed0060:         this.value = value;
1:4ed0060:         this.type = type;
1:4ed0060:     }
1:4ed0060: 
1:e0adc16:     public void addInput(ProtocolVersion protocolVersion, Selection.ResultSetBuilder rs) throws InvalidRequestException
1:4ed0060:     {
1:4ed0060:     }
1:4ed0060: 
1:e0adc16:     public ByteBuffer getOutput(ProtocolVersion protocolVersion) throws InvalidRequestException
1:4ed0060:     {
1:4ed0060:         return value;
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     public AbstractType<?> getType()
1:4ed0060:     {
1:4ed0060:         return type;
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     public void reset()
1:4ed0060:     {
1:4ed0060:     }
1:4ed0060: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public void addInput(ProtocolVersion protocolVersion, Selection.ResultSetBuilder rs) throws InvalidRequestException
1:     public ByteBuffer getOutput(ProtocolVersion protocolVersion) throws InvalidRequestException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.selection;
1: 
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.cql3.AssignmentTestable;
0: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.cql3.ColumnSpecification;
1: import org.apache.cassandra.cql3.QueryOptions;
1: import org.apache.cassandra.cql3.Term;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: /**
1:  * Selector representing a simple term (literals or bound variables).
1:  * <p>
1:  * Note that we know the term does not include function calls for instance (this is actually enforced by the parser), those
1:  * being dealt with by their own Selector.
1:  */
1: public class TermSelector extends Selector
1: {
1:     private final ByteBuffer value;
1:     private final AbstractType<?> type;
1: 
1:     public static Factory newFactory(final String name, final Term term, final AbstractType<?> type)
1:     {
1:         return new Factory()
1:         {
1:             protected String getColumnName()
1:             {
1:                 return name;
1:             }
1: 
1:             protected AbstractType<?> getReturnType()
1:             {
1:                 return type;
1:             }
1: 
1:             protected void addColumnMapping(SelectionColumnMapping mapping, ColumnSpecification resultColumn)
1:             {
1:                mapping.addMapping(resultColumn, (ColumnDefinition)null);
1:             }
1: 
1:             public Selector newInstance(QueryOptions options)
1:             {
1:                 return new TermSelector(term.bindAndGet(options), type);
1:             }
1:         };
1:     }
1: 
1:     private TermSelector(ByteBuffer value, AbstractType<?> type)
1:     {
1:         this.value = value;
1:         this.type = type;
1:     }
1: 
0:     public void addInput(int protocolVersion, Selection.ResultSetBuilder rs) throws InvalidRequestException
1:     {
1:     }
1: 
0:     public ByteBuffer getOutput(int protocolVersion) throws InvalidRequestException
1:     {
1:         return value;
1:     }
1: 
1:     public AbstractType<?> getType()
1:     {
1:         return type;
1:     }
1: 
1:     public void reset()
1:     {
1:     }
1: }
============================================================================