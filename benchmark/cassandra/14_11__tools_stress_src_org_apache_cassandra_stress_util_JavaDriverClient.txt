1:2e1e98a: /**
1:2e1e98a:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e1e98a:  * or more contributor license agreements.  See the NOTICE file
1:2e1e98a:  * distributed with this work for additional information
1:2e1e98a:  * regarding copyright ownership.  The ASF licenses this file
1:2e1e98a:  * to you under the Apache License, Version 2.0 (the
1:2e1e98a:  * "License"); you may not use this file except in compliance
1:2e1e98a:  * with the License.  You may obtain a copy of the License at
1:2e1e98a:  *
1:2e1e98a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e1e98a:  *
1:2e1e98a:  * Unless required by applicable law or agreed to in writing, software
1:2e1e98a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e1e98a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e1e98a:  * See the License for the specific language governing permissions and
1:2e1e98a:  * limitations under the License.
1:2e1e98a:  */
1:2e1e98a: package org.apache.cassandra.stress.util;
2:2e1e98a: 
1:2e1e98a: import java.util.List;
1:7536429: import java.util.concurrent.ConcurrentHashMap;
1:7536429: import java.util.concurrent.ConcurrentMap;
1:2e1e98a: import javax.net.ssl.SSLContext;
1:2e1e98a: 
1:2e1e98a: import com.datastax.driver.core.*;
1:eea042b: import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;
1:ba926ff: import com.datastax.driver.core.policies.LoadBalancingPolicy;
1:eea042b: import com.datastax.driver.core.policies.WhiteListPolicy;
1:cbf304e: import io.netty.util.internal.logging.InternalLoggerFactory;
1:cbf304e: import io.netty.util.internal.logging.Slf4JLoggerFactory;
1:6c579a0: import org.apache.cassandra.config.EncryptionOptions;
1:6c579a0: import org.apache.cassandra.security.SSLFactory;
1:eea042b: import org.apache.cassandra.stress.settings.StressSettings;
1:2e1e98a: 
1:2e1e98a: public class JavaDriverClient
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     static
1:2e1e98a:     {
1:2e1e98a:         InternalLoggerFactory.setDefaultFactory(new Slf4JLoggerFactory());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public final String host;
1:2e1e98a:     public final int port;
1:a78451e:     public final String username;
1:a78451e:     public final String password;
1:a78451e:     public final AuthProvider authProvider;
1:a0076e7:     public final int maxPendingPerConnection;
1:a0076e7:     public final int connectionsPerHost;
1:a78451e: 
1:99ea2ee:     private final ProtocolVersion protocolVersion;
1:2e1e98a:     private final EncryptionOptions.ClientEncryptionOptions encryptionOptions;
1:2e1e98a:     private Cluster cluster;
1:2e1e98a:     private Session session;
1:ba926ff:     private final LoadBalancingPolicy loadBalancingPolicy;
1:2e1e98a: 
1:7536429:     private static final ConcurrentMap<String, PreparedStatement> stmts = new ConcurrentHashMap<>();
1:7536429: 
1:eea042b:     public JavaDriverClient(StressSettings settings, String host, int port)
1:2e1e98a:     {
1:eea042b:         this(settings, host, port, new EncryptionOptions.ClientEncryptionOptions());
1:2e1e98a:     }
1:2e1e98a: 
1:eea042b:     public JavaDriverClient(StressSettings settings, String host, int port, EncryptionOptions.ClientEncryptionOptions encryptionOptions)
1:2e1e98a:     {
1:99ea2ee:         this.protocolVersion = settings.mode.protocolVersion;
1:2e1e98a:         this.host = host;
1:2e1e98a:         this.port = port;
1:a78451e:         this.username = settings.mode.username;
1:a78451e:         this.password = settings.mode.password;
1:a78451e:         this.authProvider = settings.mode.authProvider;
1:2e1e98a:         this.encryptionOptions = encryptionOptions;
1:ba926ff: 
1:ba926ff:         DCAwareRoundRobinPolicy.Builder policyBuilder = DCAwareRoundRobinPolicy.builder();
1:ba926ff:         if (settings.node.datacenter != null)
1:ba926ff:             policyBuilder.withLocalDc(settings.node.datacenter);
1:ba926ff: 
1:eea042b:         if (settings.node.isWhiteList)
1:ba926ff:             loadBalancingPolicy = new WhiteListPolicy(policyBuilder.build(), settings.node.resolveAll(settings.port.nativePort));
1:ba926ff:         else if (settings.node.datacenter != null)
1:ba926ff:             loadBalancingPolicy = policyBuilder.build();
1:eea042b:         else
1:ba926ff:             loadBalancingPolicy = null;
1:ba926ff: 
1:a0076e7:         connectionsPerHost = settings.mode.connectionsPerHost == null ? 8 : settings.mode.connectionsPerHost;
1:a0076e7: 
1:a0076e7:         int maxThreadCount = 0;
1:a0076e7:         if (settings.rate.auto)
1:a0076e7:             maxThreadCount = settings.rate.maxThreads;
1:a0076e7:         else
1:a0076e7:             maxThreadCount = settings.rate.threadCount;
1:a0076e7: 
1:a0076e7:         //Always allow enough pending requests so every thread can have a request pending
1:a0076e7:         //See https://issues.apache.org/jira/browse/CASSANDRA-7217
1:a0076e7:         int requestsPerConnection = (maxThreadCount / connectionsPerHost) + connectionsPerHost;
1:a0076e7: 
1:a0076e7:         maxPendingPerConnection = settings.mode.maxPendingPerConnection == null ? Math.max(128, requestsPerConnection ) : settings.mode.maxPendingPerConnection;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public PreparedStatement prepare(String query)
1:2e1e98a:     {
1:7536429:         PreparedStatement stmt = stmts.get(query);
1:7536429:         if (stmt != null)
1:7536429:             return stmt;
1:7536429:         synchronized (stmts)
1:7536429:         {
1:7536429:             stmt = stmts.get(query);
1:7536429:             if (stmt != null)
1:7536429:                 return stmt;
1:7536429:             stmt = getSession().prepare(query);
1:7536429:             stmts.put(query, stmt);
1:7536429:         }
1:7536429:         return stmt;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public void connect(ProtocolOptions.Compression compression) throws Exception
1:2e1e98a:     {
1:16b9f8b: 
1:16b9f8b:         PoolingOptions poolingOpts = new PoolingOptions()
1:a0076e7:                                      .setConnectionsPerHost(HostDistance.LOCAL, connectionsPerHost, connectionsPerHost)
1:a0076e7:                                      .setMaxRequestsPerConnection(HostDistance.LOCAL, maxPendingPerConnection)
1:16b9f8b:                                      .setNewConnectionThreshold(HostDistance.LOCAL, 100);
1:16b9f8b: 
1:2e1e98a:         Cluster.Builder clusterBuilder = Cluster.builder()
1:0d0acac:                                                 .addContactPoint(host)
1:0d0acac:                                                 .withPort(port)
1:26bd512:                                                 .withPoolingOptions(poolingOpts)
1:16b9f8b:                                                 .withoutJMXReporting()
1:99ea2ee:                                                 .withProtocolVersion(protocolVersion)
1:0d0acac:                                                 .withoutMetrics(); // The driver uses metrics 3 with conflict with our version
1:ba926ff:         if (loadBalancingPolicy != null)
1:ba926ff:             clusterBuilder.withLoadBalancingPolicy(loadBalancingPolicy);
1:2e1e98a:         clusterBuilder.withCompression(compression);
1:2e1e98a:         if (encryptionOptions.enabled)
1:2e1e98a:         {
1:2e1e98a:             SSLContext sslContext;
1:2e1e98a:             sslContext = SSLFactory.createSSLContext(encryptionOptions, true);
1:f340362:             SSLOptions sslOptions = JdkSSLOptions.builder()
1:f340362:                                                  .withSSLContext(sslContext)
1:f340362:                                                  .withCipherSuites(encryptionOptions.cipher_suites).build();
1:2e1e98a:             clusterBuilder.withSSL(sslOptions);
1:2e1e98a:         }
1:a78451e: 
1:a78451e:         if (authProvider != null)
1:a78451e:         {
1:a78451e:             clusterBuilder.withAuthProvider(authProvider);
1:a78451e:         }
1:a78451e:         else if (username != null)
1:a78451e:         {
1:a78451e:             clusterBuilder.withCredentials(username, password);
1:a78451e:         }
1:a78451e: 
1:2e1e98a:         cluster = clusterBuilder.build();
1:2e1e98a:         Metadata metadata = cluster.getMetadata();
1:a0076e7:         System.out.printf(
1:a0076e7:                 "Connected to cluster: %s, max pending requests per connection %d, max connections per host %d%n",
1:a0076e7:                 metadata.getClusterName(),
1:a0076e7:                 maxPendingPerConnection,
1:a0076e7:                 connectionsPerHost);
1:2e1e98a:         for (Host host : metadata.getAllHosts())
1:2e1e98a:         {
1:6609029:             System.out.printf("Datatacenter: %s; Host: %s; Rack: %s%n",
1:2e1e98a:                     host.getDatacenter(), host.getAddress(), host.getRack());
1:2e1e98a:         }
1:2e1e98a: 
1:2e1e98a:         session = cluster.connect();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public Cluster getCluster()
1:2e1e98a:     {
1:2e1e98a:         return cluster;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public Session getSession()
1:2e1e98a:     {
1:2e1e98a:         return session;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public ResultSet execute(String query, org.apache.cassandra.db.ConsistencyLevel consistency)
1:2e1e98a:     {
1:f340362:         SimpleStatement stmt = new SimpleStatement(query);
1:2e1e98a:         stmt.setConsistencyLevel(from(consistency));
1:2e1e98a:         return getSession().execute(stmt);
1:2e1e98a:     }
1:2e1e98a: 
1:3e2c610:     public ResultSet executePrepared(PreparedStatement stmt, List<Object> queryParams, org.apache.cassandra.db.ConsistencyLevel consistency)
1:2e1e98a:     {
1:2e1e98a: 
1:2e1e98a:         stmt.setConsistencyLevel(from(consistency));
1:3e2c610:         BoundStatement bstmt = stmt.bind((Object[]) queryParams.toArray(new Object[queryParams.size()]));
1:2e1e98a:         return getSession().execute(bstmt);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     /**
1:2e1e98a:      * Get ConsistencyLevel from a C* ConsistencyLevel. This exists in the Java Driver ConsistencyLevel,
1:2e1e98a:      * but it is not public.
1:2e1e98a:      *
1:2e1e98a:      * @param cl
1:2e1e98a:      * @return
1:2e1e98a:      */
1:7536429:     public static ConsistencyLevel from(org.apache.cassandra.db.ConsistencyLevel cl)
1:2e1e98a:     {
1:2e1e98a:         switch (cl)
1:2e1e98a:         {
1:2e1e98a:             case ANY:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.ANY;
1:2e1e98a:             case ONE:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.ONE;
1:2e1e98a:             case TWO:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.TWO;
1:2e1e98a:             case THREE:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.THREE;
1:2e1e98a:             case QUORUM:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.QUORUM;
1:2e1e98a:             case ALL:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.ALL;
1:2e1e98a:             case LOCAL_QUORUM:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.LOCAL_QUORUM;
1:2e1e98a:             case EACH_QUORUM:
1:2e1e98a:                 return com.datastax.driver.core.ConsistencyLevel.EACH_QUORUM;
1:93f679e:             case LOCAL_ONE:
1:93f679e:                 return com.datastax.driver.core.ConsistencyLevel.LOCAL_ONE;
1:2e1e98a:         }
1:2e1e98a:         throw new AssertionError();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public void disconnect()
1:2e1e98a:     {
1:0d0acac:         cluster.close();
1:2e1e98a:     }
1:2e1e98a: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:ba926ff
/////////////////////////////////////////////////////////////////////////
1: import com.datastax.driver.core.policies.LoadBalancingPolicy;
/////////////////////////////////////////////////////////////////////////
1:     private final LoadBalancingPolicy loadBalancingPolicy;
/////////////////////////////////////////////////////////////////////////
1: 
1:         DCAwareRoundRobinPolicy.Builder policyBuilder = DCAwareRoundRobinPolicy.builder();
1:         if (settings.node.datacenter != null)
1:             policyBuilder.withLocalDc(settings.node.datacenter);
1: 
1:             loadBalancingPolicy = new WhiteListPolicy(policyBuilder.build(), settings.node.resolveAll(settings.port.nativePort));
1:         else if (settings.node.datacenter != null)
1:             loadBalancingPolicy = policyBuilder.build();
1:             loadBalancingPolicy = null;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (loadBalancingPolicy != null)
1:             clusterBuilder.withLoadBalancingPolicy(loadBalancingPolicy);
author:mck
-------------------------------------------------------------------------------
commit:99ea2ee
/////////////////////////////////////////////////////////////////////////
1:     private final ProtocolVersion protocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         this.protocolVersion = settings.mode.protocolVersion;
/////////////////////////////////////////////////////////////////////////
1:                                                 .withProtocolVersion(protocolVersion)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:f340362
/////////////////////////////////////////////////////////////////////////
0:             whitelist = new WhiteListPolicy(DCAwareRoundRobinPolicy.builder().build(), settings.node.resolveAll(settings.port.nativePort));
/////////////////////////////////////////////////////////////////////////
1:             SSLOptions sslOptions = JdkSSLOptions.builder()
1:                                                  .withSSLContext(sslContext)
1:                                                  .withCipherSuites(encryptionOptions.cipher_suites).build();
/////////////////////////////////////////////////////////////////////////
1:         SimpleStatement stmt = new SimpleStatement(query);
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:363e7bd
author:ZhaoYang
-------------------------------------------------------------------------------
commit:b03ce9f
/////////////////////////////////////////////////////////////////////////
0:                                                 .withProtocolVersion(ProtocolVersion.NEWEST_SUPPORTED)
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:a0076e7
/////////////////////////////////////////////////////////////////////////
1:     public final int maxPendingPerConnection;
1:     public final int connectionsPerHost;
/////////////////////////////////////////////////////////////////////////
1:         connectionsPerHost = settings.mode.connectionsPerHost == null ? 8 : settings.mode.connectionsPerHost;
1: 
1:         int maxThreadCount = 0;
1:         if (settings.rate.auto)
1:             maxThreadCount = settings.rate.maxThreads;
1:         else
1:             maxThreadCount = settings.rate.threadCount;
1: 
1:         //Always allow enough pending requests so every thread can have a request pending
1:         //See https://issues.apache.org/jira/browse/CASSANDRA-7217
1:         int requestsPerConnection = (maxThreadCount / connectionsPerHost) + connectionsPerHost;
1: 
1:         maxPendingPerConnection = settings.mode.maxPendingPerConnection == null ? Math.max(128, requestsPerConnection ) : settings.mode.maxPendingPerConnection;
/////////////////////////////////////////////////////////////////////////
1:                                      .setConnectionsPerHost(HostDistance.LOCAL, connectionsPerHost, connectionsPerHost)
1:                                      .setMaxRequestsPerConnection(HostDistance.LOCAL, maxPendingPerConnection)
/////////////////////////////////////////////////////////////////////////
1:         System.out.printf(
1:                 "Connected to cluster: %s, max pending requests per connection %d, max connections per host %d%n",
1:                 metadata.getClusterName(),
1:                 maxPendingPerConnection,
1:                 connectionsPerHost);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:16b9f8b
/////////////////////////////////////////////////////////////////////////
1: 
1:         PoolingOptions poolingOpts = new PoolingOptions()
0:                                      .setConnectionsPerHost(HostDistance.LOCAL, 8, 8)
0:                                      .setMaxRequestsPerConnection(HostDistance.LOCAL, 128)
1:                                      .setNewConnectionThreshold(HostDistance.LOCAL, 100);
1: 
1:                                                 .withoutJMXReporting()
commit:8b5434f
/////////////////////////////////////////////////////////////////////////
commit:93f679e
/////////////////////////////////////////////////////////////////////////
0:             case SERIAL:
0:                 return com.datastax.driver.core.ConsistencyLevel.SERIAL;
0:             case LOCAL_SERIAL:
0:                 return com.datastax.driver.core.ConsistencyLevel.LOCAL_SERIAL;
1:             case LOCAL_ONE:
1:                 return com.datastax.driver.core.ConsistencyLevel.LOCAL_ONE;
commit:a78451e
/////////////////////////////////////////////////////////////////////////
1:     public final String username;
1:     public final String password;
1:     public final AuthProvider authProvider;
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.username = settings.mode.username;
1:         this.password = settings.mode.password;
1:         this.authProvider = settings.mode.authProvider;
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (authProvider != null)
1:         {
1:             clusterBuilder.withAuthProvider(authProvider);
1:         }
1:         else if (username != null)
1:         {
1:             clusterBuilder.withCredentials(username, password);
1:         }
1: 
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:06c130e
/////////////////////////////////////////////////////////////////////////
0:         SimpleStatement stmt = getSession().newSimpleStatement(query);
author:Andrew Tolbert
-------------------------------------------------------------------------------
commit:26bd512
/////////////////////////////////////////////////////////////////////////
0:         PoolingOptions poolingOpts = new PoolingOptions();
0:         poolingOpts.setCoreConnectionsPerHost(HostDistance.LOCAL, 8);
1:                                                 .withPoolingOptions(poolingOpts)
0:                                                 .withProtocolVersion(ProtocolVersion.V2)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.EncryptionOptions;
1: import org.apache.cassandra.security.SSLFactory;
commit:eea042b
/////////////////////////////////////////////////////////////////////////
1: import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;
1: import com.datastax.driver.core.policies.WhiteListPolicy;
1: import org.apache.cassandra.stress.settings.StressSettings;
/////////////////////////////////////////////////////////////////////////
0:     private final WhiteListPolicy whitelist;
1:     public JavaDriverClient(StressSettings settings, String host, int port)
1:         this(settings, host, port, new EncryptionOptions.ClientEncryptionOptions());
1:     public JavaDriverClient(StressSettings settings, String host, int port, EncryptionOptions.ClientEncryptionOptions encryptionOptions)
1:         if (settings.node.isWhiteList)
0:             whitelist = new WhiteListPolicy(new DCAwareRoundRobinPolicy(), settings.node.resolveAll(settings.port.nativePort));
1:         else
0:             whitelist = null;
/////////////////////////////////////////////////////////////////////////
0:         if (whitelist != null)
0:             clusterBuilder.withLoadBalancingPolicy(whitelist);
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     private static final ConcurrentMap<String, PreparedStatement> stmts = new ConcurrentHashMap<>();
1: 
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement stmt = stmts.get(query);
1:         if (stmt != null)
1:             return stmt;
1:         synchronized (stmts)
1:         {
1:             stmt = stmts.get(query);
1:             if (stmt != null)
1:                 return stmt;
1:             stmt = getSession().prepare(query);
1:             stmts.put(query, stmt);
1:         }
1:         return stmt;
/////////////////////////////////////////////////////////////////////////
1:     public static ConsistencyLevel from(org.apache.cassandra.db.ConsistencyLevel cl)
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.internal.logging.InternalLoggerFactory;
1: import io.netty.util.internal.logging.Slf4JLoggerFactory;
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.stress.util;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.List;
1: import javax.net.ssl.SSLContext;
1: 
1: import com.datastax.driver.core.*;
0: import org.apache.cassandra.config.EncryptionOptions;
0: import org.apache.cassandra.security.SSLFactory;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.jboss.netty.logging.InternalLoggerFactory;
0: import org.jboss.netty.logging.Slf4JLoggerFactory;
1: 
1: public class JavaDriverClient
1: {
1: 
1:     static
1:     {
1:         InternalLoggerFactory.setDefaultFactory(new Slf4JLoggerFactory());
1:     }
1: 
1:     public final String host;
1:     public final int port;
1:     private final EncryptionOptions.ClientEncryptionOptions encryptionOptions;
1:     private Cluster cluster;
1:     private Session session;
1: 
0:     public JavaDriverClient(String host, int port)
1:     {
0:         this(host, port, new EncryptionOptions.ClientEncryptionOptions());
1:     }
1: 
0:     public JavaDriverClient(String host, int port, EncryptionOptions.ClientEncryptionOptions encryptionOptions)
1:     {
1:         this.host = host;
1:         this.port = port;
1:         this.encryptionOptions = encryptionOptions;
1:     }
1: 
1:     public PreparedStatement prepare(String query)
1:     {
0:         return getSession().prepare(query);
1:     }
1: 
1:     public void connect(ProtocolOptions.Compression compression) throws Exception
1:     {
1:         Cluster.Builder clusterBuilder = Cluster.builder()
0:                 .addContactPoint(host).withPort(port);
1:         clusterBuilder.withCompression(compression);
1:         if (encryptionOptions.enabled)
1:         {
1:             SSLContext sslContext;
1:             sslContext = SSLFactory.createSSLContext(encryptionOptions, true);
0:             SSLOptions sslOptions = new SSLOptions(sslContext, encryptionOptions.cipher_suites);
1:             clusterBuilder.withSSL(sslOptions);
1:         }
1:         cluster = clusterBuilder.build();
1:         Metadata metadata = cluster.getMetadata();
0:         System.out.printf("Connected to cluster: %s\n",
0:                 metadata.getClusterName());
1:         for (Host host : metadata.getAllHosts())
1:         {
0:             System.out.printf("Datatacenter: %s; Host: %s; Rack: %s\n",
1:                     host.getDatacenter(), host.getAddress(), host.getRack());
1:         }
1: 
1:         session = cluster.connect();
1:     }
1: 
1:     public Cluster getCluster()
1:     {
1:         return cluster;
1:     }
1: 
1:     public Session getSession()
1:     {
1:         return session;
1:     }
1: 
1:     public ResultSet execute(String query, org.apache.cassandra.db.ConsistencyLevel consistency)
1:     {
0:         SimpleStatement stmt = new SimpleStatement(query);
1:         stmt.setConsistencyLevel(from(consistency));
1:         return getSession().execute(stmt);
1:     }
1: 
0:     public ResultSet executePrepared(PreparedStatement stmt, List<ByteBuffer> queryParams, org.apache.cassandra.db.ConsistencyLevel consistency)
1:     {
1: 
1:         stmt.setConsistencyLevel(from(consistency));
0:         BoundStatement bstmt = stmt.bind(queryParams.toArray(new ByteBuffer[queryParams.size()]));
1:         return getSession().execute(bstmt);
1:     }
1: 
1:     /**
1:      * Get ConsistencyLevel from a C* ConsistencyLevel. This exists in the Java Driver ConsistencyLevel,
1:      * but it is not public.
1:      *
1:      * @param cl
1:      * @return
1:      */
0:     ConsistencyLevel from(org.apache.cassandra.db.ConsistencyLevel cl)
1:     {
1:         switch (cl)
1:         {
1:             case ANY:
1:                 return com.datastax.driver.core.ConsistencyLevel.ANY;
1:             case ONE:
1:                 return com.datastax.driver.core.ConsistencyLevel.ONE;
1:             case TWO:
1:                 return com.datastax.driver.core.ConsistencyLevel.TWO;
1:             case THREE:
1:                 return com.datastax.driver.core.ConsistencyLevel.THREE;
1:             case QUORUM:
1:                 return com.datastax.driver.core.ConsistencyLevel.QUORUM;
1:             case ALL:
1:                 return com.datastax.driver.core.ConsistencyLevel.ALL;
1:             case LOCAL_QUORUM:
1:                 return com.datastax.driver.core.ConsistencyLevel.LOCAL_QUORUM;
1:             case EACH_QUORUM:
1:                 return com.datastax.driver.core.ConsistencyLevel.EACH_QUORUM;
1:         }
1:         throw new AssertionError();
1:     }
1: 
1:     public void disconnect()
1:     {
0:         FBUtilities.waitOnFuture(cluster.shutdown());
1:     }
1: 
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
1:     public ResultSet executePrepared(PreparedStatement stmt, List<Object> queryParams, org.apache.cassandra.db.ConsistencyLevel consistency)
1:         BoundStatement bstmt = stmt.bind((Object[]) queryParams.toArray(new Object[queryParams.size()]));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0d0acac
/////////////////////////////////////////////////////////////////////////
1:                                                 .addContactPoint(host)
1:                                                 .withPort(port)
1:                                                 .withoutMetrics(); // The driver uses metrics 3 with conflict with our version
/////////////////////////////////////////////////////////////////////////
1:         cluster.close();
0: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:af3ad31
/////////////////////////////////////////////////////////////////////////
0:         BoundStatement bstmt = stmt.bind((Object[]) queryParams.toArray(new ByteBuffer[queryParams.size()]));
commit:6609029
/////////////////////////////////////////////////////////////////////////
0:         System.out.printf("Connected to cluster: %s%n",
1:             System.out.printf("Datatacenter: %s; Host: %s; Rack: %s%n",
============================================================================