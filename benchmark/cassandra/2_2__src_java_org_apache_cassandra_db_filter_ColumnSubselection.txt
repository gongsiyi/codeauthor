1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.filter;
3:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.util.Comparator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.TypeSizes;
1:a991b64: import org.apache.cassandra.db.rows.CellPath;
1:a991b64: import org.apache.cassandra.db.marshal.AbstractType;
1:a991b64: import org.apache.cassandra.db.marshal.CollectionType;
1:a991b64: import org.apache.cassandra.db.marshal.UTF8Type;
1:2457599: import org.apache.cassandra.io.util.DataInputPlus;
1:a991b64: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: import org.apache.cassandra.utils.ByteBufferUtil;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Handles the selection of a subpart of a column.
1:a991b64:  * <p>
1:a991b64:  * This only make sense for complex column. For those, this allow for instance
1:a991b64:  * to select only a slice of a map.
1:a991b64:  */
1:2457599: public abstract class ColumnSubselection implements Comparable<ColumnSubselection>
3:a991b64: {
1:a991b64:     public static final Serializer serializer = new Serializer();
1:a991b64: 
1:a991b64:     private enum Kind { SLICE, ELEMENT }
1:a991b64: 
1:a991b64:     protected final ColumnDefinition column;
1:a991b64: 
1:a991b64:     protected ColumnSubselection(ColumnDefinition column)
1:a991b64:     {
1:a991b64:         this.column = column;
3:a991b64:     }
1:a991b64: 
1:a991b64:     public static ColumnSubselection slice(ColumnDefinition column, CellPath from, CellPath to)
1:a991b64:     {
1:a991b64:         assert column.isComplex() && column.type instanceof CollectionType;
1:a991b64:         assert from.size() <= 1 && to.size() <= 1;
1:a991b64:         return new Slice(column, from, to);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static ColumnSubselection element(ColumnDefinition column, CellPath elt)
1:a991b64:     {
1:a991b64:         assert column.isComplex() && column.type instanceof CollectionType;
1:a991b64:         assert elt.size() == 1;
1:a991b64:         return new Element(column, elt);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public ColumnDefinition column()
1:a991b64:     {
1:a991b64:         return column;
1:a991b64:     }
1:a991b64: 
1:a991b64:     protected abstract Kind kind();
1:a991b64: 
1:2457599:     protected abstract CellPath comparisonPath();
1:2457599: 
1:2457599:     public int compareTo(ColumnSubselection other)
1:2457599:     {
1:2457599:         assert other.column().name.equals(column().name);
1:2457599:         return column().cellPathComparator().compare(comparisonPath(), other.comparisonPath());
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * Given a path, return -1 if the path is before anything selected by this subselection, 0 if it is selected by this
1:2457599:      * subselection and 1 if the path is after anything selected by this subselection.
1:2457599:      */
1:2457599:     public abstract int compareInclusionOf(CellPath path);
1:a991b64: 
1:a991b64:     private static class Slice extends ColumnSubselection
1:a991b64:     {
1:a991b64:         private final CellPath from;
1:a991b64:         private final CellPath to;
1:a991b64: 
1:a991b64:         private Slice(ColumnDefinition column, CellPath from, CellPath to)
1:a991b64:         {
1:a991b64:             super(column);
1:a991b64:             this.from = from;
1:a991b64:             this.to = to;
1:a991b64:         }
1:a991b64: 
1:a991b64:         protected Kind kind()
1:a991b64:         {
1:a991b64:             return Kind.SLICE;
1:a991b64:         }
1:a991b64: 
1:2457599:         public CellPath comparisonPath()
1:a991b64:         {
1:a991b64:             return from;
1:a991b64:         }
1:a991b64: 
1:2457599:         public int compareInclusionOf(CellPath path)
1:a991b64:         {
2:a991b64:             Comparator<CellPath> cmp = column.cellPathComparator();
1:2457599:             if (cmp.compare(path, from) < 0)
1:2457599:                 return -1;
1:2457599:             else if (cmp.compare(to, path) < 0)
1:2457599:                 return 1;
1:2457599:             else
1:2457599:                 return 0;
1:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
1:a991b64:         public String toString()
1:a991b64:         {
1:a991b64:             // This assert we're dealing with a collection since that's the only thing it's used for so far.
1:a991b64:             AbstractType<?> type = ((CollectionType<?>)column().type).nameComparator();
1:a991b64:             return String.format("[%s:%s]", from == CellPath.BOTTOM ? "" : type.getString(from.get(0)), to == CellPath.TOP ? "" : type.getString(to.get(0)));
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     private static class Element extends ColumnSubselection
1:a991b64:     {
1:a991b64:         private final CellPath element;
1:a991b64: 
1:a991b64:         private Element(ColumnDefinition column, CellPath elt)
1:a991b64:         {
1:a991b64:             super(column);
1:a991b64:             this.element = elt;
1:a991b64:         }
1:a991b64: 
1:a991b64:         protected Kind kind()
1:a991b64:         {
1:a991b64:             return Kind.ELEMENT;
1:a991b64:         }
1:a991b64: 
1:2457599:         public CellPath comparisonPath()
1:a991b64:         {
2:a991b64:             return element;
1:a991b64:         }
1:a991b64: 
1:2457599:         public int compareInclusionOf(CellPath path)
1:a991b64:         {
1:2457599:             return column.cellPathComparator().compare(path, element);
1:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
1:a991b64:         public String toString()
1:a991b64:         {
1:a991b64:             // This assert we're dealing with a collection since that's the only thing it's used for so far.
1:a991b64:             AbstractType<?> type = ((CollectionType<?>)column().type).nameComparator();
1:a991b64:             return String.format("[%s]", type.getString(element.get(0)));
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static class Serializer
1:a991b64:     {
1:a991b64:         public void serialize(ColumnSubselection subSel, DataOutputPlus out, int version) throws IOException
1:a991b64:         {
1:a991b64:             ColumnDefinition column = subSel.column();
1:a991b64:             ByteBufferUtil.writeWithShortLength(column.name.bytes, out);
1:a991b64:             out.writeByte(subSel.kind().ordinal());
1:a991b64:             switch (subSel.kind())
1:a991b64:             {
1:a991b64:                 case SLICE:
1:a991b64:                     Slice slice = (Slice)subSel;
1:a991b64:                     column.cellPathSerializer().serialize(slice.from, out);
1:a991b64:                     column.cellPathSerializer().serialize(slice.to, out);
1:a991b64:                     break;
1:a991b64:                 case ELEMENT:
1:a991b64:                     Element eltSelection = (Element)subSel;
1:a991b64:                     column.cellPathSerializer().serialize(eltSelection.element, out);
1:a991b64:                     break;
1:df65a6c:                 default:
1:df65a6c:                     throw new AssertionError();
1:a991b64:             }
1:a991b64:         }
1:a991b64: 
1:2457599:         public ColumnSubselection deserialize(DataInputPlus in, int version, CFMetaData metadata) throws IOException
1:a991b64:         {
1:a991b64:             ByteBuffer name = ByteBufferUtil.readWithShortLength(in);
1:a991b64:             ColumnDefinition column = metadata.getColumnDefinition(name);
1:a991b64:             if (column == null)
1:a991b64:             {
1:a991b64:                 // If we don't find the definition, it could be we have data for a dropped column, and we shouldn't
1:a991b64:                 // fail deserialization because of that. So we grab a "fake" ColumnDefinition that ensure proper
1:a991b64:                 // deserialization. The column will be ignore later on anyway.
1:a991b64:                 column = metadata.getDroppedColumnDefinition(name);
1:a991b64:                 if (column == null)
1:a991b64:                     throw new RuntimeException("Unknown column " + UTF8Type.instance.getString(name) + " during deserialization");
1:a991b64:             }
1:a991b64: 
1:a991b64:             Kind kind = Kind.values()[in.readUnsignedByte()];
1:a991b64:             switch (kind)
1:a991b64:             {
1:a991b64:                 case SLICE:
1:a991b64:                     CellPath from = column.cellPathSerializer().deserialize(in);
1:a991b64:                     CellPath to = column.cellPathSerializer().deserialize(in);
1:a991b64:                     return new Slice(column, from, to);
1:a991b64:                 case ELEMENT:
1:a991b64:                     CellPath elt = column.cellPathSerializer().deserialize(in);
1:a991b64:                     return new Element(column, elt);
1:a991b64:             }
2:a991b64:             throw new AssertionError();
1:a991b64:         }
1:a991b64: 
1:03f72ac:         public long serializedSize(ColumnSubselection subSel, int version)
1:a991b64:         {
1:a991b64:             long size = 0;
1:a991b64: 
1:a991b64:             ColumnDefinition column = subSel.column();
1:03f72ac:             size += TypeSizes.sizeofWithShortLength(column.name.bytes);
1:a991b64:             size += 1; // kind
1:a991b64:             switch (subSel.kind())
1:a991b64:             {
1:a991b64:                 case SLICE:
1:a991b64:                     Slice slice = (Slice)subSel;
1:03f72ac:                     size += column.cellPathSerializer().serializedSize(slice.from);
1:03f72ac:                     size += column.cellPathSerializer().serializedSize(slice.to);
1:a991b64:                     break;
1:a991b64:                 case ELEMENT:
1:a991b64:                     Element element = (Element)subSel;
1:03f72ac:                     size += column.cellPathSerializer().serializedSize(element.element);
1:a991b64:                     break;
1:a991b64:             }
1:a991b64:             return size;
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:df65a6c
/////////////////////////////////////////////////////////////////////////
1:                 default:
1:                     throw new AssertionError();
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1: public abstract class ColumnSubselection implements Comparable<ColumnSubselection>
/////////////////////////////////////////////////////////////////////////
1:     protected abstract CellPath comparisonPath();
1: 
1:     public int compareTo(ColumnSubselection other)
1:     {
1:         assert other.column().name.equals(column().name);
1:         return column().cellPathComparator().compare(comparisonPath(), other.comparisonPath());
1:     }
1: 
1:     /**
1:      * Given a path, return -1 if the path is before anything selected by this subselection, 0 if it is selected by this
1:      * subselection and 1 if the path is after anything selected by this subselection.
1:      */
1:     public abstract int compareInclusionOf(CellPath path);
/////////////////////////////////////////////////////////////////////////
1:         public CellPath comparisonPath()
1:         public int compareInclusionOf(CellPath path)
1:             if (cmp.compare(path, from) < 0)
1:                 return -1;
1:             else if (cmp.compare(to, path) < 0)
1:                 return 1;
1:             else
1:                 return 0;
/////////////////////////////////////////////////////////////////////////
1:         public CellPath comparisonPath()
1:         public int compareInclusionOf(CellPath path)
1:             return column.cellPathComparator().compare(path, element);
/////////////////////////////////////////////////////////////////////////
1:         public ColumnSubselection deserialize(DataInputPlus in, int version, CFMetaData metadata) throws IOException
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.filter;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Comparator;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.db.rows.CellPath;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.CollectionType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * Handles the selection of a subpart of a column.
1:  * <p>
1:  * This only make sense for complex column. For those, this allow for instance
1:  * to select only a slice of a map.
1:  */
0: public abstract class ColumnSubselection
1: {
1:     public static final Serializer serializer = new Serializer();
1: 
1:     private enum Kind { SLICE, ELEMENT }
1: 
1:     protected final ColumnDefinition column;
1: 
1:     protected ColumnSubselection(ColumnDefinition column)
1:     {
1:         this.column = column;
1:     }
1: 
1:     public static ColumnSubselection slice(ColumnDefinition column, CellPath from, CellPath to)
1:     {
1:         assert column.isComplex() && column.type instanceof CollectionType;
1:         assert from.size() <= 1 && to.size() <= 1;
1:         return new Slice(column, from, to);
1:     }
1: 
1:     public static ColumnSubselection element(ColumnDefinition column, CellPath elt)
1:     {
1:         assert column.isComplex() && column.type instanceof CollectionType;
1:         assert elt.size() == 1;
1:         return new Element(column, elt);
1:     }
1: 
1:     public ColumnDefinition column()
1:     {
1:         return column;
1:     }
1: 
1:     protected abstract Kind kind();
1: 
0:     public abstract CellPath minIncludedPath();
0:     public abstract CellPath maxIncludedPath();
0:     public abstract boolean includes(CellPath path);
1: 
1:     private static class Slice extends ColumnSubselection
1:     {
1:         private final CellPath from;
1:         private final CellPath to;
1: 
1:         private Slice(ColumnDefinition column, CellPath from, CellPath to)
1:         {
1:             super(column);
1:             this.from = from;
1:             this.to = to;
1:         }
1: 
1:         protected Kind kind()
1:         {
1:             return Kind.SLICE;
1:         }
1: 
0:         public CellPath minIncludedPath()
1:         {
1:             return from;
1:         }
1: 
0:         public CellPath maxIncludedPath()
1:         {
0:             return to;
1:         }
1: 
0:         public boolean includes(CellPath path)
1:         {
1:             Comparator<CellPath> cmp = column.cellPathComparator();
0:             return cmp.compare(from, path) <= 0 && cmp.compare(path, to) <= 0;
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
1:             // This assert we're dealing with a collection since that's the only thing it's used for so far.
1:             AbstractType<?> type = ((CollectionType<?>)column().type).nameComparator();
1:             return String.format("[%s:%s]", from == CellPath.BOTTOM ? "" : type.getString(from.get(0)), to == CellPath.TOP ? "" : type.getString(to.get(0)));
1:         }
1:     }
1: 
1:     private static class Element extends ColumnSubselection
1:     {
1:         private final CellPath element;
1: 
1:         private Element(ColumnDefinition column, CellPath elt)
1:         {
1:             super(column);
1:             this.element = elt;
1:         }
1: 
1:         protected Kind kind()
1:         {
1:             return Kind.ELEMENT;
1:         }
1: 
0:         public CellPath minIncludedPath()
1:         {
1:             return element;
1:         }
1: 
0:         public CellPath maxIncludedPath()
1:         {
1:             return element;
1:         }
1: 
0:         public boolean includes(CellPath path)
1:         {
1:             Comparator<CellPath> cmp = column.cellPathComparator();
0:             return cmp.compare(element, path) == 0;
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
1:             // This assert we're dealing with a collection since that's the only thing it's used for so far.
1:             AbstractType<?> type = ((CollectionType<?>)column().type).nameComparator();
1:             return String.format("[%s]", type.getString(element.get(0)));
1:         }
1:     }
1: 
1:     public static class Serializer
1:     {
1:         public void serialize(ColumnSubselection subSel, DataOutputPlus out, int version) throws IOException
1:         {
1:             ColumnDefinition column = subSel.column();
1:             ByteBufferUtil.writeWithShortLength(column.name.bytes, out);
1:             out.writeByte(subSel.kind().ordinal());
1:             switch (subSel.kind())
1:             {
1:                 case SLICE:
1:                     Slice slice = (Slice)subSel;
1:                     column.cellPathSerializer().serialize(slice.from, out);
1:                     column.cellPathSerializer().serialize(slice.to, out);
1:                     break;
1:                 case ELEMENT:
1:                     Element eltSelection = (Element)subSel;
1:                     column.cellPathSerializer().serialize(eltSelection.element, out);
1:                     break;
1:             }
1:             throw new AssertionError();
1:         }
1: 
0:         public ColumnSubselection deserialize(DataInput in, int version, CFMetaData metadata) throws IOException
1:         {
1:             ByteBuffer name = ByteBufferUtil.readWithShortLength(in);
1:             ColumnDefinition column = metadata.getColumnDefinition(name);
1:             if (column == null)
1:             {
1:                 // If we don't find the definition, it could be we have data for a dropped column, and we shouldn't
1:                 // fail deserialization because of that. So we grab a "fake" ColumnDefinition that ensure proper
1:                 // deserialization. The column will be ignore later on anyway.
1:                 column = metadata.getDroppedColumnDefinition(name);
1:                 if (column == null)
1:                     throw new RuntimeException("Unknown column " + UTF8Type.instance.getString(name) + " during deserialization");
1:             }
1: 
1:             Kind kind = Kind.values()[in.readUnsignedByte()];
1:             switch (kind)
1:             {
1:                 case SLICE:
1:                     CellPath from = column.cellPathSerializer().deserialize(in);
1:                     CellPath to = column.cellPathSerializer().deserialize(in);
1:                     return new Slice(column, from, to);
1:                 case ELEMENT:
1:                     CellPath elt = column.cellPathSerializer().deserialize(in);
1:                     return new Element(column, elt);
1:             }
1:             throw new AssertionError();
1:         }
1: 
0:         public long serializedSize(ColumnSubselection subSel, int version, TypeSizes sizes)
1:         {
1:             long size = 0;
1: 
1:             ColumnDefinition column = subSel.column();
0:             size += sizes.sizeofWithShortLength(column.name.bytes);
1:             size += 1; // kind
1:             switch (subSel.kind())
1:             {
1:                 case SLICE:
1:                     Slice slice = (Slice)subSel;
0:                     size += column.cellPathSerializer().serializedSize(slice.from, sizes);
0:                     size += column.cellPathSerializer().serializedSize(slice.to, sizes);
1:                     break;
1:                 case ELEMENT:
1:                     Element element = (Element)subSel;
0:                     size += column.cellPathSerializer().serializedSize(element.element, sizes);
1:                     break;
1:             }
1:             return size;
1:         }
1:     }
1: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(ColumnSubselection subSel, int version)
1:             size += TypeSizes.sizeofWithShortLength(column.name.bytes);
1:                     size += column.cellPathSerializer().serializedSize(slice.from);
1:                     size += column.cellPathSerializer().serializedSize(slice.to);
1:                     size += column.cellPathSerializer().serializedSize(element.element);
============================================================================