1:7751588: /*
1:7751588:  * Licensed to the Apache Software Foundation (ASF) under one
1:7751588:  * or more contributor license agreements.  See the NOTICE file
1:7751588:  * distributed with this work for additional information
1:7751588:  * regarding copyright ownership.  The ASF licenses this file
1:7751588:  * to you under the Apache License, Version 2.0 (the
1:7751588:  * "License"); you may not use this file except in compliance
1:7751588:  * with the License.  You may obtain a copy of the License at
1:7751588:  *
1:7751588:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7751588:  *
1:7751588:  * Unless required by applicable law or agreed to in writing, software
1:7751588:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7751588:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7751588:  * See the License for the specific language governing permissions and
1:7751588:  * limitations under the License.
1:7751588:  */
1:7751588: package org.apache.cassandra.net;
1:7751588: 
1:7751588: import java.net.InetAddress;
1:7751588: import java.util.Collections;
1:7751588: import java.util.HashSet;
1:7751588: import java.util.Queue;
1:7751588: import java.util.Set;
1:7751588: import java.util.concurrent.BlockingQueue;
1:7751588: import java.util.concurrent.atomic.AtomicInteger;
1:7751588: import java.util.function.BiFunction;
1:7751588: import java.util.function.Function;
1:7751588: 
1:7751588: /**
1:7751588:  * Sends a response for an incoming message with a matching {@link Matcher}.
1:7751588:  * The actual behavior by any instance of this class can be inspected by
1:7751588:  * interacting with the returned {@link MockMessagingSpy}.
1:7751588:  */
1:7751588: public class MatcherResponse
1:7751588: {
1:7751588:     private final Matcher<?> matcher;
1:7751588:     private final Set<Integer> sendResponses = new HashSet<>();
1:7751588:     private final MockMessagingSpy spy = new MockMessagingSpy();
1:7751588:     private final AtomicInteger limitCounter = new AtomicInteger(Integer.MAX_VALUE);
1:7751588:     private IMessageSink sink;
1:7751588: 
1:7751588:     MatcherResponse(Matcher<?> matcher)
1:7751588:     {
1:7751588:         this.matcher = matcher;
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Do not create any responses for intercepted outbound messages.
1:7751588:      */
1:7751588:     public MockMessagingSpy dontReply()
1:7751588:     {
1:7751588:         return respond((MessageIn<?>)null);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Respond with provided message in reply to each intercepted outbound message.
1:7751588:      * @param message   the message to use as mock reply from the cluster
1:7751588:      */
1:7751588:     public MockMessagingSpy respond(MessageIn<?> message)
1:7751588:     {
1:7751588:         return respondN(message, Integer.MAX_VALUE);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Respond a limited number of times with the provided message in reply to each intercepted outbound message.
1:7751588:      * @param response  the message to use as mock reply from the cluster
1:7751588:      * @param limit     number of times to respond with message
1:7751588:      */
1:7751588:     public MockMessagingSpy respondN(final MessageIn<?> response, int limit)
1:7751588:     {
1:7751588:         return respondN((in, to) -> response, limit);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Respond with the message created by the provided function that will be called with each intercepted outbound message.
1:7751588:      * @param fnResponse    function to call for creating reply based on intercepted message and target address
1:7751588:      */
1:7751588:     public <T, S> MockMessagingSpy respond(BiFunction<MessageOut<T>, InetAddress, MessageIn<S>> fnResponse)
1:7751588:     {
1:7751588:         return respondN(fnResponse, Integer.MAX_VALUE);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Respond with message wrapping the payload object created by provided function called for each intercepted outbound message.
1:7751588:      * The target address from the intercepted message will automatically be used as the created message's sender address.
1:7751588:      * @param fnResponse    function to call for creating payload object based on intercepted message and target address
1:7751588:      * @param verb          verb to use for reply message
1:7751588:      */
1:7751588:     public <T, S> MockMessagingSpy respondWithPayloadForEachReceiver(Function<MessageOut<T>, S> fnResponse, MessagingService.Verb verb)
1:7751588:     {
1:7751588:         return respondNWithPayloadForEachReceiver(fnResponse, verb, Integer.MAX_VALUE);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Respond a limited number of times with message wrapping the payload object created by provided function called for
1:7751588:      * each intercepted outbound message. The target address from the intercepted message will automatically be used as the
1:7751588:      * created message's sender address.
1:7751588:      * @param fnResponse    function to call for creating payload object based on intercepted message and target address
1:7751588:      * @param verb          verb to use for reply message
1:7751588:      */
1:7751588:     public <T, S> MockMessagingSpy respondNWithPayloadForEachReceiver(Function<MessageOut<T>, S> fnResponse, MessagingService.Verb verb, int limit)
1:7751588:     {
1:7751588:         return respondN((MessageOut<T> msg, InetAddress to) -> {
1:7751588:                     S payload = fnResponse.apply(msg);
1:7751588:                     if (payload == null)
1:7751588:                         return null;
1:7751588:                     else
1:9d9a1a1:                         return MessageIn.create(to, payload, Collections.emptyMap(), verb, MessagingService.current_version);
1:7751588:                 },
1:7751588:                 limit);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Responds to each intercepted outbound message by creating a response message wrapping the next element consumed
1:7751588:      * from the provided queue. No reply will be send when the queue has been exhausted.
1:7751588:      * @param cannedResponses   prepared payload messages to use for responses
1:7751588:      * @param verb              verb to use for reply message
1:7751588:      */
1:7751588:     public <T, S> MockMessagingSpy respondWithPayloadForEachReceiver(Queue<S> cannedResponses, MessagingService.Verb verb)
1:7751588:     {
1:7751588:         return respondWithPayloadForEachReceiver((MessageOut<T> msg) -> cannedResponses.poll(), verb);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Responds to each intercepted outbound message by creating a response message wrapping the next element consumed
1:7751588:      * from the provided queue. This method will block until queue elements are available.
1:7751588:      * @param cannedResponses   prepared payload messages to use for responses
1:7751588:      * @param verb              verb to use for reply message
1:7751588:      */
1:7751588:     public <T, S> MockMessagingSpy respondWithPayloadForEachReceiver(BlockingQueue<S> cannedResponses, MessagingService.Verb verb)
1:7751588:     {
1:7751588:         return respondWithPayloadForEachReceiver((MessageOut<T> msg) -> {
1:7751588:             try
1:7751588:             {
1:7751588:                 return cannedResponses.take();
1:7751588:             }
1:7751588:             catch (InterruptedException e)
1:7751588:             {
1:7751588:                 return null;
1:7751588:             }
1:7751588:         }, verb);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Respond a limited number of times with the message created by the provided function that will be called with
1:7751588:      * each intercepted outbound message.
1:7751588:      * @param fnResponse    function to call for creating reply based on intercepted message and target address
1:7751588:      */
1:7751588:     public <T, S> MockMessagingSpy respondN(BiFunction<MessageOut<T>, InetAddress, MessageIn<S>> fnResponse, int limit)
1:7751588:     {
1:7751588:         limitCounter.set(limit);
1:7751588: 
1:7751588:         assert sink == null: "destroy() must be called first to register new response";
1:7751588: 
1:7751588:         sink = new IMessageSink()
1:7751588:         {
1:7751588:             public boolean allowOutgoingMessage(MessageOut message, int id, InetAddress to)
1:7751588:             {
1:7751588:                 // prevent outgoing message from being send in case matcher indicates a match
1:7751588:                 // and instead send the mocked response
1:7751588:                 if (matcher.matches(message, to))
1:7751588:                 {
1:7751588:                     spy.matchingMessage(message);
1:7751588: 
1:7751588:                     if (limitCounter.decrementAndGet() < 0)
1:7751588:                         return false;
1:7751588: 
1:7751588:                     synchronized (sendResponses)
1:7751588:                     {
1:7751588:                         // I'm not sure about retry semantics regarding message/ID relationships, but I assume
1:7751588:                         // sending a message multiple times using the same ID shouldn't happen..
1:7751588:                         assert !sendResponses.contains(id) : "ID re-use for outgoing message";
1:7751588:                         sendResponses.add(id);
1:7751588:                     }
1:7751588:                     MessageIn<?> response = fnResponse.apply(message, to);
1:7751588:                     if (response != null)
1:7751588:                     {
1:7751588:                         CallbackInfo cb = MessagingService.instance().getRegisteredCallback(id);
1:7751588:                         if (cb != null)
1:7751588:                             cb.callback.response(response);
1:7751588:                         else
1:7751588:                             MessagingService.instance().receive(response, id);
1:7751588:                         spy.matchingResponse(response);
1:7751588:                     }
1:7751588:                     return false;
1:7751588:                 }
1:7751588:                 return true;
1:7751588:             }
1:7751588: 
1:7751588:             public boolean allowIncomingMessage(MessageIn message, int id)
1:7751588:             {
1:7751588:                 return true;
1:7751588:             }
1:7751588:         };
1:7751588:         MessagingService.instance().addMessageSink(sink);
1:7751588: 
1:7751588:         return spy;
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Stops currently registered response from being send.
1:7751588:      */
1:7751588:     public void destroy()
1:7751588:     {
1:7751588:         MessagingService.instance().removeMessageSink(sink);
1:7751588:     }
1:7751588: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9d9a1a1
/////////////////////////////////////////////////////////////////////////
1:                         return MessageIn.create(to, payload, Collections.emptyMap(), verb, MessagingService.current_version);
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:7751588
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.net;
1: 
1: import java.net.InetAddress;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Queue;
1: import java.util.Set;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import java.util.function.BiFunction;
1: import java.util.function.Function;
1: 
1: /**
1:  * Sends a response for an incoming message with a matching {@link Matcher}.
1:  * The actual behavior by any instance of this class can be inspected by
1:  * interacting with the returned {@link MockMessagingSpy}.
1:  */
1: public class MatcherResponse
1: {
1:     private final Matcher<?> matcher;
1:     private final Set<Integer> sendResponses = new HashSet<>();
1:     private final MockMessagingSpy spy = new MockMessagingSpy();
1:     private final AtomicInteger limitCounter = new AtomicInteger(Integer.MAX_VALUE);
1:     private IMessageSink sink;
1: 
1:     MatcherResponse(Matcher<?> matcher)
1:     {
1:         this.matcher = matcher;
1:     }
1: 
1:     /**
1:      * Do not create any responses for intercepted outbound messages.
1:      */
1:     public MockMessagingSpy dontReply()
1:     {
1:         return respond((MessageIn<?>)null);
1:     }
1: 
1:     /**
1:      * Respond with provided message in reply to each intercepted outbound message.
1:      * @param message   the message to use as mock reply from the cluster
1:      */
1:     public MockMessagingSpy respond(MessageIn<?> message)
1:     {
1:         return respondN(message, Integer.MAX_VALUE);
1:     }
1: 
1:     /**
1:      * Respond a limited number of times with the provided message in reply to each intercepted outbound message.
1:      * @param response  the message to use as mock reply from the cluster
1:      * @param limit     number of times to respond with message
1:      */
1:     public MockMessagingSpy respondN(final MessageIn<?> response, int limit)
1:     {
1:         return respondN((in, to) -> response, limit);
1:     }
1: 
1:     /**
1:      * Respond with the message created by the provided function that will be called with each intercepted outbound message.
1:      * @param fnResponse    function to call for creating reply based on intercepted message and target address
1:      */
1:     public <T, S> MockMessagingSpy respond(BiFunction<MessageOut<T>, InetAddress, MessageIn<S>> fnResponse)
1:     {
1:         return respondN(fnResponse, Integer.MAX_VALUE);
1:     }
1: 
1:     /**
1:      * Respond with message wrapping the payload object created by provided function called for each intercepted outbound message.
1:      * The target address from the intercepted message will automatically be used as the created message's sender address.
1:      * @param fnResponse    function to call for creating payload object based on intercepted message and target address
1:      * @param verb          verb to use for reply message
1:      */
1:     public <T, S> MockMessagingSpy respondWithPayloadForEachReceiver(Function<MessageOut<T>, S> fnResponse, MessagingService.Verb verb)
1:     {
1:         return respondNWithPayloadForEachReceiver(fnResponse, verb, Integer.MAX_VALUE);
1:     }
1: 
1:     /**
1:      * Respond a limited number of times with message wrapping the payload object created by provided function called for
1:      * each intercepted outbound message. The target address from the intercepted message will automatically be used as the
1:      * created message's sender address.
1:      * @param fnResponse    function to call for creating payload object based on intercepted message and target address
1:      * @param verb          verb to use for reply message
1:      */
1:     public <T, S> MockMessagingSpy respondNWithPayloadForEachReceiver(Function<MessageOut<T>, S> fnResponse, MessagingService.Verb verb, int limit)
1:     {
1:         return respondN((MessageOut<T> msg, InetAddress to) -> {
1:                     S payload = fnResponse.apply(msg);
1:                     if (payload == null)
1:                         return null;
1:                     else
0:                         return MessageIn.create(to, payload, Collections.emptyMap(), verb, MessagingService.current_version, MessageIn.createTimestamp());
1:                 },
1:                 limit);
1:     }
1: 
1:     /**
1:      * Responds to each intercepted outbound message by creating a response message wrapping the next element consumed
1:      * from the provided queue. No reply will be send when the queue has been exhausted.
1:      * @param cannedResponses   prepared payload messages to use for responses
1:      * @param verb              verb to use for reply message
1:      */
1:     public <T, S> MockMessagingSpy respondWithPayloadForEachReceiver(Queue<S> cannedResponses, MessagingService.Verb verb)
1:     {
1:         return respondWithPayloadForEachReceiver((MessageOut<T> msg) -> cannedResponses.poll(), verb);
1:     }
1: 
1:     /**
1:      * Responds to each intercepted outbound message by creating a response message wrapping the next element consumed
1:      * from the provided queue. This method will block until queue elements are available.
1:      * @param cannedResponses   prepared payload messages to use for responses
1:      * @param verb              verb to use for reply message
1:      */
1:     public <T, S> MockMessagingSpy respondWithPayloadForEachReceiver(BlockingQueue<S> cannedResponses, MessagingService.Verb verb)
1:     {
1:         return respondWithPayloadForEachReceiver((MessageOut<T> msg) -> {
1:             try
1:             {
1:                 return cannedResponses.take();
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 return null;
1:             }
1:         }, verb);
1:     }
1: 
1:     /**
1:      * Respond a limited number of times with the message created by the provided function that will be called with
1:      * each intercepted outbound message.
1:      * @param fnResponse    function to call for creating reply based on intercepted message and target address
1:      */
1:     public <T, S> MockMessagingSpy respondN(BiFunction<MessageOut<T>, InetAddress, MessageIn<S>> fnResponse, int limit)
1:     {
1:         limitCounter.set(limit);
1: 
1:         assert sink == null: "destroy() must be called first to register new response";
1: 
1:         sink = new IMessageSink()
1:         {
1:             public boolean allowOutgoingMessage(MessageOut message, int id, InetAddress to)
1:             {
1:                 // prevent outgoing message from being send in case matcher indicates a match
1:                 // and instead send the mocked response
1:                 if (matcher.matches(message, to))
1:                 {
1:                     spy.matchingMessage(message);
1: 
1:                     if (limitCounter.decrementAndGet() < 0)
1:                         return false;
1: 
1:                     synchronized (sendResponses)
1:                     {
1:                         // I'm not sure about retry semantics regarding message/ID relationships, but I assume
1:                         // sending a message multiple times using the same ID shouldn't happen..
1:                         assert !sendResponses.contains(id) : "ID re-use for outgoing message";
1:                         sendResponses.add(id);
1:                     }
1:                     MessageIn<?> response = fnResponse.apply(message, to);
1:                     if (response != null)
1:                     {
1:                         CallbackInfo cb = MessagingService.instance().getRegisteredCallback(id);
1:                         if (cb != null)
1:                             cb.callback.response(response);
1:                         else
1:                             MessagingService.instance().receive(response, id);
1:                         spy.matchingResponse(response);
1:                     }
1:                     return false;
1:                 }
1:                 return true;
1:             }
1: 
1:             public boolean allowIncomingMessage(MessageIn message, int id)
1:             {
1:                 return true;
1:             }
1:         };
1:         MessagingService.instance().addMessageSink(sink);
1: 
1:         return spy;
1:     }
1: 
1:     /**
1:      * Stops currently registered response from being send.
1:      */
1:     public void destroy()
1:     {
1:         MessagingService.instance().removeMessageSink(sink);
1:     }
1: }
============================================================================