1:3047ab6: /*
1:3047ab6:  * Licensed to the Apache Software Foundation (ASF) under one
1:3047ab6:  * or more contributor license agreements.  See the NOTICE file
1:3047ab6:  * distributed with this work for additional information
1:3047ab6:  * regarding copyright ownership.  The ASF licenses this file
1:3047ab6:  * to you under the Apache License, Version 2.0 (the
1:3047ab6:  * "License"); you may not use this file except in compliance
1:3047ab6:  * with the License.  You may obtain a copy of the License at
1:3047ab6:  *
1:3047ab6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3047ab6:  *
1:3047ab6:  * Unless required by applicable law or agreed to in writing, software
1:3047ab6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3047ab6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3047ab6:  * See the License for the specific language governing permissions and
1:3047ab6:  * limitations under the License.
1:3047ab6:  */
1:3047ab6: package org.apache.cassandra.locator;
7:3047ab6: 
1:2f32783: import java.io.DataInputStream;
1:3047ab6: import java.io.BufferedInputStream;
1:3047ab6: import java.io.BufferedReader;
1:3047ab6: import java.io.FileReader;
1:3047ab6: import java.io.IOException;
1:3047ab6: import java.io.File;
1:3047ab6: import java.net.HttpURLConnection;
1:3047ab6: import java.net.InetAddress;
1:3047ab6: import java.net.URL;
1:3047ab6: import java.net.URI;
1:3047ab6: import java.nio.charset.StandardCharsets;
1:3047ab6: import java.util.Map;
1:3047ab6: import java.util.regex.Pattern;
1:3047ab6: import java.util.regex.Matcher;
1:3047ab6: 
1:3047ab6: import org.slf4j.Logger;
1:3047ab6: import org.slf4j.LoggerFactory;
1:3047ab6: import org.apache.cassandra.db.SystemKeyspace;
1:3047ab6: import org.apache.cassandra.exceptions.ConfigurationException;
1:3047ab6: import org.apache.cassandra.gms.ApplicationState;
1:3047ab6: import org.apache.cassandra.gms.EndpointState;
1:3047ab6: import org.apache.cassandra.gms.Gossiper;
1:3047ab6: import org.apache.cassandra.io.util.FileUtils;
1:3047ab6: import org.apache.cassandra.utils.FBUtilities;
1:f25da97: import org.apache.cassandra.utils.JVMStabilityInspector;
1:3047ab6: 
1:3047ab6: /**
1:222ea95:  * {@code
1:3047ab6:  * A snitch that assumes a Cloudstack Zone follows the typical convention
1:3047ab6:  * <country>-<location>-<availability zone> and uses the country/location
1:3047ab6:  * tuple as a datacenter and the availability zone as a rack
1:222ea95:  * }
1:3047ab6:  */
1:3047ab6: 
1:3047ab6: public class CloudstackSnitch extends AbstractNetworkTopologySnitch
1:c454807: {
1:3047ab6:     protected static final Logger logger = LoggerFactory.getLogger(CloudstackSnitch.class);
1:3047ab6:     protected static final String ZONE_NAME_QUERY_URI = "/latest/meta-data/availability-zone";
1:3047ab6: 
1:3047ab6:     private Map<InetAddress, Map<String, String>> savedEndpoints;
1:3047ab6: 
1:3047ab6:     private static final String DEFAULT_DC = "UNKNOWN-DC";
1:3047ab6:     private static final String DEFAULT_RACK = "UNKNOWN-RACK";
1:68d2526:     private static final String[] LEASE_FILES =
1:c454807:     {
1:3047ab6:         "file:///var/lib/dhcp/dhclient.eth0.leases",
1:3047ab6:         "file:///var/lib/dhclient/dhclient.eth0.leases"
1:3047ab6:     };
1:3047ab6: 
1:3047ab6:     protected String csZoneDc;
1:3047ab6:     protected String csZoneRack;
1:3047ab6: 
1:3047ab6:     public CloudstackSnitch() throws IOException, ConfigurationException
2:3047ab6:     {
1:3047ab6:         String endpoint = csMetadataEndpoint();
1:3047ab6:         String zone = csQueryMetadata(endpoint + ZONE_NAME_QUERY_URI);
1:3047ab6:         String zone_parts[] = zone.split("-");
1:3047ab6: 
1:68d2526:         if (zone_parts.length != 3)
1:c454807:         {
1:3047ab6:             throw new ConfigurationException("CloudstackSnitch cannot handle invalid zone format: " + zone);
1:c454807:         }
1:3047ab6:         csZoneDc = zone_parts[0] + "-" + zone_parts[1];
1:3047ab6:         csZoneRack = zone_parts[2];
7:3047ab6:     }
1:3047ab6: 
1:3047ab6:     public String getRack(InetAddress endpoint)
1:3047ab6:     {
1:3047ab6:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:3047ab6:             return csZoneRack;
1:3047ab6:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:68d2526:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null)
1:c454807:         {
1:3047ab6:             if (savedEndpoints == null)
1:3047ab6:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:3047ab6:             if (savedEndpoints.containsKey(endpoint))
1:3047ab6:                 return savedEndpoints.get(endpoint).get("rack");
1:3047ab6:             return DEFAULT_RACK;
1:3047ab6:         }
1:3047ab6:         return state.getApplicationState(ApplicationState.RACK).value;
1:3047ab6:     }
1:3047ab6: 
1:3047ab6:     public String getDatacenter(InetAddress endpoint)
1:3047ab6:     {
1:3047ab6:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:3047ab6:             return csZoneDc;
1:3047ab6:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:68d2526:         if (state == null || state.getApplicationState(ApplicationState.DC) == null)
1:c454807:         {
1:3047ab6:             if (savedEndpoints == null)
1:3047ab6:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:3047ab6:             if (savedEndpoints.containsKey(endpoint))
1:3047ab6:                 return savedEndpoints.get(endpoint).get("data_center");
1:3047ab6:             return DEFAULT_DC;
1:3047ab6:         }
1:3047ab6:         return state.getApplicationState(ApplicationState.DC).value;
1:3047ab6:     }
1:3047ab6: 
1:3047ab6:     String csQueryMetadata(String url) throws ConfigurationException, IOException
1:3047ab6:     {
1:3047ab6:         HttpURLConnection conn = null;
1:2f32783:         DataInputStream is = null;
1:3047ab6: 
1:68d2526:         try
1:c454807:         {
1:3047ab6:             conn = (HttpURLConnection) new URL(url).openConnection();
1:68d2526:         }
1:68d2526:         catch (Exception e)
1:c454807:         {
1:3047ab6:             throw new ConfigurationException("CloudstackSnitch cannot query wrong metadata URL: " + url);
1:c454807:         }
1:68d2526:         try
1:c454807:         {
1:3047ab6:             conn.setRequestMethod("GET");
1:68d2526:             if (conn.getResponseCode() != 200)
1:c454807:             {
1:3047ab6:                 throw new ConfigurationException("CloudstackSnitch was unable to query metadata.");
1:3047ab6:             }
1:3047ab6: 
1:3047ab6:             int cl = conn.getContentLength();
1:3047ab6:             byte[] b = new byte[cl];
1:2f32783:             is = new DataInputStream(new BufferedInputStream(conn.getInputStream()));
1:2f32783:             is.readFully(b);
1:3047ab6:             return new String(b, StandardCharsets.UTF_8);
1:68d2526:         }
1:68d2526:         finally
1:c454807:         {
1:3047ab6:             FileUtils.close(is);
1:3047ab6:             conn.disconnect();
1:3047ab6:         }
1:3047ab6:     }
1:3047ab6: 
1:3047ab6:     String csMetadataEndpoint() throws ConfigurationException
1:c454807:     {
1:68d2526:         for (String lease_uri: LEASE_FILES)
1:c454807:         {
1:68d2526:             try
1:3047ab6:             {
1:3047ab6:                 File lease_file = new File(new URI(lease_uri));
1:68d2526:                 if (lease_file.exists())
1:c454807:                 {
1:3047ab6:                     return csEndpointFromLease(lease_file);
1:68d2526:                 }
1:c454807:             }
1:68d2526:             catch (Exception e)
1:c454807:             {
1:f25da97:                 JVMStabilityInspector.inspectThrowable(e);
1:3047ab6:                 continue;
1:3047ab6:             }
1:3047ab6: 
1:3047ab6:         }
1:3047ab6: 
1:3047ab6:         throw new ConfigurationException("No valid DHCP lease file could be found.");
1:3047ab6:     }
1:3047ab6: 
1:0a0ee44:     String csEndpointFromLease(File lease) throws ConfigurationException
1:3047ab6:     {
1:7aafe05:         String line;
1:3047ab6:         String endpoint = null;
1:3047ab6:         Pattern identifierPattern = Pattern.compile("^[ \t]*option dhcp-server-identifier (.*);$");
1:c454807: 
1:7aafe05:         try (BufferedReader reader = new BufferedReader(new FileReader(lease)))
1:c454807:         {
1:68d2526: 
1:68d2526:             while ((line = reader.readLine()) != null)
1:c454807:             {
1:c454807:                 Matcher matcher = identifierPattern.matcher(line);
1:3047ab6: 
1:68d2526:                 if (matcher.find())
1:c454807:                 {
1:c454807:                     endpoint = matcher.group(1);
1:c454807:                     break;
1:c454807:                 }
1:c454807:             }
1:7aafe05:         }
1:68d2526:         catch (Exception e)
1:c454807:         {
1:c454807:             throw new ConfigurationException("CloudstackSnitch cannot access lease file.");
1:c454807:         }
1:3047ab6: 
1:68d2526:         if (endpoint == null)
1:c454807:         {
1:3047ab6:             throw new ConfigurationException("No metadata server could be found in lease file.");
1:3047ab6:         }
1:3047ab6: 
1:3047ab6:         return "http://" + endpoint;
1:3047ab6:     }
1:3047ab6: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     private static final String[] LEASE_FILES =
/////////////////////////////////////////////////////////////////////////
1:         if (zone_parts.length != 3)
/////////////////////////////////////////////////////////////////////////
1:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null)
/////////////////////////////////////////////////////////////////////////
1:         if (state == null || state.getApplicationState(ApplicationState.DC) == null)
/////////////////////////////////////////////////////////////////////////
1:         try
1:         }
1:         catch (Exception e)
1:         try
1:             if (conn.getResponseCode() != 200)
/////////////////////////////////////////////////////////////////////////
1:         }
1:         finally
/////////////////////////////////////////////////////////////////////////
1:         for (String lease_uri: LEASE_FILES)
1:             try
1:                 if (lease_file.exists())
1:             }
1:             catch (Exception e)
/////////////////////////////////////////////////////////////////////////
1: 
1:             while ((line = reader.readLine()) != null)
1:                 if (matcher.find())
1:         catch (Exception e)
1:         if (endpoint == null)
commit:222ea95
/////////////////////////////////////////////////////////////////////////
1:  * {@code
1:  * }
commit:0a0ee44
/////////////////////////////////////////////////////////////////////////
1:     String csEndpointFromLease(File lease) throws ConfigurationException
commit:2e955d4
commit:c454807
/////////////////////////////////////////////////////////////////////////
0:     private static final String[] LEASE_FILES = 
1:     {
/////////////////////////////////////////////////////////////////////////
0:         if (zone_parts.length != 3) 
1:         {
/////////////////////////////////////////////////////////////////////////
0:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null) 
1:         {
/////////////////////////////////////////////////////////////////////////
0:         if (state == null || state.getApplicationState(ApplicationState.DC) == null) 
1:         {
/////////////////////////////////////////////////////////////////////////
0:         try 
1:         {
1:         } 
0:         catch (Exception e) 
1:         {
0:         try 
1:         {
0:             if (conn.getResponseCode() != 200) 
1:             {
/////////////////////////////////////////////////////////////////////////
1:         } 
0:         finally 
1:         {
0:         for (String lease_uri: LEASE_FILES) 
1:         {
0:             try 
1:             {
0:                 if (lease_file.exists()) 
1:                 {
1:             } 
0:             catch (Exception e) 
1:             {
/////////////////////////////////////////////////////////////////////////
0:         try 
1:         {
1:             
0:             while ((line = reader.readLine()) != null) 
1:             {
1:                 Matcher matcher = identifierPattern.matcher(line);
0:                 if (matcher.find()) 
1:                 {
1:                     endpoint = matcher.group(1);
1:                     break;
1:                 }
1:         } 
0:         catch (Exception e)  
1:         {
1:             throw new ConfigurationException("CloudstackSnitch cannot access lease file.");
1:         } 
0:         finally
1:         {
0:         	FileUtils.closeQuietly(reader);
0:         if (endpoint == null) 
1:         {
commit:4233ee4
commit:2f32783
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInputStream;
/////////////////////////////////////////////////////////////////////////
1:         DataInputStream is = null;
/////////////////////////////////////////////////////////////////////////
1:             is = new DataInputStream(new BufferedInputStream(conn.getInputStream()));
1:             is.readFully(b);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:         String line;
1:         try (BufferedReader reader = new BufferedReader(new FileReader(lease)))
/////////////////////////////////////////////////////////////////////////
1:         }
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:0705e8a
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
/////////////////////////////////////////////////////////////////////////
1:                 JVMStabilityInspector.inspectThrowable(e);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:3047ab6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.locator;
1: 
0: import java.io.InputStream;
1: import java.io.BufferedInputStream;
0: import java.io.FilterInputStream;
1: import java.io.BufferedReader;
1: import java.io.FileReader;
1: import java.io.IOException;
1: import java.io.File;
1: import java.net.HttpURLConnection;
1: import java.net.InetAddress;
1: import java.net.URL;
1: import java.net.URI;
1: import java.nio.charset.StandardCharsets;
1: import java.util.Map;
1: import java.util.regex.Pattern;
1: import java.util.regex.Matcher;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.apache.cassandra.db.SystemKeyspace;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.gms.ApplicationState;
1: import org.apache.cassandra.gms.EndpointState;
1: import org.apache.cassandra.gms.Gossiper;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * A snitch that assumes a Cloudstack Zone follows the typical convention
1:  * <country>-<location>-<availability zone> and uses the country/location
1:  * tuple as a datacenter and the availability zone as a rack
1:  */
1: 
1: public class CloudstackSnitch extends AbstractNetworkTopologySnitch
1: {
1:     protected static final Logger logger = LoggerFactory.getLogger(CloudstackSnitch.class);
1:     protected static final String ZONE_NAME_QUERY_URI = "/latest/meta-data/availability-zone";
1: 
1:     private Map<InetAddress, Map<String, String>> savedEndpoints;
1: 
1:     private static final String DEFAULT_DC = "UNKNOWN-DC";
1:     private static final String DEFAULT_RACK = "UNKNOWN-RACK";
0:     private static final String[] LEASE_FILES = {
1:         "file:///var/lib/dhcp/dhclient.eth0.leases",
1:         "file:///var/lib/dhclient/dhclient.eth0.leases"
1:     };
1: 
1:     protected String csZoneDc;
1:     protected String csZoneRack;
1: 
1:     public CloudstackSnitch() throws IOException, ConfigurationException
1:     {
1:         String endpoint = csMetadataEndpoint();
1:         String zone = csQueryMetadata(endpoint + ZONE_NAME_QUERY_URI);
1:         String zone_parts[] = zone.split("-");
1: 
0:         if (zone_parts.length != 3) {
1:             throw new ConfigurationException("CloudstackSnitch cannot handle invalid zone format: " + zone);
1:         }
1:         csZoneDc = zone_parts[0] + "-" + zone_parts[1];
1:         csZoneRack = zone_parts[2];
1:     }
1: 
1:     public String getRack(InetAddress endpoint)
1:     {
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:             return csZoneRack;
1:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
0:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null) {
1:             if (savedEndpoints == null)
1:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:             if (savedEndpoints.containsKey(endpoint))
1:                 return savedEndpoints.get(endpoint).get("rack");
1:             return DEFAULT_RACK;
1:         }
1:         return state.getApplicationState(ApplicationState.RACK).value;
1:     }
1: 
1:     public String getDatacenter(InetAddress endpoint)
1:     {
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:             return csZoneDc;
1:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
0:         if (state == null || state.getApplicationState(ApplicationState.DC) == null) {
1:             if (savedEndpoints == null)
1:                 savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:             if (savedEndpoints.containsKey(endpoint))
1:                 return savedEndpoints.get(endpoint).get("data_center");
1:             return DEFAULT_DC;
1:         }
1:         return state.getApplicationState(ApplicationState.DC).value;
1:     }
1: 
1:     String csQueryMetadata(String url) throws ConfigurationException, IOException
1:     {
1:         HttpURLConnection conn = null;
0:         BufferedInputStream is = null;
1: 
0:         try {
1:             conn = (HttpURLConnection) new URL(url).openConnection();
0:         } catch (Exception e) {
1:             throw new ConfigurationException("CloudstackSnitch cannot query wrong metadata URL: " + url);
1:         }
0:         try {
1:             conn.setRequestMethod("GET");
0:             if (conn.getResponseCode() != 200) {
1:                 throw new ConfigurationException("CloudstackSnitch was unable to query metadata.");
1:             }
1: 
1:             int cl = conn.getContentLength();
1:             byte[] b = new byte[cl];
0:             is = new BufferedInputStream(conn.getInputStream());
0:             is.read(b, 0, cl);
1:             return new String(b, StandardCharsets.UTF_8);
0:         } finally {
1:             FileUtils.close(is);
1:             conn.disconnect();
1:         }
1: 
1:     }
1: 
1:     String csMetadataEndpoint() throws ConfigurationException
1:     {
0:         for (String lease_uri: LEASE_FILES) {
0:             try {
1:                 File lease_file = new File(new URI(lease_uri));
0:                 if (lease_file.exists()) {
1:                     return csEndpointFromLease(lease_file);
1:                 }
1: 
0:             } catch (Exception e) {
1:                 continue;
1:             }
1: 
1: 
1:         }
1: 
1:         throw new ConfigurationException("No valid DHCP lease file could be found.");
1:     }
1: 
0:     String csEndpointFromLease(File lease) throws ConfigurationException, IOException
1:     {
0:         BufferedReader reader = null;
1: 
0:         String line = null;
1:         String endpoint = null;
1:         Pattern identifierPattern = Pattern.compile("^[ \t]*option dhcp-server-identifier (.*);$");
1: 
0:         try {
0:             reader = new BufferedReader(new FileReader(lease));
0:         } catch (Exception e) {
0:             throw new ConfigurationException("CloudstackSnitch cannot access lease file.");
1:         }
1: 
0:         while ((line = reader.readLine()) != null) {
0:             Matcher matcher = identifierPattern.matcher(line);
1: 
0:             if (matcher.find()) {
0:                 endpoint = matcher.group(1);
1:             }
1:         }
1: 
0:         if (endpoint == null) {
1:             throw new ConfigurationException("No metadata server could be found in lease file.");
1:         }
1: 
1:         return "http://" + endpoint;
1:     }
1: }
commit:6f4853e
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.locator;
0: 
0: import java.io.InputStream;
0: import java.io.BufferedInputStream;
0: import java.io.FilterInputStream;
0: import java.io.BufferedReader;
0: import java.io.FileReader;
0: import java.io.IOException;
0: import java.io.File;
0: import java.net.HttpURLConnection;
0: import java.net.InetAddress;
0: import java.net.URL;
0: import java.net.URI;
0: import java.nio.charset.StandardCharsets;
0: import java.util.Map;
0: import java.util.regex.Pattern;
0: import java.util.regex.Matcher;
0: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: import org.apache.cassandra.db.SystemTable;
0: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.gms.ApplicationState;
0: import org.apache.cassandra.gms.EndpointState;
0: import org.apache.cassandra.gms.Gossiper;
0: import org.apache.cassandra.io.util.FileUtils;
0: import org.apache.cassandra.utils.FBUtilities;
0: 
0: /**
0:  * A snitch that assumes a Cloudstack Zone follows the typical convention
0:  * <country>-<location>-<availability zone> and uses the country/location
0:  * tuple as a datacenter and the availability zone as a rack
0:  */
0: 
0: public class CloudstackSnitch extends AbstractNetworkTopologySnitch
0: {
0:     protected static final Logger logger = LoggerFactory.getLogger(CloudstackSnitch.class);
0:     protected static final String ZONE_NAME_QUERY_URI = "/latest/meta-data/availability-zone";
0: 
0:     private Map<InetAddress, Map<String, String>> savedEndpoints;
0: 
0:     private static final String DEFAULT_DC = "UNKNOWN-DC";
0:     private static final String DEFAULT_RACK = "UNKNOWN-RACK";
0:     private static final String[] LEASE_FILES = {
0:         "file:///var/lib/dhcp/dhclient.eth0.leases",
0:         "file:///var/lib/dhclient/dhclient.eth0.leases"
0:     };
0: 
0:     protected String csZoneDc;
0:     protected String csZoneRack;
0: 
0:     public CloudstackSnitch() throws IOException, ConfigurationException
0:     {
0:         String endpoint = csMetadataEndpoint();
0:         String zone = csQueryMetadata(endpoint + ZONE_NAME_QUERY_URI);
0:         String zone_parts[] = zone.split("-");
0: 
0:         if (zone_parts.length != 3) {
0:             throw new ConfigurationException("CloudstackSnitch cannot handle invalid zone format: " + zone);
0:         }
0:         csZoneDc = zone_parts[0] + "-" + zone_parts[1];
0:         csZoneRack = zone_parts[2];
0:     }
0: 
0:     public String getRack(InetAddress endpoint)
0:     {
0:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
0:             return csZoneRack;
0:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
0:         if (state == null || state.getApplicationState(ApplicationState.RACK) == null) {
0:             if (savedEndpoints == null)
0:                 savedEndpoints = SystemTable.loadDcRackInfo();
0:             if (savedEndpoints.containsKey(endpoint))
0:                 return savedEndpoints.get(endpoint).get("rack");
0:             return DEFAULT_RACK;
0:         }
0:         return state.getApplicationState(ApplicationState.RACK).value;
0:     }
0: 
0:     public String getDatacenter(InetAddress endpoint)
0:     {
0:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
0:             return csZoneDc;
0:         EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
0:         if (state == null || state.getApplicationState(ApplicationState.DC) == null) {
0:             if (savedEndpoints == null)
0:                 savedEndpoints = SystemTable.loadDcRackInfo();
0:             if (savedEndpoints.containsKey(endpoint))
0:                 return savedEndpoints.get(endpoint).get("data_center");
0:             return DEFAULT_DC;
0:         }
0:         return state.getApplicationState(ApplicationState.DC).value;
0:     }
0: 
0:     String csQueryMetadata(String url) throws ConfigurationException, IOException
0:     {
0:         HttpURLConnection conn = null;
0:         BufferedInputStream is = null;
0: 
0:         try {
0:             conn = (HttpURLConnection) new URL(url).openConnection();
0:         } catch (Exception e) {
0:             throw new ConfigurationException("CloudstackSnitch cannot query wrong metadata URL: " + url);
0:         }
0:         try {
0:             conn.setRequestMethod("GET");
0:             if (conn.getResponseCode() != 200) {
0:                 throw new ConfigurationException("CloudstackSnitch was unable to query metadata.");
0:             }
0: 
0:             int cl = conn.getContentLength();
0:             byte[] b = new byte[cl];
0:             is = new BufferedInputStream(conn.getInputStream());
0:             is.read(b, 0, cl);
0:             return new String(b, StandardCharsets.UTF_8);
0:         } finally {
0:             FileUtils.close(is);
0:             conn.disconnect();
0:         }
0: 
0:     }
0: 
0:     String csMetadataEndpoint() throws ConfigurationException
0:     {
0:         for (String lease_uri: LEASE_FILES) {
0:             try {
0:                 File lease_file = new File(new URI(lease_uri));
0:                 if (lease_file.exists()) {
0:                     return csEndpointFromLease(lease_file);
0:                 }
0: 
0:             } catch (Exception e) {
0:                 continue;
0:             }
0: 
0: 
0:         }
0: 
0:         throw new ConfigurationException("No valid DHCP lease file could be found.");
0:     }
0: 
0:     String csEndpointFromLease(File lease) throws ConfigurationException, IOException
0:     {
0:         BufferedReader reader = null;
0: 
0:         String line = null;
0:         String endpoint = null;
0:         Pattern identifierPattern = Pattern.compile("^[ \t]*option dhcp-server-identifier (.*);$");
0: 
0:         try {
0:             reader = new BufferedReader(new FileReader(lease));
0:         } catch (Exception e) {
0:             throw new ConfigurationException("CloudstackSnitch cannot access lease file.");
0:         }
0: 
0:         while ((line = reader.readLine()) != null) {
0:             Matcher matcher = identifierPattern.matcher(line);
0: 
0:             if (matcher.find()) {
0:                 endpoint = matcher.group(1);
0:             }
0:         }
0: 
0:         if (endpoint == null) {
0:             throw new ConfigurationException("No metadata server could be found in lease file.");
0:         }
0: 
0:         return "http://" + endpoint;
0:     }
0: }
============================================================================