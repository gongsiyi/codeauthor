1:35f7bc5: /*
1:35f7bc5:  * Licensed to the Apache Software Foundation (ASF) under one
1:35f7bc5:  * or more contributor license agreements.  See the NOTICE file
1:35f7bc5:  * distributed with this work for additional information
1:35f7bc5:  * regarding copyright ownership.  The ASF licenses this file
1:35f7bc5:  * to you under the Apache License, Version 2.0 (the
1:35f7bc5:  * "License"); you may not use this file except in compliance
1:35f7bc5:  * with the License.  You may obtain a copy of the License at
1:35f7bc5:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:35f7bc5:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
2:35f7bc5:  */
1:35f7bc5: package org.apache.cassandra.dht;
3:35f7bc5: 
1:35f7bc5: import java.util.Collections;
1:35f7bc5: import java.util.List;
1:35f7bc5: 
1:35f7bc5: import org.apache.cassandra.utils.Pair;
1:35f7bc5: 
2:35f7bc5: /**
1:6b7db8a:  * AbstractBounds containing neither of its endpoints: (left, right).  Used by {@code CQL key > X AND key < Y} range scans.
1:35f7bc5:  */
1:ad84e4d: public class ExcludingBounds<T extends RingPosition<T>> extends AbstractBounds<T>
3:35f7bc5: {
1:35f7bc5:     public ExcludingBounds(T left, T right)
1:35f7bc5:     {
1:07893d7:         super(left, right);
1:35f7bc5:         // unlike a Range, an ExcludingBounds may not wrap, nor be empty
1:3aa7308:         assert !strictlyWrapsAround(left, right) && (right.isMinimum() || left.compareTo(right) != 0) : "(" + left + "," + right + ")";
3:35f7bc5:     }
1:5267112: 
1:35f7bc5:     public boolean contains(T position)
1:35f7bc5:     {
1:35f7bc5:         return Range.contains(left, right, position) && !right.equals(position);
1:35f7bc5:     }
1:35f7bc5: 
1:35f7bc5:     public Pair<AbstractBounds<T>, AbstractBounds<T>> split(T position)
1:35f7bc5:     {
1:35f7bc5:         assert contains(position) || left.equals(position);
1:35f7bc5:         if (left.equals(position))
1:35f7bc5:             return null;
1:07893d7:         AbstractBounds<T> lb = new Range<T>(left, position);
1:07893d7:         AbstractBounds<T> rb = new ExcludingBounds<T>(position, right);
1:7af7eb3:         return Pair.create(lb, rb);
1:35f7bc5:     }
1:35f7bc5: 
1:572ef50:     public boolean inclusiveLeft()
1:35f7bc5:     {
1:572ef50:         return false;
1:35f7bc5:     }
1:35f7bc5: 
1:572ef50:     public boolean inclusiveRight()
1:35f7bc5:     {
1:572ef50:         return false;
1:35f7bc5:     }
1:35f7bc5: 
1:35f7bc5:     public List<? extends AbstractBounds<T>> unwrap()
1:35f7bc5:     {
1:35f7bc5:         // ExcludingBounds objects never wrap
1:35f7bc5:         return Collections.<AbstractBounds<T>>singletonList(this);
1:35f7bc5:     }
1:35f7bc5: 
1:35f7bc5:     @Override
1:35f7bc5:     public boolean equals(Object o)
1:35f7bc5:     {
1:35f7bc5:         if (!(o instanceof ExcludingBounds))
1:35f7bc5:             return false;
1:35f7bc5:         ExcludingBounds<T> rhs = (ExcludingBounds<T>)o;
1:35f7bc5:         return left.equals(rhs.left) && right.equals(rhs.right);
1:35f7bc5:     }
1:35f7bc5: 
1:35f7bc5:     @Override
1:35f7bc5:     public String toString()
1:35f7bc5:     {
1:35f7bc5:         return "(" + left + "," + right + ")";
1:35f7bc5:     }
1:35f7bc5: 
1:08e2891:     protected String getOpeningString()
1:08e2891:     {
1:08e2891:         return "(";
1:08e2891:     }
1:08e2891: 
1:08e2891:     protected String getClosingString()
1:08e2891:     {
1:08e2891:         return ")";
1:08e2891:     }
1:08e2891: 
1:a991b64:     public boolean isStartInclusive()
1:a991b64:     {
1:a991b64:         return false;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isEndInclusive()
1:a991b64:     {
1:a991b64:         return false;
1:a991b64:     }
1:a991b64: 
1:5267112:     public AbstractBounds<T> withNewRight(T newRight)
1:5267112:     {
1:5267112:         return new ExcludingBounds<T>(left, newRight);
1:5267112:     }
1:35f7bc5: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:  * AbstractBounds containing neither of its endpoints: (left, right).  Used by {@code CQL key > X AND key < Y} range scans.
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:99e0c90
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3aa7308
/////////////////////////////////////////////////////////////////////////
1:         assert !strictlyWrapsAround(left, right) && (right.isMinimum() || left.compareTo(right) != 0) : "(" + left + "," + right + ")";
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     public boolean isStartInclusive()
1:     {
1:         return false;
1:     }
1: 
1:     public boolean isEndInclusive()
1:     {
1:         return false;
1:     }
1: 
commit:5267112
/////////////////////////////////////////////////////////////////////////
1: 
1:     public AbstractBounds<T> withNewRight(T newRight)
1:     {
1:         return new ExcludingBounds<T>(left, newRight);
1:     }
commit:08e2891
/////////////////////////////////////////////////////////////////////////
1:     protected String getOpeningString()
1:     {
1:         return "(";
1:     }
1: 
1:     protected String getClosingString()
1:     {
1:         return ")";
1:     }
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:35f7bc5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.dht;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.cassandra.db.RowPosition;
0: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.Pair;
1: 
1: /**
0:  * AbstractBounds containing neither of its endpoints: (left, right).  Used by CQL key > X AND key < Y range scans.
1:  */
0: public class ExcludingBounds<T extends RingPosition> extends AbstractBounds<T>
1: {
1:     public ExcludingBounds(T left, T right)
1:     {
0:         this(left, right, StorageService.getPartitioner());
1:     }
1: 
0:     ExcludingBounds(T left, T right, IPartitioner partitioner)
1:     {
0:         super(left, right, partitioner);
1:         // unlike a Range, an ExcludingBounds may not wrap, nor be empty
0:         assert left.compareTo(right) < 0 || right.isMinimum(partitioner) : "(" + left + "," + right + ")";
1:     }
1: 
1:     public boolean contains(T position)
1:     {
1:         return Range.contains(left, right, position) && !right.equals(position);
1:     }
1: 
1:     public Pair<AbstractBounds<T>, AbstractBounds<T>> split(T position)
1:     {
1:         assert contains(position) || left.equals(position);
1:         if (left.equals(position))
1:             return null;
0:         AbstractBounds<T> lb = new Range<T>(left, position, partitioner);
0:         AbstractBounds<T> rb = new ExcludingBounds<T>(position, right, partitioner);
0:         return new Pair<AbstractBounds<T>, AbstractBounds<T>>(lb, rb);
1:     }
1: 
1:     public List<? extends AbstractBounds<T>> unwrap()
1:     {
1:         // ExcludingBounds objects never wrap
1:         return Collections.<AbstractBounds<T>>singletonList(this);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (!(o instanceof ExcludingBounds))
1:             return false;
1:         ExcludingBounds<T> rhs = (ExcludingBounds<T>)o;
1:         return left.equals(rhs.left) && right.equals(rhs.right);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "(" + left + "," + right + ")";
1:     }
1: 
1:     /**
0:      * Compute a bounds of keys corresponding to a given bounds of token.
1:      */
0:     private static ExcludingBounds<RowPosition> makeRowBounds(Token left, Token right, IPartitioner partitioner)
1:     {
0:         return new ExcludingBounds<RowPosition>(left.maxKeyBound(partitioner), right.minKeyBound(partitioner), partitioner);
1:     }
1: 
0:     public AbstractBounds<RowPosition> toRowBounds()
1:     {
0:         return (left instanceof Token) ? makeRowBounds((Token)left, (Token)right, partitioner) : (ExcludingBounds<RowPosition>)this;
1:     }
1: 
0:     public AbstractBounds<Token> toTokenBounds()
1:     {
0:         return (left instanceof RowPosition) ? new ExcludingBounds<Token>(((RowPosition)left).getToken(), ((RowPosition)right).getToken(), partitioner) : (ExcludingBounds<Token>)this;
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:7aefd91
commit:572ef50
/////////////////////////////////////////////////////////////////////////
1:     public boolean inclusiveLeft()
0:     {
1:         return false;
0:     }
0: 
1:     public boolean inclusiveRight()
0:     {
1:         return false;
0:     }
0: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69542a9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1:         super(left, right);
0:         assert left.compareTo(right) < 0 || right.isMinimum() : "(" + left + "," + right + ")";
/////////////////////////////////////////////////////////////////////////
1:         AbstractBounds<T> lb = new Range<T>(left, position);
1:         AbstractBounds<T> rb = new ExcludingBounds<T>(position, right);
/////////////////////////////////////////////////////////////////////////
0:     private static ExcludingBounds<RowPosition> makeRowBounds(Token left, Token right)
0:         return new ExcludingBounds<RowPosition>(left.maxKeyBound(), right.minKeyBound());
0:         return (left instanceof Token) ? makeRowBounds((Token)left, (Token)right) : (ExcludingBounds<RowPosition>)this;
0:         return (left instanceof RowPosition) ? new ExcludingBounds<Token>(((RowPosition)left).getToken(), ((RowPosition)right).getToken()) : (ExcludingBounds<Token>)this;
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1: public class ExcludingBounds<T extends RingPosition<T>> extends AbstractBounds<T>
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
0:     @SuppressWarnings("unchecked")
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7af7eb3
/////////////////////////////////////////////////////////////////////////
1:         return Pair.create(lb, rb);
============================================================================