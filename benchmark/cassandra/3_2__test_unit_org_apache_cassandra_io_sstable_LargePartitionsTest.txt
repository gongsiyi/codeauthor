1:ef5bbed: /*
1:ef5bbed:  * Licensed to the Apache Software Foundation (ASF) under one
1:ef5bbed:  * or more contributor license agreements.  See the NOTICE file
1:ef5bbed:  * distributed with this work for additional information
1:ef5bbed:  * regarding copyright ownership.  The ASF licenses this file
1:ef5bbed:  * to you under the Apache License, Version 2.0 (the
1:ef5bbed:  * "License"); you may not use this file except in compliance
1:ef5bbed:  * with the License.  You may obtain a copy of the License at
1:ef5bbed:  *
1:ef5bbed:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ef5bbed:  *
1:ef5bbed:  * Unless required by applicable law or agreed to in writing, software
1:ef5bbed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef5bbed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef5bbed:  * See the License for the specific language governing permissions and
1:ef5bbed:  * limitations under the License.
1:ef5bbed:  */
1:ef5bbed: package org.apache.cassandra.io.sstable;
2:ef5bbed: 
1:033f256: import java.util.Iterator;
1:ef5bbed: import java.util.concurrent.ThreadLocalRandom;
1:ef5bbed: 
1:ef5bbed: import org.junit.Ignore;
1:ef5bbed: import org.junit.Test;
1:ef5bbed: import org.junit.runner.RunWith;
1:ef5bbed: 
1:ef5bbed: import org.apache.cassandra.OrderedJUnit4ClassRunner;
1:ef5bbed: import org.apache.cassandra.cql3.CQLTester;
1:033f256: import org.apache.cassandra.cql3.UntypedResultSet;
1:ef5bbed: import org.apache.cassandra.metrics.CacheMetrics;
1:ef5bbed: import org.apache.cassandra.service.CacheService;
1:ef5bbed: 
1:ef5bbed: /**
1:ef5bbed:  * Test intended to manually measure GC pressure to write and read partitions of different size
1:ef5bbed:  * for CASSANDRA-11206.
1:ef5bbed:  */
1:ef5bbed: @RunWith(OrderedJUnit4ClassRunner.class)
1:ef5bbed: @Ignore // all these tests take very, very long - so only run them manually
1:ef5bbed: public class LargePartitionsTest extends CQLTester
1:ef5bbed: {
1:ef5bbed: 
1:ef5bbed:     @FunctionalInterface
1:ef5bbed:     interface Measured
1:ef5bbed:     {
1:ef5bbed:         void measure() throws Throwable;
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     private static void measured(String name, Measured measured) throws Throwable
1:ef5bbed:     {
1:ef5bbed:         long t0 = System.currentTimeMillis();
1:ef5bbed:         measured.measure();
1:ef5bbed:         long t = System.currentTimeMillis() - t0;
1:033f256:         System.out.println("LargePartitionsTest-measured: " + name + " took " + t + " ms");
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     private static String randomText(int bytes)
1:ef5bbed:     {
1:ef5bbed:         char[] ch = new char[bytes];
1:ef5bbed:         ThreadLocalRandom r = ThreadLocalRandom.current();
1:ef5bbed:         for (int i = 0; i < bytes; i++)
1:ef5bbed:             ch[i] = (char) (32 + r.nextInt(95));
1:ef5bbed:         return new String(ch);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     private static final int rowKBytes = 8;
1:ef5bbed: 
1:ef5bbed:     private void withPartitionSize(long partitionKBytes, long totalMBytes) throws Throwable
1:ef5bbed:     {
1:ef5bbed:         long totalKBytes = totalMBytes * 1024L;
1:ef5bbed: 
1:ef5bbed:         createTable("CREATE TABLE %s (pk text, ck text, val text, PRIMARY KEY (pk, ck))");
1:ef5bbed: 
1:ef5bbed:         String name = "part=" + partitionKBytes + "k total=" + totalMBytes + 'M';
1:ef5bbed: 
1:ef5bbed:         measured("INSERTs for " + name, () -> {
1:ef5bbed:             for (long writtenKBytes = 0L; writtenKBytes < totalKBytes; writtenKBytes += partitionKBytes)
1:ef5bbed:             {
1:ef5bbed:                 String pk = Long.toBinaryString(writtenKBytes);
1:ef5bbed:                 for (long kbytes = 0L; kbytes < partitionKBytes; kbytes += rowKBytes)
1:ef5bbed:                 {
1:ef5bbed:                     String ck = Long.toBinaryString(kbytes);
1:ef5bbed:                     execute("INSERT INTO %s (pk, ck, val) VALUES (?,?,?)", pk, ck, randomText(rowKBytes * 1024));
1:ef5bbed:                 }
1:ef5bbed:             }
1:ef5bbed:         });
1:ef5bbed: 
1:ef5bbed:         measured("flush for " + name, () -> flush(true));
1:ef5bbed: 
1:ef5bbed:         CacheService.instance.keyCache.clear();
1:ef5bbed: 
1:ef5bbed:         measured("compact for " + name, () -> {
1:ef5bbed:             keyCacheMetrics("before compaction");
1:ef5bbed:             compact();
1:ef5bbed:             keyCacheMetrics("after compaction");
1:ef5bbed:         });
1:ef5bbed: 
1:ef5bbed:         measured("SELECTs 1 for " + name, () -> selects(partitionKBytes, totalKBytes));
1:ef5bbed: 
1:ef5bbed:         measured("SELECTs 2 for " + name, () -> selects(partitionKBytes, totalKBytes));
1:033f256: 
1:033f256:         CacheService.instance.keyCache.clear();
1:033f256:         measured("Scan for " + name, () -> scan(partitionKBytes, totalKBytes));
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     private void selects(long partitionKBytes, long totalKBytes) throws Throwable
1:ef5bbed:     {
1:ef5bbed:         for (int i = 0; i < 50000; i++)
1:ef5bbed:         {
1:ef5bbed:             long pk = ThreadLocalRandom.current().nextLong(totalKBytes / partitionKBytes) * partitionKBytes;
1:ef5bbed:             long ck = ThreadLocalRandom.current().nextLong(partitionKBytes / rowKBytes) * rowKBytes;
1:ef5bbed:             execute("SELECT val FROM %s WHERE pk=? AND ck=?",
1:ef5bbed:                     Long.toBinaryString(pk),
1:ef5bbed:                     Long.toBinaryString(ck)).one();
1:ef5bbed:             if (i % 1000 == 0)
1:ef5bbed:                 keyCacheMetrics("after " + i + " selects");
1:ef5bbed:         }
1:ef5bbed:         keyCacheMetrics("after all selects");
1:ef5bbed:     }
1:ef5bbed: 
1:033f256:     private void scan(long partitionKBytes, long totalKBytes) throws Throwable
1:033f256:     {
1:033f256:         long pk = ThreadLocalRandom.current().nextLong(totalKBytes / partitionKBytes) * partitionKBytes;
1:033f256:         Iterator<UntypedResultSet.Row> iter = execute("SELECT val FROM %s WHERE pk=?", Long.toBinaryString(pk)).iterator();
1:033f256:         int i = 0;
1:033f256:         while (iter.hasNext())
1:033f256:         {
1:033f256:             iter.next();
1:033f256:             if (i++ % 1000 == 0)
1:033f256:                 keyCacheMetrics("after " + i + " iteration");
1:033f256:         }
1:033f256:         keyCacheMetrics("after all iteration");
1:033f256:     }
1:033f256: 
1:ef5bbed:     private static void keyCacheMetrics(String title)
1:ef5bbed:     {
1:ef5bbed:         CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();
1:ef5bbed:         System.out.println("Key cache metrics " + title + ": capacity:" + metrics.capacity.getValue() +
1:ef5bbed:                            " size:"+metrics.size.getValue()+
1:ef5bbed:                            " entries:" + metrics.entries.getValue() +
1:ef5bbed:                            " hit-rate:"+metrics.hitRate.getValue() +
1:ef5bbed:                            " one-min-rate:"+metrics.oneMinuteHitRate.getValue());
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void prepare() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         for (int i = 0; i < 4; i++)
1:ef5bbed:         {
1:ef5bbed:             withPartitionSize(8L, 32L);
1:ef5bbed:         }
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_01_16k() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(16L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_02_512k() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(512L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_03_1M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(1024L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_04_4M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(4L * 1024L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_05_8M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(8L * 1024L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_06_16M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(16L * 1024L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_07_32M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(32L * 1024L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_08_64M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(64L * 1024L, 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_09_256M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(256L * 1024L, 4 * 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_10_512M() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(512L * 1024L, 4 * 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_11_1G() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(1024L * 1024L, 8 * 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_12_2G() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(2L * 1024L * 1024L, 8 * 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_13_4G() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(4L * 1024L * 1024L, 16 * 1024L);
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:ef5bbed:     public void test_14_8G() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         withPartitionSize(8L * 1024L * 1024L, 32 * 1024L);
1:ef5bbed:     }
1:ef5bbed: }
============================================================================
author:Yasuharu Goto
-------------------------------------------------------------------------------
commit:033f256
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.UntypedResultSet;
/////////////////////////////////////////////////////////////////////////
1:         System.out.println("LargePartitionsTest-measured: " + name + " took " + t + " ms");
/////////////////////////////////////////////////////////////////////////
1: 
1:         CacheService.instance.keyCache.clear();
1:         measured("Scan for " + name, () -> scan(partitionKBytes, totalKBytes));
/////////////////////////////////////////////////////////////////////////
1:     private void scan(long partitionKBytes, long totalKBytes) throws Throwable
1:     {
1:         long pk = ThreadLocalRandom.current().nextLong(totalKBytes / partitionKBytes) * partitionKBytes;
1:         Iterator<UntypedResultSet.Row> iter = execute("SELECT val FROM %s WHERE pk=?", Long.toBinaryString(pk)).iterator();
1:         int i = 0;
1:         while (iter.hasNext())
1:         {
1:             iter.next();
1:             if (i++ % 1000 == 0)
1:                 keyCacheMetrics("after " + i + " iteration");
1:         }
1:         keyCacheMetrics("after all iteration");
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
1: import org.apache.cassandra.OrderedJUnit4ClassRunner;
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.metrics.CacheMetrics;
1: import org.apache.cassandra.service.CacheService;
1: 
1: /**
1:  * Test intended to manually measure GC pressure to write and read partitions of different size
1:  * for CASSANDRA-11206.
1:  */
1: @RunWith(OrderedJUnit4ClassRunner.class)
1: @Ignore // all these tests take very, very long - so only run them manually
1: public class LargePartitionsTest extends CQLTester
1: {
1: 
1:     @FunctionalInterface
1:     interface Measured
1:     {
1:         void measure() throws Throwable;
1:     }
1: 
1:     private static void measured(String name, Measured measured) throws Throwable
1:     {
1:         long t0 = System.currentTimeMillis();
1:         measured.measure();
1:         long t = System.currentTimeMillis() - t0;
0:         System.out.println(name + " took " + t + " ms");
1:     }
1: 
1:     private static String randomText(int bytes)
1:     {
1:         char[] ch = new char[bytes];
1:         ThreadLocalRandom r = ThreadLocalRandom.current();
1:         for (int i = 0; i < bytes; i++)
1:             ch[i] = (char) (32 + r.nextInt(95));
1:         return new String(ch);
1:     }
1: 
1:     private static final int rowKBytes = 8;
1: 
1:     private void withPartitionSize(long partitionKBytes, long totalMBytes) throws Throwable
1:     {
1:         long totalKBytes = totalMBytes * 1024L;
1: 
1:         createTable("CREATE TABLE %s (pk text, ck text, val text, PRIMARY KEY (pk, ck))");
1: 
1:         String name = "part=" + partitionKBytes + "k total=" + totalMBytes + 'M';
1: 
1:         measured("INSERTs for " + name, () -> {
1:             for (long writtenKBytes = 0L; writtenKBytes < totalKBytes; writtenKBytes += partitionKBytes)
1:             {
1:                 String pk = Long.toBinaryString(writtenKBytes);
1:                 for (long kbytes = 0L; kbytes < partitionKBytes; kbytes += rowKBytes)
1:                 {
1:                     String ck = Long.toBinaryString(kbytes);
1:                     execute("INSERT INTO %s (pk, ck, val) VALUES (?,?,?)", pk, ck, randomText(rowKBytes * 1024));
1:                 }
1:             }
1:         });
1: 
1:         measured("flush for " + name, () -> flush(true));
1: 
1:         CacheService.instance.keyCache.clear();
1: 
1:         measured("compact for " + name, () -> {
1:             keyCacheMetrics("before compaction");
1:             compact();
1:             keyCacheMetrics("after compaction");
1:         });
1: 
1:         measured("SELECTs 1 for " + name, () -> selects(partitionKBytes, totalKBytes));
1: 
1:         measured("SELECTs 2 for " + name, () -> selects(partitionKBytes, totalKBytes));
1:     }
1: 
1:     private void selects(long partitionKBytes, long totalKBytes) throws Throwable
1:     {
1:         for (int i = 0; i < 50000; i++)
1:         {
1:             long pk = ThreadLocalRandom.current().nextLong(totalKBytes / partitionKBytes) * partitionKBytes;
1:             long ck = ThreadLocalRandom.current().nextLong(partitionKBytes / rowKBytes) * rowKBytes;
1:             execute("SELECT val FROM %s WHERE pk=? AND ck=?",
1:                     Long.toBinaryString(pk),
1:                     Long.toBinaryString(ck)).one();
1:             if (i % 1000 == 0)
1:                 keyCacheMetrics("after " + i + " selects");
1:         }
1:         keyCacheMetrics("after all selects");
1:     }
1: 
1:     private static void keyCacheMetrics(String title)
1:     {
1:         CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();
1:         System.out.println("Key cache metrics " + title + ": capacity:" + metrics.capacity.getValue() +
1:                            " size:"+metrics.size.getValue()+
1:                            " entries:" + metrics.entries.getValue() +
1:                            " hit-rate:"+metrics.hitRate.getValue() +
1:                            " one-min-rate:"+metrics.oneMinuteHitRate.getValue());
1:     }
1: 
1:     @Test
1:     public void prepare() throws Throwable
1:     {
1:         for (int i = 0; i < 4; i++)
1:         {
1:             withPartitionSize(8L, 32L);
1:         }
1:     }
1: 
1:     @Test
1:     public void test_01_16k() throws Throwable
1:     {
1:         withPartitionSize(16L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_02_512k() throws Throwable
1:     {
1:         withPartitionSize(512L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_03_1M() throws Throwable
1:     {
1:         withPartitionSize(1024L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_04_4M() throws Throwable
1:     {
1:         withPartitionSize(4L * 1024L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_05_8M() throws Throwable
1:     {
1:         withPartitionSize(8L * 1024L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_06_16M() throws Throwable
1:     {
1:         withPartitionSize(16L * 1024L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_07_32M() throws Throwable
1:     {
1:         withPartitionSize(32L * 1024L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_08_64M() throws Throwable
1:     {
1:         withPartitionSize(64L * 1024L, 1024L);
1:     }
1: 
1:     @Test
1:     public void test_09_256M() throws Throwable
1:     {
1:         withPartitionSize(256L * 1024L, 4 * 1024L);
1:     }
1: 
1:     @Test
1:     public void test_10_512M() throws Throwable
1:     {
1:         withPartitionSize(512L * 1024L, 4 * 1024L);
1:     }
1: 
1:     @Test
1:     public void test_11_1G() throws Throwable
1:     {
1:         withPartitionSize(1024L * 1024L, 8 * 1024L);
1:     }
1: 
1:     @Test
1:     public void test_12_2G() throws Throwable
1:     {
1:         withPartitionSize(2L * 1024L * 1024L, 8 * 1024L);
1:     }
1: 
1:     @Test
1:     public void test_13_4G() throws Throwable
1:     {
1:         withPartitionSize(4L * 1024L * 1024L, 16 * 1024L);
1:     }
1: 
1:     @Test
1:     public void test_14_8G() throws Throwable
1:     {
1:         withPartitionSize(8L * 1024L * 1024L, 32 * 1024L);
1:     }
1: }
============================================================================