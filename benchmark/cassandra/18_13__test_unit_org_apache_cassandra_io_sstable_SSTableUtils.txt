1:f62d4ec: /*
1:f62d4ec: * Licensed to the Apache Software Foundation (ASF) under one
1:f62d4ec: * or more contributor license agreements.  See the NOTICE file
1:f62d4ec: * distributed with this work for additional information
1:f62d4ec: * regarding copyright ownership.  The ASF licenses this file
1:f62d4ec: * to you under the Apache License, Version 2.0 (the
1:f62d4ec: * "License"); you may not use this file except in compliance
1:f62d4ec: * with the License.  You may obtain a copy of the License at
1:f62d4ec: *
1:f62d4ec: *    http://www.apache.org/licenses/LICENSE-2.0
1:f62d4ec: *
1:f62d4ec: * Unless required by applicable law or agreed to in writing,
1:f62d4ec: * software distributed under the License is distributed on an
1:f62d4ec: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f62d4ec: * KIND, either express or implied.  See the License for the
1:f62d4ec: * specific language governing permissions and limitations
1:f62d4ec: * under the License.
1:71084e3: */
1:86eaf90: 
1:86eaf90: package org.apache.cassandra.io.sstable;
1:2c4ac98: 
1:f62d4ec: import java.io.File;
1:f62d4ec: import java.io.IOException;
1:718b65e: import java.util.*;
1:04c0b81: 
1:9ed2727: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.Schema;
1:aa76394: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:b4133f3: import org.apache.cassandra.io.sstable.format.SSTableFormat;
1:0368e97: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:a7b7214: import org.apache.cassandra.service.ActiveRepairService;
1:2c4ac98: 
1:1946cfd: import org.apache.cassandra.Util;
1:ea44997: import static org.junit.Assert.assertEquals;
1:1946cfd: 
1:f62d4ec: public class SSTableUtils
3:37317eb: {
1:0e96e58:     // first configured keyspace and cf
1:0e96e58:     public static String KEYSPACENAME = "Keyspace1";
1:12eb057:     public static String CFNAME = "Standard1";
1:04c0b81: 
1:d2a3827:     public SSTableUtils(String ksname, String cfname)
1:d2a3827:     {
1:d2a3827:         KEYSPACENAME = ksname;
1:d2a3827:         CFNAME = cfname;
1:d2a3827:     }
1:d2a3827: 
1:a991b64:     /*
1:e50d6af:     public static ColumnFamily createCF(long mfda, int ldt, Cell... cols)
1:1946cfd:     {
1:d2a3827:         return createCF(KEYSPACENAME, CFNAME, mfda, ldt, cols);
1:d2a3827:     }
1:d2a3827: 
1:d2a3827:     public static ColumnFamily createCF(String ksname, String cfname, long mfda, int ldt, Cell... cols)
1:d2a3827:     {
1:d2a3827:         ColumnFamily cf = ArrayBackedSortedColumns.factory.create(ksname, cfname);
1:4d34917:         cf.delete(new DeletionInfo(mfda, ldt));
1:e50d6af:         for (Cell col : cols)
1:9811668:             cf.addColumn(col);
1:9811668:         return cf;
1:71084e3:     }
1:1946cfd: 
1:0e96e58:     public static File tempSSTableFile(String keyspaceName, String cfname) throws IOException
1:71084e3:     {
1:0e96e58:         return tempSSTableFile(keyspaceName, cfname, 0);
1:71084e3:     }
1:a991b64:     */
1:fc73007: 
1:0e96e58:     public static File tempSSTableFile(String keyspaceName, String cfname, int generation) throws IOException
1:71084e3:     {
1:0e96e58:         File tempdir = File.createTempFile(keyspaceName, cfname);
1:71084e3:         if(!tempdir.delete() || !tempdir.mkdir())
1:71084e3:             throw new IOException("Temporary directory creation failed.");
1:71084e3:         tempdir.deleteOnExit();
1:d13a996:         File cfDir = new File(tempdir, keyspaceName + File.separator + cfname);
1:d13a996:         cfDir.mkdirs();
1:d13a996:         cfDir.deleteOnExit();
1:b4133f3:         File datafile = new File(new Descriptor(cfDir, keyspaceName, cfname, generation, SSTableFormat.Type.BIG).filenameFor(Component.DATA));
1:d0056e8:         if (!datafile.createNewFile())
1:d0056e8:             throw new IOException("unable to create file " + datafile);
1:81d713a:         datafile.deleteOnExit();
1:81d713a:         return datafile;
4:37317eb:     }
1:37317eb: 
1:4e29b7a:     public static void assertContentEquals(SSTableReader lhs, SSTableReader rhs) throws Exception
1:ea44997:     {
1:4e29b7a:         try (ISSTableScanner slhs = lhs.getScanner();
1:4e29b7a:              ISSTableScanner srhs = rhs.getScanner())
1:ea44997:         {
1:4e29b7a:             while (slhs.hasNext())
1:4e29b7a:             {
1:a991b64:                 UnfilteredRowIterator ilhs = slhs.next();
1:4e29b7a:                 assert srhs.hasNext() : "LHS contained more rows than RHS";
1:a991b64:                 UnfilteredRowIterator irhs = srhs.next();
1:4e29b7a:                 assertContentEquals(ilhs, irhs);
1:4e29b7a:             }
1:4e29b7a:             assert !srhs.hasNext() : "RHS contained more rows than LHS";
1:ea44997:         }
1:ea44997:     }
1:ea44997: 
1:a991b64:     public static void assertContentEquals(UnfilteredRowIterator lhs, UnfilteredRowIterator rhs)
1:ea44997:     {
1:a991b64:         assertEquals(lhs.partitionKey(), rhs.partitionKey());
1:a991b64:         assertEquals(lhs.partitionLevelDeletion(), rhs.partitionLevelDeletion());
1:ea44997:         // iterate columns
1:ea44997:         while (lhs.hasNext())
1:ea44997:         {
1:a991b64:             Unfiltered clhs = lhs.next();
1:a991b64:             assert rhs.hasNext() : "LHS contained more columns than RHS for " + lhs.partitionKey();
1:a991b64:             Unfiltered crhs = rhs.next();
1:ea44997: 
1:a991b64:             assertEquals("Mismatched row/tombstone for " + lhs.partitionKey(), clhs, crhs);
1:ea44997:         }
1:a991b64:         assert !rhs.hasNext() : "RHS contained more columns than LHS for " + lhs.partitionKey();
1:ea44997:     }
1:ea44997: 
1:71084e3:     /**
1:37317eb:      * @return A Context with chainable methods to configure and write a SSTable.
2:37317eb:      */
1:37317eb:     public static Context prepare()
1:ea44997:     {
1:37317eb:         return new Context();
1:ea44997:     }
1:71084e3: 
1:37317eb:     public static class Context
1:71084e3:     {
1:0e96e58:         private String ksname = KEYSPACENAME;
1:37317eb:         private String cfname = CFNAME;
1:37317eb:         private Descriptor dest = null;
1:37317eb:         private boolean cleanup = true;
1:37317eb:         private int generation = 0;
1:37317eb: 
1:37317eb:         Context() {}
1:37317eb: 
1:37317eb:         public Context ks(String ksname)
1:37317eb:         {
1:37317eb:             this.ksname = ksname;
1:37317eb:             return this;
1:71084e3:         }
1:12eb057: 
1:37317eb:         public Context cf(String cfname)
1:37317eb:         {
1:37317eb:             this.cfname = cfname;
1:37317eb:             return this;
1:37317eb:         }
1:9811668: 
3:37317eb:         /**
1:37317eb:          * Set an alternate path for the written SSTable: if unset, the SSTable will
1:37317eb:          * be cleaned up on JVM exit.
1:37317eb:          */
1:37317eb:         public Context dest(Descriptor dest)
1:37317eb:         {
1:37317eb:             this.dest = dest;
1:37317eb:             this.cleanup = false;
1:37317eb:             return this;
1:37317eb:         }
1:37317eb: 
1:37317eb:         /**
1:37317eb:          * Sets the generation number for the generated SSTable. Ignored if "dest()" is set.
1:37317eb:          */
1:37317eb:         public Context generation(int generation)
1:37317eb:         {
1:37317eb:             this.generation = generation;
1:37317eb:             return this;
1:37317eb:         }
1:37317eb: 
1:9ed2727:         public Collection<SSTableReader> write(Set<String> keys) throws IOException
1:37317eb:         {
1:a991b64:             Map<String, PartitionUpdate> map = new HashMap<>();
1:71084e3:             for (String key : keys)
1:71084e3:             {
1:a991b64:                 RowUpdateBuilder builder = new RowUpdateBuilder(Schema.instance.getCFMetaData(ksname, cfname), 0, key);
1:a991b64:                 builder.clustering(key).add("val", key);
1:a991b64:                 map.put(key, builder.buildUpdate());
1:71084e3:             }
1:37317eb:             return write(map);
1:71084e3:         }
1:71084e3: 
1:9ed2727:         public Collection<SSTableReader> write(SortedMap<DecoratedKey, PartitionUpdate> sorted) throws IOException
1:71084e3:         {
1:0d74c3e:             PartitionColumns.Builder builder = PartitionColumns.builder();
1:0d74c3e:             for (PartitionUpdate update : sorted.values())
1:0d74c3e:                 builder.addAll(update.columns());
1:a991b64:             final Iterator<Map.Entry<DecoratedKey, PartitionUpdate>> iter = sorted.entrySet().iterator();
1:1946cfd:             return write(sorted.size(), new Appender()
1:1946cfd:             {
1:0d74c3e:                 public SerializationHeader header()
1:0d74c3e:                 {
1:6584331:                     return new SerializationHeader(true, Schema.instance.getCFMetaData(ksname, cfname), builder.build(), EncodingStats.NO_STATS);
1:0d74c3e:                 }
1:0d74c3e: 
1:1946cfd:                 @Override
1:b09e60f:                 public boolean append(SSTableTxnWriter writer) throws IOException
1:1946cfd:                 {
1:1946cfd:                     if (!iter.hasNext())
1:1946cfd:                         return false;
1:a991b64:                     writer.append(iter.next().getValue().unfilteredIterator());
1:1946cfd:                     return true;
1:1946cfd:                 }
1:1946cfd:             });
1:1946cfd:         }
1:1946cfd: 
1:9ed2727:         public Collection<SSTableReader> write(Map<String, PartitionUpdate> entries) throws IOException
1:1946cfd:         {
1:a991b64:             SortedMap<DecoratedKey, PartitionUpdate> sorted = new TreeMap<>();
1:a991b64:             for (Map.Entry<String, PartitionUpdate> entry : entries.entrySet())
1:4e17ac4:                 sorted.put(Util.dk(entry.getKey()), entry.getValue());
1:4e17ac4: 
1:4e17ac4:             return write(sorted);
1:1946cfd:         }
1:71084e3: 
1:9ed2727:         public Collection<SSTableReader> write(int expectedSize, Appender appender) throws IOException
1:71084e3:         {
1:1946cfd:             File datafile = (dest == null) ? tempSSTableFile(ksname, cfname, generation) : new File(dest.filenameFor(Component.DATA));
1:9ed2727:             CFMetaData cfm = Schema.instance.getCFMetaData(ksname, cfname);
1:9ed2727:             ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(cfm.cfId);
1:0d74c3e:             SerializationHeader header = appender.header();
1:9ed2727:             SSTableTxnWriter writer = SSTableTxnWriter.create(cfs, datafile.getAbsolutePath(), expectedSize, ActiveRepairService.UNREPAIRED_SSTABLE, 0, header);
1:1946cfd:             while (appender.append(writer)) { /* pass */ }
1:9ed2727:             Collection<SSTableReader> readers = writer.finish(true);
1:9ed2727: 
1:1946cfd:             // mark all components for removal
1:37317eb:             if (cleanup)
1:9ed2727:                 for (SSTableReader reader: readers)
1:9ed2727:                     for (Component component : reader.components)
1:9ed2727:                         new File(reader.descriptor.filenameFor(component)).deleteOnExit();
1:9ed2727:             return readers;
1:71084e3:         }
1:37317eb:     }
1:1946cfd: 
1:1946cfd:     public static abstract class Appender
1:1946cfd:     {
1:0d74c3e:         public abstract SerializationHeader header();
1:1946cfd:         /** Called with an open writer until it returns false. */
1:b09e60f:         public abstract boolean append(SSTableTxnWriter writer) throws IOException;
1:1946cfd:     }
1:37317eb: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.SSTableFormat;
/////////////////////////////////////////////////////////////////////////
1:         File datafile = new File(new Descriptor(cfDir, keyspaceName, cfname, generation, SSTableFormat.Type.BIG).filenameFor(Component.DATA));
commit:d13a996
/////////////////////////////////////////////////////////////////////////
1:         File cfDir = new File(tempdir, keyspaceName + File.separator + cfname);
1:         cfDir.mkdirs();
1:         cfDir.deleteOnExit();
0:         File datafile = new File(new Descriptor(cfDir, keyspaceName, cfname, generation, Descriptor.Type.FINAL).filenameFor("Data.db"));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:6584331
/////////////////////////////////////////////////////////////////////////
1:                     return new SerializationHeader(true, Schema.instance.getCFMetaData(ksname, cfname), builder.build(), EncodingStats.NO_STATS);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.partitions.*;
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:     /*
/////////////////////////////////////////////////////////////////////////
1:     */
/////////////////////////////////////////////////////////////////////////
1:                 UnfilteredRowIterator ilhs = slhs.next();
1:                 UnfilteredRowIterator irhs = srhs.next();
1:     public static void assertContentEquals(UnfilteredRowIterator lhs, UnfilteredRowIterator rhs)
1:         assertEquals(lhs.partitionKey(), rhs.partitionKey());
1:         assertEquals(lhs.partitionLevelDeletion(), rhs.partitionLevelDeletion());
1:             Unfiltered clhs = lhs.next();
1:             assert rhs.hasNext() : "LHS contained more columns than RHS for " + lhs.partitionKey();
1:             Unfiltered crhs = rhs.next();
1:             assertEquals("Mismatched row/tombstone for " + lhs.partitionKey(), clhs, crhs);
1:         assert !rhs.hasNext() : "RHS contained more columns than LHS for " + lhs.partitionKey();
/////////////////////////////////////////////////////////////////////////
1:             Map<String, PartitionUpdate> map = new HashMap<>();
1:                 RowUpdateBuilder builder = new RowUpdateBuilder(Schema.instance.getCFMetaData(ksname, cfname), 0, key);
1:                 builder.clustering(key).add("val", key);
1:                 map.put(key, builder.buildUpdate());
0:         public SSTableReader write(SortedMap<DecoratedKey, PartitionUpdate> sorted) throws IOException
1:             final Iterator<Map.Entry<DecoratedKey, PartitionUpdate>> iter = sorted.entrySet().iterator();
/////////////////////////////////////////////////////////////////////////
1:                     writer.append(iter.next().getValue().unfilteredIterator());
0:         public SSTableReader write(Map<String, PartitionUpdate> entries) throws IOException
1:             SortedMap<DecoratedKey, PartitionUpdate> sorted = new TreeMap<>();
1:             for (Map.Entry<String, PartitionUpdate> entry : entries.entrySet())
/////////////////////////////////////////////////////////////////////////
0:             SerializationHeader header = SerializationHeader.make(Schema.instance.getCFMetaData(ksname, cfname), Collections.EMPTY_LIST);
0:             SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(datafile.getAbsolutePath()), expectedSize, ActiveRepairService.UNREPAIRED_SSTABLE, 0, header);
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
1:     public static ColumnFamily createCF(long mfda, int ldt, Cell... cols)
1:         for (Cell col : cols)
/////////////////////////////////////////////////////////////////////////
0:             Cell clhs = (Cell)lhs.next();
0:             Cell crhs = (Cell)rhs.next();
/////////////////////////////////////////////////////////////////////////
0:                 cf.addColumn(new Cell(Util.cellname(key), ByteBufferUtil.bytes(key), 0));
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:                 cf.addColumn(new Column(Util.cellname(key), ByteBufferUtil.bytes(key), 0));
commit:3a005df
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public static ColumnFamily createCF(long mfda, int ldt, Column... cols)
0:         for (Column col : cols)
/////////////////////////////////////////////////////////////////////////
0:             Column clhs = (Column)lhs.next();
0:             Column crhs = (Column)rhs.next();
commit:4d34917
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DeletionInfo;
0: import org.apache.cassandra.db.columniterator.OnDiskAtomIterator;
/////////////////////////////////////////////////////////////////////////
1:         cf.delete(new DeletionInfo(mfda, ldt));
/////////////////////////////////////////////////////////////////////////
0:             OnDiskAtomIterator ilhs = slhs.next();
0:             OnDiskAtomIterator irhs = srhs.next();
0:     public static void assertContentEquals(OnDiskAtomIterator lhs, OnDiskAtomIterator rhs) throws IOException
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(lcf.deletionInfo(), rcf.deletionInfo());
0:             IColumn clhs = (IColumn)lhs.next();
0:             IColumn crhs = (IColumn)rhs.next();
commit:4e17ac4
/////////////////////////////////////////////////////////////////////////
0:         public SSTableReader write(SortedMap<DecoratedKey, ColumnFamily> sorted) throws IOException
/////////////////////////////////////////////////////////////////////////
0:         public SSTableReader write(Map<String, ColumnFamily> entries) throws IOException
0:             SortedMap<DecoratedKey, ColumnFamily> sorted = new TreeMap<DecoratedKey, ColumnFamily>();
0:             for (Map.Entry<String, ColumnFamily> entry : entries.entrySet())
1:                 sorted.put(Util.dk(entry.getKey()), entry.getValue());
1: 
1:             return write(sorted);
commit:04c0b81
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static Logger logger = LoggerFactory.getLogger(SSTableUtils.class);
1: 
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:                 cf.addColumn(new Column(ByteBufferUtil.bytes(key), ByteBufferUtil.bytes(key), 0));
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0600d7d
/////////////////////////////////////////////////////////////////////////
0:         File datafile = new File(new Descriptor(cfDir, keyspaceName, cfname, generation).filenameFor(Component.DATA));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0d74c3e
/////////////////////////////////////////////////////////////////////////
1:             PartitionColumns.Builder builder = PartitionColumns.builder();
1:             for (PartitionUpdate update : sorted.values())
1:                 builder.addAll(update.columns());
1:                 public SerializationHeader header()
1:                 {
0:                     return new SerializationHeader(Schema.instance.getCFMetaData(ksname, cfname), builder.build(), EncodingStats.NO_STATS);
1:                 }
1: 
/////////////////////////////////////////////////////////////////////////
1:             SerializationHeader header = appender.header();
/////////////////////////////////////////////////////////////////////////
1:         public abstract SerializationHeader header();
commit:8704006
/////////////////////////////////////////////////////////////////////////
0:             SSTableReader reader = writer.finish(true);
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
/////////////////////////////////////////////////////////////////////////
1:         public Collection<SSTableReader> write(Set<String> keys) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         public Collection<SSTableReader> write(SortedMap<DecoratedKey, PartitionUpdate> sorted) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         public Collection<SSTableReader> write(Map<String, PartitionUpdate> entries) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         public Collection<SSTableReader> write(int expectedSize, Appender appender) throws IOException
1:             CFMetaData cfm = Schema.instance.getCFMetaData(ksname, cfname);
1:             ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(cfm.cfId);
0:             SerializationHeader header = SerializationHeader.make(cfm, Collections.EMPTY_LIST);
1:             SSTableTxnWriter writer = SSTableTxnWriter.create(cfs, datafile.getAbsolutePath(), expectedSize, ActiveRepairService.UNREPAIRED_SSTABLE, 0, header);
1:             Collection<SSTableReader> readers = writer.finish(true);
1: 
1:                 for (SSTableReader reader: readers)
1:                     for (Component component : reader.components)
1:                         new File(reader.descriptor.filenameFor(component)).deleteOnExit();
1:             return readers;
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         File datafile = new File(new Descriptor(cfDir, keyspaceName, cfname, generation).filenameFor("Data.db"));
/////////////////////////////////////////////////////////////////////////
1:                 public boolean append(SSTableTxnWriter writer) throws IOException
/////////////////////////////////////////////////////////////////////////
0:             SSTableTxnWriter writer = SSTableTxnWriter.create(datafile.getAbsolutePath(), expectedSize, ActiveRepairService.UNREPAIRED_SSTABLE, 0, header);
/////////////////////////////////////////////////////////////////////////
1:         public abstract boolean append(SSTableTxnWriter writer) throws IOException;
commit:4e29b7a
/////////////////////////////////////////////////////////////////////////
1:     public static void assertContentEquals(SSTableReader lhs, SSTableReader rhs) throws Exception
1:         try (ISSTableScanner slhs = lhs.getScanner();
1:              ISSTableScanner srhs = rhs.getScanner())
1:             while (slhs.hasNext())
1:             {
0:                 OnDiskAtomIterator ilhs = slhs.next();
1:                 assert srhs.hasNext() : "LHS contained more rows than RHS";
0:                 OnDiskAtomIterator irhs = srhs.next();
1:                 assertContentEquals(ilhs, irhs);
1:             }
1:             assert !srhs.hasNext() : "RHS contained more rows than LHS";
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bee53d7
commit:1fec4a4
/////////////////////////////////////////////////////////////////////////
0:         ISSTableScanner slhs = lhs.getScanner();
0:         ISSTableScanner srhs = rhs.getScanner();
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.compaction.ICompactionScanner;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
0: import org.apache.cassandra.io.sstable.format.SSTableWriter;
/////////////////////////////////////////////////////////////////////////
0:         ICompactionScanner slhs = lhs.getScanner();
0:         ICompactionScanner srhs = rhs.getScanner();
/////////////////////////////////////////////////////////////////////////
0:             SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(datafile.getAbsolutePath()), expectedSize, ActiveRepairService.UNREPAIRED_SSTABLE, 0);
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:0de0b8c
/////////////////////////////////////////////////////////////////////////
0:             SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), expectedSize);
commit:a7b7214
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.ActiveRepairService;
/////////////////////////////////////////////////////////////////////////
0:             SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), expectedSize, ActiveRepairService.UNREPAIRED_SSTABLE);
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
1:     public SSTableUtils(String ksname, String cfname)
1:     {
1:         KEYSPACENAME = ksname;
1:         CFNAME = cfname;
1:     }
1: 
0:     /**/
1:         return createCF(KEYSPACENAME, CFNAME, mfda, ldt, cols);
1:     }
1: 
1:     public static ColumnFamily createCF(String ksname, String cfname, long mfda, int ldt, Cell... cols)
1:     {
1:         ColumnFamily cf = ArrayBackedSortedColumns.factory.create(ksname, cfname);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:                 cf.addColumn(new BufferCell(Util.cellname(key), ByteBufferUtil.bytes(key), 0));
commit:480a1a8
commit:27ed655
/////////////////////////////////////////////////////////////////////////
0:         SSTableScanner slhs = lhs.getScanner();
0:         SSTableScanner srhs = rhs.getScanner();
author:belliottsmith
-------------------------------------------------------------------------------
commit:4e95953
/////////////////////////////////////////////////////////////////////////
0:         File datafile = new File(new Descriptor(keyspaceDir, keyspaceName, cfname, generation, Descriptor.Type.FINAL).filenameFor("Data.db"));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9639f95
/////////////////////////////////////////////////////////////////////////
0:     public static void assertContentEquals(SSTableReader lhs, SSTableReader rhs)
/////////////////////////////////////////////////////////////////////////
0:     public static void assertContentEquals(OnDiskAtomIterator lhs, OnDiskAtomIterator rhs)
commit:7588f74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:5204575
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily cf = ArrayBackedSortedColumns.factory.create(KEYSPACENAME, CFNAME);
/////////////////////////////////////////////////////////////////////////
0:                 ColumnFamily cf = ArrayBackedSortedColumns.factory.create(ksname, cfname);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1:     // first configured keyspace and cf
1:     public static String KEYSPACENAME = "Keyspace1";
0:         ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(KEYSPACENAME, CFNAME);
1:     public static File tempSSTableFile(String keyspaceName, String cfname) throws IOException
1:         return tempSSTableFile(keyspaceName, cfname, 0);
1:     public static File tempSSTableFile(String keyspaceName, String cfname, int generation) throws IOException
1:         File tempdir = File.createTempFile(keyspaceName, cfname);
0:         File keyspaceDir = new File(tempdir, keyspaceName);
0:         keyspaceDir.mkdir();
0:         keyspaceDir.deleteOnExit();
0:         File datafile = new File(new Descriptor(keyspaceDir, keyspaceName, cfname, generation, false).filenameFor("Data.db"));
/////////////////////////////////////////////////////////////////////////
1:         private String ksname = KEYSPACENAME;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
commit:2b0797b
/////////////////////////////////////////////////////////////////////////
0:         SSTableScanner slhs = lhs.getDirectScanner(null);
0:         SSTableScanner srhs = rhs.getDirectScanner(null);
commit:aa76394
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.*;
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(TABLENAME, CFNAME);
/////////////////////////////////////////////////////////////////////////
0:                 ColumnFamily cf = TreeMapBackedSortedColumns.factory.create(ksname, cfname);
commit:01bc564
/////////////////////////////////////////////////////////////////////////
0:         SSTableScanner slhs = lhs.getDirectScanner();
0:         SSTableScanner srhs = rhs.getDirectScanner();
commit:a4b1e10
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         SSTableScanner slhs = lhs.getDirectScanner();
0:         SSTableScanner srhs = rhs.getDirectScanner();
commit:3d4e07f
/////////////////////////////////////////////////////////////////////////
commit:ea44997
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.columniterator.IColumnIterator;
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
0:     public static void assertContentEquals(SSTableReader lhs, SSTableReader rhs) throws IOException
1:     {
0:         SSTableScanner slhs = lhs.getDirectScanner(2048);
0:         SSTableScanner srhs = rhs.getDirectScanner(2048);
0:         while (slhs.hasNext())
1:         {
0:             IColumnIterator ilhs = slhs.next();
0:             assert srhs.hasNext() : "LHS contained more rows than RHS";
0:             IColumnIterator irhs = srhs.next();
0:             assertContentEquals(ilhs, irhs);
1:         }
0:         assert !srhs.hasNext() : "RHS contained more rows than LHS";
1:     }
1: 
0:     public static void assertContentEquals(IColumnIterator lhs, IColumnIterator rhs) throws IOException
1:     {
0:         assertEquals(lhs.getKey(), rhs.getKey());
0:         // check metadata
0:         ColumnFamily lcf = lhs.getColumnFamily();
0:         ColumnFamily rcf = rhs.getColumnFamily();
0:         if (lcf == null)
1:         {
0:             if (rcf == null)
0:                 return;
0:             throw new AssertionError("LHS had no content for " + rhs.getKey());
1:         }
0:         else if (rcf == null)
0:             throw new AssertionError("RHS had no content for " + lhs.getKey());
0:         assertEquals(lcf.getMarkedForDeleteAt(), rcf.getMarkedForDeleteAt());
0:         assertEquals(lcf.getLocalDeletionTime(), rcf.getLocalDeletionTime());
1:         // iterate columns
1:         while (lhs.hasNext())
1:         {
0:             IColumn clhs = lhs.next();
0:             assert rhs.hasNext() : "LHS contained more columns than RHS for " + lhs.getKey();
0:             IColumn crhs = rhs.next();
1: 
0:             assertEquals("Mismatched columns for " + lhs.getKey(), clhs, crhs);
1:         }
0:         assert !rhs.hasNext() : "RHS contained more columns than LHS for " + lhs.getKey();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             reader.acquireReference();
commit:abebf52
/////////////////////////////////////////////////////////////////////////
0:         @Deprecated
commit:1946cfd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.Util;
1: 
/////////////////////////////////////////////////////////////////////////
0:             SortedMap<DecoratedKey, ColumnFamily> sorted = new TreeMap<DecoratedKey, ColumnFamily>();
0:                 sorted.put(Util.dk(entry.getKey()), entry.getValue());
1: 
0:             final Iterator<Map.Entry<DecoratedKey, ColumnFamily>> iter = sorted.entrySet().iterator();
1:             return write(sorted.size(), new Appender()
1:                 @Override
0:                 public boolean append(SSTableWriter writer) throws IOException
1:                 {
1:                     if (!iter.hasNext())
1:                         return false;
0:                     Map.Entry<DecoratedKey, ColumnFamily> entry = iter.next();
0:                     writer.append(entry.getKey(), entry.getValue());
1:                     return true;
1:                 }
1:             });
/////////////////////////////////////////////////////////////////////////
0:             SortedMap<DecoratedKey, ByteBuffer> sorted = new TreeMap<DecoratedKey, ByteBuffer>();
0:                 sorted.put(writer.partitioner.decorateKey(entry.getKey()), entry.getValue());
0:             final Iterator<Map.Entry<DecoratedKey, ByteBuffer>> iter = sorted.entrySet().iterator();
0:             return write(sorted.size(), new Appender()
1:             {
0:                 @Override
0:                 public boolean append(SSTableWriter writer) throws IOException
1:                 {
0:                     if (!iter.hasNext())
0:                         return false;
0:                     Map.Entry<DecoratedKey, ByteBuffer> entry = iter.next();
0:                     writer.append(entry.getKey(), entry.getValue());
0:                     return true;
1:                 }
0:             });
1:         }
1: 
0:         public SSTableReader write(int expectedSize, Appender appender) throws IOException
1:         {
1:             File datafile = (dest == null) ? tempSSTableFile(ksname, cfname, generation) : new File(dest.filenameFor(Component.DATA));
0:             SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), expectedSize);
0:             long start = System.currentTimeMillis();
1:             while (appender.append(writer)) { /* pass */ }
1:             // mark all components for removal
0:                 for (Component component : reader.components)
0:                     new File(reader.descriptor.filenameFor(component)).deleteOnExit();
1: 
1:     public static abstract class Appender
1:     {
1:         /** Called with an open writer until it returns false. */
0:         public abstract boolean append(SSTableWriter writer) throws IOException;
1:     }
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import java.util.HashMap;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.SortedMap;
0: import java.util.TreeMap;
0: import org.apache.cassandra.db.Column;
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.IColumn;
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new Column(ByteBuffer.wrap(key.getBytes()), ByteBuffer.wrap(key.getBytes()), 0));
/////////////////////////////////////////////////////////////////////////
0:         Map<ByteBuffer, ByteBuffer> map = new HashMap<ByteBuffer, ByteBuffer>();
0:             map.put(ByteBuffer.wrap(entry.getKey().getBytes()), ByteBuffer.wrap(Arrays.copyOf(buffer.getData(), buffer.getLength())));
0:     public static SSTableReader writeRawSSTable(String tablename, String cfname, Map<ByteBuffer, ByteBuffer> entries) throws IOException
0:         SortedMap<DecoratedKey, ByteBuffer> sortedEntries = new TreeMap<DecoratedKey, ByteBuffer>();
0:         for (Map.Entry<ByteBuffer, ByteBuffer> entry : entries.entrySet())
0:         for (Map.Entry<DecoratedKey, ByteBuffer> entry : sortedEntries.entrySet())
commit:9d32382
/////////////////////////////////////////////////////////////////////////
0:     public static ColumnFamily createCF(long mfda, int ldt, IColumn... cols)
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new Column(key.getBytes(), key.getBytes(), 0));
commit:e34283c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         new File(writer.descriptor.filenameFor(Component.PRIMARY_INDEX)).deleteOnExit();
0:         new File(writer.descriptor.filenameFor(Component.FILTER)).deleteOnExit();
commit:b324537
/////////////////////////////////////////////////////////////////////////
0:         new File(writer.desc.filenameFor(Component.PRIMARY_INDEX)).deleteOnExit();
0:         new File(writer.desc.filenameFor(Component.FILTER)).deleteOnExit();
commit:b4386e7
/////////////////////////////////////////////////////////////////////////
0:         SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), entries.size());
commit:aca77ec
commit:fc73007
/////////////////////////////////////////////////////////////////////////
0:         File datafile = tempSSTableFile(tablename, cfname);
0:         new File(writer.indexFilename()).deleteOnExit();
0:         new File(writer.filterFilename()).deleteOnExit();
1: 
commit:d0056e8
/////////////////////////////////////////////////////////////////////////
0:         File datafile = new File(new Descriptor(tabledir, tablename, cfname, 0, false).filenameFor("Data.db"));
1:         if (!datafile.createNewFile())
1:             throw new IOException("unable to create file " + datafile);
commit:1067d37
/////////////////////////////////////////////////////////////////////////
0:         File datafile = new File(new Descriptor(tabledir, tablename, cfname, 0,
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0:     public static ColumnFamily createCF(IClock mfda, int ldt, IColumn... cols)
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new Column(key.getBytes(), key.getBytes(), new TimestampClock(0)));
commit:8a3543a
/////////////////////////////////////////////////////////////////////////
commit:17f3dbb
/////////////////////////////////////////////////////////////////////////
0:         TABLENAME = DatabaseDescriptor.getTables().iterator().next();
0:         CFNAME = Table.open(TABLENAME).getColumnFamilies().iterator().next();
commit:86eaf90
/////////////////////////////////////////////////////////////////////////
1: 
1: package org.apache.cassandra.io.sstable;
commit:5d4371a
/////////////////////////////////////////////////////////////////////////
0:         return writer.closeAndOpenReader();
commit:4922a87
/////////////////////////////////////////////////////////////////////////
0:             TABLENAME = DatabaseDescriptor.getTables().iterator().next();
commit:dc6e4fe
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataOutputBuffer;
commit:71084e3
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
0: import java.util.TreeMap;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.Column;
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.Table;
0: import org.apache.cassandra.service.StorageService;
1: /**
0:  * TODO: These methods imitate Memtable.writeSortedKeys to some degree, but
0:  * because it is so monolithic, we can't reuse much.
1:  */
0:     // first configured table and cf
0:     public static String TABLENAME;
0:     public static String CFNAME;
0:     static
0:         try
1:         {
0:             TABLENAME = DatabaseDescriptor.getTables().get(0);
0:             CFNAME = Table.open(TABLENAME).getColumnFamilies().iterator().next();
1:         }
0:         catch(IOException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
0:     public static File tempSSTableFile(String tablename, String cfname) throws IOException
0:         File tempdir = File.createTempFile(tablename, cfname);
1:         if(!tempdir.delete() || !tempdir.mkdir())
1:             throw new IOException("Temporary directory creation failed.");
1:         tempdir.deleteOnExit();
0:         File tabledir = new File(tempdir, tablename);
0:         tabledir.mkdir();
0:         tabledir.deleteOnExit();
0:         return File.createTempFile(cfname + "-",
0:                                    "-" + SSTable.TEMPFILE_MARKER + "-Data.db",
0:                                    tabledir);
1:     }
1: 
0:     public static SSTableReader writeSSTable(Set<String> keys) throws IOException
1:     {
0:         TreeMap<String, ColumnFamily> map = new TreeMap<String, ColumnFamily>();
1:         for (String key : keys)
0:             ColumnFamily cf = ColumnFamily.create(TABLENAME, CFNAME);
0:             cf.addColumn(new Column(key.getBytes(), key.getBytes(), 0));
0:             map.put(key, cf);
0:         return writeSSTable(map);
1:     }
1: 
0:     public static SSTableReader writeSSTable(SortedMap<String, ColumnFamily> entries) throws IOException
1:     {
0:         TreeMap<String, byte[]> map = new TreeMap<String, byte[]>();
0:         for (Map.Entry<String, ColumnFamily> entry : entries.entrySet())
1:         {
0:             DataOutputBuffer buffer = new DataOutputBuffer();
0:             ColumnFamily.serializer().serializeWithIndexes(entry.getValue(), buffer);
0:             map.put(entry.getKey(), buffer.getData());
1:         }
0:         return writeRawSSTable(TABLENAME, CFNAME, map);
1:     }
1: 
0:     public static SSTableReader writeRawSSTable(String tablename, String cfname, SortedMap<String, byte[]> entries) throws IOException
1:     {
0:         File f = tempSSTableFile(tablename, cfname);
0:         SSTableWriter writer = new SSTableWriter(f.getAbsolutePath(), entries.size(), StorageService.getPartitioner());
0:         for (Map.Entry<String, byte[]> entry : entries.entrySet())
0:             writer.append(writer.partitioner.decorateKey(entry.getKey()),
0:                           entry.getValue());
0:         new File(writer.indexFilename()).deleteOnExit();
0:         new File(writer.filterFilename()).deleteOnExit();
0:         return writer.closeAndOpenReader(1.0);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:718b65e
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
commit:37317eb
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return A Context with chainable methods to configure and write a SSTable.
1:      */
1:     public static Context prepare()
1:         return new Context();
1:     }
1: 
1:     public static class Context
1:     {
0:         private String ksname = TABLENAME;
1:         private String cfname = CFNAME;
1:         private Descriptor dest = null;
1:         private boolean cleanup = true;
1:         private int generation = 0;
1: 
1:         Context() {}
1: 
1:         public Context ks(String ksname)
1:             this.ksname = ksname;
1:             return this;
1:         public Context cf(String cfname)
1:             this.cfname = cfname;
1:             return this;
1:         /**
1:          * Set an alternate path for the written SSTable: if unset, the SSTable will
1:          * be cleaned up on JVM exit.
1:          */
1:         public Context dest(Descriptor dest)
1:         {
1:             this.dest = dest;
1:             this.cleanup = false;
1:             return this;
1:         }
1:         /**
1:          * Sets the generation number for the generated SSTable. Ignored if "dest()" is set.
1:          */
1:         public Context generation(int generation)
1:         {
1:             this.generation = generation;
1:             return this;
1:         }
0:         public SSTableReader write(Set<String> keys) throws IOException
1:         {
0:             Map<String, ColumnFamily> map = new HashMap<String, ColumnFamily>();
0:             for (String key : keys)
1:             {
0:                 ColumnFamily cf = ColumnFamily.create(ksname, cfname);
0:                 cf.addColumn(new Column(ByteBuffer.wrap(key.getBytes()), ByteBuffer.wrap(key.getBytes()), 0));
0:                 map.put(key, cf);
1:             }
1:             return write(map);
1:         }
1: 
0:         public SSTableReader write(Map<String, ColumnFamily> entries) throws IOException
1:         {
0:             Map<ByteBuffer, ByteBuffer> map = new HashMap<ByteBuffer, ByteBuffer>();
0:             for (Map.Entry<String, ColumnFamily> entry : entries.entrySet())
1:             {
0:                 DataOutputBuffer buffer = new DataOutputBuffer();
0:                 ColumnFamily.serializer().serializeWithIndexes(entry.getValue(), buffer);
0:                 map.put(ByteBuffer.wrap(entry.getKey().getBytes()),
0:                         ByteBuffer.wrap(buffer.asByteArray()));
1:             }
0:             return writeRaw(map);
1:         }
1: 
1:         /**
0:          * @Deprecated: Writes the binary content of a row, which should be encapsulated.
1:          */
0:         public SSTableReader writeRaw(Map<ByteBuffer, ByteBuffer> entries) throws IOException
1:         {
0:             File datafile = (dest == null) ? tempSSTableFile(ksname, cfname, generation) : new File(dest.filenameFor(Component.DATA));
0:             SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), entries.size());
0:             SortedMap<DecoratedKey, ByteBuffer> sortedEntries = new TreeMap<DecoratedKey, ByteBuffer>();
0:             for (Map.Entry<ByteBuffer, ByteBuffer> entry : entries.entrySet())
0:                 sortedEntries.put(writer.partitioner.decorateKey(entry.getKey()), entry.getValue());
0:             for (Map.Entry<DecoratedKey, ByteBuffer> entry : sortedEntries.entrySet())
0:                 writer.append(entry.getKey(), entry.getValue());
0:             SSTableReader reader = writer.closeAndOpenReader();
1:             if (cleanup)
0:                 for (Component comp : reader.components)
0:                     new File(reader.descriptor.filenameFor(comp)).deleteOnExit();
0:             return reader;
1:         }
1:     }
commit:434564d
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: import org.apache.cassandra.db.*;
/////////////////////////////////////////////////////////////////////////
0:         Map<String, ColumnFamily> map = new HashMap<String, ColumnFamily>();
/////////////////////////////////////////////////////////////////////////
0:     public static SSTableReader writeSSTable(Map<String, ColumnFamily> entries) throws IOException
0:         Map<byte[], byte[]> map = new HashMap<byte[], byte[]>();
0:             map.put(entry.getKey().getBytes(), buffer.getData());
0:     public static SSTableReader writeRawSSTable(String tablename, String cfname, Map<byte[], byte[]> entries) throws IOException
0:     public static SSTableReader writeRawSSTable(File datafile, String tablename, String cfname, Map<byte[], byte[]> entries) throws IOException
/////////////////////////////////////////////////////////////////////////
0:         SortedMap<DecoratedKey, byte[]> sortedEntries = new TreeMap<DecoratedKey, byte[]>();
0:         for (Map.Entry<byte[], byte[]> entry : entries.entrySet())
0:             sortedEntries.put(writer.partitioner.decorateKey(entry.getKey()), entry.getValue());
0:         for (Map.Entry<DecoratedKey, byte[]> entry : sortedEntries.entrySet())
0:             writer.append(entry.getKey(), entry.getValue());
commit:12eb057
/////////////////////////////////////////////////////////////////////////
0:     public static String TABLENAME = "Keyspace1";
1:     public static String CFNAME = "Standard1";
/////////////////////////////////////////////////////////////////////////
0:         return writeRawSSTable(null, tablename, cfname, entries);
0:     }
1: 
0:     public static SSTableReader writeRawSSTable(File datafile, String tablename, String cfname, SortedMap<String, byte[]> entries) throws IOException
0:     {
0:         boolean temporary = false;
0:         if (datafile == null)
0:         {
0:             datafile = tempSSTableFile(tablename, cfname);
0:             temporary = true;
0:         }
0:         SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), entries.size(), StorageService.getPartitioner());
0:         if (temporary)
0:         {
0:             new File(writer.indexFilename()).deleteOnExit();
0:             new File(writer.filterFilename()).deleteOnExit();
0:         }
commit:9811668
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.IColumn;
/////////////////////////////////////////////////////////////////////////
0:     public static ColumnFamily createCF(long mfda, int ldt, IColumn... cols)
0:     {
0:         ColumnFamily cf = ColumnFamily.create(TABLENAME, CFNAME);
0:         cf.delete(ldt, mfda);
0:         for (IColumn col : cols)
1:             cf.addColumn(col);
1:         return cf;
0:     }
1: 
commit:81d713a
/////////////////////////////////////////////////////////////////////////
0:         File datafile = new File(new SSTable.Descriptor(tabledir, tablename, cfname, 0,
0:                                                         false).filenameFor("Data.db"));
0:         assert datafile.createNewFile();
1:         datafile.deleteOnExit();
1:         return datafile;
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
0:         return tempSSTableFile(tablename, cfname, 0);
0:     }
1: 
0:     public static File tempSSTableFile(String tablename, String cfname, int generation) throws IOException
0:     {
/////////////////////////////////////////////////////////////////////////
0:         File datafile = new File(new Descriptor(tabledir, tablename, cfname, generation, false).filenameFor("Data.db"));
/////////////////////////////////////////////////////////////////////////
0:         return writeRawSSTable(tablename, cfname, entries, 0);
0:     }
1: 
0:     public static SSTableReader writeRawSSTable(String tablename, String cfname, Map<ByteBuffer, ByteBuffer> entries, int generation) throws IOException
0:     {
0:         File datafile = tempSSTableFile(tablename, cfname, generation);
author:Jun Rao
-------------------------------------------------------------------------------
commit:f62d4ec
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
0: */
0: package org.apache.cassandra.io;
0: 
1: import java.io.File;
1: import java.io.IOException;
0: 
0: import java.util.Map;
0: import java.util.SortedMap;
0: 
0: import org.apache.cassandra.dht.IPartitioner;
0: 
1: public class SSTableUtils
0: {
0:     public static File tempSSTableFileName(String cfname) throws IOException
0:     {
0:         return File.createTempFile(cfname + "-", "-" + SSTable.TEMPFILE_MARKER + "-Data.db");
0:     }
0: 
0:     public static SSTableReader writeSSTable(String cfname, SortedMap<String, byte[]> entries, int expectedKeys, IPartitioner partitioner, double cacheFraction) throws IOException
0:     {
0:         File f = tempSSTableFileName(cfname);
0:         SSTableWriter writer = new SSTableWriter(f.getAbsolutePath(), expectedKeys, partitioner);
0:         for (Map.Entry<String, byte[]> entry : entries.entrySet())
0:         {
0:             writer.append(writer.partitioner.decorateKey(entry.getKey()), entry.getValue());
0:         }
0:         return writer.closeAndOpenReader(cacheFraction);
0:     }
0: }
============================================================================