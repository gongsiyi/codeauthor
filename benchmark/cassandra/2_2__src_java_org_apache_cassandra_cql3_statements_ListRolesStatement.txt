1:879b694: /*
1:879b694:  * Licensed to the Apache Software Foundation (ASF) under one
1:879b694:  * or more contributor license agreements.  See the NOTICE file
1:879b694:  * distributed with this work for additional information
1:879b694:  * regarding copyright ownership.  The ASF licenses this file
1:879b694:  * to you under the Apache License, Version 2.0 (the
1:879b694:  * "License"); you may not use this file except in compliance
1:879b694:  * with the License.  You may obtain a copy of the License at
1:879b694:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:879b694:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:879b694:  */
1:879b694: package org.apache.cassandra.cql3.statements;
1:879b694: 
1:879b694: import java.util.Collections;
1:879b694: import java.util.List;
1:879b694: import java.util.Set;
1:879b694: 
1:879b694: import com.google.common.collect.ImmutableList;
1:879b694: import com.google.common.collect.Lists;
1:879b694: 
1:217721a: import org.apache.cassandra.auth.*;
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:879b694: import org.apache.cassandra.cql3.*;
1:879b694: import org.apache.cassandra.db.marshal.BooleanType;
1:a1b574e: import org.apache.cassandra.db.marshal.MapType;
1:879b694: import org.apache.cassandra.db.marshal.UTF8Type;
1:879b694: import org.apache.cassandra.exceptions.*;
1:879b694: import org.apache.cassandra.service.ClientState;
1:879b694: import org.apache.cassandra.transport.messages.ResultMessage;
1:879b694: 
1:879b694: public class ListRolesStatement extends AuthorizationStatement
1:879b694: {
1:879b694:     // pseudo-virtual cf as the actual datasource is dependent on the IRoleManager impl
1:9797511:     private static final String KS = SchemaConstants.AUTH_KEYSPACE_NAME;
1:879b694:     private static final String CF = AuthKeyspace.ROLES;
1:879b694: 
1:a1b574e:     private static final MapType optionsType = MapType.getInstance(UTF8Type.instance, UTF8Type.instance, false);
1:879b694:     private static final List<ColumnSpecification> metadata =
1:a1b574e:         ImmutableList.of(new ColumnSpecification(KS, CF, new ColumnIdentifier("role", true), UTF8Type.instance),
1:a1b574e:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("super", true), BooleanType.instance),
1:a1b574e:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("login", true), BooleanType.instance),
1:a1b574e:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("options", true), optionsType));
1:879b694: 
1:217721a:     private final RoleResource grantee;
1:879b694:     private final boolean recursive;
1:879b694: 
1:879b694:     public ListRolesStatement()
1:879b694:     {
1:879b694:         this(new RoleName(), false);
1:879b694:     }
1:879b694: 
1:879b694:     public ListRolesStatement(RoleName grantee, boolean recursive)
1:879b694:     {
1:217721a:         this.grantee = grantee.hasName() ? RoleResource.role(grantee.getName()) : null;
1:879b694:         this.recursive = recursive;
1:879b694:     }
1:879b694: 
1:879b694:     public void validate(ClientState state) throws UnauthorizedException, InvalidRequestException
1:879b694:     {
1:879b694:         state.ensureNotAnonymous();
1:879b694: 
1:879b694:         if ((grantee != null) && !DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
1:879b694:             throw new InvalidRequestException(String.format("%s doesn't exist", grantee));
1:879b694:     }
1:879b694: 
1:879b694:     public void checkAccess(ClientState state) throws InvalidRequestException
1:879b694:     {
1:879b694:     }
1:879b694: 
1:879b694:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:879b694:     {
1:217721a:         // If the executing user has DESCRIBE permission on the root roles resource, let them list any and all roles
1:217721a:         boolean hasRootLevelSelect = DatabaseDescriptor.getAuthorizer()
1:217721a:                                                        .authorize(state.getUser(), RoleResource.root())
1:217721a:                                                        .contains(Permission.DESCRIBE);
1:217721a:         if (hasRootLevelSelect)
1:879b694:         {
1:879b694:             if (grantee == null)
1:879b694:                 return resultMessage(DatabaseDescriptor.getRoleManager().getAllRoles());
1:879b694:             else
1:879b694:                 return resultMessage(DatabaseDescriptor.getRoleManager().getRoles(grantee, recursive));
1:879b694:         }
1:879b694:         else
1:879b694:         {
1:217721a:             RoleResource currentUser = RoleResource.role(state.getUser().getName());
1:879b694:             if (grantee == null)
1:217721a:                 return resultMessage(DatabaseDescriptor.getRoleManager().getRoles(currentUser, recursive));
1:217721a:             if (DatabaseDescriptor.getRoleManager().getRoles(currentUser, true).contains(grantee))
1:879b694:                 return resultMessage(DatabaseDescriptor.getRoleManager().getRoles(grantee, recursive));
1:879b694:             else
1:217721a:                 throw new UnauthorizedException(String.format("You are not authorized to view roles granted to %s ", grantee.getRoleName()));
1:879b694:         }
1:879b694:     }
1:879b694: 
1:217721a:     private ResultMessage resultMessage(Set<RoleResource> roles)
1:879b694:     {
1:879b694:         if (roles.isEmpty())
1:879b694:             return new ResultMessage.Void();
1:879b694: 
1:217721a:         List<RoleResource> sorted = Lists.newArrayList(roles);
1:879b694:         Collections.sort(sorted);
1:879b694:         return formatResults(sorted);
1:879b694:     }
1:879b694: 
1:879b694:     // overridden in ListUsersStatement to include legacy metadata
1:217721a:     protected ResultMessage formatResults(List<RoleResource> sortedRoles)
1:879b694:     {
1:879b694:         ResultSet result = new ResultSet(metadata);
1:879b694: 
1:879b694:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
1:217721a:         for (RoleResource role : sortedRoles)
1:879b694:         {
1:217721a:             result.addColumnValue(UTF8Type.instance.decompose(role.getRoleName()));
1:879b694:             result.addColumnValue(BooleanType.instance.decompose(roleManager.isSuper(role)));
1:879b694:             result.addColumnValue(BooleanType.instance.decompose(roleManager.canLogin(role)));
1:a1b574e:             result.addColumnValue(optionsType.decompose(roleManager.getCustomOptions(role)));
1:879b694:         }
1:879b694:         return new ResultMessage.Rows(result);
1:879b694:     }
1:879b694: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:     private static final String KS = SchemaConstants.AUTH_KEYSPACE_NAME;
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:a1b574e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.MapType;
/////////////////////////////////////////////////////////////////////////
1:     private static final MapType optionsType = MapType.getInstance(UTF8Type.instance, UTF8Type.instance, false);
1:         ImmutableList.of(new ColumnSpecification(KS, CF, new ColumnIdentifier("role", true), UTF8Type.instance),
1:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("super", true), BooleanType.instance),
1:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("login", true), BooleanType.instance),
1:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("options", true), optionsType));
/////////////////////////////////////////////////////////////////////////
1:             result.addColumnValue(optionsType.decompose(roleManager.getCustomOptions(role)));
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
/////////////////////////////////////////////////////////////////////////
1:     private final RoleResource grantee;
/////////////////////////////////////////////////////////////////////////
1:         this.grantee = grantee.hasName() ? RoleResource.role(grantee.getName()) : null;
/////////////////////////////////////////////////////////////////////////
1:         // If the executing user has DESCRIBE permission on the root roles resource, let them list any and all roles
1:         boolean hasRootLevelSelect = DatabaseDescriptor.getAuthorizer()
1:                                                        .authorize(state.getUser(), RoleResource.root())
1:                                                        .contains(Permission.DESCRIBE);
1:         if (hasRootLevelSelect)
/////////////////////////////////////////////////////////////////////////
1:             RoleResource currentUser = RoleResource.role(state.getUser().getName());
1:                 return resultMessage(DatabaseDescriptor.getRoleManager().getRoles(currentUser, recursive));
1:             if (DatabaseDescriptor.getRoleManager().getRoles(currentUser, true).contains(grantee))
1:                 throw new UnauthorizedException(String.format("You are not authorized to view roles granted to %s ", grantee.getRoleName()));
1:     private ResultMessage resultMessage(Set<RoleResource> roles)
1:         List<RoleResource> sorted = Lists.newArrayList(roles);
1:     protected ResultMessage formatResults(List<RoleResource> sortedRoles)
1:         for (RoleResource role : sortedRoles)
1:             result.addColumnValue(UTF8Type.instance.decompose(role.getRoleName()));
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import com.google.common.collect.ImmutableList;
1: import com.google.common.collect.Lists;
1: 
0: import org.apache.cassandra.auth.AuthKeyspace;
0: import org.apache.cassandra.auth.IRoleManager;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.db.marshal.BooleanType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: public class ListRolesStatement extends AuthorizationStatement
1: {
1:     // pseudo-virtual cf as the actual datasource is dependent on the IRoleManager impl
0:     private static final String KS = AuthKeyspace.NAME;
1:     private static final String CF = AuthKeyspace.ROLES;
1: 
1:     private static final List<ColumnSpecification> metadata =
0:        ImmutableList.of(new ColumnSpecification(KS, CF, new ColumnIdentifier("role", true), UTF8Type.instance),
0:                         new ColumnSpecification(KS, CF, new ColumnIdentifier("super", true), BooleanType.instance),
0:                         new ColumnSpecification(KS, CF, new ColumnIdentifier("login", true), BooleanType.instance));
1: 
0:     private final String grantee;
1:     private final boolean recursive;
1: 
1:     public ListRolesStatement()
1:     {
1:         this(new RoleName(), false);
1:     }
1: 
1:     public ListRolesStatement(RoleName grantee, boolean recursive)
1:     {
0:         this.grantee = grantee.getName();
1:         this.recursive = recursive;
1:     }
1: 
1:     public void validate(ClientState state) throws UnauthorizedException, InvalidRequestException
1:     {
1:         state.ensureNotAnonymous();
1: 
1:         if ((grantee != null) && !DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
1:             throw new InvalidRequestException(String.format("%s doesn't exist", grantee));
1:     }
1: 
1:     public void checkAccess(ClientState state) throws InvalidRequestException
1:     {
1:     }
1: 
1:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:     {
0:         if (state.getUser().isSuper())
1:         {
1:             if (grantee == null)
1:                 return resultMessage(DatabaseDescriptor.getRoleManager().getAllRoles());
1:             else
1:                 return resultMessage(DatabaseDescriptor.getRoleManager().getRoles(grantee, recursive));
1:         }
1:         else
1:         {
1:             if (grantee == null)
0:                 return resultMessage(DatabaseDescriptor.getRoleManager().getRoles(state.getUser().getName(), recursive));
0:             if (DatabaseDescriptor.getRoleManager().getRoles(state.getUser().getName(), true).contains(grantee))
1:                 return resultMessage(DatabaseDescriptor.getRoleManager().getRoles(grantee, recursive));
1:             else
0:                 throw new UnauthorizedException(String.format("You are not authorized to view roles granted to %s ", grantee));
1:         }
1:     }
1: 
0:     private ResultMessage resultMessage(Set<String> roles)
1:     {
1:         if (roles.isEmpty())
1:             return new ResultMessage.Void();
1: 
0:         List<String> sorted = Lists.newArrayList(roles);
1:         Collections.sort(sorted);
1:         return formatResults(sorted);
1:     }
1: 
1:     // overridden in ListUsersStatement to include legacy metadata
0:     protected ResultMessage formatResults(List<String> sortedRoles)
1:     {
1:         ResultSet result = new ResultSet(metadata);
1: 
1:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
0:         for (String role : sortedRoles)
1:         {
0:             result.addColumnValue(UTF8Type.instance.decompose(role));
1:             result.addColumnValue(BooleanType.instance.decompose(roleManager.isSuper(role)));
1:             result.addColumnValue(BooleanType.instance.decompose(roleManager.canLogin(role)));
1:         }
1:         return new ResultMessage.Rows(result);
1:     }
1: }
============================================================================