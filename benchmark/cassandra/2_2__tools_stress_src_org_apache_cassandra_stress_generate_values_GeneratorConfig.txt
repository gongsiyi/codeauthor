1:7536429: /*
1:7536429:  *
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  *
1:7536429:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  *
1:7536429:  * Unless required by applicable law or agreed to in writing,
1:7536429:  * software distributed under the License is distributed on an
1:7536429:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7536429:  * KIND, either express or implied.  See the License for the
1:7536429:  * specific language governing permissions and limitations
1:7536429:  * under the License.
1:7536429:  *
1:7536429:  */
1:7536429: package org.apache.cassandra.stress.generate.values;
3:7536429: 
1:6c579a0: import java.io.Serializable;
1:6c579a0: import java.nio.ByteBuffer;
1:6c579a0: 
1:7536429: import org.apache.cassandra.stress.generate.Distribution;
1:7536429: import org.apache.cassandra.stress.generate.DistributionFactory;
1:7536429: import org.apache.cassandra.utils.ByteBufferUtil;
1:7536429: import org.apache.cassandra.utils.MurmurHash;
1:7536429: 
1:7536429: public class GeneratorConfig implements Serializable
1:7536429: {
1:7536429:     public final long salt;
1:7536429: 
1:7536429:     private final DistributionFactory clusteringDistributions;
1:7536429:     private final DistributionFactory sizeDistributions;
1:7536429:     private final DistributionFactory identityDistributions;
1:7536429: 
1:7536429:     public GeneratorConfig(String seedStr, DistributionFactory clusteringDistributions, DistributionFactory sizeDistributions, DistributionFactory identityDistributions)
1:7536429:     {
1:7536429:         this.clusteringDistributions = clusteringDistributions;
1:7536429:         this.sizeDistributions = sizeDistributions;
1:7536429:         this.identityDistributions = identityDistributions;
1:7536429:         ByteBuffer buf = ByteBufferUtil.bytes(seedStr);
1:7536429:         long[] hash = new long[2];
1:7536429:         MurmurHash.hash3_x64_128(buf, buf.position(), buf.remaining(), 0, hash);
1:7536429:         salt = hash[0];
1:7536429:     }
1:7536429: 
1:7536429:     Distribution getClusteringDistribution(DistributionFactory deflt)
1:7536429:     {
1:7536429:         return (clusteringDistributions == null ? deflt : clusteringDistributions).get();
1:7536429:     }
1:7536429: 
1:7536429:     Distribution getIdentityDistribution(DistributionFactory deflt)
1:7536429:     {
1:7536429:         return (identityDistributions == null ? deflt : identityDistributions).get();
1:7536429:     }
1:7536429: 
1:7536429:     Distribution getSizeDistribution(DistributionFactory deflt)
1:7536429:     {
1:7536429:         return (sizeDistributions == null ? deflt : sizeDistributions).get();
1:7536429:     }
1:7536429: 
1:938faa2:     public String getConfigAsString()
1:938faa2:     {
1:938faa2:         StringBuilder sb = new StringBuilder();
1:938faa2:         if (clusteringDistributions != null){
1:938faa2:             sb.append(String.format("Clustering: %s;", clusteringDistributions.getConfigAsString()));
1:938faa2:         }
1:938faa2:         if (sizeDistributions != null){
1:938faa2:             sb.append(String.format("Size: %s;", sizeDistributions.getConfigAsString()));
1:938faa2:         }
1:938faa2:         if (identityDistributions != null){
1:938faa2:             sb.append(String.format("Identity: %s;", identityDistributions.getConfigAsString()));
1:938faa2:         }
1:938faa2:         return sb.toString();
1:938faa2:     }
1:7536429: }
============================================================================
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
1:     public String getConfigAsString()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         if (clusteringDistributions != null){
1:             sb.append(String.format("Clustering: %s;", clusteringDistributions.getConfigAsString()));
1:         }
1:         if (sizeDistributions != null){
1:             sb.append(String.format("Size: %s;", sizeDistributions.getConfigAsString()));
1:         }
1:         if (identityDistributions != null){
1:             sb.append(String.format("Identity: %s;", identityDistributions.getConfigAsString()));
1:         }
1:         return sb.toString();
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: import java.nio.ByteBuffer;
1: 
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.stress.generate.values;
1: 
1: import org.apache.cassandra.stress.generate.Distribution;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.MurmurHash;
1: 
1: 
0: import java.io.Serializable;
0: import java.nio.ByteBuffer;
0: import java.util.Collections;
0: import java.util.Map;
1: 
1: public class GeneratorConfig implements Serializable
1: {
1:     public final long salt;
1: 
1:     private final DistributionFactory clusteringDistributions;
1:     private final DistributionFactory sizeDistributions;
1:     private final DistributionFactory identityDistributions;
1: 
1:     public GeneratorConfig(String seedStr, DistributionFactory clusteringDistributions, DistributionFactory sizeDistributions, DistributionFactory identityDistributions)
1:     {
1:         this.clusteringDistributions = clusteringDistributions;
1:         this.sizeDistributions = sizeDistributions;
1:         this.identityDistributions = identityDistributions;
1:         ByteBuffer buf = ByteBufferUtil.bytes(seedStr);
1:         long[] hash = new long[2];
1:         MurmurHash.hash3_x64_128(buf, buf.position(), buf.remaining(), 0, hash);
1:         salt = hash[0];
1:     }
1: 
1:     Distribution getClusteringDistribution(DistributionFactory deflt)
1:     {
1:         return (clusteringDistributions == null ? deflt : clusteringDistributions).get();
1:     }
1: 
1:     Distribution getIdentityDistribution(DistributionFactory deflt)
1:     {
1:         return (identityDistributions == null ? deflt : identityDistributions).get();
1:     }
1: 
1:     Distribution getSizeDistribution(DistributionFactory deflt)
1:     {
1:         return (sizeDistributions == null ? deflt : sizeDistributions).get();
1:     }
1: 
1: }
============================================================================