1:1aeca2b: /*
1:1aeca2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:1aeca2b:  * or more contributor license agreements.  See the NOTICE file
1:1aeca2b:  * distributed with this work for additional information
1:1aeca2b:  * regarding copyright ownership.  The ASF licenses this file
1:1aeca2b:  * to you under the Apache License, Version 2.0 (the
1:1aeca2b:  * "License"); you may not use this file except in compliance
1:1aeca2b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1aeca2b:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
1:a67f779: 
1:e7a385a: import java.nio.ByteBuffer;
1:781018c: import java.nio.CharBuffer;
1:781018c: import java.nio.charset.Charset;
1:781018c: import java.nio.charset.CharsetEncoder;
1:781018c: import java.nio.charset.CharacterCodingException;
6:835669a: 
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Json;
1:c7b02d1: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:781018c: import org.apache.cassandra.serializers.MarshalException;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.AsciiSerializer;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:acf1b18: import org.apache.cassandra.utils.ByteBufferUtil;
1:835669a: 
1:05d8ffd: public class AsciiType extends AbstractType<String>
1:a67f779: {
1:242b717:     public static final AsciiType instance = new AsciiType();
1:a67f779: 
1:07594ee:     AsciiType() {super(ComparisonType.BYTE_ORDER);} // singleton
1:a67f779: 
1:781018c:     private final ThreadLocal<CharsetEncoder> encoder = new ThreadLocal<CharsetEncoder>()
1:781018c:     {
1:781018c:         @Override
1:781018c:         protected CharsetEncoder initialValue()
1:781018c:         {
1:781018c:             return Charset.forName("US-ASCII").newEncoder();
1:781018c:         }
1:781018c:     };
1:781018c: 
1:ad38251:     public ByteBuffer fromString(String source)
1:acf1b18:     {
1:781018c:         // the encoder must be reset each time it's used, hence the thread-local storage
1:781018c:         CharsetEncoder theEncoder = encoder.get();
1:781018c:         theEncoder.reset();
1:781018c: 
1:781018c:         try
1:781018c:         {
1:781018c:             return theEncoder.encode(CharBuffer.wrap(source));
1:781018c:         }
1:781018c:         catch (CharacterCodingException exc)
1:781018c:         {
1:781018c:             throw new MarshalException(String.format("Invalid ASCII character in string literal: %s", exc));
1:781018c:         }
1:a67f779:     }
1:acf1b18: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             return new Constants.Value(fromString((String) parsed));
1:c7b02d1:         }
1:c7b02d1:         catch (ClassCastException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected an ascii string, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:6b1bd17:             return '"' + Json.quoteAsJsonString(ByteBufferUtil.string(buffer, Charset.forName("US-ASCII"))) + '"';
1:c7b02d1:         }
1:c7b02d1:         catch (CharacterCodingException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new AssertionError("ascii value contained non-ascii characters: ", exc);
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.ASCII;
1:e9c6742:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<String> getSerializer()
1:e9c6742:     {
1:e9c6742:         return AsciiSerializer.instance;
1:acf1b18:     }
1:a67f779: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:9b5af91
commit:6b1bd17
/////////////////////////////////////////////////////////////////////////
1:             return '"' + Json.quoteAsJsonString(ByteBufferUtil.string(buffer, Charset.forName("US-ASCII"))) + '"';
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Json;
1: 
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             return new Constants.Value(fromString((String) parsed));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Expected an ascii string, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         try
1:         {
0:             return '"' + new String(Json.JSON_STRING_ENCODER.quoteAsString(ByteBufferUtil.string(buffer, Charset.forName("US-ASCII")))) + '"';
1:         }
1:         catch (CharacterCodingException exc)
1:         {
1:             throw new AssertionError("ascii value contained non-ascii characters: ", exc);
1:         }
1:     }
1: 
commit:3a94b33
commit:781018c
/////////////////////////////////////////////////////////////////////////
1: import java.nio.CharBuffer;
1: import java.nio.charset.Charset;
1: import java.nio.charset.CharsetEncoder;
1: import java.nio.charset.CharacterCodingException;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     private final ThreadLocal<CharsetEncoder> encoder = new ThreadLocal<CharsetEncoder>()
1:     {
1:         @Override
1:         protected CharsetEncoder initialValue()
1:         {
1:             return Charset.forName("US-ASCII").newEncoder();
1:         }
1:     };
1: 
/////////////////////////////////////////////////////////////////////////
1:         // the encoder must be reset each time it's used, hence the thread-local storage
1:         CharsetEncoder theEncoder = encoder.get();
1:         theEncoder.reset();
1: 
1:         try
1:         {
1:             return theEncoder.encode(CharBuffer.wrap(source));
1:         }
1:         catch (CharacterCodingException exc)
1:         {
1:             throw new MarshalException(String.format("Invalid ASCII character in string literal: %s", exc));
1:         }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     AsciiType() {super(ComparisonType.BYTE_ORDER);} // singleton
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.compareUnsigned(o1, o2);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isByteOrderComparable()
1:     {
0:         return true;
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.AsciiSerializer;
0: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<String> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.AsciiSerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         return AsciiSerializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return AsciiSerializer.instance.getString(bytes);
0:         return AsciiSerializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         AsciiSerializer.instance.validate(bytes);
1: 
0:     public AbstractSerializer<String> asComposer()
1:     {
1:         return AsciiSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.cql3.Term;
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.STRING);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.ASCII;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.bytes(source, Charsets.US_ASCII);
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return JdbcAscii.instance.decompose(value);
commit:2395fb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.term.AsciiTerm;
/////////////////////////////////////////////////////////////////////////
0:             return AsciiTerm.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.term.MarshalException e)
0:             throw new MarshalException(e.getMessage());
0:         return AsciiTerm.instance.toString(s);
/////////////////////////////////////////////////////////////////////////
0:         return AsciiTerm.instance.getString(bytes);
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9404c65
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.JdbcAscii;
/////////////////////////////////////////////////////////////////////////
0:             return JdbcAscii.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return JdbcAscii.instance.getString(bytes);
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.AsciiTerm;
/////////////////////////////////////////////////////////////////////////
0:         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:835669a
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isSigned()
0:     {
0:         return false;
0:     }
1: 
0:     public boolean isCaseSensitive()
0:     {
0:         return true;
0:     }
1: 
0:     public boolean isCurrency()
0:     {
0:         return false;
0:     }
1: 
0:     public int getPrecision(String obj)
0:     {
0:         return -1;
0:     }
1: 
0:     public int getScale(String obj)
0:     {
0:         return -1;
0:     }
1: 
0:     public int getJdbcType()
0:     {
0:         return Types.VARCHAR;
0:     }
1: 
0:     public boolean needsQuotes()
0:     {
0:         return true;
0:     }
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer decompose(String value)
0:     {
0:         return ByteBufferUtil.bytes(value, Charsets.US_ASCII);
0:     }
0: 
0:         return decompose(source);
commit:7e8e6d3
commit:e40b07d
/////////////////////////////////////////////////////////////////////////
0:         for (int i = bytes.position(); i < bytes.limit(); i++)
0:             byte b = bytes.get(i);
commit:46ea05f
/////////////////////////////////////////////////////////////////////////
0: import java.nio.charset.CharacterCodingException;
/////////////////////////////////////////////////////////////////////////
0:         try
0:         {
0:             return ByteBufferUtil.string(bytes, Charsets.US_ASCII);
0:         }
0:         catch (CharacterCodingException e)
0:         {
0:             throw new MarshalException("Invalid ascii bytes " + ByteBufferUtil.bytesToHex(bytes));
0:         }
commit:ad38251
/////////////////////////////////////////////////////////////////////////
0: 
1:     public ByteBuffer fromString(String source)
0:     {
0:         return ByteBuffer.wrap(source.getBytes(Charsets.US_ASCII));
0:     }
commit:cdb07b1
/////////////////////////////////////////////////////////////////////////
commit:2d9b4ba
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
0: 
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: 
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.string(bytes, Charsets.US_ASCII);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public String getString(ByteBuffer bytes)
0:             return new String(bytes.array(),bytes.position()+bytes.arrayOffset(),bytes.remaining(), "US-ASCII");
commit:242b717
/////////////////////////////////////////////////////////////////////////
1:     public static final AsciiType instance = new AsciiType();
0: 
0:     AsciiType() {} // singleton
0: 
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:438f387
/////////////////////////////////////////////////////////////////////////
0: public class AsciiType extends BytesType
0:     @Override
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
0: 
0: import java.io.UnsupportedEncodingException;
0: 
0: public class AsciiType extends AbstractType
0: {
0:     public int compare(byte[] o1, byte[] o2)
0:     {
0:         int length = Math.max(o1.length, o2.length);
0:         for (int i = 0; i < length; i++)
0:         {
0:             int index = i + 1;
0:             if (index > o1.length && index <= o2.length)
0:             {
0:                 return -1;
0:             }
0:             if (index > o2.length && index <= o1.length)
0:             {
0:                 return 1;
0:             }
0: 
0:             int delta = o1[i] - o2[i];
0:             if (delta != 0)
0:             {
0:                 return delta;
0:             }
0:         }
0:         return 0;
0:     }
0: 
0:     public String getString(byte[] bytes)
0:     {
0:         try
0:         {
0:             return new String(bytes, "US-ASCII");
0:         }
0:         catch (UnsupportedEncodingException e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:     }
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public String toString(String s)
0:     {
0:         return s;
0:     }
0: 
commit:d4c800b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Class<String> getType()
0:     {
0:         return String.class;
0:     }
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
1: public class AsciiType extends AbstractType<String>
/////////////////////////////////////////////////////////////////////////
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
0:     {
0:         return BytesType.bytesCompare(o1, o2);
0:     }
0: 
0:     public String compose(ByteBuffer bytes)
0:     {
0:         return getString(bytes);
0:     }
0: 
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         // 0-127
0:         for (int i = 0; i < bytes.remaining(); i++)
0:         {
0:             byte b = bytes.array()[bytes.arrayOffset() + bytes.position() + i]; 
0:             if (b < 0 || b > 127)
0:                 throw new MarshalException("Invalid byte for ascii: " + Byte.toString(b));
0:         }
0:     }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
0:             byte b = bytes.get(bytes.position() + i);
============================================================================