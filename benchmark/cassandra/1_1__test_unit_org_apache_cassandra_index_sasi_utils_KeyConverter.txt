1:7d857b4: /*
1:7d857b4:  * Licensed to the Apache Software Foundation (ASF) under one
1:7d857b4:  * or more contributor license agreements.  See the NOTICE file
1:7d857b4:  * distributed with this work for additional information
1:7d857b4:  * regarding copyright ownership.  The ASF licenses this file
1:7d857b4:  * to you under the Apache License, Version 2.0 (the
1:7d857b4:  * "License"); you may not use this file except in compliance
1:7d857b4:  * with the License.  You may obtain a copy of the License at
1:7d857b4:  *
1:7d857b4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7d857b4:  *
1:7d857b4:  * Unless required by applicable law or agreed to in writing, software
1:7d857b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d857b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d857b4:  * See the License for the specific language governing permissions and
1:7d857b4:  * limitations under the License.
1:7d857b4:  */
1:7d857b4: 
1:7d857b4: package org.apache.cassandra.index.sasi.utils;
1:7d857b4: 
1:7d857b4: import java.nio.ByteBuffer;
1:7d857b4: 
1:7d857b4: import org.apache.cassandra.db.*;
1:7d857b4: import org.apache.cassandra.db.marshal.*;
1:7d857b4: import org.apache.cassandra.dht.*;
1:7d857b4: import org.apache.cassandra.index.sasi.*;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.*;
1:7d857b4: import org.apache.cassandra.utils.*;
1:7d857b4: 
1:7d857b4: public class KeyConverter implements KeyFetcher
1:7d857b4: {
1:7d857b4:     public final static KeyConverter instance = new KeyConverter();
1:7d857b4: 
1:7d857b4:     KeyConverter()
1:7d857b4:     {}
1:7d857b4: 
1:7d857b4:     @Override
1:7d857b4:     public DecoratedKey getPartitionKey(long offset)
1:7d857b4:     {
1:7d857b4:         return dk(offset);
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     @Override
1:7d857b4:     public Clustering getClustering(long offset)
1:7d857b4:     {
1:7d857b4:         return ck(offset);
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     @Override
1:7d857b4: 
1:7d857b4:     public RowKey getRowKey(long partitionOffset, long rowOffset)
1:7d857b4:     {
1:7d857b4:         return new RowKey(getPartitionKey(partitionOffset), getClustering(rowOffset), new ClusteringComparator(LongType.instance));
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public static DecoratedKey dk(long partitionOffset)
1:7d857b4:     {
1:7d857b4:         ByteBuffer buf = ByteBuffer.allocate(8);
1:7d857b4:         buf.putLong(partitionOffset);
1:7d857b4:         buf.flip();
1:7d857b4:         Long hashed = MurmurHash.hash2_64(buf, buf.position(), buf.remaining(), 0);
1:7d857b4:         return new BufferDecoratedKey(new Murmur3Partitioner.LongToken(hashed), buf);
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public static Clustering ck(long offset)
1:7d857b4:     {
1:7d857b4:         return Clustering.make(ByteBufferUtil.bytes(offset));
1:7d857b4:     }
1:7d857b4: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.dht.*;
1: import org.apache.cassandra.index.sasi.*;
1: import org.apache.cassandra.index.sasi.disk.*;
1: import org.apache.cassandra.utils.*;
1: 
1: public class KeyConverter implements KeyFetcher
1: {
1:     public final static KeyConverter instance = new KeyConverter();
1: 
1:     KeyConverter()
1:     {}
1: 
1:     @Override
1:     public DecoratedKey getPartitionKey(long offset)
1:     {
1:         return dk(offset);
1:     }
1: 
1:     @Override
1:     public Clustering getClustering(long offset)
1:     {
1:         return ck(offset);
1:     }
1: 
1:     @Override
1: 
1:     public RowKey getRowKey(long partitionOffset, long rowOffset)
1:     {
1:         return new RowKey(getPartitionKey(partitionOffset), getClustering(rowOffset), new ClusteringComparator(LongType.instance));
1:     }
1: 
1:     public static DecoratedKey dk(long partitionOffset)
1:     {
1:         ByteBuffer buf = ByteBuffer.allocate(8);
1:         buf.putLong(partitionOffset);
1:         buf.flip();
1:         Long hashed = MurmurHash.hash2_64(buf, buf.position(), buf.remaining(), 0);
1:         return new BufferDecoratedKey(new Murmur3Partitioner.LongToken(hashed), buf);
1:     }
1: 
1:     public static Clustering ck(long offset)
1:     {
1:         return Clustering.make(ByteBufferUtil.bytes(offset));
1:     }
1: }
============================================================================