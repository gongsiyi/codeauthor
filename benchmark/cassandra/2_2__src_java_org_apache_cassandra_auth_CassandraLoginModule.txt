1:7b0c716: /*
1:7b0c716:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b0c716:  * or more contributor license agreements.  See the NOTICE file
1:7b0c716:  * distributed with this work for additional information
1:7b0c716:  * regarding copyright ownership.  The ASF licenses this file
1:7b0c716:  * to you under the Apache License, Version 2.0 (the
1:7b0c716:  * "License"); you may not use this file except in compliance
1:7b0c716:  * with the License.  You may obtain a copy of the License at
1:7b0c716:  *
1:7b0c716:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7b0c716:  *
1:7b0c716:  * Unless required by applicable law or agreed to in writing, software
1:7b0c716:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7b0c716:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7b0c716:  * See the License for the specific language governing permissions and
1:7b0c716:  * limitations under the License.
1:7b0c716:  */
1:7b0c716: package org.apache.cassandra.auth;
1:7b0c716: 
1:7b0c716: import java.io.IOException;
1:7b0c716: import java.util.HashMap;
1:7b0c716: import java.util.Map;
1:7b0c716: import javax.security.auth.Subject;
1:7b0c716: import javax.security.auth.callback.*;
1:7b0c716: import javax.security.auth.login.FailedLoginException;
1:7b0c716: import javax.security.auth.login.LoginException;
1:7b0c716: import javax.security.auth.spi.LoginModule;
1:7b0c716: 
1:7b0c716: import org.slf4j.Logger;
1:7b0c716: import org.slf4j.LoggerFactory;
1:7b0c716: 
1:7b0c716: import org.apache.cassandra.config.DatabaseDescriptor;
1:7b0c716: import org.apache.cassandra.exceptions.AuthenticationException;
1:7b0c716: import org.apache.cassandra.service.StorageService;
1:7b0c716: 
1:7b0c716: /**
1:7b0c716:  * LoginModule which authenticates a user towards the Cassandra database using
1:7b0c716:  * the internal authentication mechanism.
1:7b0c716:  */
1:7b0c716: public class CassandraLoginModule implements LoginModule
1:7b0c716: {
1:7b0c716:     private static final Logger logger = LoggerFactory.getLogger(CassandraLoginModule.class);
1:7b0c716: 
1:7b0c716:     // initial state
1:7b0c716:     private Subject subject;
1:7b0c716:     private CallbackHandler callbackHandler;
1:7b0c716: 
1:7b0c716:     // the authentication status
1:7b0c716:     private boolean succeeded = false;
1:7b0c716:     private boolean commitSucceeded = false;
1:7b0c716: 
1:7b0c716:     // username and password
1:7b0c716:     private String username;
1:7b0c716:     private char[] password;
1:7b0c716: 
1:7b0c716:     private CassandraPrincipal principal;
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Initialize this {@code}LoginModule{@code}.
1:7b0c716:      *
1:7b0c716:      * @param subject the {@code}Subject{@code} to be authenticated. <p>
1:7b0c716:      * @param callbackHandler a {@code}CallbackHandler{@code} for communicating
1:7b0c716:      *        with the end user (prompting for user names and passwords, for example)
1:7b0c716:      * @param sharedState shared {@code}LoginModule{@code} state. This param is unused.
1:7b0c716:      * @param options options specified in the login {@code}Configuration{@code} for this particular
1:7b0c716:      *        {@code}LoginModule{@code}. This param is unused
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public void initialize(Subject subject,
1:7b0c716:                            CallbackHandler callbackHandler,
1:7b0c716:                            Map<java.lang.String, ?> sharedState,
1:7b0c716:                            Map<java.lang.String, ?> options)
1:7b0c716:     {
1:7b0c716:         this.subject = subject;
1:7b0c716:         this.callbackHandler = callbackHandler;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Authenticate the user, obtaining credentials from the CallbackHandler
1:7b0c716:      * supplied in {@code}initialize{@code}. As long as the configured
1:7b0c716:      * {@code}IAuthenticator{@code} supports the optional
1:7b0c716:      * {@code}legacyAuthenticate{@code} method, it can be used here.
1:7b0c716:      *
1:7b0c716:      * @return true in all cases since this {@code}LoginModule{@code}
1:7b0c716:      *         should not be ignored.
1:7b0c716:      * @exception FailedLoginException if the authentication fails.
1:7b0c716:      * @exception LoginException if this {@code}LoginModule{@code} is unable to
1:7b0c716:      * perform the authentication.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public boolean login() throws LoginException
1:7b0c716:     {
1:7b0c716:         // prompt for a user name and password
1:7b0c716:         if (callbackHandler == null)
1:7b0c716:         {
1:7b0c716:             logger.info("No CallbackHandler available for authentication");
1:7b0c716:             throw new LoginException("Authentication failed");
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         NameCallback nc = new NameCallback("username: ");
1:7b0c716:         PasswordCallback pc = new PasswordCallback("password: ", false);
1:7b0c716:         try
1:7b0c716:         {
1:7b0c716:             callbackHandler.handle(new Callback[]{nc, pc});
1:7b0c716:             username = nc.getName();
1:7b0c716:             char[] tmpPassword = pc.getPassword();
1:7b0c716:             if (tmpPassword == null)
1:7b0c716:                 tmpPassword = new char[0];
1:7b0c716:             password = new char[tmpPassword.length];
1:7b0c716:             System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
1:7b0c716:             pc.clearPassword();
1:7b0c716:         }
1:7b0c716:         catch (IOException | UnsupportedCallbackException e)
1:7b0c716:         {
1:7b0c716:             logger.info("Unexpected exception processing authentication callbacks", e);
1:7b0c716:             throw new LoginException("Authentication failed");
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         // verify the credentials
1:7b0c716:         try
1:7b0c716:         {
1:7b0c716:             authenticate();
1:7b0c716:         }
1:7b0c716:         catch (AuthenticationException e)
1:7b0c716:         {
1:7b0c716:             // authentication failed -- clean up
1:7b0c716:             succeeded = false;
1:7b0c716:             cleanUpInternalState();
1:7b0c716:             throw new FailedLoginException(e.getMessage());
1:7b0c716:         }
1:7b0c716: 
1:7b0c716:         succeeded = true;
1:7b0c716:         return true;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private void authenticate()
1:7b0c716:     {
1:7b0c716:         if (!StorageService.instance.isAuthSetupComplete())
1:7b0c716:             throw new AuthenticationException("Cannot login as server authentication setup is not yet completed");
1:7b0c716: 
1:7b0c716:         IAuthenticator authenticator = DatabaseDescriptor.getAuthenticator();
1:7b0c716:         Map<String, String> credentials = new HashMap<>();
1:7b0c716:         credentials.put(PasswordAuthenticator.USERNAME_KEY, username);
1:7b0c716:         credentials.put(PasswordAuthenticator.PASSWORD_KEY, String.valueOf(password));
1:7b0c716:         AuthenticatedUser user = authenticator.legacyAuthenticate(credentials);
1:7b0c716:         // Only actual users should be allowed to authenticate for JMX
1:7b0c716:         if (user.isAnonymous() || user.isSystem())
1:5fae533:             throw new AuthenticationException(String.format("Invalid user %s", user.getName()));
1:7b0c716: 
1:7b0c716:         // The LOGIN privilege is required to authenticate - c.f. ClientState::login
1:7b0c716:         if (!DatabaseDescriptor.getRoleManager().canLogin(user.getPrimaryRole()))
1:7b0c716:             throw new AuthenticationException(user.getName() + " is not permitted to log in");
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * This method is called if the LoginContext's overall authentication succeeded
1:7b0c716:      * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
1:7b0c716:      * succeeded).
1:7b0c716:      *
1:7b0c716:      * If this LoginModule's own authentication attempt succeeded (checked by
1:7b0c716:      * retrieving the private state saved by the {@code}login{@code} method),
1:7b0c716:      * then this method associates a {@code}CassandraPrincipal{@code}
1:7b0c716:      * with the {@code}Subject{@code}.
1:7b0c716:      * If this LoginModule's own authentication attempted failed, then this
1:7b0c716:      * method removes any state that was originally saved.
1:7b0c716:      *
1:7b0c716:      * @return true if this LoginModule's own login and commit attempts succeeded, false otherwise.
1:7b0c716:      * @exception LoginException if the commit fails.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public boolean commit() throws LoginException
1:7b0c716:     {
1:7b0c716:         if (!succeeded)
1:7b0c716:         {
1:7b0c716:             return false;
1:7b0c716:         }
1:7b0c716:         else
1:7b0c716:         {
1:7b0c716:             // add a Principal (authenticated identity)
1:7b0c716:             // to the Subject
1:7b0c716:             principal = new CassandraPrincipal(username);
1:7b0c716:             if (!subject.getPrincipals().contains(principal))
1:7b0c716:                 subject.getPrincipals().add(principal);
1:7b0c716: 
1:7b0c716:             cleanUpInternalState();
1:7b0c716:             commitSucceeded = true;
1:7b0c716:             return true;
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * This method is called if the LoginContext's  overall authentication failed.
1:7b0c716:      * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
1:7b0c716:      * did not succeed).
1:7b0c716:      *
1:7b0c716:      * If this LoginModule's own authentication attempt succeeded (checked by
1:7b0c716:      * retrieving the private state saved by the {@code}login{@code} and
1:7b0c716:      * {@code}commit{@code} methods), then this method cleans up any state that
1:7b0c716:      * was originally saved.
1:7b0c716:      *
1:7b0c716:      * @return false if this LoginModule's own login and/or commit attempts failed, true otherwise.
1:7b0c716:      * @throws LoginException if the abort fails.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public boolean abort() throws LoginException
1:7b0c716:     {
1:7b0c716:         if (!succeeded)
1:7b0c716:         {
1:7b0c716:             return false;
1:7b0c716:         }
1:7b0c716:         else if (!commitSucceeded)
1:7b0c716:         {
1:7b0c716:             // login succeeded but overall authentication failed
1:7b0c716:             succeeded = false;
1:7b0c716:             cleanUpInternalState();
1:7b0c716:             principal = null;
1:7b0c716:         }
1:7b0c716:         else
1:7b0c716:         {
1:7b0c716:             // overall authentication succeeded and commit succeeded,
1:7b0c716:             // but someone else's commit failed
1:7b0c716:             logout();
1:7b0c716:         }
1:7b0c716:         return true;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Logout the user.
1:7b0c716:      *
1:7b0c716:      * This method removes the principal that was added by the
1:7b0c716:      * {@code}commit{@code} method.
1:7b0c716:      *
1:7b0c716:      * @return true in all cases since this {@code}LoginModule{@code}
1:7b0c716:      *         should not be ignored.
1:7b0c716:      * @throws LoginException if the logout fails.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public boolean logout() throws LoginException
1:7b0c716:     {
1:7b0c716:         subject.getPrincipals().remove(principal);
1:7b0c716:         succeeded = false;
1:7b0c716:         cleanUpInternalState();
1:7b0c716:         principal = null;
1:7b0c716:         return true;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     private void cleanUpInternalState()
1:7b0c716:     {
1:7b0c716:         username = null;
1:7b0c716:         if (password != null)
1:7b0c716:         {
1:7b0c716:             for (int i = 0; i < password.length; i++)
1:7b0c716:                 password[i] = ' ';
1:7b0c716:             password = null;
1:7b0c716:         }
1:7b0c716:     }
1:7b0c716: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:5fae533
/////////////////////////////////////////////////////////////////////////
1:             throw new AuthenticationException(String.format("Invalid user %s", user.getName()));
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.*;
1: import javax.security.auth.login.FailedLoginException;
1: import javax.security.auth.login.LoginException;
1: import javax.security.auth.spi.LoginModule;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.exceptions.AuthenticationException;
1: import org.apache.cassandra.service.StorageService;
1: 
1: /**
1:  * LoginModule which authenticates a user towards the Cassandra database using
1:  * the internal authentication mechanism.
1:  */
1: public class CassandraLoginModule implements LoginModule
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(CassandraLoginModule.class);
1: 
1:     // initial state
1:     private Subject subject;
1:     private CallbackHandler callbackHandler;
1: 
1:     // the authentication status
1:     private boolean succeeded = false;
1:     private boolean commitSucceeded = false;
1: 
1:     // username and password
1:     private String username;
1:     private char[] password;
1: 
1:     private CassandraPrincipal principal;
1: 
1:     /**
1:      * Initialize this {@code}LoginModule{@code}.
1:      *
1:      * @param subject the {@code}Subject{@code} to be authenticated. <p>
1:      * @param callbackHandler a {@code}CallbackHandler{@code} for communicating
1:      *        with the end user (prompting for user names and passwords, for example)
1:      * @param sharedState shared {@code}LoginModule{@code} state. This param is unused.
1:      * @param options options specified in the login {@code}Configuration{@code} for this particular
1:      *        {@code}LoginModule{@code}. This param is unused
1:      */
1:     @Override
1:     public void initialize(Subject subject,
1:                            CallbackHandler callbackHandler,
1:                            Map<java.lang.String, ?> sharedState,
1:                            Map<java.lang.String, ?> options)
1:     {
1:         this.subject = subject;
1:         this.callbackHandler = callbackHandler;
1:     }
1: 
1:     /**
1:      * Authenticate the user, obtaining credentials from the CallbackHandler
1:      * supplied in {@code}initialize{@code}. As long as the configured
1:      * {@code}IAuthenticator{@code} supports the optional
1:      * {@code}legacyAuthenticate{@code} method, it can be used here.
1:      *
1:      * @return true in all cases since this {@code}LoginModule{@code}
1:      *         should not be ignored.
1:      * @exception FailedLoginException if the authentication fails.
1:      * @exception LoginException if this {@code}LoginModule{@code} is unable to
1:      * perform the authentication.
1:      */
1:     @Override
1:     public boolean login() throws LoginException
1:     {
1:         // prompt for a user name and password
1:         if (callbackHandler == null)
1:         {
1:             logger.info("No CallbackHandler available for authentication");
1:             throw new LoginException("Authentication failed");
1:         }
1: 
1:         NameCallback nc = new NameCallback("username: ");
1:         PasswordCallback pc = new PasswordCallback("password: ", false);
1:         try
1:         {
1:             callbackHandler.handle(new Callback[]{nc, pc});
1:             username = nc.getName();
1:             char[] tmpPassword = pc.getPassword();
1:             if (tmpPassword == null)
1:                 tmpPassword = new char[0];
1:             password = new char[tmpPassword.length];
1:             System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
1:             pc.clearPassword();
1:         }
1:         catch (IOException | UnsupportedCallbackException e)
1:         {
1:             logger.info("Unexpected exception processing authentication callbacks", e);
1:             throw new LoginException("Authentication failed");
1:         }
1: 
1:         // verify the credentials
1:         try
1:         {
1:             authenticate();
1:         }
1:         catch (AuthenticationException e)
1:         {
1:             // authentication failed -- clean up
1:             succeeded = false;
1:             cleanUpInternalState();
1:             throw new FailedLoginException(e.getMessage());
1:         }
1: 
1:         succeeded = true;
1:         return true;
1:     }
1: 
1:     private void authenticate()
1:     {
1:         if (!StorageService.instance.isAuthSetupComplete())
1:             throw new AuthenticationException("Cannot login as server authentication setup is not yet completed");
1: 
1:         IAuthenticator authenticator = DatabaseDescriptor.getAuthenticator();
1:         Map<String, String> credentials = new HashMap<>();
1:         credentials.put(PasswordAuthenticator.USERNAME_KEY, username);
1:         credentials.put(PasswordAuthenticator.PASSWORD_KEY, String.valueOf(password));
1:         AuthenticatedUser user = authenticator.legacyAuthenticate(credentials);
1:         // Only actual users should be allowed to authenticate for JMX
1:         if (user.isAnonymous() || user.isSystem())
0:             throw new AuthenticationException("Invalid user");
1: 
1:         // The LOGIN privilege is required to authenticate - c.f. ClientState::login
1:         if (!DatabaseDescriptor.getRoleManager().canLogin(user.getPrimaryRole()))
1:             throw new AuthenticationException(user.getName() + " is not permitted to log in");
1:     }
1: 
1:     /**
1:      * This method is called if the LoginContext's overall authentication succeeded
1:      * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
1:      * succeeded).
1:      *
1:      * If this LoginModule's own authentication attempt succeeded (checked by
1:      * retrieving the private state saved by the {@code}login{@code} method),
1:      * then this method associates a {@code}CassandraPrincipal{@code}
1:      * with the {@code}Subject{@code}.
1:      * If this LoginModule's own authentication attempted failed, then this
1:      * method removes any state that was originally saved.
1:      *
1:      * @return true if this LoginModule's own login and commit attempts succeeded, false otherwise.
1:      * @exception LoginException if the commit fails.
1:      */
1:     @Override
1:     public boolean commit() throws LoginException
1:     {
1:         if (!succeeded)
1:         {
1:             return false;
1:         }
1:         else
1:         {
1:             // add a Principal (authenticated identity)
1:             // to the Subject
1:             principal = new CassandraPrincipal(username);
1:             if (!subject.getPrincipals().contains(principal))
1:                 subject.getPrincipals().add(principal);
1: 
1:             cleanUpInternalState();
1:             commitSucceeded = true;
1:             return true;
1:         }
1:     }
1: 
1:     /**
1:      * This method is called if the LoginContext's  overall authentication failed.
1:      * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
1:      * did not succeed).
1:      *
1:      * If this LoginModule's own authentication attempt succeeded (checked by
1:      * retrieving the private state saved by the {@code}login{@code} and
1:      * {@code}commit{@code} methods), then this method cleans up any state that
1:      * was originally saved.
1:      *
1:      * @return false if this LoginModule's own login and/or commit attempts failed, true otherwise.
1:      * @throws LoginException if the abort fails.
1:      */
1:     @Override
1:     public boolean abort() throws LoginException
1:     {
1:         if (!succeeded)
1:         {
1:             return false;
1:         }
1:         else if (!commitSucceeded)
1:         {
1:             // login succeeded but overall authentication failed
1:             succeeded = false;
1:             cleanUpInternalState();
1:             principal = null;
1:         }
1:         else
1:         {
1:             // overall authentication succeeded and commit succeeded,
1:             // but someone else's commit failed
1:             logout();
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Logout the user.
1:      *
1:      * This method removes the principal that was added by the
1:      * {@code}commit{@code} method.
1:      *
1:      * @return true in all cases since this {@code}LoginModule{@code}
1:      *         should not be ignored.
1:      * @throws LoginException if the logout fails.
1:      */
1:     @Override
1:     public boolean logout() throws LoginException
1:     {
1:         subject.getPrincipals().remove(principal);
1:         succeeded = false;
1:         cleanUpInternalState();
1:         principal = null;
1:         return true;
1:     }
1: 
1:     private void cleanUpInternalState()
1:     {
1:         username = null;
1:         if (password != null)
1:         {
1:             for (int i = 0; i < password.length; i++)
1:                 password[i] = ' ';
1:             password = null;
1:         }
1:     }
1: }
============================================================================