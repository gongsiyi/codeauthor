1:e2a0d75: /*
1:e2a0d75:  * Licensed to the Apache Software Foundation (ASF) under one
1:e2a0d75:  * or more contributor license agreements.  See the NOTICE file
1:e2a0d75:  * distributed with this work for additional information
1:e2a0d75:  * regarding copyright ownership.  The ASF licenses this file
1:e2a0d75:  * to you under the Apache License, Version 2.0 (the
1:e2a0d75:  * "License"); you may not use this file except in compliance
1:e2a0d75:  * with the License.  You may obtain a copy of the License at
1:e2a0d75:  *
1:e2a0d75:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e2a0d75:  *
1:e2a0d75:  * Unless required by applicable law or agreed to in writing, software
1:e2a0d75:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2a0d75:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2a0d75:  * See the License for the specific language governing permissions and
1:e2a0d75:  * limitations under the License.
1:e2a0d75:  */
1:e2a0d75: 
1:e2a0d75: package org.apache.cassandra.dht.tokenallocator;
1:e2a0d75: 
1:e2a0d75: import java.util.List;
1:e2a0d75: import java.util.Map;
1:e2a0d75: import java.util.NavigableMap;
1:e2a0d75: import java.util.Random;
1:e2a0d75: 
1:e2a0d75: import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
1:e2a0d75: 
1:e2a0d75: import org.apache.cassandra.dht.IPartitioner;
1:e2a0d75: import org.apache.cassandra.dht.Token;
1:e2a0d75: 
1:e2a0d75: /**
1:e2a0d75:  * Base class for {@link NoReplicationTokenAllocatorTest} and {@link AbstractReplicationAwareTokenAllocatorTest},
1:e2a0d75:  */
1:e2a0d75: abstract class TokenAllocatorTestBase
1:e2a0d75: {
1:e2a0d75:     protected static final int TARGET_CLUSTER_SIZE = 250;
1:e2a0d75:     protected static final int MAX_VNODE_COUNT = 64;
1:e2a0d75: 
1:e2a0d75:     interface TestReplicationStrategy extends ReplicationStrategy<Unit>
1:e2a0d75:     {
1:e2a0d75:         void addUnit(Unit n);
1:e2a0d75: 
1:e2a0d75:         void removeUnit(Unit n);
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Returns a list of all replica units for given token.
1:e2a0d75:          */
1:e2a0d75:         List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens);
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Returns the start of the token span that is replicated in this token.
1:e2a0d75:          * Note: Though this is not trivial to see, the replicated span is always contiguous. A token in the same
1:e2a0d75:          * group acts as a barrier; if one is not found the token replicates everything up to the replica'th distinct
1:e2a0d75:          * group seen in front of it.
1:e2a0d75:          */
1:e2a0d75:         Token replicationStart(Token token, Unit unit, NavigableMap<Token, Unit> sortedTokens);
1:e2a0d75: 
1:e2a0d75:         /**
1:e2a0d75:          * Multiplier for the acceptable disbalance in the cluster. With some strategies it is harder to achieve good
1:e2a0d75:          * results.
1:e2a0d75:          */
1:e2a0d75:         double spreadExpectation();
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     interface TokenCount
1:e2a0d75:     {
1:e2a0d75:         int tokenCount(int perUnitCount, Random rand);
1:e2a0d75: 
1:e2a0d75:         double spreadExpectation();
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     TokenCount fixedTokenCount = new TokenCount()
1:e2a0d75:     {
1:e2a0d75:         public int tokenCount(int perUnitCount, Random rand)
1:e2a0d75:         {
1:e2a0d75:             return perUnitCount;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public double spreadExpectation()
1:e2a0d75:         {
1:e2a0d75:             return 4;  // High tolerance to avoid flakiness.
1:e2a0d75:         }
1:e2a0d75:     };
1:e2a0d75: 
1:e2a0d75:     TokenCount varyingTokenCount = new TokenCount()
1:e2a0d75:     {
1:e2a0d75:         public int tokenCount(int perUnitCount, Random rand)
1:e2a0d75:         {
1:e2a0d75:             if (perUnitCount == 1) return 1;
1:e2a0d75:             // 25 to 175%
1:e2a0d75:             return rand.nextInt(perUnitCount * 3 / 2) + (perUnitCount + 3) / 4;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public double spreadExpectation()
1:e2a0d75:         {
1:e2a0d75:             return 8;  // High tolerance to avoid flakiness.
1:e2a0d75:         }
1:e2a0d75:     };
1:e2a0d75: 
1:e2a0d75:     Random seededRand = new Random(2);
1:e2a0d75: 
1:e2a0d75:     public void random(Map<Token, Unit> map, TestReplicationStrategy rs,
1:e2a0d75:                               int unitCount, TokenCount tc, int perUnitCount, IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         System.out.format("\nRandom generation of %d units with %d tokens each\n", unitCount, perUnitCount);
1:e2a0d75:         Random rand = seededRand;
1:e2a0d75:         for (int i = 0; i < unitCount; i++)
1:e2a0d75:         {
1:e2a0d75:             Unit unit = new Unit();
1:e2a0d75:             rs.addUnit(unit);
1:e2a0d75:             int tokens = tc.tokenCount(perUnitCount, rand);
1:e2a0d75:             for (int j = 0; j < tokens; j++)
1:e2a0d75:             {
1:e2a0d75:                 map.put(partitioner.getRandomToken(rand), unit);
1:e2a0d75:             }
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     public String mms(SummaryStatistics s)
1:e2a0d75:     {
1:e2a0d75:         return String.format("max %.2f min %.2f stddev %.4f", s.getMax(), s.getMin(), s.getStandardDeviation());
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     class Summary
1:e2a0d75:     {
1:e2a0d75:         double min = 1;
1:e2a0d75:         double max = 1;
1:e2a0d75:         double stddev = 0;
1:e2a0d75: 
1:e2a0d75:         void update(SummaryStatistics stat)
1:e2a0d75:         {
1:e2a0d75:             min = Math.min(min, stat.getMin());
1:e2a0d75:             max = Math.max(max, stat.getMax());
1:e2a0d75:             stddev = Math.max(stddev, stat.getStandardDeviation());
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public String toString()
1:e2a0d75:         {
1:e2a0d75:             return String.format("max %.2f min %.2f stddev %.4f", max, min, stddev);
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     int nextUnitId = 0;
1:e2a0d75: 
1:e2a0d75:     final class Unit implements Comparable<Unit>
1:e2a0d75:     {
1:e2a0d75:         int unitId = nextUnitId++;
1:e2a0d75: 
1:e2a0d75:         public String toString()
1:e2a0d75:         {
1:e2a0d75:             return Integer.toString(unitId);
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         @Override
1:e2a0d75:         public int compareTo(Unit o)
1:e2a0d75:         {
1:e2a0d75:             return Integer.compare(unitId, o.unitId);
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.dht.tokenallocator;
1: 
1: import java.util.List;
1: import java.util.Map;
1: import java.util.NavigableMap;
1: import java.util.Random;
1: 
1: import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
1: 
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.Token;
1: 
1: /**
1:  * Base class for {@link NoReplicationTokenAllocatorTest} and {@link AbstractReplicationAwareTokenAllocatorTest},
1:  */
1: abstract class TokenAllocatorTestBase
1: {
1:     protected static final int TARGET_CLUSTER_SIZE = 250;
1:     protected static final int MAX_VNODE_COUNT = 64;
1: 
1:     interface TestReplicationStrategy extends ReplicationStrategy<Unit>
1:     {
1:         void addUnit(Unit n);
1: 
1:         void removeUnit(Unit n);
1: 
1:         /**
1:          * Returns a list of all replica units for given token.
1:          */
1:         List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens);
1: 
1:         /**
1:          * Returns the start of the token span that is replicated in this token.
1:          * Note: Though this is not trivial to see, the replicated span is always contiguous. A token in the same
1:          * group acts as a barrier; if one is not found the token replicates everything up to the replica'th distinct
1:          * group seen in front of it.
1:          */
1:         Token replicationStart(Token token, Unit unit, NavigableMap<Token, Unit> sortedTokens);
1: 
1:         /**
1:          * Multiplier for the acceptable disbalance in the cluster. With some strategies it is harder to achieve good
1:          * results.
1:          */
1:         double spreadExpectation();
1:     }
1: 
1:     interface TokenCount
1:     {
1:         int tokenCount(int perUnitCount, Random rand);
1: 
1:         double spreadExpectation();
1:     }
1: 
1:     TokenCount fixedTokenCount = new TokenCount()
1:     {
1:         public int tokenCount(int perUnitCount, Random rand)
1:         {
1:             return perUnitCount;
1:         }
1: 
1:         public double spreadExpectation()
1:         {
1:             return 4;  // High tolerance to avoid flakiness.
1:         }
1:     };
1: 
1:     TokenCount varyingTokenCount = new TokenCount()
1:     {
1:         public int tokenCount(int perUnitCount, Random rand)
1:         {
1:             if (perUnitCount == 1) return 1;
1:             // 25 to 175%
1:             return rand.nextInt(perUnitCount * 3 / 2) + (perUnitCount + 3) / 4;
1:         }
1: 
1:         public double spreadExpectation()
1:         {
1:             return 8;  // High tolerance to avoid flakiness.
1:         }
1:     };
1: 
1:     Random seededRand = new Random(2);
1: 
1:     public void random(Map<Token, Unit> map, TestReplicationStrategy rs,
1:                               int unitCount, TokenCount tc, int perUnitCount, IPartitioner partitioner)
1:     {
1:         System.out.format("\nRandom generation of %d units with %d tokens each\n", unitCount, perUnitCount);
1:         Random rand = seededRand;
1:         for (int i = 0; i < unitCount; i++)
1:         {
1:             Unit unit = new Unit();
1:             rs.addUnit(unit);
1:             int tokens = tc.tokenCount(perUnitCount, rand);
1:             for (int j = 0; j < tokens; j++)
1:             {
1:                 map.put(partitioner.getRandomToken(rand), unit);
1:             }
1:         }
1:     }
1: 
1:     public String mms(SummaryStatistics s)
1:     {
1:         return String.format("max %.2f min %.2f stddev %.4f", s.getMax(), s.getMin(), s.getStandardDeviation());
1:     }
1: 
1:     class Summary
1:     {
1:         double min = 1;
1:         double max = 1;
1:         double stddev = 0;
1: 
1:         void update(SummaryStatistics stat)
1:         {
1:             min = Math.min(min, stat.getMin());
1:             max = Math.max(max, stat.getMax());
1:             stddev = Math.max(stddev, stat.getStandardDeviation());
1:         }
1: 
1:         public String toString()
1:         {
1:             return String.format("max %.2f min %.2f stddev %.4f", max, min, stddev);
1:         }
1:     }
1: 
1:     int nextUnitId = 0;
1: 
1:     final class Unit implements Comparable<Unit>
1:     {
1:         int unitId = nextUnitId++;
1: 
1:         public String toString()
1:         {
1:             return Integer.toString(unitId);
1:         }
1: 
1:         @Override
1:         public int compareTo(Unit o)
1:         {
1:             return Integer.compare(unitId, o.unitId);
1:         }
1:     }
1: }
============================================================================