1:0580fb2: /*
1:0580fb2: * Licensed to the Apache Software Foundation (ASF) under one
1:0580fb2: * or more contributor license agreements.  See the NOTICE file
1:0580fb2: * distributed with this work for additional information
1:0580fb2: * regarding copyright ownership.  The ASF licenses this file
1:0580fb2: * to you under the Apache License, Version 2.0 (the
1:0580fb2: * "License"); you may not use this file except in compliance
1:0580fb2: * with the License.  You may obtain a copy of the License at
1:0580fb2: *
1:0580fb2: *    http://www.apache.org/licenses/LICENSE-2.0
1:0580fb2: *
1:0580fb2: * Unless required by applicable law or agreed to in writing,
1:0580fb2: * software distributed under the License is distributed on an
1:0580fb2: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0580fb2: * KIND, either express or implied.  See the License for the
1:0580fb2: * specific language governing permissions and limitations
1:0580fb2: * under the License.
1:0580fb2: */
1:0580fb2: package org.apache.cassandra.stress.generate;
4:0580fb2: 
1:6c579a0: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1:0580fb2: 
1:17dd4cc: import org.apache.cassandra.utils.DynamicList;
1:0580fb2: 
1:0580fb2: public class Seed implements Comparable<Seed>
4:0580fb2: {
1:0580fb2: 
1:6c579a0:     public final int visits;
1:0580fb2:     public final long seed;
1:0580fb2: 
1:6c579a0:     private volatile DynamicList.Node poolNode;
1:6c579a0:     private volatile int position;
1:0580fb2: 
1:6c579a0:     private static final AtomicIntegerFieldUpdater<Seed> positionUpdater = AtomicIntegerFieldUpdater.newUpdater(Seed.class, "position");
1:0580fb2: 
1:0580fb2:     public int compareTo(Seed that)
1:0580fb2:     {
1:0580fb2:         return Long.compare(this.seed, that.seed);
4:0580fb2:     }
1:0580fb2: 
1:0580fb2:     Seed(long seed, int visits)
1:0580fb2:     {
1:0580fb2:         this.seed = seed;
1:0580fb2:         this.visits = visits;
1:0580fb2:     }
1:0580fb2: 
1:6c579a0:     public int position()
1:0580fb2:     {
1:0580fb2:         return position;
1:0580fb2:     }
1:6c579a0: 
1:6c579a0:     public int moveForwards(int rowCount)
1:6c579a0:     {
1:6c579a0:         return positionUpdater.getAndAdd(this, rowCount);
1:6c579a0:     }
1:6c579a0: 
1:6c579a0:     public int hashCode()
1:6c579a0:     {
1:6c579a0:         return (int) seed;
1:6c579a0:     }
1:6c579a0: 
1:6c579a0:     public boolean equals(Object that)
1:6c579a0:     {
1:6c579a0:         return that instanceof Seed && this.seed == ((Seed) that).seed;
1:6c579a0:     }
1:6c579a0: 
1:6c579a0:     public boolean save(DynamicList<Seed> sampleFrom, int maxSize)
1:6c579a0:     {
1:6c579a0:         DynamicList.Node poolNode = sampleFrom.append(this, maxSize);
1:6c579a0:         if (poolNode == null)
1:6c579a0:             return false;
1:6c579a0:         this.poolNode = poolNode;
1:6c579a0:         return true;
1:6c579a0:     }
1:6c579a0: 
1:6c579a0:     public boolean isSaved()
1:6c579a0:     {
1:6c579a0:         return poolNode != null;
1:6c579a0:     }
1:6c579a0: 
1:6c579a0:     public void remove(DynamicList<Seed> sampleFrom)
1:6c579a0:     {
1:6c579a0:         sampleFrom.remove(poolNode);
1:6c579a0:     }
1:0580fb2: }
============================================================================
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.DynamicList;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1:     public final int visits;
1:     private volatile DynamicList.Node poolNode;
1:     private volatile int position;
1:     private static final AtomicIntegerFieldUpdater<Seed> positionUpdater = AtomicIntegerFieldUpdater.newUpdater(Seed.class, "position");
1:     public int position()
1: 
1:     public int moveForwards(int rowCount)
1:     {
1:         return positionUpdater.getAndAdd(this, rowCount);
1:     }
1: 
1:     public int hashCode()
1:     {
1:         return (int) seed;
1:     }
1: 
1:     public boolean equals(Object that)
1:     {
1:         return that instanceof Seed && this.seed == ((Seed) that).seed;
1:     }
1: 
1:     public boolean save(DynamicList<Seed> sampleFrom, int maxSize)
1:     {
1:         DynamicList.Node poolNode = sampleFrom.append(this, maxSize);
1:         if (poolNode == null)
1:             return false;
1:         this.poolNode = poolNode;
1:         return true;
1:     }
1: 
1:     public boolean isSaved()
1:     {
1:         return poolNode != null;
1:     }
1: 
1:     public void remove(DynamicList<Seed> sampleFrom)
1:     {
1:         sampleFrom.remove(poolNode);
1:     }
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.stress.generate;
1: 
0: import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
1: 
0: import org.apache.cassandra.stress.util.DynamicList;
1: 
1: public class Seed implements Comparable<Seed>
1: {
1: 
1:     public final long seed;
0:     final int visits;
1: 
0:     DynamicList.Node poolNode;
0:     volatile int[] position;
0:     volatile State state = State.HELD;
1: 
0:     private static final AtomicReferenceFieldUpdater<Seed, Seed.State> stateUpdater = AtomicReferenceFieldUpdater.newUpdater(Seed.class, State.class, "state");
1: 
1:     public int compareTo(Seed that)
1:     {
1:         return Long.compare(this.seed, that.seed);
1:     }
1: 
0:     static enum State
1:     {
0:         HELD, AVAILABLE
1:     }
1: 
1:     Seed(long seed, int visits)
1:     {
1:         this.seed = seed;
1:         this.visits = visits;
1:     }
1: 
0:     boolean take()
1:     {
0:         return stateUpdater.compareAndSet(this, State.AVAILABLE, State.HELD);
1:     }
1: 
0:     void yield()
1:     {
0:         state = State.AVAILABLE;
1:     }
1: 
0:     public int[] position()
1:     {
1:         return position;
1:     }
1: }
============================================================================