1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.DataInput;
1:96d41f0: import java.io.File;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.util.UUID;
1:96d41f0: 
1:96d41f0: import com.google.common.collect.ImmutableMap;
1:96d41f0: import com.google.common.io.ByteStreams;
1:96d41f0: import com.google.common.io.Files;
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.io.compress.LZ4Compressor;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputBuffer;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.assertEquals;
1:96d41f0: import static junit.framework.Assert.assertNotSame;
1:96d41f0: import static junit.framework.Assert.fail;
1:96d41f0: 
1:96d41f0: public class HintsDescriptorTest
1:96d41f0: {
1:96d41f0:     @Test
1:96d41f0:     public void testSerializerNormal() throws IOException
1:96d41f0:     {
1:96d41f0:         UUID hostId = UUID.randomUUID();
1:96d41f0:         int version = HintsDescriptor.CURRENT_VERSION;
1:96d41f0:         long timestamp = System.currentTimeMillis();
1:96d41f0:         ImmutableMap<String, Object> parameters =
1:96d41f0:                 ImmutableMap.of("compression", (Object) ImmutableMap.of("class_name", LZ4Compressor.class.getName()));
1:96d41f0:         HintsDescriptor descriptor = new HintsDescriptor(hostId, version, timestamp, parameters);
1:96d41f0: 
1:96d41f0:         testSerializeDeserializeLoop(descriptor);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testSerializerWithEmptyParameters() throws IOException
1:96d41f0:     {
1:96d41f0:         UUID hostId = UUID.randomUUID();
1:96d41f0:         int version = HintsDescriptor.CURRENT_VERSION;
1:96d41f0:         long timestamp = System.currentTimeMillis();
1:96d41f0:         ImmutableMap<String, Object> parameters = ImmutableMap.of();
1:96d41f0:         HintsDescriptor descriptor = new HintsDescriptor(hostId, version, timestamp, parameters);
1:96d41f0: 
1:96d41f0:         testSerializeDeserializeLoop(descriptor);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testCorruptedDeserialize() throws IOException
1:96d41f0:     {
1:96d41f0:         UUID hostId = UUID.randomUUID();
1:96d41f0:         int version = HintsDescriptor.CURRENT_VERSION;
1:96d41f0:         long timestamp = System.currentTimeMillis();
1:96d41f0:         ImmutableMap<String, Object> parameters = ImmutableMap.of();
1:96d41f0:         HintsDescriptor descriptor = new HintsDescriptor(hostId, version, timestamp, parameters);
1:96d41f0: 
1:96d41f0:         byte[] bytes = serializeDescriptor(descriptor);
1:96d41f0: 
1:96d41f0:         // mess up the parameters size
1:96d41f0:         bytes[28] = (byte) 0xFF;
1:96d41f0:         bytes[29] = (byte) 0xFF;
1:96d41f0:         bytes[30] = (byte) 0xFF;
1:96d41f0:         bytes[31] = (byte) 0x7F;
1:96d41f0: 
1:96d41f0:         // attempt to deserialize
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             deserializeDescriptor(bytes);
1:96d41f0:             fail("Deserializing the descriptor should but didn't");
1:96d41f0:         }
1:96d41f0:         catch (IOException e)
1:96d41f0:         {
1:96d41f0:             assertEquals("Hints Descriptor CRC Mismatch", e.getMessage());
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     @SuppressWarnings("EmptyTryBlock")
1:96d41f0:     public void testReadFromFile() throws IOException
1:96d41f0:     {
1:96d41f0:         UUID hostId = UUID.randomUUID();
1:96d41f0:         int version = HintsDescriptor.CURRENT_VERSION;
1:96d41f0:         long timestamp = System.currentTimeMillis();
1:96d41f0:         ImmutableMap<String, Object> parameters = ImmutableMap.of();
1:96d41f0:         HintsDescriptor expected = new HintsDescriptor(hostId, version, timestamp, parameters);
1:96d41f0: 
1:96d41f0:         File directory = Files.createTempDir();
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             try (HintsWriter ignored = HintsWriter.create(directory, expected))
1:96d41f0:             {
1:96d41f0:             }
1:96d41f0:             HintsDescriptor actual = HintsDescriptor.readFromFile(new File(directory, expected.fileName()).toPath());
1:96d41f0:             assertEquals(expected, actual);
1:96d41f0:         }
1:96d41f0:         finally
1:96d41f0:         {
1:96d41f0:             directory.deleteOnExit();
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void testSerializeDeserializeLoop(HintsDescriptor descriptor) throws IOException
1:96d41f0:     {
1:96d41f0:         // serialize to a byte array
1:96d41f0:         byte[] bytes = serializeDescriptor(descriptor);
1:96d41f0:         // make sure the sizes match
1:96d41f0:         assertEquals(bytes.length, descriptor.serializedSize());
1:96d41f0:         // deserialize back
1:96d41f0:         HintsDescriptor deserializedDescriptor = deserializeDescriptor(bytes);
1:96d41f0:         // compare equality
1:96d41f0:         assertDescriptorsEqual(descriptor, deserializedDescriptor);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static byte[] serializeDescriptor(HintsDescriptor descriptor) throws IOException
1:96d41f0:     {
1:96d41f0:         DataOutputBuffer dob = new DataOutputBuffer();
1:96d41f0:         descriptor.serialize(dob);
1:96d41f0:         return dob.toByteArray();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static HintsDescriptor deserializeDescriptor(byte[] bytes) throws IOException
1:96d41f0:     {
1:96d41f0:         DataInput in = ByteStreams.newDataInput(bytes);
1:96d41f0:         return HintsDescriptor.deserialize(in);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void assertDescriptorsEqual(HintsDescriptor expected, HintsDescriptor actual)
1:96d41f0:     {
1:96d41f0:         assertNotSame(expected, actual);
1:96d41f0:         assertEquals(expected, actual);
1:96d41f0:         assertEquals(expected.hashCode(), actual.hashCode());
1:96d41f0:         assertEquals(expected.hostId, actual.hostId);
1:96d41f0:         assertEquals(expected.version, actual.version);
1:96d41f0:         assertEquals(expected.timestamp, actual.timestamp);
1:96d41f0:         assertEquals(expected.parameters, actual.parameters);
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.DataInput;
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.UUID;
1: 
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.io.ByteStreams;
1: import com.google.common.io.Files;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.io.compress.LZ4Compressor;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: 
1: import static junit.framework.Assert.assertEquals;
1: import static junit.framework.Assert.assertNotSame;
1: import static junit.framework.Assert.fail;
1: 
1: public class HintsDescriptorTest
1: {
1:     @Test
1:     public void testSerializerNormal() throws IOException
1:     {
1:         UUID hostId = UUID.randomUUID();
1:         int version = HintsDescriptor.CURRENT_VERSION;
1:         long timestamp = System.currentTimeMillis();
1:         ImmutableMap<String, Object> parameters =
1:                 ImmutableMap.of("compression", (Object) ImmutableMap.of("class_name", LZ4Compressor.class.getName()));
1:         HintsDescriptor descriptor = new HintsDescriptor(hostId, version, timestamp, parameters);
1: 
1:         testSerializeDeserializeLoop(descriptor);
1:     }
1: 
1:     @Test
1:     public void testSerializerWithEmptyParameters() throws IOException
1:     {
1:         UUID hostId = UUID.randomUUID();
1:         int version = HintsDescriptor.CURRENT_VERSION;
1:         long timestamp = System.currentTimeMillis();
1:         ImmutableMap<String, Object> parameters = ImmutableMap.of();
1:         HintsDescriptor descriptor = new HintsDescriptor(hostId, version, timestamp, parameters);
1: 
1:         testSerializeDeserializeLoop(descriptor);
1:     }
1: 
1:     @Test
1:     public void testCorruptedDeserialize() throws IOException
1:     {
1:         UUID hostId = UUID.randomUUID();
1:         int version = HintsDescriptor.CURRENT_VERSION;
1:         long timestamp = System.currentTimeMillis();
1:         ImmutableMap<String, Object> parameters = ImmutableMap.of();
1:         HintsDescriptor descriptor = new HintsDescriptor(hostId, version, timestamp, parameters);
1: 
1:         byte[] bytes = serializeDescriptor(descriptor);
1: 
1:         // mess up the parameters size
1:         bytes[28] = (byte) 0xFF;
1:         bytes[29] = (byte) 0xFF;
1:         bytes[30] = (byte) 0xFF;
1:         bytes[31] = (byte) 0x7F;
1: 
1:         // attempt to deserialize
1:         try
1:         {
1:             deserializeDescriptor(bytes);
1:             fail("Deserializing the descriptor should but didn't");
1:         }
1:         catch (IOException e)
1:         {
1:             assertEquals("Hints Descriptor CRC Mismatch", e.getMessage());
1:         }
1:     }
1: 
1:     @Test
1:     @SuppressWarnings("EmptyTryBlock")
1:     public void testReadFromFile() throws IOException
1:     {
1:         UUID hostId = UUID.randomUUID();
1:         int version = HintsDescriptor.CURRENT_VERSION;
1:         long timestamp = System.currentTimeMillis();
1:         ImmutableMap<String, Object> parameters = ImmutableMap.of();
1:         HintsDescriptor expected = new HintsDescriptor(hostId, version, timestamp, parameters);
1: 
1:         File directory = Files.createTempDir();
1:         try
1:         {
1:             try (HintsWriter ignored = HintsWriter.create(directory, expected))
1:             {
1:             }
1:             HintsDescriptor actual = HintsDescriptor.readFromFile(new File(directory, expected.fileName()).toPath());
1:             assertEquals(expected, actual);
1:         }
1:         finally
1:         {
1:             directory.deleteOnExit();
1:         }
1:     }
1: 
1:     private static void testSerializeDeserializeLoop(HintsDescriptor descriptor) throws IOException
1:     {
1:         // serialize to a byte array
1:         byte[] bytes = serializeDescriptor(descriptor);
1:         // make sure the sizes match
1:         assertEquals(bytes.length, descriptor.serializedSize());
1:         // deserialize back
1:         HintsDescriptor deserializedDescriptor = deserializeDescriptor(bytes);
1:         // compare equality
1:         assertDescriptorsEqual(descriptor, deserializedDescriptor);
1:     }
1: 
1:     private static byte[] serializeDescriptor(HintsDescriptor descriptor) throws IOException
1:     {
1:         DataOutputBuffer dob = new DataOutputBuffer();
1:         descriptor.serialize(dob);
1:         return dob.toByteArray();
1:     }
1: 
1:     private static HintsDescriptor deserializeDescriptor(byte[] bytes) throws IOException
1:     {
1:         DataInput in = ByteStreams.newDataInput(bytes);
1:         return HintsDescriptor.deserialize(in);
1:     }
1: 
1:     private static void assertDescriptorsEqual(HintsDescriptor expected, HintsDescriptor actual)
1:     {
1:         assertNotSame(expected, actual);
1:         assertEquals(expected, actual);
1:         assertEquals(expected.hashCode(), actual.hashCode());
1:         assertEquals(expected.hostId, actual.hostId);
1:         assertEquals(expected.version, actual.version);
1:         assertEquals(expected.timestamp, actual.timestamp);
1:         assertEquals(expected.parameters, actual.parameters);
1:     }
1: }
============================================================================