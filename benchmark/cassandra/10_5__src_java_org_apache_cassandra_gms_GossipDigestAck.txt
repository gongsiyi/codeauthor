1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
2:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
1:066ef58:  */
1:066ef58: package org.apache.cassandra.gms;
8:066ef58: 
1:5b9fc26: import java.io.IOException;
1:e98eb1c: import java.net.InetAddress;
1:5b9fc26: import java.util.HashMap;
1:e98eb1c: import java.util.List;
1:e98eb1c: import java.util.Map;
1:066ef58: 
1:2ae5272: import org.apache.cassandra.db.TypeSizes;
1:84eeb28: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:5b9fc26: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1:066ef58: 
2:066ef58: /**
1:9471e8d:  * This ack gets sent out as a result of the receipt of a GossipDigestSynMessage by an
1:066ef58:  * endpoint. This is the 2 stage of the 3 way messaging in the Gossip protocol.
1:066ef58:  */
1:9471e8d: public class GossipDigestAck
6:066ef58: {
1:587cb58:     public static final IVersionedSerializer<GossipDigestAck> serializer = new GossipDigestAckSerializer();
1:066ef58: 
1:5a6e2b0:     final List<GossipDigest> gDigestList;
1:5a6e2b0:     final Map<InetAddress, EndpointState> epStateMap;
1:066ef58: 
1:9471e8d:     GossipDigestAck(List<GossipDigest> gDigestList, Map<InetAddress, EndpointState> epStateMap)
1:066ef58:     {
1:910b663:         this.gDigestList = gDigestList;
1:910b663:         this.epStateMap = epStateMap;
6:066ef58:     }
1:84eeb28: 
1:066ef58:     List<GossipDigest> getGossipDigestList()
1:84eeb28:     {
1:910b663:         return gDigestList;
1:84eeb28:     }
1:066ef58: 
1:2e1b1a5:     Map<InetAddress, EndpointState> getEndpointStateMap()
1:066ef58:     {
1:910b663:         return epStateMap;
1:d7e4924:     }
1:066ef58: }
1:066ef58: 
1:9471e8d: class GossipDigestAckSerializer implements IVersionedSerializer<GossipDigestAck>
1:066ef58: {
1:75508ec:     public void serialize(GossipDigestAck gDigestAckMessage, DataOutputPlus out, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList, out, version);
1:60d9c7f:         out.writeInt(gDigestAckMessage.epStateMap.size());
1:5b9fc26:         for (Map.Entry<InetAddress, EndpointState> entry : gDigestAckMessage.epStateMap.entrySet())
1:5b9fc26:         {
1:5b9fc26:             InetAddress ep = entry.getKey();
1:60d9c7f:             CompactEndpointSerializationHelper.serialize(ep, out);
1:60d9c7f:             EndpointState.serializer.serialize(entry.getValue(), out, version);
1:5b9fc26:         }
1:066ef58:     }
1:066ef58: 
1:03f72ac:     public GossipDigestAck deserialize(DataInputPlus in, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(in, version);
1:60d9c7f:         int size = in.readInt();
1:5b9fc26:         Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>(size);
1:5b9fc26: 
1:5b9fc26:         for (int i = 0; i < size; ++i)
1:5b9fc26:         {
1:60d9c7f:             InetAddress ep = CompactEndpointSerializationHelper.deserialize(in);
1:60d9c7f:             EndpointState epState = EndpointState.serializer.deserialize(in, version);
1:5b9fc26:             epStateMap.put(ep, epState);
1:5b9fc26:         }
1:9471e8d:         return new GossipDigestAck(gDigestList, epStateMap);
1:066ef58:     }
1:066ef58: 
1:5b9fc26:     public long serializedSize(GossipDigestAck ack, int version)
1:066ef58:     {
1:5b9fc26:         int size = GossipDigestSerializationHelper.serializedSize(ack.gDigestList, version);
1:03f72ac:         size += TypeSizes.sizeof(ack.epStateMap.size());
1:5b9fc26:         for (Map.Entry<InetAddress, EndpointState> entry : ack.epStateMap.entrySet())
1:5b9fc26:             size += CompactEndpointSerializationHelper.serializedSize(entry.getKey())
1:b207956:                     + EndpointState.serializer.serializedSize(entry.getValue(), version);
1:5b9fc26:         return size;
1:066ef58:     }
1:066ef58: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public GossipDigestAck deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         size += TypeSizes.sizeof(ack.epStateMap.size());
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public void serialize(GossipDigestAck gDigestAckMessage, DataOutputPlus out, int version) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:997ab95
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(GossipDigestAck gDigestAckMessage, DataOutput out, int version) throws IOException
1:         GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList, out, version);
0:             out.writeBoolean(true); // 0.6 compatibility
1:         out.writeInt(gDigestAckMessage.epStateMap.size());
1:             CompactEndpointSerializationHelper.serialize(ep, out);
1:             EndpointState.serializer.serialize(entry.getValue(), out, version);
0:     public GossipDigestAck deserialize(DataInput in, int version) throws IOException
1:         List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(in, version);
0:             in.readBoolean(); // 0.6 compatibility
1:         int size = in.readInt();
1:             InetAddress ep = CompactEndpointSerializationHelper.deserialize(in);
1:             EndpointState epState = EndpointState.serializer.deserialize(in, version);
commit:b207956
/////////////////////////////////////////////////////////////////////////
1:                     + EndpointState.serializer.serializedSize(entry.getValue(), version);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:             size += TypeSizes.NATIVE.sizeof(true);
0:         size += TypeSizes.NATIVE.sizeof(ack.epStateMap.size());
commit:5b9fc26
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.HashMap;
0: import org.apache.cassandra.db.DBTypeSizes;
1: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
0: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
0:         if (version <= MessagingService.VERSION_10)
0:             dos.writeBoolean(true); // 0.6 compatibility
0:         dos.writeInt(gDigestAckMessage.epStateMap.size());
1:         for (Map.Entry<InetAddress, EndpointState> entry : gDigestAckMessage.epStateMap.entrySet())
1:         {
1:             InetAddress ep = entry.getKey();
0:             CompactEndpointSerializationHelper.serialize(ep, dos);
0:             EndpointState.serializer().serialize(entry.getValue(), dos, version);
1:         }
0:         if (version <= MessagingService.VERSION_10)
0:             dis.readBoolean(); // 0.6 compatibility
0:         int size = dis.readInt();
1:         Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>(size);
1: 
1:         for (int i = 0; i < size; ++i)
1:         {
0:             InetAddress ep = CompactEndpointSerializationHelper.deserialize(dis);
0:             EndpointState epState = EndpointState.serializer().deserialize(dis, version);
1:             epStateMap.put(ep, epState);
1:         }
1:     public long serializedSize(GossipDigestAck ack, int version)
1:         int size = GossipDigestSerializationHelper.serializedSize(ack.gDigestList, version);
0:         if (version <= MessagingService.VERSION_11)
0:             size += DBTypeSizes.NATIVE.sizeof(true);
0:         size += DBTypeSizes.NATIVE.sizeof(ack.epStateMap.size());
1:         for (Map.Entry<InetAddress, EndpointState> entry : ack.epStateMap.entrySet())
1:             size += CompactEndpointSerializationHelper.serializedSize(entry.getKey())
0:                   + EndpointState.serializer().serializedSize(entry.getValue(), version);
1:         return size;
commit:9471e8d
/////////////////////////////////////////////////////////////////////////
1:  * This ack gets sent out as a result of the receipt of a GossipDigestSynMessage by an
1: public class GossipDigestAck
0:     private static final IVersionedSerializer<GossipDigestAck> serializer;
0:         serializer = new GossipDigestAckSerializer();
0:     public static IVersionedSerializer<GossipDigestAck> serializer()
1:     GossipDigestAck(List<GossipDigest> gDigestList, Map<InetAddress, EndpointState> epStateMap)
/////////////////////////////////////////////////////////////////////////
1: class GossipDigestAckSerializer implements IVersionedSerializer<GossipDigestAck>
0:     public void serialize(GossipDigestAck gDigestAckMessage, DataOutput dos, int version) throws IOException
0:     public GossipDigestAck deserialize(DataInput dis, int version) throws IOException
1:         return new GossipDigestAck(gDigestList, epStateMap);
0:     public long serializedSize(GossipDigestAck gossipDigestAckMessage, int version)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: public class GossipDigestAckMessage // TODO rename
/////////////////////////////////////////////////////////////////////////
0:     public static IVersionedSerializer<GossipDigestAckMessage> serializer()
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
0: class GossipDigestAckMessage // TODO rename
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
0: import java.io.*;
1: import org.apache.cassandra.io.IVersionedSerializer;
/////////////////////////////////////////////////////////////////////////
0:     private static IVersionedSerializer<GossipDigestAckMessage> serializer_;
/////////////////////////////////////////////////////////////////////////
0:     static IVersionedSerializer<GossipDigestAckMessage> serializer()
/////////////////////////////////////////////////////////////////////////
0: class GossipDigestAckMessageSerializer implements IVersionedSerializer<GossipDigestAckMessage>
0:     public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutput dos, int version) throws IOException
0:     public GossipDigestAckMessage deserialize(DataInput dis, int version) throws IOException
1: 
0:     public long serializedSize(GossipDigestAckMessage gossipDigestAckMessage, int version)
1:     {
0:         throw new UnsupportedOperationException();
1:     }
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
0: import java.util.ArrayList;
0: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
commit:7dffa83
/////////////////////////////////////////////////////////////////////////
0:         GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos);
0:         dos.writeBoolean(true); // 0.6 compatibility
0:         EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos);
0:         List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis);
0:         dis.readBoolean(); // 0.6 compatibility
0:         Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis);
commit:7a4a709
/////////////////////////////////////////////////////////////////////////
0:         /* Use the EndpointState */
0:             EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos);            
/////////////////////////////////////////////////////////////////////////
0:             epStateMap = EndpointStatesSerializationHelper.deserialize(dis);                                    
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
0:     Map<InetAddress, EndpointState> epStateMap_ = new HashMap<InetAddress, EndpointState>();
0:     GossipDigestAckMessage(List<GossipDigest> gDigestList, Map<InetAddress, EndpointState> epStateMap)
/////////////////////////////////////////////////////////////////////////
1:     Map<InetAddress, EndpointState> getEndpointStateMap()
/////////////////////////////////////////////////////////////////////////
0:         Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>();
commit:18b2a16
/////////////////////////////////////////////////////////////////////////
0:     Map<InetAddress, EndPointState> getEndpointStateMap()
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
0:     Map<InetAddress, EndPointState> epStateMap_ = new HashMap<InetAddress, EndPointState>();
0:     GossipDigestAckMessage(List<GossipDigest> gDigestList, Map<InetAddress, EndPointState> epStateMap)
0:     void addGossipDigest(InetAddress ep, int generation, int version)
/////////////////////////////////////////////////////////////////////////
0:     Map<InetAddress, EndPointState> getEndPointStateMap()
/////////////////////////////////////////////////////////////////////////
0:         Map<InetAddress, EndPointState> epStateMap = new HashMap<InetAddress, EndPointState>();
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: }
commit:066ef58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.*;
1: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.EndPoint;
1: 
1: 
1: 
1: /**
0:  * This message gets sent out as a result of the receipt of a GossipDigestSynMessage by an
1:  * endpoint. This is the 2 stage of the 3 way messaging in the Gossip protocol.
1:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
1: 
0: class GossipDigestAckMessage
1: {
0:     private static ICompactSerializer<GossipDigestAckMessage> serializer_;
0:     static
1:     {
0:         serializer_ = new GossipDigestAckMessageSerializer();
1:     }
1:     
0:     List<GossipDigest> gDigestList_ = new ArrayList<GossipDigest>();
0:     Map<EndPoint, EndPointState> epStateMap_ = new HashMap<EndPoint, EndPointState>();
1:     
0:     static ICompactSerializer<GossipDigestAckMessage> serializer()
1:     {
0:         return serializer_;
1:     }
1:     
0:     GossipDigestAckMessage(List<GossipDigest> gDigestList, Map<EndPoint, EndPointState> epStateMap)
1:     {
0:         gDigestList_ = gDigestList;
0:         epStateMap_ = epStateMap;
1:     }
1:     
0:     void addGossipDigest(EndPoint ep, int generation, int version)
1:     {
0:         gDigestList_.add( new GossipDigest(ep, generation, version) );
1:     }
1:     
1:     List<GossipDigest> getGossipDigestList()
1:     {
0:         return gDigestList_;
1:     }
1:     
0:     Map<EndPoint, EndPointState> getEndPointStateMap()
1:     {
0:         return epStateMap_;
1:     }
1: }
1: 
0: class GossipDigestAckMessageSerializer implements ICompactSerializer<GossipDigestAckMessage>
1: {
0:     public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutputStream dos) throws IOException
1:     {
0:         /* Use the helper to serialize the GossipDigestList */
0:         boolean bContinue = GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos);
0:         dos.writeBoolean(bContinue);
0:         /* Use the EndPointState */
0:         if ( bContinue )
1:         {
0:             EndPointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos);            
1:         }
1:     }
1: 
0:     public GossipDigestAckMessage deserialize(DataInputStream dis) throws IOException
1:     {
0:         Map<EndPoint, EndPointState> epStateMap = new HashMap<EndPoint, EndPointState>();
0:         List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis);                
0:         boolean bContinue = dis.readBoolean();
1: 
0:         if ( bContinue )
1:         {
0:             epStateMap = EndPointStatesSerializationHelper.deserialize(dis);                                    
1:         }
0:         return new GossipDigestAckMessage(gDigestList, epStateMap);
1:     }
commit:71739ef
author:Brandon Williams
-------------------------------------------------------------------------------
commit:9852a93
/////////////////////////////////////////////////////////////////////////
0:         if (version < MessagingService.VERSION_12)
/////////////////////////////////////////////////////////////////////////
0:         if (version < MessagingService.VERSION_12)
/////////////////////////////////////////////////////////////////////////
0:         if (version < MessagingService.VERSION_12)
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:1693ee2
/////////////////////////////////////////////////////////////////////////
0:         if (version <= MessagingService.VERSION_11)
/////////////////////////////////////////////////////////////////////////
0:         if (version <= MessagingService.VERSION_11)
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:     public static final IVersionedSerializer<GossipDigestAck> serializer = new GossipDigestAckSerializer();
/////////////////////////////////////////////////////////////////////////
0:             EndpointState.serializer.serialize(entry.getValue(), dos, version);
/////////////////////////////////////////////////////////////////////////
0:             EndpointState epState = EndpointState.serializer.deserialize(dis, version);
/////////////////////////////////////////////////////////////////////////
0:                   + EndpointState.serializer.serializedSize(entry.getValue(), version);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private static final IVersionedSerializer<GossipDigestAckMessage> serializer;
1:     final List<GossipDigest> gDigestList;
1:     final Map<InetAddress, EndpointState> epStateMap;
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:     private static IVersionedSerializer<GossipDigestAckMessage> serializer;
0:         serializer = new GossipDigestAckMessageSerializer();
0:     List<GossipDigest> gDigestList;
0:     Map<InetAddress, EndpointState> epStateMap;
0:         return serializer;
1:         this.gDigestList = gDigestList;
1:         this.epStateMap = epStateMap;
1:         return gDigestList;
1:         return epStateMap;
/////////////////////////////////////////////////////////////////////////
0:         GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList, dos, version);
0:         EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap, dos, version);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutputStream dos, int version) throws IOException
0:         GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos, version);
0:         EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos, version);
0:     public GossipDigestAckMessage deserialize(DataInputStream dis, int version) throws IOException
0:         List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis, version);
0:         Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis, version);
commit:caf057f
/////////////////////////////////////////////////////////////////////////
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.gms;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.*;
0: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.EndPoint;
0: 
0: 
0: 
0: /**
0:  * This message gets sent out as a result of the receipt of a GossipDigestSynMessage by an
0:  * endpoint. This is the 2 stage of the 3 way messaging in the Gossip protocol.
0:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: class GossipDigestAckMessage
0: {
0:     private static ICompactSerializer<GossipDigestAckMessage> serializer_;
0:     static
0:     {
0:         serializer_ = new GossipDigestAckMessageSerializer();
0:     }
0:     
0:     List<GossipDigest> gDigestList_ = new ArrayList<GossipDigest>();
0:     Map<EndPoint, EndPointState> epStateMap_ = new HashMap<EndPoint, EndPointState>();
0:     
0:     static ICompactSerializer<GossipDigestAckMessage> serializer()
0:     {
0:         return serializer_;
0:     }
0:     
0:     GossipDigestAckMessage(List<GossipDigest> gDigestList, Map<EndPoint, EndPointState> epStateMap)
0:     {
0:         gDigestList_ = gDigestList;
0:         epStateMap_ = epStateMap;
0:     }
0:     
0:     void addGossipDigest(EndPoint ep, int generation, int version)
0:     {
0:         gDigestList_.add( new GossipDigest(ep, generation, version) );
0:     }
0:     
0:     List<GossipDigest> getGossipDigestList()
0:     {
0:         return gDigestList_;
0:     }
0:     
0:     Map<EndPoint, EndPointState> getEndPointStateMap()
0:     {
0:         return epStateMap_;
0:     }
0: }
0: 
0: class GossipDigestAckMessageSerializer implements ICompactSerializer<GossipDigestAckMessage>
0: {
0:     public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutputStream dos) throws IOException
0:     {
0:         /* Use the helper to serialize the GossipDigestList */
0:         boolean bContinue = GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos);
0:         dos.writeBoolean(bContinue);
0:         /* Use the EndPointState */
0:         if ( bContinue )
0:         {
0:             EndPointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos);            
0:         }
0:     }
0: 
0:     public GossipDigestAckMessage deserialize(DataInputStream dis) throws IOException
0:     {
0:         Map<EndPoint, EndPointState> epStateMap = new HashMap<EndPoint, EndPointState>();
0:         List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis);                
0:         boolean bContinue = dis.readBoolean();
0: 
0:         if ( bContinue )
0:         {
0:             epStateMap = EndPointStatesSerializationHelper.deserialize(dis);                                    
0:         }
0:         return new GossipDigestAckMessage(gDigestList, epStateMap);
0:     }
0: }
============================================================================