1:690fbf3: /*
1:690fbf3:  * Licensed to the Apache Software Foundation (ASF) under one
1:690fbf3:  * or more contributor license agreements.  See the NOTICE file
1:690fbf3:  * distributed with this work for additional information
1:690fbf3:  * regarding copyright ownership.  The ASF licenses this file
1:690fbf3:  * to you under the Apache License, Version 2.0 (the
1:690fbf3:  * "License"); you may not use this file except in compliance
1:690fbf3:  * with the License.  You may obtain a copy of the License at
1:690fbf3:  *
1:690fbf3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:690fbf3:  *
1:690fbf3:  * Unless required by applicable law or agreed to in writing, software
1:690fbf3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:690fbf3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:690fbf3:  * See the License for the specific language governing permissions and
1:690fbf3:  * limitations under the License.
1:690fbf3:  */
1:690fbf3: package org.apache.cassandra.dht;
1:690fbf3: 
1:690fbf3: import java.net.InetAddress;
1:690fbf3: import java.util.Collections;
1:690fbf3: 
1:9797511: import org.junit.BeforeClass;
1:690fbf3: import org.junit.Test;
1:690fbf3: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:690fbf3: import org.apache.cassandra.streaming.DefaultConnectionFactory;
1:690fbf3: import org.apache.cassandra.streaming.StreamEvent;
1:690fbf3: import org.apache.cassandra.streaming.StreamSession;
1:690fbf3: import org.apache.cassandra.utils.FBUtilities;
1:690fbf3: 
1:690fbf3: import static org.junit.Assert.assertFalse;
1:690fbf3: import static org.junit.Assert.assertTrue;
1:690fbf3: 
1:690fbf3: public class StreamStateStoreTest
1:690fbf3: {
1:690fbf3: 
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:690fbf3:     @Test
1:690fbf3:     public void testUpdateAndQueryAvailableRanges()
1:690fbf3:     {
1:690fbf3:         // let range (0, 100] of keyspace1 be bootstrapped.
1:690fbf3:         IPartitioner p = new Murmur3Partitioner();
1:690fbf3:         Token.TokenFactory factory = p.getTokenFactory();
1:690fbf3:         Range<Token> range = new Range<>(factory.fromString("0"), factory.fromString("100"));
1:690fbf3: 
1:690fbf3:         InetAddress local = FBUtilities.getBroadcastAddress();
1:a5b90f1:         StreamSession session = new StreamSession(local, local, new DefaultConnectionFactory(), 0, true, false);
1:690fbf3:         session.addStreamRequest("keyspace1", Collections.singleton(range), Collections.singleton("cf"), 0);
1:690fbf3: 
1:690fbf3:         StreamStateStore store = new StreamStateStore();
1:690fbf3:         // session complete event that is not completed makes data not available for keyspace/ranges
1:690fbf3:         store.handleStreamEvent(new StreamEvent.SessionCompleteEvent(session));
1:690fbf3:         assertFalse(store.isDataAvailable("keyspace1", factory.fromString("50")));
1:690fbf3: 
1:690fbf3:         // successfully completed session adds available keyspace/ranges
1:690fbf3:         session.state(StreamSession.State.COMPLETE);
1:690fbf3:         store.handleStreamEvent(new StreamEvent.SessionCompleteEvent(session));
1:690fbf3:         // check if token in range (0, 100] appears available.
1:690fbf3:         assertTrue(store.isDataAvailable("keyspace1", factory.fromString("50")));
1:690fbf3:         // check if token out of range returns false
1:690fbf3:         assertFalse(store.isDataAvailable("keyspace1", factory.fromString("0")));
1:690fbf3:         assertFalse(store.isDataAvailable("keyspace1", factory.fromString("101")));
1:690fbf3:         // check if different keyspace returns false
1:690fbf3:         assertFalse(store.isDataAvailable("keyspace2", factory.fromString("50")));
1:690fbf3: 
1:690fbf3:         // add different range within the same keyspace
1:690fbf3:         Range<Token> range2 = new Range<>(factory.fromString("100"), factory.fromString("200"));
1:a5b90f1:         session = new StreamSession(local, local, new DefaultConnectionFactory(), 0, true, false);
1:690fbf3:         session.addStreamRequest("keyspace1", Collections.singleton(range2), Collections.singleton("cf"), 0);
1:690fbf3:         session.state(StreamSession.State.COMPLETE);
1:690fbf3:         store.handleStreamEvent(new StreamEvent.SessionCompleteEvent(session));
1:690fbf3: 
1:690fbf3:         // newly added range should be available
1:690fbf3:         assertTrue(store.isDataAvailable("keyspace1", factory.fromString("101")));
1:690fbf3:         // as well as the old one
1:690fbf3:         assertTrue(store.isDataAvailable("keyspace1", factory.fromString("50")));
1:9797511:     }
2:690fbf3: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a5b90f1
/////////////////////////////////////////////////////////////////////////
1:         StreamSession session = new StreamSession(local, local, new DefaultConnectionFactory(), 0, true, false);
/////////////////////////////////////////////////////////////////////////
1:         session = new StreamSession(local, local, new DefaultConnectionFactory(), 0, true, false);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:690fbf3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.dht;
1: 
1: import java.net.InetAddress;
1: import java.util.Collections;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.streaming.DefaultConnectionFactory;
1: import org.apache.cassandra.streaming.StreamEvent;
1: import org.apache.cassandra.streaming.StreamSession;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class StreamStateStoreTest
1: {
1: 
1:     @Test
1:     public void testUpdateAndQueryAvailableRanges()
1:     {
1:         // let range (0, 100] of keyspace1 be bootstrapped.
1:         IPartitioner p = new Murmur3Partitioner();
1:         Token.TokenFactory factory = p.getTokenFactory();
1:         Range<Token> range = new Range<>(factory.fromString("0"), factory.fromString("100"));
1: 
1:         InetAddress local = FBUtilities.getBroadcastAddress();
0:         StreamSession session = new StreamSession(local, local, new DefaultConnectionFactory(), 0, true);
1:         session.addStreamRequest("keyspace1", Collections.singleton(range), Collections.singleton("cf"), 0);
1: 
1:         StreamStateStore store = new StreamStateStore();
1:         // session complete event that is not completed makes data not available for keyspace/ranges
1:         store.handleStreamEvent(new StreamEvent.SessionCompleteEvent(session));
1:         assertFalse(store.isDataAvailable("keyspace1", factory.fromString("50")));
1: 
1:         // successfully completed session adds available keyspace/ranges
1:         session.state(StreamSession.State.COMPLETE);
1:         store.handleStreamEvent(new StreamEvent.SessionCompleteEvent(session));
1:         // check if token in range (0, 100] appears available.
1:         assertTrue(store.isDataAvailable("keyspace1", factory.fromString("50")));
1:         // check if token out of range returns false
1:         assertFalse(store.isDataAvailable("keyspace1", factory.fromString("0")));
1:         assertFalse(store.isDataAvailable("keyspace1", factory.fromString("101")));
1:         // check if different keyspace returns false
1:         assertFalse(store.isDataAvailable("keyspace2", factory.fromString("50")));
1: 
1:         // add different range within the same keyspace
1:         Range<Token> range2 = new Range<>(factory.fromString("100"), factory.fromString("200"));
0:         session = new StreamSession(local, local, new DefaultConnectionFactory(), 0, true);
1:         session.addStreamRequest("keyspace1", Collections.singleton(range2), Collections.singleton("cf"), 0);
1:         session.state(StreamSession.State.COMPLETE);
1:         store.handleStreamEvent(new StreamEvent.SessionCompleteEvent(session));
1: 
1:         // newly added range should be available
1:         assertTrue(store.isDataAvailable("keyspace1", factory.fromString("101")));
1:         // as well as the old one
1:         assertTrue(store.isDataAvailable("keyspace1", factory.fromString("50")));
1:     }
1: }
============================================================================