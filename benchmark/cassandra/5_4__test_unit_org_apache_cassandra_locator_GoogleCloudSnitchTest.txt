1:f2bbd6f: /*
1:f2bbd6f:  * Licensed to the Apache Software Foundation (ASF) under one
1:f2bbd6f:  * or more contributor license agreements.  See the NOTICE file
1:f2bbd6f:  * distributed with this work for additional information
1:f2bbd6f:  * regarding copyright ownership.  The ASF licenses this file
1:f2bbd6f:  * to you under the Apache License, Version 2.0 (the
1:f2bbd6f:  * "License"); you may not use this file except in compliance
1:f2bbd6f:  * with the License.  You may obtain a copy of the License at
3:f2bbd6f:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f2bbd6f:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:f2bbd6f:  */
1:f2bbd6f: 
1:a991b64: package org.apache.cassandra.locator;
1:a991b64: 
1:f2bbd6f: 
1:f2bbd6f: import java.io.IOException;
1:f2bbd6f: import java.net.InetAddress;
1:9a90e98: import java.util.EnumMap;
1:f2bbd6f: import java.util.Map;
1:f2bbd6f: 
1:f2bbd6f: import org.junit.AfterClass;
1:f2bbd6f: import org.junit.BeforeClass;
1:f2bbd6f: import org.junit.Test;
1:f2bbd6f: 
1:f2bbd6f: import org.apache.cassandra.SchemaLoader;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:f2bbd6f: import org.apache.cassandra.db.Keyspace;
1:f2bbd6f: import org.apache.cassandra.exceptions.ConfigurationException;
1:f2bbd6f: import org.apache.cassandra.gms.ApplicationState;
1:f2bbd6f: import org.apache.cassandra.gms.Gossiper;
1:f2bbd6f: import org.apache.cassandra.gms.VersionedValue;
1:f2bbd6f: import org.apache.cassandra.service.StorageService;
1:f2bbd6f: 
1:f2bbd6f: import static org.junit.Assert.assertEquals;
1:f2bbd6f: 
1:f2bbd6f: public class GoogleCloudSnitchTest
1:f2bbd6f: {
1:f2bbd6f:     private static String az;
1:f2bbd6f: 
1:f2bbd6f:     @BeforeClass
1:f2bbd6f:     public static void setup() throws Exception
1:f2bbd6f:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:f2bbd6f:         SchemaLoader.mkdirs();
1:f2bbd6f:         SchemaLoader.cleanup();
1:f2bbd6f:         Keyspace.setInitialized();
1:f2bbd6f:         StorageService.instance.initServer(0);
1:f2bbd6f:     }
1:f2bbd6f: 
1:f2bbd6f:     private class TestGoogleCloudSnitch extends GoogleCloudSnitch
1:f2bbd6f:     {
1:f2bbd6f:         public TestGoogleCloudSnitch() throws IOException, ConfigurationException
1:f2bbd6f:         {
1:f2bbd6f:             super();
1:f2bbd6f:         }
1:f2bbd6f: 
1:f2bbd6f:         @Override
1:f2bbd6f:         String gceApiCall(String url) throws IOException, ConfigurationException
1:f2bbd6f:         {
1:f2bbd6f:             return az;
1:f2bbd6f:         }
1:f2bbd6f:     }
1:f2bbd6f: 
1:f2bbd6f:     @Test
1:f2bbd6f:     public void testRac() throws IOException, ConfigurationException
1:f2bbd6f:     {
1:f2bbd6f:         az = "us-central1-a";
1:f2bbd6f:         GoogleCloudSnitch snitch = new TestGoogleCloudSnitch();
1:f2bbd6f:         InetAddress local = InetAddress.getByName("127.0.0.1");
1:f2bbd6f:         InetAddress nonlocal = InetAddress.getByName("127.0.0.7");
1:f2bbd6f: 
1:f2bbd6f:         Gossiper.instance.addSavedEndpoint(nonlocal);
1:9a90e98:         Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);
1:f2bbd6f:         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter("europe-west1"));
1:f2bbd6f:         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.datacenter("a"));
1:9a90e98:         Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);
1:f2bbd6f: 
1:f2bbd6f:         assertEquals("europe-west1", snitch.getDatacenter(nonlocal));
1:f2bbd6f:         assertEquals("a", snitch.getRack(nonlocal));
1:f2bbd6f: 
1:f2bbd6f:         assertEquals("us-central1", snitch.getDatacenter(local));
1:f2bbd6f:         assertEquals("a", snitch.getRack(local));
1:f2bbd6f:     }
1:f2bbd6f:     
1:f2bbd6f:     @Test
1:f2bbd6f:     public void testNewRegions() throws IOException, ConfigurationException
1:f2bbd6f:     {
1:f2bbd6f:         az = "asia-east1-a";
1:f2bbd6f:         GoogleCloudSnitch snitch = new TestGoogleCloudSnitch();
1:f2bbd6f:         InetAddress local = InetAddress.getByName("127.0.0.1");
1:f2bbd6f:         assertEquals("asia-east1", snitch.getDatacenter(local));
1:f2bbd6f:         assertEquals("a", snitch.getRack(local));
1:f2bbd6f:     }
1:f2bbd6f: 
1:f2bbd6f:     @AfterClass
1:f2bbd6f:     public static void tearDown()
1:f2bbd6f:     {
1:f2bbd6f:         StorageService.instance.stopClient();
1:f2bbd6f:     }
1:f2bbd6f: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:9a90e98
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
/////////////////////////////////////////////////////////////////////////
1:         Map<ApplicationState, VersionedValue> stateMap = new EnumMap<>(ApplicationState.class);
1:         Gossiper.instance.getEndpointStateForEndpoint(nonlocal).addApplicationStates(stateMap);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.locator;
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:f2bbd6f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.locator;
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  *
1:  */
1: 
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
0: import java.net.UnknownHostException;
1: import java.util.Map;
1: 
1: import org.junit.AfterClass;
0: import org.junit.Assert;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.gms.ApplicationState;
1: import org.apache.cassandra.gms.Gossiper;
1: import org.apache.cassandra.gms.VersionedValue;
0: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.net.OutboundTcpConnectionPool;
1: import org.apache.cassandra.service.StorageService;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class GoogleCloudSnitchTest
1: {
1:     private static String az;
1: 
1:     @BeforeClass
1:     public static void setup() throws Exception
1:     {
1:         SchemaLoader.mkdirs();
1:         SchemaLoader.cleanup();
1:         Keyspace.setInitialized();
1:         StorageService.instance.initServer(0);
1:     }
1: 
1:     private class TestGoogleCloudSnitch extends GoogleCloudSnitch
1:     {
1:         public TestGoogleCloudSnitch() throws IOException, ConfigurationException
1:         {
1:             super();
1:         }
1: 
1:         @Override
1:         String gceApiCall(String url) throws IOException, ConfigurationException
1:         {
1:             return az;
1:         }
1:     }
1: 
1:     @Test
1:     public void testRac() throws IOException, ConfigurationException
1:     {
1:         az = "us-central1-a";
1:         GoogleCloudSnitch snitch = new TestGoogleCloudSnitch();
1:         InetAddress local = InetAddress.getByName("127.0.0.1");
1:         InetAddress nonlocal = InetAddress.getByName("127.0.0.7");
1: 
1:         Gossiper.instance.addSavedEndpoint(nonlocal);
0:         Map<ApplicationState,VersionedValue> stateMap = Gossiper.instance.getEndpointStateForEndpoint(nonlocal).getApplicationStateMap();
1:         stateMap.put(ApplicationState.DC, StorageService.instance.valueFactory.datacenter("europe-west1"));
1:         stateMap.put(ApplicationState.RACK, StorageService.instance.valueFactory.datacenter("a"));
1: 
1:         assertEquals("europe-west1", snitch.getDatacenter(nonlocal));
1:         assertEquals("a", snitch.getRack(nonlocal));
1: 
1:         assertEquals("us-central1", snitch.getDatacenter(local));
1:         assertEquals("a", snitch.getRack(local));
1:     }
1:     
1:     @Test
1:     public void testNewRegions() throws IOException, ConfigurationException
1:     {
1:         az = "asia-east1-a";
1:         GoogleCloudSnitch snitch = new TestGoogleCloudSnitch();
1:         InetAddress local = InetAddress.getByName("127.0.0.1");
1:         assertEquals("asia-east1", snitch.getDatacenter(local));
1:         assertEquals("a", snitch.getRack(local));
1:     }
1: 
1:     @AfterClass
1:     public static void tearDown()
1:     {
1:         StorageService.instance.stopClient();
1:     }
1: }
============================================================================