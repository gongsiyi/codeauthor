1:ef5bbed: /*
1:ef5bbed:  * Licensed to the Apache Software Foundation (ASF) under one
1:ef5bbed:  * or more contributor license agreements.  See the NOTICE file
1:ef5bbed:  * distributed with this work for additional information
1:ef5bbed:  * regarding copyright ownership.  The ASF licenses this file
1:ef5bbed:  * to you under the Apache License, Version 2.0 (the
1:ef5bbed:  * "License"); you may not use this file except in compliance
1:ef5bbed:  * with the License.  You may obtain a copy of the License at
1:ef5bbed:  *
1:ef5bbed:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ef5bbed:  *
1:ef5bbed:  * Unless required by applicable law or agreed to in writing, software
1:ef5bbed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef5bbed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef5bbed:  * See the License for the specific language governing permissions and
1:ef5bbed:  * limitations under the License.
1:ef5bbed:  */
1:ef5bbed: 
1:ef5bbed: package org.apache.cassandra.cql3;
1:ef5bbed: 
1:ef5bbed: import java.util.Iterator;
1:ef5bbed: import java.util.concurrent.ThreadLocalRandom;
1:ef5bbed: 
1:ef5bbed: import org.junit.Test;
1:ef5bbed: 
1:ef5bbed: import com.datastax.driver.core.*;
1:ef5bbed: import com.datastax.driver.core.ResultSet;
1:ef5bbed: 
1:ef5bbed: import static org.junit.Assert.assertEquals;
1:ef5bbed: import static org.junit.Assert.assertFalse;
1:ef5bbed: import static org.junit.Assert.assertTrue;
1:ef5bbed: 
1:ef5bbed: public class PagingQueryTest extends CQLTester
1:ef5bbed: {
1:ef5bbed:     @Test
1:ef5bbed:     public void pagingOnRegularColumn() throws Throwable
1:ef5bbed:     {
1:ef5bbed:         createTable("CREATE TABLE %s (" +
1:ef5bbed:                     " k1 int," +
1:ef5bbed:                     " c1 int," +
1:ef5bbed:                     " c2 int," +
1:ef5bbed:                     " v1 text," +
1:ef5bbed:                     " v2 text," +
1:ef5bbed:                     " v3 text," +
1:ef5bbed:                     " v4 text," +
1:ef5bbed:                     "PRIMARY KEY (k1, c1, c2))");
1:ef5bbed: 
1:ef5bbed:         for (int c1 = 0; c1 < 100; c1++)
1:ef5bbed:         {
1:ef5bbed:             for (int c2 = 0; c2 < 100; c2++)
1:ef5bbed:             {
1:ef5bbed:                 execute("INSERT INTO %s (k1, c1, c2, v1, v2, v3, v4) VALUES (?, ?, ?, ?, ?, ?, ?)", 1, c1, c2,
1:ef5bbed:                         Integer.toString(c1), Integer.toString(c2), someText(), someText());
1:ef5bbed:             }
1:ef5bbed: 
1:ef5bbed:             if (c1 % 30 == 0)
1:ef5bbed:                 flush();
1:ef5bbed:         }
1:ef5bbed: 
1:ef5bbed:         flush();
1:ef5bbed: 
1:ef5bbed:         try (Session session = sessionNet())
1:ef5bbed:         {
1:ef5bbed:             SimpleStatement stmt = new SimpleStatement("SELECT c1, c2, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE k1 = 1");
1:ef5bbed:             stmt.setFetchSize(3);
1:ef5bbed:             ResultSet rs = session.execute(stmt);
1:ef5bbed:             Iterator<Row> iter = rs.iterator();
1:ef5bbed:             for (int c1 = 0; c1 < 100; c1++)
1:ef5bbed:             {
1:ef5bbed:                 for (int c2 = 0; c2 < 100; c2++)
1:ef5bbed:                 {
1:ef5bbed:                     assertTrue(iter.hasNext());
1:ef5bbed:                     Row row = iter.next();
1:ef5bbed:                     String msg = "On " + c1 + ',' + c2;
1:ef5bbed:                     assertEquals(msg, c1, row.getInt(0));
1:ef5bbed:                     assertEquals(msg, c2, row.getInt(1));
1:ef5bbed:                     assertEquals(msg, Integer.toString(c1), row.getString(2));
1:ef5bbed:                     assertEquals(msg, Integer.toString(c2), row.getString(3));
1:ef5bbed:                 }
1:ef5bbed:             }
1:ef5bbed:             assertFalse(iter.hasNext());
1:ef5bbed: 
1:ef5bbed:             for (int c1 = 0; c1 < 100; c1++)
1:ef5bbed:             {
1:ef5bbed:                 stmt = new SimpleStatement("SELECT c1, c2, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE k1 = 1 AND c1 = ?", c1);
1:ef5bbed:                 stmt.setFetchSize(3);
1:ef5bbed:                 rs = session.execute(stmt);
1:ef5bbed:                 iter = rs.iterator();
1:ef5bbed:                 for (int c2 = 0; c2 < 100; c2++)
1:ef5bbed:                 {
1:ef5bbed:                     assertTrue(iter.hasNext());
1:ef5bbed:                     Row row = iter.next();
1:ef5bbed:                     String msg = "Within " + c1 + " on " + c2;
1:ef5bbed:                     assertEquals(msg, c1, row.getInt(0));
1:ef5bbed:                     assertEquals(msg, c2, row.getInt(1));
1:ef5bbed:                     assertEquals(msg, Integer.toString(c1), row.getString(2));
1:ef5bbed:                     assertEquals(msg, Integer.toString(c2), row.getString(3));
1:ef5bbed:                 }
1:ef5bbed:                 assertFalse(iter.hasNext());
1:ef5bbed:             }
1:ef5bbed:         }
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     private static String someText()
1:ef5bbed:     {
1:ef5bbed:         char[] arr = new char[1024];
1:ef5bbed:         for (int i = 0; i < arr.length; i++)
1:ef5bbed:             arr[i] = (char)(32 + ThreadLocalRandom.current().nextInt(95));
1:ef5bbed:         return new String(arr);
1:ef5bbed:     }
1:ef5bbed: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Iterator;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.junit.Test;
1: 
1: import com.datastax.driver.core.*;
1: import com.datastax.driver.core.ResultSet;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class PagingQueryTest extends CQLTester
1: {
1:     @Test
1:     public void pagingOnRegularColumn() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (" +
1:                     " k1 int," +
1:                     " c1 int," +
1:                     " c2 int," +
1:                     " v1 text," +
1:                     " v2 text," +
1:                     " v3 text," +
1:                     " v4 text," +
1:                     "PRIMARY KEY (k1, c1, c2))");
1: 
1:         for (int c1 = 0; c1 < 100; c1++)
1:         {
1:             for (int c2 = 0; c2 < 100; c2++)
1:             {
1:                 execute("INSERT INTO %s (k1, c1, c2, v1, v2, v3, v4) VALUES (?, ?, ?, ?, ?, ?, ?)", 1, c1, c2,
1:                         Integer.toString(c1), Integer.toString(c2), someText(), someText());
1:             }
1: 
1:             if (c1 % 30 == 0)
1:                 flush();
1:         }
1: 
1:         flush();
1: 
1:         try (Session session = sessionNet())
1:         {
1:             SimpleStatement stmt = new SimpleStatement("SELECT c1, c2, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE k1 = 1");
1:             stmt.setFetchSize(3);
1:             ResultSet rs = session.execute(stmt);
1:             Iterator<Row> iter = rs.iterator();
1:             for (int c1 = 0; c1 < 100; c1++)
1:             {
1:                 for (int c2 = 0; c2 < 100; c2++)
1:                 {
1:                     assertTrue(iter.hasNext());
1:                     Row row = iter.next();
1:                     String msg = "On " + c1 + ',' + c2;
1:                     assertEquals(msg, c1, row.getInt(0));
1:                     assertEquals(msg, c2, row.getInt(1));
1:                     assertEquals(msg, Integer.toString(c1), row.getString(2));
1:                     assertEquals(msg, Integer.toString(c2), row.getString(3));
1:                 }
1:             }
1:             assertFalse(iter.hasNext());
1: 
1:             for (int c1 = 0; c1 < 100; c1++)
1:             {
1:                 stmt = new SimpleStatement("SELECT c1, c2, v1, v2 FROM " + KEYSPACE + '.' + currentTable() + " WHERE k1 = 1 AND c1 = ?", c1);
1:                 stmt.setFetchSize(3);
1:                 rs = session.execute(stmt);
1:                 iter = rs.iterator();
1:                 for (int c2 = 0; c2 < 100; c2++)
1:                 {
1:                     assertTrue(iter.hasNext());
1:                     Row row = iter.next();
1:                     String msg = "Within " + c1 + " on " + c2;
1:                     assertEquals(msg, c1, row.getInt(0));
1:                     assertEquals(msg, c2, row.getInt(1));
1:                     assertEquals(msg, Integer.toString(c1), row.getString(2));
1:                     assertEquals(msg, Integer.toString(c2), row.getString(3));
1:                 }
1:                 assertFalse(iter.hasNext());
1:             }
1:         }
1:     }
1: 
1:     private static String someText()
1:     {
1:         char[] arr = new char[1024];
1:         for (int i = 0; i < arr.length; i++)
1:             arr[i] = (char)(32 + ThreadLocalRandom.current().nextInt(95));
1:         return new String(arr);
1:     }
1: }
============================================================================