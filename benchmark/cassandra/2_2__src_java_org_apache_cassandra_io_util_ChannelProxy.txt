1:cf925bd: /*
1:cf925bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:cf925bd:  * or more contributor license agreements.  See the NOTICE file
1:cf925bd:  * distributed with this work for additional information
1:cf925bd:  * regarding copyright ownership.  The ASF licenses this file
1:cf925bd:  * to you under the Apache License, Version 2.0 (the
1:cf925bd:  * "License"); you may not use this file except in compliance
1:cf925bd:  * with the License.  You may obtain a copy of the License at
1:cf925bd:  *
1:cf925bd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:cf925bd:  *
1:cf925bd:  * Unless required by applicable law or agreed to in writing, software
1:cf925bd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cf925bd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cf925bd:  * See the License for the specific language governing permissions and
1:cf925bd:  * limitations under the License.
1:cf925bd:  */
1:cf925bd: package org.apache.cassandra.io.util;
1:cf925bd: 
1:cf925bd: import java.io.File;
1:cf925bd: import java.io.IOException;
1:cf925bd: import java.nio.ByteBuffer;
1:cf925bd: import java.nio.MappedByteBuffer;
1:cf925bd: import java.nio.channels.FileChannel;
1:cf925bd: import java.nio.channels.WritableByteChannel;
1:cf925bd: import java.nio.file.StandardOpenOption;
1:cf925bd: 
1:cf925bd: import org.apache.cassandra.io.FSReadError;
1:cf925bd: import org.apache.cassandra.utils.CLibrary;
1:cf925bd: import org.apache.cassandra.utils.concurrent.RefCounted;
1:cf925bd: import org.apache.cassandra.utils.concurrent.SharedCloseableImpl;
1:cf925bd: 
1:cf925bd: /**
1:cf925bd:  * A proxy of a FileChannel that:
1:cf925bd:  *
1:cf925bd:  * - implements reference counting
1:cf925bd:  * - exports only thread safe FileChannel operations
1:cf925bd:  * - wraps IO exceptions into runtime exceptions
1:cf925bd:  *
1:cf925bd:  * Tested by RandomAccessReaderTest.
1:cf925bd:  */
1:cf925bd: public final class ChannelProxy extends SharedCloseableImpl
1:cf925bd: {
1:cf925bd:     private final String filePath;
1:cf925bd:     private final FileChannel channel;
1:cf925bd: 
1:cf925bd:     public static FileChannel openChannel(File file)
1:cf925bd:     {
1:cf925bd:         try
1:cf925bd:         {
1:cf925bd:             return FileChannel.open(file.toPath(), StandardOpenOption.READ);
1:cf925bd:         }
1:cf925bd:         catch (IOException e)
1:cf925bd:         {
1:cf925bd:             throw new RuntimeException(e);
1:cf925bd:         }
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public ChannelProxy(String path)
1:cf925bd:     {
1:cf925bd:         this (new File(path));
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public ChannelProxy(File file)
1:cf925bd:     {
1:ce63ccc:         this(file.getPath(), openChannel(file));
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public ChannelProxy(String filePath, FileChannel channel)
1:cf925bd:     {
1:cf925bd:         super(new Cleanup(filePath, channel));
1:cf925bd: 
1:cf925bd:         this.filePath = filePath;
1:cf925bd:         this.channel = channel;
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public ChannelProxy(ChannelProxy copy)
1:cf925bd:     {
1:cf925bd:         super(copy);
1:cf925bd: 
1:cf925bd:         this.filePath = copy.filePath;
1:cf925bd:         this.channel = copy.channel;
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     private final static class Cleanup implements RefCounted.Tidy
1:cf925bd:     {
1:cf925bd:         final String filePath;
1:cf925bd:         final FileChannel channel;
1:cf925bd: 
1:ce63ccc:         Cleanup(String filePath, FileChannel channel)
1:cf925bd:         {
1:cf925bd:             this.filePath = filePath;
1:cf925bd:             this.channel = channel;
1:cf925bd:         }
1:cf925bd: 
1:cf925bd:         public String name()
1:cf925bd:         {
1:cf925bd:             return filePath;
1:cf925bd:         }
1:cf925bd: 
1:cf925bd:         public void tidy()
1:cf925bd:         {
1:cf925bd:             try
1:cf925bd:             {
1:cf925bd:                 channel.close();
1:cf925bd:             }
1:cf925bd:             catch (IOException e)
1:cf925bd:             {
1:cf925bd:                 throw new FSReadError(e, filePath);
1:cf925bd:             }
1:cf925bd:         }
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public ChannelProxy sharedCopy()
1:cf925bd:     {
1:cf925bd:         return new ChannelProxy(this);
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public String filePath()
1:cf925bd:     {
1:cf925bd:         return filePath;
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public int read(ByteBuffer buffer, long position)
1:cf925bd:     {
1:cf925bd:         try
1:cf925bd:         {
1:30bb255:             // FIXME: consider wrapping in a while loop
1:cf925bd:             return channel.read(buffer, position);
1:cf925bd:         }
1:cf925bd:         catch (IOException e)
1:cf925bd:         {
1:cf925bd:             throw new FSReadError(e, filePath);
1:cf925bd:         }
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public long transferTo(long position, long count, WritableByteChannel target)
1:cf925bd:     {
1:cf925bd:         try
1:cf925bd:         {
1:cf925bd:             return channel.transferTo(position, count, target);
1:cf925bd:         }
1:cf925bd:         catch (IOException e)
1:cf925bd:         {
1:cf925bd:             throw new FSReadError(e, filePath);
1:cf925bd:         }
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)
1:cf925bd:     {
1:cf925bd:         try
1:cf925bd:         {
1:cf925bd:             return channel.map(mode, position, size);
1:cf925bd:         }
1:cf925bd:         catch (IOException e)
1:cf925bd:         {
1:cf925bd:             throw new FSReadError(e, filePath);
1:cf925bd:         }
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public long size()
1:cf925bd:     {
1:cf925bd:         try
1:cf925bd:         {
1:cf925bd:             return channel.size();
1:cf925bd:         }
1:cf925bd:         catch (IOException e)
1:cf925bd:         {
1:cf925bd:             throw new FSReadError(e, filePath);
1:cf925bd:         }
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     public int getFileDescriptor()
1:cf925bd:     {
1:cf925bd:         return CLibrary.getfd(channel);
1:cf925bd:     }
1:cf925bd: 
1:cf925bd:     @Override
1:cf925bd:     public String toString()
1:cf925bd:     {
1:cf925bd:         return filePath();
1:cf925bd:     }
1:cf925bd: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1:             // FIXME: consider wrapping in a while loop
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1:         this(file.getPath(), openChannel(file));
/////////////////////////////////////////////////////////////////////////
1:         Cleanup(String filePath, FileChannel channel)
commit:cf925bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.MappedByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.nio.channels.WritableByteChannel;
1: import java.nio.file.StandardOpenOption;
1: 
1: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.utils.CLibrary;
1: import org.apache.cassandra.utils.concurrent.RefCounted;
1: import org.apache.cassandra.utils.concurrent.SharedCloseableImpl;
1: 
1: /**
1:  * A proxy of a FileChannel that:
1:  *
1:  * - implements reference counting
1:  * - exports only thread safe FileChannel operations
1:  * - wraps IO exceptions into runtime exceptions
1:  *
1:  * Tested by RandomAccessReaderTest.
1:  */
1: public final class ChannelProxy extends SharedCloseableImpl
1: {
1:     private final String filePath;
1:     private final FileChannel channel;
1: 
1:     public static FileChannel openChannel(File file)
1:     {
1:         try
1:         {
1:             return FileChannel.open(file.toPath(), StandardOpenOption.READ);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public ChannelProxy(String path)
1:     {
1:         this (new File(path));
1:     }
1: 
1:     public ChannelProxy(File file)
1:     {
0:         this(file.getAbsolutePath(), openChannel(file));
1:     }
1: 
1:     public ChannelProxy(String filePath, FileChannel channel)
1:     {
1:         super(new Cleanup(filePath, channel));
1: 
1:         this.filePath = filePath;
1:         this.channel = channel;
1:     }
1: 
1:     public ChannelProxy(ChannelProxy copy)
1:     {
1:         super(copy);
1: 
1:         this.filePath = copy.filePath;
1:         this.channel = copy.channel;
1:     }
1: 
1:     private final static class Cleanup implements RefCounted.Tidy
1:     {
1:         final String filePath;
1:         final FileChannel channel;
1: 
0:         protected Cleanup(String filePath, FileChannel channel)
1:         {
1:             this.filePath = filePath;
1:             this.channel = channel;
1:         }
1: 
1:         public String name()
1:         {
1:             return filePath;
1:         }
1: 
1:         public void tidy()
1:         {
1:             try
1:             {
1:                 channel.close();
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new FSReadError(e, filePath);
1:             }
1:         }
1:     }
1: 
1:     public ChannelProxy sharedCopy()
1:     {
1:         return new ChannelProxy(this);
1:     }
1: 
1:     public String filePath()
1:     {
1:         return filePath;
1:     }
1: 
1:     public int read(ByteBuffer buffer, long position)
1:     {
1:         try
1:         {
1:             return channel.read(buffer, position);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, filePath);
1:         }
1:     }
1: 
1:     public long transferTo(long position, long count, WritableByteChannel target)
1:     {
1:         try
1:         {
1:             return channel.transferTo(position, count, target);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, filePath);
1:         }
1:     }
1: 
1:     public MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)
1:     {
1:         try
1:         {
1:             return channel.map(mode, position, size);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, filePath);
1:         }
1:     }
1: 
1:     public long size()
1:     {
1:         try
1:         {
1:             return channel.size();
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, filePath);
1:         }
1:     }
1: 
1:     public int getFileDescriptor()
1:     {
1:         return CLibrary.getfd(channel);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return filePath();
1:     }
1: }
============================================================================