1:7536429: package org.apache.cassandra.stress.generate;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:2e1e98a: import org.apache.commons.math3.distribution.AbstractRealDistribution;
1:2e1e98a: 
1:2e1e98a: public class DistributionBoundApache extends Distribution
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     final AbstractRealDistribution delegate;
1:2e1e98a:     final long min, max;
1:2e1e98a: 
1:2e1e98a:     public DistributionBoundApache(AbstractRealDistribution delegate, long min, long max)
1:2e1e98a:     {
1:2e1e98a:         this.delegate = delegate;
1:2e1e98a:         this.min = min;
1:2e1e98a:         this.max = max;
2:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public long next()
1:2e1e98a:     {
1:2e1e98a:         return bound(min, max, delegate.sample());
1:2e1e98a:     }
1:2e1e98a: 
1:7536429:     public double nextDouble()
1:7536429:     {
1:7536429:         return boundDouble(min, max, delegate.sample());
1:7536429:     }
1:7536429: 
1:2e1e98a:     @Override
1:2e1e98a:     public long inverseCumProb(double cumProb)
1:2e1e98a:     {
1:2e1e98a:         return bound(min, max, delegate.inverseCumulativeProbability(cumProb));
1:2e1e98a:     }
1:2e1e98a: 
1:7536429:     public void setSeed(long seed)
1:7536429:     {
1:7536429:         delegate.reseedRandomGenerator(seed);
1:7536429:     }
1:7536429: 
1:2e1e98a:     private static long bound(long min, long max, double val)
1:2e1e98a:     {
1:2e1e98a:         long r = (long) val;
1:b274aa1:         if ((r >= min) && (r <= max))
1:2e1e98a:             return r;
1:2e1e98a:         if (r < min)
1:2e1e98a:             return min;
1:2e1e98a:         if (r > max)
1:2e1e98a:             return max;
1:2e1e98a:         throw new IllegalStateException();
1:9f14856:     }
1:2e1e98a: 
1:7536429:     private static double boundDouble(long min, long max, double r)
1:7536429:     {
1:b274aa1:         if ((r >= min) && (r <= max))
1:7536429:             return r;
1:7536429:         if (r < min)
1:7536429:             return min;
1:7536429:         if (r > max)
1:7536429:             return max;
1:7536429:         throw new IllegalStateException();
1:7536429:     }
1:7536429: 
1:2e1e98a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b274aa1
/////////////////////////////////////////////////////////////////////////
1:         if ((r >= min) && (r <= max))
/////////////////////////////////////////////////////////////////////////
1:         if ((r >= min) && (r <= max))
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.generate;
/////////////////////////////////////////////////////////////////////////
1:     public double nextDouble()
1:     {
1:         return boundDouble(min, max, delegate.sample());
1:     }
1: 
1:     public void setSeed(long seed)
1:     {
1:         delegate.reseedRandomGenerator(seed);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static double boundDouble(long min, long max, double r)
1:     {
0:         if ((r >= min) & (r <= max))
1:             return r;
1:         if (r < min)
1:             return min;
1:         if (r > max)
1:             return max;
1:         throw new IllegalStateException();
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: }
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.stress.generatedata;
1: 
1: import org.apache.commons.math3.distribution.AbstractRealDistribution;
1: 
1: public class DistributionBoundApache extends Distribution
1: {
1: 
1:     final AbstractRealDistribution delegate;
1:     final long min, max;
1: 
1:     public DistributionBoundApache(AbstractRealDistribution delegate, long min, long max)
1:     {
1:         this.delegate = delegate;
1:         this.min = min;
1:         this.max = max;
1:     }
1: 
1:     @Override
1:     public long next()
1:     {
1:         return bound(min, max, delegate.sample());
1:     }
1: 
1:     @Override
1:     public long inverseCumProb(double cumProb)
1:     {
1:         return bound(min, max, delegate.inverseCumulativeProbability(cumProb));
1:     }
1: 
1:     private static long bound(long min, long max, double val)
1:     {
1:         long r = (long) val;
0:         if ((r >= min) & (r <= max))
1:             return r;
1:         if (r < min)
1:             return min;
1:         if (r > max)
1:             return max;
1:         throw new IllegalStateException();
1:     }
1: 
1: }
============================================================================