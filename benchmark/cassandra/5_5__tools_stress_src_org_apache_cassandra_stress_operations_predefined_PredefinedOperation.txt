1:7536429: /**
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  *
1:7536429:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  *
1:7536429:  * Unless required by applicable law or agreed to in writing, software
1:7536429:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7536429:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7536429:  * See the License for the specific language governing permissions and
1:7536429:  * limitations under the License.
1:7536429:  */
1:7536429: package org.apache.cassandra.stress.operations.predefined;
1:7536429: 
1:7536429: import java.nio.ByteBuffer;
1:7536429: import java.util.ArrayList;
1:7536429: import java.util.Arrays;
1:7536429: import java.util.List;
1:7536429: import java.util.concurrent.ThreadLocalRandom;
1:7536429: 
1:7536429: import org.apache.cassandra.stress.Operation;
1:6c579a0: import org.apache.cassandra.stress.generate.*;
1:f27ab29: import org.apache.cassandra.stress.operations.PartitionOperation;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:7536429: import org.apache.cassandra.stress.settings.Command;
1:7536429: import org.apache.cassandra.stress.settings.CqlVersion;
1:7536429: import org.apache.cassandra.stress.settings.StressSettings;
1:7536429: import org.apache.cassandra.thrift.SlicePredicate;
1:7536429: import org.apache.cassandra.thrift.SliceRange;
1:7536429: 
1:f27ab29: public abstract class PredefinedOperation extends PartitionOperation
2:7536429: {
1:0f5e780:     public static final byte[] EMPTY_BYTE_ARRAY = {};
1:7536429:     public final Command type;
1:7536429:     private final Distribution columnCount;
1:7536429:     private Object cqlCache;
1:7536429: 
1:6c579a0:     public PredefinedOperation(Command type, Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings)
1:7536429:     {
1:6d29ed0:         super(timer, settings, spec(generator, seedManager, settings.insert.rowPopulationRatio.get()));
1:7536429:         this.type = type;
1:7536429:         this.columnCount = settings.columns.countDistribution.get();
2:7536429:     }
1:6c579a0: 
1:6d29ed0:     private static DataSpec spec(PartitionGenerator generator, SeedManager seedManager, RatioDistribution rowPopulationCount)
1:6c579a0:     {
1:6d29ed0:         return new DataSpec(generator, seedManager, new DistributionFixed(1), rowPopulationCount, 1);
1:6c579a0:     }
1:7536429: 
1:7536429:     public boolean isCql3()
1:7536429:     {
1:7536429:         return settings.mode.cqlVersion == CqlVersion.CQL3;
1:7536429:     }
1:7536429:     public Object getCqlCache()
1:7536429:     {
1:7536429:         return cqlCache;
1:7536429:     }
1:7536429:     public void storeCqlCache(Object val)
1:7536429:     {
1:7536429:         cqlCache = val;
1:7536429:     }
1:7536429: 
1:7536429:     protected ByteBuffer getKey()
1:7536429:     {
1:7536429:         return (ByteBuffer) partitions.get(0).getPartitionKey(0);
1:7536429:     }
1:7536429: 
1:7536429:     final class ColumnSelection
1:7536429:     {
1:7536429:         final int[] indices;
1:7536429:         final int lb, ub;
1:7536429:         private ColumnSelection(int[] indices, int lb, int ub)
1:7536429:         {
1:7536429:             this.indices = indices;
1:7536429:             this.lb = lb;
1:7536429:             this.ub = ub;
1:7536429:         }
1:7536429: 
1:7536429:         public <V> List<V> select(List<V> in)
1:7536429:         {
1:7536429:             List<V> out = new ArrayList<>();
1:7536429:             if (indices != null)
1:7536429:             {
1:7536429:                 for (int i : indices)
1:7536429:                     out.add(in.get(i));
1:7536429:             }
1:7536429:             else
1:7536429:             {
1:7536429:                 out.addAll(in.subList(lb, ub));
1:7536429:             }
1:7536429:             return out;
1:7536429:         }
1:7536429: 
1:7536429:         int count()
1:7536429:         {
1:7536429:             return indices != null ? indices.length : ub - lb;
1:7536429:         }
1:7536429: 
1:7536429:         SlicePredicate predicate()
1:7536429:         {
1:7536429:             final SlicePredicate predicate = new SlicePredicate();
1:7536429:             if (indices == null)
1:7536429:             {
1:7536429:                 predicate.setSlice_range(new SliceRange()
1:7536429:                                          .setStart(settings.columns.names.get(lb))
1:0f5e780:                                          .setFinish(EMPTY_BYTE_ARRAY)
1:7536429:                                          .setReversed(false)
1:7536429:                                          .setCount(count())
1:7536429:                 );
1:7536429:             }
1:7536429:             else
1:7536429:                 predicate.setColumn_names(select(settings.columns.names));
1:7536429:             return predicate;
1:7536429: 
1:7536429:         }
1:7536429:     }
1:7536429: 
1:7536429:     public String toString()
1:7536429:     {
1:7536429:         return type.toString();
1:7536429:     }
1:7536429: 
1:7536429:     ColumnSelection select()
1:7536429:     {
1:7536429:         if (settings.columns.slice)
1:7536429:         {
1:7536429:             int count = (int) columnCount.next();
1:7536429:             int start;
1:7536429:             if (count == settings.columns.maxColumnsPerKey)
1:7536429:                 start = 0;
1:7536429:             else
1:7536429:                 start = 1 + ThreadLocalRandom.current().nextInt(settings.columns.maxColumnsPerKey - count);
1:7536429:             return new ColumnSelection(null, start, start + count);
1:7536429:         }
1:7536429: 
1:7536429:         int count = (int) columnCount.next();
1:7536429:         int totalCount = settings.columns.names.size();
1:7536429:         if (count == settings.columns.names.size())
1:7536429:             return new ColumnSelection(null, 0, count);
1:7536429:         ThreadLocalRandom rnd = ThreadLocalRandom.current();
1:7536429:         int[] indices = new int[count];
1:7536429:         int c = 0, o = 0;
1:7536429:         while (c < count && count + o < totalCount)
1:7536429:         {
1:7536429:             int leeway = totalCount - (count + o);
1:7536429:             int spreadover = count - c;
1:7536429:             o += Math.round(rnd.nextDouble() * (leeway / (double) spreadover));
1:7536429:             indices[c] = o + c;
1:7536429:             c++;
1:7536429:         }
1:7536429:         while (c < count)
1:7536429:         {
1:7536429:             indices[c] = o + c;
1:7536429:             c++;
1:7536429:         }
1:7536429:         return new ColumnSelection(indices, 0, 0);
1:7536429:     }
1:7536429: 
1:7536429:     protected List<ByteBuffer> getColumnValues()
1:7536429:     {
1:7536429:         return getColumnValues(new ColumnSelection(null, 0, settings.columns.names.size()));
1:7536429:     }
1:7536429: 
1:7536429:     protected List<ByteBuffer> getColumnValues(ColumnSelection columns)
1:7536429:     {
1:6c579a0:         Row row = partitions.get(0).next();
1:7536429:         ByteBuffer[] r = new ByteBuffer[columns.count()];
1:7536429:         int c = 0;
1:7536429:         if (columns.indices != null)
1:7536429:             for (int i : columns.indices)
1:7536429:                 r[c++] = (ByteBuffer) row.get(i);
1:7536429:         else
1:7536429:             for (int i = columns.lb ; i < columns.ub ; i++)
1:7536429:                 r[c++] = (ByteBuffer) row.get(i);
1:7536429:         return Arrays.asList(r);
1:7536429:     }
1:7536429: 
1:6c579a0:     public static Operation operation(Command type, Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings, DistributionFactory counteradd)
1:7536429:     {
1:7536429:         switch (type)
1:7536429:         {
1:7536429:             case READ:
1:7536429:                 switch(settings.mode.style)
1:7536429:                 {
1:7536429:                     case THRIFT:
1:6c579a0:                         return new ThriftReader(timer, generator, seedManager, settings);
1:7536429:                     case CQL:
1:7536429:                     case CQL_PREPARED:
1:6c579a0:                         return new CqlReader(timer, generator, seedManager, settings);
1:7536429:                     default:
1:7536429:                         throw new UnsupportedOperationException();
1:7536429:                 }
1:7536429: 
1:7536429: 
1:7536429:             case COUNTER_READ:
1:7536429:                 switch(settings.mode.style)
1:7536429:                 {
1:7536429:                     case THRIFT:
1:6c579a0:                         return new ThriftCounterGetter(timer, generator, seedManager, settings);
1:7536429:                     case CQL:
1:7536429:                     case CQL_PREPARED:
1:6c579a0:                         return new CqlCounterGetter(timer, generator, seedManager, settings);
1:7536429:                     default:
1:7536429:                         throw new UnsupportedOperationException();
1:7536429:                 }
1:7536429: 
1:7536429:             case WRITE:
1:7536429: 
1:7536429:                 switch(settings.mode.style)
1:7536429:                 {
1:7536429:                     case THRIFT:
1:6c579a0:                         return new ThriftInserter(timer, generator, seedManager, settings);
1:7536429:                     case CQL:
1:7536429:                     case CQL_PREPARED:
1:6c579a0:                         return new CqlInserter(timer, generator, seedManager, settings);
1:7536429:                     default:
1:7536429:                         throw new UnsupportedOperationException();
1:7536429:                 }
1:7536429: 
1:7536429:             case COUNTER_WRITE:
1:7536429:                 switch(settings.mode.style)
1:7536429:                 {
1:7536429:                     case THRIFT:
1:6c579a0:                         return new ThriftCounterAdder(counteradd, timer, generator, seedManager, settings);
1:7536429:                     case CQL:
1:7536429:                     case CQL_PREPARED:
1:6c579a0:                         return new CqlCounterAdder(counteradd, timer, generator, seedManager, settings);
1:7536429:                     default:
1:7536429:                         throw new UnsupportedOperationException();
1:7536429:                 }
1:7536429: 
1:7536429:         }
1:7536429: 
1:7536429:         throw new UnsupportedOperationException();
1:7536429:     }
1:7536429: 
1:7536429: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.operations.PartitionOperation;
/////////////////////////////////////////////////////////////////////////
1: public abstract class PredefinedOperation extends PartitionOperation
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.operations.PartitionOperation;
/////////////////////////////////////////////////////////////////////////
0: public abstract class PredefinedOperation extends PartitionOperation
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
1:     public static final byte[] EMPTY_BYTE_ARRAY = {};
/////////////////////////////////////////////////////////////////////////
1:                                          .setFinish(EMPTY_BYTE_ARRAY)
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:6d29ed0
/////////////////////////////////////////////////////////////////////////
1:         super(timer, settings, spec(generator, seedManager, settings.insert.rowPopulationRatio.get()));
1:     private static DataSpec spec(PartitionGenerator generator, SeedManager seedManager, RatioDistribution rowPopulationCount)
1:         return new DataSpec(generator, seedManager, new DistributionFixed(1), rowPopulationCount, 1);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:36280a0
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.*;
/////////////////////////////////////////////////////////////////////////
1:     public PredefinedOperation(Command type, Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings)
0:         super(timer, settings, spec(generator, seedManager));
0:     private static DataSpec spec(PartitionGenerator generator, SeedManager seedManager)
1:     {
0:         return new DataSpec(generator, seedManager, new DistributionFixed(1), 1);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Row row = partitions.get(0).next();
/////////////////////////////////////////////////////////////////////////
1:     public static Operation operation(Command type, Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings, DistributionFactory counteradd)
/////////////////////////////////////////////////////////////////////////
1:                         return new ThriftReader(timer, generator, seedManager, settings);
1:                         return new CqlReader(timer, generator, seedManager, settings);
/////////////////////////////////////////////////////////////////////////
1:                         return new ThriftCounterGetter(timer, generator, seedManager, settings);
1:                         return new CqlCounterGetter(timer, generator, seedManager, settings);
/////////////////////////////////////////////////////////////////////////
1:                         return new ThriftInserter(timer, generator, seedManager, settings);
1:                         return new CqlInserter(timer, generator, seedManager, settings);
/////////////////////////////////////////////////////////////////////////
1:                         return new ThriftCounterAdder(counteradd, timer, generator, seedManager, settings);
1:                         return new CqlCounterAdder(counteradd, timer, generator, seedManager, settings);
commit:b170b3c
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
0:         Row row = partitions.get(0).iterator(1, false).next().iterator().next();
commit:047c046
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.stress.operations.predefined;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.EnumMap;
1: import java.util.List;
1: import java.util.concurrent.ThreadLocalRandom;
1: 
1: import org.apache.cassandra.stress.Operation;
0: import org.apache.cassandra.stress.StressMetrics;
0: import org.apache.cassandra.stress.generate.Distribution;
0: import org.apache.cassandra.stress.generate.DistributionFactory;
0: import org.apache.cassandra.stress.generate.DistributionFixed;
0: import org.apache.cassandra.stress.generate.PartitionGenerator;
0: import org.apache.cassandra.stress.generate.Row;
1: import org.apache.cassandra.stress.settings.Command;
1: import org.apache.cassandra.stress.settings.CqlVersion;
1: import org.apache.cassandra.stress.settings.StressSettings;
0: import org.apache.cassandra.stress.util.Timer;
0: import org.apache.cassandra.thrift.ColumnParent;
1: import org.apache.cassandra.thrift.SlicePredicate;
1: import org.apache.cassandra.thrift.SliceRange;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
0: public abstract class PredefinedOperation extends Operation
1: {
1:     public final Command type;
1:     private final Distribution columnCount;
1:     private Object cqlCache;
1: 
0:     public PredefinedOperation(Command type, Timer timer, PartitionGenerator generator, StressSettings settings)
1:     {
0:         super(timer, generator, settings, new DistributionFixed(1));
1:         this.type = type;
1:         this.columnCount = settings.columns.countDistribution.get();
1:     }
1: 
1:     public boolean isCql3()
1:     {
1:         return settings.mode.cqlVersion == CqlVersion.CQL3;
1:     }
0:     public boolean isCql2()
1:     {
0:         return settings.mode.cqlVersion == CqlVersion.CQL2;
1:     }
1:     public Object getCqlCache()
1:     {
1:         return cqlCache;
1:     }
1:     public void storeCqlCache(Object val)
1:     {
1:         cqlCache = val;
1:     }
1: 
1:     protected ByteBuffer getKey()
1:     {
1:         return (ByteBuffer) partitions.get(0).getPartitionKey(0);
1:     }
1: 
1:     final class ColumnSelection
1:     {
1:         final int[] indices;
1:         final int lb, ub;
1:         private ColumnSelection(int[] indices, int lb, int ub)
1:         {
1:             this.indices = indices;
1:             this.lb = lb;
1:             this.ub = ub;
1:         }
1: 
1:         public <V> List<V> select(List<V> in)
1:         {
1:             List<V> out = new ArrayList<>();
1:             if (indices != null)
1:             {
1:                 for (int i : indices)
1:                     out.add(in.get(i));
1:             }
1:             else
1:             {
1:                 out.addAll(in.subList(lb, ub));
1:             }
1:             return out;
1:         }
1: 
1:         int count()
1:         {
1:             return indices != null ? indices.length : ub - lb;
1:         }
1: 
1:         SlicePredicate predicate()
1:         {
1:             final SlicePredicate predicate = new SlicePredicate();
1:             if (indices == null)
1:             {
1:                 predicate.setSlice_range(new SliceRange()
1:                                          .setStart(settings.columns.names.get(lb))
0:                                          .setFinish(new byte[] {})
1:                                          .setReversed(false)
1:                                          .setCount(count())
1:                 );
1:             }
1:             else
1:                 predicate.setColumn_names(select(settings.columns.names));
1:             return predicate;
1: 
1:         }
1:     }
1: 
1:     public String toString()
1:     {
1:         return type.toString();
1:     }
1: 
1:     ColumnSelection select()
1:     {
1:         if (settings.columns.slice)
1:         {
1:             int count = (int) columnCount.next();
1:             int start;
1:             if (count == settings.columns.maxColumnsPerKey)
1:                 start = 0;
1:             else
1:                 start = 1 + ThreadLocalRandom.current().nextInt(settings.columns.maxColumnsPerKey - count);
1:             return new ColumnSelection(null, start, start + count);
1:         }
1: 
1:         int count = (int) columnCount.next();
1:         int totalCount = settings.columns.names.size();
1:         if (count == settings.columns.names.size())
1:             return new ColumnSelection(null, 0, count);
1:         ThreadLocalRandom rnd = ThreadLocalRandom.current();
1:         int[] indices = new int[count];
1:         int c = 0, o = 0;
1:         while (c < count && count + o < totalCount)
1:         {
1:             int leeway = totalCount - (count + o);
1:             int spreadover = count - c;
1:             o += Math.round(rnd.nextDouble() * (leeway / (double) spreadover));
1:             indices[c] = o + c;
1:             c++;
1:         }
1:         while (c < count)
1:         {
1:             indices[c] = o + c;
1:             c++;
1:         }
1:         return new ColumnSelection(indices, 0, 0);
1:     }
1: 
1:     protected List<ByteBuffer> getColumnValues()
1:     {
1:         return getColumnValues(new ColumnSelection(null, 0, settings.columns.names.size()));
1:     }
1: 
1:     protected List<ByteBuffer> getColumnValues(ColumnSelection columns)
1:     {
0:         Row row = partitions.get(0).iterator(1).batch(1f).iterator().next();
1:         ByteBuffer[] r = new ByteBuffer[columns.count()];
1:         int c = 0;
1:         if (columns.indices != null)
1:             for (int i : columns.indices)
1:                 r[c++] = (ByteBuffer) row.get(i);
1:         else
1:             for (int i = columns.lb ; i < columns.ub ; i++)
1:                 r[c++] = (ByteBuffer) row.get(i);
1:         return Arrays.asList(r);
1:     }
1: 
0:     public static Operation operation(Command type, Timer timer, PartitionGenerator generator, StressSettings settings, DistributionFactory counteradd)
1:     {
1:         switch (type)
1:         {
1:             case READ:
1:                 switch(settings.mode.style)
1:                 {
1:                     case THRIFT:
0:                         return new ThriftReader(timer, generator, settings);
1:                     case CQL:
1:                     case CQL_PREPARED:
0:                         return new CqlReader(timer, generator, settings);
1:                     default:
1:                         throw new UnsupportedOperationException();
1:                 }
1: 
1: 
1:             case COUNTER_READ:
1:                 switch(settings.mode.style)
1:                 {
1:                     case THRIFT:
0:                         return new ThriftCounterGetter(timer, generator, settings);
1:                     case CQL:
1:                     case CQL_PREPARED:
0:                         return new CqlCounterGetter(timer, generator, settings);
1:                     default:
1:                         throw new UnsupportedOperationException();
1:                 }
1: 
1:             case WRITE:
1: 
1:                 switch(settings.mode.style)
1:                 {
1:                     case THRIFT:
0:                         return new ThriftInserter(timer, generator, settings);
1:                     case CQL:
1:                     case CQL_PREPARED:
0:                         return new CqlInserter(timer, generator, settings);
1:                     default:
1:                         throw new UnsupportedOperationException();
1:                 }
1: 
1:             case COUNTER_WRITE:
1:                 switch(settings.mode.style)
1:                 {
1:                     case THRIFT:
0:                         return new ThriftCounterAdder(counteradd, timer, generator, settings);
1:                     case CQL:
1:                     case CQL_PREPARED:
0:                         return new CqlCounterAdder(counteradd, timer, generator, settings);
1:                     default:
1:                         throw new UnsupportedOperationException();
1:                 }
1: 
1:         }
1: 
1:         throw new UnsupportedOperationException();
1:     }
1: 
1: }
============================================================================