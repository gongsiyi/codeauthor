1:ca2e71c: /*
1:ca2e71c:  * Licensed to the Apache Software Foundation (ASF) under one
1:ca2e71c:  * or more contributor license agreements.  See the NOTICE file
1:ca2e71c:  * distributed with this work for additional information
1:ca2e71c:  * regarding copyright ownership.  The ASF licenses this file
1:ca2e71c:  * to you under the Apache License, Version 2.0 (the
1:ca2e71c:  * "License"); you may not use this file except in compliance
1:ca2e71c:  * with the License.  You may obtain a copy of the License at
1:ca2e71c:  *
1:ca2e71c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ca2e71c:  *
1:ca2e71c:  * Unless required by applicable law or agreed to in writing, software
1:ca2e71c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ca2e71c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ca2e71c:  * See the License for the specific language governing permissions and
1:ca2e71c:  * limitations under the License.
1:ca2e71c:  */
1:ca2e71c: package org.apache.cassandra.cql3.statements;
1:ca2e71c: 
1:4ed0060: import org.apache.cassandra.config.ColumnDefinition;
1:ca2e71c: import org.apache.cassandra.cql3.CQL3Type;
1:ca2e71c: 
1:58abe8a: /**
1:58abe8a:  * Stores a column name and optionally type for an Alter Table statement definition.
1:58abe8a:  *
1:58abe8a:  * This is used by AlterTableStatement to store the added, altered or dropped columns.
1:58abe8a:  */
1:4ed0060: public class AlterTableStatementColumn
1:4ed0060: {
1:ca2e71c:     private final CQL3Type.Raw dataType;
1:4ed0060:     private final ColumnDefinition.Raw colName;
1:ca2e71c:     private final Boolean isStatic;
1:ca2e71c: 
1:4ed0060:     public AlterTableStatementColumn(ColumnDefinition.Raw colName, CQL3Type.Raw dataType, boolean isStatic)
1:4ed0060:     {
1:58abe8a:         assert colName != null;
1:58abe8a:         this.dataType = dataType; // will be null when dropping columns, and never null otherwise (for ADD and ALTER).
1:ca2e71c:         this.colName = colName;
1:ca2e71c:         this.isStatic = isStatic;
1:ca2e71c:     }
1:ca2e71c: 
1:4ed0060:     public AlterTableStatementColumn(ColumnDefinition.Raw colName, CQL3Type.Raw dataType)
1:4ed0060:     {
1:58abe8a:         this(colName, dataType, false);
1:ca2e71c:     }
1:ca2e71c: 
1:4ed0060:     public AlterTableStatementColumn(ColumnDefinition.Raw colName)
1:4ed0060:     {
1:ca2e71c:         this(colName, null, false);
1:ca2e71c:     }
1:ca2e71c: 
1:4ed0060:     public CQL3Type.Raw getColumnType()
1:4ed0060:     {
1:ca2e71c:         return dataType;
1:ca2e71c:     }
1:ca2e71c: 
1:4ed0060:     public ColumnDefinition.Raw getColumnName()
1:4ed0060:     {
1:ca2e71c:         return colName;
1:ca2e71c:     }
1:ca2e71c: 
1:4ed0060:     public Boolean getStaticType()
1:4ed0060:     {
1:ca2e71c:         return isStatic;
1:ca2e71c:     }
1:ca2e71c: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:58abe8a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Stores a column name and optionally type for an Alter Table statement definition.
1:  *
1:  * This is used by AlterTableStatement to store the added, altered or dropped columns.
1:  */
/////////////////////////////////////////////////////////////////////////
1:         assert colName != null;
1:         this.dataType = dataType; // will be null when dropping columns, and never null otherwise (for ADD and ALTER).
1:         this(colName, dataType, false);
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.ColumnDefinition;
1: public class AlterTableStatementColumn
1: {
1:     private final ColumnDefinition.Raw colName;
1:     public AlterTableStatementColumn(ColumnDefinition.Raw colName, CQL3Type.Raw dataType, boolean isStatic)
1:     {
1:     public AlterTableStatementColumn(ColumnDefinition.Raw colName, CQL3Type.Raw dataType)
1:     {
1:     public AlterTableStatementColumn(ColumnDefinition.Raw colName)
1:     {
1:     public CQL3Type.Raw getColumnType()
1:     {
1:     public ColumnDefinition.Raw getColumnName()
1:     {
1:     public Boolean getStaticType()
1:     {
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Amit Singh Chowdhery
-------------------------------------------------------------------------------
commit:ca2e71c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.cql3.ColumnIdentifier;
1: 
0: public class AlterTableStatementColumn {
1:     private final CQL3Type.Raw dataType;
0:     private final ColumnIdentifier.Raw colName;
1:     private final Boolean isStatic;
1: 
0:     public AlterTableStatementColumn(ColumnIdentifier.Raw colName, CQL3Type.Raw dataType, boolean isStatic) {
0:         this.dataType = dataType;
1:         this.colName = colName;
1:         this.isStatic = isStatic;
1:     }
1: 
0:     public AlterTableStatementColumn(ColumnIdentifier.Raw colName, CQL3Type.Raw dataType) {
0:         this(colName, dataType,false );
1:     }
1: 
0:     public AlterTableStatementColumn(ColumnIdentifier.Raw colName) {
1:         this(colName, null, false);
1:     }
1: 
0:     public CQL3Type.Raw getColumnType() {
1:         return dataType;
1:     }
1: 
0:     public ColumnIdentifier.Raw getColumnName() {
1:         return colName;
1:     }
1: 
0:     public Boolean getStaticType() {
1:         return isStatic;
1:     }
1: }
============================================================================