1:94cc9a4: /*
1:94cc9a4:  * Licensed to the Apache Software Foundation (ASF) under one
1:94cc9a4:  * or more contributor license agreements.  See the NOTICE file
1:94cc9a4:  * distributed with this work for additional information
1:94cc9a4:  * regarding copyright ownership.  The ASF licenses this file
1:94cc9a4:  * to you under the Apache License, Version 2.0 (the
1:94cc9a4:  * "License"); you may not use this file except in compliance
1:94cc9a4:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:94cc9a4:  */
1:07cf56f: package org.apache.cassandra.io.sstable;
1:94cc9a4: 
1:97b4589: import java.util.concurrent.atomic.AtomicLong;
2:97b4589: 
1:97b4589: public class BloomFilterTracker
1:97b4589: {
1:5a6e2b0:     private final AtomicLong falsePositiveCount = new AtomicLong(0);
1:5a6e2b0:     private final AtomicLong truePositiveCount = new AtomicLong(0);
1:97b4589:     private long lastFalsePositiveCount = 0L;
1:97b4589:     private long lastTruePositiveCount = 0L;
1:97b4589: 
1:97b4589:     public void addFalsePositive()
1:97b4589:     {
1:97b4589:         falsePositiveCount.incrementAndGet();
1:97b4589:     }
1:97b4589: 
1:97b4589:     public void addTruePositive()
1:97b4589:     {
1:97b4589:         truePositiveCount.incrementAndGet();
1:97b4589:     }
1:97b4589: 
1:97b4589:     public long getFalsePositiveCount()
1:97b4589:     {
1:97b4589:         return falsePositiveCount.get();
1:97b4589:     }
1:97b4589: 
1:97b4589:     public long getRecentFalsePositiveCount()
1:97b4589:     {
1:97b4589:         long fpc = getFalsePositiveCount();
1:97b4589:         try
1:97b4589:         {
1:97b4589:             return (fpc - lastFalsePositiveCount);
1:97b4589:         }
1:97b4589:         finally
1:97b4589:         {
1:97b4589:             lastFalsePositiveCount = fpc;
1:97b4589:         }
1:97b4589:     }
1:97b4589: 
1:97b4589:     public long getTruePositiveCount()
1:97b4589:     {
1:97b4589:         return truePositiveCount.get();
1:97b4589:     }
1:97b4589: 
1:97b4589:     public long getRecentTruePositiveCount()
1:97b4589:     {
1:97b4589:         long tpc = getTruePositiveCount();
1:97b4589:         try
1:97b4589:         {
1:97b4589:             return (tpc - lastTruePositiveCount);
1:97b4589:         }
1:97b4589:         finally
1:97b4589:         {
1:97b4589:             lastTruePositiveCount = tpc;
1:97b4589:         }
1:97b4589:     }
1:97b4589: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicLong falsePositiveCount = new AtomicLong(0);
1:     private final AtomicLong truePositiveCount = new AtomicLong(0);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.io.sstable;
author:Eric Evans
-------------------------------------------------------------------------------
commit:94cc9a4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4ef44c6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.io.sstable;
commit:97b4589
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.io;
1: 
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: public class BloomFilterTracker
1: {
0:     private AtomicLong falsePositiveCount = new AtomicLong(0);
0:     private AtomicLong truePositiveCount = new AtomicLong(0);
1:     private long lastFalsePositiveCount = 0L;
1:     private long lastTruePositiveCount = 0L;
1: 
1:     public void addFalsePositive()
1:     {
1:         falsePositiveCount.incrementAndGet();
1:     }
1: 
1:     public void addTruePositive()
1:     {
1:         truePositiveCount.incrementAndGet();
1:     }
1: 
1:     public long getFalsePositiveCount()
1:     {
1:         return falsePositiveCount.get();
1:     }
1: 
1:     public long getRecentFalsePositiveCount()
1:     {
1:         long fpc = getFalsePositiveCount();
1:         try
1:         {
1:             return (fpc - lastFalsePositiveCount);
1:         }
1:         finally
1:         {
1:             lastFalsePositiveCount = fpc;
1:         }
1:     }
1: 
1:     public long getTruePositiveCount()
1:     {
1:         return truePositiveCount.get();
1:     }
1: 
1:     public long getRecentTruePositiveCount()
1:     {
1:         long tpc = getTruePositiveCount();
1:         try
1:         {
1:             return (tpc - lastTruePositiveCount);
1:         }
1:         finally
1:         {
1:             lastTruePositiveCount = tpc;
1:         }
1:     }
1: }
============================================================================