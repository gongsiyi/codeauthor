1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.HashSet;
1:72790dc: import java.util.Map;
1:72790dc: import java.util.Set;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineBuilder;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineExecutor;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.db.marshal.AsciiType;
1:72790dc: import org.apache.cassandra.db.marshal.UTF8Type;
1:72790dc: import org.apache.cassandra.serializers.MarshalException;
1:72790dc: import org.apache.cassandra.utils.ByteBufferUtil;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Analyzer that does *not* tokenize the input. Optionally will
1:72790dc:  * apply filters for the input output as defined in analyzers options
1:72790dc:  */
1:72790dc: public class NonTokenizingAnalyzer extends AbstractAnalyzer
1:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(NonTokenizingAnalyzer.class);
1:72790dc: 
1:72790dc:     private static final Set<AbstractType<?>> VALID_ANALYZABLE_TYPES = new HashSet<AbstractType<?>>()
1:72790dc:     {{
1:72790dc:             add(UTF8Type.instance);
1:72790dc:             add(AsciiType.instance);
1:72790dc:     }};
1:72790dc: 
1:72790dc:     private AbstractType validator;
1:72790dc:     private NonTokenizingOptions options;
1:72790dc:     private FilterPipelineTask filterPipeline;
1:72790dc: 
1:72790dc:     private ByteBuffer input;
1:72790dc:     private boolean hasNext = false;
1:72790dc: 
1:72790dc:     public void init(Map<String, String> options, AbstractType validator)
1:72790dc:     {
1:72790dc:         init(NonTokenizingOptions.buildFromMap(options), validator);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void init(NonTokenizingOptions tokenizerOptions, AbstractType validator)
1:72790dc:     {
1:72790dc:         this.validator = validator;
1:72790dc:         this.options = tokenizerOptions;
1:72790dc:         this.filterPipeline = getFilterPipeline();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean hasNext()
1:72790dc:     {
1:72790dc:         // check that we know how to handle the input, otherwise bail
1:72790dc:         if (!VALID_ANALYZABLE_TYPES.contains(validator))
1:72790dc:             return false;
1:72790dc: 
1:72790dc:         if (hasNext)
1:72790dc:         {
1:72790dc:             String inputStr;
1:72790dc: 
1:72790dc:             try
1:72790dc:             {
1:72790dc:                 inputStr = validator.getString(input);
1:72790dc:                 if (inputStr == null)
1:72790dc:                     throw new MarshalException(String.format("'null' deserialized value for %s with %s", ByteBufferUtil.bytesToHex(input), validator));
1:72790dc: 
1:72790dc:                 Object pipelineRes = FilterPipelineExecutor.execute(filterPipeline, inputStr);
1:72790dc:                 if (pipelineRes == null)
1:72790dc:                     return false;
1:72790dc: 
1:72790dc:                 next = validator.fromString(normalize((String) pipelineRes));
1:72790dc:                 return true;
1:72790dc:             }
1:72790dc:             catch (MarshalException e)
1:72790dc:             {
1:72790dc:                 logger.error("Failed to deserialize value with " + validator, e);
1:72790dc:                 return false;
1:72790dc:             }
1:72790dc:             finally
1:72790dc:             {
1:72790dc:                 hasNext = false;
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         return false;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void reset(ByteBuffer input)
1:72790dc:     {
1:72790dc:         this.next = null;
1:72790dc:         this.input = input;
1:72790dc:         this.hasNext = true;
1:72790dc:     }
1:72790dc: 
1:72790dc:     private FilterPipelineTask getFilterPipeline()
1:72790dc:     {
1:72790dc:         FilterPipelineBuilder builder = new FilterPipelineBuilder(new BasicResultFilters.NoOperation());
1:72790dc:         if (options.isCaseSensitive() && options.shouldLowerCaseOutput())
1:72790dc:             builder = builder.add("to_lower", new BasicResultFilters.LowerCase());
1:72790dc:         if (options.isCaseSensitive() && options.shouldUpperCaseOutput())
1:72790dc:             builder = builder.add("to_upper", new BasicResultFilters.UpperCase());
1:72790dc:         if (!options.isCaseSensitive())
1:72790dc:             builder = builder.add("to_lower", new BasicResultFilters.LowerCase());
1:72790dc:         return builder.build();
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.cassandra.index.sasi.analyzer.filter.BasicResultFilters;
1: import org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineBuilder;
1: import org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineExecutor;
1: import org.apache.cassandra.index.sasi.analyzer.filter.FilterPipelineTask;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Analyzer that does *not* tokenize the input. Optionally will
1:  * apply filters for the input output as defined in analyzers options
1:  */
1: public class NonTokenizingAnalyzer extends AbstractAnalyzer
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(NonTokenizingAnalyzer.class);
1: 
1:     private static final Set<AbstractType<?>> VALID_ANALYZABLE_TYPES = new HashSet<AbstractType<?>>()
1:     {{
1:             add(UTF8Type.instance);
1:             add(AsciiType.instance);
1:     }};
1: 
1:     private AbstractType validator;
1:     private NonTokenizingOptions options;
1:     private FilterPipelineTask filterPipeline;
1: 
1:     private ByteBuffer input;
1:     private boolean hasNext = false;
1: 
1:     public void init(Map<String, String> options, AbstractType validator)
1:     {
1:         init(NonTokenizingOptions.buildFromMap(options), validator);
1:     }
1: 
1:     public void init(NonTokenizingOptions tokenizerOptions, AbstractType validator)
1:     {
1:         this.validator = validator;
1:         this.options = tokenizerOptions;
1:         this.filterPipeline = getFilterPipeline();
1:     }
1: 
1:     public boolean hasNext()
1:     {
1:         // check that we know how to handle the input, otherwise bail
1:         if (!VALID_ANALYZABLE_TYPES.contains(validator))
1:             return false;
1: 
1:         if (hasNext)
1:         {
1:             String inputStr;
1: 
1:             try
1:             {
1:                 inputStr = validator.getString(input);
1:                 if (inputStr == null)
1:                     throw new MarshalException(String.format("'null' deserialized value for %s with %s", ByteBufferUtil.bytesToHex(input), validator));
1: 
1:                 Object pipelineRes = FilterPipelineExecutor.execute(filterPipeline, inputStr);
1:                 if (pipelineRes == null)
1:                     return false;
1: 
1:                 next = validator.fromString(normalize((String) pipelineRes));
1:                 return true;
1:             }
1:             catch (MarshalException e)
1:             {
1:                 logger.error("Failed to deserialize value with " + validator, e);
1:                 return false;
1:             }
1:             finally
1:             {
1:                 hasNext = false;
1:             }
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public void reset(ByteBuffer input)
1:     {
1:         this.next = null;
1:         this.input = input;
1:         this.hasNext = true;
1:     }
1: 
1:     private FilterPipelineTask getFilterPipeline()
1:     {
1:         FilterPipelineBuilder builder = new FilterPipelineBuilder(new BasicResultFilters.NoOperation());
1:         if (options.isCaseSensitive() && options.shouldLowerCaseOutput())
1:             builder = builder.add("to_lower", new BasicResultFilters.LowerCase());
1:         if (options.isCaseSensitive() && options.shouldUpperCaseOutput())
1:             builder = builder.add("to_upper", new BasicResultFilters.UpperCase());
1:         if (!options.isCaseSensitive())
1:             builder = builder.add("to_lower", new BasicResultFilters.LowerCase());
1:         return builder.build();
1:     }
1: }
============================================================================